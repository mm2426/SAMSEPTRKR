
SAMSEPTRKR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000087a4  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004f4  20000000  004087a4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000024bc  200004f8  00408ca0  000204f8  2**3
                  ALLOC
  3 .stack        00003004  200029b4  0040b15c  000204f8  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000204f4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002051e  2**0
                  CONTENTS, READONLY
  6 .debug_info   000150d1  00000000  00000000  00020577  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003f16  00000000  00000000  00035648  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000f078  00000000  00000000  0003955e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000010d0  00000000  00000000  000485d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000fd0  00000000  00000000  000496a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018bfe  00000000  00000000  0004a676  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000181bf  00000000  00000000  00063274  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000543ca  00000000  00000000  0007b433  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000030e4  00000000  00000000  000cf800  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200059b8 	.word	0x200059b8
  400004:	00402c8d 	.word	0x00402c8d
  400008:	00402c89 	.word	0x00402c89
  40000c:	00402c89 	.word	0x00402c89
  400010:	00402c89 	.word	0x00402c89
  400014:	00402c89 	.word	0x00402c89
  400018:	00402c89 	.word	0x00402c89
	...
  40002c:	00402f95 	.word	0x00402f95
  400030:	00402c89 	.word	0x00402c89
  400034:	00000000 	.word	0x00000000
  400038:	00403011 	.word	0x00403011
  40003c:	0040304d 	.word	0x0040304d
  400040:	00402c89 	.word	0x00402c89
  400044:	00402c89 	.word	0x00402c89
  400048:	00402c89 	.word	0x00402c89
  40004c:	00402c89 	.word	0x00402c89
  400050:	00402c89 	.word	0x00402c89
  400054:	00402c89 	.word	0x00402c89
  400058:	00402c89 	.word	0x00402c89
  40005c:	00000000 	.word	0x00000000
  400060:	00402c89 	.word	0x00402c89
  400064:	00402c89 	.word	0x00402c89
  400068:	00000000 	.word	0x00000000
  40006c:	00402aa1 	.word	0x00402aa1
  400070:	00402ab5 	.word	0x00402ab5
  400074:	00000000 	.word	0x00000000
  400078:	0040233d 	.word	0x0040233d
  40007c:	0040234d 	.word	0x0040234d
	...
  400088:	00402c89 	.word	0x00402c89
  40008c:	004020fd 	.word	0x004020fd
  400090:	0040210d 	.word	0x0040210d
  400094:	00402c89 	.word	0x00402c89
  400098:	00402c89 	.word	0x00402c89
  40009c:	00402c89 	.word	0x00402c89
  4000a0:	00402c89 	.word	0x00402c89
  4000a4:	00402c89 	.word	0x00402c89
	...
  4000b4:	00402c89 	.word	0x00402c89
  4000b8:	00402c89 	.word	0x00402c89
  4000bc:	00402c89 	.word	0x00402c89
  4000c0:	00402c89 	.word	0x00402c89
  4000c4:	00402c89 	.word	0x00402c89
  4000c8:	00402c89 	.word	0x00402c89

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200004f8 	.word	0x200004f8
  4000e8:	00000000 	.word	0x00000000
  4000ec:	004087a4 	.word	0x004087a4

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	200004fc 	.word	0x200004fc
  40011c:	004087a4 	.word	0x004087a4
  400120:	004087a4 	.word	0x004087a4
  400124:	00000000 	.word	0x00000000

00400128 <nvm_init>:

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
  400128:	2801      	cmp	r0, #1
}
  40012a:	bf8c      	ite	hi
  40012c:	f06f 0007 	mvnhi.w	r0, #7
  400130:	2000      	movls	r0, #0
  400132:	4770      	bx	lr

00400134 <nvm_read>:
	return STATUS_OK;
}

status_code_t nvm_read(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
  400134:	b570      	push	{r4, r5, r6, lr}
  400136:	f5ad 6d00 	sub.w	sp, sp, #2048	; 0x800
  40013a:	460e      	mov	r6, r1
  40013c:	4614      	mov	r4, r2
  40013e:	461d      	mov	r5, r3
	switch (mem) {
  400140:	b110      	cbz	r0, 400148 <nvm_read+0x14>
  400142:	2801      	cmp	r0, #1
  400144:	d006      	beq.n	400154 <nvm_read+0x20>
  400146:	e01f      	b.n	400188 <nvm_read+0x54>
	case INT_FLASH:
		memcpy(buffer, (const void *)address, len);
  400148:	461a      	mov	r2, r3
  40014a:	4620      	mov	r0, r4
  40014c:	4b11      	ldr	r3, [pc, #68]	; (400194 <nvm_read+0x60>)
  40014e:	4798      	blx	r3

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
  400150:	2000      	movs	r0, #0
		uint32_t len)
{
	switch (mem) {
	case INT_FLASH:
		memcpy(buffer, (const void *)address, len);
		break;
  400152:	e01b      	b.n	40018c <nvm_read+0x58>
		/*! This function creates a buffer of IFLASH_PAGE_SIZE to
		 * read the data from starting of user signature */
		uint32_t temp_buff[IFLASH_PAGE_SIZE], *buff = buffer;

		/* Read from the starting of user signature */
		if (flash_read_user_signature(temp_buff, len)) {
  400154:	4629      	mov	r1, r5
  400156:	4668      	mov	r0, sp
  400158:	4b0f      	ldr	r3, [pc, #60]	; (400198 <nvm_read+0x64>)
  40015a:	4798      	blx	r3
  40015c:	4603      	mov	r3, r0
  40015e:	b910      	cbnz	r0, 400166 <nvm_read+0x32>
			return ERR_INVALID_ARG;
		}

		/* Calculate offset and copy required number of bytes */
		for (uint16_t i = 0; i < len; i++) {
  400160:	2200      	movs	r2, #0
  400162:	b91d      	cbnz	r5, 40016c <nvm_read+0x38>
  400164:	e00e      	b.n	400184 <nvm_read+0x50>
		 * read the data from starting of user signature */
		uint32_t temp_buff[IFLASH_PAGE_SIZE], *buff = buffer;

		/* Read from the starting of user signature */
		if (flash_read_user_signature(temp_buff, len)) {
			return ERR_INVALID_ARG;
  400166:	f06f 0007 	mvn.w	r0, #7
  40016a:	e00f      	b.n	40018c <nvm_read+0x58>
		}

		/* Calculate offset and copy required number of bytes */
		for (uint16_t i = 0; i < len; i++) {
			*buff = temp_buff[address - IFLASH_ADDR + i];
  40016c:	4433      	add	r3, r6
  40016e:	f5a3 0380 	sub.w	r3, r3, #4194304	; 0x400000
  400172:	f85d 3023 	ldr.w	r3, [sp, r3, lsl #2]
  400176:	f844 3b04 	str.w	r3, [r4], #4
		if (flash_read_user_signature(temp_buff, len)) {
			return ERR_INVALID_ARG;
		}

		/* Calculate offset and copy required number of bytes */
		for (uint16_t i = 0; i < len; i++) {
  40017a:	3201      	adds	r2, #1
  40017c:	b292      	uxth	r2, r2
  40017e:	4613      	mov	r3, r2
  400180:	4295      	cmp	r5, r2
  400182:	d8f3      	bhi.n	40016c <nvm_read+0x38>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
  400184:	2000      	movs	r0, #0
  400186:	e001      	b.n	40018c <nvm_read+0x58>
	}
	break;
#endif

	default:
		return ERR_INVALID_ARG;
  400188:	f06f 0007 	mvn.w	r0, #7
	}

	return STATUS_OK;
}
  40018c:	f50d 6d00 	add.w	sp, sp, #2048	; 0x800
  400190:	bd70      	pop	{r4, r5, r6, pc}
  400192:	bf00      	nop
  400194:	00408191 	.word	0x00408191
  400198:	0040058d 	.word	0x0040058d

0040019c <nvm_write>:

status_code_t nvm_write(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
  40019c:	b538      	push	{r3, r4, r5, lr}
  40019e:	4614      	mov	r4, r2
  4001a0:	461a      	mov	r2, r3
	switch (mem) {
  4001a2:	b110      	cbz	r0, 4001aa <nvm_write+0xe>
  4001a4:	2801      	cmp	r0, #1
  4001a6:	d00c      	beq.n	4001c2 <nvm_write+0x26>
  4001a8:	e015      	b.n	4001d6 <nvm_write+0x3a>
  4001aa:	460d      	mov	r5, r1
	case INT_FLASH:
#if SAM4S

		if (flash_write(address, (const void *)buffer, len, false)) {
  4001ac:	2300      	movs	r3, #0
  4001ae:	4621      	mov	r1, r4
  4001b0:	4628      	mov	r0, r5
  4001b2:	4c0a      	ldr	r4, [pc, #40]	; (4001dc <nvm_write+0x40>)
  4001b4:	47a0      	blx	r4
  4001b6:	2800      	cmp	r0, #0

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
  4001b8:	bf14      	ite	ne
  4001ba:	f06f 0007 	mvnne.w	r0, #7
  4001be:	2000      	moveq	r0, #0
  4001c0:	bd38      	pop	{r3, r4, r5, pc}
#endif
		break;

#if SAM4S
	case INT_USERPAGE:
		if (flash_write_user_signature((const void *)buffer, len)) {
  4001c2:	4611      	mov	r1, r2
  4001c4:	4620      	mov	r0, r4
  4001c6:	4b06      	ldr	r3, [pc, #24]	; (4001e0 <nvm_write+0x44>)
  4001c8:	4798      	blx	r3
  4001ca:	2800      	cmp	r0, #0

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
  4001cc:	bf14      	ite	ne
  4001ce:	f06f 0007 	mvnne.w	r0, #7
  4001d2:	2000      	moveq	r0, #0
  4001d4:	bd38      	pop	{r3, r4, r5, pc}
	}
	break;
#endif

	default:
		return ERR_INVALID_ARG;
  4001d6:	f06f 0007 	mvn.w	r0, #7
	}

	return STATUS_OK;
}
  4001da:	bd38      	pop	{r3, r4, r5, pc}
  4001dc:	004004c5 	.word	0x004004c5
  4001e0:	004005b9 	.word	0x004005b9

004001e4 <get_pdc_peripheral_details>:
 * peripheral that has the start address specified by peripheral_to_find.
 */
portBASE_TYPE get_pdc_peripheral_details(
		const freertos_pdc_peripheral_parameters_t peripheral_array[],
		size_t array_size, void *peripheral_to_find)
{
  4001e4:	b430      	push	{r4, r5}
	size_t x;

	for (x = 0; x < array_size; x++) {
  4001e6:	460d      	mov	r5, r1
  4001e8:	b181      	cbz	r1, 40020c <get_pdc_peripheral_details+0x28>
		if (peripheral_array[x].peripheral_base_address ==
  4001ea:	6803      	ldr	r3, [r0, #0]
  4001ec:	429a      	cmp	r2, r3
  4001ee:	d00a      	beq.n	400206 <get_pdc_peripheral_details+0x22>
  4001f0:	4601      	mov	r1, r0
  4001f2:	2300      	movs	r3, #0
  4001f4:	e003      	b.n	4001fe <get_pdc_peripheral_details+0x1a>
  4001f6:	f851 4f10 	ldr.w	r4, [r1, #16]!
  4001fa:	4294      	cmp	r4, r2
  4001fc:	d005      	beq.n	40020a <get_pdc_peripheral_details+0x26>
		const freertos_pdc_peripheral_parameters_t peripheral_array[],
		size_t array_size, void *peripheral_to_find)
{
	size_t x;

	for (x = 0; x < array_size; x++) {
  4001fe:	3301      	adds	r3, #1
  400200:	429d      	cmp	r5, r3
  400202:	d1f8      	bne.n	4001f6 <get_pdc_peripheral_details+0x12>
  400204:	e002      	b.n	40020c <get_pdc_peripheral_details+0x28>
  400206:	2500      	movs	r5, #0
  400208:	e000      	b.n	40020c <get_pdc_peripheral_details+0x28>
  40020a:	461d      	mov	r5, r3
			break;
		}
	}

	return x;
}
  40020c:	4628      	mov	r0, r5
  40020e:	bc30      	pop	{r4, r5}
  400210:	4770      	bx	lr
  400212:	bf00      	nop

00400214 <check_requested_operating_mode>:
		portBASE_TYPE num_valid_operating_modes)
{
	bool return_value = false;
	portBASE_TYPE index_position;

	for (index_position = 0; index_position < num_valid_operating_modes;
  400214:	2a00      	cmp	r2, #0
  400216:	dd0e      	ble.n	400236 <check_requested_operating_mode+0x22>
			index_position++) {
		if (requested_operation_mode ==
  400218:	780b      	ldrb	r3, [r1, #0]
  40021a:	4283      	cmp	r3, r0
  40021c:	d00d      	beq.n	40023a <check_requested_operating_mode+0x26>
 */
bool check_requested_operating_mode(
		const enum peripheral_operation_mode requested_operation_mode,
		const enum peripheral_operation_mode valid_operating_modes[],
		portBASE_TYPE num_valid_operating_modes)
{
  40021e:	b410      	push	{r4}
  400220:	1c4b      	adds	r3, r1, #1
  400222:	4411      	add	r1, r2
  400224:	e003      	b.n	40022e <check_requested_operating_mode+0x1a>
	bool return_value = false;
	portBASE_TYPE index_position;

	for (index_position = 0; index_position < num_valid_operating_modes;
			index_position++) {
		if (requested_operation_mode ==
  400226:	f813 4b01 	ldrb.w	r4, [r3], #1
  40022a:	4284      	cmp	r4, r0
  40022c:	d007      	beq.n	40023e <check_requested_operating_mode+0x2a>
		portBASE_TYPE num_valid_operating_modes)
{
	bool return_value = false;
	portBASE_TYPE index_position;

	for (index_position = 0; index_position < num_valid_operating_modes;
  40022e:	428b      	cmp	r3, r1
  400230:	d1f9      	bne.n	400226 <check_requested_operating_mode+0x12>
bool check_requested_operating_mode(
		const enum peripheral_operation_mode requested_operation_mode,
		const enum peripheral_operation_mode valid_operating_modes[],
		portBASE_TYPE num_valid_operating_modes)
{
	bool return_value = false;
  400232:	2000      	movs	r0, #0
  400234:	e004      	b.n	400240 <check_requested_operating_mode+0x2c>
  400236:	2000      	movs	r0, #0
			break;
		}
	}

	return return_value;
}
  400238:	4770      	bx	lr

	for (index_position = 0; index_position < num_valid_operating_modes;
			index_position++) {
		if (requested_operation_mode ==
				valid_operating_modes[index_position]) {
			return_value = true;
  40023a:	2001      	movs	r0, #1
  40023c:	4770      	bx	lr
  40023e:	2001      	movs	r0, #1
			break;
		}
	}

	return return_value;
}
  400240:	bc10      	pop	{r4}
  400242:	4770      	bx	lr

00400244 <create_peripheral_control_semaphores>:
 * with the bits set in the options_flags value.
 */
void create_peripheral_control_semaphores(const uint8_t options_flags,
		freertos_dma_event_control_t *tx_dma_control,
		freertos_dma_event_control_t *rx_dma_control)
{
  400244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400246:	4606      	mov	r6, r0
  400248:	460c      	mov	r4, r1
  40024a:	4615      	mov	r5, r2
	/* If the tx driver is to be thread aware then create an access control
	semaphore.  An Rx access mutex is not created in this function as half duplex
	peripherals need only use a single access mutex, and the Tx semaphore is used
	for the purpose.  Full duplex peripherals have extra configuration steps
	that are performed separately. */
	if ((options_flags & USE_TX_ACCESS_SEM) != 0) {
  40024c:	f010 0f01 	tst.w	r0, #1
  400250:	d016      	beq.n	400280 <create_peripheral_control_semaphores+0x3c>
		vSemaphoreCreateBinary(
  400252:	2203      	movs	r2, #3
  400254:	2100      	movs	r1, #0
  400256:	2001      	movs	r0, #1
  400258:	4b27      	ldr	r3, [pc, #156]	; (4002f8 <create_peripheral_control_semaphores+0xb4>)
  40025a:	4798      	blx	r3
  40025c:	6060      	str	r0, [r4, #4]
  40025e:	b130      	cbz	r0, 40026e <create_peripheral_control_semaphores+0x2a>
  400260:	2300      	movs	r3, #0
  400262:	461a      	mov	r2, r3
  400264:	4619      	mov	r1, r3
  400266:	4f25      	ldr	r7, [pc, #148]	; (4002fc <create_peripheral_control_semaphores+0xb8>)
  400268:	47b8      	blx	r7
				tx_dma_control->peripheral_access_sem);
		configASSERT(tx_dma_control->peripheral_access_sem);
  40026a:	6860      	ldr	r0, [r4, #4]
  40026c:	b918      	cbnz	r0, 400276 <create_peripheral_control_semaphores+0x32>
  40026e:	4b24      	ldr	r3, [pc, #144]	; (400300 <create_peripheral_control_semaphores+0xbc>)
  400270:	4798      	blx	r3
  400272:	bf00      	nop
  400274:	e7fd      	b.n	400272 <create_peripheral_control_semaphores+0x2e>
		
		/* Ensure the binary semaphore starts with equal to 1 */
		xSemaphoreGive(tx_dma_control->peripheral_access_sem);
  400276:	2300      	movs	r3, #0
  400278:	461a      	mov	r2, r3
  40027a:	4619      	mov	r1, r3
  40027c:	4f1f      	ldr	r7, [pc, #124]	; (4002fc <create_peripheral_control_semaphores+0xb8>)
  40027e:	47b8      	blx	r7
	}

	/* If the transmit function is only going to return once the transmit is
	complete then create an internal notification semaphore. */
	if ((options_flags & WAIT_TX_COMPLETE) != 0) {
  400280:	f016 0f04 	tst.w	r6, #4
  400284:	d017      	beq.n	4002b6 <create_peripheral_control_semaphores+0x72>
		vSemaphoreCreateBinary(
  400286:	2203      	movs	r2, #3
  400288:	2100      	movs	r1, #0
  40028a:	2001      	movs	r0, #1
  40028c:	4b1a      	ldr	r3, [pc, #104]	; (4002f8 <create_peripheral_control_semaphores+0xb4>)
  40028e:	4798      	blx	r3
  400290:	6020      	str	r0, [r4, #0]
  400292:	b130      	cbz	r0, 4002a2 <create_peripheral_control_semaphores+0x5e>
  400294:	2300      	movs	r3, #0
  400296:	461a      	mov	r2, r3
  400298:	4619      	mov	r1, r3
  40029a:	4f18      	ldr	r7, [pc, #96]	; (4002fc <create_peripheral_control_semaphores+0xb8>)
  40029c:	47b8      	blx	r7
				tx_dma_control->transaction_complete_notification_semaphore);
		configASSERT(
  40029e:	6820      	ldr	r0, [r4, #0]
  4002a0:	b918      	cbnz	r0, 4002aa <create_peripheral_control_semaphores+0x66>
  4002a2:	4b17      	ldr	r3, [pc, #92]	; (400300 <create_peripheral_control_semaphores+0xbc>)
  4002a4:	4798      	blx	r3
  4002a6:	bf00      	nop
  4002a8:	e7fd      	b.n	4002a6 <create_peripheral_control_semaphores+0x62>
				tx_dma_control->transaction_complete_notification_semaphore);

		/* Ensure the semaphore starts in the expected state.  A block time
		of zero can be used here as the semaphore is guaranteed to be
		available (it has only just been created). */
		xSemaphoreTake(
  4002aa:	2300      	movs	r3, #0
  4002ac:	461a      	mov	r2, r3
  4002ae:	4619      	mov	r1, r3
  4002b0:	4c14      	ldr	r4, [pc, #80]	; (400304 <create_peripheral_control_semaphores+0xc0>)
  4002b2:	47a0      	blx	r4
  4002b4:	e001      	b.n	4002ba <create_peripheral_control_semaphores+0x76>
				tx_dma_control->transaction_complete_notification_semaphore,
				0);
	} else {
		tx_dma_control->transaction_complete_notification_semaphore = NULL;
  4002b6:	2300      	movs	r3, #0
  4002b8:	6023      	str	r3, [r4, #0]
	}

	/* If the receive function is only going to return once the receive
	is complete then create an internal notification semaphore. */
	if (((options_flags & WAIT_RX_COMPLETE) != 0) &&
  4002ba:	f016 0f08 	tst.w	r6, #8
  4002be:	d018      	beq.n	4002f2 <create_peripheral_control_semaphores+0xae>
  4002c0:	b1bd      	cbz	r5, 4002f2 <create_peripheral_control_semaphores+0xae>
			(rx_dma_control != NULL)) {
		vSemaphoreCreateBinary(
  4002c2:	2203      	movs	r2, #3
  4002c4:	2100      	movs	r1, #0
  4002c6:	2001      	movs	r0, #1
  4002c8:	4b0b      	ldr	r3, [pc, #44]	; (4002f8 <create_peripheral_control_semaphores+0xb4>)
  4002ca:	4798      	blx	r3
  4002cc:	6028      	str	r0, [r5, #0]
  4002ce:	b130      	cbz	r0, 4002de <create_peripheral_control_semaphores+0x9a>
  4002d0:	2300      	movs	r3, #0
  4002d2:	461a      	mov	r2, r3
  4002d4:	4619      	mov	r1, r3
  4002d6:	4c09      	ldr	r4, [pc, #36]	; (4002fc <create_peripheral_control_semaphores+0xb8>)
  4002d8:	47a0      	blx	r4
				rx_dma_control->transaction_complete_notification_semaphore);
		configASSERT(
  4002da:	6828      	ldr	r0, [r5, #0]
  4002dc:	b918      	cbnz	r0, 4002e6 <create_peripheral_control_semaphores+0xa2>
  4002de:	4b08      	ldr	r3, [pc, #32]	; (400300 <create_peripheral_control_semaphores+0xbc>)
  4002e0:	4798      	blx	r3
  4002e2:	bf00      	nop
  4002e4:	e7fd      	b.n	4002e2 <create_peripheral_control_semaphores+0x9e>
				rx_dma_control->transaction_complete_notification_semaphore);

		/* Ensure the semaphore starts in the expected state.  A block time
		of zero can be used here as the semaphore is guaranteed to be
		available (it has only just been created. */
		xSemaphoreTake(
  4002e6:	2300      	movs	r3, #0
  4002e8:	461a      	mov	r2, r3
  4002ea:	4619      	mov	r1, r3
  4002ec:	4c05      	ldr	r4, [pc, #20]	; (400304 <create_peripheral_control_semaphores+0xc0>)
  4002ee:	47a0      	blx	r4
  4002f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				rx_dma_control->transaction_complete_notification_semaphore,
				0);
	} else {
		rx_dma_control->transaction_complete_notification_semaphore = NULL;
  4002f2:	2300      	movs	r3, #0
  4002f4:	602b      	str	r3, [r5, #0]
  4002f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4002f8:	004033c1 	.word	0x004033c1
  4002fc:	00403415 	.word	0x00403415
  400300:	00402fc5 	.word	0x00402fc5
  400304:	004035c5 	.word	0x004035c5

00400308 <configure_interrupt_controller>:
 * Configure the NVIC to enable, and set the priority of, the interrupt
 * specified by peripheral_irq.
 */
void configure_interrupt_controller(const enum IRQn peripheral_irq,
		uint32_t interrupt_priority)
{
  400308:	b538      	push	{r3, r4, r5, lr}
	configASSERT(interrupt_priority <=
  40030a:	290f      	cmp	r1, #15
  40030c:	d903      	bls.n	400316 <configure_interrupt_controller+0xe>
  40030e:	4b15      	ldr	r3, [pc, #84]	; (400364 <configure_interrupt_controller+0x5c>)
  400310:	4798      	blx	r3
  400312:	bf00      	nop
  400314:	e7fd      	b.n	400312 <configure_interrupt_controller+0xa>
            configLIBRARY_LOWEST_INTERRUPT_PRIORITY);
	configASSERT(interrupt_priority >=
  400316:	2909      	cmp	r1, #9
  400318:	d803      	bhi.n	400322 <configure_interrupt_controller+0x1a>
  40031a:	4b12      	ldr	r3, [pc, #72]	; (400364 <configure_interrupt_controller+0x5c>)
  40031c:	4798      	blx	r3
  40031e:	bf00      	nop
  400320:	e7fd      	b.n	40031e <configure_interrupt_controller+0x16>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400322:	b2c5      	uxtb	r5, r0
  400324:	f005 041f 	and.w	r4, r5, #31
  400328:	2301      	movs	r3, #1
  40032a:	fa03 f404 	lsl.w	r4, r3, r4
  40032e:	0942      	lsrs	r2, r0, #5
  400330:	0092      	lsls	r2, r2, #2
  400332:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
  400336:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
  40033a:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  40033e:	2800      	cmp	r0, #0
  400340:	da06      	bge.n	400350 <configure_interrupt_controller+0x48>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400342:	f005 050f 	and.w	r5, r5, #15
  400346:	010b      	lsls	r3, r1, #4
  400348:	b2db      	uxtb	r3, r3
  40034a:	4907      	ldr	r1, [pc, #28]	; (400368 <configure_interrupt_controller+0x60>)
  40034c:	554b      	strb	r3, [r1, r5]
  40034e:	e007      	b.n	400360 <configure_interrupt_controller+0x58>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400350:	010b      	lsls	r3, r1, #4
  400352:	b2db      	uxtb	r3, r3
  400354:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
  400358:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
  40035c:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400360:	6014      	str	r4, [r2, #0]
  400362:	bd38      	pop	{r3, r4, r5, pc}
  400364:	00402fc5 	.word	0x00402fc5
  400368:	e000ed14 	.word	0xe000ed14

0040036c <freertos_obtain_peripheral_access_semphore>:
		portTickType *max_block_time_ticks)
{
	status_code_t return_value = STATUS_OK;
	xTimeOutType time_out_definition;

	if (dma_event_control->peripheral_access_sem != NULL) {
  40036c:	6843      	ldr	r3, [r0, #4]
  40036e:	b1b3      	cbz	r3, 40039e <freertos_obtain_peripheral_access_semphore+0x32>
 * did not become available within max_block_time_ticks tick periods.
 */
status_code_t freertos_obtain_peripheral_access_semphore(
		freertos_dma_event_control_t *dma_event_control,
		portTickType *max_block_time_ticks)
{
  400370:	b530      	push	{r4, r5, lr}
  400372:	b083      	sub	sp, #12
  400374:	460d      	mov	r5, r1
  400376:	4604      	mov	r4, r0
	status_code_t return_value = STATUS_OK;
	xTimeOutType time_out_definition;

	if (dma_event_control->peripheral_access_sem != NULL) {
		/* Remember the time on entry. */
		vTaskSetTimeOutState(&time_out_definition);
  400378:	4668      	mov	r0, sp
  40037a:	4b0d      	ldr	r3, [pc, #52]	; (4003b0 <freertos_obtain_peripheral_access_semphore+0x44>)
  40037c:	4798      	blx	r3

		/* Wait to get exclusive access to the peripheral. */
		if (xSemaphoreTake(dma_event_control->peripheral_access_sem,
  40037e:	2300      	movs	r3, #0
  400380:	682a      	ldr	r2, [r5, #0]
  400382:	4619      	mov	r1, r3
  400384:	6860      	ldr	r0, [r4, #4]
  400386:	4c0b      	ldr	r4, [pc, #44]	; (4003b4 <freertos_obtain_peripheral_access_semphore+0x48>)
  400388:	47a0      	blx	r4
  40038a:	b150      	cbz	r0, 4003a2 <freertos_obtain_peripheral_access_semphore+0x36>
				*max_block_time_ticks) == pdFAIL) {
			return_value = ERR_TIMEOUT;
		} else {
			/* Adjust the time out value in case the task had to block to
			wait for the semaphore. */
			if (xTaskCheckForTimeOut(&time_out_definition,
  40038c:	4629      	mov	r1, r5
  40038e:	4668      	mov	r0, sp
  400390:	4b09      	ldr	r3, [pc, #36]	; (4003b8 <freertos_obtain_peripheral_access_semphore+0x4c>)
  400392:	4798      	blx	r3
  400394:	2801      	cmp	r0, #1
  400396:	d107      	bne.n	4003a8 <freertos_obtain_peripheral_access_semphore+0x3c>
					max_block_time_ticks) == pdTRUE) {
				*max_block_time_ticks = 0;
  400398:	2000      	movs	r0, #0
  40039a:	6028      	str	r0, [r5, #0]
  40039c:	e005      	b.n	4003aa <freertos_obtain_peripheral_access_semphore+0x3e>
 */
status_code_t freertos_obtain_peripheral_access_semphore(
		freertos_dma_event_control_t *dma_event_control,
		portTickType *max_block_time_ticks)
{
	status_code_t return_value = STATUS_OK;
  40039e:	2000      	movs	r0, #0
			}
		}
	}

	return return_value;
}
  4003a0:	4770      	bx	lr
		vTaskSetTimeOutState(&time_out_definition);

		/* Wait to get exclusive access to the peripheral. */
		if (xSemaphoreTake(dma_event_control->peripheral_access_sem,
				*max_block_time_ticks) == pdFAIL) {
			return_value = ERR_TIMEOUT;
  4003a2:	f06f 0002 	mvn.w	r0, #2
  4003a6:	e000      	b.n	4003aa <freertos_obtain_peripheral_access_semphore+0x3e>
 */
status_code_t freertos_obtain_peripheral_access_semphore(
		freertos_dma_event_control_t *dma_event_control,
		portTickType *max_block_time_ticks)
{
	status_code_t return_value = STATUS_OK;
  4003a8:	2000      	movs	r0, #0
			}
		}
	}

	return return_value;
}
  4003aa:	b003      	add	sp, #12
  4003ac:	bd30      	pop	{r4, r5, pc}
  4003ae:	bf00      	nop
  4003b0:	00403f05 	.word	0x00403f05
  4003b4:	004035c5 	.word	0x004035c5
  4003b8:	00403f2d 	.word	0x00403f2d

004003bc <freertos_start_pdc_transfer>:
 */
void freertos_start_pdc_transfer(
		freertos_dma_event_control_t *dma_event_control,
		const uint8_t *data, size_t len, void *pdc_base_address,
		xSemaphoreHandle notification_semaphore, bool is_transmitting)
{
  4003bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4003be:	b083      	sub	sp, #12
  4003c0:	460e      	mov	r6, r1
  4003c2:	4615      	mov	r5, r2
  4003c4:	461c      	mov	r4, r3
  4003c6:	9b08      	ldr	r3, [sp, #32]
	/* Remember which semaphore is to be used to indicate the end of
	transmission.  If notification_semaphore is NULL then either no
	semaphore is being used, or the driver is using an internal notification
	semaphore because it is configured to wait until the transmit has
	completed before returning. */
	if (notification_semaphore != NULL) {
  4003c8:	b113      	cbz	r3, 4003d0 <freertos_start_pdc_transfer+0x14>
		dma_event_control->transaction_complete_notification_semaphore =
  4003ca:	6003      	str	r3, [r0, #0]
				notification_semaphore;
	}

	/* Ensure the notification semaphore starts in the expected state in case
	the previous PDC transfer didn't complete for any reason. */
	if (dma_event_control->transaction_complete_notification_semaphore !=
  4003cc:	4618      	mov	r0, r3
  4003ce:	e001      	b.n	4003d4 <freertos_start_pdc_transfer+0x18>
  4003d0:	6800      	ldr	r0, [r0, #0]
  4003d2:	b120      	cbz	r0, 4003de <freertos_start_pdc_transfer+0x22>
			NULL) {
		xSemaphoreTake(
  4003d4:	2300      	movs	r3, #0
  4003d6:	461a      	mov	r2, r3
  4003d8:	4619      	mov	r1, r3
  4003da:	4f13      	ldr	r7, [pc, #76]	; (400428 <freertos_start_pdc_transfer+0x6c>)
  4003dc:	47b8      	blx	r7
				dma_event_control->transaction_complete_notification_semaphore,
				0);
	}

	/* Configure the PDC to transmit or receive parameters. */
	pdc_packet.ul_addr = (uint32_t) data;
  4003de:	9600      	str	r6, [sp, #0]
	pdc_packet.ul_size = (uint32_t) len;
  4003e0:	9501      	str	r5, [sp, #4]

	if (is_transmitting == true) {
  4003e2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
  4003e6:	b17b      	cbz	r3, 400408 <freertos_start_pdc_transfer+0x4c>
		pdc_disable_transfer(pdc_base_address, PERIPH_PTCR_TXTDIS);
  4003e8:	f44f 7100 	mov.w	r1, #512	; 0x200
  4003ec:	4620      	mov	r0, r4
  4003ee:	4b0f      	ldr	r3, [pc, #60]	; (40042c <freertos_start_pdc_transfer+0x70>)
  4003f0:	4798      	blx	r3
		pdc_tx_init(pdc_base_address, &pdc_packet, NULL);
  4003f2:	2200      	movs	r2, #0
  4003f4:	4669      	mov	r1, sp
  4003f6:	4620      	mov	r0, r4
  4003f8:	4b0d      	ldr	r3, [pc, #52]	; (400430 <freertos_start_pdc_transfer+0x74>)
  4003fa:	4798      	blx	r3
		pdc_enable_transfer(pdc_base_address, PERIPH_PTCR_TXTEN);
  4003fc:	f44f 7180 	mov.w	r1, #256	; 0x100
  400400:	4620      	mov	r0, r4
  400402:	4b0c      	ldr	r3, [pc, #48]	; (400434 <freertos_start_pdc_transfer+0x78>)
  400404:	4798      	blx	r3
  400406:	e00c      	b.n	400422 <freertos_start_pdc_transfer+0x66>
	} else {
		pdc_disable_transfer(pdc_base_address, PERIPH_PTCR_RXTDIS);
  400408:	2102      	movs	r1, #2
  40040a:	4620      	mov	r0, r4
  40040c:	4b07      	ldr	r3, [pc, #28]	; (40042c <freertos_start_pdc_transfer+0x70>)
  40040e:	4798      	blx	r3
		pdc_rx_init(pdc_base_address, &pdc_packet, NULL);
  400410:	2200      	movs	r2, #0
  400412:	4669      	mov	r1, sp
  400414:	4620      	mov	r0, r4
  400416:	4b08      	ldr	r3, [pc, #32]	; (400438 <freertos_start_pdc_transfer+0x7c>)
  400418:	4798      	blx	r3
		pdc_enable_transfer(pdc_base_address, PERIPH_PTCR_RXTEN);
  40041a:	2101      	movs	r1, #1
  40041c:	4620      	mov	r0, r4
  40041e:	4b05      	ldr	r3, [pc, #20]	; (400434 <freertos_start_pdc_transfer+0x78>)
  400420:	4798      	blx	r3
	}
}
  400422:	b003      	add	sp, #12
  400424:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400426:	bf00      	nop
  400428:	004035c5 	.word	0x004035c5
  40042c:	00402399 	.word	0x00402399
  400430:	0040235d 	.word	0x0040235d
  400434:	0040238d 	.word	0x0040238d
  400438:	00402375 	.word	0x00402375

0040043c <freertos_optionally_wait_transfer_completion>:
		xSemaphoreHandle notification_semaphore,
		portTickType max_block_time_ticks)
{
	status_code_t return_value = STATUS_OK;

	if (notification_semaphore == NULL) {
  40043c:	b961      	cbnz	r1, 400458 <freertos_optionally_wait_transfer_completion+0x1c>
		if (dma_event_control->transaction_complete_notification_semaphore !=
  40043e:	6800      	ldr	r0, [r0, #0]
  400440:	b160      	cbz	r0, 40045c <freertos_optionally_wait_transfer_completion+0x20>
 */
status_code_t freertos_optionally_wait_transfer_completion(
		freertos_dma_event_control_t *dma_event_control,
		xSemaphoreHandle notification_semaphore,
		portTickType max_block_time_ticks)
{
  400442:	b510      	push	{r4, lr}
	if (notification_semaphore == NULL) {
		if (dma_event_control->transaction_complete_notification_semaphore !=
				NULL) {
			/* Wait until notified by the ISR that transmission is
			complete. */
			if (xSemaphoreTake(dma_event_control->
  400444:	2300      	movs	r3, #0
  400446:	4619      	mov	r1, r3
  400448:	4c05      	ldr	r4, [pc, #20]	; (400460 <freertos_optionally_wait_transfer_completion+0x24>)
  40044a:	47a0      	blx	r4
					transaction_complete_notification_semaphore,
					max_block_time_ticks) != pdPASS) {
				return_value = ERR_TIMEOUT;
  40044c:	2801      	cmp	r0, #1
  40044e:	bf0c      	ite	eq
  400450:	2000      	moveq	r0, #0
  400452:	f06f 0002 	mvnne.w	r0, #2
  400456:	bd10      	pop	{r4, pc}
status_code_t freertos_optionally_wait_transfer_completion(
		freertos_dma_event_control_t *dma_event_control,
		xSemaphoreHandle notification_semaphore,
		portTickType max_block_time_ticks)
{
	status_code_t return_value = STATUS_OK;
  400458:	2000      	movs	r0, #0
  40045a:	4770      	bx	lr
  40045c:	2000      	movs	r0, #0
  40045e:	4770      	bx	lr
  400460:	004035c5 	.word	0x004035c5

00400464 <efc_perform_command>:
{
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
  400464:	f1a1 030e 	sub.w	r3, r1, #14
  400468:	2b01      	cmp	r3, #1
  40046a:	d921      	bls.n	4004b0 <efc_perform_command+0x4c>
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
  40046c:	b510      	push	{r4, lr}
  40046e:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400470:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400474:	fab3 f383 	clz	r3, r3
  400478:	095b      	lsrs	r3, r3, #5
  40047a:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40047c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40047e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400482:	2400      	movs	r4, #0
  400484:	4b0d      	ldr	r3, [pc, #52]	; (4004bc <efc_perform_command+0x58>)
  400486:	701c      	strb	r4, [r3, #0]
	return flags;
  400488:	9c01      	ldr	r4, [sp, #4]
		return EFC_RC_NOT_SUPPORT;
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
  40048a:	0212      	lsls	r2, r2, #8
  40048c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
  400490:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
  400494:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
  400498:	b2c9      	uxtb	r1, r1
  40049a:	4311      	orrs	r1, r2
  40049c:	4b08      	ldr	r3, [pc, #32]	; (4004c0 <efc_perform_command+0x5c>)
  40049e:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4004a0:	b14c      	cbz	r4, 4004b6 <efc_perform_command+0x52>
		cpu_irq_enable();
  4004a2:	2201      	movs	r2, #1
  4004a4:	4b05      	ldr	r3, [pc, #20]	; (4004bc <efc_perform_command+0x58>)
  4004a6:	701a      	strb	r2, [r3, #0]
  4004a8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4004ac:	b662      	cpsie	i
  4004ae:	e002      	b.n	4004b6 <efc_perform_command+0x52>
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
		return EFC_RC_NOT_SUPPORT;
  4004b0:	f04f 30ff 	mov.w	r0, #4294967295
  4004b4:	4770      	bx	lr
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
	cpu_irq_restore(flags);
	return result;
}
  4004b6:	b002      	add	sp, #8
  4004b8:	bd10      	pop	{r4, pc}
  4004ba:	bf00      	nop
  4004bc:	200000ac 	.word	0x200000ac
  4004c0:	2000006d 	.word	0x2000006d

004004c4 <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
  4004c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4004c8:	b085      	sub	sp, #20
  4004ca:	9100      	str	r1, [sp, #0]
  4004cc:	9303      	str	r3, [sp, #12]
#else
	Assert(ul_addr >= IFLASH_ADDR);
	Assert(ul_addr <= (IFLASH_ADDR + IFLASH_SIZE));

	p_efc = EFC;
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
  4004ce:	f5a0 0380 	sub.w	r3, r0, #4194304	; 0x400000
  4004d2:	f3c3 2b4f 	ubfx	fp, r3, #9, #16
	us_offset = (ul_addr - IFLASH_ADDR) % IFLASH_PAGE_SIZE;
  4004d6:	f3c0 0708 	ubfx	r7, r0, #0, #9
#else
	UNUSED(ul_fws_temp);
#endif

	/* Write all pages */
	while (ul_size > 0) {
  4004da:	2a00      	cmp	r2, #0
  4004dc:	d049      	beq.n	400572 <flash_write+0xae>
  4004de:	4692      	mov	sl, r2
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
  4004e0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 400588 <flash_write+0xc4>
  4004e4:	f509 75fe 	add.w	r5, r9, #508	; 0x1fc
#endif

	/* Write all pages */
	while (ul_size > 0) {
		/* Copy data in temporary buffer to avoid alignment problems. */
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
  4004e8:	f5c7 7300 	rsb	r3, r7, #512	; 0x200
  4004ec:	9302      	str	r3, [sp, #8]
  4004ee:	461c      	mov	r4, r3
  4004f0:	4553      	cmp	r3, sl
  4004f2:	bf28      	it	cs
  4004f4:	4654      	movcs	r4, sl
/* One bank flash */
#else
	/* avoid Cppcheck Warning */
	UNUSED(p_efc);
	/* Compute address */
	ul_addr = IFLASH_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
  4004f6:	f8cd b004 	str.w	fp, [sp, #4]
  4004fa:	f50b 5300 	add.w	r3, fp, #8192	; 0x2000
  4004fe:	ea4f 2843 	mov.w	r8, r3, lsl #9
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
  400502:	463a      	mov	r2, r7
  400504:	4641      	mov	r1, r8
  400506:	4648      	mov	r0, r9
  400508:	4e1c      	ldr	r6, [pc, #112]	; (40057c <flash_write+0xb8>)
  40050a:	47b0      	blx	r6

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
  40050c:	4622      	mov	r2, r4
  40050e:	9900      	ldr	r1, [sp, #0]
  400510:	eb09 0007 	add.w	r0, r9, r7
  400514:	47b0      	blx	r6

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
  400516:	1938      	adds	r0, r7, r4
  400518:	9a02      	ldr	r2, [sp, #8]
  40051a:	1b12      	subs	r2, r2, r4
  40051c:	eb04 0108 	add.w	r1, r4, r8
  400520:	b292      	uxth	r2, r2
  400522:	4439      	add	r1, r7
  400524:	4448      	add	r0, r9
  400526:	47b0      	blx	r6
  400528:	f1a9 0304 	sub.w	r3, r9, #4
  40052c:	f1a8 0204 	sub.w	r2, r8, #4
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
  400530:	f853 1f04 	ldr.w	r1, [r3, #4]!
  400534:	f842 1f04 	str.w	r1, [r2, #4]!
		/* Write page.
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
  400538:	42ab      	cmp	r3, r5
  40053a:	d1f9      	bne.n	400530 <flash_write+0x6c>
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
		}

		if (ul_erase_flag) {
  40053c:	9b03      	ldr	r3, [sp, #12]
  40053e:	b12b      	cbz	r3, 40054c <flash_write+0x88>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
  400540:	9a01      	ldr	r2, [sp, #4]
  400542:	2103      	movs	r1, #3
  400544:	480e      	ldr	r0, [pc, #56]	; (400580 <flash_write+0xbc>)
  400546:	4b0f      	ldr	r3, [pc, #60]	; (400584 <flash_write+0xc0>)
  400548:	4798      	blx	r3
  40054a:	e004      	b.n	400556 <flash_write+0x92>
					us_page);
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
  40054c:	9a01      	ldr	r2, [sp, #4]
  40054e:	2101      	movs	r1, #1
  400550:	480b      	ldr	r0, [pc, #44]	; (400580 <flash_write+0xbc>)
  400552:	4b0c      	ldr	r3, [pc, #48]	; (400584 <flash_write+0xc0>)
  400554:	4798      	blx	r3
					us_page);
		}

		if (ul_error) {
  400556:	b968      	cbnz	r0, 400574 <flash_write+0xb0>
			return ul_error;
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
  400558:	9b00      	ldr	r3, [sp, #0]
  40055a:	4423      	add	r3, r4
  40055c:	9300      	str	r3, [sp, #0]
		ul_size -= writeSize;
		us_page++;
  40055e:	f10b 0b01 	add.w	fp, fp, #1
  400562:	fa1f fb8b 	uxth.w	fp, fp
		us_offset = 0;
  400566:	2700      	movs	r7, #0
#else
	UNUSED(ul_fws_temp);
#endif

	/* Write all pages */
	while (ul_size > 0) {
  400568:	ebba 0a04 	subs.w	sl, sl, r4
  40056c:	d1bc      	bne.n	4004e8 <flash_write+0x24>
#if SAM3S || SAM3N || SAM3XA || SAM3U
	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
#endif

	return FLASH_RC_OK;
  40056e:	4638      	mov	r0, r7
  400570:	e000      	b.n	400574 <flash_write+0xb0>
  400572:	2000      	movs	r0, #0
}
  400574:	b005      	add	sp, #20
  400576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40057a:	bf00      	nop
  40057c:	00408191 	.word	0x00408191
  400580:	400e0a00 	.word	0x400e0a00
  400584:	00400465 	.word	0x00400465
  400588:	20000514 	.word	0x20000514

0040058c <flash_read_user_signature>:
 * \param ul_size Data buffer size in 32 bit words.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_user_signature(uint32_t *p_data, uint32_t ul_size)
{
  40058c:	b510      	push	{r4, lr}
  40058e:	b082      	sub	sp, #8
		/* Only 512 byte to store user signature */
		ul_size = FLASH_USER_SIG_SIZE / sizeof(uint32_t);
	}

	/* Send the read user signature commands */
	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUS,
  400590:	2980      	cmp	r1, #128	; 0x80
  400592:	bf28      	it	cs
  400594:	2180      	movcs	r1, #128	; 0x80
  400596:	9100      	str	r1, [sp, #0]
  400598:	4603      	mov	r3, r0
  40059a:	2215      	movs	r2, #21
  40059c:	2114      	movs	r1, #20
  40059e:	4804      	ldr	r0, [pc, #16]	; (4005b0 <flash_read_user_signature+0x24>)
  4005a0:	4c04      	ldr	r4, [pc, #16]	; (4005b4 <flash_read_user_signature+0x28>)
  4005a2:	47a0      	blx	r4
  4005a4:	2800      	cmp	r0, #0
			EFC_FCMD_SPUS, p_data, ul_size)) {
		return FLASH_RC_ERROR;
	}

	return FLASH_RC_OK;
}
  4005a6:	bf18      	it	ne
  4005a8:	2010      	movne	r0, #16
  4005aa:	b002      	add	sp, #8
  4005ac:	bd10      	pop	{r4, pc}
  4005ae:	bf00      	nop
  4005b0:	400e0a00 	.word	0x400e0a00
  4005b4:	20000001 	.word	0x20000001

004005b8 <flash_write_user_signature>:
{
	uint32_t ul_idx;
	uint32_t *p_dest;

	/* The user signature should be no longer than 512 bytes */
	if (ul_size > (IFLASH_PAGE_SIZE / sizeof(uint32_t))) {
  4005b8:	2980      	cmp	r1, #128	; 0x80
  4005ba:	d81a      	bhi.n	4005f2 <flash_write_user_signature+0x3a>
 * \param ul_size Data buffer size in 32 bit words.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_write_user_signature(const void *p_buffer, uint32_t ul_size)
{
  4005bc:	b510      	push	{r4, lr}
  4005be:	460a      	mov	r2, r1
  4005c0:	4601      	mov	r1, r0
	if (ul_size > (IFLASH_PAGE_SIZE / sizeof(uint32_t))) {
		return FLASH_RC_INVALID;
	}

	/* Copy Buffer data */
	memcpy((uint8_t *) gs_ul_page_buffer, p_buffer, 
  4005c2:	4c0d      	ldr	r4, [pc, #52]	; (4005f8 <flash_write_user_signature+0x40>)
  4005c4:	0092      	lsls	r2, r2, #2
  4005c6:	4620      	mov	r0, r4
  4005c8:	4b0c      	ldr	r3, [pc, #48]	; (4005fc <flash_write_user_signature+0x44>)
  4005ca:	4798      	blx	r3
  4005cc:	1f23      	subs	r3, r4, #4
  4005ce:	f504 70fe 	add.w	r0, r4, #508	; 0x1fc
  4005d2:	4a0b      	ldr	r2, [pc, #44]	; (400600 <flash_write_user_signature+0x48>)
	* unpredictable data corruption.
	*/
	p_dest = (uint32_t *)IFLASH_ADDR;
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t)); 
			ul_idx++) {
		*p_dest++ = gs_ul_page_buffer[ul_idx];
  4005d4:	f853 1f04 	ldr.w	r1, [r3, #4]!
  4005d8:	f842 1f04 	str.w	r1, [r2, #4]!
	/* Write page buffer.
	* Writing 8-bit and 16-bit data is not allowed and may lead to
	* unpredictable data corruption.
	*/
	p_dest = (uint32_t *)IFLASH_ADDR;
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t)); 
  4005dc:	4283      	cmp	r3, r0
  4005de:	d1f9      	bne.n	4005d4 <flash_write_user_signature+0x1c>
			ul_idx++) {
		*p_dest++ = gs_ul_page_buffer[ul_idx];
	}

	/* Send the write signature command */
	if (FLASH_RC_OK != efc_perform_command(EFC, EFC_FCMD_WUS, 0)) {
  4005e0:	2200      	movs	r2, #0
  4005e2:	2112      	movs	r1, #18
  4005e4:	4807      	ldr	r0, [pc, #28]	; (400604 <flash_write_user_signature+0x4c>)
  4005e6:	4b08      	ldr	r3, [pc, #32]	; (400608 <flash_write_user_signature+0x50>)
  4005e8:	4798      	blx	r3
  4005ea:	2800      	cmp	r0, #0
		return FLASH_RC_ERROR;
  4005ec:	bf18      	it	ne
  4005ee:	2010      	movne	r0, #16
  4005f0:	bd10      	pop	{r4, pc}
	uint32_t ul_idx;
	uint32_t *p_dest;

	/* The user signature should be no longer than 512 bytes */
	if (ul_size > (IFLASH_PAGE_SIZE / sizeof(uint32_t))) {
		return FLASH_RC_INVALID;
  4005f2:	2011      	movs	r0, #17
  4005f4:	4770      	bx	lr
  4005f6:	bf00      	nop
  4005f8:	20000514 	.word	0x20000514
  4005fc:	00408191 	.word	0x00408191
  400600:	003ffffc 	.word	0x003ffffc
  400604:	400e0a00 	.word	0x400e0a00
  400608:	00400465 	.word	0x00400465

0040060c <DSGetTimeTo>:
*/

#include "DS3231RTOS.h"

void DSGetTimeTo(freertos_twi_if port, uint16_t *recvTime, int timeOut)
{
  40060c:	b530      	push	{r4, r5, lr}
  40060e:	b087      	sub	sp, #28
  400610:	460c      	mov	r4, r1
    uint8_t buff[3];
	twi_packet_t pkt;
	
	pkt.chip = DS_ADDR;
  400612:	2368      	movs	r3, #104	; 0x68
  400614:	f88d 3010 	strb.w	r3, [sp, #16]
	pkt.addr[0] = DS_REG_SEC;
  400618:	2300      	movs	r3, #0
  40061a:	f88d 3000 	strb.w	r3, [sp]
	pkt.addr_length = 1;
  40061e:	2101      	movs	r1, #1
  400620:	9101      	str	r1, [sp, #4]
	pkt.buffer = buff;
  400622:	a905      	add	r1, sp, #20
  400624:	9102      	str	r1, [sp, #8]
	pkt.length = 3;
  400626:	2103      	movs	r1, #3
  400628:	9103      	str	r1, [sp, #12]
	freertos_twi_read_packet(port, &pkt,timeOut);
  40062a:	4669      	mov	r1, sp
  40062c:	4d06      	ldr	r5, [pc, #24]	; (400648 <DSGetTimeTo+0x3c>)
  40062e:	47a8      	blx	r5

	//SS
	recvTime[0] = buff[0];
  400630:	f89d 3014 	ldrb.w	r3, [sp, #20]
  400634:	8023      	strh	r3, [r4, #0]
	//MM
	recvTime[1] = buff[1];
  400636:	f89d 3015 	ldrb.w	r3, [sp, #21]
  40063a:	8063      	strh	r3, [r4, #2]
	//HH
	recvTime[2] = buff[2];
  40063c:	f89d 3016 	ldrb.w	r3, [sp, #22]
  400640:	80a3      	strh	r3, [r4, #4]
}
  400642:	b007      	add	sp, #28
  400644:	bd30      	pop	{r4, r5, pc}
  400646:	bf00      	nop
  400648:	00401f1d 	.word	0x00401f1d

0040064c <DSGetFullDateTo>:
{
    DSWriteByteTo(port, DS_REG_HRS, hh, timeOut);
}

void DSGetFullDateTo(freertos_twi_if port, uint16_t *recvDate, int timeOut)
{
  40064c:	b530      	push	{r4, r5, lr}
  40064e:	b087      	sub	sp, #28
  400650:	460c      	mov	r4, r1
    uint8_t buff[4];
    twi_packet_t pkt;
    
    pkt.chip = DS_ADDR;
  400652:	2368      	movs	r3, #104	; 0x68
  400654:	f88d 3010 	strb.w	r3, [sp, #16]
    pkt.addr[0] = DS_REG_DAY;
  400658:	2303      	movs	r3, #3
  40065a:	f88d 3000 	strb.w	r3, [sp]
    pkt.addr_length = 1;
  40065e:	2301      	movs	r3, #1
  400660:	9301      	str	r3, [sp, #4]
    pkt.buffer = buff;
  400662:	ab05      	add	r3, sp, #20
  400664:	9302      	str	r3, [sp, #8]
    pkt.length = 4;
  400666:	2304      	movs	r3, #4
  400668:	9303      	str	r3, [sp, #12]
    freertos_twi_read_packet(port, &pkt,timeOut);
  40066a:	2300      	movs	r3, #0
  40066c:	4669      	mov	r1, sp
  40066e:	4d08      	ldr	r5, [pc, #32]	; (400690 <DSGetFullDateTo+0x44>)
  400670:	47a8      	blx	r5
	//DAY
    recvDate[0] = buff[0];
  400672:	f89d 3014 	ldrb.w	r3, [sp, #20]
  400676:	8023      	strh	r3, [r4, #0]
    //DD
	recvDate[1] = buff[1];
  400678:	f89d 3015 	ldrb.w	r3, [sp, #21]
  40067c:	8063      	strh	r3, [r4, #2]
    //MM
	recvDate[2] = buff[2];
  40067e:	f89d 3016 	ldrb.w	r3, [sp, #22]
  400682:	80a3      	strh	r3, [r4, #4]
	//YY
	recvDate[3] = buff[3];
  400684:	f89d 3017 	ldrb.w	r3, [sp, #23]
  400688:	80e3      	strh	r3, [r4, #6]
}
  40068a:	b007      	add	sp, #28
  40068c:	bd30      	pop	{r4, r5, pc}
  40068e:	bf00      	nop
  400690:	00401f1d 	.word	0x00401f1d

00400694 <DSWriteByteTo>:
	freertos_twi_read_packet(port, &pkt,timeOut);
	*temp = (((uint16_t)buff[0])<<8) | buff[1];
}

void DSWriteByteTo(freertos_twi_if port, uint8_t reg, uint8_t data, int timeOut)
{
  400694:	b510      	push	{r4, lr}
  400696:	b088      	sub	sp, #32
  400698:	461c      	mov	r4, r3
  40069a:	f88d 2007 	strb.w	r2, [sp, #7]
    twi_packet_t pkt;
    
    pkt.chip = DS_ADDR;
  40069e:	2368      	movs	r3, #104	; 0x68
  4006a0:	f88d 301c 	strb.w	r3, [sp, #28]
    pkt.addr[0] = reg;
  4006a4:	f88d 100c 	strb.w	r1, [sp, #12]
    pkt.addr_length = 1;
  4006a8:	2301      	movs	r3, #1
  4006aa:	9304      	str	r3, [sp, #16]
    pkt.buffer = &data;
  4006ac:	f10d 0207 	add.w	r2, sp, #7
  4006b0:	9205      	str	r2, [sp, #20]
    pkt.length = 1;
  4006b2:	9306      	str	r3, [sp, #24]
	
	freertos_twi_write_packet(port, &pkt, timeOut);
  4006b4:	2300      	movs	r3, #0
  4006b6:	4622      	mov	r2, r4
  4006b8:	a903      	add	r1, sp, #12
  4006ba:	4c02      	ldr	r4, [pc, #8]	; (4006c4 <DSWriteByteTo+0x30>)
  4006bc:	47a0      	blx	r4
}
  4006be:	b008      	add	sp, #32
  4006c0:	bd10      	pop	{r4, pc}
  4006c2:	bf00      	nop
  4006c4:	00401d99 	.word	0x00401d99

004006c8 <DSSetSecsTo>:
{
    DSReadByteTo(port, DS_REG_SEC, (uint8_t *)ss, timeOut);
}

void DSSetSecsTo(freertos_twi_if port, uint8_t ss, int timeOut)
{
  4006c8:	b510      	push	{r4, lr}
    DSWriteByteTo(port, DS_REG_SEC, ss, timeOut);
  4006ca:	4613      	mov	r3, r2
  4006cc:	460a      	mov	r2, r1
  4006ce:	2100      	movs	r1, #0
  4006d0:	4c01      	ldr	r4, [pc, #4]	; (4006d8 <DSSetSecsTo+0x10>)
  4006d2:	47a0      	blx	r4
  4006d4:	bd10      	pop	{r4, pc}
  4006d6:	bf00      	nop
  4006d8:	00400695 	.word	0x00400695

004006dc <DSSetMinsTo>:
{
    DSReadByteTo(port, DS_REG_MIN, (uint8_t *)mm, timeOut);
}

void DSSetMinsTo(freertos_twi_if port, uint8_t mm, int timeOut)
{
  4006dc:	b510      	push	{r4, lr}
    DSWriteByteTo(port, DS_REG_MIN, mm, timeOut);
  4006de:	4613      	mov	r3, r2
  4006e0:	460a      	mov	r2, r1
  4006e2:	2101      	movs	r1, #1
  4006e4:	4c01      	ldr	r4, [pc, #4]	; (4006ec <DSSetMinsTo+0x10>)
  4006e6:	47a0      	blx	r4
  4006e8:	bd10      	pop	{r4, pc}
  4006ea:	bf00      	nop
  4006ec:	00400695 	.word	0x00400695

004006f0 <DSSetHrsTo>:
{
    DSReadByteTo(port, DS_REG_HRS, (uint8_t *)hh, timeOut);
}

void DSSetHrsTo(freertos_twi_if port, uint8_t hh, int timeOut)
{
  4006f0:	b510      	push	{r4, lr}
    DSWriteByteTo(port, DS_REG_HRS, hh, timeOut);
  4006f2:	4613      	mov	r3, r2
  4006f4:	460a      	mov	r2, r1
  4006f6:	2102      	movs	r1, #2
  4006f8:	4c01      	ldr	r4, [pc, #4]	; (400700 <DSSetHrsTo+0x10>)
  4006fa:	47a0      	blx	r4
  4006fc:	bd10      	pop	{r4, pc}
  4006fe:	bf00      	nop
  400700:	00400695 	.word	0x00400695

00400704 <DSSetDayTo>:
{
    DSReadByteTo(port, DS_REG_DAY, (uint8_t *)d, timeOut);
}

void DSSetDayTo(freertos_twi_if port, uint8_t d, int timeOut)
{
  400704:	b510      	push	{r4, lr}
    DSWriteByteTo(port, DS_REG_DAY, d, timeOut);
  400706:	4613      	mov	r3, r2
  400708:	460a      	mov	r2, r1
  40070a:	2103      	movs	r1, #3
  40070c:	4c01      	ldr	r4, [pc, #4]	; (400714 <DSSetDayTo+0x10>)
  40070e:	47a0      	blx	r4
  400710:	bd10      	pop	{r4, pc}
  400712:	bf00      	nop
  400714:	00400695 	.word	0x00400695

00400718 <DSSetDateTo>:
{
    DSReadByteTo(port, DS_REG_DAT, (uint8_t *)dd, timeOut);
}

void DSSetDateTo(freertos_twi_if port, uint8_t dd, int timeOut)
{
  400718:	b510      	push	{r4, lr}
    DSWriteByteTo(port, DS_REG_DAT, dd, timeOut);
  40071a:	4613      	mov	r3, r2
  40071c:	460a      	mov	r2, r1
  40071e:	2104      	movs	r1, #4
  400720:	4c01      	ldr	r4, [pc, #4]	; (400728 <DSSetDateTo+0x10>)
  400722:	47a0      	blx	r4
  400724:	bd10      	pop	{r4, pc}
  400726:	bf00      	nop
  400728:	00400695 	.word	0x00400695

0040072c <DSSetMonthTo>:
{
    DSReadByteTo(port, DS_REG_MON, (uint8_t *)mm, timeOut);
}

void DSSetMonthTo(freertos_twi_if port, uint8_t mm, int timeOut)
{
  40072c:	b510      	push	{r4, lr}
    DSWriteByteTo(port, DS_REG_MON, mm, timeOut);
  40072e:	4613      	mov	r3, r2
  400730:	460a      	mov	r2, r1
  400732:	2105      	movs	r1, #5
  400734:	4c01      	ldr	r4, [pc, #4]	; (40073c <DSSetMonthTo+0x10>)
  400736:	47a0      	blx	r4
  400738:	bd10      	pop	{r4, pc}
  40073a:	bf00      	nop
  40073c:	00400695 	.word	0x00400695

00400740 <DSSetYearTo>:
{
    DSReadByteTo(port, DS_REG_YRS, (uint8_t *)yy, timeOut);
}

void DSSetYearTo(freertos_twi_if port, uint8_t yy, int timeOut)
{
  400740:	b510      	push	{r4, lr}
    DSWriteByteTo(port, DS_REG_YRS, yy, timeOut);
  400742:	4613      	mov	r3, r2
  400744:	460a      	mov	r2, r1
  400746:	2106      	movs	r1, #6
  400748:	4c01      	ldr	r4, [pc, #4]	; (400750 <DSSetYearTo+0x10>)
  40074a:	47a0      	blx	r4
  40074c:	bd10      	pop	{r4, pc}
  40074e:	bf00      	nop
  400750:	00400695 	.word	0x00400695

00400754 <DSEnAL2To>:
        DSWriteByteTo(port, DS_REG_CTRL, 0x04, timeOut);
    }
}

void DSEnAL2To(freertos_twi_if port, uint8_t en, int timeOut)
{
  400754:	b5f0      	push	{r4, r5, r6, r7, lr}
  400756:	b087      	sub	sp, #28
  400758:	4604      	mov	r4, r0
  40075a:	4615      	mov	r5, r2
    uint8_t buff[3];
    twi_packet_t pkt;

    if(en)
  40075c:	b311      	cbz	r1, 4007a4 <DSEnAL2To+0x50>
    {
        pkt.chip = DS_ADDR;
  40075e:	2368      	movs	r3, #104	; 0x68
  400760:	f88d 3010 	strb.w	r3, [sp, #16]
        pkt.addr[0] = DS_REG_AL2M;
  400764:	230b      	movs	r3, #11
  400766:	f88d 3000 	strb.w	r3, [sp]
        pkt.addr_length = 1;
  40076a:	2301      	movs	r3, #1
  40076c:	9301      	str	r3, [sp, #4]
        pkt.buffer = buff;
  40076e:	ab05      	add	r3, sp, #20
  400770:	9302      	str	r3, [sp, #8]
        pkt.length = 3;
  400772:	2303      	movs	r3, #3
  400774:	9303      	str	r3, [sp, #12]

        buff[0] = 0x80;
  400776:	2680      	movs	r6, #128	; 0x80
  400778:	f88d 6014 	strb.w	r6, [sp, #20]
        buff[1] = 0x80;
  40077c:	f88d 6015 	strb.w	r6, [sp, #21]
        buff[2] = 0x80;
  400780:	f88d 6016 	strb.w	r6, [sp, #22]

		//Set Alarm 2 for 1 min interrupt
        freertos_twi_write_packet(port, &pkt, timeOut);
  400784:	2300      	movs	r3, #0
  400786:	4669      	mov	r1, sp
  400788:	4f0a      	ldr	r7, [pc, #40]	; (4007b4 <DSEnAL2To+0x60>)
  40078a:	47b8      	blx	r7
        //Write Enable Alarm Register
        DSWriteByteTo(port, DS_REG_CTRL, 0x06, timeOut);
  40078c:	462b      	mov	r3, r5
  40078e:	2206      	movs	r2, #6
  400790:	210e      	movs	r1, #14
  400792:	4620      	mov	r0, r4
  400794:	4f08      	ldr	r7, [pc, #32]	; (4007b8 <DSEnAL2To+0x64>)
  400796:	47b8      	blx	r7
        //Clear Status Reg
        DSWriteByteTo(port, DS_REG_STAT, 0x80, timeOut);
  400798:	462b      	mov	r3, r5
  40079a:	4632      	mov	r2, r6
  40079c:	210f      	movs	r1, #15
  40079e:	4620      	mov	r0, r4
  4007a0:	47b8      	blx	r7
  4007a2:	e004      	b.n	4007ae <DSEnAL2To+0x5a>
    }
    else
    {
        //Write Disable Alarm Register
        DSWriteByteTo(port, DS_REG_CTRL, 0x04, timeOut);
  4007a4:	4613      	mov	r3, r2
  4007a6:	2204      	movs	r2, #4
  4007a8:	210e      	movs	r1, #14
  4007aa:	4c03      	ldr	r4, [pc, #12]	; (4007b8 <DSEnAL2To+0x64>)
  4007ac:	47a0      	blx	r4
    }
}
  4007ae:	b007      	add	sp, #28
  4007b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4007b2:	bf00      	nop
  4007b4:	00401d99 	.word	0x00401d99
  4007b8:	00400695 	.word	0x00400695

004007bc <DSReadByteTo>:
	
	freertos_twi_write_packet(port, &pkt, timeOut);
}

void DSReadByteTo(freertos_twi_if port, uint8_t reg, uint8_t *recvData, int timeOut)
{
  4007bc:	b510      	push	{r4, lr}
  4007be:	b086      	sub	sp, #24
  4007c0:	461c      	mov	r4, r3
    twi_packet_t pkt;
    
    pkt.chip = DS_ADDR;
  4007c2:	2368      	movs	r3, #104	; 0x68
  4007c4:	f88d 3014 	strb.w	r3, [sp, #20]
    pkt.addr[0] = reg;
  4007c8:	f88d 1004 	strb.w	r1, [sp, #4]
    pkt.addr_length = 1;
  4007cc:	2301      	movs	r3, #1
  4007ce:	9302      	str	r3, [sp, #8]
    pkt.buffer = recvData;
  4007d0:	9203      	str	r2, [sp, #12]
    pkt.length = 1;
  4007d2:	9304      	str	r3, [sp, #16]
    
    freertos_twi_read_packet(port, &pkt, timeOut);
  4007d4:	2300      	movs	r3, #0
  4007d6:	4622      	mov	r2, r4
  4007d8:	a901      	add	r1, sp, #4
  4007da:	4c02      	ldr	r4, [pc, #8]	; (4007e4 <DSReadByteTo+0x28>)
  4007dc:	47a0      	blx	r4
}
  4007de:	b006      	add	sp, #24
  4007e0:	bd10      	pop	{r4, pc}
  4007e2:	bf00      	nop
  4007e4:	00401f1d 	.word	0x00401f1d

004007e8 <ICMWriteByteTo>:
    ICMReadByteTo(port, sla, ICM_REG_ACC_ZOUTH, &((uint8_t *)recvData)[5], timeOut);
    ICMReadByteTo(port, sla, ICM_REG_ACC_ZOUTL, &((uint8_t *)recvData)[4], timeOut);
}

void ICMWriteByteTo(freertos_twi_if port, uint8_t sla, uint8_t reg, uint8_t data, int timeOut)
{
  4007e8:	b510      	push	{r4, lr}
  4007ea:	b088      	sub	sp, #32
  4007ec:	f88d 3007 	strb.w	r3, [sp, #7]
    twi_packet_t pkt;
    
    pkt.chip = sla;
  4007f0:	f88d 101c 	strb.w	r1, [sp, #28]
    pkt.addr[0] = reg;
  4007f4:	f88d 200c 	strb.w	r2, [sp, #12]
    pkt.addr_length = 1;
  4007f8:	2301      	movs	r3, #1
  4007fa:	9304      	str	r3, [sp, #16]
    pkt.buffer = &data;
  4007fc:	f10d 0207 	add.w	r2, sp, #7
  400800:	9205      	str	r2, [sp, #20]
    pkt.length = 1;
  400802:	9306      	str	r3, [sp, #24]
    
    freertos_twi_write_packet(port, &pkt, timeOut);
  400804:	2300      	movs	r3, #0
  400806:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  400808:	a903      	add	r1, sp, #12
  40080a:	4c02      	ldr	r4, [pc, #8]	; (400814 <ICMWriteByteTo+0x2c>)
  40080c:	47a0      	blx	r4
}
  40080e:	b008      	add	sp, #32
  400810:	bd10      	pop	{r4, pc}
  400812:	bf00      	nop
  400814:	00401d99 	.word	0x00401d99

00400818 <ICMInitializeTo>:

#include "ICM20648RTOS.h"


void ICMInitializeTo(freertos_twi_if port, uint8_t sla, int timeOut)
{
  400818:	b5f0      	push	{r4, r5, r6, r7, lr}
  40081a:	b083      	sub	sp, #12
  40081c:	4606      	mov	r6, r0
  40081e:	460f      	mov	r7, r1
  400820:	4615      	mov	r5, r2
    //Select USER Bank 0
    ICMWriteByteTo(port, sla,ICM_REG_BANK_SEL,0x00, timeOut);
  400822:	9200      	str	r2, [sp, #0]
  400824:	2300      	movs	r3, #0
  400826:	227f      	movs	r2, #127	; 0x7f
  400828:	4c10      	ldr	r4, [pc, #64]	; (40086c <ICMInitializeTo+0x54>)
  40082a:	47a0      	blx	r4
    
    //Auto Select Best Clock Source
    ICMWriteByteTo(port, sla,ICM_REG_PWR_MGMT1,0x01, timeOut);
  40082c:	9500      	str	r5, [sp, #0]
  40082e:	2301      	movs	r3, #1
  400830:	2206      	movs	r2, #6
  400832:	4639      	mov	r1, r7
  400834:	4630      	mov	r0, r6
  400836:	47a0      	blx	r4
    
    //Select USER Bank 2
    ICMWriteByteTo(port, sla,ICM_REG_BANK_SEL,0x20, timeOut);
  400838:	9500      	str	r5, [sp, #0]
  40083a:	2320      	movs	r3, #32
  40083c:	227f      	movs	r2, #127	; 0x7f
  40083e:	4639      	mov	r1, r7
  400840:	4630      	mov	r0, r6
  400842:	47a0      	blx	r4
    
    //Accel Full Scale set to 2G
    //ICMWriteByteTo(sla,ICM_REG_ACC_CONFIG,0x00, timeOut);
    //Full Scale = 2G, Enable DLP, Cutoff = 23Hz
    ICMWriteByteTo(port, sla,ICM_REG_ACC_CONFIG,0x31, timeOut);
  400844:	9500      	str	r5, [sp, #0]
  400846:	2331      	movs	r3, #49	; 0x31
  400848:	2214      	movs	r2, #20
  40084a:	4639      	mov	r1, r7
  40084c:	4630      	mov	r0, r6
  40084e:	47a0      	blx	r4
    
    //Output Data Rate Set to 17.xx Hz
    ICMWriteByteTo(port, sla,ICM_REG_ACC_SMPLRT_DIV1,0x00, timeOut);
  400850:	9500      	str	r5, [sp, #0]
  400852:	2300      	movs	r3, #0
  400854:	2210      	movs	r2, #16
  400856:	4639      	mov	r1, r7
  400858:	4630      	mov	r0, r6
  40085a:	47a0      	blx	r4
    ICMWriteByteTo(port, sla,ICM_REG_ACC_SMPLRT_DIV2,0x3F, timeOut);
  40085c:	9500      	str	r5, [sp, #0]
  40085e:	233f      	movs	r3, #63	; 0x3f
  400860:	2211      	movs	r2, #17
  400862:	4639      	mov	r1, r7
  400864:	4630      	mov	r0, r6
  400866:	47a0      	blx	r4
    
}
  400868:	b003      	add	sp, #12
  40086a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40086c:	004007e9 	.word	0x004007e9

00400870 <ICMReadByteTo>:
    
    freertos_twi_write_packet(port, &pkt, timeOut);
}

void ICMReadByteTo(freertos_twi_if port, uint8_t sla, uint8_t reg, uint8_t *recvData, int timeOut)
{
  400870:	b510      	push	{r4, lr}
  400872:	b086      	sub	sp, #24
    twi_packet_t pkt;
    
    pkt.chip = sla;
  400874:	f88d 1014 	strb.w	r1, [sp, #20]
    pkt.addr[0] = reg;
  400878:	f88d 2004 	strb.w	r2, [sp, #4]
    pkt.addr_length = 1;
  40087c:	2201      	movs	r2, #1
  40087e:	9202      	str	r2, [sp, #8]
    pkt.buffer = recvData;
  400880:	9303      	str	r3, [sp, #12]
    pkt.length = 1;
  400882:	9204      	str	r2, [sp, #16]
    
    freertos_twi_read_packet(port, &pkt, timeOut);
  400884:	2300      	movs	r3, #0
  400886:	9a08      	ldr	r2, [sp, #32]
  400888:	a901      	add	r1, sp, #4
  40088a:	4c02      	ldr	r4, [pc, #8]	; (400894 <ICMReadByteTo+0x24>)
  40088c:	47a0      	blx	r4
}
  40088e:	b006      	add	sp, #24
  400890:	bd10      	pop	{r4, pc}
  400892:	bf00      	nop
  400894:	00401f1d 	.word	0x00401f1d

00400898 <ICMReadAccDataAllTo>:
    ICMReadByteTo(port, sla, ICM_REG_ACC_ZOUTH, &((uint8_t *)recvData)[1], timeOut);
    ICMReadByteTo(port, sla, ICM_REG_ACC_ZOUTL, &((uint8_t *)recvData)[0], timeOut);
}

void ICMReadAccDataAllTo(freertos_twi_if port, uint8_t sla, uint16_t *recvData, int timeOut)
{
  400898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40089c:	b082      	sub	sp, #8
  40089e:	4606      	mov	r6, r0
  4008a0:	460f      	mov	r7, r1
  4008a2:	4690      	mov	r8, r2
  4008a4:	461c      	mov	r4, r3
    //Select USER Bank 0
    ICMWriteByteTo(port, sla,ICM_REG_BANK_SEL,0x00, timeOut);
  4008a6:	9300      	str	r3, [sp, #0]
  4008a8:	2300      	movs	r3, #0
  4008aa:	227f      	movs	r2, #127	; 0x7f
  4008ac:	4d17      	ldr	r5, [pc, #92]	; (40090c <ICMReadAccDataAllTo+0x74>)
  4008ae:	47a8      	blx	r5
    
    //Read ACC data
    ICMReadByteTo(port, sla, ICM_REG_ACC_XOUTH, &((uint8_t *)recvData)[1], timeOut);
  4008b0:	9400      	str	r4, [sp, #0]
  4008b2:	f108 0301 	add.w	r3, r8, #1
  4008b6:	222d      	movs	r2, #45	; 0x2d
  4008b8:	4639      	mov	r1, r7
  4008ba:	4630      	mov	r0, r6
  4008bc:	4d14      	ldr	r5, [pc, #80]	; (400910 <ICMReadAccDataAllTo+0x78>)
  4008be:	47a8      	blx	r5
    ICMReadByteTo(port, sla, ICM_REG_ACC_XOUTL, &((uint8_t *)recvData)[0], timeOut);
  4008c0:	9400      	str	r4, [sp, #0]
  4008c2:	4643      	mov	r3, r8
  4008c4:	222e      	movs	r2, #46	; 0x2e
  4008c6:	4639      	mov	r1, r7
  4008c8:	4630      	mov	r0, r6
  4008ca:	47a8      	blx	r5
    ICMReadByteTo(port, sla, ICM_REG_ACC_YOUTH, &((uint8_t *)recvData)[3], timeOut);
  4008cc:	9400      	str	r4, [sp, #0]
  4008ce:	f108 0303 	add.w	r3, r8, #3
  4008d2:	222f      	movs	r2, #47	; 0x2f
  4008d4:	4639      	mov	r1, r7
  4008d6:	4630      	mov	r0, r6
  4008d8:	47a8      	blx	r5
    ICMReadByteTo(port, sla, ICM_REG_ACC_YOUTL, &((uint8_t *)recvData)[2], timeOut);
  4008da:	9400      	str	r4, [sp, #0]
  4008dc:	f108 0302 	add.w	r3, r8, #2
  4008e0:	2230      	movs	r2, #48	; 0x30
  4008e2:	4639      	mov	r1, r7
  4008e4:	4630      	mov	r0, r6
  4008e6:	47a8      	blx	r5
    ICMReadByteTo(port, sla, ICM_REG_ACC_ZOUTH, &((uint8_t *)recvData)[5], timeOut);
  4008e8:	9400      	str	r4, [sp, #0]
  4008ea:	f108 0305 	add.w	r3, r8, #5
  4008ee:	2231      	movs	r2, #49	; 0x31
  4008f0:	4639      	mov	r1, r7
  4008f2:	4630      	mov	r0, r6
  4008f4:	47a8      	blx	r5
    ICMReadByteTo(port, sla, ICM_REG_ACC_ZOUTL, &((uint8_t *)recvData)[4], timeOut);
  4008f6:	9400      	str	r4, [sp, #0]
  4008f8:	f108 0304 	add.w	r3, r8, #4
  4008fc:	2232      	movs	r2, #50	; 0x32
  4008fe:	4639      	mov	r1, r7
  400900:	4630      	mov	r0, r6
  400902:	47a8      	blx	r5
}
  400904:	b002      	add	sp, #8
  400906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40090a:	bf00      	nop
  40090c:	004007e9 	.word	0x004007e9
  400910:	00400871 	.word	0x00400871

00400914 <calcCRC>:
 uint16_t calcCRC(uint8_t *buff, uint8_t len)
 {
	 uint16_t crcReg = 0xFFFF;
	 uint8_t i = 0, j=0;

	 for(i=0;i<len;i++)
  400914:	b1d9      	cbz	r1, 40094e <calcCRC+0x3a>
		 *respLen = 5;
	 }
 }

 uint16_t calcCRC(uint8_t *buff, uint8_t len)
 {
  400916:	b430      	push	{r4, r5}
  400918:	460b      	mov	r3, r1
  40091a:	1e41      	subs	r1, r0, #1
  40091c:	3b01      	subs	r3, #1
  40091e:	fa50 f483 	uxtab	r4, r0, r3
	 uint16_t crcReg = 0xFFFF;
	 uint8_t i = 0, j=0;

	 for(i=0;i<len;i++)
  400922:	f64f 70ff 	movw	r0, #65535	; 0xffff
	 {
		 crcReg = crcReg ^ buff[i];
  400926:	2508      	movs	r5, #8
		 {

			 if(bitIsSet(crcReg,0))
			 {
				 crcReg = crcReg >> 1;
				 crcReg = crcReg ^ MBUS_CRC_POLY;
  400928:	f24a 0201 	movw	r2, #40961	; 0xa001
	 uint16_t crcReg = 0xFFFF;
	 uint8_t i = 0, j=0;

	 for(i=0;i<len;i++)
	 {
		 crcReg = crcReg ^ buff[i];
  40092c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  400930:	4058      	eors	r0, r3
  400932:	462b      	mov	r3, r5
		 for(j=0;j<8;j++)
		 {

			 if(bitIsSet(crcReg,0))
  400934:	f010 0f01 	tst.w	r0, #1
			 {
				 crcReg = crcReg >> 1;
				 crcReg = crcReg ^ MBUS_CRC_POLY;
  400938:	bf14      	ite	ne
  40093a:	ea82 0050 	eorne.w	r0, r2, r0, lsr #1
			 }
			 else
			 {
				 crcReg = crcReg >> 1;
  40093e:	0840      	lsreq	r0, r0, #1
  400940:	3b01      	subs	r3, #1
	 uint8_t i = 0, j=0;

	 for(i=0;i<len;i++)
	 {
		 crcReg = crcReg ^ buff[i];
		 for(j=0;j<8;j++)
  400942:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  400946:	d1f5      	bne.n	400934 <calcCRC+0x20>
 uint16_t calcCRC(uint8_t *buff, uint8_t len)
 {
	 uint16_t crcReg = 0xFFFF;
	 uint8_t i = 0, j=0;

	 for(i=0;i<len;i++)
  400948:	42a1      	cmp	r1, r4
  40094a:	d1ef      	bne.n	40092c <calcCRC+0x18>
  40094c:	e002      	b.n	400954 <calcCRC+0x40>
	 }
 }

 uint16_t calcCRC(uint8_t *buff, uint8_t len)
 {
	 uint16_t crcReg = 0xFFFF;
  40094e:	f64f 70ff 	movw	r0, #65535	; 0xffff
  400952:	4770      	bx	lr
				 crcReg = crcReg >> 1;
			 }
		 }
	 }
	 return crcReg;
 }
  400954:	bc30      	pop	{r4, r5}
  400956:	4770      	bx	lr

00400958 <ParseMbusPkt>:
//Write function pointer
void (*writeFunc)(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len);

/* Modbus stack parser function */
void ParseMbusPkt(uint8_t slaveAddr, uint8_t *buff, uint8_t len, uint8_t *respBuff, uint8_t *respLen)
{
  400958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40095c:	9e08      	ldr	r6, [sp, #32]
	 uint8_t fCode = 0, genErrRsp = 0;
	 uint8_t expFuncCode = 0, expCode = 0;
	 uint8_t i = 0, ind = 0;
	 
	 /* Self Addr recvd or Broadcast Addr = 0 recvd */
	 if(buff[0]==slaveAddr||buff[0]==0)
  40095e:	780f      	ldrb	r7, [r1, #0]
  400960:	4287      	cmp	r7, r0
  400962:	d002      	beq.n	40096a <ParseMbusPkt+0x12>
  400964:	2f00      	cmp	r7, #0
  400966:	f040 80da 	bne.w	400b1e <ParseMbusPkt+0x1c6>
  40096a:	461c      	mov	r4, r3
  40096c:	4615      	mov	r5, r2
  40096e:	460f      	mov	r7, r1
  400970:	4680      	mov	r8, r0
	 {
		 /* Calc CRC */
		 recvCrc = (((uint16_t)buff[len-1])<<8)|buff[len-2];
		 crc = calcCRC(buff,len-2);
  400972:	1e91      	subs	r1, r2, #2
  400974:	b2c9      	uxtb	r1, r1
  400976:	4638      	mov	r0, r7
  400978:	4b79      	ldr	r3, [pc, #484]	; (400b60 <ParseMbusPkt+0x208>)
  40097a:	4798      	blx	r3
	 
	 /* Self Addr recvd or Broadcast Addr = 0 recvd */
	 if(buff[0]==slaveAddr||buff[0]==0)
	 {
		 /* Calc CRC */
		 recvCrc = (((uint16_t)buff[len-1])<<8)|buff[len-2];
  40097c:	443d      	add	r5, r7
		 crc = calcCRC(buff,len-2);
		 /* If CRC Matched */
		 if(crc==recvCrc)
  40097e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  400982:	f815 3c02 	ldrb.w	r3, [r5, #-2]
  400986:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40098a:	4283      	cmp	r3, r0
  40098c:	f040 80e6 	bne.w	400b5c <ParseMbusPkt+0x204>
		 {
			 /* Function Code Extraction */
			 fCode = buff[1];
  400990:	787b      	ldrb	r3, [r7, #1]
			 switch(fCode)
  400992:	2b06      	cmp	r3, #6
  400994:	d047      	beq.n	400a26 <ParseMbusPkt+0xce>
  400996:	2b10      	cmp	r3, #16
  400998:	d072      	beq.n	400a80 <ParseMbusPkt+0x128>
  40099a:	2b03      	cmp	r3, #3
  40099c:	f040 80bb 	bne.w	400b16 <ParseMbusPkt+0x1be>
			 {
				 /* Read Analog Reg Func Code Recvd */
				 case 0x03:
				 numReg = (((uint16_t)buff[4])<<8)|buff[5];
  4009a0:	793a      	ldrb	r2, [r7, #4]
  4009a2:	797b      	ldrb	r3, [r7, #5]
  4009a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4009a8:	b21b      	sxth	r3, r3
  4009aa:	fa1f fe83 	uxth.w	lr, r3
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
  4009ae:	f10e 32ff 	add.w	r2, lr, #4294967295
  4009b2:	b292      	uxth	r2, r2
  4009b4:	2a7c      	cmp	r2, #124	; 0x7c
  4009b6:	f200 80b6 	bhi.w	400b26 <ParseMbusPkt+0x1ce>
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  4009ba:	78b9      	ldrb	r1, [r7, #2]
  4009bc:	78fa      	ldrb	r2, [r7, #3]
  4009be:	ea42 2701 	orr.w	r7, r2, r1, lsl #8
  4009c2:	eb0e 0207 	add.w	r2, lr, r7
  4009c6:	2a24      	cmp	r2, #36	; 0x24
  4009c8:	f300 80b0 	bgt.w	400b2c <ParseMbusPkt+0x1d4>
					 {
						 /* Process Read Reg Req */
						 /* Gen Valid Resp */
						 respBuff[0] = slaveAddr;
  4009cc:	f884 8000 	strb.w	r8, [r4]
						 respBuff[1] = 0x03;
  4009d0:	2203      	movs	r2, #3
  4009d2:	7062      	strb	r2, [r4, #1]
						 respBuff[2] = (numReg *2); //No of Data Bytes
  4009d4:	005b      	lsls	r3, r3, #1
  4009d6:	70a3      	strb	r3, [r4, #2]
						 
						 i = 3;
						 for(ind = 0; ind < numReg; ind++)
  4009d8:	f1be 0f00 	cmp.w	lr, #0
  4009dc:	d015      	beq.n	400a0a <ParseMbusPkt+0xb2>
  4009de:	2300      	movs	r3, #0
  4009e0:	4615      	mov	r5, r2
						 {
							 respBuff[i++] = (mBusRegs[regAddr+ind]>>8);
  4009e2:	f8df c180 	ldr.w	ip, [pc, #384]	; 400b64 <ParseMbusPkt+0x20c>
  4009e6:	1c6a      	adds	r2, r5, #1
  4009e8:	b2d2      	uxtb	r2, r2
  4009ea:	19d8      	adds	r0, r3, r7
  4009ec:	f83c 1010 	ldrh.w	r1, [ip, r0, lsl #1]
  4009f0:	0a09      	lsrs	r1, r1, #8
  4009f2:	5561      	strb	r1, [r4, r5]
							 respBuff[i++] = (mBusRegs[regAddr+ind]&0x00FF);
  4009f4:	3502      	adds	r5, #2
  4009f6:	b2ed      	uxtb	r5, r5
  4009f8:	f83c 1010 	ldrh.w	r1, [ip, r0, lsl #1]
  4009fc:	54a1      	strb	r1, [r4, r2]
						 respBuff[0] = slaveAddr;
						 respBuff[1] = 0x03;
						 respBuff[2] = (numReg *2); //No of Data Bytes
						 
						 i = 3;
						 for(ind = 0; ind < numReg; ind++)
  4009fe:	3301      	adds	r3, #1
  400a00:	b2db      	uxtb	r3, r3
  400a02:	b29a      	uxth	r2, r3
  400a04:	4596      	cmp	lr, r2
  400a06:	d8ee      	bhi.n	4009e6 <ParseMbusPkt+0x8e>
  400a08:	e000      	b.n	400a0c <ParseMbusPkt+0xb4>
						 /* Gen Valid Resp */
						 respBuff[0] = slaveAddr;
						 respBuff[1] = 0x03;
						 respBuff[2] = (numReg *2); //No of Data Bytes
						 
						 i = 3;
  400a0a:	2503      	movs	r5, #3
						 for(ind = 0; ind < numReg; ind++)
						 {
							 respBuff[i++] = (mBusRegs[regAddr+ind]>>8);
							 respBuff[i++] = (mBusRegs[regAddr+ind]&0x00FF);
						 }
						 crc = calcCRC(respBuff, i);
  400a0c:	4629      	mov	r1, r5
  400a0e:	4620      	mov	r0, r4
  400a10:	4b53      	ldr	r3, [pc, #332]	; (400b60 <ParseMbusPkt+0x208>)
  400a12:	4798      	blx	r3
						 respBuff[i++] = (crc&0x00FF);
  400a14:	5560      	strb	r0, [r4, r5]
						 respBuff[i++] = (crc>>8);
  400a16:	1c6b      	adds	r3, r5, #1
  400a18:	b2db      	uxtb	r3, r3
  400a1a:	0a00      	lsrs	r0, r0, #8
  400a1c:	54e0      	strb	r0, [r4, r3]
						 *respLen = i;
  400a1e:	3502      	adds	r5, #2
  400a20:	7035      	strb	r5, [r6, #0]
  400a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				 /* Output Value = 0x0000 or 0xFF00 */
				 regVal = (((uint16_t)buff[4])<<8)|(buff[5]);
				 if(1)
				 {
					 /* Output Address = OK */
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
  400a26:	78ba      	ldrb	r2, [r7, #2]
  400a28:	78fb      	ldrb	r3, [r7, #3]
  400a2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400a2e:	b21d      	sxth	r5, r3
  400a30:	b2ab      	uxth	r3, r5
					 if(regAddr <= MBUS_MAX_REGS)
  400a32:	2b24      	cmp	r3, #36	; 0x24
  400a34:	d87d      	bhi.n	400b32 <ParseMbusPkt+0x1da>
					 {
						 /* Gen Valid Mbus Resp */
						 mBusRegs[regAddr] = regVal;
  400a36:	7939      	ldrb	r1, [r7, #4]
  400a38:	797a      	ldrb	r2, [r7, #5]
  400a3a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  400a3e:	4949      	ldr	r1, [pc, #292]	; (400b64 <ParseMbusPkt+0x20c>)
  400a40:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						 /* Success Error Code */
						 respBuff[0] = slaveAddr;
  400a44:	f884 8000 	strb.w	r8, [r4]
						 respBuff[1] = 0x06;
  400a48:	2106      	movs	r1, #6
  400a4a:	7061      	strb	r1, [r4, #1]
						 respBuff[2] = buff[2];
  400a4c:	78bb      	ldrb	r3, [r7, #2]
  400a4e:	70a3      	strb	r3, [r4, #2]
						 respBuff[3] = buff[3];
  400a50:	78fb      	ldrb	r3, [r7, #3]
  400a52:	70e3      	strb	r3, [r4, #3]
						 respBuff[4] = buff[4];
  400a54:	793b      	ldrb	r3, [r7, #4]
  400a56:	7123      	strb	r3, [r4, #4]
						 respBuff[5] = buff[5];
  400a58:	797b      	ldrb	r3, [r7, #5]
  400a5a:	7163      	strb	r3, [r4, #5]
						 crc = calcCRC(respBuff, 6);
  400a5c:	4620      	mov	r0, r4
  400a5e:	4b40      	ldr	r3, [pc, #256]	; (400b60 <ParseMbusPkt+0x208>)
  400a60:	4798      	blx	r3
						 respBuff[6] = (crc&0x00FF);
  400a62:	71a0      	strb	r0, [r4, #6]
						 respBuff[7] = (crc>>8);
  400a64:	0a00      	lsrs	r0, r0, #8
  400a66:	71e0      	strb	r0, [r4, #7]
						 *respLen = 8;
  400a68:	2308      	movs	r3, #8
  400a6a:	7033      	strb	r3, [r6, #0]
						 
						 /* Process Write Reg Req */
						 if(writeFunc!=NULL)
  400a6c:	4b3e      	ldr	r3, [pc, #248]	; (400b68 <ParseMbusPkt+0x210>)
  400a6e:	681b      	ldr	r3, [r3, #0]
  400a70:	2b00      	cmp	r3, #0
  400a72:	d073      	beq.n	400b5c <ParseMbusPkt+0x204>
							writeFunc(mBusRegs,regAddr,1);
  400a74:	2201      	movs	r2, #1
  400a76:	b2e9      	uxtb	r1, r5
  400a78:	483a      	ldr	r0, [pc, #232]	; (400b64 <ParseMbusPkt+0x20c>)
  400a7a:	4798      	blx	r3
  400a7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					 expFuncCode = 0x86;
					 expCode = 0x03;
				 }
				 break;
				 case 0x10: /* Write Mul Register */
				 numReg = (((uint16_t)buff[4])<<8)|buff[5];
  400a80:	793a      	ldrb	r2, [r7, #4]
  400a82:	797b      	ldrb	r3, [r7, #5]
  400a84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
  400a88:	1e5a      	subs	r2, r3, #1
  400a8a:	b292      	uxth	r2, r2
  400a8c:	2a7c      	cmp	r2, #124	; 0x7c
  400a8e:	d853      	bhi.n	400b38 <ParseMbusPkt+0x1e0>
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
  400a90:	78bd      	ldrb	r5, [r7, #2]
  400a92:	78fa      	ldrb	r2, [r7, #3]
  400a94:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
  400a98:	b22d      	sxth	r5, r5
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  400a9a:	fa1f f985 	uxth.w	r9, r5
  400a9e:	444b      	add	r3, r9
  400aa0:	2b24      	cmp	r3, #36	; 0x24
  400aa2:	dc4c      	bgt.n	400b3e <ParseMbusPkt+0x1e6>
					 {
						 /* Gen Valid Resp */
						 respBuff[0] = slaveAddr;
  400aa4:	f884 8000 	strb.w	r8, [r4]
						 respBuff[1] = 0x10;
  400aa8:	2310      	movs	r3, #16
  400aaa:	7063      	strb	r3, [r4, #1]
						 respBuff[2] = buff[2];
  400aac:	78bb      	ldrb	r3, [r7, #2]
  400aae:	70a3      	strb	r3, [r4, #2]
						 respBuff[3] = buff[3];
  400ab0:	78fb      	ldrb	r3, [r7, #3]
  400ab2:	70e3      	strb	r3, [r4, #3]
						 respBuff[4] = buff[4];
  400ab4:	793b      	ldrb	r3, [r7, #4]
  400ab6:	7123      	strb	r3, [r4, #4]
						 respBuff[5] = buff[5];
  400ab8:	797b      	ldrb	r3, [r7, #5]
  400aba:	7163      	strb	r3, [r4, #5]
						 crc = calcCRC(respBuff, 6);
  400abc:	2106      	movs	r1, #6
  400abe:	4620      	mov	r0, r4
  400ac0:	4b27      	ldr	r3, [pc, #156]	; (400b60 <ParseMbusPkt+0x208>)
  400ac2:	4798      	blx	r3
						 respBuff[6] = (crc&0x00FF);
  400ac4:	71a0      	strb	r0, [r4, #6]
						 respBuff[7] = (crc>>8);
  400ac6:	0a00      	lsrs	r0, r0, #8
  400ac8:	71e0      	strb	r0, [r4, #7]
						 *respLen = 8;
  400aca:	2308      	movs	r3, #8
  400acc:	7033      	strb	r3, [r6, #0]
						 
						 /* Byte count */
						 numReg = 7 + buff[6];
  400ace:	79bc      	ldrb	r4, [r7, #6]
  400ad0:	3407      	adds	r4, #7
						 ind = 0;
						 for(i = 7; i < numReg; i++)
  400ad2:	2c07      	cmp	r4, #7
  400ad4:	d917      	bls.n	400b06 <ParseMbusPkt+0x1ae>
  400ad6:	2200      	movs	r2, #0
  400ad8:	2307      	movs	r3, #7
  400ada:	4611      	mov	r1, r2
								 regVal = ((uint16_t)buff[i])<<8;
							 }
							 else
							 {
								 regVal |= buff[i];
								 mBusRegs[regAddr+ind] = regVal;
  400adc:	4e21      	ldr	r6, [pc, #132]	; (400b64 <ParseMbusPkt+0x20c>)
						 /* Byte count */
						 numReg = 7 + buff[6];
						 ind = 0;
						 for(i = 7; i < numReg; i++)
						 {
							 if(i%2==1)
  400ade:	f013 0f01 	tst.w	r3, #1
  400ae2:	d002      	beq.n	400aea <ParseMbusPkt+0x192>
							 {
								 regVal = ((uint16_t)buff[i])<<8;
  400ae4:	5cf9      	ldrb	r1, [r7, r3]
  400ae6:	0209      	lsls	r1, r1, #8
  400ae8:	e007      	b.n	400afa <ParseMbusPkt+0x1a2>
							 }
							 else
							 {
								 regVal |= buff[i];
  400aea:	5cf8      	ldrb	r0, [r7, r3]
  400aec:	4301      	orrs	r1, r0
								 mBusRegs[regAddr+ind] = regVal;
  400aee:	eb02 0009 	add.w	r0, r2, r9
  400af2:	f826 1010 	strh.w	r1, [r6, r0, lsl #1]
								 ind ++;
  400af6:	3201      	adds	r2, #1
  400af8:	b2d2      	uxtb	r2, r2
						 *respLen = 8;
						 
						 /* Byte count */
						 numReg = 7 + buff[6];
						 ind = 0;
						 for(i = 7; i < numReg; i++)
  400afa:	3301      	adds	r3, #1
  400afc:	b2db      	uxtb	r3, r3
  400afe:	b298      	uxth	r0, r3
  400b00:	4284      	cmp	r4, r0
  400b02:	d8ec      	bhi.n	400ade <ParseMbusPkt+0x186>
  400b04:	e000      	b.n	400b08 <ParseMbusPkt+0x1b0>
						 respBuff[7] = (crc>>8);
						 *respLen = 8;
						 
						 /* Byte count */
						 numReg = 7 + buff[6];
						 ind = 0;
  400b06:	2200      	movs	r2, #0
								 mBusRegs[regAddr+ind] = regVal;
								 ind ++;
							 }
						 }
						 /* Process Write Reg Req */
						 writeFunc(mBusRegs,regAddr,ind);
  400b08:	4b17      	ldr	r3, [pc, #92]	; (400b68 <ParseMbusPkt+0x210>)
  400b0a:	681b      	ldr	r3, [r3, #0]
  400b0c:	b2e9      	uxtb	r1, r5
  400b0e:	4815      	ldr	r0, [pc, #84]	; (400b64 <ParseMbusPkt+0x20c>)
  400b10:	4798      	blx	r3
  400b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				 break;
				 default:
				 /* Illegal Function Code Error */
				 /* Set MSB of recvd Function code */
				 /* Error Code 0x01 */
				 expFuncCode = fCode|(1<<7);
  400b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
				 expCode = 0x01;
  400b1a:	2201      	movs	r2, #1
				 genErrRsp = 1;
				 break;
  400b1c:	e011      	b.n	400b42 <ParseMbusPkt+0x1ea>
			 }
		 }
	 }
	 else
	 {
		 *respLen = 0;
  400b1e:	2300      	movs	r3, #0
  400b20:	7033      	strb	r3, [r6, #0]
  400b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				 else
				 {
					 /* Error Code 0x03 */
					 genErrRsp = 1;
					 expFuncCode = 0x83;
					 expCode = 0x03;
  400b26:	2203      	movs	r2, #3
				 }
				 else
				 {
					 /* Error Code 0x03 */
					 genErrRsp = 1;
					 expFuncCode = 0x83;
  400b28:	2383      	movs	r3, #131	; 0x83
  400b2a:	e00a      	b.n	400b42 <ParseMbusPkt+0x1ea>
					 else
					 {
						 /* Error code = 0x02 */
						 genErrRsp = 1;
						 expFuncCode = 0x83;
						 expCode = 0x02;
  400b2c:	2202      	movs	r2, #2
					 }
					 else
					 {
						 /* Error code = 0x02 */
						 genErrRsp = 1;
						 expFuncCode = 0x83;
  400b2e:	2383      	movs	r3, #131	; 0x83
  400b30:	e007      	b.n	400b42 <ParseMbusPkt+0x1ea>
					 else
					 {
						 /* Illegal Data Address Error */
						 genErrRsp = 1;
						 expFuncCode = 0x86;
						 expCode = 0x02;
  400b32:	2202      	movs	r2, #2
					 }
					 else
					 {
						 /* Illegal Data Address Error */
						 genErrRsp = 1;
						 expFuncCode = 0x86;
  400b34:	2386      	movs	r3, #134	; 0x86
  400b36:	e004      	b.n	400b42 <ParseMbusPkt+0x1ea>
				 else
				 {
					 /* Error Code 0x03 */
					 genErrRsp = 1;
					 expFuncCode = 0x90;
					 expCode = 0x03;
  400b38:	2203      	movs	r2, #3
				 }
				 else
				 {
					 /* Error Code 0x03 */
					 genErrRsp = 1;
					 expFuncCode = 0x90;
  400b3a:	2390      	movs	r3, #144	; 0x90
  400b3c:	e001      	b.n	400b42 <ParseMbusPkt+0x1ea>
					 else
					 {
						 /* Error code = 0x02 */
						 genErrRsp = 1;
						 expFuncCode = 0x90;
						 expCode = 0x02;
  400b3e:	2202      	movs	r2, #2
					 }
					 else
					 {
						 /* Error code = 0x02 */
						 genErrRsp = 1;
						 expFuncCode = 0x90;
  400b40:	2390      	movs	r3, #144	; 0x90
		 *respLen = 0;
	 }
	 
	 if(genErrRsp)
	 {
		 respBuff[0] = slaveAddr;
  400b42:	f884 8000 	strb.w	r8, [r4]
		 respBuff[1] = expFuncCode;
  400b46:	7063      	strb	r3, [r4, #1]
		 respBuff[2] = expCode;
  400b48:	70a2      	strb	r2, [r4, #2]
		 crc = calcCRC(respBuff, 3);
  400b4a:	2103      	movs	r1, #3
  400b4c:	4620      	mov	r0, r4
  400b4e:	4b04      	ldr	r3, [pc, #16]	; (400b60 <ParseMbusPkt+0x208>)
  400b50:	4798      	blx	r3
		 respBuff[3] = (crc&0x00FF);
  400b52:	70e0      	strb	r0, [r4, #3]
		 respBuff[4] = (crc>>8);
  400b54:	0a00      	lsrs	r0, r0, #8
  400b56:	7120      	strb	r0, [r4, #4]
		 *respLen = 5;
  400b58:	2305      	movs	r3, #5
  400b5a:	7033      	strb	r3, [r6, #0]
  400b5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400b60:	00400915 	.word	0x00400915
  400b64:	20000714 	.word	0x20000714
  400b68:	2000299c 	.word	0x2000299c

00400b6c <RTCIntHandler>:
uint8_t minCtr = 0;

/* RTC 1 Min ISR */
void RTCIntHandler(uint32_t ul_id, uint32_t ul_mask)
{
    if (PIN_RTC_INT_PIO_ID != ul_id || PIN_RTC_INT_MASK != ul_mask)
  400b6c:	280b      	cmp	r0, #11
  400b6e:	d10c      	bne.n	400b8a <RTCIntHandler+0x1e>
  400b70:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  400b74:	d109      	bne.n	400b8a <RTCIntHandler+0x1e>
		return;
	
    /* If Auto Mode */
    if(!mBusRegs[MBUS_REG_OPMODE])
  400b76:	4b05      	ldr	r3, [pc, #20]	; (400b8c <RTCIntHandler+0x20>)
  400b78:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
  400b7a:	b933      	cbnz	r3, 400b8a <RTCIntHandler+0x1e>
    {
        /* Increment Time Var */
        if(minCtr < TRACKING_INTERVAL)
  400b7c:	4b04      	ldr	r3, [pc, #16]	; (400b90 <RTCIntHandler+0x24>)
  400b7e:	781b      	ldrb	r3, [r3, #0]
  400b80:	2b02      	cmp	r3, #2
  400b82:	d802      	bhi.n	400b8a <RTCIntHandler+0x1e>
            minCtr++;
  400b84:	3301      	adds	r3, #1
  400b86:	4a02      	ldr	r2, [pc, #8]	; (400b90 <RTCIntHandler+0x24>)
  400b88:	7013      	strb	r3, [r2, #0]
  400b8a:	4770      	bx	lr
  400b8c:	20000714 	.word	0x20000714
  400b90:	2000075d 	.word	0x2000075d

00400b94 <InitVars>:
	gpio_set_pin_low(PIN_MOTOR_RST_IDX);
}

/* Initializes RAM variables from EERPOM */
void InitVars(void)
{
  400b94:	b538      	push	{r3, r4, r5, lr}
    //Read vars from Memory
//     mBusRegs[MBUS_REG_LATL] = EEPROM0_ReadByte(EE_REG_LAT1);
//     mBusRegs[MBUS_REG_LATL] = (mBusRegs[MBUS_REG_LATL]<<8) | EEPROM0_ReadByte(EE_REG_LAT0);
//     mBusRegs[MBUS_REG_LATH] = EEPROM0_ReadByte(EE_REG_LAT3);
//     mBusRegs[MBUS_REG_LATH] = (mBusRegs[MBUS_REG_LATH]<<8) | EEPROM0_ReadByte(EE_REG_LAT2);
	nvm_read(INT_FLASH, EE_REG_LAT0, (void *)&mBusRegs[MBUS_REG_LATL], 4);
  400b96:	4c22      	ldr	r4, [pc, #136]	; (400c20 <InitVars+0x8c>)
  400b98:	2304      	movs	r3, #4
  400b9a:	4622      	mov	r2, r4
  400b9c:	4921      	ldr	r1, [pc, #132]	; (400c24 <InitVars+0x90>)
  400b9e:	2000      	movs	r0, #0
  400ba0:	4d21      	ldr	r5, [pc, #132]	; (400c28 <InitVars+0x94>)
  400ba2:	47a8      	blx	r5
    
//     mBusRegs[MBUS_REG_LONL] = EEPROM0_ReadByte(EE_REG_LON1);
//     mBusRegs[MBUS_REG_LONL] = (mBusRegs[MBUS_REG_LONL]<<8) | EEPROM0_ReadByte(EE_REG_LON0);
//     mBusRegs[MBUS_REG_LONH] = EEPROM0_ReadByte(EE_REG_LON3);
//     mBusRegs[MBUS_REG_LONH] = (mBusRegs[MBUS_REG_LONH]<<8) | EEPROM0_ReadByte(EE_REG_LON2);
    nvm_read(INT_FLASH, EE_REG_LON0, (void *)&mBusRegs[MBUS_REG_LONL], 4);
  400ba4:	2304      	movs	r3, #4
  400ba6:	18e2      	adds	r2, r4, r3
  400ba8:	4920      	ldr	r1, [pc, #128]	; (400c2c <InitVars+0x98>)
  400baa:	2000      	movs	r0, #0
  400bac:	47a8      	blx	r5

//     mBusRegs[MBUS_REG_TZL] = EEPROM0_ReadByte(EE_REG_TZ1);
//     mBusRegs[MBUS_REG_TZL] = (mBusRegs[MBUS_REG_TZL]<<8) | EEPROM0_ReadByte(EE_REG_TZ0);
//     mBusRegs[MBUS_REG_TZH] = EEPROM0_ReadByte(EE_REG_TZ3);
//     mBusRegs[MBUS_REG_TZH] = (mBusRegs[MBUS_REG_TZH]<<8) | EEPROM0_ReadByte(EE_REG_TZ2);
    nvm_read(INT_FLASH, EE_REG_TZ0, (void *)&mBusRegs[MBUS_REG_TZL], 4);
  400bae:	2304      	movs	r3, #4
  400bb0:	f104 0208 	add.w	r2, r4, #8
  400bb4:	491e      	ldr	r1, [pc, #120]	; (400c30 <InitVars+0x9c>)
  400bb6:	2000      	movs	r0, #0
  400bb8:	47a8      	blx	r5

//     mBusRegs[MBUS_REG_DISTL] = EEPROM0_ReadByte(EE_REG_DIST1);
//     mBusRegs[MBUS_REG_DISTL] = (mBusRegs[MBUS_REG_DISTL]<<8) | EEPROM0_ReadByte(EE_REG_DIST0);
//     mBusRegs[MBUS_REG_DISTH] = EEPROM0_ReadByte(EE_REG_DIST3);
//     mBusRegs[MBUS_REG_DISTH] = (mBusRegs[MBUS_REG_DISTH]<<8) | EEPROM0_ReadByte(EE_REG_DIST2);
    nvm_read(INT_FLASH, EE_REG_DIST0, (void *)&mBusRegs[MBUS_REG_DISTL], 4);
  400bba:	2304      	movs	r3, #4
  400bbc:	f104 0230 	add.w	r2, r4, #48	; 0x30
  400bc0:	491c      	ldr	r1, [pc, #112]	; (400c34 <InitVars+0xa0>)
  400bc2:	2000      	movs	r0, #0
  400bc4:	47a8      	blx	r5

//     mBusRegs[MBUS_REG_WIDTHL] = EEPROM0_ReadByte(EE_REG_WIDTH1);
//     mBusRegs[MBUS_REG_WIDTHL] = (mBusRegs[MBUS_REG_WIDTHL]<<8) | EEPROM0_ReadByte(EE_REG_WIDTH0);
//     mBusRegs[MBUS_REG_WIDTHH] = EEPROM0_ReadByte(EE_REG_WIDTH3);
//     mBusRegs[MBUS_REG_WIDTHH] = (mBusRegs[MBUS_REG_WIDTHH]<<8) | EEPROM0_ReadByte(EE_REG_WIDTH2);
    nvm_read(INT_FLASH, EE_REG_WIDTH0, (void *)&mBusRegs[MBUS_REG_WIDTHL], 4);
  400bc6:	2304      	movs	r3, #4
  400bc8:	f104 0234 	add.w	r2, r4, #52	; 0x34
  400bcc:	491a      	ldr	r1, [pc, #104]	; (400c38 <InitVars+0xa4>)
  400bce:	2000      	movs	r0, #0
  400bd0:	47a8      	blx	r5

//     mBusRegs[MBUS_REG_PNLRNGL] = EEPROM0_ReadByte(EE_REG_PNLRNG1);
//     mBusRegs[MBUS_REG_PNLRNGL] = (mBusRegs[MBUS_REG_PNLRNGL]<<8) | EEPROM0_ReadByte(EE_REG_PNLRNG0);
//     mBusRegs[MBUS_REG_PNLRNGH] = EEPROM0_ReadByte(EE_REG_PNLRNG3);
//     mBusRegs[MBUS_REG_PNLRNGH] = (mBusRegs[MBUS_REG_PNLRNGH]<<8) | EEPROM0_ReadByte(EE_REG_PNLRNG2);
	nvm_read(INT_FLASH, EE_REG_PNLRNG0, (void *)&mBusRegs[MBUS_REG_PNLRNGL], 4);
  400bd2:	2304      	movs	r3, #4
  400bd4:	f104 0214 	add.w	r2, r4, #20
  400bd8:	4918      	ldr	r1, [pc, #96]	; (400c3c <InitVars+0xa8>)
  400bda:	2000      	movs	r0, #0
  400bdc:	47a8      	blx	r5
    
    //Init local vars
    ptr = (uint16_t*)&lat;
    ptr[1] = mBusRegs[MBUS_REG_LATH];
  400bde:	4b18      	ldr	r3, [pc, #96]	; (400c40 <InitVars+0xac>)
  400be0:	f1a4 0210 	sub.w	r2, r4, #16
  400be4:	8861      	ldrh	r1, [r4, #2]
  400be6:	8059      	strh	r1, [r3, #2]
    ptr[0] = mBusRegs[MBUS_REG_LATL];
  400be8:	8a11      	ldrh	r1, [r2, #16]
  400bea:	8019      	strh	r1, [r3, #0]
    ptr = (uint16_t*)&lon;
    ptr[1] = mBusRegs[MBUS_REG_LONH];
  400bec:	4b15      	ldr	r3, [pc, #84]	; (400c44 <InitVars+0xb0>)
  400bee:	88e1      	ldrh	r1, [r4, #6]
  400bf0:	8059      	strh	r1, [r3, #2]
    ptr[0] = mBusRegs[MBUS_REG_LONL];
  400bf2:	88a1      	ldrh	r1, [r4, #4]
  400bf4:	8019      	strh	r1, [r3, #0]
    ptr = (uint16_t*)&timeZone;
    ptr[1] = mBusRegs[MBUS_REG_TZH];
  400bf6:	4b14      	ldr	r3, [pc, #80]	; (400c48 <InitVars+0xb4>)
  400bf8:	8961      	ldrh	r1, [r4, #10]
  400bfa:	8059      	strh	r1, [r3, #2]
    ptr[0] = mBusRegs[MBUS_REG_TZL];
  400bfc:	8921      	ldrh	r1, [r4, #8]
  400bfe:	8019      	strh	r1, [r3, #0]
    ptr = (uint16_t*)&width;
    ptr[1] = mBusRegs[MBUS_REG_WIDTHH];
  400c00:	4b12      	ldr	r3, [pc, #72]	; (400c4c <InitVars+0xb8>)
  400c02:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
  400c04:	8059      	strh	r1, [r3, #2]
    ptr[0] = mBusRegs[MBUS_REG_WIDTHL];
  400c06:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
  400c08:	8019      	strh	r1, [r3, #0]
    ptr = (uint16_t*)&dist;
    ptr[1] = mBusRegs[MBUS_REG_DISTH];
  400c0a:	4b11      	ldr	r3, [pc, #68]	; (400c50 <InitVars+0xbc>)
  400c0c:	8e61      	ldrh	r1, [r4, #50]	; 0x32
  400c0e:	8059      	strh	r1, [r3, #2]
    ptr[0] = mBusRegs[MBUS_REG_DISTL];
  400c10:	8e21      	ldrh	r1, [r4, #48]	; 0x30
  400c12:	8019      	strh	r1, [r3, #0]
    ptr = (uint16_t*)&pvAngleRng;
    ptr[1] = mBusRegs[MBUS_REG_PNLRNGH];
  400c14:	4b0f      	ldr	r3, [pc, #60]	; (400c54 <InitVars+0xc0>)
  400c16:	8ae1      	ldrh	r1, [r4, #22]
  400c18:	8059      	strh	r1, [r3, #2]
    ptr[0] = mBusRegs[MBUS_REG_PNLRNGL];
  400c1a:	8aa2      	ldrh	r2, [r4, #20]
  400c1c:	801a      	strh	r2, [r3, #0]
  400c1e:	bd38      	pop	{r3, r4, r5, pc}
  400c20:	20000724 	.word	0x20000724
  400c24:	0043fc00 	.word	0x0043fc00
  400c28:	00400135 	.word	0x00400135
  400c2c:	0043fc04 	.word	0x0043fc04
  400c30:	0043fc08 	.word	0x0043fc08
  400c34:	0043fc0e 	.word	0x0043fc0e
  400c38:	0043fc12 	.word	0x0043fc12
  400c3c:	0043fc16 	.word	0x0043fc16
  400c40:	200000a0 	.word	0x200000a0
  400c44:	200000a4 	.word	0x200000a4
  400c48:	20000094 	.word	0x20000094
  400c4c:	200000a8 	.word	0x200000a8
  400c50:	20000098 	.word	0x20000098
  400c54:	2000009c 	.word	0x2000009c

00400c58 <InitTwiRTOS>:
    pvAngleRng = 43;*/
    
}

void InitTwiRTOS(void)
{
  400c58:	b510      	push	{r4, lr}
  400c5a:	b084      	sub	sp, #16
	const freertos_peripheral_options_t settings = {
  400c5c:	4b07      	ldr	r3, [pc, #28]	; (400c7c <InitTwiRTOS+0x24>)
  400c5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  400c60:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400c64:	2013      	movs	r0, #19
  400c66:	4b06      	ldr	r3, [pc, #24]	; (400c80 <InitTwiRTOS+0x28>)
  400c68:	4798      	blx	r3
	};

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_TWI_ID);

	twiPort = freertos_twi_master_init(BOARD_TWI, &settings);
  400c6a:	4669      	mov	r1, sp
  400c6c:	4805      	ldr	r0, [pc, #20]	; (400c84 <InitTwiRTOS+0x2c>)
  400c6e:	4b06      	ldr	r3, [pc, #24]	; (400c88 <InitTwiRTOS+0x30>)
  400c70:	4798      	blx	r3
  400c72:	4b06      	ldr	r3, [pc, #24]	; (400c8c <InitTwiRTOS+0x34>)
  400c74:	6018      	str	r0, [r3, #0]
}
  400c76:	b004      	add	sp, #16
  400c78:	bd10      	pop	{r4, pc}
  400c7a:	bf00      	nop
  400c7c:	004084b4 	.word	0x004084b4
  400c80:	00402c35 	.word	0x00402c35
  400c84:	40018000 	.word	0x40018000
  400c88:	00401c81 	.word	0x00401c81
  400c8c:	200029a0 	.word	0x200029a0

00400c90 <vPvTrackerInit>:
		vTaskDelay(1000);
    }
}

void vPvTrackerInit(void)
{
  400c90:	b508      	push	{r3, lr}
    /* Initialize all peripherals */
    /* Initialize TWI Port */
    InitTwiRTOS();
  400c92:	4b05      	ldr	r3, [pc, #20]	; (400ca8 <vPvTrackerInit+0x18>)
  400c94:	4798      	blx	r3

	/* Initialize FLASH Controller for EMULATED EEPROM Access*/
	nvm_init(INT_FLASH);
  400c96:	2000      	movs	r0, #0
  400c98:	4b04      	ldr	r3, [pc, #16]	; (400cac <vPvTrackerInit+0x1c>)
  400c9a:	4798      	blx	r3
	/* Initialize Variables from EEPROM */
    InitVars();
  400c9c:	4b04      	ldr	r3, [pc, #16]	; (400cb0 <vPvTrackerInit+0x20>)
  400c9e:	4798      	blx	r3
    
    /* Init Motor Controller */
	gpio_set_pin_low(PIN_MOTOR_RST_IDX);
  400ca0:	2020      	movs	r0, #32
  400ca2:	4b04      	ldr	r3, [pc, #16]	; (400cb4 <vPvTrackerInit+0x24>)
  400ca4:	4798      	blx	r3
  400ca6:	bd08      	pop	{r3, pc}
  400ca8:	00400c59 	.word	0x00400c59
  400cac:	00400129 	.word	0x00400129
  400cb0:	00400b95 	.word	0x00400b95
  400cb4:	004027b1 	.word	0x004027b1

00400cb8 <GetOrientation>:
        Debug_PutString(buff2);
    }
#endif

void GetOrientation(int16_t *acc, float *orientation)
{
  400cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400cbc:	b085      	sub	sp, #20
  400cbe:	4680      	mov	r8, r0
  400cc0:	460f      	mov	r7, r1
    float accFlt[3];
    accFlt[0] = ((float)acc[0])/32768.0f;
  400cc2:	4d29      	ldr	r5, [pc, #164]	; (400d68 <GetOrientation+0xb0>)
  400cc4:	f9b0 0000 	ldrsh.w	r0, [r0]
  400cc8:	47a8      	blx	r5
  400cca:	4c28      	ldr	r4, [pc, #160]	; (400d6c <GetOrientation+0xb4>)
  400ccc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400cd0:	47a0      	blx	r4
  400cd2:	4606      	mov	r6, r0
    accFlt[1] = ((float)acc[1])/32768.0f;
  400cd4:	f9b8 0002 	ldrsh.w	r0, [r8, #2]
  400cd8:	47a8      	blx	r5
  400cda:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400cde:	47a0      	blx	r4
  400ce0:	9000      	str	r0, [sp, #0]
    accFlt[2] = ((float)acc[2])/32768.0f;
  400ce2:	f9b8 0004 	ldrsh.w	r0, [r8, #4]
  400ce6:	47a8      	blx	r5
  400ce8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400cec:	47a0      	blx	r4
  400cee:	9002      	str	r0, [sp, #8]
    
    //Equation 25 (Rotate Across X Axis)
    orientation[0] = atan2(accFlt[1], accFlt[2]);
  400cf0:	4d1f      	ldr	r5, [pc, #124]	; (400d70 <GetOrientation+0xb8>)
  400cf2:	47a8      	blx	r5
  400cf4:	4680      	mov	r8, r0
  400cf6:	4689      	mov	r9, r1
  400cf8:	9800      	ldr	r0, [sp, #0]
  400cfa:	47a8      	blx	r5
  400cfc:	4642      	mov	r2, r8
  400cfe:	464b      	mov	r3, r9
  400d00:	f8df a07c 	ldr.w	sl, [pc, #124]	; 400d80 <GetOrientation+0xc8>
  400d04:	47d0      	blx	sl
    //Radian to degrees conversion
    orientation[0] = (180.0f * orientation[0])/(float)M_PI;
  400d06:	f8df 807c 	ldr.w	r8, [pc, #124]	; 400d84 <GetOrientation+0xcc>
  400d0a:	47c0      	blx	r8
  400d0c:	4919      	ldr	r1, [pc, #100]	; (400d74 <GetOrientation+0xbc>)
  400d0e:	47a0      	blx	r4
  400d10:	f8df 9074 	ldr.w	r9, [pc, #116]	; 400d88 <GetOrientation+0xd0>
  400d14:	4918      	ldr	r1, [pc, #96]	; (400d78 <GetOrientation+0xc0>)
  400d16:	47c8      	blx	r9
  400d18:	6038      	str	r0, [r7, #0]
    
    //Equation 26 (Rotate Across Y Axis)
    orientation[1] = sqrt(accFlt[1]*accFlt[1] + accFlt[2]*accFlt[2]);
  400d1a:	9900      	ldr	r1, [sp, #0]
  400d1c:	4608      	mov	r0, r1
  400d1e:	47a0      	blx	r4
  400d20:	9003      	str	r0, [sp, #12]
  400d22:	f8df b068 	ldr.w	fp, [pc, #104]	; 400d8c <GetOrientation+0xd4>
  400d26:	9900      	ldr	r1, [sp, #0]
  400d28:	4608      	mov	r0, r1
  400d2a:	47a0      	blx	r4
  400d2c:	9000      	str	r0, [sp, #0]
  400d2e:	9902      	ldr	r1, [sp, #8]
  400d30:	4608      	mov	r0, r1
  400d32:	47a0      	blx	r4
  400d34:	4601      	mov	r1, r0
  400d36:	9800      	ldr	r0, [sp, #0]
  400d38:	47d8      	blx	fp
  400d3a:	47a8      	blx	r5
  400d3c:	4b0f      	ldr	r3, [pc, #60]	; (400d7c <GetOrientation+0xc4>)
  400d3e:	4798      	blx	r3
  400d40:	47c0      	blx	r8
  400d42:	6078      	str	r0, [r7, #4]
    orientation[1] = atan2(-accFlt[0], orientation[1]); 
  400d44:	47a8      	blx	r5
  400d46:	e9cd 0100 	strd	r0, r1, [sp]
  400d4a:	f106 4000 	add.w	r0, r6, #2147483648	; 0x80000000
  400d4e:	47a8      	blx	r5
  400d50:	e9dd 2300 	ldrd	r2, r3, [sp]
  400d54:	47d0      	blx	sl
    //Radian to degrees conversion
    orientation[1] = (180.0f * orientation[1])/(float)M_PI;
  400d56:	47c0      	blx	r8
  400d58:	4906      	ldr	r1, [pc, #24]	; (400d74 <GetOrientation+0xbc>)
  400d5a:	47a0      	blx	r4
  400d5c:	4906      	ldr	r1, [pc, #24]	; (400d78 <GetOrientation+0xc0>)
  400d5e:	47c8      	blx	r9
  400d60:	6078      	str	r0, [r7, #4]
}
  400d62:	b005      	add	sp, #20
  400d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400d68:	00407c51 	.word	0x00407c51
  400d6c:	00407cf9 	.word	0x00407cf9
  400d70:	004073e5 	.word	0x004073e5
  400d74:	43340000 	.word	0x43340000
  400d78:	40490fdb 	.word	0x40490fdb
  400d7c:	00404b45 	.word	0x00404b45
  400d80:	00404b41 	.word	0x00404b41
  400d84:	00407a3d 	.word	0x00407a3d
  400d88:	00407e61 	.word	0x00407e61
  400d8c:	00407ae9 	.word	0x00407ae9

00400d90 <GotoAngle>:
    /* Enable Charge Ctrlr */
    //ccEn = 1;
} 

void GotoAngle(float pvAngle)
{
  400d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400d94:	b089      	sub	sp, #36	; 0x24
  400d96:	4605      	mov	r5, r0
  400d98:	9001      	str	r0, [sp, #4]
    uint16_t *ptr;
    int16_t accVals[3] = {};
  400d9a:	2300      	movs	r3, #0
  400d9c:	9306      	str	r3, [sp, #24]
  400d9e:	f8ad 301c 	strh.w	r3, [sp, #28]
    float oriVals[3], error = 0;
    uint8_t p = 0;
    float oriX, prevOri = 0;
    
    ICMReadAccDataAllTo(twiPort, ICM_ADDR,(uint16_t*)accVals, 50);
  400da2:	2332      	movs	r3, #50	; 0x32
  400da4:	aa06      	add	r2, sp, #24
  400da6:	2169      	movs	r1, #105	; 0x69
  400da8:	4845      	ldr	r0, [pc, #276]	; (400ec0 <GotoAngle+0x130>)
  400daa:	6800      	ldr	r0, [r0, #0]
  400dac:	4c45      	ldr	r4, [pc, #276]	; (400ec4 <GotoAngle+0x134>)
  400dae:	47a0      	blx	r4
    GetOrientation(accVals, oriVals);
  400db0:	a903      	add	r1, sp, #12
  400db2:	a806      	add	r0, sp, #24
  400db4:	4b44      	ldr	r3, [pc, #272]	; (400ec8 <GotoAngle+0x138>)
  400db6:	4798      	blx	r3
        Debug_PutString("Init X = ");
        PrintFlt(oriVals[0]);
        Debug_PutString("\r\n");
    #endif
    
    error = pvAngle - oriVals[0];
  400db8:	9903      	ldr	r1, [sp, #12]
  400dba:	4628      	mov	r0, r5
  400dbc:	4b43      	ldr	r3, [pc, #268]	; (400ecc <GotoAngle+0x13c>)
  400dbe:	4798      	blx	r3
  400dc0:	4604      	mov	r4, r0
    #ifdef DEBUG_EN
        Debug_PutString("Error = ");
        PrintFlt(error);
        Debug_PutString("\r\n");
    #endif
    if(error > 0)
  400dc2:	2100      	movs	r1, #0
  400dc4:	4b42      	ldr	r3, [pc, #264]	; (400ed0 <GotoAngle+0x140>)
  400dc6:	4798      	blx	r3
  400dc8:	b130      	cbz	r0, 400dd8 <GotoAngle+0x48>
    {
        //Set Anti Clockwise Direction
        #ifdef DEBUG_EN
            Debug_PutString("ACLK\r\n");
        #endif
        gpio_set_pin_low(PIN_MOTOR_A_IDX);
  400dca:	2021      	movs	r0, #33	; 0x21
  400dcc:	4b41      	ldr	r3, [pc, #260]	; (400ed4 <GotoAngle+0x144>)
  400dce:	4798      	blx	r3
		gpio_set_pin_high(PIN_MOTOR_B_IDX);
  400dd0:	2022      	movs	r0, #34	; 0x22
  400dd2:	4b41      	ldr	r3, [pc, #260]	; (400ed8 <GotoAngle+0x148>)
  400dd4:	4798      	blx	r3
  400dd6:	e005      	b.n	400de4 <GotoAngle+0x54>
    {
        //Set Clockwise Direction
        #ifdef DEBUG_EN
            Debug_PutString("CLK\r\n");
        #endif
        gpio_set_pin_high(PIN_MOTOR_A_IDX);
  400dd8:	2021      	movs	r0, #33	; 0x21
  400dda:	4b3f      	ldr	r3, [pc, #252]	; (400ed8 <GotoAngle+0x148>)
  400ddc:	4798      	blx	r3
        gpio_set_pin_low(PIN_MOTOR_B_IDX);
  400dde:	2022      	movs	r0, #34	; 0x22
  400de0:	4b3c      	ldr	r3, [pc, #240]	; (400ed4 <GotoAngle+0x144>)
  400de2:	4798      	blx	r3
    }
    
    //If error greater than +/- 1.0f
    if(!((error >=-1.0f)&&(error<1.0f)))
  400de4:	493d      	ldr	r1, [pc, #244]	; (400edc <GotoAngle+0x14c>)
  400de6:	4620      	mov	r0, r4
  400de8:	4b3d      	ldr	r3, [pc, #244]	; (400ee0 <GotoAngle+0x150>)
  400dea:	4798      	blx	r3
  400dec:	b130      	cbz	r0, 400dfc <GotoAngle+0x6c>
  400dee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  400df2:	4620      	mov	r0, r4
  400df4:	4b3b      	ldr	r3, [pc, #236]	; (400ee4 <GotoAngle+0x154>)
  400df6:	4798      	blx	r3
  400df8:	2800      	cmp	r0, #0
  400dfa:	d153      	bne.n	400ea4 <GotoAngle+0x114>
    {
        //Turn Motor On
        gpio_set_pin_high(PIN_MOTOR_RST_IDX);
  400dfc:	2020      	movs	r0, #32
  400dfe:	4b36      	ldr	r3, [pc, #216]	; (400ed8 <GotoAngle+0x148>)
  400e00:	4798      	blx	r3
        #ifdef DEBUG_EN
            Debug_PutString("ON\r\n");    
        #endif
    }
    
    while(!((error >=-1.0f)&&(error<1.0f)))
  400e02:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 400ee0 <GotoAngle+0x150>
  400e06:	f04f 0a00 	mov.w	sl, #0
    {
        prevOri = 0;
        for(p = 0; p < 8; p++)
        {
            ICMReadAccDataAllTo(twiPort, ICM_ADDR,(uint16_t*)accVals, 50);
  400e0a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 400ec0 <GotoAngle+0x130>
  400e0e:	e03d      	b.n	400e8c <GotoAngle+0xfc>
  400e10:	2401      	movs	r4, #1
  400e12:	4655      	mov	r5, sl
  400e14:	e001      	b.n	400e1a <GotoAngle+0x8a>
  400e16:	2401      	movs	r4, #1
  400e18:	4655      	mov	r5, sl
  400e1a:	4f2a      	ldr	r7, [pc, #168]	; (400ec4 <GotoAngle+0x134>)
            GetOrientation(accVals, oriVals);
  400e1c:	4e2a      	ldr	r6, [pc, #168]	; (400ec8 <GotoAngle+0x138>)
    while(!((error >=-1.0f)&&(error<1.0f)))
    {
        prevOri = 0;
        for(p = 0; p < 8; p++)
        {
            ICMReadAccDataAllTo(twiPort, ICM_ADDR,(uint16_t*)accVals, 50);
  400e1e:	2332      	movs	r3, #50	; 0x32
  400e20:	aa06      	add	r2, sp, #24
  400e22:	2169      	movs	r1, #105	; 0x69
  400e24:	f8d9 0000 	ldr.w	r0, [r9]
  400e28:	47b8      	blx	r7
            GetOrientation(accVals, oriVals);
  400e2a:	a903      	add	r1, sp, #12
  400e2c:	a806      	add	r0, sp, #24
  400e2e:	47b0      	blx	r6
            oriX = prevOri + ((oriVals[0] - prevOri)/((float)(p+1)));
  400e30:	4629      	mov	r1, r5
  400e32:	9803      	ldr	r0, [sp, #12]
  400e34:	4b25      	ldr	r3, [pc, #148]	; (400ecc <GotoAngle+0x13c>)
  400e36:	4798      	blx	r3
  400e38:	4680      	mov	r8, r0
  400e3a:	4620      	mov	r0, r4
  400e3c:	4b2a      	ldr	r3, [pc, #168]	; (400ee8 <GotoAngle+0x158>)
  400e3e:	4798      	blx	r3
  400e40:	4601      	mov	r1, r0
  400e42:	4640      	mov	r0, r8
  400e44:	4b29      	ldr	r3, [pc, #164]	; (400eec <GotoAngle+0x15c>)
  400e46:	4798      	blx	r3
  400e48:	4601      	mov	r1, r0
  400e4a:	4628      	mov	r0, r5
  400e4c:	4b28      	ldr	r3, [pc, #160]	; (400ef0 <GotoAngle+0x160>)
  400e4e:	4798      	blx	r3
  400e50:	4605      	mov	r5, r0
        	prevOri = oriX;
            delay_ms(40);
  400e52:	4828      	ldr	r0, [pc, #160]	; (400ef4 <GotoAngle+0x164>)
  400e54:	4b28      	ldr	r3, [pc, #160]	; (400ef8 <GotoAngle+0x168>)
  400e56:	4798      	blx	r3
  400e58:	3401      	adds	r4, #1
    }
    
    while(!((error >=-1.0f)&&(error<1.0f)))
    {
        prevOri = 0;
        for(p = 0; p < 8; p++)
  400e5a:	2c09      	cmp	r4, #9
  400e5c:	d1df      	bne.n	400e1e <GotoAngle+0x8e>
            GetOrientation(accVals, oriVals);
            oriX = prevOri + ((oriVals[0] - prevOri)/((float)(p+1)));
        	prevOri = oriX;
            delay_ms(40);
        }
        oriVals[0] = oriX;
  400e5e:	9503      	str	r5, [sp, #12]
            Debug_PutString("X = ");
            PrintFlt(oriVals[0]);
            Debug_PutString("\r\n");
        #endif
        
        error = pvAngle - oriVals[0];
  400e60:	4629      	mov	r1, r5
  400e62:	9801      	ldr	r0, [sp, #4]
  400e64:	4b19      	ldr	r3, [pc, #100]	; (400ecc <GotoAngle+0x13c>)
  400e66:	4798      	blx	r3
  400e68:	4604      	mov	r4, r0
        
        if(error > 0)
  400e6a:	4651      	mov	r1, sl
  400e6c:	4b18      	ldr	r3, [pc, #96]	; (400ed0 <GotoAngle+0x140>)
  400e6e:	4798      	blx	r3
  400e70:	b130      	cbz	r0, 400e80 <GotoAngle+0xf0>
        {
            //Set Anti Clockwise Direction
            #ifdef DEBUG_EN
                Debug_PutString("ACLK\r\n");
            #endif
			gpio_set_pin_low(PIN_MOTOR_A_IDX);
  400e72:	2021      	movs	r0, #33	; 0x21
  400e74:	4b17      	ldr	r3, [pc, #92]	; (400ed4 <GotoAngle+0x144>)
  400e76:	4798      	blx	r3
			gpio_set_pin_high(PIN_MOTOR_B_IDX);
  400e78:	2022      	movs	r0, #34	; 0x22
  400e7a:	4b17      	ldr	r3, [pc, #92]	; (400ed8 <GotoAngle+0x148>)
  400e7c:	4798      	blx	r3
  400e7e:	e005      	b.n	400e8c <GotoAngle+0xfc>
        {
            //Set Clockwise Direction
            #ifdef DEBUG_EN
                Debug_PutString("CLK\r\n");
            #endif
			gpio_set_pin_high(PIN_MOTOR_A_IDX);
  400e80:	2021      	movs	r0, #33	; 0x21
  400e82:	4b15      	ldr	r3, [pc, #84]	; (400ed8 <GotoAngle+0x148>)
  400e84:	4798      	blx	r3
			gpio_set_pin_low(PIN_MOTOR_B_IDX);
  400e86:	2022      	movs	r0, #34	; 0x22
  400e88:	4b12      	ldr	r3, [pc, #72]	; (400ed4 <GotoAngle+0x144>)
  400e8a:	4798      	blx	r3
        #ifdef DEBUG_EN
            Debug_PutString("ON\r\n");    
        #endif
    }
    
    while(!((error >=-1.0f)&&(error<1.0f)))
  400e8c:	4913      	ldr	r1, [pc, #76]	; (400edc <GotoAngle+0x14c>)
  400e8e:	4620      	mov	r0, r4
  400e90:	47d8      	blx	fp
  400e92:	2800      	cmp	r0, #0
  400e94:	d0bc      	beq.n	400e10 <GotoAngle+0x80>
  400e96:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  400e9a:	4620      	mov	r0, r4
  400e9c:	4b11      	ldr	r3, [pc, #68]	; (400ee4 <GotoAngle+0x154>)
  400e9e:	4798      	blx	r3
  400ea0:	2800      	cmp	r0, #0
  400ea2:	d0b8      	beq.n	400e16 <GotoAngle+0x86>
			gpio_set_pin_high(PIN_MOTOR_A_IDX);
			gpio_set_pin_low(PIN_MOTOR_B_IDX);
        }
    }
    //Turn Motor Off
    gpio_set_pin_low(PIN_MOTOR_RST_IDX);
  400ea4:	2020      	movs	r0, #32
  400ea6:	4b0b      	ldr	r3, [pc, #44]	; (400ed4 <GotoAngle+0x144>)
  400ea8:	4798      	blx	r3
    #ifdef DEBUG_EN
        Debug_PutString("OFF\r\n");
    #endif
    
    ptr = (uint16_t*)&oriVals[0];
    mBusRegs[MBUS_REG_ANXH] = ptr[1];
  400eaa:	4b14      	ldr	r3, [pc, #80]	; (400efc <GotoAngle+0x16c>)
  400eac:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  400eb0:	83da      	strh	r2, [r3, #30]
    mBusRegs[MBUS_REG_ANXL] = ptr[0];
  400eb2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  400eb6:	839a      	strh	r2, [r3, #28]
}
  400eb8:	b009      	add	sp, #36	; 0x24
  400eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400ebe:	bf00      	nop
  400ec0:	200029a0 	.word	0x200029a0
  400ec4:	00400899 	.word	0x00400899
  400ec8:	00400cb9 	.word	0x00400cb9
  400ecc:	00407ae5 	.word	0x00407ae5
  400ed0:	00408071 	.word	0x00408071
  400ed4:	004027b1 	.word	0x004027b1
  400ed8:	00402795 	.word	0x00402795
  400edc:	bf800000 	.word	0xbf800000
  400ee0:	0040805d 	.word	0x0040805d
  400ee4:	00408035 	.word	0x00408035
  400ee8:	00407c51 	.word	0x00407c51
  400eec:	00407e61 	.word	0x00407e61
  400ef0:	00407ae9 	.word	0x00407ae9
  400ef4:	00053b4a 	.word	0x00053b4a
  400ef8:	20000089 	.word	0x20000089
  400efc:	20000714 	.word	0x20000714

00400f00 <GetPvAngle>:
    //Radian to degrees conversion
    orientation[1] = (180.0f * orientation[1])/(float)M_PI;
}

float GetPvAngle(void)
{
  400f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400f04:	b099      	sub	sp, #100	; 0x64
	float e, f, g, h, i, j, k, l, m, n, o, p;
	float q, r, s, t;
	float timeInSecs;
    
    //BCD to Int Conversion
    date = ((mBusRegs[MBUS_REG_DD]>>4)*10) + (mBusRegs[MBUS_REG_DD]&0x000F); 
  400f06:	4998      	ldr	r1, [pc, #608]	; (401168 <GetPvAngle+0x268>)
  400f08:	890f      	ldrh	r7, [r1, #8]
    mon = ((mBusRegs[MBUS_REG_MM]>>4)*10) + (mBusRegs[MBUS_REG_MM]&0x000F); 
  400f0a:	894b      	ldrh	r3, [r1, #10]
  400f0c:	091d      	lsrs	r5, r3, #4
  400f0e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  400f12:	f003 030f 	and.w	r3, r3, #15
  400f16:	eb03 0545 	add.w	r5, r3, r5, lsl #1
  400f1a:	b22d      	sxth	r5, r5
    year = ((mBusRegs[MBUS_REG_YY]>>4)*10) + (mBusRegs[MBUS_REG_YY]&0x000F); 
  400f1c:	898b      	ldrh	r3, [r1, #12]
    year += 2000;
    hrs = ((mBusRegs[MBUS_REG_HRS]>>4)*10) + (mBusRegs[MBUS_REG_HRS]&0x000F); 
  400f1e:	888a      	ldrh	r2, [r1, #4]
    min = ((mBusRegs[MBUS_REG_MIN]>>4)*10) + (mBusRegs[MBUS_REG_MIN]&0x000F); 
  400f20:	8848      	ldrh	r0, [r1, #2]
  400f22:	0904      	lsrs	r4, r0, #4
  400f24:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400f28:	f000 000f 	and.w	r0, r0, #15
  400f2c:	eb00 0044 	add.w	r0, r0, r4, lsl #1
  400f30:	b200      	sxth	r0, r0
  400f32:	9005      	str	r0, [sp, #20]
    sec = ((mBusRegs[MBUS_REG_SEC]>>4)*10) + (mBusRegs[MBUS_REG_SEC]&0x000F); 
  400f34:	8809      	ldrh	r1, [r1, #0]
  400f36:	0908      	lsrs	r0, r1, #4
  400f38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  400f3c:	f001 010f 	and.w	r1, r1, #15
  400f40:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  400f44:	b209      	sxth	r1, r1
  400f46:	9106      	str	r1, [sp, #24]
        Debug_PutString(",");
        PrintInt(sec);
        Debug_PutString(",");
    #endif
    
    timeInSecs = (hrs*3600 + min*60 + sec)/86400.0f;
  400f48:	0910      	lsrs	r0, r2, #4
  400f4a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  400f4e:	f002 020f 	and.w	r2, r2, #15
  400f52:	eb02 0040 	add.w	r0, r2, r0, lsl #1
  400f56:	b202      	sxth	r2, r0
  400f58:	9207      	str	r2, [sp, #28]

    //Angle Calcualation Algorithm
	if (mon <= 2)
	{
		x1 = 1;
  400f5a:	2d02      	cmp	r5, #2
  400f5c:	bfcc      	ite	gt
  400f5e:	f04f 0800 	movgt.w	r8, #0
  400f62:	f04f 0801 	movle.w	r8, #1
	}
	x2 = 12 * x1;
	x3 = x2 - 3;
	x4 = mon + x3;
	x5 = 4800 - x1;
	x7 = x5 + year;
  400f66:	f003 040f 	and.w	r4, r3, #15
  400f6a:	f504 64fa 	add.w	r4, r4, #2000	; 0x7d0
  400f6e:	091b      	lsrs	r3, r3, #4
  400f70:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400f74:	eb04 0343 	add.w	r3, r4, r3, lsl #1
  400f78:	f5c8 5496 	rsb	r4, r8, #4800	; 0x12c0
  400f7c:	fa04 f483 	sxtah	r4, r4, r3
	y1 = y0 + 2;
	y2 = y1 / 5.0f;
	y3 = date + y2;
	y4 = 365 * x7;
	y5 = y3 + y4;
	y6 = x7 / 4.0f;
  400f80:	f8df 9270 	ldr.w	r9, [pc, #624]	; 4011f4 <GetPvAngle+0x2f4>
  400f84:	4620      	mov	r0, r4
  400f86:	47c8      	blx	r9
  400f88:	4606      	mov	r6, r0
	y15 = y13 + y14;
	y16 = sec / 86400.0f;
	x13 = y15 + y16;

	e = x9 + x13;
	f = (e - 2451545.0f) / 36525.0f;
  400f8a:	ea4f 0048 	mov.w	r0, r8, lsl #1
  400f8e:	4440      	add	r0, r8
  400f90:	eb05 0080 	add.w	r0, r5, r0, lsl #2
  400f94:	3803      	subs	r0, #3
  400f96:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
  400f9a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
  400f9e:	3002      	adds	r0, #2
  400fa0:	47c8      	blx	r9
  400fa2:	4d72      	ldr	r5, [pc, #456]	; (40116c <GetPvAngle+0x26c>)
  400fa4:	4972      	ldr	r1, [pc, #456]	; (401170 <GetPvAngle+0x270>)
  400fa6:	47a8      	blx	r5
  400fa8:	4680      	mov	r8, r0
  400faa:	0938      	lsrs	r0, r7, #4
  400fac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  400fb0:	f007 070f 	and.w	r7, r7, #15
  400fb4:	eb07 0040 	add.w	r0, r7, r0, lsl #1
  400fb8:	b200      	sxth	r0, r0
  400fba:	47c8      	blx	r9
  400fbc:	4601      	mov	r1, r0
  400fbe:	4640      	mov	r0, r8
  400fc0:	4b6c      	ldr	r3, [pc, #432]	; (401174 <GetPvAngle+0x274>)
  400fc2:	4798      	blx	r3
  400fc4:	4680      	mov	r8, r0
  400fc6:	f240 106d 	movw	r0, #365	; 0x16d
  400fca:	fb00 f004 	mul.w	r0, r0, r4
  400fce:	47c8      	blx	r9
  400fd0:	4601      	mov	r1, r0
  400fd2:	4640      	mov	r0, r8
  400fd4:	4b67      	ldr	r3, [pc, #412]	; (401174 <GetPvAngle+0x274>)
  400fd6:	4798      	blx	r3
  400fd8:	4680      	mov	r8, r0
  400fda:	4c67      	ldr	r4, [pc, #412]	; (401178 <GetPvAngle+0x278>)
  400fdc:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
  400fe0:	4630      	mov	r0, r6
  400fe2:	47a0      	blx	r4
  400fe4:	4601      	mov	r1, r0
  400fe6:	4640      	mov	r0, r8
  400fe8:	4b62      	ldr	r3, [pc, #392]	; (401174 <GetPvAngle+0x274>)
  400fea:	4798      	blx	r3
  400fec:	4680      	mov	r8, r0
  400fee:	4963      	ldr	r1, [pc, #396]	; (40117c <GetPvAngle+0x27c>)
  400ff0:	4630      	mov	r0, r6
  400ff2:	47a8      	blx	r5
  400ff4:	f8df b200 	ldr.w	fp, [pc, #512]	; 4011f8 <GetPvAngle+0x2f8>
  400ff8:	4601      	mov	r1, r0
  400ffa:	4640      	mov	r0, r8
  400ffc:	47d8      	blx	fp
  400ffe:	4680      	mov	r8, r0
  401000:	495f      	ldr	r1, [pc, #380]	; (401180 <GetPvAngle+0x280>)
  401002:	4630      	mov	r0, r6
  401004:	47a8      	blx	r5
  401006:	4601      	mov	r1, r0
  401008:	4640      	mov	r0, r8
  40100a:	4b5a      	ldr	r3, [pc, #360]	; (401174 <GetPvAngle+0x274>)
  40100c:	4798      	blx	r3
  40100e:	495d      	ldr	r1, [pc, #372]	; (401184 <GetPvAngle+0x284>)
  401010:	47d8      	blx	fp
  401012:	4606      	mov	r6, r0
  401014:	9b07      	ldr	r3, [sp, #28]
  401016:	f1a3 000c 	sub.w	r0, r3, #12
  40101a:	47c8      	blx	r9
  40101c:	495a      	ldr	r1, [pc, #360]	; (401188 <GetPvAngle+0x288>)
  40101e:	47a8      	blx	r5
  401020:	4680      	mov	r8, r0
  401022:	9805      	ldr	r0, [sp, #20]
  401024:	47c8      	blx	r9
  401026:	4959      	ldr	r1, [pc, #356]	; (40118c <GetPvAngle+0x28c>)
  401028:	47a8      	blx	r5
  40102a:	4601      	mov	r1, r0
  40102c:	4640      	mov	r0, r8
  40102e:	4b51      	ldr	r3, [pc, #324]	; (401174 <GetPvAngle+0x274>)
  401030:	4798      	blx	r3
  401032:	4680      	mov	r8, r0
  401034:	9806      	ldr	r0, [sp, #24]
  401036:	47c8      	blx	r9
  401038:	4955      	ldr	r1, [pc, #340]	; (401190 <GetPvAngle+0x290>)
  40103a:	47a8      	blx	r5
  40103c:	4601      	mov	r1, r0
  40103e:	4640      	mov	r0, r8
  401040:	4b4c      	ldr	r3, [pc, #304]	; (401174 <GetPvAngle+0x274>)
  401042:	4798      	blx	r3
  401044:	4601      	mov	r1, r0
  401046:	4630      	mov	r0, r6
  401048:	4b4a      	ldr	r3, [pc, #296]	; (401174 <GetPvAngle+0x274>)
  40104a:	4798      	blx	r3
  40104c:	4951      	ldr	r1, [pc, #324]	; (401194 <GetPvAngle+0x294>)
  40104e:	47d8      	blx	fp
  401050:	4951      	ldr	r1, [pc, #324]	; (401198 <GetPvAngle+0x298>)
  401052:	47a8      	blx	r5
  401054:	4607      	mov	r7, r0
	g = ((int)(280.46646f + f*(36000.76983f + f*0.0003032f))) % 360; //mod
  401056:	4951      	ldr	r1, [pc, #324]	; (40119c <GetPvAngle+0x29c>)
  401058:	47a0      	blx	r4
  40105a:	4951      	ldr	r1, [pc, #324]	; (4011a0 <GetPvAngle+0x2a0>)
  40105c:	4b45      	ldr	r3, [pc, #276]	; (401174 <GetPvAngle+0x274>)
  40105e:	4798      	blx	r3
  401060:	4639      	mov	r1, r7
  401062:	47a0      	blx	r4
  401064:	494f      	ldr	r1, [pc, #316]	; (4011a4 <GetPvAngle+0x2a4>)
  401066:	4b43      	ldr	r3, [pc, #268]	; (401174 <GetPvAngle+0x274>)
  401068:	4798      	blx	r3
  40106a:	4b4f      	ldr	r3, [pc, #316]	; (4011a8 <GetPvAngle+0x2a8>)
  40106c:	4798      	blx	r3
  40106e:	4a4f      	ldr	r2, [pc, #316]	; (4011ac <GetPvAngle+0x2ac>)
  401070:	fb80 2302 	smull	r2, r3, r0, r2
  401074:	18c2      	adds	r2, r0, r3
  401076:	17c3      	asrs	r3, r0, #31
  401078:	ebc3 2322 	rsb	r3, r3, r2, asr #8
  40107c:	f44f 72b4 	mov.w	r2, #360	; 0x168
  401080:	fb02 0013 	mls	r0, r2, r3, r0
  401084:	47c8      	blx	r9
  401086:	9008      	str	r0, [sp, #32]
	h = 357.52911f + f*(35999.05029f - 0.0001537f*f);
  401088:	4949      	ldr	r1, [pc, #292]	; (4011b0 <GetPvAngle+0x2b0>)
  40108a:	4638      	mov	r0, r7
  40108c:	47a0      	blx	r4
  40108e:	4601      	mov	r1, r0
  401090:	4848      	ldr	r0, [pc, #288]	; (4011b4 <GetPvAngle+0x2b4>)
  401092:	47d8      	blx	fp
  401094:	4639      	mov	r1, r7
  401096:	47a0      	blx	r4
  401098:	4947      	ldr	r1, [pc, #284]	; (4011b8 <GetPvAngle+0x2b8>)
  40109a:	4b36      	ldr	r3, [pc, #216]	; (401174 <GetPvAngle+0x274>)
  40109c:	4798      	blx	r3
  40109e:	4680      	mov	r8, r0
	i = 0.016708634f - f*(0.000042037f + 0.0000001267f*f);
  4010a0:	4946      	ldr	r1, [pc, #280]	; (4011bc <GetPvAngle+0x2bc>)
  4010a2:	4638      	mov	r0, r7
  4010a4:	47a0      	blx	r4
  4010a6:	4946      	ldr	r1, [pc, #280]	; (4011c0 <GetPvAngle+0x2c0>)
  4010a8:	4b32      	ldr	r3, [pc, #200]	; (401174 <GetPvAngle+0x274>)
  4010aa:	4798      	blx	r3
  4010ac:	4639      	mov	r1, r7
  4010ae:	47a0      	blx	r4
  4010b0:	4601      	mov	r1, r0
  4010b2:	4844      	ldr	r0, [pc, #272]	; (4011c4 <GetPvAngle+0x2c4>)
  4010b4:	47d8      	blx	fp
  4010b6:	9004      	str	r0, [sp, #16]
		return NAN;
}

float Rad(float deg)
{
	return ((float)M_PI*deg)/180.0f;
  4010b8:	4943      	ldr	r1, [pc, #268]	; (4011c8 <GetPvAngle+0x2c8>)
  4010ba:	4640      	mov	r0, r8
  4010bc:	47a0      	blx	r4
  4010be:	4943      	ldr	r1, [pc, #268]	; (4011cc <GetPvAngle+0x2cc>)
  4010c0:	47a8      	blx	r5
  4010c2:	9010      	str	r0, [sp, #64]	; 0x40
	e = x9 + x13;
	f = (e - 2451545.0f) / 36525.0f;
	g = ((int)(280.46646f + f*(36000.76983f + f*0.0003032f))) % 360; //mod
	h = 357.52911f + f*(35999.05029f - 0.0001537f*f);
	i = 0.016708634f - f*(0.000042037f + 0.0000001267f*f);
	j = sin(Rad(h))*(1.914602f - f*(0.004817f + 0.000014f*f));
  4010c4:	4e42      	ldr	r6, [pc, #264]	; (4011d0 <GetPvAngle+0x2d0>)
  4010c6:	47b0      	blx	r6
  4010c8:	4b42      	ldr	r3, [pc, #264]	; (4011d4 <GetPvAngle+0x2d4>)
  4010ca:	4798      	blx	r3
  4010cc:	e9cd 0100 	strd	r0, r1, [sp]
	j = j + sin(Rad(2 * h))*(0.019993f - 0.000101f*f);
  4010d0:	4641      	mov	r1, r8
  4010d2:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  4010d6:	4640      	mov	r0, r8
  4010d8:	4b26      	ldr	r3, [pc, #152]	; (401174 <GetPvAngle+0x274>)
  4010da:	4798      	blx	r3
  4010dc:	493a      	ldr	r1, [pc, #232]	; (4011c8 <GetPvAngle+0x2c8>)
  4010de:	47a0      	blx	r4
  4010e0:	493a      	ldr	r1, [pc, #232]	; (4011cc <GetPvAngle+0x2cc>)
  4010e2:	47a8      	blx	r5
  4010e4:	47b0      	blx	r6
  4010e6:	4b3b      	ldr	r3, [pc, #236]	; (4011d4 <GetPvAngle+0x2d4>)
  4010e8:	4798      	blx	r3
  4010ea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4010ee:	493a      	ldr	r1, [pc, #232]	; (4011d8 <GetPvAngle+0x2d8>)
  4010f0:	4638      	mov	r0, r7
  4010f2:	47a0      	blx	r4
  4010f4:	4939      	ldr	r1, [pc, #228]	; (4011dc <GetPvAngle+0x2dc>)
  4010f6:	4b1f      	ldr	r3, [pc, #124]	; (401174 <GetPvAngle+0x274>)
  4010f8:	4798      	blx	r3
  4010fa:	4639      	mov	r1, r7
  4010fc:	47a0      	blx	r4
  4010fe:	4601      	mov	r1, r0
  401100:	4837      	ldr	r0, [pc, #220]	; (4011e0 <GetPvAngle+0x2e0>)
  401102:	47d8      	blx	fp
  401104:	47b0      	blx	r6
  401106:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 4011fc <GetPvAngle+0x2fc>
  40110a:	e9dd 2300 	ldrd	r2, r3, [sp]
  40110e:	47d0      	blx	sl
  401110:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 401200 <GetPvAngle+0x300>
  401114:	47c0      	blx	r8
  401116:	47b0      	blx	r6
  401118:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  40111c:	4931      	ldr	r1, [pc, #196]	; (4011e4 <GetPvAngle+0x2e4>)
  40111e:	9702      	str	r7, [sp, #8]
  401120:	4638      	mov	r0, r7
  401122:	47a0      	blx	r4
  401124:	4601      	mov	r1, r0
  401126:	4830      	ldr	r0, [pc, #192]	; (4011e8 <GetPvAngle+0x2e8>)
  401128:	47d8      	blx	fp
  40112a:	47b0      	blx	r6
  40112c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  401130:	47d0      	blx	sl
  401132:	4602      	mov	r2, r0
  401134:	460b      	mov	r3, r1
  401136:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40113a:	4f2c      	ldr	r7, [pc, #176]	; (4011ec <GetPvAngle+0x2ec>)
  40113c:	47b8      	blx	r7
  40113e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	j = j + sin(Rad(3 * h))*0.000289f;
  401142:	492b      	ldr	r1, [pc, #172]	; (4011f0 <GetPvAngle+0x2f0>)
  401144:	980c      	ldr	r0, [sp, #48]	; 0x30
  401146:	47a0      	blx	r4
  401148:	491f      	ldr	r1, [pc, #124]	; (4011c8 <GetPvAngle+0x2c8>)
  40114a:	47a0      	blx	r4
  40114c:	491f      	ldr	r1, [pc, #124]	; (4011cc <GetPvAngle+0x2cc>)
  40114e:	47a8      	blx	r5
  401150:	47b0      	blx	r6
  401152:	4f20      	ldr	r7, [pc, #128]	; (4011d4 <GetPvAngle+0x2d4>)
  401154:	47b8      	blx	r7
  401156:	a302      	add	r3, pc, #8	; (adr r3, 401160 <GetPvAngle+0x260>)
  401158:	e9d3 2300 	ldrd	r2, r3, [r3]
  40115c:	e052      	b.n	401204 <GetPvAngle+0x304>
  40115e:	bf00      	nop
  401160:	80000000 	.word	0x80000000
  401164:	3f32f09d 	.word	0x3f32f09d
  401168:	20000714 	.word	0x20000714
  40116c:	00407e61 	.word	0x00407e61
  401170:	40a00000 	.word	0x40a00000
  401174:	00407ae9 	.word	0x00407ae9
  401178:	00407cf9 	.word	0x00407cf9
  40117c:	42c80000 	.word	0x42c80000
  401180:	43c80000 	.word	0x43c80000
  401184:	46fa5a00 	.word	0x46fa5a00
  401188:	41c00000 	.word	0x41c00000
  40118c:	44b40000 	.word	0x44b40000
  401190:	47a8c000 	.word	0x47a8c000
  401194:	4a15a164 	.word	0x4a15a164
  401198:	470ead00 	.word	0x470ead00
  40119c:	399ef6d1 	.word	0x399ef6d1
  4011a0:	470ca0c5 	.word	0x470ca0c5
  4011a4:	438c3bb5 	.word	0x438c3bb5
  4011a8:	00408085 	.word	0x00408085
  4011ac:	b60b60b7 	.word	0xb60b60b7
  4011b0:	39212a88 	.word	0x39212a88
  4011b4:	470c9f0d 	.word	0x470c9f0d
  4011b8:	43b2c3ba 	.word	0x43b2c3ba
  4011bc:	34080b08 	.word	0x34080b08
  4011c0:	383050e3 	.word	0x383050e3
  4011c4:	3c88e08c 	.word	0x3c88e08c
  4011c8:	40490fdb 	.word	0x40490fdb
  4011cc:	43340000 	.word	0x43340000
  4011d0:	004073e5 	.word	0x004073e5
  4011d4:	004048fd 	.word	0x004048fd
  4011d8:	376ae18b 	.word	0x376ae18b
  4011dc:	3b9dd7ed 	.word	0x3b9dd7ed
  4011e0:	3ff511ae 	.word	0x3ff511ae
  4011e4:	38d3cff6 	.word	0x38d3cff6
  4011e8:	3ca3c85c 	.word	0x3ca3c85c
  4011ec:	00407129 	.word	0x00407129
  4011f0:	40400000 	.word	0x40400000
  4011f4:	00407c51 	.word	0x00407c51
  4011f8:	00407ae5 	.word	0x00407ae5
  4011fc:	0040748d 	.word	0x0040748d
  401200:	00407a3d 	.word	0x00407a3d
  401204:	47d0      	blx	sl
  401206:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  40120a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40120e:	47c0      	blx	r8
  401210:	47b0      	blx	r6
  401212:	4602      	mov	r2, r0
  401214:	460b      	mov	r3, r1
  401216:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  40121a:	4f89      	ldr	r7, [pc, #548]	; (401440 <GetPvAngle+0x540>)
  40121c:	47b8      	blx	r7
  40121e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
	k = g + j;
	l = k - 0.00569f - 0.00478f*sin(Rad(125.04f - 1934.136f*f));
  401222:	4988      	ldr	r1, [pc, #544]	; (401444 <GetPvAngle+0x544>)
  401224:	9802      	ldr	r0, [sp, #8]
  401226:	47a0      	blx	r4
  401228:	4601      	mov	r1, r0
  40122a:	4887      	ldr	r0, [pc, #540]	; (401448 <GetPvAngle+0x548>)
  40122c:	47d8      	blx	fp
  40122e:	4987      	ldr	r1, [pc, #540]	; (40144c <GetPvAngle+0x54c>)
  401230:	47a0      	blx	r4
  401232:	4987      	ldr	r1, [pc, #540]	; (401450 <GetPvAngle+0x550>)
  401234:	47a8      	blx	r5
  401236:	47b0      	blx	r6
  401238:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  40123c:	4f85      	ldr	r7, [pc, #532]	; (401454 <GetPvAngle+0x554>)
  40123e:	47b8      	blx	r7
  401240:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
	m = 23 + (26 + ((21.448f - f*(46.815f + f*(0.00059f - f*0.001813f)))) / 60.0f) / 60.0f;
	n = m + 0.00256f*cos(Rad(125.04f - 1934.136f*f));
  401244:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  401248:	4f83      	ldr	r7, [pc, #524]	; (401458 <GetPvAngle+0x558>)
  40124a:	47b8      	blx	r7
  40124c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  401250:	4982      	ldr	r1, [pc, #520]	; (40145c <GetPvAngle+0x55c>)
  401252:	9f02      	ldr	r7, [sp, #8]
  401254:	4638      	mov	r0, r7
  401256:	47a0      	blx	r4
  401258:	4601      	mov	r1, r0
  40125a:	4881      	ldr	r0, [pc, #516]	; (401460 <GetPvAngle+0x560>)
  40125c:	47d8      	blx	fp
  40125e:	4639      	mov	r1, r7
  401260:	47a0      	blx	r4
  401262:	4980      	ldr	r1, [pc, #512]	; (401464 <GetPvAngle+0x564>)
  401264:	4b80      	ldr	r3, [pc, #512]	; (401468 <GetPvAngle+0x568>)
  401266:	4798      	blx	r3
  401268:	4639      	mov	r1, r7
  40126a:	47a0      	blx	r4
  40126c:	4601      	mov	r1, r0
  40126e:	487f      	ldr	r0, [pc, #508]	; (40146c <GetPvAngle+0x56c>)
  401270:	47d8      	blx	fp
  401272:	497f      	ldr	r1, [pc, #508]	; (401470 <GetPvAngle+0x570>)
  401274:	47a8      	blx	r5
  401276:	497f      	ldr	r1, [pc, #508]	; (401474 <GetPvAngle+0x574>)
  401278:	4b7b      	ldr	r3, [pc, #492]	; (401468 <GetPvAngle+0x568>)
  40127a:	4798      	blx	r3
  40127c:	497c      	ldr	r1, [pc, #496]	; (401470 <GetPvAngle+0x570>)
  40127e:	47a8      	blx	r5
  401280:	497d      	ldr	r1, [pc, #500]	; (401478 <GetPvAngle+0x578>)
  401282:	4b79      	ldr	r3, [pc, #484]	; (401468 <GetPvAngle+0x568>)
  401284:	4798      	blx	r3
  401286:	47b0      	blx	r6
  401288:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40128c:	a366      	add	r3, pc, #408	; (adr r3, 401428 <GetPvAngle+0x528>)
  40128e:	e9d3 2300 	ldrd	r2, r3, [r3]
  401292:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  401296:	47d0      	blx	sl
  401298:	4602      	mov	r2, r0
  40129a:	460b      	mov	r3, r1
  40129c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4012a0:	4f67      	ldr	r7, [pc, #412]	; (401440 <GetPvAngle+0x540>)
  4012a2:	47b8      	blx	r7
  4012a4:	47c0      	blx	r8
  4012a6:	9012      	str	r0, [sp, #72]	; 0x48
	o = Deg(asin(sin(Rad(n))*sin(Rad(l))));
  4012a8:	4968      	ldr	r1, [pc, #416]	; (40144c <GetPvAngle+0x54c>)
  4012aa:	47a0      	blx	r4
  4012ac:	4968      	ldr	r1, [pc, #416]	; (401450 <GetPvAngle+0x550>)
  4012ae:	47a8      	blx	r5
  4012b0:	47b0      	blx	r6
  4012b2:	4f68      	ldr	r7, [pc, #416]	; (401454 <GetPvAngle+0x554>)
  4012b4:	47b8      	blx	r7
  4012b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4012ba:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  4012be:	47c0      	blx	r8
  4012c0:	9908      	ldr	r1, [sp, #32]
  4012c2:	4b69      	ldr	r3, [pc, #420]	; (401468 <GetPvAngle+0x568>)
  4012c4:	4798      	blx	r3
  4012c6:	496d      	ldr	r1, [pc, #436]	; (40147c <GetPvAngle+0x57c>)
  4012c8:	47d8      	blx	fp
  4012ca:	47b0      	blx	r6
  4012cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4012d0:	a357      	add	r3, pc, #348	; (adr r3, 401430 <GetPvAngle+0x530>)
  4012d2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4012d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  4012da:	47d0      	blx	sl
  4012dc:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 401494 <GetPvAngle+0x594>
  4012e0:	4602      	mov	r2, r0
  4012e2:	460b      	mov	r3, r1
  4012e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4012e8:	47d8      	blx	fp
  4012ea:	47c0      	blx	r8
  4012ec:	4957      	ldr	r1, [pc, #348]	; (40144c <GetPvAngle+0x54c>)
  4012ee:	47a0      	blx	r4
  4012f0:	4957      	ldr	r1, [pc, #348]	; (401450 <GetPvAngle+0x550>)
  4012f2:	47a8      	blx	r5
  4012f4:	47b0      	blx	r6
  4012f6:	47b8      	blx	r7
  4012f8:	4602      	mov	r2, r0
  4012fa:	460b      	mov	r3, r1
  4012fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  401300:	47d0      	blx	sl
  401302:	4b5f      	ldr	r3, [pc, #380]	; (401480 <GetPvAngle+0x580>)
  401304:	4798      	blx	r3
  401306:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	p = tan(Rad(n / 2))*tan(Rad(n / 2));
  40130a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  40130e:	9812      	ldr	r0, [sp, #72]	; 0x48
  401310:	47a0      	blx	r4
  401312:	494e      	ldr	r1, [pc, #312]	; (40144c <GetPvAngle+0x54c>)
  401314:	47a0      	blx	r4
  401316:	494e      	ldr	r1, [pc, #312]	; (401450 <GetPvAngle+0x550>)
  401318:	47a8      	blx	r5
  40131a:	47b0      	blx	r6
  40131c:	4f59      	ldr	r7, [pc, #356]	; (401484 <GetPvAngle+0x584>)
  40131e:	47b8      	blx	r7
  401320:	4602      	mov	r2, r0
  401322:	460b      	mov	r3, r1
  401324:	47d0      	blx	sl
  401326:	47c0      	blx	r8
  401328:	9002      	str	r0, [sp, #8]
		return NAN;
}

float Rad(float deg)
{
	return ((float)M_PI*deg)/180.0f;
  40132a:	4948      	ldr	r1, [pc, #288]	; (40144c <GetPvAngle+0x54c>)
  40132c:	9808      	ldr	r0, [sp, #32]
  40132e:	47a0      	blx	r4
  401330:	4947      	ldr	r1, [pc, #284]	; (401450 <GetPvAngle+0x550>)
  401332:	47a8      	blx	r5
	l = k - 0.00569f - 0.00478f*sin(Rad(125.04f - 1934.136f*f));
	m = 23 + (26 + ((21.448f - f*(46.815f + f*(0.00059f - f*0.001813f)))) / 60.0f) / 60.0f;
	n = m + 0.00256f*cos(Rad(125.04f - 1934.136f*f));
	o = Deg(asin(sin(Rad(n))*sin(Rad(l))));
	p = tan(Rad(n / 2))*tan(Rad(n / 2));
	q = 4.0f * Deg(p*sin(2.0f * Rad(g)) - 2.0f * i*sin(Rad(h)) + 4.0f * i*p*sin(Rad(h))*cos(2.0f * Rad(g)) - 0.5f*p*p*sin(4.0f * Rad(g)) - 1.25f*i*i*sin(2.0f * Rad(h)));
  401334:	900e      	str	r0, [sp, #56]	; 0x38
  401336:	4601      	mov	r1, r0
  401338:	4b4b      	ldr	r3, [pc, #300]	; (401468 <GetPvAngle+0x568>)
  40133a:	4798      	blx	r3
  40133c:	47b0      	blx	r6
  40133e:	e9cd 0108 	strd	r0, r1, [sp, #32]
  401342:	4f44      	ldr	r7, [pc, #272]	; (401454 <GetPvAngle+0x554>)
  401344:	47b8      	blx	r7
  401346:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  40134a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40134e:	4f42      	ldr	r7, [pc, #264]	; (401458 <GetPvAngle+0x558>)
  401350:	47b8      	blx	r7
  401352:	e9cd 0108 	strd	r0, r1, [sp, #32]
  401356:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  40135a:	980e      	ldr	r0, [sp, #56]	; 0x38
  40135c:	47a0      	blx	r4
  40135e:	47b0      	blx	r6
  401360:	4f3c      	ldr	r7, [pc, #240]	; (401454 <GetPvAngle+0x554>)
  401362:	47b8      	blx	r7
  401364:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  401368:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
  40136c:	4671      	mov	r1, lr
  40136e:	4670      	mov	r0, lr
  401370:	4b3d      	ldr	r3, [pc, #244]	; (401468 <GetPvAngle+0x568>)
  401372:	4798      	blx	r3
  401374:	47b0      	blx	r6
  401376:	47b8      	blx	r7
  401378:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	r = Deg(acos(cos(Rad(90.833f)) / (cos(Rad(lat))*cos(Rad(o))) - tan(Rad(lat))*tan(Rad(o))));
  40137c:	4933      	ldr	r1, [pc, #204]	; (40144c <GetPvAngle+0x54c>)
  40137e:	4b42      	ldr	r3, [pc, #264]	; (401488 <GetPvAngle+0x588>)
  401380:	6818      	ldr	r0, [r3, #0]
  401382:	47a0      	blx	r4
  401384:	4932      	ldr	r1, [pc, #200]	; (401450 <GetPvAngle+0x550>)
  401386:	47a8      	blx	r5
  401388:	47b0      	blx	r6
  40138a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40138e:	4f32      	ldr	r7, [pc, #200]	; (401458 <GetPvAngle+0x558>)
  401390:	47b8      	blx	r7
  401392:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  401396:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40139a:	47c0      	blx	r8
  40139c:	492c      	ldr	r1, [pc, #176]	; (401450 <GetPvAngle+0x550>)
  40139e:	47a0      	blx	r4
  4013a0:	492a      	ldr	r1, [pc, #168]	; (40144c <GetPvAngle+0x54c>)
  4013a2:	47a8      	blx	r5
  4013a4:	4929      	ldr	r1, [pc, #164]	; (40144c <GetPvAngle+0x54c>)
  4013a6:	47a0      	blx	r4
  4013a8:	4929      	ldr	r1, [pc, #164]	; (401450 <GetPvAngle+0x550>)
  4013aa:	47a8      	blx	r5
  4013ac:	47b0      	blx	r6
  4013ae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4013b2:	47b8      	blx	r7
  4013b4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  4013b8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4013bc:	4f31      	ldr	r7, [pc, #196]	; (401484 <GetPvAngle+0x584>)
  4013be:	47b8      	blx	r7
  4013c0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4013c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4013c8:	47b8      	blx	r7
  4013ca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4013ce:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4013d2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
  4013d6:	47d0      	blx	sl
  4013d8:	4602      	mov	r2, r0
  4013da:	460b      	mov	r3, r1
  4013dc:	a116      	add	r1, pc, #88	; (adr r1, 401438 <GetPvAngle+0x538>)
  4013de:	e9d1 0100 	ldrd	r0, r1, [r1]
  4013e2:	4f2a      	ldr	r7, [pc, #168]	; (40148c <GetPvAngle+0x58c>)
  4013e4:	47b8      	blx	r7
  4013e6:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  4013ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4013ee:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4013f2:	47d0      	blx	sl
  4013f4:	4602      	mov	r2, r0
  4013f6:	460b      	mov	r3, r1
  4013f8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
  4013fc:	47d8      	blx	fp
  4013fe:	4b24      	ldr	r3, [pc, #144]	; (401490 <GetPvAngle+0x590>)
  401400:	4798      	blx	r3
	return ((float)M_PI*deg)/180.0f;
}

float Deg(float rad)
{
	return (180.0f *rad) / (float)M_PI;
  401402:	47c0      	blx	r8
  401404:	4912      	ldr	r1, [pc, #72]	; (401450 <GetPvAngle+0x550>)
  401406:	47a0      	blx	r4
  401408:	4910      	ldr	r1, [pc, #64]	; (40144c <GetPvAngle+0x54c>)
  40140a:	47a8      	blx	r5
  40140c:	900a      	str	r0, [sp, #40]	; 0x28
	o = Deg(asin(sin(Rad(n))*sin(Rad(l))));
	p = tan(Rad(n / 2))*tan(Rad(n / 2));
	q = 4.0f * Deg(p*sin(2.0f * Rad(g)) - 2.0f * i*sin(Rad(h)) + 4.0f * i*p*sin(Rad(h))*cos(2.0f * Rad(g)) - 0.5f*p*p*sin(4.0f * Rad(g)) - 1.25f*i*i*sin(2.0f * Rad(h)));
	r = Deg(acos(cos(Rad(90.833f)) / (cos(Rad(lat))*cos(Rad(o))) - tan(Rad(lat))*tan(Rad(o))));
	s = ((int)(timeInSecs * 1440 + q + 4 * lon - 60 * timeZone)) % 1440;
	if ((s / 4.0f) < 0)
  40140e:	9802      	ldr	r0, [sp, #8]
  401410:	47b0      	blx	r6
  401412:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  401416:	47d0      	blx	sl
  401418:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  40141c:	9f04      	ldr	r7, [sp, #16]
  40141e:	4639      	mov	r1, r7
  401420:	4638      	mov	r0, r7
  401422:	e039      	b.n	401498 <GetPvAngle+0x598>
  401424:	f3af 8000 	nop.w
  401428:	80000000 	.word	0x80000000
  40142c:	3f64f8b5 	.word	0x3f64f8b5
  401430:	80000000 	.word	0x80000000
  401434:	3f739431 	.word	0x3f739431
  401438:	201519e5 	.word	0x201519e5
  40143c:	bf8dc621 	.word	0xbf8dc621
  401440:	00407129 	.word	0x00407129
  401444:	44f1c45a 	.word	0x44f1c45a
  401448:	42fa147b 	.word	0x42fa147b
  40144c:	40490fdb 	.word	0x40490fdb
  401450:	43340000 	.word	0x43340000
  401454:	004048fd 	.word	0x004048fd
  401458:	00404869 	.word	0x00404869
  40145c:	3aeda22f 	.word	0x3aeda22f
  401460:	3a1aaa3b 	.word	0x3a1aaa3b
  401464:	423b428f 	.word	0x423b428f
  401468:	00407ae9 	.word	0x00407ae9
  40146c:	41ab9581 	.word	0x41ab9581
  401470:	42700000 	.word	0x42700000
  401474:	41d00000 	.word	0x41d00000
  401478:	41b80000 	.word	0x41b80000
  40147c:	3bba732e 	.word	0x3bba732e
  401480:	00404a91 	.word	0x00404a91
  401484:	00404985 	.word	0x00404985
  401488:	200000a0 	.word	0x200000a0
  40148c:	004076e1 	.word	0x004076e1
  401490:	004049e1 	.word	0x004049e1
  401494:	00407125 	.word	0x00407125
  401498:	4b4f      	ldr	r3, [pc, #316]	; (4015d8 <GetPvAngle+0x6d8>)
  40149a:	4798      	blx	r3
  40149c:	47b0      	blx	r6
  40149e:	e9dd 2300 	ldrd	r2, r3, [sp]
  4014a2:	47d0      	blx	sl
  4014a4:	4602      	mov	r2, r0
  4014a6:	460b      	mov	r3, r1
  4014a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  4014ac:	47d8      	blx	fp
  4014ae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  4014b2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  4014b6:	9704      	str	r7, [sp, #16]
  4014b8:	4638      	mov	r0, r7
  4014ba:	47a0      	blx	r4
  4014bc:	9902      	ldr	r1, [sp, #8]
  4014be:	47a0      	blx	r4
  4014c0:	47b0      	blx	r6
  4014c2:	e9dd 2300 	ldrd	r2, r3, [sp]
  4014c6:	47d0      	blx	sl
  4014c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  4014cc:	47d0      	blx	sl
  4014ce:	4602      	mov	r2, r0
  4014d0:	460b      	mov	r3, r1
  4014d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  4014d6:	4f41      	ldr	r7, [pc, #260]	; (4015dc <GetPvAngle+0x6dc>)
  4014d8:	47b8      	blx	r7
  4014da:	e9cd 0100 	strd	r0, r1, [sp]
  4014de:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  4014e2:	9f02      	ldr	r7, [sp, #8]
  4014e4:	4638      	mov	r0, r7
  4014e6:	47a0      	blx	r4
  4014e8:	4639      	mov	r1, r7
  4014ea:	47a0      	blx	r4
  4014ec:	47b0      	blx	r6
  4014ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  4014f2:	47d0      	blx	sl
  4014f4:	4602      	mov	r2, r0
  4014f6:	460b      	mov	r3, r1
  4014f8:	e9dd 0100 	ldrd	r0, r1, [sp]
  4014fc:	47d8      	blx	fp
  4014fe:	e9cd 0100 	strd	r0, r1, [sp]
  401502:	4937      	ldr	r1, [pc, #220]	; (4015e0 <GetPvAngle+0x6e0>)
  401504:	9f04      	ldr	r7, [sp, #16]
  401506:	4638      	mov	r0, r7
  401508:	47a0      	blx	r4
  40150a:	4639      	mov	r1, r7
  40150c:	47a0      	blx	r4
  40150e:	47b0      	blx	r6
  401510:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  401514:	47d0      	blx	sl
  401516:	4602      	mov	r2, r0
  401518:	460b      	mov	r3, r1
  40151a:	e9dd 0100 	ldrd	r0, r1, [sp]
  40151e:	47d8      	blx	fp
  401520:	47c0      	blx	r8
  401522:	4930      	ldr	r1, [pc, #192]	; (4015e4 <GetPvAngle+0x6e4>)
  401524:	47a0      	blx	r4
  401526:	4930      	ldr	r1, [pc, #192]	; (4015e8 <GetPvAngle+0x6e8>)
  401528:	47a8      	blx	r5
  40152a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  40152e:	47a0      	blx	r4
  401530:	4606      	mov	r6, r0
  401532:	9805      	ldr	r0, [sp, #20]
  401534:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
  401538:	009b      	lsls	r3, r3, #2
  40153a:	f44f 6061 	mov.w	r0, #3600	; 0xe10
  40153e:	9a07      	ldr	r2, [sp, #28]
  401540:	fb00 3002 	mla	r0, r0, r2, r3
  401544:	9906      	ldr	r1, [sp, #24]
  401546:	4408      	add	r0, r1
  401548:	47c8      	blx	r9
  40154a:	4928      	ldr	r1, [pc, #160]	; (4015ec <GetPvAngle+0x6ec>)
  40154c:	47a8      	blx	r5
  40154e:	4928      	ldr	r1, [pc, #160]	; (4015f0 <GetPvAngle+0x6f0>)
  401550:	47a0      	blx	r4
  401552:	4601      	mov	r1, r0
  401554:	4630      	mov	r0, r6
  401556:	4b20      	ldr	r3, [pc, #128]	; (4015d8 <GetPvAngle+0x6d8>)
  401558:	4798      	blx	r3
  40155a:	4605      	mov	r5, r0
  40155c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  401560:	4b24      	ldr	r3, [pc, #144]	; (4015f4 <GetPvAngle+0x6f4>)
  401562:	6818      	ldr	r0, [r3, #0]
  401564:	47a0      	blx	r4
  401566:	4601      	mov	r1, r0
  401568:	4628      	mov	r0, r5
  40156a:	4b1b      	ldr	r3, [pc, #108]	; (4015d8 <GetPvAngle+0x6d8>)
  40156c:	4798      	blx	r3
  40156e:	4605      	mov	r5, r0
  401570:	4921      	ldr	r1, [pc, #132]	; (4015f8 <GetPvAngle+0x6f8>)
  401572:	4b22      	ldr	r3, [pc, #136]	; (4015fc <GetPvAngle+0x6fc>)
  401574:	6818      	ldr	r0, [r3, #0]
  401576:	47a0      	blx	r4
  401578:	4601      	mov	r1, r0
  40157a:	4628      	mov	r0, r5
  40157c:	4b20      	ldr	r3, [pc, #128]	; (401600 <GetPvAngle+0x700>)
  40157e:	4798      	blx	r3
  401580:	4b20      	ldr	r3, [pc, #128]	; (401604 <GetPvAngle+0x704>)
  401582:	4798      	blx	r3
  401584:	4a20      	ldr	r2, [pc, #128]	; (401608 <GetPvAngle+0x708>)
  401586:	fb80 2302 	smull	r2, r3, r0, r2
  40158a:	18c2      	adds	r2, r0, r3
  40158c:	17c3      	asrs	r3, r0, #31
  40158e:	ebc3 23a2 	rsb	r3, r3, r2, asr #10
  401592:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
  401596:	fb02 0013 	mls	r0, r2, r3, r0
  40159a:	47c8      	blx	r9
  40159c:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
  4015a0:	47a0      	blx	r4
  4015a2:	4604      	mov	r4, r0
  4015a4:	2100      	movs	r1, #0
  4015a6:	4b19      	ldr	r3, [pc, #100]	; (40160c <GetPvAngle+0x70c>)
  4015a8:	4798      	blx	r3
  4015aa:	b128      	cbz	r0, 4015b8 <GetPvAngle+0x6b8>
	{
		t = (s / 4.0f) + 180.0f;
  4015ac:	490d      	ldr	r1, [pc, #52]	; (4015e4 <GetPvAngle+0x6e4>)
  4015ae:	4620      	mov	r0, r4
  4015b0:	4b09      	ldr	r3, [pc, #36]	; (4015d8 <GetPvAngle+0x6d8>)
  4015b2:	4798      	blx	r3
  4015b4:	4604      	mov	r4, r0
  4015b6:	e004      	b.n	4015c2 <GetPvAngle+0x6c2>
	}
	else
	{
		t = (s / 4.0f) - 180.0f;
  4015b8:	490a      	ldr	r1, [pc, #40]	; (4015e4 <GetPvAngle+0x6e4>)
  4015ba:	4620      	mov	r0, r4
  4015bc:	4b10      	ldr	r3, [pc, #64]	; (401600 <GetPvAngle+0x700>)
  4015be:	4798      	blx	r3
  4015c0:	4604      	mov	r4, r0
	}
	return (90.0f / r*t);
  4015c2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4015c4:	4812      	ldr	r0, [pc, #72]	; (401610 <GetPvAngle+0x710>)
  4015c6:	4b13      	ldr	r3, [pc, #76]	; (401614 <GetPvAngle+0x714>)
  4015c8:	4798      	blx	r3
  4015ca:	4621      	mov	r1, r4
  4015cc:	4b12      	ldr	r3, [pc, #72]	; (401618 <GetPvAngle+0x718>)
  4015ce:	4798      	blx	r3
}
  4015d0:	b019      	add	sp, #100	; 0x64
  4015d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4015d6:	bf00      	nop
  4015d8:	00407ae9 	.word	0x00407ae9
  4015dc:	00407129 	.word	0x00407129
  4015e0:	3fa00000 	.word	0x3fa00000
  4015e4:	43340000 	.word	0x43340000
  4015e8:	40490fdb 	.word	0x40490fdb
  4015ec:	47a8c000 	.word	0x47a8c000
  4015f0:	44b40000 	.word	0x44b40000
  4015f4:	200000a4 	.word	0x200000a4
  4015f8:	42700000 	.word	0x42700000
  4015fc:	20000094 	.word	0x20000094
  401600:	00407ae5 	.word	0x00407ae5
  401604:	00408085 	.word	0x00408085
  401608:	b60b60b7 	.word	0xb60b60b7
  40160c:	00408035 	.word	0x00408035
  401610:	42b40000 	.word	0x42b40000
  401614:	00407e61 	.word	0x00407e61
  401618:	00407cf9 	.word	0x00407cf9

0040161c <TestCode>:
    mBusRegs[MBUS_REG_ANXH] = ptr[1];
    mBusRegs[MBUS_REG_ANXL] = ptr[0];
}

void TestCode(void)
{
  40161c:	b530      	push	{r4, r5, lr}
  40161e:	b087      	sub	sp, #28
    int16_t accVals[3] = {0, 0, 0};
  401620:	2300      	movs	r3, #0
  401622:	f8ad 3010 	strh.w	r3, [sp, #16]
  401626:	f8ad 3012 	strh.w	r3, [sp, #18]
  40162a:	f8ad 3014 	strh.w	r3, [sp, #20]
    float oriVals[3], pvAngle=0;
    uint16_t *ptr;
    
    DSGetTimeTo(twiPort, (uint16_t *)&mBusRegs[MBUS_REG_SEC], 50);
  40162e:	4c20      	ldr	r4, [pc, #128]	; (4016b0 <TestCode+0x94>)
  401630:	4d20      	ldr	r5, [pc, #128]	; (4016b4 <TestCode+0x98>)
  401632:	2232      	movs	r2, #50	; 0x32
  401634:	4621      	mov	r1, r4
  401636:	6828      	ldr	r0, [r5, #0]
  401638:	4b1f      	ldr	r3, [pc, #124]	; (4016b8 <TestCode+0x9c>)
  40163a:	4798      	blx	r3
    DSGetFullDateTo(twiPort, (uint16_t *)&mBusRegs[MBUS_REG_DAY], 50);
  40163c:	2232      	movs	r2, #50	; 0x32
  40163e:	1da1      	adds	r1, r4, #6
  401640:	6828      	ldr	r0, [r5, #0]
  401642:	4b1e      	ldr	r3, [pc, #120]	; (4016bc <TestCode+0xa0>)
  401644:	4798      	blx	r3
        PrintInt(((mBusRegs[MBUS_REG_MIN]>>4)*10) + (mBusRegs[MBUS_REG_MIN]&0x000F));
        Debug_PutString(":");
        PrintInt(((mBusRegs[MBUS_REG_SEC]>>4)*10) + (mBusRegs[MBUS_REG_SEC]&0x000F));
        Debug_PutString("\r\n");
    #endif
    ICMReadAccDataAllTo(twiPort, ICM_ADDR,(uint16_t*)accVals, 50);
  401646:	2332      	movs	r3, #50	; 0x32
  401648:	aa04      	add	r2, sp, #16
  40164a:	2169      	movs	r1, #105	; 0x69
  40164c:	6828      	ldr	r0, [r5, #0]
  40164e:	4d1c      	ldr	r5, [pc, #112]	; (4016c0 <TestCode+0xa4>)
  401650:	47a8      	blx	r5
    GetOrientation(accVals, oriVals);
  401652:	a901      	add	r1, sp, #4
  401654:	a804      	add	r0, sp, #16
  401656:	4b1b      	ldr	r3, [pc, #108]	; (4016c4 <TestCode+0xa8>)
  401658:	4798      	blx	r3
        Debug_PutString("X = ");
        PrintFlt(oriVals[0]);
        Debug_PutString("\r\n");
    #endif
    ptr = (uint16_t*)&oriVals[0];
    mBusRegs[MBUS_REG_ANXH] = ptr[1];
  40165a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40165e:	83e3      	strh	r3, [r4, #30]
    mBusRegs[MBUS_REG_ANXL] = ptr[0];
  401660:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  401664:	83a3      	strh	r3, [r4, #28]
    pvAngle = GetPvAngle();
  401666:	4b18      	ldr	r3, [pc, #96]	; (4016c8 <TestCode+0xac>)
  401668:	4798      	blx	r3
  40166a:	9000      	str	r0, [sp, #0]
    ptr = (uint16_t*)&pvAngle;
    mBusRegs[MBUS_REG_PVANGLEH] = ptr[1];
  40166c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
  401670:	8463      	strh	r3, [r4, #34]	; 0x22
    mBusRegs[MBUS_REG_PVANGLEL] = ptr[0];
  401672:	f8bd 3000 	ldrh.w	r3, [sp]
  401676:	8423      	strh	r3, [r4, #32]
    
	if(mBusRegs[MBUS_REG_MOTDR])
  401678:	8e63      	ldrh	r3, [r4, #50]	; 0x32
  40167a:	b133      	cbz	r3, 40168a <TestCode+0x6e>
	{
		gpio_set_pin_low(PIN_MOTOR_A_IDX);
  40167c:	2021      	movs	r0, #33	; 0x21
  40167e:	4b13      	ldr	r3, [pc, #76]	; (4016cc <TestCode+0xb0>)
  401680:	4798      	blx	r3
		gpio_set_pin_high(PIN_MOTOR_B_IDX);
  401682:	2022      	movs	r0, #34	; 0x22
  401684:	4b12      	ldr	r3, [pc, #72]	; (4016d0 <TestCode+0xb4>)
  401686:	4798      	blx	r3
  401688:	e005      	b.n	401696 <TestCode+0x7a>
	}
	else
	{
		gpio_set_pin_high(PIN_MOTOR_A_IDX);
  40168a:	2021      	movs	r0, #33	; 0x21
  40168c:	4b10      	ldr	r3, [pc, #64]	; (4016d0 <TestCode+0xb4>)
  40168e:	4798      	blx	r3
		gpio_set_pin_low(PIN_MOTOR_B_IDX);
  401690:	2022      	movs	r0, #34	; 0x22
  401692:	4b0e      	ldr	r3, [pc, #56]	; (4016cc <TestCode+0xb0>)
  401694:	4798      	blx	r3
	}

    if(mBusRegs[MBUS_REG_MOTON])
  401696:	4b06      	ldr	r3, [pc, #24]	; (4016b0 <TestCode+0x94>)
  401698:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
  40169a:	b11b      	cbz	r3, 4016a4 <TestCode+0x88>
    {
        //Disable Charge Ctrlr
		//ccEn = 0;
        //Turn Motor On
		gpio_set_pin_high(PIN_MOTOR_RST_IDX);
  40169c:	2020      	movs	r0, #32
  40169e:	4b0c      	ldr	r3, [pc, #48]	; (4016d0 <TestCode+0xb4>)
  4016a0:	4798      	blx	r3
  4016a2:	e002      	b.n	4016aa <TestCode+0x8e>
    else
    {
        //Enable Charge Ctrlr
        //ccEn = 1;
        //Turn Motor Off
        gpio_set_pin_low(PIN_MOTOR_RST_IDX);
  4016a4:	2020      	movs	r0, #32
  4016a6:	4b09      	ldr	r3, [pc, #36]	; (4016cc <TestCode+0xb0>)
  4016a8:	4798      	blx	r3
    }
}
  4016aa:	b007      	add	sp, #28
  4016ac:	bd30      	pop	{r4, r5, pc}
  4016ae:	bf00      	nop
  4016b0:	20000714 	.word	0x20000714
  4016b4:	200029a0 	.word	0x200029a0
  4016b8:	0040060d 	.word	0x0040060d
  4016bc:	0040064d 	.word	0x0040064d
  4016c0:	00400899 	.word	0x00400899
  4016c4:	00400cb9 	.word	0x00400cb9
  4016c8:	00400f01 	.word	0x00400f01
  4016cc:	004027b1 	.word	0x004027b1
  4016d0:	00402795 	.word	0x00402795

004016d4 <GetPvBackTrackAngle>:
	}
	return (90.0f / r*t);
}

float GetPvBackTrackAngle(float pvAngle)
{
  4016d4:	b538      	push	{r3, r4, r5, lr}
  4016d6:	4605      	mov	r5, r0
	float a0;
	
	a0 = pvAngle*0.0174603f;
  4016d8:	4c27      	ldr	r4, [pc, #156]	; (401778 <GetPvBackTrackAngle+0xa4>)
  4016da:	4928      	ldr	r1, [pc, #160]	; (40177c <GetPvBackTrackAngle+0xa8>)
  4016dc:	47a0      	blx	r4
	a0 += 1.575f;
  4016de:	4928      	ldr	r1, [pc, #160]	; (401780 <GetPvBackTrackAngle+0xac>)
  4016e0:	4b28      	ldr	r3, [pc, #160]	; (401784 <GetPvBackTrackAngle+0xb0>)
  4016e2:	4798      	blx	r3
	a0 -= 0.028989f;
	a0 = sin(a0);
  4016e4:	4928      	ldr	r1, [pc, #160]	; (401788 <GetPvBackTrackAngle+0xb4>)
  4016e6:	4b29      	ldr	r3, [pc, #164]	; (40178c <GetPvBackTrackAngle+0xb8>)
  4016e8:	4798      	blx	r3
  4016ea:	4b29      	ldr	r3, [pc, #164]	; (401790 <GetPvBackTrackAngle+0xbc>)
  4016ec:	4798      	blx	r3
  4016ee:	4b29      	ldr	r3, [pc, #164]	; (401794 <GetPvBackTrackAngle+0xc0>)
  4016f0:	4798      	blx	r3
  4016f2:	4b29      	ldr	r3, [pc, #164]	; (401798 <GetPvBackTrackAngle+0xc4>)
  4016f4:	4798      	blx	r3
	a0 = a0 * dist;
  4016f6:	4b29      	ldr	r3, [pc, #164]	; (40179c <GetPvBackTrackAngle+0xc8>)
  4016f8:	6819      	ldr	r1, [r3, #0]
  4016fa:	47a0      	blx	r4
	a0 = a0 / width;
  4016fc:	4b28      	ldr	r3, [pc, #160]	; (4017a0 <GetPvBackTrackAngle+0xcc>)
  4016fe:	6819      	ldr	r1, [r3, #0]
  401700:	4b28      	ldr	r3, [pc, #160]	; (4017a4 <GetPvBackTrackAngle+0xd0>)
  401702:	4798      	blx	r3
  401704:	4604      	mov	r4, r0
	/* If this val is < 1 enter back track calculation */
	/* Otherwise exit backtracking mode */
	if (a0 < 1)
  401706:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  40170a:	4b27      	ldr	r3, [pc, #156]	; (4017a8 <GetPvBackTrackAngle+0xd4>)
  40170c:	4798      	blx	r3
  40170e:	2800      	cmp	r0, #0
  401710:	d02b      	beq.n	40176a <GetPvBackTrackAngle+0x96>
	{
		a0 = asin(a0);
  401712:	4620      	mov	r0, r4
  401714:	4b1e      	ldr	r3, [pc, #120]	; (401790 <GetPvBackTrackAngle+0xbc>)
  401716:	4798      	blx	r3
  401718:	4b24      	ldr	r3, [pc, #144]	; (4017ac <GetPvBackTrackAngle+0xd8>)
  40171a:	4798      	blx	r3
  40171c:	4b1e      	ldr	r3, [pc, #120]	; (401798 <GetPvBackTrackAngle+0xc4>)
  40171e:	4798      	blx	r3
		a0 = a0 * 57.2958f;
  401720:	4923      	ldr	r1, [pc, #140]	; (4017b0 <GetPvBackTrackAngle+0xdc>)
  401722:	4b15      	ldr	r3, [pc, #84]	; (401778 <GetPvBackTrackAngle+0xa4>)
  401724:	4798      	blx	r3
  401726:	4604      	mov	r4, r0
		if ((pvAngle >= -90) && (pvAngle < 0))
  401728:	4922      	ldr	r1, [pc, #136]	; (4017b4 <GetPvBackTrackAngle+0xe0>)
  40172a:	4628      	mov	r0, r5
  40172c:	4b22      	ldr	r3, [pc, #136]	; (4017b8 <GetPvBackTrackAngle+0xe4>)
  40172e:	4798      	blx	r3
  401730:	b158      	cbz	r0, 40174a <GetPvBackTrackAngle+0x76>
  401732:	2100      	movs	r1, #0
  401734:	4628      	mov	r0, r5
  401736:	4b1c      	ldr	r3, [pc, #112]	; (4017a8 <GetPvBackTrackAngle+0xd4>)
  401738:	4798      	blx	r3
  40173a:	b130      	cbz	r0, 40174a <GetPvBackTrackAngle+0x76>
		{
			a0 = -a0 / 2.0;
  40173c:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
  401740:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  401744:	4b0c      	ldr	r3, [pc, #48]	; (401778 <GetPvBackTrackAngle+0xa4>)
  401746:	4798      	blx	r3
  401748:	bd38      	pop	{r3, r4, r5, pc}
		}
		else if ((pvAngle >= 0) && (pvAngle <= 90))
  40174a:	2100      	movs	r1, #0
  40174c:	4628      	mov	r0, r5
  40174e:	4b1a      	ldr	r3, [pc, #104]	; (4017b8 <GetPvBackTrackAngle+0xe4>)
  401750:	4798      	blx	r3
  401752:	b160      	cbz	r0, 40176e <GetPvBackTrackAngle+0x9a>
  401754:	4919      	ldr	r1, [pc, #100]	; (4017bc <GetPvBackTrackAngle+0xe8>)
  401756:	4628      	mov	r0, r5
  401758:	4b19      	ldr	r3, [pc, #100]	; (4017c0 <GetPvBackTrackAngle+0xec>)
  40175a:	4798      	blx	r3
  40175c:	b148      	cbz	r0, 401772 <GetPvBackTrackAngle+0x9e>
		{
			a0 = a0 / 2.0;
  40175e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  401762:	4620      	mov	r0, r4
  401764:	4b04      	ldr	r3, [pc, #16]	; (401778 <GetPvBackTrackAngle+0xa4>)
  401766:	4798      	blx	r3
  401768:	bd38      	pop	{r3, r4, r5, pc}
		}
		return a0;
	}
	else
		return NAN;
  40176a:	4816      	ldr	r0, [pc, #88]	; (4017c4 <GetPvBackTrackAngle+0xf0>)
  40176c:	bd38      	pop	{r3, r4, r5, pc}
	/* If this val is < 1 enter back track calculation */
	/* Otherwise exit backtracking mode */
	if (a0 < 1)
	{
		a0 = asin(a0);
		a0 = a0 * 57.2958f;
  40176e:	4620      	mov	r0, r4
  401770:	bd38      	pop	{r3, r4, r5, pc}
  401772:	4620      	mov	r0, r4
		}
		return a0;
	}
	else
		return NAN;
}
  401774:	bd38      	pop	{r3, r4, r5, pc}
  401776:	bf00      	nop
  401778:	00407cf9 	.word	0x00407cf9
  40177c:	3c8f08e7 	.word	0x3c8f08e7
  401780:	3fc9999a 	.word	0x3fc9999a
  401784:	00407ae9 	.word	0x00407ae9
  401788:	3ced7a57 	.word	0x3ced7a57
  40178c:	00407ae5 	.word	0x00407ae5
  401790:	004073e5 	.word	0x004073e5
  401794:	004048fd 	.word	0x004048fd
  401798:	00407a3d 	.word	0x00407a3d
  40179c:	20000098 	.word	0x20000098
  4017a0:	200000a8 	.word	0x200000a8
  4017a4:	00407e61 	.word	0x00407e61
  4017a8:	00408035 	.word	0x00408035
  4017ac:	00404a91 	.word	0x00404a91
  4017b0:	42652ee6 	.word	0x42652ee6
  4017b4:	c2b40000 	.word	0xc2b40000
  4017b8:	0040805d 	.word	0x0040805d
  4017bc:	42b40000 	.word	0x42b40000
  4017c0:	00408049 	.word	0x00408049
  4017c4:	7fc00000 	.word	0x7fc00000

004017c8 <PVTrack>:

	twiPort = freertos_twi_master_init(BOARD_TWI, &settings);
}

void PVTrack(void)
{
  4017c8:	b570      	push	{r4, r5, r6, lr}
  4017ca:	b082      	sub	sp, #8
//     while(ccStatus)
//     {
//         vTaskDelay(pdMS_TO_TICKS(10));
//     }
    
    taskENTER_CRITICAL();
  4017cc:	4b30      	ldr	r3, [pc, #192]	; (401890 <PVTrack+0xc8>)
  4017ce:	4798      	blx	r3
    
    /* Read RTC */
    DSGetTimeTo(twiPort, (uint16_t *)&mBusRegs[MBUS_REG_SEC], 50);
  4017d0:	4c30      	ldr	r4, [pc, #192]	; (401894 <PVTrack+0xcc>)
  4017d2:	4d31      	ldr	r5, [pc, #196]	; (401898 <PVTrack+0xd0>)
  4017d4:	2232      	movs	r2, #50	; 0x32
  4017d6:	4621      	mov	r1, r4
  4017d8:	6828      	ldr	r0, [r5, #0]
  4017da:	4b30      	ldr	r3, [pc, #192]	; (40189c <PVTrack+0xd4>)
  4017dc:	4798      	blx	r3
    DSGetFullDateTo(twiPort, (uint16_t *)&mBusRegs[MBUS_REG_DAY], 50);
  4017de:	2232      	movs	r2, #50	; 0x32
  4017e0:	1da1      	adds	r1, r4, #6
  4017e2:	6828      	ldr	r0, [r5, #0]
  4017e4:	4b2e      	ldr	r3, [pc, #184]	; (4018a0 <PVTrack+0xd8>)
  4017e6:	4798      	blx	r3
    
    /* Clacluate PV Angle from time */
    pvAngle = GetPvAngle();
  4017e8:	4b2e      	ldr	r3, [pc, #184]	; (4018a4 <PVTrack+0xdc>)
  4017ea:	4798      	blx	r3
  4017ec:	4605      	mov	r5, r0
  4017ee:	9001      	str	r0, [sp, #4]
    ptr = (uint16_t*)&pvAngle;
    mBusRegs[MBUS_REG_PVANGLEH] = ptr[1];
  4017f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4017f4:	8463      	strh	r3, [r4, #34]	; 0x22
    mBusRegs[MBUS_REG_PVANGLEL] = ptr[0];
  4017f6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  4017fa:	8423      	strh	r3, [r4, #32]
        PrintFlt(pvAngle);
        Debug_PutString(",");
    #endif
    
    /* If not backtracking */
    if(!bkTrkFlg)
  4017fc:	4b2a      	ldr	r3, [pc, #168]	; (4018a8 <PVTrack+0xe0>)
  4017fe:	781b      	ldrb	r3, [r3, #0]
  401800:	b99b      	cbnz	r3, 40182a <PVTrack+0x62>
    {
        #ifdef LOG_EN
            Debug_PutString("NA\r\n");
        #endif
        /* If Angle between +/- pvAngleRng deg */
        if(pvAngle>= -pvAngleRng && pvAngle <= pvAngleRng)
  401802:	4b2a      	ldr	r3, [pc, #168]	; (4018ac <PVTrack+0xe4>)
  401804:	681c      	ldr	r4, [r3, #0]
  401806:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
  40180a:	4b29      	ldr	r3, [pc, #164]	; (4018b0 <PVTrack+0xe8>)
  40180c:	4798      	blx	r3
  40180e:	b140      	cbz	r0, 401822 <PVTrack+0x5a>
  401810:	4621      	mov	r1, r4
  401812:	4628      	mov	r0, r5
  401814:	4b27      	ldr	r3, [pc, #156]	; (4018b4 <PVTrack+0xec>)
  401816:	4798      	blx	r3
  401818:	b118      	cbz	r0, 401822 <PVTrack+0x5a>
        {
            /* Rotate Motor */
            #ifndef LOG_EN
                GotoAngle(pvAngle);
  40181a:	4628      	mov	r0, r5
  40181c:	4b26      	ldr	r3, [pc, #152]	; (4018b8 <PVTrack+0xf0>)
  40181e:	4798      	blx	r3
  401820:	e02f      	b.n	401882 <PVTrack+0xba>
            #endif
        }
        else
        {
            bkTrkFlg = 1;
  401822:	2201      	movs	r2, #1
  401824:	4b20      	ldr	r3, [pc, #128]	; (4018a8 <PVTrack+0xe0>)
  401826:	701a      	strb	r2, [r3, #0]
  401828:	e02b      	b.n	401882 <PVTrack+0xba>
        }
    }
    else
    {
        if(pvAngle>= -90 && pvAngle <= 90)
  40182a:	4924      	ldr	r1, [pc, #144]	; (4018bc <PVTrack+0xf4>)
  40182c:	4b20      	ldr	r3, [pc, #128]	; (4018b0 <PVTrack+0xe8>)
  40182e:	4798      	blx	r3
  401830:	b1b8      	cbz	r0, 401862 <PVTrack+0x9a>
  401832:	4923      	ldr	r1, [pc, #140]	; (4018c0 <PVTrack+0xf8>)
  401834:	4628      	mov	r0, r5
  401836:	4b1f      	ldr	r3, [pc, #124]	; (4018b4 <PVTrack+0xec>)
  401838:	4798      	blx	r3
  40183a:	b190      	cbz	r0, 401862 <PVTrack+0x9a>
        {
            bkTrkAngle = GetPvBackTrackAngle(pvAngle);
  40183c:	4628      	mov	r0, r5
  40183e:	4b21      	ldr	r3, [pc, #132]	; (4018c4 <PVTrack+0xfc>)
  401840:	4798      	blx	r3
  401842:	4606      	mov	r6, r0
            
            /* If bkTrkAngle is within +/- given range */ 
            if(bkTrkAngle>= -pvAngleRng && bkTrkAngle <= pvAngleRng)
  401844:	4b19      	ldr	r3, [pc, #100]	; (4018ac <PVTrack+0xe4>)
  401846:	681c      	ldr	r4, [r3, #0]
  401848:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
  40184c:	4b18      	ldr	r3, [pc, #96]	; (4018b0 <PVTrack+0xe8>)
  40184e:	4798      	blx	r3
  401850:	b138      	cbz	r0, 401862 <PVTrack+0x9a>
  401852:	4621      	mov	r1, r4
  401854:	4630      	mov	r0, r6
  401856:	4b17      	ldr	r3, [pc, #92]	; (4018b4 <PVTrack+0xec>)
  401858:	4798      	blx	r3
  40185a:	b110      	cbz	r0, 401862 <PVTrack+0x9a>
                    Debug_PutString("\r\n");
                #endif
                
                /* Rotate Motor */
                #ifndef LOG_EN
                    GotoAngle(bkTrkAngle);
  40185c:	4630      	mov	r0, r6
  40185e:	4b16      	ldr	r3, [pc, #88]	; (4018b8 <PVTrack+0xf0>)
  401860:	4798      	blx	r3
            else
            {
                Debug_PutString("NA\r\n");
            }
        #endif
        if(pvAngle>= -pvAngleRng && pvAngle <= pvAngleRng)
  401862:	4b12      	ldr	r3, [pc, #72]	; (4018ac <PVTrack+0xe4>)
  401864:	681c      	ldr	r4, [r3, #0]
  401866:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
  40186a:	4628      	mov	r0, r5
  40186c:	4b10      	ldr	r3, [pc, #64]	; (4018b0 <PVTrack+0xe8>)
  40186e:	4798      	blx	r3
  401870:	b138      	cbz	r0, 401882 <PVTrack+0xba>
  401872:	4621      	mov	r1, r4
  401874:	4628      	mov	r0, r5
  401876:	4b0f      	ldr	r3, [pc, #60]	; (4018b4 <PVTrack+0xec>)
  401878:	4798      	blx	r3
  40187a:	b110      	cbz	r0, 401882 <PVTrack+0xba>
        {
            bkTrkFlg = 0;
  40187c:	2200      	movs	r2, #0
  40187e:	4b0a      	ldr	r3, [pc, #40]	; (4018a8 <PVTrack+0xe0>)
  401880:	701a      	strb	r2, [r3, #0]
        }
    }
          
    /* Clear any required flags */
    minCtr = 0;
  401882:	2200      	movs	r2, #0
  401884:	4b10      	ldr	r3, [pc, #64]	; (4018c8 <PVTrack+0x100>)
  401886:	701a      	strb	r2, [r3, #0]
    taskEXIT_CRITICAL();
  401888:	4b10      	ldr	r3, [pc, #64]	; (4018cc <PVTrack+0x104>)
  40188a:	4798      	blx	r3
    
    /* Enable Charge Ctrlr */
    //ccEn = 1;
} 
  40188c:	b002      	add	sp, #8
  40188e:	bd70      	pop	{r4, r5, r6, pc}
  401890:	00402fd5 	.word	0x00402fd5
  401894:	20000714 	.word	0x20000714
  401898:	200029a0 	.word	0x200029a0
  40189c:	0040060d 	.word	0x0040060d
  4018a0:	0040064d 	.word	0x0040064d
  4018a4:	00400f01 	.word	0x00400f01
  4018a8:	2000075c 	.word	0x2000075c
  4018ac:	2000009c 	.word	0x2000009c
  4018b0:	0040805d 	.word	0x0040805d
  4018b4:	00408049 	.word	0x00408049
  4018b8:	00400d91 	.word	0x00400d91
  4018bc:	c2b40000 	.word	0xc2b40000
  4018c0:	42b40000 	.word	0x42b40000
  4018c4:	004016d5 	.word	0x004016d5
  4018c8:	2000075d 	.word	0x2000075d
  4018cc:	00402ff5 	.word	0x00402ff5

004018d0 <vPvTrackerTask>:
            minCtr++;
    }
}

void vPvTrackerTask(void *pvParameters)
{
  4018d0:	b570      	push	{r4, r5, r6, lr}
  4018d2:	b082      	sub	sp, #8
    uint8_t status = 0;
  4018d4:	2300      	movs	r3, #0
  4018d6:	f88d 3007 	strb.w	r3, [sp, #7]
        Debug_PutString("Hrs,Mins,Secs,Tracking Mode,PvAngle,BkAngle\r\n");
    #endif
	
	/* These Init routines are shifted here because they should only be called after the scheduler has started */
	/* Init Accelerometer */
	ICMInitializeTo(twiPort, ICM_ADDR, 50);
  4018da:	4c18      	ldr	r4, [pc, #96]	; (40193c <vPvTrackerTask+0x6c>)
  4018dc:	2232      	movs	r2, #50	; 0x32
  4018de:	2169      	movs	r1, #105	; 0x69
  4018e0:	6820      	ldr	r0, [r4, #0]
  4018e2:	4b17      	ldr	r3, [pc, #92]	; (401940 <vPvTrackerTask+0x70>)
  4018e4:	4798      	blx	r3
	/* Init RTC 1 min Alarm */
	DSEnAL2To(twiPort, 1, 50);
  4018e6:	2232      	movs	r2, #50	; 0x32
  4018e8:	2101      	movs	r1, #1
  4018ea:	6820      	ldr	r0, [r4, #0]
  4018ec:	4b15      	ldr	r3, [pc, #84]	; (401944 <vPvTrackerTask+0x74>)
  4018ee:	4798      	blx	r3
	    
    while(1)
    {
        /* Clear RTC interrupt flag */
        DSReadByteTo(twiPort, DS_REG_STAT,&status,50);
  4018f0:	4d15      	ldr	r5, [pc, #84]	; (401948 <vPvTrackerTask+0x78>)
        if(status&0x02)
        {
            /* Clear Status Reg */
            DSWriteByteTo(twiPort, DS_REG_STAT, 0x00, 50);
  4018f2:	4e16      	ldr	r6, [pc, #88]	; (40194c <vPvTrackerTask+0x7c>)
	DSEnAL2To(twiPort, 1, 50);
	    
    while(1)
    {
        /* Clear RTC interrupt flag */
        DSReadByteTo(twiPort, DS_REG_STAT,&status,50);
  4018f4:	2332      	movs	r3, #50	; 0x32
  4018f6:	f10d 0207 	add.w	r2, sp, #7
  4018fa:	210f      	movs	r1, #15
  4018fc:	6820      	ldr	r0, [r4, #0]
  4018fe:	47a8      	blx	r5
        if(status&0x02)
  401900:	f89d 3007 	ldrb.w	r3, [sp, #7]
  401904:	f013 0f02 	tst.w	r3, #2
  401908:	d004      	beq.n	401914 <vPvTrackerTask+0x44>
        {
            /* Clear Status Reg */
            DSWriteByteTo(twiPort, DS_REG_STAT, 0x00, 50);
  40190a:	2332      	movs	r3, #50	; 0x32
  40190c:	2200      	movs	r2, #0
  40190e:	210f      	movs	r1, #15
  401910:	6820      	ldr	r0, [r4, #0]
  401912:	47b0      	blx	r6
        }
        
        /* In Tracking / Auto Mode */
        if(!mBusRegs[MBUS_REG_OPMODE])
  401914:	4b0e      	ldr	r3, [pc, #56]	; (401950 <vPvTrackerTask+0x80>)
  401916:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
  401918:	b94b      	cbnz	r3, 40192e <vPvTrackerTask+0x5e>
        {
            /* If Tracking Time Expired */
            if(minCtr >= TRACKING_INTERVAL)
  40191a:	4b0e      	ldr	r3, [pc, #56]	; (401954 <vPvTrackerTask+0x84>)
  40191c:	781b      	ldrb	r3, [r3, #0]
  40191e:	2b02      	cmp	r3, #2
  401920:	d907      	bls.n	401932 <vPvTrackerTask+0x62>
            {
                PVTrack();
  401922:	4b0d      	ldr	r3, [pc, #52]	; (401958 <vPvTrackerTask+0x88>)
  401924:	4798      	blx	r3
                minCtr = 0;
  401926:	2200      	movs	r2, #0
  401928:	4b0a      	ldr	r3, [pc, #40]	; (401954 <vPvTrackerTask+0x84>)
  40192a:	701a      	strb	r2, [r3, #0]
  40192c:	e001      	b.n	401932 <vPvTrackerTask+0x62>
            /* LED1 Heart Beat Status (No Block) */
        }
        else
        {
            /* In Manual Mode */
            TestCode();
  40192e:	4b0b      	ldr	r3, [pc, #44]	; (40195c <vPvTrackerTask+0x8c>)
  401930:	4798      	blx	r3
        }
        //vTaskDelay(pdMS_TO_TICKS(1000));
		vTaskDelay(1000);
  401932:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  401936:	4b0a      	ldr	r3, [pc, #40]	; (401960 <vPvTrackerTask+0x90>)
  401938:	4798      	blx	r3
    }
  40193a:	e7db      	b.n	4018f4 <vPvTrackerTask+0x24>
  40193c:	200029a0 	.word	0x200029a0
  401940:	00400819 	.word	0x00400819
  401944:	00400755 	.word	0x00400755
  401948:	004007bd 	.word	0x004007bd
  40194c:	00400695 	.word	0x00400695
  401950:	20000714 	.word	0x20000714
  401954:	2000075d 	.word	0x2000075d
  401958:	004017c9 	.word	0x004017c9
  40195c:	0040161d 	.word	0x0040161d
  401960:	00403c81 	.word	0x00403c81

00401964 <InitRs485Pdc>:
 pdc_packet_t rs485PdcPkt;
 /* Pointer to PDC register base. */
 Pdc *rs485PdcBase;

 void InitRs485Pdc(void)
 {
  401964:	b530      	push	{r4, r5, lr}
  401966:	b087      	sub	sp, #28
	 const sam_usart_opt_t usart_console_settings = {
  401968:	466c      	mov	r4, sp
  40196a:	4d10      	ldr	r5, [pc, #64]	; (4019ac <InitRs485Pdc+0x48>)
  40196c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40196e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401970:	e895 0003 	ldmia.w	r5, {r0, r1}
  401974:	e884 0003 	stmia.w	r4, {r0, r1}
  401978:	200e      	movs	r0, #14
  40197a:	4b0d      	ldr	r3, [pc, #52]	; (4019b0 <InitRs485Pdc+0x4c>)
  40197c:	4798      	blx	r3

	 /* Enable the peripheral clock in the PMC. */
	 sysclk_enable_peripheral_clock(RS485_USART_ID);

	 /* Configure USART in RS485 mode. */
	 usart_init_rs485(RS485_USART, &usart_console_settings,
  40197e:	4c0d      	ldr	r4, [pc, #52]	; (4019b4 <InitRs485Pdc+0x50>)
  401980:	4a0d      	ldr	r2, [pc, #52]	; (4019b8 <InitRs485Pdc+0x54>)
  401982:	4669      	mov	r1, sp
  401984:	4620      	mov	r0, r4
  401986:	4b0d      	ldr	r3, [pc, #52]	; (4019bc <InitRs485Pdc+0x58>)
  401988:	4798      	blx	r3
	 sysclk_get_peripheral_hz());


	 /* Enable TX & RX function. */
	 usart_enable_tx(RS485_USART);
  40198a:	4620      	mov	r0, r4
  40198c:	4b0c      	ldr	r3, [pc, #48]	; (4019c0 <InitRs485Pdc+0x5c>)
  40198e:	4798      	blx	r3
	 usart_enable_rx(RS485_USART);
  401990:	4620      	mov	r0, r4
  401992:	4b0c      	ldr	r3, [pc, #48]	; (4019c4 <InitRs485Pdc+0x60>)
  401994:	4798      	blx	r3
 	 
	 /* Get board USART PDC base address and enable receiver and transmitter. */
	 rs485PdcBase = usart_get_pdc_base(RS485_USART);
  401996:	4620      	mov	r0, r4
  401998:	4b0b      	ldr	r3, [pc, #44]	; (4019c8 <InitRs485Pdc+0x64>)
  40199a:	4798      	blx	r3
  40199c:	4b0b      	ldr	r3, [pc, #44]	; (4019cc <InitRs485Pdc+0x68>)
  40199e:	6018      	str	r0, [r3, #0]
	 pdc_enable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  4019a0:	f240 1101 	movw	r1, #257	; 0x101
  4019a4:	4b0a      	ldr	r3, [pc, #40]	; (4019d0 <InitRs485Pdc+0x6c>)
  4019a6:	4798      	blx	r3

 }
  4019a8:	b007      	add	sp, #28
  4019aa:	bd30      	pop	{r4, r5, pc}
  4019ac:	004084c4 	.word	0x004084c4
  4019b0:	00402c35 	.word	0x00402c35
  4019b4:	40024000 	.word	0x40024000
  4019b8:	07270e00 	.word	0x07270e00
  4019bc:	004024c5 	.word	0x004024c5
  4019c0:	004024e9 	.word	0x004024e9
  4019c4:	004024f9 	.word	0x004024f9
  4019c8:	00402529 	.word	0x00402529
  4019cc:	200029a4 	.word	0x200029a4
  4019d0:	0040238d 	.word	0x0040238d

004019d4 <Rs485PdcStartTx>:

 /* Set pointers and start transmitting */
 void Rs485PdcStartTx(uint32_t buff, uint16_t nBytes)
 {
  4019d4:	b508      	push	{r3, lr}
	rs485PdcPkt.ul_addr = buff;
  4019d6:	4b05      	ldr	r3, [pc, #20]	; (4019ec <Rs485PdcStartTx+0x18>)
  4019d8:	6018      	str	r0, [r3, #0]
	rs485PdcPkt.ul_size = nBytes;
  4019da:	6059      	str	r1, [r3, #4]
	pdc_tx_init(rs485PdcBase, &rs485PdcPkt, NULL);
  4019dc:	2200      	movs	r2, #0
  4019de:	4619      	mov	r1, r3
  4019e0:	4b03      	ldr	r3, [pc, #12]	; (4019f0 <Rs485PdcStartTx+0x1c>)
  4019e2:	6818      	ldr	r0, [r3, #0]
  4019e4:	4b03      	ldr	r3, [pc, #12]	; (4019f4 <Rs485PdcStartTx+0x20>)
  4019e6:	4798      	blx	r3
  4019e8:	bd08      	pop	{r3, pc}
  4019ea:	bf00      	nop
  4019ec:	200029a8 	.word	0x200029a8
  4019f0:	200029a4 	.word	0x200029a4
  4019f4:	0040235d 	.word	0x0040235d

004019f8 <Rs485PdcStartRx>:
 }

 /* Set pointers and start receiving */
 void Rs485PdcStartRx(uint32_t buff, uint16_t nBytes)
 {
  4019f8:	b508      	push	{r3, lr}
	rs485PdcPkt.ul_addr = buff;
  4019fa:	4b05      	ldr	r3, [pc, #20]	; (401a10 <Rs485PdcStartRx+0x18>)
  4019fc:	6018      	str	r0, [r3, #0]
	rs485PdcPkt.ul_size = nBytes;
  4019fe:	6059      	str	r1, [r3, #4]
	pdc_rx_init(rs485PdcBase, &rs485PdcPkt, NULL);
  401a00:	2200      	movs	r2, #0
  401a02:	4619      	mov	r1, r3
  401a04:	4b03      	ldr	r3, [pc, #12]	; (401a14 <Rs485PdcStartRx+0x1c>)
  401a06:	6818      	ldr	r0, [r3, #0]
  401a08:	4b03      	ldr	r3, [pc, #12]	; (401a18 <Rs485PdcStartRx+0x20>)
  401a0a:	4798      	blx	r3
  401a0c:	bd08      	pop	{r3, pc}
  401a0e:	bf00      	nop
  401a10:	200029a8 	.word	0x200029a8
  401a14:	200029a4 	.word	0x200029a4
  401a18:	00402375 	.word	0x00402375

00401a1c <Rs485PdcGetRxBytes>:
 }
 
 /* Returns number of bytes in Rx buffer */
 uint32_t Rs485PdcGetRxBytes(void)
 {
  401a1c:	b508      	push	{r3, lr}
	uint32_t recvdBytes = RS485_BUFFER_SIZE;
	recvdBytes -= pdc_read_rx_counter(rs485PdcBase);
  401a1e:	4b05      	ldr	r3, [pc, #20]	; (401a34 <Rs485PdcGetRxBytes+0x18>)
  401a20:	6818      	ldr	r0, [r3, #0]
  401a22:	4b05      	ldr	r3, [pc, #20]	; (401a38 <Rs485PdcGetRxBytes+0x1c>)
  401a24:	4798      	blx	r3
  401a26:	f1c0 0096 	rsb	r0, r0, #150	; 0x96
	if(recvdBytes>RS485_BUFFER_SIZE)//If overflow occurred. 
	{
		recvdBytes = 0;
  401a2a:	2897      	cmp	r0, #151	; 0x97
	}
	return recvdBytes;
 }
  401a2c:	bf28      	it	cs
  401a2e:	2000      	movcs	r0, #0
  401a30:	bd08      	pop	{r3, pc}
  401a32:	bf00      	nop
  401a34:	200029a4 	.word	0x200029a4
  401a38:	004023a9 	.word	0x004023a9

00401a3c <Rs485PdcGetTxStatus>:
	return (usart_get_status(RS485_USART)&US_CSR_ENDRX);
 }

 /* Returns 1 if Tx Buffer is empty else 0 */
 uint32_t Rs485PdcGetTxStatus(void)
 {
  401a3c:	b508      	push	{r3, lr}
	return (usart_get_status(RS485_USART)&US_CSR_ENDTX);
  401a3e:	4803      	ldr	r0, [pc, #12]	; (401a4c <Rs485PdcGetTxStatus+0x10>)
  401a40:	4b03      	ldr	r3, [pc, #12]	; (401a50 <Rs485PdcGetTxStatus+0x14>)
  401a42:	4798      	blx	r3
 }
  401a44:	f000 0010 	and.w	r0, r0, #16
  401a48:	bd08      	pop	{r3, pc}
  401a4a:	bf00      	nop
  401a4c:	40024000 	.word	0x40024000
  401a50:	00402515 	.word	0x00402515

00401a54 <local_twi_handler>:
/*
 * For internal use only.
 * A common TWI interrupt handler that is called for all TWI peripherals.
 */
static void local_twi_handler(const portBASE_TYPE twi_index)
{
  401a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401a58:	b083      	sub	sp, #12
  401a5a:	4607      	mov	r7, r0
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
  401a5c:	2300      	movs	r3, #0
  401a5e:	9301      	str	r3, [sp, #4]
	uint32_t twi_status;
	Twi *twi_port;
	bool transfer_timeout = false;

	twi_port = all_twi_definitions[twi_index].peripheral_base_address;
  401a60:	0103      	lsls	r3, r0, #4
  401a62:	4a7d      	ldr	r2, [pc, #500]	; (401c58 <local_twi_handler+0x204>)
  401a64:	58d5      	ldr	r5, [r2, r3]

	twi_status = twi_get_interrupt_status(twi_port);
  401a66:	4628      	mov	r0, r5
  401a68:	4b7c      	ldr	r3, [pc, #496]	; (401c5c <local_twi_handler+0x208>)
  401a6a:	4798      	blx	r3
  401a6c:	4606      	mov	r6, r0
	twi_status &= twi_get_interrupt_mask(twi_port);
  401a6e:	4628      	mov	r0, r5
  401a70:	4b7b      	ldr	r3, [pc, #492]	; (401c60 <local_twi_handler+0x20c>)
  401a72:	4798      	blx	r3
  401a74:	4006      	ands	r6, r0

	/* Has the PDC completed a transmission? */
	if ((twi_status & TWI_SR_ENDTX) != 0UL) {
  401a76:	f416 5f00 	tst.w	r6, #8192	; 0x2000
  401a7a:	d04a      	beq.n	401b12 <local_twi_handler+0xbe>
		/* Disable PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_TXTDIS);
  401a7c:	4b76      	ldr	r3, [pc, #472]	; (401c58 <local_twi_handler+0x204>)
  401a7e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
  401a82:	f44f 7100 	mov.w	r1, #512	; 0x200
  401a86:	6858      	ldr	r0, [r3, #4]
  401a88:	4b76      	ldr	r3, [pc, #472]	; (401c64 <local_twi_handler+0x210>)
  401a8a:	4798      	blx	r3
		twi_disable_interrupt(twi_port, TWI_IDR_ENDTX);
  401a8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  401a90:	4628      	mov	r0, r5
  401a92:	4b75      	ldr	r3, [pc, #468]	; (401c68 <local_twi_handler+0x214>)
  401a94:	4798      	blx	r3

		uint8_t status;
		uint32_t timeout_counter = 0;
  401a96:	2400      	movs	r4, #0

		/* Wait for TX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  401a98:	6a2b      	ldr	r3, [r5, #32]
			if (status & TWI_SR_TXRDY) {
  401a9a:	f013 0f04 	tst.w	r3, #4
  401a9e:	d106      	bne.n	401aae <local_twi_handler+0x5a>
				break;
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  401aa0:	3401      	adds	r4, #1
  401aa2:	f1b4 3fff 	cmp.w	r4, #4294967295
  401aa6:	d1f7      	bne.n	401a98 <local_twi_handler+0x44>
				transfer_timeout = true;
  401aa8:	f04f 0801 	mov.w	r8, #1
  401aac:	e001      	b.n	401ab2 <local_twi_handler+0x5e>
static void local_twi_handler(const portBASE_TYPE twi_index)
{
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
	uint32_t twi_status;
	Twi *twi_port;
	bool transfer_timeout = false;
  401aae:	f04f 0800 	mov.w	r8, #0
				transfer_timeout = true;
				break;
			}
		}
		/* Complete the transfer - stop and last byte */
		twi_port->TWI_CR = TWI_CR_STOP;
  401ab2:	2302      	movs	r3, #2
  401ab4:	602b      	str	r3, [r5, #0]
		twi_port->TWI_THR = twis[twi_index].buffer[twis[twi_index].length-1];
  401ab6:	4b6d      	ldr	r3, [pc, #436]	; (401c6c <local_twi_handler+0x218>)
  401ab8:	eb03 01c7 	add.w	r1, r3, r7, lsl #3
  401abc:	f853 2037 	ldr.w	r2, [r3, r7, lsl #3]
  401ac0:	684b      	ldr	r3, [r1, #4]
  401ac2:	4413      	add	r3, r2
  401ac4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  401ac8:	636b      	str	r3, [r5, #52]	; 0x34

		/* Wait for TX complete flag */
		while (1) {
			status = twi_port->TWI_SR;
  401aca:	6a2b      	ldr	r3, [r5, #32]
			if (status & TWI_SR_TXCOMP) {
  401acc:	f013 0f01 	tst.w	r3, #1
  401ad0:	d104      	bne.n	401adc <local_twi_handler+0x88>
				break;
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  401ad2:	3401      	adds	r4, #1
  401ad4:	f1b4 3fff 	cmp.w	r4, #4294967295
  401ad8:	d1f7      	bne.n	401aca <local_twi_handler+0x76>
  401ada:	e09f      	b.n	401c1c <local_twi_handler+0x1c8>
				break;
			}
		}
		/* If the driver is supporting multi-threading, then return the access
		mutex. */
		if (tx_dma_control[twi_index].peripheral_access_sem != NULL) {
  401adc:	4b64      	ldr	r3, [pc, #400]	; (401c70 <local_twi_handler+0x21c>)
  401ade:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
  401ae2:	6858      	ldr	r0, [r3, #4]
  401ae4:	b910      	cbnz	r0, 401aec <local_twi_handler+0x98>
  401ae6:	e007      	b.n	401af8 <local_twi_handler+0xa4>
			if (status & TWI_SR_TXCOMP) {
				break;
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
				transfer_timeout = true;
  401ae8:	f04f 0801 	mov.w	r8, #1
			}
		}
		/* If the driver is supporting multi-threading, then return the access
		mutex. */
		if (tx_dma_control[twi_index].peripheral_access_sem != NULL) {
			xSemaphoreGiveFromISR(
  401aec:	2300      	movs	r3, #0
  401aee:	aa01      	add	r2, sp, #4
  401af0:	4619      	mov	r1, r3
  401af2:	f8df 9180 	ldr.w	r9, [pc, #384]	; 401c74 <local_twi_handler+0x220>
  401af6:	47c8      	blx	r9
					&higher_priority_task_woken);
		}

		/* if the sending task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  401af8:	f1b4 3fff 	cmp.w	r4, #4294967295
  401afc:	d00b      	beq.n	401b16 <local_twi_handler+0xc2>
			if (tx_dma_control[twi_index]. transaction_complete_notification_semaphore != NULL) {
  401afe:	4b5c      	ldr	r3, [pc, #368]	; (401c70 <local_twi_handler+0x21c>)
  401b00:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
  401b04:	b138      	cbz	r0, 401b16 <local_twi_handler+0xc2>
				xSemaphoreGiveFromISR(
  401b06:	2300      	movs	r3, #0
  401b08:	aa01      	add	r2, sp, #4
  401b0a:	4619      	mov	r1, r3
  401b0c:	4c59      	ldr	r4, [pc, #356]	; (401c74 <local_twi_handler+0x220>)
  401b0e:	47a0      	blx	r4
  401b10:	e001      	b.n	401b16 <local_twi_handler+0xc2>
static void local_twi_handler(const portBASE_TYPE twi_index)
{
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
	uint32_t twi_status;
	Twi *twi_port;
	bool transfer_timeout = false;
  401b12:	f04f 0800 	mov.w	r8, #0
			}
		}
	}

	/* Has the PDC completed a reception? */
	if ((twi_status & TWI_SR_ENDRX) != 0UL) {
  401b16:	f416 5f80 	tst.w	r6, #4096	; 0x1000
  401b1a:	d054      	beq.n	401bc6 <local_twi_handler+0x172>
		uint32_t timeout_counter = 0;
		uint32_t status;
		/* Must handle the two last bytes */
		/* Disable PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_RXTDIS);
  401b1c:	4b4e      	ldr	r3, [pc, #312]	; (401c58 <local_twi_handler+0x204>)
  401b1e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
  401b22:	2102      	movs	r1, #2
  401b24:	6858      	ldr	r0, [r3, #4]
  401b26:	4b4f      	ldr	r3, [pc, #316]	; (401c64 <local_twi_handler+0x210>)
  401b28:	4798      	blx	r3

		twi_disable_interrupt(twi_port, TWI_IDR_ENDRX);
  401b2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  401b2e:	4628      	mov	r0, r5
  401b30:	4b4d      	ldr	r3, [pc, #308]	; (401c68 <local_twi_handler+0x214>)
  401b32:	4798      	blx	r3
		}
	}

	/* Has the PDC completed a reception? */
	if ((twi_status & TWI_SR_ENDRX) != 0UL) {
		uint32_t timeout_counter = 0;
  401b34:	2400      	movs	r4, #0

		twi_disable_interrupt(twi_port, TWI_IDR_ENDRX);

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  401b36:	6a2b      	ldr	r3, [r5, #32]
			if (status & TWI_SR_RXRDY) {
  401b38:	f013 0f02 	tst.w	r3, #2
  401b3c:	d103      	bne.n	401b46 <local_twi_handler+0xf2>
				break;
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  401b3e:	3401      	adds	r4, #1
  401b40:	f1b4 3fff 	cmp.w	r4, #4294967295
  401b44:	d1f7      	bne.n	401b36 <local_twi_handler+0xe2>
				break;
			}
		}
		/* Complete the transfer. */
		twi_port->TWI_CR = TWI_CR_STOP;
  401b46:	2302      	movs	r3, #2
  401b48:	602b      	str	r3, [r5, #0]
		/* Read second last data */
		twis[twi_index].buffer[(twis[twi_index].length)-2] = twi_port->TWI_RHR;
  401b4a:	4b48      	ldr	r3, [pc, #288]	; (401c6c <local_twi_handler+0x218>)
  401b4c:	f853 1037 	ldr.w	r1, [r3, r7, lsl #3]
  401b50:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
  401b54:	685a      	ldr	r2, [r3, #4]
  401b56:	6b28      	ldr	r0, [r5, #48]	; 0x30
  401b58:	188b      	adds	r3, r1, r2
  401b5a:	f803 0c02 	strb.w	r0, [r3, #-2]

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  401b5e:	6a2b      	ldr	r3, [r5, #32]
			if (status & TWI_SR_RXRDY) {
  401b60:	f013 0f02 	tst.w	r3, #2
  401b64:	d104      	bne.n	401b70 <local_twi_handler+0x11c>
				break;
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  401b66:	3401      	adds	r4, #1
  401b68:	f1b4 3fff 	cmp.w	r4, #4294967295
  401b6c:	d1f7      	bne.n	401b5e <local_twi_handler+0x10a>
  401b6e:	e068      	b.n	401c42 <local_twi_handler+0x1ee>
				break;
			}
		}

		if (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  401b70:	f1b4 3fff 	cmp.w	r4, #4294967295
  401b74:	d05e      	beq.n	401c34 <local_twi_handler+0x1e0>
			/* Read last data */
			twis[twi_index].buffer[(twis[twi_index].length)-1] = twi_port->TWI_RHR;
  401b76:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  401b78:	440a      	add	r2, r1
  401b7a:	f802 3c01 	strb.w	r3, [r2, #-1]
			timeout_counter = 0;
  401b7e:	2400      	movs	r4, #0
			/* Wait for TX complete flag before releasing semaphore */
			while (1) {
				status = twi_port->TWI_SR;
  401b80:	6a2b      	ldr	r3, [r5, #32]
				if (status & TWI_SR_TXCOMP) {
  401b82:	f013 0f01 	tst.w	r3, #1
  401b86:	d104      	bne.n	401b92 <local_twi_handler+0x13e>
					break;
				}
				/* Check timeout condition. */
				if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  401b88:	3401      	adds	r4, #1
  401b8a:	f1b4 3fff 	cmp.w	r4, #4294967295
  401b8e:	d1f7      	bne.n	401b80 <local_twi_handler+0x12c>
  401b90:	e04e      	b.n	401c30 <local_twi_handler+0x1dc>
		}

		/* If the driver is supporting multi-threading, then return the access
		mutex.  NOTE: As the peripheral is half duplex there is only one
		access mutex, and the reception uses the tx access muted. */
		if (tx_dma_control[twi_index].peripheral_access_sem != NULL) {
  401b92:	4b37      	ldr	r3, [pc, #220]	; (401c70 <local_twi_handler+0x21c>)
  401b94:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
  401b98:	6858      	ldr	r0, [r3, #4]
  401b9a:	b910      	cbnz	r0, 401ba2 <local_twi_handler+0x14e>
  401b9c:	e007      	b.n	401bae <local_twi_handler+0x15a>
  401b9e:	f04f 34ff 	mov.w	r4, #4294967295
			xSemaphoreGiveFromISR(
  401ba2:	2300      	movs	r3, #0
  401ba4:	aa01      	add	r2, sp, #4
  401ba6:	4619      	mov	r1, r3
  401ba8:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 401c74 <local_twi_handler+0x220>
  401bac:	47c8      	blx	r9
					&higher_priority_task_woken);
		}

		/* if the receiving task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if  (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  401bae:	f1b4 3fff 	cmp.w	r4, #4294967295
  401bb2:	d008      	beq.n	401bc6 <local_twi_handler+0x172>
			if (rx_dma_control[twi_index].transaction_complete_notification_semaphore != NULL) {
  401bb4:	4b30      	ldr	r3, [pc, #192]	; (401c78 <local_twi_handler+0x224>)
  401bb6:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
  401bba:	b120      	cbz	r0, 401bc6 <local_twi_handler+0x172>
				xSemaphoreGiveFromISR(
  401bbc:	2300      	movs	r3, #0
  401bbe:	aa01      	add	r2, sp, #4
  401bc0:	4619      	mov	r1, r3
  401bc2:	4c2c      	ldr	r4, [pc, #176]	; (401c74 <local_twi_handler+0x220>)
  401bc4:	47a0      	blx	r4
						&higher_priority_task_woken);
			}
		}
	}

	if (((twi_status & SR_ERROR_INTERRUPTS) != 0) || (transfer_timeout == true)) {
  401bc6:	f416 7f50 	tst.w	r6, #832	; 0x340
  401bca:	d102      	bne.n	401bd2 <local_twi_handler+0x17e>
  401bcc:	f1b8 0f00 	cmp.w	r8, #0
  401bd0:	d01f      	beq.n	401c12 <local_twi_handler+0x1be>
		Stop the transmission, disable interrupts used by the peripheral, and
		ensure the peripheral access mutex is made available to tasks.  As this
		peripheral is half duplex, only the Tx peripheral access mutex exits.*/

		/* Stop the PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
  401bd2:	4b21      	ldr	r3, [pc, #132]	; (401c58 <local_twi_handler+0x204>)
  401bd4:	eb03 1307 	add.w	r3, r3, r7, lsl #4
  401bd8:	f240 2102 	movw	r1, #514	; 0x202
  401bdc:	6858      	ldr	r0, [r3, #4]
  401bde:	4b21      	ldr	r3, [pc, #132]	; (401c64 <local_twi_handler+0x210>)
  401be0:	4798      	blx	r3

		if (!(twi_status & TWI_SR_NACK)) {
  401be2:	f416 7f80 	tst.w	r6, #256	; 0x100
			/* Do not send stop if NACK received. Handled by hardware */
			twi_port->TWI_CR = TWI_CR_STOP;
  401be6:	bf04      	itt	eq
  401be8:	2302      	moveq	r3, #2
  401bea:	602b      	streq	r3, [r5, #0]
		}
		twi_disable_interrupt(twi_port, TWI_IDR_ENDTX);
  401bec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  401bf0:	4628      	mov	r0, r5
  401bf2:	4c1d      	ldr	r4, [pc, #116]	; (401c68 <local_twi_handler+0x214>)
  401bf4:	47a0      	blx	r4
		twi_disable_interrupt(twi_port, TWI_IDR_ENDRX);
  401bf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  401bfa:	4628      	mov	r0, r5
  401bfc:	47a0      	blx	r4

		if (tx_dma_control[twi_index].peripheral_access_sem != NULL) {
  401bfe:	4b1c      	ldr	r3, [pc, #112]	; (401c70 <local_twi_handler+0x21c>)
  401c00:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
  401c04:	6878      	ldr	r0, [r7, #4]
  401c06:	b120      	cbz	r0, 401c12 <local_twi_handler+0x1be>
			xSemaphoreGiveFromISR(
  401c08:	2300      	movs	r3, #0
  401c0a:	aa01      	add	r2, sp, #4
  401c0c:	4619      	mov	r1, r3
  401c0e:	4c19      	ldr	r4, [pc, #100]	; (401c74 <local_twi_handler+0x220>)
  401c10:	47a0      	blx	r4
	has a priority equal to or higher than the currently running task (the task
	this ISR interrupted), then higher_priority_task_woken will have
	automatically been set to pdTRUE within the semaphore function.
	portEND_SWITCHING_ISR() will then ensure that this ISR returns directly to
	the higher priority unblocked task. */
	portEND_SWITCHING_ISR(higher_priority_task_woken);
  401c12:	9b01      	ldr	r3, [sp, #4]
  401c14:	b1e3      	cbz	r3, 401c50 <local_twi_handler+0x1fc>
  401c16:	4b19      	ldr	r3, [pc, #100]	; (401c7c <local_twi_handler+0x228>)
  401c18:	4798      	blx	r3
}
  401c1a:	e019      	b.n	401c50 <local_twi_handler+0x1fc>
				break;
			}
		}
		/* If the driver is supporting multi-threading, then return the access
		mutex. */
		if (tx_dma_control[twi_index].peripheral_access_sem != NULL) {
  401c1c:	4b14      	ldr	r3, [pc, #80]	; (401c70 <local_twi_handler+0x21c>)
  401c1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
  401c22:	6858      	ldr	r0, [r3, #4]
  401c24:	2800      	cmp	r0, #0
  401c26:	f47f af5f 	bne.w	401ae8 <local_twi_handler+0x94>
			if (status & TWI_SR_TXCOMP) {
				break;
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
				transfer_timeout = true;
  401c2a:	f04f 0801 	mov.w	r8, #1
  401c2e:	e772      	b.n	401b16 <local_twi_handler+0xc2>
				if (status & TWI_SR_TXCOMP) {
					break;
				}
				/* Check timeout condition. */
				if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
					transfer_timeout = true;
  401c30:	f04f 0801 	mov.w	r8, #1
		}

		/* If the driver is supporting multi-threading, then return the access
		mutex.  NOTE: As the peripheral is half duplex there is only one
		access mutex, and the reception uses the tx access muted. */
		if (tx_dma_control[twi_index].peripheral_access_sem != NULL) {
  401c34:	4b0e      	ldr	r3, [pc, #56]	; (401c70 <local_twi_handler+0x21c>)
  401c36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
  401c3a:	6858      	ldr	r0, [r3, #4]
  401c3c:	2800      	cmp	r0, #0
  401c3e:	d1ae      	bne.n	401b9e <local_twi_handler+0x14a>
  401c40:	e7c1      	b.n	401bc6 <local_twi_handler+0x172>
  401c42:	4b0b      	ldr	r3, [pc, #44]	; (401c70 <local_twi_handler+0x21c>)
  401c44:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
  401c48:	6858      	ldr	r0, [r3, #4]
  401c4a:	2800      	cmp	r0, #0
  401c4c:	d1a9      	bne.n	401ba2 <local_twi_handler+0x14e>
  401c4e:	e7ba      	b.n	401bc6 <local_twi_handler+0x172>
	this ISR interrupted), then higher_priority_task_woken will have
	automatically been set to pdTRUE within the semaphore function.
	portEND_SWITCHING_ISR() will then ensure that this ISR returns directly to
	the higher priority unblocked task. */
	portEND_SWITCHING_ISR(higher_priority_task_woken);
}
  401c50:	b003      	add	sp, #12
  401c52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401c56:	bf00      	nop
  401c58:	004084dc 	.word	0x004084dc
  401c5c:	004023c9 	.word	0x004023c9
  401c60:	004023cd 	.word	0x004023cd
  401c64:	00402399 	.word	0x00402399
  401c68:	004023c1 	.word	0x004023c1
  401c6c:	20000770 	.word	0x20000770
  401c70:	20000780 	.word	0x20000780
  401c74:	00403535 	.word	0x00403535
  401c78:	20000760 	.word	0x20000760
  401c7c:	00402fb5 	.word	0x00402fb5

00401c80 <freertos_twi_master_init>:
 *     be used with FreeRTOS TWI read and write functions is returned.  If
 *     the initialisation fails then NULL is returned.
 */
freertos_twi_if freertos_twi_master_init(Twi *p_twi,
		const freertos_peripheral_options_t *const freertos_driver_parameters)
{
  401c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401c84:	b083      	sub	sp, #12
  401c86:	4605      	mov	r5, r0
  401c88:	460e      	mov	r6, r1
	portBASE_TYPE twi_index;
	bool is_valid_operating_mode;
	freertos_twi_if return_value;
	const enum peripheral_operation_mode valid_operating_modes[] = {TWI_I2C_MASTER};
  401c8a:	af02      	add	r7, sp, #8
  401c8c:	2303      	movs	r3, #3
  401c8e:	f807 3d04 	strb.w	r3, [r7, #-4]!

	/* Find the index into the all_twi_definitions array that holds details of
	the p_twi peripheral. */
	twi_index = get_pdc_peripheral_details(all_twi_definitions, MAX_TWIS,
  401c92:	4602      	mov	r2, r0
  401c94:	2102      	movs	r1, #2
  401c96:	4830      	ldr	r0, [pc, #192]	; (401d58 <freertos_twi_master_init+0xd8>)
  401c98:	4b30      	ldr	r3, [pc, #192]	; (401d5c <freertos_twi_master_init+0xdc>)
  401c9a:	4798      	blx	r3
  401c9c:	4604      	mov	r4, r0
			(void *) p_twi);

	/* Check the requested operating mode is valid for the peripheral. */
	is_valid_operating_mode = check_requested_operating_mode(
  401c9e:	2201      	movs	r2, #1
  401ca0:	4639      	mov	r1, r7
  401ca2:	7b30      	ldrb	r0, [r6, #12]
  401ca4:	4b2e      	ldr	r3, [pc, #184]	; (401d60 <freertos_twi_master_init+0xe0>)
  401ca6:	4798      	blx	r3
			sizeof(valid_operating_modes) /
			sizeof(enum peripheral_operation_mode));

	/* Don't do anything unless a valid p_twi pointer was used, and a valid
	operating mode was requested. */
	if ((twi_index < MAX_TWIS) && (is_valid_operating_mode == true)) {
  401ca8:	2c01      	cmp	r4, #1
  401caa:	dc4d      	bgt.n	401d48 <freertos_twi_master_init+0xc8>
  401cac:	2800      	cmp	r0, #0
  401cae:	d04d      	beq.n	401d4c <freertos_twi_master_init+0xcc>
		/* This function must be called exactly once per supported twi.  Check
		it has not been called	before. */
		configASSERT(memcmp((void *)&(tx_dma_control[twi_index]),
  401cb0:	4b2c      	ldr	r3, [pc, #176]	; (401d64 <freertos_twi_master_init+0xe4>)
  401cb2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
  401cb6:	2208      	movs	r2, #8
  401cb8:	492b      	ldr	r1, [pc, #172]	; (401d68 <freertos_twi_master_init+0xe8>)
  401cba:	4640      	mov	r0, r8
  401cbc:	4b2b      	ldr	r3, [pc, #172]	; (401d6c <freertos_twi_master_init+0xec>)
  401cbe:	4798      	blx	r3
  401cc0:	b118      	cbz	r0, 401cca <freertos_twi_master_init+0x4a>
  401cc2:	4b2b      	ldr	r3, [pc, #172]	; (401d70 <freertos_twi_master_init+0xf0>)
  401cc4:	4798      	blx	r3
  401cc6:	bf00      	nop
  401cc8:	e7fd      	b.n	401cc6 <freertos_twi_master_init+0x46>
				&null_dma_control,
				sizeof(null_dma_control)) == 0);
		configASSERT(memcmp((void *)&(rx_dma_control[twi_index]),
  401cca:	4b2a      	ldr	r3, [pc, #168]	; (401d74 <freertos_twi_master_init+0xf4>)
  401ccc:	eb03 09c4 	add.w	r9, r3, r4, lsl #3
  401cd0:	2208      	movs	r2, #8
  401cd2:	4925      	ldr	r1, [pc, #148]	; (401d68 <freertos_twi_master_init+0xe8>)
  401cd4:	4648      	mov	r0, r9
  401cd6:	4b25      	ldr	r3, [pc, #148]	; (401d6c <freertos_twi_master_init+0xec>)
  401cd8:	4798      	blx	r3
  401cda:	b118      	cbz	r0, 401ce4 <freertos_twi_master_init+0x64>
  401cdc:	4b24      	ldr	r3, [pc, #144]	; (401d70 <freertos_twi_master_init+0xf0>)
  401cde:	4798      	blx	r3
  401ce0:	bf00      	nop
  401ce2:	e7fd      	b.n	401ce0 <freertos_twi_master_init+0x60>
		uint32_t temp = (uint32_t)(all_twi_definitions[twi_index].peripheral_base_address - 0x600);
		Flexcom *p_flexcom = (Flexcom *)temp;
		flexcom_enable(p_flexcom);
		flexcom_set_opmode(p_flexcom, FLEXCOM_TWI);
#else
		pmc_enable_periph_clk(
  401ce4:	f8df a070 	ldr.w	sl, [pc, #112]	; 401d58 <freertos_twi_master_init+0xd8>
  401ce8:	0127      	lsls	r7, r4, #4
  401cea:	eb0a 0b07 	add.w	fp, sl, r7
  401cee:	f8db 0008 	ldr.w	r0, [fp, #8]
  401cf2:	4b21      	ldr	r3, [pc, #132]	; (401d78 <freertos_twi_master_init+0xf8>)
  401cf4:	4798      	blx	r3
				all_twi_definitions[twi_index].peripheral_id);
#endif
		/* Ensure everything is disabled before configuration. */
		pdc_disable_transfer(
  401cf6:	f240 2102 	movw	r1, #514	; 0x202
  401cfa:	f8db 0004 	ldr.w	r0, [fp, #4]
  401cfe:	4b1f      	ldr	r3, [pc, #124]	; (401d7c <freertos_twi_master_init+0xfc>)
  401d00:	4798      	blx	r3
				all_twi_definitions[twi_index].pdc_base_address,
				(PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS));
		twi_disable_interrupt(
				all_twi_definitions[twi_index].peripheral_base_address,
  401d02:	f85a 7007 	ldr.w	r7, [sl, r7]
#endif
		/* Ensure everything is disabled before configuration. */
		pdc_disable_transfer(
				all_twi_definitions[twi_index].pdc_base_address,
				(PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS));
		twi_disable_interrupt(
  401d06:	f04f 31ff 	mov.w	r1, #4294967295
  401d0a:	4638      	mov	r0, r7
  401d0c:	4b1c      	ldr	r3, [pc, #112]	; (401d80 <freertos_twi_master_init+0x100>)
  401d0e:	4798      	blx	r3
				all_twi_definitions[twi_index].peripheral_base_address,
				MASK_ALL_INTERRUPTS);
		twi_reset(
  401d10:	4638      	mov	r0, r7
  401d12:	4b1c      	ldr	r3, [pc, #112]	; (401d84 <freertos_twi_master_init+0x104>)
  401d14:	4798      	blx	r3
				all_twi_definitions[twi_index].peripheral_base_address);

		switch (freertos_driver_parameters->operation_mode) {
  401d16:	7b33      	ldrb	r3, [r6, #12]
  401d18:	2b03      	cmp	r3, #3
  401d1a:	d102      	bne.n	401d22 <freertos_twi_master_init+0xa2>
		case TWI_I2C_MASTER:
			/* Call the standard ASF init function. */
			twi_enable_master_mode(
  401d1c:	4638      	mov	r0, r7
  401d1e:	4b1a      	ldr	r3, [pc, #104]	; (401d88 <freertos_twi_master_init+0x108>)
  401d20:	4798      	blx	r3
		}

		/* Create any required peripheral access mutexes and transaction complete
		semaphores.  This peripheral is half duplex so only a single access
		mutex is required. */
		create_peripheral_control_semaphores(
  401d22:	464a      	mov	r2, r9
  401d24:	4641      	mov	r1, r8
  401d26:	7b70      	ldrb	r0, [r6, #13]
  401d28:	4b18      	ldr	r3, [pc, #96]	; (401d8c <freertos_twi_master_init+0x10c>)
  401d2a:	4798      	blx	r3
				freertos_driver_parameters->options_flags,
				&(tx_dma_control[twi_index]),
				&(rx_dma_control[twi_index]));

		/* Error interrupts are always enabled. */
		twi_enable_interrupt(
  401d2c:	f44f 7150 	mov.w	r1, #832	; 0x340
  401d30:	4638      	mov	r0, r7
  401d32:	4b17      	ldr	r3, [pc, #92]	; (401d90 <freertos_twi_master_init+0x110>)
  401d34:	4798      	blx	r3
				all_twi_definitions[twi_index].peripheral_base_address,
				IER_ERROR_INTERRUPTS);

		/* Configure and enable the TWI interrupt in the interrupt controller. */
		configure_interrupt_controller(
  401d36:	4b08      	ldr	r3, [pc, #32]	; (401d58 <freertos_twi_master_init+0xd8>)
  401d38:	eb03 1404 	add.w	r4, r3, r4, lsl #4
  401d3c:	68b1      	ldr	r1, [r6, #8]
  401d3e:	f994 000c 	ldrsb.w	r0, [r4, #12]
  401d42:	4b14      	ldr	r3, [pc, #80]	; (401d94 <freertos_twi_master_init+0x114>)
  401d44:	4798      	blx	r3
				all_twi_definitions[twi_index].peripheral_irq,
				freertos_driver_parameters->interrupt_priority);

		return_value = (freertos_twi_if) p_twi;
  401d46:	e002      	b.n	401d4e <freertos_twi_master_init+0xce>
	} else {
		return_value = NULL;
  401d48:	2500      	movs	r5, #0
  401d4a:	e000      	b.n	401d4e <freertos_twi_master_init+0xce>
  401d4c:	2500      	movs	r5, #0
	}

	return return_value;
}
  401d4e:	4628      	mov	r0, r5
  401d50:	b003      	add	sp, #12
  401d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d56:	bf00      	nop
  401d58:	004084dc 	.word	0x004084dc
  401d5c:	004001e5 	.word	0x004001e5
  401d60:	00400215 	.word	0x00400215
  401d64:	20000780 	.word	0x20000780
  401d68:	004084fc 	.word	0x004084fc
  401d6c:	0040812d 	.word	0x0040812d
  401d70:	00402fc5 	.word	0x00402fc5
  401d74:	20000760 	.word	0x20000760
  401d78:	00402c35 	.word	0x00402c35
  401d7c:	00402399 	.word	0x00402399
  401d80:	004023c1 	.word	0x004023c1
  401d84:	004023d9 	.word	0x004023d9
  401d88:	004023ad 	.word	0x004023ad
  401d8c:	00400245 	.word	0x00400245
  401d90:	004023bd 	.word	0x004023bd
  401d94:	00400309 	.word	0x00400309

00401d98 <freertos_twi_write_packet_async>:
 *     the PDC was successfully configured to perform the TWI write operation.
 */
status_code_t freertos_twi_write_packet_async(freertos_twi_if p_twi,
		twi_packet_t *p_packet, portTickType block_time_ticks,
		xSemaphoreHandle notification_semaphore)
{
  401d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401d9c:	b085      	sub	sp, #20
  401d9e:	4604      	mov	r4, r0
  401da0:	460d      	mov	r5, r1
  401da2:	9203      	str	r2, [sp, #12]
  401da4:	4699      	mov	r9, r3
	portBASE_TYPE twi_index;
	Twi *twi_base;
	uint32_t internal_address = 0;

	twi_base = (Twi *) p_twi;
	twi_index = get_pdc_peripheral_details(all_twi_definitions, MAX_TWIS,
  401da6:	4602      	mov	r2, r0
  401da8:	2102      	movs	r1, #2
  401daa:	4852      	ldr	r0, [pc, #328]	; (401ef4 <freertos_twi_write_packet_async+0x15c>)
  401dac:	4b52      	ldr	r3, [pc, #328]	; (401ef8 <freertos_twi_write_packet_async+0x160>)
  401dae:	4798      	blx	r3
			(void *) twi_base);

	/* Don't do anything unless a valid TWI pointer was used. */
	if ((twi_index < MAX_TWIS) && (p_packet->length > 0)) {
  401db0:	2801      	cmp	r0, #1
  401db2:	f300 8095 	bgt.w	401ee0 <freertos_twi_write_packet_async+0x148>
  401db6:	4606      	mov	r6, r0
  401db8:	68eb      	ldr	r3, [r5, #12]
  401dba:	2b00      	cmp	r3, #0
  401dbc:	f000 8093 	beq.w	401ee6 <freertos_twi_write_packet_async+0x14e>
		return_value = freertos_obtain_peripheral_access_semphore(
  401dc0:	4f4e      	ldr	r7, [pc, #312]	; (401efc <freertos_twi_write_packet_async+0x164>)
  401dc2:	eb07 07c0 	add.w	r7, r7, r0, lsl #3
  401dc6:	a903      	add	r1, sp, #12
  401dc8:	4638      	mov	r0, r7
  401dca:	4b4d      	ldr	r3, [pc, #308]	; (401f00 <freertos_twi_write_packet_async+0x168>)
  401dcc:	4798      	blx	r3
				&(tx_dma_control[twi_index]), &block_time_ticks);

		if (return_value == STATUS_OK) {
  401dce:	4680      	mov	r8, r0
  401dd0:	2800      	cmp	r0, #0
  401dd2:	f040 808b 	bne.w	401eec <freertos_twi_write_packet_async+0x154>
			/* Set write mode and slave address. */
			twi_base->TWI_MMR = 0;
  401dd6:	2300      	movs	r3, #0
  401dd8:	6063      	str	r3, [r4, #4]
			twi_base->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  401dda:	7c2b      	ldrb	r3, [r5, #16]
  401ddc:	041b      	lsls	r3, r3, #16
  401dde:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
  401de2:	686b      	ldr	r3, [r5, #4]
  401de4:	021b      	lsls	r3, r3, #8
  401de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
  401dea:	4313      	orrs	r3, r2
  401dec:	6063      	str	r3, [r4, #4]
					((p_packet->addr_length <<
					TWI_MMR_IADRSZ_Pos) &
					TWI_MMR_IADRSZ_Msk);

			/* Set internal address if any. */
			if (p_packet->addr_length > 0) {
  401dee:	686a      	ldr	r2, [r5, #4]
  401df0:	b15a      	cbz	r2, 401e0a <freertos_twi_write_packet_async+0x72>
				internal_address = p_packet->addr[0];
  401df2:	782b      	ldrb	r3, [r5, #0]
				if (p_packet->addr_length > 1) {
  401df4:	2a01      	cmp	r2, #1
					internal_address <<= 8;
					internal_address |= p_packet->addr[1];
  401df6:	bf84      	itt	hi
  401df8:	7869      	ldrbhi	r1, [r5, #1]
  401dfa:	ea41 2303 	orrhi.w	r3, r1, r3, lsl #8
				}

				if (p_packet->addr_length > 2) {
  401dfe:	2a02      	cmp	r2, #2
  401e00:	d904      	bls.n	401e0c <freertos_twi_write_packet_async+0x74>
					internal_address <<= 8;
					internal_address |= p_packet->addr[2];
  401e02:	78aa      	ldrb	r2, [r5, #2]
  401e04:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  401e08:	e000      	b.n	401e0c <freertos_twi_write_packet_async+0x74>
		xSemaphoreHandle notification_semaphore)
{
	status_code_t return_value;
	portBASE_TYPE twi_index;
	Twi *twi_base;
	uint32_t internal_address = 0;
  401e0a:	2300      	movs	r3, #0
				if (p_packet->addr_length > 2) {
					internal_address <<= 8;
					internal_address |= p_packet->addr[2];
				}
			}
			twi_base->TWI_IADR = internal_address;
  401e0c:	60e3      	str	r3, [r4, #12]

			if (p_packet->length == 1) {
  401e0e:	68ea      	ldr	r2, [r5, #12]
  401e10:	2a01      	cmp	r2, #1
  401e12:	d147      	bne.n	401ea4 <freertos_twi_write_packet_async+0x10c>
				uint32_t status;
				uint32_t timeout_counter = 0;
				/* Do not handle errors for short packets in interrupt handler */
				twi_disable_interrupt(
						all_twi_definitions[twi_index].peripheral_base_address,
  401e14:	0133      	lsls	r3, r6, #4
  401e16:	4a37      	ldr	r2, [pc, #220]	; (401ef4 <freertos_twi_write_packet_async+0x15c>)
  401e18:	58d7      	ldr	r7, [r2, r3]

			if (p_packet->length == 1) {
				uint32_t status;
				uint32_t timeout_counter = 0;
				/* Do not handle errors for short packets in interrupt handler */
				twi_disable_interrupt(
  401e1a:	f44f 7150 	mov.w	r1, #832	; 0x340
  401e1e:	4638      	mov	r0, r7
  401e20:	4b38      	ldr	r3, [pc, #224]	; (401f04 <freertos_twi_write_packet_async+0x16c>)
  401e22:	4798      	blx	r3
						all_twi_definitions[twi_index].peripheral_base_address,
						IER_ERROR_INTERRUPTS);
				/* Send start condition */
				twi_base->TWI_THR = *((uint8_t*)(p_packet->buffer));
  401e24:	68ab      	ldr	r3, [r5, #8]
  401e26:	781b      	ldrb	r3, [r3, #0]
  401e28:	6363      	str	r3, [r4, #52]	; 0x34
			}
			twi_base->TWI_IADR = internal_address;

			if (p_packet->length == 1) {
				uint32_t status;
				uint32_t timeout_counter = 0;
  401e2a:	2300      	movs	r3, #0
						all_twi_definitions[twi_index].peripheral_base_address,
						IER_ERROR_INTERRUPTS);
				/* Send start condition */
				twi_base->TWI_THR = *((uint8_t*)(p_packet->buffer));
				while (1) {
					status = twi_base->TWI_SR;
  401e2c:	6a22      	ldr	r2, [r4, #32]
					if (status & TWI_SR_NACK) {
  401e2e:	f412 7f80 	tst.w	r2, #256	; 0x100
  401e32:	d010      	beq.n	401e56 <freertos_twi_write_packet_async+0xbe>
						/* Re-enable interrupts */
						twi_enable_interrupt(
  401e34:	f44f 7150 	mov.w	r1, #832	; 0x340
  401e38:	4638      	mov	r0, r7
  401e3a:	4b33      	ldr	r3, [pc, #204]	; (401f08 <freertos_twi_write_packet_async+0x170>)
  401e3c:	4798      	blx	r3
								all_twi_definitions[twi_index].peripheral_base_address,
								IER_ERROR_INTERRUPTS);
						/* Release semaphore */
						xSemaphoreGive(tx_dma_control[twi_index].peripheral_access_sem);
  401e3e:	4b2f      	ldr	r3, [pc, #188]	; (401efc <freertos_twi_write_packet_async+0x164>)
  401e40:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
  401e44:	2300      	movs	r3, #0
  401e46:	461a      	mov	r2, r3
  401e48:	4619      	mov	r1, r3
  401e4a:	6870      	ldr	r0, [r6, #4]
  401e4c:	4c2f      	ldr	r4, [pc, #188]	; (401f0c <freertos_twi_write_packet_async+0x174>)
  401e4e:	47a0      	blx	r4
						return ERR_BUSY;
  401e50:	f06f 0009 	mvn.w	r0, #9
  401e54:	e04a      	b.n	401eec <freertos_twi_write_packet_async+0x154>
					}
					if (status & TWI_SR_TXRDY) {
  401e56:	f012 0f04 	tst.w	r2, #4
  401e5a:	d105      	bne.n	401e68 <freertos_twi_write_packet_async+0xd0>
						break;
					}
					/* Check timeout condition. */
					if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  401e5c:	3301      	adds	r3, #1
  401e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401e62:	d1e3      	bne.n	401e2c <freertos_twi_write_packet_async+0x94>
						return_value = ERR_TIMEOUT;
  401e64:	f06f 0802 	mvn.w	r8, #2
						break;
					}
				}
				twi_base->TWI_CR = TWI_CR_STOP;
  401e68:	2202      	movs	r2, #2
  401e6a:	6022      	str	r2, [r4, #0]
				/* Wait for TX complete */
				while (!(twi_base->TWI_SR & TWI_SR_TXCOMP)) {
  401e6c:	e003      	b.n	401e76 <freertos_twi_write_packet_async+0xde>
					/* Check timeout condition. */
					if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  401e6e:	3301      	adds	r3, #1
  401e70:	f1b3 3fff 	cmp.w	r3, #4294967295
  401e74:	d004      	beq.n	401e80 <freertos_twi_write_packet_async+0xe8>
						break;
					}
				}
				twi_base->TWI_CR = TWI_CR_STOP;
				/* Wait for TX complete */
				while (!(twi_base->TWI_SR & TWI_SR_TXCOMP)) {
  401e76:	6a22      	ldr	r2, [r4, #32]
  401e78:	f012 0f01 	tst.w	r2, #1
  401e7c:	d0f7      	beq.n	401e6e <freertos_twi_write_packet_async+0xd6>
  401e7e:	e001      	b.n	401e84 <freertos_twi_write_packet_async+0xec>
					/* Check timeout condition. */
					if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
						return_value = ERR_TIMEOUT;
  401e80:	f06f 0802 	mvn.w	r8, #2
						break;
					}
				}

				/* Re-enable interrupts */
				twi_enable_interrupt(
  401e84:	f44f 7150 	mov.w	r1, #832	; 0x340
  401e88:	4638      	mov	r0, r7
  401e8a:	4b1f      	ldr	r3, [pc, #124]	; (401f08 <freertos_twi_write_packet_async+0x170>)
  401e8c:	4798      	blx	r3
						all_twi_definitions[twi_index].peripheral_base_address,
						IER_ERROR_INTERRUPTS);
				/* Release semaphores */
				xSemaphoreGive(tx_dma_control[twi_index].peripheral_access_sem);
  401e8e:	4b1b      	ldr	r3, [pc, #108]	; (401efc <freertos_twi_write_packet_async+0x164>)
  401e90:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
  401e94:	2300      	movs	r3, #0
  401e96:	461a      	mov	r2, r3
  401e98:	4619      	mov	r1, r3
  401e9a:	6870      	ldr	r0, [r6, #4]
  401e9c:	4c1b      	ldr	r4, [pc, #108]	; (401f0c <freertos_twi_write_packet_async+0x174>)
  401e9e:	47a0      	blx	r4
  401ea0:	4640      	mov	r0, r8
  401ea2:	e023      	b.n	401eec <freertos_twi_write_packet_async+0x154>
			} else {

				twis[twi_index].buffer = p_packet->buffer;
  401ea4:	68a9      	ldr	r1, [r5, #8]
  401ea6:	4b1a      	ldr	r3, [pc, #104]	; (401f10 <freertos_twi_write_packet_async+0x178>)
  401ea8:	f843 1036 	str.w	r1, [r3, r6, lsl #3]
				twis[twi_index].length = p_packet->length;
  401eac:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  401eb0:	605a      	str	r2, [r3, #4]

				freertos_start_pdc_tx(&(tx_dma_control[twi_index]),
  401eb2:	4b10      	ldr	r3, [pc, #64]	; (401ef4 <freertos_twi_write_packet_async+0x15c>)
  401eb4:	eb03 1606 	add.w	r6, r3, r6, lsl #4
  401eb8:	6873      	ldr	r3, [r6, #4]
  401eba:	2001      	movs	r0, #1
  401ebc:	9001      	str	r0, [sp, #4]
  401ebe:	f8cd 9000 	str.w	r9, [sp]
  401ec2:	3a01      	subs	r2, #1
  401ec4:	4638      	mov	r0, r7
  401ec6:	4d13      	ldr	r5, [pc, #76]	; (401f14 <freertos_twi_write_packet_async+0x17c>)
  401ec8:	47a8      	blx	r5
				/* Catch the end of transmission so the access mutex can be
				returned, and the task notified (if it supplied a notification
				semaphore).  The interrupt can be enabled here because the ENDTX
				signal from the PDC to the peripheral will have been de-asserted when
				the next transfer was configured. */
				twi_enable_interrupt(twi_base, TWI_IER_ENDTX);
  401eca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  401ece:	4620      	mov	r0, r4
  401ed0:	4b0d      	ldr	r3, [pc, #52]	; (401f08 <freertos_twi_write_packet_async+0x170>)
  401ed2:	4798      	blx	r3

				return_value = freertos_optionally_wait_transfer_completion(
  401ed4:	9a03      	ldr	r2, [sp, #12]
  401ed6:	4649      	mov	r1, r9
  401ed8:	4638      	mov	r0, r7
  401eda:	4b0f      	ldr	r3, [pc, #60]	; (401f18 <freertos_twi_write_packet_async+0x180>)
  401edc:	4798      	blx	r3
  401ede:	e005      	b.n	401eec <freertos_twi_write_packet_async+0x154>
						notification_semaphore,
						block_time_ticks);
			}
		}
	} else {
		return_value = ERR_INVALID_ARG;
  401ee0:	f06f 0007 	mvn.w	r0, #7
  401ee4:	e002      	b.n	401eec <freertos_twi_write_packet_async+0x154>
  401ee6:	f06f 0007 	mvn.w	r0, #7
  401eea:	e7ff      	b.n	401eec <freertos_twi_write_packet_async+0x154>
	}

	return return_value;
}
  401eec:	b005      	add	sp, #20
  401eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401ef2:	bf00      	nop
  401ef4:	004084dc 	.word	0x004084dc
  401ef8:	004001e5 	.word	0x004001e5
  401efc:	20000780 	.word	0x20000780
  401f00:	0040036d 	.word	0x0040036d
  401f04:	004023c1 	.word	0x004023c1
  401f08:	004023bd 	.word	0x004023bd
  401f0c:	00403415 	.word	0x00403415
  401f10:	20000770 	.word	0x20000770
  401f14:	004003bd 	.word	0x004003bd
  401f18:	0040043d 	.word	0x0040043d

00401f1c <freertos_twi_read_packet_async>:
 *     the PDC was successfully configured to perform the TWI read operation.
 */
status_code_t freertos_twi_read_packet_async(freertos_twi_if p_twi,
		twi_packet_t *p_packet, portTickType block_time_ticks,
		xSemaphoreHandle notification_semaphore)
{
  401f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401f20:	b084      	sub	sp, #16
  401f22:	4604      	mov	r4, r0
  401f24:	460d      	mov	r5, r1
  401f26:	9203      	str	r2, [sp, #12]
  401f28:	4698      	mov	r8, r3
	portBASE_TYPE twi_index;
	Twi *twi_base;
	uint32_t internal_address = 0;

	twi_base = (Twi *) p_twi;
	twi_index = get_pdc_peripheral_details(all_twi_definitions, MAX_TWIS,
  401f2a:	4602      	mov	r2, r0
  401f2c:	2102      	movs	r1, #2
  401f2e:	4867      	ldr	r0, [pc, #412]	; (4020cc <freertos_twi_read_packet_async+0x1b0>)
  401f30:	4b67      	ldr	r3, [pc, #412]	; (4020d0 <freertos_twi_read_packet_async+0x1b4>)
  401f32:	4798      	blx	r3
			(void *) twi_base);

	/* Don't do anything unless a valid TWI pointer was used. */
	if ((twi_index < MAX_TWIS) && (p_packet->length > 0)) {
  401f34:	2801      	cmp	r0, #1
  401f36:	f300 80bf 	bgt.w	4020b8 <freertos_twi_read_packet_async+0x19c>
  401f3a:	4606      	mov	r6, r0
  401f3c:	68eb      	ldr	r3, [r5, #12]
  401f3e:	2b00      	cmp	r3, #0
  401f40:	f000 80bd 	beq.w	4020be <freertos_twi_read_packet_async+0x1a2>
		/* Because the peripheral is half duplex, there is only one access mutex
		and the rx uses the tx mutex. */
		return_value = freertos_obtain_peripheral_access_semphore(
  401f44:	a903      	add	r1, sp, #12
  401f46:	4863      	ldr	r0, [pc, #396]	; (4020d4 <freertos_twi_read_packet_async+0x1b8>)
  401f48:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
  401f4c:	4b62      	ldr	r3, [pc, #392]	; (4020d8 <freertos_twi_read_packet_async+0x1bc>)
  401f4e:	4798      	blx	r3
				&(tx_dma_control[twi_index]), &block_time_ticks);

		if (return_value == STATUS_OK) {
  401f50:	4607      	mov	r7, r0
  401f52:	2800      	cmp	r0, #0
  401f54:	f040 80b6 	bne.w	4020c4 <freertos_twi_read_packet_async+0x1a8>
			/* Ensure Rx is already empty. */
			twi_read_byte(twi_base);
  401f58:	4620      	mov	r0, r4
  401f5a:	4b60      	ldr	r3, [pc, #384]	; (4020dc <freertos_twi_read_packet_async+0x1c0>)
  401f5c:	4798      	blx	r3

			/* Set read mode and slave address. */
			twi_base->TWI_MMR = 0;
  401f5e:	2300      	movs	r3, #0
  401f60:	6063      	str	r3, [r4, #4]
			twi_base->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(
					p_packet->chip) |
  401f62:	686b      	ldr	r3, [r5, #4]
  401f64:	021b      	lsls	r3, r3, #8
  401f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
  401f6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  401f6e:	7c2b      	ldrb	r3, [r5, #16]
  401f70:	041b      	lsls	r3, r3, #16
  401f72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401f76:	4313      	orrs	r3, r2
			/* Ensure Rx is already empty. */
			twi_read_byte(twi_base);

			/* Set read mode and slave address. */
			twi_base->TWI_MMR = 0;
			twi_base->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(
  401f78:	6063      	str	r3, [r4, #4]
					((p_packet->addr_length <<
					TWI_MMR_IADRSZ_Pos) &
					TWI_MMR_IADRSZ_Msk);

			/* Set internal address if any. */
			if (p_packet->addr_length) {
  401f7a:	686a      	ldr	r2, [r5, #4]
  401f7c:	b15a      	cbz	r2, 401f96 <freertos_twi_read_packet_async+0x7a>
				internal_address = p_packet->addr [0];
  401f7e:	782b      	ldrb	r3, [r5, #0]
				if (p_packet->addr_length > 1) {
  401f80:	2a01      	cmp	r2, #1
					internal_address <<= 8;
					internal_address |= p_packet->addr[1];
  401f82:	bf84      	itt	hi
  401f84:	7869      	ldrbhi	r1, [r5, #1]
  401f86:	ea41 2303 	orrhi.w	r3, r1, r3, lsl #8
				}

				if (p_packet->addr_length > 2) {
  401f8a:	2a02      	cmp	r2, #2
  401f8c:	d904      	bls.n	401f98 <freertos_twi_read_packet_async+0x7c>
					internal_address <<= 8;
					internal_address |= p_packet->addr[2];
  401f8e:	78aa      	ldrb	r2, [r5, #2]
  401f90:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  401f94:	e000      	b.n	401f98 <freertos_twi_read_packet_async+0x7c>
		xSemaphoreHandle notification_semaphore)
{
	status_code_t return_value;
	portBASE_TYPE twi_index;
	Twi *twi_base;
	uint32_t internal_address = 0;
  401f96:	2300      	movs	r3, #0
				if (p_packet->addr_length > 2) {
					internal_address <<= 8;
					internal_address |= p_packet->addr[2];
				}
			}
			twi_base->TWI_IADR = internal_address;
  401f98:	60e3      	str	r3, [r4, #12]

			if (p_packet->length <= 2) {
  401f9a:	68ea      	ldr	r2, [r5, #12]
  401f9c:	2a02      	cmp	r2, #2
  401f9e:	d869      	bhi.n	402074 <freertos_twi_read_packet_async+0x158>
				/* Do not handle errors for short packets in interrupt handler */
				twi_disable_interrupt(
						all_twi_definitions[twi_index].peripheral_base_address,
  401fa0:	0133      	lsls	r3, r6, #4
  401fa2:	4a4a      	ldr	r2, [pc, #296]	; (4020cc <freertos_twi_read_packet_async+0x1b0>)
  401fa4:	f852 8003 	ldr.w	r8, [r2, r3]
			}
			twi_base->TWI_IADR = internal_address;

			if (p_packet->length <= 2) {
				/* Do not handle errors for short packets in interrupt handler */
				twi_disable_interrupt(
  401fa8:	f44f 7150 	mov.w	r1, #832	; 0x340
  401fac:	4640      	mov	r0, r8
  401fae:	4b4c      	ldr	r3, [pc, #304]	; (4020e0 <freertos_twi_read_packet_async+0x1c4>)
  401fb0:	4798      	blx	r3
						all_twi_definitions[twi_index].peripheral_base_address,
						IER_ERROR_INTERRUPTS);

				/* Cannot use PDC transfer, use normal transfer */
				uint8_t stop_sent = 0;
				uint32_t cnt = p_packet->length;
  401fb2:	68eb      	ldr	r3, [r5, #12]
				uint32_t status;
				uint8_t *buffer = p_packet->buffer;
  401fb4:	68a8      	ldr	r0, [r5, #8]
				uint32_t timeout_counter = 0;

				/* Start the transfer. */
				if (cnt == 1) {
  401fb6:	2b01      	cmp	r3, #1
  401fb8:	d10d      	bne.n	401fd6 <freertos_twi_read_packet_async+0xba>
					twi_base->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  401fba:	2203      	movs	r2, #3
  401fbc:	6022      	str	r2, [r4, #0]
					stop_sent = 1;
  401fbe:	2501      	movs	r5, #1
  401fc0:	e7ff      	b.n	401fc2 <freertos_twi_read_packet_async+0xa6>
				} else {
					twi_base->TWI_CR = TWI_CR_START;
				}

				while (cnt > 0) {
					status = twi_base->TWI_SR;
  401fc2:	6a22      	ldr	r2, [r4, #32]
					if (status & TWI_SR_NACK) {
  401fc4:	f412 7f80 	tst.w	r2, #256	; 0x100
  401fc8:	d10f      	bne.n	401fea <freertos_twi_read_packet_async+0xce>
  401fca:	2100      	movs	r1, #0
						xSemaphoreGive(tx_dma_control[twi_index].peripheral_access_sem);
						return ERR_BUSY;
					}
					/* Last byte ? */
					if (cnt == 1 && !stop_sent) {
						twi_base->TWI_CR = TWI_CR_STOP;
  401fcc:	f04f 0c02 	mov.w	ip, #2
						stop_sent = 1;
  401fd0:	f04f 0e01 	mov.w	lr, #1
  401fd4:	e01a      	b.n	40200c <freertos_twi_read_packet_async+0xf0>
				/* Start the transfer. */
				if (cnt == 1) {
					twi_base->TWI_CR = TWI_CR_START | TWI_CR_STOP;
					stop_sent = 1;
				} else {
					twi_base->TWI_CR = TWI_CR_START;
  401fd6:	2201      	movs	r2, #1
  401fd8:	6022      	str	r2, [r4, #0]
				twi_disable_interrupt(
						all_twi_definitions[twi_index].peripheral_base_address,
						IER_ERROR_INTERRUPTS);

				/* Cannot use PDC transfer, use normal transfer */
				uint8_t stop_sent = 0;
  401fda:	2500      	movs	r5, #0
					stop_sent = 1;
				} else {
					twi_base->TWI_CR = TWI_CR_START;
				}

				while (cnt > 0) {
  401fdc:	2b00      	cmp	r3, #0
  401fde:	d1f0      	bne.n	401fc2 <freertos_twi_read_packet_async+0xa6>
  401fe0:	e02c      	b.n	40203c <freertos_twi_read_packet_async+0x120>
					status = twi_base->TWI_SR;
  401fe2:	6a22      	ldr	r2, [r4, #32]
					if (status & TWI_SR_NACK) {
  401fe4:	f412 7f80 	tst.w	r2, #256	; 0x100
  401fe8:	d010      	beq.n	40200c <freertos_twi_read_packet_async+0xf0>
						/* Re-enable interrupts */
						twi_enable_interrupt(
  401fea:	f44f 7150 	mov.w	r1, #832	; 0x340
  401fee:	4640      	mov	r0, r8
  401ff0:	4b3c      	ldr	r3, [pc, #240]	; (4020e4 <freertos_twi_read_packet_async+0x1c8>)
  401ff2:	4798      	blx	r3
								all_twi_definitions[twi_index].peripheral_base_address,
								IER_ERROR_INTERRUPTS);
						/* Release semaphore */
						xSemaphoreGive(tx_dma_control[twi_index].peripheral_access_sem);
  401ff4:	4b37      	ldr	r3, [pc, #220]	; (4020d4 <freertos_twi_read_packet_async+0x1b8>)
  401ff6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
  401ffa:	2300      	movs	r3, #0
  401ffc:	461a      	mov	r2, r3
  401ffe:	4619      	mov	r1, r3
  402000:	6870      	ldr	r0, [r6, #4]
  402002:	4c39      	ldr	r4, [pc, #228]	; (4020e8 <freertos_twi_read_packet_async+0x1cc>)
  402004:	47a0      	blx	r4
						return ERR_BUSY;
  402006:	f06f 0009 	mvn.w	r0, #9
  40200a:	e05b      	b.n	4020c4 <freertos_twi_read_packet_async+0x1a8>
					}
					/* Last byte ? */
					if (cnt == 1 && !stop_sent) {
  40200c:	2b01      	cmp	r3, #1
  40200e:	d103      	bne.n	402018 <freertos_twi_read_packet_async+0xfc>
  402010:	b915      	cbnz	r5, 402018 <freertos_twi_read_packet_async+0xfc>
						twi_base->TWI_CR = TWI_CR_STOP;
  402012:	f8c4 c000 	str.w	ip, [r4]
						stop_sent = 1;
  402016:	4675      	mov	r5, lr
					}
					if (!(status & TWI_SR_RXRDY)) {
  402018:	f012 0f02 	tst.w	r2, #2
  40201c:	d104      	bne.n	402028 <freertos_twi_read_packet_async+0x10c>
						if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  40201e:	3101      	adds	r1, #1
  402020:	f1b1 3fff 	cmp.w	r1, #4294967295
  402024:	d105      	bne.n	402032 <freertos_twi_read_packet_async+0x116>
  402026:	e007      	b.n	402038 <freertos_twi_read_packet_async+0x11c>
							return_value = ERR_TIMEOUT;
							break;
						}
						continue;
					}
					*buffer++ = twi_base->TWI_RHR;
  402028:	6b22      	ldr	r2, [r4, #48]	; 0x30
  40202a:	7002      	strb	r2, [r0, #0]
					cnt--;
  40202c:	3b01      	subs	r3, #1
							return_value = ERR_TIMEOUT;
							break;
						}
						continue;
					}
					*buffer++ = twi_base->TWI_RHR;
  40202e:	3001      	adds	r0, #1
					cnt--;
					timeout_counter = 0;
  402030:	2100      	movs	r1, #0
					stop_sent = 1;
				} else {
					twi_base->TWI_CR = TWI_CR_START;
				}

				while (cnt > 0) {
  402032:	2b00      	cmp	r3, #0
  402034:	d1d5      	bne.n	401fe2 <freertos_twi_read_packet_async+0xc6>
  402036:	e001      	b.n	40203c <freertos_twi_read_packet_async+0x120>
						twi_base->TWI_CR = TWI_CR_STOP;
						stop_sent = 1;
					}
					if (!(status & TWI_SR_RXRDY)) {
						if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
							return_value = ERR_TIMEOUT;
  402038:	f06f 0702 	mvn.w	r7, #2
					timeout_counter = 0;
				}

				timeout_counter = 0;
				/* Wait for stop to be sent */
				while (!(twi_base->TWI_SR & TWI_SR_TXCOMP)) {
  40203c:	f04f 33ff 	mov.w	r3, #4294967295
  402040:	e001      	b.n	402046 <freertos_twi_read_packet_async+0x12a>
					/* Check timeout condition. */
					if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  402042:	3b01      	subs	r3, #1
  402044:	d004      	beq.n	402050 <freertos_twi_read_packet_async+0x134>
					timeout_counter = 0;
				}

				timeout_counter = 0;
				/* Wait for stop to be sent */
				while (!(twi_base->TWI_SR & TWI_SR_TXCOMP)) {
  402046:	6a22      	ldr	r2, [r4, #32]
  402048:	f012 0f01 	tst.w	r2, #1
  40204c:	d0f9      	beq.n	402042 <freertos_twi_read_packet_async+0x126>
  40204e:	e001      	b.n	402054 <freertos_twi_read_packet_async+0x138>
					/* Check timeout condition. */
					if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
						return_value = ERR_TIMEOUT;
  402050:	f06f 0702 	mvn.w	r7, #2
						break;
					}
				}
				/* Re-enable interrupts */
				twi_enable_interrupt(
  402054:	f44f 7150 	mov.w	r1, #832	; 0x340
  402058:	4640      	mov	r0, r8
  40205a:	4b22      	ldr	r3, [pc, #136]	; (4020e4 <freertos_twi_read_packet_async+0x1c8>)
  40205c:	4798      	blx	r3
						all_twi_definitions[twi_index].peripheral_base_address,
						IER_ERROR_INTERRUPTS);
				/* Release semaphores */
				xSemaphoreGive(tx_dma_control[twi_index].peripheral_access_sem);
  40205e:	4b1d      	ldr	r3, [pc, #116]	; (4020d4 <freertos_twi_read_packet_async+0x1b8>)
  402060:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
  402064:	2300      	movs	r3, #0
  402066:	461a      	mov	r2, r3
  402068:	4619      	mov	r1, r3
  40206a:	6870      	ldr	r0, [r6, #4]
  40206c:	4c1e      	ldr	r4, [pc, #120]	; (4020e8 <freertos_twi_read_packet_async+0x1cc>)
  40206e:	47a0      	blx	r4
  402070:	4638      	mov	r0, r7
  402072:	e027      	b.n	4020c4 <freertos_twi_read_packet_async+0x1a8>
			} else {
				/* Start the PDC reception. */
				twis[twi_index].buffer = p_packet->buffer;
  402074:	68a9      	ldr	r1, [r5, #8]
  402076:	4b1d      	ldr	r3, [pc, #116]	; (4020ec <freertos_twi_read_packet_async+0x1d0>)
  402078:	f843 1036 	str.w	r1, [r3, r6, lsl #3]
				twis[twi_index].length = p_packet->length;
  40207c:	00f0      	lsls	r0, r6, #3
  40207e:	4403      	add	r3, r0
  402080:	605a      	str	r2, [r3, #4]
				freertos_start_pdc_rx(&(rx_dma_control[twi_index]),
  402082:	4d1b      	ldr	r5, [pc, #108]	; (4020f0 <freertos_twi_read_packet_async+0x1d4>)
  402084:	4405      	add	r5, r0
  402086:	4b11      	ldr	r3, [pc, #68]	; (4020cc <freertos_twi_read_packet_async+0x1b0>)
  402088:	eb03 1606 	add.w	r6, r3, r6, lsl #4
  40208c:	6873      	ldr	r3, [r6, #4]
  40208e:	2000      	movs	r0, #0
  402090:	9001      	str	r0, [sp, #4]
  402092:	f8cd 8000 	str.w	r8, [sp]
  402096:	3a02      	subs	r2, #2
  402098:	4628      	mov	r0, r5
  40209a:	4e16      	ldr	r6, [pc, #88]	; (4020f4 <freertos_twi_read_packet_async+0x1d8>)
  40209c:	47b0      	blx	r6
						p_packet->buffer, (p_packet->length)-2,
						all_twi_definitions[twi_index].pdc_base_address,
						notification_semaphore);

				/* Start the transfer. */
				twi_base->TWI_CR = TWI_CR_START;
  40209e:	2301      	movs	r3, #1
  4020a0:	6023      	str	r3, [r4, #0]
				/* Catch the end of reception so the access mutex can be returned,
				and the task notified (if it supplied a notification semaphore).
				The interrupt can be enabled here because the ENDRX	signal from the
				PDC to the peripheral will have been de-asserted when the next
				transfer was configured. */
				twi_enable_interrupt(twi_base, TWI_IER_ENDRX);
  4020a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4020a6:	4620      	mov	r0, r4
  4020a8:	4b0e      	ldr	r3, [pc, #56]	; (4020e4 <freertos_twi_read_packet_async+0x1c8>)
  4020aa:	4798      	blx	r3

				return_value = freertos_optionally_wait_transfer_completion(
  4020ac:	9a03      	ldr	r2, [sp, #12]
  4020ae:	4641      	mov	r1, r8
  4020b0:	4628      	mov	r0, r5
  4020b2:	4b11      	ldr	r3, [pc, #68]	; (4020f8 <freertos_twi_read_packet_async+0x1dc>)
  4020b4:	4798      	blx	r3
  4020b6:	e005      	b.n	4020c4 <freertos_twi_read_packet_async+0x1a8>
						notification_semaphore,
						block_time_ticks);
			}
		}
	} else {
		return_value = ERR_INVALID_ARG;
  4020b8:	f06f 0007 	mvn.w	r0, #7
  4020bc:	e002      	b.n	4020c4 <freertos_twi_read_packet_async+0x1a8>
  4020be:	f06f 0007 	mvn.w	r0, #7
  4020c2:	e7ff      	b.n	4020c4 <freertos_twi_read_packet_async+0x1a8>
	}

	return return_value;
}
  4020c4:	b004      	add	sp, #16
  4020c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4020ca:	bf00      	nop
  4020cc:	004084dc 	.word	0x004084dc
  4020d0:	004001e5 	.word	0x004001e5
  4020d4:	20000780 	.word	0x20000780
  4020d8:	0040036d 	.word	0x0040036d
  4020dc:	004023d1 	.word	0x004023d1
  4020e0:	004023c1 	.word	0x004023c1
  4020e4:	004023bd 	.word	0x004023bd
  4020e8:	00403415 	.word	0x00403415
  4020ec:	20000770 	.word	0x20000770
  4020f0:	20000760 	.word	0x20000760
  4020f4:	004003bd 	.word	0x004003bd
  4020f8:	0040043d 	.word	0x0040043d

004020fc <TWI0_Handler>:
#endif /* TWI */

#ifdef TWI0

void TWI0_Handler(void)
{
  4020fc:	b508      	push	{r3, lr}
	local_twi_handler(0);
  4020fe:	2000      	movs	r0, #0
  402100:	4b01      	ldr	r3, [pc, #4]	; (402108 <TWI0_Handler+0xc>)
  402102:	4798      	blx	r3
  402104:	bd08      	pop	{r3, pc}
  402106:	bf00      	nop
  402108:	00401a55 	.word	0x00401a55

0040210c <TWI1_Handler>:
#endif

#ifdef TWI1

void TWI1_Handler(void)
{
  40210c:	b508      	push	{r3, lr}
	local_twi_handler(1);
  40210e:	2001      	movs	r0, #1
  402110:	4b01      	ldr	r3, [pc, #4]	; (402118 <TWI1_Handler+0xc>)
  402112:	4798      	blx	r3
  402114:	bd08      	pop	{r3, pc}
  402116:	bf00      	nop
  402118:	00401a55 	.word	0x00401a55

0040211c <configure_rx_dma>:
 * For internal use only.
 * Configures the Rx DMA to receive data into free space within the Rx buffer.
 */
static void configure_rx_dma(uint32_t usart_index,
		enum buffer_operations operation_performed)
{
  40211c:	b570      	push	{r4, r5, r6, lr}
	rx_buffer_definition = &(rx_buffer_definitions[usart_index]);

	/* How much space is there between the start of the DMA buffer and the
	current read pointer?  */

	if (((uint32_t)rx_buffer_definition->next_byte_to_read) ==
  40211e:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
  402122:	4b2e      	ldr	r3, [pc, #184]	; (4021dc <configure_rx_dma+0xc0>)
  402124:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402128:	699a      	ldr	r2, [r3, #24]
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
  40212a:	689b      	ldr	r3, [r3, #8]
	rx_buffer_definition = &(rx_buffer_definitions[usart_index]);

	/* How much space is there between the start of the DMA buffer and the
	current read pointer?  */

	if (((uint32_t)rx_buffer_definition->next_byte_to_read) ==
  40212c:	429a      	cmp	r2, r3
  40212e:	d114      	bne.n	40215a <configure_rx_dma+0x3e>
		/* The read pointer and the write pointer are equal.  If this function
		was called because data was added to the buffer, then there is no free
		space in the buffer remaining.  If this function was called because data
		was removed from the buffer, then the space remaining is from the write
		pointer up to the end of the buffer. */
		if (operation_performed == data_added) {
  402130:	b951      	cbnz	r1, 402148 <configure_rx_dma+0x2c>
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
  402132:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
  402136:	4b29      	ldr	r3, [pc, #164]	; (4021dc <configure_rx_dma+0xc0>)
  402138:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  40213c:	2100      	movs	r1, #0
  40213e:	60d9      	str	r1, [r3, #12]
		available is up to the end of the buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
			rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	}

	configASSERT((rx_buffer_definition->rx_pdc_parameters.ul_addr +
  402140:	685b      	ldr	r3, [r3, #4]
  402142:	429a      	cmp	r2, r3
  402144:	d942      	bls.n	4021cc <configure_rx_dma+0xb0>
  402146:	e024      	b.n	402192 <configure_rx_dma+0x76>
		was removed from the buffer, then the space remaining is from the write
		pointer up to the end of the buffer. */
		if (operation_performed == data_added) {
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
		} else {
			rx_buffer_definition->rx_pdc_parameters.ul_size =
  402148:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
  40214c:	4923      	ldr	r1, [pc, #140]	; (4021dc <configure_rx_dma+0xc0>)
  40214e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
  402152:	684c      	ldr	r4, [r1, #4]
  402154:	1aa2      	subs	r2, r4, r2
  402156:	60ca      	str	r2, [r1, #12]
  402158:	e011      	b.n	40217e <configure_rx_dma+0x62>
				rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
		}
	} else if (((uint32_t)rx_buffer_definition->next_byte_to_read) >
  40215a:	429a      	cmp	r2, r3
  40215c:	d907      	bls.n	40216e <configure_rx_dma+0x52>
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
		/* The read pointer is ahead of the write pointer.  The space available
		is up to the write pointer to ensure unread data is not overwritten. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
  40215e:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
  402162:	491e      	ldr	r1, [pc, #120]	; (4021dc <configure_rx_dma+0xc0>)
  402164:	eb01 0184 	add.w	r1, r1, r4, lsl #2
  402168:	1ad2      	subs	r2, r2, r3
  40216a:	60ca      	str	r2, [r1, #12]
  40216c:	e007      	b.n	40217e <configure_rx_dma+0x62>
			((uint32_t) rx_buffer_definition->next_byte_to_read) - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	} else {
		/* The write pointer is ahead of the read pointer so the space
		available is up to the end of the buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
  40216e:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
  402172:	4a1a      	ldr	r2, [pc, #104]	; (4021dc <configure_rx_dma+0xc0>)
  402174:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  402178:	6851      	ldr	r1, [r2, #4]
  40217a:	1ac9      	subs	r1, r1, r3
  40217c:	60d1      	str	r1, [r2, #12]
			rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	}

	configASSERT((rx_buffer_definition->rx_pdc_parameters.ul_addr +
  40217e:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
  402182:	4a16      	ldr	r2, [pc, #88]	; (4021dc <configure_rx_dma+0xc0>)
  402184:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  402188:	68d1      	ldr	r1, [r2, #12]
  40218a:	440b      	add	r3, r1
  40218c:	6852      	ldr	r2, [r2, #4]
  40218e:	4293      	cmp	r3, r2
  402190:	d903      	bls.n	40219a <configure_rx_dma+0x7e>
  402192:	4b13      	ldr	r3, [pc, #76]	; (4021e0 <configure_rx_dma+0xc4>)
  402194:	4798      	blx	r3
  402196:	bf00      	nop
  402198:	e7fd      	b.n	402196 <configure_rx_dma+0x7a>
			rx_buffer_definition->rx_pdc_parameters.ul_size) <=
			rx_buffer_definition->past_rx_buffer_end_address);

	if (rx_buffer_definition->rx_pdc_parameters.ul_size > 0) {
  40219a:	b1b9      	cbz	r1, 4021cc <configure_rx_dma+0xb0>
		/* Restart the DMA to receive into whichever space was calculated
		as remaining.  First clear any characters that might already be in the
		registers. */
		pdc_rx_init(
  40219c:	4d11      	ldr	r5, [pc, #68]	; (4021e4 <configure_rx_dma+0xc8>)
  40219e:	0104      	lsls	r4, r0, #4
  4021a0:	192b      	adds	r3, r5, r4
  4021a2:	685e      	ldr	r6, [r3, #4]
  4021a4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  4021a8:	4b0c      	ldr	r3, [pc, #48]	; (4021dc <configure_rx_dma+0xc0>)
  4021aa:	eb03 0180 	add.w	r1, r3, r0, lsl #2
  4021ae:	2200      	movs	r2, #0
  4021b0:	3108      	adds	r1, #8
  4021b2:	4630      	mov	r0, r6
  4021b4:	4b0c      	ldr	r3, [pc, #48]	; (4021e8 <configure_rx_dma+0xcc>)
  4021b6:	4798      	blx	r3
				all_usart_definitions[usart_index].pdc_base_address, &rx_buffer_definition->rx_pdc_parameters,
				NULL);
		pdc_enable_transfer(
  4021b8:	2101      	movs	r1, #1
  4021ba:	4630      	mov	r0, r6
  4021bc:	4b0b      	ldr	r3, [pc, #44]	; (4021ec <configure_rx_dma+0xd0>)
  4021be:	4798      	blx	r3
				all_usart_definitions[usart_index].pdc_base_address,
				PERIPH_PTCR_RXTEN);
		usart_enable_interrupt(
  4021c0:	f44f 7184 	mov.w	r1, #264	; 0x108
  4021c4:	5928      	ldr	r0, [r5, r4]
  4021c6:	4b0a      	ldr	r3, [pc, #40]	; (4021f0 <configure_rx_dma+0xd4>)
  4021c8:	4798      	blx	r3
  4021ca:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		/* The write pointer has reached the read pointer.  There is no
		more room so the DMA is not re-enabled until a read has created
		space. */
		usart_disable_interrupt(
				all_usart_definitions[usart_index].peripheral_base_address, US_IER_ENDRX |
  4021cc:	0100      	lsls	r0, r0, #4
				US_IER_TIMEOUT);
	} else {
		/* The write pointer has reached the read pointer.  There is no
		more room so the DMA is not re-enabled until a read has created
		space. */
		usart_disable_interrupt(
  4021ce:	f44f 7184 	mov.w	r1, #264	; 0x108
  4021d2:	4b04      	ldr	r3, [pc, #16]	; (4021e4 <configure_rx_dma+0xc8>)
  4021d4:	5818      	ldr	r0, [r3, r0]
  4021d6:	4b07      	ldr	r3, [pc, #28]	; (4021f4 <configure_rx_dma+0xd8>)
  4021d8:	4798      	blx	r3
  4021da:	bd70      	pop	{r4, r5, r6, pc}
  4021dc:	20000790 	.word	0x20000790
  4021e0:	00402fc5 	.word	0x00402fc5
  4021e4:	00408504 	.word	0x00408504
  4021e8:	00402375 	.word	0x00402375
  4021ec:	0040238d 	.word	0x0040238d
  4021f0:	00402509 	.word	0x00402509
  4021f4:	0040250d 	.word	0x0040250d

004021f8 <local_usart_handler>:
/*
 * For internal use only.
 * A common USART interrupt handler that is called for all USART peripherals.
 */
static void local_usart_handler(const portBASE_TYPE usart_index)
{
  4021f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4021fa:	b083      	sub	sp, #12
  4021fc:	4604      	mov	r4, r0
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
  4021fe:	2300      	movs	r3, #0
  402200:	9301      	str	r3, [sp, #4]
	uint32_t usart_status;
	freertos_pdc_rx_control_t *rx_buffer_definition;

	usart_status = usart_get_status(
			all_usart_definitions[usart_index].peripheral_base_address);
  402202:	0103      	lsls	r3, r0, #4
  402204:	4a41      	ldr	r2, [pc, #260]	; (40230c <local_usart_handler+0x114>)
  402206:	58d6      	ldr	r6, [r2, r3]
{
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
	uint32_t usart_status;
	freertos_pdc_rx_control_t *rx_buffer_definition;

	usart_status = usart_get_status(
  402208:	4630      	mov	r0, r6
  40220a:	4b41      	ldr	r3, [pc, #260]	; (402310 <local_usart_handler+0x118>)
  40220c:	4798      	blx	r3
  40220e:	4605      	mov	r5, r0
			all_usart_definitions[usart_index].peripheral_base_address);
	usart_status &= usart_get_interrupt_mask(
  402210:	4630      	mov	r0, r6
  402212:	4b40      	ldr	r3, [pc, #256]	; (402314 <local_usart_handler+0x11c>)
  402214:	4798      	blx	r3
  402216:	4005      	ands	r5, r0
			all_usart_definitions[usart_index].peripheral_base_address);

	rx_buffer_definition = &(rx_buffer_definitions[usart_index]);

	/* Has the PDC completed a transmission? */
	if ((usart_status & US_CSR_ENDTX) != 0UL) {
  402218:	f015 0f10 	tst.w	r5, #16
  40221c:	d016      	beq.n	40224c <local_usart_handler+0x54>
		usart_disable_interrupt(
  40221e:	2110      	movs	r1, #16
  402220:	4630      	mov	r0, r6
  402222:	4b3d      	ldr	r3, [pc, #244]	; (402318 <local_usart_handler+0x120>)
  402224:	4798      	blx	r3
				all_usart_definitions[usart_index].peripheral_base_address,
				US_IER_ENDTX);

		/* If the driver is supporting multi-threading, then return the access
		mutex. */
		if (tx_dma_control[usart_index].peripheral_access_sem != NULL) {
  402226:	4b3d      	ldr	r3, [pc, #244]	; (40231c <local_usart_handler+0x124>)
  402228:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40222c:	6858      	ldr	r0, [r3, #4]
  40222e:	b120      	cbz	r0, 40223a <local_usart_handler+0x42>
			xSemaphoreGiveFromISR(
  402230:	2300      	movs	r3, #0
  402232:	aa01      	add	r2, sp, #4
  402234:	4619      	mov	r1, r3
  402236:	4f3a      	ldr	r7, [pc, #232]	; (402320 <local_usart_handler+0x128>)
  402238:	47b8      	blx	r7
					&higher_priority_task_woken);
		}

		/* if the sending task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if (tx_dma_control[usart_index].transaction_complete_notification_semaphore != NULL) {
  40223a:	4b38      	ldr	r3, [pc, #224]	; (40231c <local_usart_handler+0x124>)
  40223c:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
  402240:	b120      	cbz	r0, 40224c <local_usart_handler+0x54>
			xSemaphoreGiveFromISR(
  402242:	2300      	movs	r3, #0
  402244:	aa01      	add	r2, sp, #4
  402246:	4619      	mov	r1, r3
  402248:	4f35      	ldr	r7, [pc, #212]	; (402320 <local_usart_handler+0x128>)
  40224a:	47b8      	blx	r7
					tx_dma_control[usart_index].transaction_complete_notification_semaphore,
					&higher_priority_task_woken);
		}
	}

	if ((usart_status & US_CSR_ENDRX) != 0UL) {
  40224c:	f015 0f08 	tst.w	r5, #8
  402250:	d033      	beq.n	4022ba <local_usart_handler+0xc2>
		/* It is possible to initialise the peripheral to only use Tx and not Rx.
		Check that Rx has been initialised. */
		configASSERT(rx_buffer_definition->next_byte_to_read);
  402252:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
  402256:	4b33      	ldr	r3, [pc, #204]	; (402324 <local_usart_handler+0x12c>)
  402258:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40225c:	699b      	ldr	r3, [r3, #24]
  40225e:	b91b      	cbnz	r3, 402268 <local_usart_handler+0x70>
  402260:	4b31      	ldr	r3, [pc, #196]	; (402328 <local_usart_handler+0x130>)
  402262:	4798      	blx	r3
  402264:	bf00      	nop
  402266:	e7fd      	b.n	402264 <local_usart_handler+0x6c>
		configASSERT(rx_buffer_definition->next_byte_to_read !=
  402268:	2b01      	cmp	r3, #1
  40226a:	d103      	bne.n	402274 <local_usart_handler+0x7c>
  40226c:	4b2e      	ldr	r3, [pc, #184]	; (402328 <local_usart_handler+0x130>)
  40226e:	4798      	blx	r3
  402270:	bf00      	nop
  402272:	e7fd      	b.n	402270 <local_usart_handler+0x78>
				RX_NOT_USED);

		/* Out of DMA buffer, configure the next buffer.  Start by moving
		the DMA buffer start address up to the end of the previously defined
		buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_addr +=
  402274:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
  402278:	4b2a      	ldr	r3, [pc, #168]	; (402324 <local_usart_handler+0x12c>)
  40227a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40227e:	6899      	ldr	r1, [r3, #8]
  402280:	68da      	ldr	r2, [r3, #12]
  402282:	440a      	add	r2, r1
  402284:	609a      	str	r2, [r3, #8]
				rx_buffer_definition->rx_pdc_parameters.ul_size;

		/* If the end of the buffer has been reached, wrap back to the start. */
		if (rx_buffer_definition->rx_pdc_parameters.ul_addr >=
  402286:	685b      	ldr	r3, [r3, #4]
  402288:	429a      	cmp	r2, r3
  40228a:	d306      	bcc.n	40229a <local_usart_handler+0xa2>
				rx_buffer_definition->past_rx_buffer_end_address)
		{
			rx_buffer_definition->rx_pdc_parameters.ul_addr =
  40228c:	4a25      	ldr	r2, [pc, #148]	; (402324 <local_usart_handler+0x12c>)
  40228e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  402292:	009b      	lsls	r3, r3, #2
  402294:	18d1      	adds	r1, r2, r3
  402296:	58d3      	ldr	r3, [r2, r3]
  402298:	608b      	str	r3, [r1, #8]
					rx_buffer_definition->rx_buffer_start_address;
		}

		/* Reset the Rx DMA to receive data into whatever free space remains in
		the Rx buffer. */
		configure_rx_dma(usart_index, data_added);
  40229a:	2100      	movs	r1, #0
  40229c:	4620      	mov	r0, r4
  40229e:	4b23      	ldr	r3, [pc, #140]	; (40232c <local_usart_handler+0x134>)
  4022a0:	4798      	blx	r3

		if (rx_buffer_definition->rx_event_semaphore != NULL) {
  4022a2:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
  4022a6:	4b1f      	ldr	r3, [pc, #124]	; (402324 <local_usart_handler+0x12c>)
  4022a8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4022ac:	6918      	ldr	r0, [r3, #16]
  4022ae:	b120      	cbz	r0, 4022ba <local_usart_handler+0xc2>
			/* Notify that new data is available. */
			xSemaphoreGiveFromISR(
  4022b0:	2300      	movs	r3, #0
  4022b2:	aa01      	add	r2, sp, #4
  4022b4:	4619      	mov	r1, r3
  4022b6:	4f1a      	ldr	r7, [pc, #104]	; (402320 <local_usart_handler+0x128>)
  4022b8:	47b8      	blx	r7
					rx_buffer_definition->rx_event_semaphore,
					&higher_priority_task_woken);
		}
	}

	if ((usart_status & US_IER_TIMEOUT) != 0UL) {
  4022ba:	f415 7f80 	tst.w	r5, #256	; 0x100
  4022be:	d00e      	beq.n	4022de <local_usart_handler+0xe6>
		/* More characters have been placed into the Rx buffer.

		Restart the timeout after more data has been received. */
		usart_start_rx_timeout(all_usart_definitions[usart_index].peripheral_base_address);
  4022c0:	4630      	mov	r0, r6
  4022c2:	4b1b      	ldr	r3, [pc, #108]	; (402330 <local_usart_handler+0x138>)
  4022c4:	4798      	blx	r3

		if (rx_buffer_definition->rx_event_semaphore != NULL) {
  4022c6:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
  4022ca:	4b16      	ldr	r3, [pc, #88]	; (402324 <local_usart_handler+0x12c>)
  4022cc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4022d0:	6918      	ldr	r0, [r3, #16]
  4022d2:	b120      	cbz	r0, 4022de <local_usart_handler+0xe6>
			/* Notify that new data is available. */
			xSemaphoreGiveFromISR(
  4022d4:	2300      	movs	r3, #0
  4022d6:	aa01      	add	r2, sp, #4
  4022d8:	4619      	mov	r1, r3
  4022da:	4f11      	ldr	r7, [pc, #68]	; (402320 <local_usart_handler+0x128>)
  4022dc:	47b8      	blx	r7
					rx_buffer_definition->rx_event_semaphore,
					&higher_priority_task_woken);
		}
	}

	if ((usart_status & SR_ERROR_INTERRUPTS) != 0) {
  4022de:	f015 0fe0 	tst.w	r5, #224	; 0xe0
  4022e2:	d00c      	beq.n	4022fe <local_usart_handler+0x106>
		/* An error occurred in either a transmission or reception.  Abort, and
		ensure the peripheral access mutex is made available to tasks. */
		usart_reset_status(
  4022e4:	4630      	mov	r0, r6
  4022e6:	4b13      	ldr	r3, [pc, #76]	; (402334 <local_usart_handler+0x13c>)
  4022e8:	4798      	blx	r3
				all_usart_definitions[usart_index].peripheral_base_address);
		if (tx_dma_control[usart_index].peripheral_access_sem != NULL) {
  4022ea:	4b0c      	ldr	r3, [pc, #48]	; (40231c <local_usart_handler+0x124>)
  4022ec:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
  4022f0:	6860      	ldr	r0, [r4, #4]
  4022f2:	b120      	cbz	r0, 4022fe <local_usart_handler+0x106>
			xSemaphoreGiveFromISR(
  4022f4:	2300      	movs	r3, #0
  4022f6:	aa01      	add	r2, sp, #4
  4022f8:	4619      	mov	r1, r3
  4022fa:	4c09      	ldr	r4, [pc, #36]	; (402320 <local_usart_handler+0x128>)
  4022fc:	47a0      	blx	r4
	has a priority equal to or higher than the currently running task (the task
	this ISR interrupted), then higher_priority_task_woken will have
	automatically been set to pdTRUE within the semaphore function.
	portEND_SWITCHING_ISR() will then ensure that this ISR returns directly to
	the higher priority unblocked task. */
	portEND_SWITCHING_ISR(higher_priority_task_woken);
  4022fe:	9b01      	ldr	r3, [sp, #4]
  402300:	b10b      	cbz	r3, 402306 <local_usart_handler+0x10e>
  402302:	4b0d      	ldr	r3, [pc, #52]	; (402338 <local_usart_handler+0x140>)
  402304:	4798      	blx	r3
}
  402306:	b003      	add	sp, #12
  402308:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40230a:	bf00      	nop
  40230c:	00408504 	.word	0x00408504
  402310:	00402515 	.word	0x00402515
  402314:	00402511 	.word	0x00402511
  402318:	0040250d 	.word	0x0040250d
  40231c:	200007c8 	.word	0x200007c8
  402320:	00403535 	.word	0x00403535
  402324:	20000790 	.word	0x20000790
  402328:	00402fc5 	.word	0x00402fc5
  40232c:	0040211d 	.word	0x0040211d
  402330:	00402521 	.word	0x00402521
  402334:	00402519 	.word	0x00402519
  402338:	00402fb5 	.word	0x00402fb5

0040233c <USART0_Handler>:
#endif /* USART */

#ifdef USART0

void USART0_Handler(void)
{
  40233c:	b508      	push	{r3, lr}
	local_usart_handler(0);
  40233e:	2000      	movs	r0, #0
  402340:	4b01      	ldr	r3, [pc, #4]	; (402348 <USART0_Handler+0xc>)
  402342:	4798      	blx	r3
  402344:	bd08      	pop	{r3, pc}
  402346:	bf00      	nop
  402348:	004021f9 	.word	0x004021f9

0040234c <USART1_Handler>:
#endif /* USART0 */

#ifdef USART1

void USART1_Handler(void)
{
  40234c:	b508      	push	{r3, lr}
	local_usart_handler(1);
  40234e:	2001      	movs	r0, #1
  402350:	4b01      	ldr	r3, [pc, #4]	; (402358 <USART1_Handler+0xc>)
  402352:	4798      	blx	r3
  402354:	bd08      	pop	{r3, pc}
  402356:	bf00      	nop
  402358:	004021f9 	.word	0x004021f9

0040235c <pdc_tx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  40235c:	460b      	mov	r3, r1
  40235e:	b119      	cbz	r1, 402368 <pdc_tx_init+0xc>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
  402360:	6809      	ldr	r1, [r1, #0]
  402362:	6081      	str	r1, [r0, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  402364:	685b      	ldr	r3, [r3, #4]
  402366:	60c3      	str	r3, [r0, #12]
	}
	if (p_next_packet) {
  402368:	b11a      	cbz	r2, 402372 <pdc_tx_init+0x16>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  40236a:	6813      	ldr	r3, [r2, #0]
  40236c:	6183      	str	r3, [r0, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  40236e:	6853      	ldr	r3, [r2, #4]
  402370:	61c3      	str	r3, [r0, #28]
  402372:	4770      	bx	lr

00402374 <pdc_rx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  402374:	460b      	mov	r3, r1
  402376:	b119      	cbz	r1, 402380 <pdc_rx_init+0xc>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  402378:	6809      	ldr	r1, [r1, #0]
  40237a:	6001      	str	r1, [r0, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  40237c:	685b      	ldr	r3, [r3, #4]
  40237e:	6043      	str	r3, [r0, #4]
	}
	if (p_next_packet) {
  402380:	b11a      	cbz	r2, 40238a <pdc_rx_init+0x16>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  402382:	6813      	ldr	r3, [r2, #0]
  402384:	6103      	str	r3, [r0, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  402386:	6853      	ldr	r3, [r2, #4]
  402388:	6143      	str	r3, [r0, #20]
  40238a:	4770      	bx	lr

0040238c <pdc_enable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  40238c:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
  402390:	05c9      	lsls	r1, r1, #23
  402392:	0dc9      	lsrs	r1, r1, #23
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  402394:	6201      	str	r1, [r0, #32]
  402396:	4770      	bx	lr

00402398 <pdc_disable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  402398:	f421 71fe 	bic.w	r1, r1, #508	; 0x1fc
  40239c:	f021 0101 	bic.w	r1, r1, #1
  4023a0:	0589      	lsls	r1, r1, #22
  4023a2:	0d89      	lsrs	r1, r1, #22
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  4023a4:	6201      	str	r1, [r0, #32]
  4023a6:	4770      	bx	lr

004023a8 <pdc_read_rx_counter>:
		Pdc *p_pdc)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	return p_pdc->PERIPH_RCR;
  4023a8:	6840      	ldr	r0, [r0, #4]
}
  4023aa:	4770      	bx	lr

004023ac <twi_enable_master_mode>:
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  4023ac:	2308      	movs	r3, #8
  4023ae:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  4023b0:	2320      	movs	r3, #32
  4023b2:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  4023b4:	2304      	movs	r3, #4
  4023b6:	6003      	str	r3, [r0, #0]
  4023b8:	4770      	bx	lr
  4023ba:	bf00      	nop

004023bc <twi_enable_interrupt>:
 * \param ul_sources Interrupts to be enabled.
 */
void twi_enable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
	/* Enable the specified interrupts */
	p_twi->TWI_IER = ul_sources;
  4023bc:	6241      	str	r1, [r0, #36]	; 0x24
  4023be:	4770      	bx	lr

004023c0 <twi_disable_interrupt>:
 * \param ul_sources Interrupts to be disabled.
 */
void twi_disable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
	/* Disable the specified interrupts */
	p_twi->TWI_IDR = ul_sources;
  4023c0:	6281      	str	r1, [r0, #40]	; 0x28
	/* Dummy read */
	p_twi->TWI_SR;
  4023c2:	6a03      	ldr	r3, [r0, #32]
  4023c4:	4770      	bx	lr
  4023c6:	bf00      	nop

004023c8 <twi_get_interrupt_status>:
 *
 * \retval TWI interrupt status.
 */
uint32_t twi_get_interrupt_status(Twi *p_twi)
{
	return p_twi->TWI_SR;
  4023c8:	6a00      	ldr	r0, [r0, #32]
}
  4023ca:	4770      	bx	lr

004023cc <twi_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t twi_get_interrupt_mask(Twi *p_twi)
{
	return p_twi->TWI_IMR;
  4023cc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4023ce:	4770      	bx	lr

004023d0 <twi_read_byte>:
 *
 * \return The byte read.
 */
uint8_t twi_read_byte(Twi *p_twi)
{
	return p_twi->TWI_RHR;
  4023d0:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  4023d2:	b2c0      	uxtb	r0, r0
  4023d4:	4770      	bx	lr
  4023d6:	bf00      	nop

004023d8 <twi_reset>:
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  4023d8:	2380      	movs	r3, #128	; 0x80
  4023da:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  4023dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4023de:	4770      	bx	lr

004023e0 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4023e0:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4023e2:	010c      	lsls	r4, r1, #4
  4023e4:	4294      	cmp	r4, r2
  4023e6:	d90f      	bls.n	402408 <usart_set_async_baudrate+0x28>
  4023e8:	e01a      	b.n	402420 <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4023ea:	6841      	ldr	r1, [r0, #4]
  4023ec:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4023f0:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4023f2:	0412      	lsls	r2, r2, #16
  4023f4:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4023f8:	431a      	orrs	r2, r3
  4023fa:	6202      	str	r2, [r0, #32]

	return 0;
  4023fc:	2000      	movs	r0, #0
  4023fe:	e01c      	b.n	40243a <usart_set_async_baudrate+0x5a>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
  402400:	2001      	movs	r0, #1
  402402:	e01a      	b.n	40243a <usart_set_async_baudrate+0x5a>
  402404:	2001      	movs	r0, #1
  402406:	e018      	b.n	40243a <usart_set_async_baudrate+0x5a>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  402408:	0863      	lsrs	r3, r4, #1
  40240a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  40240e:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
  402412:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  402414:	1e5c      	subs	r4, r3, #1
  402416:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40241a:	428c      	cmp	r4, r1
  40241c:	d9e9      	bls.n	4023f2 <usart_set_async_baudrate+0x12>
  40241e:	e7ef      	b.n	402400 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  402420:	00c9      	lsls	r1, r1, #3
  402422:	084b      	lsrs	r3, r1, #1
  402424:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  402428:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  40242c:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40242e:	1e5c      	subs	r4, r3, #1
  402430:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  402434:	428c      	cmp	r4, r1
  402436:	d8e5      	bhi.n	402404 <usart_set_async_baudrate+0x24>
  402438:	e7d7      	b.n	4023ea <usart_set_async_baudrate+0xa>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
  40243a:	bc10      	pop	{r4}
  40243c:	4770      	bx	lr
  40243e:	bf00      	nop

00402440 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  402440:	4b0a      	ldr	r3, [pc, #40]	; (40246c <usart_reset+0x2c>)
  402442:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  402446:	2300      	movs	r3, #0
  402448:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  40244a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40244c:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40244e:	2388      	movs	r3, #136	; 0x88
  402450:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  402452:	2324      	movs	r3, #36	; 0x24
  402454:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  402456:	f44f 7380 	mov.w	r3, #256	; 0x100
  40245a:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  40245c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  402460:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_DTRDIS;
  402462:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  402466:	6003      	str	r3, [r0, #0]
  402468:	4770      	bx	lr
  40246a:	bf00      	nop
  40246c:	55534100 	.word	0x55534100

00402470 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  402470:	b570      	push	{r4, r5, r6, lr}
  402472:	4605      	mov	r5, r0
  402474:	460c      	mov	r4, r1
  402476:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  402478:	4b0f      	ldr	r3, [pc, #60]	; (4024b8 <usart_init_rs232+0x48>)
  40247a:	4798      	blx	r3

	ul_reg_val = 0;
  40247c:	2200      	movs	r2, #0
  40247e:	4b0f      	ldr	r3, [pc, #60]	; (4024bc <usart_init_rs232+0x4c>)
  402480:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  402482:	b19c      	cbz	r4, 4024ac <usart_init_rs232+0x3c>
  402484:	4632      	mov	r2, r6
  402486:	6821      	ldr	r1, [r4, #0]
  402488:	4628      	mov	r0, r5
  40248a:	4b0d      	ldr	r3, [pc, #52]	; (4024c0 <usart_init_rs232+0x50>)
  40248c:	4798      	blx	r3
  40248e:	4602      	mov	r2, r0
  402490:	b970      	cbnz	r0, 4024b0 <usart_init_rs232+0x40>
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  402492:	6861      	ldr	r1, [r4, #4]
  402494:	68a3      	ldr	r3, [r4, #8]
  402496:	4319      	orrs	r1, r3
  402498:	6923      	ldr	r3, [r4, #16]
  40249a:	4319      	orrs	r1, r3
  40249c:	68e3      	ldr	r3, [r4, #12]
  40249e:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4024a0:	4906      	ldr	r1, [pc, #24]	; (4024bc <usart_init_rs232+0x4c>)
  4024a2:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
  4024a4:	6869      	ldr	r1, [r5, #4]
  4024a6:	430b      	orrs	r3, r1
  4024a8:	606b      	str	r3, [r5, #4]

	return 0;
  4024aa:	e002      	b.n	4024b2 <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4024ac:	2201      	movs	r2, #1
  4024ae:	e000      	b.n	4024b2 <usart_init_rs232+0x42>
  4024b0:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
  4024b2:	4610      	mov	r0, r2
  4024b4:	bd70      	pop	{r4, r5, r6, pc}
  4024b6:	bf00      	nop
  4024b8:	00402441 	.word	0x00402441
  4024bc:	200007d8 	.word	0x200007d8
  4024c0:	004023e1 	.word	0x004023e1

004024c4 <usart_init_rs485>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs485(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4024c4:	b510      	push	{r4, lr}
  4024c6:	4604      	mov	r4, r0
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  4024c8:	4b06      	ldr	r3, [pc, #24]	; (4024e4 <usart_init_rs485+0x20>)
  4024ca:	4798      	blx	r3
  4024cc:	b938      	cbnz	r0, 4024de <usart_init_rs485+0x1a>
  4024ce:	4602      	mov	r2, r0
		return 1;
	}

	/* Set RS485 mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  4024d0:	6863      	ldr	r3, [r4, #4]
  4024d2:	f023 030f 	bic.w	r3, r3, #15
  4024d6:	f043 0301 	orr.w	r3, r3, #1
  4024da:	6063      	str	r3, [r4, #4]
			US_MR_USART_MODE_RS485;

	return 0;
  4024dc:	e000      	b.n	4024e0 <usart_init_rs485+0x1c>
uint32_t usart_init_rs485(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
		return 1;
  4024de:	2201      	movs	r2, #1
	/* Set RS485 mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
			US_MR_USART_MODE_RS485;

	return 0;
}
  4024e0:	4610      	mov	r0, r2
  4024e2:	bd10      	pop	{r4, pc}
  4024e4:	00402471 	.word	0x00402471

004024e8 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  4024e8:	2340      	movs	r3, #64	; 0x40
  4024ea:	6003      	str	r3, [r0, #0]
  4024ec:	4770      	bx	lr
  4024ee:	bf00      	nop

004024f0 <usart_disable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXDIS;
  4024f0:	2380      	movs	r3, #128	; 0x80
  4024f2:	6003      	str	r3, [r0, #0]
  4024f4:	4770      	bx	lr
  4024f6:	bf00      	nop

004024f8 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  4024f8:	2310      	movs	r3, #16
  4024fa:	6003      	str	r3, [r0, #0]
  4024fc:	4770      	bx	lr
  4024fe:	bf00      	nop

00402500 <usart_disable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXDIS;
  402500:	2320      	movs	r3, #32
  402502:	6003      	str	r3, [r0, #0]
  402504:	4770      	bx	lr
  402506:	bf00      	nop

00402508 <usart_enable_interrupt>:
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
	p_usart->US_IER = ul_sources;
  402508:	6081      	str	r1, [r0, #8]
  40250a:	4770      	bx	lr

0040250c <usart_disable_interrupt>:
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
	p_usart->US_IDR = ul_sources;
  40250c:	60c1      	str	r1, [r0, #12]
  40250e:	4770      	bx	lr

00402510 <usart_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
	return p_usart->US_IMR;
  402510:	6900      	ldr	r0, [r0, #16]
}
  402512:	4770      	bx	lr

00402514 <usart_get_status>:
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
	return p_usart->US_CSR;
  402514:	6940      	ldr	r0, [r0, #20]
}
  402516:	4770      	bx	lr

00402518 <usart_reset_status>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  402518:	f44f 7380 	mov.w	r3, #256	; 0x100
  40251c:	6003      	str	r3, [r0, #0]
  40251e:	4770      	bx	lr

00402520 <usart_start_rx_timeout>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_start_rx_timeout(Usart *p_usart)
{
	p_usart->US_CR = US_CR_STTTO;
  402520:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402524:	6003      	str	r3, [r0, #0]
  402526:	4770      	bx	lr

00402528 <usart_get_pdc_base>:
		p_pdc_base = PDC_USART;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
  402528:	4b06      	ldr	r3, [pc, #24]	; (402544 <usart_get_pdc_base+0x1c>)
  40252a:	4298      	cmp	r0, r3
  40252c:	d007      	beq.n	40253e <usart_get_pdc_base+0x16>
		p_pdc_base = PDC_USART7;
		return p_pdc_base;
	}
#endif

	return p_pdc_base;
  40252e:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
  402532:	4a05      	ldr	r2, [pc, #20]	; (402548 <usart_get_pdc_base+0x20>)
  402534:	4290      	cmp	r0, r2
  402536:	bf0c      	ite	eq
  402538:	4618      	moveq	r0, r3
  40253a:	2000      	movne	r0, #0
  40253c:	4770      	bx	lr
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
		p_pdc_base = PDC_USART0;
		return p_pdc_base;
  40253e:	4803      	ldr	r0, [pc, #12]	; (40254c <usart_get_pdc_base+0x24>)
		return p_pdc_base;
	}
#endif

	return p_pdc_base;
}
  402540:	4770      	bx	lr
  402542:	bf00      	nop
  402544:	40024000 	.word	0x40024000
  402548:	40028000 	.word	0x40028000
  40254c:	40024100 	.word	0x40024100

00402550 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  402550:	b530      	push	{r4, r5, lr}
  402552:	b083      	sub	sp, #12
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */

	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  402554:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402558:	4b20      	ldr	r3, [pc, #128]	; (4025dc <board_init+0x8c>)
  40255a:	605a      	str	r2, [r3, #4]
  40255c:	200b      	movs	r0, #11
  40255e:	4c20      	ldr	r4, [pc, #128]	; (4025e0 <board_init+0x90>)
  402560:	47a0      	blx	r4
  402562:	200c      	movs	r0, #12
  402564:	47a0      	blx	r4

	/* Init IO Port service to enable configuring pins */
	ioport_init();

	//Configure USART0 Pins (RS485, MODBUS)
	gpio_configure_group(PINS_USART0_PIO, PINS_USART0, PINS_USART0_FLAGS);
  402566:	4c1f      	ldr	r4, [pc, #124]	; (4025e4 <board_init+0x94>)
  402568:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40256c:	21e0      	movs	r1, #224	; 0xe0
  40256e:	4620      	mov	r0, r4
  402570:	4d1d      	ldr	r5, [pc, #116]	; (4025e8 <board_init+0x98>)
  402572:	47a8      	blx	r5
	
	//Configure TWI0 Pins
	gpio_configure_group(PINS_TWI0_PIO, PINS_TWI0, PINS_TWI0_FLAGS);
  402574:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  402578:	2118      	movs	r1, #24
  40257a:	4620      	mov	r0, r4
  40257c:	47a8      	blx	r5

	//Configure Motor Controller Pins
	gpio_configure_pin(PIN_MOTOR_RST_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  40257e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  402582:	2020      	movs	r0, #32
  402584:	4d19      	ldr	r5, [pc, #100]	; (4025ec <board_init+0x9c>)
  402586:	47a8      	blx	r5
	gpio_configure_pin(PIN_MOTOR_A_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  402588:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40258c:	2021      	movs	r0, #33	; 0x21
  40258e:	47a8      	blx	r5
	gpio_configure_pin(PIN_MOTOR_B_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  402590:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  402594:	2022      	movs	r0, #34	; 0x22
  402596:	47a8      	blx	r5

	/* Configure LED Pins */
	gpio_configure_pin(PIN_DEBUGLED_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  402598:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40259c:	2010      	movs	r0, #16
  40259e:	47a8      	blx	r5

	//Configure RTC 1 min Interrupt Pin
	gpio_configure_pin(PIN_RTC_INT_IDX, PIO_INPUT);
  4025a0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4025a4:	2014      	movs	r0, #20
  4025a6:	47a8      	blx	r5

	/* Initialize PIOs interrupt handlers (see PIO definition in board.h). */
	pio_handler_set(PIN_RTC_INT_PIO, PIN_RTC_INT_PIO_ID, PIN_RTC_INT_MASK, (PIO_OPENDRAIN | PIO_IT_FALL_EDGE), RTCIntHandler);
  4025a8:	4b11      	ldr	r3, [pc, #68]	; (4025f0 <board_init+0xa0>)
  4025aa:	9300      	str	r3, [sp, #0]
  4025ac:	2354      	movs	r3, #84	; 0x54
  4025ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4025b2:	210b      	movs	r1, #11
  4025b4:	4620      	mov	r0, r4
  4025b6:	4d0f      	ldr	r5, [pc, #60]	; (4025f4 <board_init+0xa4>)
  4025b8:	47a8      	blx	r5
  4025ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4025be:	4b0e      	ldr	r3, [pc, #56]	; (4025f8 <board_init+0xa8>)
  4025c0:	601a      	str	r2, [r3, #0]

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type) PIN_RTC_INT_PIO_ID);

	/* Set RTC Int Priority */
	pio_handler_set_priority(PIN_RTC_INT_PIO, (IRQn_Type) PIN_RTC_INT_PIO_ID, configLIBRARY_LOWEST_INTERRUPT_PRIORITY);
  4025c2:	220f      	movs	r2, #15
  4025c4:	210b      	movs	r1, #11
  4025c6:	4620      	mov	r0, r4
  4025c8:	4b0c      	ldr	r3, [pc, #48]	; (4025fc <board_init+0xac>)
  4025ca:	4798      	blx	r3
	
	/* Enable PIO line interrupts. */
	pio_enable_interrupt(PIN_RTC_INT_PIO, PIN_RTC_INT_MASK);
  4025cc:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  4025d0:	4620      	mov	r0, r4
  4025d2:	4b0b      	ldr	r3, [pc, #44]	; (402600 <board_init+0xb0>)
  4025d4:	4798      	blx	r3
}
  4025d6:	b003      	add	sp, #12
  4025d8:	bd30      	pop	{r4, r5, pc}
  4025da:	bf00      	nop
  4025dc:	400e1450 	.word	0x400e1450
  4025e0:	00402c35 	.word	0x00402c35
  4025e4:	400e0e00 	.word	0x400e0e00
  4025e8:	004028f1 	.word	0x004028f1
  4025ec:	004027cd 	.word	0x004027cd
  4025f0:	00400b6d 	.word	0x00400b6d
  4025f4:	00402a35 	.word	0x00402a35
  4025f8:	e000e100 	.word	0xe000e100
  4025fc:	00402ac9 	.word	0x00402ac9
  402600:	00402785 	.word	0x00402785

00402604 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402604:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  402606:	480e      	ldr	r0, [pc, #56]	; (402640 <sysclk_init+0x3c>)
  402608:	4b0e      	ldr	r3, [pc, #56]	; (402644 <sysclk_init+0x40>)
  40260a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40260c:	213e      	movs	r1, #62	; 0x3e
  40260e:	2000      	movs	r0, #0
  402610:	4b0d      	ldr	r3, [pc, #52]	; (402648 <sysclk_init+0x44>)
  402612:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402614:	4c0d      	ldr	r4, [pc, #52]	; (40264c <sysclk_init+0x48>)
  402616:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  402618:	2800      	cmp	r0, #0
  40261a:	d0fc      	beq.n	402616 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40261c:	4b0c      	ldr	r3, [pc, #48]	; (402650 <sysclk_init+0x4c>)
  40261e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402620:	4a0c      	ldr	r2, [pc, #48]	; (402654 <sysclk_init+0x50>)
  402622:	4b0d      	ldr	r3, [pc, #52]	; (402658 <sysclk_init+0x54>)
  402624:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  402626:	4c0d      	ldr	r4, [pc, #52]	; (40265c <sysclk_init+0x58>)
  402628:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40262a:	2800      	cmp	r0, #0
  40262c:	d0fc      	beq.n	402628 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40262e:	2010      	movs	r0, #16
  402630:	4b0b      	ldr	r3, [pc, #44]	; (402660 <sysclk_init+0x5c>)
  402632:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402634:	4b0b      	ldr	r3, [pc, #44]	; (402664 <sysclk_init+0x60>)
  402636:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  402638:	4801      	ldr	r0, [pc, #4]	; (402640 <sysclk_init+0x3c>)
  40263a:	4b02      	ldr	r3, [pc, #8]	; (402644 <sysclk_init+0x40>)
  40263c:	4798      	blx	r3
  40263e:	bd10      	pop	{r4, pc}
  402640:	07270e00 	.word	0x07270e00
  402644:	00402e51 	.word	0x00402e51
  402648:	00402bb1 	.word	0x00402bb1
  40264c:	00402c05 	.word	0x00402c05
  402650:	00402c15 	.word	0x00402c15
  402654:	20133f01 	.word	0x20133f01
  402658:	400e0400 	.word	0x400e0400
  40265c:	00402c25 	.word	0x00402c25
  402660:	00402b49 	.word	0x00402b49
  402664:	00402d3d 	.word	0x00402d3d

00402668 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  402668:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40266a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40266e:	d02f      	beq.n	4026d0 <pio_set_peripheral+0x68>
  402670:	d807      	bhi.n	402682 <pio_set_peripheral+0x1a>
  402672:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  402676:	d014      	beq.n	4026a2 <pio_set_peripheral+0x3a>
  402678:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40267c:	d01e      	beq.n	4026bc <pio_set_peripheral+0x54>
  40267e:	b939      	cbnz	r1, 402690 <pio_set_peripheral+0x28>
  402680:	4770      	bx	lr
  402682:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  402686:	d036      	beq.n	4026f6 <pio_set_peripheral+0x8e>
  402688:	d804      	bhi.n	402694 <pio_set_peripheral+0x2c>
  40268a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40268e:	d029      	beq.n	4026e4 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402690:	6042      	str	r2, [r0, #4]
  402692:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402694:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  402698:	d02d      	beq.n	4026f6 <pio_set_peripheral+0x8e>
  40269a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40269e:	d02a      	beq.n	4026f6 <pio_set_peripheral+0x8e>
  4026a0:	e7f6      	b.n	402690 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4026a2:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4026a4:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4026a6:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4026a8:	43d3      	mvns	r3, r2
  4026aa:	4021      	ands	r1, r4
  4026ac:	4019      	ands	r1, r3
  4026ae:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4026b0:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4026b2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4026b4:	4021      	ands	r1, r4
  4026b6:	400b      	ands	r3, r1
  4026b8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4026ba:	e01a      	b.n	4026f2 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4026bc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4026be:	4313      	orrs	r3, r2
  4026c0:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4026c2:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4026c4:	6f43      	ldr	r3, [r0, #116]	; 0x74
  4026c6:	400b      	ands	r3, r1
  4026c8:	ea23 0302 	bic.w	r3, r3, r2
  4026cc:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4026ce:	e7df      	b.n	402690 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4026d0:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4026d2:	6f03      	ldr	r3, [r0, #112]	; 0x70
  4026d4:	400b      	ands	r3, r1
  4026d6:	ea23 0302 	bic.w	r3, r3, r2
  4026da:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4026dc:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4026de:	4313      	orrs	r3, r2
  4026e0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4026e2:	e7d5      	b.n	402690 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4026e4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4026e6:	4313      	orrs	r3, r2
  4026e8:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4026ea:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4026ec:	4313      	orrs	r3, r2
  4026ee:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4026f0:	e7ce      	b.n	402690 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4026f2:	6042      	str	r2, [r0, #4]
}
  4026f4:	bc10      	pop	{r4}
  4026f6:	4770      	bx	lr

004026f8 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4026f8:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4026fa:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  4026fe:	bf14      	ite	ne
  402700:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402702:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402704:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  402708:	bf14      	ite	ne
  40270a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  40270c:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40270e:	f012 0f02 	tst.w	r2, #2
  402712:	d002      	beq.n	40271a <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  402714:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  402718:	e004      	b.n	402724 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40271a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  40271e:	bf18      	it	ne
  402720:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  402724:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  402726:	6001      	str	r1, [r0, #0]
  402728:	4770      	bx	lr
  40272a:	bf00      	nop

0040272c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40272c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40272e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402730:	9c01      	ldr	r4, [sp, #4]
  402732:	b10c      	cbz	r4, 402738 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  402734:	6641      	str	r1, [r0, #100]	; 0x64
  402736:	e000      	b.n	40273a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402738:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40273a:	b10b      	cbz	r3, 402740 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  40273c:	6501      	str	r1, [r0, #80]	; 0x50
  40273e:	e000      	b.n	402742 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  402740:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  402742:	b10a      	cbz	r2, 402748 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  402744:	6301      	str	r1, [r0, #48]	; 0x30
  402746:	e000      	b.n	40274a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  402748:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40274a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40274c:	6001      	str	r1, [r0, #0]
}
  40274e:	bc10      	pop	{r4}
  402750:	4770      	bx	lr
  402752:	bf00      	nop

00402754 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  402754:	f012 0f10 	tst.w	r2, #16
  402758:	d010      	beq.n	40277c <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  40275a:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40275e:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  402762:	bf14      	ite	ne
  402764:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  402768:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  40276c:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  402770:	bf14      	ite	ne
  402772:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  402776:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  40277a:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  40277c:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  402780:	4770      	bx	lr
  402782:	bf00      	nop

00402784 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
  402784:	6401      	str	r1, [r0, #64]	; 0x40
  402786:	4770      	bx	lr

00402788 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  402788:	6441      	str	r1, [r0, #68]	; 0x44
  40278a:	4770      	bx	lr

0040278c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40278c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40278e:	4770      	bx	lr

00402790 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  402790:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  402792:	4770      	bx	lr

00402794 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402794:	0943      	lsrs	r3, r0, #5
  402796:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40279a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40279e:	025b      	lsls	r3, r3, #9
void pio_set_pin_high(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  4027a0:	f000 001f 	and.w	r0, r0, #31
  4027a4:	2201      	movs	r2, #1
  4027a6:	fa02 f000 	lsl.w	r0, r2, r0
  4027aa:	6318      	str	r0, [r3, #48]	; 0x30
  4027ac:	4770      	bx	lr
  4027ae:	bf00      	nop

004027b0 <pio_set_pin_low>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4027b0:	0943      	lsrs	r3, r0, #5
  4027b2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4027b6:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4027ba:	025b      	lsls	r3, r3, #9
void pio_set_pin_low(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  4027bc:	f000 001f 	and.w	r0, r0, #31
  4027c0:	2201      	movs	r2, #1
  4027c2:	fa02 f000 	lsl.w	r0, r2, r0
  4027c6:	6358      	str	r0, [r3, #52]	; 0x34
  4027c8:	4770      	bx	lr
  4027ca:	bf00      	nop

004027cc <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4027cc:	b570      	push	{r4, r5, r6, lr}
  4027ce:	b082      	sub	sp, #8
  4027d0:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4027d2:	0943      	lsrs	r3, r0, #5
  4027d4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4027d8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4027dc:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4027de:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4027e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4027e6:	d047      	beq.n	402878 <pio_configure_pin+0xac>
  4027e8:	d809      	bhi.n	4027fe <pio_configure_pin+0x32>
  4027ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4027ee:	d021      	beq.n	402834 <pio_configure_pin+0x68>
  4027f0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4027f4:	d02f      	beq.n	402856 <pio_configure_pin+0x8a>
  4027f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4027fa:	d16f      	bne.n	4028dc <pio_configure_pin+0x110>
  4027fc:	e009      	b.n	402812 <pio_configure_pin+0x46>
  4027fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  402802:	d055      	beq.n	4028b0 <pio_configure_pin+0xe4>
  402804:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  402808:	d052      	beq.n	4028b0 <pio_configure_pin+0xe4>
  40280a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40280e:	d044      	beq.n	40289a <pio_configure_pin+0xce>
  402810:	e064      	b.n	4028dc <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  402812:	f000 001f 	and.w	r0, r0, #31
  402816:	2601      	movs	r6, #1
  402818:	4086      	lsls	r6, r0
  40281a:	4632      	mov	r2, r6
  40281c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402820:	4620      	mov	r0, r4
  402822:	4b30      	ldr	r3, [pc, #192]	; (4028e4 <pio_configure_pin+0x118>)
  402824:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402826:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40282a:	bf14      	ite	ne
  40282c:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40282e:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  402830:	2001      	movs	r0, #1
  402832:	e054      	b.n	4028de <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  402834:	f000 001f 	and.w	r0, r0, #31
  402838:	2601      	movs	r6, #1
  40283a:	4086      	lsls	r6, r0
  40283c:	4632      	mov	r2, r6
  40283e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402842:	4620      	mov	r0, r4
  402844:	4b27      	ldr	r3, [pc, #156]	; (4028e4 <pio_configure_pin+0x118>)
  402846:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402848:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40284c:	bf14      	ite	ne
  40284e:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402850:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  402852:	2001      	movs	r0, #1
  402854:	e043      	b.n	4028de <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  402856:	f000 001f 	and.w	r0, r0, #31
  40285a:	2601      	movs	r6, #1
  40285c:	4086      	lsls	r6, r0
  40285e:	4632      	mov	r2, r6
  402860:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402864:	4620      	mov	r0, r4
  402866:	4b1f      	ldr	r3, [pc, #124]	; (4028e4 <pio_configure_pin+0x118>)
  402868:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40286a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40286e:	bf14      	ite	ne
  402870:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402872:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  402874:	2001      	movs	r0, #1
  402876:	e032      	b.n	4028de <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  402878:	f000 001f 	and.w	r0, r0, #31
  40287c:	2601      	movs	r6, #1
  40287e:	4086      	lsls	r6, r0
  402880:	4632      	mov	r2, r6
  402882:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402886:	4620      	mov	r0, r4
  402888:	4b16      	ldr	r3, [pc, #88]	; (4028e4 <pio_configure_pin+0x118>)
  40288a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40288c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  402890:	bf14      	ite	ne
  402892:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402894:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  402896:	2001      	movs	r0, #1
  402898:	e021      	b.n	4028de <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40289a:	f000 011f 	and.w	r1, r0, #31
  40289e:	2601      	movs	r6, #1
  4028a0:	462a      	mov	r2, r5
  4028a2:	fa06 f101 	lsl.w	r1, r6, r1
  4028a6:	4620      	mov	r0, r4
  4028a8:	4b0f      	ldr	r3, [pc, #60]	; (4028e8 <pio_configure_pin+0x11c>)
  4028aa:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4028ac:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  4028ae:	e016      	b.n	4028de <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4028b0:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  4028b4:	f000 011f 	and.w	r1, r0, #31
  4028b8:	2601      	movs	r6, #1
  4028ba:	ea05 0306 	and.w	r3, r5, r6
  4028be:	9300      	str	r3, [sp, #0]
  4028c0:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4028c4:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4028c8:	bf14      	ite	ne
  4028ca:	2200      	movne	r2, #0
  4028cc:	2201      	moveq	r2, #1
  4028ce:	fa06 f101 	lsl.w	r1, r6, r1
  4028d2:	4620      	mov	r0, r4
  4028d4:	4c05      	ldr	r4, [pc, #20]	; (4028ec <pio_configure_pin+0x120>)
  4028d6:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  4028d8:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4028da:	e000      	b.n	4028de <pio_configure_pin+0x112>

	default:
		return 0;
  4028dc:	2000      	movs	r0, #0
	}

	return 1;
}
  4028de:	b002      	add	sp, #8
  4028e0:	bd70      	pop	{r4, r5, r6, pc}
  4028e2:	bf00      	nop
  4028e4:	00402669 	.word	0x00402669
  4028e8:	004026f9 	.word	0x004026f9
  4028ec:	0040272d 	.word	0x0040272d

004028f0 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  4028f0:	b570      	push	{r4, r5, r6, lr}
  4028f2:	b082      	sub	sp, #8
  4028f4:	4605      	mov	r5, r0
  4028f6:	460e      	mov	r6, r1
  4028f8:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4028fa:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  4028fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402902:	d038      	beq.n	402976 <pio_configure_pin_group+0x86>
  402904:	d809      	bhi.n	40291a <pio_configure_pin_group+0x2a>
  402906:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40290a:	d01c      	beq.n	402946 <pio_configure_pin_group+0x56>
  40290c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  402910:	d025      	beq.n	40295e <pio_configure_pin_group+0x6e>
  402912:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  402916:	d150      	bne.n	4029ba <pio_configure_pin_group+0xca>
  402918:	e009      	b.n	40292e <pio_configure_pin_group+0x3e>
  40291a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40291e:	d03a      	beq.n	402996 <pio_configure_pin_group+0xa6>
  402920:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  402924:	d037      	beq.n	402996 <pio_configure_pin_group+0xa6>
  402926:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40292a:	d030      	beq.n	40298e <pio_configure_pin_group+0x9e>
  40292c:	e045      	b.n	4029ba <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40292e:	460a      	mov	r2, r1
  402930:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402934:	4b22      	ldr	r3, [pc, #136]	; (4029c0 <pio_configure_pin_group+0xd0>)
  402936:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402938:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40293c:	bf14      	ite	ne
  40293e:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402940:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  402942:	2001      	movs	r0, #1
  402944:	e03a      	b.n	4029bc <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  402946:	460a      	mov	r2, r1
  402948:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40294c:	4b1c      	ldr	r3, [pc, #112]	; (4029c0 <pio_configure_pin_group+0xd0>)
  40294e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402950:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  402954:	bf14      	ite	ne
  402956:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402958:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40295a:	2001      	movs	r0, #1
  40295c:	e02e      	b.n	4029bc <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  40295e:	460a      	mov	r2, r1
  402960:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402964:	4b16      	ldr	r3, [pc, #88]	; (4029c0 <pio_configure_pin_group+0xd0>)
  402966:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402968:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40296c:	bf14      	ite	ne
  40296e:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402970:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  402972:	2001      	movs	r0, #1
  402974:	e022      	b.n	4029bc <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  402976:	460a      	mov	r2, r1
  402978:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40297c:	4b10      	ldr	r3, [pc, #64]	; (4029c0 <pio_configure_pin_group+0xd0>)
  40297e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402980:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  402984:	bf14      	ite	ne
  402986:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402988:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40298a:	2001      	movs	r0, #1
  40298c:	e016      	b.n	4029bc <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  40298e:	4b0d      	ldr	r3, [pc, #52]	; (4029c4 <pio_configure_pin_group+0xd4>)
  402990:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  402992:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  402994:	e012      	b.n	4029bc <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  402996:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  40299a:	f004 0301 	and.w	r3, r4, #1
  40299e:	9300      	str	r3, [sp, #0]
  4029a0:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4029a4:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4029a8:	bf14      	ite	ne
  4029aa:	2200      	movne	r2, #0
  4029ac:	2201      	moveq	r2, #1
  4029ae:	4631      	mov	r1, r6
  4029b0:	4628      	mov	r0, r5
  4029b2:	4c05      	ldr	r4, [pc, #20]	; (4029c8 <pio_configure_pin_group+0xd8>)
  4029b4:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  4029b6:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4029b8:	e000      	b.n	4029bc <pio_configure_pin_group+0xcc>

	default:
		return 0;
  4029ba:	2000      	movs	r0, #0
	}

	return 1;
}
  4029bc:	b002      	add	sp, #8
  4029be:	bd70      	pop	{r4, r5, r6, pc}
  4029c0:	00402669 	.word	0x00402669
  4029c4:	004026f9 	.word	0x004026f9
  4029c8:	0040272d 	.word	0x0040272d

004029cc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4029cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4029d0:	4681      	mov	r9, r0
  4029d2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4029d4:	4b12      	ldr	r3, [pc, #72]	; (402a20 <pio_handler_process+0x54>)
  4029d6:	4798      	blx	r3
  4029d8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4029da:	4648      	mov	r0, r9
  4029dc:	4b11      	ldr	r3, [pc, #68]	; (402a24 <pio_handler_process+0x58>)
  4029de:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4029e0:	4005      	ands	r5, r0
  4029e2:	d013      	beq.n	402a0c <pio_handler_process+0x40>
  4029e4:	4c10      	ldr	r4, [pc, #64]	; (402a28 <pio_handler_process+0x5c>)
  4029e6:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4029ea:	6823      	ldr	r3, [r4, #0]
  4029ec:	4543      	cmp	r3, r8
  4029ee:	d108      	bne.n	402a02 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4029f0:	6861      	ldr	r1, [r4, #4]
  4029f2:	4229      	tst	r1, r5
  4029f4:	d005      	beq.n	402a02 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4029f6:	68e3      	ldr	r3, [r4, #12]
  4029f8:	4640      	mov	r0, r8
  4029fa:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4029fc:	6863      	ldr	r3, [r4, #4]
  4029fe:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  402a02:	42b4      	cmp	r4, r6
  402a04:	d002      	beq.n	402a0c <pio_handler_process+0x40>
  402a06:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  402a08:	2d00      	cmp	r5, #0
  402a0a:	d1ee      	bne.n	4029ea <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  402a0c:	4b07      	ldr	r3, [pc, #28]	; (402a2c <pio_handler_process+0x60>)
  402a0e:	681b      	ldr	r3, [r3, #0]
  402a10:	b123      	cbz	r3, 402a1c <pio_handler_process+0x50>
		if (pio_capture_handler) {
  402a12:	4b07      	ldr	r3, [pc, #28]	; (402a30 <pio_handler_process+0x64>)
  402a14:	681b      	ldr	r3, [r3, #0]
  402a16:	b10b      	cbz	r3, 402a1c <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  402a18:	4648      	mov	r0, r9
  402a1a:	4798      	blx	r3
  402a1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402a20:	0040278d 	.word	0x0040278d
  402a24:	00402791 	.word	0x00402791
  402a28:	200007e4 	.word	0x200007e4
  402a2c:	200029b0 	.word	0x200029b0
  402a30:	200007e0 	.word	0x200007e0

00402a34 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  402a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  402a36:	4c17      	ldr	r4, [pc, #92]	; (402a94 <pio_handler_set+0x60>)
  402a38:	6826      	ldr	r6, [r4, #0]
  402a3a:	2e06      	cmp	r6, #6
  402a3c:	d828      	bhi.n	402a90 <pio_handler_set+0x5c>
  402a3e:	f04f 0c00 	mov.w	ip, #0
  402a42:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  402a44:	4f14      	ldr	r7, [pc, #80]	; (402a98 <pio_handler_set+0x64>)
	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
  402a46:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  402a48:	0125      	lsls	r5, r4, #4
  402a4a:	597d      	ldr	r5, [r7, r5]
  402a4c:	428d      	cmp	r5, r1
  402a4e:	d104      	bne.n	402a5a <pio_handler_set+0x26>
  402a50:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  402a54:	686d      	ldr	r5, [r5, #4]
  402a56:	4295      	cmp	r5, r2
  402a58:	d004      	beq.n	402a64 <pio_handler_set+0x30>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  402a5a:	3401      	adds	r4, #1
  402a5c:	b2e4      	uxtb	r4, r4
  402a5e:	46a4      	mov	ip, r4
  402a60:	42a6      	cmp	r6, r4
  402a62:	d2f0      	bcs.n	402a46 <pio_handler_set+0x12>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  402a64:	4d0c      	ldr	r5, [pc, #48]	; (402a98 <pio_handler_set+0x64>)
  402a66:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  402a6a:	eb05 040e 	add.w	r4, r5, lr
  402a6e:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  402a72:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  402a74:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  402a76:	9906      	ldr	r1, [sp, #24]
  402a78:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  402a7a:	3601      	adds	r6, #1
  402a7c:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
  402a7e:	bf04      	itt	eq
  402a80:	4904      	ldreq	r1, [pc, #16]	; (402a94 <pio_handler_set+0x60>)
  402a82:	600e      	streq	r6, [r1, #0]
  402a84:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  402a86:	461a      	mov	r2, r3
  402a88:	4b04      	ldr	r3, [pc, #16]	; (402a9c <pio_handler_set+0x68>)
  402a8a:	4798      	blx	r3

	return 0;
  402a8c:	2000      	movs	r0, #0
  402a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  402a90:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  402a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402a94:	200007dc 	.word	0x200007dc
  402a98:	200007e4 	.word	0x200007e4
  402a9c:	00402755 	.word	0x00402755

00402aa0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  402aa0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  402aa2:	210b      	movs	r1, #11
  402aa4:	4801      	ldr	r0, [pc, #4]	; (402aac <PIOA_Handler+0xc>)
  402aa6:	4b02      	ldr	r3, [pc, #8]	; (402ab0 <PIOA_Handler+0x10>)
  402aa8:	4798      	blx	r3
  402aaa:	bd08      	pop	{r3, pc}
  402aac:	400e0e00 	.word	0x400e0e00
  402ab0:	004029cd 	.word	0x004029cd

00402ab4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  402ab4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  402ab6:	210c      	movs	r1, #12
  402ab8:	4801      	ldr	r0, [pc, #4]	; (402ac0 <PIOB_Handler+0xc>)
  402aba:	4b02      	ldr	r3, [pc, #8]	; (402ac4 <PIOB_Handler+0x10>)
  402abc:	4798      	blx	r3
  402abe:	bd08      	pop	{r3, pc}
  402ac0:	400e1000 	.word	0x400e1000
  402ac4:	004029cd 	.word	0x004029cd

00402ac8 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  402ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402aca:	4605      	mov	r5, r0
  402acc:	460c      	mov	r4, r1
  402ace:	4617      	mov	r7, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  402ad0:	4b18      	ldr	r3, [pc, #96]	; (402b34 <pio_handler_set_priority+0x6c>)
  402ad2:	4798      	blx	r3
  402ad4:	4606      	mov	r6, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  402ad6:	f04f 31ff 	mov.w	r1, #4294967295
  402ada:	4628      	mov	r0, r5
  402adc:	4b16      	ldr	r3, [pc, #88]	; (402b38 <pio_handler_set_priority+0x70>)
  402ade:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  402ae0:	4628      	mov	r0, r5
  402ae2:	4b16      	ldr	r3, [pc, #88]	; (402b3c <pio_handler_set_priority+0x74>)
  402ae4:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  402ae6:	b2e2      	uxtb	r2, r4
  402ae8:	f002 031f 	and.w	r3, r2, #31
  402aec:	2101      	movs	r1, #1
  402aee:	4099      	lsls	r1, r3
  402af0:	0963      	lsrs	r3, r4, #5
  402af2:	009b      	lsls	r3, r3, #2
  402af4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  402af8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  402afc:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402b00:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  402b04:	2c00      	cmp	r4, #0
  402b06:	da06      	bge.n	402b16 <pio_handler_set_priority+0x4e>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402b08:	f002 020f 	and.w	r2, r2, #15
  402b0c:	013f      	lsls	r7, r7, #4
  402b0e:	b2ff      	uxtb	r7, r7
  402b10:	480b      	ldr	r0, [pc, #44]	; (402b40 <pio_handler_set_priority+0x78>)
  402b12:	5487      	strb	r7, [r0, r2]
  402b14:	e007      	b.n	402b26 <pio_handler_set_priority+0x5e>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  402b16:	013f      	lsls	r7, r7, #4
  402b18:	b2ff      	uxtb	r7, r7
  402b1a:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
  402b1e:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
  402b22:	f884 7300 	strb.w	r7, [r4, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402b26:	6019      	str	r1, [r3, #0]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  402b28:	4631      	mov	r1, r6
  402b2a:	4628      	mov	r0, r5
  402b2c:	4b05      	ldr	r3, [pc, #20]	; (402b44 <pio_handler_set_priority+0x7c>)
  402b2e:	4798      	blx	r3
  402b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402b32:	bf00      	nop
  402b34:	00402791 	.word	0x00402791
  402b38:	00402789 	.word	0x00402789
  402b3c:	0040278d 	.word	0x0040278d
  402b40:	e000ed14 	.word	0xe000ed14
  402b44:	00402785 	.word	0x00402785

00402b48 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402b48:	4a18      	ldr	r2, [pc, #96]	; (402bac <pmc_switch_mck_to_pllack+0x64>)
  402b4a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402b50:	4318      	orrs	r0, r3
  402b52:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402b54:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402b56:	f013 0f08 	tst.w	r3, #8
  402b5a:	d003      	beq.n	402b64 <pmc_switch_mck_to_pllack+0x1c>
  402b5c:	e009      	b.n	402b72 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402b5e:	3b01      	subs	r3, #1
  402b60:	d103      	bne.n	402b6a <pmc_switch_mck_to_pllack+0x22>
  402b62:	e01e      	b.n	402ba2 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402b64:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402b68:	4910      	ldr	r1, [pc, #64]	; (402bac <pmc_switch_mck_to_pllack+0x64>)
  402b6a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402b6c:	f012 0f08 	tst.w	r2, #8
  402b70:	d0f5      	beq.n	402b5e <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402b72:	4a0e      	ldr	r2, [pc, #56]	; (402bac <pmc_switch_mck_to_pllack+0x64>)
  402b74:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402b76:	f023 0303 	bic.w	r3, r3, #3
  402b7a:	f043 0302 	orr.w	r3, r3, #2
  402b7e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402b80:	6e90      	ldr	r0, [r2, #104]	; 0x68
  402b82:	f010 0008 	ands.w	r0, r0, #8
  402b86:	d004      	beq.n	402b92 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  402b88:	2000      	movs	r0, #0
  402b8a:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  402b8c:	3b01      	subs	r3, #1
  402b8e:	d103      	bne.n	402b98 <pmc_switch_mck_to_pllack+0x50>
  402b90:	e009      	b.n	402ba6 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402b92:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402b96:	4905      	ldr	r1, [pc, #20]	; (402bac <pmc_switch_mck_to_pllack+0x64>)
  402b98:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402b9a:	f012 0f08 	tst.w	r2, #8
  402b9e:	d0f5      	beq.n	402b8c <pmc_switch_mck_to_pllack+0x44>
  402ba0:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  402ba2:	2001      	movs	r0, #1
  402ba4:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  402ba6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402ba8:	4770      	bx	lr
  402baa:	bf00      	nop
  402bac:	400e0400 	.word	0x400e0400

00402bb0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402bb0:	b138      	cbz	r0, 402bc2 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402bb2:	4911      	ldr	r1, [pc, #68]	; (402bf8 <pmc_switch_mainck_to_xtal+0x48>)
  402bb4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402bb6:	4a11      	ldr	r2, [pc, #68]	; (402bfc <pmc_switch_mainck_to_xtal+0x4c>)
  402bb8:	401a      	ands	r2, r3
  402bba:	4b11      	ldr	r3, [pc, #68]	; (402c00 <pmc_switch_mainck_to_xtal+0x50>)
  402bbc:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402bbe:	620b      	str	r3, [r1, #32]
  402bc0:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402bc2:	480d      	ldr	r0, [pc, #52]	; (402bf8 <pmc_switch_mainck_to_xtal+0x48>)
  402bc4:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402bc6:	0209      	lsls	r1, r1, #8
  402bc8:	b289      	uxth	r1, r1
  402bca:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  402bce:	f023 0303 	bic.w	r3, r3, #3
  402bd2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402bd6:	f043 0301 	orr.w	r3, r3, #1
  402bda:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402bdc:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402bde:	4602      	mov	r2, r0
  402be0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402be2:	f013 0f01 	tst.w	r3, #1
  402be6:	d0fb      	beq.n	402be0 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402be8:	4a03      	ldr	r2, [pc, #12]	; (402bf8 <pmc_switch_mainck_to_xtal+0x48>)
  402bea:	6a13      	ldr	r3, [r2, #32]
  402bec:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  402bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  402bf4:	6213      	str	r3, [r2, #32]
  402bf6:	4770      	bx	lr
  402bf8:	400e0400 	.word	0x400e0400
  402bfc:	fec8fffc 	.word	0xfec8fffc
  402c00:	01370002 	.word	0x01370002

00402c04 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402c04:	4b02      	ldr	r3, [pc, #8]	; (402c10 <pmc_osc_is_ready_mainck+0xc>)
  402c06:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402c08:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402c0c:	4770      	bx	lr
  402c0e:	bf00      	nop
  402c10:	400e0400 	.word	0x400e0400

00402c14 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402c14:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402c18:	4b01      	ldr	r3, [pc, #4]	; (402c20 <pmc_disable_pllack+0xc>)
  402c1a:	629a      	str	r2, [r3, #40]	; 0x28
  402c1c:	4770      	bx	lr
  402c1e:	bf00      	nop
  402c20:	400e0400 	.word	0x400e0400

00402c24 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402c24:	4b02      	ldr	r3, [pc, #8]	; (402c30 <pmc_is_locked_pllack+0xc>)
  402c26:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402c28:	f000 0002 	and.w	r0, r0, #2
  402c2c:	4770      	bx	lr
  402c2e:	bf00      	nop
  402c30:	400e0400 	.word	0x400e0400

00402c34 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  402c34:	2822      	cmp	r0, #34	; 0x22
  402c36:	d81e      	bhi.n	402c76 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  402c38:	281f      	cmp	r0, #31
  402c3a:	d80c      	bhi.n	402c56 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402c3c:	4b11      	ldr	r3, [pc, #68]	; (402c84 <pmc_enable_periph_clk+0x50>)
  402c3e:	699a      	ldr	r2, [r3, #24]
  402c40:	2301      	movs	r3, #1
  402c42:	4083      	lsls	r3, r0
  402c44:	4393      	bics	r3, r2
  402c46:	d018      	beq.n	402c7a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  402c48:	2301      	movs	r3, #1
  402c4a:	fa03 f000 	lsl.w	r0, r3, r0
  402c4e:	4b0d      	ldr	r3, [pc, #52]	; (402c84 <pmc_enable_periph_clk+0x50>)
  402c50:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402c52:	2000      	movs	r0, #0
  402c54:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  402c56:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402c58:	4b0a      	ldr	r3, [pc, #40]	; (402c84 <pmc_enable_periph_clk+0x50>)
  402c5a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  402c5e:	2301      	movs	r3, #1
  402c60:	4083      	lsls	r3, r0
  402c62:	4393      	bics	r3, r2
  402c64:	d00b      	beq.n	402c7e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  402c66:	2301      	movs	r3, #1
  402c68:	fa03 f000 	lsl.w	r0, r3, r0
  402c6c:	4b05      	ldr	r3, [pc, #20]	; (402c84 <pmc_enable_periph_clk+0x50>)
  402c6e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  402c72:	2000      	movs	r0, #0
  402c74:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  402c76:	2001      	movs	r0, #1
  402c78:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402c7a:	2000      	movs	r0, #0
  402c7c:	4770      	bx	lr
  402c7e:	2000      	movs	r0, #0
}
  402c80:	4770      	bx	lr
  402c82:	bf00      	nop
  402c84:	400e0400 	.word	0x400e0400

00402c88 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402c88:	e7fe      	b.n	402c88 <Dummy_Handler>
  402c8a:	bf00      	nop

00402c8c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402c8c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  402c8e:	4b20      	ldr	r3, [pc, #128]	; (402d10 <Reset_Handler+0x84>)
  402c90:	4a20      	ldr	r2, [pc, #128]	; (402d14 <Reset_Handler+0x88>)
  402c92:	429a      	cmp	r2, r3
  402c94:	d912      	bls.n	402cbc <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  402c96:	4b20      	ldr	r3, [pc, #128]	; (402d18 <Reset_Handler+0x8c>)
  402c98:	4a1d      	ldr	r2, [pc, #116]	; (402d10 <Reset_Handler+0x84>)
  402c9a:	429a      	cmp	r2, r3
  402c9c:	d21e      	bcs.n	402cdc <Reset_Handler+0x50>
  402c9e:	4611      	mov	r1, r2
  402ca0:	3b01      	subs	r3, #1
  402ca2:	1a9b      	subs	r3, r3, r2
  402ca4:	f023 0303 	bic.w	r3, r3, #3
  402ca8:	3304      	adds	r3, #4
  402caa:	4a1a      	ldr	r2, [pc, #104]	; (402d14 <Reset_Handler+0x88>)
  402cac:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  402cae:	f852 0b04 	ldr.w	r0, [r2], #4
  402cb2:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  402cb6:	429a      	cmp	r2, r3
  402cb8:	d1f9      	bne.n	402cae <Reset_Handler+0x22>
  402cba:	e00f      	b.n	402cdc <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  402cbc:	4b14      	ldr	r3, [pc, #80]	; (402d10 <Reset_Handler+0x84>)
  402cbe:	4a15      	ldr	r2, [pc, #84]	; (402d14 <Reset_Handler+0x88>)
  402cc0:	429a      	cmp	r2, r3
  402cc2:	d20b      	bcs.n	402cdc <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  402cc4:	4b14      	ldr	r3, [pc, #80]	; (402d18 <Reset_Handler+0x8c>)
  402cc6:	4a12      	ldr	r2, [pc, #72]	; (402d10 <Reset_Handler+0x84>)
  402cc8:	1a9a      	subs	r2, r3, r2
  402cca:	4814      	ldr	r0, [pc, #80]	; (402d1c <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  402ccc:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  402cce:	b12a      	cbz	r2, 402cdc <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  402cd0:	f851 2904 	ldr.w	r2, [r1], #-4
  402cd4:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  402cd8:	4281      	cmp	r1, r0
  402cda:	d1f9      	bne.n	402cd0 <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402cdc:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402cde:	4b10      	ldr	r3, [pc, #64]	; (402d20 <Reset_Handler+0x94>)
  402ce0:	4a10      	ldr	r2, [pc, #64]	; (402d24 <Reset_Handler+0x98>)
  402ce2:	429a      	cmp	r2, r3
  402ce4:	d20b      	bcs.n	402cfe <Reset_Handler+0x72>
  402ce6:	1d13      	adds	r3, r2, #4
  402ce8:	4a0f      	ldr	r2, [pc, #60]	; (402d28 <Reset_Handler+0x9c>)
  402cea:	1ad2      	subs	r2, r2, r3
  402cec:	f022 0203 	bic.w	r2, r2, #3
  402cf0:	441a      	add	r2, r3
  402cf2:	3b04      	subs	r3, #4
		*pDest++ = 0;
  402cf4:	2100      	movs	r1, #0
  402cf6:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402cfa:	429a      	cmp	r2, r3
  402cfc:	d1fb      	bne.n	402cf6 <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  402cfe:	4b0b      	ldr	r3, [pc, #44]	; (402d2c <Reset_Handler+0xa0>)
  402d00:	4a0b      	ldr	r2, [pc, #44]	; (402d30 <Reset_Handler+0xa4>)
  402d02:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  402d04:	4b0b      	ldr	r3, [pc, #44]	; (402d34 <Reset_Handler+0xa8>)
  402d06:	4798      	blx	r3

	/* Branch to main function */
	main();
  402d08:	4b0b      	ldr	r3, [pc, #44]	; (402d38 <Reset_Handler+0xac>)
  402d0a:	4798      	blx	r3
  402d0c:	e7fe      	b.n	402d0c <Reset_Handler+0x80>
  402d0e:	bf00      	nop
  402d10:	20000000 	.word	0x20000000
  402d14:	004087a4 	.word	0x004087a4
  402d18:	200004f4 	.word	0x200004f4
  402d1c:	004087a0 	.word	0x004087a0
  402d20:	200029b4 	.word	0x200029b4
  402d24:	200004f8 	.word	0x200004f8
  402d28:	200029b7 	.word	0x200029b7
  402d2c:	e000ed00 	.word	0xe000ed00
  402d30:	00400000 	.word	0x00400000
  402d34:	004080dd 	.word	0x004080dd
  402d38:	004047e5 	.word	0x004047e5

00402d3c <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  402d3c:	4b3d      	ldr	r3, [pc, #244]	; (402e34 <SystemCoreClockUpdate+0xf8>)
  402d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402d40:	f003 0303 	and.w	r3, r3, #3
  402d44:	2b03      	cmp	r3, #3
  402d46:	d85d      	bhi.n	402e04 <SystemCoreClockUpdate+0xc8>
  402d48:	e8df f003 	tbb	[pc, r3]
  402d4c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  402d50:	4b39      	ldr	r3, [pc, #228]	; (402e38 <SystemCoreClockUpdate+0xfc>)
  402d52:	695b      	ldr	r3, [r3, #20]
  402d54:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402d58:	bf14      	ite	ne
  402d5a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402d5e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  402d62:	4b36      	ldr	r3, [pc, #216]	; (402e3c <SystemCoreClockUpdate+0x100>)
  402d64:	601a      	str	r2, [r3, #0]
  402d66:	e04d      	b.n	402e04 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402d68:	4b32      	ldr	r3, [pc, #200]	; (402e34 <SystemCoreClockUpdate+0xf8>)
  402d6a:	6a1b      	ldr	r3, [r3, #32]
  402d6c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402d70:	d003      	beq.n	402d7a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  402d72:	4a33      	ldr	r2, [pc, #204]	; (402e40 <SystemCoreClockUpdate+0x104>)
  402d74:	4b31      	ldr	r3, [pc, #196]	; (402e3c <SystemCoreClockUpdate+0x100>)
  402d76:	601a      	str	r2, [r3, #0]
  402d78:	e044      	b.n	402e04 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402d7a:	4a32      	ldr	r2, [pc, #200]	; (402e44 <SystemCoreClockUpdate+0x108>)
  402d7c:	4b2f      	ldr	r3, [pc, #188]	; (402e3c <SystemCoreClockUpdate+0x100>)
  402d7e:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402d80:	4b2c      	ldr	r3, [pc, #176]	; (402e34 <SystemCoreClockUpdate+0xf8>)
  402d82:	6a1b      	ldr	r3, [r3, #32]
  402d84:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402d88:	2b10      	cmp	r3, #16
  402d8a:	d002      	beq.n	402d92 <SystemCoreClockUpdate+0x56>
  402d8c:	2b20      	cmp	r3, #32
  402d8e:	d004      	beq.n	402d9a <SystemCoreClockUpdate+0x5e>
  402d90:	e038      	b.n	402e04 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402d92:	4a2d      	ldr	r2, [pc, #180]	; (402e48 <SystemCoreClockUpdate+0x10c>)
  402d94:	4b29      	ldr	r3, [pc, #164]	; (402e3c <SystemCoreClockUpdate+0x100>)
  402d96:	601a      	str	r2, [r3, #0]
			break;
  402d98:	e034      	b.n	402e04 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402d9a:	4a29      	ldr	r2, [pc, #164]	; (402e40 <SystemCoreClockUpdate+0x104>)
  402d9c:	4b27      	ldr	r3, [pc, #156]	; (402e3c <SystemCoreClockUpdate+0x100>)
  402d9e:	601a      	str	r2, [r3, #0]
			break;
  402da0:	e030      	b.n	402e04 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402da2:	4b24      	ldr	r3, [pc, #144]	; (402e34 <SystemCoreClockUpdate+0xf8>)
  402da4:	6a1b      	ldr	r3, [r3, #32]
  402da6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402daa:	d003      	beq.n	402db4 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  402dac:	4a24      	ldr	r2, [pc, #144]	; (402e40 <SystemCoreClockUpdate+0x104>)
  402dae:	4b23      	ldr	r3, [pc, #140]	; (402e3c <SystemCoreClockUpdate+0x100>)
  402db0:	601a      	str	r2, [r3, #0]
  402db2:	e012      	b.n	402dda <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402db4:	4a23      	ldr	r2, [pc, #140]	; (402e44 <SystemCoreClockUpdate+0x108>)
  402db6:	4b21      	ldr	r3, [pc, #132]	; (402e3c <SystemCoreClockUpdate+0x100>)
  402db8:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402dba:	4b1e      	ldr	r3, [pc, #120]	; (402e34 <SystemCoreClockUpdate+0xf8>)
  402dbc:	6a1b      	ldr	r3, [r3, #32]
  402dbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402dc2:	2b10      	cmp	r3, #16
  402dc4:	d002      	beq.n	402dcc <SystemCoreClockUpdate+0x90>
  402dc6:	2b20      	cmp	r3, #32
  402dc8:	d004      	beq.n	402dd4 <SystemCoreClockUpdate+0x98>
  402dca:	e006      	b.n	402dda <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402dcc:	4a1e      	ldr	r2, [pc, #120]	; (402e48 <SystemCoreClockUpdate+0x10c>)
  402dce:	4b1b      	ldr	r3, [pc, #108]	; (402e3c <SystemCoreClockUpdate+0x100>)
  402dd0:	601a      	str	r2, [r3, #0]
					break;
  402dd2:	e002      	b.n	402dda <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402dd4:	4a1a      	ldr	r2, [pc, #104]	; (402e40 <SystemCoreClockUpdate+0x104>)
  402dd6:	4b19      	ldr	r3, [pc, #100]	; (402e3c <SystemCoreClockUpdate+0x100>)
  402dd8:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  402dda:	4b16      	ldr	r3, [pc, #88]	; (402e34 <SystemCoreClockUpdate+0xf8>)
  402ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402dde:	f003 0303 	and.w	r3, r3, #3
  402de2:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402de4:	4a13      	ldr	r2, [pc, #76]	; (402e34 <SystemCoreClockUpdate+0xf8>)
  402de6:	bf07      	ittee	eq
  402de8:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402dea:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402dec:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402dee:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  402df0:	4812      	ldr	r0, [pc, #72]	; (402e3c <SystemCoreClockUpdate+0x100>)
  402df2:	f3c3 410a 	ubfx	r1, r3, #16, #11
  402df6:	6803      	ldr	r3, [r0, #0]
  402df8:	fb01 3303 	mla	r3, r1, r3, r3
  402dfc:	b2d2      	uxtb	r2, r2
  402dfe:	fbb3 f3f2 	udiv	r3, r3, r2
  402e02:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  402e04:	4b0b      	ldr	r3, [pc, #44]	; (402e34 <SystemCoreClockUpdate+0xf8>)
  402e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402e08:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402e0c:	2b70      	cmp	r3, #112	; 0x70
  402e0e:	d107      	bne.n	402e20 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  402e10:	4a0a      	ldr	r2, [pc, #40]	; (402e3c <SystemCoreClockUpdate+0x100>)
  402e12:	6813      	ldr	r3, [r2, #0]
  402e14:	490d      	ldr	r1, [pc, #52]	; (402e4c <SystemCoreClockUpdate+0x110>)
  402e16:	fba1 1303 	umull	r1, r3, r1, r3
  402e1a:	085b      	lsrs	r3, r3, #1
  402e1c:	6013      	str	r3, [r2, #0]
  402e1e:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402e20:	4b04      	ldr	r3, [pc, #16]	; (402e34 <SystemCoreClockUpdate+0xf8>)
  402e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  402e24:	4905      	ldr	r1, [pc, #20]	; (402e3c <SystemCoreClockUpdate+0x100>)
  402e26:	f3c3 1202 	ubfx	r2, r3, #4, #3
  402e2a:	680b      	ldr	r3, [r1, #0]
  402e2c:	40d3      	lsrs	r3, r2
  402e2e:	600b      	str	r3, [r1, #0]
  402e30:	4770      	bx	lr
  402e32:	bf00      	nop
  402e34:	400e0400 	.word	0x400e0400
  402e38:	400e1410 	.word	0x400e1410
  402e3c:	200000b0 	.word	0x200000b0
  402e40:	00b71b00 	.word	0x00b71b00
  402e44:	003d0900 	.word	0x003d0900
  402e48:	007a1200 	.word	0x007a1200
  402e4c:	aaaaaaab 	.word	0xaaaaaaab

00402e50 <system_init_flash>:
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402e50:	4b12      	ldr	r3, [pc, #72]	; (402e9c <system_init_flash+0x4c>)
  402e52:	4298      	cmp	r0, r3
  402e54:	d804      	bhi.n	402e60 <system_init_flash+0x10>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402e56:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402e5a:	4b11      	ldr	r3, [pc, #68]	; (402ea0 <system_init_flash+0x50>)
  402e5c:	601a      	str	r2, [r3, #0]
  402e5e:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  402e60:	4b10      	ldr	r3, [pc, #64]	; (402ea4 <system_init_flash+0x54>)
  402e62:	4298      	cmp	r0, r3
  402e64:	d803      	bhi.n	402e6e <system_init_flash+0x1e>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402e66:	4a10      	ldr	r2, [pc, #64]	; (402ea8 <system_init_flash+0x58>)
  402e68:	4b0d      	ldr	r3, [pc, #52]	; (402ea0 <system_init_flash+0x50>)
  402e6a:	601a      	str	r2, [r3, #0]
  402e6c:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402e6e:	4b0f      	ldr	r3, [pc, #60]	; (402eac <system_init_flash+0x5c>)
  402e70:	4298      	cmp	r0, r3
  402e72:	d803      	bhi.n	402e7c <system_init_flash+0x2c>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402e74:	4a0e      	ldr	r2, [pc, #56]	; (402eb0 <system_init_flash+0x60>)
  402e76:	4b0a      	ldr	r3, [pc, #40]	; (402ea0 <system_init_flash+0x50>)
  402e78:	601a      	str	r2, [r3, #0]
  402e7a:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402e7c:	4b0d      	ldr	r3, [pc, #52]	; (402eb4 <system_init_flash+0x64>)
  402e7e:	4298      	cmp	r0, r3
  402e80:	d803      	bhi.n	402e8a <system_init_flash+0x3a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402e82:	4a0d      	ldr	r2, [pc, #52]	; (402eb8 <system_init_flash+0x68>)
  402e84:	4b06      	ldr	r3, [pc, #24]	; (402ea0 <system_init_flash+0x50>)
  402e86:	601a      	str	r2, [r3, #0]
  402e88:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402e8a:	4b0c      	ldr	r3, [pc, #48]	; (402ebc <system_init_flash+0x6c>)
  402e8c:	4298      	cmp	r0, r3
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402e8e:	bf94      	ite	ls
  402e90:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402e94:	4a0a      	ldrhi	r2, [pc, #40]	; (402ec0 <system_init_flash+0x70>)
  402e96:	4b02      	ldr	r3, [pc, #8]	; (402ea0 <system_init_flash+0x50>)
  402e98:	601a      	str	r2, [r3, #0]
  402e9a:	4770      	bx	lr
  402e9c:	01312cff 	.word	0x01312cff
  402ea0:	400e0a00 	.word	0x400e0a00
  402ea4:	026259ff 	.word	0x026259ff
  402ea8:	04000100 	.word	0x04000100
  402eac:	039386ff 	.word	0x039386ff
  402eb0:	04000200 	.word	0x04000200
  402eb4:	04c4b3ff 	.word	0x04c4b3ff
  402eb8:	04000300 	.word	0x04000300
  402ebc:	05f5e0ff 	.word	0x05f5e0ff
  402ec0:	04000500 	.word	0x04000500

00402ec4 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  402ec4:	f100 0308 	add.w	r3, r0, #8
  402ec8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  402eca:	f04f 32ff 	mov.w	r2, #4294967295
  402ece:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  402ed0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  402ed2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  402ed4:	2300      	movs	r3, #0
  402ed6:	6003      	str	r3, [r0, #0]
  402ed8:	4770      	bx	lr
  402eda:	bf00      	nop

00402edc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  402edc:	2300      	movs	r3, #0
  402ede:	6103      	str	r3, [r0, #16]
  402ee0:	4770      	bx	lr
  402ee2:	bf00      	nop

00402ee4 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  402ee4:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
  402ee6:	685a      	ldr	r2, [r3, #4]
  402ee8:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  402eea:	6842      	ldr	r2, [r0, #4]
  402eec:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  402eee:	685a      	ldr	r2, [r3, #4]
  402ef0:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  402ef2:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  402ef4:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  402ef6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  402ef8:	6803      	ldr	r3, [r0, #0]
  402efa:	3301      	adds	r3, #1
  402efc:	6003      	str	r3, [r0, #0]
  402efe:	4770      	bx	lr

00402f00 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  402f00:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  402f02:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  402f04:	f1b4 3fff 	cmp.w	r4, #4294967295
  402f08:	d101      	bne.n	402f0e <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  402f0a:	6903      	ldr	r3, [r0, #16]
  402f0c:	e00a      	b.n	402f24 <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  402f0e:	f100 0308 	add.w	r3, r0, #8
  402f12:	68c2      	ldr	r2, [r0, #12]
  402f14:	6812      	ldr	r2, [r2, #0]
  402f16:	4294      	cmp	r4, r2
  402f18:	d304      	bcc.n	402f24 <vListInsert+0x24>
  402f1a:	685b      	ldr	r3, [r3, #4]
  402f1c:	685a      	ldr	r2, [r3, #4]
  402f1e:	6812      	ldr	r2, [r2, #0]
  402f20:	4294      	cmp	r4, r2
  402f22:	d2fa      	bcs.n	402f1a <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  402f24:	685a      	ldr	r2, [r3, #4]
  402f26:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  402f28:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
  402f2a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  402f2c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  402f2e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  402f30:	6803      	ldr	r3, [r0, #0]
  402f32:	3301      	adds	r3, #1
  402f34:	6003      	str	r3, [r0, #0]
}
  402f36:	bc10      	pop	{r4}
  402f38:	4770      	bx	lr
  402f3a:	bf00      	nop

00402f3c <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  402f3c:	6843      	ldr	r3, [r0, #4]
  402f3e:	6882      	ldr	r2, [r0, #8]
  402f40:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  402f42:	6883      	ldr	r3, [r0, #8]
  402f44:	6842      	ldr	r2, [r0, #4]
  402f46:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  402f48:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  402f4a:	685a      	ldr	r2, [r3, #4]
  402f4c:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  402f4e:	bf04      	itt	eq
  402f50:	6882      	ldreq	r2, [r0, #8]
  402f52:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  402f54:	2200      	movs	r2, #0
  402f56:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  402f58:	681a      	ldr	r2, [r3, #0]
  402f5a:	3a01      	subs	r2, #1
  402f5c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  402f5e:	6818      	ldr	r0, [r3, #0]
}
  402f60:	4770      	bx	lr
  402f62:	bf00      	nop

00402f64 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  402f64:	4803      	ldr	r0, [pc, #12]	; (402f74 <prvPortStartFirstTask+0x10>)
  402f66:	6800      	ldr	r0, [r0, #0]
  402f68:	6800      	ldr	r0, [r0, #0]
  402f6a:	f380 8808 	msr	MSP, r0
  402f6e:	b662      	cpsie	i
  402f70:	df00      	svc	0
  402f72:	bf00      	nop
  402f74:	e000ed08 	.word	0xe000ed08

00402f78 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  402f78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  402f7c:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
  402f80:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
  402f84:	2300      	movs	r3, #0
  402f86:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
  402f8a:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
  402f8e:	3840      	subs	r0, #64	; 0x40
  402f90:	4770      	bx	lr
  402f92:	bf00      	nop

00402f94 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
  402f94:	4b06      	ldr	r3, [pc, #24]	; (402fb0 <pxCurrentTCBConst2>)
  402f96:	6819      	ldr	r1, [r3, #0]
  402f98:	6808      	ldr	r0, [r1, #0]
  402f9a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  402f9e:	f380 8809 	msr	PSP, r0
  402fa2:	f04f 0000 	mov.w	r0, #0
  402fa6:	f380 8811 	msr	BASEPRI, r0
  402faa:	f04e 0e0d 	orr.w	lr, lr, #13
  402fae:	4770      	bx	lr

00402fb0 <pxCurrentTCBConst2>:
  402fb0:	20002918 	.word	0x20002918

00402fb4 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  402fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402fb8:	4b01      	ldr	r3, [pc, #4]	; (402fc0 <vPortYieldFromISR+0xc>)
  402fba:	601a      	str	r2, [r3, #0]
  402fbc:	4770      	bx	lr
  402fbe:	bf00      	nop
  402fc0:	e000ed04 	.word	0xe000ed04

00402fc4 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
  402fc4:	f3ef 8011 	mrs	r0, BASEPRI
  402fc8:	f04f 01a0 	mov.w	r1, #160	; 0xa0
  402fcc:	f381 8811 	msr	BASEPRI, r1
  402fd0:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
  402fd2:	2000      	movs	r0, #0

00402fd4 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  402fd4:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
  402fd6:	4b03      	ldr	r3, [pc, #12]	; (402fe4 <vPortEnterCritical+0x10>)
  402fd8:	4798      	blx	r3
	uxCriticalNesting++;
  402fda:	4a03      	ldr	r2, [pc, #12]	; (402fe8 <vPortEnterCritical+0x14>)
  402fdc:	6813      	ldr	r3, [r2, #0]
  402fde:	3301      	adds	r3, #1
  402fe0:	6013      	str	r3, [r2, #0]
  402fe2:	bd08      	pop	{r3, pc}
  402fe4:	00402fc5 	.word	0x00402fc5
  402fe8:	200000b4 	.word	0x200000b4

00402fec <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
  402fec:	f380 8811 	msr	BASEPRI, r0
  402ff0:	4770      	bx	lr
  402ff2:	bf00      	nop

00402ff4 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  402ff4:	b508      	push	{r3, lr}
	uxCriticalNesting--;
  402ff6:	4a04      	ldr	r2, [pc, #16]	; (403008 <vPortExitCritical+0x14>)
  402ff8:	6813      	ldr	r3, [r2, #0]
  402ffa:	3b01      	subs	r3, #1
  402ffc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  402ffe:	b913      	cbnz	r3, 403006 <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
  403000:	2000      	movs	r0, #0
  403002:	4b02      	ldr	r3, [pc, #8]	; (40300c <vPortExitCritical+0x18>)
  403004:	4798      	blx	r3
  403006:	bd08      	pop	{r3, pc}
  403008:	200000b4 	.word	0x200000b4
  40300c:	00402fed 	.word	0x00402fed

00403010 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
  403010:	f3ef 8009 	mrs	r0, PSP
  403014:	4b0c      	ldr	r3, [pc, #48]	; (403048 <pxCurrentTCBConst>)
  403016:	681a      	ldr	r2, [r3, #0]
  403018:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40301c:	6010      	str	r0, [r2, #0]
  40301e:	e92d 4008 	stmdb	sp!, {r3, lr}
  403022:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  403026:	f380 8811 	msr	BASEPRI, r0
  40302a:	f000 fe85 	bl	403d38 <vTaskSwitchContext>
  40302e:	f04f 0000 	mov.w	r0, #0
  403032:	f380 8811 	msr	BASEPRI, r0
  403036:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  40303a:	6819      	ldr	r1, [r3, #0]
  40303c:	6808      	ldr	r0, [r1, #0]
  40303e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  403042:	f380 8809 	msr	PSP, r0
  403046:	4770      	bx	lr

00403048 <pxCurrentTCBConst>:
  403048:	20002918 	.word	0x20002918

0040304c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
  40304c:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  40304e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403052:	4b05      	ldr	r3, [pc, #20]	; (403068 <SysTick_Handler+0x1c>)
  403054:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
  403056:	4b05      	ldr	r3, [pc, #20]	; (40306c <SysTick_Handler+0x20>)
  403058:	4798      	blx	r3
	{
		vTaskIncrementTick();
  40305a:	4b05      	ldr	r3, [pc, #20]	; (403070 <SysTick_Handler+0x24>)
  40305c:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  40305e:	2000      	movs	r0, #0
  403060:	4b04      	ldr	r3, [pc, #16]	; (403074 <SysTick_Handler+0x28>)
  403062:	4798      	blx	r3
  403064:	bd08      	pop	{r3, pc}
  403066:	bf00      	nop
  403068:	e000ed04 	.word	0xe000ed04
  40306c:	00402fc5 	.word	0x00402fc5
  403070:	00403a5d 	.word	0x00403a5d
  403074:	00402fed 	.word	0x00402fed

00403078 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
  403078:	4a03      	ldr	r2, [pc, #12]	; (403088 <vPortSetupTimerInterrupt+0x10>)
  40307a:	4b04      	ldr	r3, [pc, #16]	; (40308c <vPortSetupTimerInterrupt+0x14>)
  40307c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
  40307e:	2207      	movs	r2, #7
  403080:	3b04      	subs	r3, #4
  403082:	601a      	str	r2, [r3, #0]
  403084:	4770      	bx	lr
  403086:	bf00      	nop
  403088:	000927bf 	.word	0x000927bf
  40308c:	e000e014 	.word	0xe000e014

00403090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
  403090:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  403092:	4b09      	ldr	r3, [pc, #36]	; (4030b8 <xPortStartScheduler+0x28>)
  403094:	681a      	ldr	r2, [r3, #0]
  403096:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  40309a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  40309c:	681a      	ldr	r2, [r3, #0]
  40309e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  4030a2:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  4030a4:	4b05      	ldr	r3, [pc, #20]	; (4030bc <xPortStartScheduler+0x2c>)
  4030a6:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  4030a8:	2400      	movs	r4, #0
  4030aa:	4b05      	ldr	r3, [pc, #20]	; (4030c0 <xPortStartScheduler+0x30>)
  4030ac:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  4030ae:	4b05      	ldr	r3, [pc, #20]	; (4030c4 <xPortStartScheduler+0x34>)
  4030b0:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
  4030b2:	4620      	mov	r0, r4
  4030b4:	bd10      	pop	{r4, pc}
  4030b6:	bf00      	nop
  4030b8:	e000ed20 	.word	0xe000ed20
  4030bc:	00403079 	.word	0x00403079
  4030c0:	200000b4 	.word	0x200000b4
  4030c4:	00402f65 	.word	0x00402f65

004030c8 <prvInsertBlockIntoFreeList>:
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  4030c8:	4a12      	ldr	r2, [pc, #72]	; (403114 <prvInsertBlockIntoFreeList+0x4c>)
  4030ca:	e000      	b.n	4030ce <prvInsertBlockIntoFreeList+0x6>
  4030cc:	461a      	mov	r2, r3
  4030ce:	6813      	ldr	r3, [r2, #0]
  4030d0:	4283      	cmp	r3, r0
  4030d2:	d3fb      	bcc.n	4030cc <prvInsertBlockIntoFreeList+0x4>
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
  4030d4:	b410      	push	{r4}
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
  4030d6:	6851      	ldr	r1, [r2, #4]
  4030d8:	1854      	adds	r4, r2, r1
  4030da:	42a0      	cmp	r0, r4
  4030dc:	d103      	bne.n	4030e6 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  4030de:	6840      	ldr	r0, [r0, #4]
  4030e0:	4401      	add	r1, r0
  4030e2:	6051      	str	r1, [r2, #4]
  4030e4:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
  4030e6:	6841      	ldr	r1, [r0, #4]
  4030e8:	1844      	adds	r4, r0, r1
  4030ea:	42a3      	cmp	r3, r4
  4030ec:	d10c      	bne.n	403108 <prvInsertBlockIntoFreeList+0x40>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  4030ee:	4b0a      	ldr	r3, [pc, #40]	; (403118 <prvInsertBlockIntoFreeList+0x50>)
  4030f0:	681b      	ldr	r3, [r3, #0]
  4030f2:	429c      	cmp	r4, r3
  4030f4:	d006      	beq.n	403104 <prvInsertBlockIntoFreeList+0x3c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  4030f6:	6863      	ldr	r3, [r4, #4]
  4030f8:	4419      	add	r1, r3
  4030fa:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  4030fc:	6813      	ldr	r3, [r2, #0]
  4030fe:	681b      	ldr	r3, [r3, #0]
  403100:	6003      	str	r3, [r0, #0]
  403102:	e002      	b.n	40310a <prvInsertBlockIntoFreeList+0x42>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  403104:	6004      	str	r4, [r0, #0]
  403106:	e000      	b.n	40310a <prvInsertBlockIntoFreeList+0x42>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
  403108:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  40310a:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  40310c:	bf18      	it	ne
  40310e:	6010      	strne	r0, [r2, #0]
	}
}
  403110:	bc10      	pop	{r4}
  403112:	4770      	bx	lr
  403114:	2000285c 	.word	0x2000285c
  403118:	20002858 	.word	0x20002858

0040311c <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
  40311c:	b538      	push	{r3, r4, r5, lr}
  40311e:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
  403120:	4b2b      	ldr	r3, [pc, #172]	; (4031d0 <pvPortMalloc+0xb4>)
  403122:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  403124:	4b2b      	ldr	r3, [pc, #172]	; (4031d4 <pvPortMalloc+0xb8>)
  403126:	681b      	ldr	r3, [r3, #0]
  403128:	b99b      	cbnz	r3, 403152 <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
  40312a:	4a2b      	ldr	r2, [pc, #172]	; (4031d8 <pvPortMalloc+0xbc>)
  40312c:	4b2b      	ldr	r3, [pc, #172]	; (4031dc <pvPortMalloc+0xc0>)
  40312e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
  403130:	2100      	movs	r1, #0
  403132:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
  403134:	f641 72f0 	movw	r2, #8176	; 0x1ff0
  403138:	1898      	adds	r0, r3, r2
  40313a:	4d26      	ldr	r5, [pc, #152]	; (4031d4 <pvPortMalloc+0xb8>)
  40313c:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
  40313e:	f641 75f4 	movw	r5, #8180	; 0x1ff4
  403142:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
  403144:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
  403146:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  403148:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
  40314a:	4a25      	ldr	r2, [pc, #148]	; (4031e0 <pvPortMalloc+0xc4>)
  40314c:	6813      	ldr	r3, [r2, #0]
  40314e:	3b10      	subs	r3, #16
  403150:	6013      	str	r3, [r2, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
  403152:	2c00      	cmp	r4, #0
  403154:	d037      	beq.n	4031c6 <pvPortMalloc+0xaa>
		{
			xWantedSize += heapSTRUCT_SIZE;
  403156:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  40315a:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  40315e:	bf1c      	itt	ne
  403160:	f022 0207 	bicne.w	r2, r2, #7
  403164:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
  403166:	1e51      	subs	r1, r2, #1
  403168:	f641 73fe 	movw	r3, #8190	; 0x1ffe
  40316c:	4299      	cmp	r1, r3
  40316e:	d827      	bhi.n	4031c0 <pvPortMalloc+0xa4>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
  403170:	4919      	ldr	r1, [pc, #100]	; (4031d8 <pvPortMalloc+0xbc>)
  403172:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  403174:	e001      	b.n	40317a <pvPortMalloc+0x5e>
  403176:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
  403178:	461c      	mov	r4, r3
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  40317a:	6863      	ldr	r3, [r4, #4]
  40317c:	429a      	cmp	r2, r3
  40317e:	d902      	bls.n	403186 <pvPortMalloc+0x6a>
  403180:	6823      	ldr	r3, [r4, #0]
  403182:	2b00      	cmp	r3, #0
  403184:	d1f7      	bne.n	403176 <pvPortMalloc+0x5a>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
  403186:	4b13      	ldr	r3, [pc, #76]	; (4031d4 <pvPortMalloc+0xb8>)
  403188:	681b      	ldr	r3, [r3, #0]
  40318a:	429c      	cmp	r4, r3
  40318c:	d018      	beq.n	4031c0 <pvPortMalloc+0xa4>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  40318e:	680d      	ldr	r5, [r1, #0]
  403190:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  403192:	6823      	ldr	r3, [r4, #0]
  403194:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  403196:	6863      	ldr	r3, [r4, #4]
  403198:	1a9b      	subs	r3, r3, r2
  40319a:	2b20      	cmp	r3, #32
  40319c:	d904      	bls.n	4031a8 <pvPortMalloc+0x8c>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
  40319e:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  4031a0:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
  4031a2:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  4031a4:	4b0f      	ldr	r3, [pc, #60]	; (4031e4 <pvPortMalloc+0xc8>)
  4031a6:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
  4031a8:	4a0d      	ldr	r2, [pc, #52]	; (4031e0 <pvPortMalloc+0xc4>)
  4031aa:	6813      	ldr	r3, [r2, #0]
  4031ac:	6861      	ldr	r1, [r4, #4]
  4031ae:	1a5b      	subs	r3, r3, r1
  4031b0:	6013      	str	r3, [r2, #0]
			}
		}
	}
	xTaskResumeAll();
  4031b2:	4b0d      	ldr	r3, [pc, #52]	; (4031e8 <pvPortMalloc+0xcc>)
  4031b4:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  4031b6:	b94d      	cbnz	r5, 4031cc <pvPortMalloc+0xb0>
		{
			vApplicationMallocFailedHook();
  4031b8:	4b0c      	ldr	r3, [pc, #48]	; (4031ec <pvPortMalloc+0xd0>)
  4031ba:	4798      	blx	r3
  4031bc:	2500      	movs	r5, #0
		}
	}
	#endif

	return pvReturn;
  4031be:	e005      	b.n	4031cc <pvPortMalloc+0xb0>

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
  4031c0:	4b09      	ldr	r3, [pc, #36]	; (4031e8 <pvPortMalloc+0xcc>)
  4031c2:	4798      	blx	r3
  4031c4:	e7f8      	b.n	4031b8 <pvPortMalloc+0x9c>
  4031c6:	4b08      	ldr	r3, [pc, #32]	; (4031e8 <pvPortMalloc+0xcc>)
  4031c8:	4798      	blx	r3
  4031ca:	e7f5      	b.n	4031b8 <pvPortMalloc+0x9c>
		}
	}
	#endif

	return pvReturn;
}
  4031cc:	4628      	mov	r0, r5
  4031ce:	bd38      	pop	{r3, r4, r5, pc}
  4031d0:	00403a2d 	.word	0x00403a2d
  4031d4:	20002858 	.word	0x20002858
  4031d8:	2000285c 	.word	0x2000285c
  4031dc:	20000858 	.word	0x20000858
  4031e0:	200000b8 	.word	0x200000b8
  4031e4:	004030c9 	.word	0x004030c9
  4031e8:	00403b7d 	.word	0x00403b7d
  4031ec:	004047b5 	.word	0x004047b5

004031f0 <vPortFree>:
void vPortFree( void *pv )
{
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
  4031f0:	b180      	cbz	r0, 403214 <vPortFree+0x24>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  4031f2:	b510      	push	{r4, lr}
  4031f4:	4604      	mov	r4, r0
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
  4031f6:	4b08      	ldr	r3, [pc, #32]	; (403218 <vPortFree+0x28>)
  4031f8:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
  4031fa:	4a08      	ldr	r2, [pc, #32]	; (40321c <vPortFree+0x2c>)
  4031fc:	f854 1c0c 	ldr.w	r1, [r4, #-12]
  403200:	6813      	ldr	r3, [r2, #0]
  403202:	440b      	add	r3, r1
  403204:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
  403206:	f1a4 0010 	sub.w	r0, r4, #16
  40320a:	4b05      	ldr	r3, [pc, #20]	; (403220 <vPortFree+0x30>)
  40320c:	4798      	blx	r3
		}
		xTaskResumeAll();
  40320e:	4b05      	ldr	r3, [pc, #20]	; (403224 <vPortFree+0x34>)
  403210:	4798      	blx	r3
  403212:	bd10      	pop	{r4, pc}
  403214:	4770      	bx	lr
  403216:	bf00      	nop
  403218:	00403a2d 	.word	0x00403a2d
  40321c:	200000b8 	.word	0x200000b8
  403220:	004030c9 	.word	0x004030c9
  403224:	00403b7d 	.word	0x00403b7d

00403228 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  403228:	b510      	push	{r4, lr}
  40322a:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  40322c:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40322e:	b93b      	cbnz	r3, 403240 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  403230:	6803      	ldr	r3, [r0, #0]
  403232:	bb1b      	cbnz	r3, 40327c <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  403234:	6840      	ldr	r0, [r0, #4]
  403236:	4b13      	ldr	r3, [pc, #76]	; (403284 <prvCopyDataToQueue+0x5c>)
  403238:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  40323a:	2300      	movs	r3, #0
  40323c:	6063      	str	r3, [r4, #4]
  40323e:	e01d      	b.n	40327c <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  403240:	b96a      	cbnz	r2, 40325e <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  403242:	461a      	mov	r2, r3
  403244:	6880      	ldr	r0, [r0, #8]
  403246:	4b10      	ldr	r3, [pc, #64]	; (403288 <prvCopyDataToQueue+0x60>)
  403248:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40324a:	68a2      	ldr	r2, [r4, #8]
  40324c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40324e:	4413      	add	r3, r2
  403250:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  403252:	6862      	ldr	r2, [r4, #4]
  403254:	4293      	cmp	r3, r2
  403256:	d311      	bcc.n	40327c <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  403258:	6823      	ldr	r3, [r4, #0]
  40325a:	60a3      	str	r3, [r4, #8]
  40325c:	e00e      	b.n	40327c <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  40325e:	461a      	mov	r2, r3
  403260:	68c0      	ldr	r0, [r0, #12]
  403262:	4b09      	ldr	r3, [pc, #36]	; (403288 <prvCopyDataToQueue+0x60>)
  403264:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  403266:	6c23      	ldr	r3, [r4, #64]	; 0x40
  403268:	425b      	negs	r3, r3
  40326a:	68e2      	ldr	r2, [r4, #12]
  40326c:	441a      	add	r2, r3
  40326e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  403270:	6821      	ldr	r1, [r4, #0]
  403272:	428a      	cmp	r2, r1
  403274:	d202      	bcs.n	40327c <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  403276:	6862      	ldr	r2, [r4, #4]
  403278:	4413      	add	r3, r2
  40327a:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  40327c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40327e:	3301      	adds	r3, #1
  403280:	63a3      	str	r3, [r4, #56]	; 0x38
  403282:	bd10      	pop	{r4, pc}
  403284:	00404069 	.word	0x00404069
  403288:	00408191 	.word	0x00408191

0040328c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  40328c:	b538      	push	{r3, r4, r5, lr}
  40328e:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  403290:	6800      	ldr	r0, [r0, #0]
  403292:	b158      	cbz	r0, 4032ac <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  403294:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  403296:	68dc      	ldr	r4, [r3, #12]
  403298:	4414      	add	r4, r2
  40329a:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  40329c:	685d      	ldr	r5, [r3, #4]
  40329e:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  4032a0:	bf28      	it	cs
  4032a2:	60d8      	strcs	r0, [r3, #12]
  4032a4:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  4032a6:	68d9      	ldr	r1, [r3, #12]
  4032a8:	4b01      	ldr	r3, [pc, #4]	; (4032b0 <prvCopyDataFromQueue+0x24>)
  4032aa:	4798      	blx	r3
  4032ac:	bd38      	pop	{r3, r4, r5, pc}
  4032ae:	bf00      	nop
  4032b0:	00408191 	.word	0x00408191

004032b4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  4032b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4032b6:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  4032b8:	4b1e      	ldr	r3, [pc, #120]	; (403334 <prvUnlockQueue+0x80>)
  4032ba:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4032bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4032be:	2b00      	cmp	r3, #0
  4032c0:	dd13      	ble.n	4032ea <prvUnlockQueue+0x36>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4032c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4032c4:	b91b      	cbnz	r3, 4032ce <prvUnlockQueue+0x1a>
  4032c6:	e010      	b.n	4032ea <prvUnlockQueue+0x36>
  4032c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4032ca:	b923      	cbnz	r3, 4032d6 <prvUnlockQueue+0x22>
  4032cc:	e00d      	b.n	4032ea <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4032ce:	f104 0624 	add.w	r6, r4, #36	; 0x24
  4032d2:	4d19      	ldr	r5, [pc, #100]	; (403338 <prvUnlockQueue+0x84>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  4032d4:	4f19      	ldr	r7, [pc, #100]	; (40333c <prvUnlockQueue+0x88>)
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4032d6:	4630      	mov	r0, r6
  4032d8:	47a8      	blx	r5
  4032da:	b100      	cbz	r0, 4032de <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  4032dc:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
  4032de:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4032e0:	3b01      	subs	r3, #1
  4032e2:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4032e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4032e6:	2b00      	cmp	r3, #0
  4032e8:	dcee      	bgt.n	4032c8 <prvUnlockQueue+0x14>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  4032ea:	f04f 33ff 	mov.w	r3, #4294967295
  4032ee:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  4032f0:	4b13      	ldr	r3, [pc, #76]	; (403340 <prvUnlockQueue+0x8c>)
  4032f2:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  4032f4:	4b0f      	ldr	r3, [pc, #60]	; (403334 <prvUnlockQueue+0x80>)
  4032f6:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4032f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4032fa:	2b00      	cmp	r3, #0
  4032fc:	dd13      	ble.n	403326 <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4032fe:	6923      	ldr	r3, [r4, #16]
  403300:	b91b      	cbnz	r3, 40330a <prvUnlockQueue+0x56>
  403302:	e010      	b.n	403326 <prvUnlockQueue+0x72>
  403304:	6923      	ldr	r3, [r4, #16]
  403306:	b923      	cbnz	r3, 403312 <prvUnlockQueue+0x5e>
  403308:	e00d      	b.n	403326 <prvUnlockQueue+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40330a:	f104 0610 	add.w	r6, r4, #16
  40330e:	4d0a      	ldr	r5, [pc, #40]	; (403338 <prvUnlockQueue+0x84>)
				{
					vTaskMissedYield();
  403310:	4f0a      	ldr	r7, [pc, #40]	; (40333c <prvUnlockQueue+0x88>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  403312:	4630      	mov	r0, r6
  403314:	47a8      	blx	r5
  403316:	b100      	cbz	r0, 40331a <prvUnlockQueue+0x66>
				{
					vTaskMissedYield();
  403318:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
  40331a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40331c:	3b01      	subs	r3, #1
  40331e:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  403320:	6c63      	ldr	r3, [r4, #68]	; 0x44
  403322:	2b00      	cmp	r3, #0
  403324:	dcee      	bgt.n	403304 <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  403326:	f04f 33ff 	mov.w	r3, #4294967295
  40332a:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  40332c:	4b04      	ldr	r3, [pc, #16]	; (403340 <prvUnlockQueue+0x8c>)
  40332e:	4798      	blx	r3
  403330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403332:	bf00      	nop
  403334:	00402fd5 	.word	0x00402fd5
  403338:	00403e81 	.word	0x00403e81
  40333c:	00403fb1 	.word	0x00403fb1
  403340:	00402ff5 	.word	0x00402ff5

00403344 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
  403344:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  403346:	b918      	cbnz	r0, 403350 <xQueueGenericReset+0xc>
  403348:	4b17      	ldr	r3, [pc, #92]	; (4033a8 <xQueueGenericReset+0x64>)
  40334a:	4798      	blx	r3
  40334c:	bf00      	nop
  40334e:	e7fd      	b.n	40334c <xQueueGenericReset+0x8>
  403350:	460d      	mov	r5, r1
  403352:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
  403354:	4b15      	ldr	r3, [pc, #84]	; (4033ac <xQueueGenericReset+0x68>)
  403356:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  403358:	6822      	ldr	r2, [r4, #0]
  40335a:	6c21      	ldr	r1, [r4, #64]	; 0x40
  40335c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40335e:	fb03 f301 	mul.w	r3, r3, r1
  403362:	18d0      	adds	r0, r2, r3
  403364:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  403366:	2000      	movs	r0, #0
  403368:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  40336a:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
  40336c:	1a5b      	subs	r3, r3, r1
  40336e:	4413      	add	r3, r2
  403370:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  403372:	f04f 33ff 	mov.w	r3, #4294967295
  403376:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  403378:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  40337a:	b955      	cbnz	r5, 403392 <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40337c:	6923      	ldr	r3, [r4, #16]
  40337e:	b17b      	cbz	r3, 4033a0 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  403380:	f104 0010 	add.w	r0, r4, #16
  403384:	4b0a      	ldr	r3, [pc, #40]	; (4033b0 <xQueueGenericReset+0x6c>)
  403386:	4798      	blx	r3
  403388:	2801      	cmp	r0, #1
  40338a:	d109      	bne.n	4033a0 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
  40338c:	4b09      	ldr	r3, [pc, #36]	; (4033b4 <xQueueGenericReset+0x70>)
  40338e:	4798      	blx	r3
  403390:	e006      	b.n	4033a0 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  403392:	f104 0010 	add.w	r0, r4, #16
  403396:	4d08      	ldr	r5, [pc, #32]	; (4033b8 <xQueueGenericReset+0x74>)
  403398:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  40339a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40339e:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
  4033a0:	4b06      	ldr	r3, [pc, #24]	; (4033bc <xQueueGenericReset+0x78>)
  4033a2:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
  4033a4:	2001      	movs	r0, #1
  4033a6:	bd38      	pop	{r3, r4, r5, pc}
  4033a8:	00402fc5 	.word	0x00402fc5
  4033ac:	00402fd5 	.word	0x00402fd5
  4033b0:	00403e81 	.word	0x00403e81
  4033b4:	00402fb5 	.word	0x00402fb5
  4033b8:	00402ec5 	.word	0x00402ec5
  4033bc:	00402ff5 	.word	0x00402ff5

004033c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
  4033c0:	b570      	push	{r4, r5, r6, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  4033c2:	b198      	cbz	r0, 4033ec <xQueueGenericCreate+0x2c>
  4033c4:	460d      	mov	r5, r1
  4033c6:	4606      	mov	r6, r0
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  4033c8:	204c      	movs	r0, #76	; 0x4c
  4033ca:	4b0e      	ldr	r3, [pc, #56]	; (403404 <xQueueGenericCreate+0x44>)
  4033cc:	4798      	blx	r3
		if( pxNewQueue != NULL )
  4033ce:	4604      	mov	r4, r0
  4033d0:	b160      	cbz	r0, 4033ec <xQueueGenericCreate+0x2c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  4033d2:	fb05 f006 	mul.w	r0, r5, r6
  4033d6:	3001      	adds	r0, #1
  4033d8:	4b0a      	ldr	r3, [pc, #40]	; (403404 <xQueueGenericCreate+0x44>)
  4033da:	4798      	blx	r3
  4033dc:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
  4033de:	b940      	cbnz	r0, 4033f2 <xQueueGenericCreate+0x32>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
  4033e0:	4620      	mov	r0, r4
  4033e2:	4b09      	ldr	r3, [pc, #36]	; (403408 <xQueueGenericCreate+0x48>)
  4033e4:	4798      	blx	r3
  4033e6:	e001      	b.n	4033ec <xQueueGenericCreate+0x2c>
			}
		}
	}

	configASSERT( xReturn );
  4033e8:	bf00      	nop
  4033ea:	e7fd      	b.n	4033e8 <xQueueGenericCreate+0x28>
  4033ec:	4b07      	ldr	r3, [pc, #28]	; (40340c <xQueueGenericCreate+0x4c>)
  4033ee:	4798      	blx	r3
  4033f0:	e7fa      	b.n	4033e8 <xQueueGenericCreate+0x28>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
  4033f2:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  4033f4:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
  4033f6:	2101      	movs	r1, #1
  4033f8:	4620      	mov	r0, r4
  4033fa:	4b05      	ldr	r3, [pc, #20]	; (403410 <xQueueGenericCreate+0x50>)
  4033fc:	4798      	blx	r3
	}

	configASSERT( xReturn );

	return xReturn;
}
  4033fe:	4620      	mov	r0, r4
  403400:	bd70      	pop	{r4, r5, r6, pc}
  403402:	bf00      	nop
  403404:	0040311d 	.word	0x0040311d
  403408:	004031f1 	.word	0x004031f1
  40340c:	00402fc5 	.word	0x00402fc5
  403410:	00403345 	.word	0x00403345

00403414 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  403414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403418:	b085      	sub	sp, #20
  40341a:	9201      	str	r2, [sp, #4]
  40341c:	9300      	str	r3, [sp, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
  40341e:	b918      	cbnz	r0, 403428 <xQueueGenericSend+0x14>
  403420:	4b38      	ldr	r3, [pc, #224]	; (403504 <xQueueGenericSend+0xf0>)
  403422:	4798      	blx	r3
  403424:	bf00      	nop
  403426:	e7fd      	b.n	403424 <xQueueGenericSend+0x10>
  403428:	468a      	mov	sl, r1
  40342a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  40342c:	b929      	cbnz	r1, 40343a <xQueueGenericSend+0x26>
  40342e:	6c03      	ldr	r3, [r0, #64]	; 0x40
  403430:	b12b      	cbz	r3, 40343e <xQueueGenericSend+0x2a>
  403432:	4b34      	ldr	r3, [pc, #208]	; (403504 <xQueueGenericSend+0xf0>)
  403434:	4798      	blx	r3
  403436:	bf00      	nop
  403438:	e7fd      	b.n	403436 <xQueueGenericSend+0x22>
  40343a:	2700      	movs	r7, #0
  40343c:	e000      	b.n	403440 <xQueueGenericSend+0x2c>
  40343e:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  403440:	4e31      	ldr	r6, [pc, #196]	; (403508 <xQueueGenericSend+0xf4>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  403442:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 403530 <xQueueGenericSend+0x11c>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
  403446:	4d31      	ldr	r5, [pc, #196]	; (40350c <xQueueGenericSend+0xf8>)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  403448:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  40344a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40344c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40344e:	429a      	cmp	r2, r3
  403450:	d212      	bcs.n	403478 <xQueueGenericSend+0x64>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  403452:	9a00      	ldr	r2, [sp, #0]
  403454:	4651      	mov	r1, sl
  403456:	4620      	mov	r0, r4
  403458:	4b2d      	ldr	r3, [pc, #180]	; (403510 <xQueueGenericSend+0xfc>)
  40345a:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40345c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40345e:	b13b      	cbz	r3, 403470 <xQueueGenericSend+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  403460:	f104 0024 	add.w	r0, r4, #36	; 0x24
  403464:	4b2b      	ldr	r3, [pc, #172]	; (403514 <xQueueGenericSend+0x100>)
  403466:	4798      	blx	r3
  403468:	2801      	cmp	r0, #1
  40346a:	d101      	bne.n	403470 <xQueueGenericSend+0x5c>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  40346c:	4b2a      	ldr	r3, [pc, #168]	; (403518 <xQueueGenericSend+0x104>)
  40346e:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  403470:	4b26      	ldr	r3, [pc, #152]	; (40350c <xQueueGenericSend+0xf8>)
  403472:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  403474:	2001      	movs	r0, #1
  403476:	e042      	b.n	4034fe <xQueueGenericSend+0xea>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  403478:	9b01      	ldr	r3, [sp, #4]
  40347a:	b91b      	cbnz	r3, 403484 <xQueueGenericSend+0x70>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  40347c:	4b23      	ldr	r3, [pc, #140]	; (40350c <xQueueGenericSend+0xf8>)
  40347e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  403480:	2000      	movs	r0, #0
  403482:	e03c      	b.n	4034fe <xQueueGenericSend+0xea>
				}
				else if( xEntryTimeSet == pdFALSE )
  403484:	b917      	cbnz	r7, 40348c <xQueueGenericSend+0x78>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  403486:	a802      	add	r0, sp, #8
  403488:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
  40348a:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
  40348c:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  40348e:	4b23      	ldr	r3, [pc, #140]	; (40351c <xQueueGenericSend+0x108>)
  403490:	4798      	blx	r3
		prvLockQueue( pxQueue );
  403492:	47b0      	blx	r6
  403494:	6c63      	ldr	r3, [r4, #68]	; 0x44
  403496:	f1b3 3fff 	cmp.w	r3, #4294967295
  40349a:	bf04      	itt	eq
  40349c:	2300      	moveq	r3, #0
  40349e:	6463      	streq	r3, [r4, #68]	; 0x44
  4034a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4034a2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4034a6:	bf04      	itt	eq
  4034a8:	2300      	moveq	r3, #0
  4034aa:	64a3      	streq	r3, [r4, #72]	; 0x48
  4034ac:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4034ae:	a901      	add	r1, sp, #4
  4034b0:	a802      	add	r0, sp, #8
  4034b2:	4b1b      	ldr	r3, [pc, #108]	; (403520 <xQueueGenericSend+0x10c>)
  4034b4:	4798      	blx	r3
  4034b6:	b9e0      	cbnz	r0, 4034f2 <xQueueGenericSend+0xde>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  4034b8:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  4034ba:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
  4034be:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  4034c2:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  4034c4:	45c1      	cmp	r9, r8
  4034c6:	d10e      	bne.n	4034e6 <xQueueGenericSend+0xd2>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4034c8:	9901      	ldr	r1, [sp, #4]
  4034ca:	f104 0010 	add.w	r0, r4, #16
  4034ce:	4b15      	ldr	r3, [pc, #84]	; (403524 <xQueueGenericSend+0x110>)
  4034d0:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  4034d2:	4620      	mov	r0, r4
  4034d4:	4b14      	ldr	r3, [pc, #80]	; (403528 <xQueueGenericSend+0x114>)
  4034d6:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  4034d8:	4b14      	ldr	r3, [pc, #80]	; (40352c <xQueueGenericSend+0x118>)
  4034da:	4798      	blx	r3
  4034dc:	2800      	cmp	r0, #0
  4034de:	d1b3      	bne.n	403448 <xQueueGenericSend+0x34>
				{
					portYIELD_WITHIN_API();
  4034e0:	4b0d      	ldr	r3, [pc, #52]	; (403518 <xQueueGenericSend+0x104>)
  4034e2:	4798      	blx	r3
  4034e4:	e7b0      	b.n	403448 <xQueueGenericSend+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  4034e6:	4620      	mov	r0, r4
  4034e8:	4b0f      	ldr	r3, [pc, #60]	; (403528 <xQueueGenericSend+0x114>)
  4034ea:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4034ec:	4b0f      	ldr	r3, [pc, #60]	; (40352c <xQueueGenericSend+0x118>)
  4034ee:	4798      	blx	r3
  4034f0:	e7aa      	b.n	403448 <xQueueGenericSend+0x34>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  4034f2:	4620      	mov	r0, r4
  4034f4:	4b0c      	ldr	r3, [pc, #48]	; (403528 <xQueueGenericSend+0x114>)
  4034f6:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4034f8:	4b0c      	ldr	r3, [pc, #48]	; (40352c <xQueueGenericSend+0x118>)
  4034fa:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  4034fc:	2000      	movs	r0, #0
		}
	}
}
  4034fe:	b005      	add	sp, #20
  403500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403504:	00402fc5 	.word	0x00402fc5
  403508:	00402fd5 	.word	0x00402fd5
  40350c:	00402ff5 	.word	0x00402ff5
  403510:	00403229 	.word	0x00403229
  403514:	00403e81 	.word	0x00403e81
  403518:	00402fb5 	.word	0x00402fb5
  40351c:	00403a2d 	.word	0x00403a2d
  403520:	00403f2d 	.word	0x00403f2d
  403524:	00403ddd 	.word	0x00403ddd
  403528:	004032b5 	.word	0x004032b5
  40352c:	00403b7d 	.word	0x00403b7d
  403530:	00403f05 	.word	0x00403f05

00403534 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
  403534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
  403538:	b918      	cbnz	r0, 403542 <xQueueGenericSendFromISR+0xe>
  40353a:	4b1e      	ldr	r3, [pc, #120]	; (4035b4 <xQueueGenericSendFromISR+0x80>)
  40353c:	4798      	blx	r3
  40353e:	bf00      	nop
  403540:	e7fd      	b.n	40353e <xQueueGenericSendFromISR+0xa>
  403542:	460e      	mov	r6, r1
  403544:	4615      	mov	r5, r2
  403546:	4698      	mov	r8, r3
  403548:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  40354a:	b929      	cbnz	r1, 403558 <xQueueGenericSendFromISR+0x24>
  40354c:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40354e:	b11b      	cbz	r3, 403558 <xQueueGenericSendFromISR+0x24>
  403550:	4b18      	ldr	r3, [pc, #96]	; (4035b4 <xQueueGenericSendFromISR+0x80>)
  403552:	4798      	blx	r3
  403554:	bf00      	nop
  403556:	e7fd      	b.n	403554 <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  403558:	4b16      	ldr	r3, [pc, #88]	; (4035b4 <xQueueGenericSendFromISR+0x80>)
  40355a:	4798      	blx	r3
  40355c:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  40355e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403560:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  403562:	429a      	cmp	r2, r3
  403564:	d218      	bcs.n	403598 <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  403566:	4642      	mov	r2, r8
  403568:	4631      	mov	r1, r6
  40356a:	4620      	mov	r0, r4
  40356c:	4b12      	ldr	r3, [pc, #72]	; (4035b8 <xQueueGenericSendFromISR+0x84>)
  40356e:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  403570:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403572:	f1b3 3fff 	cmp.w	r3, #4294967295
  403576:	d10a      	bne.n	40358e <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  403578:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40357a:	b17b      	cbz	r3, 40359c <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40357c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  403580:	4b0e      	ldr	r3, [pc, #56]	; (4035bc <xQueueGenericSendFromISR+0x88>)
  403582:	4798      	blx	r3
  403584:	b160      	cbz	r0, 4035a0 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
  403586:	b16d      	cbz	r5, 4035a4 <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
  403588:	2401      	movs	r4, #1
  40358a:	602c      	str	r4, [r5, #0]
  40358c:	e00b      	b.n	4035a6 <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  40358e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403590:	3301      	adds	r3, #1
  403592:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  403594:	2401      	movs	r4, #1
  403596:	e006      	b.n	4035a6 <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  403598:	2400      	movs	r4, #0
  40359a:	e004      	b.n	4035a6 <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  40359c:	2401      	movs	r4, #1
  40359e:	e002      	b.n	4035a6 <xQueueGenericSendFromISR+0x72>
  4035a0:	2401      	movs	r4, #1
  4035a2:	e000      	b.n	4035a6 <xQueueGenericSendFromISR+0x72>
  4035a4:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  4035a6:	4638      	mov	r0, r7
  4035a8:	4b05      	ldr	r3, [pc, #20]	; (4035c0 <xQueueGenericSendFromISR+0x8c>)
  4035aa:	4798      	blx	r3

	return xReturn;
}
  4035ac:	4620      	mov	r0, r4
  4035ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4035b2:	bf00      	nop
  4035b4:	00402fc5 	.word	0x00402fc5
  4035b8:	00403229 	.word	0x00403229
  4035bc:	00403e81 	.word	0x00403e81
  4035c0:	00402fed 	.word	0x00402fed

004035c4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  4035c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4035c8:	b085      	sub	sp, #20
  4035ca:	9201      	str	r2, [sp, #4]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
  4035cc:	b918      	cbnz	r0, 4035d6 <xQueueGenericReceive+0x12>
  4035ce:	4b46      	ldr	r3, [pc, #280]	; (4036e8 <xQueueGenericReceive+0x124>)
  4035d0:	4798      	blx	r3
  4035d2:	bf00      	nop
  4035d4:	e7fd      	b.n	4035d2 <xQueueGenericReceive+0xe>
  4035d6:	4689      	mov	r9, r1
  4035d8:	469a      	mov	sl, r3
  4035da:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  4035dc:	b929      	cbnz	r1, 4035ea <xQueueGenericReceive+0x26>
  4035de:	6c03      	ldr	r3, [r0, #64]	; 0x40
  4035e0:	b12b      	cbz	r3, 4035ee <xQueueGenericReceive+0x2a>
  4035e2:	4b41      	ldr	r3, [pc, #260]	; (4036e8 <xQueueGenericReceive+0x124>)
  4035e4:	4798      	blx	r3
  4035e6:	bf00      	nop
  4035e8:	e7fd      	b.n	4035e6 <xQueueGenericReceive+0x22>
  4035ea:	2700      	movs	r7, #0
  4035ec:	e000      	b.n	4035f0 <xQueueGenericReceive+0x2c>
  4035ee:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  4035f0:	4e3e      	ldr	r6, [pc, #248]	; (4036ec <xQueueGenericReceive+0x128>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4035f2:	f8df b128 	ldr.w	fp, [pc, #296]	; 40371c <xQueueGenericReceive+0x158>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
  4035f6:	4d3e      	ldr	r5, [pc, #248]	; (4036f0 <xQueueGenericReceive+0x12c>)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  4035f8:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  4035fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4035fc:	b343      	cbz	r3, 403650 <xQueueGenericReceive+0x8c>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  4035fe:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  403600:	4649      	mov	r1, r9
  403602:	4620      	mov	r0, r4
  403604:	4b3b      	ldr	r3, [pc, #236]	; (4036f4 <xQueueGenericReceive+0x130>)
  403606:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  403608:	f1ba 0f00 	cmp.w	sl, #0
  40360c:	d112      	bne.n	403634 <xQueueGenericReceive+0x70>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  40360e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403610:	3b01      	subs	r3, #1
  403612:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  403614:	6823      	ldr	r3, [r4, #0]
  403616:	b913      	cbnz	r3, 40361e <xQueueGenericReceive+0x5a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  403618:	4b37      	ldr	r3, [pc, #220]	; (4036f8 <xQueueGenericReceive+0x134>)
  40361a:	4798      	blx	r3
  40361c:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40361e:	6923      	ldr	r3, [r4, #16]
  403620:	b193      	cbz	r3, 403648 <xQueueGenericReceive+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  403622:	f104 0010 	add.w	r0, r4, #16
  403626:	4b35      	ldr	r3, [pc, #212]	; (4036fc <xQueueGenericReceive+0x138>)
  403628:	4798      	blx	r3
  40362a:	2801      	cmp	r0, #1
  40362c:	d10c      	bne.n	403648 <xQueueGenericReceive+0x84>
						{
							portYIELD_WITHIN_API();
  40362e:	4b34      	ldr	r3, [pc, #208]	; (403700 <xQueueGenericReceive+0x13c>)
  403630:	4798      	blx	r3
  403632:	e009      	b.n	403648 <xQueueGenericReceive+0x84>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  403634:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  403636:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403638:	b133      	cbz	r3, 403648 <xQueueGenericReceive+0x84>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40363a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40363e:	4b2f      	ldr	r3, [pc, #188]	; (4036fc <xQueueGenericReceive+0x138>)
  403640:	4798      	blx	r3
  403642:	b108      	cbz	r0, 403648 <xQueueGenericReceive+0x84>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  403644:	4b2e      	ldr	r3, [pc, #184]	; (403700 <xQueueGenericReceive+0x13c>)
  403646:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
  403648:	4b29      	ldr	r3, [pc, #164]	; (4036f0 <xQueueGenericReceive+0x12c>)
  40364a:	4798      	blx	r3
				return pdPASS;
  40364c:	2001      	movs	r0, #1
  40364e:	e048      	b.n	4036e2 <xQueueGenericReceive+0x11e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  403650:	9b01      	ldr	r3, [sp, #4]
  403652:	b91b      	cbnz	r3, 40365c <xQueueGenericReceive+0x98>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  403654:	4b26      	ldr	r3, [pc, #152]	; (4036f0 <xQueueGenericReceive+0x12c>)
  403656:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  403658:	2000      	movs	r0, #0
  40365a:	e042      	b.n	4036e2 <xQueueGenericReceive+0x11e>
				}
				else if( xEntryTimeSet == pdFALSE )
  40365c:	b917      	cbnz	r7, 403664 <xQueueGenericReceive+0xa0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  40365e:	a802      	add	r0, sp, #8
  403660:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
  403662:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
  403664:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  403666:	4b27      	ldr	r3, [pc, #156]	; (403704 <xQueueGenericReceive+0x140>)
  403668:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40366a:	47b0      	blx	r6
  40366c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40366e:	f1b3 3fff 	cmp.w	r3, #4294967295
  403672:	bf04      	itt	eq
  403674:	2300      	moveq	r3, #0
  403676:	6463      	streq	r3, [r4, #68]	; 0x44
  403678:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40367a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40367e:	bf04      	itt	eq
  403680:	2300      	moveq	r3, #0
  403682:	64a3      	streq	r3, [r4, #72]	; 0x48
  403684:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  403686:	a901      	add	r1, sp, #4
  403688:	a802      	add	r0, sp, #8
  40368a:	4b1f      	ldr	r3, [pc, #124]	; (403708 <xQueueGenericReceive+0x144>)
  40368c:	4798      	blx	r3
  40368e:	bb10      	cbnz	r0, 4036d6 <xQueueGenericReceive+0x112>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  403690:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  403692:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  403696:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  403698:	f1b8 0f00 	cmp.w	r8, #0
  40369c:	d115      	bne.n	4036ca <xQueueGenericReceive+0x106>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40369e:	6823      	ldr	r3, [r4, #0]
  4036a0:	b923      	cbnz	r3, 4036ac <xQueueGenericReceive+0xe8>
					{
						portENTER_CRITICAL();
  4036a2:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  4036a4:	6860      	ldr	r0, [r4, #4]
  4036a6:	4b19      	ldr	r3, [pc, #100]	; (40370c <xQueueGenericReceive+0x148>)
  4036a8:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  4036aa:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4036ac:	9901      	ldr	r1, [sp, #4]
  4036ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4036b2:	4b17      	ldr	r3, [pc, #92]	; (403710 <xQueueGenericReceive+0x14c>)
  4036b4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4036b6:	4620      	mov	r0, r4
  4036b8:	4b16      	ldr	r3, [pc, #88]	; (403714 <xQueueGenericReceive+0x150>)
  4036ba:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4036bc:	4b16      	ldr	r3, [pc, #88]	; (403718 <xQueueGenericReceive+0x154>)
  4036be:	4798      	blx	r3
  4036c0:	2800      	cmp	r0, #0
  4036c2:	d199      	bne.n	4035f8 <xQueueGenericReceive+0x34>
				{
					portYIELD_WITHIN_API();
  4036c4:	4b0e      	ldr	r3, [pc, #56]	; (403700 <xQueueGenericReceive+0x13c>)
  4036c6:	4798      	blx	r3
  4036c8:	e796      	b.n	4035f8 <xQueueGenericReceive+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  4036ca:	4620      	mov	r0, r4
  4036cc:	4b11      	ldr	r3, [pc, #68]	; (403714 <xQueueGenericReceive+0x150>)
  4036ce:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4036d0:	4b11      	ldr	r3, [pc, #68]	; (403718 <xQueueGenericReceive+0x154>)
  4036d2:	4798      	blx	r3
  4036d4:	e790      	b.n	4035f8 <xQueueGenericReceive+0x34>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  4036d6:	4620      	mov	r0, r4
  4036d8:	4b0e      	ldr	r3, [pc, #56]	; (403714 <xQueueGenericReceive+0x150>)
  4036da:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4036dc:	4b0e      	ldr	r3, [pc, #56]	; (403718 <xQueueGenericReceive+0x154>)
  4036de:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  4036e0:	2000      	movs	r0, #0
		}
	}
}
  4036e2:	b005      	add	sp, #20
  4036e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4036e8:	00402fc5 	.word	0x00402fc5
  4036ec:	00402fd5 	.word	0x00402fd5
  4036f0:	00402ff5 	.word	0x00402ff5
  4036f4:	0040328d 	.word	0x0040328d
  4036f8:	00403fbd 	.word	0x00403fbd
  4036fc:	00403e81 	.word	0x00403e81
  403700:	00402fb5 	.word	0x00402fb5
  403704:	00403a2d 	.word	0x00403a2d
  403708:	00403f2d 	.word	0x00403f2d
  40370c:	00403fe9 	.word	0x00403fe9
  403710:	00403ddd 	.word	0x00403ddd
  403714:	004032b5 	.word	0x004032b5
  403718:	00403b7d 	.word	0x00403b7d
  40371c:	00403f05 	.word	0x00403f05

00403720 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  403720:	b538      	push	{r3, r4, r5, lr}
  403722:	4604      	mov	r4, r0
  403724:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  403726:	4b0d      	ldr	r3, [pc, #52]	; (40375c <vQueueWaitForMessageRestricted+0x3c>)
  403728:	4798      	blx	r3
  40372a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40372c:	f1b3 3fff 	cmp.w	r3, #4294967295
  403730:	bf04      	itt	eq
  403732:	2300      	moveq	r3, #0
  403734:	6463      	streq	r3, [r4, #68]	; 0x44
  403736:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403738:	f1b3 3fff 	cmp.w	r3, #4294967295
  40373c:	bf04      	itt	eq
  40373e:	2300      	moveq	r3, #0
  403740:	64a3      	streq	r3, [r4, #72]	; 0x48
  403742:	4b07      	ldr	r3, [pc, #28]	; (403760 <vQueueWaitForMessageRestricted+0x40>)
  403744:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  403746:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403748:	b923      	cbnz	r3, 403754 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40374a:	4629      	mov	r1, r5
  40374c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  403750:	4b04      	ldr	r3, [pc, #16]	; (403764 <vQueueWaitForMessageRestricted+0x44>)
  403752:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
  403754:	4620      	mov	r0, r4
  403756:	4b04      	ldr	r3, [pc, #16]	; (403768 <vQueueWaitForMessageRestricted+0x48>)
  403758:	4798      	blx	r3
  40375a:	bd38      	pop	{r3, r4, r5, pc}
  40375c:	00402fd5 	.word	0x00402fd5
  403760:	00402ff5 	.word	0x00402ff5
  403764:	00403e3d 	.word	0x00403e3d
  403768:	004032b5 	.word	0x004032b5

0040376c <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  40376c:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  40376e:	4b0f      	ldr	r3, [pc, #60]	; (4037ac <prvAddCurrentTaskToDelayedList+0x40>)
  403770:	681b      	ldr	r3, [r3, #0]
  403772:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
  403774:	4b0e      	ldr	r3, [pc, #56]	; (4037b0 <prvAddCurrentTaskToDelayedList+0x44>)
  403776:	681b      	ldr	r3, [r3, #0]
  403778:	4298      	cmp	r0, r3
  40377a:	d207      	bcs.n	40378c <prvAddCurrentTaskToDelayedList+0x20>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  40377c:	4b0d      	ldr	r3, [pc, #52]	; (4037b4 <prvAddCurrentTaskToDelayedList+0x48>)
  40377e:	6818      	ldr	r0, [r3, #0]
  403780:	4b0a      	ldr	r3, [pc, #40]	; (4037ac <prvAddCurrentTaskToDelayedList+0x40>)
  403782:	6819      	ldr	r1, [r3, #0]
  403784:	3104      	adds	r1, #4
  403786:	4b0c      	ldr	r3, [pc, #48]	; (4037b8 <prvAddCurrentTaskToDelayedList+0x4c>)
  403788:	4798      	blx	r3
  40378a:	bd10      	pop	{r4, pc}
  40378c:	4604      	mov	r4, r0
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  40378e:	4b0b      	ldr	r3, [pc, #44]	; (4037bc <prvAddCurrentTaskToDelayedList+0x50>)
  403790:	6818      	ldr	r0, [r3, #0]
  403792:	4b06      	ldr	r3, [pc, #24]	; (4037ac <prvAddCurrentTaskToDelayedList+0x40>)
  403794:	6819      	ldr	r1, [r3, #0]
  403796:	3104      	adds	r1, #4
  403798:	4b07      	ldr	r3, [pc, #28]	; (4037b8 <prvAddCurrentTaskToDelayedList+0x4c>)
  40379a:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  40379c:	4b08      	ldr	r3, [pc, #32]	; (4037c0 <prvAddCurrentTaskToDelayedList+0x54>)
  40379e:	681b      	ldr	r3, [r3, #0]
  4037a0:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
  4037a2:	bf3c      	itt	cc
  4037a4:	4b06      	ldrcc	r3, [pc, #24]	; (4037c0 <prvAddCurrentTaskToDelayedList+0x54>)
  4037a6:	601c      	strcc	r4, [r3, #0]
  4037a8:	bd10      	pop	{r4, pc}
  4037aa:	bf00      	nop
  4037ac:	20002918 	.word	0x20002918
  4037b0:	20002934 	.word	0x20002934
  4037b4:	20002938 	.word	0x20002938
  4037b8:	00402f01 	.word	0x00402f01
  4037bc:	2000287c 	.word	0x2000287c
  4037c0:	200000bc 	.word	0x200000bc

004037c4 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  4037c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4037c8:	b083      	sub	sp, #12
  4037ca:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4037cc:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  4037d0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
  4037d2:	9001      	str	r0, [sp, #4]
  4037d4:	b918      	cbnz	r0, 4037de <xTaskGenericCreate+0x1a>
  4037d6:	4b61      	ldr	r3, [pc, #388]	; (40395c <xTaskGenericCreate+0x198>)
  4037d8:	4798      	blx	r3
  4037da:	bf00      	nop
  4037dc:	e7fd      	b.n	4037da <xTaskGenericCreate+0x16>
  4037de:	4689      	mov	r9, r1
  4037e0:	4615      	mov	r5, r2
  4037e2:	469b      	mov	fp, r3
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
  4037e4:	2f04      	cmp	r7, #4
  4037e6:	d903      	bls.n	4037f0 <xTaskGenericCreate+0x2c>
  4037e8:	4b5c      	ldr	r3, [pc, #368]	; (40395c <xTaskGenericCreate+0x198>)
  4037ea:	4798      	blx	r3
  4037ec:	bf00      	nop
  4037ee:	e7fd      	b.n	4037ec <xTaskGenericCreate+0x28>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  4037f0:	2044      	movs	r0, #68	; 0x44
  4037f2:	4b5b      	ldr	r3, [pc, #364]	; (403960 <xTaskGenericCreate+0x19c>)
  4037f4:	4798      	blx	r3

	if( pxNewTCB != NULL )
  4037f6:	4604      	mov	r4, r0
  4037f8:	2800      	cmp	r0, #0
  4037fa:	f000 80aa 	beq.w	403952 <xTaskGenericCreate+0x18e>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  4037fe:	2e00      	cmp	r6, #0
  403800:	f040 80a4 	bne.w	40394c <xTaskGenericCreate+0x188>
  403804:	00a8      	lsls	r0, r5, #2
  403806:	4b56      	ldr	r3, [pc, #344]	; (403960 <xTaskGenericCreate+0x19c>)
  403808:	4798      	blx	r3
  40380a:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  40380c:	b918      	cbnz	r0, 403816 <xTaskGenericCreate+0x52>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  40380e:	4620      	mov	r0, r4
  403810:	4b54      	ldr	r3, [pc, #336]	; (403964 <xTaskGenericCreate+0x1a0>)
  403812:	4798      	blx	r3
  403814:	e09d      	b.n	403952 <xTaskGenericCreate+0x18e>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
  403816:	00aa      	lsls	r2, r5, #2
  403818:	21a5      	movs	r1, #165	; 0xa5
  40381a:	4b53      	ldr	r3, [pc, #332]	; (403968 <xTaskGenericCreate+0x1a4>)
  40381c:	4798      	blx	r3
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
  40381e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
  403822:	3d01      	subs	r5, #1
  403824:	6b23      	ldr	r3, [r4, #48]	; 0x30
  403826:	eb03 0385 	add.w	r3, r3, r5, lsl #2
  40382a:	f023 0507 	bic.w	r5, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  40382e:	220c      	movs	r2, #12
  403830:	4649      	mov	r1, r9
  403832:	f104 0034 	add.w	r0, r4, #52	; 0x34
  403836:	4b4d      	ldr	r3, [pc, #308]	; (40396c <xTaskGenericCreate+0x1a8>)
  403838:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  40383a:	2300      	movs	r3, #0
  40383c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  403840:	463e      	mov	r6, r7
  403842:	2f04      	cmp	r7, #4
  403844:	bf28      	it	cs
  403846:	2604      	movcs	r6, #4
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
  403848:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  40384a:	6426      	str	r6, [r4, #64]	; 0x40
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  40384c:	f104 0904 	add.w	r9, r4, #4
  403850:	4648      	mov	r0, r9
  403852:	f8df a168 	ldr.w	sl, [pc, #360]	; 4039bc <xTaskGenericCreate+0x1f8>
  403856:	47d0      	blx	sl
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  403858:	f104 0018 	add.w	r0, r4, #24
  40385c:	47d0      	blx	sl

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  40385e:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  403860:	f1c6 0605 	rsb	r6, r6, #5
  403864:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  403866:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  403868:	465a      	mov	r2, fp
  40386a:	9901      	ldr	r1, [sp, #4]
  40386c:	4628      	mov	r0, r5
  40386e:	4b40      	ldr	r3, [pc, #256]	; (403970 <xTaskGenericCreate+0x1ac>)
  403870:	4798      	blx	r3
  403872:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  403874:	f010 0f07 	tst.w	r0, #7
  403878:	d003      	beq.n	403882 <xTaskGenericCreate+0xbe>
  40387a:	4b38      	ldr	r3, [pc, #224]	; (40395c <xTaskGenericCreate+0x198>)
  40387c:	4798      	blx	r3
  40387e:	bf00      	nop
  403880:	e7fd      	b.n	40387e <xTaskGenericCreate+0xba>

		if( ( void * ) pxCreatedTask != NULL )
  403882:	f1b8 0f00 	cmp.w	r8, #0
  403886:	d001      	beq.n	40388c <xTaskGenericCreate+0xc8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  403888:	f8c8 4000 	str.w	r4, [r8]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  40388c:	4b39      	ldr	r3, [pc, #228]	; (403974 <xTaskGenericCreate+0x1b0>)
  40388e:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  403890:	4a39      	ldr	r2, [pc, #228]	; (403978 <xTaskGenericCreate+0x1b4>)
  403892:	6813      	ldr	r3, [r2, #0]
  403894:	3301      	adds	r3, #1
  403896:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  403898:	4b38      	ldr	r3, [pc, #224]	; (40397c <xTaskGenericCreate+0x1b8>)
  40389a:	681b      	ldr	r3, [r3, #0]
  40389c:	bb0b      	cbnz	r3, 4038e2 <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  40389e:	4b37      	ldr	r3, [pc, #220]	; (40397c <xTaskGenericCreate+0x1b8>)
  4038a0:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  4038a2:	6813      	ldr	r3, [r2, #0]
  4038a4:	2b01      	cmp	r3, #1
  4038a6:	d126      	bne.n	4038f6 <xTaskGenericCreate+0x132>
  4038a8:	4d35      	ldr	r5, [pc, #212]	; (403980 <xTaskGenericCreate+0x1bc>)
  4038aa:	f105 0864 	add.w	r8, r5, #100	; 0x64
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  4038ae:	4e35      	ldr	r6, [pc, #212]	; (403984 <xTaskGenericCreate+0x1c0>)
  4038b0:	4628      	mov	r0, r5
  4038b2:	47b0      	blx	r6
  4038b4:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  4038b6:	4545      	cmp	r5, r8
  4038b8:	d1fa      	bne.n	4038b0 <xTaskGenericCreate+0xec>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  4038ba:	f8df 8104 	ldr.w	r8, [pc, #260]	; 4039c0 <xTaskGenericCreate+0x1fc>
  4038be:	4640      	mov	r0, r8
  4038c0:	4d30      	ldr	r5, [pc, #192]	; (403984 <xTaskGenericCreate+0x1c0>)
  4038c2:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  4038c4:	4e30      	ldr	r6, [pc, #192]	; (403988 <xTaskGenericCreate+0x1c4>)
  4038c6:	4630      	mov	r0, r6
  4038c8:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
  4038ca:	4830      	ldr	r0, [pc, #192]	; (40398c <xTaskGenericCreate+0x1c8>)
  4038cc:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  4038ce:	4830      	ldr	r0, [pc, #192]	; (403990 <xTaskGenericCreate+0x1cc>)
  4038d0:	47a8      	blx	r5
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  4038d2:	4830      	ldr	r0, [pc, #192]	; (403994 <xTaskGenericCreate+0x1d0>)
  4038d4:	47a8      	blx	r5
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  4038d6:	4b30      	ldr	r3, [pc, #192]	; (403998 <xTaskGenericCreate+0x1d4>)
  4038d8:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4038dc:	4b2f      	ldr	r3, [pc, #188]	; (40399c <xTaskGenericCreate+0x1d8>)
  4038de:	601e      	str	r6, [r3, #0]
  4038e0:	e009      	b.n	4038f6 <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  4038e2:	4b2f      	ldr	r3, [pc, #188]	; (4039a0 <xTaskGenericCreate+0x1dc>)
  4038e4:	681b      	ldr	r3, [r3, #0]
  4038e6:	b933      	cbnz	r3, 4038f6 <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  4038e8:	4b24      	ldr	r3, [pc, #144]	; (40397c <xTaskGenericCreate+0x1b8>)
  4038ea:	681b      	ldr	r3, [r3, #0]
  4038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4038ee:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
  4038f0:	bf24      	itt	cs
  4038f2:	4b22      	ldrcs	r3, [pc, #136]	; (40397c <xTaskGenericCreate+0x1b8>)
  4038f4:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  4038f6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4038f8:	4b2a      	ldr	r3, [pc, #168]	; (4039a4 <xTaskGenericCreate+0x1e0>)
  4038fa:	681b      	ldr	r3, [r3, #0]
  4038fc:	4298      	cmp	r0, r3
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  4038fe:	bf84      	itt	hi
  403900:	4b28      	ldrhi	r3, [pc, #160]	; (4039a4 <xTaskGenericCreate+0x1e0>)
  403902:	6018      	strhi	r0, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
  403904:	4a28      	ldr	r2, [pc, #160]	; (4039a8 <xTaskGenericCreate+0x1e4>)
  403906:	6813      	ldr	r3, [r2, #0]
  403908:	3301      	adds	r3, #1
  40390a:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  40390c:	4b27      	ldr	r3, [pc, #156]	; (4039ac <xTaskGenericCreate+0x1e8>)
  40390e:	681b      	ldr	r3, [r3, #0]
  403910:	4298      	cmp	r0, r3
  403912:	bf84      	itt	hi
  403914:	4b25      	ldrhi	r3, [pc, #148]	; (4039ac <xTaskGenericCreate+0x1e8>)
  403916:	6018      	strhi	r0, [r3, #0]
  403918:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40391c:	4649      	mov	r1, r9
  40391e:	4b18      	ldr	r3, [pc, #96]	; (403980 <xTaskGenericCreate+0x1bc>)
  403920:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403924:	4b22      	ldr	r3, [pc, #136]	; (4039b0 <xTaskGenericCreate+0x1ec>)
  403926:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  403928:	4b22      	ldr	r3, [pc, #136]	; (4039b4 <xTaskGenericCreate+0x1f0>)
  40392a:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
  40392c:	4b1c      	ldr	r3, [pc, #112]	; (4039a0 <xTaskGenericCreate+0x1dc>)
  40392e:	681b      	ldr	r3, [r3, #0]
  403930:	b143      	cbz	r3, 403944 <xTaskGenericCreate+0x180>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  403932:	4b12      	ldr	r3, [pc, #72]	; (40397c <xTaskGenericCreate+0x1b8>)
  403934:	681b      	ldr	r3, [r3, #0]
  403936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403938:	429f      	cmp	r7, r3
  40393a:	d905      	bls.n	403948 <xTaskGenericCreate+0x184>
			{
				portYIELD_WITHIN_API();
  40393c:	4b1e      	ldr	r3, [pc, #120]	; (4039b8 <xTaskGenericCreate+0x1f4>)
  40393e:	4798      	blx	r3
  403940:	2001      	movs	r0, #1
  403942:	e008      	b.n	403956 <xTaskGenericCreate+0x192>
  403944:	2001      	movs	r0, #1
  403946:	e006      	b.n	403956 <xTaskGenericCreate+0x192>
  403948:	2001      	movs	r0, #1
  40394a:	e004      	b.n	403956 <xTaskGenericCreate+0x192>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  40394c:	6306      	str	r6, [r0, #48]	; 0x30
  40394e:	4630      	mov	r0, r6
  403950:	e761      	b.n	403816 <xTaskGenericCreate+0x52>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  403952:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
  403956:	b003      	add	sp, #12
  403958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40395c:	00402fc5 	.word	0x00402fc5
  403960:	0040311d 	.word	0x0040311d
  403964:	004031f1 	.word	0x004031f1
  403968:	004082c5 	.word	0x004082c5
  40396c:	00408361 	.word	0x00408361
  403970:	00402f79 	.word	0x00402f79
  403974:	00402fd5 	.word	0x00402fd5
  403978:	2000295c 	.word	0x2000295c
  40397c:	20002918 	.word	0x20002918
  403980:	200028b0 	.word	0x200028b0
  403984:	00402ec5 	.word	0x00402ec5
  403988:	2000289c 	.word	0x2000289c
  40398c:	2000291c 	.word	0x2000291c
  403990:	20002888 	.word	0x20002888
  403994:	20002868 	.word	0x20002868
  403998:	2000287c 	.word	0x2000287c
  40399c:	20002938 	.word	0x20002938
  4039a0:	20002880 	.word	0x20002880
  4039a4:	20002960 	.word	0x20002960
  4039a8:	20002940 	.word	0x20002940
  4039ac:	2000293c 	.word	0x2000293c
  4039b0:	00402ee5 	.word	0x00402ee5
  4039b4:	00402ff5 	.word	0x00402ff5
  4039b8:	00402fb5 	.word	0x00402fb5
  4039bc:	00402edd 	.word	0x00402edd
  4039c0:	20002944 	.word	0x20002944

004039c4 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  4039c4:	b510      	push	{r4, lr}
  4039c6:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
  4039c8:	2300      	movs	r3, #0
  4039ca:	9303      	str	r3, [sp, #12]
  4039cc:	9302      	str	r3, [sp, #8]
  4039ce:	9301      	str	r3, [sp, #4]
  4039d0:	9300      	str	r3, [sp, #0]
  4039d2:	2264      	movs	r2, #100	; 0x64
  4039d4:	490d      	ldr	r1, [pc, #52]	; (403a0c <vTaskStartScheduler+0x48>)
  4039d6:	480e      	ldr	r0, [pc, #56]	; (403a10 <vTaskStartScheduler+0x4c>)
  4039d8:	4c0e      	ldr	r4, [pc, #56]	; (403a14 <vTaskStartScheduler+0x50>)
  4039da:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  4039dc:	2801      	cmp	r0, #1
  4039de:	d10e      	bne.n	4039fe <vTaskStartScheduler+0x3a>
		{
			xReturn = xTimerCreateTimerTask();
  4039e0:	4b0d      	ldr	r3, [pc, #52]	; (403a18 <vTaskStartScheduler+0x54>)
  4039e2:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
  4039e4:	2801      	cmp	r0, #1
  4039e6:	d10a      	bne.n	4039fe <vTaskStartScheduler+0x3a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  4039e8:	4b0c      	ldr	r3, [pc, #48]	; (403a1c <vTaskStartScheduler+0x58>)
  4039ea:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
  4039ec:	2201      	movs	r2, #1
  4039ee:	4b0c      	ldr	r3, [pc, #48]	; (403a20 <vTaskStartScheduler+0x5c>)
  4039f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
  4039f2:	2200      	movs	r2, #0
  4039f4:	4b0b      	ldr	r3, [pc, #44]	; (403a24 <vTaskStartScheduler+0x60>)
  4039f6:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  4039f8:	4b0b      	ldr	r3, [pc, #44]	; (403a28 <vTaskStartScheduler+0x64>)
  4039fa:	4798      	blx	r3
  4039fc:	e004      	b.n	403a08 <vTaskStartScheduler+0x44>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
  4039fe:	b918      	cbnz	r0, 403a08 <vTaskStartScheduler+0x44>
  403a00:	4b06      	ldr	r3, [pc, #24]	; (403a1c <vTaskStartScheduler+0x58>)
  403a02:	4798      	blx	r3
  403a04:	bf00      	nop
  403a06:	e7fd      	b.n	403a04 <vTaskStartScheduler+0x40>
}
  403a08:	b004      	add	sp, #16
  403a0a:	bd10      	pop	{r4, pc}
  403a0c:	00408524 	.word	0x00408524
  403a10:	00403cc9 	.word	0x00403cc9
  403a14:	004037c5 	.word	0x004037c5
  403a18:	00404161 	.word	0x00404161
  403a1c:	00402fc5 	.word	0x00402fc5
  403a20:	20002880 	.word	0x20002880
  403a24:	20002934 	.word	0x20002934
  403a28:	00403091 	.word	0x00403091

00403a2c <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  403a2c:	4a02      	ldr	r2, [pc, #8]	; (403a38 <vTaskSuspendAll+0xc>)
  403a2e:	6813      	ldr	r3, [r2, #0]
  403a30:	3301      	adds	r3, #1
  403a32:	6013      	str	r3, [r2, #0]
  403a34:	4770      	bx	lr
  403a36:	bf00      	nop
  403a38:	20002914 	.word	0x20002914

00403a3c <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
  403a3c:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
  403a3e:	4b04      	ldr	r3, [pc, #16]	; (403a50 <xTaskGetTickCount+0x14>)
  403a40:	4798      	blx	r3
	{
		xTicks = xTickCount;
  403a42:	4b04      	ldr	r3, [pc, #16]	; (403a54 <xTaskGetTickCount+0x18>)
  403a44:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
  403a46:	4b04      	ldr	r3, [pc, #16]	; (403a58 <xTaskGetTickCount+0x1c>)
  403a48:	4798      	blx	r3

	return xTicks;
}
  403a4a:	4620      	mov	r0, r4
  403a4c:	bd10      	pop	{r4, pc}
  403a4e:	bf00      	nop
  403a50:	00402fd5 	.word	0x00402fd5
  403a54:	20002934 	.word	0x20002934
  403a58:	00402ff5 	.word	0x00402ff5

00403a5c <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
  403a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  403a60:	4b3a      	ldr	r3, [pc, #232]	; (403b4c <vTaskIncrementTick+0xf0>)
  403a62:	681b      	ldr	r3, [r3, #0]
  403a64:	2b00      	cmp	r3, #0
  403a66:	d16b      	bne.n	403b40 <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
  403a68:	4b39      	ldr	r3, [pc, #228]	; (403b50 <vTaskIncrementTick+0xf4>)
  403a6a:	681a      	ldr	r2, [r3, #0]
  403a6c:	3201      	adds	r2, #1
  403a6e:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
  403a70:	681b      	ldr	r3, [r3, #0]
  403a72:	bb03      	cbnz	r3, 403ab6 <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  403a74:	4b37      	ldr	r3, [pc, #220]	; (403b54 <vTaskIncrementTick+0xf8>)
  403a76:	681b      	ldr	r3, [r3, #0]
  403a78:	681b      	ldr	r3, [r3, #0]
  403a7a:	b11b      	cbz	r3, 403a84 <vTaskIncrementTick+0x28>
  403a7c:	4b36      	ldr	r3, [pc, #216]	; (403b58 <vTaskIncrementTick+0xfc>)
  403a7e:	4798      	blx	r3
  403a80:	bf00      	nop
  403a82:	e7fd      	b.n	403a80 <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
  403a84:	4b33      	ldr	r3, [pc, #204]	; (403b54 <vTaskIncrementTick+0xf8>)
  403a86:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  403a88:	4a34      	ldr	r2, [pc, #208]	; (403b5c <vTaskIncrementTick+0x100>)
  403a8a:	6810      	ldr	r0, [r2, #0]
  403a8c:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
  403a8e:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
  403a90:	4933      	ldr	r1, [pc, #204]	; (403b60 <vTaskIncrementTick+0x104>)
  403a92:	680a      	ldr	r2, [r1, #0]
  403a94:	3201      	adds	r2, #1
  403a96:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  403a98:	681b      	ldr	r3, [r3, #0]
  403a9a:	681b      	ldr	r3, [r3, #0]
  403a9c:	b923      	cbnz	r3, 403aa8 <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  403a9e:	f04f 32ff 	mov.w	r2, #4294967295
  403aa2:	4b30      	ldr	r3, [pc, #192]	; (403b64 <vTaskIncrementTick+0x108>)
  403aa4:	601a      	str	r2, [r3, #0]
  403aa6:	e006      	b.n	403ab6 <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  403aa8:	4b2a      	ldr	r3, [pc, #168]	; (403b54 <vTaskIncrementTick+0xf8>)
  403aaa:	681b      	ldr	r3, [r3, #0]
  403aac:	68db      	ldr	r3, [r3, #12]
  403aae:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  403ab0:	685a      	ldr	r2, [r3, #4]
  403ab2:	4b2c      	ldr	r3, [pc, #176]	; (403b64 <vTaskIncrementTick+0x108>)
  403ab4:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  403ab6:	4b26      	ldr	r3, [pc, #152]	; (403b50 <vTaskIncrementTick+0xf4>)
  403ab8:	681a      	ldr	r2, [r3, #0]
  403aba:	4b2a      	ldr	r3, [pc, #168]	; (403b64 <vTaskIncrementTick+0x108>)
  403abc:	681b      	ldr	r3, [r3, #0]
  403abe:	429a      	cmp	r2, r3
  403ac0:	d342      	bcc.n	403b48 <vTaskIncrementTick+0xec>
  403ac2:	4b24      	ldr	r3, [pc, #144]	; (403b54 <vTaskIncrementTick+0xf8>)
  403ac4:	681b      	ldr	r3, [r3, #0]
  403ac6:	681b      	ldr	r3, [r3, #0]
  403ac8:	b16b      	cbz	r3, 403ae6 <vTaskIncrementTick+0x8a>
  403aca:	4b22      	ldr	r3, [pc, #136]	; (403b54 <vTaskIncrementTick+0xf8>)
  403acc:	681b      	ldr	r3, [r3, #0]
  403ace:	68db      	ldr	r3, [r3, #12]
  403ad0:	68dc      	ldr	r4, [r3, #12]
  403ad2:	6863      	ldr	r3, [r4, #4]
  403ad4:	4a1e      	ldr	r2, [pc, #120]	; (403b50 <vTaskIncrementTick+0xf4>)
  403ad6:	6812      	ldr	r2, [r2, #0]
  403ad8:	4293      	cmp	r3, r2
  403ada:	d813      	bhi.n	403b04 <vTaskIncrementTick+0xa8>
  403adc:	4e22      	ldr	r6, [pc, #136]	; (403b68 <vTaskIncrementTick+0x10c>)
  403ade:	4f23      	ldr	r7, [pc, #140]	; (403b6c <vTaskIncrementTick+0x110>)
  403ae0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 403b78 <vTaskIncrementTick+0x11c>
  403ae4:	e012      	b.n	403b0c <vTaskIncrementTick+0xb0>
  403ae6:	f04f 32ff 	mov.w	r2, #4294967295
  403aea:	4b1e      	ldr	r3, [pc, #120]	; (403b64 <vTaskIncrementTick+0x108>)
  403aec:	601a      	str	r2, [r3, #0]
  403aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403af2:	4b18      	ldr	r3, [pc, #96]	; (403b54 <vTaskIncrementTick+0xf8>)
  403af4:	681b      	ldr	r3, [r3, #0]
  403af6:	68db      	ldr	r3, [r3, #12]
  403af8:	68dc      	ldr	r4, [r3, #12]
  403afa:	6863      	ldr	r3, [r4, #4]
  403afc:	4a14      	ldr	r2, [pc, #80]	; (403b50 <vTaskIncrementTick+0xf4>)
  403afe:	6812      	ldr	r2, [r2, #0]
  403b00:	4293      	cmp	r3, r2
  403b02:	d903      	bls.n	403b0c <vTaskIncrementTick+0xb0>
  403b04:	4a17      	ldr	r2, [pc, #92]	; (403b64 <vTaskIncrementTick+0x108>)
  403b06:	6013      	str	r3, [r2, #0]
  403b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403b0c:	1d25      	adds	r5, r4, #4
  403b0e:	4628      	mov	r0, r5
  403b10:	47b0      	blx	r6
  403b12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  403b14:	b113      	cbz	r3, 403b1c <vTaskIncrementTick+0xc0>
  403b16:	f104 0018 	add.w	r0, r4, #24
  403b1a:	47b0      	blx	r6
  403b1c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  403b1e:	683b      	ldr	r3, [r7, #0]
  403b20:	4298      	cmp	r0, r3
  403b22:	bf88      	it	hi
  403b24:	6038      	strhi	r0, [r7, #0]
  403b26:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403b2a:	4629      	mov	r1, r5
  403b2c:	eb08 0080 	add.w	r0, r8, r0, lsl #2
  403b30:	4b0f      	ldr	r3, [pc, #60]	; (403b70 <vTaskIncrementTick+0x114>)
  403b32:	4798      	blx	r3
  403b34:	4b07      	ldr	r3, [pc, #28]	; (403b54 <vTaskIncrementTick+0xf8>)
  403b36:	681b      	ldr	r3, [r3, #0]
  403b38:	681b      	ldr	r3, [r3, #0]
  403b3a:	2b00      	cmp	r3, #0
  403b3c:	d1d9      	bne.n	403af2 <vTaskIncrementTick+0x96>
  403b3e:	e7d2      	b.n	403ae6 <vTaskIncrementTick+0x8a>
	}
	else
	{
		++uxMissedTicks;
  403b40:	4a0c      	ldr	r2, [pc, #48]	; (403b74 <vTaskIncrementTick+0x118>)
  403b42:	6813      	ldr	r3, [r2, #0]
  403b44:	3301      	adds	r3, #1
  403b46:	6013      	str	r3, [r2, #0]
  403b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403b4c:	20002914 	.word	0x20002914
  403b50:	20002934 	.word	0x20002934
  403b54:	2000287c 	.word	0x2000287c
  403b58:	00402fc5 	.word	0x00402fc5
  403b5c:	20002938 	.word	0x20002938
  403b60:	20002930 	.word	0x20002930
  403b64:	200000bc 	.word	0x200000bc
  403b68:	00402f3d 	.word	0x00402f3d
  403b6c:	2000293c 	.word	0x2000293c
  403b70:	00402ee5 	.word	0x00402ee5
  403b74:	20002864 	.word	0x20002864
  403b78:	200028b0 	.word	0x200028b0

00403b7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  403b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  403b80:	4b30      	ldr	r3, [pc, #192]	; (403c44 <xTaskResumeAll+0xc8>)
  403b82:	681b      	ldr	r3, [r3, #0]
  403b84:	b91b      	cbnz	r3, 403b8e <xTaskResumeAll+0x12>
  403b86:	4b30      	ldr	r3, [pc, #192]	; (403c48 <xTaskResumeAll+0xcc>)
  403b88:	4798      	blx	r3
  403b8a:	bf00      	nop
  403b8c:	e7fd      	b.n	403b8a <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  403b8e:	4b2f      	ldr	r3, [pc, #188]	; (403c4c <xTaskResumeAll+0xd0>)
  403b90:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  403b92:	4b2c      	ldr	r3, [pc, #176]	; (403c44 <xTaskResumeAll+0xc8>)
  403b94:	681a      	ldr	r2, [r3, #0]
  403b96:	3a01      	subs	r2, #1
  403b98:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  403b9a:	681b      	ldr	r3, [r3, #0]
  403b9c:	2b00      	cmp	r3, #0
  403b9e:	d149      	bne.n	403c34 <xTaskResumeAll+0xb8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
  403ba0:	4b2b      	ldr	r3, [pc, #172]	; (403c50 <xTaskResumeAll+0xd4>)
  403ba2:	681b      	ldr	r3, [r3, #0]
  403ba4:	bb03      	cbnz	r3, 403be8 <xTaskResumeAll+0x6c>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  403ba6:	2400      	movs	r4, #0
  403ba8:	e047      	b.n	403c3a <xTaskResumeAll+0xbe>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  403baa:	f8d8 300c 	ldr.w	r3, [r8, #12]
  403bae:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
  403bb0:	f104 0018 	add.w	r0, r4, #24
  403bb4:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
  403bb6:	f104 0904 	add.w	r9, r4, #4
  403bba:	4648      	mov	r0, r9
  403bbc:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
  403bbe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  403bc0:	6833      	ldr	r3, [r6, #0]
  403bc2:	4298      	cmp	r0, r3
  403bc4:	bf88      	it	hi
  403bc6:	6030      	strhi	r0, [r6, #0]
  403bc8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403bcc:	4649      	mov	r1, r9
  403bce:	4b21      	ldr	r3, [pc, #132]	; (403c54 <xTaskResumeAll+0xd8>)
  403bd0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403bd4:	4b20      	ldr	r3, [pc, #128]	; (403c58 <xTaskResumeAll+0xdc>)
  403bd6:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  403bd8:	4b20      	ldr	r3, [pc, #128]	; (403c5c <xTaskResumeAll+0xe0>)
  403bda:	681b      	ldr	r3, [r3, #0]
  403bdc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  403bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
  403be0:	429a      	cmp	r2, r3
  403be2:	bf28      	it	cs
  403be4:	2501      	movcs	r5, #1
  403be6:	e004      	b.n	403bf2 <xTaskResumeAll+0x76>
  403be8:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  403bea:	f8df 8090 	ldr.w	r8, [pc, #144]	; 403c7c <xTaskResumeAll+0x100>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
  403bee:	4f1c      	ldr	r7, [pc, #112]	; (403c60 <xTaskResumeAll+0xe4>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
  403bf0:	4e1c      	ldr	r6, [pc, #112]	; (403c64 <xTaskResumeAll+0xe8>)
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  403bf2:	f8d8 3000 	ldr.w	r3, [r8]
  403bf6:	2b00      	cmp	r3, #0
  403bf8:	d1d7      	bne.n	403baa <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  403bfa:	4b1b      	ldr	r3, [pc, #108]	; (403c68 <xTaskResumeAll+0xec>)
  403bfc:	681b      	ldr	r3, [r3, #0]
  403bfe:	b163      	cbz	r3, 403c1a <xTaskResumeAll+0x9e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  403c00:	4b19      	ldr	r3, [pc, #100]	; (403c68 <xTaskResumeAll+0xec>)
  403c02:	681b      	ldr	r3, [r3, #0]
  403c04:	b17b      	cbz	r3, 403c26 <xTaskResumeAll+0xaa>
					{
						vTaskIncrementTick();
  403c06:	4d19      	ldr	r5, [pc, #100]	; (403c6c <xTaskResumeAll+0xf0>)
						--uxMissedTicks;
  403c08:	4c17      	ldr	r4, [pc, #92]	; (403c68 <xTaskResumeAll+0xec>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
  403c0a:	47a8      	blx	r5
						--uxMissedTicks;
  403c0c:	6823      	ldr	r3, [r4, #0]
  403c0e:	3b01      	subs	r3, #1
  403c10:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  403c12:	6823      	ldr	r3, [r4, #0]
  403c14:	2b00      	cmp	r3, #0
  403c16:	d1f8      	bne.n	403c0a <xTaskResumeAll+0x8e>
  403c18:	e005      	b.n	403c26 <xTaskResumeAll+0xaa>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  403c1a:	2d01      	cmp	r5, #1
  403c1c:	d003      	beq.n	403c26 <xTaskResumeAll+0xaa>
  403c1e:	4b14      	ldr	r3, [pc, #80]	; (403c70 <xTaskResumeAll+0xf4>)
  403c20:	681b      	ldr	r3, [r3, #0]
  403c22:	2b01      	cmp	r3, #1
  403c24:	d108      	bne.n	403c38 <xTaskResumeAll+0xbc>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
  403c26:	2200      	movs	r2, #0
  403c28:	4b11      	ldr	r3, [pc, #68]	; (403c70 <xTaskResumeAll+0xf4>)
  403c2a:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  403c2c:	4b11      	ldr	r3, [pc, #68]	; (403c74 <xTaskResumeAll+0xf8>)
  403c2e:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
  403c30:	2401      	movs	r4, #1
  403c32:	e002      	b.n	403c3a <xTaskResumeAll+0xbe>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  403c34:	2400      	movs	r4, #0
  403c36:	e000      	b.n	403c3a <xTaskResumeAll+0xbe>
  403c38:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  403c3a:	4b0f      	ldr	r3, [pc, #60]	; (403c78 <xTaskResumeAll+0xfc>)
  403c3c:	4798      	blx	r3

	return xAlreadyYielded;
}
  403c3e:	4620      	mov	r0, r4
  403c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403c44:	20002914 	.word	0x20002914
  403c48:	00402fc5 	.word	0x00402fc5
  403c4c:	00402fd5 	.word	0x00402fd5
  403c50:	2000295c 	.word	0x2000295c
  403c54:	200028b0 	.word	0x200028b0
  403c58:	00402ee5 	.word	0x00402ee5
  403c5c:	20002918 	.word	0x20002918
  403c60:	00402f3d 	.word	0x00402f3d
  403c64:	2000293c 	.word	0x2000293c
  403c68:	20002864 	.word	0x20002864
  403c6c:	00403a5d 	.word	0x00403a5d
  403c70:	20002958 	.word	0x20002958
  403c74:	00402fb5 	.word	0x00402fb5
  403c78:	00402ff5 	.word	0x00402ff5
  403c7c:	2000291c 	.word	0x2000291c

00403c80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
  403c80:	b510      	push	{r4, lr}
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
  403c82:	b180      	cbz	r0, 403ca6 <vTaskDelay+0x26>
  403c84:	4604      	mov	r4, r0
		{
			vTaskSuspendAll();
  403c86:	4b09      	ldr	r3, [pc, #36]	; (403cac <vTaskDelay+0x2c>)
  403c88:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  403c8a:	4b09      	ldr	r3, [pc, #36]	; (403cb0 <vTaskDelay+0x30>)
  403c8c:	681b      	ldr	r3, [r3, #0]
  403c8e:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  403c90:	4b08      	ldr	r3, [pc, #32]	; (403cb4 <vTaskDelay+0x34>)
  403c92:	6818      	ldr	r0, [r3, #0]
  403c94:	3004      	adds	r0, #4
  403c96:	4b08      	ldr	r3, [pc, #32]	; (403cb8 <vTaskDelay+0x38>)
  403c98:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  403c9a:	4620      	mov	r0, r4
  403c9c:	4b07      	ldr	r3, [pc, #28]	; (403cbc <vTaskDelay+0x3c>)
  403c9e:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  403ca0:	4b07      	ldr	r3, [pc, #28]	; (403cc0 <vTaskDelay+0x40>)
  403ca2:	4798      	blx	r3
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  403ca4:	b908      	cbnz	r0, 403caa <vTaskDelay+0x2a>
		{
			portYIELD_WITHIN_API();
  403ca6:	4b07      	ldr	r3, [pc, #28]	; (403cc4 <vTaskDelay+0x44>)
  403ca8:	4798      	blx	r3
  403caa:	bd10      	pop	{r4, pc}
  403cac:	00403a2d 	.word	0x00403a2d
  403cb0:	20002934 	.word	0x20002934
  403cb4:	20002918 	.word	0x20002918
  403cb8:	00402f3d 	.word	0x00402f3d
  403cbc:	0040376d 	.word	0x0040376d
  403cc0:	00403b7d 	.word	0x00403b7d
  403cc4:	00402fb5 	.word	0x00402fb5

00403cc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  403cc8:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  403cca:	4d12      	ldr	r5, [pc, #72]	; (403d14 <prvIdleTask+0x4c>)
		{
			vTaskSuspendAll();
  403ccc:	f8df 8060 	ldr.w	r8, [pc, #96]	; 403d30 <prvIdleTask+0x68>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  403cd0:	4f11      	ldr	r7, [pc, #68]	; (403d18 <prvIdleTask+0x50>)
			xTaskResumeAll();
  403cd2:	4e12      	ldr	r6, [pc, #72]	; (403d1c <prvIdleTask+0x54>)
  403cd4:	e019      	b.n	403d0a <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
  403cd6:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  403cd8:	683c      	ldr	r4, [r7, #0]
			xTaskResumeAll();
  403cda:	47b0      	blx	r6

			if( xListIsEmpty == pdFALSE )
  403cdc:	b1ac      	cbz	r4, 403d0a <prvIdleTask+0x42>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  403cde:	4b10      	ldr	r3, [pc, #64]	; (403d20 <prvIdleTask+0x58>)
  403ce0:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  403ce2:	68fb      	ldr	r3, [r7, #12]
  403ce4:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
  403ce6:	1d20      	adds	r0, r4, #4
  403ce8:	4b0e      	ldr	r3, [pc, #56]	; (403d24 <prvIdleTask+0x5c>)
  403cea:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  403cec:	4a0e      	ldr	r2, [pc, #56]	; (403d28 <prvIdleTask+0x60>)
  403cee:	6813      	ldr	r3, [r2, #0]
  403cf0:	3b01      	subs	r3, #1
  403cf2:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  403cf4:	682b      	ldr	r3, [r5, #0]
  403cf6:	3b01      	subs	r3, #1
  403cf8:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
  403cfa:	4b0c      	ldr	r3, [pc, #48]	; (403d2c <prvIdleTask+0x64>)
  403cfc:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  403cfe:	6b20      	ldr	r0, [r4, #48]	; 0x30
  403d00:	f8df 9030 	ldr.w	r9, [pc, #48]	; 403d34 <prvIdleTask+0x6c>
  403d04:	47c8      	blx	r9
		vPortFree( pxTCB );
  403d06:	4620      	mov	r0, r4
  403d08:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  403d0a:	682b      	ldr	r3, [r5, #0]
  403d0c:	2b00      	cmp	r3, #0
  403d0e:	d1e2      	bne.n	403cd6 <prvIdleTask+0xe>
  403d10:	e7df      	b.n	403cd2 <prvIdleTask+0xa>
  403d12:	bf00      	nop
  403d14:	20002884 	.word	0x20002884
  403d18:	20002888 	.word	0x20002888
  403d1c:	00403b7d 	.word	0x00403b7d
  403d20:	00402fd5 	.word	0x00402fd5
  403d24:	00402f3d 	.word	0x00402f3d
  403d28:	2000295c 	.word	0x2000295c
  403d2c:	00402ff5 	.word	0x00402ff5
  403d30:	00403a2d 	.word	0x00403a2d
  403d34:	004031f1 	.word	0x004031f1

00403d38 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  403d38:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  403d3a:	4b22      	ldr	r3, [pc, #136]	; (403dc4 <vTaskSwitchContext+0x8c>)
  403d3c:	681b      	ldr	r3, [r3, #0]
  403d3e:	b96b      	cbnz	r3, 403d5c <vTaskSwitchContext+0x24>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
  403d40:	4b21      	ldr	r3, [pc, #132]	; (403dc8 <vTaskSwitchContext+0x90>)
  403d42:	681b      	ldr	r3, [r3, #0]
  403d44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  403d48:	009b      	lsls	r3, r3, #2
  403d4a:	4a20      	ldr	r2, [pc, #128]	; (403dcc <vTaskSwitchContext+0x94>)
  403d4c:	58d3      	ldr	r3, [r2, r3]
  403d4e:	b9cb      	cbnz	r3, 403d84 <vTaskSwitchContext+0x4c>
  403d50:	4b1d      	ldr	r3, [pc, #116]	; (403dc8 <vTaskSwitchContext+0x90>)
  403d52:	681b      	ldr	r3, [r3, #0]
  403d54:	b143      	cbz	r3, 403d68 <vTaskSwitchContext+0x30>
  403d56:	4a1c      	ldr	r2, [pc, #112]	; (403dc8 <vTaskSwitchContext+0x90>)
  403d58:	491c      	ldr	r1, [pc, #112]	; (403dcc <vTaskSwitchContext+0x94>)
  403d5a:	e009      	b.n	403d70 <vTaskSwitchContext+0x38>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  403d5c:	2201      	movs	r2, #1
  403d5e:	4b1c      	ldr	r3, [pc, #112]	; (403dd0 <vTaskSwitchContext+0x98>)
  403d60:	601a      	str	r2, [r3, #0]
  403d62:	bd10      	pop	{r4, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
  403d64:	6813      	ldr	r3, [r2, #0]
  403d66:	b91b      	cbnz	r3, 403d70 <vTaskSwitchContext+0x38>
  403d68:	4b1a      	ldr	r3, [pc, #104]	; (403dd4 <vTaskSwitchContext+0x9c>)
  403d6a:	4798      	blx	r3
  403d6c:	bf00      	nop
  403d6e:	e7fd      	b.n	403d6c <vTaskSwitchContext+0x34>
  403d70:	6813      	ldr	r3, [r2, #0]
  403d72:	3b01      	subs	r3, #1
  403d74:	6013      	str	r3, [r2, #0]
  403d76:	6813      	ldr	r3, [r2, #0]
  403d78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  403d7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  403d80:	2b00      	cmp	r3, #0
  403d82:	d0ef      	beq.n	403d64 <vTaskSwitchContext+0x2c>
  403d84:	4b10      	ldr	r3, [pc, #64]	; (403dc8 <vTaskSwitchContext+0x90>)
  403d86:	681b      	ldr	r3, [r3, #0]
  403d88:	4a10      	ldr	r2, [pc, #64]	; (403dcc <vTaskSwitchContext+0x94>)
  403d8a:	0099      	lsls	r1, r3, #2
  403d8c:	18c8      	adds	r0, r1, r3
  403d8e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  403d92:	6844      	ldr	r4, [r0, #4]
  403d94:	6864      	ldr	r4, [r4, #4]
  403d96:	6044      	str	r4, [r0, #4]
  403d98:	4602      	mov	r2, r0
  403d9a:	3208      	adds	r2, #8
  403d9c:	4294      	cmp	r4, r2
  403d9e:	d106      	bne.n	403dae <vTaskSwitchContext+0x76>
  403da0:	6860      	ldr	r0, [r4, #4]
  403da2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  403da6:	4a09      	ldr	r2, [pc, #36]	; (403dcc <vTaskSwitchContext+0x94>)
  403da8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  403dac:	6050      	str	r0, [r2, #4]
  403dae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  403db2:	4a06      	ldr	r2, [pc, #24]	; (403dcc <vTaskSwitchContext+0x94>)
  403db4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  403db8:	685b      	ldr	r3, [r3, #4]
  403dba:	68da      	ldr	r2, [r3, #12]
  403dbc:	4b06      	ldr	r3, [pc, #24]	; (403dd8 <vTaskSwitchContext+0xa0>)
  403dbe:	601a      	str	r2, [r3, #0]
  403dc0:	bd10      	pop	{r4, pc}
  403dc2:	bf00      	nop
  403dc4:	20002914 	.word	0x20002914
  403dc8:	2000293c 	.word	0x2000293c
  403dcc:	200028b0 	.word	0x200028b0
  403dd0:	20002958 	.word	0x20002958
  403dd4:	00402fc5 	.word	0x00402fc5
  403dd8:	20002918 	.word	0x20002918

00403ddc <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  403ddc:	b538      	push	{r3, r4, r5, lr}
portTickType xTimeToWake;

	configASSERT( pxEventList );
  403dde:	b918      	cbnz	r0, 403de8 <vTaskPlaceOnEventList+0xc>
  403de0:	4b0e      	ldr	r3, [pc, #56]	; (403e1c <vTaskPlaceOnEventList+0x40>)
  403de2:	4798      	blx	r3
  403de4:	bf00      	nop
  403de6:	e7fd      	b.n	403de4 <vTaskPlaceOnEventList+0x8>
  403de8:	460c      	mov	r4, r1
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  403dea:	4d0d      	ldr	r5, [pc, #52]	; (403e20 <vTaskPlaceOnEventList+0x44>)
  403dec:	6829      	ldr	r1, [r5, #0]
  403dee:	3118      	adds	r1, #24
  403df0:	4b0c      	ldr	r3, [pc, #48]	; (403e24 <vTaskPlaceOnEventList+0x48>)
  403df2:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  403df4:	6828      	ldr	r0, [r5, #0]
  403df6:	3004      	adds	r0, #4
  403df8:	4b0b      	ldr	r3, [pc, #44]	; (403e28 <vTaskPlaceOnEventList+0x4c>)
  403dfa:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  403dfc:	f1b4 3fff 	cmp.w	r4, #4294967295
  403e00:	d105      	bne.n	403e0e <vTaskPlaceOnEventList+0x32>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  403e02:	6829      	ldr	r1, [r5, #0]
  403e04:	3104      	adds	r1, #4
  403e06:	4809      	ldr	r0, [pc, #36]	; (403e2c <vTaskPlaceOnEventList+0x50>)
  403e08:	4b09      	ldr	r3, [pc, #36]	; (403e30 <vTaskPlaceOnEventList+0x54>)
  403e0a:	4798      	blx	r3
  403e0c:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
  403e0e:	4b09      	ldr	r3, [pc, #36]	; (403e34 <vTaskPlaceOnEventList+0x58>)
  403e10:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  403e12:	4420      	add	r0, r4
  403e14:	4b08      	ldr	r3, [pc, #32]	; (403e38 <vTaskPlaceOnEventList+0x5c>)
  403e16:	4798      	blx	r3
  403e18:	bd38      	pop	{r3, r4, r5, pc}
  403e1a:	bf00      	nop
  403e1c:	00402fc5 	.word	0x00402fc5
  403e20:	20002918 	.word	0x20002918
  403e24:	00402f01 	.word	0x00402f01
  403e28:	00402f3d 	.word	0x00402f3d
  403e2c:	20002868 	.word	0x20002868
  403e30:	00402ee5 	.word	0x00402ee5
  403e34:	20002934 	.word	0x20002934
  403e38:	0040376d 	.word	0x0040376d

00403e3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
  403e3c:	b538      	push	{r3, r4, r5, lr}
	portTickType xTimeToWake;

		configASSERT( pxEventList );
  403e3e:	b918      	cbnz	r0, 403e48 <vTaskPlaceOnEventListRestricted+0xc>
  403e40:	4b09      	ldr	r3, [pc, #36]	; (403e68 <vTaskPlaceOnEventListRestricted+0x2c>)
  403e42:	4798      	blx	r3
  403e44:	bf00      	nop
  403e46:	e7fd      	b.n	403e44 <vTaskPlaceOnEventListRestricted+0x8>
  403e48:	460d      	mov	r5, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  403e4a:	4c08      	ldr	r4, [pc, #32]	; (403e6c <vTaskPlaceOnEventListRestricted+0x30>)
  403e4c:	6821      	ldr	r1, [r4, #0]
  403e4e:	3118      	adds	r1, #24
  403e50:	4b07      	ldr	r3, [pc, #28]	; (403e70 <vTaskPlaceOnEventListRestricted+0x34>)
  403e52:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  403e54:	6820      	ldr	r0, [r4, #0]
  403e56:	3004      	adds	r0, #4
  403e58:	4b06      	ldr	r3, [pc, #24]	; (403e74 <vTaskPlaceOnEventListRestricted+0x38>)
  403e5a:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
  403e5c:	4b06      	ldr	r3, [pc, #24]	; (403e78 <vTaskPlaceOnEventListRestricted+0x3c>)
  403e5e:	6818      	ldr	r0, [r3, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  403e60:	4428      	add	r0, r5
  403e62:	4b06      	ldr	r3, [pc, #24]	; (403e7c <vTaskPlaceOnEventListRestricted+0x40>)
  403e64:	4798      	blx	r3
  403e66:	bd38      	pop	{r3, r4, r5, pc}
  403e68:	00402fc5 	.word	0x00402fc5
  403e6c:	20002918 	.word	0x20002918
  403e70:	00402ee5 	.word	0x00402ee5
  403e74:	00402f3d 	.word	0x00402f3d
  403e78:	20002934 	.word	0x20002934
  403e7c:	0040376d 	.word	0x0040376d

00403e80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  403e80:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  403e82:	68c3      	ldr	r3, [r0, #12]
  403e84:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  403e86:	b91c      	cbnz	r4, 403e90 <xTaskRemoveFromEventList+0x10>
  403e88:	4b16      	ldr	r3, [pc, #88]	; (403ee4 <xTaskRemoveFromEventList+0x64>)
  403e8a:	4798      	blx	r3
  403e8c:	bf00      	nop
  403e8e:	e7fd      	b.n	403e8c <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  403e90:	f104 0518 	add.w	r5, r4, #24
  403e94:	4628      	mov	r0, r5
  403e96:	4b14      	ldr	r3, [pc, #80]	; (403ee8 <xTaskRemoveFromEventList+0x68>)
  403e98:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  403e9a:	4b14      	ldr	r3, [pc, #80]	; (403eec <xTaskRemoveFromEventList+0x6c>)
  403e9c:	681b      	ldr	r3, [r3, #0]
  403e9e:	b99b      	cbnz	r3, 403ec8 <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  403ea0:	1d25      	adds	r5, r4, #4
  403ea2:	4628      	mov	r0, r5
  403ea4:	4b10      	ldr	r3, [pc, #64]	; (403ee8 <xTaskRemoveFromEventList+0x68>)
  403ea6:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  403ea8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  403eaa:	4b11      	ldr	r3, [pc, #68]	; (403ef0 <xTaskRemoveFromEventList+0x70>)
  403eac:	681b      	ldr	r3, [r3, #0]
  403eae:	4298      	cmp	r0, r3
  403eb0:	bf84      	itt	hi
  403eb2:	4b0f      	ldrhi	r3, [pc, #60]	; (403ef0 <xTaskRemoveFromEventList+0x70>)
  403eb4:	6018      	strhi	r0, [r3, #0]
  403eb6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403eba:	4629      	mov	r1, r5
  403ebc:	4b0d      	ldr	r3, [pc, #52]	; (403ef4 <xTaskRemoveFromEventList+0x74>)
  403ebe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403ec2:	4b0d      	ldr	r3, [pc, #52]	; (403ef8 <xTaskRemoveFromEventList+0x78>)
  403ec4:	4798      	blx	r3
  403ec6:	e003      	b.n	403ed0 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  403ec8:	4629      	mov	r1, r5
  403eca:	480c      	ldr	r0, [pc, #48]	; (403efc <xTaskRemoveFromEventList+0x7c>)
  403ecc:	4b0a      	ldr	r3, [pc, #40]	; (403ef8 <xTaskRemoveFromEventList+0x78>)
  403ece:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  403ed0:	4b0b      	ldr	r3, [pc, #44]	; (403f00 <xTaskRemoveFromEventList+0x80>)
  403ed2:	681b      	ldr	r3, [r3, #0]
	else
	{
		xReturn = pdFALSE;
	}

	return xReturn;
  403ed4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  403ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
  403ed8:	4298      	cmp	r0, r3
  403eda:	bf34      	ite	cc
  403edc:	2000      	movcc	r0, #0
  403ede:	2001      	movcs	r0, #1
  403ee0:	bd38      	pop	{r3, r4, r5, pc}
  403ee2:	bf00      	nop
  403ee4:	00402fc5 	.word	0x00402fc5
  403ee8:	00402f3d 	.word	0x00402f3d
  403eec:	20002914 	.word	0x20002914
  403ef0:	2000293c 	.word	0x2000293c
  403ef4:	200028b0 	.word	0x200028b0
  403ef8:	00402ee5 	.word	0x00402ee5
  403efc:	2000291c 	.word	0x2000291c
  403f00:	20002918 	.word	0x20002918

00403f04 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  403f04:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
  403f06:	b918      	cbnz	r0, 403f10 <vTaskSetTimeOutState+0xc>
  403f08:	4b05      	ldr	r3, [pc, #20]	; (403f20 <vTaskSetTimeOutState+0x1c>)
  403f0a:	4798      	blx	r3
  403f0c:	bf00      	nop
  403f0e:	e7fd      	b.n	403f0c <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  403f10:	4a04      	ldr	r2, [pc, #16]	; (403f24 <vTaskSetTimeOutState+0x20>)
  403f12:	6812      	ldr	r2, [r2, #0]
  403f14:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  403f16:	4a04      	ldr	r2, [pc, #16]	; (403f28 <vTaskSetTimeOutState+0x24>)
  403f18:	6812      	ldr	r2, [r2, #0]
  403f1a:	6042      	str	r2, [r0, #4]
  403f1c:	bd08      	pop	{r3, pc}
  403f1e:	bf00      	nop
  403f20:	00402fc5 	.word	0x00402fc5
  403f24:	20002930 	.word	0x20002930
  403f28:	20002934 	.word	0x20002934

00403f2c <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  403f2c:	b538      	push	{r3, r4, r5, lr}
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
  403f2e:	b918      	cbnz	r0, 403f38 <xTaskCheckForTimeOut+0xc>
  403f30:	4b19      	ldr	r3, [pc, #100]	; (403f98 <xTaskCheckForTimeOut+0x6c>)
  403f32:	4798      	blx	r3
  403f34:	bf00      	nop
  403f36:	e7fd      	b.n	403f34 <xTaskCheckForTimeOut+0x8>
  403f38:	460d      	mov	r5, r1
  403f3a:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  403f3c:	b919      	cbnz	r1, 403f46 <xTaskCheckForTimeOut+0x1a>
  403f3e:	4b16      	ldr	r3, [pc, #88]	; (403f98 <xTaskCheckForTimeOut+0x6c>)
  403f40:	4798      	blx	r3
  403f42:	bf00      	nop
  403f44:	e7fd      	b.n	403f42 <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
  403f46:	4b15      	ldr	r3, [pc, #84]	; (403f9c <xTaskCheckForTimeOut+0x70>)
  403f48:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  403f4a:	682b      	ldr	r3, [r5, #0]
  403f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
  403f50:	d018      	beq.n	403f84 <xTaskCheckForTimeOut+0x58>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  403f52:	4a13      	ldr	r2, [pc, #76]	; (403fa0 <xTaskCheckForTimeOut+0x74>)
  403f54:	6812      	ldr	r2, [r2, #0]
  403f56:	6821      	ldr	r1, [r4, #0]
  403f58:	4291      	cmp	r1, r2
  403f5a:	d004      	beq.n	403f66 <xTaskCheckForTimeOut+0x3a>
  403f5c:	4a11      	ldr	r2, [pc, #68]	; (403fa4 <xTaskCheckForTimeOut+0x78>)
  403f5e:	6812      	ldr	r2, [r2, #0]
  403f60:	6861      	ldr	r1, [r4, #4]
  403f62:	4291      	cmp	r1, r2
  403f64:	d910      	bls.n	403f88 <xTaskCheckForTimeOut+0x5c>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  403f66:	4a0f      	ldr	r2, [pc, #60]	; (403fa4 <xTaskCheckForTimeOut+0x78>)
  403f68:	6811      	ldr	r1, [r2, #0]
  403f6a:	6860      	ldr	r0, [r4, #4]
  403f6c:	1a09      	subs	r1, r1, r0
  403f6e:	428b      	cmp	r3, r1
  403f70:	d90c      	bls.n	403f8c <xTaskCheckForTimeOut+0x60>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  403f72:	6812      	ldr	r2, [r2, #0]
  403f74:	1a12      	subs	r2, r2, r0
  403f76:	1a9b      	subs	r3, r3, r2
  403f78:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  403f7a:	4620      	mov	r0, r4
  403f7c:	4b0a      	ldr	r3, [pc, #40]	; (403fa8 <xTaskCheckForTimeOut+0x7c>)
  403f7e:	4798      	blx	r3
			xReturn = pdFALSE;
  403f80:	2400      	movs	r4, #0
  403f82:	e004      	b.n	403f8e <xTaskCheckForTimeOut+0x62>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
  403f84:	2400      	movs	r4, #0
  403f86:	e002      	b.n	403f8e <xTaskCheckForTimeOut+0x62>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  403f88:	2401      	movs	r4, #1
  403f8a:	e000      	b.n	403f8e <xTaskCheckForTimeOut+0x62>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
  403f8c:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
  403f8e:	4b07      	ldr	r3, [pc, #28]	; (403fac <xTaskCheckForTimeOut+0x80>)
  403f90:	4798      	blx	r3

	return xReturn;
}
  403f92:	4620      	mov	r0, r4
  403f94:	bd38      	pop	{r3, r4, r5, pc}
  403f96:	bf00      	nop
  403f98:	00402fc5 	.word	0x00402fc5
  403f9c:	00402fd5 	.word	0x00402fd5
  403fa0:	20002930 	.word	0x20002930
  403fa4:	20002934 	.word	0x20002934
  403fa8:	00403f05 	.word	0x00403f05
  403fac:	00402ff5 	.word	0x00402ff5

00403fb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
  403fb0:	2201      	movs	r2, #1
  403fb2:	4b01      	ldr	r3, [pc, #4]	; (403fb8 <vTaskMissedYield+0x8>)
  403fb4:	601a      	str	r2, [r3, #0]
  403fb6:	4770      	bx	lr
  403fb8:	20002958 	.word	0x20002958

00403fbc <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  403fbc:	4b01      	ldr	r3, [pc, #4]	; (403fc4 <xTaskGetCurrentTaskHandle+0x8>)
  403fbe:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
  403fc0:	4770      	bx	lr
  403fc2:	bf00      	nop
  403fc4:	20002918 	.word	0x20002918

00403fc8 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  403fc8:	4b05      	ldr	r3, [pc, #20]	; (403fe0 <xTaskGetSchedulerState+0x18>)
  403fca:	681b      	ldr	r3, [r3, #0]
  403fcc:	b133      	cbz	r3, 403fdc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  403fce:	4b05      	ldr	r3, [pc, #20]	; (403fe4 <xTaskGetSchedulerState+0x1c>)
  403fd0:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  403fd2:	2b00      	cmp	r3, #0
  403fd4:	bf0c      	ite	eq
  403fd6:	2001      	moveq	r0, #1
  403fd8:	2002      	movne	r0, #2
  403fda:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  403fdc:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
  403fde:	4770      	bx	lr
  403fe0:	20002880 	.word	0x20002880
  403fe4:	20002914 	.word	0x20002914

00403fe8 <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  403fe8:	2800      	cmp	r0, #0
  403fea:	d031      	beq.n	404050 <vTaskPriorityInherit+0x68>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  403fec:	b538      	push	{r3, r4, r5, lr}

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  403fee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  403ff0:	4918      	ldr	r1, [pc, #96]	; (404054 <vTaskPriorityInherit+0x6c>)
  403ff2:	6809      	ldr	r1, [r1, #0]
  403ff4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  403ff6:	428b      	cmp	r3, r1
  403ff8:	d229      	bcs.n	40404e <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  403ffa:	4916      	ldr	r1, [pc, #88]	; (404054 <vTaskPriorityInherit+0x6c>)
  403ffc:	6809      	ldr	r1, [r1, #0]
  403ffe:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  404000:	f1c1 0105 	rsb	r1, r1, #5
  404004:	6181      	str	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  404006:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40400a:	4913      	ldr	r1, [pc, #76]	; (404058 <vTaskPriorityInherit+0x70>)
  40400c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  404010:	6941      	ldr	r1, [r0, #20]
  404012:	4299      	cmp	r1, r3
  404014:	d117      	bne.n	404046 <vTaskPriorityInherit+0x5e>
  404016:	4605      	mov	r5, r0
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  404018:	1d04      	adds	r4, r0, #4
  40401a:	4620      	mov	r0, r4
  40401c:	4b0f      	ldr	r3, [pc, #60]	; (40405c <vTaskPriorityInherit+0x74>)
  40401e:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  404020:	4b0c      	ldr	r3, [pc, #48]	; (404054 <vTaskPriorityInherit+0x6c>)
  404022:	681b      	ldr	r3, [r3, #0]
  404024:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  404026:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
  404028:	4b0d      	ldr	r3, [pc, #52]	; (404060 <vTaskPriorityInherit+0x78>)
  40402a:	681b      	ldr	r3, [r3, #0]
  40402c:	4298      	cmp	r0, r3
  40402e:	bf84      	itt	hi
  404030:	4b0b      	ldrhi	r3, [pc, #44]	; (404060 <vTaskPriorityInherit+0x78>)
  404032:	6018      	strhi	r0, [r3, #0]
  404034:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404038:	4621      	mov	r1, r4
  40403a:	4b07      	ldr	r3, [pc, #28]	; (404058 <vTaskPriorityInherit+0x70>)
  40403c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  404040:	4b08      	ldr	r3, [pc, #32]	; (404064 <vTaskPriorityInherit+0x7c>)
  404042:	4798      	blx	r3
  404044:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  404046:	4b03      	ldr	r3, [pc, #12]	; (404054 <vTaskPriorityInherit+0x6c>)
  404048:	681b      	ldr	r3, [r3, #0]
  40404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40404c:	62c3      	str	r3, [r0, #44]	; 0x2c
  40404e:	bd38      	pop	{r3, r4, r5, pc}
  404050:	4770      	bx	lr
  404052:	bf00      	nop
  404054:	20002918 	.word	0x20002918
  404058:	200028b0 	.word	0x200028b0
  40405c:	00402f3d 	.word	0x00402f3d
  404060:	2000293c 	.word	0x2000293c
  404064:	00402ee5 	.word	0x00402ee5

00404068 <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
  404068:	b1e8      	cbz	r0, 4040a6 <vTaskPriorityDisinherit+0x3e>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  40406a:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  40406c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  40406e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  404070:	4291      	cmp	r1, r2
  404072:	d017      	beq.n	4040a4 <vTaskPriorityDisinherit+0x3c>
  404074:	4604      	mov	r4, r0
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  404076:	1d05      	adds	r5, r0, #4
  404078:	4628      	mov	r0, r5
  40407a:	4b0b      	ldr	r3, [pc, #44]	; (4040a8 <vTaskPriorityDisinherit+0x40>)
  40407c:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  40407e:	6c20      	ldr	r0, [r4, #64]	; 0x40
  404080:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  404082:	f1c0 0305 	rsb	r3, r0, #5
  404086:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
  404088:	4b08      	ldr	r3, [pc, #32]	; (4040ac <vTaskPriorityDisinherit+0x44>)
  40408a:	681b      	ldr	r3, [r3, #0]
  40408c:	4298      	cmp	r0, r3
  40408e:	bf84      	itt	hi
  404090:	4b06      	ldrhi	r3, [pc, #24]	; (4040ac <vTaskPriorityDisinherit+0x44>)
  404092:	6018      	strhi	r0, [r3, #0]
  404094:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404098:	4629      	mov	r1, r5
  40409a:	4b05      	ldr	r3, [pc, #20]	; (4040b0 <vTaskPriorityDisinherit+0x48>)
  40409c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4040a0:	4b04      	ldr	r3, [pc, #16]	; (4040b4 <vTaskPriorityDisinherit+0x4c>)
  4040a2:	4798      	blx	r3
  4040a4:	bd38      	pop	{r3, r4, r5, pc}
  4040a6:	4770      	bx	lr
  4040a8:	00402f3d 	.word	0x00402f3d
  4040ac:	2000293c 	.word	0x2000293c
  4040b0:	200028b0 	.word	0x200028b0
  4040b4:	00402ee5 	.word	0x00402ee5

004040b8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  4040b8:	b508      	push	{r3, lr}
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  4040ba:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4040bc:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  4040be:	4291      	cmp	r1, r2
  4040c0:	d80a      	bhi.n	4040d8 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  4040c2:	1ad2      	subs	r2, r2, r3
  4040c4:	6983      	ldr	r3, [r0, #24]
  4040c6:	429a      	cmp	r2, r3
  4040c8:	d211      	bcs.n	4040ee <prvInsertTimerInActiveList+0x36>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  4040ca:	1d01      	adds	r1, r0, #4
  4040cc:	4b0a      	ldr	r3, [pc, #40]	; (4040f8 <prvInsertTimerInActiveList+0x40>)
  4040ce:	6818      	ldr	r0, [r3, #0]
  4040d0:	4b0a      	ldr	r3, [pc, #40]	; (4040fc <prvInsertTimerInActiveList+0x44>)
  4040d2:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
  4040d4:	2000      	movs	r0, #0
  4040d6:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  4040d8:	429a      	cmp	r2, r3
  4040da:	d201      	bcs.n	4040e0 <prvInsertTimerInActiveList+0x28>
  4040dc:	4299      	cmp	r1, r3
  4040de:	d208      	bcs.n	4040f2 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4040e0:	1d01      	adds	r1, r0, #4
  4040e2:	4b07      	ldr	r3, [pc, #28]	; (404100 <prvInsertTimerInActiveList+0x48>)
  4040e4:	6818      	ldr	r0, [r3, #0]
  4040e6:	4b05      	ldr	r3, [pc, #20]	; (4040fc <prvInsertTimerInActiveList+0x44>)
  4040e8:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
  4040ea:	2000      	movs	r0, #0
  4040ec:	bd08      	pop	{r3, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  4040ee:	2001      	movs	r0, #1
  4040f0:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  4040f2:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  4040f4:	bd08      	pop	{r3, pc}
  4040f6:	bf00      	nop
  4040f8:	20002998 	.word	0x20002998
  4040fc:	00402f01 	.word	0x00402f01
  404100:	20002964 	.word	0x20002964

00404104 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  404104:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  404106:	4b0d      	ldr	r3, [pc, #52]	; (40413c <prvCheckForValidListAndQueue+0x38>)
  404108:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  40410a:	4b0d      	ldr	r3, [pc, #52]	; (404140 <prvCheckForValidListAndQueue+0x3c>)
  40410c:	681b      	ldr	r3, [r3, #0]
  40410e:	b98b      	cbnz	r3, 404134 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
  404110:	4d0c      	ldr	r5, [pc, #48]	; (404144 <prvCheckForValidListAndQueue+0x40>)
  404112:	4628      	mov	r0, r5
  404114:	4e0c      	ldr	r6, [pc, #48]	; (404148 <prvCheckForValidListAndQueue+0x44>)
  404116:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  404118:	4c0c      	ldr	r4, [pc, #48]	; (40414c <prvCheckForValidListAndQueue+0x48>)
  40411a:	4620      	mov	r0, r4
  40411c:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  40411e:	4b0c      	ldr	r3, [pc, #48]	; (404150 <prvCheckForValidListAndQueue+0x4c>)
  404120:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  404122:	4b0c      	ldr	r3, [pc, #48]	; (404154 <prvCheckForValidListAndQueue+0x50>)
  404124:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  404126:	2200      	movs	r2, #0
  404128:	210c      	movs	r1, #12
  40412a:	2005      	movs	r0, #5
  40412c:	4b0a      	ldr	r3, [pc, #40]	; (404158 <prvCheckForValidListAndQueue+0x54>)
  40412e:	4798      	blx	r3
  404130:	4b03      	ldr	r3, [pc, #12]	; (404140 <prvCheckForValidListAndQueue+0x3c>)
  404132:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
  404134:	4b09      	ldr	r3, [pc, #36]	; (40415c <prvCheckForValidListAndQueue+0x58>)
  404136:	4798      	blx	r3
  404138:	bd70      	pop	{r4, r5, r6, pc}
  40413a:	bf00      	nop
  40413c:	00402fd5 	.word	0x00402fd5
  404140:	20002994 	.word	0x20002994
  404144:	20002968 	.word	0x20002968
  404148:	00402ec5 	.word	0x00402ec5
  40414c:	2000297c 	.word	0x2000297c
  404150:	20002964 	.word	0x20002964
  404154:	20002998 	.word	0x20002998
  404158:	004033c1 	.word	0x004033c1
  40415c:	00402ff5 	.word	0x00402ff5

00404160 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
  404160:	b510      	push	{r4, lr}
  404162:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  404164:	4b0b      	ldr	r3, [pc, #44]	; (404194 <xTimerCreateTimerTask+0x34>)
  404166:	4798      	blx	r3

	if( xTimerQueue != NULL )
  404168:	4b0b      	ldr	r3, [pc, #44]	; (404198 <xTimerCreateTimerTask+0x38>)
  40416a:	681b      	ldr	r3, [r3, #0]
  40416c:	b15b      	cbz	r3, 404186 <xTimerCreateTimerTask+0x26>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  40416e:	2300      	movs	r3, #0
  404170:	9303      	str	r3, [sp, #12]
  404172:	9302      	str	r3, [sp, #8]
  404174:	9301      	str	r3, [sp, #4]
  404176:	2204      	movs	r2, #4
  404178:	9200      	str	r2, [sp, #0]
  40417a:	22c8      	movs	r2, #200	; 0xc8
  40417c:	4907      	ldr	r1, [pc, #28]	; (40419c <xTimerCreateTimerTask+0x3c>)
  40417e:	4808      	ldr	r0, [pc, #32]	; (4041a0 <xTimerCreateTimerTask+0x40>)
  404180:	4c08      	ldr	r4, [pc, #32]	; (4041a4 <xTimerCreateTimerTask+0x44>)
  404182:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
  404184:	b918      	cbnz	r0, 40418e <xTimerCreateTimerTask+0x2e>
  404186:	4b08      	ldr	r3, [pc, #32]	; (4041a8 <xTimerCreateTimerTask+0x48>)
  404188:	4798      	blx	r3
  40418a:	bf00      	nop
  40418c:	e7fd      	b.n	40418a <xTimerCreateTimerTask+0x2a>
	return xReturn;
}
  40418e:	b004      	add	sp, #16
  404190:	bd10      	pop	{r4, pc}
  404192:	bf00      	nop
  404194:	00404105 	.word	0x00404105
  404198:	20002994 	.word	0x20002994
  40419c:	0040852c 	.word	0x0040852c
  4041a0:	004042b5 	.word	0x004042b5
  4041a4:	004037c5 	.word	0x004037c5
  4041a8:	00402fc5 	.word	0x00402fc5

004041ac <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
  4041ac:	b530      	push	{r4, r5, lr}
  4041ae:	b085      	sub	sp, #20
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  4041b0:	4c0f      	ldr	r4, [pc, #60]	; (4041f0 <xTimerGenericCommand+0x44>)
  4041b2:	6825      	ldr	r5, [r4, #0]
  4041b4:	b1cd      	cbz	r5, 4041ea <xTimerGenericCommand+0x3e>
  4041b6:	461c      	mov	r4, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  4041b8:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
  4041ba:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  4041bc:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
  4041be:	b96c      	cbnz	r4, 4041dc <xTimerGenericCommand+0x30>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  4041c0:	4b0c      	ldr	r3, [pc, #48]	; (4041f4 <xTimerGenericCommand+0x48>)
  4041c2:	4798      	blx	r3
  4041c4:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  4041c6:	f04f 0300 	mov.w	r3, #0
  4041ca:	bf0c      	ite	eq
  4041cc:	9a08      	ldreq	r2, [sp, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  4041ce:	461a      	movne	r2, r3
  4041d0:	a901      	add	r1, sp, #4
  4041d2:	4807      	ldr	r0, [pc, #28]	; (4041f0 <xTimerGenericCommand+0x44>)
  4041d4:	6800      	ldr	r0, [r0, #0]
  4041d6:	4c08      	ldr	r4, [pc, #32]	; (4041f8 <xTimerGenericCommand+0x4c>)
  4041d8:	47a0      	blx	r4
  4041da:	e007      	b.n	4041ec <xTimerGenericCommand+0x40>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4041dc:	2300      	movs	r3, #0
  4041de:	4622      	mov	r2, r4
  4041e0:	a901      	add	r1, sp, #4
  4041e2:	4628      	mov	r0, r5
  4041e4:	4c05      	ldr	r4, [pc, #20]	; (4041fc <xTimerGenericCommand+0x50>)
  4041e6:	47a0      	blx	r4
  4041e8:	e000      	b.n	4041ec <xTimerGenericCommand+0x40>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
  4041ea:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
  4041ec:	b005      	add	sp, #20
  4041ee:	bd30      	pop	{r4, r5, pc}
  4041f0:	20002994 	.word	0x20002994
  4041f4:	00403fc9 	.word	0x00403fc9
  4041f8:	00403415 	.word	0x00403415
  4041fc:	00403535 	.word	0x00403535

00404200 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
  404200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404204:	b082      	sub	sp, #8
  404206:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
  404208:	4b22      	ldr	r3, [pc, #136]	; (404294 <prvSampleTimeNow+0x94>)
  40420a:	4798      	blx	r3
  40420c:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
  40420e:	4b22      	ldr	r3, [pc, #136]	; (404298 <prvSampleTimeNow+0x98>)
  404210:	681b      	ldr	r3, [r3, #0]
  404212:	4298      	cmp	r0, r3
  404214:	d234      	bcs.n	404280 <prvSampleTimeNow+0x80>
  404216:	e024      	b.n	404262 <prvSampleTimeNow+0x62>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  404218:	68da      	ldr	r2, [r3, #12]
  40421a:	f8d2 a000 	ldr.w	sl, [r2]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40421e:	68db      	ldr	r3, [r3, #12]
  404220:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
  404222:	1d25      	adds	r5, r4, #4
  404224:	4628      	mov	r0, r5
  404226:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  404228:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40422a:	4620      	mov	r0, r4
  40422c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  40422e:	69e3      	ldr	r3, [r4, #28]
  404230:	2b01      	cmp	r3, #1
  404232:	d118      	bne.n	404266 <prvSampleTimeNow+0x66>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  404234:	69a3      	ldr	r3, [r4, #24]
  404236:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  404238:	459a      	cmp	sl, r3
  40423a:	d206      	bcs.n	40424a <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  40423c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40423e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  404240:	4629      	mov	r1, r5
  404242:	6830      	ldr	r0, [r6, #0]
  404244:	4b15      	ldr	r3, [pc, #84]	; (40429c <prvSampleTimeNow+0x9c>)
  404246:	4798      	blx	r3
  404248:	e00d      	b.n	404266 <prvSampleTimeNow+0x66>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  40424a:	2100      	movs	r1, #0
  40424c:	9100      	str	r1, [sp, #0]
  40424e:	460b      	mov	r3, r1
  404250:	4652      	mov	r2, sl
  404252:	4620      	mov	r0, r4
  404254:	4c12      	ldr	r4, [pc, #72]	; (4042a0 <prvSampleTimeNow+0xa0>)
  404256:	47a0      	blx	r4
				configASSERT( xResult );
  404258:	b928      	cbnz	r0, 404266 <prvSampleTimeNow+0x66>
  40425a:	4b12      	ldr	r3, [pc, #72]	; (4042a4 <prvSampleTimeNow+0xa4>)
  40425c:	4798      	blx	r3
  40425e:	bf00      	nop
  404260:	e7fd      	b.n	40425e <prvSampleTimeNow+0x5e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  404262:	4e11      	ldr	r6, [pc, #68]	; (4042a8 <prvSampleTimeNow+0xa8>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
  404264:	4f11      	ldr	r7, [pc, #68]	; (4042ac <prvSampleTimeNow+0xac>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  404266:	6833      	ldr	r3, [r6, #0]
  404268:	681a      	ldr	r2, [r3, #0]
  40426a:	2a00      	cmp	r2, #0
  40426c:	d1d4      	bne.n	404218 <prvSampleTimeNow+0x18>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
  40426e:	4a10      	ldr	r2, [pc, #64]	; (4042b0 <prvSampleTimeNow+0xb0>)
  404270:	6810      	ldr	r0, [r2, #0]
  404272:	490d      	ldr	r1, [pc, #52]	; (4042a8 <prvSampleTimeNow+0xa8>)
  404274:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  404276:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
  404278:	2301      	movs	r3, #1
  40427a:	f8c9 3000 	str.w	r3, [r9]
  40427e:	e002      	b.n	404286 <prvSampleTimeNow+0x86>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  404280:	2300      	movs	r3, #0
  404282:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
  404286:	4b04      	ldr	r3, [pc, #16]	; (404298 <prvSampleTimeNow+0x98>)
  404288:	f8c3 8000 	str.w	r8, [r3]

	return xTimeNow;
}
  40428c:	4640      	mov	r0, r8
  40428e:	b002      	add	sp, #8
  404290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404294:	00403a3d 	.word	0x00403a3d
  404298:	20002990 	.word	0x20002990
  40429c:	00402f01 	.word	0x00402f01
  4042a0:	004041ad 	.word	0x004041ad
  4042a4:	00402fc5 	.word	0x00402fc5
  4042a8:	20002964 	.word	0x20002964
  4042ac:	00402f3d 	.word	0x00402f3d
  4042b0:	20002998 	.word	0x20002998

004042b4 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  4042b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4042b8:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  4042ba:	4d4d      	ldr	r5, [pc, #308]	; (4043f0 <prvTimerTask+0x13c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
  4042bc:	f8df 8160 	ldr.w	r8, [pc, #352]	; 404420 <prvTimerTask+0x16c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4042c0:	4b4c      	ldr	r3, [pc, #304]	; (4043f4 <prvTimerTask+0x140>)
  4042c2:	681b      	ldr	r3, [r3, #0]
  4042c4:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  4042c6:	2a00      	cmp	r2, #0
  4042c8:	f000 8088 	beq.w	4043dc <prvTimerTask+0x128>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4042cc:	68db      	ldr	r3, [r3, #12]
  4042ce:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  4042d0:	4b49      	ldr	r3, [pc, #292]	; (4043f8 <prvTimerTask+0x144>)
  4042d2:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4042d4:	a803      	add	r0, sp, #12
  4042d6:	4b49      	ldr	r3, [pc, #292]	; (4043fc <prvTimerTask+0x148>)
  4042d8:	4798      	blx	r3
  4042da:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4042dc:	9b03      	ldr	r3, [sp, #12]
  4042de:	2b00      	cmp	r3, #0
  4042e0:	d130      	bne.n	404344 <prvTimerTask+0x90>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4042e2:	4286      	cmp	r6, r0
  4042e4:	d824      	bhi.n	404330 <prvTimerTask+0x7c>
			{
				xTaskResumeAll();
  4042e6:	4b46      	ldr	r3, [pc, #280]	; (404400 <prvTimerTask+0x14c>)
  4042e8:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4042ea:	4b42      	ldr	r3, [pc, #264]	; (4043f4 <prvTimerTask+0x140>)
  4042ec:	681b      	ldr	r3, [r3, #0]
  4042ee:	68db      	ldr	r3, [r3, #12]
  4042f0:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
  4042f2:	1d20      	adds	r0, r4, #4
  4042f4:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  4042f6:	69e3      	ldr	r3, [r4, #28]
  4042f8:	2b01      	cmp	r3, #1
  4042fa:	d114      	bne.n	404326 <prvTimerTask+0x72>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  4042fc:	69a1      	ldr	r1, [r4, #24]
  4042fe:	4633      	mov	r3, r6
  404300:	463a      	mov	r2, r7
  404302:	4431      	add	r1, r6
  404304:	4620      	mov	r0, r4
  404306:	4f3f      	ldr	r7, [pc, #252]	; (404404 <prvTimerTask+0x150>)
  404308:	47b8      	blx	r7
  40430a:	2801      	cmp	r0, #1
  40430c:	d10b      	bne.n	404326 <prvTimerTask+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  40430e:	2100      	movs	r1, #0
  404310:	9100      	str	r1, [sp, #0]
  404312:	460b      	mov	r3, r1
  404314:	4632      	mov	r2, r6
  404316:	4620      	mov	r0, r4
  404318:	4e3b      	ldr	r6, [pc, #236]	; (404408 <prvTimerTask+0x154>)
  40431a:	47b0      	blx	r6
			configASSERT( xResult );
  40431c:	b918      	cbnz	r0, 404326 <prvTimerTask+0x72>
  40431e:	4b3b      	ldr	r3, [pc, #236]	; (40440c <prvTimerTask+0x158>)
  404320:	4798      	blx	r3
  404322:	bf00      	nop
  404324:	e7fd      	b.n	404322 <prvTimerTask+0x6e>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  404326:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404328:	4620      	mov	r0, r4
  40432a:	4798      	blx	r3
  40432c:	e00c      	b.n	404348 <prvTimerTask+0x94>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
  40432e:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  404330:	1bf1      	subs	r1, r6, r7
  404332:	6828      	ldr	r0, [r5, #0]
  404334:	4b36      	ldr	r3, [pc, #216]	; (404410 <prvTimerTask+0x15c>)
  404336:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  404338:	4b31      	ldr	r3, [pc, #196]	; (404400 <prvTimerTask+0x14c>)
  40433a:	4798      	blx	r3
  40433c:	b920      	cbnz	r0, 404348 <prvTimerTask+0x94>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
  40433e:	4b35      	ldr	r3, [pc, #212]	; (404414 <prvTimerTask+0x160>)
  404340:	4798      	blx	r3
  404342:	e001      	b.n	404348 <prvTimerTask+0x94>
				}
			}
		}
		else
		{
			xTaskResumeAll();
  404344:	4b2e      	ldr	r3, [pc, #184]	; (404400 <prvTimerTask+0x14c>)
  404346:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  404348:	a802      	add	r0, sp, #8
  40434a:	4b2c      	ldr	r3, [pc, #176]	; (4043fc <prvTimerTask+0x148>)
  40434c:	4798      	blx	r3
  40434e:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  404350:	4e31      	ldr	r6, [pc, #196]	; (404418 <prvTimerTask+0x164>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  404352:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 404404 <prvTimerTask+0x150>
  404356:	e039      	b.n	4043cc <prvTimerTask+0x118>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
  404358:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
  40435a:	b11c      	cbz	r4, 404364 <prvTimerTask+0xb0>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  40435c:	6963      	ldr	r3, [r4, #20]
  40435e:	b10b      	cbz	r3, 404364 <prvTimerTask+0xb0>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
  404360:	1d20      	adds	r0, r4, #4
  404362:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
  404364:	9b03      	ldr	r3, [sp, #12]
  404366:	2b02      	cmp	r3, #2
  404368:	d020      	beq.n	4043ac <prvTimerTask+0xf8>
  40436a:	2b03      	cmp	r3, #3
  40436c:	d02b      	beq.n	4043c6 <prvTimerTask+0x112>
  40436e:	2b00      	cmp	r3, #0
  404370:	d12c      	bne.n	4043cc <prvTimerTask+0x118>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  404372:	9904      	ldr	r1, [sp, #16]
  404374:	69a0      	ldr	r0, [r4, #24]
  404376:	460b      	mov	r3, r1
  404378:	463a      	mov	r2, r7
  40437a:	4401      	add	r1, r0
  40437c:	4620      	mov	r0, r4
  40437e:	47c8      	blx	r9
  404380:	2801      	cmp	r0, #1
  404382:	d123      	bne.n	4043cc <prvTimerTask+0x118>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  404384:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404386:	4620      	mov	r0, r4
  404388:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  40438a:	69e3      	ldr	r3, [r4, #28]
  40438c:	2b01      	cmp	r3, #1
  40438e:	d11d      	bne.n	4043cc <prvTimerTask+0x118>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  404390:	69a2      	ldr	r2, [r4, #24]
  404392:	2100      	movs	r1, #0
  404394:	9100      	str	r1, [sp, #0]
  404396:	460b      	mov	r3, r1
  404398:	9804      	ldr	r0, [sp, #16]
  40439a:	4402      	add	r2, r0
  40439c:	4620      	mov	r0, r4
  40439e:	4c1a      	ldr	r4, [pc, #104]	; (404408 <prvTimerTask+0x154>)
  4043a0:	47a0      	blx	r4
						configASSERT( xResult );
  4043a2:	b998      	cbnz	r0, 4043cc <prvTimerTask+0x118>
  4043a4:	4b19      	ldr	r3, [pc, #100]	; (40440c <prvTimerTask+0x158>)
  4043a6:	4798      	blx	r3
  4043a8:	bf00      	nop
  4043aa:	e7fd      	b.n	4043a8 <prvTimerTask+0xf4>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  4043ac:	9904      	ldr	r1, [sp, #16]
  4043ae:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4043b0:	b919      	cbnz	r1, 4043ba <prvTimerTask+0x106>
  4043b2:	4b16      	ldr	r3, [pc, #88]	; (40440c <prvTimerTask+0x158>)
  4043b4:	4798      	blx	r3
  4043b6:	bf00      	nop
  4043b8:	e7fd      	b.n	4043b6 <prvTimerTask+0x102>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4043ba:	463b      	mov	r3, r7
  4043bc:	463a      	mov	r2, r7
  4043be:	4439      	add	r1, r7
  4043c0:	4620      	mov	r0, r4
  4043c2:	47c8      	blx	r9
  4043c4:	e002      	b.n	4043cc <prvTimerTask+0x118>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
  4043c6:	4620      	mov	r0, r4
  4043c8:	4b14      	ldr	r3, [pc, #80]	; (40441c <prvTimerTask+0x168>)
  4043ca:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  4043cc:	2300      	movs	r3, #0
  4043ce:	461a      	mov	r2, r3
  4043d0:	a903      	add	r1, sp, #12
  4043d2:	6828      	ldr	r0, [r5, #0]
  4043d4:	47b0      	blx	r6
  4043d6:	2800      	cmp	r0, #0
  4043d8:	d1be      	bne.n	404358 <prvTimerTask+0xa4>
  4043da:	e771      	b.n	4042c0 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  4043dc:	4b06      	ldr	r3, [pc, #24]	; (4043f8 <prvTimerTask+0x144>)
  4043de:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4043e0:	a803      	add	r0, sp, #12
  4043e2:	4b06      	ldr	r3, [pc, #24]	; (4043fc <prvTimerTask+0x148>)
  4043e4:	4798      	blx	r3
  4043e6:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4043e8:	9b03      	ldr	r3, [sp, #12]
  4043ea:	2b00      	cmp	r3, #0
  4043ec:	d09f      	beq.n	40432e <prvTimerTask+0x7a>
  4043ee:	e7a9      	b.n	404344 <prvTimerTask+0x90>
  4043f0:	20002994 	.word	0x20002994
  4043f4:	20002964 	.word	0x20002964
  4043f8:	00403a2d 	.word	0x00403a2d
  4043fc:	00404201 	.word	0x00404201
  404400:	00403b7d 	.word	0x00403b7d
  404404:	004040b9 	.word	0x004040b9
  404408:	004041ad 	.word	0x004041ad
  40440c:	00402fc5 	.word	0x00402fc5
  404410:	00403721 	.word	0x00403721
  404414:	00402fb5 	.word	0x00402fb5
  404418:	004035c5 	.word	0x004035c5
  40441c:	004031f1 	.word	0x004031f1
  404420:	00402f3d 	.word	0x00402f3d

00404424 <WriteMbusRegs>:

void WriteMbusRegs(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len)
{
    uint16_t *ptr;
    
    while(len)
  404424:	2a00      	cmp	r2, #0
  404426:	f000 80d5 	beq.w	4045d4 <WriteMbusRegs+0x1b0>
    /* Init RS485 port with PDC support */
    InitRs485Pdc();
}

void WriteMbusRegs(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len)
{
  40442a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40442e:	4607      	mov	r7, r0
  404430:	460d      	mov	r5, r1
  404432:	4614      	mov	r4, r2
    while(len)
    {
        switch(regAddr)
        {
            case MBUS_REG_SEC:
                DSSetSecsTo(twiPort, mbusBuff[regAddr],50);
  404434:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 404628 <WriteMbusRegs+0x204>
            case MBUS_REG_YY:
                DSSetYearTo(twiPort, mbusBuff[regAddr],50);
                break;
            case MBUS_REG_LATH:
                ptr = (uint16_t*)&lat;
                ptr[1] = mBusRegs[MBUS_REG_LATH];
  404438:	4e67      	ldr	r6, [pc, #412]	; (4045d8 <WriteMbusRegs+0x1b4>)
                //Write to EEPROM
//                 EEPROM0_WriteByte(mBusRegs[MBUS_REG_LATL], EE_REG_LAT0);
//                 EEPROM0_WriteByte((mBusRegs[MBUS_REG_LATL]>>8), EE_REG_LAT1);
//                 EEPROM0_WriteByte(mBusRegs[MBUS_REG_LATH], EE_REG_LAT2);
//                 EEPROM0_WriteByte((mBusRegs[MBUS_REG_LATH]>>8), EE_REG_LAT3);
				nvm_write(INT_FLASH, EE_REG_LAT0, (void *)&mBusRegs[MBUS_REG_LATL], 4);
  40443a:	f106 0b10 	add.w	fp, r6, #16
                //Write to EEPROM
//                 EEPROM0_WriteByte(mBusRegs[MBUS_REG_PNLRNGL], EE_REG_PNLRNG0);
//                 EEPROM0_WriteByte((mBusRegs[MBUS_REG_PNLRNGL]>>8), EE_REG_PNLRNG1);
//                 EEPROM0_WriteByte(mBusRegs[MBUS_REG_PNLRNGH], EE_REG_PNLRNG2);
//                 EEPROM0_WriteByte((mBusRegs[MBUS_REG_PNLRNGH]>>8), EE_REG_PNLRNG3);
				nvm_write(INT_FLASH, EE_REG_PNLRNG0, (void *)&mBusRegs[MBUS_REG_PNLRNGL], 4);
  40443e:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 40462c <WriteMbusRegs+0x208>
{
    uint16_t *ptr;
    
    while(len)
    {
        switch(regAddr)
  404442:	2d23      	cmp	r5, #35	; 0x23
  404444:	f200 80bd 	bhi.w	4045c2 <WriteMbusRegs+0x19e>
  404448:	e8df f005 	tbb	[pc, r5]
  40444c:	33281d12 	.word	0x33281d12
  404450:	bb52483e 	.word	0xbb52483e
  404454:	67bb5abb 	.word	0x67bb5abb
  404458:	bbbb75bb 	.word	0xbbbb75bb
  40445c:	83bbbbbb 	.word	0x83bbbbbb
  404460:	bbbbbbbb 	.word	0xbbbbbbbb
  404464:	bbbbbbaf 	.word	0xbbbbbbaf
  404468:	bbbbbbbb 	.word	0xbbbbbbbb
  40446c:	a0bb91bb 	.word	0xa0bb91bb
        {
            case MBUS_REG_SEC:
                DSSetSecsTo(twiPort, mbusBuff[regAddr],50);
  404470:	2232      	movs	r2, #50	; 0x32
  404472:	7839      	ldrb	r1, [r7, #0]
  404474:	f8d8 0000 	ldr.w	r0, [r8]
  404478:	4b58      	ldr	r3, [pc, #352]	; (4045dc <WriteMbusRegs+0x1b8>)
  40447a:	4798      	blx	r3
                break;
            default:
                break;
        }    
        regAddr++;
        len--;
  40447c:	3c01      	subs	r4, #1

void WriteMbusRegs(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len)
{
    uint16_t *ptr;
    
    while(len)
  40447e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  404482:	f000 80a5 	beq.w	4045d0 <WriteMbusRegs+0x1ac>
        {
            case MBUS_REG_SEC:
                DSSetSecsTo(twiPort, mbusBuff[regAddr],50);
                break;
            case MBUS_REG_MIN:
                DSSetMinsTo(twiPort, mbusBuff[regAddr],50);
  404486:	2232      	movs	r2, #50	; 0x32
  404488:	78b9      	ldrb	r1, [r7, #2]
  40448a:	f8d8 0000 	ldr.w	r0, [r8]
  40448e:	4b54      	ldr	r3, [pc, #336]	; (4045e0 <WriteMbusRegs+0x1bc>)
  404490:	4798      	blx	r3
                break;
            default:
                break;
        }    
        regAddr++;
        len--;
  404492:	3c01      	subs	r4, #1

void WriteMbusRegs(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len)
{
    uint16_t *ptr;
    
    while(len)
  404494:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  404498:	f000 809a 	beq.w	4045d0 <WriteMbusRegs+0x1ac>
                break;
            case MBUS_REG_MIN:
                DSSetMinsTo(twiPort, mbusBuff[regAddr],50);
                break;
            case MBUS_REG_HRS:
                DSSetHrsTo(twiPort, mbusBuff[regAddr],50);
  40449c:	2232      	movs	r2, #50	; 0x32
  40449e:	7939      	ldrb	r1, [r7, #4]
  4044a0:	f8d8 0000 	ldr.w	r0, [r8]
  4044a4:	4b4f      	ldr	r3, [pc, #316]	; (4045e4 <WriteMbusRegs+0x1c0>)
  4044a6:	4798      	blx	r3
                break;
            default:
                break;
        }    
        regAddr++;
        len--;
  4044a8:	3c01      	subs	r4, #1

void WriteMbusRegs(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len)
{
    uint16_t *ptr;
    
    while(len)
  4044aa:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  4044ae:	f000 808f 	beq.w	4045d0 <WriteMbusRegs+0x1ac>
                break;
            case MBUS_REG_HRS:
                DSSetHrsTo(twiPort, mbusBuff[regAddr],50);
                break;
            case MBUS_REG_DAY:
                DSSetDayTo(twiPort, mbusBuff[regAddr],50);
  4044b2:	2232      	movs	r2, #50	; 0x32
  4044b4:	79b9      	ldrb	r1, [r7, #6]
  4044b6:	f8d8 0000 	ldr.w	r0, [r8]
  4044ba:	4b4b      	ldr	r3, [pc, #300]	; (4045e8 <WriteMbusRegs+0x1c4>)
  4044bc:	4798      	blx	r3
                break;
            default:
                break;
        }    
        regAddr++;
        len--;
  4044be:	3c01      	subs	r4, #1

void WriteMbusRegs(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len)
{
    uint16_t *ptr;
    
    while(len)
  4044c0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  4044c4:	f000 8084 	beq.w	4045d0 <WriteMbusRegs+0x1ac>
                break;
            case MBUS_REG_DAY:
                DSSetDayTo(twiPort, mbusBuff[regAddr],50);
                break;
            case MBUS_REG_DD:
                DSSetDateTo(twiPort, mbusBuff[regAddr],50);
  4044c8:	2232      	movs	r2, #50	; 0x32
  4044ca:	7a39      	ldrb	r1, [r7, #8]
  4044cc:	f8d8 0000 	ldr.w	r0, [r8]
  4044d0:	4b46      	ldr	r3, [pc, #280]	; (4045ec <WriteMbusRegs+0x1c8>)
  4044d2:	4798      	blx	r3
                break;
            default:
                break;
        }    
        regAddr++;
        len--;
  4044d4:	3c01      	subs	r4, #1

void WriteMbusRegs(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len)
{
    uint16_t *ptr;
    
    while(len)
  4044d6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  4044da:	d079      	beq.n	4045d0 <WriteMbusRegs+0x1ac>
                break;
            case MBUS_REG_DD:
                DSSetDateTo(twiPort, mbusBuff[regAddr],50);
                break;
            case MBUS_REG_MM:
                DSSetMonthTo(twiPort, mbusBuff[regAddr],50);
  4044dc:	2232      	movs	r2, #50	; 0x32
  4044de:	7ab9      	ldrb	r1, [r7, #10]
  4044e0:	f8d8 0000 	ldr.w	r0, [r8]
  4044e4:	4b42      	ldr	r3, [pc, #264]	; (4045f0 <WriteMbusRegs+0x1cc>)
  4044e6:	4798      	blx	r3
                break;
            default:
                break;
        }    
        regAddr++;
        len--;
  4044e8:	3c01      	subs	r4, #1

void WriteMbusRegs(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len)
{
    uint16_t *ptr;
    
    while(len)
  4044ea:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  4044ee:	d06f      	beq.n	4045d0 <WriteMbusRegs+0x1ac>
                break;
            case MBUS_REG_MM:
                DSSetMonthTo(twiPort, mbusBuff[regAddr],50);
                break;
            case MBUS_REG_YY:
                DSSetYearTo(twiPort, mbusBuff[regAddr],50);
  4044f0:	2232      	movs	r2, #50	; 0x32
  4044f2:	7b39      	ldrb	r1, [r7, #12]
  4044f4:	f8d8 0000 	ldr.w	r0, [r8]
  4044f8:	4b3e      	ldr	r3, [pc, #248]	; (4045f4 <WriteMbusRegs+0x1d0>)
  4044fa:	4798      	blx	r3
                break;
  4044fc:	2506      	movs	r5, #6
  4044fe:	e060      	b.n	4045c2 <WriteMbusRegs+0x19e>
            case MBUS_REG_LATH:
                ptr = (uint16_t*)&lat;
                ptr[1] = mBusRegs[MBUS_REG_LATH];
  404500:	4b3d      	ldr	r3, [pc, #244]	; (4045f8 <WriteMbusRegs+0x1d4>)
  404502:	8a72      	ldrh	r2, [r6, #18]
  404504:	805a      	strh	r2, [r3, #2]
                ptr[0] = mBusRegs[MBUS_REG_LATL];
  404506:	8a32      	ldrh	r2, [r6, #16]
  404508:	801a      	strh	r2, [r3, #0]
                //Write to EEPROM
//                 EEPROM0_WriteByte(mBusRegs[MBUS_REG_LATL], EE_REG_LAT0);
//                 EEPROM0_WriteByte((mBusRegs[MBUS_REG_LATL]>>8), EE_REG_LAT1);
//                 EEPROM0_WriteByte(mBusRegs[MBUS_REG_LATH], EE_REG_LAT2);
//                 EEPROM0_WriteByte((mBusRegs[MBUS_REG_LATH]>>8), EE_REG_LAT3);
				nvm_write(INT_FLASH, EE_REG_LAT0, (void *)&mBusRegs[MBUS_REG_LATL], 4);
  40450a:	2304      	movs	r3, #4
  40450c:	465a      	mov	r2, fp
  40450e:	493b      	ldr	r1, [pc, #236]	; (4045fc <WriteMbusRegs+0x1d8>)
  404510:	2000      	movs	r0, #0
  404512:	f8df 911c 	ldr.w	r9, [pc, #284]	; 404630 <WriteMbusRegs+0x20c>
  404516:	47c8      	blx	r9

                break;
  404518:	e053      	b.n	4045c2 <WriteMbusRegs+0x19e>
            case MBUS_REG_LONH:
                ptr = (uint16_t*)&lon;
                ptr[1] = mBusRegs[MBUS_REG_LONH];
  40451a:	4b39      	ldr	r3, [pc, #228]	; (404600 <WriteMbusRegs+0x1dc>)
  40451c:	8af2      	ldrh	r2, [r6, #22]
  40451e:	805a      	strh	r2, [r3, #2]
                ptr[0] = mBusRegs[MBUS_REG_LONL];
  404520:	4632      	mov	r2, r6
  404522:	f832 1f14 	ldrh.w	r1, [r2, #20]!
  404526:	8019      	strh	r1, [r3, #0]
                //Write to EEPROM
//                 EEPROM0_WriteByte(mBusRegs[MBUS_REG_LONL], EE_REG_LON0);
//                 EEPROM0_WriteByte((mBusRegs[MBUS_REG_LONL]>>8), EE_REG_LON1);
//                 EEPROM0_WriteByte(mBusRegs[MBUS_REG_LONH], EE_REG_LON2);
//                 EEPROM0_WriteByte((mBusRegs[MBUS_REG_LONH]>>8), EE_REG_LON3);
				nvm_write(INT_FLASH, EE_REG_LON0, (void *)&mBusRegs[MBUS_REG_LONL], 4);
  404528:	2304      	movs	r3, #4
  40452a:	4936      	ldr	r1, [pc, #216]	; (404604 <WriteMbusRegs+0x1e0>)
  40452c:	2000      	movs	r0, #0
  40452e:	f8df 9100 	ldr.w	r9, [pc, #256]	; 404630 <WriteMbusRegs+0x20c>
  404532:	47c8      	blx	r9
                break;
  404534:	e045      	b.n	4045c2 <WriteMbusRegs+0x19e>
            case MBUS_REG_TZH:
                ptr = (uint16_t*)&timeZone;
                ptr[1] = mBusRegs[MBUS_REG_TZH];
  404536:	4b34      	ldr	r3, [pc, #208]	; (404608 <WriteMbusRegs+0x1e4>)
  404538:	8b72      	ldrh	r2, [r6, #26]
  40453a:	805a      	strh	r2, [r3, #2]
                ptr[0] = mBusRegs[MBUS_REG_TZL];
  40453c:	4632      	mov	r2, r6
  40453e:	f832 1f18 	ldrh.w	r1, [r2, #24]!
  404542:	8019      	strh	r1, [r3, #0]
                //Write to EEPROM
//                 EEPROM0_WriteByte(mBusRegs[MBUS_REG_TZL], EE_REG_TZ0);
//                 EEPROM0_WriteByte((mBusRegs[MBUS_REG_TZL]>>8), EE_REG_TZ1);
//                 EEPROM0_WriteByte(mBusRegs[MBUS_REG_TZH], EE_REG_TZ2);
//                 EEPROM0_WriteByte((mBusRegs[MBUS_REG_TZH]>>8), EE_REG_TZ3);
				nvm_write(INT_FLASH, EE_REG_TZ0, (void *)&mBusRegs[MBUS_REG_TZL], 4);
  404544:	2304      	movs	r3, #4
  404546:	4931      	ldr	r1, [pc, #196]	; (40460c <WriteMbusRegs+0x1e8>)
  404548:	2000      	movs	r0, #0
  40454a:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 404630 <WriteMbusRegs+0x20c>
  40454e:	47c8      	blx	r9
                break;
  404550:	e037      	b.n	4045c2 <WriteMbusRegs+0x19e>
            case MBUS_REG_REFRH:
                break;
            case MBUS_REG_PNLRNGH:
                ptr = (uint16_t*)&pvAngleRng;
                ptr[1] = mBusRegs[MBUS_REG_PNLRNGH];
  404552:	4b2f      	ldr	r3, [pc, #188]	; (404610 <WriteMbusRegs+0x1ec>)
  404554:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
  404556:	805a      	strh	r2, [r3, #2]
                ptr[0] = mBusRegs[MBUS_REG_PNLRNGL];
  404558:	4632      	mov	r2, r6
  40455a:	f832 1f24 	ldrh.w	r1, [r2, #36]!
  40455e:	8019      	strh	r1, [r3, #0]
                //Write to EEPROM
//                 EEPROM0_WriteByte(mBusRegs[MBUS_REG_PNLRNGL], EE_REG_PNLRNG0);
//                 EEPROM0_WriteByte((mBusRegs[MBUS_REG_PNLRNGL]>>8), EE_REG_PNLRNG1);
//                 EEPROM0_WriteByte(mBusRegs[MBUS_REG_PNLRNGH], EE_REG_PNLRNG2);
//                 EEPROM0_WriteByte((mBusRegs[MBUS_REG_PNLRNGH]>>8), EE_REG_PNLRNG3);
				nvm_write(INT_FLASH, EE_REG_PNLRNG0, (void *)&mBusRegs[MBUS_REG_PNLRNGL], 4);
  404560:	2304      	movs	r3, #4
  404562:	4651      	mov	r1, sl
  404564:	2000      	movs	r0, #0
  404566:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 404630 <WriteMbusRegs+0x20c>
  40456a:	47c8      	blx	r9
                break;
  40456c:	e029      	b.n	4045c2 <WriteMbusRegs+0x19e>
            case MBUS_REG_DISTH:
                ptr = (uint16_t*)&dist;
                ptr[1] = mBusRegs[MBUS_REG_DISTH];
  40456e:	4b29      	ldr	r3, [pc, #164]	; (404614 <WriteMbusRegs+0x1f0>)
  404570:	f8b6 2042 	ldrh.w	r2, [r6, #66]	; 0x42
  404574:	805a      	strh	r2, [r3, #2]
                ptr[0] = mBusRegs[MBUS_REG_DISTL];
  404576:	4632      	mov	r2, r6
  404578:	f832 1f40 	ldrh.w	r1, [r2, #64]!
  40457c:	8019      	strh	r1, [r3, #0]
                //Write to EEPROM
//                 EEPROM0_WriteByte(mBusRegs[MBUS_REG_DISTL], EE_REG_DIST0);
//                 EEPROM0_WriteByte((mBusRegs[MBUS_REG_DISTL]>>8), EE_REG_DIST1);
//                 EEPROM0_WriteByte(mBusRegs[MBUS_REG_DISTH], EE_REG_DIST2);
//                 EEPROM0_WriteByte((mBusRegs[MBUS_REG_DISTH]>>8), EE_REG_DIST3);
				nvm_write(INT_FLASH, EE_REG_DIST0, (void *)&mBusRegs[MBUS_REG_DISTL], 4);
  40457e:	2304      	movs	r3, #4
  404580:	4925      	ldr	r1, [pc, #148]	; (404618 <WriteMbusRegs+0x1f4>)
  404582:	2000      	movs	r0, #0
  404584:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 404630 <WriteMbusRegs+0x20c>
  404588:	47c8      	blx	r9
                break;
  40458a:	e01a      	b.n	4045c2 <WriteMbusRegs+0x19e>
            case MBUS_REG_WIDTHH:
                ptr = (uint16_t*)&width;
                ptr[1] = mBusRegs[MBUS_REG_WIDTHH];
  40458c:	4b23      	ldr	r3, [pc, #140]	; (40461c <WriteMbusRegs+0x1f8>)
  40458e:	f8b6 2046 	ldrh.w	r2, [r6, #70]	; 0x46
  404592:	805a      	strh	r2, [r3, #2]
                ptr[0] = mBusRegs[MBUS_REG_WIDTHL];
  404594:	4632      	mov	r2, r6
  404596:	f832 1f44 	ldrh.w	r1, [r2, #68]!
  40459a:	8019      	strh	r1, [r3, #0]
                //Write to EEPROM
//                 EEPROM0_WriteByte(mBusRegs[MBUS_REG_WIDTHL], EE_REG_WIDTH0);
//                 EEPROM0_WriteByte((mBusRegs[MBUS_REG_WIDTHL]>>8), EE_REG_WIDTH1);
//                 EEPROM0_WriteByte(mBusRegs[MBUS_REG_WIDTHH], EE_REG_WIDTH2);
//                 EEPROM0_WriteByte((mBusRegs[MBUS_REG_WIDTHH]>>8), EE_REG_WIDTH3);
				nvm_write(INT_FLASH, EE_REG_WIDTH0, (void *)&mBusRegs[MBUS_REG_WIDTHL], 4);
  40459c:	2304      	movs	r3, #4
  40459e:	4920      	ldr	r1, [pc, #128]	; (404620 <WriteMbusRegs+0x1fc>)
  4045a0:	2000      	movs	r0, #0
  4045a2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 404630 <WriteMbusRegs+0x20c>
  4045a6:	47c8      	blx	r9
                break;
  4045a8:	e00b      	b.n	4045c2 <WriteMbusRegs+0x19e>
            case MBUS_REG_OPMODE:
                mBusRegs[MBUS_REG_MOTON] = 0;
  4045aa:	2300      	movs	r3, #0
  4045ac:	86b3      	strh	r3, [r6, #52]	; 0x34
                minCtr = 0;
  4045ae:	4a1d      	ldr	r2, [pc, #116]	; (404624 <WriteMbusRegs+0x200>)
  4045b0:	7013      	strb	r3, [r2, #0]
                //Turn Motor Off
				gpio_set_pin_low(PIN_MOTOR_RST_IDX);
  4045b2:	2020      	movs	r0, #32
  4045b4:	f8df 907c 	ldr.w	r9, [pc, #124]	; 404634 <WriteMbusRegs+0x210>
  4045b8:	47c8      	blx	r9
                gpio_set_pin_low(PIN_MOTOR_A_IDX);
  4045ba:	2021      	movs	r0, #33	; 0x21
  4045bc:	47c8      	blx	r9
				gpio_set_pin_low(PIN_MOTOR_B_IDX);
  4045be:	2022      	movs	r0, #34	; 0x22
  4045c0:	47c8      	blx	r9
                break;
            default:
                break;
        }    
        regAddr++;
  4045c2:	3501      	adds	r5, #1
  4045c4:	b2ed      	uxtb	r5, r5
        len--;
  4045c6:	3c01      	subs	r4, #1

void WriteMbusRegs(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len)
{
    uint16_t *ptr;
    
    while(len)
  4045c8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  4045cc:	f47f af39 	bne.w	404442 <WriteMbusRegs+0x1e>
  4045d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4045d4:	4770      	bx	lr
  4045d6:	bf00      	nop
  4045d8:	20000714 	.word	0x20000714
  4045dc:	004006c9 	.word	0x004006c9
  4045e0:	004006dd 	.word	0x004006dd
  4045e4:	004006f1 	.word	0x004006f1
  4045e8:	00400705 	.word	0x00400705
  4045ec:	00400719 	.word	0x00400719
  4045f0:	0040072d 	.word	0x0040072d
  4045f4:	00400741 	.word	0x00400741
  4045f8:	200000a0 	.word	0x200000a0
  4045fc:	0043fc00 	.word	0x0043fc00
  404600:	200000a4 	.word	0x200000a4
  404604:	0043fc04 	.word	0x0043fc04
  404608:	20000094 	.word	0x20000094
  40460c:	0043fc08 	.word	0x0043fc08
  404610:	2000009c 	.word	0x2000009c
  404614:	20000098 	.word	0x20000098
  404618:	0043fc0e 	.word	0x0043fc0e
  40461c:	200000a8 	.word	0x200000a8
  404620:	0043fc12 	.word	0x0043fc12
  404624:	2000075d 	.word	0x2000075d
  404628:	200029a0 	.word	0x200029a0
  40462c:	0043fc16 	.word	0x0043fc16
  404630:	0040019d 	.word	0x0040019d
  404634:	004027b1 	.word	0x004027b1

00404638 <vCommInit>:
		}
    }
}

void vCommInit(void)
{
  404638:	b508      	push	{r3, lr}
    /* Init RS485 port with PDC support */
    InitRs485Pdc();
  40463a:	4b01      	ldr	r3, [pc, #4]	; (404640 <vCommInit+0x8>)
  40463c:	4798      	blx	r3
  40463e:	bd08      	pop	{r3, pc}
  404640:	00401965 	.word	0x00401965

00404644 <SendRespPkt>:
        len--;
    }
}

void SendRespPkt(uint8_t *pkt, uint8_t len)
{
  404644:	b570      	push	{r4, r5, r6, lr}
  404646:	4604      	mov	r4, r0
  404648:	460d      	mov	r5, r1
	usart_enable_tx(RS485_USART);
  40464a:	480a      	ldr	r0, [pc, #40]	; (404674 <SendRespPkt+0x30>)
  40464c:	4b0a      	ldr	r3, [pc, #40]	; (404678 <SendRespPkt+0x34>)
  40464e:	4798      	blx	r3
	/* 3.5 Char Wait Time */
	
	/* Start PDC Transfer */
	Rs485PdcStartTx((uint32_t)pkt, len);
  404650:	4629      	mov	r1, r5
  404652:	4620      	mov	r0, r4
  404654:	4b09      	ldr	r3, [pc, #36]	; (40467c <SendRespPkt+0x38>)
  404656:	4798      	blx	r3

	/* Wait till tx completes */
	while(!Rs485PdcGetTxStatus())
  404658:	4c09      	ldr	r4, [pc, #36]	; (404680 <SendRespPkt+0x3c>)
		vTaskDelay(10);
  40465a:	260a      	movs	r6, #10
  40465c:	4d09      	ldr	r5, [pc, #36]	; (404684 <SendRespPkt+0x40>)
	
	/* Start PDC Transfer */
	Rs485PdcStartTx((uint32_t)pkt, len);

	/* Wait till tx completes */
	while(!Rs485PdcGetTxStatus())
  40465e:	e001      	b.n	404664 <SendRespPkt+0x20>
		vTaskDelay(10);
  404660:	4630      	mov	r0, r6
  404662:	47a8      	blx	r5
	
	/* Start PDC Transfer */
	Rs485PdcStartTx((uint32_t)pkt, len);

	/* Wait till tx completes */
	while(!Rs485PdcGetTxStatus())
  404664:	47a0      	blx	r4
  404666:	2800      	cmp	r0, #0
  404668:	d0fa      	beq.n	404660 <SendRespPkt+0x1c>
		vTaskDelay(10);

	/* 3.5 Char Wait Time */

	usart_disable_tx(RS485_USART);
  40466a:	4802      	ldr	r0, [pc, #8]	; (404674 <SendRespPkt+0x30>)
  40466c:	4b06      	ldr	r3, [pc, #24]	; (404688 <SendRespPkt+0x44>)
  40466e:	4798      	blx	r3
  404670:	bd70      	pop	{r4, r5, r6, pc}
  404672:	bf00      	nop
  404674:	40024000 	.word	0x40024000
  404678:	004024e9 	.word	0x004024e9
  40467c:	004019d5 	.word	0x004019d5
  404680:	00401a3d 	.word	0x00401a3d
  404684:	00403c81 	.word	0x00403c81
  404688:	004024f1 	.word	0x004024f1

0040468c <vCommTask>:

void WriteMbusRegs(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len);
void SendRespPkt(uint8_t *pkt, uint8_t len);

void vCommTask(void *pvParameters)
{
  40468c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404690:	b0d1      	sub	sp, #324	; 0x144
    
	/* RS485 Rx buffer */
	uint8_t rs485RxBuffer[RS485_BUFFER_SIZE];
	/* RS485 Tx buffer */
    uint8_t respBuff[RS485_BUFFER_SIZE], respLen = 0;
  404692:	2400      	movs	r4, #0
  404694:	f88d 400f 	strb.w	r4, [sp, #15]
    uint8_t commState = 0, recvdBytes = 0, prevRecvdBytes;
    /* Init Mbus writeFunc() ptr */
    writeFunc = WriteMbusRegs;
  404698:	4a2b      	ldr	r2, [pc, #172]	; (404748 <vCommTask+0xbc>)
  40469a:	4b2c      	ldr	r3, [pc, #176]	; (40474c <vCommTask+0xc0>)
  40469c:	601a      	str	r2, [r3, #0]
	
	/* Start Receiving Data */
	usart_disable_tx(RS485_USART);
  40469e:	4e2c      	ldr	r6, [pc, #176]	; (404750 <vCommTask+0xc4>)
  4046a0:	4630      	mov	r0, r6
  4046a2:	4b2c      	ldr	r3, [pc, #176]	; (404754 <vCommTask+0xc8>)
  4046a4:	4798      	blx	r3
	usart_enable_rx(RS485_USART);
  4046a6:	4630      	mov	r0, r6
  4046a8:	4b2b      	ldr	r3, [pc, #172]	; (404758 <vCommTask+0xcc>)
  4046aa:	4798      	blx	r3
	Rs485PdcStartRx((uint32_t)rs485RxBuffer,RS485_BUFFER_SIZE);
  4046ac:	2196      	movs	r1, #150	; 0x96
  4046ae:	a82a      	add	r0, sp, #168	; 0xa8
  4046b0:	4b2a      	ldr	r3, [pc, #168]	; (40475c <vCommTask+0xd0>)
  4046b2:	4798      	blx	r3

    while(1)
    {
        /* Sleep for some time and check if data recvd */
        //vTaskDelay(pdMS_TO_TICKS(40));
		vTaskDelay(40);
  4046b4:	4f2a      	ldr	r7, [pc, #168]	; (404760 <vCommTask+0xd4>)
        
		recvdBytes = Rs485PdcGetRxBytes();
  4046b6:	4e2b      	ldr	r6, [pc, #172]	; (404764 <vCommTask+0xd8>)
					prevRecvdBytes = recvdBytes;
				}
				else
				{
					/* 1 Modbus Pkt received. Process it. */
					usart_disable_rx(RS485_USART);
  4046b8:	f8df 9094 	ldr.w	r9, [pc, #148]	; 404750 <vCommTask+0xc4>
  4046bc:	e000      	b.n	4046c0 <vCommTask+0x34>
				}
				break;
			case 1:
				if(prevRecvdBytes != recvdBytes)
				{
					prevRecvdBytes = recvdBytes;
  4046be:	4605      	mov	r5, r0

    while(1)
    {
        /* Sleep for some time and check if data recvd */
        //vTaskDelay(pdMS_TO_TICKS(40));
		vTaskDelay(40);
  4046c0:	2028      	movs	r0, #40	; 0x28
  4046c2:	47b8      	blx	r7
        
		recvdBytes = Rs485PdcGetRxBytes();
  4046c4:	47b0      	blx	r6
  4046c6:	b2c0      	uxtb	r0, r0
		/* Check if data received on 485 */
		switch(commState)
  4046c8:	b114      	cbz	r4, 4046d0 <vCommTask+0x44>
  4046ca:	2c01      	cmp	r4, #1
  4046cc:	d007      	beq.n	4046de <vCommTask+0x52>
  4046ce:	e7f7      	b.n	4046c0 <vCommTask+0x34>
		{
			case 0:
				if(recvdBytes!=0)
				{
					commState = 1;
					prevRecvdBytes = recvdBytes;
  4046d0:	2800      	cmp	r0, #0
  4046d2:	bf18      	it	ne
  4046d4:	4605      	movne	r5, r0
  4046d6:	2800      	cmp	r0, #0
  4046d8:	bf18      	it	ne
  4046da:	2401      	movne	r4, #1
  4046dc:	e7f0      	b.n	4046c0 <vCommTask+0x34>
				}
				break;
			case 1:
				if(prevRecvdBytes != recvdBytes)
  4046de:	4285      	cmp	r5, r0
  4046e0:	d1ed      	bne.n	4046be <vCommTask+0x32>
					prevRecvdBytes = recvdBytes;
				}
				else
				{
					/* 1 Modbus Pkt received. Process it. */
					usart_disable_rx(RS485_USART);
  4046e2:	4648      	mov	r0, r9
  4046e4:	4b20      	ldr	r3, [pc, #128]	; (404768 <vCommTask+0xdc>)
  4046e6:	4798      	blx	r3
					pdc_disable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN);
  4046e8:	2101      	movs	r1, #1
  4046ea:	4b20      	ldr	r3, [pc, #128]	; (40476c <vCommTask+0xe0>)
  4046ec:	6818      	ldr	r0, [r3, #0]
  4046ee:	4b20      	ldr	r3, [pc, #128]	; (404770 <vCommTask+0xe4>)
  4046f0:	4798      	blx	r3

					/* Parse Received MBUS Pkt, update actual variables */
					ParseMbusPkt(slaveAddr, rs485RxBuffer, recvdBytes, respBuff, &respLen);
  4046f2:	4b20      	ldr	r3, [pc, #128]	; (404774 <vCommTask+0xe8>)
  4046f4:	7818      	ldrb	r0, [r3, #0]
  4046f6:	f10d 040f 	add.w	r4, sp, #15
  4046fa:	9400      	str	r4, [sp, #0]
  4046fc:	ab04      	add	r3, sp, #16
  4046fe:	462a      	mov	r2, r5
  404700:	a92a      	add	r1, sp, #168	; 0xa8
  404702:	f8df 8080 	ldr.w	r8, [pc, #128]	; 404784 <vCommTask+0xf8>
  404706:	47c0      	blx	r8
				
					/* Generate MBus Resp */
					if(respLen)
  404708:	7821      	ldrb	r1, [r4, #0]
  40470a:	b111      	cbz	r1, 404712 <vCommTask+0x86>
					{
						SendRespPkt(respBuff, respLen);
  40470c:	a804      	add	r0, sp, #16
  40470e:	4b1a      	ldr	r3, [pc, #104]	; (404778 <vCommTask+0xec>)
  404710:	4798      	blx	r3
					}
					
					memset((uint8_t *)rs485RxBuffer,0,sizeof(rs485RxBuffer));
  404712:	f04f 0896 	mov.w	r8, #150	; 0x96
  404716:	4642      	mov	r2, r8
  404718:	2100      	movs	r1, #0
  40471a:	a82a      	add	r0, sp, #168	; 0xa8
  40471c:	4c17      	ldr	r4, [pc, #92]	; (40477c <vCommTask+0xf0>)
  40471e:	47a0      	blx	r4
					memset(respBuff,0,sizeof(respBuff));
  404720:	4642      	mov	r2, r8
  404722:	2100      	movs	r1, #0
  404724:	a804      	add	r0, sp, #16
  404726:	47a0      	blx	r4
					respLen = 0;
  404728:	2400      	movs	r4, #0
  40472a:	f88d 400f 	strb.w	r4, [sp, #15]
					commState = 0;
					
					usart_enable_rx(RS485_USART);
  40472e:	4648      	mov	r0, r9
  404730:	4b09      	ldr	r3, [pc, #36]	; (404758 <vCommTask+0xcc>)
  404732:	4798      	blx	r3
					pdc_enable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN);
  404734:	2101      	movs	r1, #1
  404736:	4b0d      	ldr	r3, [pc, #52]	; (40476c <vCommTask+0xe0>)
  404738:	6818      	ldr	r0, [r3, #0]
  40473a:	4b11      	ldr	r3, [pc, #68]	; (404780 <vCommTask+0xf4>)
  40473c:	4798      	blx	r3
					Rs485PdcStartRx((uint32_t)rs485RxBuffer,RS485_BUFFER_SIZE);
  40473e:	4641      	mov	r1, r8
  404740:	a82a      	add	r0, sp, #168	; 0xa8
  404742:	4b06      	ldr	r3, [pc, #24]	; (40475c <vCommTask+0xd0>)
  404744:	4798      	blx	r3
  404746:	e7bb      	b.n	4046c0 <vCommTask+0x34>
  404748:	00404425 	.word	0x00404425
  40474c:	2000299c 	.word	0x2000299c
  404750:	40024000 	.word	0x40024000
  404754:	004024f1 	.word	0x004024f1
  404758:	004024f9 	.word	0x004024f9
  40475c:	004019f9 	.word	0x004019f9
  404760:	00403c81 	.word	0x00403c81
  404764:	00401a1d 	.word	0x00401a1d
  404768:	00402501 	.word	0x00402501
  40476c:	200029a4 	.word	0x200029a4
  404770:	00402399 	.word	0x00402399
  404774:	200000c0 	.word	0x200000c0
  404778:	00404645 	.word	0x00404645
  40477c:	004082c5 	.word	0x004082c5
  404780:	0040238d 	.word	0x0040238d
  404784:	00400959 	.word	0x00400959

00404788 <vBlinkTask>:
	vPvTrackerInit();
	vCommInit();
}

void vBlinkTask( void *pvParameters )
{
  404788:	b580      	push	{r7, lr}
	while(1)
	{
		gpio_set_pin_high(PIN_DEBUGLED_IDX);
  40478a:	2610      	movs	r6, #16
  40478c:	4f06      	ldr	r7, [pc, #24]	; (4047a8 <vBlinkTask+0x20>)
		vTaskDelay(500);
  40478e:	f44f 75fa 	mov.w	r5, #500	; 0x1f4

void vBlinkTask( void *pvParameters )
{
	while(1)
	{
		gpio_set_pin_high(PIN_DEBUGLED_IDX);
  404792:	4630      	mov	r0, r6
  404794:	47b8      	blx	r7
		vTaskDelay(500);
  404796:	4628      	mov	r0, r5
  404798:	4c04      	ldr	r4, [pc, #16]	; (4047ac <vBlinkTask+0x24>)
  40479a:	47a0      	blx	r4
		gpio_set_pin_low(PIN_DEBUGLED_IDX);
  40479c:	4630      	mov	r0, r6
  40479e:	4b04      	ldr	r3, [pc, #16]	; (4047b0 <vBlinkTask+0x28>)
  4047a0:	4798      	blx	r3
		vTaskDelay(500);
  4047a2:	4628      	mov	r0, r5
  4047a4:	47a0      	blx	r4
  4047a6:	e7f4      	b.n	404792 <vBlinkTask+0xa>
  4047a8:	00402795 	.word	0x00402795
  4047ac:	00403c81 	.word	0x00403c81
  4047b0:	004027b1 	.word	0x004027b1

004047b4 <vApplicationMallocFailedHook>:
// 	taskDISABLE_INTERRUPTS();
// 	for( ;; );
// }
// 
void vApplicationMallocFailedHook( void )
{
  4047b4:	b508      	push	{r3, lr}
	/* The heap space has been execeeded. */
	taskDISABLE_INTERRUPTS();
  4047b6:	4b01      	ldr	r3, [pc, #4]	; (4047bc <vApplicationMallocFailedHook+0x8>)
  4047b8:	4798      	blx	r3
  4047ba:	e7fe      	b.n	4047ba <vApplicationMallocFailedHook+0x6>
  4047bc:	00402fc5 	.word	0x00402fc5

004047c0 <vInitPeripherals>:
	for( ;; );
}

void vInitPeripherals( void )
{
  4047c0:	b508      	push	{r3, lr}
	#if defined(DEBUG_EN) || defined(LOG_EN)
		Debug_Start();
	#endif
	
	delay_ms(1000);
  4047c2:	4804      	ldr	r0, [pc, #16]	; (4047d4 <vInitPeripherals+0x14>)
  4047c4:	4b04      	ldr	r3, [pc, #16]	; (4047d8 <vInitPeripherals+0x18>)
  4047c6:	4798      	blx	r3
	
	/* Initialize all RTOS vars */
	//vCCInit();
	vPvTrackerInit();
  4047c8:	4b04      	ldr	r3, [pc, #16]	; (4047dc <vInitPeripherals+0x1c>)
  4047ca:	4798      	blx	r3
	vCommInit();
  4047cc:	4b04      	ldr	r3, [pc, #16]	; (4047e0 <vInitPeripherals+0x20>)
  4047ce:	4798      	blx	r3
  4047d0:	bd08      	pop	{r3, pc}
  4047d2:	bf00      	nop
  4047d4:	0082ca25 	.word	0x0082ca25
  4047d8:	20000089 	.word	0x20000089
  4047dc:	00400c91 	.word	0x00400c91
  4047e0:	00404639 	.word	0x00404639

004047e4 <main>:
	Code untested. 

*/

int main (void)
{
  4047e4:	b500      	push	{lr}
  4047e6:	b085      	sub	sp, #20
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
  4047e8:	4b14      	ldr	r3, [pc, #80]	; (40483c <main+0x58>)
  4047ea:	4798      	blx	r3

	/* Initialize all peripherals */
	board_init();
  4047ec:	4b14      	ldr	r3, [pc, #80]	; (404840 <main+0x5c>)
  4047ee:	4798      	blx	r3
	delay_init(sysclk_get_cpu_hz());

	vInitPeripherals();
  4047f0:	4b14      	ldr	r3, [pc, #80]	; (404844 <main+0x60>)
  4047f2:	4798      	blx	r3
    
    /* Enable global interrupts. */   
    
//     xTaskCreate(vCCTask, "Cc", 100, NULL, 2, NULL);
    xTaskCreate(vPvTrackerTask, (const signed char *)"Pv", 300, NULL, 1, NULL);
  4047f4:	2400      	movs	r4, #0
  4047f6:	9403      	str	r4, [sp, #12]
  4047f8:	9402      	str	r4, [sp, #8]
  4047fa:	9401      	str	r4, [sp, #4]
  4047fc:	2601      	movs	r6, #1
  4047fe:	9600      	str	r6, [sp, #0]
  404800:	4623      	mov	r3, r4
  404802:	f44f 7296 	mov.w	r2, #300	; 0x12c
  404806:	4910      	ldr	r1, [pc, #64]	; (404848 <main+0x64>)
  404808:	4810      	ldr	r0, [pc, #64]	; (40484c <main+0x68>)
  40480a:	4d11      	ldr	r5, [pc, #68]	; (404850 <main+0x6c>)
  40480c:	47a8      	blx	r5
    xTaskCreate(vCommTask, (const signed char *)"Comm", 512, NULL, 1, NULL);
  40480e:	9403      	str	r4, [sp, #12]
  404810:	9402      	str	r4, [sp, #8]
  404812:	9401      	str	r4, [sp, #4]
  404814:	9600      	str	r6, [sp, #0]
  404816:	4623      	mov	r3, r4
  404818:	f44f 7200 	mov.w	r2, #512	; 0x200
  40481c:	490d      	ldr	r1, [pc, #52]	; (404854 <main+0x70>)
  40481e:	480e      	ldr	r0, [pc, #56]	; (404858 <main+0x74>)
  404820:	47a8      	blx	r5
	xTaskCreate(vBlinkTask, (const signed char *)"Blinky", 100, NULL, 1, NULL);
  404822:	9403      	str	r4, [sp, #12]
  404824:	9402      	str	r4, [sp, #8]
  404826:	9401      	str	r4, [sp, #4]
  404828:	9600      	str	r6, [sp, #0]
  40482a:	4623      	mov	r3, r4
  40482c:	2264      	movs	r2, #100	; 0x64
  40482e:	490b      	ldr	r1, [pc, #44]	; (40485c <main+0x78>)
  404830:	480b      	ldr	r0, [pc, #44]	; (404860 <main+0x7c>)
  404832:	47a8      	blx	r5
    
    /* Start Watchdog Timer */
        
    vTaskStartScheduler();
  404834:	4b0b      	ldr	r3, [pc, #44]	; (404864 <main+0x80>)
  404836:	4798      	blx	r3
  404838:	e7fe      	b.n	404838 <main+0x54>
  40483a:	bf00      	nop
  40483c:	00402605 	.word	0x00402605
  404840:	00402551 	.word	0x00402551
  404844:	004047c1 	.word	0x004047c1
  404848:	00408534 	.word	0x00408534
  40484c:	004018d1 	.word	0x004018d1
  404850:	004037c5 	.word	0x004037c5
  404854:	00408538 	.word	0x00408538
  404858:	0040468d 	.word	0x0040468d
  40485c:	00408540 	.word	0x00408540
  404860:	00404789 	.word	0x00404789
  404864:	004039c5 	.word	0x004039c5

00404868 <cos>:
  404868:	b530      	push	{r4, r5, lr}
  40486a:	4a22      	ldr	r2, [pc, #136]	; (4048f4 <cos+0x8c>)
  40486c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  404870:	4293      	cmp	r3, r2
  404872:	b087      	sub	sp, #28
  404874:	dd1b      	ble.n	4048ae <cos+0x46>
  404876:	4a20      	ldr	r2, [pc, #128]	; (4048f8 <cos+0x90>)
  404878:	4293      	cmp	r3, r2
  40487a:	dd05      	ble.n	404888 <cos+0x20>
  40487c:	4602      	mov	r2, r0
  40487e:	460b      	mov	r3, r1
  404880:	f002 fc50 	bl	407124 <__aeabi_dsub>
  404884:	b007      	add	sp, #28
  404886:	bd30      	pop	{r4, r5, pc}
  404888:	aa02      	add	r2, sp, #8
  40488a:	f000 ff09 	bl	4056a0 <__ieee754_rem_pio2>
  40488e:	f000 0303 	and.w	r3, r0, #3
  404892:	2b01      	cmp	r3, #1
  404894:	d01a      	beq.n	4048cc <cos+0x64>
  404896:	2b02      	cmp	r3, #2
  404898:	d00f      	beq.n	4048ba <cos+0x52>
  40489a:	b31b      	cbz	r3, 4048e4 <cos+0x7c>
  40489c:	2401      	movs	r4, #1
  40489e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4048a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4048a6:	9400      	str	r4, [sp, #0]
  4048a8:	f001 fefe 	bl	4066a8 <__kernel_sin>
  4048ac:	e7ea      	b.n	404884 <cos+0x1c>
  4048ae:	2200      	movs	r2, #0
  4048b0:	2300      	movs	r3, #0
  4048b2:	f001 f9d9 	bl	405c68 <__kernel_cos>
  4048b6:	b007      	add	sp, #28
  4048b8:	bd30      	pop	{r4, r5, pc}
  4048ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4048be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4048c2:	f001 f9d1 	bl	405c68 <__kernel_cos>
  4048c6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4048ca:	e7db      	b.n	404884 <cos+0x1c>
  4048cc:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  4048d0:	9300      	str	r3, [sp, #0]
  4048d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4048d6:	4622      	mov	r2, r4
  4048d8:	462b      	mov	r3, r5
  4048da:	f001 fee5 	bl	4066a8 <__kernel_sin>
  4048de:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4048e2:	e7cf      	b.n	404884 <cos+0x1c>
  4048e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4048e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4048ec:	f001 f9bc 	bl	405c68 <__kernel_cos>
  4048f0:	e7c8      	b.n	404884 <cos+0x1c>
  4048f2:	bf00      	nop
  4048f4:	3fe921fb 	.word	0x3fe921fb
  4048f8:	7fefffff 	.word	0x7fefffff

004048fc <sin>:
  4048fc:	b530      	push	{r4, r5, lr}
  4048fe:	4a1f      	ldr	r2, [pc, #124]	; (40497c <sin+0x80>)
  404900:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  404904:	4293      	cmp	r3, r2
  404906:	b087      	sub	sp, #28
  404908:	dd1b      	ble.n	404942 <sin+0x46>
  40490a:	4a1d      	ldr	r2, [pc, #116]	; (404980 <sin+0x84>)
  40490c:	4293      	cmp	r3, r2
  40490e:	dd05      	ble.n	40491c <sin+0x20>
  404910:	4602      	mov	r2, r0
  404912:	460b      	mov	r3, r1
  404914:	f002 fc06 	bl	407124 <__aeabi_dsub>
  404918:	b007      	add	sp, #28
  40491a:	bd30      	pop	{r4, r5, pc}
  40491c:	aa02      	add	r2, sp, #8
  40491e:	f000 febf 	bl	4056a0 <__ieee754_rem_pio2>
  404922:	f000 0003 	and.w	r0, r0, #3
  404926:	2801      	cmp	r0, #1
  404928:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40492c:	d01a      	beq.n	404964 <sin+0x68>
  40492e:	2802      	cmp	r0, #2
  404930:	d00f      	beq.n	404952 <sin+0x56>
  404932:	b1e0      	cbz	r0, 40496e <sin+0x72>
  404934:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404938:	f001 f996 	bl	405c68 <__kernel_cos>
  40493c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  404940:	e7ea      	b.n	404918 <sin+0x1c>
  404942:	2300      	movs	r3, #0
  404944:	9300      	str	r3, [sp, #0]
  404946:	2200      	movs	r2, #0
  404948:	2300      	movs	r3, #0
  40494a:	f001 fead 	bl	4066a8 <__kernel_sin>
  40494e:	b007      	add	sp, #28
  404950:	bd30      	pop	{r4, r5, pc}
  404952:	2401      	movs	r4, #1
  404954:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404958:	9400      	str	r4, [sp, #0]
  40495a:	f001 fea5 	bl	4066a8 <__kernel_sin>
  40495e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  404962:	e7d9      	b.n	404918 <sin+0x1c>
  404964:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404968:	f001 f97e 	bl	405c68 <__kernel_cos>
  40496c:	e7d4      	b.n	404918 <sin+0x1c>
  40496e:	2401      	movs	r4, #1
  404970:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404974:	9400      	str	r4, [sp, #0]
  404976:	f001 fe97 	bl	4066a8 <__kernel_sin>
  40497a:	e7cd      	b.n	404918 <sin+0x1c>
  40497c:	3fe921fb 	.word	0x3fe921fb
  404980:	7fefffff 	.word	0x7fefffff

00404984 <tan>:
  404984:	b530      	push	{r4, r5, lr}
  404986:	4a14      	ldr	r2, [pc, #80]	; (4049d8 <tan+0x54>)
  404988:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  40498c:	4293      	cmp	r3, r2
  40498e:	b087      	sub	sp, #28
  404990:	dd19      	ble.n	4049c6 <tan+0x42>
  404992:	4a12      	ldr	r2, [pc, #72]	; (4049dc <tan+0x58>)
  404994:	4293      	cmp	r3, r2
  404996:	dd05      	ble.n	4049a4 <tan+0x20>
  404998:	4602      	mov	r2, r0
  40499a:	460b      	mov	r3, r1
  40499c:	f002 fbc2 	bl	407124 <__aeabi_dsub>
  4049a0:	b007      	add	sp, #28
  4049a2:	bd30      	pop	{r4, r5, pc}
  4049a4:	aa02      	add	r2, sp, #8
  4049a6:	f000 fe7b 	bl	4056a0 <__ieee754_rem_pio2>
  4049aa:	0044      	lsls	r4, r0, #1
  4049ac:	f004 0402 	and.w	r4, r4, #2
  4049b0:	f1c4 0401 	rsb	r4, r4, #1
  4049b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4049b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4049bc:	9400      	str	r4, [sp, #0]
  4049be:	f001 ff2b 	bl	406818 <__kernel_tan>
  4049c2:	b007      	add	sp, #28
  4049c4:	bd30      	pop	{r4, r5, pc}
  4049c6:	2301      	movs	r3, #1
  4049c8:	9300      	str	r3, [sp, #0]
  4049ca:	2200      	movs	r2, #0
  4049cc:	2300      	movs	r3, #0
  4049ce:	f001 ff23 	bl	406818 <__kernel_tan>
  4049d2:	b007      	add	sp, #28
  4049d4:	bd30      	pop	{r4, r5, pc}
  4049d6:	bf00      	nop
  4049d8:	3fe921fb 	.word	0x3fe921fb
  4049dc:	7fefffff 	.word	0x7fefffff

004049e0 <acos>:
  4049e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4049e4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 404a8c <acos+0xac>
  4049e8:	b08b      	sub	sp, #44	; 0x2c
  4049ea:	4604      	mov	r4, r0
  4049ec:	460d      	mov	r5, r1
  4049ee:	f000 f907 	bl	404c00 <__ieee754_acos>
  4049f2:	f998 3000 	ldrsb.w	r3, [r8]
  4049f6:	3301      	adds	r3, #1
  4049f8:	4606      	mov	r6, r0
  4049fa:	460f      	mov	r7, r1
  4049fc:	d02e      	beq.n	404a5c <acos+0x7c>
  4049fe:	4622      	mov	r2, r4
  404a00:	462b      	mov	r3, r5
  404a02:	4620      	mov	r0, r4
  404a04:	4629      	mov	r1, r5
  404a06:	f002 ffdb 	bl	4079c0 <__aeabi_dcmpun>
  404a0a:	4681      	mov	r9, r0
  404a0c:	bb30      	cbnz	r0, 404a5c <acos+0x7c>
  404a0e:	4620      	mov	r0, r4
  404a10:	4629      	mov	r1, r5
  404a12:	f002 fa67 	bl	406ee4 <fabs>
  404a16:	2200      	movs	r2, #0
  404a18:	4b19      	ldr	r3, [pc, #100]	; (404a80 <acos+0xa0>)
  404a1a:	f002 ffc7 	bl	4079ac <__aeabi_dcmpgt>
  404a1e:	b1e8      	cbz	r0, 404a5c <acos+0x7c>
  404a20:	4b18      	ldr	r3, [pc, #96]	; (404a84 <acos+0xa4>)
  404a22:	4819      	ldr	r0, [pc, #100]	; (404a88 <acos+0xa8>)
  404a24:	f8cd 9020 	str.w	r9, [sp, #32]
  404a28:	2201      	movs	r2, #1
  404a2a:	e88d 000c 	stmia.w	sp, {r2, r3}
  404a2e:	e9cd 4504 	strd	r4, r5, [sp, #16]
  404a32:	e9cd 4502 	strd	r4, r5, [sp, #8]
  404a36:	f002 fae5 	bl	407004 <nan>
  404a3a:	f998 3000 	ldrsb.w	r3, [r8]
  404a3e:	2b02      	cmp	r3, #2
  404a40:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404a44:	d00f      	beq.n	404a66 <acos+0x86>
  404a46:	4668      	mov	r0, sp
  404a48:	f002 fada 	bl	407000 <matherr>
  404a4c:	b158      	cbz	r0, 404a66 <acos+0x86>
  404a4e:	9b08      	ldr	r3, [sp, #32]
  404a50:	b983      	cbnz	r3, 404a74 <acos+0x94>
  404a52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  404a56:	b00b      	add	sp, #44	; 0x2c
  404a58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404a5c:	4630      	mov	r0, r6
  404a5e:	4639      	mov	r1, r7
  404a60:	b00b      	add	sp, #44	; 0x2c
  404a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404a66:	f003 fb33 	bl	4080d0 <__errno>
  404a6a:	2321      	movs	r3, #33	; 0x21
  404a6c:	6003      	str	r3, [r0, #0]
  404a6e:	9b08      	ldr	r3, [sp, #32]
  404a70:	2b00      	cmp	r3, #0
  404a72:	d0ee      	beq.n	404a52 <acos+0x72>
  404a74:	f003 fb2c 	bl	4080d0 <__errno>
  404a78:	9b08      	ldr	r3, [sp, #32]
  404a7a:	6003      	str	r3, [r0, #0]
  404a7c:	e7e9      	b.n	404a52 <acos+0x72>
  404a7e:	bf00      	nop
  404a80:	3ff00000 	.word	0x3ff00000
  404a84:	00408548 	.word	0x00408548
  404a88:	00408528 	.word	0x00408528
  404a8c:	200000c1 	.word	0x200000c1

00404a90 <asin>:
  404a90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404a94:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 404b3c <asin+0xac>
  404a98:	b08b      	sub	sp, #44	; 0x2c
  404a9a:	4604      	mov	r4, r0
  404a9c:	460d      	mov	r5, r1
  404a9e:	f000 fb03 	bl	4050a8 <__ieee754_asin>
  404aa2:	f998 3000 	ldrsb.w	r3, [r8]
  404aa6:	3301      	adds	r3, #1
  404aa8:	4606      	mov	r6, r0
  404aaa:	460f      	mov	r7, r1
  404aac:	d02e      	beq.n	404b0c <asin+0x7c>
  404aae:	4622      	mov	r2, r4
  404ab0:	462b      	mov	r3, r5
  404ab2:	4620      	mov	r0, r4
  404ab4:	4629      	mov	r1, r5
  404ab6:	f002 ff83 	bl	4079c0 <__aeabi_dcmpun>
  404aba:	4681      	mov	r9, r0
  404abc:	bb30      	cbnz	r0, 404b0c <asin+0x7c>
  404abe:	4620      	mov	r0, r4
  404ac0:	4629      	mov	r1, r5
  404ac2:	f002 fa0f 	bl	406ee4 <fabs>
  404ac6:	2200      	movs	r2, #0
  404ac8:	4b19      	ldr	r3, [pc, #100]	; (404b30 <asin+0xa0>)
  404aca:	f002 ff6f 	bl	4079ac <__aeabi_dcmpgt>
  404ace:	b1e8      	cbz	r0, 404b0c <asin+0x7c>
  404ad0:	4b18      	ldr	r3, [pc, #96]	; (404b34 <asin+0xa4>)
  404ad2:	4819      	ldr	r0, [pc, #100]	; (404b38 <asin+0xa8>)
  404ad4:	f8cd 9020 	str.w	r9, [sp, #32]
  404ad8:	2201      	movs	r2, #1
  404ada:	e88d 000c 	stmia.w	sp, {r2, r3}
  404ade:	e9cd 4504 	strd	r4, r5, [sp, #16]
  404ae2:	e9cd 4502 	strd	r4, r5, [sp, #8]
  404ae6:	f002 fa8d 	bl	407004 <nan>
  404aea:	f998 3000 	ldrsb.w	r3, [r8]
  404aee:	2b02      	cmp	r3, #2
  404af0:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404af4:	d00f      	beq.n	404b16 <asin+0x86>
  404af6:	4668      	mov	r0, sp
  404af8:	f002 fa82 	bl	407000 <matherr>
  404afc:	b158      	cbz	r0, 404b16 <asin+0x86>
  404afe:	9b08      	ldr	r3, [sp, #32]
  404b00:	b983      	cbnz	r3, 404b24 <asin+0x94>
  404b02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  404b06:	b00b      	add	sp, #44	; 0x2c
  404b08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404b0c:	4630      	mov	r0, r6
  404b0e:	4639      	mov	r1, r7
  404b10:	b00b      	add	sp, #44	; 0x2c
  404b12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404b16:	f003 fadb 	bl	4080d0 <__errno>
  404b1a:	2321      	movs	r3, #33	; 0x21
  404b1c:	6003      	str	r3, [r0, #0]
  404b1e:	9b08      	ldr	r3, [sp, #32]
  404b20:	2b00      	cmp	r3, #0
  404b22:	d0ee      	beq.n	404b02 <asin+0x72>
  404b24:	f003 fad4 	bl	4080d0 <__errno>
  404b28:	9b08      	ldr	r3, [sp, #32]
  404b2a:	6003      	str	r3, [r0, #0]
  404b2c:	e7e9      	b.n	404b02 <asin+0x72>
  404b2e:	bf00      	nop
  404b30:	3ff00000 	.word	0x3ff00000
  404b34:	00408550 	.word	0x00408550
  404b38:	00408528 	.word	0x00408528
  404b3c:	200000c1 	.word	0x200000c1

00404b40 <atan2>:
  404b40:	f000 bce2 	b.w	405508 <__ieee754_atan2>

00404b44 <sqrt>:
  404b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404b48:	b08b      	sub	sp, #44	; 0x2c
  404b4a:	4604      	mov	r4, r0
  404b4c:	460d      	mov	r5, r1
  404b4e:	f000 ffc9 	bl	405ae4 <__ieee754_sqrt>
  404b52:	4b28      	ldr	r3, [pc, #160]	; (404bf4 <sqrt+0xb0>)
  404b54:	f993 a000 	ldrsb.w	sl, [r3]
  404b58:	f1ba 3fff 	cmp.w	sl, #4294967295
  404b5c:	4606      	mov	r6, r0
  404b5e:	460f      	mov	r7, r1
  404b60:	d012      	beq.n	404b88 <sqrt+0x44>
  404b62:	4622      	mov	r2, r4
  404b64:	462b      	mov	r3, r5
  404b66:	4620      	mov	r0, r4
  404b68:	4629      	mov	r1, r5
  404b6a:	f002 ff29 	bl	4079c0 <__aeabi_dcmpun>
  404b6e:	4683      	mov	fp, r0
  404b70:	b950      	cbnz	r0, 404b88 <sqrt+0x44>
  404b72:	f04f 0800 	mov.w	r8, #0
  404b76:	f04f 0900 	mov.w	r9, #0
  404b7a:	4642      	mov	r2, r8
  404b7c:	464b      	mov	r3, r9
  404b7e:	4620      	mov	r0, r4
  404b80:	4629      	mov	r1, r5
  404b82:	f002 fef5 	bl	407970 <__aeabi_dcmplt>
  404b86:	b920      	cbnz	r0, 404b92 <sqrt+0x4e>
  404b88:	4630      	mov	r0, r6
  404b8a:	4639      	mov	r1, r7
  404b8c:	b00b      	add	sp, #44	; 0x2c
  404b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b92:	4b19      	ldr	r3, [pc, #100]	; (404bf8 <sqrt+0xb4>)
  404b94:	f8cd b020 	str.w	fp, [sp, #32]
  404b98:	2201      	movs	r2, #1
  404b9a:	e9cd 4504 	strd	r4, r5, [sp, #16]
  404b9e:	e9cd 4502 	strd	r4, r5, [sp, #8]
  404ba2:	e88d 000c 	stmia.w	sp, {r2, r3}
  404ba6:	f1ba 0f00 	cmp.w	sl, #0
  404baa:	d015      	beq.n	404bd8 <sqrt+0x94>
  404bac:	4642      	mov	r2, r8
  404bae:	464b      	mov	r3, r9
  404bb0:	4640      	mov	r0, r8
  404bb2:	4649      	mov	r1, r9
  404bb4:	f002 fd94 	bl	4076e0 <__aeabi_ddiv>
  404bb8:	f1ba 0f02 	cmp.w	sl, #2
  404bbc:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404bc0:	d10c      	bne.n	404bdc <sqrt+0x98>
  404bc2:	f003 fa85 	bl	4080d0 <__errno>
  404bc6:	2321      	movs	r3, #33	; 0x21
  404bc8:	6003      	str	r3, [r0, #0]
  404bca:	9b08      	ldr	r3, [sp, #32]
  404bcc:	b963      	cbnz	r3, 404be8 <sqrt+0xa4>
  404bce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  404bd2:	b00b      	add	sp, #44	; 0x2c
  404bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404bd8:	e9cd 8906 	strd	r8, r9, [sp, #24]
  404bdc:	4668      	mov	r0, sp
  404bde:	f002 fa0f 	bl	407000 <matherr>
  404be2:	2800      	cmp	r0, #0
  404be4:	d1f1      	bne.n	404bca <sqrt+0x86>
  404be6:	e7ec      	b.n	404bc2 <sqrt+0x7e>
  404be8:	f003 fa72 	bl	4080d0 <__errno>
  404bec:	9b08      	ldr	r3, [sp, #32]
  404bee:	6003      	str	r3, [r0, #0]
  404bf0:	e7ed      	b.n	404bce <sqrt+0x8a>
  404bf2:	bf00      	nop
  404bf4:	200000c1 	.word	0x200000c1
  404bf8:	00408558 	.word	0x00408558
  404bfc:	00000000 	.word	0x00000000

00404c00 <__ieee754_acos>:
  404c00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404c04:	4ec4      	ldr	r6, [pc, #784]	; (404f18 <__ieee754_acos+0x318>)
  404c06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  404c0a:	42b3      	cmp	r3, r6
  404c0c:	460c      	mov	r4, r1
  404c0e:	4605      	mov	r5, r0
  404c10:	dd0d      	ble.n	404c2e <__ieee754_acos+0x2e>
  404c12:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
  404c16:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
  404c1a:	4303      	orrs	r3, r0
  404c1c:	f040 80b9 	bne.w	404d92 <__ieee754_acos+0x192>
  404c20:	2900      	cmp	r1, #0
  404c22:	f340 8140 	ble.w	404ea6 <__ieee754_acos+0x2a6>
  404c26:	2000      	movs	r0, #0
  404c28:	2100      	movs	r1, #0
  404c2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c2e:	4ebb      	ldr	r6, [pc, #748]	; (404f1c <__ieee754_acos+0x31c>)
  404c30:	42b3      	cmp	r3, r6
  404c32:	f340 80a6 	ble.w	404d82 <__ieee754_acos+0x182>
  404c36:	2900      	cmp	r1, #0
  404c38:	f2c0 8178 	blt.w	404f2c <__ieee754_acos+0x32c>
  404c3c:	4602      	mov	r2, r0
  404c3e:	460b      	mov	r3, r1
  404c40:	2000      	movs	r0, #0
  404c42:	49b7      	ldr	r1, [pc, #732]	; (404f20 <__ieee754_acos+0x320>)
  404c44:	f002 fa6e 	bl	407124 <__aeabi_dsub>
  404c48:	2200      	movs	r2, #0
  404c4a:	4bb6      	ldr	r3, [pc, #728]	; (404f24 <__ieee754_acos+0x324>)
  404c4c:	f002 fc1e 	bl	40748c <__aeabi_dmul>
  404c50:	4604      	mov	r4, r0
  404c52:	460d      	mov	r5, r1
  404c54:	f000 ff46 	bl	405ae4 <__ieee754_sqrt>
  404c58:	a395      	add	r3, pc, #596	; (adr r3, 404eb0 <__ieee754_acos+0x2b0>)
  404c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c5e:	4689      	mov	r9, r1
  404c60:	4680      	mov	r8, r0
  404c62:	4629      	mov	r1, r5
  404c64:	4620      	mov	r0, r4
  404c66:	f002 fc11 	bl	40748c <__aeabi_dmul>
  404c6a:	a393      	add	r3, pc, #588	; (adr r3, 404eb8 <__ieee754_acos+0x2b8>)
  404c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c70:	f002 fa5a 	bl	407128 <__adddf3>
  404c74:	4622      	mov	r2, r4
  404c76:	462b      	mov	r3, r5
  404c78:	f002 fc08 	bl	40748c <__aeabi_dmul>
  404c7c:	a390      	add	r3, pc, #576	; (adr r3, 404ec0 <__ieee754_acos+0x2c0>)
  404c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c82:	f002 fa4f 	bl	407124 <__aeabi_dsub>
  404c86:	4622      	mov	r2, r4
  404c88:	462b      	mov	r3, r5
  404c8a:	f002 fbff 	bl	40748c <__aeabi_dmul>
  404c8e:	a38e      	add	r3, pc, #568	; (adr r3, 404ec8 <__ieee754_acos+0x2c8>)
  404c90:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c94:	f002 fa48 	bl	407128 <__adddf3>
  404c98:	4622      	mov	r2, r4
  404c9a:	462b      	mov	r3, r5
  404c9c:	f002 fbf6 	bl	40748c <__aeabi_dmul>
  404ca0:	a38b      	add	r3, pc, #556	; (adr r3, 404ed0 <__ieee754_acos+0x2d0>)
  404ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
  404ca6:	f002 fa3d 	bl	407124 <__aeabi_dsub>
  404caa:	4622      	mov	r2, r4
  404cac:	462b      	mov	r3, r5
  404cae:	f002 fbed 	bl	40748c <__aeabi_dmul>
  404cb2:	a389      	add	r3, pc, #548	; (adr r3, 404ed8 <__ieee754_acos+0x2d8>)
  404cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
  404cb8:	f002 fa36 	bl	407128 <__adddf3>
  404cbc:	4622      	mov	r2, r4
  404cbe:	462b      	mov	r3, r5
  404cc0:	f002 fbe4 	bl	40748c <__aeabi_dmul>
  404cc4:	a386      	add	r3, pc, #536	; (adr r3, 404ee0 <__ieee754_acos+0x2e0>)
  404cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
  404cca:	4682      	mov	sl, r0
  404ccc:	468b      	mov	fp, r1
  404cce:	4620      	mov	r0, r4
  404cd0:	4629      	mov	r1, r5
  404cd2:	f002 fbdb 	bl	40748c <__aeabi_dmul>
  404cd6:	a384      	add	r3, pc, #528	; (adr r3, 404ee8 <__ieee754_acos+0x2e8>)
  404cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
  404cdc:	f002 fa22 	bl	407124 <__aeabi_dsub>
  404ce0:	4622      	mov	r2, r4
  404ce2:	462b      	mov	r3, r5
  404ce4:	f002 fbd2 	bl	40748c <__aeabi_dmul>
  404ce8:	a381      	add	r3, pc, #516	; (adr r3, 404ef0 <__ieee754_acos+0x2f0>)
  404cea:	e9d3 2300 	ldrd	r2, r3, [r3]
  404cee:	f002 fa1b 	bl	407128 <__adddf3>
  404cf2:	4622      	mov	r2, r4
  404cf4:	462b      	mov	r3, r5
  404cf6:	f002 fbc9 	bl	40748c <__aeabi_dmul>
  404cfa:	a37f      	add	r3, pc, #508	; (adr r3, 404ef8 <__ieee754_acos+0x2f8>)
  404cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d00:	f002 fa10 	bl	407124 <__aeabi_dsub>
  404d04:	4622      	mov	r2, r4
  404d06:	462b      	mov	r3, r5
  404d08:	f002 fbc0 	bl	40748c <__aeabi_dmul>
  404d0c:	2200      	movs	r2, #0
  404d0e:	4b84      	ldr	r3, [pc, #528]	; (404f20 <__ieee754_acos+0x320>)
  404d10:	f002 fa0a 	bl	407128 <__adddf3>
  404d14:	4602      	mov	r2, r0
  404d16:	460b      	mov	r3, r1
  404d18:	4650      	mov	r0, sl
  404d1a:	4659      	mov	r1, fp
  404d1c:	f002 fce0 	bl	4076e0 <__aeabi_ddiv>
  404d20:	4642      	mov	r2, r8
  404d22:	464b      	mov	r3, r9
  404d24:	f002 fbb2 	bl	40748c <__aeabi_dmul>
  404d28:	2600      	movs	r6, #0
  404d2a:	4682      	mov	sl, r0
  404d2c:	468b      	mov	fp, r1
  404d2e:	4632      	mov	r2, r6
  404d30:	464b      	mov	r3, r9
  404d32:	4630      	mov	r0, r6
  404d34:	4649      	mov	r1, r9
  404d36:	f002 fba9 	bl	40748c <__aeabi_dmul>
  404d3a:	4602      	mov	r2, r0
  404d3c:	460b      	mov	r3, r1
  404d3e:	4620      	mov	r0, r4
  404d40:	4629      	mov	r1, r5
  404d42:	f002 f9ef 	bl	407124 <__aeabi_dsub>
  404d46:	4632      	mov	r2, r6
  404d48:	4604      	mov	r4, r0
  404d4a:	460d      	mov	r5, r1
  404d4c:	464b      	mov	r3, r9
  404d4e:	4640      	mov	r0, r8
  404d50:	4649      	mov	r1, r9
  404d52:	f002 f9e9 	bl	407128 <__adddf3>
  404d56:	4602      	mov	r2, r0
  404d58:	460b      	mov	r3, r1
  404d5a:	4620      	mov	r0, r4
  404d5c:	4629      	mov	r1, r5
  404d5e:	f002 fcbf 	bl	4076e0 <__aeabi_ddiv>
  404d62:	4602      	mov	r2, r0
  404d64:	460b      	mov	r3, r1
  404d66:	4650      	mov	r0, sl
  404d68:	4659      	mov	r1, fp
  404d6a:	f002 f9dd 	bl	407128 <__adddf3>
  404d6e:	4632      	mov	r2, r6
  404d70:	464b      	mov	r3, r9
  404d72:	f002 f9d9 	bl	407128 <__adddf3>
  404d76:	4602      	mov	r2, r0
  404d78:	460b      	mov	r3, r1
  404d7a:	f002 f9d5 	bl	407128 <__adddf3>
  404d7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d82:	4a69      	ldr	r2, [pc, #420]	; (404f28 <__ieee754_acos+0x328>)
  404d84:	4293      	cmp	r3, r2
  404d86:	dc0e      	bgt.n	404da6 <__ieee754_acos+0x1a6>
  404d88:	a15d      	add	r1, pc, #372	; (adr r1, 404f00 <__ieee754_acos+0x300>)
  404d8a:	e9d1 0100 	ldrd	r0, r1, [r1]
  404d8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d92:	4602      	mov	r2, r0
  404d94:	460b      	mov	r3, r1
  404d96:	f002 f9c5 	bl	407124 <__aeabi_dsub>
  404d9a:	4602      	mov	r2, r0
  404d9c:	460b      	mov	r3, r1
  404d9e:	f002 fc9f 	bl	4076e0 <__aeabi_ddiv>
  404da2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404da6:	4602      	mov	r2, r0
  404da8:	460b      	mov	r3, r1
  404daa:	f002 fb6f 	bl	40748c <__aeabi_dmul>
  404dae:	a340      	add	r3, pc, #256	; (adr r3, 404eb0 <__ieee754_acos+0x2b0>)
  404db0:	e9d3 2300 	ldrd	r2, r3, [r3]
  404db4:	4606      	mov	r6, r0
  404db6:	460f      	mov	r7, r1
  404db8:	f002 fb68 	bl	40748c <__aeabi_dmul>
  404dbc:	a33e      	add	r3, pc, #248	; (adr r3, 404eb8 <__ieee754_acos+0x2b8>)
  404dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
  404dc2:	f002 f9b1 	bl	407128 <__adddf3>
  404dc6:	4632      	mov	r2, r6
  404dc8:	463b      	mov	r3, r7
  404dca:	f002 fb5f 	bl	40748c <__aeabi_dmul>
  404dce:	a33c      	add	r3, pc, #240	; (adr r3, 404ec0 <__ieee754_acos+0x2c0>)
  404dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
  404dd4:	f002 f9a6 	bl	407124 <__aeabi_dsub>
  404dd8:	4632      	mov	r2, r6
  404dda:	463b      	mov	r3, r7
  404ddc:	f002 fb56 	bl	40748c <__aeabi_dmul>
  404de0:	a339      	add	r3, pc, #228	; (adr r3, 404ec8 <__ieee754_acos+0x2c8>)
  404de2:	e9d3 2300 	ldrd	r2, r3, [r3]
  404de6:	f002 f99f 	bl	407128 <__adddf3>
  404dea:	4632      	mov	r2, r6
  404dec:	463b      	mov	r3, r7
  404dee:	f002 fb4d 	bl	40748c <__aeabi_dmul>
  404df2:	a337      	add	r3, pc, #220	; (adr r3, 404ed0 <__ieee754_acos+0x2d0>)
  404df4:	e9d3 2300 	ldrd	r2, r3, [r3]
  404df8:	f002 f994 	bl	407124 <__aeabi_dsub>
  404dfc:	4632      	mov	r2, r6
  404dfe:	463b      	mov	r3, r7
  404e00:	f002 fb44 	bl	40748c <__aeabi_dmul>
  404e04:	a334      	add	r3, pc, #208	; (adr r3, 404ed8 <__ieee754_acos+0x2d8>)
  404e06:	e9d3 2300 	ldrd	r2, r3, [r3]
  404e0a:	f002 f98d 	bl	407128 <__adddf3>
  404e0e:	4632      	mov	r2, r6
  404e10:	463b      	mov	r3, r7
  404e12:	f002 fb3b 	bl	40748c <__aeabi_dmul>
  404e16:	a332      	add	r3, pc, #200	; (adr r3, 404ee0 <__ieee754_acos+0x2e0>)
  404e18:	e9d3 2300 	ldrd	r2, r3, [r3]
  404e1c:	4680      	mov	r8, r0
  404e1e:	4689      	mov	r9, r1
  404e20:	4630      	mov	r0, r6
  404e22:	4639      	mov	r1, r7
  404e24:	f002 fb32 	bl	40748c <__aeabi_dmul>
  404e28:	a32f      	add	r3, pc, #188	; (adr r3, 404ee8 <__ieee754_acos+0x2e8>)
  404e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
  404e2e:	f002 f979 	bl	407124 <__aeabi_dsub>
  404e32:	4632      	mov	r2, r6
  404e34:	463b      	mov	r3, r7
  404e36:	f002 fb29 	bl	40748c <__aeabi_dmul>
  404e3a:	a32d      	add	r3, pc, #180	; (adr r3, 404ef0 <__ieee754_acos+0x2f0>)
  404e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404e40:	f002 f972 	bl	407128 <__adddf3>
  404e44:	4632      	mov	r2, r6
  404e46:	463b      	mov	r3, r7
  404e48:	f002 fb20 	bl	40748c <__aeabi_dmul>
  404e4c:	a32a      	add	r3, pc, #168	; (adr r3, 404ef8 <__ieee754_acos+0x2f8>)
  404e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404e52:	f002 f967 	bl	407124 <__aeabi_dsub>
  404e56:	4632      	mov	r2, r6
  404e58:	463b      	mov	r3, r7
  404e5a:	f002 fb17 	bl	40748c <__aeabi_dmul>
  404e5e:	2200      	movs	r2, #0
  404e60:	4b2f      	ldr	r3, [pc, #188]	; (404f20 <__ieee754_acos+0x320>)
  404e62:	f002 f961 	bl	407128 <__adddf3>
  404e66:	4602      	mov	r2, r0
  404e68:	460b      	mov	r3, r1
  404e6a:	4640      	mov	r0, r8
  404e6c:	4649      	mov	r1, r9
  404e6e:	f002 fc37 	bl	4076e0 <__aeabi_ddiv>
  404e72:	462a      	mov	r2, r5
  404e74:	4623      	mov	r3, r4
  404e76:	f002 fb09 	bl	40748c <__aeabi_dmul>
  404e7a:	4602      	mov	r2, r0
  404e7c:	460b      	mov	r3, r1
  404e7e:	a122      	add	r1, pc, #136	; (adr r1, 404f08 <__ieee754_acos+0x308>)
  404e80:	e9d1 0100 	ldrd	r0, r1, [r1]
  404e84:	f002 f94e 	bl	407124 <__aeabi_dsub>
  404e88:	4602      	mov	r2, r0
  404e8a:	460b      	mov	r3, r1
  404e8c:	4628      	mov	r0, r5
  404e8e:	4621      	mov	r1, r4
  404e90:	f002 f948 	bl	407124 <__aeabi_dsub>
  404e94:	4602      	mov	r2, r0
  404e96:	460b      	mov	r3, r1
  404e98:	a119      	add	r1, pc, #100	; (adr r1, 404f00 <__ieee754_acos+0x300>)
  404e9a:	e9d1 0100 	ldrd	r0, r1, [r1]
  404e9e:	f002 f941 	bl	407124 <__aeabi_dsub>
  404ea2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ea6:	a11a      	add	r1, pc, #104	; (adr r1, 404f10 <__ieee754_acos+0x310>)
  404ea8:	e9d1 0100 	ldrd	r0, r1, [r1]
  404eac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404eb0:	0dfdf709 	.word	0x0dfdf709
  404eb4:	3f023de1 	.word	0x3f023de1
  404eb8:	7501b288 	.word	0x7501b288
  404ebc:	3f49efe0 	.word	0x3f49efe0
  404ec0:	b5688f3b 	.word	0xb5688f3b
  404ec4:	3fa48228 	.word	0x3fa48228
  404ec8:	0e884455 	.word	0x0e884455
  404ecc:	3fc9c155 	.word	0x3fc9c155
  404ed0:	03eb6f7d 	.word	0x03eb6f7d
  404ed4:	3fd4d612 	.word	0x3fd4d612
  404ed8:	55555555 	.word	0x55555555
  404edc:	3fc55555 	.word	0x3fc55555
  404ee0:	b12e9282 	.word	0xb12e9282
  404ee4:	3fb3b8c5 	.word	0x3fb3b8c5
  404ee8:	1b8d0159 	.word	0x1b8d0159
  404eec:	3fe6066c 	.word	0x3fe6066c
  404ef0:	9c598ac8 	.word	0x9c598ac8
  404ef4:	40002ae5 	.word	0x40002ae5
  404ef8:	1c8a2d4b 	.word	0x1c8a2d4b
  404efc:	40033a27 	.word	0x40033a27
  404f00:	54442d18 	.word	0x54442d18
  404f04:	3ff921fb 	.word	0x3ff921fb
  404f08:	33145c07 	.word	0x33145c07
  404f0c:	3c91a626 	.word	0x3c91a626
  404f10:	54442d18 	.word	0x54442d18
  404f14:	400921fb 	.word	0x400921fb
  404f18:	3fefffff 	.word	0x3fefffff
  404f1c:	3fdfffff 	.word	0x3fdfffff
  404f20:	3ff00000 	.word	0x3ff00000
  404f24:	3fe00000 	.word	0x3fe00000
  404f28:	3c600000 	.word	0x3c600000
  404f2c:	2200      	movs	r2, #0
  404f2e:	4b5c      	ldr	r3, [pc, #368]	; (4050a0 <__ieee754_acos+0x4a0>)
  404f30:	f002 f8fa 	bl	407128 <__adddf3>
  404f34:	2200      	movs	r2, #0
  404f36:	4b5b      	ldr	r3, [pc, #364]	; (4050a4 <__ieee754_acos+0x4a4>)
  404f38:	f002 faa8 	bl	40748c <__aeabi_dmul>
  404f3c:	a340      	add	r3, pc, #256	; (adr r3, 405040 <__ieee754_acos+0x440>)
  404f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404f42:	4604      	mov	r4, r0
  404f44:	460d      	mov	r5, r1
  404f46:	f002 faa1 	bl	40748c <__aeabi_dmul>
  404f4a:	a33f      	add	r3, pc, #252	; (adr r3, 405048 <__ieee754_acos+0x448>)
  404f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404f50:	f002 f8ea 	bl	407128 <__adddf3>
  404f54:	4622      	mov	r2, r4
  404f56:	462b      	mov	r3, r5
  404f58:	f002 fa98 	bl	40748c <__aeabi_dmul>
  404f5c:	a33c      	add	r3, pc, #240	; (adr r3, 405050 <__ieee754_acos+0x450>)
  404f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404f62:	f002 f8df 	bl	407124 <__aeabi_dsub>
  404f66:	4622      	mov	r2, r4
  404f68:	462b      	mov	r3, r5
  404f6a:	f002 fa8f 	bl	40748c <__aeabi_dmul>
  404f6e:	a33a      	add	r3, pc, #232	; (adr r3, 405058 <__ieee754_acos+0x458>)
  404f70:	e9d3 2300 	ldrd	r2, r3, [r3]
  404f74:	f002 f8d8 	bl	407128 <__adddf3>
  404f78:	4622      	mov	r2, r4
  404f7a:	462b      	mov	r3, r5
  404f7c:	f002 fa86 	bl	40748c <__aeabi_dmul>
  404f80:	a337      	add	r3, pc, #220	; (adr r3, 405060 <__ieee754_acos+0x460>)
  404f82:	e9d3 2300 	ldrd	r2, r3, [r3]
  404f86:	f002 f8cd 	bl	407124 <__aeabi_dsub>
  404f8a:	4622      	mov	r2, r4
  404f8c:	462b      	mov	r3, r5
  404f8e:	f002 fa7d 	bl	40748c <__aeabi_dmul>
  404f92:	a335      	add	r3, pc, #212	; (adr r3, 405068 <__ieee754_acos+0x468>)
  404f94:	e9d3 2300 	ldrd	r2, r3, [r3]
  404f98:	f002 f8c6 	bl	407128 <__adddf3>
  404f9c:	4622      	mov	r2, r4
  404f9e:	462b      	mov	r3, r5
  404fa0:	f002 fa74 	bl	40748c <__aeabi_dmul>
  404fa4:	4680      	mov	r8, r0
  404fa6:	4689      	mov	r9, r1
  404fa8:	4620      	mov	r0, r4
  404faa:	4629      	mov	r1, r5
  404fac:	f000 fd9a 	bl	405ae4 <__ieee754_sqrt>
  404fb0:	a32f      	add	r3, pc, #188	; (adr r3, 405070 <__ieee754_acos+0x470>)
  404fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
  404fb6:	4606      	mov	r6, r0
  404fb8:	460f      	mov	r7, r1
  404fba:	4620      	mov	r0, r4
  404fbc:	4629      	mov	r1, r5
  404fbe:	f002 fa65 	bl	40748c <__aeabi_dmul>
  404fc2:	a32d      	add	r3, pc, #180	; (adr r3, 405078 <__ieee754_acos+0x478>)
  404fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
  404fc8:	f002 f8ac 	bl	407124 <__aeabi_dsub>
  404fcc:	4622      	mov	r2, r4
  404fce:	462b      	mov	r3, r5
  404fd0:	f002 fa5c 	bl	40748c <__aeabi_dmul>
  404fd4:	a32a      	add	r3, pc, #168	; (adr r3, 405080 <__ieee754_acos+0x480>)
  404fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
  404fda:	f002 f8a5 	bl	407128 <__adddf3>
  404fde:	4622      	mov	r2, r4
  404fe0:	462b      	mov	r3, r5
  404fe2:	f002 fa53 	bl	40748c <__aeabi_dmul>
  404fe6:	a328      	add	r3, pc, #160	; (adr r3, 405088 <__ieee754_acos+0x488>)
  404fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
  404fec:	f002 f89a 	bl	407124 <__aeabi_dsub>
  404ff0:	4622      	mov	r2, r4
  404ff2:	462b      	mov	r3, r5
  404ff4:	f002 fa4a 	bl	40748c <__aeabi_dmul>
  404ff8:	2200      	movs	r2, #0
  404ffa:	4b29      	ldr	r3, [pc, #164]	; (4050a0 <__ieee754_acos+0x4a0>)
  404ffc:	f002 f894 	bl	407128 <__adddf3>
  405000:	4602      	mov	r2, r0
  405002:	460b      	mov	r3, r1
  405004:	4640      	mov	r0, r8
  405006:	4649      	mov	r1, r9
  405008:	f002 fb6a 	bl	4076e0 <__aeabi_ddiv>
  40500c:	4632      	mov	r2, r6
  40500e:	463b      	mov	r3, r7
  405010:	f002 fa3c 	bl	40748c <__aeabi_dmul>
  405014:	a31e      	add	r3, pc, #120	; (adr r3, 405090 <__ieee754_acos+0x490>)
  405016:	e9d3 2300 	ldrd	r2, r3, [r3]
  40501a:	f002 f883 	bl	407124 <__aeabi_dsub>
  40501e:	4632      	mov	r2, r6
  405020:	463b      	mov	r3, r7
  405022:	f002 f881 	bl	407128 <__adddf3>
  405026:	4602      	mov	r2, r0
  405028:	460b      	mov	r3, r1
  40502a:	f002 f87d 	bl	407128 <__adddf3>
  40502e:	4602      	mov	r2, r0
  405030:	460b      	mov	r3, r1
  405032:	a119      	add	r1, pc, #100	; (adr r1, 405098 <__ieee754_acos+0x498>)
  405034:	e9d1 0100 	ldrd	r0, r1, [r1]
  405038:	f002 f874 	bl	407124 <__aeabi_dsub>
  40503c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405040:	0dfdf709 	.word	0x0dfdf709
  405044:	3f023de1 	.word	0x3f023de1
  405048:	7501b288 	.word	0x7501b288
  40504c:	3f49efe0 	.word	0x3f49efe0
  405050:	b5688f3b 	.word	0xb5688f3b
  405054:	3fa48228 	.word	0x3fa48228
  405058:	0e884455 	.word	0x0e884455
  40505c:	3fc9c155 	.word	0x3fc9c155
  405060:	03eb6f7d 	.word	0x03eb6f7d
  405064:	3fd4d612 	.word	0x3fd4d612
  405068:	55555555 	.word	0x55555555
  40506c:	3fc55555 	.word	0x3fc55555
  405070:	b12e9282 	.word	0xb12e9282
  405074:	3fb3b8c5 	.word	0x3fb3b8c5
  405078:	1b8d0159 	.word	0x1b8d0159
  40507c:	3fe6066c 	.word	0x3fe6066c
  405080:	9c598ac8 	.word	0x9c598ac8
  405084:	40002ae5 	.word	0x40002ae5
  405088:	1c8a2d4b 	.word	0x1c8a2d4b
  40508c:	40033a27 	.word	0x40033a27
  405090:	33145c07 	.word	0x33145c07
  405094:	3c91a626 	.word	0x3c91a626
  405098:	54442d18 	.word	0x54442d18
  40509c:	400921fb 	.word	0x400921fb
  4050a0:	3ff00000 	.word	0x3ff00000
  4050a4:	3fe00000 	.word	0x3fe00000

004050a8 <__ieee754_asin>:
  4050a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4050ac:	4bc0      	ldr	r3, [pc, #768]	; (4053b0 <__ieee754_asin+0x308>)
  4050ae:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
  4050b2:	4598      	cmp	r8, r3
  4050b4:	b084      	sub	sp, #16
  4050b6:	460d      	mov	r5, r1
  4050b8:	4604      	mov	r4, r0
  4050ba:	dd14      	ble.n	4050e6 <__ieee754_asin+0x3e>
  4050bc:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
  4050c0:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
  4050c4:	4603      	mov	r3, r0
  4050c6:	ea58 0303 	orrs.w	r3, r8, r3
  4050ca:	d023      	beq.n	405114 <__ieee754_asin+0x6c>
  4050cc:	4602      	mov	r2, r0
  4050ce:	460b      	mov	r3, r1
  4050d0:	f002 f828 	bl	407124 <__aeabi_dsub>
  4050d4:	4602      	mov	r2, r0
  4050d6:	460b      	mov	r3, r1
  4050d8:	f002 fb02 	bl	4076e0 <__aeabi_ddiv>
  4050dc:	4604      	mov	r4, r0
  4050de:	4620      	mov	r0, r4
  4050e0:	b004      	add	sp, #16
  4050e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4050e6:	4bb3      	ldr	r3, [pc, #716]	; (4053b4 <__ieee754_asin+0x30c>)
  4050e8:	4598      	cmp	r8, r3
  4050ea:	468a      	mov	sl, r1
  4050ec:	dc2b      	bgt.n	405146 <__ieee754_asin+0x9e>
  4050ee:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
  4050f2:	f280 8167 	bge.w	4053c4 <__ieee754_asin+0x31c>
  4050f6:	a392      	add	r3, pc, #584	; (adr r3, 405340 <__ieee754_asin+0x298>)
  4050f8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4050fc:	f002 f814 	bl	407128 <__adddf3>
  405100:	2200      	movs	r2, #0
  405102:	4bad      	ldr	r3, [pc, #692]	; (4053b8 <__ieee754_asin+0x310>)
  405104:	f002 fc52 	bl	4079ac <__aeabi_dcmpgt>
  405108:	b1e8      	cbz	r0, 405146 <__ieee754_asin+0x9e>
  40510a:	4629      	mov	r1, r5
  40510c:	4620      	mov	r0, r4
  40510e:	b004      	add	sp, #16
  405110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405114:	a38c      	add	r3, pc, #560	; (adr r3, 405348 <__ieee754_asin+0x2a0>)
  405116:	e9d3 2300 	ldrd	r2, r3, [r3]
  40511a:	f002 f9b7 	bl	40748c <__aeabi_dmul>
  40511e:	a38c      	add	r3, pc, #560	; (adr r3, 405350 <__ieee754_asin+0x2a8>)
  405120:	e9d3 2300 	ldrd	r2, r3, [r3]
  405124:	4606      	mov	r6, r0
  405126:	460f      	mov	r7, r1
  405128:	4620      	mov	r0, r4
  40512a:	4629      	mov	r1, r5
  40512c:	f002 f9ae 	bl	40748c <__aeabi_dmul>
  405130:	4602      	mov	r2, r0
  405132:	460b      	mov	r3, r1
  405134:	4630      	mov	r0, r6
  405136:	4639      	mov	r1, r7
  405138:	f001 fff6 	bl	407128 <__adddf3>
  40513c:	4604      	mov	r4, r0
  40513e:	4620      	mov	r0, r4
  405140:	b004      	add	sp, #16
  405142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405146:	4620      	mov	r0, r4
  405148:	4629      	mov	r1, r5
  40514a:	f001 fecb 	bl	406ee4 <fabs>
  40514e:	4602      	mov	r2, r0
  405150:	460b      	mov	r3, r1
  405152:	2000      	movs	r0, #0
  405154:	4998      	ldr	r1, [pc, #608]	; (4053b8 <__ieee754_asin+0x310>)
  405156:	f001 ffe5 	bl	407124 <__aeabi_dsub>
  40515a:	2200      	movs	r2, #0
  40515c:	4b97      	ldr	r3, [pc, #604]	; (4053bc <__ieee754_asin+0x314>)
  40515e:	f002 f995 	bl	40748c <__aeabi_dmul>
  405162:	a37d      	add	r3, pc, #500	; (adr r3, 405358 <__ieee754_asin+0x2b0>)
  405164:	e9d3 2300 	ldrd	r2, r3, [r3]
  405168:	4604      	mov	r4, r0
  40516a:	460d      	mov	r5, r1
  40516c:	f002 f98e 	bl	40748c <__aeabi_dmul>
  405170:	a37b      	add	r3, pc, #492	; (adr r3, 405360 <__ieee754_asin+0x2b8>)
  405172:	e9d3 2300 	ldrd	r2, r3, [r3]
  405176:	f001 ffd7 	bl	407128 <__adddf3>
  40517a:	4622      	mov	r2, r4
  40517c:	462b      	mov	r3, r5
  40517e:	f002 f985 	bl	40748c <__aeabi_dmul>
  405182:	a379      	add	r3, pc, #484	; (adr r3, 405368 <__ieee754_asin+0x2c0>)
  405184:	e9d3 2300 	ldrd	r2, r3, [r3]
  405188:	f001 ffcc 	bl	407124 <__aeabi_dsub>
  40518c:	4622      	mov	r2, r4
  40518e:	462b      	mov	r3, r5
  405190:	f002 f97c 	bl	40748c <__aeabi_dmul>
  405194:	a376      	add	r3, pc, #472	; (adr r3, 405370 <__ieee754_asin+0x2c8>)
  405196:	e9d3 2300 	ldrd	r2, r3, [r3]
  40519a:	f001 ffc5 	bl	407128 <__adddf3>
  40519e:	4622      	mov	r2, r4
  4051a0:	462b      	mov	r3, r5
  4051a2:	f002 f973 	bl	40748c <__aeabi_dmul>
  4051a6:	a374      	add	r3, pc, #464	; (adr r3, 405378 <__ieee754_asin+0x2d0>)
  4051a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4051ac:	f001 ffba 	bl	407124 <__aeabi_dsub>
  4051b0:	4622      	mov	r2, r4
  4051b2:	462b      	mov	r3, r5
  4051b4:	f002 f96a 	bl	40748c <__aeabi_dmul>
  4051b8:	a371      	add	r3, pc, #452	; (adr r3, 405380 <__ieee754_asin+0x2d8>)
  4051ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4051be:	f001 ffb3 	bl	407128 <__adddf3>
  4051c2:	4622      	mov	r2, r4
  4051c4:	462b      	mov	r3, r5
  4051c6:	f002 f961 	bl	40748c <__aeabi_dmul>
  4051ca:	a36f      	add	r3, pc, #444	; (adr r3, 405388 <__ieee754_asin+0x2e0>)
  4051cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4051d0:	e9cd 0100 	strd	r0, r1, [sp]
  4051d4:	4620      	mov	r0, r4
  4051d6:	4629      	mov	r1, r5
  4051d8:	f002 f958 	bl	40748c <__aeabi_dmul>
  4051dc:	a36c      	add	r3, pc, #432	; (adr r3, 405390 <__ieee754_asin+0x2e8>)
  4051de:	e9d3 2300 	ldrd	r2, r3, [r3]
  4051e2:	f001 ff9f 	bl	407124 <__aeabi_dsub>
  4051e6:	4622      	mov	r2, r4
  4051e8:	462b      	mov	r3, r5
  4051ea:	f002 f94f 	bl	40748c <__aeabi_dmul>
  4051ee:	a36a      	add	r3, pc, #424	; (adr r3, 405398 <__ieee754_asin+0x2f0>)
  4051f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4051f4:	f001 ff98 	bl	407128 <__adddf3>
  4051f8:	4622      	mov	r2, r4
  4051fa:	462b      	mov	r3, r5
  4051fc:	f002 f946 	bl	40748c <__aeabi_dmul>
  405200:	a367      	add	r3, pc, #412	; (adr r3, 4053a0 <__ieee754_asin+0x2f8>)
  405202:	e9d3 2300 	ldrd	r2, r3, [r3]
  405206:	f001 ff8d 	bl	407124 <__aeabi_dsub>
  40520a:	4622      	mov	r2, r4
  40520c:	462b      	mov	r3, r5
  40520e:	f002 f93d 	bl	40748c <__aeabi_dmul>
  405212:	4b69      	ldr	r3, [pc, #420]	; (4053b8 <__ieee754_asin+0x310>)
  405214:	2200      	movs	r2, #0
  405216:	f001 ff87 	bl	407128 <__adddf3>
  40521a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40521e:	4620      	mov	r0, r4
  405220:	4629      	mov	r1, r5
  405222:	f000 fc5f 	bl	405ae4 <__ieee754_sqrt>
  405226:	4b66      	ldr	r3, [pc, #408]	; (4053c0 <__ieee754_asin+0x318>)
  405228:	4598      	cmp	r8, r3
  40522a:	4606      	mov	r6, r0
  40522c:	460f      	mov	r7, r1
  40522e:	dc66      	bgt.n	4052fe <__ieee754_asin+0x256>
  405230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405234:	e9dd 0100 	ldrd	r0, r1, [sp]
  405238:	f002 fa52 	bl	4076e0 <__aeabi_ddiv>
  40523c:	4632      	mov	r2, r6
  40523e:	e9cd 0100 	strd	r0, r1, [sp]
  405242:	463b      	mov	r3, r7
  405244:	4630      	mov	r0, r6
  405246:	4639      	mov	r1, r7
  405248:	f001 ff6e 	bl	407128 <__adddf3>
  40524c:	4602      	mov	r2, r0
  40524e:	460b      	mov	r3, r1
  405250:	e9dd 0100 	ldrd	r0, r1, [sp]
  405254:	f002 f91a 	bl	40748c <__aeabi_dmul>
  405258:	f04f 0800 	mov.w	r8, #0
  40525c:	e9cd 0100 	strd	r0, r1, [sp]
  405260:	4642      	mov	r2, r8
  405262:	463b      	mov	r3, r7
  405264:	4640      	mov	r0, r8
  405266:	4639      	mov	r1, r7
  405268:	f002 f910 	bl	40748c <__aeabi_dmul>
  40526c:	4602      	mov	r2, r0
  40526e:	460b      	mov	r3, r1
  405270:	4620      	mov	r0, r4
  405272:	4629      	mov	r1, r5
  405274:	f001 ff56 	bl	407124 <__aeabi_dsub>
  405278:	4642      	mov	r2, r8
  40527a:	4604      	mov	r4, r0
  40527c:	460d      	mov	r5, r1
  40527e:	463b      	mov	r3, r7
  405280:	4630      	mov	r0, r6
  405282:	4639      	mov	r1, r7
  405284:	f001 ff50 	bl	407128 <__adddf3>
  405288:	4602      	mov	r2, r0
  40528a:	460b      	mov	r3, r1
  40528c:	4620      	mov	r0, r4
  40528e:	4629      	mov	r1, r5
  405290:	f002 fa26 	bl	4076e0 <__aeabi_ddiv>
  405294:	4602      	mov	r2, r0
  405296:	460b      	mov	r3, r1
  405298:	f001 ff46 	bl	407128 <__adddf3>
  40529c:	4602      	mov	r2, r0
  40529e:	460b      	mov	r3, r1
  4052a0:	a12b      	add	r1, pc, #172	; (adr r1, 405350 <__ieee754_asin+0x2a8>)
  4052a2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4052a6:	f001 ff3d 	bl	407124 <__aeabi_dsub>
  4052aa:	4602      	mov	r2, r0
  4052ac:	460b      	mov	r3, r1
  4052ae:	e9dd 0100 	ldrd	r0, r1, [sp]
  4052b2:	f001 ff37 	bl	407124 <__aeabi_dsub>
  4052b6:	4642      	mov	r2, r8
  4052b8:	4604      	mov	r4, r0
  4052ba:	460d      	mov	r5, r1
  4052bc:	463b      	mov	r3, r7
  4052be:	4640      	mov	r0, r8
  4052c0:	4639      	mov	r1, r7
  4052c2:	f001 ff31 	bl	407128 <__adddf3>
  4052c6:	4602      	mov	r2, r0
  4052c8:	460b      	mov	r3, r1
  4052ca:	a137      	add	r1, pc, #220	; (adr r1, 4053a8 <__ieee754_asin+0x300>)
  4052cc:	e9d1 0100 	ldrd	r0, r1, [r1]
  4052d0:	f001 ff28 	bl	407124 <__aeabi_dsub>
  4052d4:	4602      	mov	r2, r0
  4052d6:	460b      	mov	r3, r1
  4052d8:	4620      	mov	r0, r4
  4052da:	4629      	mov	r1, r5
  4052dc:	f001 ff22 	bl	407124 <__aeabi_dsub>
  4052e0:	4602      	mov	r2, r0
  4052e2:	460b      	mov	r3, r1
  4052e4:	a130      	add	r1, pc, #192	; (adr r1, 4053a8 <__ieee754_asin+0x300>)
  4052e6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4052ea:	f001 ff1b 	bl	407124 <__aeabi_dsub>
  4052ee:	4604      	mov	r4, r0
  4052f0:	f1ba 0f00 	cmp.w	sl, #0
  4052f4:	f73f aef3 	bgt.w	4050de <__ieee754_asin+0x36>
  4052f8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4052fc:	e6ef      	b.n	4050de <__ieee754_asin+0x36>
  4052fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405302:	e9dd 0100 	ldrd	r0, r1, [sp]
  405306:	f002 f9eb 	bl	4076e0 <__aeabi_ddiv>
  40530a:	4632      	mov	r2, r6
  40530c:	463b      	mov	r3, r7
  40530e:	f002 f8bd 	bl	40748c <__aeabi_dmul>
  405312:	4632      	mov	r2, r6
  405314:	463b      	mov	r3, r7
  405316:	f001 ff07 	bl	407128 <__adddf3>
  40531a:	4602      	mov	r2, r0
  40531c:	460b      	mov	r3, r1
  40531e:	f001 ff03 	bl	407128 <__adddf3>
  405322:	a30b      	add	r3, pc, #44	; (adr r3, 405350 <__ieee754_asin+0x2a8>)
  405324:	e9d3 2300 	ldrd	r2, r3, [r3]
  405328:	f001 fefc 	bl	407124 <__aeabi_dsub>
  40532c:	4602      	mov	r2, r0
  40532e:	460b      	mov	r3, r1
  405330:	a105      	add	r1, pc, #20	; (adr r1, 405348 <__ieee754_asin+0x2a0>)
  405332:	e9d1 0100 	ldrd	r0, r1, [r1]
  405336:	f001 fef5 	bl	407124 <__aeabi_dsub>
  40533a:	4604      	mov	r4, r0
  40533c:	e7d8      	b.n	4052f0 <__ieee754_asin+0x248>
  40533e:	bf00      	nop
  405340:	8800759c 	.word	0x8800759c
  405344:	7e37e43c 	.word	0x7e37e43c
  405348:	54442d18 	.word	0x54442d18
  40534c:	3ff921fb 	.word	0x3ff921fb
  405350:	33145c07 	.word	0x33145c07
  405354:	3c91a626 	.word	0x3c91a626
  405358:	0dfdf709 	.word	0x0dfdf709
  40535c:	3f023de1 	.word	0x3f023de1
  405360:	7501b288 	.word	0x7501b288
  405364:	3f49efe0 	.word	0x3f49efe0
  405368:	b5688f3b 	.word	0xb5688f3b
  40536c:	3fa48228 	.word	0x3fa48228
  405370:	0e884455 	.word	0x0e884455
  405374:	3fc9c155 	.word	0x3fc9c155
  405378:	03eb6f7d 	.word	0x03eb6f7d
  40537c:	3fd4d612 	.word	0x3fd4d612
  405380:	55555555 	.word	0x55555555
  405384:	3fc55555 	.word	0x3fc55555
  405388:	b12e9282 	.word	0xb12e9282
  40538c:	3fb3b8c5 	.word	0x3fb3b8c5
  405390:	1b8d0159 	.word	0x1b8d0159
  405394:	3fe6066c 	.word	0x3fe6066c
  405398:	9c598ac8 	.word	0x9c598ac8
  40539c:	40002ae5 	.word	0x40002ae5
  4053a0:	1c8a2d4b 	.word	0x1c8a2d4b
  4053a4:	40033a27 	.word	0x40033a27
  4053a8:	54442d18 	.word	0x54442d18
  4053ac:	3fe921fb 	.word	0x3fe921fb
  4053b0:	3fefffff 	.word	0x3fefffff
  4053b4:	3fdfffff 	.word	0x3fdfffff
  4053b8:	3ff00000 	.word	0x3ff00000
  4053bc:	3fe00000 	.word	0x3fe00000
  4053c0:	3fef3332 	.word	0x3fef3332
  4053c4:	4602      	mov	r2, r0
  4053c6:	460b      	mov	r3, r1
  4053c8:	f002 f860 	bl	40748c <__aeabi_dmul>
  4053cc:	a338      	add	r3, pc, #224	; (adr r3, 4054b0 <__ieee754_asin+0x408>)
  4053ce:	e9d3 2300 	ldrd	r2, r3, [r3]
  4053d2:	4606      	mov	r6, r0
  4053d4:	460f      	mov	r7, r1
  4053d6:	f002 f859 	bl	40748c <__aeabi_dmul>
  4053da:	a337      	add	r3, pc, #220	; (adr r3, 4054b8 <__ieee754_asin+0x410>)
  4053dc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4053e0:	f001 fea2 	bl	407128 <__adddf3>
  4053e4:	4632      	mov	r2, r6
  4053e6:	463b      	mov	r3, r7
  4053e8:	f002 f850 	bl	40748c <__aeabi_dmul>
  4053ec:	a334      	add	r3, pc, #208	; (adr r3, 4054c0 <__ieee754_asin+0x418>)
  4053ee:	e9d3 2300 	ldrd	r2, r3, [r3]
  4053f2:	f001 fe97 	bl	407124 <__aeabi_dsub>
  4053f6:	4632      	mov	r2, r6
  4053f8:	463b      	mov	r3, r7
  4053fa:	f002 f847 	bl	40748c <__aeabi_dmul>
  4053fe:	a332      	add	r3, pc, #200	; (adr r3, 4054c8 <__ieee754_asin+0x420>)
  405400:	e9d3 2300 	ldrd	r2, r3, [r3]
  405404:	f001 fe90 	bl	407128 <__adddf3>
  405408:	4632      	mov	r2, r6
  40540a:	463b      	mov	r3, r7
  40540c:	f002 f83e 	bl	40748c <__aeabi_dmul>
  405410:	a32f      	add	r3, pc, #188	; (adr r3, 4054d0 <__ieee754_asin+0x428>)
  405412:	e9d3 2300 	ldrd	r2, r3, [r3]
  405416:	f001 fe85 	bl	407124 <__aeabi_dsub>
  40541a:	4632      	mov	r2, r6
  40541c:	463b      	mov	r3, r7
  40541e:	f002 f835 	bl	40748c <__aeabi_dmul>
  405422:	a32d      	add	r3, pc, #180	; (adr r3, 4054d8 <__ieee754_asin+0x430>)
  405424:	e9d3 2300 	ldrd	r2, r3, [r3]
  405428:	f001 fe7e 	bl	407128 <__adddf3>
  40542c:	4632      	mov	r2, r6
  40542e:	463b      	mov	r3, r7
  405430:	f002 f82c 	bl	40748c <__aeabi_dmul>
  405434:	a32a      	add	r3, pc, #168	; (adr r3, 4054e0 <__ieee754_asin+0x438>)
  405436:	e9d3 2300 	ldrd	r2, r3, [r3]
  40543a:	4680      	mov	r8, r0
  40543c:	4689      	mov	r9, r1
  40543e:	4630      	mov	r0, r6
  405440:	4639      	mov	r1, r7
  405442:	f002 f823 	bl	40748c <__aeabi_dmul>
  405446:	a328      	add	r3, pc, #160	; (adr r3, 4054e8 <__ieee754_asin+0x440>)
  405448:	e9d3 2300 	ldrd	r2, r3, [r3]
  40544c:	f001 fe6a 	bl	407124 <__aeabi_dsub>
  405450:	4632      	mov	r2, r6
  405452:	463b      	mov	r3, r7
  405454:	f002 f81a 	bl	40748c <__aeabi_dmul>
  405458:	a325      	add	r3, pc, #148	; (adr r3, 4054f0 <__ieee754_asin+0x448>)
  40545a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40545e:	f001 fe63 	bl	407128 <__adddf3>
  405462:	4632      	mov	r2, r6
  405464:	463b      	mov	r3, r7
  405466:	f002 f811 	bl	40748c <__aeabi_dmul>
  40546a:	a323      	add	r3, pc, #140	; (adr r3, 4054f8 <__ieee754_asin+0x450>)
  40546c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405470:	f001 fe58 	bl	407124 <__aeabi_dsub>
  405474:	4632      	mov	r2, r6
  405476:	463b      	mov	r3, r7
  405478:	f002 f808 	bl	40748c <__aeabi_dmul>
  40547c:	2200      	movs	r2, #0
  40547e:	4b20      	ldr	r3, [pc, #128]	; (405500 <__ieee754_asin+0x458>)
  405480:	f001 fe52 	bl	407128 <__adddf3>
  405484:	4602      	mov	r2, r0
  405486:	460b      	mov	r3, r1
  405488:	4640      	mov	r0, r8
  40548a:	4649      	mov	r1, r9
  40548c:	f002 f928 	bl	4076e0 <__aeabi_ddiv>
  405490:	4622      	mov	r2, r4
  405492:	462b      	mov	r3, r5
  405494:	f001 fffa 	bl	40748c <__aeabi_dmul>
  405498:	4622      	mov	r2, r4
  40549a:	462b      	mov	r3, r5
  40549c:	f001 fe44 	bl	407128 <__adddf3>
  4054a0:	4604      	mov	r4, r0
  4054a2:	4620      	mov	r0, r4
  4054a4:	b004      	add	sp, #16
  4054a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4054aa:	bf00      	nop
  4054ac:	f3af 8000 	nop.w
  4054b0:	0dfdf709 	.word	0x0dfdf709
  4054b4:	3f023de1 	.word	0x3f023de1
  4054b8:	7501b288 	.word	0x7501b288
  4054bc:	3f49efe0 	.word	0x3f49efe0
  4054c0:	b5688f3b 	.word	0xb5688f3b
  4054c4:	3fa48228 	.word	0x3fa48228
  4054c8:	0e884455 	.word	0x0e884455
  4054cc:	3fc9c155 	.word	0x3fc9c155
  4054d0:	03eb6f7d 	.word	0x03eb6f7d
  4054d4:	3fd4d612 	.word	0x3fd4d612
  4054d8:	55555555 	.word	0x55555555
  4054dc:	3fc55555 	.word	0x3fc55555
  4054e0:	b12e9282 	.word	0xb12e9282
  4054e4:	3fb3b8c5 	.word	0x3fb3b8c5
  4054e8:	1b8d0159 	.word	0x1b8d0159
  4054ec:	3fe6066c 	.word	0x3fe6066c
  4054f0:	9c598ac8 	.word	0x9c598ac8
  4054f4:	40002ae5 	.word	0x40002ae5
  4054f8:	1c8a2d4b 	.word	0x1c8a2d4b
  4054fc:	40033a27 	.word	0x40033a27
  405500:	3ff00000 	.word	0x3ff00000
  405504:	00000000 	.word	0x00000000

00405508 <__ieee754_atan2>:
  405508:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40550c:	4254      	negs	r4, r2
  40550e:	4314      	orrs	r4, r2
  405510:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
  405514:	f8df e180 	ldr.w	lr, [pc, #384]	; 405698 <__ieee754_atan2+0x190>
  405518:	ea49 74d4 	orr.w	r4, r9, r4, lsr #31
  40551c:	4574      	cmp	r4, lr
  40551e:	4606      	mov	r6, r0
  405520:	460d      	mov	r5, r1
  405522:	d83e      	bhi.n	4055a2 <__ieee754_atan2+0x9a>
  405524:	4244      	negs	r4, r0
  405526:	4304      	orrs	r4, r0
  405528:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
  40552c:	ea4b 74d4 	orr.w	r4, fp, r4, lsr #31
  405530:	4574      	cmp	r4, lr
  405532:	468a      	mov	sl, r1
  405534:	d835      	bhi.n	4055a2 <__ieee754_atan2+0x9a>
  405536:	f103 4440 	add.w	r4, r3, #3221225472	; 0xc0000000
  40553a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
  40553e:	4314      	orrs	r4, r2
  405540:	d044      	beq.n	4055cc <__ieee754_atan2+0xc4>
  405542:	179c      	asrs	r4, r3, #30
  405544:	f004 0402 	and.w	r4, r4, #2
  405548:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
  40554c:	ea50 010b 	orrs.w	r1, r0, fp
  405550:	d02f      	beq.n	4055b2 <__ieee754_atan2+0xaa>
  405552:	ea52 0109 	orrs.w	r1, r2, r9
  405556:	d033      	beq.n	4055c0 <__ieee754_atan2+0xb8>
  405558:	45f1      	cmp	r9, lr
  40555a:	d046      	beq.n	4055ea <__ieee754_atan2+0xe2>
  40555c:	45f3      	cmp	fp, lr
  40555e:	d02f      	beq.n	4055c0 <__ieee754_atan2+0xb8>
  405560:	ebc9 090b 	rsb	r9, r9, fp
  405564:	ea4f 5929 	mov.w	r9, r9, asr #20
  405568:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
  40556c:	dc34      	bgt.n	4055d8 <__ieee754_atan2+0xd0>
  40556e:	2b00      	cmp	r3, #0
  405570:	db57      	blt.n	405622 <__ieee754_atan2+0x11a>
  405572:	4630      	mov	r0, r6
  405574:	4629      	mov	r1, r5
  405576:	f002 f8b3 	bl	4076e0 <__aeabi_ddiv>
  40557a:	f001 fcb3 	bl	406ee4 <fabs>
  40557e:	f001 fb13 	bl	406ba8 <atan>
  405582:	2c01      	cmp	r4, #1
  405584:	d04a      	beq.n	40561c <__ieee754_atan2+0x114>
  405586:	2c02      	cmp	r4, #2
  405588:	d03b      	beq.n	405602 <__ieee754_atan2+0xfa>
  40558a:	b184      	cbz	r4, 4055ae <__ieee754_atan2+0xa6>
  40558c:	a332      	add	r3, pc, #200	; (adr r3, 405658 <__ieee754_atan2+0x150>)
  40558e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405592:	f001 fdc7 	bl	407124 <__aeabi_dsub>
  405596:	a332      	add	r3, pc, #200	; (adr r3, 405660 <__ieee754_atan2+0x158>)
  405598:	e9d3 2300 	ldrd	r2, r3, [r3]
  40559c:	f001 fdc2 	bl	407124 <__aeabi_dsub>
  4055a0:	e005      	b.n	4055ae <__ieee754_atan2+0xa6>
  4055a2:	4610      	mov	r0, r2
  4055a4:	4619      	mov	r1, r3
  4055a6:	4632      	mov	r2, r6
  4055a8:	462b      	mov	r3, r5
  4055aa:	f001 fdbd 	bl	407128 <__adddf3>
  4055ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4055b2:	2c02      	cmp	r4, #2
  4055b4:	d014      	beq.n	4055e0 <__ieee754_atan2+0xd8>
  4055b6:	2c03      	cmp	r4, #3
  4055b8:	d10c      	bne.n	4055d4 <__ieee754_atan2+0xcc>
  4055ba:	482d      	ldr	r0, [pc, #180]	; (405670 <__ieee754_atan2+0x168>)
  4055bc:	492d      	ldr	r1, [pc, #180]	; (405674 <__ieee754_atan2+0x16c>)
  4055be:	e7f6      	b.n	4055ae <__ieee754_atan2+0xa6>
  4055c0:	f1ba 0f00 	cmp.w	sl, #0
  4055c4:	482a      	ldr	r0, [pc, #168]	; (405670 <__ieee754_atan2+0x168>)
  4055c6:	db0e      	blt.n	4055e6 <__ieee754_atan2+0xde>
  4055c8:	492b      	ldr	r1, [pc, #172]	; (405678 <__ieee754_atan2+0x170>)
  4055ca:	e7f0      	b.n	4055ae <__ieee754_atan2+0xa6>
  4055cc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4055d0:	f001 baea 	b.w	406ba8 <atan>
  4055d4:	4629      	mov	r1, r5
  4055d6:	e7ea      	b.n	4055ae <__ieee754_atan2+0xa6>
  4055d8:	a123      	add	r1, pc, #140	; (adr r1, 405668 <__ieee754_atan2+0x160>)
  4055da:	e9d1 0100 	ldrd	r0, r1, [r1]
  4055de:	e7d0      	b.n	405582 <__ieee754_atan2+0x7a>
  4055e0:	4823      	ldr	r0, [pc, #140]	; (405670 <__ieee754_atan2+0x168>)
  4055e2:	4926      	ldr	r1, [pc, #152]	; (40567c <__ieee754_atan2+0x174>)
  4055e4:	e7e3      	b.n	4055ae <__ieee754_atan2+0xa6>
  4055e6:	4926      	ldr	r1, [pc, #152]	; (405680 <__ieee754_atan2+0x178>)
  4055e8:	e7e1      	b.n	4055ae <__ieee754_atan2+0xa6>
  4055ea:	45cb      	cmp	fp, r9
  4055ec:	d01f      	beq.n	40562e <__ieee754_atan2+0x126>
  4055ee:	2c02      	cmp	r4, #2
  4055f0:	d0f6      	beq.n	4055e0 <__ieee754_atan2+0xd8>
  4055f2:	2c03      	cmp	r4, #3
  4055f4:	d0e1      	beq.n	4055ba <__ieee754_atan2+0xb2>
  4055f6:	2c01      	cmp	r4, #1
  4055f8:	f04f 0000 	mov.w	r0, #0
  4055fc:	d020      	beq.n	405640 <__ieee754_atan2+0x138>
  4055fe:	4601      	mov	r1, r0
  405600:	e7d5      	b.n	4055ae <__ieee754_atan2+0xa6>
  405602:	a315      	add	r3, pc, #84	; (adr r3, 405658 <__ieee754_atan2+0x150>)
  405604:	e9d3 2300 	ldrd	r2, r3, [r3]
  405608:	f001 fd8c 	bl	407124 <__aeabi_dsub>
  40560c:	4602      	mov	r2, r0
  40560e:	460b      	mov	r3, r1
  405610:	a113      	add	r1, pc, #76	; (adr r1, 405660 <__ieee754_atan2+0x158>)
  405612:	e9d1 0100 	ldrd	r0, r1, [r1]
  405616:	f001 fd85 	bl	407124 <__aeabi_dsub>
  40561a:	e7c8      	b.n	4055ae <__ieee754_atan2+0xa6>
  40561c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  405620:	e7c5      	b.n	4055ae <__ieee754_atan2+0xa6>
  405622:	f119 0f3c 	cmn.w	r9, #60	; 0x3c
  405626:	daa4      	bge.n	405572 <__ieee754_atan2+0x6a>
  405628:	2000      	movs	r0, #0
  40562a:	2100      	movs	r1, #0
  40562c:	e7a9      	b.n	405582 <__ieee754_atan2+0x7a>
  40562e:	2c02      	cmp	r4, #2
  405630:	d00e      	beq.n	405650 <__ieee754_atan2+0x148>
  405632:	2c03      	cmp	r4, #3
  405634:	d009      	beq.n	40564a <__ieee754_atan2+0x142>
  405636:	2c01      	cmp	r4, #1
  405638:	480d      	ldr	r0, [pc, #52]	; (405670 <__ieee754_atan2+0x168>)
  40563a:	d004      	beq.n	405646 <__ieee754_atan2+0x13e>
  40563c:	4911      	ldr	r1, [pc, #68]	; (405684 <__ieee754_atan2+0x17c>)
  40563e:	e7b6      	b.n	4055ae <__ieee754_atan2+0xa6>
  405640:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  405644:	e7b3      	b.n	4055ae <__ieee754_atan2+0xa6>
  405646:	4910      	ldr	r1, [pc, #64]	; (405688 <__ieee754_atan2+0x180>)
  405648:	e7b1      	b.n	4055ae <__ieee754_atan2+0xa6>
  40564a:	4810      	ldr	r0, [pc, #64]	; (40568c <__ieee754_atan2+0x184>)
  40564c:	4910      	ldr	r1, [pc, #64]	; (405690 <__ieee754_atan2+0x188>)
  40564e:	e7ae      	b.n	4055ae <__ieee754_atan2+0xa6>
  405650:	480e      	ldr	r0, [pc, #56]	; (40568c <__ieee754_atan2+0x184>)
  405652:	4910      	ldr	r1, [pc, #64]	; (405694 <__ieee754_atan2+0x18c>)
  405654:	e7ab      	b.n	4055ae <__ieee754_atan2+0xa6>
  405656:	bf00      	nop
  405658:	33145c07 	.word	0x33145c07
  40565c:	3ca1a626 	.word	0x3ca1a626
  405660:	54442d18 	.word	0x54442d18
  405664:	400921fb 	.word	0x400921fb
  405668:	54442d18 	.word	0x54442d18
  40566c:	3ff921fb 	.word	0x3ff921fb
  405670:	54442d18 	.word	0x54442d18
  405674:	c00921fb 	.word	0xc00921fb
  405678:	3ff921fb 	.word	0x3ff921fb
  40567c:	400921fb 	.word	0x400921fb
  405680:	bff921fb 	.word	0xbff921fb
  405684:	3fe921fb 	.word	0x3fe921fb
  405688:	bfe921fb 	.word	0xbfe921fb
  40568c:	7f3321d2 	.word	0x7f3321d2
  405690:	c002d97c 	.word	0xc002d97c
  405694:	4002d97c 	.word	0x4002d97c
  405698:	7ff00000 	.word	0x7ff00000
  40569c:	00000000 	.word	0x00000000

004056a0 <__ieee754_rem_pio2>:
  4056a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4056a4:	4e94      	ldr	r6, [pc, #592]	; (4058f8 <__ieee754_rem_pio2+0x258>)
  4056a6:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  4056aa:	42b7      	cmp	r7, r6
  4056ac:	b091      	sub	sp, #68	; 0x44
  4056ae:	f340 8082 	ble.w	4057b6 <__ieee754_rem_pio2+0x116>
  4056b2:	4692      	mov	sl, r2
  4056b4:	4a91      	ldr	r2, [pc, #580]	; (4058fc <__ieee754_rem_pio2+0x25c>)
  4056b6:	4297      	cmp	r7, r2
  4056b8:	460c      	mov	r4, r1
  4056ba:	dc26      	bgt.n	40570a <__ieee754_rem_pio2+0x6a>
  4056bc:	2900      	cmp	r1, #0
  4056be:	a384      	add	r3, pc, #528	; (adr r3, 4058d0 <__ieee754_rem_pio2+0x230>)
  4056c0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056c4:	f340 81a8 	ble.w	405a18 <__ieee754_rem_pio2+0x378>
  4056c8:	f001 fd2c 	bl	407124 <__aeabi_dsub>
  4056cc:	4b8c      	ldr	r3, [pc, #560]	; (405900 <__ieee754_rem_pio2+0x260>)
  4056ce:	429f      	cmp	r7, r3
  4056d0:	4604      	mov	r4, r0
  4056d2:	460d      	mov	r5, r1
  4056d4:	f000 8084 	beq.w	4057e0 <__ieee754_rem_pio2+0x140>
  4056d8:	a37f      	add	r3, pc, #508	; (adr r3, 4058d8 <__ieee754_rem_pio2+0x238>)
  4056da:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056de:	f001 fd21 	bl	407124 <__aeabi_dsub>
  4056e2:	4602      	mov	r2, r0
  4056e4:	460b      	mov	r3, r1
  4056e6:	e9ca 2300 	strd	r2, r3, [sl]
  4056ea:	4620      	mov	r0, r4
  4056ec:	4629      	mov	r1, r5
  4056ee:	f001 fd19 	bl	407124 <__aeabi_dsub>
  4056f2:	a379      	add	r3, pc, #484	; (adr r3, 4058d8 <__ieee754_rem_pio2+0x238>)
  4056f4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056f8:	f001 fd14 	bl	407124 <__aeabi_dsub>
  4056fc:	2501      	movs	r5, #1
  4056fe:	e9ca 0102 	strd	r0, r1, [sl, #8]
  405702:	4628      	mov	r0, r5
  405704:	b011      	add	sp, #68	; 0x44
  405706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40570a:	4a7e      	ldr	r2, [pc, #504]	; (405904 <__ieee754_rem_pio2+0x264>)
  40570c:	4297      	cmp	r7, r2
  40570e:	f340 8084 	ble.w	40581a <__ieee754_rem_pio2+0x17a>
  405712:	4a7d      	ldr	r2, [pc, #500]	; (405908 <__ieee754_rem_pio2+0x268>)
  405714:	4297      	cmp	r7, r2
  405716:	dc59      	bgt.n	4057cc <__ieee754_rem_pio2+0x12c>
  405718:	153d      	asrs	r5, r7, #20
  40571a:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
  40571e:	eba7 5305 	sub.w	r3, r7, r5, lsl #20
  405722:	4619      	mov	r1, r3
  405724:	461f      	mov	r7, r3
  405726:	4606      	mov	r6, r0
  405728:	f002 f960 	bl	4079ec <__aeabi_d2iz>
  40572c:	f001 fe48 	bl	4073c0 <__aeabi_i2d>
  405730:	4680      	mov	r8, r0
  405732:	4689      	mov	r9, r1
  405734:	4602      	mov	r2, r0
  405736:	460b      	mov	r3, r1
  405738:	4630      	mov	r0, r6
  40573a:	4639      	mov	r1, r7
  40573c:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  405740:	f001 fcf0 	bl	407124 <__aeabi_dsub>
  405744:	2200      	movs	r2, #0
  405746:	4b71      	ldr	r3, [pc, #452]	; (40590c <__ieee754_rem_pio2+0x26c>)
  405748:	f001 fea0 	bl	40748c <__aeabi_dmul>
  40574c:	4689      	mov	r9, r1
  40574e:	4680      	mov	r8, r0
  405750:	f002 f94c 	bl	4079ec <__aeabi_d2iz>
  405754:	f001 fe34 	bl	4073c0 <__aeabi_i2d>
  405758:	4602      	mov	r2, r0
  40575a:	460b      	mov	r3, r1
  40575c:	4606      	mov	r6, r0
  40575e:	460f      	mov	r7, r1
  405760:	4640      	mov	r0, r8
  405762:	4649      	mov	r1, r9
  405764:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  405768:	f001 fcdc 	bl	407124 <__aeabi_dsub>
  40576c:	2200      	movs	r2, #0
  40576e:	4b67      	ldr	r3, [pc, #412]	; (40590c <__ieee754_rem_pio2+0x26c>)
  405770:	f001 fe8c 	bl	40748c <__aeabi_dmul>
  405774:	2200      	movs	r2, #0
  405776:	2300      	movs	r3, #0
  405778:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  40577c:	f002 f8ee 	bl	40795c <__aeabi_dcmpeq>
  405780:	2800      	cmp	r0, #0
  405782:	f000 8175 	beq.w	405a70 <__ieee754_rem_pio2+0x3d0>
  405786:	2300      	movs	r3, #0
  405788:	4630      	mov	r0, r6
  40578a:	4639      	mov	r1, r7
  40578c:	2200      	movs	r2, #0
  40578e:	f002 f8e5 	bl	40795c <__aeabi_dcmpeq>
  405792:	2800      	cmp	r0, #0
  405794:	bf14      	ite	ne
  405796:	2301      	movne	r3, #1
  405798:	2302      	moveq	r3, #2
  40579a:	4a5d      	ldr	r2, [pc, #372]	; (405910 <__ieee754_rem_pio2+0x270>)
  40579c:	9201      	str	r2, [sp, #4]
  40579e:	2102      	movs	r1, #2
  4057a0:	9100      	str	r1, [sp, #0]
  4057a2:	462a      	mov	r2, r5
  4057a4:	4651      	mov	r1, sl
  4057a6:	a80a      	add	r0, sp, #40	; 0x28
  4057a8:	f000 fb82 	bl	405eb0 <__kernel_rem_pio2>
  4057ac:	2c00      	cmp	r4, #0
  4057ae:	f2c0 8151 	blt.w	405a54 <__ieee754_rem_pio2+0x3b4>
  4057b2:	4605      	mov	r5, r0
  4057b4:	e006      	b.n	4057c4 <__ieee754_rem_pio2+0x124>
  4057b6:	e9c2 0100 	strd	r0, r1, [r2]
  4057ba:	2500      	movs	r5, #0
  4057bc:	2400      	movs	r4, #0
  4057be:	e9c2 4502 	strd	r4, r5, [r2, #8]
  4057c2:	2500      	movs	r5, #0
  4057c4:	4628      	mov	r0, r5
  4057c6:	b011      	add	sp, #68	; 0x44
  4057c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4057cc:	4602      	mov	r2, r0
  4057ce:	460b      	mov	r3, r1
  4057d0:	f001 fca8 	bl	407124 <__aeabi_dsub>
  4057d4:	2500      	movs	r5, #0
  4057d6:	e9ca 0102 	strd	r0, r1, [sl, #8]
  4057da:	e9ca 0100 	strd	r0, r1, [sl]
  4057de:	e7f1      	b.n	4057c4 <__ieee754_rem_pio2+0x124>
  4057e0:	a33f      	add	r3, pc, #252	; (adr r3, 4058e0 <__ieee754_rem_pio2+0x240>)
  4057e2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4057e6:	f001 fc9d 	bl	407124 <__aeabi_dsub>
  4057ea:	a33f      	add	r3, pc, #252	; (adr r3, 4058e8 <__ieee754_rem_pio2+0x248>)
  4057ec:	e9d3 2300 	ldrd	r2, r3, [r3]
  4057f0:	460d      	mov	r5, r1
  4057f2:	4604      	mov	r4, r0
  4057f4:	f001 fc96 	bl	407124 <__aeabi_dsub>
  4057f8:	4602      	mov	r2, r0
  4057fa:	460b      	mov	r3, r1
  4057fc:	e9ca 2300 	strd	r2, r3, [sl]
  405800:	4629      	mov	r1, r5
  405802:	4620      	mov	r0, r4
  405804:	f001 fc8e 	bl	407124 <__aeabi_dsub>
  405808:	a337      	add	r3, pc, #220	; (adr r3, 4058e8 <__ieee754_rem_pio2+0x248>)
  40580a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40580e:	f001 fc89 	bl	407124 <__aeabi_dsub>
  405812:	2501      	movs	r5, #1
  405814:	e9ca 0102 	strd	r0, r1, [sl, #8]
  405818:	e7d4      	b.n	4057c4 <__ieee754_rem_pio2+0x124>
  40581a:	f001 fb63 	bl	406ee4 <fabs>
  40581e:	a334      	add	r3, pc, #208	; (adr r3, 4058f0 <__ieee754_rem_pio2+0x250>)
  405820:	e9d3 2300 	ldrd	r2, r3, [r3]
  405824:	4680      	mov	r8, r0
  405826:	4689      	mov	r9, r1
  405828:	f001 fe30 	bl	40748c <__aeabi_dmul>
  40582c:	2200      	movs	r2, #0
  40582e:	4b39      	ldr	r3, [pc, #228]	; (405914 <__ieee754_rem_pio2+0x274>)
  405830:	f001 fc7a 	bl	407128 <__adddf3>
  405834:	f002 f8da 	bl	4079ec <__aeabi_d2iz>
  405838:	4605      	mov	r5, r0
  40583a:	f001 fdc1 	bl	4073c0 <__aeabi_i2d>
  40583e:	a324      	add	r3, pc, #144	; (adr r3, 4058d0 <__ieee754_rem_pio2+0x230>)
  405840:	e9d3 2300 	ldrd	r2, r3, [r3]
  405844:	e9cd 0104 	strd	r0, r1, [sp, #16]
  405848:	f001 fe20 	bl	40748c <__aeabi_dmul>
  40584c:	4602      	mov	r2, r0
  40584e:	460b      	mov	r3, r1
  405850:	4640      	mov	r0, r8
  405852:	4649      	mov	r1, r9
  405854:	f001 fc66 	bl	407124 <__aeabi_dsub>
  405858:	a31f      	add	r3, pc, #124	; (adr r3, 4058d8 <__ieee754_rem_pio2+0x238>)
  40585a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40585e:	4680      	mov	r8, r0
  405860:	4689      	mov	r9, r1
  405862:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405866:	f001 fe11 	bl	40748c <__aeabi_dmul>
  40586a:	2d1f      	cmp	r5, #31
  40586c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405870:	dc54      	bgt.n	40591c <__ieee754_rem_pio2+0x27c>
  405872:	4b29      	ldr	r3, [pc, #164]	; (405918 <__ieee754_rem_pio2+0x278>)
  405874:	1e6a      	subs	r2, r5, #1
  405876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40587a:	429f      	cmp	r7, r3
  40587c:	d04e      	beq.n	40591c <__ieee754_rem_pio2+0x27c>
  40587e:	4602      	mov	r2, r0
  405880:	460b      	mov	r3, r1
  405882:	4640      	mov	r0, r8
  405884:	4649      	mov	r1, r9
  405886:	f001 fc4d 	bl	407124 <__aeabi_dsub>
  40588a:	4602      	mov	r2, r0
  40588c:	460b      	mov	r3, r1
  40588e:	e9ca 2300 	strd	r2, r3, [sl]
  405892:	4683      	mov	fp, r0
  405894:	460e      	mov	r6, r1
  405896:	465a      	mov	r2, fp
  405898:	4633      	mov	r3, r6
  40589a:	4640      	mov	r0, r8
  40589c:	4649      	mov	r1, r9
  40589e:	f001 fc41 	bl	407124 <__aeabi_dsub>
  4058a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4058a6:	f001 fc3d 	bl	407124 <__aeabi_dsub>
  4058aa:	2c00      	cmp	r4, #0
  4058ac:	4602      	mov	r2, r0
  4058ae:	460b      	mov	r3, r1
  4058b0:	e9ca 2302 	strd	r2, r3, [sl, #8]
  4058b4:	da86      	bge.n	4057c4 <__ieee754_rem_pio2+0x124>
  4058b6:	465b      	mov	r3, fp
  4058b8:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  4058bc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4058c0:	e88a 0048 	stmia.w	sl, {r3, r6}
  4058c4:	f8ca 100c 	str.w	r1, [sl, #12]
  4058c8:	f8ca 0008 	str.w	r0, [sl, #8]
  4058cc:	426d      	negs	r5, r5
  4058ce:	e779      	b.n	4057c4 <__ieee754_rem_pio2+0x124>
  4058d0:	54400000 	.word	0x54400000
  4058d4:	3ff921fb 	.word	0x3ff921fb
  4058d8:	1a626331 	.word	0x1a626331
  4058dc:	3dd0b461 	.word	0x3dd0b461
  4058e0:	1a600000 	.word	0x1a600000
  4058e4:	3dd0b461 	.word	0x3dd0b461
  4058e8:	2e037073 	.word	0x2e037073
  4058ec:	3ba3198a 	.word	0x3ba3198a
  4058f0:	6dc9c883 	.word	0x6dc9c883
  4058f4:	3fe45f30 	.word	0x3fe45f30
  4058f8:	3fe921fb 	.word	0x3fe921fb
  4058fc:	4002d97b 	.word	0x4002d97b
  405900:	3ff921fb 	.word	0x3ff921fb
  405904:	413921fb 	.word	0x413921fb
  405908:	7fefffff 	.word	0x7fefffff
  40590c:	41700000 	.word	0x41700000
  405910:	004085e0 	.word	0x004085e0
  405914:	3fe00000 	.word	0x3fe00000
  405918:	00408560 	.word	0x00408560
  40591c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405920:	4640      	mov	r0, r8
  405922:	4649      	mov	r1, r9
  405924:	f001 fbfe 	bl	407124 <__aeabi_dsub>
  405928:	153a      	asrs	r2, r7, #20
  40592a:	f3c1 530a 	ubfx	r3, r1, #20, #11
  40592e:	1ad3      	subs	r3, r2, r3
  405930:	2b10      	cmp	r3, #16
  405932:	4683      	mov	fp, r0
  405934:	460e      	mov	r6, r1
  405936:	9209      	str	r2, [sp, #36]	; 0x24
  405938:	e9ca 0100 	strd	r0, r1, [sl]
  40593c:	ddab      	ble.n	405896 <__ieee754_rem_pio2+0x1f6>
  40593e:	a35e      	add	r3, pc, #376	; (adr r3, 405ab8 <__ieee754_rem_pio2+0x418>)
  405940:	e9d3 2300 	ldrd	r2, r3, [r3]
  405944:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405948:	f001 fda0 	bl	40748c <__aeabi_dmul>
  40594c:	4606      	mov	r6, r0
  40594e:	460f      	mov	r7, r1
  405950:	4602      	mov	r2, r0
  405952:	460b      	mov	r3, r1
  405954:	4640      	mov	r0, r8
  405956:	4649      	mov	r1, r9
  405958:	f001 fbe4 	bl	407124 <__aeabi_dsub>
  40595c:	e9cd 0106 	strd	r0, r1, [sp, #24]
  405960:	4602      	mov	r2, r0
  405962:	460b      	mov	r3, r1
  405964:	4640      	mov	r0, r8
  405966:	4649      	mov	r1, r9
  405968:	f001 fbdc 	bl	407124 <__aeabi_dsub>
  40596c:	4632      	mov	r2, r6
  40596e:	463b      	mov	r3, r7
  405970:	f001 fbd8 	bl	407124 <__aeabi_dsub>
  405974:	a352      	add	r3, pc, #328	; (adr r3, 405ac0 <__ieee754_rem_pio2+0x420>)
  405976:	e9d3 2300 	ldrd	r2, r3, [r3]
  40597a:	4606      	mov	r6, r0
  40597c:	460f      	mov	r7, r1
  40597e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405982:	f001 fd83 	bl	40748c <__aeabi_dmul>
  405986:	4632      	mov	r2, r6
  405988:	463b      	mov	r3, r7
  40598a:	f001 fbcb 	bl	407124 <__aeabi_dsub>
  40598e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  405992:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405996:	4602      	mov	r2, r0
  405998:	460b      	mov	r3, r1
  40599a:	4640      	mov	r0, r8
  40599c:	4649      	mov	r1, r9
  40599e:	f001 fbc1 	bl	407124 <__aeabi_dsub>
  4059a2:	460b      	mov	r3, r1
  4059a4:	f3c1 570a 	ubfx	r7, r1, #20, #11
  4059a8:	460e      	mov	r6, r1
  4059aa:	9909      	ldr	r1, [sp, #36]	; 0x24
  4059ac:	1bcf      	subs	r7, r1, r7
  4059ae:	4602      	mov	r2, r0
  4059b0:	2f31      	cmp	r7, #49	; 0x31
  4059b2:	4683      	mov	fp, r0
  4059b4:	e9ca 2300 	strd	r2, r3, [sl]
  4059b8:	dd7a      	ble.n	405ab0 <__ieee754_rem_pio2+0x410>
  4059ba:	a343      	add	r3, pc, #268	; (adr r3, 405ac8 <__ieee754_rem_pio2+0x428>)
  4059bc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4059c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4059c4:	f001 fd62 	bl	40748c <__aeabi_dmul>
  4059c8:	4606      	mov	r6, r0
  4059ca:	460f      	mov	r7, r1
  4059cc:	4602      	mov	r2, r0
  4059ce:	460b      	mov	r3, r1
  4059d0:	4640      	mov	r0, r8
  4059d2:	4649      	mov	r1, r9
  4059d4:	e9cd 8906 	strd	r8, r9, [sp, #24]
  4059d8:	f001 fba4 	bl	407124 <__aeabi_dsub>
  4059dc:	4602      	mov	r2, r0
  4059de:	460b      	mov	r3, r1
  4059e0:	4680      	mov	r8, r0
  4059e2:	4689      	mov	r9, r1
  4059e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4059e8:	f001 fb9c 	bl	407124 <__aeabi_dsub>
  4059ec:	4632      	mov	r2, r6
  4059ee:	463b      	mov	r3, r7
  4059f0:	f001 fb98 	bl	407124 <__aeabi_dsub>
  4059f4:	a336      	add	r3, pc, #216	; (adr r3, 405ad0 <__ieee754_rem_pio2+0x430>)
  4059f6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4059fa:	4606      	mov	r6, r0
  4059fc:	460f      	mov	r7, r1
  4059fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405a02:	f001 fd43 	bl	40748c <__aeabi_dmul>
  405a06:	4632      	mov	r2, r6
  405a08:	463b      	mov	r3, r7
  405a0a:	f001 fb8b 	bl	407124 <__aeabi_dsub>
  405a0e:	4602      	mov	r2, r0
  405a10:	460b      	mov	r3, r1
  405a12:	e9cd 2302 	strd	r2, r3, [sp, #8]
  405a16:	e734      	b.n	405882 <__ieee754_rem_pio2+0x1e2>
  405a18:	f001 fb86 	bl	407128 <__adddf3>
  405a1c:	4b30      	ldr	r3, [pc, #192]	; (405ae0 <__ieee754_rem_pio2+0x440>)
  405a1e:	429f      	cmp	r7, r3
  405a20:	4604      	mov	r4, r0
  405a22:	460d      	mov	r5, r1
  405a24:	d026      	beq.n	405a74 <__ieee754_rem_pio2+0x3d4>
  405a26:	a32c      	add	r3, pc, #176	; (adr r3, 405ad8 <__ieee754_rem_pio2+0x438>)
  405a28:	e9d3 2300 	ldrd	r2, r3, [r3]
  405a2c:	f001 fb7c 	bl	407128 <__adddf3>
  405a30:	4602      	mov	r2, r0
  405a32:	460b      	mov	r3, r1
  405a34:	e9ca 2300 	strd	r2, r3, [sl]
  405a38:	4629      	mov	r1, r5
  405a3a:	4620      	mov	r0, r4
  405a3c:	f001 fb72 	bl	407124 <__aeabi_dsub>
  405a40:	a325      	add	r3, pc, #148	; (adr r3, 405ad8 <__ieee754_rem_pio2+0x438>)
  405a42:	e9d3 2300 	ldrd	r2, r3, [r3]
  405a46:	f001 fb6f 	bl	407128 <__adddf3>
  405a4a:	f04f 35ff 	mov.w	r5, #4294967295
  405a4e:	e9ca 0102 	strd	r0, r1, [sl, #8]
  405a52:	e6b7      	b.n	4057c4 <__ieee754_rem_pio2+0x124>
  405a54:	f8da 2004 	ldr.w	r2, [sl, #4]
  405a58:	f8da 300c 	ldr.w	r3, [sl, #12]
  405a5c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  405a60:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  405a64:	4245      	negs	r5, r0
  405a66:	f8ca 2004 	str.w	r2, [sl, #4]
  405a6a:	f8ca 300c 	str.w	r3, [sl, #12]
  405a6e:	e6a9      	b.n	4057c4 <__ieee754_rem_pio2+0x124>
  405a70:	2303      	movs	r3, #3
  405a72:	e692      	b.n	40579a <__ieee754_rem_pio2+0xfa>
  405a74:	a310      	add	r3, pc, #64	; (adr r3, 405ab8 <__ieee754_rem_pio2+0x418>)
  405a76:	e9d3 2300 	ldrd	r2, r3, [r3]
  405a7a:	f001 fb55 	bl	407128 <__adddf3>
  405a7e:	a310      	add	r3, pc, #64	; (adr r3, 405ac0 <__ieee754_rem_pio2+0x420>)
  405a80:	e9d3 2300 	ldrd	r2, r3, [r3]
  405a84:	460d      	mov	r5, r1
  405a86:	4604      	mov	r4, r0
  405a88:	f001 fb4e 	bl	407128 <__adddf3>
  405a8c:	4602      	mov	r2, r0
  405a8e:	460b      	mov	r3, r1
  405a90:	e9ca 2300 	strd	r2, r3, [sl]
  405a94:	4629      	mov	r1, r5
  405a96:	4620      	mov	r0, r4
  405a98:	f001 fb44 	bl	407124 <__aeabi_dsub>
  405a9c:	a308      	add	r3, pc, #32	; (adr r3, 405ac0 <__ieee754_rem_pio2+0x420>)
  405a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405aa2:	f001 fb41 	bl	407128 <__adddf3>
  405aa6:	f04f 35ff 	mov.w	r5, #4294967295
  405aaa:	e9ca 0102 	strd	r0, r1, [sl, #8]
  405aae:	e689      	b.n	4057c4 <__ieee754_rem_pio2+0x124>
  405ab0:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  405ab4:	e6ef      	b.n	405896 <__ieee754_rem_pio2+0x1f6>
  405ab6:	bf00      	nop
  405ab8:	1a600000 	.word	0x1a600000
  405abc:	3dd0b461 	.word	0x3dd0b461
  405ac0:	2e037073 	.word	0x2e037073
  405ac4:	3ba3198a 	.word	0x3ba3198a
  405ac8:	2e000000 	.word	0x2e000000
  405acc:	3ba3198a 	.word	0x3ba3198a
  405ad0:	252049c1 	.word	0x252049c1
  405ad4:	397b839a 	.word	0x397b839a
  405ad8:	1a626331 	.word	0x1a626331
  405adc:	3dd0b461 	.word	0x3dd0b461
  405ae0:	3ff921fb 	.word	0x3ff921fb

00405ae4 <__ieee754_sqrt>:
  405ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405ae8:	4e5d      	ldr	r6, [pc, #372]	; (405c60 <__ieee754_sqrt+0x17c>)
  405aea:	46b6      	mov	lr, r6
  405aec:	400e      	ands	r6, r1
  405aee:	4576      	cmp	r6, lr
  405af0:	460c      	mov	r4, r1
  405af2:	4605      	mov	r5, r0
  405af4:	f000 8095 	beq.w	405c22 <__ieee754_sqrt+0x13e>
  405af8:	2900      	cmp	r1, #0
  405afa:	460b      	mov	r3, r1
  405afc:	4602      	mov	r2, r0
  405afe:	dd73      	ble.n	405be8 <__ieee754_sqrt+0x104>
  405b00:	150f      	asrs	r7, r1, #20
  405b02:	d07e      	beq.n	405c02 <__ieee754_sqrt+0x11e>
  405b04:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  405b08:	f3c3 0313 	ubfx	r3, r3, #0, #20
  405b0c:	07f8      	lsls	r0, r7, #31
  405b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  405b12:	d464      	bmi.n	405bde <__ieee754_sqrt+0xfa>
  405b14:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  405b18:	2600      	movs	r6, #0
  405b1a:	440b      	add	r3, r1
  405b1c:	107f      	asrs	r7, r7, #1
  405b1e:	0052      	lsls	r2, r2, #1
  405b20:	46b6      	mov	lr, r6
  405b22:	2016      	movs	r0, #22
  405b24:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  405b28:	eb0e 0401 	add.w	r4, lr, r1
  405b2c:	429c      	cmp	r4, r3
  405b2e:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  405b32:	ea4f 0242 	mov.w	r2, r2, lsl #1
  405b36:	dc03      	bgt.n	405b40 <__ieee754_sqrt+0x5c>
  405b38:	1b1b      	subs	r3, r3, r4
  405b3a:	eb04 0e01 	add.w	lr, r4, r1
  405b3e:	440e      	add	r6, r1
  405b40:	3801      	subs	r0, #1
  405b42:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  405b46:	ea4f 0151 	mov.w	r1, r1, lsr #1
  405b4a:	d1ed      	bne.n	405b28 <__ieee754_sqrt+0x44>
  405b4c:	4684      	mov	ip, r0
  405b4e:	2420      	movs	r4, #32
  405b50:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  405b54:	e009      	b.n	405b6a <__ieee754_sqrt+0x86>
  405b56:	d020      	beq.n	405b9a <__ieee754_sqrt+0xb6>
  405b58:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  405b5c:	3c01      	subs	r4, #1
  405b5e:	ea4f 0151 	mov.w	r1, r1, lsr #1
  405b62:	442b      	add	r3, r5
  405b64:	ea4f 0242 	mov.w	r2, r2, lsl #1
  405b68:	d020      	beq.n	405bac <__ieee754_sqrt+0xc8>
  405b6a:	459e      	cmp	lr, r3
  405b6c:	eb01 050c 	add.w	r5, r1, ip
  405b70:	daf1      	bge.n	405b56 <__ieee754_sqrt+0x72>
  405b72:	2d00      	cmp	r5, #0
  405b74:	eb05 0c01 	add.w	ip, r5, r1
  405b78:	db09      	blt.n	405b8e <__ieee754_sqrt+0xaa>
  405b7a:	46f0      	mov	r8, lr
  405b7c:	4295      	cmp	r5, r2
  405b7e:	ebce 0303 	rsb	r3, lr, r3
  405b82:	d900      	bls.n	405b86 <__ieee754_sqrt+0xa2>
  405b84:	3b01      	subs	r3, #1
  405b86:	1b52      	subs	r2, r2, r5
  405b88:	4408      	add	r0, r1
  405b8a:	46c6      	mov	lr, r8
  405b8c:	e7e4      	b.n	405b58 <__ieee754_sqrt+0x74>
  405b8e:	f1bc 0f00 	cmp.w	ip, #0
  405b92:	dbf2      	blt.n	405b7a <__ieee754_sqrt+0x96>
  405b94:	f10e 0801 	add.w	r8, lr, #1
  405b98:	e7f0      	b.n	405b7c <__ieee754_sqrt+0x98>
  405b9a:	4295      	cmp	r5, r2
  405b9c:	d817      	bhi.n	405bce <__ieee754_sqrt+0xea>
  405b9e:	2d00      	cmp	r5, #0
  405ba0:	eb05 0c01 	add.w	ip, r5, r1
  405ba4:	db47      	blt.n	405c36 <__ieee754_sqrt+0x152>
  405ba6:	4698      	mov	r8, r3
  405ba8:	2300      	movs	r3, #0
  405baa:	e7ec      	b.n	405b86 <__ieee754_sqrt+0xa2>
  405bac:	4313      	orrs	r3, r2
  405bae:	d110      	bne.n	405bd2 <__ieee754_sqrt+0xee>
  405bb0:	0840      	lsrs	r0, r0, #1
  405bb2:	1073      	asrs	r3, r6, #1
  405bb4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  405bb8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  405bbc:	07f2      	lsls	r2, r6, #31
  405bbe:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  405bc2:	bf48      	it	mi
  405bc4:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  405bc8:	4649      	mov	r1, r9
  405bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405bce:	4673      	mov	r3, lr
  405bd0:	e7c2      	b.n	405b58 <__ieee754_sqrt+0x74>
  405bd2:	1c41      	adds	r1, r0, #1
  405bd4:	d033      	beq.n	405c3e <__ieee754_sqrt+0x15a>
  405bd6:	f000 0301 	and.w	r3, r0, #1
  405bda:	4418      	add	r0, r3
  405bdc:	e7e8      	b.n	405bb0 <__ieee754_sqrt+0xcc>
  405bde:	005b      	lsls	r3, r3, #1
  405be0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  405be4:	0052      	lsls	r2, r2, #1
  405be6:	e795      	b.n	405b14 <__ieee754_sqrt+0x30>
  405be8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  405bec:	4306      	orrs	r6, r0
  405bee:	d0ec      	beq.n	405bca <__ieee754_sqrt+0xe6>
  405bf0:	bb69      	cbnz	r1, 405c4e <__ieee754_sqrt+0x16a>
  405bf2:	460f      	mov	r7, r1
  405bf4:	0ad3      	lsrs	r3, r2, #11
  405bf6:	3f15      	subs	r7, #21
  405bf8:	0552      	lsls	r2, r2, #21
  405bfa:	2b00      	cmp	r3, #0
  405bfc:	d0fa      	beq.n	405bf4 <__ieee754_sqrt+0x110>
  405bfe:	02dd      	lsls	r5, r3, #11
  405c00:	d420      	bmi.n	405c44 <__ieee754_sqrt+0x160>
  405c02:	2100      	movs	r1, #0
  405c04:	e000      	b.n	405c08 <__ieee754_sqrt+0x124>
  405c06:	4601      	mov	r1, r0
  405c08:	005b      	lsls	r3, r3, #1
  405c0a:	02dc      	lsls	r4, r3, #11
  405c0c:	f101 0001 	add.w	r0, r1, #1
  405c10:	d5f9      	bpl.n	405c06 <__ieee754_sqrt+0x122>
  405c12:	f1c0 0420 	rsb	r4, r0, #32
  405c16:	fa22 f404 	lsr.w	r4, r2, r4
  405c1a:	4323      	orrs	r3, r4
  405c1c:	1a7f      	subs	r7, r7, r1
  405c1e:	4082      	lsls	r2, r0
  405c20:	e770      	b.n	405b04 <__ieee754_sqrt+0x20>
  405c22:	4602      	mov	r2, r0
  405c24:	460b      	mov	r3, r1
  405c26:	f001 fc31 	bl	40748c <__aeabi_dmul>
  405c2a:	462a      	mov	r2, r5
  405c2c:	4623      	mov	r3, r4
  405c2e:	f001 fa7b 	bl	407128 <__adddf3>
  405c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405c36:	f1bc 0f00 	cmp.w	ip, #0
  405c3a:	daab      	bge.n	405b94 <__ieee754_sqrt+0xb0>
  405c3c:	e7b3      	b.n	405ba6 <__ieee754_sqrt+0xc2>
  405c3e:	3601      	adds	r6, #1
  405c40:	4620      	mov	r0, r4
  405c42:	e7b6      	b.n	405bb2 <__ieee754_sqrt+0xce>
  405c44:	2420      	movs	r4, #32
  405c46:	f04f 31ff 	mov.w	r1, #4294967295
  405c4a:	2000      	movs	r0, #0
  405c4c:	e7e3      	b.n	405c16 <__ieee754_sqrt+0x132>
  405c4e:	4602      	mov	r2, r0
  405c50:	460b      	mov	r3, r1
  405c52:	f001 fa67 	bl	407124 <__aeabi_dsub>
  405c56:	4602      	mov	r2, r0
  405c58:	460b      	mov	r3, r1
  405c5a:	f001 fd41 	bl	4076e0 <__aeabi_ddiv>
  405c5e:	e7b4      	b.n	405bca <__ieee754_sqrt+0xe6>
  405c60:	7ff00000 	.word	0x7ff00000
  405c64:	00000000 	.word	0x00000000

00405c68 <__kernel_cos>:
  405c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405c6c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  405c70:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  405c74:	b085      	sub	sp, #20
  405c76:	460c      	mov	r4, r1
  405c78:	4692      	mov	sl, r2
  405c7a:	469b      	mov	fp, r3
  405c7c:	4605      	mov	r5, r0
  405c7e:	da6b      	bge.n	405d58 <__kernel_cos+0xf0>
  405c80:	f001 feb4 	bl	4079ec <__aeabi_d2iz>
  405c84:	2800      	cmp	r0, #0
  405c86:	f000 80e8 	beq.w	405e5a <__kernel_cos+0x1f2>
  405c8a:	462a      	mov	r2, r5
  405c8c:	4623      	mov	r3, r4
  405c8e:	4628      	mov	r0, r5
  405c90:	4621      	mov	r1, r4
  405c92:	f001 fbfb 	bl	40748c <__aeabi_dmul>
  405c96:	a374      	add	r3, pc, #464	; (adr r3, 405e68 <__kernel_cos+0x200>)
  405c98:	e9d3 2300 	ldrd	r2, r3, [r3]
  405c9c:	4680      	mov	r8, r0
  405c9e:	4689      	mov	r9, r1
  405ca0:	f001 fbf4 	bl	40748c <__aeabi_dmul>
  405ca4:	a372      	add	r3, pc, #456	; (adr r3, 405e70 <__kernel_cos+0x208>)
  405ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
  405caa:	f001 fa3d 	bl	407128 <__adddf3>
  405cae:	4642      	mov	r2, r8
  405cb0:	464b      	mov	r3, r9
  405cb2:	f001 fbeb 	bl	40748c <__aeabi_dmul>
  405cb6:	a370      	add	r3, pc, #448	; (adr r3, 405e78 <__kernel_cos+0x210>)
  405cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
  405cbc:	f001 fa32 	bl	407124 <__aeabi_dsub>
  405cc0:	4642      	mov	r2, r8
  405cc2:	464b      	mov	r3, r9
  405cc4:	f001 fbe2 	bl	40748c <__aeabi_dmul>
  405cc8:	a36d      	add	r3, pc, #436	; (adr r3, 405e80 <__kernel_cos+0x218>)
  405cca:	e9d3 2300 	ldrd	r2, r3, [r3]
  405cce:	f001 fa2b 	bl	407128 <__adddf3>
  405cd2:	4642      	mov	r2, r8
  405cd4:	464b      	mov	r3, r9
  405cd6:	f001 fbd9 	bl	40748c <__aeabi_dmul>
  405cda:	a36b      	add	r3, pc, #428	; (adr r3, 405e88 <__kernel_cos+0x220>)
  405cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
  405ce0:	f001 fa20 	bl	407124 <__aeabi_dsub>
  405ce4:	4642      	mov	r2, r8
  405ce6:	464b      	mov	r3, r9
  405ce8:	f001 fbd0 	bl	40748c <__aeabi_dmul>
  405cec:	a368      	add	r3, pc, #416	; (adr r3, 405e90 <__kernel_cos+0x228>)
  405cee:	e9d3 2300 	ldrd	r2, r3, [r3]
  405cf2:	f001 fa19 	bl	407128 <__adddf3>
  405cf6:	4642      	mov	r2, r8
  405cf8:	464b      	mov	r3, r9
  405cfa:	f001 fbc7 	bl	40748c <__aeabi_dmul>
  405cfe:	e9cd 0100 	strd	r0, r1, [sp]
  405d02:	2200      	movs	r2, #0
  405d04:	4b64      	ldr	r3, [pc, #400]	; (405e98 <__kernel_cos+0x230>)
  405d06:	4640      	mov	r0, r8
  405d08:	4649      	mov	r1, r9
  405d0a:	f001 fbbf 	bl	40748c <__aeabi_dmul>
  405d0e:	e9dd 2300 	ldrd	r2, r3, [sp]
  405d12:	4606      	mov	r6, r0
  405d14:	460f      	mov	r7, r1
  405d16:	4640      	mov	r0, r8
  405d18:	4649      	mov	r1, r9
  405d1a:	f001 fbb7 	bl	40748c <__aeabi_dmul>
  405d1e:	4652      	mov	r2, sl
  405d20:	4680      	mov	r8, r0
  405d22:	4689      	mov	r9, r1
  405d24:	465b      	mov	r3, fp
  405d26:	4628      	mov	r0, r5
  405d28:	4621      	mov	r1, r4
  405d2a:	f001 fbaf 	bl	40748c <__aeabi_dmul>
  405d2e:	4602      	mov	r2, r0
  405d30:	460b      	mov	r3, r1
  405d32:	4640      	mov	r0, r8
  405d34:	4649      	mov	r1, r9
  405d36:	f001 f9f5 	bl	407124 <__aeabi_dsub>
  405d3a:	4602      	mov	r2, r0
  405d3c:	460b      	mov	r3, r1
  405d3e:	4630      	mov	r0, r6
  405d40:	4639      	mov	r1, r7
  405d42:	f001 f9ef 	bl	407124 <__aeabi_dsub>
  405d46:	4602      	mov	r2, r0
  405d48:	460b      	mov	r3, r1
  405d4a:	2000      	movs	r0, #0
  405d4c:	4953      	ldr	r1, [pc, #332]	; (405e9c <__kernel_cos+0x234>)
  405d4e:	f001 f9e9 	bl	407124 <__aeabi_dsub>
  405d52:	b005      	add	sp, #20
  405d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d58:	4602      	mov	r2, r0
  405d5a:	460b      	mov	r3, r1
  405d5c:	f001 fb96 	bl	40748c <__aeabi_dmul>
  405d60:	a341      	add	r3, pc, #260	; (adr r3, 405e68 <__kernel_cos+0x200>)
  405d62:	e9d3 2300 	ldrd	r2, r3, [r3]
  405d66:	4680      	mov	r8, r0
  405d68:	4689      	mov	r9, r1
  405d6a:	f001 fb8f 	bl	40748c <__aeabi_dmul>
  405d6e:	a340      	add	r3, pc, #256	; (adr r3, 405e70 <__kernel_cos+0x208>)
  405d70:	e9d3 2300 	ldrd	r2, r3, [r3]
  405d74:	f001 f9d8 	bl	407128 <__adddf3>
  405d78:	4642      	mov	r2, r8
  405d7a:	464b      	mov	r3, r9
  405d7c:	f001 fb86 	bl	40748c <__aeabi_dmul>
  405d80:	a33d      	add	r3, pc, #244	; (adr r3, 405e78 <__kernel_cos+0x210>)
  405d82:	e9d3 2300 	ldrd	r2, r3, [r3]
  405d86:	f001 f9cd 	bl	407124 <__aeabi_dsub>
  405d8a:	4642      	mov	r2, r8
  405d8c:	464b      	mov	r3, r9
  405d8e:	f001 fb7d 	bl	40748c <__aeabi_dmul>
  405d92:	a33b      	add	r3, pc, #236	; (adr r3, 405e80 <__kernel_cos+0x218>)
  405d94:	e9d3 2300 	ldrd	r2, r3, [r3]
  405d98:	f001 f9c6 	bl	407128 <__adddf3>
  405d9c:	4642      	mov	r2, r8
  405d9e:	464b      	mov	r3, r9
  405da0:	f001 fb74 	bl	40748c <__aeabi_dmul>
  405da4:	a338      	add	r3, pc, #224	; (adr r3, 405e88 <__kernel_cos+0x220>)
  405da6:	e9d3 2300 	ldrd	r2, r3, [r3]
  405daa:	f001 f9bb 	bl	407124 <__aeabi_dsub>
  405dae:	4642      	mov	r2, r8
  405db0:	464b      	mov	r3, r9
  405db2:	f001 fb6b 	bl	40748c <__aeabi_dmul>
  405db6:	a336      	add	r3, pc, #216	; (adr r3, 405e90 <__kernel_cos+0x228>)
  405db8:	e9d3 2300 	ldrd	r2, r3, [r3]
  405dbc:	f001 f9b4 	bl	407128 <__adddf3>
  405dc0:	464b      	mov	r3, r9
  405dc2:	4642      	mov	r2, r8
  405dc4:	f001 fb62 	bl	40748c <__aeabi_dmul>
  405dc8:	4b35      	ldr	r3, [pc, #212]	; (405ea0 <__kernel_cos+0x238>)
  405dca:	429e      	cmp	r6, r3
  405dcc:	e9cd 0100 	strd	r0, r1, [sp]
  405dd0:	dd97      	ble.n	405d02 <__kernel_cos+0x9a>
  405dd2:	4b34      	ldr	r3, [pc, #208]	; (405ea4 <__kernel_cos+0x23c>)
  405dd4:	429e      	cmp	r6, r3
  405dd6:	f04f 0200 	mov.w	r2, #0
  405dda:	dc38      	bgt.n	405e4e <__kernel_cos+0x1e6>
  405ddc:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
  405de0:	2000      	movs	r0, #0
  405de2:	492e      	ldr	r1, [pc, #184]	; (405e9c <__kernel_cos+0x234>)
  405de4:	4616      	mov	r6, r2
  405de6:	461f      	mov	r7, r3
  405de8:	f001 f99c 	bl	407124 <__aeabi_dsub>
  405dec:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405df0:	2200      	movs	r2, #0
  405df2:	4b29      	ldr	r3, [pc, #164]	; (405e98 <__kernel_cos+0x230>)
  405df4:	4640      	mov	r0, r8
  405df6:	4649      	mov	r1, r9
  405df8:	f001 fb48 	bl	40748c <__aeabi_dmul>
  405dfc:	4632      	mov	r2, r6
  405dfe:	463b      	mov	r3, r7
  405e00:	f001 f990 	bl	407124 <__aeabi_dsub>
  405e04:	e9dd 2300 	ldrd	r2, r3, [sp]
  405e08:	4606      	mov	r6, r0
  405e0a:	460f      	mov	r7, r1
  405e0c:	4640      	mov	r0, r8
  405e0e:	4649      	mov	r1, r9
  405e10:	f001 fb3c 	bl	40748c <__aeabi_dmul>
  405e14:	4652      	mov	r2, sl
  405e16:	4680      	mov	r8, r0
  405e18:	4689      	mov	r9, r1
  405e1a:	465b      	mov	r3, fp
  405e1c:	4628      	mov	r0, r5
  405e1e:	4621      	mov	r1, r4
  405e20:	f001 fb34 	bl	40748c <__aeabi_dmul>
  405e24:	4602      	mov	r2, r0
  405e26:	460b      	mov	r3, r1
  405e28:	4640      	mov	r0, r8
  405e2a:	4649      	mov	r1, r9
  405e2c:	f001 f97a 	bl	407124 <__aeabi_dsub>
  405e30:	4602      	mov	r2, r0
  405e32:	460b      	mov	r3, r1
  405e34:	4630      	mov	r0, r6
  405e36:	4639      	mov	r1, r7
  405e38:	f001 f974 	bl	407124 <__aeabi_dsub>
  405e3c:	4602      	mov	r2, r0
  405e3e:	460b      	mov	r3, r1
  405e40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405e44:	f001 f96e 	bl	407124 <__aeabi_dsub>
  405e48:	b005      	add	sp, #20
  405e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e4e:	4b16      	ldr	r3, [pc, #88]	; (405ea8 <__kernel_cos+0x240>)
  405e50:	4f16      	ldr	r7, [pc, #88]	; (405eac <__kernel_cos+0x244>)
  405e52:	e9cd 2302 	strd	r2, r3, [sp, #8]
  405e56:	2600      	movs	r6, #0
  405e58:	e7ca      	b.n	405df0 <__kernel_cos+0x188>
  405e5a:	4910      	ldr	r1, [pc, #64]	; (405e9c <__kernel_cos+0x234>)
  405e5c:	2000      	movs	r0, #0
  405e5e:	b005      	add	sp, #20
  405e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e64:	f3af 8000 	nop.w
  405e68:	be8838d4 	.word	0xbe8838d4
  405e6c:	bda8fae9 	.word	0xbda8fae9
  405e70:	bdb4b1c4 	.word	0xbdb4b1c4
  405e74:	3e21ee9e 	.word	0x3e21ee9e
  405e78:	809c52ad 	.word	0x809c52ad
  405e7c:	3e927e4f 	.word	0x3e927e4f
  405e80:	19cb1590 	.word	0x19cb1590
  405e84:	3efa01a0 	.word	0x3efa01a0
  405e88:	16c15177 	.word	0x16c15177
  405e8c:	3f56c16c 	.word	0x3f56c16c
  405e90:	5555554c 	.word	0x5555554c
  405e94:	3fa55555 	.word	0x3fa55555
  405e98:	3fe00000 	.word	0x3fe00000
  405e9c:	3ff00000 	.word	0x3ff00000
  405ea0:	3fd33332 	.word	0x3fd33332
  405ea4:	3fe90000 	.word	0x3fe90000
  405ea8:	3fe70000 	.word	0x3fe70000
  405eac:	3fd20000 	.word	0x3fd20000

00405eb0 <__kernel_rem_pio2>:
  405eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405eb4:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
  405eb8:	4c79      	ldr	r4, [pc, #484]	; (4060a0 <__kernel_rem_pio2+0x1f0>)
  405eba:	9ea6      	ldr	r6, [sp, #664]	; 0x298
  405ebc:	4d79      	ldr	r5, [pc, #484]	; (4060a4 <__kernel_rem_pio2+0x1f4>)
  405ebe:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
  405ec2:	9409      	str	r4, [sp, #36]	; 0x24
  405ec4:	4626      	mov	r6, r4
  405ec6:	1ed4      	subs	r4, r2, #3
  405ec8:	fb85 7504 	smull	r7, r5, r5, r4
  405ecc:	17e4      	asrs	r4, r4, #31
  405ece:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
  405ed2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  405ed6:	461d      	mov	r5, r3
  405ed8:	930c      	str	r3, [sp, #48]	; 0x30
  405eda:	1c63      	adds	r3, r4, #1
  405edc:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
  405ee0:	3d01      	subs	r5, #1
  405ee2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  405ee6:	9308      	str	r3, [sp, #32]
  405ee8:	462b      	mov	r3, r5
  405eea:	940d      	str	r4, [sp, #52]	; 0x34
  405eec:	9502      	str	r5, [sp, #8]
  405eee:	1b65      	subs	r5, r4, r5
  405ef0:	18f4      	adds	r4, r6, r3
  405ef2:	9004      	str	r0, [sp, #16]
  405ef4:	910a      	str	r1, [sp, #40]	; 0x28
  405ef6:	d416      	bmi.n	405f26 <__kernel_rem_pio2+0x76>
  405ef8:	442c      	add	r4, r5
  405efa:	3401      	adds	r4, #1
  405efc:	ae22      	add	r6, sp, #136	; 0x88
  405efe:	9fa7      	ldr	r7, [sp, #668]	; 0x29c
  405f00:	e008      	b.n	405f14 <__kernel_rem_pio2+0x64>
  405f02:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
  405f06:	f001 fa5b 	bl	4073c0 <__aeabi_i2d>
  405f0a:	3501      	adds	r5, #1
  405f0c:	42a5      	cmp	r5, r4
  405f0e:	e9e6 0102 	strd	r0, r1, [r6, #8]!
  405f12:	d008      	beq.n	405f26 <__kernel_rem_pio2+0x76>
  405f14:	2d00      	cmp	r5, #0
  405f16:	daf4      	bge.n	405f02 <__kernel_rem_pio2+0x52>
  405f18:	3501      	adds	r5, #1
  405f1a:	2000      	movs	r0, #0
  405f1c:	2100      	movs	r1, #0
  405f1e:	42a5      	cmp	r5, r4
  405f20:	e9e6 0102 	strd	r0, r1, [r6, #8]!
  405f24:	d1f6      	bne.n	405f14 <__kernel_rem_pio2+0x64>
  405f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405f28:	2b00      	cmp	r3, #0
  405f2a:	db31      	blt.n	405f90 <__kernel_rem_pio2+0xe0>
  405f2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405f2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405f30:	a974      	add	r1, sp, #464	; 0x1d0
  405f32:	eb01 0bc2 	add.w	fp, r1, r2, lsl #3
  405f36:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
  405f3a:	9a02      	ldr	r2, [sp, #8]
  405f3c:	a924      	add	r1, sp, #144	; 0x90
  405f3e:	00db      	lsls	r3, r3, #3
  405f40:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
  405f44:	9301      	str	r3, [sp, #4]
  405f46:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
  405f4a:	9b02      	ldr	r3, [sp, #8]
  405f4c:	2b00      	cmp	r3, #0
  405f4e:	f2c0 8190 	blt.w	406272 <__kernel_rem_pio2+0x3c2>
  405f52:	9b04      	ldr	r3, [sp, #16]
  405f54:	f1a3 0508 	sub.w	r5, r3, #8
  405f58:	9b01      	ldr	r3, [sp, #4]
  405f5a:	464c      	mov	r4, r9
  405f5c:	eb09 0803 	add.w	r8, r9, r3
  405f60:	2600      	movs	r6, #0
  405f62:	2700      	movs	r7, #0
  405f64:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
  405f68:	e874 0102 	ldrd	r0, r1, [r4], #-8
  405f6c:	f001 fa8e 	bl	40748c <__aeabi_dmul>
  405f70:	4602      	mov	r2, r0
  405f72:	460b      	mov	r3, r1
  405f74:	4630      	mov	r0, r6
  405f76:	4639      	mov	r1, r7
  405f78:	f001 f8d6 	bl	407128 <__adddf3>
  405f7c:	4544      	cmp	r4, r8
  405f7e:	4606      	mov	r6, r0
  405f80:	460f      	mov	r7, r1
  405f82:	d1ef      	bne.n	405f64 <__kernel_rem_pio2+0xb4>
  405f84:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  405f88:	45da      	cmp	sl, fp
  405f8a:	f109 0908 	add.w	r9, r9, #8
  405f8e:	d1dc      	bne.n	405f4a <__kernel_rem_pio2+0x9a>
  405f90:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405f92:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
  405f96:	3b02      	subs	r3, #2
  405f98:	009b      	lsls	r3, r3, #2
  405f9a:	1d1a      	adds	r2, r3, #4
  405f9c:	a910      	add	r1, sp, #64	; 0x40
  405f9e:	440a      	add	r2, r1
  405fa0:	440b      	add	r3, r1
  405fa2:	920f      	str	r2, [sp, #60]	; 0x3c
  405fa4:	930e      	str	r3, [sp, #56]	; 0x38
  405fa6:	ab9c      	add	r3, sp, #624	; 0x270
  405fa8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  405fac:	2d00      	cmp	r5, #0
  405fae:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
  405fb2:	dd2b      	ble.n	40600c <__kernel_rem_pio2+0x15c>
  405fb4:	ab9c      	add	r3, sp, #624	; 0x270
  405fb6:	eb03 04c5 	add.w	r4, r3, r5, lsl #3
  405fba:	3ca8      	subs	r4, #168	; 0xa8
  405fbc:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
  405fc0:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
  405fc4:	2200      	movs	r2, #0
  405fc6:	4b38      	ldr	r3, [pc, #224]	; (4060a8 <__kernel_rem_pio2+0x1f8>)
  405fc8:	4630      	mov	r0, r6
  405fca:	4639      	mov	r1, r7
  405fcc:	f001 fa5e 	bl	40748c <__aeabi_dmul>
  405fd0:	f001 fd0c 	bl	4079ec <__aeabi_d2iz>
  405fd4:	f001 f9f4 	bl	4073c0 <__aeabi_i2d>
  405fd8:	2200      	movs	r2, #0
  405fda:	4b34      	ldr	r3, [pc, #208]	; (4060ac <__kernel_rem_pio2+0x1fc>)
  405fdc:	4680      	mov	r8, r0
  405fde:	4689      	mov	r9, r1
  405fe0:	f001 fa54 	bl	40748c <__aeabi_dmul>
  405fe4:	4602      	mov	r2, r0
  405fe6:	460b      	mov	r3, r1
  405fe8:	4630      	mov	r0, r6
  405fea:	4639      	mov	r1, r7
  405fec:	f001 f89a 	bl	407124 <__aeabi_dsub>
  405ff0:	f001 fcfc 	bl	4079ec <__aeabi_d2iz>
  405ff4:	e874 2302 	ldrd	r2, r3, [r4], #-8
  405ff8:	f84a 0f04 	str.w	r0, [sl, #4]!
  405ffc:	4649      	mov	r1, r9
  405ffe:	4640      	mov	r0, r8
  406000:	f001 f892 	bl	407128 <__adddf3>
  406004:	455c      	cmp	r4, fp
  406006:	4606      	mov	r6, r0
  406008:	460f      	mov	r7, r1
  40600a:	d1db      	bne.n	405fc4 <__kernel_rem_pio2+0x114>
  40600c:	9c08      	ldr	r4, [sp, #32]
  40600e:	4630      	mov	r0, r6
  406010:	4639      	mov	r1, r7
  406012:	4622      	mov	r2, r4
  406014:	f000 fffc 	bl	407010 <scalbn>
  406018:	2200      	movs	r2, #0
  40601a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  40601e:	4606      	mov	r6, r0
  406020:	460f      	mov	r7, r1
  406022:	f001 fa33 	bl	40748c <__aeabi_dmul>
  406026:	f000 ff63 	bl	406ef0 <floor>
  40602a:	2200      	movs	r2, #0
  40602c:	4b20      	ldr	r3, [pc, #128]	; (4060b0 <__kernel_rem_pio2+0x200>)
  40602e:	f001 fa2d 	bl	40748c <__aeabi_dmul>
  406032:	4602      	mov	r2, r0
  406034:	460b      	mov	r3, r1
  406036:	4630      	mov	r0, r6
  406038:	4639      	mov	r1, r7
  40603a:	f001 f873 	bl	407124 <__aeabi_dsub>
  40603e:	460f      	mov	r7, r1
  406040:	4606      	mov	r6, r0
  406042:	f001 fcd3 	bl	4079ec <__aeabi_d2iz>
  406046:	4681      	mov	r9, r0
  406048:	f001 f9ba 	bl	4073c0 <__aeabi_i2d>
  40604c:	4602      	mov	r2, r0
  40604e:	460b      	mov	r3, r1
  406050:	4630      	mov	r0, r6
  406052:	4639      	mov	r1, r7
  406054:	f001 f866 	bl	407124 <__aeabi_dsub>
  406058:	2c00      	cmp	r4, #0
  40605a:	4606      	mov	r6, r0
  40605c:	460f      	mov	r7, r1
  40605e:	f340 80ef 	ble.w	406240 <__kernel_rem_pio2+0x390>
  406062:	1e69      	subs	r1, r5, #1
  406064:	aa10      	add	r2, sp, #64	; 0x40
  406066:	f1c4 0318 	rsb	r3, r4, #24
  40606a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40606e:	fa42 f003 	asr.w	r0, r2, r3
  406072:	fa00 f303 	lsl.w	r3, r0, r3
  406076:	1ad3      	subs	r3, r2, r3
  406078:	aa10      	add	r2, sp, #64	; 0x40
  40607a:	f1c4 0817 	rsb	r8, r4, #23
  40607e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  406082:	4481      	add	r9, r0
  406084:	fa43 f808 	asr.w	r8, r3, r8
  406088:	f1b8 0f00 	cmp.w	r8, #0
  40608c:	dd3d      	ble.n	40610a <__kernel_rem_pio2+0x25a>
  40608e:	2d00      	cmp	r5, #0
  406090:	f109 0901 	add.w	r9, r9, #1
  406094:	f340 82d6 	ble.w	406644 <__kernel_rem_pio2+0x794>
  406098:	2200      	movs	r2, #0
  40609a:	4614      	mov	r4, r2
  40609c:	a90f      	add	r1, sp, #60	; 0x3c
  40609e:	e011      	b.n	4060c4 <__kernel_rem_pio2+0x214>
  4060a0:	004086e8 	.word	0x004086e8
  4060a4:	2aaaaaab 	.word	0x2aaaaaab
  4060a8:	3e700000 	.word	0x3e700000
  4060ac:	41700000 	.word	0x41700000
  4060b0:	40200000 	.word	0x40200000
  4060b4:	f1c3 7080 	rsb	r0, r3, #16777216	; 0x1000000
  4060b8:	b10b      	cbz	r3, 4060be <__kernel_rem_pio2+0x20e>
  4060ba:	6008      	str	r0, [r1, #0]
  4060bc:	2401      	movs	r4, #1
  4060be:	3201      	adds	r2, #1
  4060c0:	4295      	cmp	r5, r2
  4060c2:	dd0d      	ble.n	4060e0 <__kernel_rem_pio2+0x230>
  4060c4:	f851 3f04 	ldr.w	r3, [r1, #4]!
  4060c8:	2c00      	cmp	r4, #0
  4060ca:	d0f3      	beq.n	4060b4 <__kernel_rem_pio2+0x204>
  4060cc:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
  4060d0:	3201      	adds	r2, #1
  4060d2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
  4060d6:	4295      	cmp	r5, r2
  4060d8:	600b      	str	r3, [r1, #0]
  4060da:	f04f 0401 	mov.w	r4, #1
  4060de:	dcf1      	bgt.n	4060c4 <__kernel_rem_pio2+0x214>
  4060e0:	9b08      	ldr	r3, [sp, #32]
  4060e2:	2b00      	cmp	r3, #0
  4060e4:	dd0d      	ble.n	406102 <__kernel_rem_pio2+0x252>
  4060e6:	2b01      	cmp	r3, #1
  4060e8:	f000 80b2 	beq.w	406250 <__kernel_rem_pio2+0x3a0>
  4060ec:	2b02      	cmp	r3, #2
  4060ee:	d108      	bne.n	406102 <__kernel_rem_pio2+0x252>
  4060f0:	1e6a      	subs	r2, r5, #1
  4060f2:	ab10      	add	r3, sp, #64	; 0x40
  4060f4:	a910      	add	r1, sp, #64	; 0x40
  4060f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4060fa:	f3c3 0315 	ubfx	r3, r3, #0, #22
  4060fe:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  406102:	f1b8 0f02 	cmp.w	r8, #2
  406106:	f000 8082 	beq.w	40620e <__kernel_rem_pio2+0x35e>
  40610a:	2200      	movs	r2, #0
  40610c:	2300      	movs	r3, #0
  40610e:	4630      	mov	r0, r6
  406110:	4639      	mov	r1, r7
  406112:	f001 fc23 	bl	40795c <__aeabi_dcmpeq>
  406116:	2800      	cmp	r0, #0
  406118:	f000 825e 	beq.w	4065d8 <__kernel_rem_pio2+0x728>
  40611c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40611e:	f105 3bff 	add.w	fp, r5, #4294967295
  406122:	455b      	cmp	r3, fp
  406124:	dc10      	bgt.n	406148 <__kernel_rem_pio2+0x298>
  406126:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
  40612a:	aa10      	add	r2, sp, #64	; 0x40
  40612c:	3b01      	subs	r3, #1
  40612e:	980f      	ldr	r0, [sp, #60]	; 0x3c
  406130:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  406134:	2200      	movs	r2, #0
  406136:	f853 1904 	ldr.w	r1, [r3], #-4
  40613a:	4283      	cmp	r3, r0
  40613c:	ea42 0201 	orr.w	r2, r2, r1
  406140:	d1f9      	bne.n	406136 <__kernel_rem_pio2+0x286>
  406142:	2a00      	cmp	r2, #0
  406144:	f040 80b2 	bne.w	4062ac <__kernel_rem_pio2+0x3fc>
  406148:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40614a:	aa10      	add	r2, sp, #64	; 0x40
  40614c:	3b01      	subs	r3, #1
  40614e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  406152:	2b00      	cmp	r3, #0
  406154:	f040 8274 	bne.w	406640 <__kernel_rem_pio2+0x790>
  406158:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40615a:	2301      	movs	r3, #1
  40615c:	f852 1904 	ldr.w	r1, [r2], #-4
  406160:	3301      	adds	r3, #1
  406162:	2900      	cmp	r1, #0
  406164:	d0fa      	beq.n	40615c <__kernel_rem_pio2+0x2ac>
  406166:	18e9      	adds	r1, r5, r3
  406168:	1c6a      	adds	r2, r5, #1
  40616a:	428a      	cmp	r2, r1
  40616c:	910b      	str	r1, [sp, #44]	; 0x2c
  40616e:	dc49      	bgt.n	406204 <__kernel_rem_pio2+0x354>
  406170:	990d      	ldr	r1, [sp, #52]	; 0x34
  406172:	980c      	ldr	r0, [sp, #48]	; 0x30
  406174:	1851      	adds	r1, r2, r1
  406176:	00db      	lsls	r3, r3, #3
  406178:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
  40617c:	9305      	str	r3, [sp, #20]
  40617e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
  406180:	4405      	add	r5, r0
  406182:	3901      	subs	r1, #1
  406184:	00e8      	lsls	r0, r5, #3
  406186:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
  40618a:	ab24      	add	r3, sp, #144	; 0x90
  40618c:	00d2      	lsls	r2, r2, #3
  40618e:	eb03 0b00 	add.w	fp, r3, r0
  406192:	ab74      	add	r3, sp, #464	; 0x1d0
  406194:	4413      	add	r3, r2
  406196:	9301      	str	r3, [sp, #4]
  406198:	f1a2 0308 	sub.w	r3, r2, #8
  40619c:	9006      	str	r0, [sp, #24]
  40619e:	9307      	str	r3, [sp, #28]
  4061a0:	f04f 0900 	mov.w	r9, #0
  4061a4:	f85a 0f04 	ldr.w	r0, [sl, #4]!
  4061a8:	f001 f90a 	bl	4073c0 <__aeabi_i2d>
  4061ac:	9b02      	ldr	r3, [sp, #8]
  4061ae:	2b00      	cmp	r3, #0
  4061b0:	e8eb 0102 	strd	r0, r1, [fp], #8
  4061b4:	db28      	blt.n	406208 <__kernel_rem_pio2+0x358>
  4061b6:	9b06      	ldr	r3, [sp, #24]
  4061b8:	eb03 0409 	add.w	r4, r3, r9
  4061bc:	9b07      	ldr	r3, [sp, #28]
  4061be:	eb09 0803 	add.w	r8, r9, r3
  4061c2:	ab24      	add	r3, sp, #144	; 0x90
  4061c4:	441c      	add	r4, r3
  4061c6:	4498      	add	r8, r3
  4061c8:	9b04      	ldr	r3, [sp, #16]
  4061ca:	2600      	movs	r6, #0
  4061cc:	f1a3 0508 	sub.w	r5, r3, #8
  4061d0:	2700      	movs	r7, #0
  4061d2:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
  4061d6:	e874 0102 	ldrd	r0, r1, [r4], #-8
  4061da:	f001 f957 	bl	40748c <__aeabi_dmul>
  4061de:	4602      	mov	r2, r0
  4061e0:	460b      	mov	r3, r1
  4061e2:	4630      	mov	r0, r6
  4061e4:	4639      	mov	r1, r7
  4061e6:	f000 ff9f 	bl	407128 <__adddf3>
  4061ea:	4544      	cmp	r4, r8
  4061ec:	4606      	mov	r6, r0
  4061ee:	460f      	mov	r7, r1
  4061f0:	d1ef      	bne.n	4061d2 <__kernel_rem_pio2+0x322>
  4061f2:	9b01      	ldr	r3, [sp, #4]
  4061f4:	e8e3 6702 	strd	r6, r7, [r3], #8
  4061f8:	9301      	str	r3, [sp, #4]
  4061fa:	9b05      	ldr	r3, [sp, #20]
  4061fc:	f109 0908 	add.w	r9, r9, #8
  406200:	4599      	cmp	r9, r3
  406202:	d1cf      	bne.n	4061a4 <__kernel_rem_pio2+0x2f4>
  406204:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  406206:	e6ce      	b.n	405fa6 <__kernel_rem_pio2+0xf6>
  406208:	2600      	movs	r6, #0
  40620a:	2700      	movs	r7, #0
  40620c:	e7f1      	b.n	4061f2 <__kernel_rem_pio2+0x342>
  40620e:	4632      	mov	r2, r6
  406210:	463b      	mov	r3, r7
  406212:	2000      	movs	r0, #0
  406214:	49b0      	ldr	r1, [pc, #704]	; (4064d8 <__kernel_rem_pio2+0x628>)
  406216:	f000 ff85 	bl	407124 <__aeabi_dsub>
  40621a:	4606      	mov	r6, r0
  40621c:	460f      	mov	r7, r1
  40621e:	2c00      	cmp	r4, #0
  406220:	f43f af73 	beq.w	40610a <__kernel_rem_pio2+0x25a>
  406224:	9a08      	ldr	r2, [sp, #32]
  406226:	49ac      	ldr	r1, [pc, #688]	; (4064d8 <__kernel_rem_pio2+0x628>)
  406228:	2000      	movs	r0, #0
  40622a:	f000 fef1 	bl	407010 <scalbn>
  40622e:	4602      	mov	r2, r0
  406230:	460b      	mov	r3, r1
  406232:	4630      	mov	r0, r6
  406234:	4639      	mov	r1, r7
  406236:	f000 ff75 	bl	407124 <__aeabi_dsub>
  40623a:	4606      	mov	r6, r0
  40623c:	460f      	mov	r7, r1
  40623e:	e764      	b.n	40610a <__kernel_rem_pio2+0x25a>
  406240:	d110      	bne.n	406264 <__kernel_rem_pio2+0x3b4>
  406242:	1e6b      	subs	r3, r5, #1
  406244:	aa10      	add	r2, sp, #64	; 0x40
  406246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40624a:	ea4f 58e3 	mov.w	r8, r3, asr #23
  40624e:	e71b      	b.n	406088 <__kernel_rem_pio2+0x1d8>
  406250:	1e6a      	subs	r2, r5, #1
  406252:	ab10      	add	r3, sp, #64	; 0x40
  406254:	a910      	add	r1, sp, #64	; 0x40
  406256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40625a:	f3c3 0316 	ubfx	r3, r3, #0, #23
  40625e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  406262:	e74e      	b.n	406102 <__kernel_rem_pio2+0x252>
  406264:	2200      	movs	r2, #0
  406266:	4b9d      	ldr	r3, [pc, #628]	; (4064dc <__kernel_rem_pio2+0x62c>)
  406268:	f001 fb96 	bl	407998 <__aeabi_dcmpge>
  40626c:	b958      	cbnz	r0, 406286 <__kernel_rem_pio2+0x3d6>
  40626e:	4680      	mov	r8, r0
  406270:	e74b      	b.n	40610a <__kernel_rem_pio2+0x25a>
  406272:	2600      	movs	r6, #0
  406274:	2700      	movs	r7, #0
  406276:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  40627a:	45da      	cmp	sl, fp
  40627c:	f109 0908 	add.w	r9, r9, #8
  406280:	f47f ae63 	bne.w	405f4a <__kernel_rem_pio2+0x9a>
  406284:	e684      	b.n	405f90 <__kernel_rem_pio2+0xe0>
  406286:	2d00      	cmp	r5, #0
  406288:	f109 0901 	add.w	r9, r9, #1
  40628c:	bfc8      	it	gt
  40628e:	f04f 0802 	movgt.w	r8, #2
  406292:	f73f af01 	bgt.w	406098 <__kernel_rem_pio2+0x1e8>
  406296:	4632      	mov	r2, r6
  406298:	463b      	mov	r3, r7
  40629a:	2000      	movs	r0, #0
  40629c:	498e      	ldr	r1, [pc, #568]	; (4064d8 <__kernel_rem_pio2+0x628>)
  40629e:	f000 ff41 	bl	407124 <__aeabi_dsub>
  4062a2:	f04f 0802 	mov.w	r8, #2
  4062a6:	4606      	mov	r6, r0
  4062a8:	460f      	mov	r7, r1
  4062aa:	e72e      	b.n	40610a <__kernel_rem_pio2+0x25a>
  4062ac:	ab10      	add	r3, sp, #64	; 0x40
  4062ae:	9a08      	ldr	r2, [sp, #32]
  4062b0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
  4062b4:	f8cd 9014 	str.w	r9, [sp, #20]
  4062b8:	3a18      	subs	r2, #24
  4062ba:	f8cd 8004 	str.w	r8, [sp, #4]
  4062be:	9208      	str	r2, [sp, #32]
  4062c0:	b96b      	cbnz	r3, 4062de <__kernel_rem_pio2+0x42e>
  4062c2:	f10b 4380 	add.w	r3, fp, #1073741824	; 0x40000000
  4062c6:	3b01      	subs	r3, #1
  4062c8:	a910      	add	r1, sp, #64	; 0x40
  4062ca:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  4062ce:	f853 1904 	ldr.w	r1, [r3], #-4
  4062d2:	f10b 3bff 	add.w	fp, fp, #4294967295
  4062d6:	3a18      	subs	r2, #24
  4062d8:	2900      	cmp	r1, #0
  4062da:	d0f8      	beq.n	4062ce <__kernel_rem_pio2+0x41e>
  4062dc:	9208      	str	r2, [sp, #32]
  4062de:	9a08      	ldr	r2, [sp, #32]
  4062e0:	497d      	ldr	r1, [pc, #500]	; (4064d8 <__kernel_rem_pio2+0x628>)
  4062e2:	2000      	movs	r0, #0
  4062e4:	f000 fe94 	bl	407010 <scalbn>
  4062e8:	f1bb 0f00 	cmp.w	fp, #0
  4062ec:	4604      	mov	r4, r0
  4062ee:	460d      	mov	r5, r1
  4062f0:	f2c0 81b8 	blt.w	406664 <__kernel_rem_pio2+0x7b4>
  4062f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
  4062f8:	f50d 78e8 	add.w	r8, sp, #464	; 0x1d0
  4062fc:	aa10      	add	r2, sp, #64	; 0x40
  4062fe:	eb02 068b 	add.w	r6, r2, fp, lsl #2
  406302:	eb08 0903 	add.w	r9, r8, r3
  406306:	9304      	str	r3, [sp, #16]
  406308:	3604      	adds	r6, #4
  40630a:	f109 0708 	add.w	r7, r9, #8
  40630e:	f856 0d04 	ldr.w	r0, [r6, #-4]!
  406312:	f001 f855 	bl	4073c0 <__aeabi_i2d>
  406316:	4622      	mov	r2, r4
  406318:	462b      	mov	r3, r5
  40631a:	f001 f8b7 	bl	40748c <__aeabi_dmul>
  40631e:	2200      	movs	r2, #0
  406320:	e967 0102 	strd	r0, r1, [r7, #-8]!
  406324:	4b6e      	ldr	r3, [pc, #440]	; (4064e0 <__kernel_rem_pio2+0x630>)
  406326:	4620      	mov	r0, r4
  406328:	4629      	mov	r1, r5
  40632a:	f001 f8af 	bl	40748c <__aeabi_dmul>
  40632e:	45b8      	cmp	r8, r7
  406330:	4604      	mov	r4, r0
  406332:	460d      	mov	r5, r1
  406334:	d1eb      	bne.n	40630e <__kernel_rem_pio2+0x45e>
  406336:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
  40633a:	464b      	mov	r3, r9
  40633c:	f8cd a008 	str.w	sl, [sp, #8]
  406340:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  406344:	f8cd b018 	str.w	fp, [sp, #24]
  406348:	f04f 0900 	mov.w	r9, #0
  40634c:	469b      	mov	fp, r3
  40634e:	f1ba 0f00 	cmp.w	sl, #0
  406352:	f2c0 812a 	blt.w	4065aa <__kernel_rem_pio2+0x6fa>
  406356:	f8df 818c 	ldr.w	r8, [pc, #396]	; 4064e4 <__kernel_rem_pio2+0x634>
  40635a:	465d      	mov	r5, fp
  40635c:	a35c      	add	r3, pc, #368	; (adr r3, 4064d0 <__kernel_rem_pio2+0x620>)
  40635e:	e9d3 2300 	ldrd	r2, r3, [r3]
  406362:	2600      	movs	r6, #0
  406364:	2700      	movs	r7, #0
  406366:	2400      	movs	r4, #0
  406368:	e003      	b.n	406372 <__kernel_rem_pio2+0x4c2>
  40636a:	45a1      	cmp	r9, r4
  40636c:	db10      	blt.n	406390 <__kernel_rem_pio2+0x4e0>
  40636e:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
  406372:	e8f5 0102 	ldrd	r0, r1, [r5], #8
  406376:	f001 f889 	bl	40748c <__aeabi_dmul>
  40637a:	4602      	mov	r2, r0
  40637c:	460b      	mov	r3, r1
  40637e:	4630      	mov	r0, r6
  406380:	4639      	mov	r1, r7
  406382:	f000 fed1 	bl	407128 <__adddf3>
  406386:	3401      	adds	r4, #1
  406388:	45a2      	cmp	sl, r4
  40638a:	4606      	mov	r6, r0
  40638c:	460f      	mov	r7, r1
  40638e:	daec      	bge.n	40636a <__kernel_rem_pio2+0x4ba>
  406390:	9b02      	ldr	r3, [sp, #8]
  406392:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  406396:	f1ab 0b08 	sub.w	fp, fp, #8
  40639a:	e9c3 6700 	strd	r6, r7, [r3]
  40639e:	ab72      	add	r3, sp, #456	; 0x1c8
  4063a0:	455b      	cmp	r3, fp
  4063a2:	f109 0901 	add.w	r9, r9, #1
  4063a6:	d1d2      	bne.n	40634e <__kernel_rem_pio2+0x49e>
  4063a8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  4063aa:	f8dd b018 	ldr.w	fp, [sp, #24]
  4063ae:	f8dd a008 	ldr.w	sl, [sp, #8]
  4063b2:	2b03      	cmp	r3, #3
  4063b4:	f200 8083 	bhi.w	4064be <__kernel_rem_pio2+0x60e>
  4063b8:	e8df f013 	tbh	[pc, r3, lsl #1]
  4063bc:	009600d5 	.word	0x009600d5
  4063c0:	00040096 	.word	0x00040096
  4063c4:	f1bb 0f00 	cmp.w	fp, #0
  4063c8:	f340 8156 	ble.w	406678 <__kernel_rem_pio2+0x7c8>
  4063cc:	9b04      	ldr	r3, [sp, #16]
  4063ce:	f8cd b008 	str.w	fp, [sp, #8]
  4063d2:	eb0a 0803 	add.w	r8, sl, r3
  4063d6:	e9d8 6700 	ldrd	r6, r7, [r8]
  4063da:	46d3      	mov	fp, sl
  4063dc:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
  4063e0:	4632      	mov	r2, r6
  4063e2:	463b      	mov	r3, r7
  4063e4:	4648      	mov	r0, r9
  4063e6:	4651      	mov	r1, sl
  4063e8:	f000 fe9e 	bl	407128 <__adddf3>
  4063ec:	4604      	mov	r4, r0
  4063ee:	460d      	mov	r5, r1
  4063f0:	4602      	mov	r2, r0
  4063f2:	460b      	mov	r3, r1
  4063f4:	4648      	mov	r0, r9
  4063f6:	4651      	mov	r1, sl
  4063f8:	f000 fe94 	bl	407124 <__aeabi_dsub>
  4063fc:	4632      	mov	r2, r6
  4063fe:	463b      	mov	r3, r7
  406400:	f000 fe92 	bl	407128 <__adddf3>
  406404:	e9c8 0100 	strd	r0, r1, [r8]
  406408:	e968 4502 	strd	r4, r5, [r8, #-8]!
  40640c:	45c3      	cmp	fp, r8
  40640e:	4626      	mov	r6, r4
  406410:	462f      	mov	r7, r5
  406412:	d1e3      	bne.n	4063dc <__kernel_rem_pio2+0x52c>
  406414:	46da      	mov	sl, fp
  406416:	f8dd b008 	ldr.w	fp, [sp, #8]
  40641a:	f1bb 0f01 	cmp.w	fp, #1
  40641e:	f340 812b 	ble.w	406678 <__kernel_rem_pio2+0x7c8>
  406422:	9b04      	ldr	r3, [sp, #16]
  406424:	4453      	add	r3, sl
  406426:	e9d3 6700 	ldrd	r6, r7, [r3]
  40642a:	4698      	mov	r8, r3
  40642c:	4699      	mov	r9, r3
  40642e:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
  406432:	e959 3402 	ldrd	r3, r4, [r9, #-8]
  406436:	4630      	mov	r0, r6
  406438:	e9cd 3402 	strd	r3, r4, [sp, #8]
  40643c:	461a      	mov	r2, r3
  40643e:	4639      	mov	r1, r7
  406440:	4623      	mov	r3, r4
  406442:	f000 fe71 	bl	407128 <__adddf3>
  406446:	4604      	mov	r4, r0
  406448:	460d      	mov	r5, r1
  40644a:	4602      	mov	r2, r0
  40644c:	460b      	mov	r3, r1
  40644e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406452:	f000 fe67 	bl	407124 <__aeabi_dsub>
  406456:	4632      	mov	r2, r6
  406458:	463b      	mov	r3, r7
  40645a:	f000 fe65 	bl	407128 <__adddf3>
  40645e:	e9c9 0100 	strd	r0, r1, [r9]
  406462:	e969 4502 	strd	r4, r5, [r9, #-8]!
  406466:	45cb      	cmp	fp, r9
  406468:	4626      	mov	r6, r4
  40646a:	462f      	mov	r7, r5
  40646c:	d1e1      	bne.n	406432 <__kernel_rem_pio2+0x582>
  40646e:	2300      	movs	r3, #0
  406470:	f108 0808 	add.w	r8, r8, #8
  406474:	461d      	mov	r5, r3
  406476:	ac50      	add	r4, sp, #320	; 0x140
  406478:	4618      	mov	r0, r3
  40647a:	4629      	mov	r1, r5
  40647c:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
  406480:	f000 fe52 	bl	407128 <__adddf3>
  406484:	4544      	cmp	r4, r8
  406486:	4603      	mov	r3, r0
  406488:	460d      	mov	r5, r1
  40648a:	d1f5      	bne.n	406478 <__kernel_rem_pio2+0x5c8>
  40648c:	9a01      	ldr	r2, [sp, #4]
  40648e:	2a00      	cmp	r2, #0
  406490:	f000 80da 	beq.w	406648 <__kernel_rem_pio2+0x798>
  406494:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406496:	f8da 4004 	ldr.w	r4, [sl, #4]
  40649a:	f8da 200c 	ldr.w	r2, [sl, #12]
  40649e:	f8da 1000 	ldr.w	r1, [sl]
  4064a2:	f8da 0008 	ldr.w	r0, [sl, #8]
  4064a6:	613b      	str	r3, [r7, #16]
  4064a8:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
  4064ac:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
  4064b0:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
  4064b4:	617d      	str	r5, [r7, #20]
  4064b6:	607c      	str	r4, [r7, #4]
  4064b8:	60fb      	str	r3, [r7, #12]
  4064ba:	6039      	str	r1, [r7, #0]
  4064bc:	60b8      	str	r0, [r7, #8]
  4064be:	9b05      	ldr	r3, [sp, #20]
  4064c0:	f003 0007 	and.w	r0, r3, #7
  4064c4:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  4064c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4064cc:	f3af 8000 	nop.w
  4064d0:	40000000 	.word	0x40000000
  4064d4:	3ff921fb 	.word	0x3ff921fb
  4064d8:	3ff00000 	.word	0x3ff00000
  4064dc:	3fe00000 	.word	0x3fe00000
  4064e0:	3e700000 	.word	0x3e700000
  4064e4:	004086f8 	.word	0x004086f8
  4064e8:	9c04      	ldr	r4, [sp, #16]
  4064ea:	2600      	movs	r6, #0
  4064ec:	3408      	adds	r4, #8
  4064ee:	4454      	add	r4, sl
  4064f0:	4633      	mov	r3, r6
  4064f2:	4630      	mov	r0, r6
  4064f4:	4619      	mov	r1, r3
  4064f6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  4064fa:	f000 fe15 	bl	407128 <__adddf3>
  4064fe:	4554      	cmp	r4, sl
  406500:	4606      	mov	r6, r0
  406502:	460b      	mov	r3, r1
  406504:	d1f5      	bne.n	4064f2 <__kernel_rem_pio2+0x642>
  406506:	9a01      	ldr	r2, [sp, #4]
  406508:	4630      	mov	r0, r6
  40650a:	4619      	mov	r1, r3
  40650c:	2a00      	cmp	r2, #0
  40650e:	d04f      	beq.n	4065b0 <__kernel_rem_pio2+0x700>
  406510:	980a      	ldr	r0, [sp, #40]	; 0x28
  406512:	f103 4400 	add.w	r4, r3, #2147483648	; 0x80000000
  406516:	4632      	mov	r2, r6
  406518:	6044      	str	r4, [r0, #4]
  40651a:	6006      	str	r6, [r0, #0]
  40651c:	e9da 0100 	ldrd	r0, r1, [sl]
  406520:	f000 fe00 	bl	407124 <__aeabi_dsub>
  406524:	f1bb 0f00 	cmp.w	fp, #0
  406528:	4602      	mov	r2, r0
  40652a:	460b      	mov	r3, r1
  40652c:	dd0d      	ble.n	40654a <__kernel_rem_pio2+0x69a>
  40652e:	2401      	movs	r4, #1
  406530:	4610      	mov	r0, r2
  406532:	4619      	mov	r1, r3
  406534:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
  406538:	f000 fdf6 	bl	407128 <__adddf3>
  40653c:	3401      	adds	r4, #1
  40653e:	45a3      	cmp	fp, r4
  406540:	4602      	mov	r2, r0
  406542:	460b      	mov	r3, r1
  406544:	daf4      	bge.n	406530 <__kernel_rem_pio2+0x680>
  406546:	9901      	ldr	r1, [sp, #4]
  406548:	b109      	cbz	r1, 40654e <__kernel_rem_pio2+0x69e>
  40654a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  40654e:	4619      	mov	r1, r3
  406550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406552:	4610      	mov	r0, r2
  406554:	e9c3 0102 	strd	r0, r1, [r3, #8]
  406558:	9b05      	ldr	r3, [sp, #20]
  40655a:	f003 0007 	and.w	r0, r3, #7
  40655e:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  406562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406566:	9b04      	ldr	r3, [sp, #16]
  406568:	2200      	movs	r2, #0
  40656a:	3308      	adds	r3, #8
  40656c:	449a      	add	sl, r3
  40656e:	4613      	mov	r3, r2
  406570:	4610      	mov	r0, r2
  406572:	4619      	mov	r1, r3
  406574:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
  406578:	f000 fdd6 	bl	407128 <__adddf3>
  40657c:	f10b 3bff 	add.w	fp, fp, #4294967295
  406580:	f1bb 3fff 	cmp.w	fp, #4294967295
  406584:	4602      	mov	r2, r0
  406586:	460b      	mov	r3, r1
  406588:	d1f2      	bne.n	406570 <__kernel_rem_pio2+0x6c0>
  40658a:	9901      	ldr	r1, [sp, #4]
  40658c:	b109      	cbz	r1, 406592 <__kernel_rem_pio2+0x6e2>
  40658e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  406592:	4619      	mov	r1, r3
  406594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406596:	4610      	mov	r0, r2
  406598:	e9c3 0100 	strd	r0, r1, [r3]
  40659c:	9b05      	ldr	r3, [sp, #20]
  40659e:	f003 0007 	and.w	r0, r3, #7
  4065a2:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  4065a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4065aa:	2600      	movs	r6, #0
  4065ac:	2700      	movs	r7, #0
  4065ae:	e6ef      	b.n	406390 <__kernel_rem_pio2+0x4e0>
  4065b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4065b2:	4632      	mov	r2, r6
  4065b4:	e9c3 0100 	strd	r0, r1, [r3]
  4065b8:	460b      	mov	r3, r1
  4065ba:	e9da 0100 	ldrd	r0, r1, [sl]
  4065be:	f000 fdb1 	bl	407124 <__aeabi_dsub>
  4065c2:	f1bb 0f00 	cmp.w	fp, #0
  4065c6:	4602      	mov	r2, r0
  4065c8:	460b      	mov	r3, r1
  4065ca:	dcb0      	bgt.n	40652e <__kernel_rem_pio2+0x67e>
  4065cc:	4619      	mov	r1, r3
  4065ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4065d0:	4610      	mov	r0, r2
  4065d2:	e9c3 0102 	strd	r0, r1, [r3, #8]
  4065d6:	e7bf      	b.n	406558 <__kernel_rem_pio2+0x6a8>
  4065d8:	9b08      	ldr	r3, [sp, #32]
  4065da:	f8cd 9014 	str.w	r9, [sp, #20]
  4065de:	425a      	negs	r2, r3
  4065e0:	4630      	mov	r0, r6
  4065e2:	4639      	mov	r1, r7
  4065e4:	f8cd 8004 	str.w	r8, [sp, #4]
  4065e8:	f000 fd12 	bl	407010 <scalbn>
  4065ec:	2200      	movs	r2, #0
  4065ee:	4b2c      	ldr	r3, [pc, #176]	; (4066a0 <__kernel_rem_pio2+0x7f0>)
  4065f0:	4606      	mov	r6, r0
  4065f2:	460f      	mov	r7, r1
  4065f4:	f001 f9d0 	bl	407998 <__aeabi_dcmpge>
  4065f8:	2800      	cmp	r0, #0
  4065fa:	d040      	beq.n	40667e <__kernel_rem_pio2+0x7ce>
  4065fc:	2200      	movs	r2, #0
  4065fe:	4b29      	ldr	r3, [pc, #164]	; (4066a4 <__kernel_rem_pio2+0x7f4>)
  406600:	4630      	mov	r0, r6
  406602:	4639      	mov	r1, r7
  406604:	f000 ff42 	bl	40748c <__aeabi_dmul>
  406608:	f001 f9f0 	bl	4079ec <__aeabi_d2iz>
  40660c:	4604      	mov	r4, r0
  40660e:	f000 fed7 	bl	4073c0 <__aeabi_i2d>
  406612:	2200      	movs	r2, #0
  406614:	4b22      	ldr	r3, [pc, #136]	; (4066a0 <__kernel_rem_pio2+0x7f0>)
  406616:	f000 ff39 	bl	40748c <__aeabi_dmul>
  40661a:	460b      	mov	r3, r1
  40661c:	4602      	mov	r2, r0
  40661e:	4639      	mov	r1, r7
  406620:	4630      	mov	r0, r6
  406622:	f000 fd7f 	bl	407124 <__aeabi_dsub>
  406626:	f001 f9e1 	bl	4079ec <__aeabi_d2iz>
  40662a:	9b08      	ldr	r3, [sp, #32]
  40662c:	3318      	adds	r3, #24
  40662e:	f105 0b01 	add.w	fp, r5, #1
  406632:	9308      	str	r3, [sp, #32]
  406634:	ab10      	add	r3, sp, #64	; 0x40
  406636:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
  40663a:	f843 402b 	str.w	r4, [r3, fp, lsl #2]
  40663e:	e64e      	b.n	4062de <__kernel_rem_pio2+0x42e>
  406640:	2301      	movs	r3, #1
  406642:	e590      	b.n	406166 <__kernel_rem_pio2+0x2b6>
  406644:	2400      	movs	r4, #0
  406646:	e54b      	b.n	4060e0 <__kernel_rem_pio2+0x230>
  406648:	4618      	mov	r0, r3
  40664a:	4629      	mov	r1, r5
  40664c:	e9da 2300 	ldrd	r2, r3, [sl]
  406650:	e9da 4502 	ldrd	r4, r5, [sl, #8]
  406654:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406656:	e9c7 0104 	strd	r0, r1, [r7, #16]
  40665a:	e9c7 2300 	strd	r2, r3, [r7]
  40665e:	e9c7 4502 	strd	r4, r5, [r7, #8]
  406662:	e72c      	b.n	4064be <__kernel_rem_pio2+0x60e>
  406664:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  406666:	2b03      	cmp	r3, #3
  406668:	f63f af29 	bhi.w	4064be <__kernel_rem_pio2+0x60e>
  40666c:	e8df f003 	tbb	[pc, r3]
  406670:	02101015 	.word	0x02101015
  406674:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
  406678:	2300      	movs	r3, #0
  40667a:	461d      	mov	r5, r3
  40667c:	e706      	b.n	40648c <__kernel_rem_pio2+0x5dc>
  40667e:	4630      	mov	r0, r6
  406680:	4639      	mov	r1, r7
  406682:	f001 f9b3 	bl	4079ec <__aeabi_d2iz>
  406686:	ab10      	add	r3, sp, #64	; 0x40
  406688:	46ab      	mov	fp, r5
  40668a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
  40668e:	e626      	b.n	4062de <__kernel_rem_pio2+0x42e>
  406690:	2600      	movs	r6, #0
  406692:	4633      	mov	r3, r6
  406694:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
  406698:	e735      	b.n	406506 <__kernel_rem_pio2+0x656>
  40669a:	2200      	movs	r2, #0
  40669c:	4613      	mov	r3, r2
  40669e:	e774      	b.n	40658a <__kernel_rem_pio2+0x6da>
  4066a0:	41700000 	.word	0x41700000
  4066a4:	3e700000 	.word	0x3e700000

004066a8 <__kernel_sin>:
  4066a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4066ac:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  4066b0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  4066b4:	b085      	sub	sp, #20
  4066b6:	460c      	mov	r4, r1
  4066b8:	4690      	mov	r8, r2
  4066ba:	4699      	mov	r9, r3
  4066bc:	4605      	mov	r5, r0
  4066be:	da04      	bge.n	4066ca <__kernel_sin+0x22>
  4066c0:	f001 f994 	bl	4079ec <__aeabi_d2iz>
  4066c4:	2800      	cmp	r0, #0
  4066c6:	f000 8085 	beq.w	4067d4 <__kernel_sin+0x12c>
  4066ca:	462a      	mov	r2, r5
  4066cc:	4623      	mov	r3, r4
  4066ce:	4628      	mov	r0, r5
  4066d0:	4621      	mov	r1, r4
  4066d2:	f000 fedb 	bl	40748c <__aeabi_dmul>
  4066d6:	4606      	mov	r6, r0
  4066d8:	460f      	mov	r7, r1
  4066da:	4602      	mov	r2, r0
  4066dc:	460b      	mov	r3, r1
  4066de:	4628      	mov	r0, r5
  4066e0:	4621      	mov	r1, r4
  4066e2:	f000 fed3 	bl	40748c <__aeabi_dmul>
  4066e6:	a33e      	add	r3, pc, #248	; (adr r3, 4067e0 <__kernel_sin+0x138>)
  4066e8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4066ec:	4682      	mov	sl, r0
  4066ee:	468b      	mov	fp, r1
  4066f0:	4630      	mov	r0, r6
  4066f2:	4639      	mov	r1, r7
  4066f4:	f000 feca 	bl	40748c <__aeabi_dmul>
  4066f8:	a33b      	add	r3, pc, #236	; (adr r3, 4067e8 <__kernel_sin+0x140>)
  4066fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4066fe:	f000 fd11 	bl	407124 <__aeabi_dsub>
  406702:	4632      	mov	r2, r6
  406704:	463b      	mov	r3, r7
  406706:	f000 fec1 	bl	40748c <__aeabi_dmul>
  40670a:	a339      	add	r3, pc, #228	; (adr r3, 4067f0 <__kernel_sin+0x148>)
  40670c:	e9d3 2300 	ldrd	r2, r3, [r3]
  406710:	f000 fd0a 	bl	407128 <__adddf3>
  406714:	4632      	mov	r2, r6
  406716:	463b      	mov	r3, r7
  406718:	f000 feb8 	bl	40748c <__aeabi_dmul>
  40671c:	a336      	add	r3, pc, #216	; (adr r3, 4067f8 <__kernel_sin+0x150>)
  40671e:	e9d3 2300 	ldrd	r2, r3, [r3]
  406722:	f000 fcff 	bl	407124 <__aeabi_dsub>
  406726:	4632      	mov	r2, r6
  406728:	463b      	mov	r3, r7
  40672a:	f000 feaf 	bl	40748c <__aeabi_dmul>
  40672e:	a334      	add	r3, pc, #208	; (adr r3, 406800 <__kernel_sin+0x158>)
  406730:	e9d3 2300 	ldrd	r2, r3, [r3]
  406734:	f000 fcf8 	bl	407128 <__adddf3>
  406738:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40673a:	e9cd 0100 	strd	r0, r1, [sp]
  40673e:	b39b      	cbz	r3, 4067a8 <__kernel_sin+0x100>
  406740:	2200      	movs	r2, #0
  406742:	4b33      	ldr	r3, [pc, #204]	; (406810 <__kernel_sin+0x168>)
  406744:	4640      	mov	r0, r8
  406746:	4649      	mov	r1, r9
  406748:	f000 fea0 	bl	40748c <__aeabi_dmul>
  40674c:	e9dd 2300 	ldrd	r2, r3, [sp]
  406750:	e9cd 0102 	strd	r0, r1, [sp, #8]
  406754:	4650      	mov	r0, sl
  406756:	4659      	mov	r1, fp
  406758:	f000 fe98 	bl	40748c <__aeabi_dmul>
  40675c:	4602      	mov	r2, r0
  40675e:	460b      	mov	r3, r1
  406760:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406764:	f000 fcde 	bl	407124 <__aeabi_dsub>
  406768:	4632      	mov	r2, r6
  40676a:	463b      	mov	r3, r7
  40676c:	f000 fe8e 	bl	40748c <__aeabi_dmul>
  406770:	4642      	mov	r2, r8
  406772:	464b      	mov	r3, r9
  406774:	f000 fcd6 	bl	407124 <__aeabi_dsub>
  406778:	a323      	add	r3, pc, #140	; (adr r3, 406808 <__kernel_sin+0x160>)
  40677a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40677e:	4606      	mov	r6, r0
  406780:	460f      	mov	r7, r1
  406782:	4650      	mov	r0, sl
  406784:	4659      	mov	r1, fp
  406786:	f000 fe81 	bl	40748c <__aeabi_dmul>
  40678a:	4602      	mov	r2, r0
  40678c:	460b      	mov	r3, r1
  40678e:	4630      	mov	r0, r6
  406790:	4639      	mov	r1, r7
  406792:	f000 fcc9 	bl	407128 <__adddf3>
  406796:	4602      	mov	r2, r0
  406798:	460b      	mov	r3, r1
  40679a:	4628      	mov	r0, r5
  40679c:	4621      	mov	r1, r4
  40679e:	f000 fcc1 	bl	407124 <__aeabi_dsub>
  4067a2:	b005      	add	sp, #20
  4067a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4067a8:	4602      	mov	r2, r0
  4067aa:	460b      	mov	r3, r1
  4067ac:	4630      	mov	r0, r6
  4067ae:	4639      	mov	r1, r7
  4067b0:	f000 fe6c 	bl	40748c <__aeabi_dmul>
  4067b4:	a314      	add	r3, pc, #80	; (adr r3, 406808 <__kernel_sin+0x160>)
  4067b6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4067ba:	f000 fcb3 	bl	407124 <__aeabi_dsub>
  4067be:	4652      	mov	r2, sl
  4067c0:	465b      	mov	r3, fp
  4067c2:	f000 fe63 	bl	40748c <__aeabi_dmul>
  4067c6:	462a      	mov	r2, r5
  4067c8:	4623      	mov	r3, r4
  4067ca:	f000 fcad 	bl	407128 <__adddf3>
  4067ce:	b005      	add	sp, #20
  4067d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4067d4:	4628      	mov	r0, r5
  4067d6:	4621      	mov	r1, r4
  4067d8:	b005      	add	sp, #20
  4067da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4067de:	bf00      	nop
  4067e0:	5acfd57c 	.word	0x5acfd57c
  4067e4:	3de5d93a 	.word	0x3de5d93a
  4067e8:	8a2b9ceb 	.word	0x8a2b9ceb
  4067ec:	3e5ae5e6 	.word	0x3e5ae5e6
  4067f0:	57b1fe7d 	.word	0x57b1fe7d
  4067f4:	3ec71de3 	.word	0x3ec71de3
  4067f8:	19c161d5 	.word	0x19c161d5
  4067fc:	3f2a01a0 	.word	0x3f2a01a0
  406800:	1110f8a6 	.word	0x1110f8a6
  406804:	3f811111 	.word	0x3f811111
  406808:	55555549 	.word	0x55555549
  40680c:	3fc55555 	.word	0x3fc55555
  406810:	3fe00000 	.word	0x3fe00000
  406814:	00000000 	.word	0x00000000

00406818 <__kernel_tan>:
  406818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40681c:	4cd8      	ldr	r4, [pc, #864]	; (406b80 <__kernel_tan+0x368>)
  40681e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  406822:	42a6      	cmp	r6, r4
  406824:	b087      	sub	sp, #28
  406826:	468a      	mov	sl, r1
  406828:	4689      	mov	r9, r1
  40682a:	4617      	mov	r7, r2
  40682c:	4698      	mov	r8, r3
  40682e:	4683      	mov	fp, r0
  406830:	dc16      	bgt.n	406860 <__kernel_tan+0x48>
  406832:	f001 f8db 	bl	4079ec <__aeabi_d2iz>
  406836:	bb88      	cbnz	r0, 40689c <__kernel_tan+0x84>
  406838:	465b      	mov	r3, fp
  40683a:	431e      	orrs	r6, r3
  40683c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40683e:	3301      	adds	r3, #1
  406840:	4333      	orrs	r3, r6
  406842:	f000 8156 	beq.w	406af2 <__kernel_tan+0x2da>
  406846:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406848:	2b01      	cmp	r3, #1
  40684a:	f000 81a8 	beq.w	406b9e <__kernel_tan+0x386>
  40684e:	465a      	mov	r2, fp
  406850:	4653      	mov	r3, sl
  406852:	2000      	movs	r0, #0
  406854:	49cb      	ldr	r1, [pc, #812]	; (406b84 <__kernel_tan+0x36c>)
  406856:	f000 ff43 	bl	4076e0 <__aeabi_ddiv>
  40685a:	b007      	add	sp, #28
  40685c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406860:	4bc9      	ldr	r3, [pc, #804]	; (406b88 <__kernel_tan+0x370>)
  406862:	429e      	cmp	r6, r3
  406864:	dd1a      	ble.n	40689c <__kernel_tan+0x84>
  406866:	2900      	cmp	r1, #0
  406868:	f2c0 8192 	blt.w	406b90 <__kernel_tan+0x378>
  40686c:	465a      	mov	r2, fp
  40686e:	4653      	mov	r3, sl
  406870:	a1a5      	add	r1, pc, #660	; (adr r1, 406b08 <__kernel_tan+0x2f0>)
  406872:	e9d1 0100 	ldrd	r0, r1, [r1]
  406876:	f000 fc55 	bl	407124 <__aeabi_dsub>
  40687a:	463a      	mov	r2, r7
  40687c:	4643      	mov	r3, r8
  40687e:	4604      	mov	r4, r0
  406880:	460d      	mov	r5, r1
  406882:	a1a3      	add	r1, pc, #652	; (adr r1, 406b10 <__kernel_tan+0x2f8>)
  406884:	e9d1 0100 	ldrd	r0, r1, [r1]
  406888:	f000 fc4c 	bl	407124 <__aeabi_dsub>
  40688c:	4622      	mov	r2, r4
  40688e:	462b      	mov	r3, r5
  406890:	f000 fc4a 	bl	407128 <__adddf3>
  406894:	2700      	movs	r7, #0
  406896:	4683      	mov	fp, r0
  406898:	468a      	mov	sl, r1
  40689a:	46b8      	mov	r8, r7
  40689c:	465a      	mov	r2, fp
  40689e:	4653      	mov	r3, sl
  4068a0:	4658      	mov	r0, fp
  4068a2:	4651      	mov	r1, sl
  4068a4:	f000 fdf2 	bl	40748c <__aeabi_dmul>
  4068a8:	4603      	mov	r3, r0
  4068aa:	460c      	mov	r4, r1
  4068ac:	e9cd 3400 	strd	r3, r4, [sp]
  4068b0:	4602      	mov	r2, r0
  4068b2:	460b      	mov	r3, r1
  4068b4:	f000 fdea 	bl	40748c <__aeabi_dmul>
  4068b8:	e9dd 2300 	ldrd	r2, r3, [sp]
  4068bc:	4604      	mov	r4, r0
  4068be:	460d      	mov	r5, r1
  4068c0:	4658      	mov	r0, fp
  4068c2:	4651      	mov	r1, sl
  4068c4:	f000 fde2 	bl	40748c <__aeabi_dmul>
  4068c8:	a393      	add	r3, pc, #588	; (adr r3, 406b18 <__kernel_tan+0x300>)
  4068ca:	e9d3 2300 	ldrd	r2, r3, [r3]
  4068ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4068d2:	4620      	mov	r0, r4
  4068d4:	4629      	mov	r1, r5
  4068d6:	f000 fdd9 	bl	40748c <__aeabi_dmul>
  4068da:	a391      	add	r3, pc, #580	; (adr r3, 406b20 <__kernel_tan+0x308>)
  4068dc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4068e0:	f000 fc22 	bl	407128 <__adddf3>
  4068e4:	4622      	mov	r2, r4
  4068e6:	462b      	mov	r3, r5
  4068e8:	f000 fdd0 	bl	40748c <__aeabi_dmul>
  4068ec:	a38e      	add	r3, pc, #568	; (adr r3, 406b28 <__kernel_tan+0x310>)
  4068ee:	e9d3 2300 	ldrd	r2, r3, [r3]
  4068f2:	f000 fc19 	bl	407128 <__adddf3>
  4068f6:	4622      	mov	r2, r4
  4068f8:	462b      	mov	r3, r5
  4068fa:	f000 fdc7 	bl	40748c <__aeabi_dmul>
  4068fe:	a38c      	add	r3, pc, #560	; (adr r3, 406b30 <__kernel_tan+0x318>)
  406900:	e9d3 2300 	ldrd	r2, r3, [r3]
  406904:	f000 fc10 	bl	407128 <__adddf3>
  406908:	4622      	mov	r2, r4
  40690a:	462b      	mov	r3, r5
  40690c:	f000 fdbe 	bl	40748c <__aeabi_dmul>
  406910:	a389      	add	r3, pc, #548	; (adr r3, 406b38 <__kernel_tan+0x320>)
  406912:	e9d3 2300 	ldrd	r2, r3, [r3]
  406916:	f000 fc07 	bl	407128 <__adddf3>
  40691a:	4622      	mov	r2, r4
  40691c:	462b      	mov	r3, r5
  40691e:	f000 fdb5 	bl	40748c <__aeabi_dmul>
  406922:	a387      	add	r3, pc, #540	; (adr r3, 406b40 <__kernel_tan+0x328>)
  406924:	e9d3 2300 	ldrd	r2, r3, [r3]
  406928:	f000 fbfe 	bl	407128 <__adddf3>
  40692c:	e9dd 2300 	ldrd	r2, r3, [sp]
  406930:	f000 fdac 	bl	40748c <__aeabi_dmul>
  406934:	a384      	add	r3, pc, #528	; (adr r3, 406b48 <__kernel_tan+0x330>)
  406936:	e9d3 2300 	ldrd	r2, r3, [r3]
  40693a:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40693e:	4620      	mov	r0, r4
  406940:	4629      	mov	r1, r5
  406942:	f000 fda3 	bl	40748c <__aeabi_dmul>
  406946:	a382      	add	r3, pc, #520	; (adr r3, 406b50 <__kernel_tan+0x338>)
  406948:	e9d3 2300 	ldrd	r2, r3, [r3]
  40694c:	f000 fbec 	bl	407128 <__adddf3>
  406950:	4622      	mov	r2, r4
  406952:	462b      	mov	r3, r5
  406954:	f000 fd9a 	bl	40748c <__aeabi_dmul>
  406958:	a37f      	add	r3, pc, #508	; (adr r3, 406b58 <__kernel_tan+0x340>)
  40695a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40695e:	f000 fbe3 	bl	407128 <__adddf3>
  406962:	4622      	mov	r2, r4
  406964:	462b      	mov	r3, r5
  406966:	f000 fd91 	bl	40748c <__aeabi_dmul>
  40696a:	a37d      	add	r3, pc, #500	; (adr r3, 406b60 <__kernel_tan+0x348>)
  40696c:	e9d3 2300 	ldrd	r2, r3, [r3]
  406970:	f000 fbda 	bl	407128 <__adddf3>
  406974:	4622      	mov	r2, r4
  406976:	462b      	mov	r3, r5
  406978:	f000 fd88 	bl	40748c <__aeabi_dmul>
  40697c:	a37a      	add	r3, pc, #488	; (adr r3, 406b68 <__kernel_tan+0x350>)
  40697e:	e9d3 2300 	ldrd	r2, r3, [r3]
  406982:	f000 fbd1 	bl	407128 <__adddf3>
  406986:	4622      	mov	r2, r4
  406988:	462b      	mov	r3, r5
  40698a:	f000 fd7f 	bl	40748c <__aeabi_dmul>
  40698e:	a378      	add	r3, pc, #480	; (adr r3, 406b70 <__kernel_tan+0x358>)
  406990:	e9d3 2300 	ldrd	r2, r3, [r3]
  406994:	f000 fbc8 	bl	407128 <__adddf3>
  406998:	4602      	mov	r2, r0
  40699a:	460b      	mov	r3, r1
  40699c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4069a0:	f000 fbc2 	bl	407128 <__adddf3>
  4069a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4069a8:	f000 fd70 	bl	40748c <__aeabi_dmul>
  4069ac:	463a      	mov	r2, r7
  4069ae:	4643      	mov	r3, r8
  4069b0:	f000 fbba 	bl	407128 <__adddf3>
  4069b4:	e9dd 2300 	ldrd	r2, r3, [sp]
  4069b8:	f000 fd68 	bl	40748c <__aeabi_dmul>
  4069bc:	4602      	mov	r2, r0
  4069be:	460b      	mov	r3, r1
  4069c0:	4638      	mov	r0, r7
  4069c2:	4641      	mov	r1, r8
  4069c4:	f000 fbb0 	bl	407128 <__adddf3>
  4069c8:	a36b      	add	r3, pc, #428	; (adr r3, 406b78 <__kernel_tan+0x360>)
  4069ca:	e9d3 2300 	ldrd	r2, r3, [r3]
  4069ce:	4604      	mov	r4, r0
  4069d0:	460d      	mov	r5, r1
  4069d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4069d6:	f000 fd59 	bl	40748c <__aeabi_dmul>
  4069da:	4622      	mov	r2, r4
  4069dc:	462b      	mov	r3, r5
  4069de:	f000 fba3 	bl	407128 <__adddf3>
  4069e2:	460b      	mov	r3, r1
  4069e4:	4602      	mov	r2, r0
  4069e6:	4651      	mov	r1, sl
  4069e8:	4658      	mov	r0, fp
  4069ea:	e9cd 2300 	strd	r2, r3, [sp]
  4069ee:	f000 fb9b 	bl	407128 <__adddf3>
  4069f2:	4b65      	ldr	r3, [pc, #404]	; (406b88 <__kernel_tan+0x370>)
  4069f4:	429e      	cmp	r6, r3
  4069f6:	4604      	mov	r4, r0
  4069f8:	460d      	mov	r5, r1
  4069fa:	dc3a      	bgt.n	406a72 <__kernel_tan+0x25a>
  4069fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4069fe:	2b01      	cmp	r3, #1
  406a00:	d034      	beq.n	406a6c <__kernel_tan+0x254>
  406a02:	4602      	mov	r2, r0
  406a04:	460b      	mov	r3, r1
  406a06:	2000      	movs	r0, #0
  406a08:	495e      	ldr	r1, [pc, #376]	; (406b84 <__kernel_tan+0x36c>)
  406a0a:	f000 fe69 	bl	4076e0 <__aeabi_ddiv>
  406a0e:	2400      	movs	r4, #0
  406a10:	460f      	mov	r7, r1
  406a12:	4606      	mov	r6, r0
  406a14:	465a      	mov	r2, fp
  406a16:	4653      	mov	r3, sl
  406a18:	4620      	mov	r0, r4
  406a1a:	4629      	mov	r1, r5
  406a1c:	f000 fb82 	bl	407124 <__aeabi_dsub>
  406a20:	46a0      	mov	r8, r4
  406a22:	4602      	mov	r2, r0
  406a24:	460b      	mov	r3, r1
  406a26:	e9dd 0100 	ldrd	r0, r1, [sp]
  406a2a:	f000 fb7b 	bl	407124 <__aeabi_dsub>
  406a2e:	4642      	mov	r2, r8
  406a30:	463b      	mov	r3, r7
  406a32:	f000 fd2b 	bl	40748c <__aeabi_dmul>
  406a36:	46a9      	mov	r9, r5
  406a38:	4604      	mov	r4, r0
  406a3a:	460d      	mov	r5, r1
  406a3c:	4642      	mov	r2, r8
  406a3e:	463b      	mov	r3, r7
  406a40:	4640      	mov	r0, r8
  406a42:	4649      	mov	r1, r9
  406a44:	f000 fd22 	bl	40748c <__aeabi_dmul>
  406a48:	2200      	movs	r2, #0
  406a4a:	4b50      	ldr	r3, [pc, #320]	; (406b8c <__kernel_tan+0x374>)
  406a4c:	f000 fb6c 	bl	407128 <__adddf3>
  406a50:	4602      	mov	r2, r0
  406a52:	460b      	mov	r3, r1
  406a54:	4620      	mov	r0, r4
  406a56:	4629      	mov	r1, r5
  406a58:	f000 fb66 	bl	407128 <__adddf3>
  406a5c:	4632      	mov	r2, r6
  406a5e:	463b      	mov	r3, r7
  406a60:	f000 fd14 	bl	40748c <__aeabi_dmul>
  406a64:	4642      	mov	r2, r8
  406a66:	463b      	mov	r3, r7
  406a68:	f000 fb5e 	bl	407128 <__adddf3>
  406a6c:	b007      	add	sp, #28
  406a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a72:	9810      	ldr	r0, [sp, #64]	; 0x40
  406a74:	f000 fca4 	bl	4073c0 <__aeabi_i2d>
  406a78:	4622      	mov	r2, r4
  406a7a:	4606      	mov	r6, r0
  406a7c:	460f      	mov	r7, r1
  406a7e:	462b      	mov	r3, r5
  406a80:	4620      	mov	r0, r4
  406a82:	4629      	mov	r1, r5
  406a84:	f000 fd02 	bl	40748c <__aeabi_dmul>
  406a88:	4632      	mov	r2, r6
  406a8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  406a8e:	463b      	mov	r3, r7
  406a90:	4620      	mov	r0, r4
  406a92:	4629      	mov	r1, r5
  406a94:	f000 fb48 	bl	407128 <__adddf3>
  406a98:	4602      	mov	r2, r0
  406a9a:	460b      	mov	r3, r1
  406a9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406aa0:	f000 fe1e 	bl	4076e0 <__aeabi_ddiv>
  406aa4:	e9dd 2300 	ldrd	r2, r3, [sp]
  406aa8:	f000 fb3c 	bl	407124 <__aeabi_dsub>
  406aac:	4602      	mov	r2, r0
  406aae:	460b      	mov	r3, r1
  406ab0:	4658      	mov	r0, fp
  406ab2:	4651      	mov	r1, sl
  406ab4:	f000 fb36 	bl	407124 <__aeabi_dsub>
  406ab8:	4602      	mov	r2, r0
  406aba:	460b      	mov	r3, r1
  406abc:	f000 fb34 	bl	407128 <__adddf3>
  406ac0:	4602      	mov	r2, r0
  406ac2:	460b      	mov	r3, r1
  406ac4:	4630      	mov	r0, r6
  406ac6:	4639      	mov	r1, r7
  406ac8:	f000 fb2c 	bl	407124 <__aeabi_dsub>
  406acc:	4604      	mov	r4, r0
  406ace:	ea4f 70a9 	mov.w	r0, r9, asr #30
  406ad2:	f000 0002 	and.w	r0, r0, #2
  406ad6:	f1c0 0001 	rsb	r0, r0, #1
  406ada:	460d      	mov	r5, r1
  406adc:	f000 fc70 	bl	4073c0 <__aeabi_i2d>
  406ae0:	4602      	mov	r2, r0
  406ae2:	460b      	mov	r3, r1
  406ae4:	4620      	mov	r0, r4
  406ae6:	4629      	mov	r1, r5
  406ae8:	f000 fcd0 	bl	40748c <__aeabi_dmul>
  406aec:	b007      	add	sp, #28
  406aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406af2:	4658      	mov	r0, fp
  406af4:	4651      	mov	r1, sl
  406af6:	f000 f9f5 	bl	406ee4 <fabs>
  406afa:	4602      	mov	r2, r0
  406afc:	460b      	mov	r3, r1
  406afe:	2000      	movs	r0, #0
  406b00:	4922      	ldr	r1, [pc, #136]	; (406b8c <__kernel_tan+0x374>)
  406b02:	f000 fded 	bl	4076e0 <__aeabi_ddiv>
  406b06:	e7b1      	b.n	406a6c <__kernel_tan+0x254>
  406b08:	54442d18 	.word	0x54442d18
  406b0c:	3fe921fb 	.word	0x3fe921fb
  406b10:	33145c07 	.word	0x33145c07
  406b14:	3c81a626 	.word	0x3c81a626
  406b18:	74bf7ad4 	.word	0x74bf7ad4
  406b1c:	3efb2a70 	.word	0x3efb2a70
  406b20:	32f0a7e9 	.word	0x32f0a7e9
  406b24:	3f12b80f 	.word	0x3f12b80f
  406b28:	1a8d1068 	.word	0x1a8d1068
  406b2c:	3f3026f7 	.word	0x3f3026f7
  406b30:	fee08315 	.word	0xfee08315
  406b34:	3f57dbc8 	.word	0x3f57dbc8
  406b38:	e96e8493 	.word	0xe96e8493
  406b3c:	3f8226e3 	.word	0x3f8226e3
  406b40:	1bb341fe 	.word	0x1bb341fe
  406b44:	3faba1ba 	.word	0x3faba1ba
  406b48:	db605373 	.word	0xdb605373
  406b4c:	bef375cb 	.word	0xbef375cb
  406b50:	a03792a6 	.word	0xa03792a6
  406b54:	3f147e88 	.word	0x3f147e88
  406b58:	f2f26501 	.word	0xf2f26501
  406b5c:	3f4344d8 	.word	0x3f4344d8
  406b60:	c9560328 	.word	0xc9560328
  406b64:	3f6d6d22 	.word	0x3f6d6d22
  406b68:	8406d637 	.word	0x8406d637
  406b6c:	3f9664f4 	.word	0x3f9664f4
  406b70:	1110fe7a 	.word	0x1110fe7a
  406b74:	3fc11111 	.word	0x3fc11111
  406b78:	55555563 	.word	0x55555563
  406b7c:	3fd55555 	.word	0x3fd55555
  406b80:	3e2fffff 	.word	0x3e2fffff
  406b84:	bff00000 	.word	0xbff00000
  406b88:	3fe59427 	.word	0x3fe59427
  406b8c:	3ff00000 	.word	0x3ff00000
  406b90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  406b94:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
  406b98:	4683      	mov	fp, r0
  406b9a:	469a      	mov	sl, r3
  406b9c:	e666      	b.n	40686c <__kernel_tan+0x54>
  406b9e:	4658      	mov	r0, fp
  406ba0:	4651      	mov	r1, sl
  406ba2:	e763      	b.n	406a6c <__kernel_tan+0x254>
  406ba4:	0000      	movs	r0, r0
	...

00406ba8 <atan>:
  406ba8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406bac:	4bc0      	ldr	r3, [pc, #768]	; (406eb0 <atan+0x308>)
  406bae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  406bb2:	429e      	cmp	r6, r3
  406bb4:	460d      	mov	r5, r1
  406bb6:	468a      	mov	sl, r1
  406bb8:	4604      	mov	r4, r0
  406bba:	dd0f      	ble.n	406bdc <atan+0x34>
  406bbc:	4bbd      	ldr	r3, [pc, #756]	; (406eb4 <atan+0x30c>)
  406bbe:	429e      	cmp	r6, r3
  406bc0:	f300 80b2 	bgt.w	406d28 <atan+0x180>
  406bc4:	f000 80ad 	beq.w	406d22 <atan+0x17a>
  406bc8:	4bbb      	ldr	r3, [pc, #748]	; (406eb8 <atan+0x310>)
  406bca:	49bc      	ldr	r1, [pc, #752]	; (406ebc <atan+0x314>)
  406bcc:	4cbc      	ldr	r4, [pc, #752]	; (406ec0 <atan+0x318>)
  406bce:	f1ba 0f00 	cmp.w	sl, #0
  406bd2:	bfc8      	it	gt
  406bd4:	4619      	movgt	r1, r3
  406bd6:	4620      	mov	r0, r4
  406bd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406bdc:	4bb9      	ldr	r3, [pc, #740]	; (406ec4 <atan+0x31c>)
  406bde:	429e      	cmp	r6, r3
  406be0:	f300 80bc 	bgt.w	406d5c <atan+0x1b4>
  406be4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
  406be8:	429e      	cmp	r6, r3
  406bea:	f340 80a7 	ble.w	406d3c <atan+0x194>
  406bee:	f04f 3bff 	mov.w	fp, #4294967295
  406bf2:	4622      	mov	r2, r4
  406bf4:	462b      	mov	r3, r5
  406bf6:	4620      	mov	r0, r4
  406bf8:	4629      	mov	r1, r5
  406bfa:	f000 fc47 	bl	40748c <__aeabi_dmul>
  406bfe:	4602      	mov	r2, r0
  406c00:	460b      	mov	r3, r1
  406c02:	4680      	mov	r8, r0
  406c04:	4689      	mov	r9, r1
  406c06:	f000 fc41 	bl	40748c <__aeabi_dmul>
  406c0a:	a391      	add	r3, pc, #580	; (adr r3, 406e50 <atan+0x2a8>)
  406c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
  406c10:	4606      	mov	r6, r0
  406c12:	460f      	mov	r7, r1
  406c14:	f000 fc3a 	bl	40748c <__aeabi_dmul>
  406c18:	a38f      	add	r3, pc, #572	; (adr r3, 406e58 <atan+0x2b0>)
  406c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
  406c1e:	f000 fa83 	bl	407128 <__adddf3>
  406c22:	4632      	mov	r2, r6
  406c24:	463b      	mov	r3, r7
  406c26:	f000 fc31 	bl	40748c <__aeabi_dmul>
  406c2a:	a38d      	add	r3, pc, #564	; (adr r3, 406e60 <atan+0x2b8>)
  406c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
  406c30:	f000 fa7a 	bl	407128 <__adddf3>
  406c34:	4632      	mov	r2, r6
  406c36:	463b      	mov	r3, r7
  406c38:	f000 fc28 	bl	40748c <__aeabi_dmul>
  406c3c:	a38a      	add	r3, pc, #552	; (adr r3, 406e68 <atan+0x2c0>)
  406c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
  406c42:	f000 fa71 	bl	407128 <__adddf3>
  406c46:	4632      	mov	r2, r6
  406c48:	463b      	mov	r3, r7
  406c4a:	f000 fc1f 	bl	40748c <__aeabi_dmul>
  406c4e:	a388      	add	r3, pc, #544	; (adr r3, 406e70 <atan+0x2c8>)
  406c50:	e9d3 2300 	ldrd	r2, r3, [r3]
  406c54:	f000 fa68 	bl	407128 <__adddf3>
  406c58:	4632      	mov	r2, r6
  406c5a:	463b      	mov	r3, r7
  406c5c:	f000 fc16 	bl	40748c <__aeabi_dmul>
  406c60:	a385      	add	r3, pc, #532	; (adr r3, 406e78 <atan+0x2d0>)
  406c62:	e9d3 2300 	ldrd	r2, r3, [r3]
  406c66:	f000 fa5f 	bl	407128 <__adddf3>
  406c6a:	4642      	mov	r2, r8
  406c6c:	464b      	mov	r3, r9
  406c6e:	f000 fc0d 	bl	40748c <__aeabi_dmul>
  406c72:	a383      	add	r3, pc, #524	; (adr r3, 406e80 <atan+0x2d8>)
  406c74:	e9d3 2300 	ldrd	r2, r3, [r3]
  406c78:	4680      	mov	r8, r0
  406c7a:	4689      	mov	r9, r1
  406c7c:	4630      	mov	r0, r6
  406c7e:	4639      	mov	r1, r7
  406c80:	f000 fc04 	bl	40748c <__aeabi_dmul>
  406c84:	a380      	add	r3, pc, #512	; (adr r3, 406e88 <atan+0x2e0>)
  406c86:	e9d3 2300 	ldrd	r2, r3, [r3]
  406c8a:	f000 fa4b 	bl	407124 <__aeabi_dsub>
  406c8e:	4632      	mov	r2, r6
  406c90:	463b      	mov	r3, r7
  406c92:	f000 fbfb 	bl	40748c <__aeabi_dmul>
  406c96:	a37e      	add	r3, pc, #504	; (adr r3, 406e90 <atan+0x2e8>)
  406c98:	e9d3 2300 	ldrd	r2, r3, [r3]
  406c9c:	f000 fa42 	bl	407124 <__aeabi_dsub>
  406ca0:	4632      	mov	r2, r6
  406ca2:	463b      	mov	r3, r7
  406ca4:	f000 fbf2 	bl	40748c <__aeabi_dmul>
  406ca8:	a37b      	add	r3, pc, #492	; (adr r3, 406e98 <atan+0x2f0>)
  406caa:	e9d3 2300 	ldrd	r2, r3, [r3]
  406cae:	f000 fa39 	bl	407124 <__aeabi_dsub>
  406cb2:	4632      	mov	r2, r6
  406cb4:	463b      	mov	r3, r7
  406cb6:	f000 fbe9 	bl	40748c <__aeabi_dmul>
  406cba:	a379      	add	r3, pc, #484	; (adr r3, 406ea0 <atan+0x2f8>)
  406cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
  406cc0:	f000 fa30 	bl	407124 <__aeabi_dsub>
  406cc4:	4632      	mov	r2, r6
  406cc6:	463b      	mov	r3, r7
  406cc8:	f000 fbe0 	bl	40748c <__aeabi_dmul>
  406ccc:	f1bb 3fff 	cmp.w	fp, #4294967295
  406cd0:	4602      	mov	r2, r0
  406cd2:	460b      	mov	r3, r1
  406cd4:	d069      	beq.n	406daa <atan+0x202>
  406cd6:	4640      	mov	r0, r8
  406cd8:	4649      	mov	r1, r9
  406cda:	f000 fa25 	bl	407128 <__adddf3>
  406cde:	4622      	mov	r2, r4
  406ce0:	462b      	mov	r3, r5
  406ce2:	f000 fbd3 	bl	40748c <__aeabi_dmul>
  406ce6:	4e78      	ldr	r6, [pc, #480]	; (406ec8 <atan+0x320>)
  406ce8:	4b78      	ldr	r3, [pc, #480]	; (406ecc <atan+0x324>)
  406cea:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
  406cee:	445e      	add	r6, fp
  406cf0:	449b      	add	fp, r3
  406cf2:	e9db 2300 	ldrd	r2, r3, [fp]
  406cf6:	f000 fa15 	bl	407124 <__aeabi_dsub>
  406cfa:	4622      	mov	r2, r4
  406cfc:	462b      	mov	r3, r5
  406cfe:	f000 fa11 	bl	407124 <__aeabi_dsub>
  406d02:	4602      	mov	r2, r0
  406d04:	460b      	mov	r3, r1
  406d06:	e9d6 0100 	ldrd	r0, r1, [r6]
  406d0a:	f000 fa0b 	bl	407124 <__aeabi_dsub>
  406d0e:	f1ba 0f00 	cmp.w	sl, #0
  406d12:	4604      	mov	r4, r0
  406d14:	f6bf af5f 	bge.w	406bd6 <atan+0x2e>
  406d18:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  406d1c:	4620      	mov	r0, r4
  406d1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d22:	2800      	cmp	r0, #0
  406d24:	f43f af50 	beq.w	406bc8 <atan+0x20>
  406d28:	4622      	mov	r2, r4
  406d2a:	4620      	mov	r0, r4
  406d2c:	462b      	mov	r3, r5
  406d2e:	4629      	mov	r1, r5
  406d30:	f000 f9fa 	bl	407128 <__adddf3>
  406d34:	4604      	mov	r4, r0
  406d36:	4620      	mov	r0, r4
  406d38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d3c:	a35a      	add	r3, pc, #360	; (adr r3, 406ea8 <atan+0x300>)
  406d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
  406d42:	f000 f9f1 	bl	407128 <__adddf3>
  406d46:	2200      	movs	r2, #0
  406d48:	4b61      	ldr	r3, [pc, #388]	; (406ed0 <atan+0x328>)
  406d4a:	f000 fe2f 	bl	4079ac <__aeabi_dcmpgt>
  406d4e:	2800      	cmp	r0, #0
  406d50:	f43f af4d 	beq.w	406bee <atan+0x46>
  406d54:	4629      	mov	r1, r5
  406d56:	4620      	mov	r0, r4
  406d58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d5c:	f000 f8c2 	bl	406ee4 <fabs>
  406d60:	4b5c      	ldr	r3, [pc, #368]	; (406ed4 <atan+0x32c>)
  406d62:	429e      	cmp	r6, r3
  406d64:	4604      	mov	r4, r0
  406d66:	460d      	mov	r5, r1
  406d68:	dc2f      	bgt.n	406dca <atan+0x222>
  406d6a:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
  406d6e:	429e      	cmp	r6, r3
  406d70:	dc54      	bgt.n	406e1c <atan+0x274>
  406d72:	4602      	mov	r2, r0
  406d74:	460b      	mov	r3, r1
  406d76:	f000 f9d7 	bl	407128 <__adddf3>
  406d7a:	2200      	movs	r2, #0
  406d7c:	4b54      	ldr	r3, [pc, #336]	; (406ed0 <atan+0x328>)
  406d7e:	f000 f9d1 	bl	407124 <__aeabi_dsub>
  406d82:	2200      	movs	r2, #0
  406d84:	4606      	mov	r6, r0
  406d86:	460f      	mov	r7, r1
  406d88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  406d8c:	4620      	mov	r0, r4
  406d8e:	4629      	mov	r1, r5
  406d90:	f000 f9ca 	bl	407128 <__adddf3>
  406d94:	4602      	mov	r2, r0
  406d96:	460b      	mov	r3, r1
  406d98:	4630      	mov	r0, r6
  406d9a:	4639      	mov	r1, r7
  406d9c:	f000 fca0 	bl	4076e0 <__aeabi_ddiv>
  406da0:	f04f 0b00 	mov.w	fp, #0
  406da4:	4604      	mov	r4, r0
  406da6:	460d      	mov	r5, r1
  406da8:	e723      	b.n	406bf2 <atan+0x4a>
  406daa:	4640      	mov	r0, r8
  406dac:	4649      	mov	r1, r9
  406dae:	f000 f9bb 	bl	407128 <__adddf3>
  406db2:	4622      	mov	r2, r4
  406db4:	462b      	mov	r3, r5
  406db6:	f000 fb69 	bl	40748c <__aeabi_dmul>
  406dba:	4602      	mov	r2, r0
  406dbc:	460b      	mov	r3, r1
  406dbe:	4620      	mov	r0, r4
  406dc0:	4629      	mov	r1, r5
  406dc2:	f000 f9af 	bl	407124 <__aeabi_dsub>
  406dc6:	4604      	mov	r4, r0
  406dc8:	e705      	b.n	406bd6 <atan+0x2e>
  406dca:	4b43      	ldr	r3, [pc, #268]	; (406ed8 <atan+0x330>)
  406dcc:	429e      	cmp	r6, r3
  406dce:	dc1a      	bgt.n	406e06 <atan+0x25e>
  406dd0:	2200      	movs	r2, #0
  406dd2:	4b42      	ldr	r3, [pc, #264]	; (406edc <atan+0x334>)
  406dd4:	f000 f9a6 	bl	407124 <__aeabi_dsub>
  406dd8:	2200      	movs	r2, #0
  406dda:	4606      	mov	r6, r0
  406ddc:	460f      	mov	r7, r1
  406dde:	4b3f      	ldr	r3, [pc, #252]	; (406edc <atan+0x334>)
  406de0:	4620      	mov	r0, r4
  406de2:	4629      	mov	r1, r5
  406de4:	f000 fb52 	bl	40748c <__aeabi_dmul>
  406de8:	2200      	movs	r2, #0
  406dea:	4b39      	ldr	r3, [pc, #228]	; (406ed0 <atan+0x328>)
  406dec:	f000 f99c 	bl	407128 <__adddf3>
  406df0:	4602      	mov	r2, r0
  406df2:	460b      	mov	r3, r1
  406df4:	4630      	mov	r0, r6
  406df6:	4639      	mov	r1, r7
  406df8:	f000 fc72 	bl	4076e0 <__aeabi_ddiv>
  406dfc:	f04f 0b02 	mov.w	fp, #2
  406e00:	4604      	mov	r4, r0
  406e02:	460d      	mov	r5, r1
  406e04:	e6f5      	b.n	406bf2 <atan+0x4a>
  406e06:	4602      	mov	r2, r0
  406e08:	460b      	mov	r3, r1
  406e0a:	2000      	movs	r0, #0
  406e0c:	4934      	ldr	r1, [pc, #208]	; (406ee0 <atan+0x338>)
  406e0e:	f000 fc67 	bl	4076e0 <__aeabi_ddiv>
  406e12:	f04f 0b03 	mov.w	fp, #3
  406e16:	4604      	mov	r4, r0
  406e18:	460d      	mov	r5, r1
  406e1a:	e6ea      	b.n	406bf2 <atan+0x4a>
  406e1c:	2200      	movs	r2, #0
  406e1e:	4b2c      	ldr	r3, [pc, #176]	; (406ed0 <atan+0x328>)
  406e20:	f000 f980 	bl	407124 <__aeabi_dsub>
  406e24:	2200      	movs	r2, #0
  406e26:	4606      	mov	r6, r0
  406e28:	460f      	mov	r7, r1
  406e2a:	4b29      	ldr	r3, [pc, #164]	; (406ed0 <atan+0x328>)
  406e2c:	4620      	mov	r0, r4
  406e2e:	4629      	mov	r1, r5
  406e30:	f000 f97a 	bl	407128 <__adddf3>
  406e34:	4602      	mov	r2, r0
  406e36:	460b      	mov	r3, r1
  406e38:	4630      	mov	r0, r6
  406e3a:	4639      	mov	r1, r7
  406e3c:	f000 fc50 	bl	4076e0 <__aeabi_ddiv>
  406e40:	f04f 0b01 	mov.w	fp, #1
  406e44:	4604      	mov	r4, r0
  406e46:	460d      	mov	r5, r1
  406e48:	e6d3      	b.n	406bf2 <atan+0x4a>
  406e4a:	bf00      	nop
  406e4c:	f3af 8000 	nop.w
  406e50:	e322da11 	.word	0xe322da11
  406e54:	3f90ad3a 	.word	0x3f90ad3a
  406e58:	24760deb 	.word	0x24760deb
  406e5c:	3fa97b4b 	.word	0x3fa97b4b
  406e60:	a0d03d51 	.word	0xa0d03d51
  406e64:	3fb10d66 	.word	0x3fb10d66
  406e68:	c54c206e 	.word	0xc54c206e
  406e6c:	3fb745cd 	.word	0x3fb745cd
  406e70:	920083ff 	.word	0x920083ff
  406e74:	3fc24924 	.word	0x3fc24924
  406e78:	5555550d 	.word	0x5555550d
  406e7c:	3fd55555 	.word	0x3fd55555
  406e80:	2c6a6c2f 	.word	0x2c6a6c2f
  406e84:	bfa2b444 	.word	0xbfa2b444
  406e88:	52defd9a 	.word	0x52defd9a
  406e8c:	3fadde2d 	.word	0x3fadde2d
  406e90:	af749a6d 	.word	0xaf749a6d
  406e94:	3fb3b0f2 	.word	0x3fb3b0f2
  406e98:	fe231671 	.word	0xfe231671
  406e9c:	3fbc71c6 	.word	0x3fbc71c6
  406ea0:	9998ebc4 	.word	0x9998ebc4
  406ea4:	3fc99999 	.word	0x3fc99999
  406ea8:	8800759c 	.word	0x8800759c
  406eac:	7e37e43c 	.word	0x7e37e43c
  406eb0:	440fffff 	.word	0x440fffff
  406eb4:	7ff00000 	.word	0x7ff00000
  406eb8:	3ff921fb 	.word	0x3ff921fb
  406ebc:	bff921fb 	.word	0xbff921fb
  406ec0:	54442d18 	.word	0x54442d18
  406ec4:	3fdbffff 	.word	0x3fdbffff
  406ec8:	00408758 	.word	0x00408758
  406ecc:	00408738 	.word	0x00408738
  406ed0:	3ff00000 	.word	0x3ff00000
  406ed4:	3ff2ffff 	.word	0x3ff2ffff
  406ed8:	40037fff 	.word	0x40037fff
  406edc:	3ff80000 	.word	0x3ff80000
  406ee0:	bff00000 	.word	0xbff00000

00406ee4 <fabs>:
  406ee4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  406ee8:	4770      	bx	lr
  406eea:	bf00      	nop
  406eec:	0000      	movs	r0, r0
	...

00406ef0 <floor>:
  406ef0:	f3c1 520a 	ubfx	r2, r1, #20, #11
  406ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406ef8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
  406efc:	2e13      	cmp	r6, #19
  406efe:	460b      	mov	r3, r1
  406f00:	460d      	mov	r5, r1
  406f02:	4604      	mov	r4, r0
  406f04:	4688      	mov	r8, r1
  406f06:	4607      	mov	r7, r0
  406f08:	dc1c      	bgt.n	406f44 <floor+0x54>
  406f0a:	2e00      	cmp	r6, #0
  406f0c:	db3f      	blt.n	406f8e <floor+0x9e>
  406f0e:	4a3a      	ldr	r2, [pc, #232]	; (406ff8 <floor+0x108>)
  406f10:	fa42 f906 	asr.w	r9, r2, r6
  406f14:	ea01 0209 	and.w	r2, r1, r9
  406f18:	4302      	orrs	r2, r0
  406f1a:	4686      	mov	lr, r0
  406f1c:	d017      	beq.n	406f4e <floor+0x5e>
  406f1e:	a334      	add	r3, pc, #208	; (adr r3, 406ff0 <floor+0x100>)
  406f20:	e9d3 2300 	ldrd	r2, r3, [r3]
  406f24:	f000 f900 	bl	407128 <__adddf3>
  406f28:	2200      	movs	r2, #0
  406f2a:	2300      	movs	r3, #0
  406f2c:	f000 fd3e 	bl	4079ac <__aeabi_dcmpgt>
  406f30:	b120      	cbz	r0, 406f3c <floor+0x4c>
  406f32:	2d00      	cmp	r5, #0
  406f34:	db40      	blt.n	406fb8 <floor+0xc8>
  406f36:	ea28 0509 	bic.w	r5, r8, r9
  406f3a:	2700      	movs	r7, #0
  406f3c:	4638      	mov	r0, r7
  406f3e:	4629      	mov	r1, r5
  406f40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406f44:	2e33      	cmp	r6, #51	; 0x33
  406f46:	dd06      	ble.n	406f56 <floor+0x66>
  406f48:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  406f4c:	d02f      	beq.n	406fae <floor+0xbe>
  406f4e:	4620      	mov	r0, r4
  406f50:	4619      	mov	r1, r3
  406f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406f56:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
  406f5a:	f04f 39ff 	mov.w	r9, #4294967295
  406f5e:	fa29 f902 	lsr.w	r9, r9, r2
  406f62:	ea10 0f09 	tst.w	r0, r9
  406f66:	d0f2      	beq.n	406f4e <floor+0x5e>
  406f68:	a321      	add	r3, pc, #132	; (adr r3, 406ff0 <floor+0x100>)
  406f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
  406f6e:	f000 f8db 	bl	407128 <__adddf3>
  406f72:	2200      	movs	r2, #0
  406f74:	2300      	movs	r3, #0
  406f76:	f000 fd19 	bl	4079ac <__aeabi_dcmpgt>
  406f7a:	2800      	cmp	r0, #0
  406f7c:	d0de      	beq.n	406f3c <floor+0x4c>
  406f7e:	2d00      	cmp	r5, #0
  406f80:	db20      	blt.n	406fc4 <floor+0xd4>
  406f82:	4645      	mov	r5, r8
  406f84:	ea27 0709 	bic.w	r7, r7, r9
  406f88:	4638      	mov	r0, r7
  406f8a:	4629      	mov	r1, r5
  406f8c:	e7d8      	b.n	406f40 <floor+0x50>
  406f8e:	a318      	add	r3, pc, #96	; (adr r3, 406ff0 <floor+0x100>)
  406f90:	e9d3 2300 	ldrd	r2, r3, [r3]
  406f94:	f000 f8c8 	bl	407128 <__adddf3>
  406f98:	2200      	movs	r2, #0
  406f9a:	2300      	movs	r3, #0
  406f9c:	f000 fd06 	bl	4079ac <__aeabi_dcmpgt>
  406fa0:	2800      	cmp	r0, #0
  406fa2:	d0cb      	beq.n	406f3c <floor+0x4c>
  406fa4:	2d00      	cmp	r5, #0
  406fa6:	db18      	blt.n	406fda <floor+0xea>
  406fa8:	2700      	movs	r7, #0
  406faa:	463d      	mov	r5, r7
  406fac:	e7c6      	b.n	406f3c <floor+0x4c>
  406fae:	4602      	mov	r2, r0
  406fb0:	460b      	mov	r3, r1
  406fb2:	f000 f8b9 	bl	407128 <__adddf3>
  406fb6:	e7cc      	b.n	406f52 <floor+0x62>
  406fb8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  406fbc:	fa43 f606 	asr.w	r6, r3, r6
  406fc0:	44b0      	add	r8, r6
  406fc2:	e7b8      	b.n	406f36 <floor+0x46>
  406fc4:	2e14      	cmp	r6, #20
  406fc6:	d010      	beq.n	406fea <floor+0xfa>
  406fc8:	2301      	movs	r3, #1
  406fca:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
  406fce:	fa03 f606 	lsl.w	r6, r3, r6
  406fd2:	1937      	adds	r7, r6, r4
  406fd4:	bf28      	it	cs
  406fd6:	4498      	addcs	r8, r3
  406fd8:	e7d3      	b.n	406f82 <floor+0x92>
  406fda:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
  406fde:	4b07      	ldr	r3, [pc, #28]	; (406ffc <floor+0x10c>)
  406fe0:	4322      	orrs	r2, r4
  406fe2:	bf18      	it	ne
  406fe4:	461d      	movne	r5, r3
  406fe6:	2700      	movs	r7, #0
  406fe8:	e7a8      	b.n	406f3c <floor+0x4c>
  406fea:	f105 0801 	add.w	r8, r5, #1
  406fee:	e7c8      	b.n	406f82 <floor+0x92>
  406ff0:	8800759c 	.word	0x8800759c
  406ff4:	7e37e43c 	.word	0x7e37e43c
  406ff8:	000fffff 	.word	0x000fffff
  406ffc:	bff00000 	.word	0xbff00000

00407000 <matherr>:
  407000:	2000      	movs	r0, #0
  407002:	4770      	bx	lr

00407004 <nan>:
  407004:	2000      	movs	r0, #0
  407006:	4901      	ldr	r1, [pc, #4]	; (40700c <nan+0x8>)
  407008:	4770      	bx	lr
  40700a:	bf00      	nop
  40700c:	7ff80000 	.word	0x7ff80000

00407010 <scalbn>:
  407010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407012:	f3c1 560a 	ubfx	r6, r1, #20, #11
  407016:	4604      	mov	r4, r0
  407018:	460d      	mov	r5, r1
  40701a:	460b      	mov	r3, r1
  40701c:	4617      	mov	r7, r2
  40701e:	bb06      	cbnz	r6, 407062 <scalbn+0x52>
  407020:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  407024:	4303      	orrs	r3, r0
  407026:	d025      	beq.n	407074 <scalbn+0x64>
  407028:	2200      	movs	r2, #0
  40702a:	4b35      	ldr	r3, [pc, #212]	; (407100 <scalbn+0xf0>)
  40702c:	f000 fa2e 	bl	40748c <__aeabi_dmul>
  407030:	4a34      	ldr	r2, [pc, #208]	; (407104 <scalbn+0xf4>)
  407032:	4297      	cmp	r7, r2
  407034:	4604      	mov	r4, r0
  407036:	460d      	mov	r5, r1
  407038:	460b      	mov	r3, r1
  40703a:	db2a      	blt.n	407092 <scalbn+0x82>
  40703c:	f3c1 560a 	ubfx	r6, r1, #20, #11
  407040:	3e36      	subs	r6, #54	; 0x36
  407042:	443e      	add	r6, r7
  407044:	f240 72fe 	movw	r2, #2046	; 0x7fe
  407048:	4296      	cmp	r6, r2
  40704a:	dc28      	bgt.n	40709e <scalbn+0x8e>
  40704c:	2e00      	cmp	r6, #0
  40704e:	dd12      	ble.n	407076 <scalbn+0x66>
  407050:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  407054:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  407058:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  40705c:	4620      	mov	r0, r4
  40705e:	4629      	mov	r1, r5
  407060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407062:	f240 72ff 	movw	r2, #2047	; 0x7ff
  407066:	4296      	cmp	r6, r2
  407068:	d1eb      	bne.n	407042 <scalbn+0x32>
  40706a:	4602      	mov	r2, r0
  40706c:	460b      	mov	r3, r1
  40706e:	f000 f85b 	bl	407128 <__adddf3>
  407072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407076:	f116 0f35 	cmn.w	r6, #53	; 0x35
  40707a:	da1d      	bge.n	4070b8 <scalbn+0xa8>
  40707c:	f24c 3350 	movw	r3, #50000	; 0xc350
  407080:	429f      	cmp	r7, r3
  407082:	4622      	mov	r2, r4
  407084:	462b      	mov	r3, r5
  407086:	dc25      	bgt.n	4070d4 <scalbn+0xc4>
  407088:	a119      	add	r1, pc, #100	; (adr r1, 4070f0 <scalbn+0xe0>)
  40708a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40708e:	f000 f83d 	bl	40710c <copysign>
  407092:	a317      	add	r3, pc, #92	; (adr r3, 4070f0 <scalbn+0xe0>)
  407094:	e9d3 2300 	ldrd	r2, r3, [r3]
  407098:	f000 f9f8 	bl	40748c <__aeabi_dmul>
  40709c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40709e:	4622      	mov	r2, r4
  4070a0:	462b      	mov	r3, r5
  4070a2:	a115      	add	r1, pc, #84	; (adr r1, 4070f8 <scalbn+0xe8>)
  4070a4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4070a8:	f000 f830 	bl	40710c <copysign>
  4070ac:	a312      	add	r3, pc, #72	; (adr r3, 4070f8 <scalbn+0xe8>)
  4070ae:	e9d3 2300 	ldrd	r2, r3, [r3]
  4070b2:	f000 f9eb 	bl	40748c <__aeabi_dmul>
  4070b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4070b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  4070bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  4070c0:	3636      	adds	r6, #54	; 0x36
  4070c2:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  4070c6:	4620      	mov	r0, r4
  4070c8:	4629      	mov	r1, r5
  4070ca:	2200      	movs	r2, #0
  4070cc:	4b0e      	ldr	r3, [pc, #56]	; (407108 <scalbn+0xf8>)
  4070ce:	f000 f9dd 	bl	40748c <__aeabi_dmul>
  4070d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4070d4:	a108      	add	r1, pc, #32	; (adr r1, 4070f8 <scalbn+0xe8>)
  4070d6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4070da:	f000 f817 	bl	40710c <copysign>
  4070de:	a306      	add	r3, pc, #24	; (adr r3, 4070f8 <scalbn+0xe8>)
  4070e0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4070e4:	f000 f9d2 	bl	40748c <__aeabi_dmul>
  4070e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4070ea:	bf00      	nop
  4070ec:	f3af 8000 	nop.w
  4070f0:	c2f8f359 	.word	0xc2f8f359
  4070f4:	01a56e1f 	.word	0x01a56e1f
  4070f8:	8800759c 	.word	0x8800759c
  4070fc:	7e37e43c 	.word	0x7e37e43c
  407100:	43500000 	.word	0x43500000
  407104:	ffff3cb0 	.word	0xffff3cb0
  407108:	3c900000 	.word	0x3c900000

0040710c <copysign>:
  40710c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  407110:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
  407114:	ea42 0103 	orr.w	r1, r2, r3
  407118:	4770      	bx	lr
  40711a:	bf00      	nop

0040711c <__aeabi_drsub>:
  40711c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  407120:	e002      	b.n	407128 <__adddf3>
  407122:	bf00      	nop

00407124 <__aeabi_dsub>:
  407124:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00407128 <__adddf3>:
  407128:	b530      	push	{r4, r5, lr}
  40712a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40712e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  407132:	ea94 0f05 	teq	r4, r5
  407136:	bf08      	it	eq
  407138:	ea90 0f02 	teqeq	r0, r2
  40713c:	bf1f      	itttt	ne
  40713e:	ea54 0c00 	orrsne.w	ip, r4, r0
  407142:	ea55 0c02 	orrsne.w	ip, r5, r2
  407146:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40714a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40714e:	f000 80e2 	beq.w	407316 <__adddf3+0x1ee>
  407152:	ea4f 5454 	mov.w	r4, r4, lsr #21
  407156:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40715a:	bfb8      	it	lt
  40715c:	426d      	neglt	r5, r5
  40715e:	dd0c      	ble.n	40717a <__adddf3+0x52>
  407160:	442c      	add	r4, r5
  407162:	ea80 0202 	eor.w	r2, r0, r2
  407166:	ea81 0303 	eor.w	r3, r1, r3
  40716a:	ea82 0000 	eor.w	r0, r2, r0
  40716e:	ea83 0101 	eor.w	r1, r3, r1
  407172:	ea80 0202 	eor.w	r2, r0, r2
  407176:	ea81 0303 	eor.w	r3, r1, r3
  40717a:	2d36      	cmp	r5, #54	; 0x36
  40717c:	bf88      	it	hi
  40717e:	bd30      	pophi	{r4, r5, pc}
  407180:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407184:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407188:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40718c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  407190:	d002      	beq.n	407198 <__adddf3+0x70>
  407192:	4240      	negs	r0, r0
  407194:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407198:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40719c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4071a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4071a4:	d002      	beq.n	4071ac <__adddf3+0x84>
  4071a6:	4252      	negs	r2, r2
  4071a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4071ac:	ea94 0f05 	teq	r4, r5
  4071b0:	f000 80a7 	beq.w	407302 <__adddf3+0x1da>
  4071b4:	f1a4 0401 	sub.w	r4, r4, #1
  4071b8:	f1d5 0e20 	rsbs	lr, r5, #32
  4071bc:	db0d      	blt.n	4071da <__adddf3+0xb2>
  4071be:	fa02 fc0e 	lsl.w	ip, r2, lr
  4071c2:	fa22 f205 	lsr.w	r2, r2, r5
  4071c6:	1880      	adds	r0, r0, r2
  4071c8:	f141 0100 	adc.w	r1, r1, #0
  4071cc:	fa03 f20e 	lsl.w	r2, r3, lr
  4071d0:	1880      	adds	r0, r0, r2
  4071d2:	fa43 f305 	asr.w	r3, r3, r5
  4071d6:	4159      	adcs	r1, r3
  4071d8:	e00e      	b.n	4071f8 <__adddf3+0xd0>
  4071da:	f1a5 0520 	sub.w	r5, r5, #32
  4071de:	f10e 0e20 	add.w	lr, lr, #32
  4071e2:	2a01      	cmp	r2, #1
  4071e4:	fa03 fc0e 	lsl.w	ip, r3, lr
  4071e8:	bf28      	it	cs
  4071ea:	f04c 0c02 	orrcs.w	ip, ip, #2
  4071ee:	fa43 f305 	asr.w	r3, r3, r5
  4071f2:	18c0      	adds	r0, r0, r3
  4071f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4071f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4071fc:	d507      	bpl.n	40720e <__adddf3+0xe6>
  4071fe:	f04f 0e00 	mov.w	lr, #0
  407202:	f1dc 0c00 	rsbs	ip, ip, #0
  407206:	eb7e 0000 	sbcs.w	r0, lr, r0
  40720a:	eb6e 0101 	sbc.w	r1, lr, r1
  40720e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  407212:	d31b      	bcc.n	40724c <__adddf3+0x124>
  407214:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  407218:	d30c      	bcc.n	407234 <__adddf3+0x10c>
  40721a:	0849      	lsrs	r1, r1, #1
  40721c:	ea5f 0030 	movs.w	r0, r0, rrx
  407220:	ea4f 0c3c 	mov.w	ip, ip, rrx
  407224:	f104 0401 	add.w	r4, r4, #1
  407228:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40722c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  407230:	f080 809a 	bcs.w	407368 <__adddf3+0x240>
  407234:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  407238:	bf08      	it	eq
  40723a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40723e:	f150 0000 	adcs.w	r0, r0, #0
  407242:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407246:	ea41 0105 	orr.w	r1, r1, r5
  40724a:	bd30      	pop	{r4, r5, pc}
  40724c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  407250:	4140      	adcs	r0, r0
  407252:	eb41 0101 	adc.w	r1, r1, r1
  407256:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40725a:	f1a4 0401 	sub.w	r4, r4, #1
  40725e:	d1e9      	bne.n	407234 <__adddf3+0x10c>
  407260:	f091 0f00 	teq	r1, #0
  407264:	bf04      	itt	eq
  407266:	4601      	moveq	r1, r0
  407268:	2000      	moveq	r0, #0
  40726a:	fab1 f381 	clz	r3, r1
  40726e:	bf08      	it	eq
  407270:	3320      	addeq	r3, #32
  407272:	f1a3 030b 	sub.w	r3, r3, #11
  407276:	f1b3 0220 	subs.w	r2, r3, #32
  40727a:	da0c      	bge.n	407296 <__adddf3+0x16e>
  40727c:	320c      	adds	r2, #12
  40727e:	dd08      	ble.n	407292 <__adddf3+0x16a>
  407280:	f102 0c14 	add.w	ip, r2, #20
  407284:	f1c2 020c 	rsb	r2, r2, #12
  407288:	fa01 f00c 	lsl.w	r0, r1, ip
  40728c:	fa21 f102 	lsr.w	r1, r1, r2
  407290:	e00c      	b.n	4072ac <__adddf3+0x184>
  407292:	f102 0214 	add.w	r2, r2, #20
  407296:	bfd8      	it	le
  407298:	f1c2 0c20 	rsble	ip, r2, #32
  40729c:	fa01 f102 	lsl.w	r1, r1, r2
  4072a0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4072a4:	bfdc      	itt	le
  4072a6:	ea41 010c 	orrle.w	r1, r1, ip
  4072aa:	4090      	lslle	r0, r2
  4072ac:	1ae4      	subs	r4, r4, r3
  4072ae:	bfa2      	ittt	ge
  4072b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4072b4:	4329      	orrge	r1, r5
  4072b6:	bd30      	popge	{r4, r5, pc}
  4072b8:	ea6f 0404 	mvn.w	r4, r4
  4072bc:	3c1f      	subs	r4, #31
  4072be:	da1c      	bge.n	4072fa <__adddf3+0x1d2>
  4072c0:	340c      	adds	r4, #12
  4072c2:	dc0e      	bgt.n	4072e2 <__adddf3+0x1ba>
  4072c4:	f104 0414 	add.w	r4, r4, #20
  4072c8:	f1c4 0220 	rsb	r2, r4, #32
  4072cc:	fa20 f004 	lsr.w	r0, r0, r4
  4072d0:	fa01 f302 	lsl.w	r3, r1, r2
  4072d4:	ea40 0003 	orr.w	r0, r0, r3
  4072d8:	fa21 f304 	lsr.w	r3, r1, r4
  4072dc:	ea45 0103 	orr.w	r1, r5, r3
  4072e0:	bd30      	pop	{r4, r5, pc}
  4072e2:	f1c4 040c 	rsb	r4, r4, #12
  4072e6:	f1c4 0220 	rsb	r2, r4, #32
  4072ea:	fa20 f002 	lsr.w	r0, r0, r2
  4072ee:	fa01 f304 	lsl.w	r3, r1, r4
  4072f2:	ea40 0003 	orr.w	r0, r0, r3
  4072f6:	4629      	mov	r1, r5
  4072f8:	bd30      	pop	{r4, r5, pc}
  4072fa:	fa21 f004 	lsr.w	r0, r1, r4
  4072fe:	4629      	mov	r1, r5
  407300:	bd30      	pop	{r4, r5, pc}
  407302:	f094 0f00 	teq	r4, #0
  407306:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40730a:	bf06      	itte	eq
  40730c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  407310:	3401      	addeq	r4, #1
  407312:	3d01      	subne	r5, #1
  407314:	e74e      	b.n	4071b4 <__adddf3+0x8c>
  407316:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40731a:	bf18      	it	ne
  40731c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407320:	d029      	beq.n	407376 <__adddf3+0x24e>
  407322:	ea94 0f05 	teq	r4, r5
  407326:	bf08      	it	eq
  407328:	ea90 0f02 	teqeq	r0, r2
  40732c:	d005      	beq.n	40733a <__adddf3+0x212>
  40732e:	ea54 0c00 	orrs.w	ip, r4, r0
  407332:	bf04      	itt	eq
  407334:	4619      	moveq	r1, r3
  407336:	4610      	moveq	r0, r2
  407338:	bd30      	pop	{r4, r5, pc}
  40733a:	ea91 0f03 	teq	r1, r3
  40733e:	bf1e      	ittt	ne
  407340:	2100      	movne	r1, #0
  407342:	2000      	movne	r0, #0
  407344:	bd30      	popne	{r4, r5, pc}
  407346:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40734a:	d105      	bne.n	407358 <__adddf3+0x230>
  40734c:	0040      	lsls	r0, r0, #1
  40734e:	4149      	adcs	r1, r1
  407350:	bf28      	it	cs
  407352:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  407356:	bd30      	pop	{r4, r5, pc}
  407358:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40735c:	bf3c      	itt	cc
  40735e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  407362:	bd30      	popcc	{r4, r5, pc}
  407364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407368:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40736c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407370:	f04f 0000 	mov.w	r0, #0
  407374:	bd30      	pop	{r4, r5, pc}
  407376:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40737a:	bf1a      	itte	ne
  40737c:	4619      	movne	r1, r3
  40737e:	4610      	movne	r0, r2
  407380:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  407384:	bf1c      	itt	ne
  407386:	460b      	movne	r3, r1
  407388:	4602      	movne	r2, r0
  40738a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40738e:	bf06      	itte	eq
  407390:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  407394:	ea91 0f03 	teqeq	r1, r3
  407398:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40739c:	bd30      	pop	{r4, r5, pc}
  40739e:	bf00      	nop

004073a0 <__aeabi_ui2d>:
  4073a0:	f090 0f00 	teq	r0, #0
  4073a4:	bf04      	itt	eq
  4073a6:	2100      	moveq	r1, #0
  4073a8:	4770      	bxeq	lr
  4073aa:	b530      	push	{r4, r5, lr}
  4073ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4073b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4073b4:	f04f 0500 	mov.w	r5, #0
  4073b8:	f04f 0100 	mov.w	r1, #0
  4073bc:	e750      	b.n	407260 <__adddf3+0x138>
  4073be:	bf00      	nop

004073c0 <__aeabi_i2d>:
  4073c0:	f090 0f00 	teq	r0, #0
  4073c4:	bf04      	itt	eq
  4073c6:	2100      	moveq	r1, #0
  4073c8:	4770      	bxeq	lr
  4073ca:	b530      	push	{r4, r5, lr}
  4073cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4073d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4073d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4073d8:	bf48      	it	mi
  4073da:	4240      	negmi	r0, r0
  4073dc:	f04f 0100 	mov.w	r1, #0
  4073e0:	e73e      	b.n	407260 <__adddf3+0x138>
  4073e2:	bf00      	nop

004073e4 <__aeabi_f2d>:
  4073e4:	0042      	lsls	r2, r0, #1
  4073e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4073ea:	ea4f 0131 	mov.w	r1, r1, rrx
  4073ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4073f2:	bf1f      	itttt	ne
  4073f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4073f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4073fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  407400:	4770      	bxne	lr
  407402:	f092 0f00 	teq	r2, #0
  407406:	bf14      	ite	ne
  407408:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40740c:	4770      	bxeq	lr
  40740e:	b530      	push	{r4, r5, lr}
  407410:	f44f 7460 	mov.w	r4, #896	; 0x380
  407414:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407418:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40741c:	e720      	b.n	407260 <__adddf3+0x138>
  40741e:	bf00      	nop

00407420 <__aeabi_ul2d>:
  407420:	ea50 0201 	orrs.w	r2, r0, r1
  407424:	bf08      	it	eq
  407426:	4770      	bxeq	lr
  407428:	b530      	push	{r4, r5, lr}
  40742a:	f04f 0500 	mov.w	r5, #0
  40742e:	e00a      	b.n	407446 <__aeabi_l2d+0x16>

00407430 <__aeabi_l2d>:
  407430:	ea50 0201 	orrs.w	r2, r0, r1
  407434:	bf08      	it	eq
  407436:	4770      	bxeq	lr
  407438:	b530      	push	{r4, r5, lr}
  40743a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40743e:	d502      	bpl.n	407446 <__aeabi_l2d+0x16>
  407440:	4240      	negs	r0, r0
  407442:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407446:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40744a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40744e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  407452:	f43f aedc 	beq.w	40720e <__adddf3+0xe6>
  407456:	f04f 0203 	mov.w	r2, #3
  40745a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40745e:	bf18      	it	ne
  407460:	3203      	addne	r2, #3
  407462:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407466:	bf18      	it	ne
  407468:	3203      	addne	r2, #3
  40746a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40746e:	f1c2 0320 	rsb	r3, r2, #32
  407472:	fa00 fc03 	lsl.w	ip, r0, r3
  407476:	fa20 f002 	lsr.w	r0, r0, r2
  40747a:	fa01 fe03 	lsl.w	lr, r1, r3
  40747e:	ea40 000e 	orr.w	r0, r0, lr
  407482:	fa21 f102 	lsr.w	r1, r1, r2
  407486:	4414      	add	r4, r2
  407488:	e6c1      	b.n	40720e <__adddf3+0xe6>
  40748a:	bf00      	nop

0040748c <__aeabi_dmul>:
  40748c:	b570      	push	{r4, r5, r6, lr}
  40748e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407492:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407496:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40749a:	bf1d      	ittte	ne
  40749c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4074a0:	ea94 0f0c 	teqne	r4, ip
  4074a4:	ea95 0f0c 	teqne	r5, ip
  4074a8:	f000 f8de 	bleq	407668 <__aeabi_dmul+0x1dc>
  4074ac:	442c      	add	r4, r5
  4074ae:	ea81 0603 	eor.w	r6, r1, r3
  4074b2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4074b6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4074ba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4074be:	bf18      	it	ne
  4074c0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4074c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4074c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4074cc:	d038      	beq.n	407540 <__aeabi_dmul+0xb4>
  4074ce:	fba0 ce02 	umull	ip, lr, r0, r2
  4074d2:	f04f 0500 	mov.w	r5, #0
  4074d6:	fbe1 e502 	umlal	lr, r5, r1, r2
  4074da:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4074de:	fbe0 e503 	umlal	lr, r5, r0, r3
  4074e2:	f04f 0600 	mov.w	r6, #0
  4074e6:	fbe1 5603 	umlal	r5, r6, r1, r3
  4074ea:	f09c 0f00 	teq	ip, #0
  4074ee:	bf18      	it	ne
  4074f0:	f04e 0e01 	orrne.w	lr, lr, #1
  4074f4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4074f8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4074fc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407500:	d204      	bcs.n	40750c <__aeabi_dmul+0x80>
  407502:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  407506:	416d      	adcs	r5, r5
  407508:	eb46 0606 	adc.w	r6, r6, r6
  40750c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407510:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407514:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407518:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40751c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407520:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407524:	bf88      	it	hi
  407526:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40752a:	d81e      	bhi.n	40756a <__aeabi_dmul+0xde>
  40752c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407530:	bf08      	it	eq
  407532:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  407536:	f150 0000 	adcs.w	r0, r0, #0
  40753a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40753e:	bd70      	pop	{r4, r5, r6, pc}
  407540:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  407544:	ea46 0101 	orr.w	r1, r6, r1
  407548:	ea40 0002 	orr.w	r0, r0, r2
  40754c:	ea81 0103 	eor.w	r1, r1, r3
  407550:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  407554:	bfc2      	ittt	gt
  407556:	ebd4 050c 	rsbsgt	r5, r4, ip
  40755a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40755e:	bd70      	popgt	{r4, r5, r6, pc}
  407560:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407564:	f04f 0e00 	mov.w	lr, #0
  407568:	3c01      	subs	r4, #1
  40756a:	f300 80ab 	bgt.w	4076c4 <__aeabi_dmul+0x238>
  40756e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  407572:	bfde      	ittt	le
  407574:	2000      	movle	r0, #0
  407576:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40757a:	bd70      	pople	{r4, r5, r6, pc}
  40757c:	f1c4 0400 	rsb	r4, r4, #0
  407580:	3c20      	subs	r4, #32
  407582:	da35      	bge.n	4075f0 <__aeabi_dmul+0x164>
  407584:	340c      	adds	r4, #12
  407586:	dc1b      	bgt.n	4075c0 <__aeabi_dmul+0x134>
  407588:	f104 0414 	add.w	r4, r4, #20
  40758c:	f1c4 0520 	rsb	r5, r4, #32
  407590:	fa00 f305 	lsl.w	r3, r0, r5
  407594:	fa20 f004 	lsr.w	r0, r0, r4
  407598:	fa01 f205 	lsl.w	r2, r1, r5
  40759c:	ea40 0002 	orr.w	r0, r0, r2
  4075a0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4075a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4075a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4075ac:	fa21 f604 	lsr.w	r6, r1, r4
  4075b0:	eb42 0106 	adc.w	r1, r2, r6
  4075b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4075b8:	bf08      	it	eq
  4075ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4075be:	bd70      	pop	{r4, r5, r6, pc}
  4075c0:	f1c4 040c 	rsb	r4, r4, #12
  4075c4:	f1c4 0520 	rsb	r5, r4, #32
  4075c8:	fa00 f304 	lsl.w	r3, r0, r4
  4075cc:	fa20 f005 	lsr.w	r0, r0, r5
  4075d0:	fa01 f204 	lsl.w	r2, r1, r4
  4075d4:	ea40 0002 	orr.w	r0, r0, r2
  4075d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4075dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4075e0:	f141 0100 	adc.w	r1, r1, #0
  4075e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4075e8:	bf08      	it	eq
  4075ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4075ee:	bd70      	pop	{r4, r5, r6, pc}
  4075f0:	f1c4 0520 	rsb	r5, r4, #32
  4075f4:	fa00 f205 	lsl.w	r2, r0, r5
  4075f8:	ea4e 0e02 	orr.w	lr, lr, r2
  4075fc:	fa20 f304 	lsr.w	r3, r0, r4
  407600:	fa01 f205 	lsl.w	r2, r1, r5
  407604:	ea43 0302 	orr.w	r3, r3, r2
  407608:	fa21 f004 	lsr.w	r0, r1, r4
  40760c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407610:	fa21 f204 	lsr.w	r2, r1, r4
  407614:	ea20 0002 	bic.w	r0, r0, r2
  407618:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40761c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407620:	bf08      	it	eq
  407622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407626:	bd70      	pop	{r4, r5, r6, pc}
  407628:	f094 0f00 	teq	r4, #0
  40762c:	d10f      	bne.n	40764e <__aeabi_dmul+0x1c2>
  40762e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  407632:	0040      	lsls	r0, r0, #1
  407634:	eb41 0101 	adc.w	r1, r1, r1
  407638:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40763c:	bf08      	it	eq
  40763e:	3c01      	subeq	r4, #1
  407640:	d0f7      	beq.n	407632 <__aeabi_dmul+0x1a6>
  407642:	ea41 0106 	orr.w	r1, r1, r6
  407646:	f095 0f00 	teq	r5, #0
  40764a:	bf18      	it	ne
  40764c:	4770      	bxne	lr
  40764e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  407652:	0052      	lsls	r2, r2, #1
  407654:	eb43 0303 	adc.w	r3, r3, r3
  407658:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40765c:	bf08      	it	eq
  40765e:	3d01      	subeq	r5, #1
  407660:	d0f7      	beq.n	407652 <__aeabi_dmul+0x1c6>
  407662:	ea43 0306 	orr.w	r3, r3, r6
  407666:	4770      	bx	lr
  407668:	ea94 0f0c 	teq	r4, ip
  40766c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407670:	bf18      	it	ne
  407672:	ea95 0f0c 	teqne	r5, ip
  407676:	d00c      	beq.n	407692 <__aeabi_dmul+0x206>
  407678:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40767c:	bf18      	it	ne
  40767e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407682:	d1d1      	bne.n	407628 <__aeabi_dmul+0x19c>
  407684:	ea81 0103 	eor.w	r1, r1, r3
  407688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40768c:	f04f 0000 	mov.w	r0, #0
  407690:	bd70      	pop	{r4, r5, r6, pc}
  407692:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407696:	bf06      	itte	eq
  407698:	4610      	moveq	r0, r2
  40769a:	4619      	moveq	r1, r3
  40769c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4076a0:	d019      	beq.n	4076d6 <__aeabi_dmul+0x24a>
  4076a2:	ea94 0f0c 	teq	r4, ip
  4076a6:	d102      	bne.n	4076ae <__aeabi_dmul+0x222>
  4076a8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4076ac:	d113      	bne.n	4076d6 <__aeabi_dmul+0x24a>
  4076ae:	ea95 0f0c 	teq	r5, ip
  4076b2:	d105      	bne.n	4076c0 <__aeabi_dmul+0x234>
  4076b4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4076b8:	bf1c      	itt	ne
  4076ba:	4610      	movne	r0, r2
  4076bc:	4619      	movne	r1, r3
  4076be:	d10a      	bne.n	4076d6 <__aeabi_dmul+0x24a>
  4076c0:	ea81 0103 	eor.w	r1, r1, r3
  4076c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4076c8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4076cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4076d0:	f04f 0000 	mov.w	r0, #0
  4076d4:	bd70      	pop	{r4, r5, r6, pc}
  4076d6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4076da:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4076de:	bd70      	pop	{r4, r5, r6, pc}

004076e0 <__aeabi_ddiv>:
  4076e0:	b570      	push	{r4, r5, r6, lr}
  4076e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4076e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4076ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4076ee:	bf1d      	ittte	ne
  4076f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4076f4:	ea94 0f0c 	teqne	r4, ip
  4076f8:	ea95 0f0c 	teqne	r5, ip
  4076fc:	f000 f8a7 	bleq	40784e <__aeabi_ddiv+0x16e>
  407700:	eba4 0405 	sub.w	r4, r4, r5
  407704:	ea81 0e03 	eor.w	lr, r1, r3
  407708:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40770c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407710:	f000 8088 	beq.w	407824 <__aeabi_ddiv+0x144>
  407714:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407718:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40771c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  407720:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  407724:	ea4f 2202 	mov.w	r2, r2, lsl #8
  407728:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40772c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  407730:	ea4f 2600 	mov.w	r6, r0, lsl #8
  407734:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  407738:	429d      	cmp	r5, r3
  40773a:	bf08      	it	eq
  40773c:	4296      	cmpeq	r6, r2
  40773e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  407742:	f504 7440 	add.w	r4, r4, #768	; 0x300
  407746:	d202      	bcs.n	40774e <__aeabi_ddiv+0x6e>
  407748:	085b      	lsrs	r3, r3, #1
  40774a:	ea4f 0232 	mov.w	r2, r2, rrx
  40774e:	1ab6      	subs	r6, r6, r2
  407750:	eb65 0503 	sbc.w	r5, r5, r3
  407754:	085b      	lsrs	r3, r3, #1
  407756:	ea4f 0232 	mov.w	r2, r2, rrx
  40775a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40775e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  407762:	ebb6 0e02 	subs.w	lr, r6, r2
  407766:	eb75 0e03 	sbcs.w	lr, r5, r3
  40776a:	bf22      	ittt	cs
  40776c:	1ab6      	subcs	r6, r6, r2
  40776e:	4675      	movcs	r5, lr
  407770:	ea40 000c 	orrcs.w	r0, r0, ip
  407774:	085b      	lsrs	r3, r3, #1
  407776:	ea4f 0232 	mov.w	r2, r2, rrx
  40777a:	ebb6 0e02 	subs.w	lr, r6, r2
  40777e:	eb75 0e03 	sbcs.w	lr, r5, r3
  407782:	bf22      	ittt	cs
  407784:	1ab6      	subcs	r6, r6, r2
  407786:	4675      	movcs	r5, lr
  407788:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40778c:	085b      	lsrs	r3, r3, #1
  40778e:	ea4f 0232 	mov.w	r2, r2, rrx
  407792:	ebb6 0e02 	subs.w	lr, r6, r2
  407796:	eb75 0e03 	sbcs.w	lr, r5, r3
  40779a:	bf22      	ittt	cs
  40779c:	1ab6      	subcs	r6, r6, r2
  40779e:	4675      	movcs	r5, lr
  4077a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4077a4:	085b      	lsrs	r3, r3, #1
  4077a6:	ea4f 0232 	mov.w	r2, r2, rrx
  4077aa:	ebb6 0e02 	subs.w	lr, r6, r2
  4077ae:	eb75 0e03 	sbcs.w	lr, r5, r3
  4077b2:	bf22      	ittt	cs
  4077b4:	1ab6      	subcs	r6, r6, r2
  4077b6:	4675      	movcs	r5, lr
  4077b8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4077bc:	ea55 0e06 	orrs.w	lr, r5, r6
  4077c0:	d018      	beq.n	4077f4 <__aeabi_ddiv+0x114>
  4077c2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4077c6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4077ca:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4077ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4077d2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4077d6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4077da:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4077de:	d1c0      	bne.n	407762 <__aeabi_ddiv+0x82>
  4077e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4077e4:	d10b      	bne.n	4077fe <__aeabi_ddiv+0x11e>
  4077e6:	ea41 0100 	orr.w	r1, r1, r0
  4077ea:	f04f 0000 	mov.w	r0, #0
  4077ee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4077f2:	e7b6      	b.n	407762 <__aeabi_ddiv+0x82>
  4077f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4077f8:	bf04      	itt	eq
  4077fa:	4301      	orreq	r1, r0
  4077fc:	2000      	moveq	r0, #0
  4077fe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407802:	bf88      	it	hi
  407804:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407808:	f63f aeaf 	bhi.w	40756a <__aeabi_dmul+0xde>
  40780c:	ebb5 0c03 	subs.w	ip, r5, r3
  407810:	bf04      	itt	eq
  407812:	ebb6 0c02 	subseq.w	ip, r6, r2
  407816:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40781a:	f150 0000 	adcs.w	r0, r0, #0
  40781e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407822:	bd70      	pop	{r4, r5, r6, pc}
  407824:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  407828:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40782c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  407830:	bfc2      	ittt	gt
  407832:	ebd4 050c 	rsbsgt	r5, r4, ip
  407836:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40783a:	bd70      	popgt	{r4, r5, r6, pc}
  40783c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407840:	f04f 0e00 	mov.w	lr, #0
  407844:	3c01      	subs	r4, #1
  407846:	e690      	b.n	40756a <__aeabi_dmul+0xde>
  407848:	ea45 0e06 	orr.w	lr, r5, r6
  40784c:	e68d      	b.n	40756a <__aeabi_dmul+0xde>
  40784e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407852:	ea94 0f0c 	teq	r4, ip
  407856:	bf08      	it	eq
  407858:	ea95 0f0c 	teqeq	r5, ip
  40785c:	f43f af3b 	beq.w	4076d6 <__aeabi_dmul+0x24a>
  407860:	ea94 0f0c 	teq	r4, ip
  407864:	d10a      	bne.n	40787c <__aeabi_ddiv+0x19c>
  407866:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40786a:	f47f af34 	bne.w	4076d6 <__aeabi_dmul+0x24a>
  40786e:	ea95 0f0c 	teq	r5, ip
  407872:	f47f af25 	bne.w	4076c0 <__aeabi_dmul+0x234>
  407876:	4610      	mov	r0, r2
  407878:	4619      	mov	r1, r3
  40787a:	e72c      	b.n	4076d6 <__aeabi_dmul+0x24a>
  40787c:	ea95 0f0c 	teq	r5, ip
  407880:	d106      	bne.n	407890 <__aeabi_ddiv+0x1b0>
  407882:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407886:	f43f aefd 	beq.w	407684 <__aeabi_dmul+0x1f8>
  40788a:	4610      	mov	r0, r2
  40788c:	4619      	mov	r1, r3
  40788e:	e722      	b.n	4076d6 <__aeabi_dmul+0x24a>
  407890:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407894:	bf18      	it	ne
  407896:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40789a:	f47f aec5 	bne.w	407628 <__aeabi_dmul+0x19c>
  40789e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4078a2:	f47f af0d 	bne.w	4076c0 <__aeabi_dmul+0x234>
  4078a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4078aa:	f47f aeeb 	bne.w	407684 <__aeabi_dmul+0x1f8>
  4078ae:	e712      	b.n	4076d6 <__aeabi_dmul+0x24a>

004078b0 <__gedf2>:
  4078b0:	f04f 3cff 	mov.w	ip, #4294967295
  4078b4:	e006      	b.n	4078c4 <__cmpdf2+0x4>
  4078b6:	bf00      	nop

004078b8 <__ledf2>:
  4078b8:	f04f 0c01 	mov.w	ip, #1
  4078bc:	e002      	b.n	4078c4 <__cmpdf2+0x4>
  4078be:	bf00      	nop

004078c0 <__cmpdf2>:
  4078c0:	f04f 0c01 	mov.w	ip, #1
  4078c4:	f84d cd04 	str.w	ip, [sp, #-4]!
  4078c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4078cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4078d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4078d4:	bf18      	it	ne
  4078d6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4078da:	d01b      	beq.n	407914 <__cmpdf2+0x54>
  4078dc:	b001      	add	sp, #4
  4078de:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4078e2:	bf0c      	ite	eq
  4078e4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4078e8:	ea91 0f03 	teqne	r1, r3
  4078ec:	bf02      	ittt	eq
  4078ee:	ea90 0f02 	teqeq	r0, r2
  4078f2:	2000      	moveq	r0, #0
  4078f4:	4770      	bxeq	lr
  4078f6:	f110 0f00 	cmn.w	r0, #0
  4078fa:	ea91 0f03 	teq	r1, r3
  4078fe:	bf58      	it	pl
  407900:	4299      	cmppl	r1, r3
  407902:	bf08      	it	eq
  407904:	4290      	cmpeq	r0, r2
  407906:	bf2c      	ite	cs
  407908:	17d8      	asrcs	r0, r3, #31
  40790a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40790e:	f040 0001 	orr.w	r0, r0, #1
  407912:	4770      	bx	lr
  407914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40791c:	d102      	bne.n	407924 <__cmpdf2+0x64>
  40791e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407922:	d107      	bne.n	407934 <__cmpdf2+0x74>
  407924:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40792c:	d1d6      	bne.n	4078dc <__cmpdf2+0x1c>
  40792e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407932:	d0d3      	beq.n	4078dc <__cmpdf2+0x1c>
  407934:	f85d 0b04 	ldr.w	r0, [sp], #4
  407938:	4770      	bx	lr
  40793a:	bf00      	nop

0040793c <__aeabi_cdrcmple>:
  40793c:	4684      	mov	ip, r0
  40793e:	4610      	mov	r0, r2
  407940:	4662      	mov	r2, ip
  407942:	468c      	mov	ip, r1
  407944:	4619      	mov	r1, r3
  407946:	4663      	mov	r3, ip
  407948:	e000      	b.n	40794c <__aeabi_cdcmpeq>
  40794a:	bf00      	nop

0040794c <__aeabi_cdcmpeq>:
  40794c:	b501      	push	{r0, lr}
  40794e:	f7ff ffb7 	bl	4078c0 <__cmpdf2>
  407952:	2800      	cmp	r0, #0
  407954:	bf48      	it	mi
  407956:	f110 0f00 	cmnmi.w	r0, #0
  40795a:	bd01      	pop	{r0, pc}

0040795c <__aeabi_dcmpeq>:
  40795c:	f84d ed08 	str.w	lr, [sp, #-8]!
  407960:	f7ff fff4 	bl	40794c <__aeabi_cdcmpeq>
  407964:	bf0c      	ite	eq
  407966:	2001      	moveq	r0, #1
  407968:	2000      	movne	r0, #0
  40796a:	f85d fb08 	ldr.w	pc, [sp], #8
  40796e:	bf00      	nop

00407970 <__aeabi_dcmplt>:
  407970:	f84d ed08 	str.w	lr, [sp, #-8]!
  407974:	f7ff ffea 	bl	40794c <__aeabi_cdcmpeq>
  407978:	bf34      	ite	cc
  40797a:	2001      	movcc	r0, #1
  40797c:	2000      	movcs	r0, #0
  40797e:	f85d fb08 	ldr.w	pc, [sp], #8
  407982:	bf00      	nop

00407984 <__aeabi_dcmple>:
  407984:	f84d ed08 	str.w	lr, [sp, #-8]!
  407988:	f7ff ffe0 	bl	40794c <__aeabi_cdcmpeq>
  40798c:	bf94      	ite	ls
  40798e:	2001      	movls	r0, #1
  407990:	2000      	movhi	r0, #0
  407992:	f85d fb08 	ldr.w	pc, [sp], #8
  407996:	bf00      	nop

00407998 <__aeabi_dcmpge>:
  407998:	f84d ed08 	str.w	lr, [sp, #-8]!
  40799c:	f7ff ffce 	bl	40793c <__aeabi_cdrcmple>
  4079a0:	bf94      	ite	ls
  4079a2:	2001      	movls	r0, #1
  4079a4:	2000      	movhi	r0, #0
  4079a6:	f85d fb08 	ldr.w	pc, [sp], #8
  4079aa:	bf00      	nop

004079ac <__aeabi_dcmpgt>:
  4079ac:	f84d ed08 	str.w	lr, [sp, #-8]!
  4079b0:	f7ff ffc4 	bl	40793c <__aeabi_cdrcmple>
  4079b4:	bf34      	ite	cc
  4079b6:	2001      	movcc	r0, #1
  4079b8:	2000      	movcs	r0, #0
  4079ba:	f85d fb08 	ldr.w	pc, [sp], #8
  4079be:	bf00      	nop

004079c0 <__aeabi_dcmpun>:
  4079c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4079c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4079c8:	d102      	bne.n	4079d0 <__aeabi_dcmpun+0x10>
  4079ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4079ce:	d10a      	bne.n	4079e6 <__aeabi_dcmpun+0x26>
  4079d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4079d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4079d8:	d102      	bne.n	4079e0 <__aeabi_dcmpun+0x20>
  4079da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4079de:	d102      	bne.n	4079e6 <__aeabi_dcmpun+0x26>
  4079e0:	f04f 0000 	mov.w	r0, #0
  4079e4:	4770      	bx	lr
  4079e6:	f04f 0001 	mov.w	r0, #1
  4079ea:	4770      	bx	lr

004079ec <__aeabi_d2iz>:
  4079ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4079f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4079f4:	d215      	bcs.n	407a22 <__aeabi_d2iz+0x36>
  4079f6:	d511      	bpl.n	407a1c <__aeabi_d2iz+0x30>
  4079f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4079fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407a00:	d912      	bls.n	407a28 <__aeabi_d2iz+0x3c>
  407a02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  407a06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  407a0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  407a0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407a12:	fa23 f002 	lsr.w	r0, r3, r2
  407a16:	bf18      	it	ne
  407a18:	4240      	negne	r0, r0
  407a1a:	4770      	bx	lr
  407a1c:	f04f 0000 	mov.w	r0, #0
  407a20:	4770      	bx	lr
  407a22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  407a26:	d105      	bne.n	407a34 <__aeabi_d2iz+0x48>
  407a28:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  407a2c:	bf08      	it	eq
  407a2e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407a32:	4770      	bx	lr
  407a34:	f04f 0000 	mov.w	r0, #0
  407a38:	4770      	bx	lr
  407a3a:	bf00      	nop

00407a3c <__aeabi_d2f>:
  407a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  407a44:	bf24      	itt	cs
  407a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  407a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  407a4e:	d90d      	bls.n	407a6c <__aeabi_d2f+0x30>
  407a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  407a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  407a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  407a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  407a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  407a64:	bf08      	it	eq
  407a66:	f020 0001 	biceq.w	r0, r0, #1
  407a6a:	4770      	bx	lr
  407a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  407a70:	d121      	bne.n	407ab6 <__aeabi_d2f+0x7a>
  407a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  407a76:	bfbc      	itt	lt
  407a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  407a7c:	4770      	bxlt	lr
  407a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
  407a86:	f1c2 0218 	rsb	r2, r2, #24
  407a8a:	f1c2 0c20 	rsb	ip, r2, #32
  407a8e:	fa10 f30c 	lsls.w	r3, r0, ip
  407a92:	fa20 f002 	lsr.w	r0, r0, r2
  407a96:	bf18      	it	ne
  407a98:	f040 0001 	orrne.w	r0, r0, #1
  407a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  407aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  407aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
  407aa8:	ea40 000c 	orr.w	r0, r0, ip
  407aac:	fa23 f302 	lsr.w	r3, r3, r2
  407ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
  407ab4:	e7cc      	b.n	407a50 <__aeabi_d2f+0x14>
  407ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
  407aba:	d107      	bne.n	407acc <__aeabi_d2f+0x90>
  407abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  407ac0:	bf1e      	ittt	ne
  407ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  407ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  407aca:	4770      	bxne	lr
  407acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  407ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  407ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  407ad8:	4770      	bx	lr
  407ada:	bf00      	nop

00407adc <__aeabi_frsub>:
  407adc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  407ae0:	e002      	b.n	407ae8 <__addsf3>
  407ae2:	bf00      	nop

00407ae4 <__aeabi_fsub>:
  407ae4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00407ae8 <__addsf3>:
  407ae8:	0042      	lsls	r2, r0, #1
  407aea:	bf1f      	itttt	ne
  407aec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  407af0:	ea92 0f03 	teqne	r2, r3
  407af4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  407af8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  407afc:	d06a      	beq.n	407bd4 <__addsf3+0xec>
  407afe:	ea4f 6212 	mov.w	r2, r2, lsr #24
  407b02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  407b06:	bfc1      	itttt	gt
  407b08:	18d2      	addgt	r2, r2, r3
  407b0a:	4041      	eorgt	r1, r0
  407b0c:	4048      	eorgt	r0, r1
  407b0e:	4041      	eorgt	r1, r0
  407b10:	bfb8      	it	lt
  407b12:	425b      	neglt	r3, r3
  407b14:	2b19      	cmp	r3, #25
  407b16:	bf88      	it	hi
  407b18:	4770      	bxhi	lr
  407b1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  407b1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  407b22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  407b26:	bf18      	it	ne
  407b28:	4240      	negne	r0, r0
  407b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407b2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  407b32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  407b36:	bf18      	it	ne
  407b38:	4249      	negne	r1, r1
  407b3a:	ea92 0f03 	teq	r2, r3
  407b3e:	d03f      	beq.n	407bc0 <__addsf3+0xd8>
  407b40:	f1a2 0201 	sub.w	r2, r2, #1
  407b44:	fa41 fc03 	asr.w	ip, r1, r3
  407b48:	eb10 000c 	adds.w	r0, r0, ip
  407b4c:	f1c3 0320 	rsb	r3, r3, #32
  407b50:	fa01 f103 	lsl.w	r1, r1, r3
  407b54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  407b58:	d502      	bpl.n	407b60 <__addsf3+0x78>
  407b5a:	4249      	negs	r1, r1
  407b5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  407b60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  407b64:	d313      	bcc.n	407b8e <__addsf3+0xa6>
  407b66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  407b6a:	d306      	bcc.n	407b7a <__addsf3+0x92>
  407b6c:	0840      	lsrs	r0, r0, #1
  407b6e:	ea4f 0131 	mov.w	r1, r1, rrx
  407b72:	f102 0201 	add.w	r2, r2, #1
  407b76:	2afe      	cmp	r2, #254	; 0xfe
  407b78:	d251      	bcs.n	407c1e <__addsf3+0x136>
  407b7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  407b7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  407b82:	bf08      	it	eq
  407b84:	f020 0001 	biceq.w	r0, r0, #1
  407b88:	ea40 0003 	orr.w	r0, r0, r3
  407b8c:	4770      	bx	lr
  407b8e:	0049      	lsls	r1, r1, #1
  407b90:	eb40 0000 	adc.w	r0, r0, r0
  407b94:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  407b98:	f1a2 0201 	sub.w	r2, r2, #1
  407b9c:	d1ed      	bne.n	407b7a <__addsf3+0x92>
  407b9e:	fab0 fc80 	clz	ip, r0
  407ba2:	f1ac 0c08 	sub.w	ip, ip, #8
  407ba6:	ebb2 020c 	subs.w	r2, r2, ip
  407baa:	fa00 f00c 	lsl.w	r0, r0, ip
  407bae:	bfaa      	itet	ge
  407bb0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  407bb4:	4252      	neglt	r2, r2
  407bb6:	4318      	orrge	r0, r3
  407bb8:	bfbc      	itt	lt
  407bba:	40d0      	lsrlt	r0, r2
  407bbc:	4318      	orrlt	r0, r3
  407bbe:	4770      	bx	lr
  407bc0:	f092 0f00 	teq	r2, #0
  407bc4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  407bc8:	bf06      	itte	eq
  407bca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  407bce:	3201      	addeq	r2, #1
  407bd0:	3b01      	subne	r3, #1
  407bd2:	e7b5      	b.n	407b40 <__addsf3+0x58>
  407bd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
  407bd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  407bdc:	bf18      	it	ne
  407bde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  407be2:	d021      	beq.n	407c28 <__addsf3+0x140>
  407be4:	ea92 0f03 	teq	r2, r3
  407be8:	d004      	beq.n	407bf4 <__addsf3+0x10c>
  407bea:	f092 0f00 	teq	r2, #0
  407bee:	bf08      	it	eq
  407bf0:	4608      	moveq	r0, r1
  407bf2:	4770      	bx	lr
  407bf4:	ea90 0f01 	teq	r0, r1
  407bf8:	bf1c      	itt	ne
  407bfa:	2000      	movne	r0, #0
  407bfc:	4770      	bxne	lr
  407bfe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  407c02:	d104      	bne.n	407c0e <__addsf3+0x126>
  407c04:	0040      	lsls	r0, r0, #1
  407c06:	bf28      	it	cs
  407c08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  407c0c:	4770      	bx	lr
  407c0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  407c12:	bf3c      	itt	cc
  407c14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  407c18:	4770      	bxcc	lr
  407c1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  407c1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  407c22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  407c26:	4770      	bx	lr
  407c28:	ea7f 6222 	mvns.w	r2, r2, asr #24
  407c2c:	bf16      	itet	ne
  407c2e:	4608      	movne	r0, r1
  407c30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  407c34:	4601      	movne	r1, r0
  407c36:	0242      	lsls	r2, r0, #9
  407c38:	bf06      	itte	eq
  407c3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  407c3e:	ea90 0f01 	teqeq	r0, r1
  407c42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  407c46:	4770      	bx	lr

00407c48 <__aeabi_ui2f>:
  407c48:	f04f 0300 	mov.w	r3, #0
  407c4c:	e004      	b.n	407c58 <__aeabi_i2f+0x8>
  407c4e:	bf00      	nop

00407c50 <__aeabi_i2f>:
  407c50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  407c54:	bf48      	it	mi
  407c56:	4240      	negmi	r0, r0
  407c58:	ea5f 0c00 	movs.w	ip, r0
  407c5c:	bf08      	it	eq
  407c5e:	4770      	bxeq	lr
  407c60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  407c64:	4601      	mov	r1, r0
  407c66:	f04f 0000 	mov.w	r0, #0
  407c6a:	e01c      	b.n	407ca6 <__aeabi_l2f+0x2a>

00407c6c <__aeabi_ul2f>:
  407c6c:	ea50 0201 	orrs.w	r2, r0, r1
  407c70:	bf08      	it	eq
  407c72:	4770      	bxeq	lr
  407c74:	f04f 0300 	mov.w	r3, #0
  407c78:	e00a      	b.n	407c90 <__aeabi_l2f+0x14>
  407c7a:	bf00      	nop

00407c7c <__aeabi_l2f>:
  407c7c:	ea50 0201 	orrs.w	r2, r0, r1
  407c80:	bf08      	it	eq
  407c82:	4770      	bxeq	lr
  407c84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  407c88:	d502      	bpl.n	407c90 <__aeabi_l2f+0x14>
  407c8a:	4240      	negs	r0, r0
  407c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407c90:	ea5f 0c01 	movs.w	ip, r1
  407c94:	bf02      	ittt	eq
  407c96:	4684      	moveq	ip, r0
  407c98:	4601      	moveq	r1, r0
  407c9a:	2000      	moveq	r0, #0
  407c9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  407ca0:	bf08      	it	eq
  407ca2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  407ca6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  407caa:	fabc f28c 	clz	r2, ip
  407cae:	3a08      	subs	r2, #8
  407cb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  407cb4:	db10      	blt.n	407cd8 <__aeabi_l2f+0x5c>
  407cb6:	fa01 fc02 	lsl.w	ip, r1, r2
  407cba:	4463      	add	r3, ip
  407cbc:	fa00 fc02 	lsl.w	ip, r0, r2
  407cc0:	f1c2 0220 	rsb	r2, r2, #32
  407cc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  407cc8:	fa20 f202 	lsr.w	r2, r0, r2
  407ccc:	eb43 0002 	adc.w	r0, r3, r2
  407cd0:	bf08      	it	eq
  407cd2:	f020 0001 	biceq.w	r0, r0, #1
  407cd6:	4770      	bx	lr
  407cd8:	f102 0220 	add.w	r2, r2, #32
  407cdc:	fa01 fc02 	lsl.w	ip, r1, r2
  407ce0:	f1c2 0220 	rsb	r2, r2, #32
  407ce4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  407ce8:	fa21 f202 	lsr.w	r2, r1, r2
  407cec:	eb43 0002 	adc.w	r0, r3, r2
  407cf0:	bf08      	it	eq
  407cf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  407cf6:	4770      	bx	lr

00407cf8 <__aeabi_fmul>:
  407cf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407cfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  407d00:	bf1e      	ittt	ne
  407d02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  407d06:	ea92 0f0c 	teqne	r2, ip
  407d0a:	ea93 0f0c 	teqne	r3, ip
  407d0e:	d06f      	beq.n	407df0 <__aeabi_fmul+0xf8>
  407d10:	441a      	add	r2, r3
  407d12:	ea80 0c01 	eor.w	ip, r0, r1
  407d16:	0240      	lsls	r0, r0, #9
  407d18:	bf18      	it	ne
  407d1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  407d1e:	d01e      	beq.n	407d5e <__aeabi_fmul+0x66>
  407d20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  407d24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  407d28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  407d2c:	fba0 3101 	umull	r3, r1, r0, r1
  407d30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  407d34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  407d38:	bf3e      	ittt	cc
  407d3a:	0049      	lslcc	r1, r1, #1
  407d3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  407d40:	005b      	lslcc	r3, r3, #1
  407d42:	ea40 0001 	orr.w	r0, r0, r1
  407d46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  407d4a:	2afd      	cmp	r2, #253	; 0xfd
  407d4c:	d81d      	bhi.n	407d8a <__aeabi_fmul+0x92>
  407d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  407d52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  407d56:	bf08      	it	eq
  407d58:	f020 0001 	biceq.w	r0, r0, #1
  407d5c:	4770      	bx	lr
  407d5e:	f090 0f00 	teq	r0, #0
  407d62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  407d66:	bf08      	it	eq
  407d68:	0249      	lsleq	r1, r1, #9
  407d6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  407d6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  407d72:	3a7f      	subs	r2, #127	; 0x7f
  407d74:	bfc2      	ittt	gt
  407d76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  407d7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  407d7e:	4770      	bxgt	lr
  407d80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  407d84:	f04f 0300 	mov.w	r3, #0
  407d88:	3a01      	subs	r2, #1
  407d8a:	dc5d      	bgt.n	407e48 <__aeabi_fmul+0x150>
  407d8c:	f112 0f19 	cmn.w	r2, #25
  407d90:	bfdc      	itt	le
  407d92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  407d96:	4770      	bxle	lr
  407d98:	f1c2 0200 	rsb	r2, r2, #0
  407d9c:	0041      	lsls	r1, r0, #1
  407d9e:	fa21 f102 	lsr.w	r1, r1, r2
  407da2:	f1c2 0220 	rsb	r2, r2, #32
  407da6:	fa00 fc02 	lsl.w	ip, r0, r2
  407daa:	ea5f 0031 	movs.w	r0, r1, rrx
  407dae:	f140 0000 	adc.w	r0, r0, #0
  407db2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  407db6:	bf08      	it	eq
  407db8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  407dbc:	4770      	bx	lr
  407dbe:	f092 0f00 	teq	r2, #0
  407dc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  407dc6:	bf02      	ittt	eq
  407dc8:	0040      	lsleq	r0, r0, #1
  407dca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  407dce:	3a01      	subeq	r2, #1
  407dd0:	d0f9      	beq.n	407dc6 <__aeabi_fmul+0xce>
  407dd2:	ea40 000c 	orr.w	r0, r0, ip
  407dd6:	f093 0f00 	teq	r3, #0
  407dda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  407dde:	bf02      	ittt	eq
  407de0:	0049      	lsleq	r1, r1, #1
  407de2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  407de6:	3b01      	subeq	r3, #1
  407de8:	d0f9      	beq.n	407dde <__aeabi_fmul+0xe6>
  407dea:	ea41 010c 	orr.w	r1, r1, ip
  407dee:	e78f      	b.n	407d10 <__aeabi_fmul+0x18>
  407df0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  407df4:	ea92 0f0c 	teq	r2, ip
  407df8:	bf18      	it	ne
  407dfa:	ea93 0f0c 	teqne	r3, ip
  407dfe:	d00a      	beq.n	407e16 <__aeabi_fmul+0x11e>
  407e00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  407e04:	bf18      	it	ne
  407e06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  407e0a:	d1d8      	bne.n	407dbe <__aeabi_fmul+0xc6>
  407e0c:	ea80 0001 	eor.w	r0, r0, r1
  407e10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  407e14:	4770      	bx	lr
  407e16:	f090 0f00 	teq	r0, #0
  407e1a:	bf17      	itett	ne
  407e1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  407e20:	4608      	moveq	r0, r1
  407e22:	f091 0f00 	teqne	r1, #0
  407e26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  407e2a:	d014      	beq.n	407e56 <__aeabi_fmul+0x15e>
  407e2c:	ea92 0f0c 	teq	r2, ip
  407e30:	d101      	bne.n	407e36 <__aeabi_fmul+0x13e>
  407e32:	0242      	lsls	r2, r0, #9
  407e34:	d10f      	bne.n	407e56 <__aeabi_fmul+0x15e>
  407e36:	ea93 0f0c 	teq	r3, ip
  407e3a:	d103      	bne.n	407e44 <__aeabi_fmul+0x14c>
  407e3c:	024b      	lsls	r3, r1, #9
  407e3e:	bf18      	it	ne
  407e40:	4608      	movne	r0, r1
  407e42:	d108      	bne.n	407e56 <__aeabi_fmul+0x15e>
  407e44:	ea80 0001 	eor.w	r0, r0, r1
  407e48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  407e4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  407e50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  407e54:	4770      	bx	lr
  407e56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  407e5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  407e5e:	4770      	bx	lr

00407e60 <__aeabi_fdiv>:
  407e60:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407e64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  407e68:	bf1e      	ittt	ne
  407e6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  407e6e:	ea92 0f0c 	teqne	r2, ip
  407e72:	ea93 0f0c 	teqne	r3, ip
  407e76:	d069      	beq.n	407f4c <__aeabi_fdiv+0xec>
  407e78:	eba2 0203 	sub.w	r2, r2, r3
  407e7c:	ea80 0c01 	eor.w	ip, r0, r1
  407e80:	0249      	lsls	r1, r1, #9
  407e82:	ea4f 2040 	mov.w	r0, r0, lsl #9
  407e86:	d037      	beq.n	407ef8 <__aeabi_fdiv+0x98>
  407e88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  407e8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  407e90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  407e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  407e98:	428b      	cmp	r3, r1
  407e9a:	bf38      	it	cc
  407e9c:	005b      	lslcc	r3, r3, #1
  407e9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  407ea2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  407ea6:	428b      	cmp	r3, r1
  407ea8:	bf24      	itt	cs
  407eaa:	1a5b      	subcs	r3, r3, r1
  407eac:	ea40 000c 	orrcs.w	r0, r0, ip
  407eb0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  407eb4:	bf24      	itt	cs
  407eb6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  407eba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  407ebe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  407ec2:	bf24      	itt	cs
  407ec4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  407ec8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  407ecc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  407ed0:	bf24      	itt	cs
  407ed2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  407ed6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  407eda:	011b      	lsls	r3, r3, #4
  407edc:	bf18      	it	ne
  407ede:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  407ee2:	d1e0      	bne.n	407ea6 <__aeabi_fdiv+0x46>
  407ee4:	2afd      	cmp	r2, #253	; 0xfd
  407ee6:	f63f af50 	bhi.w	407d8a <__aeabi_fmul+0x92>
  407eea:	428b      	cmp	r3, r1
  407eec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  407ef0:	bf08      	it	eq
  407ef2:	f020 0001 	biceq.w	r0, r0, #1
  407ef6:	4770      	bx	lr
  407ef8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  407efc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  407f00:	327f      	adds	r2, #127	; 0x7f
  407f02:	bfc2      	ittt	gt
  407f04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  407f08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  407f0c:	4770      	bxgt	lr
  407f0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  407f12:	f04f 0300 	mov.w	r3, #0
  407f16:	3a01      	subs	r2, #1
  407f18:	e737      	b.n	407d8a <__aeabi_fmul+0x92>
  407f1a:	f092 0f00 	teq	r2, #0
  407f1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  407f22:	bf02      	ittt	eq
  407f24:	0040      	lsleq	r0, r0, #1
  407f26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  407f2a:	3a01      	subeq	r2, #1
  407f2c:	d0f9      	beq.n	407f22 <__aeabi_fdiv+0xc2>
  407f2e:	ea40 000c 	orr.w	r0, r0, ip
  407f32:	f093 0f00 	teq	r3, #0
  407f36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  407f3a:	bf02      	ittt	eq
  407f3c:	0049      	lsleq	r1, r1, #1
  407f3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  407f42:	3b01      	subeq	r3, #1
  407f44:	d0f9      	beq.n	407f3a <__aeabi_fdiv+0xda>
  407f46:	ea41 010c 	orr.w	r1, r1, ip
  407f4a:	e795      	b.n	407e78 <__aeabi_fdiv+0x18>
  407f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  407f50:	ea92 0f0c 	teq	r2, ip
  407f54:	d108      	bne.n	407f68 <__aeabi_fdiv+0x108>
  407f56:	0242      	lsls	r2, r0, #9
  407f58:	f47f af7d 	bne.w	407e56 <__aeabi_fmul+0x15e>
  407f5c:	ea93 0f0c 	teq	r3, ip
  407f60:	f47f af70 	bne.w	407e44 <__aeabi_fmul+0x14c>
  407f64:	4608      	mov	r0, r1
  407f66:	e776      	b.n	407e56 <__aeabi_fmul+0x15e>
  407f68:	ea93 0f0c 	teq	r3, ip
  407f6c:	d104      	bne.n	407f78 <__aeabi_fdiv+0x118>
  407f6e:	024b      	lsls	r3, r1, #9
  407f70:	f43f af4c 	beq.w	407e0c <__aeabi_fmul+0x114>
  407f74:	4608      	mov	r0, r1
  407f76:	e76e      	b.n	407e56 <__aeabi_fmul+0x15e>
  407f78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  407f7c:	bf18      	it	ne
  407f7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  407f82:	d1ca      	bne.n	407f1a <__aeabi_fdiv+0xba>
  407f84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  407f88:	f47f af5c 	bne.w	407e44 <__aeabi_fmul+0x14c>
  407f8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  407f90:	f47f af3c 	bne.w	407e0c <__aeabi_fmul+0x114>
  407f94:	e75f      	b.n	407e56 <__aeabi_fmul+0x15e>
  407f96:	bf00      	nop

00407f98 <__gesf2>:
  407f98:	f04f 3cff 	mov.w	ip, #4294967295
  407f9c:	e006      	b.n	407fac <__cmpsf2+0x4>
  407f9e:	bf00      	nop

00407fa0 <__lesf2>:
  407fa0:	f04f 0c01 	mov.w	ip, #1
  407fa4:	e002      	b.n	407fac <__cmpsf2+0x4>
  407fa6:	bf00      	nop

00407fa8 <__cmpsf2>:
  407fa8:	f04f 0c01 	mov.w	ip, #1
  407fac:	f84d cd04 	str.w	ip, [sp, #-4]!
  407fb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
  407fb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
  407fb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  407fbc:	bf18      	it	ne
  407fbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  407fc2:	d011      	beq.n	407fe8 <__cmpsf2+0x40>
  407fc4:	b001      	add	sp, #4
  407fc6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  407fca:	bf18      	it	ne
  407fcc:	ea90 0f01 	teqne	r0, r1
  407fd0:	bf58      	it	pl
  407fd2:	ebb2 0003 	subspl.w	r0, r2, r3
  407fd6:	bf88      	it	hi
  407fd8:	17c8      	asrhi	r0, r1, #31
  407fda:	bf38      	it	cc
  407fdc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  407fe0:	bf18      	it	ne
  407fe2:	f040 0001 	orrne.w	r0, r0, #1
  407fe6:	4770      	bx	lr
  407fe8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  407fec:	d102      	bne.n	407ff4 <__cmpsf2+0x4c>
  407fee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  407ff2:	d105      	bne.n	408000 <__cmpsf2+0x58>
  407ff4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  407ff8:	d1e4      	bne.n	407fc4 <__cmpsf2+0x1c>
  407ffa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  407ffe:	d0e1      	beq.n	407fc4 <__cmpsf2+0x1c>
  408000:	f85d 0b04 	ldr.w	r0, [sp], #4
  408004:	4770      	bx	lr
  408006:	bf00      	nop

00408008 <__aeabi_cfrcmple>:
  408008:	4684      	mov	ip, r0
  40800a:	4608      	mov	r0, r1
  40800c:	4661      	mov	r1, ip
  40800e:	e7ff      	b.n	408010 <__aeabi_cfcmpeq>

00408010 <__aeabi_cfcmpeq>:
  408010:	b50f      	push	{r0, r1, r2, r3, lr}
  408012:	f7ff ffc9 	bl	407fa8 <__cmpsf2>
  408016:	2800      	cmp	r0, #0
  408018:	bf48      	it	mi
  40801a:	f110 0f00 	cmnmi.w	r0, #0
  40801e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00408020 <__aeabi_fcmpeq>:
  408020:	f84d ed08 	str.w	lr, [sp, #-8]!
  408024:	f7ff fff4 	bl	408010 <__aeabi_cfcmpeq>
  408028:	bf0c      	ite	eq
  40802a:	2001      	moveq	r0, #1
  40802c:	2000      	movne	r0, #0
  40802e:	f85d fb08 	ldr.w	pc, [sp], #8
  408032:	bf00      	nop

00408034 <__aeabi_fcmplt>:
  408034:	f84d ed08 	str.w	lr, [sp, #-8]!
  408038:	f7ff ffea 	bl	408010 <__aeabi_cfcmpeq>
  40803c:	bf34      	ite	cc
  40803e:	2001      	movcc	r0, #1
  408040:	2000      	movcs	r0, #0
  408042:	f85d fb08 	ldr.w	pc, [sp], #8
  408046:	bf00      	nop

00408048 <__aeabi_fcmple>:
  408048:	f84d ed08 	str.w	lr, [sp, #-8]!
  40804c:	f7ff ffe0 	bl	408010 <__aeabi_cfcmpeq>
  408050:	bf94      	ite	ls
  408052:	2001      	movls	r0, #1
  408054:	2000      	movhi	r0, #0
  408056:	f85d fb08 	ldr.w	pc, [sp], #8
  40805a:	bf00      	nop

0040805c <__aeabi_fcmpge>:
  40805c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408060:	f7ff ffd2 	bl	408008 <__aeabi_cfrcmple>
  408064:	bf94      	ite	ls
  408066:	2001      	movls	r0, #1
  408068:	2000      	movhi	r0, #0
  40806a:	f85d fb08 	ldr.w	pc, [sp], #8
  40806e:	bf00      	nop

00408070 <__aeabi_fcmpgt>:
  408070:	f84d ed08 	str.w	lr, [sp, #-8]!
  408074:	f7ff ffc8 	bl	408008 <__aeabi_cfrcmple>
  408078:	bf34      	ite	cc
  40807a:	2001      	movcc	r0, #1
  40807c:	2000      	movcs	r0, #0
  40807e:	f85d fb08 	ldr.w	pc, [sp], #8
  408082:	bf00      	nop

00408084 <__aeabi_f2iz>:
  408084:	ea4f 0240 	mov.w	r2, r0, lsl #1
  408088:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  40808c:	d30f      	bcc.n	4080ae <__aeabi_f2iz+0x2a>
  40808e:	f04f 039e 	mov.w	r3, #158	; 0x9e
  408092:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  408096:	d90d      	bls.n	4080b4 <__aeabi_f2iz+0x30>
  408098:	ea4f 2300 	mov.w	r3, r0, lsl #8
  40809c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4080a0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  4080a4:	fa23 f002 	lsr.w	r0, r3, r2
  4080a8:	bf18      	it	ne
  4080aa:	4240      	negne	r0, r0
  4080ac:	4770      	bx	lr
  4080ae:	f04f 0000 	mov.w	r0, #0
  4080b2:	4770      	bx	lr
  4080b4:	f112 0f61 	cmn.w	r2, #97	; 0x61
  4080b8:	d101      	bne.n	4080be <__aeabi_f2iz+0x3a>
  4080ba:	0242      	lsls	r2, r0, #9
  4080bc:	d105      	bne.n	4080ca <__aeabi_f2iz+0x46>
  4080be:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  4080c2:	bf08      	it	eq
  4080c4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4080c8:	4770      	bx	lr
  4080ca:	f04f 0000 	mov.w	r0, #0
  4080ce:	4770      	bx	lr

004080d0 <__errno>:
  4080d0:	4b01      	ldr	r3, [pc, #4]	; (4080d8 <__errno+0x8>)
  4080d2:	6818      	ldr	r0, [r3, #0]
  4080d4:	4770      	bx	lr
  4080d6:	bf00      	nop
  4080d8:	200004f0 	.word	0x200004f0

004080dc <__libc_init_array>:
  4080dc:	b570      	push	{r4, r5, r6, lr}
  4080de:	4e0f      	ldr	r6, [pc, #60]	; (40811c <__libc_init_array+0x40>)
  4080e0:	4d0f      	ldr	r5, [pc, #60]	; (408120 <__libc_init_array+0x44>)
  4080e2:	1b76      	subs	r6, r6, r5
  4080e4:	10b6      	asrs	r6, r6, #2
  4080e6:	bf18      	it	ne
  4080e8:	2400      	movne	r4, #0
  4080ea:	d005      	beq.n	4080f8 <__libc_init_array+0x1c>
  4080ec:	3401      	adds	r4, #1
  4080ee:	f855 3b04 	ldr.w	r3, [r5], #4
  4080f2:	4798      	blx	r3
  4080f4:	42a6      	cmp	r6, r4
  4080f6:	d1f9      	bne.n	4080ec <__libc_init_array+0x10>
  4080f8:	4e0a      	ldr	r6, [pc, #40]	; (408124 <__libc_init_array+0x48>)
  4080fa:	4d0b      	ldr	r5, [pc, #44]	; (408128 <__libc_init_array+0x4c>)
  4080fc:	1b76      	subs	r6, r6, r5
  4080fe:	f000 fb3f 	bl	408780 <_init>
  408102:	10b6      	asrs	r6, r6, #2
  408104:	bf18      	it	ne
  408106:	2400      	movne	r4, #0
  408108:	d006      	beq.n	408118 <__libc_init_array+0x3c>
  40810a:	3401      	adds	r4, #1
  40810c:	f855 3b04 	ldr.w	r3, [r5], #4
  408110:	4798      	blx	r3
  408112:	42a6      	cmp	r6, r4
  408114:	d1f9      	bne.n	40810a <__libc_init_array+0x2e>
  408116:	bd70      	pop	{r4, r5, r6, pc}
  408118:	bd70      	pop	{r4, r5, r6, pc}
  40811a:	bf00      	nop
  40811c:	0040878c 	.word	0x0040878c
  408120:	0040878c 	.word	0x0040878c
  408124:	00408794 	.word	0x00408794
  408128:	0040878c 	.word	0x0040878c

0040812c <memcmp>:
  40812c:	2a03      	cmp	r2, #3
  40812e:	b470      	push	{r4, r5, r6}
  408130:	d926      	bls.n	408180 <memcmp+0x54>
  408132:	ea40 0301 	orr.w	r3, r0, r1
  408136:	079b      	lsls	r3, r3, #30
  408138:	d011      	beq.n	40815e <memcmp+0x32>
  40813a:	7804      	ldrb	r4, [r0, #0]
  40813c:	780d      	ldrb	r5, [r1, #0]
  40813e:	42ac      	cmp	r4, r5
  408140:	d122      	bne.n	408188 <memcmp+0x5c>
  408142:	4402      	add	r2, r0
  408144:	1c43      	adds	r3, r0, #1
  408146:	e005      	b.n	408154 <memcmp+0x28>
  408148:	f813 4b01 	ldrb.w	r4, [r3], #1
  40814c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  408150:	42ac      	cmp	r4, r5
  408152:	d119      	bne.n	408188 <memcmp+0x5c>
  408154:	4293      	cmp	r3, r2
  408156:	d1f7      	bne.n	408148 <memcmp+0x1c>
  408158:	2000      	movs	r0, #0
  40815a:	bc70      	pop	{r4, r5, r6}
  40815c:	4770      	bx	lr
  40815e:	460c      	mov	r4, r1
  408160:	4603      	mov	r3, r0
  408162:	681e      	ldr	r6, [r3, #0]
  408164:	6825      	ldr	r5, [r4, #0]
  408166:	42ae      	cmp	r6, r5
  408168:	4618      	mov	r0, r3
  40816a:	4621      	mov	r1, r4
  40816c:	f103 0304 	add.w	r3, r3, #4
  408170:	f104 0404 	add.w	r4, r4, #4
  408174:	d1e1      	bne.n	40813a <memcmp+0xe>
  408176:	3a04      	subs	r2, #4
  408178:	2a03      	cmp	r2, #3
  40817a:	4618      	mov	r0, r3
  40817c:	4621      	mov	r1, r4
  40817e:	d8f0      	bhi.n	408162 <memcmp+0x36>
  408180:	2a00      	cmp	r2, #0
  408182:	d1da      	bne.n	40813a <memcmp+0xe>
  408184:	4610      	mov	r0, r2
  408186:	e7e8      	b.n	40815a <memcmp+0x2e>
  408188:	1b60      	subs	r0, r4, r5
  40818a:	bc70      	pop	{r4, r5, r6}
  40818c:	4770      	bx	lr
  40818e:	bf00      	nop

00408190 <memcpy>:
  408190:	4684      	mov	ip, r0
  408192:	ea41 0300 	orr.w	r3, r1, r0
  408196:	f013 0303 	ands.w	r3, r3, #3
  40819a:	d16d      	bne.n	408278 <memcpy+0xe8>
  40819c:	3a40      	subs	r2, #64	; 0x40
  40819e:	d341      	bcc.n	408224 <memcpy+0x94>
  4081a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4081a4:	f840 3b04 	str.w	r3, [r0], #4
  4081a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4081ac:	f840 3b04 	str.w	r3, [r0], #4
  4081b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4081b4:	f840 3b04 	str.w	r3, [r0], #4
  4081b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4081bc:	f840 3b04 	str.w	r3, [r0], #4
  4081c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4081c4:	f840 3b04 	str.w	r3, [r0], #4
  4081c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4081cc:	f840 3b04 	str.w	r3, [r0], #4
  4081d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4081d4:	f840 3b04 	str.w	r3, [r0], #4
  4081d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4081dc:	f840 3b04 	str.w	r3, [r0], #4
  4081e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4081e4:	f840 3b04 	str.w	r3, [r0], #4
  4081e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4081ec:	f840 3b04 	str.w	r3, [r0], #4
  4081f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4081f4:	f840 3b04 	str.w	r3, [r0], #4
  4081f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4081fc:	f840 3b04 	str.w	r3, [r0], #4
  408200:	f851 3b04 	ldr.w	r3, [r1], #4
  408204:	f840 3b04 	str.w	r3, [r0], #4
  408208:	f851 3b04 	ldr.w	r3, [r1], #4
  40820c:	f840 3b04 	str.w	r3, [r0], #4
  408210:	f851 3b04 	ldr.w	r3, [r1], #4
  408214:	f840 3b04 	str.w	r3, [r0], #4
  408218:	f851 3b04 	ldr.w	r3, [r1], #4
  40821c:	f840 3b04 	str.w	r3, [r0], #4
  408220:	3a40      	subs	r2, #64	; 0x40
  408222:	d2bd      	bcs.n	4081a0 <memcpy+0x10>
  408224:	3230      	adds	r2, #48	; 0x30
  408226:	d311      	bcc.n	40824c <memcpy+0xbc>
  408228:	f851 3b04 	ldr.w	r3, [r1], #4
  40822c:	f840 3b04 	str.w	r3, [r0], #4
  408230:	f851 3b04 	ldr.w	r3, [r1], #4
  408234:	f840 3b04 	str.w	r3, [r0], #4
  408238:	f851 3b04 	ldr.w	r3, [r1], #4
  40823c:	f840 3b04 	str.w	r3, [r0], #4
  408240:	f851 3b04 	ldr.w	r3, [r1], #4
  408244:	f840 3b04 	str.w	r3, [r0], #4
  408248:	3a10      	subs	r2, #16
  40824a:	d2ed      	bcs.n	408228 <memcpy+0x98>
  40824c:	320c      	adds	r2, #12
  40824e:	d305      	bcc.n	40825c <memcpy+0xcc>
  408250:	f851 3b04 	ldr.w	r3, [r1], #4
  408254:	f840 3b04 	str.w	r3, [r0], #4
  408258:	3a04      	subs	r2, #4
  40825a:	d2f9      	bcs.n	408250 <memcpy+0xc0>
  40825c:	3204      	adds	r2, #4
  40825e:	d008      	beq.n	408272 <memcpy+0xe2>
  408260:	07d2      	lsls	r2, r2, #31
  408262:	bf1c      	itt	ne
  408264:	f811 3b01 	ldrbne.w	r3, [r1], #1
  408268:	f800 3b01 	strbne.w	r3, [r0], #1
  40826c:	d301      	bcc.n	408272 <memcpy+0xe2>
  40826e:	880b      	ldrh	r3, [r1, #0]
  408270:	8003      	strh	r3, [r0, #0]
  408272:	4660      	mov	r0, ip
  408274:	4770      	bx	lr
  408276:	bf00      	nop
  408278:	2a08      	cmp	r2, #8
  40827a:	d313      	bcc.n	4082a4 <memcpy+0x114>
  40827c:	078b      	lsls	r3, r1, #30
  40827e:	d08d      	beq.n	40819c <memcpy+0xc>
  408280:	f010 0303 	ands.w	r3, r0, #3
  408284:	d08a      	beq.n	40819c <memcpy+0xc>
  408286:	f1c3 0304 	rsb	r3, r3, #4
  40828a:	1ad2      	subs	r2, r2, r3
  40828c:	07db      	lsls	r3, r3, #31
  40828e:	bf1c      	itt	ne
  408290:	f811 3b01 	ldrbne.w	r3, [r1], #1
  408294:	f800 3b01 	strbne.w	r3, [r0], #1
  408298:	d380      	bcc.n	40819c <memcpy+0xc>
  40829a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40829e:	f820 3b02 	strh.w	r3, [r0], #2
  4082a2:	e77b      	b.n	40819c <memcpy+0xc>
  4082a4:	3a04      	subs	r2, #4
  4082a6:	d3d9      	bcc.n	40825c <memcpy+0xcc>
  4082a8:	3a01      	subs	r2, #1
  4082aa:	f811 3b01 	ldrb.w	r3, [r1], #1
  4082ae:	f800 3b01 	strb.w	r3, [r0], #1
  4082b2:	d2f9      	bcs.n	4082a8 <memcpy+0x118>
  4082b4:	780b      	ldrb	r3, [r1, #0]
  4082b6:	7003      	strb	r3, [r0, #0]
  4082b8:	784b      	ldrb	r3, [r1, #1]
  4082ba:	7043      	strb	r3, [r0, #1]
  4082bc:	788b      	ldrb	r3, [r1, #2]
  4082be:	7083      	strb	r3, [r0, #2]
  4082c0:	4660      	mov	r0, ip
  4082c2:	4770      	bx	lr

004082c4 <memset>:
  4082c4:	b470      	push	{r4, r5, r6}
  4082c6:	0784      	lsls	r4, r0, #30
  4082c8:	d046      	beq.n	408358 <memset+0x94>
  4082ca:	1e54      	subs	r4, r2, #1
  4082cc:	2a00      	cmp	r2, #0
  4082ce:	d041      	beq.n	408354 <memset+0x90>
  4082d0:	b2cd      	uxtb	r5, r1
  4082d2:	4603      	mov	r3, r0
  4082d4:	e002      	b.n	4082dc <memset+0x18>
  4082d6:	1e62      	subs	r2, r4, #1
  4082d8:	b3e4      	cbz	r4, 408354 <memset+0x90>
  4082da:	4614      	mov	r4, r2
  4082dc:	f803 5b01 	strb.w	r5, [r3], #1
  4082e0:	079a      	lsls	r2, r3, #30
  4082e2:	d1f8      	bne.n	4082d6 <memset+0x12>
  4082e4:	2c03      	cmp	r4, #3
  4082e6:	d92e      	bls.n	408346 <memset+0x82>
  4082e8:	b2cd      	uxtb	r5, r1
  4082ea:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4082ee:	2c0f      	cmp	r4, #15
  4082f0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4082f4:	d919      	bls.n	40832a <memset+0x66>
  4082f6:	f103 0210 	add.w	r2, r3, #16
  4082fa:	4626      	mov	r6, r4
  4082fc:	3e10      	subs	r6, #16
  4082fe:	2e0f      	cmp	r6, #15
  408300:	f842 5c10 	str.w	r5, [r2, #-16]
  408304:	f842 5c0c 	str.w	r5, [r2, #-12]
  408308:	f842 5c08 	str.w	r5, [r2, #-8]
  40830c:	f842 5c04 	str.w	r5, [r2, #-4]
  408310:	f102 0210 	add.w	r2, r2, #16
  408314:	d8f2      	bhi.n	4082fc <memset+0x38>
  408316:	f1a4 0210 	sub.w	r2, r4, #16
  40831a:	f022 020f 	bic.w	r2, r2, #15
  40831e:	f004 040f 	and.w	r4, r4, #15
  408322:	3210      	adds	r2, #16
  408324:	2c03      	cmp	r4, #3
  408326:	4413      	add	r3, r2
  408328:	d90d      	bls.n	408346 <memset+0x82>
  40832a:	461e      	mov	r6, r3
  40832c:	4622      	mov	r2, r4
  40832e:	3a04      	subs	r2, #4
  408330:	2a03      	cmp	r2, #3
  408332:	f846 5b04 	str.w	r5, [r6], #4
  408336:	d8fa      	bhi.n	40832e <memset+0x6a>
  408338:	1f22      	subs	r2, r4, #4
  40833a:	f022 0203 	bic.w	r2, r2, #3
  40833e:	3204      	adds	r2, #4
  408340:	4413      	add	r3, r2
  408342:	f004 0403 	and.w	r4, r4, #3
  408346:	b12c      	cbz	r4, 408354 <memset+0x90>
  408348:	b2c9      	uxtb	r1, r1
  40834a:	441c      	add	r4, r3
  40834c:	f803 1b01 	strb.w	r1, [r3], #1
  408350:	42a3      	cmp	r3, r4
  408352:	d1fb      	bne.n	40834c <memset+0x88>
  408354:	bc70      	pop	{r4, r5, r6}
  408356:	4770      	bx	lr
  408358:	4614      	mov	r4, r2
  40835a:	4603      	mov	r3, r0
  40835c:	e7c2      	b.n	4082e4 <memset+0x20>
  40835e:	bf00      	nop

00408360 <strncpy>:
  408360:	ea40 0301 	orr.w	r3, r0, r1
  408364:	079b      	lsls	r3, r3, #30
  408366:	b470      	push	{r4, r5, r6}
  408368:	d12b      	bne.n	4083c2 <strncpy+0x62>
  40836a:	2a03      	cmp	r2, #3
  40836c:	d929      	bls.n	4083c2 <strncpy+0x62>
  40836e:	460c      	mov	r4, r1
  408370:	4603      	mov	r3, r0
  408372:	4621      	mov	r1, r4
  408374:	f854 6b04 	ldr.w	r6, [r4], #4
  408378:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
  40837c:	ea25 0506 	bic.w	r5, r5, r6
  408380:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
  408384:	d106      	bne.n	408394 <strncpy+0x34>
  408386:	3a04      	subs	r2, #4
  408388:	2a03      	cmp	r2, #3
  40838a:	f843 6b04 	str.w	r6, [r3], #4
  40838e:	4621      	mov	r1, r4
  408390:	d8ef      	bhi.n	408372 <strncpy+0x12>
  408392:	b1a2      	cbz	r2, 4083be <strncpy+0x5e>
  408394:	780c      	ldrb	r4, [r1, #0]
  408396:	701c      	strb	r4, [r3, #0]
  408398:	3a01      	subs	r2, #1
  40839a:	3301      	adds	r3, #1
  40839c:	3101      	adds	r1, #1
  40839e:	b13c      	cbz	r4, 4083b0 <strncpy+0x50>
  4083a0:	b16a      	cbz	r2, 4083be <strncpy+0x5e>
  4083a2:	f811 4b01 	ldrb.w	r4, [r1], #1
  4083a6:	f803 4b01 	strb.w	r4, [r3], #1
  4083aa:	3a01      	subs	r2, #1
  4083ac:	2c00      	cmp	r4, #0
  4083ae:	d1f7      	bne.n	4083a0 <strncpy+0x40>
  4083b0:	b12a      	cbz	r2, 4083be <strncpy+0x5e>
  4083b2:	441a      	add	r2, r3
  4083b4:	2100      	movs	r1, #0
  4083b6:	f803 1b01 	strb.w	r1, [r3], #1
  4083ba:	429a      	cmp	r2, r3
  4083bc:	d1fb      	bne.n	4083b6 <strncpy+0x56>
  4083be:	bc70      	pop	{r4, r5, r6}
  4083c0:	4770      	bx	lr
  4083c2:	4603      	mov	r3, r0
  4083c4:	e7e5      	b.n	408392 <strncpy+0x32>
  4083c6:	bf00      	nop

004083c8 <register_fini>:
  4083c8:	4b02      	ldr	r3, [pc, #8]	; (4083d4 <register_fini+0xc>)
  4083ca:	b113      	cbz	r3, 4083d2 <register_fini+0xa>
  4083cc:	4802      	ldr	r0, [pc, #8]	; (4083d8 <register_fini+0x10>)
  4083ce:	f000 b805 	b.w	4083dc <atexit>
  4083d2:	4770      	bx	lr
  4083d4:	00000000 	.word	0x00000000
  4083d8:	004083e9 	.word	0x004083e9

004083dc <atexit>:
  4083dc:	2300      	movs	r3, #0
  4083de:	4601      	mov	r1, r0
  4083e0:	461a      	mov	r2, r3
  4083e2:	4618      	mov	r0, r3
  4083e4:	f000 b814 	b.w	408410 <__register_exitproc>

004083e8 <__libc_fini_array>:
  4083e8:	b538      	push	{r3, r4, r5, lr}
  4083ea:	4d07      	ldr	r5, [pc, #28]	; (408408 <__libc_fini_array+0x20>)
  4083ec:	4c07      	ldr	r4, [pc, #28]	; (40840c <__libc_fini_array+0x24>)
  4083ee:	1b2c      	subs	r4, r5, r4
  4083f0:	10a4      	asrs	r4, r4, #2
  4083f2:	d005      	beq.n	408400 <__libc_fini_array+0x18>
  4083f4:	3c01      	subs	r4, #1
  4083f6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4083fa:	4798      	blx	r3
  4083fc:	2c00      	cmp	r4, #0
  4083fe:	d1f9      	bne.n	4083f4 <__libc_fini_array+0xc>
  408400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  408404:	f000 b9c6 	b.w	408794 <_fini>
  408408:	004087a4 	.word	0x004087a4
  40840c:	004087a0 	.word	0x004087a0

00408410 <__register_exitproc>:
  408410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408414:	4c25      	ldr	r4, [pc, #148]	; (4084ac <__register_exitproc+0x9c>)
  408416:	6825      	ldr	r5, [r4, #0]
  408418:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40841c:	4606      	mov	r6, r0
  40841e:	4688      	mov	r8, r1
  408420:	4692      	mov	sl, r2
  408422:	4699      	mov	r9, r3
  408424:	b3c4      	cbz	r4, 408498 <__register_exitproc+0x88>
  408426:	6860      	ldr	r0, [r4, #4]
  408428:	281f      	cmp	r0, #31
  40842a:	dc17      	bgt.n	40845c <__register_exitproc+0x4c>
  40842c:	1c43      	adds	r3, r0, #1
  40842e:	b176      	cbz	r6, 40844e <__register_exitproc+0x3e>
  408430:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  408434:	2201      	movs	r2, #1
  408436:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40843a:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40843e:	4082      	lsls	r2, r0
  408440:	4311      	orrs	r1, r2
  408442:	2e02      	cmp	r6, #2
  408444:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  408448:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  40844c:	d01e      	beq.n	40848c <__register_exitproc+0x7c>
  40844e:	3002      	adds	r0, #2
  408450:	6063      	str	r3, [r4, #4]
  408452:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  408456:	2000      	movs	r0, #0
  408458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40845c:	4b14      	ldr	r3, [pc, #80]	; (4084b0 <__register_exitproc+0xa0>)
  40845e:	b303      	cbz	r3, 4084a2 <__register_exitproc+0x92>
  408460:	f44f 70c8 	mov.w	r0, #400	; 0x190
  408464:	f3af 8000 	nop.w
  408468:	4604      	mov	r4, r0
  40846a:	b1d0      	cbz	r0, 4084a2 <__register_exitproc+0x92>
  40846c:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  408470:	2700      	movs	r7, #0
  408472:	e880 0088 	stmia.w	r0, {r3, r7}
  408476:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40847a:	4638      	mov	r0, r7
  40847c:	2301      	movs	r3, #1
  40847e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  408482:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  408486:	2e00      	cmp	r6, #0
  408488:	d0e1      	beq.n	40844e <__register_exitproc+0x3e>
  40848a:	e7d1      	b.n	408430 <__register_exitproc+0x20>
  40848c:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  408490:	430a      	orrs	r2, r1
  408492:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  408496:	e7da      	b.n	40844e <__register_exitproc+0x3e>
  408498:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40849c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4084a0:	e7c1      	b.n	408426 <__register_exitproc+0x16>
  4084a2:	f04f 30ff 	mov.w	r0, #4294967295
  4084a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4084aa:	bf00      	nop
  4084ac:	0040877c 	.word	0x0040877c
	...
  4084bc:	0000000f 	.word	0x0000000f
  4084c0:	00000f03 	.word	0x00000f03
  4084c4:	00002580 	.word	0x00002580
  4084c8:	000000c0 	.word	0x000000c0
  4084cc:	00000800 	.word	0x00000800
	...

004084dc <all_twi_definitions>:
  4084dc:	40018000 40018100 00000013 00000013     ...@...@........
  4084ec:	4001c000 4001c100 00000014 00000014     ...@...@........

004084fc <null_dma_control>:
	...

00408504 <all_usart_definitions>:
  408504:	40024000 40024100 0000000e 0000000e     .@.@.A.@........
  408514:	40028000 40028100 0000000f 0000000f     ...@...@........
  408524:	454c4449 00000000 20726d54 00637653     IDLE....Tmr Svc.
  408534:	00007650 6d6d6f43 00000000 6e696c42     Pv..Comm....Blin
  408544:	0000796b 736f6361 00000000 6e697361     ky..acos....asin
  408554:	00000000 74727173 00000000              ....sqrt....

00408560 <npio2_hw>:
  408560:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
  408570:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
  408580:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
  408590:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
  4085a0:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
  4085b0:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
  4085c0:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
  4085d0:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

004085e0 <two_over_pi>:
  4085e0:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
  4085f0:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
  408600:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
  408610:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
  408620:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
  408630:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
  408640:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
  408650:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
  408660:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
  408670:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
  408680:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
  408690:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
  4086a0:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
  4086b0:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
  4086c0:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
  4086d0:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
  4086e0:	0060e27b 00c08c6b                       {.`.k...

004086e8 <init_jk>:
  4086e8:	00000002 00000003 00000004 00000006     ................

004086f8 <PIo2>:
  4086f8:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
  408708:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
  408718:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
  408728:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

00408738 <atanlo>:
  408738:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
  408748:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

00408758 <atanhi>:
  408758:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
  408768:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
  408778:	00000043                                C...

0040877c <_global_impure_ptr>:
  40877c:	200000c8                                ... 

00408780 <_init>:
  408780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408782:	bf00      	nop
  408784:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408786:	bc08      	pop	{r3}
  408788:	469e      	mov	lr, r3
  40878a:	4770      	bx	lr

0040878c <__init_array_start>:
  40878c:	004083c9 	.word	0x004083c9

00408790 <__frame_dummy_init_array_entry>:
  408790:	004000f1                                ..@.

00408794 <_fini>:
  408794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408796:	bf00      	nop
  408798:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40879a:	bc08      	pop	{r3}
  40879c:	469e      	mov	lr, r3
  40879e:	4770      	bx	lr

004087a0 <__fini_array_start>:
  4087a0:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b470      	push	{r4, r5, r6}
20000002:	b083      	sub	sp, #12
20000004:	9e06      	ldr	r6, [sp, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000006:	b343      	cbz	r3, 2000005a <efc_perform_read_sequence+0x5a>
20000008:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000000a:	6803      	ldr	r3, [r0, #0]
2000000c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000010:	6003      	str	r3, [r0, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000012:	b2c9      	uxtb	r1, r1
20000014:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FMR |= (0x1u << 16);

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
20000018:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000001a:	6883      	ldr	r3, [r0, #8]
2000001c:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000001e:	9b01      	ldr	r3, [sp, #4]
20000020:	f013 0301 	ands.w	r3, r3, #1
20000024:	d1f9      	bne.n	2000001a <efc_perform_read_sequence+0x1a>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000026:	b14e      	cbz	r6, 2000003c <efc_perform_read_sequence+0x3c>
20000028:	4621      	mov	r1, r4
2000002a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
2000002e:	4c0d      	ldr	r4, [pc, #52]	; (20000064 <efc_perform_read_sequence+0x64>)
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000030:	f854 5f04 	ldr.w	r5, [r4, #4]!
20000034:	f841 5b04 	str.w	r5, [r1], #4
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000038:	42b1      	cmp	r1, r6
2000003a:	d1f9      	bne.n	20000030 <efc_perform_read_sequence+0x30>

	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
2000003c:	b2d2      	uxtb	r2, r2
2000003e:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
	}

	/* To stop the read mode */
	p_efc->EEFC_FCR =
20000042:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000044:	6882      	ldr	r2, [r0, #8]
20000046:	9201      	str	r2, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000048:	9a01      	ldr	r2, [sp, #4]
2000004a:	f012 0f01 	tst.w	r2, #1
2000004e:	d0f9      	beq.n	20000044 <efc_perform_read_sequence+0x44>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20000050:	6802      	ldr	r2, [r0, #0]
20000052:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
20000056:	6002      	str	r2, [r0, #0]

	return EFC_RC_OK;
20000058:	e000      	b.n	2000005c <efc_perform_read_sequence+0x5c>
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
		return EFC_RC_INVALID;
2000005a:	2302      	movs	r3, #2
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);

	p_efc->EEFC_FMR &= ~(0x1u << 16);

	return EFC_RC_OK;
}
2000005c:	4618      	mov	r0, r3
2000005e:	b003      	add	sp, #12
20000060:	bc70      	pop	{r4, r5, r6}
20000062:	4770      	bx	lr
20000064:	003ffffc 	.word	0x003ffffc

20000068 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000068:	6001      	str	r1, [r0, #0]
2000006a:	4770      	bx	lr

2000006c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2000006c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000006e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000070:	6883      	ldr	r3, [r0, #8]
20000072:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000074:	9b01      	ldr	r3, [sp, #4]
20000076:	f013 0f01 	tst.w	r3, #1
2000007a:	d0f9      	beq.n	20000070 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2000007c:	9801      	ldr	r0, [sp, #4]
}
2000007e:	f000 000e 	and.w	r0, r0, #14
20000082:	b002      	add	sp, #8
20000084:	4770      	bx	lr
20000086:	bf00      	nop

20000088 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000088:	f3bf 8f5f 	dmb	sy
2000008c:	3801      	subs	r0, #1
2000008e:	d1fb      	bne.n	20000088 <portable_delay_cycles>
20000090:	4770      	bx	lr
20000092:	bf00      	nop

20000094 <timeZone>:
20000094:	0000 40b0                                   ...@

20000098 <dist>:
20000098:	0000 40a0                                   ...@

2000009c <pvAngleRng>:
2000009c:	0000 422c                                   ..,B

200000a0 <lat>:
200000a0:	ba88 418b                                   ...A

200000a4 <lon>:
200000a4:	e153 429c                                   S..B

200000a8 <width>:
200000a8:	0000 4000                                   ...@

200000ac <g_interrupt_enabled>:
200000ac:	0001 0000                                   ....

200000b0 <SystemCoreClock>:
200000b0:	0900 003d                                   ..=.

200000b4 <uxCriticalNesting>:
200000b4:	aaaa aaaa                                   ....

200000b8 <xFreeBytesRemaining>:
200000b8:	2000 0000                                   . ..

200000bc <xNextTaskUnblockTime>:
200000bc:	ffff ffff                                   ....

200000c0 <slaveAddr>:
200000c0:	0101                                             .

200000c1 <__fdlib_version>:
200000c1:	0001 0000 0000 0000                              .......

200000c8 <impure_data>:
200000c8:	0000 0000 03b4 2000 041c 2000 0484 2000     ....... ... ... 
	...
200000fc:	8778 0040 0000 0000 0000 0000 0000 0000     x.@.............
	...
20000170:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000180:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200004f0 <_impure_ptr>:
200004f0:	00c8 2000                                   ... 
