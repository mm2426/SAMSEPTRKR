
SAMSEPTRKR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b89c  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040b89c  0040b89c  0001b89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000046c  20000000  0040b8a4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000022b8  20000470  0040bd18  00020470  2**3
                  ALLOC
  4 .stack        00003000  20002728  0040dfd0  00020470  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  0002046c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020496  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000e632  00000000  00000000  000204ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002a1c  00000000  00000000  0002eb21  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00008c07  00000000  00000000  0003153d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001080  00000000  00000000  0003a144  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ed0  00000000  00000000  0003b1c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000a151  00000000  00000000  0003c094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001613b  00000000  00000000  000461e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00053a9d  00000000  00000000  0005c320  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000498c  00000000  00000000  000afdc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20005728 	.word	0x20005728
  400004:	00404a49 	.word	0x00404a49
  400008:	00404b11 	.word	0x00404b11
  40000c:	00404b11 	.word	0x00404b11
  400010:	00404b11 	.word	0x00404b11
  400014:	00404b11 	.word	0x00404b11
  400018:	00404b11 	.word	0x00404b11
	...
  40002c:	00404fa9 	.word	0x00404fa9
  400030:	00404b11 	.word	0x00404b11
  400034:	00000000 	.word	0x00000000
  400038:	004050a1 	.word	0x004050a1
  40003c:	004050e1 	.word	0x004050e1
  400040:	00404b11 	.word	0x00404b11
  400044:	00404b11 	.word	0x00404b11
  400048:	00404b11 	.word	0x00404b11
  40004c:	00404b11 	.word	0x00404b11
  400050:	00404b11 	.word	0x00404b11
  400054:	00404b11 	.word	0x00404b11
  400058:	00404b11 	.word	0x00404b11
  40005c:	00000000 	.word	0x00000000
  400060:	00404b11 	.word	0x00404b11
  400064:	00404b11 	.word	0x00404b11
  400068:	00000000 	.word	0x00000000
  40006c:	004046c9 	.word	0x004046c9
  400070:	004046e1 	.word	0x004046e1
  400074:	00000000 	.word	0x00000000
  400078:	004030c1 	.word	0x004030c1
  40007c:	004030d5 	.word	0x004030d5
	...
  400088:	00404b11 	.word	0x00404b11
  40008c:	00402dbd 	.word	0x00402dbd
  400090:	00402dd1 	.word	0x00402dd1
  400094:	00404b11 	.word	0x00404b11
  400098:	00404b11 	.word	0x00404b11
  40009c:	00404b11 	.word	0x00404b11
  4000a0:	00404b11 	.word	0x00404b11
  4000a4:	00404b11 	.word	0x00404b11
	...
  4000b4:	00404b11 	.word	0x00404b11
  4000b8:	00404b11 	.word	0x00404b11
  4000bc:	00404b11 	.word	0x00404b11
  4000c0:	00404b11 	.word	0x00404b11
  4000c4:	00404b11 	.word	0x00404b11
  4000c8:	00404b11 	.word	0x00404b11

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000470 	.word	0x20000470
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040b8a4 	.word	0x0040b8a4

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	20000474 	.word	0x20000474
  40011c:	0040b8a4 	.word	0x0040b8a4
  400120:	0040b8a4 	.word	0x0040b8a4
  400124:	00000000 	.word	0x00000000

00400128 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400128:	b480      	push	{r7}
  40012a:	b083      	sub	sp, #12
  40012c:	af00      	add	r7, sp, #0
  40012e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400130:	687b      	ldr	r3, [r7, #4]
  400132:	2b07      	cmp	r3, #7
  400134:	d825      	bhi.n	400182 <osc_get_rate+0x5a>
  400136:	a201      	add	r2, pc, #4	; (adr r2, 40013c <osc_get_rate+0x14>)
  400138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40013c:	0040015d 	.word	0x0040015d
  400140:	00400163 	.word	0x00400163
  400144:	00400169 	.word	0x00400169
  400148:	0040016f 	.word	0x0040016f
  40014c:	00400173 	.word	0x00400173
  400150:	00400177 	.word	0x00400177
  400154:	0040017b 	.word	0x0040017b
  400158:	0040017f 	.word	0x0040017f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40015c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400160:	e010      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400166:	e00d      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400168:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40016c:	e00a      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40016e:	4b08      	ldr	r3, [pc, #32]	; (400190 <osc_get_rate+0x68>)
  400170:	e008      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400172:	4b08      	ldr	r3, [pc, #32]	; (400194 <osc_get_rate+0x6c>)
  400174:	e006      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400176:	4b08      	ldr	r3, [pc, #32]	; (400198 <osc_get_rate+0x70>)
  400178:	e004      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <osc_get_rate+0x70>)
  40017c:	e002      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40017e:	4b06      	ldr	r3, [pc, #24]	; (400198 <osc_get_rate+0x70>)
  400180:	e000      	b.n	400184 <osc_get_rate+0x5c>
	}

	return 0;
  400182:	2300      	movs	r3, #0
}
  400184:	4618      	mov	r0, r3
  400186:	370c      	adds	r7, #12
  400188:	46bd      	mov	sp, r7
  40018a:	bc80      	pop	{r7}
  40018c:	4770      	bx	lr
  40018e:	bf00      	nop
  400190:	003d0900 	.word	0x003d0900
  400194:	007a1200 	.word	0x007a1200
  400198:	00b71b00 	.word	0x00b71b00

0040019c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40019c:	b580      	push	{r7, lr}
  40019e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4001a0:	2006      	movs	r0, #6
  4001a2:	4b04      	ldr	r3, [pc, #16]	; (4001b4 <sysclk_get_main_hz+0x18>)
  4001a4:	4798      	blx	r3
  4001a6:	4602      	mov	r2, r0
  4001a8:	4613      	mov	r3, r2
  4001aa:	009b      	lsls	r3, r3, #2
  4001ac:	4413      	add	r3, r2
  4001ae:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4001b0:	4618      	mov	r0, r3
  4001b2:	bd80      	pop	{r7, pc}
  4001b4:	00400129 	.word	0x00400129

004001b8 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4001b8:	b580      	push	{r7, lr}
  4001ba:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4001bc:	4b02      	ldr	r3, [pc, #8]	; (4001c8 <sysclk_get_cpu_hz+0x10>)
  4001be:	4798      	blx	r3
  4001c0:	4603      	mov	r3, r0
  4001c2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4001c4:	4618      	mov	r0, r3
  4001c6:	bd80      	pop	{r7, pc}
  4001c8:	0040019d 	.word	0x0040019d

004001cc <WriteEEPROM>:
	 /*
	  * 2 LSBs of chipAddr (A1,A0) are the memory addresses (A9, A8).
	  * Write operation takes place in pages of 16Bytes only. Any data more than that is wrapped around.
	  */
	 void WriteEEPROM(Twi * Port, uint8_t chipAddr, uint16_t memAddr, uint8_t *dPkt, uint8_t dLen)
	 {
  4001cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4001ce:	b08b      	sub	sp, #44	; 0x2c
  4001d0:	af00      	add	r7, sp, #0
  4001d2:	60f8      	str	r0, [r7, #12]
  4001d4:	607b      	str	r3, [r7, #4]
  4001d6:	460b      	mov	r3, r1
  4001d8:	72fb      	strb	r3, [r7, #11]
  4001da:	4613      	mov	r3, r2
  4001dc:	813b      	strh	r3, [r7, #8]
		 twi_packet_t pkt;
		 /* Set Device Address */
		 pkt.chip = (chipAddr&0xFC);
  4001de:	7afb      	ldrb	r3, [r7, #11]
  4001e0:	f023 0303 	bic.w	r3, r3, #3
  4001e4:	b2db      	uxtb	r3, r3
  4001e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		 pkt.chip |= ((memAddr>>8)&0x03);
  4001ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
  4001ee:	b25a      	sxtb	r2, r3
  4001f0:	893b      	ldrh	r3, [r7, #8]
  4001f2:	0a1b      	lsrs	r3, r3, #8
  4001f4:	b29b      	uxth	r3, r3
  4001f6:	b25b      	sxtb	r3, r3
  4001f8:	f003 0303 	and.w	r3, r3, #3
  4001fc:	b25b      	sxtb	r3, r3
  4001fe:	4313      	orrs	r3, r2
  400200:	b25b      	sxtb	r3, r3
  400202:	b2db      	uxtb	r3, r3
  400204:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		 /* Page Number */
		 pkt.addr[0] = memAddr;
  400208:	893b      	ldrh	r3, [r7, #8]
  40020a:	b2db      	uxtb	r3, r3
  40020c:	753b      	strb	r3, [r7, #20]
		 /* No Address Bytes to be clocked */
		 pkt.addr_length = 1;
  40020e:	2301      	movs	r3, #1
  400210:	61bb      	str	r3, [r7, #24]
		 /* Address of buffer where recvd data is to be stored */
		 pkt.buffer = dPkt;
  400212:	687b      	ldr	r3, [r7, #4]
  400214:	61fb      	str	r3, [r7, #28]
		 /* No of bytes to read */
		 pkt.length = dLen;
  400216:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
  40021a:	623b      	str	r3, [r7, #32]
		 twi_master_write(Port, &pkt);
  40021c:	f107 0314 	add.w	r3, r7, #20
  400220:	4619      	mov	r1, r3
  400222:	68f8      	ldr	r0, [r7, #12]
  400224:	4b15      	ldr	r3, [pc, #84]	; (40027c <WriteEEPROM+0xb0>)
  400226:	4798      	blx	r3
		 delay_ms(5);
  400228:	4b15      	ldr	r3, [pc, #84]	; (400280 <WriteEEPROM+0xb4>)
  40022a:	4798      	blx	r3
  40022c:	4603      	mov	r3, r0
  40022e:	4619      	mov	r1, r3
  400230:	f04f 0200 	mov.w	r2, #0
  400234:	460b      	mov	r3, r1
  400236:	4614      	mov	r4, r2
  400238:	00a6      	lsls	r6, r4, #2
  40023a:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  40023e:	009d      	lsls	r5, r3, #2
  400240:	462b      	mov	r3, r5
  400242:	4634      	mov	r4, r6
  400244:	185b      	adds	r3, r3, r1
  400246:	eb44 0402 	adc.w	r4, r4, r2
  40024a:	f243 61af 	movw	r1, #13999	; 0x36af
  40024e:	f04f 0200 	mov.w	r2, #0
  400252:	185d      	adds	r5, r3, r1
  400254:	eb44 0602 	adc.w	r6, r4, r2
  400258:	4628      	mov	r0, r5
  40025a:	4631      	mov	r1, r6
  40025c:	4c09      	ldr	r4, [pc, #36]	; (400284 <WriteEEPROM+0xb8>)
  40025e:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400262:	f04f 0300 	mov.w	r3, #0
  400266:	47a0      	blx	r4
  400268:	4603      	mov	r3, r0
  40026a:	460c      	mov	r4, r1
  40026c:	4618      	mov	r0, r3
  40026e:	4b06      	ldr	r3, [pc, #24]	; (400288 <WriteEEPROM+0xbc>)
  400270:	4798      	blx	r3
	 }
  400272:	bf00      	nop
  400274:	372c      	adds	r7, #44	; 0x2c
  400276:	46bd      	mov	sp, r7
  400278:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40027a:	bf00      	nop
  40027c:	004034ad 	.word	0x004034ad
  400280:	004001b9 	.word	0x004001b9
  400284:	0040aeb1 	.word	0x0040aeb1
  400288:	20000001 	.word	0x20000001

0040028c <ReadEEPROM>:
	 /*
	  * 2 LSBs of chipAddr (A1,A0) are the memory addresses (A9, A8).
	  * Read operation does not wrap around on page boundaries.
	  */
	 void ReadEEPROM(Twi * Port, uint8_t chipAddr, uint16_t memAddr, uint8_t *dPkt, uint16_t dLen)
	 {
  40028c:	b580      	push	{r7, lr}
  40028e:	b08a      	sub	sp, #40	; 0x28
  400290:	af00      	add	r7, sp, #0
  400292:	60f8      	str	r0, [r7, #12]
  400294:	607b      	str	r3, [r7, #4]
  400296:	460b      	mov	r3, r1
  400298:	72fb      	strb	r3, [r7, #11]
  40029a:	4613      	mov	r3, r2
  40029c:	813b      	strh	r3, [r7, #8]
		 twi_packet_t pkt;
		 /* Set Device Address */
		 pkt.chip = (chipAddr&0xFC);
  40029e:	7afb      	ldrb	r3, [r7, #11]
  4002a0:	f023 0303 	bic.w	r3, r3, #3
  4002a4:	b2db      	uxtb	r3, r3
  4002a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		 pkt.chip |= ((memAddr>>8)&0x03);
  4002aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
  4002ae:	b25a      	sxtb	r2, r3
  4002b0:	893b      	ldrh	r3, [r7, #8]
  4002b2:	0a1b      	lsrs	r3, r3, #8
  4002b4:	b29b      	uxth	r3, r3
  4002b6:	b25b      	sxtb	r3, r3
  4002b8:	f003 0303 	and.w	r3, r3, #3
  4002bc:	b25b      	sxtb	r3, r3
  4002be:	4313      	orrs	r3, r2
  4002c0:	b25b      	sxtb	r3, r3
  4002c2:	b2db      	uxtb	r3, r3
  4002c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		 /* Page Number */
		 pkt.addr[0] = memAddr;
  4002c8:	893b      	ldrh	r3, [r7, #8]
  4002ca:	b2db      	uxtb	r3, r3
  4002cc:	753b      	strb	r3, [r7, #20]
		 /* No Address Bytes to be clocked */
		 pkt.addr_length = 1;
  4002ce:	2301      	movs	r3, #1
  4002d0:	61bb      	str	r3, [r7, #24]
		 /* Address of buffer where recvd data is to be stored */
		 pkt.buffer = dPkt;
  4002d2:	687b      	ldr	r3, [r7, #4]
  4002d4:	61fb      	str	r3, [r7, #28]
		 /* No of bytes to read */
		 pkt.length = dLen;
  4002d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
  4002d8:	623b      	str	r3, [r7, #32]
		 twi_master_read(Port, &pkt);
  4002da:	f107 0314 	add.w	r3, r7, #20
  4002de:	4619      	mov	r1, r3
  4002e0:	68f8      	ldr	r0, [r7, #12]
  4002e2:	4b03      	ldr	r3, [pc, #12]	; (4002f0 <ReadEEPROM+0x64>)
  4002e4:	4798      	blx	r3
	 }
  4002e6:	bf00      	nop
  4002e8:	3728      	adds	r7, #40	; 0x28
  4002ea:	46bd      	mov	sp, r7
  4002ec:	bd80      	pop	{r7, pc}
  4002ee:	bf00      	nop
  4002f0:	004033a1 	.word	0x004033a1

004002f4 <DSGetTime>:

#include "DS3231.h"

#ifndef DS3231_USE_RTOS_API
	void DSGetTime(Twi *port, uint16_t *recvTime)
	{
  4002f4:	b580      	push	{r7, lr}
  4002f6:	b088      	sub	sp, #32
  4002f8:	af00      	add	r7, sp, #0
  4002fa:	6078      	str	r0, [r7, #4]
  4002fc:	6039      	str	r1, [r7, #0]
		uint8_t buff[3];
		twi_packet_t pkt;
	
		pkt.chip = DS_ADDR;
  4002fe:	2368      	movs	r3, #104	; 0x68
  400300:	763b      	strb	r3, [r7, #24]
		pkt.addr[0] = DS_REG_SEC;
  400302:	2300      	movs	r3, #0
  400304:	723b      	strb	r3, [r7, #8]
		pkt.addr_length = 1;
  400306:	2301      	movs	r3, #1
  400308:	60fb      	str	r3, [r7, #12]
		pkt.buffer = buff;
  40030a:	f107 031c 	add.w	r3, r7, #28
  40030e:	613b      	str	r3, [r7, #16]
		pkt.length = 3;
  400310:	2303      	movs	r3, #3
  400312:	617b      	str	r3, [r7, #20]
		twi_master_read(port, &pkt);
  400314:	f107 0308 	add.w	r3, r7, #8
  400318:	4619      	mov	r1, r3
  40031a:	6878      	ldr	r0, [r7, #4]
  40031c:	4b09      	ldr	r3, [pc, #36]	; (400344 <DSGetTime+0x50>)
  40031e:	4798      	blx	r3

		//SS
		recvTime[0] = buff[0];
  400320:	7f3b      	ldrb	r3, [r7, #28]
  400322:	b29a      	uxth	r2, r3
  400324:	683b      	ldr	r3, [r7, #0]
  400326:	801a      	strh	r2, [r3, #0]
		//MM
		recvTime[1] = buff[1];
  400328:	683b      	ldr	r3, [r7, #0]
  40032a:	3302      	adds	r3, #2
  40032c:	7f7a      	ldrb	r2, [r7, #29]
  40032e:	b292      	uxth	r2, r2
  400330:	801a      	strh	r2, [r3, #0]
		//HH
		recvTime[2] = buff[2];
  400332:	683b      	ldr	r3, [r7, #0]
  400334:	3304      	adds	r3, #4
  400336:	7fba      	ldrb	r2, [r7, #30]
  400338:	b292      	uxth	r2, r2
  40033a:	801a      	strh	r2, [r3, #0]
	}
  40033c:	bf00      	nop
  40033e:	3720      	adds	r7, #32
  400340:	46bd      	mov	sp, r7
  400342:	bd80      	pop	{r7, pc}
  400344:	004033a1 	.word	0x004033a1

00400348 <DSSetSecs>:
	{
		DSReadByte(port, DS_REG_SEC, (uint8_t *)ss);
	}

	void DSSetSecs(Twi *port, uint8_t ss)
	{
  400348:	b580      	push	{r7, lr}
  40034a:	b082      	sub	sp, #8
  40034c:	af00      	add	r7, sp, #0
  40034e:	6078      	str	r0, [r7, #4]
  400350:	460b      	mov	r3, r1
  400352:	70fb      	strb	r3, [r7, #3]
		DSWriteByte(port, DS_REG_SEC, ss);
  400354:	78fb      	ldrb	r3, [r7, #3]
  400356:	461a      	mov	r2, r3
  400358:	2100      	movs	r1, #0
  40035a:	6878      	ldr	r0, [r7, #4]
  40035c:	4b02      	ldr	r3, [pc, #8]	; (400368 <DSSetSecs+0x20>)
  40035e:	4798      	blx	r3
	}
  400360:	bf00      	nop
  400362:	3708      	adds	r7, #8
  400364:	46bd      	mov	sp, r7
  400366:	bd80      	pop	{r7, pc}
  400368:	00400515 	.word	0x00400515

0040036c <DSSetMins>:
	{
		DSReadByte(port, DS_REG_MIN, (uint8_t *)mm);
	}

	void DSSetMins(Twi *port, uint8_t mm)
	{
  40036c:	b580      	push	{r7, lr}
  40036e:	b082      	sub	sp, #8
  400370:	af00      	add	r7, sp, #0
  400372:	6078      	str	r0, [r7, #4]
  400374:	460b      	mov	r3, r1
  400376:	70fb      	strb	r3, [r7, #3]
		DSWriteByte(port, DS_REG_MIN, mm);
  400378:	78fb      	ldrb	r3, [r7, #3]
  40037a:	461a      	mov	r2, r3
  40037c:	2101      	movs	r1, #1
  40037e:	6878      	ldr	r0, [r7, #4]
  400380:	4b02      	ldr	r3, [pc, #8]	; (40038c <DSSetMins+0x20>)
  400382:	4798      	blx	r3
	}
  400384:	bf00      	nop
  400386:	3708      	adds	r7, #8
  400388:	46bd      	mov	sp, r7
  40038a:	bd80      	pop	{r7, pc}
  40038c:	00400515 	.word	0x00400515

00400390 <DSSetHrs>:
	{
		DSReadByte(port, DS_REG_HRS, (uint8_t *)hh);
	}

	void DSSetHrs(Twi *port, uint8_t hh)
	{
  400390:	b580      	push	{r7, lr}
  400392:	b082      	sub	sp, #8
  400394:	af00      	add	r7, sp, #0
  400396:	6078      	str	r0, [r7, #4]
  400398:	460b      	mov	r3, r1
  40039a:	70fb      	strb	r3, [r7, #3]
		DSWriteByte(port, DS_REG_HRS, hh);
  40039c:	78fb      	ldrb	r3, [r7, #3]
  40039e:	461a      	mov	r2, r3
  4003a0:	2102      	movs	r1, #2
  4003a2:	6878      	ldr	r0, [r7, #4]
  4003a4:	4b02      	ldr	r3, [pc, #8]	; (4003b0 <DSSetHrs+0x20>)
  4003a6:	4798      	blx	r3
	}
  4003a8:	bf00      	nop
  4003aa:	3708      	adds	r7, #8
  4003ac:	46bd      	mov	sp, r7
  4003ae:	bd80      	pop	{r7, pc}
  4003b0:	00400515 	.word	0x00400515

004003b4 <DSGetFullDate>:

	void DSGetFullDate(Twi *port, uint16_t *recvDate)
	{
  4003b4:	b580      	push	{r7, lr}
  4003b6:	b088      	sub	sp, #32
  4003b8:	af00      	add	r7, sp, #0
  4003ba:	6078      	str	r0, [r7, #4]
  4003bc:	6039      	str	r1, [r7, #0]
		uint8_t buff[4];
		twi_packet_t pkt;
    
		pkt.chip = DS_ADDR;
  4003be:	2368      	movs	r3, #104	; 0x68
  4003c0:	763b      	strb	r3, [r7, #24]
		pkt.addr[0] = DS_REG_DAY;
  4003c2:	2303      	movs	r3, #3
  4003c4:	723b      	strb	r3, [r7, #8]
		pkt.addr_length = 1;
  4003c6:	2301      	movs	r3, #1
  4003c8:	60fb      	str	r3, [r7, #12]
		pkt.buffer = buff;
  4003ca:	f107 031c 	add.w	r3, r7, #28
  4003ce:	613b      	str	r3, [r7, #16]
		pkt.length = 4;
  4003d0:	2304      	movs	r3, #4
  4003d2:	617b      	str	r3, [r7, #20]
		twi_master_read(port, &pkt);
  4003d4:	f107 0308 	add.w	r3, r7, #8
  4003d8:	4619      	mov	r1, r3
  4003da:	6878      	ldr	r0, [r7, #4]
  4003dc:	4b0c      	ldr	r3, [pc, #48]	; (400410 <DSGetFullDate+0x5c>)
  4003de:	4798      	blx	r3
		//DAY
		recvDate[0] = buff[0];
  4003e0:	7f3b      	ldrb	r3, [r7, #28]
  4003e2:	b29a      	uxth	r2, r3
  4003e4:	683b      	ldr	r3, [r7, #0]
  4003e6:	801a      	strh	r2, [r3, #0]
		//DD
		recvDate[1] = buff[1];
  4003e8:	683b      	ldr	r3, [r7, #0]
  4003ea:	3302      	adds	r3, #2
  4003ec:	7f7a      	ldrb	r2, [r7, #29]
  4003ee:	b292      	uxth	r2, r2
  4003f0:	801a      	strh	r2, [r3, #0]
		//MM
		recvDate[2] = buff[2];
  4003f2:	683b      	ldr	r3, [r7, #0]
  4003f4:	3304      	adds	r3, #4
  4003f6:	7fba      	ldrb	r2, [r7, #30]
  4003f8:	b292      	uxth	r2, r2
  4003fa:	801a      	strh	r2, [r3, #0]
		//YY
		recvDate[3] = buff[3];
  4003fc:	683b      	ldr	r3, [r7, #0]
  4003fe:	3306      	adds	r3, #6
  400400:	7ffa      	ldrb	r2, [r7, #31]
  400402:	b292      	uxth	r2, r2
  400404:	801a      	strh	r2, [r3, #0]
	}
  400406:	bf00      	nop
  400408:	3720      	adds	r7, #32
  40040a:	46bd      	mov	sp, r7
  40040c:	bd80      	pop	{r7, pc}
  40040e:	bf00      	nop
  400410:	004033a1 	.word	0x004033a1

00400414 <DSSetDay>:
	{
		DSReadByte(port, DS_REG_DAY, (uint8_t *)d);
	}

	void DSSetDay(Twi *port, uint8_t d)
	{
  400414:	b580      	push	{r7, lr}
  400416:	b082      	sub	sp, #8
  400418:	af00      	add	r7, sp, #0
  40041a:	6078      	str	r0, [r7, #4]
  40041c:	460b      	mov	r3, r1
  40041e:	70fb      	strb	r3, [r7, #3]
		DSWriteByte(port, DS_REG_DAY, d);
  400420:	78fb      	ldrb	r3, [r7, #3]
  400422:	461a      	mov	r2, r3
  400424:	2103      	movs	r1, #3
  400426:	6878      	ldr	r0, [r7, #4]
  400428:	4b02      	ldr	r3, [pc, #8]	; (400434 <DSSetDay+0x20>)
  40042a:	4798      	blx	r3
	}
  40042c:	bf00      	nop
  40042e:	3708      	adds	r7, #8
  400430:	46bd      	mov	sp, r7
  400432:	bd80      	pop	{r7, pc}
  400434:	00400515 	.word	0x00400515

00400438 <DSSetDate>:
	{
		DSReadByte(port, DS_REG_DAT, (uint8_t *)dd);
	}

	void DSSetDate(Twi *port, uint8_t dd)
	{
  400438:	b580      	push	{r7, lr}
  40043a:	b082      	sub	sp, #8
  40043c:	af00      	add	r7, sp, #0
  40043e:	6078      	str	r0, [r7, #4]
  400440:	460b      	mov	r3, r1
  400442:	70fb      	strb	r3, [r7, #3]
		DSWriteByte(port, DS_REG_DAT, dd);
  400444:	78fb      	ldrb	r3, [r7, #3]
  400446:	461a      	mov	r2, r3
  400448:	2104      	movs	r1, #4
  40044a:	6878      	ldr	r0, [r7, #4]
  40044c:	4b02      	ldr	r3, [pc, #8]	; (400458 <DSSetDate+0x20>)
  40044e:	4798      	blx	r3
	}
  400450:	bf00      	nop
  400452:	3708      	adds	r7, #8
  400454:	46bd      	mov	sp, r7
  400456:	bd80      	pop	{r7, pc}
  400458:	00400515 	.word	0x00400515

0040045c <DSSetMonth>:
	{
		DSReadByte(port, DS_REG_MON, (uint8_t *)mm);
	}

	void DSSetMonth(Twi *port, uint8_t mm)
	{
  40045c:	b580      	push	{r7, lr}
  40045e:	b082      	sub	sp, #8
  400460:	af00      	add	r7, sp, #0
  400462:	6078      	str	r0, [r7, #4]
  400464:	460b      	mov	r3, r1
  400466:	70fb      	strb	r3, [r7, #3]
		DSWriteByte(port, DS_REG_MON, mm);
  400468:	78fb      	ldrb	r3, [r7, #3]
  40046a:	461a      	mov	r2, r3
  40046c:	2105      	movs	r1, #5
  40046e:	6878      	ldr	r0, [r7, #4]
  400470:	4b02      	ldr	r3, [pc, #8]	; (40047c <DSSetMonth+0x20>)
  400472:	4798      	blx	r3
	}
  400474:	bf00      	nop
  400476:	3708      	adds	r7, #8
  400478:	46bd      	mov	sp, r7
  40047a:	bd80      	pop	{r7, pc}
  40047c:	00400515 	.word	0x00400515

00400480 <DSSetYear>:
	{
		DSReadByte(port, DS_REG_YRS, (uint8_t *)yy);
	}

	void DSSetYear(Twi *port, uint8_t yy)
	{
  400480:	b580      	push	{r7, lr}
  400482:	b082      	sub	sp, #8
  400484:	af00      	add	r7, sp, #0
  400486:	6078      	str	r0, [r7, #4]
  400488:	460b      	mov	r3, r1
  40048a:	70fb      	strb	r3, [r7, #3]
		DSWriteByte(port, DS_REG_YRS, yy);
  40048c:	78fb      	ldrb	r3, [r7, #3]
  40048e:	461a      	mov	r2, r3
  400490:	2106      	movs	r1, #6
  400492:	6878      	ldr	r0, [r7, #4]
  400494:	4b02      	ldr	r3, [pc, #8]	; (4004a0 <DSSetYear+0x20>)
  400496:	4798      	blx	r3
	}
  400498:	bf00      	nop
  40049a:	3708      	adds	r7, #8
  40049c:	46bd      	mov	sp, r7
  40049e:	bd80      	pop	{r7, pc}
  4004a0:	00400515 	.word	0x00400515

004004a4 <DSEnAL2>:
			DSWriteByte(port, DS_REG_CTRL, 0x04);
		}
	}

	void DSEnAL2(Twi *port, uint8_t en)
	{
  4004a4:	b580      	push	{r7, lr}
  4004a6:	b088      	sub	sp, #32
  4004a8:	af00      	add	r7, sp, #0
  4004aa:	6078      	str	r0, [r7, #4]
  4004ac:	460b      	mov	r3, r1
  4004ae:	70fb      	strb	r3, [r7, #3]
		uint8_t buff[3];
		twi_packet_t pkt;

		if(en)
  4004b0:	78fb      	ldrb	r3, [r7, #3]
  4004b2:	2b00      	cmp	r3, #0
  4004b4:	d021      	beq.n	4004fa <DSEnAL2+0x56>
		{
			pkt.chip = DS_ADDR;
  4004b6:	2368      	movs	r3, #104	; 0x68
  4004b8:	763b      	strb	r3, [r7, #24]
			pkt.addr[0] = DS_REG_AL2M;
  4004ba:	230b      	movs	r3, #11
  4004bc:	723b      	strb	r3, [r7, #8]
			pkt.addr_length = 1;
  4004be:	2301      	movs	r3, #1
  4004c0:	60fb      	str	r3, [r7, #12]
			pkt.buffer = buff;
  4004c2:	f107 031c 	add.w	r3, r7, #28
  4004c6:	613b      	str	r3, [r7, #16]
			pkt.length = 3;
  4004c8:	2303      	movs	r3, #3
  4004ca:	617b      	str	r3, [r7, #20]

			buff[0] = 0x80;
  4004cc:	2380      	movs	r3, #128	; 0x80
  4004ce:	773b      	strb	r3, [r7, #28]
			buff[1] = 0x80;
  4004d0:	2380      	movs	r3, #128	; 0x80
  4004d2:	777b      	strb	r3, [r7, #29]
			buff[2] = 0x80;
  4004d4:	2380      	movs	r3, #128	; 0x80
  4004d6:	77bb      	strb	r3, [r7, #30]

			//Set Alarm 2 for 1 min interrupt
			twi_master_write(port, &pkt);
  4004d8:	f107 0308 	add.w	r3, r7, #8
  4004dc:	4619      	mov	r1, r3
  4004de:	6878      	ldr	r0, [r7, #4]
  4004e0:	4b0a      	ldr	r3, [pc, #40]	; (40050c <DSEnAL2+0x68>)
  4004e2:	4798      	blx	r3
			//Write Enable Alarm Register
			DSWriteByte(port, DS_REG_CTRL, 0x06);
  4004e4:	2206      	movs	r2, #6
  4004e6:	210e      	movs	r1, #14
  4004e8:	6878      	ldr	r0, [r7, #4]
  4004ea:	4b09      	ldr	r3, [pc, #36]	; (400510 <DSEnAL2+0x6c>)
  4004ec:	4798      	blx	r3
			//Clear Status Reg
			DSWriteByte(port, DS_REG_STAT, 0x80);
  4004ee:	2280      	movs	r2, #128	; 0x80
  4004f0:	210f      	movs	r1, #15
  4004f2:	6878      	ldr	r0, [r7, #4]
  4004f4:	4b06      	ldr	r3, [pc, #24]	; (400510 <DSEnAL2+0x6c>)
  4004f6:	4798      	blx	r3
		else
		{
			//Write Disable Alarm Register
			DSWriteByte(port, DS_REG_CTRL, 0x04);
		}
	}
  4004f8:	e004      	b.n	400504 <DSEnAL2+0x60>
			DSWriteByte(port, DS_REG_STAT, 0x80);
		}
		else
		{
			//Write Disable Alarm Register
			DSWriteByte(port, DS_REG_CTRL, 0x04);
  4004fa:	2204      	movs	r2, #4
  4004fc:	210e      	movs	r1, #14
  4004fe:	6878      	ldr	r0, [r7, #4]
  400500:	4b03      	ldr	r3, [pc, #12]	; (400510 <DSEnAL2+0x6c>)
  400502:	4798      	blx	r3
		}
	}
  400504:	bf00      	nop
  400506:	3720      	adds	r7, #32
  400508:	46bd      	mov	sp, r7
  40050a:	bd80      	pop	{r7, pc}
  40050c:	004034ad 	.word	0x004034ad
  400510:	00400515 	.word	0x00400515

00400514 <DSWriteByte>:
		twi_master_read(port, &pkt);
		*temp = (((uint16_t)buff[0])<<8) | buff[1];
	}

	void DSWriteByte(Twi *port, uint8_t reg, uint8_t data)
	{
  400514:	b580      	push	{r7, lr}
  400516:	b088      	sub	sp, #32
  400518:	af00      	add	r7, sp, #0
  40051a:	6078      	str	r0, [r7, #4]
  40051c:	460b      	mov	r3, r1
  40051e:	70fb      	strb	r3, [r7, #3]
  400520:	4613      	mov	r3, r2
  400522:	70bb      	strb	r3, [r7, #2]
		twi_packet_t pkt;
    
		pkt.chip = DS_ADDR;
  400524:	2368      	movs	r3, #104	; 0x68
  400526:	773b      	strb	r3, [r7, #28]
		pkt.addr[0] = reg;
  400528:	78fb      	ldrb	r3, [r7, #3]
  40052a:	733b      	strb	r3, [r7, #12]
		pkt.addr_length = 1;
  40052c:	2301      	movs	r3, #1
  40052e:	613b      	str	r3, [r7, #16]
		pkt.buffer = &data;
  400530:	1cbb      	adds	r3, r7, #2
  400532:	617b      	str	r3, [r7, #20]
		pkt.length = 1;
  400534:	2301      	movs	r3, #1
  400536:	61bb      	str	r3, [r7, #24]
	
		twi_master_write(port, &pkt);
  400538:	f107 030c 	add.w	r3, r7, #12
  40053c:	4619      	mov	r1, r3
  40053e:	6878      	ldr	r0, [r7, #4]
  400540:	4b02      	ldr	r3, [pc, #8]	; (40054c <DSWriteByte+0x38>)
  400542:	4798      	blx	r3
	}
  400544:	bf00      	nop
  400546:	3720      	adds	r7, #32
  400548:	46bd      	mov	sp, r7
  40054a:	bd80      	pop	{r7, pc}
  40054c:	004034ad 	.word	0x004034ad

00400550 <DSReadByte>:

	void DSReadByte(Twi *port, uint8_t reg, uint8_t *recvData)
	{
  400550:	b580      	push	{r7, lr}
  400552:	b08a      	sub	sp, #40	; 0x28
  400554:	af00      	add	r7, sp, #0
  400556:	60f8      	str	r0, [r7, #12]
  400558:	460b      	mov	r3, r1
  40055a:	607a      	str	r2, [r7, #4]
  40055c:	72fb      	strb	r3, [r7, #11]
		twi_packet_t pkt;
    
		pkt.chip = DS_ADDR;
  40055e:	2368      	movs	r3, #104	; 0x68
  400560:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		pkt.addr[0] = reg;
  400564:	7afb      	ldrb	r3, [r7, #11]
  400566:	753b      	strb	r3, [r7, #20]
		pkt.addr_length = 1;
  400568:	2301      	movs	r3, #1
  40056a:	61bb      	str	r3, [r7, #24]
		pkt.buffer = recvData;
  40056c:	687b      	ldr	r3, [r7, #4]
  40056e:	61fb      	str	r3, [r7, #28]
		pkt.length = 1;
  400570:	2301      	movs	r3, #1
  400572:	623b      	str	r3, [r7, #32]
    
		twi_master_read(port, &pkt);
  400574:	f107 0314 	add.w	r3, r7, #20
  400578:	4619      	mov	r1, r3
  40057a:	68f8      	ldr	r0, [r7, #12]
  40057c:	4b02      	ldr	r3, [pc, #8]	; (400588 <DSReadByte+0x38>)
  40057e:	4798      	blx	r3
	}
  400580:	bf00      	nop
  400582:	3728      	adds	r7, #40	; 0x28
  400584:	46bd      	mov	sp, r7
  400586:	bd80      	pop	{r7, pc}
  400588:	004033a1 	.word	0x004033a1

0040058c <ICMInitialize>:

#include "ICM20648.h"

#ifndef ICM20648_USE_RTOS_API
	void ICMInitialize(Twi *port, uint8_t sla)
	{
  40058c:	b590      	push	{r4, r7, lr}
  40058e:	b083      	sub	sp, #12
  400590:	af00      	add	r7, sp, #0
  400592:	6078      	str	r0, [r7, #4]
  400594:	460b      	mov	r3, r1
  400596:	70fb      	strb	r3, [r7, #3]
		//Select USER Bank 0
		ICMWriteByte(port, sla,ICM_REG_BANK_SEL,0x00);
  400598:	78f9      	ldrb	r1, [r7, #3]
  40059a:	2300      	movs	r3, #0
  40059c:	227f      	movs	r2, #127	; 0x7f
  40059e:	6878      	ldr	r0, [r7, #4]
  4005a0:	4c11      	ldr	r4, [pc, #68]	; (4005e8 <ICMInitialize+0x5c>)
  4005a2:	47a0      	blx	r4
    
		//Auto Select Best Clock Source
		ICMWriteByte(port, sla,ICM_REG_PWR_MGMT1,0x01);
  4005a4:	78f9      	ldrb	r1, [r7, #3]
  4005a6:	2301      	movs	r3, #1
  4005a8:	2206      	movs	r2, #6
  4005aa:	6878      	ldr	r0, [r7, #4]
  4005ac:	4c0e      	ldr	r4, [pc, #56]	; (4005e8 <ICMInitialize+0x5c>)
  4005ae:	47a0      	blx	r4
    
		//Select USER Bank 2
		ICMWriteByte(port, sla,ICM_REG_BANK_SEL,0x20);
  4005b0:	78f9      	ldrb	r1, [r7, #3]
  4005b2:	2320      	movs	r3, #32
  4005b4:	227f      	movs	r2, #127	; 0x7f
  4005b6:	6878      	ldr	r0, [r7, #4]
  4005b8:	4c0b      	ldr	r4, [pc, #44]	; (4005e8 <ICMInitialize+0x5c>)
  4005ba:	47a0      	blx	r4
    
		//Accel Full Scale set to 2G
		//ICMWriteByte(sla,ICM_REG_ACC_CONFIG,0x00);
		//Full Scale = 2G, Enable DLP, Cutoff = 23Hz
		ICMWriteByte(port, sla,ICM_REG_ACC_CONFIG,0x31);
  4005bc:	78f9      	ldrb	r1, [r7, #3]
  4005be:	2331      	movs	r3, #49	; 0x31
  4005c0:	2214      	movs	r2, #20
  4005c2:	6878      	ldr	r0, [r7, #4]
  4005c4:	4c08      	ldr	r4, [pc, #32]	; (4005e8 <ICMInitialize+0x5c>)
  4005c6:	47a0      	blx	r4
    
		//Output Data Rate Set to 17.xx Hz
		ICMWriteByte(port, sla,ICM_REG_ACC_SMPLRT_DIV1,0x00);
  4005c8:	78f9      	ldrb	r1, [r7, #3]
  4005ca:	2300      	movs	r3, #0
  4005cc:	2210      	movs	r2, #16
  4005ce:	6878      	ldr	r0, [r7, #4]
  4005d0:	4c05      	ldr	r4, [pc, #20]	; (4005e8 <ICMInitialize+0x5c>)
  4005d2:	47a0      	blx	r4
		ICMWriteByte(port, sla,ICM_REG_ACC_SMPLRT_DIV2,0x3F);
  4005d4:	78f9      	ldrb	r1, [r7, #3]
  4005d6:	233f      	movs	r3, #63	; 0x3f
  4005d8:	2211      	movs	r2, #17
  4005da:	6878      	ldr	r0, [r7, #4]
  4005dc:	4c02      	ldr	r4, [pc, #8]	; (4005e8 <ICMInitialize+0x5c>)
  4005de:	47a0      	blx	r4
    
	}
  4005e0:	bf00      	nop
  4005e2:	370c      	adds	r7, #12
  4005e4:	46bd      	mov	sp, r7
  4005e6:	bd90      	pop	{r4, r7, pc}
  4005e8:	00400669 	.word	0x00400669

004005ec <ICMReadAccDataAll>:
		ICMReadByte(port, sla, ICM_REG_ACC_ZOUTH, &((uint8_t *)recvData)[1]);
		ICMReadByte(port, sla, ICM_REG_ACC_ZOUTL, &((uint8_t *)recvData)[0]);
	}

	void ICMReadAccDataAll(Twi *port, uint8_t sla, uint16_t *recvData)
	{
  4005ec:	b590      	push	{r4, r7, lr}
  4005ee:	b085      	sub	sp, #20
  4005f0:	af00      	add	r7, sp, #0
  4005f2:	60f8      	str	r0, [r7, #12]
  4005f4:	460b      	mov	r3, r1
  4005f6:	607a      	str	r2, [r7, #4]
  4005f8:	72fb      	strb	r3, [r7, #11]
		//Select USER Bank 0
		ICMWriteByte(port, sla,ICM_REG_BANK_SEL,0x00);
  4005fa:	7af9      	ldrb	r1, [r7, #11]
  4005fc:	2300      	movs	r3, #0
  4005fe:	227f      	movs	r2, #127	; 0x7f
  400600:	68f8      	ldr	r0, [r7, #12]
  400602:	4c17      	ldr	r4, [pc, #92]	; (400660 <ICMReadAccDataAll+0x74>)
  400604:	47a0      	blx	r4
    
		//Read ACC data
		ICMReadByte(port, sla, ICM_REG_ACC_XOUTH, &((uint8_t *)recvData)[1]);
  400606:	687b      	ldr	r3, [r7, #4]
  400608:	3301      	adds	r3, #1
  40060a:	7af9      	ldrb	r1, [r7, #11]
  40060c:	222d      	movs	r2, #45	; 0x2d
  40060e:	68f8      	ldr	r0, [r7, #12]
  400610:	4c14      	ldr	r4, [pc, #80]	; (400664 <ICMReadAccDataAll+0x78>)
  400612:	47a0      	blx	r4
		ICMReadByte(port, sla, ICM_REG_ACC_XOUTL, &((uint8_t *)recvData)[0]);
  400614:	7af9      	ldrb	r1, [r7, #11]
  400616:	687b      	ldr	r3, [r7, #4]
  400618:	222e      	movs	r2, #46	; 0x2e
  40061a:	68f8      	ldr	r0, [r7, #12]
  40061c:	4c11      	ldr	r4, [pc, #68]	; (400664 <ICMReadAccDataAll+0x78>)
  40061e:	47a0      	blx	r4
		ICMReadByte(port, sla, ICM_REG_ACC_YOUTH, &((uint8_t *)recvData)[3]);
  400620:	687b      	ldr	r3, [r7, #4]
  400622:	3303      	adds	r3, #3
  400624:	7af9      	ldrb	r1, [r7, #11]
  400626:	222f      	movs	r2, #47	; 0x2f
  400628:	68f8      	ldr	r0, [r7, #12]
  40062a:	4c0e      	ldr	r4, [pc, #56]	; (400664 <ICMReadAccDataAll+0x78>)
  40062c:	47a0      	blx	r4
		ICMReadByte(port, sla, ICM_REG_ACC_YOUTL, &((uint8_t *)recvData)[2]);
  40062e:	687b      	ldr	r3, [r7, #4]
  400630:	3302      	adds	r3, #2
  400632:	7af9      	ldrb	r1, [r7, #11]
  400634:	2230      	movs	r2, #48	; 0x30
  400636:	68f8      	ldr	r0, [r7, #12]
  400638:	4c0a      	ldr	r4, [pc, #40]	; (400664 <ICMReadAccDataAll+0x78>)
  40063a:	47a0      	blx	r4
		ICMReadByte(port, sla, ICM_REG_ACC_ZOUTH, &((uint8_t *)recvData)[5]);
  40063c:	687b      	ldr	r3, [r7, #4]
  40063e:	3305      	adds	r3, #5
  400640:	7af9      	ldrb	r1, [r7, #11]
  400642:	2231      	movs	r2, #49	; 0x31
  400644:	68f8      	ldr	r0, [r7, #12]
  400646:	4c07      	ldr	r4, [pc, #28]	; (400664 <ICMReadAccDataAll+0x78>)
  400648:	47a0      	blx	r4
		ICMReadByte(port, sla, ICM_REG_ACC_ZOUTL, &((uint8_t *)recvData)[4]);
  40064a:	687b      	ldr	r3, [r7, #4]
  40064c:	3304      	adds	r3, #4
  40064e:	7af9      	ldrb	r1, [r7, #11]
  400650:	2232      	movs	r2, #50	; 0x32
  400652:	68f8      	ldr	r0, [r7, #12]
  400654:	4c03      	ldr	r4, [pc, #12]	; (400664 <ICMReadAccDataAll+0x78>)
  400656:	47a0      	blx	r4
	}
  400658:	bf00      	nop
  40065a:	3714      	adds	r7, #20
  40065c:	46bd      	mov	sp, r7
  40065e:	bd90      	pop	{r4, r7, pc}
  400660:	00400669 	.word	0x00400669
  400664:	004006b1 	.word	0x004006b1

00400668 <ICMWriteByte>:

	void ICMWriteByte(Twi *port, uint8_t sla, uint8_t reg, uint8_t data)
	{
  400668:	b580      	push	{r7, lr}
  40066a:	b088      	sub	sp, #32
  40066c:	af00      	add	r7, sp, #0
  40066e:	6078      	str	r0, [r7, #4]
  400670:	4608      	mov	r0, r1
  400672:	4611      	mov	r1, r2
  400674:	461a      	mov	r2, r3
  400676:	4603      	mov	r3, r0
  400678:	70fb      	strb	r3, [r7, #3]
  40067a:	460b      	mov	r3, r1
  40067c:	70bb      	strb	r3, [r7, #2]
  40067e:	4613      	mov	r3, r2
  400680:	707b      	strb	r3, [r7, #1]
		twi_packet_t pkt;
    
		pkt.chip = sla;
  400682:	78fb      	ldrb	r3, [r7, #3]
  400684:	773b      	strb	r3, [r7, #28]
		pkt.addr[0] = reg;
  400686:	78bb      	ldrb	r3, [r7, #2]
  400688:	733b      	strb	r3, [r7, #12]
		pkt.addr_length = 1;
  40068a:	2301      	movs	r3, #1
  40068c:	613b      	str	r3, [r7, #16]
		pkt.buffer = &data;
  40068e:	1c7b      	adds	r3, r7, #1
  400690:	617b      	str	r3, [r7, #20]
		pkt.length = 1;
  400692:	2301      	movs	r3, #1
  400694:	61bb      	str	r3, [r7, #24]
    
		twi_master_write(port, &pkt);
  400696:	f107 030c 	add.w	r3, r7, #12
  40069a:	4619      	mov	r1, r3
  40069c:	6878      	ldr	r0, [r7, #4]
  40069e:	4b03      	ldr	r3, [pc, #12]	; (4006ac <ICMWriteByte+0x44>)
  4006a0:	4798      	blx	r3
	}
  4006a2:	bf00      	nop
  4006a4:	3720      	adds	r7, #32
  4006a6:	46bd      	mov	sp, r7
  4006a8:	bd80      	pop	{r7, pc}
  4006aa:	bf00      	nop
  4006ac:	004034ad 	.word	0x004034ad

004006b0 <ICMReadByte>:

	void ICMReadByte(Twi *port, uint8_t sla, uint8_t reg, uint8_t *recvData)
	{
  4006b0:	b580      	push	{r7, lr}
  4006b2:	b08a      	sub	sp, #40	; 0x28
  4006b4:	af00      	add	r7, sp, #0
  4006b6:	60f8      	str	r0, [r7, #12]
  4006b8:	607b      	str	r3, [r7, #4]
  4006ba:	460b      	mov	r3, r1
  4006bc:	72fb      	strb	r3, [r7, #11]
  4006be:	4613      	mov	r3, r2
  4006c0:	72bb      	strb	r3, [r7, #10]
		twi_packet_t pkt;
    
		pkt.chip = sla;
  4006c2:	7afb      	ldrb	r3, [r7, #11]
  4006c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		pkt.addr[0] = reg;
  4006c8:	7abb      	ldrb	r3, [r7, #10]
  4006ca:	753b      	strb	r3, [r7, #20]
		pkt.addr_length = 1;
  4006cc:	2301      	movs	r3, #1
  4006ce:	61bb      	str	r3, [r7, #24]
		pkt.buffer = recvData;
  4006d0:	687b      	ldr	r3, [r7, #4]
  4006d2:	61fb      	str	r3, [r7, #28]
		pkt.length = 1;
  4006d4:	2301      	movs	r3, #1
  4006d6:	623b      	str	r3, [r7, #32]
    
		twi_master_read(port, &pkt);
  4006d8:	f107 0314 	add.w	r3, r7, #20
  4006dc:	4619      	mov	r1, r3
  4006de:	68f8      	ldr	r0, [r7, #12]
  4006e0:	4b02      	ldr	r3, [pc, #8]	; (4006ec <ICMReadByte+0x3c>)
  4006e2:	4798      	blx	r3
	}
  4006e4:	bf00      	nop
  4006e6:	3728      	adds	r7, #40	; 0x28
  4006e8:	46bd      	mov	sp, r7
  4006ea:	bd80      	pop	{r7, pc}
  4006ec:	004033a1 	.word	0x004033a1

004006f0 <ParseMbusPkt>:
//Write function pointer
void (*writeFunc)(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len);

/* Modbus stack parser function */
void ParseMbusPkt(uint8_t slaveAddr, uint8_t *buff, uint8_t len, uint8_t *respBuff, uint8_t *respLen)
{
  4006f0:	b580      	push	{r7, lr}
  4006f2:	b08a      	sub	sp, #40	; 0x28
  4006f4:	af00      	add	r7, sp, #0
  4006f6:	60b9      	str	r1, [r7, #8]
  4006f8:	607b      	str	r3, [r7, #4]
  4006fa:	4603      	mov	r3, r0
  4006fc:	73fb      	strb	r3, [r7, #15]
  4006fe:	4613      	mov	r3, r2
  400700:	73bb      	strb	r3, [r7, #14]
	 uint16_t crc = 0, recvCrc = 0;
  400702:	2300      	movs	r3, #0
  400704:	83fb      	strh	r3, [r7, #30]
  400706:	2300      	movs	r3, #0
  400708:	83bb      	strh	r3, [r7, #28]
	 uint16_t regAddr = 0, numReg = 0;
  40070a:	2300      	movs	r3, #0
  40070c:	837b      	strh	r3, [r7, #26]
  40070e:	2300      	movs	r3, #0
  400710:	833b      	strh	r3, [r7, #24]
	 uint16_t regVal = 0;
  400712:	2300      	movs	r3, #0
  400714:	84fb      	strh	r3, [r7, #38]	; 0x26
	 uint8_t fCode = 0, genErrRsp = 0;
  400716:	2300      	movs	r3, #0
  400718:	75fb      	strb	r3, [r7, #23]
  40071a:	2300      	movs	r3, #0
  40071c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	 uint8_t expFuncCode = 0, expCode = 0;
  400720:	2300      	movs	r3, #0
  400722:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  400726:	2300      	movs	r3, #0
  400728:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	 uint8_t i = 0, ind = 0;
  40072c:	2300      	movs	r3, #0
  40072e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  400732:	2300      	movs	r3, #0
  400734:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	 
	 /* Self Addr recvd or Broadcast Addr = 0 recvd */
	 if(buff[0]==slaveAddr||buff[0]==0)
  400738:	68bb      	ldr	r3, [r7, #8]
  40073a:	781b      	ldrb	r3, [r3, #0]
  40073c:	7bfa      	ldrb	r2, [r7, #15]
  40073e:	429a      	cmp	r2, r3
  400740:	d004      	beq.n	40074c <ParseMbusPkt+0x5c>
  400742:	68bb      	ldr	r3, [r7, #8]
  400744:	781b      	ldrb	r3, [r3, #0]
  400746:	2b00      	cmp	r3, #0
  400748:	f040 81fb 	bne.w	400b42 <ParseMbusPkt+0x452>
	 {
		 /* Calc CRC */
		 recvCrc = (((uint16_t)buff[len-1])<<8)|buff[len-2];
  40074c:	7bbb      	ldrb	r3, [r7, #14]
  40074e:	3b01      	subs	r3, #1
  400750:	68ba      	ldr	r2, [r7, #8]
  400752:	4413      	add	r3, r2
  400754:	781b      	ldrb	r3, [r3, #0]
  400756:	021b      	lsls	r3, r3, #8
  400758:	b21a      	sxth	r2, r3
  40075a:	7bbb      	ldrb	r3, [r7, #14]
  40075c:	3b02      	subs	r3, #2
  40075e:	68b9      	ldr	r1, [r7, #8]
  400760:	440b      	add	r3, r1
  400762:	781b      	ldrb	r3, [r3, #0]
  400764:	b21b      	sxth	r3, r3
  400766:	4313      	orrs	r3, r2
  400768:	b21b      	sxth	r3, r3
  40076a:	83bb      	strh	r3, [r7, #28]
		 crc = calcCRC(buff,len-2);
  40076c:	7bbb      	ldrb	r3, [r7, #14]
  40076e:	3b02      	subs	r3, #2
  400770:	b2db      	uxtb	r3, r3
  400772:	4619      	mov	r1, r3
  400774:	68b8      	ldr	r0, [r7, #8]
  400776:	4b90      	ldr	r3, [pc, #576]	; (4009b8 <ParseMbusPkt+0x2c8>)
  400778:	4798      	blx	r3
  40077a:	4603      	mov	r3, r0
  40077c:	83fb      	strh	r3, [r7, #30]
		 /* If CRC Matched */
		 if(crc==recvCrc)
  40077e:	8bfa      	ldrh	r2, [r7, #30]
  400780:	8bbb      	ldrh	r3, [r7, #28]
  400782:	429a      	cmp	r2, r3
  400784:	f040 81e0 	bne.w	400b48 <ParseMbusPkt+0x458>
		 {
			 /* Function Code Extraction */
			 fCode = buff[1];
  400788:	68bb      	ldr	r3, [r7, #8]
  40078a:	785b      	ldrb	r3, [r3, #1]
  40078c:	75fb      	strb	r3, [r7, #23]
			 switch(fCode)
  40078e:	7dfb      	ldrb	r3, [r7, #23]
  400790:	2b06      	cmp	r3, #6
  400792:	f000 80a9 	beq.w	4008e8 <ParseMbusPkt+0x1f8>
  400796:	2b10      	cmp	r3, #16
  400798:	f000 8114 	beq.w	4009c4 <ParseMbusPkt+0x2d4>
  40079c:	2b03      	cmp	r3, #3
  40079e:	f040 81c2 	bne.w	400b26 <ParseMbusPkt+0x436>
			 {
				 /* Read Analog Reg Func Code Recvd */
				 case 0x03:
				 numReg = (((uint16_t)buff[4])<<8)|buff[5];
  4007a2:	68bb      	ldr	r3, [r7, #8]
  4007a4:	3304      	adds	r3, #4
  4007a6:	781b      	ldrb	r3, [r3, #0]
  4007a8:	021b      	lsls	r3, r3, #8
  4007aa:	b21a      	sxth	r2, r3
  4007ac:	68bb      	ldr	r3, [r7, #8]
  4007ae:	3305      	adds	r3, #5
  4007b0:	781b      	ldrb	r3, [r3, #0]
  4007b2:	b21b      	sxth	r3, r3
  4007b4:	4313      	orrs	r3, r2
  4007b6:	b21b      	sxth	r3, r3
  4007b8:	833b      	strh	r3, [r7, #24]
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
  4007ba:	8b3b      	ldrh	r3, [r7, #24]
  4007bc:	2b00      	cmp	r3, #0
  4007be:	f000 8088 	beq.w	4008d2 <ParseMbusPkt+0x1e2>
  4007c2:	8b3b      	ldrh	r3, [r7, #24]
  4007c4:	2b7d      	cmp	r3, #125	; 0x7d
  4007c6:	f200 8084 	bhi.w	4008d2 <ParseMbusPkt+0x1e2>
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
  4007ca:	68bb      	ldr	r3, [r7, #8]
  4007cc:	3302      	adds	r3, #2
  4007ce:	781b      	ldrb	r3, [r3, #0]
  4007d0:	021b      	lsls	r3, r3, #8
  4007d2:	b21a      	sxth	r2, r3
  4007d4:	68bb      	ldr	r3, [r7, #8]
  4007d6:	3303      	adds	r3, #3
  4007d8:	781b      	ldrb	r3, [r3, #0]
  4007da:	b21b      	sxth	r3, r3
  4007dc:	4313      	orrs	r3, r2
  4007de:	b21b      	sxth	r3, r3
  4007e0:	837b      	strh	r3, [r7, #26]
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  4007e2:	8b7a      	ldrh	r2, [r7, #26]
  4007e4:	8b3b      	ldrh	r3, [r7, #24]
  4007e6:	4413      	add	r3, r2
  4007e8:	2b26      	cmp	r3, #38	; 0x26
  4007ea:	dc68      	bgt.n	4008be <ParseMbusPkt+0x1ce>
					 {
						 /* Process Read Reg Req */
						 /* Gen Valid Resp */
						 respBuff[0] = slaveAddr;
  4007ec:	687b      	ldr	r3, [r7, #4]
  4007ee:	7bfa      	ldrb	r2, [r7, #15]
  4007f0:	701a      	strb	r2, [r3, #0]
						 respBuff[1] = 0x03;
  4007f2:	687b      	ldr	r3, [r7, #4]
  4007f4:	3301      	adds	r3, #1
  4007f6:	2203      	movs	r2, #3
  4007f8:	701a      	strb	r2, [r3, #0]
						 respBuff[2] = (numReg *2); //No of Data Bytes
  4007fa:	687b      	ldr	r3, [r7, #4]
  4007fc:	3302      	adds	r3, #2
  4007fe:	8b3a      	ldrh	r2, [r7, #24]
  400800:	b2d2      	uxtb	r2, r2
  400802:	0052      	lsls	r2, r2, #1
  400804:	b2d2      	uxtb	r2, r2
  400806:	701a      	strb	r2, [r3, #0]
						 
						 i = 3;
  400808:	2303      	movs	r3, #3
  40080a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
						 for(ind = 0; ind < numReg; ind++)
  40080e:	2300      	movs	r3, #0
  400810:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  400814:	e028      	b.n	400868 <ParseMbusPkt+0x178>
						 {
							 respBuff[i++] = (mBusRegs[regAddr+ind]>>8);
  400816:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  40081a:	1c5a      	adds	r2, r3, #1
  40081c:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
  400820:	461a      	mov	r2, r3
  400822:	687b      	ldr	r3, [r7, #4]
  400824:	4413      	add	r3, r2
  400826:	8b79      	ldrh	r1, [r7, #26]
  400828:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
  40082c:	440a      	add	r2, r1
  40082e:	4963      	ldr	r1, [pc, #396]	; (4009bc <ParseMbusPkt+0x2cc>)
  400830:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
  400834:	0a12      	lsrs	r2, r2, #8
  400836:	b292      	uxth	r2, r2
  400838:	b2d2      	uxtb	r2, r2
  40083a:	701a      	strb	r2, [r3, #0]
							 respBuff[i++] = (mBusRegs[regAddr+ind]&0x00FF);
  40083c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400840:	1c5a      	adds	r2, r3, #1
  400842:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
  400846:	461a      	mov	r2, r3
  400848:	687b      	ldr	r3, [r7, #4]
  40084a:	4413      	add	r3, r2
  40084c:	8b79      	ldrh	r1, [r7, #26]
  40084e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
  400852:	440a      	add	r2, r1
  400854:	4959      	ldr	r1, [pc, #356]	; (4009bc <ParseMbusPkt+0x2cc>)
  400856:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
  40085a:	b2d2      	uxtb	r2, r2
  40085c:	701a      	strb	r2, [r3, #0]
						 respBuff[0] = slaveAddr;
						 respBuff[1] = 0x03;
						 respBuff[2] = (numReg *2); //No of Data Bytes
						 
						 i = 3;
						 for(ind = 0; ind < numReg; ind++)
  40085e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  400862:	3301      	adds	r3, #1
  400864:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  400868:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  40086c:	b29b      	uxth	r3, r3
  40086e:	8b3a      	ldrh	r2, [r7, #24]
  400870:	429a      	cmp	r2, r3
  400872:	d8d0      	bhi.n	400816 <ParseMbusPkt+0x126>
						 {
							 respBuff[i++] = (mBusRegs[regAddr+ind]>>8);
							 respBuff[i++] = (mBusRegs[regAddr+ind]&0x00FF);
						 }
						 crc = calcCRC(respBuff, i);
  400874:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400878:	4619      	mov	r1, r3
  40087a:	6878      	ldr	r0, [r7, #4]
  40087c:	4b4e      	ldr	r3, [pc, #312]	; (4009b8 <ParseMbusPkt+0x2c8>)
  40087e:	4798      	blx	r3
  400880:	4603      	mov	r3, r0
  400882:	83fb      	strh	r3, [r7, #30]
						 respBuff[i++] = (crc&0x00FF);
  400884:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400888:	1c5a      	adds	r2, r3, #1
  40088a:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
  40088e:	461a      	mov	r2, r3
  400890:	687b      	ldr	r3, [r7, #4]
  400892:	4413      	add	r3, r2
  400894:	8bfa      	ldrh	r2, [r7, #30]
  400896:	b2d2      	uxtb	r2, r2
  400898:	701a      	strb	r2, [r3, #0]
						 respBuff[i++] = (crc>>8);
  40089a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  40089e:	1c5a      	adds	r2, r3, #1
  4008a0:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
  4008a4:	461a      	mov	r2, r3
  4008a6:	687b      	ldr	r3, [r7, #4]
  4008a8:	4413      	add	r3, r2
  4008aa:	8bfa      	ldrh	r2, [r7, #30]
  4008ac:	0a12      	lsrs	r2, r2, #8
  4008ae:	b292      	uxth	r2, r2
  4008b0:	b2d2      	uxtb	r2, r2
  4008b2:	701a      	strb	r2, [r3, #0]
						 *respLen = i;
  4008b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4008b6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
  4008ba:	701a      	strb	r2, [r3, #0]
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  4008bc:	e013      	b.n	4008e6 <ParseMbusPkt+0x1f6>
						 *respLen = i;
					 }
					 else
					 {
						 /* Error code = 0x02 */
						 genErrRsp = 1;
  4008be:	2301      	movs	r3, #1
  4008c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						 expFuncCode = 0x83;
  4008c4:	2383      	movs	r3, #131	; 0x83
  4008c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						 expCode = 0x02;
  4008ca:	2302      	movs	r3, #2
  4008cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  4008d0:	e009      	b.n	4008e6 <ParseMbusPkt+0x1f6>
					 }
				 }
				 else
				 {
					 /* Error Code 0x03 */
					 genErrRsp = 1;
  4008d2:	2301      	movs	r3, #1
  4008d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					 expFuncCode = 0x83;
  4008d8:	2383      	movs	r3, #131	; 0x83
  4008da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					 expCode = 0x03;
  4008de:	2303      	movs	r3, #3
  4008e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 }
				 break;
  4008e4:	e12c      	b.n	400b40 <ParseMbusPkt+0x450>
  4008e6:	e12b      	b.n	400b40 <ParseMbusPkt+0x450>
				 /* Write Single Analog Reg */
				 case 0x06:
				 /* Output Value = 0x0000 or 0xFF00 */
				 regVal = (((uint16_t)buff[4])<<8)|(buff[5]);
  4008e8:	68bb      	ldr	r3, [r7, #8]
  4008ea:	3304      	adds	r3, #4
  4008ec:	781b      	ldrb	r3, [r3, #0]
  4008ee:	021b      	lsls	r3, r3, #8
  4008f0:	b21a      	sxth	r2, r3
  4008f2:	68bb      	ldr	r3, [r7, #8]
  4008f4:	3305      	adds	r3, #5
  4008f6:	781b      	ldrb	r3, [r3, #0]
  4008f8:	b21b      	sxth	r3, r3
  4008fa:	4313      	orrs	r3, r2
  4008fc:	b21b      	sxth	r3, r3
  4008fe:	84fb      	strh	r3, [r7, #38]	; 0x26
				 if(1)
				 {
					 /* Output Address = OK */
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
  400900:	68bb      	ldr	r3, [r7, #8]
  400902:	3302      	adds	r3, #2
  400904:	781b      	ldrb	r3, [r3, #0]
  400906:	021b      	lsls	r3, r3, #8
  400908:	b21a      	sxth	r2, r3
  40090a:	68bb      	ldr	r3, [r7, #8]
  40090c:	3303      	adds	r3, #3
  40090e:	781b      	ldrb	r3, [r3, #0]
  400910:	b21b      	sxth	r3, r3
  400912:	4313      	orrs	r3, r2
  400914:	b21b      	sxth	r3, r3
  400916:	837b      	strh	r3, [r7, #26]
					 if(regAddr <= MBUS_MAX_REGS)
  400918:	8b7b      	ldrh	r3, [r7, #26]
  40091a:	2b26      	cmp	r3, #38	; 0x26
  40091c:	d841      	bhi.n	4009a2 <ParseMbusPkt+0x2b2>
					 {
						 /* Gen Valid Mbus Resp */
						 mBusRegs[regAddr] = regVal;
  40091e:	8b7b      	ldrh	r3, [r7, #26]
  400920:	4926      	ldr	r1, [pc, #152]	; (4009bc <ParseMbusPkt+0x2cc>)
  400922:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  400924:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						 /* Success Error Code */
						 respBuff[0] = slaveAddr;
  400928:	687b      	ldr	r3, [r7, #4]
  40092a:	7bfa      	ldrb	r2, [r7, #15]
  40092c:	701a      	strb	r2, [r3, #0]
						 respBuff[1] = 0x06;
  40092e:	687b      	ldr	r3, [r7, #4]
  400930:	3301      	adds	r3, #1
  400932:	2206      	movs	r2, #6
  400934:	701a      	strb	r2, [r3, #0]
						 respBuff[2] = buff[2];
  400936:	687b      	ldr	r3, [r7, #4]
  400938:	3302      	adds	r3, #2
  40093a:	68ba      	ldr	r2, [r7, #8]
  40093c:	7892      	ldrb	r2, [r2, #2]
  40093e:	701a      	strb	r2, [r3, #0]
						 respBuff[3] = buff[3];
  400940:	687b      	ldr	r3, [r7, #4]
  400942:	3303      	adds	r3, #3
  400944:	68ba      	ldr	r2, [r7, #8]
  400946:	78d2      	ldrb	r2, [r2, #3]
  400948:	701a      	strb	r2, [r3, #0]
						 respBuff[4] = buff[4];
  40094a:	687b      	ldr	r3, [r7, #4]
  40094c:	3304      	adds	r3, #4
  40094e:	68ba      	ldr	r2, [r7, #8]
  400950:	7912      	ldrb	r2, [r2, #4]
  400952:	701a      	strb	r2, [r3, #0]
						 respBuff[5] = buff[5];
  400954:	687b      	ldr	r3, [r7, #4]
  400956:	3305      	adds	r3, #5
  400958:	68ba      	ldr	r2, [r7, #8]
  40095a:	7952      	ldrb	r2, [r2, #5]
  40095c:	701a      	strb	r2, [r3, #0]
						 crc = calcCRC(respBuff, 6);
  40095e:	2106      	movs	r1, #6
  400960:	6878      	ldr	r0, [r7, #4]
  400962:	4b15      	ldr	r3, [pc, #84]	; (4009b8 <ParseMbusPkt+0x2c8>)
  400964:	4798      	blx	r3
  400966:	4603      	mov	r3, r0
  400968:	83fb      	strh	r3, [r7, #30]
						 respBuff[6] = (crc&0x00FF);
  40096a:	687b      	ldr	r3, [r7, #4]
  40096c:	3306      	adds	r3, #6
  40096e:	8bfa      	ldrh	r2, [r7, #30]
  400970:	b2d2      	uxtb	r2, r2
  400972:	701a      	strb	r2, [r3, #0]
						 respBuff[7] = (crc>>8);
  400974:	687b      	ldr	r3, [r7, #4]
  400976:	3307      	adds	r3, #7
  400978:	8bfa      	ldrh	r2, [r7, #30]
  40097a:	0a12      	lsrs	r2, r2, #8
  40097c:	b292      	uxth	r2, r2
  40097e:	b2d2      	uxtb	r2, r2
  400980:	701a      	strb	r2, [r3, #0]
						 *respLen = 8;
  400982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400984:	2208      	movs	r2, #8
  400986:	701a      	strb	r2, [r3, #0]
						 
						 /* Process Write Reg Req */
						 if(writeFunc!=NULL)
  400988:	4b0d      	ldr	r3, [pc, #52]	; (4009c0 <ParseMbusPkt+0x2d0>)
  40098a:	681b      	ldr	r3, [r3, #0]
  40098c:	2b00      	cmp	r3, #0
  40098e:	f000 80d6 	beq.w	400b3e <ParseMbusPkt+0x44e>
							writeFunc(mBusRegs,regAddr,1);
  400992:	4b0b      	ldr	r3, [pc, #44]	; (4009c0 <ParseMbusPkt+0x2d0>)
  400994:	681b      	ldr	r3, [r3, #0]
  400996:	8b7a      	ldrh	r2, [r7, #26]
  400998:	b2d1      	uxtb	r1, r2
  40099a:	2201      	movs	r2, #1
  40099c:	4807      	ldr	r0, [pc, #28]	; (4009bc <ParseMbusPkt+0x2cc>)
  40099e:	4798      	blx	r3
					 /* Illegal Data Value Error */
					 genErrRsp = 1;
					 expFuncCode = 0x86;
					 expCode = 0x03;
				 }
				 break;
  4009a0:	e0cd      	b.n	400b3e <ParseMbusPkt+0x44e>
							writeFunc(mBusRegs,regAddr,1);
					 }
					 else
					 {
						 /* Illegal Data Address Error */
						 genErrRsp = 1;
  4009a2:	2301      	movs	r3, #1
  4009a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						 expFuncCode = 0x86;
  4009a8:	2386      	movs	r3, #134	; 0x86
  4009aa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						 expCode = 0x02;
  4009ae:	2302      	movs	r3, #2
  4009b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					 /* Illegal Data Value Error */
					 genErrRsp = 1;
					 expFuncCode = 0x86;
					 expCode = 0x03;
				 }
				 break;
  4009b4:	e0c3      	b.n	400b3e <ParseMbusPkt+0x44e>
  4009b6:	bf00      	nop
  4009b8:	00400ba9 	.word	0x00400ba9
  4009bc:	2000048c 	.word	0x2000048c
  4009c0:	20002714 	.word	0x20002714
				 case 0x10: /* Write Mul Register */
				 numReg = (((uint16_t)buff[4])<<8)|buff[5];
  4009c4:	68bb      	ldr	r3, [r7, #8]
  4009c6:	3304      	adds	r3, #4
  4009c8:	781b      	ldrb	r3, [r3, #0]
  4009ca:	021b      	lsls	r3, r3, #8
  4009cc:	b21a      	sxth	r2, r3
  4009ce:	68bb      	ldr	r3, [r7, #8]
  4009d0:	3305      	adds	r3, #5
  4009d2:	781b      	ldrb	r3, [r3, #0]
  4009d4:	b21b      	sxth	r3, r3
  4009d6:	4313      	orrs	r3, r2
  4009d8:	b21b      	sxth	r3, r3
  4009da:	833b      	strh	r3, [r7, #24]
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
  4009dc:	8b3b      	ldrh	r3, [r7, #24]
  4009de:	2b00      	cmp	r3, #0
  4009e0:	f000 8096 	beq.w	400b10 <ParseMbusPkt+0x420>
  4009e4:	8b3b      	ldrh	r3, [r7, #24]
  4009e6:	2b7d      	cmp	r3, #125	; 0x7d
  4009e8:	f200 8092 	bhi.w	400b10 <ParseMbusPkt+0x420>
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
  4009ec:	68bb      	ldr	r3, [r7, #8]
  4009ee:	3302      	adds	r3, #2
  4009f0:	781b      	ldrb	r3, [r3, #0]
  4009f2:	021b      	lsls	r3, r3, #8
  4009f4:	b21a      	sxth	r2, r3
  4009f6:	68bb      	ldr	r3, [r7, #8]
  4009f8:	3303      	adds	r3, #3
  4009fa:	781b      	ldrb	r3, [r3, #0]
  4009fc:	b21b      	sxth	r3, r3
  4009fe:	4313      	orrs	r3, r2
  400a00:	b21b      	sxth	r3, r3
  400a02:	837b      	strh	r3, [r7, #26]
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  400a04:	8b7a      	ldrh	r2, [r7, #26]
  400a06:	8b3b      	ldrh	r3, [r7, #24]
  400a08:	4413      	add	r3, r2
  400a0a:	2b26      	cmp	r3, #38	; 0x26
  400a0c:	dc76      	bgt.n	400afc <ParseMbusPkt+0x40c>
					 {
						 /* Gen Valid Resp */
						 respBuff[0] = slaveAddr;
  400a0e:	687b      	ldr	r3, [r7, #4]
  400a10:	7bfa      	ldrb	r2, [r7, #15]
  400a12:	701a      	strb	r2, [r3, #0]
						 respBuff[1] = 0x10;
  400a14:	687b      	ldr	r3, [r7, #4]
  400a16:	3301      	adds	r3, #1
  400a18:	2210      	movs	r2, #16
  400a1a:	701a      	strb	r2, [r3, #0]
						 respBuff[2] = buff[2];
  400a1c:	687b      	ldr	r3, [r7, #4]
  400a1e:	3302      	adds	r3, #2
  400a20:	68ba      	ldr	r2, [r7, #8]
  400a22:	7892      	ldrb	r2, [r2, #2]
  400a24:	701a      	strb	r2, [r3, #0]
						 respBuff[3] = buff[3];
  400a26:	687b      	ldr	r3, [r7, #4]
  400a28:	3303      	adds	r3, #3
  400a2a:	68ba      	ldr	r2, [r7, #8]
  400a2c:	78d2      	ldrb	r2, [r2, #3]
  400a2e:	701a      	strb	r2, [r3, #0]
						 respBuff[4] = buff[4];
  400a30:	687b      	ldr	r3, [r7, #4]
  400a32:	3304      	adds	r3, #4
  400a34:	68ba      	ldr	r2, [r7, #8]
  400a36:	7912      	ldrb	r2, [r2, #4]
  400a38:	701a      	strb	r2, [r3, #0]
						 respBuff[5] = buff[5];
  400a3a:	687b      	ldr	r3, [r7, #4]
  400a3c:	3305      	adds	r3, #5
  400a3e:	68ba      	ldr	r2, [r7, #8]
  400a40:	7952      	ldrb	r2, [r2, #5]
  400a42:	701a      	strb	r2, [r3, #0]
						 crc = calcCRC(respBuff, 6);
  400a44:	2106      	movs	r1, #6
  400a46:	6878      	ldr	r0, [r7, #4]
  400a48:	4b54      	ldr	r3, [pc, #336]	; (400b9c <ParseMbusPkt+0x4ac>)
  400a4a:	4798      	blx	r3
  400a4c:	4603      	mov	r3, r0
  400a4e:	83fb      	strh	r3, [r7, #30]
						 respBuff[6] = (crc&0x00FF);
  400a50:	687b      	ldr	r3, [r7, #4]
  400a52:	3306      	adds	r3, #6
  400a54:	8bfa      	ldrh	r2, [r7, #30]
  400a56:	b2d2      	uxtb	r2, r2
  400a58:	701a      	strb	r2, [r3, #0]
						 respBuff[7] = (crc>>8);
  400a5a:	687b      	ldr	r3, [r7, #4]
  400a5c:	3307      	adds	r3, #7
  400a5e:	8bfa      	ldrh	r2, [r7, #30]
  400a60:	0a12      	lsrs	r2, r2, #8
  400a62:	b292      	uxth	r2, r2
  400a64:	b2d2      	uxtb	r2, r2
  400a66:	701a      	strb	r2, [r3, #0]
						 *respLen = 8;
  400a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400a6a:	2208      	movs	r2, #8
  400a6c:	701a      	strb	r2, [r3, #0]
						 
						 /* Byte count */
						 numReg = 7 + buff[6];
  400a6e:	68bb      	ldr	r3, [r7, #8]
  400a70:	3306      	adds	r3, #6
  400a72:	781b      	ldrb	r3, [r3, #0]
  400a74:	b29b      	uxth	r3, r3
  400a76:	3307      	adds	r3, #7
  400a78:	833b      	strh	r3, [r7, #24]
						 ind = 0;
  400a7a:	2300      	movs	r3, #0
  400a7c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
						 for(i = 7; i < numReg; i++)
  400a80:	2307      	movs	r3, #7
  400a82:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  400a86:	e02a      	b.n	400ade <ParseMbusPkt+0x3ee>
						 {
							 if(i%2==1)
  400a88:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400a8c:	f003 0301 	and.w	r3, r3, #1
  400a90:	b2db      	uxtb	r3, r3
  400a92:	2b00      	cmp	r3, #0
  400a94:	d008      	beq.n	400aa8 <ParseMbusPkt+0x3b8>
							 {
								 regVal = ((uint16_t)buff[i])<<8;
  400a96:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400a9a:	68ba      	ldr	r2, [r7, #8]
  400a9c:	4413      	add	r3, r2
  400a9e:	781b      	ldrb	r3, [r3, #0]
  400aa0:	b29b      	uxth	r3, r3
  400aa2:	021b      	lsls	r3, r3, #8
  400aa4:	84fb      	strh	r3, [r7, #38]	; 0x26
  400aa6:	e015      	b.n	400ad4 <ParseMbusPkt+0x3e4>
							 }
							 else
							 {
								 regVal |= buff[i];
  400aa8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400aac:	68ba      	ldr	r2, [r7, #8]
  400aae:	4413      	add	r3, r2
  400ab0:	781b      	ldrb	r3, [r3, #0]
  400ab2:	b29a      	uxth	r2, r3
  400ab4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  400ab6:	4313      	orrs	r3, r2
  400ab8:	84fb      	strh	r3, [r7, #38]	; 0x26
								 mBusRegs[regAddr+ind] = regVal;
  400aba:	8b7a      	ldrh	r2, [r7, #26]
  400abc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  400ac0:	4413      	add	r3, r2
  400ac2:	4937      	ldr	r1, [pc, #220]	; (400ba0 <ParseMbusPkt+0x4b0>)
  400ac4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  400ac6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								 ind ++;
  400aca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  400ace:	3301      	adds	r3, #1
  400ad0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
						 *respLen = 8;
						 
						 /* Byte count */
						 numReg = 7 + buff[6];
						 ind = 0;
						 for(i = 7; i < numReg; i++)
  400ad4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400ad8:	3301      	adds	r3, #1
  400ada:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  400ade:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400ae2:	b29b      	uxth	r3, r3
  400ae4:	8b3a      	ldrh	r2, [r7, #24]
  400ae6:	429a      	cmp	r2, r3
  400ae8:	d8ce      	bhi.n	400a88 <ParseMbusPkt+0x398>
								 mBusRegs[regAddr+ind] = regVal;
								 ind ++;
							 }
						 }
						 /* Process Write Reg Req */
						 writeFunc(mBusRegs,regAddr,ind);
  400aea:	4b2e      	ldr	r3, [pc, #184]	; (400ba4 <ParseMbusPkt+0x4b4>)
  400aec:	681b      	ldr	r3, [r3, #0]
  400aee:	8b7a      	ldrh	r2, [r7, #26]
  400af0:	b2d1      	uxtb	r1, r2
  400af2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
  400af6:	482a      	ldr	r0, [pc, #168]	; (400ba0 <ParseMbusPkt+0x4b0>)
  400af8:	4798      	blx	r3
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  400afa:	e013      	b.n	400b24 <ParseMbusPkt+0x434>
						 writeFunc(mBusRegs,regAddr,ind);
					 }
					 else
					 {
						 /* Error code = 0x02 */
						 genErrRsp = 1;
  400afc:	2301      	movs	r3, #1
  400afe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						 expFuncCode = 0x90;
  400b02:	2390      	movs	r3, #144	; 0x90
  400b04:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						 expCode = 0x02;
  400b08:	2302      	movs	r3, #2
  400b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  400b0e:	e009      	b.n	400b24 <ParseMbusPkt+0x434>
					 }
				 }
				 else
				 {
					 /* Error Code 0x03 */
					 genErrRsp = 1;
  400b10:	2301      	movs	r3, #1
  400b12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					 expFuncCode = 0x90;
  400b16:	2390      	movs	r3, #144	; 0x90
  400b18:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					 expCode = 0x03;
  400b1c:	2303      	movs	r3, #3
  400b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 }
				 break;
  400b22:	e00d      	b.n	400b40 <ParseMbusPkt+0x450>
  400b24:	e00c      	b.n	400b40 <ParseMbusPkt+0x450>
				 default:
				 /* Illegal Function Code Error */
				 /* Set MSB of recvd Function code */
				 /* Error Code 0x01 */
				 expFuncCode = fCode|(1<<7);
  400b26:	7dfb      	ldrb	r3, [r7, #23]
  400b28:	f063 037f 	orn	r3, r3, #127	; 0x7f
  400b2c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				 expCode = 0x01;
  400b30:	2301      	movs	r3, #1
  400b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 genErrRsp = 1;
  400b36:	2301      	movs	r3, #1
  400b38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				 break;
  400b3c:	e000      	b.n	400b40 <ParseMbusPkt+0x450>
					 /* Illegal Data Value Error */
					 genErrRsp = 1;
					 expFuncCode = 0x86;
					 expCode = 0x03;
				 }
				 break;
  400b3e:	bf00      	nop
	 {
		 /* Calc CRC */
		 recvCrc = (((uint16_t)buff[len-1])<<8)|buff[len-2];
		 crc = calcCRC(buff,len-2);
		 /* If CRC Matched */
		 if(crc==recvCrc)
  400b40:	e002      	b.n	400b48 <ParseMbusPkt+0x458>
			 }
		 }
	 }
	 else
	 {
		 *respLen = 0;
  400b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400b44:	2200      	movs	r2, #0
  400b46:	701a      	strb	r2, [r3, #0]
	 }
	 
	 if(genErrRsp)
  400b48:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
  400b4c:	2b00      	cmp	r3, #0
  400b4e:	d021      	beq.n	400b94 <ParseMbusPkt+0x4a4>
	 {
		 respBuff[0] = slaveAddr;
  400b50:	687b      	ldr	r3, [r7, #4]
  400b52:	7bfa      	ldrb	r2, [r7, #15]
  400b54:	701a      	strb	r2, [r3, #0]
		 respBuff[1] = expFuncCode;
  400b56:	687b      	ldr	r3, [r7, #4]
  400b58:	3301      	adds	r3, #1
  400b5a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
  400b5e:	701a      	strb	r2, [r3, #0]
		 respBuff[2] = expCode;
  400b60:	687b      	ldr	r3, [r7, #4]
  400b62:	3302      	adds	r3, #2
  400b64:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
  400b68:	701a      	strb	r2, [r3, #0]
		 crc = calcCRC(respBuff, 3);
  400b6a:	2103      	movs	r1, #3
  400b6c:	6878      	ldr	r0, [r7, #4]
  400b6e:	4b0b      	ldr	r3, [pc, #44]	; (400b9c <ParseMbusPkt+0x4ac>)
  400b70:	4798      	blx	r3
  400b72:	4603      	mov	r3, r0
  400b74:	83fb      	strh	r3, [r7, #30]
		 respBuff[3] = (crc&0x00FF);
  400b76:	687b      	ldr	r3, [r7, #4]
  400b78:	3303      	adds	r3, #3
  400b7a:	8bfa      	ldrh	r2, [r7, #30]
  400b7c:	b2d2      	uxtb	r2, r2
  400b7e:	701a      	strb	r2, [r3, #0]
		 respBuff[4] = (crc>>8);
  400b80:	687b      	ldr	r3, [r7, #4]
  400b82:	3304      	adds	r3, #4
  400b84:	8bfa      	ldrh	r2, [r7, #30]
  400b86:	0a12      	lsrs	r2, r2, #8
  400b88:	b292      	uxth	r2, r2
  400b8a:	b2d2      	uxtb	r2, r2
  400b8c:	701a      	strb	r2, [r3, #0]
		 *respLen = 5;
  400b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400b90:	2205      	movs	r2, #5
  400b92:	701a      	strb	r2, [r3, #0]
	 }
 }
  400b94:	bf00      	nop
  400b96:	3728      	adds	r7, #40	; 0x28
  400b98:	46bd      	mov	sp, r7
  400b9a:	bd80      	pop	{r7, pc}
  400b9c:	00400ba9 	.word	0x00400ba9
  400ba0:	2000048c 	.word	0x2000048c
  400ba4:	20002714 	.word	0x20002714

00400ba8 <calcCRC>:

 uint16_t calcCRC(uint8_t *buff, uint8_t len)
 {
  400ba8:	b480      	push	{r7}
  400baa:	b085      	sub	sp, #20
  400bac:	af00      	add	r7, sp, #0
  400bae:	6078      	str	r0, [r7, #4]
  400bb0:	460b      	mov	r3, r1
  400bb2:	70fb      	strb	r3, [r7, #3]
	 uint16_t crcReg = 0xFFFF;
  400bb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400bb8:	81fb      	strh	r3, [r7, #14]
	 uint8_t i = 0, j=0;
  400bba:	2300      	movs	r3, #0
  400bbc:	737b      	strb	r3, [r7, #13]
  400bbe:	2300      	movs	r3, #0
  400bc0:	733b      	strb	r3, [r7, #12]

	 for(i=0;i<len;i++)
  400bc2:	2300      	movs	r3, #0
  400bc4:	737b      	strb	r3, [r7, #13]
  400bc6:	e026      	b.n	400c16 <calcCRC+0x6e>
	 {
		 crcReg = crcReg ^ buff[i];
  400bc8:	7b7b      	ldrb	r3, [r7, #13]
  400bca:	687a      	ldr	r2, [r7, #4]
  400bcc:	4413      	add	r3, r2
  400bce:	781b      	ldrb	r3, [r3, #0]
  400bd0:	b29a      	uxth	r2, r3
  400bd2:	89fb      	ldrh	r3, [r7, #14]
  400bd4:	4053      	eors	r3, r2
  400bd6:	81fb      	strh	r3, [r7, #14]
		 for(j=0;j<8;j++)
  400bd8:	2300      	movs	r3, #0
  400bda:	733b      	strb	r3, [r7, #12]
  400bdc:	e015      	b.n	400c0a <calcCRC+0x62>
		 {

			 if(bitIsSet(crcReg,0))
  400bde:	89fb      	ldrh	r3, [r7, #14]
  400be0:	f003 0301 	and.w	r3, r3, #1
  400be4:	2b00      	cmp	r3, #0
  400be6:	d00a      	beq.n	400bfe <calcCRC+0x56>
			 {
				 crcReg = crcReg >> 1;
  400be8:	89fb      	ldrh	r3, [r7, #14]
  400bea:	085b      	lsrs	r3, r3, #1
  400bec:	81fb      	strh	r3, [r7, #14]
				 crcReg = crcReg ^ MBUS_CRC_POLY;
  400bee:	89fb      	ldrh	r3, [r7, #14]
  400bf0:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
  400bf4:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
  400bf8:	43db      	mvns	r3, r3
  400bfa:	81fb      	strh	r3, [r7, #14]
  400bfc:	e002      	b.n	400c04 <calcCRC+0x5c>
			 }
			 else
			 {
				 crcReg = crcReg >> 1;
  400bfe:	89fb      	ldrh	r3, [r7, #14]
  400c00:	085b      	lsrs	r3, r3, #1
  400c02:	81fb      	strh	r3, [r7, #14]
	 uint8_t i = 0, j=0;

	 for(i=0;i<len;i++)
	 {
		 crcReg = crcReg ^ buff[i];
		 for(j=0;j<8;j++)
  400c04:	7b3b      	ldrb	r3, [r7, #12]
  400c06:	3301      	adds	r3, #1
  400c08:	733b      	strb	r3, [r7, #12]
  400c0a:	7b3b      	ldrb	r3, [r7, #12]
  400c0c:	2b07      	cmp	r3, #7
  400c0e:	d9e6      	bls.n	400bde <calcCRC+0x36>
 uint16_t calcCRC(uint8_t *buff, uint8_t len)
 {
	 uint16_t crcReg = 0xFFFF;
	 uint8_t i = 0, j=0;

	 for(i=0;i<len;i++)
  400c10:	7b7b      	ldrb	r3, [r7, #13]
  400c12:	3301      	adds	r3, #1
  400c14:	737b      	strb	r3, [r7, #13]
  400c16:	7b7a      	ldrb	r2, [r7, #13]
  400c18:	78fb      	ldrb	r3, [r7, #3]
  400c1a:	429a      	cmp	r2, r3
  400c1c:	d3d4      	bcc.n	400bc8 <calcCRC+0x20>
			 {
				 crcReg = crcReg >> 1;
			 }
		 }
	 }
	 return crcReg;
  400c1e:	89fb      	ldrh	r3, [r7, #14]
 }
  400c20:	4618      	mov	r0, r3
  400c22:	3714      	adds	r7, #20
  400c24:	46bd      	mov	sp, r7
  400c26:	bc80      	pop	{r7}
  400c28:	4770      	bx	lr
  400c2a:	bf00      	nop

00400c2c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400c2c:	b480      	push	{r7}
  400c2e:	b083      	sub	sp, #12
  400c30:	af00      	add	r7, sp, #0
  400c32:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400c34:	687b      	ldr	r3, [r7, #4]
  400c36:	2b07      	cmp	r3, #7
  400c38:	d825      	bhi.n	400c86 <osc_get_rate+0x5a>
  400c3a:	a201      	add	r2, pc, #4	; (adr r2, 400c40 <osc_get_rate+0x14>)
  400c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400c40:	00400c61 	.word	0x00400c61
  400c44:	00400c67 	.word	0x00400c67
  400c48:	00400c6d 	.word	0x00400c6d
  400c4c:	00400c73 	.word	0x00400c73
  400c50:	00400c77 	.word	0x00400c77
  400c54:	00400c7b 	.word	0x00400c7b
  400c58:	00400c7f 	.word	0x00400c7f
  400c5c:	00400c83 	.word	0x00400c83
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400c60:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400c64:	e010      	b.n	400c88 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400c6a:	e00d      	b.n	400c88 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400c6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400c70:	e00a      	b.n	400c88 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400c72:	4b08      	ldr	r3, [pc, #32]	; (400c94 <osc_get_rate+0x68>)
  400c74:	e008      	b.n	400c88 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400c76:	4b08      	ldr	r3, [pc, #32]	; (400c98 <osc_get_rate+0x6c>)
  400c78:	e006      	b.n	400c88 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400c7a:	4b08      	ldr	r3, [pc, #32]	; (400c9c <osc_get_rate+0x70>)
  400c7c:	e004      	b.n	400c88 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400c7e:	4b07      	ldr	r3, [pc, #28]	; (400c9c <osc_get_rate+0x70>)
  400c80:	e002      	b.n	400c88 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400c82:	4b06      	ldr	r3, [pc, #24]	; (400c9c <osc_get_rate+0x70>)
  400c84:	e000      	b.n	400c88 <osc_get_rate+0x5c>
	}

	return 0;
  400c86:	2300      	movs	r3, #0
}
  400c88:	4618      	mov	r0, r3
  400c8a:	370c      	adds	r7, #12
  400c8c:	46bd      	mov	sp, r7
  400c8e:	bc80      	pop	{r7}
  400c90:	4770      	bx	lr
  400c92:	bf00      	nop
  400c94:	003d0900 	.word	0x003d0900
  400c98:	007a1200 	.word	0x007a1200
  400c9c:	00b71b00 	.word	0x00b71b00

00400ca0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400ca0:	b580      	push	{r7, lr}
  400ca2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400ca4:	2006      	movs	r0, #6
  400ca6:	4b04      	ldr	r3, [pc, #16]	; (400cb8 <sysclk_get_main_hz+0x18>)
  400ca8:	4798      	blx	r3
  400caa:	4602      	mov	r2, r0
  400cac:	4613      	mov	r3, r2
  400cae:	009b      	lsls	r3, r3, #2
  400cb0:	4413      	add	r3, r2
  400cb2:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400cb4:	4618      	mov	r0, r3
  400cb6:	bd80      	pop	{r7, pc}
  400cb8:	00400c2d 	.word	0x00400c2d

00400cbc <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400cbc:	b580      	push	{r7, lr}
  400cbe:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400cc0:	4b02      	ldr	r3, [pc, #8]	; (400ccc <sysclk_get_cpu_hz+0x10>)
  400cc2:	4798      	blx	r3
  400cc4:	4603      	mov	r3, r0
  400cc6:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400cc8:	4618      	mov	r0, r3
  400cca:	bd80      	pop	{r7, pc}
  400ccc:	00400ca1 	.word	0x00400ca1

00400cd0 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  400cd0:	b580      	push	{r7, lr}
  400cd2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400cd4:	4b02      	ldr	r3, [pc, #8]	; (400ce0 <sysclk_get_peripheral_hz+0x10>)
  400cd6:	4798      	blx	r3
  400cd8:	4603      	mov	r3, r0
  400cda:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400cdc:	4618      	mov	r0, r3
  400cde:	bd80      	pop	{r7, pc}
  400ce0:	00400ca1 	.word	0x00400ca1

00400ce4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400ce4:	b580      	push	{r7, lr}
  400ce6:	b082      	sub	sp, #8
  400ce8:	af00      	add	r7, sp, #0
  400cea:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400cec:	6878      	ldr	r0, [r7, #4]
  400cee:	4b03      	ldr	r3, [pc, #12]	; (400cfc <sysclk_enable_peripheral_clock+0x18>)
  400cf0:	4798      	blx	r3
}
  400cf2:	bf00      	nop
  400cf4:	3708      	adds	r7, #8
  400cf6:	46bd      	mov	sp, r7
  400cf8:	bd80      	pop	{r7, pc}
  400cfa:	bf00      	nop
  400cfc:	004049c9 	.word	0x004049c9

00400d00 <RTCIntHandler>:

static void InitTWI(void);

/* RTC 1 Min ISR */
void RTCIntHandler(uint32_t ul_id, uint32_t ul_mask)
{
  400d00:	b480      	push	{r7}
  400d02:	b083      	sub	sp, #12
  400d04:	af00      	add	r7, sp, #0
  400d06:	6078      	str	r0, [r7, #4]
  400d08:	6039      	str	r1, [r7, #0]
    if (PIN_RTC_INT_PIO_ID != ul_id || PIN_RTC_INT_MASK != ul_mask)
  400d0a:	687b      	ldr	r3, [r7, #4]
  400d0c:	2b0b      	cmp	r3, #11
  400d0e:	d113      	bne.n	400d38 <RTCIntHandler+0x38>
  400d10:	683b      	ldr	r3, [r7, #0]
  400d12:	2b01      	cmp	r3, #1
  400d14:	d110      	bne.n	400d38 <RTCIntHandler+0x38>
		return;
	
    /* If Auto Mode */
    if(!mBusRegs[MBUS_REG_OPMODE])
  400d16:	4b0b      	ldr	r3, [pc, #44]	; (400d44 <RTCIntHandler+0x44>)
  400d18:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
  400d1a:	2b00      	cmp	r3, #0
  400d1c:	d10d      	bne.n	400d3a <RTCIntHandler+0x3a>
    {
        /* Increment Time Var */
        if(minCtr < TRACKING_INTERVAL)
  400d1e:	4b0a      	ldr	r3, [pc, #40]	; (400d48 <RTCIntHandler+0x48>)
  400d20:	781b      	ldrb	r3, [r3, #0]
  400d22:	b2db      	uxtb	r3, r3
  400d24:	2b02      	cmp	r3, #2
  400d26:	d808      	bhi.n	400d3a <RTCIntHandler+0x3a>
            minCtr++;
  400d28:	4b07      	ldr	r3, [pc, #28]	; (400d48 <RTCIntHandler+0x48>)
  400d2a:	781b      	ldrb	r3, [r3, #0]
  400d2c:	b2db      	uxtb	r3, r3
  400d2e:	3301      	adds	r3, #1
  400d30:	b2da      	uxtb	r2, r3
  400d32:	4b05      	ldr	r3, [pc, #20]	; (400d48 <RTCIntHandler+0x48>)
  400d34:	701a      	strb	r2, [r3, #0]
  400d36:	e000      	b.n	400d3a <RTCIntHandler+0x3a>

/* RTC 1 Min ISR */
void RTCIntHandler(uint32_t ul_id, uint32_t ul_mask)
{
    if (PIN_RTC_INT_PIO_ID != ul_id || PIN_RTC_INT_MASK != ul_mask)
		return;
  400d38:	bf00      	nop
    {
        /* Increment Time Var */
        if(minCtr < TRACKING_INTERVAL)
            minCtr++;
    }
}
  400d3a:	370c      	adds	r7, #12
  400d3c:	46bd      	mov	sp, r7
  400d3e:	bc80      	pop	{r7}
  400d40:	4770      	bx	lr
  400d42:	bf00      	nop
  400d44:	2000048c 	.word	0x2000048c
  400d48:	200004d9 	.word	0x200004d9

00400d4c <vPvTrackerTask>:

void vPvTrackerTask(void *pvParameters)
{
  400d4c:	b580      	push	{r7, lr}
  400d4e:	b084      	sub	sp, #16
  400d50:	af00      	add	r7, sp, #0
  400d52:	6078      	str	r0, [r7, #4]
    uint8_t status = 0;
  400d54:	2300      	movs	r3, #0
  400d56:	73fb      	strb	r3, [r7, #15]
    #endif
	
	/* These Init routines are shifted here because they should only be called after the scheduler has started */
	/* Init Accelerometer */
	#ifndef ICM20648_USE_RTOS_API
		ICMInitialize(BOARD_TWI, ICM_ADDR);
  400d58:	2169      	movs	r1, #105	; 0x69
  400d5a:	4816      	ldr	r0, [pc, #88]	; (400db4 <vPvTrackerTask+0x68>)
  400d5c:	4b16      	ldr	r3, [pc, #88]	; (400db8 <vPvTrackerTask+0x6c>)
  400d5e:	4798      	blx	r3
		ICMInitializeTo(twiPort, ICM_ADDR, 50);
	#endif

	/* Init RTC 1 min Alarm */
	#ifndef DS3231_USE_RTOS_API
		DSEnAL2(BOARD_TWI, 1);
  400d60:	2101      	movs	r1, #1
  400d62:	4814      	ldr	r0, [pc, #80]	; (400db4 <vPvTrackerTask+0x68>)
  400d64:	4b15      	ldr	r3, [pc, #84]	; (400dbc <vPvTrackerTask+0x70>)
  400d66:	4798      	blx	r3

	while(1)
    {
		/* Clear RTC interrupt flag */
		#ifndef DS3231_USE_RTOS_API
			DSReadByte(BOARD_TWI, DS_REG_STAT,&status);
  400d68:	f107 030f 	add.w	r3, r7, #15
  400d6c:	461a      	mov	r2, r3
  400d6e:	210f      	movs	r1, #15
  400d70:	4810      	ldr	r0, [pc, #64]	; (400db4 <vPvTrackerTask+0x68>)
  400d72:	4b13      	ldr	r3, [pc, #76]	; (400dc0 <vPvTrackerTask+0x74>)
  400d74:	4798      	blx	r3
		#else
			DSReadByteTo(twiPort, DS_REG_STAT,&status,50);
		#endif
        if(status&0x02)
  400d76:	7bfb      	ldrb	r3, [r7, #15]
  400d78:	f003 0302 	and.w	r3, r3, #2
  400d7c:	2b00      	cmp	r3, #0
  400d7e:	d004      	beq.n	400d8a <vPvTrackerTask+0x3e>
        {
            /* Clear Status Reg */
			#ifndef DS3231_USE_RTOS_API
				DSWriteByte(BOARD_TWI, DS_REG_STAT, 0x00);
  400d80:	2200      	movs	r2, #0
  400d82:	210f      	movs	r1, #15
  400d84:	480b      	ldr	r0, [pc, #44]	; (400db4 <vPvTrackerTask+0x68>)
  400d86:	4b0f      	ldr	r3, [pc, #60]	; (400dc4 <vPvTrackerTask+0x78>)
  400d88:	4798      	blx	r3
				DSWriteByteTo(twiPort, DS_REG_STAT, 0x00, 50);
			#endif
        }
        
        /* In Tracking / Auto Mode */
        if(!mBusRegs[MBUS_REG_OPMODE])
  400d8a:	4b0f      	ldr	r3, [pc, #60]	; (400dc8 <vPvTrackerTask+0x7c>)
  400d8c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
  400d8e:	2b00      	cmp	r3, #0
  400d90:	d10a      	bne.n	400da8 <vPvTrackerTask+0x5c>
        {
			/* If Tracking Time Expired */
            if(minCtr >= TRACKING_INTERVAL)
  400d92:	4b0e      	ldr	r3, [pc, #56]	; (400dcc <vPvTrackerTask+0x80>)
  400d94:	781b      	ldrb	r3, [r3, #0]
  400d96:	b2db      	uxtb	r3, r3
  400d98:	2b02      	cmp	r3, #2
  400d9a:	d907      	bls.n	400dac <vPvTrackerTask+0x60>
            {
                PVTrack();
  400d9c:	4b0c      	ldr	r3, [pc, #48]	; (400dd0 <vPvTrackerTask+0x84>)
  400d9e:	4798      	blx	r3
                minCtr = 0;
  400da0:	4b0a      	ldr	r3, [pc, #40]	; (400dcc <vPvTrackerTask+0x80>)
  400da2:	2200      	movs	r2, #0
  400da4:	701a      	strb	r2, [r3, #0]
  400da6:	e001      	b.n	400dac <vPvTrackerTask+0x60>
            /* LED1 Heart Beat Status (No Block) */
        }
        else
        {
            /* In Manual Mode */
            TestCode();
  400da8:	4b0a      	ldr	r3, [pc, #40]	; (400dd4 <vPvTrackerTask+0x88>)
  400daa:	4798      	blx	r3
        }
		vTaskDelay(200 / portTICK_RATE_MS);
  400dac:	2028      	movs	r0, #40	; 0x28
  400dae:	4b0a      	ldr	r3, [pc, #40]	; (400dd8 <vPvTrackerTask+0x8c>)
  400db0:	4798      	blx	r3
    }
  400db2:	e7d9      	b.n	400d68 <vPvTrackerTask+0x1c>
  400db4:	40018000 	.word	0x40018000
  400db8:	0040058d 	.word	0x0040058d
  400dbc:	004004a5 	.word	0x004004a5
  400dc0:	00400551 	.word	0x00400551
  400dc4:	00400515 	.word	0x00400515
  400dc8:	2000048c 	.word	0x2000048c
  400dcc:	200004d9 	.word	0x200004d9
  400dd0:	0040133d 	.word	0x0040133d
  400dd4:	00401715 	.word	0x00401715
  400dd8:	00405d75 	.word	0x00405d75

00400ddc <vPvTrackerInit>:
}

void vPvTrackerInit(void)
{
  400ddc:	b580      	push	{r7, lr}
  400dde:	af00      	add	r7, sp, #0
    /* Initialize all peripherals */
    /* Initialize TWI Port */
    //InitTwiRTOS();
	InitTWI();
  400de0:	4b04      	ldr	r3, [pc, #16]	; (400df4 <vPvTrackerInit+0x18>)
  400de2:	4798      	blx	r3
	/* Init TWI ADC */

	/* Initialize Variables from EEPROM */
    InitVars(); 
  400de4:	4b04      	ldr	r3, [pc, #16]	; (400df8 <vPvTrackerInit+0x1c>)
  400de6:	4798      	blx	r3
    
    /* Init Motor Controller */
	#ifndef MOTOR_CTRL_A4955
	#else
		/* Put driver in sleep mode */
		gpio_set_pin_low(PIN_MOTOR_SLP_IDX);
  400de8:	2022      	movs	r0, #34	; 0x22
  400dea:	4b04      	ldr	r3, [pc, #16]	; (400dfc <vPvTrackerInit+0x20>)
  400dec:	4798      	blx	r3
	#endif
}
  400dee:	bf00      	nop
  400df0:	bd80      	pop	{r7, pc}
  400df2:	bf00      	nop
  400df4:	004012ed 	.word	0x004012ed
  400df8:	00400e01 	.word	0x00400e01
  400dfc:	00404139 	.word	0x00404139

00400e00 <InitVars>:

/* Initializes RAM variables from Ext. EERPOM */
void InitVars(void)
{
  400e00:	b590      	push	{r4, r7, lr}
  400e02:	b08f      	sub	sp, #60	; 0x3c
  400e04:	af02      	add	r7, sp, #8
    uint16_t *ptr;
	uint8_t *ptr8;

	uint8_t memBuff[(EE_REG_DEFCONFIG - EE_REG_BASE) + 1];
    /* Read vars from Memory */
	ReadEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_BASE, memBuff, (EE_REG_DEFCONFIG - EE_REG_BASE) + 1);
  400e06:	1d3a      	adds	r2, r7, #4
  400e08:	2321      	movs	r3, #33	; 0x21
  400e0a:	9300      	str	r3, [sp, #0]
  400e0c:	4613      	mov	r3, r2
  400e0e:	2200      	movs	r2, #0
  400e10:	2150      	movs	r1, #80	; 0x50
  400e12:	4894      	ldr	r0, [pc, #592]	; (401064 <InitVars+0x264>)
  400e14:	4c94      	ldr	r4, [pc, #592]	; (401068 <InitVars+0x268>)
  400e16:	47a0      	blx	r4
	
	#ifndef FORCE_WRITE_DEF_VALS
		/* Check for known value in default config register */
		if(memBuff[(EE_REG_DEFCONFIG - EE_REG_BASE)] == 0xAB)
  400e18:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
  400e1c:	2bab      	cmp	r3, #171	; 0xab
  400e1e:	f040 8172 	bne.w	401106 <InitVars+0x306>
		{
			/* Configuration already exists, load values from EEPROM */
		
			/* Update LATL and LATH Regs */
			mBusRegs[MBUS_REG_LATL] = memBuff[EE_REG_LAT1 - EE_REG_BASE];
  400e22:	797b      	ldrb	r3, [r7, #5]
  400e24:	b29a      	uxth	r2, r3
  400e26:	4b91      	ldr	r3, [pc, #580]	; (40106c <InitVars+0x26c>)
  400e28:	821a      	strh	r2, [r3, #16]
			mBusRegs[MBUS_REG_LATL] = (mBusRegs[MBUS_REG_LATL]<<8) | memBuff[EE_REG_LAT0 - EE_REG_BASE];
  400e2a:	4b90      	ldr	r3, [pc, #576]	; (40106c <InitVars+0x26c>)
  400e2c:	8a1b      	ldrh	r3, [r3, #16]
  400e2e:	021b      	lsls	r3, r3, #8
  400e30:	b21a      	sxth	r2, r3
  400e32:	793b      	ldrb	r3, [r7, #4]
  400e34:	b21b      	sxth	r3, r3
  400e36:	4313      	orrs	r3, r2
  400e38:	b21b      	sxth	r3, r3
  400e3a:	b29a      	uxth	r2, r3
  400e3c:	4b8b      	ldr	r3, [pc, #556]	; (40106c <InitVars+0x26c>)
  400e3e:	821a      	strh	r2, [r3, #16]
			mBusRegs[MBUS_REG_LATH] = memBuff[EE_REG_LAT3 - EE_REG_BASE];
  400e40:	79fb      	ldrb	r3, [r7, #7]
  400e42:	b29a      	uxth	r2, r3
  400e44:	4b89      	ldr	r3, [pc, #548]	; (40106c <InitVars+0x26c>)
  400e46:	825a      	strh	r2, [r3, #18]
			mBusRegs[MBUS_REG_LATH] = (mBusRegs[MBUS_REG_LATH]<<8) | memBuff[EE_REG_LAT2 - EE_REG_BASE];
  400e48:	4b88      	ldr	r3, [pc, #544]	; (40106c <InitVars+0x26c>)
  400e4a:	8a5b      	ldrh	r3, [r3, #18]
  400e4c:	021b      	lsls	r3, r3, #8
  400e4e:	b21a      	sxth	r2, r3
  400e50:	79bb      	ldrb	r3, [r7, #6]
  400e52:	b21b      	sxth	r3, r3
  400e54:	4313      	orrs	r3, r2
  400e56:	b21b      	sxth	r3, r3
  400e58:	b29a      	uxth	r2, r3
  400e5a:	4b84      	ldr	r3, [pc, #528]	; (40106c <InitVars+0x26c>)
  400e5c:	825a      	strh	r2, [r3, #18]
		
			/* Update LONL and LONH Regs */
			mBusRegs[MBUS_REG_LONL] = memBuff[EE_REG_LON1 - EE_REG_BASE];
  400e5e:	7a7b      	ldrb	r3, [r7, #9]
  400e60:	b29a      	uxth	r2, r3
  400e62:	4b82      	ldr	r3, [pc, #520]	; (40106c <InitVars+0x26c>)
  400e64:	829a      	strh	r2, [r3, #20]
			mBusRegs[MBUS_REG_LONL] = (mBusRegs[MBUS_REG_LONL]<<8) | memBuff[EE_REG_LON0 - EE_REG_BASE];
  400e66:	4b81      	ldr	r3, [pc, #516]	; (40106c <InitVars+0x26c>)
  400e68:	8a9b      	ldrh	r3, [r3, #20]
  400e6a:	021b      	lsls	r3, r3, #8
  400e6c:	b21a      	sxth	r2, r3
  400e6e:	7a3b      	ldrb	r3, [r7, #8]
  400e70:	b21b      	sxth	r3, r3
  400e72:	4313      	orrs	r3, r2
  400e74:	b21b      	sxth	r3, r3
  400e76:	b29a      	uxth	r2, r3
  400e78:	4b7c      	ldr	r3, [pc, #496]	; (40106c <InitVars+0x26c>)
  400e7a:	829a      	strh	r2, [r3, #20]
			mBusRegs[MBUS_REG_LONH] = memBuff[EE_REG_LON3 - EE_REG_BASE];
  400e7c:	7afb      	ldrb	r3, [r7, #11]
  400e7e:	b29a      	uxth	r2, r3
  400e80:	4b7a      	ldr	r3, [pc, #488]	; (40106c <InitVars+0x26c>)
  400e82:	82da      	strh	r2, [r3, #22]
			mBusRegs[MBUS_REG_LONH] = (mBusRegs[MBUS_REG_LONH]<<8) | memBuff[EE_REG_LON2 - EE_REG_BASE];
  400e84:	4b79      	ldr	r3, [pc, #484]	; (40106c <InitVars+0x26c>)
  400e86:	8adb      	ldrh	r3, [r3, #22]
  400e88:	021b      	lsls	r3, r3, #8
  400e8a:	b21a      	sxth	r2, r3
  400e8c:	7abb      	ldrb	r3, [r7, #10]
  400e8e:	b21b      	sxth	r3, r3
  400e90:	4313      	orrs	r3, r2
  400e92:	b21b      	sxth	r3, r3
  400e94:	b29a      	uxth	r2, r3
  400e96:	4b75      	ldr	r3, [pc, #468]	; (40106c <InitVars+0x26c>)
  400e98:	82da      	strh	r2, [r3, #22]
		
			/* Update TZL and TZH Regs */
			mBusRegs[MBUS_REG_TZL] = memBuff[EE_REG_TZ1 - EE_REG_BASE];
  400e9a:	7b7b      	ldrb	r3, [r7, #13]
  400e9c:	b29a      	uxth	r2, r3
  400e9e:	4b73      	ldr	r3, [pc, #460]	; (40106c <InitVars+0x26c>)
  400ea0:	831a      	strh	r2, [r3, #24]
			mBusRegs[MBUS_REG_TZL] = (mBusRegs[MBUS_REG_TZL]<<8) | memBuff[EE_REG_TZ0 - EE_REG_BASE];
  400ea2:	4b72      	ldr	r3, [pc, #456]	; (40106c <InitVars+0x26c>)
  400ea4:	8b1b      	ldrh	r3, [r3, #24]
  400ea6:	021b      	lsls	r3, r3, #8
  400ea8:	b21a      	sxth	r2, r3
  400eaa:	7b3b      	ldrb	r3, [r7, #12]
  400eac:	b21b      	sxth	r3, r3
  400eae:	4313      	orrs	r3, r2
  400eb0:	b21b      	sxth	r3, r3
  400eb2:	b29a      	uxth	r2, r3
  400eb4:	4b6d      	ldr	r3, [pc, #436]	; (40106c <InitVars+0x26c>)
  400eb6:	831a      	strh	r2, [r3, #24]
			mBusRegs[MBUS_REG_TZH] = memBuff[EE_REG_TZ3 - EE_REG_BASE];
  400eb8:	7bfb      	ldrb	r3, [r7, #15]
  400eba:	b29a      	uxth	r2, r3
  400ebc:	4b6b      	ldr	r3, [pc, #428]	; (40106c <InitVars+0x26c>)
  400ebe:	835a      	strh	r2, [r3, #26]
			mBusRegs[MBUS_REG_TZH] = (mBusRegs[MBUS_REG_TZH]<<8) | memBuff[EE_REG_TZ2 - EE_REG_BASE];
  400ec0:	4b6a      	ldr	r3, [pc, #424]	; (40106c <InitVars+0x26c>)
  400ec2:	8b5b      	ldrh	r3, [r3, #26]
  400ec4:	021b      	lsls	r3, r3, #8
  400ec6:	b21a      	sxth	r2, r3
  400ec8:	7bbb      	ldrb	r3, [r7, #14]
  400eca:	b21b      	sxth	r3, r3
  400ecc:	4313      	orrs	r3, r2
  400ece:	b21b      	sxth	r3, r3
  400ed0:	b29a      	uxth	r2, r3
  400ed2:	4b66      	ldr	r3, [pc, #408]	; (40106c <InitVars+0x26c>)
  400ed4:	835a      	strh	r2, [r3, #26]
		
			/* Update DISTL and DISTH Regs */
			mBusRegs[MBUS_REG_DISTL] = memBuff[EE_REG_DIST1 - EE_REG_BASE];
  400ed6:	7c7b      	ldrb	r3, [r7, #17]
  400ed8:	b29a      	uxth	r2, r3
  400eda:	4b64      	ldr	r3, [pc, #400]	; (40106c <InitVars+0x26c>)
  400edc:	879a      	strh	r2, [r3, #60]	; 0x3c
			mBusRegs[MBUS_REG_DISTL] = (mBusRegs[MBUS_REG_DISTL]<<8) | memBuff[EE_REG_DIST0 - EE_REG_BASE];
  400ede:	4b63      	ldr	r3, [pc, #396]	; (40106c <InitVars+0x26c>)
  400ee0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
  400ee2:	021b      	lsls	r3, r3, #8
  400ee4:	b21a      	sxth	r2, r3
  400ee6:	7c3b      	ldrb	r3, [r7, #16]
  400ee8:	b21b      	sxth	r3, r3
  400eea:	4313      	orrs	r3, r2
  400eec:	b21b      	sxth	r3, r3
  400eee:	b29a      	uxth	r2, r3
  400ef0:	4b5e      	ldr	r3, [pc, #376]	; (40106c <InitVars+0x26c>)
  400ef2:	879a      	strh	r2, [r3, #60]	; 0x3c
			mBusRegs[MBUS_REG_DISTH] = memBuff[EE_REG_DIST3 - EE_REG_BASE];
  400ef4:	7cfb      	ldrb	r3, [r7, #19]
  400ef6:	b29a      	uxth	r2, r3
  400ef8:	4b5c      	ldr	r3, [pc, #368]	; (40106c <InitVars+0x26c>)
  400efa:	87da      	strh	r2, [r3, #62]	; 0x3e
			mBusRegs[MBUS_REG_DISTH] = (mBusRegs[MBUS_REG_DISTH]<<8) | memBuff[EE_REG_DIST2 - EE_REG_BASE];
  400efc:	4b5b      	ldr	r3, [pc, #364]	; (40106c <InitVars+0x26c>)
  400efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
  400f00:	021b      	lsls	r3, r3, #8
  400f02:	b21a      	sxth	r2, r3
  400f04:	7cbb      	ldrb	r3, [r7, #18]
  400f06:	b21b      	sxth	r3, r3
  400f08:	4313      	orrs	r3, r2
  400f0a:	b21b      	sxth	r3, r3
  400f0c:	b29a      	uxth	r2, r3
  400f0e:	4b57      	ldr	r3, [pc, #348]	; (40106c <InitVars+0x26c>)
  400f10:	87da      	strh	r2, [r3, #62]	; 0x3e

			/* Update WIDTHL and WIDTH Regs */
			mBusRegs[MBUS_REG_WIDTHL] = memBuff[EE_REG_WIDTH1 - EE_REG_BASE];
  400f12:	7d7b      	ldrb	r3, [r7, #21]
  400f14:	b29a      	uxth	r2, r3
  400f16:	4b55      	ldr	r3, [pc, #340]	; (40106c <InitVars+0x26c>)
  400f18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			mBusRegs[MBUS_REG_WIDTHL] = (mBusRegs[MBUS_REG_WIDTHL]<<8) | memBuff[EE_REG_WIDTH0 - EE_REG_BASE];
  400f1c:	4b53      	ldr	r3, [pc, #332]	; (40106c <InitVars+0x26c>)
  400f1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
  400f22:	021b      	lsls	r3, r3, #8
  400f24:	b21a      	sxth	r2, r3
  400f26:	7d3b      	ldrb	r3, [r7, #20]
  400f28:	b21b      	sxth	r3, r3
  400f2a:	4313      	orrs	r3, r2
  400f2c:	b21b      	sxth	r3, r3
  400f2e:	b29a      	uxth	r2, r3
  400f30:	4b4e      	ldr	r3, [pc, #312]	; (40106c <InitVars+0x26c>)
  400f32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			mBusRegs[MBUS_REG_WIDTHH] = memBuff[EE_REG_WIDTH3 - EE_REG_BASE];
  400f36:	7dfb      	ldrb	r3, [r7, #23]
  400f38:	b29a      	uxth	r2, r3
  400f3a:	4b4c      	ldr	r3, [pc, #304]	; (40106c <InitVars+0x26c>)
  400f3c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			mBusRegs[MBUS_REG_WIDTHH] = (mBusRegs[MBUS_REG_WIDTHH]<<8) | memBuff[EE_REG_WIDTH2 - EE_REG_BASE];
  400f40:	4b4a      	ldr	r3, [pc, #296]	; (40106c <InitVars+0x26c>)
  400f42:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
  400f46:	021b      	lsls	r3, r3, #8
  400f48:	b21a      	sxth	r2, r3
  400f4a:	7dbb      	ldrb	r3, [r7, #22]
  400f4c:	b21b      	sxth	r3, r3
  400f4e:	4313      	orrs	r3, r2
  400f50:	b21b      	sxth	r3, r3
  400f52:	b29a      	uxth	r2, r3
  400f54:	4b45      	ldr	r3, [pc, #276]	; (40106c <InitVars+0x26c>)
  400f56:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

			/* Update PNLRNGL and PNLRNGH Regs */
			mBusRegs[MBUS_REG_PNLRNGL] = memBuff[EE_REG_PNLRNG1 - EE_REG_BASE];
  400f5a:	7e7b      	ldrb	r3, [r7, #25]
  400f5c:	b29a      	uxth	r2, r3
  400f5e:	4b43      	ldr	r3, [pc, #268]	; (40106c <InitVars+0x26c>)
  400f60:	849a      	strh	r2, [r3, #36]	; 0x24
			mBusRegs[MBUS_REG_PNLRNGL] = (mBusRegs[MBUS_REG_PNLRNGL]<<8) | memBuff[EE_REG_PNLRNG0 - EE_REG_BASE];
  400f62:	4b42      	ldr	r3, [pc, #264]	; (40106c <InitVars+0x26c>)
  400f64:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  400f66:	021b      	lsls	r3, r3, #8
  400f68:	b21a      	sxth	r2, r3
  400f6a:	7e3b      	ldrb	r3, [r7, #24]
  400f6c:	b21b      	sxth	r3, r3
  400f6e:	4313      	orrs	r3, r2
  400f70:	b21b      	sxth	r3, r3
  400f72:	b29a      	uxth	r2, r3
  400f74:	4b3d      	ldr	r3, [pc, #244]	; (40106c <InitVars+0x26c>)
  400f76:	849a      	strh	r2, [r3, #36]	; 0x24
			mBusRegs[MBUS_REG_PNLRNGH] = memBuff[EE_REG_PNLRNG3 - EE_REG_BASE];
  400f78:	7efb      	ldrb	r3, [r7, #27]
  400f7a:	b29a      	uxth	r2, r3
  400f7c:	4b3b      	ldr	r3, [pc, #236]	; (40106c <InitVars+0x26c>)
  400f7e:	84da      	strh	r2, [r3, #38]	; 0x26
			mBusRegs[MBUS_REG_PNLRNGH] = (mBusRegs[MBUS_REG_PNLRNGH]<<8) | memBuff[EE_REG_PNLRNG2 - EE_REG_BASE];
  400f80:	4b3a      	ldr	r3, [pc, #232]	; (40106c <InitVars+0x26c>)
  400f82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
  400f84:	021b      	lsls	r3, r3, #8
  400f86:	b21a      	sxth	r2, r3
  400f88:	7ebb      	ldrb	r3, [r7, #26]
  400f8a:	b21b      	sxth	r3, r3
  400f8c:	4313      	orrs	r3, r2
  400f8e:	b21b      	sxth	r3, r3
  400f90:	b29a      	uxth	r2, r3
  400f92:	4b36      	ldr	r3, [pc, #216]	; (40106c <InitVars+0x26c>)
  400f94:	84da      	strh	r2, [r3, #38]	; 0x26

			/* Update BKPARAM1L and BKPARAM1H Regs */
			mBusRegs[MBUS_REG_BKPARAM1L] = memBuff[EE_REG_BKPARAM11 - EE_REG_BASE];
  400f96:	7f7b      	ldrb	r3, [r7, #29]
  400f98:	b29a      	uxth	r2, r3
  400f9a:	4b34      	ldr	r3, [pc, #208]	; (40106c <InitVars+0x26c>)
  400f9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			mBusRegs[MBUS_REG_BKPARAM1L] = (mBusRegs[MBUS_REG_BKPARAM1L]<<8) | memBuff[EE_REG_BKPARAM10 - EE_REG_BASE];
  400fa0:	4b32      	ldr	r3, [pc, #200]	; (40106c <InitVars+0x26c>)
  400fa2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
  400fa6:	021b      	lsls	r3, r3, #8
  400fa8:	b21a      	sxth	r2, r3
  400faa:	7f3b      	ldrb	r3, [r7, #28]
  400fac:	b21b      	sxth	r3, r3
  400fae:	4313      	orrs	r3, r2
  400fb0:	b21b      	sxth	r3, r3
  400fb2:	b29a      	uxth	r2, r3
  400fb4:	4b2d      	ldr	r3, [pc, #180]	; (40106c <InitVars+0x26c>)
  400fb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			mBusRegs[MBUS_REG_BKPARAM1H] = memBuff[EE_REG_BKPARAM13 - EE_REG_BASE];
  400fba:	7ffb      	ldrb	r3, [r7, #31]
  400fbc:	b29a      	uxth	r2, r3
  400fbe:	4b2b      	ldr	r3, [pc, #172]	; (40106c <InitVars+0x26c>)
  400fc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			mBusRegs[MBUS_REG_BKPARAM1H] = (mBusRegs[MBUS_REG_BKPARAM1H]<<8) | memBuff[EE_REG_BKPARAM12 - EE_REG_BASE];
  400fc4:	4b29      	ldr	r3, [pc, #164]	; (40106c <InitVars+0x26c>)
  400fc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
  400fca:	021b      	lsls	r3, r3, #8
  400fcc:	b21a      	sxth	r2, r3
  400fce:	7fbb      	ldrb	r3, [r7, #30]
  400fd0:	b21b      	sxth	r3, r3
  400fd2:	4313      	orrs	r3, r2
  400fd4:	b21b      	sxth	r3, r3
  400fd6:	b29a      	uxth	r2, r3
  400fd8:	4b24      	ldr	r3, [pc, #144]	; (40106c <InitVars+0x26c>)
  400fda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			/* Update BKPARAM2L and BKPARAM2H Regs */
			mBusRegs[MBUS_REG_BKPARAM2L] = memBuff[EE_REG_BKPARAM21 - EE_REG_BASE];
  400fde:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  400fe2:	b29a      	uxth	r2, r3
  400fe4:	4b21      	ldr	r3, [pc, #132]	; (40106c <InitVars+0x26c>)
  400fe6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			mBusRegs[MBUS_REG_BKPARAM2L] = (mBusRegs[MBUS_REG_BKPARAM2L]<<8) | memBuff[EE_REG_BKPARAM20 - EE_REG_BASE];
  400fea:	4b20      	ldr	r3, [pc, #128]	; (40106c <InitVars+0x26c>)
  400fec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
  400ff0:	021b      	lsls	r3, r3, #8
  400ff2:	b21a      	sxth	r2, r3
  400ff4:	f897 3020 	ldrb.w	r3, [r7, #32]
  400ff8:	b21b      	sxth	r3, r3
  400ffa:	4313      	orrs	r3, r2
  400ffc:	b21b      	sxth	r3, r3
  400ffe:	b29a      	uxth	r2, r3
  401000:	4b1a      	ldr	r3, [pc, #104]	; (40106c <InitVars+0x26c>)
  401002:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			mBusRegs[MBUS_REG_BKPARAM2H] = memBuff[EE_REG_BKPARAM23 - EE_REG_BASE];
  401006:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40100a:	b29a      	uxth	r2, r3
  40100c:	4b17      	ldr	r3, [pc, #92]	; (40106c <InitVars+0x26c>)
  40100e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			mBusRegs[MBUS_REG_BKPARAM2H] = (mBusRegs[MBUS_REG_BKPARAM2H]<<8) | memBuff[EE_REG_BKPARAM22 - EE_REG_BASE];
  401012:	4b16      	ldr	r3, [pc, #88]	; (40106c <InitVars+0x26c>)
  401014:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
  401018:	021b      	lsls	r3, r3, #8
  40101a:	b21a      	sxth	r2, r3
  40101c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  401020:	b21b      	sxth	r3, r3
  401022:	4313      	orrs	r3, r2
  401024:	b21b      	sxth	r3, r3
  401026:	b29a      	uxth	r2, r3
  401028:	4b10      	ldr	r3, [pc, #64]	; (40106c <InitVars+0x26c>)
  40102a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			/* Init local vars */
			ptr = (uint16_t*)&lat;
  40102e:	4b10      	ldr	r3, [pc, #64]	; (401070 <InitVars+0x270>)
  401030:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_LATH];
  401032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401034:	3302      	adds	r3, #2
  401036:	4a0d      	ldr	r2, [pc, #52]	; (40106c <InitVars+0x26c>)
  401038:	8a52      	ldrh	r2, [r2, #18]
  40103a:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_LATL];
  40103c:	4b0b      	ldr	r3, [pc, #44]	; (40106c <InitVars+0x26c>)
  40103e:	8a1a      	ldrh	r2, [r3, #16]
  401040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401042:	801a      	strh	r2, [r3, #0]
			ptr = (uint16_t*)&lon;
  401044:	4b0b      	ldr	r3, [pc, #44]	; (401074 <InitVars+0x274>)
  401046:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_LONH];
  401048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40104a:	3302      	adds	r3, #2
  40104c:	4a07      	ldr	r2, [pc, #28]	; (40106c <InitVars+0x26c>)
  40104e:	8ad2      	ldrh	r2, [r2, #22]
  401050:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_LONL];
  401052:	4b06      	ldr	r3, [pc, #24]	; (40106c <InitVars+0x26c>)
  401054:	8a9a      	ldrh	r2, [r3, #20]
  401056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401058:	801a      	strh	r2, [r3, #0]
			ptr = (uint16_t*)&timeZone;
  40105a:	4b07      	ldr	r3, [pc, #28]	; (401078 <InitVars+0x278>)
  40105c:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_TZH];
  40105e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401060:	3302      	adds	r3, #2
  401062:	e00b      	b.n	40107c <InitVars+0x27c>
  401064:	40018000 	.word	0x40018000
  401068:	0040028d 	.word	0x0040028d
  40106c:	2000048c 	.word	0x2000048c
  401070:	2000000c 	.word	0x2000000c
  401074:	20000010 	.word	0x20000010
  401078:	20000014 	.word	0x20000014
  40107c:	4a89      	ldr	r2, [pc, #548]	; (4012a4 <InitVars+0x4a4>)
  40107e:	8b52      	ldrh	r2, [r2, #26]
  401080:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_TZL];
  401082:	4b88      	ldr	r3, [pc, #544]	; (4012a4 <InitVars+0x4a4>)
  401084:	8b1a      	ldrh	r2, [r3, #24]
  401086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401088:	801a      	strh	r2, [r3, #0]
			ptr = (uint16_t*)&width;
  40108a:	4b87      	ldr	r3, [pc, #540]	; (4012a8 <InitVars+0x4a8>)
  40108c:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_WIDTHH];
  40108e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401090:	3302      	adds	r3, #2
  401092:	4a84      	ldr	r2, [pc, #528]	; (4012a4 <InitVars+0x4a4>)
  401094:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
  401098:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_WIDTHL];
  40109a:	4b82      	ldr	r3, [pc, #520]	; (4012a4 <InitVars+0x4a4>)
  40109c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
  4010a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4010a2:	801a      	strh	r2, [r3, #0]
			ptr = (uint16_t*)&dist;
  4010a4:	4b81      	ldr	r3, [pc, #516]	; (4012ac <InitVars+0x4ac>)
  4010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_DISTH];
  4010a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4010aa:	3302      	adds	r3, #2
  4010ac:	4a7d      	ldr	r2, [pc, #500]	; (4012a4 <InitVars+0x4a4>)
  4010ae:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
  4010b0:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_DISTL];
  4010b2:	4b7c      	ldr	r3, [pc, #496]	; (4012a4 <InitVars+0x4a4>)
  4010b4:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
  4010b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4010b8:	801a      	strh	r2, [r3, #0]
			ptr = (uint16_t*)&pvAngleRng;
  4010ba:	4b7d      	ldr	r3, [pc, #500]	; (4012b0 <InitVars+0x4b0>)
  4010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_PNLRNGH];
  4010be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4010c0:	3302      	adds	r3, #2
  4010c2:	4a78      	ldr	r2, [pc, #480]	; (4012a4 <InitVars+0x4a4>)
  4010c4:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
  4010c6:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_PNLRNGL];
  4010c8:	4b76      	ldr	r3, [pc, #472]	; (4012a4 <InitVars+0x4a4>)
  4010ca:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
  4010cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4010ce:	801a      	strh	r2, [r3, #0]
			ptr = (uint16_t*)&bkTrkParam1;
  4010d0:	4b78      	ldr	r3, [pc, #480]	; (4012b4 <InitVars+0x4b4>)
  4010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_BKPARAM1H];
  4010d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4010d6:	3302      	adds	r3, #2
  4010d8:	4a72      	ldr	r2, [pc, #456]	; (4012a4 <InitVars+0x4a4>)
  4010da:	f8b2 2046 	ldrh.w	r2, [r2, #70]	; 0x46
  4010de:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_BKPARAM1L];
  4010e0:	4b70      	ldr	r3, [pc, #448]	; (4012a4 <InitVars+0x4a4>)
  4010e2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
  4010e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4010e8:	801a      	strh	r2, [r3, #0]
			ptr = (uint16_t*)&bkTrkParam2;
  4010ea:	4b73      	ldr	r3, [pc, #460]	; (4012b8 <InitVars+0x4b8>)
  4010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_BKPARAM2H];
  4010ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4010f0:	3302      	adds	r3, #2
  4010f2:	4a6c      	ldr	r2, [pc, #432]	; (4012a4 <InitVars+0x4a4>)
  4010f4:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
  4010f8:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_BKPARAM2L];
  4010fa:	4b6a      	ldr	r3, [pc, #424]	; (4012a4 <InitVars+0x4a4>)
  4010fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
  401100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401102:	801a      	strh	r2, [r3, #0]
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_BKPARAM20, ptr8, 4);

			memBuff[0] = 0xAB;
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_DEFCONFIG, memBuff, 1);
		}
}
  401104:	e0c9      	b.n	40129a <InitVars+0x49a>
		}
		else
	#endif
		{
			/* First time programming, write default configuration to EEPROM */
			lat = 17.46608f; 
  401106:	4b6d      	ldr	r3, [pc, #436]	; (4012bc <InitVars+0x4bc>)
  401108:	4a6d      	ldr	r2, [pc, #436]	; (4012c0 <InitVars+0x4c0>)
  40110a:	601a      	str	r2, [r3, #0]
			lon = 78.44009f;
  40110c:	4b6d      	ldr	r3, [pc, #436]	; (4012c4 <InitVars+0x4c4>)
  40110e:	4a6e      	ldr	r2, [pc, #440]	; (4012c8 <InitVars+0x4c8>)
  401110:	601a      	str	r2, [r3, #0]
			timeZone = 5.5f;
  401112:	4b6e      	ldr	r3, [pc, #440]	; (4012cc <InitVars+0x4cc>)
  401114:	4a6e      	ldr	r2, [pc, #440]	; (4012d0 <InitVars+0x4d0>)
  401116:	601a      	str	r2, [r3, #0]
			dist = 5.0f;
  401118:	4b64      	ldr	r3, [pc, #400]	; (4012ac <InitVars+0x4ac>)
  40111a:	4a6e      	ldr	r2, [pc, #440]	; (4012d4 <InitVars+0x4d4>)
  40111c:	601a      	str	r2, [r3, #0]
			width = 2.0f;
  40111e:	4b62      	ldr	r3, [pc, #392]	; (4012a8 <InitVars+0x4a8>)
  401120:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401124:	601a      	str	r2, [r3, #0]
			/* Panels will track +/-pvAngleRng degrees. */
			pvAngleRng = 43;
  401126:	4b62      	ldr	r3, [pc, #392]	; (4012b0 <InitVars+0x4b0>)
  401128:	4a6b      	ldr	r2, [pc, #428]	; (4012d8 <InitVars+0x4d8>)
  40112a:	601a      	str	r2, [r3, #0]
			//#warning "Backtracking Parameters uninitialized"
			/* Backtracking parameters */
			bkTrkParam1 = 0.028989f;
  40112c:	4b61      	ldr	r3, [pc, #388]	; (4012b4 <InitVars+0x4b4>)
  40112e:	4a6b      	ldr	r2, [pc, #428]	; (4012dc <InitVars+0x4dc>)
  401130:	601a      	str	r2, [r3, #0]
			bkTrkParam2 = 1.575f;
  401132:	4b61      	ldr	r3, [pc, #388]	; (4012b8 <InitVars+0x4b8>)
  401134:	4a6a      	ldr	r2, [pc, #424]	; (4012e0 <InitVars+0x4e0>)
  401136:	601a      	str	r2, [r3, #0]
			/* Init MODBUS Regs */
			ptr = (uint16_t*)&lat;
  401138:	4b60      	ldr	r3, [pc, #384]	; (4012bc <InitVars+0x4bc>)
  40113a:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_LATH] = ptr[1];
  40113c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40113e:	885a      	ldrh	r2, [r3, #2]
  401140:	4b58      	ldr	r3, [pc, #352]	; (4012a4 <InitVars+0x4a4>)
  401142:	825a      	strh	r2, [r3, #18]
			mBusRegs[MBUS_REG_LATL] = ptr[0];
  401144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401146:	881a      	ldrh	r2, [r3, #0]
  401148:	4b56      	ldr	r3, [pc, #344]	; (4012a4 <InitVars+0x4a4>)
  40114a:	821a      	strh	r2, [r3, #16]
		
			ptr = (uint16_t*)&lon;
  40114c:	4b5d      	ldr	r3, [pc, #372]	; (4012c4 <InitVars+0x4c4>)
  40114e:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_LONH] = ptr[1];
  401150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401152:	885a      	ldrh	r2, [r3, #2]
  401154:	4b53      	ldr	r3, [pc, #332]	; (4012a4 <InitVars+0x4a4>)
  401156:	82da      	strh	r2, [r3, #22]
			mBusRegs[MBUS_REG_LONL] = ptr[0];
  401158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40115a:	881a      	ldrh	r2, [r3, #0]
  40115c:	4b51      	ldr	r3, [pc, #324]	; (4012a4 <InitVars+0x4a4>)
  40115e:	829a      	strh	r2, [r3, #20]

			ptr = (uint16_t*)&timeZone;
  401160:	4b5a      	ldr	r3, [pc, #360]	; (4012cc <InitVars+0x4cc>)
  401162:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_TZH] = ptr[1];
  401164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401166:	885a      	ldrh	r2, [r3, #2]
  401168:	4b4e      	ldr	r3, [pc, #312]	; (4012a4 <InitVars+0x4a4>)
  40116a:	835a      	strh	r2, [r3, #26]
			mBusRegs[MBUS_REG_TZL] = ptr[0];
  40116c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40116e:	881a      	ldrh	r2, [r3, #0]
  401170:	4b4c      	ldr	r3, [pc, #304]	; (4012a4 <InitVars+0x4a4>)
  401172:	831a      	strh	r2, [r3, #24]

			ptr = (uint16_t*)&width;
  401174:	4b4c      	ldr	r3, [pc, #304]	; (4012a8 <InitVars+0x4a8>)
  401176:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_WIDTHH] = ptr[1];
  401178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40117a:	885a      	ldrh	r2, [r3, #2]
  40117c:	4b49      	ldr	r3, [pc, #292]	; (4012a4 <InitVars+0x4a4>)
  40117e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			mBusRegs[MBUS_REG_WIDTHL] = ptr[0];
  401182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401184:	881a      	ldrh	r2, [r3, #0]
  401186:	4b47      	ldr	r3, [pc, #284]	; (4012a4 <InitVars+0x4a4>)
  401188:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			ptr = (uint16_t*)&dist;
  40118c:	4b47      	ldr	r3, [pc, #284]	; (4012ac <InitVars+0x4ac>)
  40118e:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_DISTH] = ptr[1];
  401190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401192:	885a      	ldrh	r2, [r3, #2]
  401194:	4b43      	ldr	r3, [pc, #268]	; (4012a4 <InitVars+0x4a4>)
  401196:	87da      	strh	r2, [r3, #62]	; 0x3e
			mBusRegs[MBUS_REG_DISTL] = ptr[0];
  401198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40119a:	881a      	ldrh	r2, [r3, #0]
  40119c:	4b41      	ldr	r3, [pc, #260]	; (4012a4 <InitVars+0x4a4>)
  40119e:	879a      	strh	r2, [r3, #60]	; 0x3c

			ptr = (uint16_t*)&pvAngleRng;
  4011a0:	4b43      	ldr	r3, [pc, #268]	; (4012b0 <InitVars+0x4b0>)
  4011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_PNLRNGH] = ptr[1];
  4011a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4011a6:	885a      	ldrh	r2, [r3, #2]
  4011a8:	4b3e      	ldr	r3, [pc, #248]	; (4012a4 <InitVars+0x4a4>)
  4011aa:	84da      	strh	r2, [r3, #38]	; 0x26
			mBusRegs[MBUS_REG_PNLRNGL] = ptr[0];
  4011ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4011ae:	881a      	ldrh	r2, [r3, #0]
  4011b0:	4b3c      	ldr	r3, [pc, #240]	; (4012a4 <InitVars+0x4a4>)
  4011b2:	849a      	strh	r2, [r3, #36]	; 0x24

			ptr = (uint16_t*)&bkTrkParam1;
  4011b4:	4b3f      	ldr	r3, [pc, #252]	; (4012b4 <InitVars+0x4b4>)
  4011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_BKPARAM1H] = ptr[1];
  4011b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4011ba:	885a      	ldrh	r2, [r3, #2]
  4011bc:	4b39      	ldr	r3, [pc, #228]	; (4012a4 <InitVars+0x4a4>)
  4011be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			mBusRegs[MBUS_REG_BKPARAM1L] = ptr[0];
  4011c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4011c4:	881a      	ldrh	r2, [r3, #0]
  4011c6:	4b37      	ldr	r3, [pc, #220]	; (4012a4 <InitVars+0x4a4>)
  4011c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

			ptr = (uint16_t*)&bkTrkParam2;
  4011cc:	4b3a      	ldr	r3, [pc, #232]	; (4012b8 <InitVars+0x4b8>)
  4011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_BKPARAM2H] = ptr[1];
  4011d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4011d2:	885a      	ldrh	r2, [r3, #2]
  4011d4:	4b33      	ldr	r3, [pc, #204]	; (4012a4 <InitVars+0x4a4>)
  4011d6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			mBusRegs[MBUS_REG_BKPARAM2L] = ptr[0];
  4011da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4011dc:	881a      	ldrh	r2, [r3, #0]
  4011de:	4b31      	ldr	r3, [pc, #196]	; (4012a4 <InitVars+0x4a4>)
  4011e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

			/* Update EEPROM */
			ptr8 = (uint8_t *)&lat;
  4011e4:	4b35      	ldr	r3, [pc, #212]	; (4012bc <InitVars+0x4bc>)
  4011e6:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_LAT0, ptr8, 4);
  4011e8:	2304      	movs	r3, #4
  4011ea:	9300      	str	r3, [sp, #0]
  4011ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4011ee:	2200      	movs	r2, #0
  4011f0:	2150      	movs	r1, #80	; 0x50
  4011f2:	483c      	ldr	r0, [pc, #240]	; (4012e4 <InitVars+0x4e4>)
  4011f4:	4c3c      	ldr	r4, [pc, #240]	; (4012e8 <InitVars+0x4e8>)
  4011f6:	47a0      	blx	r4

			ptr8 = (uint8_t *)&lon;
  4011f8:	4b32      	ldr	r3, [pc, #200]	; (4012c4 <InitVars+0x4c4>)
  4011fa:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_LON0, ptr8, 4);
  4011fc:	2304      	movs	r3, #4
  4011fe:	9300      	str	r3, [sp, #0]
  401200:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401202:	2204      	movs	r2, #4
  401204:	2150      	movs	r1, #80	; 0x50
  401206:	4837      	ldr	r0, [pc, #220]	; (4012e4 <InitVars+0x4e4>)
  401208:	4c37      	ldr	r4, [pc, #220]	; (4012e8 <InitVars+0x4e8>)
  40120a:	47a0      	blx	r4

			ptr8 = (uint8_t *)&timeZone;
  40120c:	4b2f      	ldr	r3, [pc, #188]	; (4012cc <InitVars+0x4cc>)
  40120e:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_TZ0, ptr8, 4);
  401210:	2304      	movs	r3, #4
  401212:	9300      	str	r3, [sp, #0]
  401214:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401216:	2208      	movs	r2, #8
  401218:	2150      	movs	r1, #80	; 0x50
  40121a:	4832      	ldr	r0, [pc, #200]	; (4012e4 <InitVars+0x4e4>)
  40121c:	4c32      	ldr	r4, [pc, #200]	; (4012e8 <InitVars+0x4e8>)
  40121e:	47a0      	blx	r4

			ptr8 = (uint8_t *)&width;
  401220:	4b21      	ldr	r3, [pc, #132]	; (4012a8 <InitVars+0x4a8>)
  401222:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_WIDTH0, ptr8, 4);
  401224:	2304      	movs	r3, #4
  401226:	9300      	str	r3, [sp, #0]
  401228:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40122a:	2210      	movs	r2, #16
  40122c:	2150      	movs	r1, #80	; 0x50
  40122e:	482d      	ldr	r0, [pc, #180]	; (4012e4 <InitVars+0x4e4>)
  401230:	4c2d      	ldr	r4, [pc, #180]	; (4012e8 <InitVars+0x4e8>)
  401232:	47a0      	blx	r4

			ptr8 = (uint8_t *)&dist;
  401234:	4b1d      	ldr	r3, [pc, #116]	; (4012ac <InitVars+0x4ac>)
  401236:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_DIST0, ptr8, 4);
  401238:	2304      	movs	r3, #4
  40123a:	9300      	str	r3, [sp, #0]
  40123c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40123e:	220c      	movs	r2, #12
  401240:	2150      	movs	r1, #80	; 0x50
  401242:	4828      	ldr	r0, [pc, #160]	; (4012e4 <InitVars+0x4e4>)
  401244:	4c28      	ldr	r4, [pc, #160]	; (4012e8 <InitVars+0x4e8>)
  401246:	47a0      	blx	r4

			ptr8 = (uint8_t *)&pvAngleRng;
  401248:	4b19      	ldr	r3, [pc, #100]	; (4012b0 <InitVars+0x4b0>)
  40124a:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_PNLRNG0, ptr8, 4);
  40124c:	2304      	movs	r3, #4
  40124e:	9300      	str	r3, [sp, #0]
  401250:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401252:	2214      	movs	r2, #20
  401254:	2150      	movs	r1, #80	; 0x50
  401256:	4823      	ldr	r0, [pc, #140]	; (4012e4 <InitVars+0x4e4>)
  401258:	4c23      	ldr	r4, [pc, #140]	; (4012e8 <InitVars+0x4e8>)
  40125a:	47a0      	blx	r4

			ptr8 = (uint8_t *)&bkTrkParam1;
  40125c:	4b15      	ldr	r3, [pc, #84]	; (4012b4 <InitVars+0x4b4>)
  40125e:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_BKPARAM10, ptr8, 4);
  401260:	2304      	movs	r3, #4
  401262:	9300      	str	r3, [sp, #0]
  401264:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401266:	2218      	movs	r2, #24
  401268:	2150      	movs	r1, #80	; 0x50
  40126a:	481e      	ldr	r0, [pc, #120]	; (4012e4 <InitVars+0x4e4>)
  40126c:	4c1e      	ldr	r4, [pc, #120]	; (4012e8 <InitVars+0x4e8>)
  40126e:	47a0      	blx	r4

			ptr8 = (uint8_t *)&bkTrkParam2;
  401270:	4b11      	ldr	r3, [pc, #68]	; (4012b8 <InitVars+0x4b8>)
  401272:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_BKPARAM20, ptr8, 4);
  401274:	2304      	movs	r3, #4
  401276:	9300      	str	r3, [sp, #0]
  401278:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40127a:	221c      	movs	r2, #28
  40127c:	2150      	movs	r1, #80	; 0x50
  40127e:	4819      	ldr	r0, [pc, #100]	; (4012e4 <InitVars+0x4e4>)
  401280:	4c19      	ldr	r4, [pc, #100]	; (4012e8 <InitVars+0x4e8>)
  401282:	47a0      	blx	r4

			memBuff[0] = 0xAB;
  401284:	23ab      	movs	r3, #171	; 0xab
  401286:	713b      	strb	r3, [r7, #4]
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_DEFCONFIG, memBuff, 1);
  401288:	1d3a      	adds	r2, r7, #4
  40128a:	2301      	movs	r3, #1
  40128c:	9300      	str	r3, [sp, #0]
  40128e:	4613      	mov	r3, r2
  401290:	2220      	movs	r2, #32
  401292:	2150      	movs	r1, #80	; 0x50
  401294:	4813      	ldr	r0, [pc, #76]	; (4012e4 <InitVars+0x4e4>)
  401296:	4c14      	ldr	r4, [pc, #80]	; (4012e8 <InitVars+0x4e8>)
  401298:	47a0      	blx	r4
		}
}
  40129a:	bf00      	nop
  40129c:	3734      	adds	r7, #52	; 0x34
  40129e:	46bd      	mov	sp, r7
  4012a0:	bd90      	pop	{r4, r7, pc}
  4012a2:	bf00      	nop
  4012a4:	2000048c 	.word	0x2000048c
  4012a8:	2000001c 	.word	0x2000001c
  4012ac:	20000018 	.word	0x20000018
  4012b0:	20000020 	.word	0x20000020
  4012b4:	20000024 	.word	0x20000024
  4012b8:	20000028 	.word	0x20000028
  4012bc:	2000000c 	.word	0x2000000c
  4012c0:	418bba88 	.word	0x418bba88
  4012c4:	20000010 	.word	0x20000010
  4012c8:	429ce153 	.word	0x429ce153
  4012cc:	20000014 	.word	0x20000014
  4012d0:	40b00000 	.word	0x40b00000
  4012d4:	40a00000 	.word	0x40a00000
  4012d8:	422c0000 	.word	0x422c0000
  4012dc:	3ced7a57 	.word	0x3ced7a57
  4012e0:	3fc9999a 	.word	0x3fc9999a
  4012e4:	40018000 	.word	0x40018000
  4012e8:	004001cd 	.word	0x004001cd

004012ec <InitTWI>:

static void InitTWI(void)
{
  4012ec:	b580      	push	{r7, lr}
  4012ee:	b084      	sub	sp, #16
  4012f0:	af00      	add	r7, sp, #0
	twi_options_t twiSettings = {
		sysclk_get_peripheral_hz(),
  4012f2:	4b0c      	ldr	r3, [pc, #48]	; (401324 <InitTWI+0x38>)
  4012f4:	4798      	blx	r3
  4012f6:	4603      	mov	r3, r0
		}
}

static void InitTWI(void)
{
	twi_options_t twiSettings = {
  4012f8:	607b      	str	r3, [r7, #4]
  4012fa:	4b0b      	ldr	r3, [pc, #44]	; (401328 <InitTWI+0x3c>)
  4012fc:	60bb      	str	r3, [r7, #8]
  4012fe:	2300      	movs	r3, #0
  401300:	733b      	strb	r3, [r7, #12]
  401302:	2300      	movs	r3, #0
  401304:	737b      	strb	r3, [r7, #13]
		400000,
		0,
		0
	};
	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_TWI_ID);
  401306:	2013      	movs	r0, #19
  401308:	4b08      	ldr	r3, [pc, #32]	; (40132c <InitTWI+0x40>)
  40130a:	4798      	blx	r3

	/* Enable TWI master mode */
	twi_enable_master_mode(BOARD_TWI);
  40130c:	4808      	ldr	r0, [pc, #32]	; (401330 <InitTWI+0x44>)
  40130e:	4b09      	ldr	r3, [pc, #36]	; (401334 <InitTWI+0x48>)
  401310:	4798      	blx	r3

	/* Initialize TWI peripheral */
	twi_master_init(BOARD_TWI, &twiSettings);
  401312:	1d3b      	adds	r3, r7, #4
  401314:	4619      	mov	r1, r3
  401316:	4806      	ldr	r0, [pc, #24]	; (401330 <InitTWI+0x44>)
  401318:	4b07      	ldr	r3, [pc, #28]	; (401338 <InitTWI+0x4c>)
  40131a:	4798      	blx	r3
}
  40131c:	bf00      	nop
  40131e:	3710      	adds	r7, #16
  401320:	46bd      	mov	sp, r7
  401322:	bd80      	pop	{r7, pc}
  401324:	00400cd1 	.word	0x00400cd1
  401328:	00061a80 	.word	0x00061a80
  40132c:	00400ce5 	.word	0x00400ce5
  401330:	40018000 	.word	0x40018000
  401334:	004031c9 	.word	0x004031c9
  401338:	004031ed 	.word	0x004031ed

0040133c <PVTrack>:
// 	//InitTWI();
// 	twiPort = freertos_twi_master_init(BOARD_TWI, &settings);
// }

void PVTrack(void)
{
  40133c:	b580      	push	{r7, lr}
  40133e:	b084      	sub	sp, #16
  401340:	af00      	add	r7, sp, #0
//     while(ccStatus)
//     {
//         vTaskDelay(pdMS_TO_TICKS(10));
//     }
    
    taskENTER_CRITICAL();
  401342:	4b42      	ldr	r3, [pc, #264]	; (40144c <PVTrack+0x110>)
  401344:	4798      	blx	r3
    
    /* Read RTC */
	#ifndef DS3231_USE_RTOS_API
		DSGetTime(BOARD_TWI, (uint16_t *)&mBusRegs[MBUS_REG_SEC]);
  401346:	4942      	ldr	r1, [pc, #264]	; (401450 <PVTrack+0x114>)
  401348:	4842      	ldr	r0, [pc, #264]	; (401454 <PVTrack+0x118>)
  40134a:	4b43      	ldr	r3, [pc, #268]	; (401458 <PVTrack+0x11c>)
  40134c:	4798      	blx	r3
		DSGetFullDate(BOARD_TWI, (uint16_t *)&mBusRegs[MBUS_REG_DAY]);
  40134e:	4943      	ldr	r1, [pc, #268]	; (40145c <PVTrack+0x120>)
  401350:	4840      	ldr	r0, [pc, #256]	; (401454 <PVTrack+0x118>)
  401352:	4b43      	ldr	r3, [pc, #268]	; (401460 <PVTrack+0x124>)
  401354:	4798      	blx	r3
		DSGetTimeTo(twiPort, (uint16_t *)&mBusRegs[MBUS_REG_SEC], 50);
		DSGetFullDateTo(twiPort, (uint16_t *)&mBusRegs[MBUS_REG_DAY], 50);
	#endif
    
    /* Clacluate PV Angle from time */
    pvAngle = GetPvAngle();
  401356:	4b43      	ldr	r3, [pc, #268]	; (401464 <PVTrack+0x128>)
  401358:	4798      	blx	r3
  40135a:	4603      	mov	r3, r0
  40135c:	607b      	str	r3, [r7, #4]
    ptr = (uint16_t*)&pvAngle;
  40135e:	1d3b      	adds	r3, r7, #4
  401360:	60fb      	str	r3, [r7, #12]
    mBusRegs[MBUS_REG_PVANGLEH] = ptr[1];
  401362:	68fb      	ldr	r3, [r7, #12]
  401364:	885a      	ldrh	r2, [r3, #2]
  401366:	4b3a      	ldr	r3, [pc, #232]	; (401450 <PVTrack+0x114>)
  401368:	845a      	strh	r2, [r3, #34]	; 0x22
    mBusRegs[MBUS_REG_PVANGLEL] = ptr[0];
  40136a:	68fb      	ldr	r3, [r7, #12]
  40136c:	881a      	ldrh	r2, [r3, #0]
  40136e:	4b38      	ldr	r3, [pc, #224]	; (401450 <PVTrack+0x114>)
  401370:	841a      	strh	r2, [r3, #32]
		LogBuff[0] = ',';
		ConsoleWrite((uint8_t *)LogBuff, 1);
    #endif
    
    /* If not backtracking */
    if(!bkTrkFlg)
  401372:	4b3d      	ldr	r3, [pc, #244]	; (401468 <PVTrack+0x12c>)
  401374:	781b      	ldrb	r3, [r3, #0]
  401376:	2b00      	cmp	r3, #0
  401378:	d11c      	bne.n	4013b4 <PVTrack+0x78>
        #ifdef LOG_EN
            sprintf(LogBuff,"NA\r\n");
			ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
        #endif
        /* If Angle between +/- pvAngleRng deg */
        if(pvAngle>= -pvAngleRng && pvAngle <= pvAngleRng)
  40137a:	4b3c      	ldr	r3, [pc, #240]	; (40146c <PVTrack+0x130>)
  40137c:	681b      	ldr	r3, [r3, #0]
  40137e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
  401382:	6879      	ldr	r1, [r7, #4]
  401384:	4b3a      	ldr	r3, [pc, #232]	; (401470 <PVTrack+0x134>)
  401386:	4610      	mov	r0, r2
  401388:	4798      	blx	r3
  40138a:	4603      	mov	r3, r0
  40138c:	2b00      	cmp	r3, #0
  40138e:	d00d      	beq.n	4013ac <PVTrack+0x70>
  401390:	687a      	ldr	r2, [r7, #4]
  401392:	4b36      	ldr	r3, [pc, #216]	; (40146c <PVTrack+0x130>)
  401394:	6819      	ldr	r1, [r3, #0]
  401396:	4b36      	ldr	r3, [pc, #216]	; (401470 <PVTrack+0x134>)
  401398:	4610      	mov	r0, r2
  40139a:	4798      	blx	r3
  40139c:	4603      	mov	r3, r0
  40139e:	2b00      	cmp	r3, #0
  4013a0:	d004      	beq.n	4013ac <PVTrack+0x70>
        {
            /* Rotate Motor */
            #ifndef LOG_EN
                GotoAngle(pvAngle);
  4013a2:	687b      	ldr	r3, [r7, #4]
  4013a4:	4618      	mov	r0, r3
  4013a6:	4b33      	ldr	r3, [pc, #204]	; (401474 <PVTrack+0x138>)
  4013a8:	4798      	blx	r3
  4013aa:	e046      	b.n	40143a <PVTrack+0xfe>
            #endif
        }
        else
        {
            bkTrkFlg = 1;
  4013ac:	4b2e      	ldr	r3, [pc, #184]	; (401468 <PVTrack+0x12c>)
  4013ae:	2201      	movs	r2, #1
  4013b0:	701a      	strb	r2, [r3, #0]
  4013b2:	e042      	b.n	40143a <PVTrack+0xfe>
        }
    }
    else
    {
        if(pvAngle>= -90 && pvAngle <= 90)
  4013b4:	687a      	ldr	r2, [r7, #4]
  4013b6:	4b30      	ldr	r3, [pc, #192]	; (401478 <PVTrack+0x13c>)
  4013b8:	4930      	ldr	r1, [pc, #192]	; (40147c <PVTrack+0x140>)
  4013ba:	4610      	mov	r0, r2
  4013bc:	4798      	blx	r3
  4013be:	4603      	mov	r3, r0
  4013c0:	2b00      	cmp	r3, #0
  4013c2:	d023      	beq.n	40140c <PVTrack+0xd0>
  4013c4:	687a      	ldr	r2, [r7, #4]
  4013c6:	4b2a      	ldr	r3, [pc, #168]	; (401470 <PVTrack+0x134>)
  4013c8:	492d      	ldr	r1, [pc, #180]	; (401480 <PVTrack+0x144>)
  4013ca:	4610      	mov	r0, r2
  4013cc:	4798      	blx	r3
  4013ce:	4603      	mov	r3, r0
  4013d0:	2b00      	cmp	r3, #0
  4013d2:	d01b      	beq.n	40140c <PVTrack+0xd0>
        {
            bkTrkAngle = GetPvBackTrackAngle(pvAngle);
  4013d4:	687b      	ldr	r3, [r7, #4]
  4013d6:	4618      	mov	r0, r3
  4013d8:	4b2a      	ldr	r3, [pc, #168]	; (401484 <PVTrack+0x148>)
  4013da:	4798      	blx	r3
  4013dc:	60b8      	str	r0, [r7, #8]
            
            /* If bkTrkAngle is within +/- given range */ 
            if(bkTrkAngle>= -pvAngleRng && bkTrkAngle <= pvAngleRng)
  4013de:	4b23      	ldr	r3, [pc, #140]	; (40146c <PVTrack+0x130>)
  4013e0:	681b      	ldr	r3, [r3, #0]
  4013e2:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
  4013e6:	4b22      	ldr	r3, [pc, #136]	; (401470 <PVTrack+0x134>)
  4013e8:	68b9      	ldr	r1, [r7, #8]
  4013ea:	4610      	mov	r0, r2
  4013ec:	4798      	blx	r3
  4013ee:	4603      	mov	r3, r0
  4013f0:	2b00      	cmp	r3, #0
  4013f2:	d00b      	beq.n	40140c <PVTrack+0xd0>
  4013f4:	4b1d      	ldr	r3, [pc, #116]	; (40146c <PVTrack+0x130>)
  4013f6:	681a      	ldr	r2, [r3, #0]
  4013f8:	4b1d      	ldr	r3, [pc, #116]	; (401470 <PVTrack+0x134>)
  4013fa:	4611      	mov	r1, r2
  4013fc:	68b8      	ldr	r0, [r7, #8]
  4013fe:	4798      	blx	r3
  401400:	4603      	mov	r3, r0
  401402:	2b00      	cmp	r3, #0
  401404:	d002      	beq.n	40140c <PVTrack+0xd0>
					ConsoleWrite((uint8_t *)LogBuff, 2);
                #endif
                
                /* Rotate Motor */
                #ifndef LOG_EN
                    GotoAngle(bkTrkAngle);
  401406:	68b8      	ldr	r0, [r7, #8]
  401408:	4b1a      	ldr	r3, [pc, #104]	; (401474 <PVTrack+0x138>)
  40140a:	4798      	blx	r3
            {
                sprintf(LogBuff,"NA\r\n");
				ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
            }
        #endif
        if(pvAngle>= -pvAngleRng && pvAngle <= pvAngleRng)
  40140c:	4b17      	ldr	r3, [pc, #92]	; (40146c <PVTrack+0x130>)
  40140e:	681b      	ldr	r3, [r3, #0]
  401410:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
  401414:	6879      	ldr	r1, [r7, #4]
  401416:	4b16      	ldr	r3, [pc, #88]	; (401470 <PVTrack+0x134>)
  401418:	4610      	mov	r0, r2
  40141a:	4798      	blx	r3
  40141c:	4603      	mov	r3, r0
  40141e:	2b00      	cmp	r3, #0
  401420:	d00b      	beq.n	40143a <PVTrack+0xfe>
  401422:	687a      	ldr	r2, [r7, #4]
  401424:	4b11      	ldr	r3, [pc, #68]	; (40146c <PVTrack+0x130>)
  401426:	6819      	ldr	r1, [r3, #0]
  401428:	4b11      	ldr	r3, [pc, #68]	; (401470 <PVTrack+0x134>)
  40142a:	4610      	mov	r0, r2
  40142c:	4798      	blx	r3
  40142e:	4603      	mov	r3, r0
  401430:	2b00      	cmp	r3, #0
  401432:	d002      	beq.n	40143a <PVTrack+0xfe>
        {
            bkTrkFlg = 0;
  401434:	4b0c      	ldr	r3, [pc, #48]	; (401468 <PVTrack+0x12c>)
  401436:	2200      	movs	r2, #0
  401438:	701a      	strb	r2, [r3, #0]
        }
    }
          
    /* Clear any required flags */
    minCtr = 0;
  40143a:	4b13      	ldr	r3, [pc, #76]	; (401488 <PVTrack+0x14c>)
  40143c:	2200      	movs	r2, #0
  40143e:	701a      	strb	r2, [r3, #0]
    taskEXIT_CRITICAL();
  401440:	4b12      	ldr	r3, [pc, #72]	; (40148c <PVTrack+0x150>)
  401442:	4798      	blx	r3
    
    /* Enable Charge Ctrlr */
    //ccEn = 1;
} 
  401444:	bf00      	nop
  401446:	3710      	adds	r7, #16
  401448:	46bd      	mov	sp, r7
  40144a:	bd80      	pop	{r7, pc}
  40144c:	0040503d 	.word	0x0040503d
  401450:	2000048c 	.word	0x2000048c
  401454:	40018000 	.word	0x40018000
  401458:	004002f5 	.word	0x004002f5
  40145c:	20000492 	.word	0x20000492
  401460:	004003b5 	.word	0x004003b5
  401464:	00401989 	.word	0x00401989
  401468:	200004d8 	.word	0x200004d8
  40146c:	20000020 	.word	0x20000020
  401470:	0040ae29 	.word	0x0040ae29
  401474:	00401491 	.word	0x00401491
  401478:	0040ae3d 	.word	0x0040ae3d
  40147c:	c2b40000 	.word	0xc2b40000
  401480:	42b40000 	.word	0x42b40000
  401484:	004026ad 	.word	0x004026ad
  401488:	200004d9 	.word	0x200004d9
  40148c:	0040505d 	.word	0x0040505d

00401490 <GotoAngle>:

void GotoAngle(float pvAngle)
{
  401490:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  401494:	b08c      	sub	sp, #48	; 0x30
  401496:	af00      	add	r7, sp, #0
  401498:	6078      	str	r0, [r7, #4]
    uint16_t *ptr;
    int16_t accVals[3] = {};
  40149a:	f107 0314 	add.w	r3, r7, #20
  40149e:	2200      	movs	r2, #0
  4014a0:	601a      	str	r2, [r3, #0]
  4014a2:	809a      	strh	r2, [r3, #4]
    float oriVals[3], error = 0;
  4014a4:	f04f 0300 	mov.w	r3, #0
  4014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t p = 0;
  4014aa:	2300      	movs	r3, #0
  4014ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    float oriX, prevOri = 0;
  4014b0:	f04f 0300 	mov.w	r3, #0
  4014b4:	623b      	str	r3, [r7, #32]
    
	#ifndef ICM20648_USE_RTOS_API
		ICMReadAccDataAll(BOARD_TWI, ICM_ADDR,(uint16_t*)accVals);
  4014b6:	f107 0314 	add.w	r3, r7, #20
  4014ba:	461a      	mov	r2, r3
  4014bc:	2169      	movs	r1, #105	; 0x69
  4014be:	4885      	ldr	r0, [pc, #532]	; (4016d4 <GotoAngle+0x244>)
  4014c0:	4b85      	ldr	r3, [pc, #532]	; (4016d8 <GotoAngle+0x248>)
  4014c2:	4798      	blx	r3
	#else
		ICMReadAccDataAllTo(twiPort, ICM_ADDR,(uint16_t*)accVals, 50);
	#endif

    GetOrientation(accVals, oriVals);
  4014c4:	f107 0208 	add.w	r2, r7, #8
  4014c8:	f107 0314 	add.w	r3, r7, #20
  4014cc:	4611      	mov	r1, r2
  4014ce:	4618      	mov	r0, r3
  4014d0:	4b82      	ldr	r3, [pc, #520]	; (4016dc <GotoAngle+0x24c>)
  4014d2:	4798      	blx	r3
        PrintFlt(oriVals[0]);
        sprintf(LogBuff,"\r\n");
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
    #endif
    
    error = pvAngle - oriVals[0];
  4014d4:	68ba      	ldr	r2, [r7, #8]
  4014d6:	4b82      	ldr	r3, [pc, #520]	; (4016e0 <GotoAngle+0x250>)
  4014d8:	4611      	mov	r1, r2
  4014da:	6878      	ldr	r0, [r7, #4]
  4014dc:	4798      	blx	r3
  4014de:	4603      	mov	r3, r0
  4014e0:	62fb      	str	r3, [r7, #44]	; 0x2c
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
        PrintFlt(error);
        sprintf(LogBuff,"\r\n");
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
    #endif
    if(error > 0)
  4014e2:	4b80      	ldr	r3, [pc, #512]	; (4016e4 <GotoAngle+0x254>)
  4014e4:	f04f 0100 	mov.w	r1, #0
  4014e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  4014ea:	4798      	blx	r3
  4014ec:	4603      	mov	r3, r0
  4014ee:	2b00      	cmp	r3, #0
  4014f0:	d006      	beq.n	401500 <GotoAngle+0x70>
        //Set Anti Clockwise Direction
        #ifdef DEBUG_EN
            sprintf(LogBuff,"ACLK\r\n");
			ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
        #endif
        gpio_set_pin_low(PIN_MOTOR_IN1_IDX);
  4014f2:	2020      	movs	r0, #32
  4014f4:	4b7c      	ldr	r3, [pc, #496]	; (4016e8 <GotoAngle+0x258>)
  4014f6:	4798      	blx	r3
		gpio_set_pin_high(PIN_MOTOR_IN2_IDX);
  4014f8:	2021      	movs	r0, #33	; 0x21
  4014fa:	4b7c      	ldr	r3, [pc, #496]	; (4016ec <GotoAngle+0x25c>)
  4014fc:	4798      	blx	r3
  4014fe:	e005      	b.n	40150c <GotoAngle+0x7c>
        //Set Clockwise Direction
        #ifdef DEBUG_EN
            sprintf(LogBuff,"CLK\r\n");
			ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
        #endif
        gpio_set_pin_high(PIN_MOTOR_IN1_IDX);
  401500:	2020      	movs	r0, #32
  401502:	4b7a      	ldr	r3, [pc, #488]	; (4016ec <GotoAngle+0x25c>)
  401504:	4798      	blx	r3
        gpio_set_pin_low(PIN_MOTOR_IN2_IDX);
  401506:	2021      	movs	r0, #33	; 0x21
  401508:	4b77      	ldr	r3, [pc, #476]	; (4016e8 <GotoAngle+0x258>)
  40150a:	4798      	blx	r3
    }
    
    //If error greater than +/- 1.0f
    if(!((error >=-INCLINATION_ERROR)&&(error<INCLINATION_ERROR)))
  40150c:	2301      	movs	r3, #1
  40150e:	461c      	mov	r4, r3
  401510:	4b77      	ldr	r3, [pc, #476]	; (4016f0 <GotoAngle+0x260>)
  401512:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
  401516:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  401518:	4798      	blx	r3
  40151a:	4603      	mov	r3, r0
  40151c:	2b00      	cmp	r3, #0
  40151e:	d101      	bne.n	401524 <GotoAngle+0x94>
  401520:	2300      	movs	r3, #0
  401522:	461c      	mov	r4, r3
  401524:	b2e3      	uxtb	r3, r4
  401526:	f083 0301 	eor.w	r3, r3, #1
  40152a:	b2db      	uxtb	r3, r3
  40152c:	2b00      	cmp	r3, #0
  40152e:	d112      	bne.n	401556 <GotoAngle+0xc6>
  401530:	2301      	movs	r3, #1
  401532:	461c      	mov	r4, r3
  401534:	4b6f      	ldr	r3, [pc, #444]	; (4016f4 <GotoAngle+0x264>)
  401536:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  40153a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  40153c:	4798      	blx	r3
  40153e:	4603      	mov	r3, r0
  401540:	2b00      	cmp	r3, #0
  401542:	d101      	bne.n	401548 <GotoAngle+0xb8>
  401544:	2300      	movs	r3, #0
  401546:	461c      	mov	r4, r3
  401548:	b2e3      	uxtb	r3, r4
  40154a:	f083 0301 	eor.w	r3, r3, #1
  40154e:	b2db      	uxtb	r3, r3
  401550:	2b00      	cmp	r3, #0
  401552:	f000 8086 	beq.w	401662 <GotoAngle+0x1d2>
    {
        /* Turn Motor On */
        #ifndef MOTOR_CTRL_A4955
			gpio_set_pin_high(PIN_MOTOR_RST_IDX);
		#else
			gpio_set_pin_high(PIN_MOTOR_SLP_IDX);
  401556:	2022      	movs	r0, #34	; 0x22
  401558:	4b64      	ldr	r3, [pc, #400]	; (4016ec <GotoAngle+0x25c>)
  40155a:	4798      	blx	r3
            sprintf(LogBuff,"ON\r\n");
			ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));    
        #endif
    }
    
    while(!((error >=-INCLINATION_ERROR)&&(error<INCLINATION_ERROR)))
  40155c:	e081      	b.n	401662 <GotoAngle+0x1d2>
    {
        prevOri = 0;
  40155e:	f04f 0300 	mov.w	r3, #0
  401562:	623b      	str	r3, [r7, #32]
        for(p = 0; p < 8; p++)
  401564:	2300      	movs	r3, #0
  401566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40156a:	e058      	b.n	40161e <GotoAngle+0x18e>
        {
            #ifndef ICM20648_USE_RTOS_API
				ICMReadAccDataAll(BOARD_TWI, ICM_ADDR,(uint16_t*)accVals);
  40156c:	f107 0314 	add.w	r3, r7, #20
  401570:	461a      	mov	r2, r3
  401572:	2169      	movs	r1, #105	; 0x69
  401574:	4857      	ldr	r0, [pc, #348]	; (4016d4 <GotoAngle+0x244>)
  401576:	4b58      	ldr	r3, [pc, #352]	; (4016d8 <GotoAngle+0x248>)
  401578:	4798      	blx	r3
			#else
				ICMReadAccDataAllTo(twiPort, ICM_ADDR,(uint16_t*)accVals, 50);
			#endif
            GetOrientation(accVals, oriVals);
  40157a:	f107 0208 	add.w	r2, r7, #8
  40157e:	f107 0314 	add.w	r3, r7, #20
  401582:	4611      	mov	r1, r2
  401584:	4618      	mov	r0, r3
  401586:	4b55      	ldr	r3, [pc, #340]	; (4016dc <GotoAngle+0x24c>)
  401588:	4798      	blx	r3
            oriX = prevOri + ((oriVals[0] - prevOri)/((float)(p+1)));
  40158a:	68ba      	ldr	r2, [r7, #8]
  40158c:	4b54      	ldr	r3, [pc, #336]	; (4016e0 <GotoAngle+0x250>)
  40158e:	6a39      	ldr	r1, [r7, #32]
  401590:	4610      	mov	r0, r2
  401592:	4798      	blx	r3
  401594:	4603      	mov	r3, r0
  401596:	461c      	mov	r4, r3
  401598:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40159c:	1c5a      	adds	r2, r3, #1
  40159e:	4b56      	ldr	r3, [pc, #344]	; (4016f8 <GotoAngle+0x268>)
  4015a0:	4610      	mov	r0, r2
  4015a2:	4798      	blx	r3
  4015a4:	4602      	mov	r2, r0
  4015a6:	4b55      	ldr	r3, [pc, #340]	; (4016fc <GotoAngle+0x26c>)
  4015a8:	4611      	mov	r1, r2
  4015aa:	4620      	mov	r0, r4
  4015ac:	4798      	blx	r3
  4015ae:	4603      	mov	r3, r0
  4015b0:	461a      	mov	r2, r3
  4015b2:	4b53      	ldr	r3, [pc, #332]	; (401700 <GotoAngle+0x270>)
  4015b4:	6a39      	ldr	r1, [r7, #32]
  4015b6:	4610      	mov	r0, r2
  4015b8:	4798      	blx	r3
  4015ba:	4603      	mov	r3, r0
  4015bc:	627b      	str	r3, [r7, #36]	; 0x24
        	prevOri = oriX;
  4015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4015c0:	623b      	str	r3, [r7, #32]
            delay_ms(40);
  4015c2:	4b50      	ldr	r3, [pc, #320]	; (401704 <GotoAngle+0x274>)
  4015c4:	4798      	blx	r3
  4015c6:	4603      	mov	r3, r0
  4015c8:	f04f 0400 	mov.w	r4, #0
  4015cc:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  4015d0:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  4015d4:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  4015d8:	4643      	mov	r3, r8
  4015da:	464c      	mov	r4, r9
  4015dc:	00a6      	lsls	r6, r4, #2
  4015de:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  4015e2:	009d      	lsls	r5, r3, #2
  4015e4:	195b      	adds	r3, r3, r5
  4015e6:	eb44 0406 	adc.w	r4, r4, r6
  4015ea:	f243 61af 	movw	r1, #13999	; 0x36af
  4015ee:	f04f 0200 	mov.w	r2, #0
  4015f2:	eb13 0b01 	adds.w	fp, r3, r1
  4015f6:	eb44 0c02 	adc.w	ip, r4, r2
  4015fa:	4658      	mov	r0, fp
  4015fc:	4661      	mov	r1, ip
  4015fe:	4c42      	ldr	r4, [pc, #264]	; (401708 <GotoAngle+0x278>)
  401600:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401604:	f04f 0300 	mov.w	r3, #0
  401608:	47a0      	blx	r4
  40160a:	4603      	mov	r3, r0
  40160c:	460c      	mov	r4, r1
  40160e:	4618      	mov	r0, r3
  401610:	4b3e      	ldr	r3, [pc, #248]	; (40170c <GotoAngle+0x27c>)
  401612:	4798      	blx	r3
    }
    
    while(!((error >=-INCLINATION_ERROR)&&(error<INCLINATION_ERROR)))
    {
        prevOri = 0;
        for(p = 0; p < 8; p++)
  401614:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401618:	3301      	adds	r3, #1
  40161a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40161e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401622:	2b07      	cmp	r3, #7
  401624:	d9a2      	bls.n	40156c <GotoAngle+0xdc>
            GetOrientation(accVals, oriVals);
            oriX = prevOri + ((oriVals[0] - prevOri)/((float)(p+1)));
        	prevOri = oriX;
            delay_ms(40);
        }
        oriVals[0] = oriX;
  401626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401628:	60bb      	str	r3, [r7, #8]
			LogBuff[0] = '\r';
			LogBuff[1] = '\n';
			ConsoleWrite((uint8_t *)LogBuff, 2);
        #endif
        
        error = pvAngle - oriVals[0];
  40162a:	68ba      	ldr	r2, [r7, #8]
  40162c:	4b2c      	ldr	r3, [pc, #176]	; (4016e0 <GotoAngle+0x250>)
  40162e:	4611      	mov	r1, r2
  401630:	6878      	ldr	r0, [r7, #4]
  401632:	4798      	blx	r3
  401634:	4603      	mov	r3, r0
  401636:	62fb      	str	r3, [r7, #44]	; 0x2c
        
        if(error > 0)
  401638:	4b2a      	ldr	r3, [pc, #168]	; (4016e4 <GotoAngle+0x254>)
  40163a:	f04f 0100 	mov.w	r1, #0
  40163e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  401640:	4798      	blx	r3
  401642:	4603      	mov	r3, r0
  401644:	2b00      	cmp	r3, #0
  401646:	d006      	beq.n	401656 <GotoAngle+0x1c6>
                sprintf(LogBuff,"ACLK\r\n");
				ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
            #endif
			#ifndef MOTOR_CTRL_A4955
			#else
				gpio_set_pin_low(PIN_MOTOR_IN1_IDX);
  401648:	2020      	movs	r0, #32
  40164a:	4b27      	ldr	r3, [pc, #156]	; (4016e8 <GotoAngle+0x258>)
  40164c:	4798      	blx	r3
				gpio_set_pin_high(PIN_MOTOR_IN2_IDX);
  40164e:	2021      	movs	r0, #33	; 0x21
  401650:	4b26      	ldr	r3, [pc, #152]	; (4016ec <GotoAngle+0x25c>)
  401652:	4798      	blx	r3
  401654:	e005      	b.n	401662 <GotoAngle+0x1d2>
                sprintf(LogBuff,"CLK\r\n");
				ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
            #endif
			#ifndef MOTOR_CTRL_A4955
			#else
				gpio_set_pin_high(PIN_MOTOR_IN1_IDX);
  401656:	2020      	movs	r0, #32
  401658:	4b24      	ldr	r3, [pc, #144]	; (4016ec <GotoAngle+0x25c>)
  40165a:	4798      	blx	r3
				gpio_set_pin_low(PIN_MOTOR_IN2_IDX);
  40165c:	2021      	movs	r0, #33	; 0x21
  40165e:	4b22      	ldr	r3, [pc, #136]	; (4016e8 <GotoAngle+0x258>)
  401660:	4798      	blx	r3
            sprintf(LogBuff,"ON\r\n");
			ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));    
        #endif
    }
    
    while(!((error >=-INCLINATION_ERROR)&&(error<INCLINATION_ERROR)))
  401662:	2301      	movs	r3, #1
  401664:	461c      	mov	r4, r3
  401666:	4b22      	ldr	r3, [pc, #136]	; (4016f0 <GotoAngle+0x260>)
  401668:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
  40166c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  40166e:	4798      	blx	r3
  401670:	4603      	mov	r3, r0
  401672:	2b00      	cmp	r3, #0
  401674:	d101      	bne.n	40167a <GotoAngle+0x1ea>
  401676:	2300      	movs	r3, #0
  401678:	461c      	mov	r4, r3
  40167a:	b2e3      	uxtb	r3, r4
  40167c:	f083 0301 	eor.w	r3, r3, #1
  401680:	b2db      	uxtb	r3, r3
  401682:	2b00      	cmp	r3, #0
  401684:	f47f af6b 	bne.w	40155e <GotoAngle+0xce>
  401688:	2301      	movs	r3, #1
  40168a:	461c      	mov	r4, r3
  40168c:	4b19      	ldr	r3, [pc, #100]	; (4016f4 <GotoAngle+0x264>)
  40168e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  401692:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  401694:	4798      	blx	r3
  401696:	4603      	mov	r3, r0
  401698:	2b00      	cmp	r3, #0
  40169a:	d101      	bne.n	4016a0 <GotoAngle+0x210>
  40169c:	2300      	movs	r3, #0
  40169e:	461c      	mov	r4, r3
  4016a0:	b2e3      	uxtb	r3, r4
  4016a2:	f083 0301 	eor.w	r3, r3, #1
  4016a6:	b2db      	uxtb	r3, r3
  4016a8:	2b00      	cmp	r3, #0
  4016aa:	f47f af58 	bne.w	40155e <GotoAngle+0xce>

    /* Turn Motor Off */
	#ifndef MOTOR_CTRL_A4955
		gpio_set_pin_low(PIN_MOTOR_RST_IDX);
	#else
		gpio_set_pin_low(PIN_MOTOR_SLP_IDX);
  4016ae:	2022      	movs	r0, #34	; 0x22
  4016b0:	4b0d      	ldr	r3, [pc, #52]	; (4016e8 <GotoAngle+0x258>)
  4016b2:	4798      	blx	r3
    #ifdef DEBUG_EN
        sprintf(LogBuff,"OFF\r\n");
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
    #endif
    
    ptr = (uint16_t*)&oriVals[0];
  4016b4:	f107 0308 	add.w	r3, r7, #8
  4016b8:	61fb      	str	r3, [r7, #28]
    mBusRegs[MBUS_REG_ANXH] = ptr[1];
  4016ba:	69fb      	ldr	r3, [r7, #28]
  4016bc:	885a      	ldrh	r2, [r3, #2]
  4016be:	4b14      	ldr	r3, [pc, #80]	; (401710 <GotoAngle+0x280>)
  4016c0:	83da      	strh	r2, [r3, #30]
    mBusRegs[MBUS_REG_ANXL] = ptr[0];
  4016c2:	69fb      	ldr	r3, [r7, #28]
  4016c4:	881a      	ldrh	r2, [r3, #0]
  4016c6:	4b12      	ldr	r3, [pc, #72]	; (401710 <GotoAngle+0x280>)
  4016c8:	839a      	strh	r2, [r3, #28]
}
  4016ca:	bf00      	nop
  4016cc:	3730      	adds	r7, #48	; 0x30
  4016ce:	46bd      	mov	sp, r7
  4016d0:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
  4016d4:	40018000 	.word	0x40018000
  4016d8:	004005ed 	.word	0x004005ed
  4016dc:	004017f5 	.word	0x004017f5
  4016e0:	0040a8c5 	.word	0x0040a8c5
  4016e4:	0040ae51 	.word	0x0040ae51
  4016e8:	00404139 	.word	0x00404139
  4016ec:	00404109 	.word	0x00404109
  4016f0:	0040ae3d 	.word	0x0040ae3d
  4016f4:	0040ae15 	.word	0x0040ae15
  4016f8:	0040aa31 	.word	0x0040aa31
  4016fc:	0040ac41 	.word	0x0040ac41
  401700:	0040a8c9 	.word	0x0040a8c9
  401704:	00400cbd 	.word	0x00400cbd
  401708:	0040aeb1 	.word	0x0040aeb1
  40170c:	20000001 	.word	0x20000001
  401710:	2000048c 	.word	0x2000048c

00401714 <TestCode>:

void TestCode(void)
{
  401714:	b580      	push	{r7, lr}
  401716:	b088      	sub	sp, #32
  401718:	af00      	add	r7, sp, #0
    int16_t accVals[3] = {0, 0, 0};
  40171a:	2300      	movs	r3, #0
  40171c:	82bb      	strh	r3, [r7, #20]
  40171e:	2300      	movs	r3, #0
  401720:	82fb      	strh	r3, [r7, #22]
  401722:	2300      	movs	r3, #0
  401724:	833b      	strh	r3, [r7, #24]
    float oriVals[3], pvAngle=0;
  401726:	f04f 0300 	mov.w	r3, #0
  40172a:	607b      	str	r3, [r7, #4]
    uint16_t *ptr;
    #ifndef DS3231_USE_RTOS_API
		DSGetTime(BOARD_TWI, (uint16_t *)&mBusRegs[MBUS_REG_SEC]);
  40172c:	4927      	ldr	r1, [pc, #156]	; (4017cc <TestCode+0xb8>)
  40172e:	4828      	ldr	r0, [pc, #160]	; (4017d0 <TestCode+0xbc>)
  401730:	4b28      	ldr	r3, [pc, #160]	; (4017d4 <TestCode+0xc0>)
  401732:	4798      	blx	r3
		DSGetFullDate(BOARD_TWI, (uint16_t *)&mBusRegs[MBUS_REG_DAY]);
  401734:	4928      	ldr	r1, [pc, #160]	; (4017d8 <TestCode+0xc4>)
  401736:	4826      	ldr	r0, [pc, #152]	; (4017d0 <TestCode+0xbc>)
  401738:	4b28      	ldr	r3, [pc, #160]	; (4017dc <TestCode+0xc8>)
  40173a:	4798      	blx	r3
		(((mBusRegs[MBUS_REG_SEC]>>4)*10) + (mBusRegs[MBUS_REG_SEC]&0x000F)));
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
    #endif

	#ifndef ICM20648_USE_RTOS_API
		ICMReadAccDataAll(BOARD_TWI, ICM_ADDR,(uint16_t*)accVals);
  40173c:	f107 0314 	add.w	r3, r7, #20
  401740:	461a      	mov	r2, r3
  401742:	2169      	movs	r1, #105	; 0x69
  401744:	4822      	ldr	r0, [pc, #136]	; (4017d0 <TestCode+0xbc>)
  401746:	4b26      	ldr	r3, [pc, #152]	; (4017e0 <TestCode+0xcc>)
  401748:	4798      	blx	r3
	#else
		ICMReadAccDataAllTo(twiPort, ICM_ADDR,(uint16_t*)accVals, 50);
	#endif
    GetOrientation(accVals, oriVals);
  40174a:	f107 0208 	add.w	r2, r7, #8
  40174e:	f107 0314 	add.w	r3, r7, #20
  401752:	4611      	mov	r1, r2
  401754:	4618      	mov	r0, r3
  401756:	4b23      	ldr	r3, [pc, #140]	; (4017e4 <TestCode+0xd0>)
  401758:	4798      	blx	r3
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
        PrintFlt(oriVals[0]);
        sprintf(LogBuff,"\r\n");
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
    #endif
    ptr = (uint16_t*)&oriVals[0];
  40175a:	f107 0308 	add.w	r3, r7, #8
  40175e:	61fb      	str	r3, [r7, #28]
    mBusRegs[MBUS_REG_ANXH] = ptr[1];
  401760:	69fb      	ldr	r3, [r7, #28]
  401762:	885a      	ldrh	r2, [r3, #2]
  401764:	4b19      	ldr	r3, [pc, #100]	; (4017cc <TestCode+0xb8>)
  401766:	83da      	strh	r2, [r3, #30]
    mBusRegs[MBUS_REG_ANXL] = ptr[0];
  401768:	69fb      	ldr	r3, [r7, #28]
  40176a:	881a      	ldrh	r2, [r3, #0]
  40176c:	4b17      	ldr	r3, [pc, #92]	; (4017cc <TestCode+0xb8>)
  40176e:	839a      	strh	r2, [r3, #28]
    pvAngle = GetPvAngle();
  401770:	4b1d      	ldr	r3, [pc, #116]	; (4017e8 <TestCode+0xd4>)
  401772:	4798      	blx	r3
  401774:	4603      	mov	r3, r0
  401776:	607b      	str	r3, [r7, #4]
    ptr = (uint16_t*)&pvAngle;
  401778:	1d3b      	adds	r3, r7, #4
  40177a:	61fb      	str	r3, [r7, #28]
    mBusRegs[MBUS_REG_PVANGLEH] = ptr[1];
  40177c:	69fb      	ldr	r3, [r7, #28]
  40177e:	885a      	ldrh	r2, [r3, #2]
  401780:	4b12      	ldr	r3, [pc, #72]	; (4017cc <TestCode+0xb8>)
  401782:	845a      	strh	r2, [r3, #34]	; 0x22
    mBusRegs[MBUS_REG_PVANGLEL] = ptr[0];
  401784:	69fb      	ldr	r3, [r7, #28]
  401786:	881a      	ldrh	r2, [r3, #0]
  401788:	4b10      	ldr	r3, [pc, #64]	; (4017cc <TestCode+0xb8>)
  40178a:	841a      	strh	r2, [r3, #32]
    
	if(mBusRegs[MBUS_REG_MOTDR])
  40178c:	4b0f      	ldr	r3, [pc, #60]	; (4017cc <TestCode+0xb8>)
  40178e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
  401790:	2b00      	cmp	r3, #0
  401792:	d006      	beq.n	4017a2 <TestCode+0x8e>
	{
		gpio_set_pin_low(PIN_MOTOR_IN1_IDX);
  401794:	2020      	movs	r0, #32
  401796:	4b15      	ldr	r3, [pc, #84]	; (4017ec <TestCode+0xd8>)
  401798:	4798      	blx	r3
		gpio_set_pin_high(PIN_MOTOR_IN2_IDX);
  40179a:	2021      	movs	r0, #33	; 0x21
  40179c:	4b14      	ldr	r3, [pc, #80]	; (4017f0 <TestCode+0xdc>)
  40179e:	4798      	blx	r3
  4017a0:	e005      	b.n	4017ae <TestCode+0x9a>
	}
	else
	{
		gpio_set_pin_high(PIN_MOTOR_IN1_IDX);
  4017a2:	2020      	movs	r0, #32
  4017a4:	4b12      	ldr	r3, [pc, #72]	; (4017f0 <TestCode+0xdc>)
  4017a6:	4798      	blx	r3
		gpio_set_pin_low(PIN_MOTOR_IN2_IDX);
  4017a8:	2021      	movs	r0, #33	; 0x21
  4017aa:	4b10      	ldr	r3, [pc, #64]	; (4017ec <TestCode+0xd8>)
  4017ac:	4798      	blx	r3
	}

    if(mBusRegs[MBUS_REG_MOTON])
  4017ae:	4b07      	ldr	r3, [pc, #28]	; (4017cc <TestCode+0xb8>)
  4017b0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
  4017b2:	2b00      	cmp	r3, #0
  4017b4:	d003      	beq.n	4017be <TestCode+0xaa>
        //Disable Charge Ctrlr
		//ccEn = 0;
        /* Turn Motor On */
		#ifndef MOTOR_CTRL_A4955
		#else
			gpio_set_pin_high(PIN_MOTOR_SLP_IDX);
  4017b6:	2022      	movs	r0, #34	; 0x22
  4017b8:	4b0d      	ldr	r3, [pc, #52]	; (4017f0 <TestCode+0xdc>)
  4017ba:	4798      	blx	r3
		#ifndef MOTOR_CTRL_A4955
		#else
			gpio_set_pin_low(PIN_MOTOR_SLP_IDX);
		#endif
    }
}
  4017bc:	e002      	b.n	4017c4 <TestCode+0xb0>
        //Enable Charge Ctrlr
        //ccEn = 1;
        /* Turn Motor Off */
		#ifndef MOTOR_CTRL_A4955
		#else
			gpio_set_pin_low(PIN_MOTOR_SLP_IDX);
  4017be:	2022      	movs	r0, #34	; 0x22
  4017c0:	4b0a      	ldr	r3, [pc, #40]	; (4017ec <TestCode+0xd8>)
  4017c2:	4798      	blx	r3
		#endif
    }
}
  4017c4:	bf00      	nop
  4017c6:	3720      	adds	r7, #32
  4017c8:	46bd      	mov	sp, r7
  4017ca:	bd80      	pop	{r7, pc}
  4017cc:	2000048c 	.word	0x2000048c
  4017d0:	40018000 	.word	0x40018000
  4017d4:	004002f5 	.word	0x004002f5
  4017d8:	20000492 	.word	0x20000492
  4017dc:	004003b5 	.word	0x004003b5
  4017e0:	004005ed 	.word	0x004005ed
  4017e4:	004017f5 	.word	0x004017f5
  4017e8:	00401989 	.word	0x00401989
  4017ec:	00404139 	.word	0x00404139
  4017f0:	00404109 	.word	0x00404109

004017f4 <GetOrientation>:
        ConsoleWrite((uint8_t *)buff2, strlen(buff2));
    }
#endif

void GetOrientation(int16_t *acc, float *orientation)
{
  4017f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4017f6:	b087      	sub	sp, #28
  4017f8:	af00      	add	r7, sp, #0
  4017fa:	6078      	str	r0, [r7, #4]
  4017fc:	6039      	str	r1, [r7, #0]
    float accFlt[3];
    accFlt[0] = ((float)acc[0])/32768.0f;
  4017fe:	687b      	ldr	r3, [r7, #4]
  401800:	f9b3 2000 	ldrsh.w	r2, [r3]
  401804:	4b55      	ldr	r3, [pc, #340]	; (40195c <GetOrientation+0x168>)
  401806:	4610      	mov	r0, r2
  401808:	4798      	blx	r3
  40180a:	4602      	mov	r2, r0
  40180c:	4b54      	ldr	r3, [pc, #336]	; (401960 <GetOrientation+0x16c>)
  40180e:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
  401812:	4610      	mov	r0, r2
  401814:	4798      	blx	r3
  401816:	4603      	mov	r3, r0
  401818:	60fb      	str	r3, [r7, #12]
    accFlt[1] = ((float)acc[1])/32768.0f;
  40181a:	687b      	ldr	r3, [r7, #4]
  40181c:	3302      	adds	r3, #2
  40181e:	f9b3 2000 	ldrsh.w	r2, [r3]
  401822:	4b4e      	ldr	r3, [pc, #312]	; (40195c <GetOrientation+0x168>)
  401824:	4610      	mov	r0, r2
  401826:	4798      	blx	r3
  401828:	4602      	mov	r2, r0
  40182a:	4b4d      	ldr	r3, [pc, #308]	; (401960 <GetOrientation+0x16c>)
  40182c:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
  401830:	4610      	mov	r0, r2
  401832:	4798      	blx	r3
  401834:	4603      	mov	r3, r0
  401836:	613b      	str	r3, [r7, #16]
    accFlt[2] = ((float)acc[2])/32768.0f;
  401838:	687b      	ldr	r3, [r7, #4]
  40183a:	3304      	adds	r3, #4
  40183c:	f9b3 2000 	ldrsh.w	r2, [r3]
  401840:	4b46      	ldr	r3, [pc, #280]	; (40195c <GetOrientation+0x168>)
  401842:	4610      	mov	r0, r2
  401844:	4798      	blx	r3
  401846:	4602      	mov	r2, r0
  401848:	4b45      	ldr	r3, [pc, #276]	; (401960 <GetOrientation+0x16c>)
  40184a:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
  40184e:	4610      	mov	r0, r2
  401850:	4798      	blx	r3
  401852:	4603      	mov	r3, r0
  401854:	617b      	str	r3, [r7, #20]
    
    //Equation 25 (Rotate Across X Axis)
    orientation[0] = atan2(accFlt[1], accFlt[2]);
  401856:	693a      	ldr	r2, [r7, #16]
  401858:	4b42      	ldr	r3, [pc, #264]	; (401964 <GetOrientation+0x170>)
  40185a:	4610      	mov	r0, r2
  40185c:	4798      	blx	r3
  40185e:	4604      	mov	r4, r0
  401860:	460d      	mov	r5, r1
  401862:	697a      	ldr	r2, [r7, #20]
  401864:	4b3f      	ldr	r3, [pc, #252]	; (401964 <GetOrientation+0x170>)
  401866:	4610      	mov	r0, r2
  401868:	4798      	blx	r3
  40186a:	4602      	mov	r2, r0
  40186c:	460b      	mov	r3, r1
  40186e:	4620      	mov	r0, r4
  401870:	4629      	mov	r1, r5
  401872:	4c3d      	ldr	r4, [pc, #244]	; (401968 <GetOrientation+0x174>)
  401874:	47a0      	blx	r4
  401876:	460a      	mov	r2, r1
  401878:	4601      	mov	r1, r0
  40187a:	4b3c      	ldr	r3, [pc, #240]	; (40196c <GetOrientation+0x178>)
  40187c:	4608      	mov	r0, r1
  40187e:	4611      	mov	r1, r2
  401880:	4798      	blx	r3
  401882:	4602      	mov	r2, r0
  401884:	683b      	ldr	r3, [r7, #0]
  401886:	601a      	str	r2, [r3, #0]
    //Radian to degrees conversion
    orientation[0] = (180.0f * orientation[0])/(float)M_PI;
  401888:	683b      	ldr	r3, [r7, #0]
  40188a:	681a      	ldr	r2, [r3, #0]
  40188c:	4b38      	ldr	r3, [pc, #224]	; (401970 <GetOrientation+0x17c>)
  40188e:	4939      	ldr	r1, [pc, #228]	; (401974 <GetOrientation+0x180>)
  401890:	4610      	mov	r0, r2
  401892:	4798      	blx	r3
  401894:	4603      	mov	r3, r0
  401896:	461a      	mov	r2, r3
  401898:	4b31      	ldr	r3, [pc, #196]	; (401960 <GetOrientation+0x16c>)
  40189a:	4937      	ldr	r1, [pc, #220]	; (401978 <GetOrientation+0x184>)
  40189c:	4610      	mov	r0, r2
  40189e:	4798      	blx	r3
  4018a0:	4603      	mov	r3, r0
  4018a2:	461a      	mov	r2, r3
  4018a4:	683b      	ldr	r3, [r7, #0]
  4018a6:	601a      	str	r2, [r3, #0]
    
    //Equation 26 (Rotate Across Y Axis)
    orientation[1] = sqrt(accFlt[1]*accFlt[1] + accFlt[2]*accFlt[2]);
  4018a8:	683b      	ldr	r3, [r7, #0]
  4018aa:	1d1c      	adds	r4, r3, #4
  4018ac:	693a      	ldr	r2, [r7, #16]
  4018ae:	6939      	ldr	r1, [r7, #16]
  4018b0:	4b2f      	ldr	r3, [pc, #188]	; (401970 <GetOrientation+0x17c>)
  4018b2:	4610      	mov	r0, r2
  4018b4:	4798      	blx	r3
  4018b6:	4603      	mov	r3, r0
  4018b8:	461d      	mov	r5, r3
  4018ba:	697a      	ldr	r2, [r7, #20]
  4018bc:	6979      	ldr	r1, [r7, #20]
  4018be:	4b2c      	ldr	r3, [pc, #176]	; (401970 <GetOrientation+0x17c>)
  4018c0:	4610      	mov	r0, r2
  4018c2:	4798      	blx	r3
  4018c4:	4603      	mov	r3, r0
  4018c6:	461a      	mov	r2, r3
  4018c8:	4b2c      	ldr	r3, [pc, #176]	; (40197c <GetOrientation+0x188>)
  4018ca:	4611      	mov	r1, r2
  4018cc:	4628      	mov	r0, r5
  4018ce:	4798      	blx	r3
  4018d0:	4603      	mov	r3, r0
  4018d2:	461a      	mov	r2, r3
  4018d4:	4b23      	ldr	r3, [pc, #140]	; (401964 <GetOrientation+0x170>)
  4018d6:	4610      	mov	r0, r2
  4018d8:	4798      	blx	r3
  4018da:	4602      	mov	r2, r0
  4018dc:	460b      	mov	r3, r1
  4018de:	4610      	mov	r0, r2
  4018e0:	4619      	mov	r1, r3
  4018e2:	4b27      	ldr	r3, [pc, #156]	; (401980 <GetOrientation+0x18c>)
  4018e4:	4798      	blx	r3
  4018e6:	460a      	mov	r2, r1
  4018e8:	4601      	mov	r1, r0
  4018ea:	4b20      	ldr	r3, [pc, #128]	; (40196c <GetOrientation+0x178>)
  4018ec:	4608      	mov	r0, r1
  4018ee:	4611      	mov	r1, r2
  4018f0:	4798      	blx	r3
  4018f2:	4603      	mov	r3, r0
  4018f4:	6023      	str	r3, [r4, #0]
    orientation[1] = atan2(-accFlt[0], orientation[1]); 
  4018f6:	683b      	ldr	r3, [r7, #0]
  4018f8:	1d1c      	adds	r4, r3, #4
  4018fa:	68fb      	ldr	r3, [r7, #12]
  4018fc:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
  401900:	4b18      	ldr	r3, [pc, #96]	; (401964 <GetOrientation+0x170>)
  401902:	4610      	mov	r0, r2
  401904:	4798      	blx	r3
  401906:	4605      	mov	r5, r0
  401908:	460e      	mov	r6, r1
  40190a:	683b      	ldr	r3, [r7, #0]
  40190c:	3304      	adds	r3, #4
  40190e:	681a      	ldr	r2, [r3, #0]
  401910:	4b14      	ldr	r3, [pc, #80]	; (401964 <GetOrientation+0x170>)
  401912:	4610      	mov	r0, r2
  401914:	4798      	blx	r3
  401916:	4602      	mov	r2, r0
  401918:	460b      	mov	r3, r1
  40191a:	4628      	mov	r0, r5
  40191c:	4631      	mov	r1, r6
  40191e:	4d12      	ldr	r5, [pc, #72]	; (401968 <GetOrientation+0x174>)
  401920:	47a8      	blx	r5
  401922:	460a      	mov	r2, r1
  401924:	4601      	mov	r1, r0
  401926:	4b11      	ldr	r3, [pc, #68]	; (40196c <GetOrientation+0x178>)
  401928:	4608      	mov	r0, r1
  40192a:	4611      	mov	r1, r2
  40192c:	4798      	blx	r3
  40192e:	4603      	mov	r3, r0
  401930:	6023      	str	r3, [r4, #0]
    //Radian to degrees conversion
    orientation[1] = (180.0f * orientation[1])/(float)M_PI;
  401932:	683b      	ldr	r3, [r7, #0]
  401934:	1d1c      	adds	r4, r3, #4
  401936:	683b      	ldr	r3, [r7, #0]
  401938:	3304      	adds	r3, #4
  40193a:	681a      	ldr	r2, [r3, #0]
  40193c:	4b0c      	ldr	r3, [pc, #48]	; (401970 <GetOrientation+0x17c>)
  40193e:	490d      	ldr	r1, [pc, #52]	; (401974 <GetOrientation+0x180>)
  401940:	4610      	mov	r0, r2
  401942:	4798      	blx	r3
  401944:	4603      	mov	r3, r0
  401946:	461a      	mov	r2, r3
  401948:	4b05      	ldr	r3, [pc, #20]	; (401960 <GetOrientation+0x16c>)
  40194a:	490b      	ldr	r1, [pc, #44]	; (401978 <GetOrientation+0x184>)
  40194c:	4610      	mov	r0, r2
  40194e:	4798      	blx	r3
  401950:	4603      	mov	r3, r0
  401952:	6023      	str	r3, [r4, #0]
}
  401954:	bf00      	nop
  401956:	371c      	adds	r7, #28
  401958:	46bd      	mov	sp, r7
  40195a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40195c:	0040aa31 	.word	0x0040aa31
  401960:	0040ac41 	.word	0x0040ac41
  401964:	0040a1c5 	.word	0x0040a1c5
  401968:	00407921 	.word	0x00407921
  40196c:	0040a81d 	.word	0x0040a81d
  401970:	0040aad9 	.word	0x0040aad9
  401974:	43340000 	.word	0x43340000
  401978:	40490fdb 	.word	0x40490fdb
  40197c:	0040a8c9 	.word	0x0040a8c9
  401980:	00407925 	.word	0x00407925
  401984:	00000000 	.word	0x00000000

00401988 <GetPvAngle>:

float GetPvAngle(void)
{
  401988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40198c:	b0af      	sub	sp, #188	; 0xbc
  40198e:	af00      	add	r7, sp, #0
	float e, f, g, h, i, j, k, l, m, n, o, p;
	float q, r, s, t;
	float timeInSecs;
    
    //BCD to Int Conversion
    date = ((mBusRegs[MBUS_REG_DD]>>4)*10) + (mBusRegs[MBUS_REG_DD]&0x000F); 
  401990:	4b4a      	ldr	r3, [pc, #296]	; (401abc <GetPvAngle+0x134>)
  401992:	891b      	ldrh	r3, [r3, #8]
  401994:	091b      	lsrs	r3, r3, #4
  401996:	b29b      	uxth	r3, r3
  401998:	461a      	mov	r2, r3
  40199a:	0092      	lsls	r2, r2, #2
  40199c:	4413      	add	r3, r2
  40199e:	005b      	lsls	r3, r3, #1
  4019a0:	b29a      	uxth	r2, r3
  4019a2:	4b46      	ldr	r3, [pc, #280]	; (401abc <GetPvAngle+0x134>)
  4019a4:	891b      	ldrh	r3, [r3, #8]
  4019a6:	f003 030f 	and.w	r3, r3, #15
  4019aa:	b29b      	uxth	r3, r3
  4019ac:	4413      	add	r3, r2
  4019ae:	b29b      	uxth	r3, r3
  4019b0:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
    mon = ((mBusRegs[MBUS_REG_MM]>>4)*10) + (mBusRegs[MBUS_REG_MM]&0x000F); 
  4019b4:	4b41      	ldr	r3, [pc, #260]	; (401abc <GetPvAngle+0x134>)
  4019b6:	895b      	ldrh	r3, [r3, #10]
  4019b8:	091b      	lsrs	r3, r3, #4
  4019ba:	b29b      	uxth	r3, r3
  4019bc:	461a      	mov	r2, r3
  4019be:	0092      	lsls	r2, r2, #2
  4019c0:	4413      	add	r3, r2
  4019c2:	005b      	lsls	r3, r3, #1
  4019c4:	b29a      	uxth	r2, r3
  4019c6:	4b3d      	ldr	r3, [pc, #244]	; (401abc <GetPvAngle+0x134>)
  4019c8:	895b      	ldrh	r3, [r3, #10]
  4019ca:	f003 030f 	and.w	r3, r3, #15
  4019ce:	b29b      	uxth	r3, r3
  4019d0:	4413      	add	r3, r2
  4019d2:	b29b      	uxth	r3, r3
  4019d4:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
    year = ((mBusRegs[MBUS_REG_YY]>>4)*10) + (mBusRegs[MBUS_REG_YY]&0x000F); 
  4019d8:	4b38      	ldr	r3, [pc, #224]	; (401abc <GetPvAngle+0x134>)
  4019da:	899b      	ldrh	r3, [r3, #12]
  4019dc:	091b      	lsrs	r3, r3, #4
  4019de:	b29b      	uxth	r3, r3
  4019e0:	461a      	mov	r2, r3
  4019e2:	0092      	lsls	r2, r2, #2
  4019e4:	4413      	add	r3, r2
  4019e6:	005b      	lsls	r3, r3, #1
  4019e8:	b29a      	uxth	r2, r3
  4019ea:	4b34      	ldr	r3, [pc, #208]	; (401abc <GetPvAngle+0x134>)
  4019ec:	899b      	ldrh	r3, [r3, #12]
  4019ee:	f003 030f 	and.w	r3, r3, #15
  4019f2:	b29b      	uxth	r3, r3
  4019f4:	4413      	add	r3, r2
  4019f6:	b29b      	uxth	r3, r3
  4019f8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
    year += 2000;
  4019fc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
  401a00:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
  401a04:	b29b      	uxth	r3, r3
  401a06:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
    hrs = ((mBusRegs[MBUS_REG_HRS]>>4)*10) + (mBusRegs[MBUS_REG_HRS]&0x000F); 
  401a0a:	4b2c      	ldr	r3, [pc, #176]	; (401abc <GetPvAngle+0x134>)
  401a0c:	889b      	ldrh	r3, [r3, #4]
  401a0e:	091b      	lsrs	r3, r3, #4
  401a10:	b29b      	uxth	r3, r3
  401a12:	461a      	mov	r2, r3
  401a14:	0092      	lsls	r2, r2, #2
  401a16:	4413      	add	r3, r2
  401a18:	005b      	lsls	r3, r3, #1
  401a1a:	b29a      	uxth	r2, r3
  401a1c:	4b27      	ldr	r3, [pc, #156]	; (401abc <GetPvAngle+0x134>)
  401a1e:	889b      	ldrh	r3, [r3, #4]
  401a20:	f003 030f 	and.w	r3, r3, #15
  401a24:	b29b      	uxth	r3, r3
  401a26:	4413      	add	r3, r2
  401a28:	b29b      	uxth	r3, r3
  401a2a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
    min = ((mBusRegs[MBUS_REG_MIN]>>4)*10) + (mBusRegs[MBUS_REG_MIN]&0x000F); 
  401a2e:	4b23      	ldr	r3, [pc, #140]	; (401abc <GetPvAngle+0x134>)
  401a30:	885b      	ldrh	r3, [r3, #2]
  401a32:	091b      	lsrs	r3, r3, #4
  401a34:	b29b      	uxth	r3, r3
  401a36:	461a      	mov	r2, r3
  401a38:	0092      	lsls	r2, r2, #2
  401a3a:	4413      	add	r3, r2
  401a3c:	005b      	lsls	r3, r3, #1
  401a3e:	b29a      	uxth	r2, r3
  401a40:	4b1e      	ldr	r3, [pc, #120]	; (401abc <GetPvAngle+0x134>)
  401a42:	885b      	ldrh	r3, [r3, #2]
  401a44:	f003 030f 	and.w	r3, r3, #15
  401a48:	b29b      	uxth	r3, r3
  401a4a:	4413      	add	r3, r2
  401a4c:	b29b      	uxth	r3, r3
  401a4e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    sec = ((mBusRegs[MBUS_REG_SEC]>>4)*10) + (mBusRegs[MBUS_REG_SEC]&0x000F); 
  401a52:	4b1a      	ldr	r3, [pc, #104]	; (401abc <GetPvAngle+0x134>)
  401a54:	881b      	ldrh	r3, [r3, #0]
  401a56:	091b      	lsrs	r3, r3, #4
  401a58:	b29b      	uxth	r3, r3
  401a5a:	461a      	mov	r2, r3
  401a5c:	0092      	lsls	r2, r2, #2
  401a5e:	4413      	add	r3, r2
  401a60:	005b      	lsls	r3, r3, #1
  401a62:	b29a      	uxth	r2, r3
  401a64:	4b15      	ldr	r3, [pc, #84]	; (401abc <GetPvAngle+0x134>)
  401a66:	881b      	ldrh	r3, [r3, #0]
  401a68:	f003 030f 	and.w	r3, r3, #15
  401a6c:	b29b      	uxth	r3, r3
  401a6e:	4413      	add	r3, r2
  401a70:	b29b      	uxth	r3, r3
  401a72:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
    #ifdef LOG_EN
        sprintf(LogBuff,"%d,%d,%d,", hrs, min, sec);
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
    #endif
    
    timeInSecs = (hrs*3600 + min*60 + sec)/86400.0f;
  401a76:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	; 0xa8
  401a7a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
  401a7e:	fb02 f103 	mul.w	r1, r2, r3
  401a82:	f9b7 20a6 	ldrsh.w	r2, [r7, #166]	; 0xa6
  401a86:	4613      	mov	r3, r2
  401a88:	011b      	lsls	r3, r3, #4
  401a8a:	1a9b      	subs	r3, r3, r2
  401a8c:	009b      	lsls	r3, r3, #2
  401a8e:	18ca      	adds	r2, r1, r3
  401a90:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
  401a94:	441a      	add	r2, r3
  401a96:	4b0a      	ldr	r3, [pc, #40]	; (401ac0 <GetPvAngle+0x138>)
  401a98:	4610      	mov	r0, r2
  401a9a:	4798      	blx	r3
  401a9c:	4602      	mov	r2, r0
  401a9e:	4b09      	ldr	r3, [pc, #36]	; (401ac4 <GetPvAngle+0x13c>)
  401aa0:	4909      	ldr	r1, [pc, #36]	; (401ac8 <GetPvAngle+0x140>)
  401aa2:	4610      	mov	r0, r2
  401aa4:	4798      	blx	r3
  401aa6:	4603      	mov	r3, r0
  401aa8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    //Angle Calcualation Algorithm
	if (mon <= 2)
  401aac:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
  401ab0:	2b02      	cmp	r3, #2
  401ab2:	dc0b      	bgt.n	401acc <GetPvAngle+0x144>
	{
		x1 = 1;
  401ab4:	2301      	movs	r3, #1
  401ab6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  401aba:	e00a      	b.n	401ad2 <GetPvAngle+0x14a>
  401abc:	2000048c 	.word	0x2000048c
  401ac0:	0040aa31 	.word	0x0040aa31
  401ac4:	0040ac41 	.word	0x0040ac41
  401ac8:	47a8c000 	.word	0x47a8c000
	}
	else
	{
		x1 = 0;
  401acc:	2300      	movs	r3, #0
  401ace:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	}
	x2 = 12 * x1;
  401ad2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
  401ad6:	4613      	mov	r3, r2
  401ad8:	005b      	lsls	r3, r3, #1
  401ada:	4413      	add	r3, r2
  401adc:	009b      	lsls	r3, r3, #2
  401ade:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	x3 = x2 - 3;
  401ae2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
  401ae6:	3b03      	subs	r3, #3
  401ae8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	x4 = mon + x3;
  401aec:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	; 0xac
  401af0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
  401af4:	4413      	add	r3, r2
  401af6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	x5 = 4800 - x1;
  401afa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
  401afe:	f5c3 5396 	rsb	r3, r3, #4800	; 0x12c0
  401b02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	x7 = x5 + year;
  401b06:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
  401b0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
  401b0e:	4413      	add	r3, r2
  401b10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	y0 = 153*x4;
  401b14:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
  401b18:	4613      	mov	r3, r2
  401b1a:	00db      	lsls	r3, r3, #3
  401b1c:	4413      	add	r3, r2
  401b1e:	011a      	lsls	r2, r3, #4
  401b20:	4413      	add	r3, r2
  401b22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	y1 = y0 + 2;
  401b26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
  401b2a:	3302      	adds	r3, #2
  401b2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	y2 = y1 / 5.0f;
  401b30:	4b8a      	ldr	r3, [pc, #552]	; (401d5c <GetPvAngle+0x3d4>)
  401b32:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
  401b36:	4798      	blx	r3
  401b38:	4602      	mov	r2, r0
  401b3a:	4b89      	ldr	r3, [pc, #548]	; (401d60 <GetPvAngle+0x3d8>)
  401b3c:	4989      	ldr	r1, [pc, #548]	; (401d64 <GetPvAngle+0x3dc>)
  401b3e:	4610      	mov	r0, r2
  401b40:	4798      	blx	r3
  401b42:	4603      	mov	r3, r0
  401b44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	y3 = date + y2;
  401b48:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
  401b4c:	4b83      	ldr	r3, [pc, #524]	; (401d5c <GetPvAngle+0x3d4>)
  401b4e:	4610      	mov	r0, r2
  401b50:	4798      	blx	r3
  401b52:	4602      	mov	r2, r0
  401b54:	4b84      	ldr	r3, [pc, #528]	; (401d68 <GetPvAngle+0x3e0>)
  401b56:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
  401b5a:	4610      	mov	r0, r2
  401b5c:	4798      	blx	r3
  401b5e:	4603      	mov	r3, r0
  401b60:	67fb      	str	r3, [r7, #124]	; 0x7c
	y4 = 365 * x7;
  401b62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
  401b66:	f240 126d 	movw	r2, #365	; 0x16d
  401b6a:	fb02 f303 	mul.w	r3, r2, r3
  401b6e:	67bb      	str	r3, [r7, #120]	; 0x78
	y5 = y3 + y4;
  401b70:	4b7a      	ldr	r3, [pc, #488]	; (401d5c <GetPvAngle+0x3d4>)
  401b72:	6fb8      	ldr	r0, [r7, #120]	; 0x78
  401b74:	4798      	blx	r3
  401b76:	4602      	mov	r2, r0
  401b78:	4b7b      	ldr	r3, [pc, #492]	; (401d68 <GetPvAngle+0x3e0>)
  401b7a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
  401b7c:	4610      	mov	r0, r2
  401b7e:	4798      	blx	r3
  401b80:	4603      	mov	r3, r0
  401b82:	677b      	str	r3, [r7, #116]	; 0x74
	y6 = x7 / 4.0f;
  401b84:	4b75      	ldr	r3, [pc, #468]	; (401d5c <GetPvAngle+0x3d4>)
  401b86:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
  401b8a:	4798      	blx	r3
  401b8c:	4602      	mov	r2, r0
  401b8e:	4b74      	ldr	r3, [pc, #464]	; (401d60 <GetPvAngle+0x3d8>)
  401b90:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  401b94:	4610      	mov	r0, r2
  401b96:	4798      	blx	r3
  401b98:	4603      	mov	r3, r0
  401b9a:	673b      	str	r3, [r7, #112]	; 0x70
	y7 = y5 + y6;
  401b9c:	4b72      	ldr	r3, [pc, #456]	; (401d68 <GetPvAngle+0x3e0>)
  401b9e:	6f39      	ldr	r1, [r7, #112]	; 0x70
  401ba0:	6f78      	ldr	r0, [r7, #116]	; 0x74
  401ba2:	4798      	blx	r3
  401ba4:	4603      	mov	r3, r0
  401ba6:	66fb      	str	r3, [r7, #108]	; 0x6c
	y8 = x7 / 100.0f;
  401ba8:	4b6c      	ldr	r3, [pc, #432]	; (401d5c <GetPvAngle+0x3d4>)
  401baa:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
  401bae:	4798      	blx	r3
  401bb0:	4602      	mov	r2, r0
  401bb2:	4b6b      	ldr	r3, [pc, #428]	; (401d60 <GetPvAngle+0x3d8>)
  401bb4:	496d      	ldr	r1, [pc, #436]	; (401d6c <GetPvAngle+0x3e4>)
  401bb6:	4610      	mov	r0, r2
  401bb8:	4798      	blx	r3
  401bba:	4603      	mov	r3, r0
  401bbc:	66bb      	str	r3, [r7, #104]	; 0x68
	y9 = y7 - y8;
  401bbe:	4b6c      	ldr	r3, [pc, #432]	; (401d70 <GetPvAngle+0x3e8>)
  401bc0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
  401bc2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
  401bc4:	4798      	blx	r3
  401bc6:	4603      	mov	r3, r0
  401bc8:	667b      	str	r3, [r7, #100]	; 0x64
	y10 = x7 / 400.0f;
  401bca:	4b64      	ldr	r3, [pc, #400]	; (401d5c <GetPvAngle+0x3d4>)
  401bcc:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
  401bd0:	4798      	blx	r3
  401bd2:	4602      	mov	r2, r0
  401bd4:	4b62      	ldr	r3, [pc, #392]	; (401d60 <GetPvAngle+0x3d8>)
  401bd6:	4967      	ldr	r1, [pc, #412]	; (401d74 <GetPvAngle+0x3ec>)
  401bd8:	4610      	mov	r0, r2
  401bda:	4798      	blx	r3
  401bdc:	4603      	mov	r3, r0
  401bde:	663b      	str	r3, [r7, #96]	; 0x60
	y11 = y9 + y10;
  401be0:	4b61      	ldr	r3, [pc, #388]	; (401d68 <GetPvAngle+0x3e0>)
  401be2:	6e39      	ldr	r1, [r7, #96]	; 0x60
  401be4:	6e78      	ldr	r0, [r7, #100]	; 0x64
  401be6:	4798      	blx	r3
  401be8:	4603      	mov	r3, r0
  401bea:	65fb      	str	r3, [r7, #92]	; 0x5c

	x9 = y11 - 32045;
  401bec:	4b60      	ldr	r3, [pc, #384]	; (401d70 <GetPvAngle+0x3e8>)
  401bee:	4962      	ldr	r1, [pc, #392]	; (401d78 <GetPvAngle+0x3f0>)
  401bf0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
  401bf2:	4798      	blx	r3
  401bf4:	4603      	mov	r3, r0
  401bf6:	65bb      	str	r3, [r7, #88]	; 0x58
	y12 = hrs - 12;
  401bf8:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	; 0xa8
  401bfc:	3b0c      	subs	r3, #12
  401bfe:	657b      	str	r3, [r7, #84]	; 0x54
	y13 = y12 / 24.0f;
  401c00:	4b56      	ldr	r3, [pc, #344]	; (401d5c <GetPvAngle+0x3d4>)
  401c02:	6d78      	ldr	r0, [r7, #84]	; 0x54
  401c04:	4798      	blx	r3
  401c06:	4602      	mov	r2, r0
  401c08:	4b55      	ldr	r3, [pc, #340]	; (401d60 <GetPvAngle+0x3d8>)
  401c0a:	495c      	ldr	r1, [pc, #368]	; (401d7c <GetPvAngle+0x3f4>)
  401c0c:	4610      	mov	r0, r2
  401c0e:	4798      	blx	r3
  401c10:	4603      	mov	r3, r0
  401c12:	653b      	str	r3, [r7, #80]	; 0x50
	y14 = min / 1440.0f;
  401c14:	f9b7 20a6 	ldrsh.w	r2, [r7, #166]	; 0xa6
  401c18:	4b50      	ldr	r3, [pc, #320]	; (401d5c <GetPvAngle+0x3d4>)
  401c1a:	4610      	mov	r0, r2
  401c1c:	4798      	blx	r3
  401c1e:	4602      	mov	r2, r0
  401c20:	4b4f      	ldr	r3, [pc, #316]	; (401d60 <GetPvAngle+0x3d8>)
  401c22:	4957      	ldr	r1, [pc, #348]	; (401d80 <GetPvAngle+0x3f8>)
  401c24:	4610      	mov	r0, r2
  401c26:	4798      	blx	r3
  401c28:	4603      	mov	r3, r0
  401c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
	y15 = y13 + y14;
  401c2c:	4b4e      	ldr	r3, [pc, #312]	; (401d68 <GetPvAngle+0x3e0>)
  401c2e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
  401c30:	6d38      	ldr	r0, [r7, #80]	; 0x50
  401c32:	4798      	blx	r3
  401c34:	4603      	mov	r3, r0
  401c36:	64bb      	str	r3, [r7, #72]	; 0x48
	y16 = sec / 86400.0f;
  401c38:	f9b7 20a4 	ldrsh.w	r2, [r7, #164]	; 0xa4
  401c3c:	4b47      	ldr	r3, [pc, #284]	; (401d5c <GetPvAngle+0x3d4>)
  401c3e:	4610      	mov	r0, r2
  401c40:	4798      	blx	r3
  401c42:	4602      	mov	r2, r0
  401c44:	4b46      	ldr	r3, [pc, #280]	; (401d60 <GetPvAngle+0x3d8>)
  401c46:	494f      	ldr	r1, [pc, #316]	; (401d84 <GetPvAngle+0x3fc>)
  401c48:	4610      	mov	r0, r2
  401c4a:	4798      	blx	r3
  401c4c:	4603      	mov	r3, r0
  401c4e:	647b      	str	r3, [r7, #68]	; 0x44
	x13 = y15 + y16;
  401c50:	4b45      	ldr	r3, [pc, #276]	; (401d68 <GetPvAngle+0x3e0>)
  401c52:	6c79      	ldr	r1, [r7, #68]	; 0x44
  401c54:	6cb8      	ldr	r0, [r7, #72]	; 0x48
  401c56:	4798      	blx	r3
  401c58:	4603      	mov	r3, r0
  401c5a:	643b      	str	r3, [r7, #64]	; 0x40

	e = x9 + x13;
  401c5c:	4b42      	ldr	r3, [pc, #264]	; (401d68 <GetPvAngle+0x3e0>)
  401c5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
  401c60:	6db8      	ldr	r0, [r7, #88]	; 0x58
  401c62:	4798      	blx	r3
  401c64:	4603      	mov	r3, r0
  401c66:	63fb      	str	r3, [r7, #60]	; 0x3c
	f = (e - 2451545.0f) / 36525.0f;
  401c68:	4b41      	ldr	r3, [pc, #260]	; (401d70 <GetPvAngle+0x3e8>)
  401c6a:	4947      	ldr	r1, [pc, #284]	; (401d88 <GetPvAngle+0x400>)
  401c6c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
  401c6e:	4798      	blx	r3
  401c70:	4603      	mov	r3, r0
  401c72:	461a      	mov	r2, r3
  401c74:	4b3a      	ldr	r3, [pc, #232]	; (401d60 <GetPvAngle+0x3d8>)
  401c76:	4945      	ldr	r1, [pc, #276]	; (401d8c <GetPvAngle+0x404>)
  401c78:	4610      	mov	r0, r2
  401c7a:	4798      	blx	r3
  401c7c:	4603      	mov	r3, r0
  401c7e:	63bb      	str	r3, [r7, #56]	; 0x38
	g = ((int)(280.46646f + f*(36000.76983f + f*0.0003032f))) % 360; //mod
  401c80:	4b43      	ldr	r3, [pc, #268]	; (401d90 <GetPvAngle+0x408>)
  401c82:	4944      	ldr	r1, [pc, #272]	; (401d94 <GetPvAngle+0x40c>)
  401c84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  401c86:	4798      	blx	r3
  401c88:	4603      	mov	r3, r0
  401c8a:	461a      	mov	r2, r3
  401c8c:	4b36      	ldr	r3, [pc, #216]	; (401d68 <GetPvAngle+0x3e0>)
  401c8e:	4942      	ldr	r1, [pc, #264]	; (401d98 <GetPvAngle+0x410>)
  401c90:	4610      	mov	r0, r2
  401c92:	4798      	blx	r3
  401c94:	4603      	mov	r3, r0
  401c96:	461a      	mov	r2, r3
  401c98:	4b3d      	ldr	r3, [pc, #244]	; (401d90 <GetPvAngle+0x408>)
  401c9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  401c9c:	4610      	mov	r0, r2
  401c9e:	4798      	blx	r3
  401ca0:	4603      	mov	r3, r0
  401ca2:	461a      	mov	r2, r3
  401ca4:	4b30      	ldr	r3, [pc, #192]	; (401d68 <GetPvAngle+0x3e0>)
  401ca6:	493d      	ldr	r1, [pc, #244]	; (401d9c <GetPvAngle+0x414>)
  401ca8:	4610      	mov	r0, r2
  401caa:	4798      	blx	r3
  401cac:	4603      	mov	r3, r0
  401cae:	461a      	mov	r2, r3
  401cb0:	4b3b      	ldr	r3, [pc, #236]	; (401da0 <GetPvAngle+0x418>)
  401cb2:	4610      	mov	r0, r2
  401cb4:	4798      	blx	r3
  401cb6:	4603      	mov	r3, r0
  401cb8:	4a3a      	ldr	r2, [pc, #232]	; (401da4 <GetPvAngle+0x41c>)
  401cba:	fb83 1202 	smull	r1, r2, r3, r2
  401cbe:	441a      	add	r2, r3
  401cc0:	1211      	asrs	r1, r2, #8
  401cc2:	17da      	asrs	r2, r3, #31
  401cc4:	1a8a      	subs	r2, r1, r2
  401cc6:	f44f 71b4 	mov.w	r1, #360	; 0x168
  401cca:	fb01 f202 	mul.w	r2, r1, r2
  401cce:	1a9a      	subs	r2, r3, r2
  401cd0:	4b22      	ldr	r3, [pc, #136]	; (401d5c <GetPvAngle+0x3d4>)
  401cd2:	4610      	mov	r0, r2
  401cd4:	4798      	blx	r3
  401cd6:	4603      	mov	r3, r0
  401cd8:	637b      	str	r3, [r7, #52]	; 0x34
	h = 357.52911f + f*(35999.05029f - 0.0001537f*f);
  401cda:	4b2d      	ldr	r3, [pc, #180]	; (401d90 <GetPvAngle+0x408>)
  401cdc:	4932      	ldr	r1, [pc, #200]	; (401da8 <GetPvAngle+0x420>)
  401cde:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  401ce0:	4798      	blx	r3
  401ce2:	4603      	mov	r3, r0
  401ce4:	461a      	mov	r2, r3
  401ce6:	4b22      	ldr	r3, [pc, #136]	; (401d70 <GetPvAngle+0x3e8>)
  401ce8:	4611      	mov	r1, r2
  401cea:	4830      	ldr	r0, [pc, #192]	; (401dac <GetPvAngle+0x424>)
  401cec:	4798      	blx	r3
  401cee:	4603      	mov	r3, r0
  401cf0:	461a      	mov	r2, r3
  401cf2:	4b27      	ldr	r3, [pc, #156]	; (401d90 <GetPvAngle+0x408>)
  401cf4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  401cf6:	4610      	mov	r0, r2
  401cf8:	4798      	blx	r3
  401cfa:	4603      	mov	r3, r0
  401cfc:	461a      	mov	r2, r3
  401cfe:	4b1a      	ldr	r3, [pc, #104]	; (401d68 <GetPvAngle+0x3e0>)
  401d00:	492b      	ldr	r1, [pc, #172]	; (401db0 <GetPvAngle+0x428>)
  401d02:	4610      	mov	r0, r2
  401d04:	4798      	blx	r3
  401d06:	4603      	mov	r3, r0
  401d08:	633b      	str	r3, [r7, #48]	; 0x30
	i = 0.016708634f - f*(0.000042037f + 0.0000001267f*f);
  401d0a:	4b21      	ldr	r3, [pc, #132]	; (401d90 <GetPvAngle+0x408>)
  401d0c:	4929      	ldr	r1, [pc, #164]	; (401db4 <GetPvAngle+0x42c>)
  401d0e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  401d10:	4798      	blx	r3
  401d12:	4603      	mov	r3, r0
  401d14:	461a      	mov	r2, r3
  401d16:	4b14      	ldr	r3, [pc, #80]	; (401d68 <GetPvAngle+0x3e0>)
  401d18:	4927      	ldr	r1, [pc, #156]	; (401db8 <GetPvAngle+0x430>)
  401d1a:	4610      	mov	r0, r2
  401d1c:	4798      	blx	r3
  401d1e:	4603      	mov	r3, r0
  401d20:	461a      	mov	r2, r3
  401d22:	4b1b      	ldr	r3, [pc, #108]	; (401d90 <GetPvAngle+0x408>)
  401d24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  401d26:	4610      	mov	r0, r2
  401d28:	4798      	blx	r3
  401d2a:	4603      	mov	r3, r0
  401d2c:	461a      	mov	r2, r3
  401d2e:	4b10      	ldr	r3, [pc, #64]	; (401d70 <GetPvAngle+0x3e8>)
  401d30:	4611      	mov	r1, r2
  401d32:	4822      	ldr	r0, [pc, #136]	; (401dbc <GetPvAngle+0x434>)
  401d34:	4798      	blx	r3
  401d36:	4603      	mov	r3, r0
  401d38:	62fb      	str	r3, [r7, #44]	; 0x2c
	j = sin(Rad(h))*(1.914602f - f*(0.004817f + 0.000014f*f));
  401d3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
  401d3c:	4b20      	ldr	r3, [pc, #128]	; (401dc0 <GetPvAngle+0x438>)
  401d3e:	4798      	blx	r3
  401d40:	4602      	mov	r2, r0
  401d42:	4b20      	ldr	r3, [pc, #128]	; (401dc4 <GetPvAngle+0x43c>)
  401d44:	4610      	mov	r0, r2
  401d46:	4798      	blx	r3
  401d48:	4603      	mov	r3, r0
  401d4a:	460c      	mov	r4, r1
  401d4c:	4618      	mov	r0, r3
  401d4e:	4621      	mov	r1, r4
  401d50:	4b1d      	ldr	r3, [pc, #116]	; (401dc8 <GetPvAngle+0x440>)
  401d52:	4798      	blx	r3
  401d54:	4605      	mov	r5, r0
  401d56:	460e      	mov	r6, r1
  401d58:	4b0d      	ldr	r3, [pc, #52]	; (401d90 <GetPvAngle+0x408>)
  401d5a:	e037      	b.n	401dcc <GetPvAngle+0x444>
  401d5c:	0040aa31 	.word	0x0040aa31
  401d60:	0040ac41 	.word	0x0040ac41
  401d64:	40a00000 	.word	0x40a00000
  401d68:	0040a8c9 	.word	0x0040a8c9
  401d6c:	42c80000 	.word	0x42c80000
  401d70:	0040a8c5 	.word	0x0040a8c5
  401d74:	43c80000 	.word	0x43c80000
  401d78:	46fa5a00 	.word	0x46fa5a00
  401d7c:	41c00000 	.word	0x41c00000
  401d80:	44b40000 	.word	0x44b40000
  401d84:	47a8c000 	.word	0x47a8c000
  401d88:	4a15a164 	.word	0x4a15a164
  401d8c:	470ead00 	.word	0x470ead00
  401d90:	0040aad9 	.word	0x0040aad9
  401d94:	399ef6d1 	.word	0x399ef6d1
  401d98:	470ca0c5 	.word	0x470ca0c5
  401d9c:	438c3bb5 	.word	0x438c3bb5
  401da0:	0040ae65 	.word	0x0040ae65
  401da4:	b60b60b7 	.word	0xb60b60b7
  401da8:	39212a88 	.word	0x39212a88
  401dac:	470c9f0d 	.word	0x470c9f0d
  401db0:	43b2c3ba 	.word	0x43b2c3ba
  401db4:	34080b08 	.word	0x34080b08
  401db8:	383050e3 	.word	0x383050e3
  401dbc:	3c88e08c 	.word	0x3c88e08c
  401dc0:	00402821 	.word	0x00402821
  401dc4:	0040a1c5 	.word	0x0040a1c5
  401dc8:	004076dd 	.word	0x004076dd
  401dcc:	4994      	ldr	r1, [pc, #592]	; (402020 <GetPvAngle+0x698>)
  401dce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  401dd0:	4798      	blx	r3
  401dd2:	4603      	mov	r3, r0
  401dd4:	461a      	mov	r2, r3
  401dd6:	4b93      	ldr	r3, [pc, #588]	; (402024 <GetPvAngle+0x69c>)
  401dd8:	4993      	ldr	r1, [pc, #588]	; (402028 <GetPvAngle+0x6a0>)
  401dda:	4610      	mov	r0, r2
  401ddc:	4798      	blx	r3
  401dde:	4603      	mov	r3, r0
  401de0:	461a      	mov	r2, r3
  401de2:	4b92      	ldr	r3, [pc, #584]	; (40202c <GetPvAngle+0x6a4>)
  401de4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  401de6:	4610      	mov	r0, r2
  401de8:	4798      	blx	r3
  401dea:	4603      	mov	r3, r0
  401dec:	461a      	mov	r2, r3
  401dee:	4b90      	ldr	r3, [pc, #576]	; (402030 <GetPvAngle+0x6a8>)
  401df0:	4611      	mov	r1, r2
  401df2:	4890      	ldr	r0, [pc, #576]	; (402034 <GetPvAngle+0x6ac>)
  401df4:	4798      	blx	r3
  401df6:	4603      	mov	r3, r0
  401df8:	461a      	mov	r2, r3
  401dfa:	4b8f      	ldr	r3, [pc, #572]	; (402038 <GetPvAngle+0x6b0>)
  401dfc:	4610      	mov	r0, r2
  401dfe:	4798      	blx	r3
  401e00:	4602      	mov	r2, r0
  401e02:	460b      	mov	r3, r1
  401e04:	4c8d      	ldr	r4, [pc, #564]	; (40203c <GetPvAngle+0x6b4>)
  401e06:	4628      	mov	r0, r5
  401e08:	4631      	mov	r1, r6
  401e0a:	47a0      	blx	r4
  401e0c:	4603      	mov	r3, r0
  401e0e:	460c      	mov	r4, r1
  401e10:	4619      	mov	r1, r3
  401e12:	4622      	mov	r2, r4
  401e14:	4b8a      	ldr	r3, [pc, #552]	; (402040 <GetPvAngle+0x6b8>)
  401e16:	4608      	mov	r0, r1
  401e18:	4611      	mov	r1, r2
  401e1a:	4798      	blx	r3
  401e1c:	4603      	mov	r3, r0
  401e1e:	62bb      	str	r3, [r7, #40]	; 0x28
	j = j + sin(Rad(2 * h))*(0.019993f - 0.000101f*f);
  401e20:	4b85      	ldr	r3, [pc, #532]	; (402038 <GetPvAngle+0x6b0>)
  401e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  401e24:	4798      	blx	r3
  401e26:	4605      	mov	r5, r0
  401e28:	460e      	mov	r6, r1
  401e2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  401e2c:	4b7d      	ldr	r3, [pc, #500]	; (402024 <GetPvAngle+0x69c>)
  401e2e:	4611      	mov	r1, r2
  401e30:	4610      	mov	r0, r2
  401e32:	4798      	blx	r3
  401e34:	4603      	mov	r3, r0
  401e36:	4618      	mov	r0, r3
  401e38:	4b82      	ldr	r3, [pc, #520]	; (402044 <GetPvAngle+0x6bc>)
  401e3a:	4798      	blx	r3
  401e3c:	4602      	mov	r2, r0
  401e3e:	4b7e      	ldr	r3, [pc, #504]	; (402038 <GetPvAngle+0x6b0>)
  401e40:	4610      	mov	r0, r2
  401e42:	4798      	blx	r3
  401e44:	4603      	mov	r3, r0
  401e46:	460c      	mov	r4, r1
  401e48:	4618      	mov	r0, r3
  401e4a:	4621      	mov	r1, r4
  401e4c:	4b7e      	ldr	r3, [pc, #504]	; (402048 <GetPvAngle+0x6c0>)
  401e4e:	4798      	blx	r3
  401e50:	4680      	mov	r8, r0
  401e52:	4689      	mov	r9, r1
  401e54:	4b75      	ldr	r3, [pc, #468]	; (40202c <GetPvAngle+0x6a4>)
  401e56:	497d      	ldr	r1, [pc, #500]	; (40204c <GetPvAngle+0x6c4>)
  401e58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  401e5a:	4798      	blx	r3
  401e5c:	4603      	mov	r3, r0
  401e5e:	461a      	mov	r2, r3
  401e60:	4b73      	ldr	r3, [pc, #460]	; (402030 <GetPvAngle+0x6a8>)
  401e62:	4611      	mov	r1, r2
  401e64:	487a      	ldr	r0, [pc, #488]	; (402050 <GetPvAngle+0x6c8>)
  401e66:	4798      	blx	r3
  401e68:	4603      	mov	r3, r0
  401e6a:	461a      	mov	r2, r3
  401e6c:	4b72      	ldr	r3, [pc, #456]	; (402038 <GetPvAngle+0x6b0>)
  401e6e:	4610      	mov	r0, r2
  401e70:	4798      	blx	r3
  401e72:	4602      	mov	r2, r0
  401e74:	460b      	mov	r3, r1
  401e76:	4c71      	ldr	r4, [pc, #452]	; (40203c <GetPvAngle+0x6b4>)
  401e78:	4640      	mov	r0, r8
  401e7a:	4649      	mov	r1, r9
  401e7c:	47a0      	blx	r4
  401e7e:	4603      	mov	r3, r0
  401e80:	460c      	mov	r4, r1
  401e82:	461a      	mov	r2, r3
  401e84:	4623      	mov	r3, r4
  401e86:	4c73      	ldr	r4, [pc, #460]	; (402054 <GetPvAngle+0x6cc>)
  401e88:	4628      	mov	r0, r5
  401e8a:	4631      	mov	r1, r6
  401e8c:	47a0      	blx	r4
  401e8e:	4603      	mov	r3, r0
  401e90:	460c      	mov	r4, r1
  401e92:	4619      	mov	r1, r3
  401e94:	4622      	mov	r2, r4
  401e96:	4b6a      	ldr	r3, [pc, #424]	; (402040 <GetPvAngle+0x6b8>)
  401e98:	4608      	mov	r0, r1
  401e9a:	4611      	mov	r1, r2
  401e9c:	4798      	blx	r3
  401e9e:	4603      	mov	r3, r0
  401ea0:	62bb      	str	r3, [r7, #40]	; 0x28
	j = j + sin(Rad(3 * h))*0.000289f;
  401ea2:	4b65      	ldr	r3, [pc, #404]	; (402038 <GetPvAngle+0x6b0>)
  401ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  401ea6:	4798      	blx	r3
  401ea8:	4605      	mov	r5, r0
  401eaa:	460e      	mov	r6, r1
  401eac:	4b5f      	ldr	r3, [pc, #380]	; (40202c <GetPvAngle+0x6a4>)
  401eae:	496a      	ldr	r1, [pc, #424]	; (402058 <GetPvAngle+0x6d0>)
  401eb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
  401eb2:	4798      	blx	r3
  401eb4:	4603      	mov	r3, r0
  401eb6:	4618      	mov	r0, r3
  401eb8:	4b62      	ldr	r3, [pc, #392]	; (402044 <GetPvAngle+0x6bc>)
  401eba:	4798      	blx	r3
  401ebc:	4602      	mov	r2, r0
  401ebe:	4b5e      	ldr	r3, [pc, #376]	; (402038 <GetPvAngle+0x6b0>)
  401ec0:	4610      	mov	r0, r2
  401ec2:	4798      	blx	r3
  401ec4:	4603      	mov	r3, r0
  401ec6:	460c      	mov	r4, r1
  401ec8:	4618      	mov	r0, r3
  401eca:	4621      	mov	r1, r4
  401ecc:	4b5e      	ldr	r3, [pc, #376]	; (402048 <GetPvAngle+0x6c0>)
  401ece:	4798      	blx	r3
  401ed0:	4c5a      	ldr	r4, [pc, #360]	; (40203c <GetPvAngle+0x6b4>)
  401ed2:	a34f      	add	r3, pc, #316	; (adr r3, 402010 <GetPvAngle+0x688>)
  401ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
  401ed8:	47a0      	blx	r4
  401eda:	4603      	mov	r3, r0
  401edc:	460c      	mov	r4, r1
  401ede:	461a      	mov	r2, r3
  401ee0:	4623      	mov	r3, r4
  401ee2:	4c5c      	ldr	r4, [pc, #368]	; (402054 <GetPvAngle+0x6cc>)
  401ee4:	4628      	mov	r0, r5
  401ee6:	4631      	mov	r1, r6
  401ee8:	47a0      	blx	r4
  401eea:	4603      	mov	r3, r0
  401eec:	460c      	mov	r4, r1
  401eee:	4619      	mov	r1, r3
  401ef0:	4622      	mov	r2, r4
  401ef2:	4b53      	ldr	r3, [pc, #332]	; (402040 <GetPvAngle+0x6b8>)
  401ef4:	4608      	mov	r0, r1
  401ef6:	4611      	mov	r1, r2
  401ef8:	4798      	blx	r3
  401efa:	4603      	mov	r3, r0
  401efc:	62bb      	str	r3, [r7, #40]	; 0x28
	k = g + j;
  401efe:	4b49      	ldr	r3, [pc, #292]	; (402024 <GetPvAngle+0x69c>)
  401f00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  401f02:	6b78      	ldr	r0, [r7, #52]	; 0x34
  401f04:	4798      	blx	r3
  401f06:	4603      	mov	r3, r0
  401f08:	627b      	str	r3, [r7, #36]	; 0x24
	l = k - 0.00569f - 0.00478f*sin(Rad(125.04f - 1934.136f*f));
  401f0a:	4b49      	ldr	r3, [pc, #292]	; (402030 <GetPvAngle+0x6a8>)
  401f0c:	4953      	ldr	r1, [pc, #332]	; (40205c <GetPvAngle+0x6d4>)
  401f0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
  401f10:	4798      	blx	r3
  401f12:	4603      	mov	r3, r0
  401f14:	461a      	mov	r2, r3
  401f16:	4b48      	ldr	r3, [pc, #288]	; (402038 <GetPvAngle+0x6b0>)
  401f18:	4610      	mov	r0, r2
  401f1a:	4798      	blx	r3
  401f1c:	4605      	mov	r5, r0
  401f1e:	460e      	mov	r6, r1
  401f20:	4b42      	ldr	r3, [pc, #264]	; (40202c <GetPvAngle+0x6a4>)
  401f22:	494f      	ldr	r1, [pc, #316]	; (402060 <GetPvAngle+0x6d8>)
  401f24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  401f26:	4798      	blx	r3
  401f28:	4603      	mov	r3, r0
  401f2a:	461a      	mov	r2, r3
  401f2c:	4b40      	ldr	r3, [pc, #256]	; (402030 <GetPvAngle+0x6a8>)
  401f2e:	4611      	mov	r1, r2
  401f30:	484c      	ldr	r0, [pc, #304]	; (402064 <GetPvAngle+0x6dc>)
  401f32:	4798      	blx	r3
  401f34:	4603      	mov	r3, r0
  401f36:	4618      	mov	r0, r3
  401f38:	4b42      	ldr	r3, [pc, #264]	; (402044 <GetPvAngle+0x6bc>)
  401f3a:	4798      	blx	r3
  401f3c:	4602      	mov	r2, r0
  401f3e:	4b3e      	ldr	r3, [pc, #248]	; (402038 <GetPvAngle+0x6b0>)
  401f40:	4610      	mov	r0, r2
  401f42:	4798      	blx	r3
  401f44:	4603      	mov	r3, r0
  401f46:	460c      	mov	r4, r1
  401f48:	4618      	mov	r0, r3
  401f4a:	4621      	mov	r1, r4
  401f4c:	4b3e      	ldr	r3, [pc, #248]	; (402048 <GetPvAngle+0x6c0>)
  401f4e:	4798      	blx	r3
  401f50:	4c3a      	ldr	r4, [pc, #232]	; (40203c <GetPvAngle+0x6b4>)
  401f52:	a331      	add	r3, pc, #196	; (adr r3, 402018 <GetPvAngle+0x690>)
  401f54:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f58:	47a0      	blx	r4
  401f5a:	4603      	mov	r3, r0
  401f5c:	460c      	mov	r4, r1
  401f5e:	461a      	mov	r2, r3
  401f60:	4623      	mov	r3, r4
  401f62:	4c41      	ldr	r4, [pc, #260]	; (402068 <GetPvAngle+0x6e0>)
  401f64:	4628      	mov	r0, r5
  401f66:	4631      	mov	r1, r6
  401f68:	47a0      	blx	r4
  401f6a:	4603      	mov	r3, r0
  401f6c:	460c      	mov	r4, r1
  401f6e:	4619      	mov	r1, r3
  401f70:	4622      	mov	r2, r4
  401f72:	4b33      	ldr	r3, [pc, #204]	; (402040 <GetPvAngle+0x6b8>)
  401f74:	4608      	mov	r0, r1
  401f76:	4611      	mov	r1, r2
  401f78:	4798      	blx	r3
  401f7a:	4603      	mov	r3, r0
  401f7c:	623b      	str	r3, [r7, #32]
	m = 23 + (26 + ((21.448f - f*(46.815f + f*(0.00059f - f*0.001813f)))) / 60.0f) / 60.0f;
  401f7e:	4b2b      	ldr	r3, [pc, #172]	; (40202c <GetPvAngle+0x6a4>)
  401f80:	493a      	ldr	r1, [pc, #232]	; (40206c <GetPvAngle+0x6e4>)
  401f82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  401f84:	4798      	blx	r3
  401f86:	4603      	mov	r3, r0
  401f88:	461a      	mov	r2, r3
  401f8a:	4b29      	ldr	r3, [pc, #164]	; (402030 <GetPvAngle+0x6a8>)
  401f8c:	4611      	mov	r1, r2
  401f8e:	4838      	ldr	r0, [pc, #224]	; (402070 <GetPvAngle+0x6e8>)
  401f90:	4798      	blx	r3
  401f92:	4603      	mov	r3, r0
  401f94:	461a      	mov	r2, r3
  401f96:	4b25      	ldr	r3, [pc, #148]	; (40202c <GetPvAngle+0x6a4>)
  401f98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  401f9a:	4610      	mov	r0, r2
  401f9c:	4798      	blx	r3
  401f9e:	4603      	mov	r3, r0
  401fa0:	461a      	mov	r2, r3
  401fa2:	4b20      	ldr	r3, [pc, #128]	; (402024 <GetPvAngle+0x69c>)
  401fa4:	4933      	ldr	r1, [pc, #204]	; (402074 <GetPvAngle+0x6ec>)
  401fa6:	4610      	mov	r0, r2
  401fa8:	4798      	blx	r3
  401faa:	4603      	mov	r3, r0
  401fac:	461a      	mov	r2, r3
  401fae:	4b1f      	ldr	r3, [pc, #124]	; (40202c <GetPvAngle+0x6a4>)
  401fb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  401fb2:	4610      	mov	r0, r2
  401fb4:	4798      	blx	r3
  401fb6:	4603      	mov	r3, r0
  401fb8:	461a      	mov	r2, r3
  401fba:	4b1d      	ldr	r3, [pc, #116]	; (402030 <GetPvAngle+0x6a8>)
  401fbc:	4611      	mov	r1, r2
  401fbe:	482e      	ldr	r0, [pc, #184]	; (402078 <GetPvAngle+0x6f0>)
  401fc0:	4798      	blx	r3
  401fc2:	4603      	mov	r3, r0
  401fc4:	461a      	mov	r2, r3
  401fc6:	4b2d      	ldr	r3, [pc, #180]	; (40207c <GetPvAngle+0x6f4>)
  401fc8:	492d      	ldr	r1, [pc, #180]	; (402080 <GetPvAngle+0x6f8>)
  401fca:	4610      	mov	r0, r2
  401fcc:	4798      	blx	r3
  401fce:	4603      	mov	r3, r0
  401fd0:	461a      	mov	r2, r3
  401fd2:	4b14      	ldr	r3, [pc, #80]	; (402024 <GetPvAngle+0x69c>)
  401fd4:	492b      	ldr	r1, [pc, #172]	; (402084 <GetPvAngle+0x6fc>)
  401fd6:	4610      	mov	r0, r2
  401fd8:	4798      	blx	r3
  401fda:	4603      	mov	r3, r0
  401fdc:	461a      	mov	r2, r3
  401fde:	4b27      	ldr	r3, [pc, #156]	; (40207c <GetPvAngle+0x6f4>)
  401fe0:	4927      	ldr	r1, [pc, #156]	; (402080 <GetPvAngle+0x6f8>)
  401fe2:	4610      	mov	r0, r2
  401fe4:	4798      	blx	r3
  401fe6:	4603      	mov	r3, r0
  401fe8:	461a      	mov	r2, r3
  401fea:	4b0e      	ldr	r3, [pc, #56]	; (402024 <GetPvAngle+0x69c>)
  401fec:	4926      	ldr	r1, [pc, #152]	; (402088 <GetPvAngle+0x700>)
  401fee:	4610      	mov	r0, r2
  401ff0:	4798      	blx	r3
  401ff2:	4603      	mov	r3, r0
  401ff4:	61fb      	str	r3, [r7, #28]
	n = m + 0.00256f*cos(Rad(125.04f - 1934.136f*f));
  401ff6:	4b10      	ldr	r3, [pc, #64]	; (402038 <GetPvAngle+0x6b0>)
  401ff8:	69f8      	ldr	r0, [r7, #28]
  401ffa:	4798      	blx	r3
  401ffc:	4605      	mov	r5, r0
  401ffe:	460e      	mov	r6, r1
  402000:	4b0a      	ldr	r3, [pc, #40]	; (40202c <GetPvAngle+0x6a4>)
  402002:	4917      	ldr	r1, [pc, #92]	; (402060 <GetPvAngle+0x6d8>)
  402004:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  402006:	4798      	blx	r3
  402008:	4603      	mov	r3, r0
  40200a:	e03f      	b.n	40208c <GetPvAngle+0x704>
  40200c:	f3af 8000 	nop.w
  402010:	80000000 	.word	0x80000000
  402014:	3f32f09d 	.word	0x3f32f09d
  402018:	80000000 	.word	0x80000000
  40201c:	3f739431 	.word	0x3f739431
  402020:	376ae18b 	.word	0x376ae18b
  402024:	0040a8c9 	.word	0x0040a8c9
  402028:	3b9dd7ed 	.word	0x3b9dd7ed
  40202c:	0040aad9 	.word	0x0040aad9
  402030:	0040a8c5 	.word	0x0040a8c5
  402034:	3ff511ae 	.word	0x3ff511ae
  402038:	0040a1c5 	.word	0x0040a1c5
  40203c:	0040a26d 	.word	0x0040a26d
  402040:	0040a81d 	.word	0x0040a81d
  402044:	00402821 	.word	0x00402821
  402048:	004076dd 	.word	0x004076dd
  40204c:	38d3cff6 	.word	0x38d3cff6
  402050:	3ca3c85c 	.word	0x3ca3c85c
  402054:	00409f09 	.word	0x00409f09
  402058:	40400000 	.word	0x40400000
  40205c:	3bba732e 	.word	0x3bba732e
  402060:	44f1c45a 	.word	0x44f1c45a
  402064:	42fa147b 	.word	0x42fa147b
  402068:	00409f05 	.word	0x00409f05
  40206c:	3aeda22f 	.word	0x3aeda22f
  402070:	3a1aaa3b 	.word	0x3a1aaa3b
  402074:	423b428f 	.word	0x423b428f
  402078:	41ab9581 	.word	0x41ab9581
  40207c:	0040ac41 	.word	0x0040ac41
  402080:	42700000 	.word	0x42700000
  402084:	41d00000 	.word	0x41d00000
  402088:	41b80000 	.word	0x41b80000
  40208c:	461a      	mov	r2, r3
  40208e:	4ba2      	ldr	r3, [pc, #648]	; (402318 <GetPvAngle+0x990>)
  402090:	4611      	mov	r1, r2
  402092:	48a2      	ldr	r0, [pc, #648]	; (40231c <GetPvAngle+0x994>)
  402094:	4798      	blx	r3
  402096:	4603      	mov	r3, r0
  402098:	4618      	mov	r0, r3
  40209a:	4ba1      	ldr	r3, [pc, #644]	; (402320 <GetPvAngle+0x998>)
  40209c:	4798      	blx	r3
  40209e:	4602      	mov	r2, r0
  4020a0:	4ba0      	ldr	r3, [pc, #640]	; (402324 <GetPvAngle+0x99c>)
  4020a2:	4610      	mov	r0, r2
  4020a4:	4798      	blx	r3
  4020a6:	4603      	mov	r3, r0
  4020a8:	460c      	mov	r4, r1
  4020aa:	4618      	mov	r0, r3
  4020ac:	4621      	mov	r1, r4
  4020ae:	4b9e      	ldr	r3, [pc, #632]	; (402328 <GetPvAngle+0x9a0>)
  4020b0:	4798      	blx	r3
  4020b2:	4c9e      	ldr	r4, [pc, #632]	; (40232c <GetPvAngle+0x9a4>)
  4020b4:	a396      	add	r3, pc, #600	; (adr r3, 402310 <GetPvAngle+0x988>)
  4020b6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4020ba:	47a0      	blx	r4
  4020bc:	4603      	mov	r3, r0
  4020be:	460c      	mov	r4, r1
  4020c0:	461a      	mov	r2, r3
  4020c2:	4623      	mov	r3, r4
  4020c4:	4c9a      	ldr	r4, [pc, #616]	; (402330 <GetPvAngle+0x9a8>)
  4020c6:	4628      	mov	r0, r5
  4020c8:	4631      	mov	r1, r6
  4020ca:	47a0      	blx	r4
  4020cc:	4603      	mov	r3, r0
  4020ce:	460c      	mov	r4, r1
  4020d0:	4619      	mov	r1, r3
  4020d2:	4622      	mov	r2, r4
  4020d4:	4b97      	ldr	r3, [pc, #604]	; (402334 <GetPvAngle+0x9ac>)
  4020d6:	4608      	mov	r0, r1
  4020d8:	4611      	mov	r1, r2
  4020da:	4798      	blx	r3
  4020dc:	4603      	mov	r3, r0
  4020de:	61bb      	str	r3, [r7, #24]
	o = Deg(asin(sin(Rad(n))*sin(Rad(l))));
  4020e0:	69b8      	ldr	r0, [r7, #24]
  4020e2:	4b8f      	ldr	r3, [pc, #572]	; (402320 <GetPvAngle+0x998>)
  4020e4:	4798      	blx	r3
  4020e6:	4602      	mov	r2, r0
  4020e8:	4b8e      	ldr	r3, [pc, #568]	; (402324 <GetPvAngle+0x99c>)
  4020ea:	4610      	mov	r0, r2
  4020ec:	4798      	blx	r3
  4020ee:	4603      	mov	r3, r0
  4020f0:	460c      	mov	r4, r1
  4020f2:	4618      	mov	r0, r3
  4020f4:	4621      	mov	r1, r4
  4020f6:	4b90      	ldr	r3, [pc, #576]	; (402338 <GetPvAngle+0x9b0>)
  4020f8:	4798      	blx	r3
  4020fa:	4605      	mov	r5, r0
  4020fc:	460e      	mov	r6, r1
  4020fe:	6a38      	ldr	r0, [r7, #32]
  402100:	4b87      	ldr	r3, [pc, #540]	; (402320 <GetPvAngle+0x998>)
  402102:	4798      	blx	r3
  402104:	4602      	mov	r2, r0
  402106:	4b87      	ldr	r3, [pc, #540]	; (402324 <GetPvAngle+0x99c>)
  402108:	4610      	mov	r0, r2
  40210a:	4798      	blx	r3
  40210c:	4603      	mov	r3, r0
  40210e:	460c      	mov	r4, r1
  402110:	4618      	mov	r0, r3
  402112:	4621      	mov	r1, r4
  402114:	4b88      	ldr	r3, [pc, #544]	; (402338 <GetPvAngle+0x9b0>)
  402116:	4798      	blx	r3
  402118:	4602      	mov	r2, r0
  40211a:	460b      	mov	r3, r1
  40211c:	4c83      	ldr	r4, [pc, #524]	; (40232c <GetPvAngle+0x9a4>)
  40211e:	4628      	mov	r0, r5
  402120:	4631      	mov	r1, r6
  402122:	47a0      	blx	r4
  402124:	4603      	mov	r3, r0
  402126:	460c      	mov	r4, r1
  402128:	4618      	mov	r0, r3
  40212a:	4621      	mov	r1, r4
  40212c:	4b83      	ldr	r3, [pc, #524]	; (40233c <GetPvAngle+0x9b4>)
  40212e:	4798      	blx	r3
  402130:	460a      	mov	r2, r1
  402132:	4601      	mov	r1, r0
  402134:	4b7f      	ldr	r3, [pc, #508]	; (402334 <GetPvAngle+0x9ac>)
  402136:	4608      	mov	r0, r1
  402138:	4611      	mov	r1, r2
  40213a:	4798      	blx	r3
  40213c:	4603      	mov	r3, r0
  40213e:	4618      	mov	r0, r3
  402140:	4b7f      	ldr	r3, [pc, #508]	; (402340 <GetPvAngle+0x9b8>)
  402142:	4798      	blx	r3
  402144:	6178      	str	r0, [r7, #20]
	p = tan(Rad(n / 2))*tan(Rad(n / 2));
  402146:	4b7f      	ldr	r3, [pc, #508]	; (402344 <GetPvAngle+0x9bc>)
  402148:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40214c:	69b8      	ldr	r0, [r7, #24]
  40214e:	4798      	blx	r3
  402150:	4603      	mov	r3, r0
  402152:	4618      	mov	r0, r3
  402154:	4b72      	ldr	r3, [pc, #456]	; (402320 <GetPvAngle+0x998>)
  402156:	4798      	blx	r3
  402158:	4602      	mov	r2, r0
  40215a:	4b72      	ldr	r3, [pc, #456]	; (402324 <GetPvAngle+0x99c>)
  40215c:	4610      	mov	r0, r2
  40215e:	4798      	blx	r3
  402160:	4603      	mov	r3, r0
  402162:	460c      	mov	r4, r1
  402164:	4618      	mov	r0, r3
  402166:	4621      	mov	r1, r4
  402168:	4b77      	ldr	r3, [pc, #476]	; (402348 <GetPvAngle+0x9c0>)
  40216a:	4798      	blx	r3
  40216c:	4605      	mov	r5, r0
  40216e:	460e      	mov	r6, r1
  402170:	4b74      	ldr	r3, [pc, #464]	; (402344 <GetPvAngle+0x9bc>)
  402172:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402176:	69b8      	ldr	r0, [r7, #24]
  402178:	4798      	blx	r3
  40217a:	4603      	mov	r3, r0
  40217c:	4618      	mov	r0, r3
  40217e:	4b68      	ldr	r3, [pc, #416]	; (402320 <GetPvAngle+0x998>)
  402180:	4798      	blx	r3
  402182:	4602      	mov	r2, r0
  402184:	4b67      	ldr	r3, [pc, #412]	; (402324 <GetPvAngle+0x99c>)
  402186:	4610      	mov	r0, r2
  402188:	4798      	blx	r3
  40218a:	4603      	mov	r3, r0
  40218c:	460c      	mov	r4, r1
  40218e:	4618      	mov	r0, r3
  402190:	4621      	mov	r1, r4
  402192:	4b6d      	ldr	r3, [pc, #436]	; (402348 <GetPvAngle+0x9c0>)
  402194:	4798      	blx	r3
  402196:	4602      	mov	r2, r0
  402198:	460b      	mov	r3, r1
  40219a:	4c64      	ldr	r4, [pc, #400]	; (40232c <GetPvAngle+0x9a4>)
  40219c:	4628      	mov	r0, r5
  40219e:	4631      	mov	r1, r6
  4021a0:	47a0      	blx	r4
  4021a2:	4603      	mov	r3, r0
  4021a4:	460c      	mov	r4, r1
  4021a6:	4619      	mov	r1, r3
  4021a8:	4622      	mov	r2, r4
  4021aa:	4b62      	ldr	r3, [pc, #392]	; (402334 <GetPvAngle+0x9ac>)
  4021ac:	4608      	mov	r0, r1
  4021ae:	4611      	mov	r1, r2
  4021b0:	4798      	blx	r3
  4021b2:	4603      	mov	r3, r0
  4021b4:	613b      	str	r3, [r7, #16]
	q = 4.0f * Deg(p*sin(2.0f * Rad(g)) - 2.0f * i*sin(Rad(h)) + 4.0f * i*p*sin(Rad(h))*cos(2.0f * Rad(g)) - 0.5f*p*p*sin(4.0f * Rad(g)) - 1.25f*i*i*sin(2.0f * Rad(h)));
  4021b6:	4b5b      	ldr	r3, [pc, #364]	; (402324 <GetPvAngle+0x99c>)
  4021b8:	6938      	ldr	r0, [r7, #16]
  4021ba:	4798      	blx	r3
  4021bc:	4605      	mov	r5, r0
  4021be:	460e      	mov	r6, r1
  4021c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
  4021c2:	4b57      	ldr	r3, [pc, #348]	; (402320 <GetPvAngle+0x998>)
  4021c4:	4798      	blx	r3
  4021c6:	4602      	mov	r2, r0
  4021c8:	4b60      	ldr	r3, [pc, #384]	; (40234c <GetPvAngle+0x9c4>)
  4021ca:	4611      	mov	r1, r2
  4021cc:	4610      	mov	r0, r2
  4021ce:	4798      	blx	r3
  4021d0:	4603      	mov	r3, r0
  4021d2:	461a      	mov	r2, r3
  4021d4:	4b53      	ldr	r3, [pc, #332]	; (402324 <GetPvAngle+0x99c>)
  4021d6:	4610      	mov	r0, r2
  4021d8:	4798      	blx	r3
  4021da:	4603      	mov	r3, r0
  4021dc:	460c      	mov	r4, r1
  4021de:	4618      	mov	r0, r3
  4021e0:	4621      	mov	r1, r4
  4021e2:	4b55      	ldr	r3, [pc, #340]	; (402338 <GetPvAngle+0x9b0>)
  4021e4:	4798      	blx	r3
  4021e6:	4602      	mov	r2, r0
  4021e8:	460b      	mov	r3, r1
  4021ea:	4c50      	ldr	r4, [pc, #320]	; (40232c <GetPvAngle+0x9a4>)
  4021ec:	4628      	mov	r0, r5
  4021ee:	4631      	mov	r1, r6
  4021f0:	47a0      	blx	r4
  4021f2:	4603      	mov	r3, r0
  4021f4:	460c      	mov	r4, r1
  4021f6:	461d      	mov	r5, r3
  4021f8:	4626      	mov	r6, r4
  4021fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  4021fc:	4b53      	ldr	r3, [pc, #332]	; (40234c <GetPvAngle+0x9c4>)
  4021fe:	4611      	mov	r1, r2
  402200:	4610      	mov	r0, r2
  402202:	4798      	blx	r3
  402204:	4603      	mov	r3, r0
  402206:	461a      	mov	r2, r3
  402208:	4b46      	ldr	r3, [pc, #280]	; (402324 <GetPvAngle+0x99c>)
  40220a:	4610      	mov	r0, r2
  40220c:	4798      	blx	r3
  40220e:	4680      	mov	r8, r0
  402210:	4689      	mov	r9, r1
  402212:	6b38      	ldr	r0, [r7, #48]	; 0x30
  402214:	4b42      	ldr	r3, [pc, #264]	; (402320 <GetPvAngle+0x998>)
  402216:	4798      	blx	r3
  402218:	4602      	mov	r2, r0
  40221a:	4b42      	ldr	r3, [pc, #264]	; (402324 <GetPvAngle+0x99c>)
  40221c:	4610      	mov	r0, r2
  40221e:	4798      	blx	r3
  402220:	4603      	mov	r3, r0
  402222:	460c      	mov	r4, r1
  402224:	4618      	mov	r0, r3
  402226:	4621      	mov	r1, r4
  402228:	4b43      	ldr	r3, [pc, #268]	; (402338 <GetPvAngle+0x9b0>)
  40222a:	4798      	blx	r3
  40222c:	4602      	mov	r2, r0
  40222e:	460b      	mov	r3, r1
  402230:	4c3e      	ldr	r4, [pc, #248]	; (40232c <GetPvAngle+0x9a4>)
  402232:	4640      	mov	r0, r8
  402234:	4649      	mov	r1, r9
  402236:	47a0      	blx	r4
  402238:	4603      	mov	r3, r0
  40223a:	460c      	mov	r4, r1
  40223c:	461a      	mov	r2, r3
  40223e:	4623      	mov	r3, r4
  402240:	4c43      	ldr	r4, [pc, #268]	; (402350 <GetPvAngle+0x9c8>)
  402242:	4628      	mov	r0, r5
  402244:	4631      	mov	r1, r6
  402246:	47a0      	blx	r4
  402248:	4603      	mov	r3, r0
  40224a:	460c      	mov	r4, r1
  40224c:	461d      	mov	r5, r3
  40224e:	4626      	mov	r6, r4
  402250:	4b40      	ldr	r3, [pc, #256]	; (402354 <GetPvAngle+0x9cc>)
  402252:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  402256:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  402258:	4798      	blx	r3
  40225a:	4603      	mov	r3, r0
  40225c:	461a      	mov	r2, r3
  40225e:	4b3d      	ldr	r3, [pc, #244]	; (402354 <GetPvAngle+0x9cc>)
  402260:	6939      	ldr	r1, [r7, #16]
  402262:	4610      	mov	r0, r2
  402264:	4798      	blx	r3
  402266:	4603      	mov	r3, r0
  402268:	461a      	mov	r2, r3
  40226a:	4b2e      	ldr	r3, [pc, #184]	; (402324 <GetPvAngle+0x99c>)
  40226c:	4610      	mov	r0, r2
  40226e:	4798      	blx	r3
  402270:	4680      	mov	r8, r0
  402272:	4689      	mov	r9, r1
  402274:	6b38      	ldr	r0, [r7, #48]	; 0x30
  402276:	4b2a      	ldr	r3, [pc, #168]	; (402320 <GetPvAngle+0x998>)
  402278:	4798      	blx	r3
  40227a:	4602      	mov	r2, r0
  40227c:	4b29      	ldr	r3, [pc, #164]	; (402324 <GetPvAngle+0x99c>)
  40227e:	4610      	mov	r0, r2
  402280:	4798      	blx	r3
  402282:	4603      	mov	r3, r0
  402284:	460c      	mov	r4, r1
  402286:	4618      	mov	r0, r3
  402288:	4621      	mov	r1, r4
  40228a:	4b2b      	ldr	r3, [pc, #172]	; (402338 <GetPvAngle+0x9b0>)
  40228c:	4798      	blx	r3
  40228e:	4602      	mov	r2, r0
  402290:	460b      	mov	r3, r1
  402292:	4c26      	ldr	r4, [pc, #152]	; (40232c <GetPvAngle+0x9a4>)
  402294:	4640      	mov	r0, r8
  402296:	4649      	mov	r1, r9
  402298:	47a0      	blx	r4
  40229a:	4603      	mov	r3, r0
  40229c:	460c      	mov	r4, r1
  40229e:	4698      	mov	r8, r3
  4022a0:	46a1      	mov	r9, r4
  4022a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
  4022a4:	4b1e      	ldr	r3, [pc, #120]	; (402320 <GetPvAngle+0x998>)
  4022a6:	4798      	blx	r3
  4022a8:	4602      	mov	r2, r0
  4022aa:	4b28      	ldr	r3, [pc, #160]	; (40234c <GetPvAngle+0x9c4>)
  4022ac:	4611      	mov	r1, r2
  4022ae:	4610      	mov	r0, r2
  4022b0:	4798      	blx	r3
  4022b2:	4603      	mov	r3, r0
  4022b4:	461a      	mov	r2, r3
  4022b6:	4b1b      	ldr	r3, [pc, #108]	; (402324 <GetPvAngle+0x99c>)
  4022b8:	4610      	mov	r0, r2
  4022ba:	4798      	blx	r3
  4022bc:	4603      	mov	r3, r0
  4022be:	460c      	mov	r4, r1
  4022c0:	4618      	mov	r0, r3
  4022c2:	4621      	mov	r1, r4
  4022c4:	4b18      	ldr	r3, [pc, #96]	; (402328 <GetPvAngle+0x9a0>)
  4022c6:	4798      	blx	r3
  4022c8:	4602      	mov	r2, r0
  4022ca:	460b      	mov	r3, r1
  4022cc:	4c17      	ldr	r4, [pc, #92]	; (40232c <GetPvAngle+0x9a4>)
  4022ce:	4640      	mov	r0, r8
  4022d0:	4649      	mov	r1, r9
  4022d2:	47a0      	blx	r4
  4022d4:	4603      	mov	r3, r0
  4022d6:	460c      	mov	r4, r1
  4022d8:	461a      	mov	r2, r3
  4022da:	4623      	mov	r3, r4
  4022dc:	4c14      	ldr	r4, [pc, #80]	; (402330 <GetPvAngle+0x9a8>)
  4022de:	4628      	mov	r0, r5
  4022e0:	4631      	mov	r1, r6
  4022e2:	47a0      	blx	r4
  4022e4:	4603      	mov	r3, r0
  4022e6:	460c      	mov	r4, r1
  4022e8:	461d      	mov	r5, r3
  4022ea:	4626      	mov	r6, r4
  4022ec:	4b19      	ldr	r3, [pc, #100]	; (402354 <GetPvAngle+0x9cc>)
  4022ee:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  4022f2:	6938      	ldr	r0, [r7, #16]
  4022f4:	4798      	blx	r3
  4022f6:	4603      	mov	r3, r0
  4022f8:	461a      	mov	r2, r3
  4022fa:	4b16      	ldr	r3, [pc, #88]	; (402354 <GetPvAngle+0x9cc>)
  4022fc:	6939      	ldr	r1, [r7, #16]
  4022fe:	4610      	mov	r0, r2
  402300:	4798      	blx	r3
  402302:	4603      	mov	r3, r0
  402304:	461a      	mov	r2, r3
  402306:	4b07      	ldr	r3, [pc, #28]	; (402324 <GetPvAngle+0x99c>)
  402308:	4610      	mov	r0, r2
  40230a:	e025      	b.n	402358 <GetPvAngle+0x9d0>
  40230c:	f3af 8000 	nop.w
  402310:	80000000 	.word	0x80000000
  402314:	3f64f8b5 	.word	0x3f64f8b5
  402318:	0040a8c5 	.word	0x0040a8c5
  40231c:	42fa147b 	.word	0x42fa147b
  402320:	00402821 	.word	0x00402821
  402324:	0040a1c5 	.word	0x0040a1c5
  402328:	00407649 	.word	0x00407649
  40232c:	0040a26d 	.word	0x0040a26d
  402330:	00409f09 	.word	0x00409f09
  402334:	0040a81d 	.word	0x0040a81d
  402338:	004076dd 	.word	0x004076dd
  40233c:	00407871 	.word	0x00407871
  402340:	00402859 	.word	0x00402859
  402344:	0040ac41 	.word	0x0040ac41
  402348:	00407765 	.word	0x00407765
  40234c:	0040a8c9 	.word	0x0040a8c9
  402350:	00409f05 	.word	0x00409f05
  402354:	0040aad9 	.word	0x0040aad9
  402358:	4798      	blx	r3
  40235a:	4680      	mov	r8, r0
  40235c:	4689      	mov	r9, r1
  40235e:	6b78      	ldr	r0, [r7, #52]	; 0x34
  402360:	4b9e      	ldr	r3, [pc, #632]	; (4025dc <GetPvAngle+0xc54>)
  402362:	4798      	blx	r3
  402364:	4602      	mov	r2, r0
  402366:	4b9e      	ldr	r3, [pc, #632]	; (4025e0 <GetPvAngle+0xc58>)
  402368:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  40236c:	4610      	mov	r0, r2
  40236e:	4798      	blx	r3
  402370:	4603      	mov	r3, r0
  402372:	461a      	mov	r2, r3
  402374:	4b9b      	ldr	r3, [pc, #620]	; (4025e4 <GetPvAngle+0xc5c>)
  402376:	4610      	mov	r0, r2
  402378:	4798      	blx	r3
  40237a:	4603      	mov	r3, r0
  40237c:	460c      	mov	r4, r1
  40237e:	4618      	mov	r0, r3
  402380:	4621      	mov	r1, r4
  402382:	4b99      	ldr	r3, [pc, #612]	; (4025e8 <GetPvAngle+0xc60>)
  402384:	4798      	blx	r3
  402386:	4602      	mov	r2, r0
  402388:	460b      	mov	r3, r1
  40238a:	4c98      	ldr	r4, [pc, #608]	; (4025ec <GetPvAngle+0xc64>)
  40238c:	4640      	mov	r0, r8
  40238e:	4649      	mov	r1, r9
  402390:	47a0      	blx	r4
  402392:	4603      	mov	r3, r0
  402394:	460c      	mov	r4, r1
  402396:	461a      	mov	r2, r3
  402398:	4623      	mov	r3, r4
  40239a:	4c95      	ldr	r4, [pc, #596]	; (4025f0 <GetPvAngle+0xc68>)
  40239c:	4628      	mov	r0, r5
  40239e:	4631      	mov	r1, r6
  4023a0:	47a0      	blx	r4
  4023a2:	4603      	mov	r3, r0
  4023a4:	460c      	mov	r4, r1
  4023a6:	461d      	mov	r5, r3
  4023a8:	4626      	mov	r6, r4
  4023aa:	4b8d      	ldr	r3, [pc, #564]	; (4025e0 <GetPvAngle+0xc58>)
  4023ac:	4991      	ldr	r1, [pc, #580]	; (4025f4 <GetPvAngle+0xc6c>)
  4023ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  4023b0:	4798      	blx	r3
  4023b2:	4603      	mov	r3, r0
  4023b4:	461a      	mov	r2, r3
  4023b6:	4b8a      	ldr	r3, [pc, #552]	; (4025e0 <GetPvAngle+0xc58>)
  4023b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
  4023ba:	4610      	mov	r0, r2
  4023bc:	4798      	blx	r3
  4023be:	4603      	mov	r3, r0
  4023c0:	461a      	mov	r2, r3
  4023c2:	4b88      	ldr	r3, [pc, #544]	; (4025e4 <GetPvAngle+0xc5c>)
  4023c4:	4610      	mov	r0, r2
  4023c6:	4798      	blx	r3
  4023c8:	4680      	mov	r8, r0
  4023ca:	4689      	mov	r9, r1
  4023cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
  4023ce:	4b83      	ldr	r3, [pc, #524]	; (4025dc <GetPvAngle+0xc54>)
  4023d0:	4798      	blx	r3
  4023d2:	4602      	mov	r2, r0
  4023d4:	4b88      	ldr	r3, [pc, #544]	; (4025f8 <GetPvAngle+0xc70>)
  4023d6:	4611      	mov	r1, r2
  4023d8:	4610      	mov	r0, r2
  4023da:	4798      	blx	r3
  4023dc:	4603      	mov	r3, r0
  4023de:	461a      	mov	r2, r3
  4023e0:	4b80      	ldr	r3, [pc, #512]	; (4025e4 <GetPvAngle+0xc5c>)
  4023e2:	4610      	mov	r0, r2
  4023e4:	4798      	blx	r3
  4023e6:	4603      	mov	r3, r0
  4023e8:	460c      	mov	r4, r1
  4023ea:	4618      	mov	r0, r3
  4023ec:	4621      	mov	r1, r4
  4023ee:	4b7e      	ldr	r3, [pc, #504]	; (4025e8 <GetPvAngle+0xc60>)
  4023f0:	4798      	blx	r3
  4023f2:	4602      	mov	r2, r0
  4023f4:	460b      	mov	r3, r1
  4023f6:	4c7d      	ldr	r4, [pc, #500]	; (4025ec <GetPvAngle+0xc64>)
  4023f8:	4640      	mov	r0, r8
  4023fa:	4649      	mov	r1, r9
  4023fc:	47a0      	blx	r4
  4023fe:	4603      	mov	r3, r0
  402400:	460c      	mov	r4, r1
  402402:	461a      	mov	r2, r3
  402404:	4623      	mov	r3, r4
  402406:	4c7a      	ldr	r4, [pc, #488]	; (4025f0 <GetPvAngle+0xc68>)
  402408:	4628      	mov	r0, r5
  40240a:	4631      	mov	r1, r6
  40240c:	47a0      	blx	r4
  40240e:	4603      	mov	r3, r0
  402410:	460c      	mov	r4, r1
  402412:	4619      	mov	r1, r3
  402414:	4622      	mov	r2, r4
  402416:	4b79      	ldr	r3, [pc, #484]	; (4025fc <GetPvAngle+0xc74>)
  402418:	4608      	mov	r0, r1
  40241a:	4611      	mov	r1, r2
  40241c:	4798      	blx	r3
  40241e:	4603      	mov	r3, r0
  402420:	4618      	mov	r0, r3
  402422:	4b77      	ldr	r3, [pc, #476]	; (402600 <GetPvAngle+0xc78>)
  402424:	4798      	blx	r3
  402426:	4602      	mov	r2, r0
  402428:	4b6d      	ldr	r3, [pc, #436]	; (4025e0 <GetPvAngle+0xc58>)
  40242a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  40242e:	4610      	mov	r0, r2
  402430:	4798      	blx	r3
  402432:	4603      	mov	r3, r0
  402434:	60fb      	str	r3, [r7, #12]
	r = Deg(acos(cos(Rad(90.833f)) / (cos(Rad(lat))*cos(Rad(o))) - tan(Rad(lat))*tan(Rad(o))));
  402436:	4873      	ldr	r0, [pc, #460]	; (402604 <GetPvAngle+0xc7c>)
  402438:	4b68      	ldr	r3, [pc, #416]	; (4025dc <GetPvAngle+0xc54>)
  40243a:	4798      	blx	r3
  40243c:	4602      	mov	r2, r0
  40243e:	4b69      	ldr	r3, [pc, #420]	; (4025e4 <GetPvAngle+0xc5c>)
  402440:	4610      	mov	r0, r2
  402442:	4798      	blx	r3
  402444:	4603      	mov	r3, r0
  402446:	460c      	mov	r4, r1
  402448:	4618      	mov	r0, r3
  40244a:	4621      	mov	r1, r4
  40244c:	4b6e      	ldr	r3, [pc, #440]	; (402608 <GetPvAngle+0xc80>)
  40244e:	4798      	blx	r3
  402450:	4605      	mov	r5, r0
  402452:	460e      	mov	r6, r1
  402454:	4b6d      	ldr	r3, [pc, #436]	; (40260c <GetPvAngle+0xc84>)
  402456:	681b      	ldr	r3, [r3, #0]
  402458:	4618      	mov	r0, r3
  40245a:	4b60      	ldr	r3, [pc, #384]	; (4025dc <GetPvAngle+0xc54>)
  40245c:	4798      	blx	r3
  40245e:	4602      	mov	r2, r0
  402460:	4b60      	ldr	r3, [pc, #384]	; (4025e4 <GetPvAngle+0xc5c>)
  402462:	4610      	mov	r0, r2
  402464:	4798      	blx	r3
  402466:	4603      	mov	r3, r0
  402468:	460c      	mov	r4, r1
  40246a:	4618      	mov	r0, r3
  40246c:	4621      	mov	r1, r4
  40246e:	4b66      	ldr	r3, [pc, #408]	; (402608 <GetPvAngle+0xc80>)
  402470:	4798      	blx	r3
  402472:	4680      	mov	r8, r0
  402474:	4689      	mov	r9, r1
  402476:	6978      	ldr	r0, [r7, #20]
  402478:	4b58      	ldr	r3, [pc, #352]	; (4025dc <GetPvAngle+0xc54>)
  40247a:	4798      	blx	r3
  40247c:	4602      	mov	r2, r0
  40247e:	4b59      	ldr	r3, [pc, #356]	; (4025e4 <GetPvAngle+0xc5c>)
  402480:	4610      	mov	r0, r2
  402482:	4798      	blx	r3
  402484:	4603      	mov	r3, r0
  402486:	460c      	mov	r4, r1
  402488:	4618      	mov	r0, r3
  40248a:	4621      	mov	r1, r4
  40248c:	4b5e      	ldr	r3, [pc, #376]	; (402608 <GetPvAngle+0xc80>)
  40248e:	4798      	blx	r3
  402490:	4602      	mov	r2, r0
  402492:	460b      	mov	r3, r1
  402494:	4c55      	ldr	r4, [pc, #340]	; (4025ec <GetPvAngle+0xc64>)
  402496:	4640      	mov	r0, r8
  402498:	4649      	mov	r1, r9
  40249a:	47a0      	blx	r4
  40249c:	4603      	mov	r3, r0
  40249e:	460c      	mov	r4, r1
  4024a0:	461a      	mov	r2, r3
  4024a2:	4623      	mov	r3, r4
  4024a4:	4c5a      	ldr	r4, [pc, #360]	; (402610 <GetPvAngle+0xc88>)
  4024a6:	4628      	mov	r0, r5
  4024a8:	4631      	mov	r1, r6
  4024aa:	47a0      	blx	r4
  4024ac:	4603      	mov	r3, r0
  4024ae:	460c      	mov	r4, r1
  4024b0:	461d      	mov	r5, r3
  4024b2:	4626      	mov	r6, r4
  4024b4:	4b55      	ldr	r3, [pc, #340]	; (40260c <GetPvAngle+0xc84>)
  4024b6:	681b      	ldr	r3, [r3, #0]
  4024b8:	4618      	mov	r0, r3
  4024ba:	4b48      	ldr	r3, [pc, #288]	; (4025dc <GetPvAngle+0xc54>)
  4024bc:	4798      	blx	r3
  4024be:	4602      	mov	r2, r0
  4024c0:	4b48      	ldr	r3, [pc, #288]	; (4025e4 <GetPvAngle+0xc5c>)
  4024c2:	4610      	mov	r0, r2
  4024c4:	4798      	blx	r3
  4024c6:	4603      	mov	r3, r0
  4024c8:	460c      	mov	r4, r1
  4024ca:	4618      	mov	r0, r3
  4024cc:	4621      	mov	r1, r4
  4024ce:	4b51      	ldr	r3, [pc, #324]	; (402614 <GetPvAngle+0xc8c>)
  4024d0:	4798      	blx	r3
  4024d2:	4680      	mov	r8, r0
  4024d4:	4689      	mov	r9, r1
  4024d6:	6978      	ldr	r0, [r7, #20]
  4024d8:	4b40      	ldr	r3, [pc, #256]	; (4025dc <GetPvAngle+0xc54>)
  4024da:	4798      	blx	r3
  4024dc:	4602      	mov	r2, r0
  4024de:	4b41      	ldr	r3, [pc, #260]	; (4025e4 <GetPvAngle+0xc5c>)
  4024e0:	4610      	mov	r0, r2
  4024e2:	4798      	blx	r3
  4024e4:	4603      	mov	r3, r0
  4024e6:	460c      	mov	r4, r1
  4024e8:	4618      	mov	r0, r3
  4024ea:	4621      	mov	r1, r4
  4024ec:	4b49      	ldr	r3, [pc, #292]	; (402614 <GetPvAngle+0xc8c>)
  4024ee:	4798      	blx	r3
  4024f0:	4602      	mov	r2, r0
  4024f2:	460b      	mov	r3, r1
  4024f4:	4c3d      	ldr	r4, [pc, #244]	; (4025ec <GetPvAngle+0xc64>)
  4024f6:	4640      	mov	r0, r8
  4024f8:	4649      	mov	r1, r9
  4024fa:	47a0      	blx	r4
  4024fc:	4603      	mov	r3, r0
  4024fe:	460c      	mov	r4, r1
  402500:	461a      	mov	r2, r3
  402502:	4623      	mov	r3, r4
  402504:	4c3a      	ldr	r4, [pc, #232]	; (4025f0 <GetPvAngle+0xc68>)
  402506:	4628      	mov	r0, r5
  402508:	4631      	mov	r1, r6
  40250a:	47a0      	blx	r4
  40250c:	4603      	mov	r3, r0
  40250e:	460c      	mov	r4, r1
  402510:	4618      	mov	r0, r3
  402512:	4621      	mov	r1, r4
  402514:	4b40      	ldr	r3, [pc, #256]	; (402618 <GetPvAngle+0xc90>)
  402516:	4798      	blx	r3
  402518:	460a      	mov	r2, r1
  40251a:	4601      	mov	r1, r0
  40251c:	4b37      	ldr	r3, [pc, #220]	; (4025fc <GetPvAngle+0xc74>)
  40251e:	4608      	mov	r0, r1
  402520:	4611      	mov	r1, r2
  402522:	4798      	blx	r3
  402524:	4603      	mov	r3, r0
  402526:	4618      	mov	r0, r3
  402528:	4b35      	ldr	r3, [pc, #212]	; (402600 <GetPvAngle+0xc78>)
  40252a:	4798      	blx	r3
  40252c:	60b8      	str	r0, [r7, #8]
	s = ((int)(timeInSecs * 1440 + q + 4 * lon - 60 * timeZone)) % 1440;
  40252e:	4b2c      	ldr	r3, [pc, #176]	; (4025e0 <GetPvAngle+0xc58>)
  402530:	493a      	ldr	r1, [pc, #232]	; (40261c <GetPvAngle+0xc94>)
  402532:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
  402536:	4798      	blx	r3
  402538:	4603      	mov	r3, r0
  40253a:	461a      	mov	r2, r3
  40253c:	4b2e      	ldr	r3, [pc, #184]	; (4025f8 <GetPvAngle+0xc70>)
  40253e:	68f9      	ldr	r1, [r7, #12]
  402540:	4610      	mov	r0, r2
  402542:	4798      	blx	r3
  402544:	4603      	mov	r3, r0
  402546:	461c      	mov	r4, r3
  402548:	4b35      	ldr	r3, [pc, #212]	; (402620 <GetPvAngle+0xc98>)
  40254a:	681a      	ldr	r2, [r3, #0]
  40254c:	4b24      	ldr	r3, [pc, #144]	; (4025e0 <GetPvAngle+0xc58>)
  40254e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  402552:	4610      	mov	r0, r2
  402554:	4798      	blx	r3
  402556:	4603      	mov	r3, r0
  402558:	461a      	mov	r2, r3
  40255a:	4b27      	ldr	r3, [pc, #156]	; (4025f8 <GetPvAngle+0xc70>)
  40255c:	4611      	mov	r1, r2
  40255e:	4620      	mov	r0, r4
  402560:	4798      	blx	r3
  402562:	4603      	mov	r3, r0
  402564:	461c      	mov	r4, r3
  402566:	4b2f      	ldr	r3, [pc, #188]	; (402624 <GetPvAngle+0xc9c>)
  402568:	681a      	ldr	r2, [r3, #0]
  40256a:	4b1d      	ldr	r3, [pc, #116]	; (4025e0 <GetPvAngle+0xc58>)
  40256c:	492e      	ldr	r1, [pc, #184]	; (402628 <GetPvAngle+0xca0>)
  40256e:	4610      	mov	r0, r2
  402570:	4798      	blx	r3
  402572:	4603      	mov	r3, r0
  402574:	461a      	mov	r2, r3
  402576:	4b2d      	ldr	r3, [pc, #180]	; (40262c <GetPvAngle+0xca4>)
  402578:	4611      	mov	r1, r2
  40257a:	4620      	mov	r0, r4
  40257c:	4798      	blx	r3
  40257e:	4603      	mov	r3, r0
  402580:	461a      	mov	r2, r3
  402582:	4b2b      	ldr	r3, [pc, #172]	; (402630 <GetPvAngle+0xca8>)
  402584:	4610      	mov	r0, r2
  402586:	4798      	blx	r3
  402588:	4603      	mov	r3, r0
  40258a:	4a2a      	ldr	r2, [pc, #168]	; (402634 <GetPvAngle+0xcac>)
  40258c:	fb83 1202 	smull	r1, r2, r3, r2
  402590:	441a      	add	r2, r3
  402592:	1291      	asrs	r1, r2, #10
  402594:	17da      	asrs	r2, r3, #31
  402596:	1a8a      	subs	r2, r1, r2
  402598:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
  40259c:	fb01 f202 	mul.w	r2, r1, r2
  4025a0:	1a9a      	subs	r2, r3, r2
  4025a2:	4b25      	ldr	r3, [pc, #148]	; (402638 <GetPvAngle+0xcb0>)
  4025a4:	4610      	mov	r0, r2
  4025a6:	4798      	blx	r3
  4025a8:	4603      	mov	r3, r0
  4025aa:	607b      	str	r3, [r7, #4]
	if ((s / 4.0f) < 0)
  4025ac:	4b23      	ldr	r3, [pc, #140]	; (40263c <GetPvAngle+0xcb4>)
  4025ae:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  4025b2:	6878      	ldr	r0, [r7, #4]
  4025b4:	4798      	blx	r3
  4025b6:	4603      	mov	r3, r0
  4025b8:	461a      	mov	r2, r3
  4025ba:	4b21      	ldr	r3, [pc, #132]	; (402640 <GetPvAngle+0xcb8>)
  4025bc:	f04f 0100 	mov.w	r1, #0
  4025c0:	4610      	mov	r0, r2
  4025c2:	4798      	blx	r3
  4025c4:	4603      	mov	r3, r0
  4025c6:	2b00      	cmp	r3, #0
  4025c8:	d044      	beq.n	402654 <GetPvAngle+0xccc>
	{
		t = (s / 4.0f) + 180.0f;
  4025ca:	4b1c      	ldr	r3, [pc, #112]	; (40263c <GetPvAngle+0xcb4>)
  4025cc:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  4025d0:	6878      	ldr	r0, [r7, #4]
  4025d2:	4798      	blx	r3
  4025d4:	4603      	mov	r3, r0
  4025d6:	461a      	mov	r2, r3
  4025d8:	e034      	b.n	402644 <GetPvAngle+0xcbc>
  4025da:	bf00      	nop
  4025dc:	00402821 	.word	0x00402821
  4025e0:	0040aad9 	.word	0x0040aad9
  4025e4:	0040a1c5 	.word	0x0040a1c5
  4025e8:	004076dd 	.word	0x004076dd
  4025ec:	0040a26d 	.word	0x0040a26d
  4025f0:	00409f05 	.word	0x00409f05
  4025f4:	3fa00000 	.word	0x3fa00000
  4025f8:	0040a8c9 	.word	0x0040a8c9
  4025fc:	0040a81d 	.word	0x0040a81d
  402600:	00402859 	.word	0x00402859
  402604:	42b5aa7f 	.word	0x42b5aa7f
  402608:	00407649 	.word	0x00407649
  40260c:	2000000c 	.word	0x2000000c
  402610:	0040a4c1 	.word	0x0040a4c1
  402614:	00407765 	.word	0x00407765
  402618:	004077c1 	.word	0x004077c1
  40261c:	44b40000 	.word	0x44b40000
  402620:	20000010 	.word	0x20000010
  402624:	20000014 	.word	0x20000014
  402628:	42700000 	.word	0x42700000
  40262c:	0040a8c5 	.word	0x0040a8c5
  402630:	0040ae65 	.word	0x0040ae65
  402634:	b60b60b7 	.word	0xb60b60b7
  402638:	0040aa31 	.word	0x0040aa31
  40263c:	0040ac41 	.word	0x0040ac41
  402640:	0040ae15 	.word	0x0040ae15
  402644:	4b13      	ldr	r3, [pc, #76]	; (402694 <GetPvAngle+0xd0c>)
  402646:	4914      	ldr	r1, [pc, #80]	; (402698 <GetPvAngle+0xd10>)
  402648:	4610      	mov	r0, r2
  40264a:	4798      	blx	r3
  40264c:	4603      	mov	r3, r0
  40264e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  402652:	e00d      	b.n	402670 <GetPvAngle+0xce8>
	}
	else
	{
		t = (s / 4.0f) - 180.0f;
  402654:	4b11      	ldr	r3, [pc, #68]	; (40269c <GetPvAngle+0xd14>)
  402656:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  40265a:	6878      	ldr	r0, [r7, #4]
  40265c:	4798      	blx	r3
  40265e:	4603      	mov	r3, r0
  402660:	461a      	mov	r2, r3
  402662:	4b0f      	ldr	r3, [pc, #60]	; (4026a0 <GetPvAngle+0xd18>)
  402664:	490c      	ldr	r1, [pc, #48]	; (402698 <GetPvAngle+0xd10>)
  402666:	4610      	mov	r0, r2
  402668:	4798      	blx	r3
  40266a:	4603      	mov	r3, r0
  40266c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	}
	return (90.0f / r*t);
  402670:	4b0a      	ldr	r3, [pc, #40]	; (40269c <GetPvAngle+0xd14>)
  402672:	68b9      	ldr	r1, [r7, #8]
  402674:	480b      	ldr	r0, [pc, #44]	; (4026a4 <GetPvAngle+0xd1c>)
  402676:	4798      	blx	r3
  402678:	4603      	mov	r3, r0
  40267a:	461a      	mov	r2, r3
  40267c:	4b0a      	ldr	r3, [pc, #40]	; (4026a8 <GetPvAngle+0xd20>)
  40267e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
  402682:	4610      	mov	r0, r2
  402684:	4798      	blx	r3
  402686:	4603      	mov	r3, r0
}
  402688:	4618      	mov	r0, r3
  40268a:	37bc      	adds	r7, #188	; 0xbc
  40268c:	46bd      	mov	sp, r7
  40268e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402692:	bf00      	nop
  402694:	0040a8c9 	.word	0x0040a8c9
  402698:	43340000 	.word	0x43340000
  40269c:	0040ac41 	.word	0x0040ac41
  4026a0:	0040a8c5 	.word	0x0040a8c5
  4026a4:	42b40000 	.word	0x42b40000
  4026a8:	0040aad9 	.word	0x0040aad9

004026ac <GetPvBackTrackAngle>:

float GetPvBackTrackAngle(float pvAngle)
{
  4026ac:	b590      	push	{r4, r7, lr}
  4026ae:	b085      	sub	sp, #20
  4026b0:	af00      	add	r7, sp, #0
  4026b2:	6078      	str	r0, [r7, #4]
	float a0;
	
	a0 = pvAngle*0.0174603f;
  4026b4:	4b46      	ldr	r3, [pc, #280]	; (4027d0 <GetPvBackTrackAngle+0x124>)
  4026b6:	4947      	ldr	r1, [pc, #284]	; (4027d4 <GetPvBackTrackAngle+0x128>)
  4026b8:	6878      	ldr	r0, [r7, #4]
  4026ba:	4798      	blx	r3
  4026bc:	4603      	mov	r3, r0
  4026be:	60fb      	str	r3, [r7, #12]
	//a0 += 1.575f;
	a0 += bkTrkParam2;
  4026c0:	4b45      	ldr	r3, [pc, #276]	; (4027d8 <GetPvBackTrackAngle+0x12c>)
  4026c2:	681a      	ldr	r2, [r3, #0]
  4026c4:	4b45      	ldr	r3, [pc, #276]	; (4027dc <GetPvBackTrackAngle+0x130>)
  4026c6:	4611      	mov	r1, r2
  4026c8:	68f8      	ldr	r0, [r7, #12]
  4026ca:	4798      	blx	r3
  4026cc:	4603      	mov	r3, r0
  4026ce:	60fb      	str	r3, [r7, #12]
	//a0 -= 0.028989f;
	a0 -= bkTrkParam1;
  4026d0:	4b43      	ldr	r3, [pc, #268]	; (4027e0 <GetPvBackTrackAngle+0x134>)
  4026d2:	681a      	ldr	r2, [r3, #0]
  4026d4:	4b43      	ldr	r3, [pc, #268]	; (4027e4 <GetPvBackTrackAngle+0x138>)
  4026d6:	4611      	mov	r1, r2
  4026d8:	68f8      	ldr	r0, [r7, #12]
  4026da:	4798      	blx	r3
  4026dc:	4603      	mov	r3, r0
  4026de:	60fb      	str	r3, [r7, #12]
	a0 = sin(a0);
  4026e0:	4b41      	ldr	r3, [pc, #260]	; (4027e8 <GetPvBackTrackAngle+0x13c>)
  4026e2:	68f8      	ldr	r0, [r7, #12]
  4026e4:	4798      	blx	r3
  4026e6:	4603      	mov	r3, r0
  4026e8:	460c      	mov	r4, r1
  4026ea:	4618      	mov	r0, r3
  4026ec:	4621      	mov	r1, r4
  4026ee:	4b3f      	ldr	r3, [pc, #252]	; (4027ec <GetPvBackTrackAngle+0x140>)
  4026f0:	4798      	blx	r3
  4026f2:	460a      	mov	r2, r1
  4026f4:	4601      	mov	r1, r0
  4026f6:	4b3e      	ldr	r3, [pc, #248]	; (4027f0 <GetPvBackTrackAngle+0x144>)
  4026f8:	4608      	mov	r0, r1
  4026fa:	4611      	mov	r1, r2
  4026fc:	4798      	blx	r3
  4026fe:	4603      	mov	r3, r0
  402700:	60fb      	str	r3, [r7, #12]
	a0 = a0 * dist;
  402702:	4b3c      	ldr	r3, [pc, #240]	; (4027f4 <GetPvBackTrackAngle+0x148>)
  402704:	681a      	ldr	r2, [r3, #0]
  402706:	4b32      	ldr	r3, [pc, #200]	; (4027d0 <GetPvBackTrackAngle+0x124>)
  402708:	4611      	mov	r1, r2
  40270a:	68f8      	ldr	r0, [r7, #12]
  40270c:	4798      	blx	r3
  40270e:	4603      	mov	r3, r0
  402710:	60fb      	str	r3, [r7, #12]
	a0 = a0 / width;
  402712:	4b39      	ldr	r3, [pc, #228]	; (4027f8 <GetPvBackTrackAngle+0x14c>)
  402714:	681a      	ldr	r2, [r3, #0]
  402716:	4b39      	ldr	r3, [pc, #228]	; (4027fc <GetPvBackTrackAngle+0x150>)
  402718:	4611      	mov	r1, r2
  40271a:	68f8      	ldr	r0, [r7, #12]
  40271c:	4798      	blx	r3
  40271e:	4603      	mov	r3, r0
  402720:	60fb      	str	r3, [r7, #12]
	/* If this val is < 1 enter back track calculation */
	/* Otherwise exit backtracking mode */
	if (a0 < 1)
  402722:	4b37      	ldr	r3, [pc, #220]	; (402800 <GetPvBackTrackAngle+0x154>)
  402724:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  402728:	68f8      	ldr	r0, [r7, #12]
  40272a:	4798      	blx	r3
  40272c:	4603      	mov	r3, r0
  40272e:	2b00      	cmp	r3, #0
  402730:	d048      	beq.n	4027c4 <GetPvBackTrackAngle+0x118>
	{
		a0 = asin(a0);
  402732:	4b2d      	ldr	r3, [pc, #180]	; (4027e8 <GetPvBackTrackAngle+0x13c>)
  402734:	68f8      	ldr	r0, [r7, #12]
  402736:	4798      	blx	r3
  402738:	4603      	mov	r3, r0
  40273a:	460c      	mov	r4, r1
  40273c:	4618      	mov	r0, r3
  40273e:	4621      	mov	r1, r4
  402740:	4b30      	ldr	r3, [pc, #192]	; (402804 <GetPvBackTrackAngle+0x158>)
  402742:	4798      	blx	r3
  402744:	460a      	mov	r2, r1
  402746:	4601      	mov	r1, r0
  402748:	4b29      	ldr	r3, [pc, #164]	; (4027f0 <GetPvBackTrackAngle+0x144>)
  40274a:	4608      	mov	r0, r1
  40274c:	4611      	mov	r1, r2
  40274e:	4798      	blx	r3
  402750:	4603      	mov	r3, r0
  402752:	60fb      	str	r3, [r7, #12]
		a0 = a0 * 57.2958f;
  402754:	4b1e      	ldr	r3, [pc, #120]	; (4027d0 <GetPvBackTrackAngle+0x124>)
  402756:	492c      	ldr	r1, [pc, #176]	; (402808 <GetPvBackTrackAngle+0x15c>)
  402758:	68f8      	ldr	r0, [r7, #12]
  40275a:	4798      	blx	r3
  40275c:	4603      	mov	r3, r0
  40275e:	60fb      	str	r3, [r7, #12]
		if ((pvAngle >= -90) && (pvAngle < 0))
  402760:	4b2a      	ldr	r3, [pc, #168]	; (40280c <GetPvBackTrackAngle+0x160>)
  402762:	492b      	ldr	r1, [pc, #172]	; (402810 <GetPvBackTrackAngle+0x164>)
  402764:	6878      	ldr	r0, [r7, #4]
  402766:	4798      	blx	r3
  402768:	4603      	mov	r3, r0
  40276a:	2b00      	cmp	r3, #0
  40276c:	d012      	beq.n	402794 <GetPvBackTrackAngle+0xe8>
  40276e:	4b24      	ldr	r3, [pc, #144]	; (402800 <GetPvBackTrackAngle+0x154>)
  402770:	f04f 0100 	mov.w	r1, #0
  402774:	6878      	ldr	r0, [r7, #4]
  402776:	4798      	blx	r3
  402778:	4603      	mov	r3, r0
  40277a:	2b00      	cmp	r3, #0
  40277c:	d00a      	beq.n	402794 <GetPvBackTrackAngle+0xe8>
		{
			a0 = -a0 / 2.0;
  40277e:	68fb      	ldr	r3, [r7, #12]
  402780:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
  402784:	4b1d      	ldr	r3, [pc, #116]	; (4027fc <GetPvBackTrackAngle+0x150>)
  402786:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40278a:	4610      	mov	r0, r2
  40278c:	4798      	blx	r3
  40278e:	4603      	mov	r3, r0
  402790:	60fb      	str	r3, [r7, #12]
  402792:	e015      	b.n	4027c0 <GetPvBackTrackAngle+0x114>
		}
		else if ((pvAngle >= 0) && (pvAngle <= 90))
  402794:	4b1d      	ldr	r3, [pc, #116]	; (40280c <GetPvBackTrackAngle+0x160>)
  402796:	f04f 0100 	mov.w	r1, #0
  40279a:	6878      	ldr	r0, [r7, #4]
  40279c:	4798      	blx	r3
  40279e:	4603      	mov	r3, r0
  4027a0:	2b00      	cmp	r3, #0
  4027a2:	d00d      	beq.n	4027c0 <GetPvBackTrackAngle+0x114>
  4027a4:	4b1b      	ldr	r3, [pc, #108]	; (402814 <GetPvBackTrackAngle+0x168>)
  4027a6:	491c      	ldr	r1, [pc, #112]	; (402818 <GetPvBackTrackAngle+0x16c>)
  4027a8:	6878      	ldr	r0, [r7, #4]
  4027aa:	4798      	blx	r3
  4027ac:	4603      	mov	r3, r0
  4027ae:	2b00      	cmp	r3, #0
  4027b0:	d006      	beq.n	4027c0 <GetPvBackTrackAngle+0x114>
		{
			a0 = a0 / 2.0;
  4027b2:	4b12      	ldr	r3, [pc, #72]	; (4027fc <GetPvBackTrackAngle+0x150>)
  4027b4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4027b8:	68f8      	ldr	r0, [r7, #12]
  4027ba:	4798      	blx	r3
  4027bc:	4603      	mov	r3, r0
  4027be:	60fb      	str	r3, [r7, #12]
		}
		return a0;
  4027c0:	68fb      	ldr	r3, [r7, #12]
  4027c2:	e000      	b.n	4027c6 <GetPvBackTrackAngle+0x11a>
	}
	else
		return NAN;
  4027c4:	4b15      	ldr	r3, [pc, #84]	; (40281c <GetPvBackTrackAngle+0x170>)
}
  4027c6:	4618      	mov	r0, r3
  4027c8:	3714      	adds	r7, #20
  4027ca:	46bd      	mov	sp, r7
  4027cc:	bd90      	pop	{r4, r7, pc}
  4027ce:	bf00      	nop
  4027d0:	0040aad9 	.word	0x0040aad9
  4027d4:	3c8f08e7 	.word	0x3c8f08e7
  4027d8:	20000028 	.word	0x20000028
  4027dc:	0040a8c9 	.word	0x0040a8c9
  4027e0:	20000024 	.word	0x20000024
  4027e4:	0040a8c5 	.word	0x0040a8c5
  4027e8:	0040a1c5 	.word	0x0040a1c5
  4027ec:	004076dd 	.word	0x004076dd
  4027f0:	0040a81d 	.word	0x0040a81d
  4027f4:	20000018 	.word	0x20000018
  4027f8:	2000001c 	.word	0x2000001c
  4027fc:	0040ac41 	.word	0x0040ac41
  402800:	0040ae15 	.word	0x0040ae15
  402804:	00407871 	.word	0x00407871
  402808:	42652ee6 	.word	0x42652ee6
  40280c:	0040ae3d 	.word	0x0040ae3d
  402810:	c2b40000 	.word	0xc2b40000
  402814:	0040ae29 	.word	0x0040ae29
  402818:	42b40000 	.word	0x42b40000
  40281c:	7fc00000 	.word	0x7fc00000

00402820 <Rad>:

float Rad(float deg)
{
  402820:	b580      	push	{r7, lr}
  402822:	b082      	sub	sp, #8
  402824:	af00      	add	r7, sp, #0
  402826:	6078      	str	r0, [r7, #4]
	return ((float)M_PI*deg)/180.0f;
  402828:	4b07      	ldr	r3, [pc, #28]	; (402848 <Rad+0x28>)
  40282a:	4908      	ldr	r1, [pc, #32]	; (40284c <Rad+0x2c>)
  40282c:	6878      	ldr	r0, [r7, #4]
  40282e:	4798      	blx	r3
  402830:	4603      	mov	r3, r0
  402832:	461a      	mov	r2, r3
  402834:	4b06      	ldr	r3, [pc, #24]	; (402850 <Rad+0x30>)
  402836:	4907      	ldr	r1, [pc, #28]	; (402854 <Rad+0x34>)
  402838:	4610      	mov	r0, r2
  40283a:	4798      	blx	r3
  40283c:	4603      	mov	r3, r0
}
  40283e:	4618      	mov	r0, r3
  402840:	3708      	adds	r7, #8
  402842:	46bd      	mov	sp, r7
  402844:	bd80      	pop	{r7, pc}
  402846:	bf00      	nop
  402848:	0040aad9 	.word	0x0040aad9
  40284c:	40490fdb 	.word	0x40490fdb
  402850:	0040ac41 	.word	0x0040ac41
  402854:	43340000 	.word	0x43340000

00402858 <Deg>:

float Deg(float rad)
{
  402858:	b580      	push	{r7, lr}
  40285a:	b082      	sub	sp, #8
  40285c:	af00      	add	r7, sp, #0
  40285e:	6078      	str	r0, [r7, #4]
	return (180.0f *rad) / (float)M_PI;
  402860:	4b07      	ldr	r3, [pc, #28]	; (402880 <Deg+0x28>)
  402862:	4908      	ldr	r1, [pc, #32]	; (402884 <Deg+0x2c>)
  402864:	6878      	ldr	r0, [r7, #4]
  402866:	4798      	blx	r3
  402868:	4603      	mov	r3, r0
  40286a:	461a      	mov	r2, r3
  40286c:	4b06      	ldr	r3, [pc, #24]	; (402888 <Deg+0x30>)
  40286e:	4907      	ldr	r1, [pc, #28]	; (40288c <Deg+0x34>)
  402870:	4610      	mov	r0, r2
  402872:	4798      	blx	r3
  402874:	4603      	mov	r3, r0
}
  402876:	4618      	mov	r0, r3
  402878:	3708      	adds	r7, #8
  40287a:	46bd      	mov	sp, r7
  40287c:	bd80      	pop	{r7, pc}
  40287e:	bf00      	nop
  402880:	0040aad9 	.word	0x0040aad9
  402884:	43340000 	.word	0x43340000
  402888:	0040ac41 	.word	0x0040ac41
  40288c:	40490fdb 	.word	0x40490fdb

00402890 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  402890:	b480      	push	{r7}
  402892:	b083      	sub	sp, #12
  402894:	af00      	add	r7, sp, #0
  402896:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402898:	687b      	ldr	r3, [r7, #4]
  40289a:	2b07      	cmp	r3, #7
  40289c:	d825      	bhi.n	4028ea <osc_get_rate+0x5a>
  40289e:	a201      	add	r2, pc, #4	; (adr r2, 4028a4 <osc_get_rate+0x14>)
  4028a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4028a4:	004028c5 	.word	0x004028c5
  4028a8:	004028cb 	.word	0x004028cb
  4028ac:	004028d1 	.word	0x004028d1
  4028b0:	004028d7 	.word	0x004028d7
  4028b4:	004028db 	.word	0x004028db
  4028b8:	004028df 	.word	0x004028df
  4028bc:	004028e3 	.word	0x004028e3
  4028c0:	004028e7 	.word	0x004028e7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4028c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4028c8:	e010      	b.n	4028ec <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4028ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4028ce:	e00d      	b.n	4028ec <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4028d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4028d4:	e00a      	b.n	4028ec <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4028d6:	4b08      	ldr	r3, [pc, #32]	; (4028f8 <osc_get_rate+0x68>)
  4028d8:	e008      	b.n	4028ec <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4028da:	4b08      	ldr	r3, [pc, #32]	; (4028fc <osc_get_rate+0x6c>)
  4028dc:	e006      	b.n	4028ec <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4028de:	4b08      	ldr	r3, [pc, #32]	; (402900 <osc_get_rate+0x70>)
  4028e0:	e004      	b.n	4028ec <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4028e2:	4b07      	ldr	r3, [pc, #28]	; (402900 <osc_get_rate+0x70>)
  4028e4:	e002      	b.n	4028ec <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4028e6:	4b06      	ldr	r3, [pc, #24]	; (402900 <osc_get_rate+0x70>)
  4028e8:	e000      	b.n	4028ec <osc_get_rate+0x5c>
	}

	return 0;
  4028ea:	2300      	movs	r3, #0
}
  4028ec:	4618      	mov	r0, r3
  4028ee:	370c      	adds	r7, #12
  4028f0:	46bd      	mov	sp, r7
  4028f2:	bc80      	pop	{r7}
  4028f4:	4770      	bx	lr
  4028f6:	bf00      	nop
  4028f8:	003d0900 	.word	0x003d0900
  4028fc:	007a1200 	.word	0x007a1200
  402900:	00b71b00 	.word	0x00b71b00

00402904 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  402904:	b580      	push	{r7, lr}
  402906:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  402908:	2006      	movs	r0, #6
  40290a:	4b04      	ldr	r3, [pc, #16]	; (40291c <sysclk_get_main_hz+0x18>)
  40290c:	4798      	blx	r3
  40290e:	4602      	mov	r2, r0
  402910:	4613      	mov	r3, r2
  402912:	009b      	lsls	r3, r3, #2
  402914:	4413      	add	r3, r2
  402916:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  402918:	4618      	mov	r0, r3
  40291a:	bd80      	pop	{r7, pc}
  40291c:	00402891 	.word	0x00402891

00402920 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  402920:	b580      	push	{r7, lr}
  402922:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  402924:	4b02      	ldr	r3, [pc, #8]	; (402930 <sysclk_get_peripheral_hz+0x10>)
  402926:	4798      	blx	r3
  402928:	4603      	mov	r3, r0
  40292a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40292c:	4618      	mov	r0, r3
  40292e:	bd80      	pop	{r7, pc}
  402930:	00402905 	.word	0x00402905

00402934 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  402934:	b580      	push	{r7, lr}
  402936:	b082      	sub	sp, #8
  402938:	af00      	add	r7, sp, #0
  40293a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40293c:	6878      	ldr	r0, [r7, #4]
  40293e:	4b03      	ldr	r3, [pc, #12]	; (40294c <sysclk_enable_peripheral_clock+0x18>)
  402940:	4798      	blx	r3
}
  402942:	bf00      	nop
  402944:	3708      	adds	r7, #8
  402946:	46bd      	mov	sp, r7
  402948:	bd80      	pop	{r7, pc}
  40294a:	bf00      	nop
  40294c:	004049c9 	.word	0x004049c9

00402950 <InitRs485Pdc>:
 pdc_packet_t rs485PdcPkt;
 /* Pointer to PDC register base. */
 Pdc *rs485PdcBase;

 void InitRs485Pdc(void)
 {
  402950:	b5b0      	push	{r4, r5, r7, lr}
  402952:	b086      	sub	sp, #24
  402954:	af00      	add	r7, sp, #0
	 const sam_usart_opt_t usart_console_settings = {
  402956:	4b15      	ldr	r3, [pc, #84]	; (4029ac <InitRs485Pdc+0x5c>)
  402958:	463c      	mov	r4, r7
  40295a:	461d      	mov	r5, r3
  40295c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40295e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402960:	e895 0003 	ldmia.w	r5, {r0, r1}
  402964:	e884 0003 	stmia.w	r4, {r0, r1}
		 /* This field is only used in IrDA mode. */
		 0
	 };

	 /* Enable the peripheral clock in the PMC. */
	 sysclk_enable_peripheral_clock(RS485_USART_ID);
  402968:	200f      	movs	r0, #15
  40296a:	4b11      	ldr	r3, [pc, #68]	; (4029b0 <InitRs485Pdc+0x60>)
  40296c:	4798      	blx	r3

	 /* Configure USART in RS485 mode. */
	 usart_init_rs485(RS485_USART, &usart_console_settings,
  40296e:	4b11      	ldr	r3, [pc, #68]	; (4029b4 <InitRs485Pdc+0x64>)
  402970:	4798      	blx	r3
  402972:	4602      	mov	r2, r0
  402974:	463b      	mov	r3, r7
  402976:	4619      	mov	r1, r3
  402978:	480f      	ldr	r0, [pc, #60]	; (4029b8 <InitRs485Pdc+0x68>)
  40297a:	4b10      	ldr	r3, [pc, #64]	; (4029bc <InitRs485Pdc+0x6c>)
  40297c:	4798      	blx	r3
	 sysclk_get_peripheral_hz());


	 /* Enable TX & RX function. */
	 usart_enable_tx(RS485_USART);
  40297e:	480e      	ldr	r0, [pc, #56]	; (4029b8 <InitRs485Pdc+0x68>)
  402980:	4b0f      	ldr	r3, [pc, #60]	; (4029c0 <InitRs485Pdc+0x70>)
  402982:	4798      	blx	r3
	 usart_enable_rx(RS485_USART);
  402984:	480c      	ldr	r0, [pc, #48]	; (4029b8 <InitRs485Pdc+0x68>)
  402986:	4b0f      	ldr	r3, [pc, #60]	; (4029c4 <InitRs485Pdc+0x74>)
  402988:	4798      	blx	r3
 	 
	 /* Get board USART PDC base address and enable receiver and transmitter. */
	 rs485PdcBase = usart_get_pdc_base(RS485_USART);
  40298a:	480b      	ldr	r0, [pc, #44]	; (4029b8 <InitRs485Pdc+0x68>)
  40298c:	4b0e      	ldr	r3, [pc, #56]	; (4029c8 <InitRs485Pdc+0x78>)
  40298e:	4798      	blx	r3
  402990:	4602      	mov	r2, r0
  402992:	4b0e      	ldr	r3, [pc, #56]	; (4029cc <InitRs485Pdc+0x7c>)
  402994:	601a      	str	r2, [r3, #0]
	 pdc_enable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  402996:	4b0d      	ldr	r3, [pc, #52]	; (4029cc <InitRs485Pdc+0x7c>)
  402998:	681b      	ldr	r3, [r3, #0]
  40299a:	f240 1101 	movw	r1, #257	; 0x101
  40299e:	4618      	mov	r0, r3
  4029a0:	4b0b      	ldr	r3, [pc, #44]	; (4029d0 <InitRs485Pdc+0x80>)
  4029a2:	4798      	blx	r3

 }
  4029a4:	bf00      	nop
  4029a6:	3718      	adds	r7, #24
  4029a8:	46bd      	mov	sp, r7
  4029aa:	bdb0      	pop	{r4, r5, r7, pc}
  4029ac:	0040b5ac 	.word	0x0040b5ac
  4029b0:	00402935 	.word	0x00402935
  4029b4:	00402921 	.word	0x00402921
  4029b8:	40028000 	.word	0x40028000
  4029bc:	00403761 	.word	0x00403761
  4029c0:	004037a1 	.word	0x004037a1
  4029c4:	004037e9 	.word	0x004037e9
  4029c8:	00403909 	.word	0x00403909
  4029cc:	20002718 	.word	0x20002718
  4029d0:	00403171 	.word	0x00403171

004029d4 <Rs485PdcStartTx>:

 /* Set pointers and start transmitting */
 void Rs485PdcStartTx(uint32_t buff, uint16_t nBytes)
 {
  4029d4:	b580      	push	{r7, lr}
  4029d6:	b082      	sub	sp, #8
  4029d8:	af00      	add	r7, sp, #0
  4029da:	6078      	str	r0, [r7, #4]
  4029dc:	460b      	mov	r3, r1
  4029de:	807b      	strh	r3, [r7, #2]
	rs485PdcPkt.ul_addr = buff;
  4029e0:	4a08      	ldr	r2, [pc, #32]	; (402a04 <Rs485PdcStartTx+0x30>)
  4029e2:	687b      	ldr	r3, [r7, #4]
  4029e4:	6013      	str	r3, [r2, #0]
	rs485PdcPkt.ul_size = nBytes;
  4029e6:	887b      	ldrh	r3, [r7, #2]
  4029e8:	4a06      	ldr	r2, [pc, #24]	; (402a04 <Rs485PdcStartTx+0x30>)
  4029ea:	6053      	str	r3, [r2, #4]
	pdc_tx_init(rs485PdcBase, &rs485PdcPkt, NULL);
  4029ec:	4b06      	ldr	r3, [pc, #24]	; (402a08 <Rs485PdcStartTx+0x34>)
  4029ee:	681b      	ldr	r3, [r3, #0]
  4029f0:	2200      	movs	r2, #0
  4029f2:	4904      	ldr	r1, [pc, #16]	; (402a04 <Rs485PdcStartTx+0x30>)
  4029f4:	4618      	mov	r0, r3
  4029f6:	4b05      	ldr	r3, [pc, #20]	; (402a0c <Rs485PdcStartTx+0x38>)
  4029f8:	4798      	blx	r3
 }
  4029fa:	bf00      	nop
  4029fc:	3708      	adds	r7, #8
  4029fe:	46bd      	mov	sp, r7
  402a00:	bd80      	pop	{r7, pc}
  402a02:	bf00      	nop
  402a04:	2000271c 	.word	0x2000271c
  402a08:	20002718 	.word	0x20002718
  402a0c:	004030e9 	.word	0x004030e9

00402a10 <Rs485PdcStartRx>:

 /* Set pointers and start receiving */
 void Rs485PdcStartRx(uint32_t buff, uint16_t nBytes)
 {
  402a10:	b580      	push	{r7, lr}
  402a12:	b082      	sub	sp, #8
  402a14:	af00      	add	r7, sp, #0
  402a16:	6078      	str	r0, [r7, #4]
  402a18:	460b      	mov	r3, r1
  402a1a:	807b      	strh	r3, [r7, #2]
	rs485PdcPkt.ul_addr = buff;
  402a1c:	4a08      	ldr	r2, [pc, #32]	; (402a40 <Rs485PdcStartRx+0x30>)
  402a1e:	687b      	ldr	r3, [r7, #4]
  402a20:	6013      	str	r3, [r2, #0]
	rs485PdcPkt.ul_size = nBytes;
  402a22:	887b      	ldrh	r3, [r7, #2]
  402a24:	4a06      	ldr	r2, [pc, #24]	; (402a40 <Rs485PdcStartRx+0x30>)
  402a26:	6053      	str	r3, [r2, #4]
	pdc_rx_init(rs485PdcBase, &rs485PdcPkt, NULL);
  402a28:	4b06      	ldr	r3, [pc, #24]	; (402a44 <Rs485PdcStartRx+0x34>)
  402a2a:	681b      	ldr	r3, [r3, #0]
  402a2c:	2200      	movs	r2, #0
  402a2e:	4904      	ldr	r1, [pc, #16]	; (402a40 <Rs485PdcStartRx+0x30>)
  402a30:	4618      	mov	r0, r3
  402a32:	4b05      	ldr	r3, [pc, #20]	; (402a48 <Rs485PdcStartRx+0x38>)
  402a34:	4798      	blx	r3
 }
  402a36:	bf00      	nop
  402a38:	3708      	adds	r7, #8
  402a3a:	46bd      	mov	sp, r7
  402a3c:	bd80      	pop	{r7, pc}
  402a3e:	bf00      	nop
  402a40:	2000271c 	.word	0x2000271c
  402a44:	20002718 	.word	0x20002718
  402a48:	0040312d 	.word	0x0040312d

00402a4c <Rs485PdcGetRxBytes>:
 
 /* Returns number of bytes in Rx buffer */
 uint32_t Rs485PdcGetRxBytes(void)
 {
  402a4c:	b580      	push	{r7, lr}
  402a4e:	b082      	sub	sp, #8
  402a50:	af00      	add	r7, sp, #0
	uint32_t recvdBytes = RS485_BUFFER_SIZE;
  402a52:	2396      	movs	r3, #150	; 0x96
  402a54:	607b      	str	r3, [r7, #4]
	recvdBytes -= pdc_read_rx_counter(rs485PdcBase);
  402a56:	4b09      	ldr	r3, [pc, #36]	; (402a7c <Rs485PdcGetRxBytes+0x30>)
  402a58:	681b      	ldr	r3, [r3, #0]
  402a5a:	4618      	mov	r0, r3
  402a5c:	4b08      	ldr	r3, [pc, #32]	; (402a80 <Rs485PdcGetRxBytes+0x34>)
  402a5e:	4798      	blx	r3
  402a60:	4602      	mov	r2, r0
  402a62:	687b      	ldr	r3, [r7, #4]
  402a64:	1a9b      	subs	r3, r3, r2
  402a66:	607b      	str	r3, [r7, #4]
	if(recvdBytes>RS485_BUFFER_SIZE)//If overflow occurred. 
  402a68:	687b      	ldr	r3, [r7, #4]
  402a6a:	2b96      	cmp	r3, #150	; 0x96
  402a6c:	d901      	bls.n	402a72 <Rs485PdcGetRxBytes+0x26>
	{
		recvdBytes = 0;
  402a6e:	2300      	movs	r3, #0
  402a70:	607b      	str	r3, [r7, #4]
	}
	return recvdBytes;
  402a72:	687b      	ldr	r3, [r7, #4]
 }
  402a74:	4618      	mov	r0, r3
  402a76:	3708      	adds	r7, #8
  402a78:	46bd      	mov	sp, r7
  402a7a:	bd80      	pop	{r7, pc}
  402a7c:	20002718 	.word	0x20002718
  402a80:	004031b1 	.word	0x004031b1

00402a84 <Rs485PdcGetTxStatus>:
	return (usart_get_status(RS485_USART)&US_CSR_ENDRX);
 }

 /* Returns 1 if Tx Buffer is empty else 0 */
 uint32_t Rs485PdcGetTxStatus(void)
 {
  402a84:	b580      	push	{r7, lr}
  402a86:	af00      	add	r7, sp, #0
	return (usart_get_status(RS485_USART)&US_CSR_ENDTX);
  402a88:	4803      	ldr	r0, [pc, #12]	; (402a98 <Rs485PdcGetTxStatus+0x14>)
  402a8a:	4b04      	ldr	r3, [pc, #16]	; (402a9c <Rs485PdcGetTxStatus+0x18>)
  402a8c:	4798      	blx	r3
  402a8e:	4603      	mov	r3, r0
  402a90:	f003 0310 	and.w	r3, r3, #16
 }
  402a94:	4618      	mov	r0, r3
  402a96:	bd80      	pop	{r7, pc}
  402a98:	40028000 	.word	0x40028000
  402a9c:	00403881 	.word	0x00403881

00402aa0 <local_twi_handler>:
/*
 * For internal use only.
 * A common TWI interrupt handler that is called for all TWI peripherals.
 */
static void local_twi_handler(const portBASE_TYPE twi_index)
{
  402aa0:	b590      	push	{r4, r7, lr}
  402aa2:	b08b      	sub	sp, #44	; 0x2c
  402aa4:	af00      	add	r7, sp, #0
  402aa6:	6078      	str	r0, [r7, #4]
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
  402aa8:	2300      	movs	r3, #0
  402aaa:	60bb      	str	r3, [r7, #8]
	uint32_t twi_status;
	Twi *twi_port;
	bool transfer_timeout = false;
  402aac:	2300      	movs	r3, #0
  402aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	twi_port = all_twi_definitions[twi_index].peripheral_base_address;
  402ab2:	4a7f      	ldr	r2, [pc, #508]	; (402cb0 <local_twi_handler+0x210>)
  402ab4:	687b      	ldr	r3, [r7, #4]
  402ab6:	011b      	lsls	r3, r3, #4
  402ab8:	4413      	add	r3, r2
  402aba:	681b      	ldr	r3, [r3, #0]
  402abc:	61bb      	str	r3, [r7, #24]

	twi_status = twi_get_interrupt_status(twi_port);
  402abe:	69b8      	ldr	r0, [r7, #24]
  402ac0:	4b7c      	ldr	r3, [pc, #496]	; (402cb4 <local_twi_handler+0x214>)
  402ac2:	4798      	blx	r3
  402ac4:	6178      	str	r0, [r7, #20]
	twi_status &= twi_get_interrupt_mask(twi_port);
  402ac6:	69b8      	ldr	r0, [r7, #24]
  402ac8:	4b7b      	ldr	r3, [pc, #492]	; (402cb8 <local_twi_handler+0x218>)
  402aca:	4798      	blx	r3
  402acc:	4602      	mov	r2, r0
  402ace:	697b      	ldr	r3, [r7, #20]
  402ad0:	4013      	ands	r3, r2
  402ad2:	617b      	str	r3, [r7, #20]

	/* Has the PDC completed a transmission? */
	if ((twi_status & TWI_SR_ENDTX) != 0UL) {
  402ad4:	697b      	ldr	r3, [r7, #20]
  402ad6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  402ada:	2b00      	cmp	r3, #0
  402adc:	d071      	beq.n	402bc2 <local_twi_handler+0x122>
		/* Disable PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_TXTDIS);
  402ade:	4a74      	ldr	r2, [pc, #464]	; (402cb0 <local_twi_handler+0x210>)
  402ae0:	687b      	ldr	r3, [r7, #4]
  402ae2:	011b      	lsls	r3, r3, #4
  402ae4:	4413      	add	r3, r2
  402ae6:	3304      	adds	r3, #4
  402ae8:	681b      	ldr	r3, [r3, #0]
  402aea:	f44f 7100 	mov.w	r1, #512	; 0x200
  402aee:	4618      	mov	r0, r3
  402af0:	4b72      	ldr	r3, [pc, #456]	; (402cbc <local_twi_handler+0x21c>)
  402af2:	4798      	blx	r3
		twi_disable_interrupt(twi_port, TWI_IDR_ENDTX);
  402af4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  402af8:	69b8      	ldr	r0, [r7, #24]
  402afa:	4b71      	ldr	r3, [pc, #452]	; (402cc0 <local_twi_handler+0x220>)
  402afc:	4798      	blx	r3

		uint8_t status;
		uint32_t timeout_counter = 0;
  402afe:	2300      	movs	r3, #0
  402b00:	623b      	str	r3, [r7, #32]

		/* Wait for TX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  402b02:	69bb      	ldr	r3, [r7, #24]
  402b04:	6a1b      	ldr	r3, [r3, #32]
  402b06:	74fb      	strb	r3, [r7, #19]
			if (status & TWI_SR_TXRDY) {
  402b08:	7cfb      	ldrb	r3, [r7, #19]
  402b0a:	f003 0304 	and.w	r3, r3, #4
  402b0e:	2b00      	cmp	r3, #0
  402b10:	d10a      	bne.n	402b28 <local_twi_handler+0x88>
				break;
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  402b12:	6a3b      	ldr	r3, [r7, #32]
  402b14:	3301      	adds	r3, #1
  402b16:	623b      	str	r3, [r7, #32]
  402b18:	6a3b      	ldr	r3, [r7, #32]
  402b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
  402b1e:	d1f0      	bne.n	402b02 <local_twi_handler+0x62>
				transfer_timeout = true;
  402b20:	2301      	movs	r3, #1
  402b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
  402b26:	e000      	b.n	402b2a <local_twi_handler+0x8a>

		/* Wait for TX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
			if (status & TWI_SR_TXRDY) {
				break;
  402b28:	bf00      	nop
				transfer_timeout = true;
				break;
			}
		}
		/* Complete the transfer - stop and last byte */
		twi_port->TWI_CR = TWI_CR_STOP;
  402b2a:	69bb      	ldr	r3, [r7, #24]
  402b2c:	2202      	movs	r2, #2
  402b2e:	601a      	str	r2, [r3, #0]
		twi_port->TWI_THR = twis[twi_index].buffer[twis[twi_index].length-1];
  402b30:	4a64      	ldr	r2, [pc, #400]	; (402cc4 <local_twi_handler+0x224>)
  402b32:	687b      	ldr	r3, [r7, #4]
  402b34:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  402b38:	4962      	ldr	r1, [pc, #392]	; (402cc4 <local_twi_handler+0x224>)
  402b3a:	687b      	ldr	r3, [r7, #4]
  402b3c:	00db      	lsls	r3, r3, #3
  402b3e:	440b      	add	r3, r1
  402b40:	685b      	ldr	r3, [r3, #4]
  402b42:	3b01      	subs	r3, #1
  402b44:	4413      	add	r3, r2
  402b46:	781b      	ldrb	r3, [r3, #0]
  402b48:	461a      	mov	r2, r3
  402b4a:	69bb      	ldr	r3, [r7, #24]
  402b4c:	635a      	str	r2, [r3, #52]	; 0x34

		/* Wait for TX complete flag */
		while (1) {
			status = twi_port->TWI_SR;
  402b4e:	69bb      	ldr	r3, [r7, #24]
  402b50:	6a1b      	ldr	r3, [r3, #32]
  402b52:	74fb      	strb	r3, [r7, #19]
			if (status & TWI_SR_TXCOMP) {
  402b54:	7cfb      	ldrb	r3, [r7, #19]
  402b56:	f003 0301 	and.w	r3, r3, #1
  402b5a:	2b00      	cmp	r3, #0
  402b5c:	d10a      	bne.n	402b74 <local_twi_handler+0xd4>
				break;
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  402b5e:	6a3b      	ldr	r3, [r7, #32]
  402b60:	3301      	adds	r3, #1
  402b62:	623b      	str	r3, [r7, #32]
  402b64:	6a3b      	ldr	r3, [r7, #32]
  402b66:	f1b3 3fff 	cmp.w	r3, #4294967295
  402b6a:	d1f0      	bne.n	402b4e <local_twi_handler+0xae>
				transfer_timeout = true;
  402b6c:	2301      	movs	r3, #1
  402b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
  402b72:	e000      	b.n	402b76 <local_twi_handler+0xd6>

		/* Wait for TX complete flag */
		while (1) {
			status = twi_port->TWI_SR;
			if (status & TWI_SR_TXCOMP) {
				break;
  402b74:	bf00      	nop
				break;
			}
		}
		/* If the driver is supporting multi-threading, then return the access
		mutex. */
		if (tx_dma_control[twi_index].peripheral_access_sem != NULL) {
  402b76:	4a54      	ldr	r2, [pc, #336]	; (402cc8 <local_twi_handler+0x228>)
  402b78:	687b      	ldr	r3, [r7, #4]
  402b7a:	00db      	lsls	r3, r3, #3
  402b7c:	4413      	add	r3, r2
  402b7e:	685b      	ldr	r3, [r3, #4]
  402b80:	2b00      	cmp	r3, #0
  402b82:	d00a      	beq.n	402b9a <local_twi_handler+0xfa>
			xSemaphoreGiveFromISR(
  402b84:	4a50      	ldr	r2, [pc, #320]	; (402cc8 <local_twi_handler+0x228>)
  402b86:	687b      	ldr	r3, [r7, #4]
  402b88:	00db      	lsls	r3, r3, #3
  402b8a:	4413      	add	r3, r2
  402b8c:	6858      	ldr	r0, [r3, #4]
  402b8e:	f107 0208 	add.w	r2, r7, #8
  402b92:	2300      	movs	r3, #0
  402b94:	2100      	movs	r1, #0
  402b96:	4c4d      	ldr	r4, [pc, #308]	; (402ccc <local_twi_handler+0x22c>)
  402b98:	47a0      	blx	r4
					&higher_priority_task_woken);
		}

		/* if the sending task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  402b9a:	6a3b      	ldr	r3, [r7, #32]
  402b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
  402ba0:	d00f      	beq.n	402bc2 <local_twi_handler+0x122>
			if (tx_dma_control[twi_index]. transaction_complete_notification_semaphore != NULL) {
  402ba2:	4a49      	ldr	r2, [pc, #292]	; (402cc8 <local_twi_handler+0x228>)
  402ba4:	687b      	ldr	r3, [r7, #4]
  402ba6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  402baa:	2b00      	cmp	r3, #0
  402bac:	d009      	beq.n	402bc2 <local_twi_handler+0x122>
				xSemaphoreGiveFromISR(
  402bae:	4a46      	ldr	r2, [pc, #280]	; (402cc8 <local_twi_handler+0x228>)
  402bb0:	687b      	ldr	r3, [r7, #4]
  402bb2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
  402bb6:	f107 0208 	add.w	r2, r7, #8
  402bba:	2300      	movs	r3, #0
  402bbc:	2100      	movs	r1, #0
  402bbe:	4c43      	ldr	r4, [pc, #268]	; (402ccc <local_twi_handler+0x22c>)
  402bc0:	47a0      	blx	r4
			}
		}
	}

	/* Has the PDC completed a reception? */
	if ((twi_status & TWI_SR_ENDRX) != 0UL) {
  402bc2:	697b      	ldr	r3, [r7, #20]
  402bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  402bc8:	2b00      	cmp	r3, #0
  402bca:	f000 80a8 	beq.w	402d1e <local_twi_handler+0x27e>
		uint32_t timeout_counter = 0;
  402bce:	2300      	movs	r3, #0
  402bd0:	61fb      	str	r3, [r7, #28]
		uint32_t status;
		/* Must handle the two last bytes */
		/* Disable PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_RXTDIS);
  402bd2:	4a37      	ldr	r2, [pc, #220]	; (402cb0 <local_twi_handler+0x210>)
  402bd4:	687b      	ldr	r3, [r7, #4]
  402bd6:	011b      	lsls	r3, r3, #4
  402bd8:	4413      	add	r3, r2
  402bda:	3304      	adds	r3, #4
  402bdc:	681b      	ldr	r3, [r3, #0]
  402bde:	2102      	movs	r1, #2
  402be0:	4618      	mov	r0, r3
  402be2:	4b36      	ldr	r3, [pc, #216]	; (402cbc <local_twi_handler+0x21c>)
  402be4:	4798      	blx	r3

		twi_disable_interrupt(twi_port, TWI_IDR_ENDRX);
  402be6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402bea:	69b8      	ldr	r0, [r7, #24]
  402bec:	4b34      	ldr	r3, [pc, #208]	; (402cc0 <local_twi_handler+0x220>)
  402bee:	4798      	blx	r3

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  402bf0:	69bb      	ldr	r3, [r7, #24]
  402bf2:	6a1b      	ldr	r3, [r3, #32]
  402bf4:	60fb      	str	r3, [r7, #12]
			if (status & TWI_SR_RXRDY) {
  402bf6:	68fb      	ldr	r3, [r7, #12]
  402bf8:	f003 0302 	and.w	r3, r3, #2
  402bfc:	2b00      	cmp	r3, #0
  402bfe:	d107      	bne.n	402c10 <local_twi_handler+0x170>
				break;
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  402c00:	69fb      	ldr	r3, [r7, #28]
  402c02:	3301      	adds	r3, #1
  402c04:	61fb      	str	r3, [r7, #28]
  402c06:	69fb      	ldr	r3, [r7, #28]
  402c08:	f1b3 3fff 	cmp.w	r3, #4294967295
  402c0c:	d002      	beq.n	402c14 <local_twi_handler+0x174>
				break;
			}
		}
  402c0e:	e7ef      	b.n	402bf0 <local_twi_handler+0x150>

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
			if (status & TWI_SR_RXRDY) {
				break;
  402c10:	bf00      	nop
  402c12:	e000      	b.n	402c16 <local_twi_handler+0x176>
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
				break;
  402c14:	bf00      	nop
			}
		}
		/* Complete the transfer. */
		twi_port->TWI_CR = TWI_CR_STOP;
  402c16:	69bb      	ldr	r3, [r7, #24]
  402c18:	2202      	movs	r2, #2
  402c1a:	601a      	str	r2, [r3, #0]
		/* Read second last data */
		twis[twi_index].buffer[(twis[twi_index].length)-2] = twi_port->TWI_RHR;
  402c1c:	4a29      	ldr	r2, [pc, #164]	; (402cc4 <local_twi_handler+0x224>)
  402c1e:	687b      	ldr	r3, [r7, #4]
  402c20:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  402c24:	4927      	ldr	r1, [pc, #156]	; (402cc4 <local_twi_handler+0x224>)
  402c26:	687b      	ldr	r3, [r7, #4]
  402c28:	00db      	lsls	r3, r3, #3
  402c2a:	440b      	add	r3, r1
  402c2c:	685b      	ldr	r3, [r3, #4]
  402c2e:	3b02      	subs	r3, #2
  402c30:	4413      	add	r3, r2
  402c32:	69ba      	ldr	r2, [r7, #24]
  402c34:	6b12      	ldr	r2, [r2, #48]	; 0x30
  402c36:	b2d2      	uxtb	r2, r2
  402c38:	701a      	strb	r2, [r3, #0]

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  402c3a:	69bb      	ldr	r3, [r7, #24]
  402c3c:	6a1b      	ldr	r3, [r3, #32]
  402c3e:	60fb      	str	r3, [r7, #12]
			if (status & TWI_SR_RXRDY) {
  402c40:	68fb      	ldr	r3, [r7, #12]
  402c42:	f003 0302 	and.w	r3, r3, #2
  402c46:	2b00      	cmp	r3, #0
  402c48:	d107      	bne.n	402c5a <local_twi_handler+0x1ba>
				break;
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  402c4a:	69fb      	ldr	r3, [r7, #28]
  402c4c:	3301      	adds	r3, #1
  402c4e:	61fb      	str	r3, [r7, #28]
  402c50:	69fb      	ldr	r3, [r7, #28]
  402c52:	f1b3 3fff 	cmp.w	r3, #4294967295
  402c56:	d002      	beq.n	402c5e <local_twi_handler+0x1be>
				break;
			}
		}
  402c58:	e7ef      	b.n	402c3a <local_twi_handler+0x19a>

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
			if (status & TWI_SR_RXRDY) {
				break;
  402c5a:	bf00      	nop
  402c5c:	e000      	b.n	402c60 <local_twi_handler+0x1c0>
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
				break;
  402c5e:	bf00      	nop
			}
		}

		if (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  402c60:	69fb      	ldr	r3, [r7, #28]
  402c62:	f1b3 3fff 	cmp.w	r3, #4294967295
  402c66:	d034      	beq.n	402cd2 <local_twi_handler+0x232>
			/* Read last data */
			twis[twi_index].buffer[(twis[twi_index].length)-1] = twi_port->TWI_RHR;
  402c68:	4a16      	ldr	r2, [pc, #88]	; (402cc4 <local_twi_handler+0x224>)
  402c6a:	687b      	ldr	r3, [r7, #4]
  402c6c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  402c70:	4914      	ldr	r1, [pc, #80]	; (402cc4 <local_twi_handler+0x224>)
  402c72:	687b      	ldr	r3, [r7, #4]
  402c74:	00db      	lsls	r3, r3, #3
  402c76:	440b      	add	r3, r1
  402c78:	685b      	ldr	r3, [r3, #4]
  402c7a:	3b01      	subs	r3, #1
  402c7c:	4413      	add	r3, r2
  402c7e:	69ba      	ldr	r2, [r7, #24]
  402c80:	6b12      	ldr	r2, [r2, #48]	; 0x30
  402c82:	b2d2      	uxtb	r2, r2
  402c84:	701a      	strb	r2, [r3, #0]
			timeout_counter = 0;
  402c86:	2300      	movs	r3, #0
  402c88:	61fb      	str	r3, [r7, #28]
			/* Wait for TX complete flag before releasing semaphore */
			while (1) {
				status = twi_port->TWI_SR;
  402c8a:	69bb      	ldr	r3, [r7, #24]
  402c8c:	6a1b      	ldr	r3, [r3, #32]
  402c8e:	60fb      	str	r3, [r7, #12]
				if (status & TWI_SR_TXCOMP) {
  402c90:	68fb      	ldr	r3, [r7, #12]
  402c92:	f003 0301 	and.w	r3, r3, #1
  402c96:	2b00      	cmp	r3, #0
  402c98:	d11a      	bne.n	402cd0 <local_twi_handler+0x230>
					break;
				}
				/* Check timeout condition. */
				if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  402c9a:	69fb      	ldr	r3, [r7, #28]
  402c9c:	3301      	adds	r3, #1
  402c9e:	61fb      	str	r3, [r7, #28]
  402ca0:	69fb      	ldr	r3, [r7, #28]
  402ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
  402ca6:	d1f0      	bne.n	402c8a <local_twi_handler+0x1ea>
					transfer_timeout = true;
  402ca8:	2301      	movs	r3, #1
  402caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
  402cae:	e010      	b.n	402cd2 <local_twi_handler+0x232>
  402cb0:	0040b5c4 	.word	0x0040b5c4
  402cb4:	004035a9 	.word	0x004035a9
  402cb8:	004035c1 	.word	0x004035c1
  402cbc:	00403191 	.word	0x00403191
  402cc0:	00403589 	.word	0x00403589
  402cc4:	200004fc 	.word	0x200004fc
  402cc8:	200004dc 	.word	0x200004dc
  402ccc:	004056a5 	.word	0x004056a5
			timeout_counter = 0;
			/* Wait for TX complete flag before releasing semaphore */
			while (1) {
				status = twi_port->TWI_SR;
				if (status & TWI_SR_TXCOMP) {
					break;
  402cd0:	bf00      	nop
		}

		/* If the driver is supporting multi-threading, then return the access
		mutex.  NOTE: As the peripheral is half duplex there is only one
		access mutex, and the reception uses the tx access muted. */
		if (tx_dma_control[twi_index].peripheral_access_sem != NULL) {
  402cd2:	4a33      	ldr	r2, [pc, #204]	; (402da0 <local_twi_handler+0x300>)
  402cd4:	687b      	ldr	r3, [r7, #4]
  402cd6:	00db      	lsls	r3, r3, #3
  402cd8:	4413      	add	r3, r2
  402cda:	685b      	ldr	r3, [r3, #4]
  402cdc:	2b00      	cmp	r3, #0
  402cde:	d00a      	beq.n	402cf6 <local_twi_handler+0x256>
			xSemaphoreGiveFromISR(
  402ce0:	4a2f      	ldr	r2, [pc, #188]	; (402da0 <local_twi_handler+0x300>)
  402ce2:	687b      	ldr	r3, [r7, #4]
  402ce4:	00db      	lsls	r3, r3, #3
  402ce6:	4413      	add	r3, r2
  402ce8:	6858      	ldr	r0, [r3, #4]
  402cea:	f107 0208 	add.w	r2, r7, #8
  402cee:	2300      	movs	r3, #0
  402cf0:	2100      	movs	r1, #0
  402cf2:	4c2c      	ldr	r4, [pc, #176]	; (402da4 <local_twi_handler+0x304>)
  402cf4:	47a0      	blx	r4
					&higher_priority_task_woken);
		}

		/* if the receiving task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if  (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  402cf6:	69fb      	ldr	r3, [r7, #28]
  402cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
  402cfc:	d00f      	beq.n	402d1e <local_twi_handler+0x27e>
			if (rx_dma_control[twi_index].transaction_complete_notification_semaphore != NULL) {
  402cfe:	4a2a      	ldr	r2, [pc, #168]	; (402da8 <local_twi_handler+0x308>)
  402d00:	687b      	ldr	r3, [r7, #4]
  402d02:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  402d06:	2b00      	cmp	r3, #0
  402d08:	d009      	beq.n	402d1e <local_twi_handler+0x27e>
				xSemaphoreGiveFromISR(
  402d0a:	4a27      	ldr	r2, [pc, #156]	; (402da8 <local_twi_handler+0x308>)
  402d0c:	687b      	ldr	r3, [r7, #4]
  402d0e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
  402d12:	f107 0208 	add.w	r2, r7, #8
  402d16:	2300      	movs	r3, #0
  402d18:	2100      	movs	r1, #0
  402d1a:	4c22      	ldr	r4, [pc, #136]	; (402da4 <local_twi_handler+0x304>)
  402d1c:	47a0      	blx	r4
						&higher_priority_task_woken);
			}
		}
	}

	if (((twi_status & SR_ERROR_INTERRUPTS) != 0) || (transfer_timeout == true)) {
  402d1e:	697b      	ldr	r3, [r7, #20]
  402d20:	f403 7350 	and.w	r3, r3, #832	; 0x340
  402d24:	2b00      	cmp	r3, #0
  402d26:	d103      	bne.n	402d30 <local_twi_handler+0x290>
  402d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  402d2c:	2b00      	cmp	r3, #0
  402d2e:	d02e      	beq.n	402d8e <local_twi_handler+0x2ee>
		Stop the transmission, disable interrupts used by the peripheral, and
		ensure the peripheral access mutex is made available to tasks.  As this
		peripheral is half duplex, only the Tx peripheral access mutex exits.*/

		/* Stop the PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
  402d30:	4a1e      	ldr	r2, [pc, #120]	; (402dac <local_twi_handler+0x30c>)
  402d32:	687b      	ldr	r3, [r7, #4]
  402d34:	011b      	lsls	r3, r3, #4
  402d36:	4413      	add	r3, r2
  402d38:	3304      	adds	r3, #4
  402d3a:	681b      	ldr	r3, [r3, #0]
  402d3c:	f240 2102 	movw	r1, #514	; 0x202
  402d40:	4618      	mov	r0, r3
  402d42:	4b1b      	ldr	r3, [pc, #108]	; (402db0 <local_twi_handler+0x310>)
  402d44:	4798      	blx	r3

		if (!(twi_status & TWI_SR_NACK)) {
  402d46:	697b      	ldr	r3, [r7, #20]
  402d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
  402d4c:	2b00      	cmp	r3, #0
  402d4e:	d102      	bne.n	402d56 <local_twi_handler+0x2b6>
			/* Do not send stop if NACK received. Handled by hardware */
			twi_port->TWI_CR = TWI_CR_STOP;
  402d50:	69bb      	ldr	r3, [r7, #24]
  402d52:	2202      	movs	r2, #2
  402d54:	601a      	str	r2, [r3, #0]
		}
		twi_disable_interrupt(twi_port, TWI_IDR_ENDTX);
  402d56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  402d5a:	69b8      	ldr	r0, [r7, #24]
  402d5c:	4b15      	ldr	r3, [pc, #84]	; (402db4 <local_twi_handler+0x314>)
  402d5e:	4798      	blx	r3
		twi_disable_interrupt(twi_port, TWI_IDR_ENDRX);
  402d60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402d64:	69b8      	ldr	r0, [r7, #24]
  402d66:	4b13      	ldr	r3, [pc, #76]	; (402db4 <local_twi_handler+0x314>)
  402d68:	4798      	blx	r3

		if (tx_dma_control[twi_index].peripheral_access_sem != NULL) {
  402d6a:	4a0d      	ldr	r2, [pc, #52]	; (402da0 <local_twi_handler+0x300>)
  402d6c:	687b      	ldr	r3, [r7, #4]
  402d6e:	00db      	lsls	r3, r3, #3
  402d70:	4413      	add	r3, r2
  402d72:	685b      	ldr	r3, [r3, #4]
  402d74:	2b00      	cmp	r3, #0
  402d76:	d00a      	beq.n	402d8e <local_twi_handler+0x2ee>
			xSemaphoreGiveFromISR(
  402d78:	4a09      	ldr	r2, [pc, #36]	; (402da0 <local_twi_handler+0x300>)
  402d7a:	687b      	ldr	r3, [r7, #4]
  402d7c:	00db      	lsls	r3, r3, #3
  402d7e:	4413      	add	r3, r2
  402d80:	6858      	ldr	r0, [r3, #4]
  402d82:	f107 0208 	add.w	r2, r7, #8
  402d86:	2300      	movs	r3, #0
  402d88:	2100      	movs	r1, #0
  402d8a:	4c06      	ldr	r4, [pc, #24]	; (402da4 <local_twi_handler+0x304>)
  402d8c:	47a0      	blx	r4
	has a priority equal to or higher than the currently running task (the task
	this ISR interrupted), then higher_priority_task_woken will have
	automatically been set to pdTRUE within the semaphore function.
	portEND_SWITCHING_ISR() will then ensure that this ISR returns directly to
	the higher priority unblocked task. */
	portEND_SWITCHING_ISR(higher_priority_task_woken);
  402d8e:	68bb      	ldr	r3, [r7, #8]
  402d90:	2b00      	cmp	r3, #0
  402d92:	d001      	beq.n	402d98 <local_twi_handler+0x2f8>
  402d94:	4b08      	ldr	r3, [pc, #32]	; (402db8 <local_twi_handler+0x318>)
  402d96:	4798      	blx	r3
}
  402d98:	bf00      	nop
  402d9a:	372c      	adds	r7, #44	; 0x2c
  402d9c:	46bd      	mov	sp, r7
  402d9e:	bd90      	pop	{r4, r7, pc}
  402da0:	200004dc 	.word	0x200004dc
  402da4:	004056a5 	.word	0x004056a5
  402da8:	200004ec 	.word	0x200004ec
  402dac:	0040b5c4 	.word	0x0040b5c4
  402db0:	00403191 	.word	0x00403191
  402db4:	00403589 	.word	0x00403589
  402db8:	00405025 	.word	0x00405025

00402dbc <TWI0_Handler>:
#endif /* TWI */

#ifdef TWI0

void TWI0_Handler(void)
{
  402dbc:	b580      	push	{r7, lr}
  402dbe:	af00      	add	r7, sp, #0
	local_twi_handler(0);
  402dc0:	2000      	movs	r0, #0
  402dc2:	4b02      	ldr	r3, [pc, #8]	; (402dcc <TWI0_Handler+0x10>)
  402dc4:	4798      	blx	r3
}
  402dc6:	bf00      	nop
  402dc8:	bd80      	pop	{r7, pc}
  402dca:	bf00      	nop
  402dcc:	00402aa1 	.word	0x00402aa1

00402dd0 <TWI1_Handler>:
#endif

#ifdef TWI1

void TWI1_Handler(void)
{
  402dd0:	b580      	push	{r7, lr}
  402dd2:	af00      	add	r7, sp, #0
	local_twi_handler(1);
  402dd4:	2001      	movs	r0, #1
  402dd6:	4b02      	ldr	r3, [pc, #8]	; (402de0 <TWI1_Handler+0x10>)
  402dd8:	4798      	blx	r3
}
  402dda:	bf00      	nop
  402ddc:	bd80      	pop	{r7, pc}
  402dde:	bf00      	nop
  402de0:	00402aa1 	.word	0x00402aa1

00402de4 <configure_rx_dma>:
 * For internal use only.
 * Configures the Rx DMA to receive data into free space within the Rx buffer.
 */
static void configure_rx_dma(uint32_t usart_index,
		enum buffer_operations operation_performed)
{
  402de4:	b580      	push	{r7, lr}
  402de6:	b084      	sub	sp, #16
  402de8:	af00      	add	r7, sp, #0
  402dea:	6078      	str	r0, [r7, #4]
  402dec:	460b      	mov	r3, r1
  402dee:	70fb      	strb	r3, [r7, #3]
	freertos_pdc_rx_control_t *rx_buffer_definition;

	rx_buffer_definition = &(rx_buffer_definitions[usart_index]);
  402df0:	687a      	ldr	r2, [r7, #4]
  402df2:	4613      	mov	r3, r2
  402df4:	00db      	lsls	r3, r3, #3
  402df6:	1a9b      	subs	r3, r3, r2
  402df8:	009b      	lsls	r3, r3, #2
  402dfa:	4a38      	ldr	r2, [pc, #224]	; (402edc <configure_rx_dma+0xf8>)
  402dfc:	4413      	add	r3, r2
  402dfe:	60fb      	str	r3, [r7, #12]

	/* How much space is there between the start of the DMA buffer and the
	current read pointer?  */

	if (((uint32_t)rx_buffer_definition->next_byte_to_read) ==
  402e00:	68fb      	ldr	r3, [r7, #12]
  402e02:	699b      	ldr	r3, [r3, #24]
  402e04:	461a      	mov	r2, r3
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
  402e06:	68fb      	ldr	r3, [r7, #12]
  402e08:	689b      	ldr	r3, [r3, #8]
	rx_buffer_definition = &(rx_buffer_definitions[usart_index]);

	/* How much space is there between the start of the DMA buffer and the
	current read pointer?  */

	if (((uint32_t)rx_buffer_definition->next_byte_to_read) ==
  402e0a:	429a      	cmp	r2, r3
  402e0c:	d10e      	bne.n	402e2c <configure_rx_dma+0x48>
		/* The read pointer and the write pointer are equal.  If this function
		was called because data was added to the buffer, then there is no free
		space in the buffer remaining.  If this function was called because data
		was removed from the buffer, then the space remaining is from the write
		pointer up to the end of the buffer. */
		if (operation_performed == data_added) {
  402e0e:	78fb      	ldrb	r3, [r7, #3]
  402e10:	2b00      	cmp	r3, #0
  402e12:	d103      	bne.n	402e1c <configure_rx_dma+0x38>
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
  402e14:	68fb      	ldr	r3, [r7, #12]
  402e16:	2200      	movs	r2, #0
  402e18:	60da      	str	r2, [r3, #12]
  402e1a:	e01e      	b.n	402e5a <configure_rx_dma+0x76>
		} else {
			rx_buffer_definition->rx_pdc_parameters.ul_size =
				rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
  402e1c:	68fb      	ldr	r3, [r7, #12]
  402e1e:	685a      	ldr	r2, [r3, #4]
  402e20:	68fb      	ldr	r3, [r7, #12]
  402e22:	689b      	ldr	r3, [r3, #8]
  402e24:	1ad2      	subs	r2, r2, r3
		was removed from the buffer, then the space remaining is from the write
		pointer up to the end of the buffer. */
		if (operation_performed == data_added) {
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
		} else {
			rx_buffer_definition->rx_pdc_parameters.ul_size =
  402e26:	68fb      	ldr	r3, [r7, #12]
  402e28:	60da      	str	r2, [r3, #12]
  402e2a:	e016      	b.n	402e5a <configure_rx_dma+0x76>
				rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
		}
	} else if (((uint32_t)rx_buffer_definition->next_byte_to_read) >
  402e2c:	68fb      	ldr	r3, [r7, #12]
  402e2e:	699b      	ldr	r3, [r3, #24]
  402e30:	461a      	mov	r2, r3
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
  402e32:	68fb      	ldr	r3, [r7, #12]
  402e34:	689b      	ldr	r3, [r3, #8]
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
		} else {
			rx_buffer_definition->rx_pdc_parameters.ul_size =
				rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
		}
	} else if (((uint32_t)rx_buffer_definition->next_byte_to_read) >
  402e36:	429a      	cmp	r2, r3
  402e38:	d908      	bls.n	402e4c <configure_rx_dma+0x68>
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
		/* The read pointer is ahead of the write pointer.  The space available
		is up to the write pointer to ensure unread data is not overwritten. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
			((uint32_t) rx_buffer_definition->next_byte_to_read) - rx_buffer_definition->rx_pdc_parameters.ul_addr;
  402e3a:	68fb      	ldr	r3, [r7, #12]
  402e3c:	699b      	ldr	r3, [r3, #24]
  402e3e:	461a      	mov	r2, r3
  402e40:	68fb      	ldr	r3, [r7, #12]
  402e42:	689b      	ldr	r3, [r3, #8]
  402e44:	1ad2      	subs	r2, r2, r3
		}
	} else if (((uint32_t)rx_buffer_definition->next_byte_to_read) >
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
		/* The read pointer is ahead of the write pointer.  The space available
		is up to the write pointer to ensure unread data is not overwritten. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
  402e46:	68fb      	ldr	r3, [r7, #12]
  402e48:	60da      	str	r2, [r3, #12]
  402e4a:	e006      	b.n	402e5a <configure_rx_dma+0x76>
			((uint32_t) rx_buffer_definition->next_byte_to_read) - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	} else {
		/* The write pointer is ahead of the read pointer so the space
		available is up to the end of the buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
			rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
  402e4c:	68fb      	ldr	r3, [r7, #12]
  402e4e:	685a      	ldr	r2, [r3, #4]
  402e50:	68fb      	ldr	r3, [r7, #12]
  402e52:	689b      	ldr	r3, [r3, #8]
  402e54:	1ad2      	subs	r2, r2, r3
		rx_buffer_definition->rx_pdc_parameters.ul_size =
			((uint32_t) rx_buffer_definition->next_byte_to_read) - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	} else {
		/* The write pointer is ahead of the read pointer so the space
		available is up to the end of the buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
  402e56:	68fb      	ldr	r3, [r7, #12]
  402e58:	60da      	str	r2, [r3, #12]
			rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	}

	configASSERT((rx_buffer_definition->rx_pdc_parameters.ul_addr +
  402e5a:	68fb      	ldr	r3, [r7, #12]
  402e5c:	689a      	ldr	r2, [r3, #8]
  402e5e:	68fb      	ldr	r3, [r7, #12]
  402e60:	68db      	ldr	r3, [r3, #12]
  402e62:	441a      	add	r2, r3
  402e64:	68fb      	ldr	r3, [r7, #12]
  402e66:	685b      	ldr	r3, [r3, #4]
  402e68:	429a      	cmp	r2, r3
  402e6a:	d903      	bls.n	402e74 <configure_rx_dma+0x90>
  402e6c:	4b1c      	ldr	r3, [pc, #112]	; (402ee0 <configure_rx_dma+0xfc>)
  402e6e:	4798      	blx	r3
  402e70:	bf00      	nop
  402e72:	e7fd      	b.n	402e70 <configure_rx_dma+0x8c>
			rx_buffer_definition->rx_pdc_parameters.ul_size) <=
			rx_buffer_definition->past_rx_buffer_end_address);

	if (rx_buffer_definition->rx_pdc_parameters.ul_size > 0) {
  402e74:	68fb      	ldr	r3, [r7, #12]
  402e76:	68db      	ldr	r3, [r3, #12]
  402e78:	2b00      	cmp	r3, #0
  402e7a:	d020      	beq.n	402ebe <configure_rx_dma+0xda>
		/* Restart the DMA to receive into whichever space was calculated
		as remaining.  First clear any characters that might already be in the
		registers. */
		pdc_rx_init(
  402e7c:	4a19      	ldr	r2, [pc, #100]	; (402ee4 <configure_rx_dma+0x100>)
  402e7e:	687b      	ldr	r3, [r7, #4]
  402e80:	011b      	lsls	r3, r3, #4
  402e82:	4413      	add	r3, r2
  402e84:	3304      	adds	r3, #4
  402e86:	6818      	ldr	r0, [r3, #0]
  402e88:	68fb      	ldr	r3, [r7, #12]
  402e8a:	3308      	adds	r3, #8
  402e8c:	2200      	movs	r2, #0
  402e8e:	4619      	mov	r1, r3
  402e90:	4b15      	ldr	r3, [pc, #84]	; (402ee8 <configure_rx_dma+0x104>)
  402e92:	4798      	blx	r3
				all_usart_definitions[usart_index].pdc_base_address, &rx_buffer_definition->rx_pdc_parameters,
				NULL);
		pdc_enable_transfer(
  402e94:	4a13      	ldr	r2, [pc, #76]	; (402ee4 <configure_rx_dma+0x100>)
  402e96:	687b      	ldr	r3, [r7, #4]
  402e98:	011b      	lsls	r3, r3, #4
  402e9a:	4413      	add	r3, r2
  402e9c:	3304      	adds	r3, #4
  402e9e:	681b      	ldr	r3, [r3, #0]
  402ea0:	2101      	movs	r1, #1
  402ea2:	4618      	mov	r0, r3
  402ea4:	4b11      	ldr	r3, [pc, #68]	; (402eec <configure_rx_dma+0x108>)
  402ea6:	4798      	blx	r3
				all_usart_definitions[usart_index].pdc_base_address,
				PERIPH_PTCR_RXTEN);
		usart_enable_interrupt(
				all_usart_definitions[usart_index].peripheral_base_address, US_IER_ENDRX |
  402ea8:	4a0e      	ldr	r2, [pc, #56]	; (402ee4 <configure_rx_dma+0x100>)
  402eaa:	687b      	ldr	r3, [r7, #4]
  402eac:	011b      	lsls	r3, r3, #4
  402eae:	4413      	add	r3, r2
  402eb0:	681b      	ldr	r3, [r3, #0]
				all_usart_definitions[usart_index].pdc_base_address, &rx_buffer_definition->rx_pdc_parameters,
				NULL);
		pdc_enable_transfer(
				all_usart_definitions[usart_index].pdc_base_address,
				PERIPH_PTCR_RXTEN);
		usart_enable_interrupt(
  402eb2:	f44f 7184 	mov.w	r1, #264	; 0x108
  402eb6:	4618      	mov	r0, r3
  402eb8:	4b0d      	ldr	r3, [pc, #52]	; (402ef0 <configure_rx_dma+0x10c>)
  402eba:	4798      	blx	r3
		space. */
		usart_disable_interrupt(
				all_usart_definitions[usart_index].peripheral_base_address, US_IER_ENDRX |
				US_IER_TIMEOUT);
	}
}
  402ebc:	e009      	b.n	402ed2 <configure_rx_dma+0xee>
	} else {
		/* The write pointer has reached the read pointer.  There is no
		more room so the DMA is not re-enabled until a read has created
		space. */
		usart_disable_interrupt(
				all_usart_definitions[usart_index].peripheral_base_address, US_IER_ENDRX |
  402ebe:	4a09      	ldr	r2, [pc, #36]	; (402ee4 <configure_rx_dma+0x100>)
  402ec0:	687b      	ldr	r3, [r7, #4]
  402ec2:	011b      	lsls	r3, r3, #4
  402ec4:	4413      	add	r3, r2
  402ec6:	681b      	ldr	r3, [r3, #0]
				US_IER_TIMEOUT);
	} else {
		/* The write pointer has reached the read pointer.  There is no
		more room so the DMA is not re-enabled until a read has created
		space. */
		usart_disable_interrupt(
  402ec8:	f44f 7184 	mov.w	r1, #264	; 0x108
  402ecc:	4618      	mov	r0, r3
  402ece:	4b09      	ldr	r3, [pc, #36]	; (402ef4 <configure_rx_dma+0x110>)
  402ed0:	4798      	blx	r3
				all_usart_definitions[usart_index].peripheral_base_address, US_IER_ENDRX |
				US_IER_TIMEOUT);
	}
}
  402ed2:	bf00      	nop
  402ed4:	3710      	adds	r7, #16
  402ed6:	46bd      	mov	sp, r7
  402ed8:	bd80      	pop	{r7, pc}
  402eda:	bf00      	nop
  402edc:	2000050c 	.word	0x2000050c
  402ee0:	00405085 	.word	0x00405085
  402ee4:	0040b5e4 	.word	0x0040b5e4
  402ee8:	0040312d 	.word	0x0040312d
  402eec:	00403171 	.word	0x00403171
  402ef0:	00403831 	.word	0x00403831
  402ef4:	0040384d 	.word	0x0040384d

00402ef8 <local_usart_handler>:
/*
 * For internal use only.
 * A common USART interrupt handler that is called for all USART peripherals.
 */
static void local_usart_handler(const portBASE_TYPE usart_index)
{
  402ef8:	b590      	push	{r4, r7, lr}
  402efa:	b087      	sub	sp, #28
  402efc:	af00      	add	r7, sp, #0
  402efe:	6078      	str	r0, [r7, #4]
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
  402f00:	2300      	movs	r3, #0
  402f02:	60fb      	str	r3, [r7, #12]
	uint32_t usart_status;
	freertos_pdc_rx_control_t *rx_buffer_definition;

	usart_status = usart_get_status(
			all_usart_definitions[usart_index].peripheral_base_address);
  402f04:	4a62      	ldr	r2, [pc, #392]	; (403090 <local_usart_handler+0x198>)
  402f06:	687b      	ldr	r3, [r7, #4]
  402f08:	011b      	lsls	r3, r3, #4
  402f0a:	4413      	add	r3, r2
  402f0c:	681b      	ldr	r3, [r3, #0]
{
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
	uint32_t usart_status;
	freertos_pdc_rx_control_t *rx_buffer_definition;

	usart_status = usart_get_status(
  402f0e:	4618      	mov	r0, r3
  402f10:	4b60      	ldr	r3, [pc, #384]	; (403094 <local_usart_handler+0x19c>)
  402f12:	4798      	blx	r3
  402f14:	6178      	str	r0, [r7, #20]
			all_usart_definitions[usart_index].peripheral_base_address);
	usart_status &= usart_get_interrupt_mask(
			all_usart_definitions[usart_index].peripheral_base_address);
  402f16:	4a5e      	ldr	r2, [pc, #376]	; (403090 <local_usart_handler+0x198>)
  402f18:	687b      	ldr	r3, [r7, #4]
  402f1a:	011b      	lsls	r3, r3, #4
  402f1c:	4413      	add	r3, r2
  402f1e:	681b      	ldr	r3, [r3, #0]
	uint32_t usart_status;
	freertos_pdc_rx_control_t *rx_buffer_definition;

	usart_status = usart_get_status(
			all_usart_definitions[usart_index].peripheral_base_address);
	usart_status &= usart_get_interrupt_mask(
  402f20:	4618      	mov	r0, r3
  402f22:	4b5d      	ldr	r3, [pc, #372]	; (403098 <local_usart_handler+0x1a0>)
  402f24:	4798      	blx	r3
  402f26:	4602      	mov	r2, r0
  402f28:	697b      	ldr	r3, [r7, #20]
  402f2a:	4013      	ands	r3, r2
  402f2c:	617b      	str	r3, [r7, #20]
			all_usart_definitions[usart_index].peripheral_base_address);

	rx_buffer_definition = &(rx_buffer_definitions[usart_index]);
  402f2e:	687a      	ldr	r2, [r7, #4]
  402f30:	4613      	mov	r3, r2
  402f32:	00db      	lsls	r3, r3, #3
  402f34:	1a9b      	subs	r3, r3, r2
  402f36:	009b      	lsls	r3, r3, #2
  402f38:	4a58      	ldr	r2, [pc, #352]	; (40309c <local_usart_handler+0x1a4>)
  402f3a:	4413      	add	r3, r2
  402f3c:	613b      	str	r3, [r7, #16]

	/* Has the PDC completed a transmission? */
	if ((usart_status & US_CSR_ENDTX) != 0UL) {
  402f3e:	697b      	ldr	r3, [r7, #20]
  402f40:	f003 0310 	and.w	r3, r3, #16
  402f44:	2b00      	cmp	r3, #0
  402f46:	d02a      	beq.n	402f9e <local_usart_handler+0xa6>
		usart_disable_interrupt(
				all_usart_definitions[usart_index].peripheral_base_address,
  402f48:	4a51      	ldr	r2, [pc, #324]	; (403090 <local_usart_handler+0x198>)
  402f4a:	687b      	ldr	r3, [r7, #4]
  402f4c:	011b      	lsls	r3, r3, #4
  402f4e:	4413      	add	r3, r2
  402f50:	681b      	ldr	r3, [r3, #0]

	rx_buffer_definition = &(rx_buffer_definitions[usart_index]);

	/* Has the PDC completed a transmission? */
	if ((usart_status & US_CSR_ENDTX) != 0UL) {
		usart_disable_interrupt(
  402f52:	2110      	movs	r1, #16
  402f54:	4618      	mov	r0, r3
  402f56:	4b52      	ldr	r3, [pc, #328]	; (4030a0 <local_usart_handler+0x1a8>)
  402f58:	4798      	blx	r3
				all_usart_definitions[usart_index].peripheral_base_address,
				US_IER_ENDTX);

		/* If the driver is supporting multi-threading, then return the access
		mutex. */
		if (tx_dma_control[usart_index].peripheral_access_sem != NULL) {
  402f5a:	4a52      	ldr	r2, [pc, #328]	; (4030a4 <local_usart_handler+0x1ac>)
  402f5c:	687b      	ldr	r3, [r7, #4]
  402f5e:	00db      	lsls	r3, r3, #3
  402f60:	4413      	add	r3, r2
  402f62:	685b      	ldr	r3, [r3, #4]
  402f64:	2b00      	cmp	r3, #0
  402f66:	d00a      	beq.n	402f7e <local_usart_handler+0x86>
			xSemaphoreGiveFromISR(
  402f68:	4a4e      	ldr	r2, [pc, #312]	; (4030a4 <local_usart_handler+0x1ac>)
  402f6a:	687b      	ldr	r3, [r7, #4]
  402f6c:	00db      	lsls	r3, r3, #3
  402f6e:	4413      	add	r3, r2
  402f70:	6858      	ldr	r0, [r3, #4]
  402f72:	f107 020c 	add.w	r2, r7, #12
  402f76:	2300      	movs	r3, #0
  402f78:	2100      	movs	r1, #0
  402f7a:	4c4b      	ldr	r4, [pc, #300]	; (4030a8 <local_usart_handler+0x1b0>)
  402f7c:	47a0      	blx	r4
					&higher_priority_task_woken);
		}

		/* if the sending task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if (tx_dma_control[usart_index].transaction_complete_notification_semaphore != NULL) {
  402f7e:	4a49      	ldr	r2, [pc, #292]	; (4030a4 <local_usart_handler+0x1ac>)
  402f80:	687b      	ldr	r3, [r7, #4]
  402f82:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  402f86:	2b00      	cmp	r3, #0
  402f88:	d009      	beq.n	402f9e <local_usart_handler+0xa6>
			xSemaphoreGiveFromISR(
  402f8a:	4a46      	ldr	r2, [pc, #280]	; (4030a4 <local_usart_handler+0x1ac>)
  402f8c:	687b      	ldr	r3, [r7, #4]
  402f8e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
  402f92:	f107 020c 	add.w	r2, r7, #12
  402f96:	2300      	movs	r3, #0
  402f98:	2100      	movs	r1, #0
  402f9a:	4c43      	ldr	r4, [pc, #268]	; (4030a8 <local_usart_handler+0x1b0>)
  402f9c:	47a0      	blx	r4
					tx_dma_control[usart_index].transaction_complete_notification_semaphore,
					&higher_priority_task_woken);
		}
	}

	if ((usart_status & US_CSR_ENDRX) != 0UL) {
  402f9e:	697b      	ldr	r3, [r7, #20]
  402fa0:	f003 0308 	and.w	r3, r3, #8
  402fa4:	2b00      	cmp	r3, #0
  402fa6:	d031      	beq.n	40300c <local_usart_handler+0x114>
		/* It is possible to initialise the peripheral to only use Tx and not Rx.
		Check that Rx has been initialised. */
		configASSERT(rx_buffer_definition->next_byte_to_read);
  402fa8:	693b      	ldr	r3, [r7, #16]
  402faa:	699b      	ldr	r3, [r3, #24]
  402fac:	2b00      	cmp	r3, #0
  402fae:	d103      	bne.n	402fb8 <local_usart_handler+0xc0>
  402fb0:	4b3e      	ldr	r3, [pc, #248]	; (4030ac <local_usart_handler+0x1b4>)
  402fb2:	4798      	blx	r3
  402fb4:	bf00      	nop
  402fb6:	e7fd      	b.n	402fb4 <local_usart_handler+0xbc>
		configASSERT(rx_buffer_definition->next_byte_to_read !=
  402fb8:	693b      	ldr	r3, [r7, #16]
  402fba:	699b      	ldr	r3, [r3, #24]
  402fbc:	2b01      	cmp	r3, #1
  402fbe:	d103      	bne.n	402fc8 <local_usart_handler+0xd0>
  402fc0:	4b3a      	ldr	r3, [pc, #232]	; (4030ac <local_usart_handler+0x1b4>)
  402fc2:	4798      	blx	r3
  402fc4:	bf00      	nop
  402fc6:	e7fd      	b.n	402fc4 <local_usart_handler+0xcc>
				RX_NOT_USED);

		/* Out of DMA buffer, configure the next buffer.  Start by moving
		the DMA buffer start address up to the end of the previously defined
		buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_addr +=
  402fc8:	693b      	ldr	r3, [r7, #16]
  402fca:	689a      	ldr	r2, [r3, #8]
				rx_buffer_definition->rx_pdc_parameters.ul_size;
  402fcc:	693b      	ldr	r3, [r7, #16]
  402fce:	68db      	ldr	r3, [r3, #12]
				RX_NOT_USED);

		/* Out of DMA buffer, configure the next buffer.  Start by moving
		the DMA buffer start address up to the end of the previously defined
		buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_addr +=
  402fd0:	441a      	add	r2, r3
  402fd2:	693b      	ldr	r3, [r7, #16]
  402fd4:	609a      	str	r2, [r3, #8]
				rx_buffer_definition->rx_pdc_parameters.ul_size;

		/* If the end of the buffer has been reached, wrap back to the start. */
		if (rx_buffer_definition->rx_pdc_parameters.ul_addr >=
  402fd6:	693b      	ldr	r3, [r7, #16]
  402fd8:	689a      	ldr	r2, [r3, #8]
				rx_buffer_definition->past_rx_buffer_end_address)
  402fda:	693b      	ldr	r3, [r7, #16]
  402fdc:	685b      	ldr	r3, [r3, #4]
		buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_addr +=
				rx_buffer_definition->rx_pdc_parameters.ul_size;

		/* If the end of the buffer has been reached, wrap back to the start. */
		if (rx_buffer_definition->rx_pdc_parameters.ul_addr >=
  402fde:	429a      	cmp	r2, r3
  402fe0:	d303      	bcc.n	402fea <local_usart_handler+0xf2>
				rx_buffer_definition->past_rx_buffer_end_address)
		{
			rx_buffer_definition->rx_pdc_parameters.ul_addr =
					rx_buffer_definition->rx_buffer_start_address;
  402fe2:	693b      	ldr	r3, [r7, #16]
  402fe4:	681a      	ldr	r2, [r3, #0]

		/* If the end of the buffer has been reached, wrap back to the start. */
		if (rx_buffer_definition->rx_pdc_parameters.ul_addr >=
				rx_buffer_definition->past_rx_buffer_end_address)
		{
			rx_buffer_definition->rx_pdc_parameters.ul_addr =
  402fe6:	693b      	ldr	r3, [r7, #16]
  402fe8:	609a      	str	r2, [r3, #8]
					rx_buffer_definition->rx_buffer_start_address;
		}

		/* Reset the Rx DMA to receive data into whatever free space remains in
		the Rx buffer. */
		configure_rx_dma(usart_index, data_added);
  402fea:	687b      	ldr	r3, [r7, #4]
  402fec:	2100      	movs	r1, #0
  402fee:	4618      	mov	r0, r3
  402ff0:	4b2f      	ldr	r3, [pc, #188]	; (4030b0 <local_usart_handler+0x1b8>)
  402ff2:	4798      	blx	r3

		if (rx_buffer_definition->rx_event_semaphore != NULL) {
  402ff4:	693b      	ldr	r3, [r7, #16]
  402ff6:	691b      	ldr	r3, [r3, #16]
  402ff8:	2b00      	cmp	r3, #0
  402ffa:	d007      	beq.n	40300c <local_usart_handler+0x114>
			/* Notify that new data is available. */
			xSemaphoreGiveFromISR(
  402ffc:	693b      	ldr	r3, [r7, #16]
  402ffe:	6918      	ldr	r0, [r3, #16]
  403000:	f107 020c 	add.w	r2, r7, #12
  403004:	2300      	movs	r3, #0
  403006:	2100      	movs	r1, #0
  403008:	4c27      	ldr	r4, [pc, #156]	; (4030a8 <local_usart_handler+0x1b0>)
  40300a:	47a0      	blx	r4
					rx_buffer_definition->rx_event_semaphore,
					&higher_priority_task_woken);
		}
	}

	if ((usart_status & US_IER_TIMEOUT) != 0UL) {
  40300c:	697b      	ldr	r3, [r7, #20]
  40300e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  403012:	2b00      	cmp	r3, #0
  403014:	d013      	beq.n	40303e <local_usart_handler+0x146>
		/* More characters have been placed into the Rx buffer.

		Restart the timeout after more data has been received. */
		usart_start_rx_timeout(all_usart_definitions[usart_index].peripheral_base_address);
  403016:	4a1e      	ldr	r2, [pc, #120]	; (403090 <local_usart_handler+0x198>)
  403018:	687b      	ldr	r3, [r7, #4]
  40301a:	011b      	lsls	r3, r3, #4
  40301c:	4413      	add	r3, r2
  40301e:	681b      	ldr	r3, [r3, #0]
  403020:	4618      	mov	r0, r3
  403022:	4b24      	ldr	r3, [pc, #144]	; (4030b4 <local_usart_handler+0x1bc>)
  403024:	4798      	blx	r3

		if (rx_buffer_definition->rx_event_semaphore != NULL) {
  403026:	693b      	ldr	r3, [r7, #16]
  403028:	691b      	ldr	r3, [r3, #16]
  40302a:	2b00      	cmp	r3, #0
  40302c:	d007      	beq.n	40303e <local_usart_handler+0x146>
			/* Notify that new data is available. */
			xSemaphoreGiveFromISR(
  40302e:	693b      	ldr	r3, [r7, #16]
  403030:	6918      	ldr	r0, [r3, #16]
  403032:	f107 020c 	add.w	r2, r7, #12
  403036:	2300      	movs	r3, #0
  403038:	2100      	movs	r1, #0
  40303a:	4c1b      	ldr	r4, [pc, #108]	; (4030a8 <local_usart_handler+0x1b0>)
  40303c:	47a0      	blx	r4
					rx_buffer_definition->rx_event_semaphore,
					&higher_priority_task_woken);
		}
	}

	if ((usart_status & SR_ERROR_INTERRUPTS) != 0) {
  40303e:	697b      	ldr	r3, [r7, #20]
  403040:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
  403044:	2b00      	cmp	r3, #0
  403046:	d019      	beq.n	40307c <local_usart_handler+0x184>
		/* An error occurred in either a transmission or reception.  Abort, and
		ensure the peripheral access mutex is made available to tasks. */
		usart_reset_status(
				all_usart_definitions[usart_index].peripheral_base_address);
  403048:	4a11      	ldr	r2, [pc, #68]	; (403090 <local_usart_handler+0x198>)
  40304a:	687b      	ldr	r3, [r7, #4]
  40304c:	011b      	lsls	r3, r3, #4
  40304e:	4413      	add	r3, r2
  403050:	681b      	ldr	r3, [r3, #0]
	}

	if ((usart_status & SR_ERROR_INTERRUPTS) != 0) {
		/* An error occurred in either a transmission or reception.  Abort, and
		ensure the peripheral access mutex is made available to tasks. */
		usart_reset_status(
  403052:	4618      	mov	r0, r3
  403054:	4b18      	ldr	r3, [pc, #96]	; (4030b8 <local_usart_handler+0x1c0>)
  403056:	4798      	blx	r3
				all_usart_definitions[usart_index].peripheral_base_address);
		if (tx_dma_control[usart_index].peripheral_access_sem != NULL) {
  403058:	4a12      	ldr	r2, [pc, #72]	; (4030a4 <local_usart_handler+0x1ac>)
  40305a:	687b      	ldr	r3, [r7, #4]
  40305c:	00db      	lsls	r3, r3, #3
  40305e:	4413      	add	r3, r2
  403060:	685b      	ldr	r3, [r3, #4]
  403062:	2b00      	cmp	r3, #0
  403064:	d00a      	beq.n	40307c <local_usart_handler+0x184>
			xSemaphoreGiveFromISR(
  403066:	4a0f      	ldr	r2, [pc, #60]	; (4030a4 <local_usart_handler+0x1ac>)
  403068:	687b      	ldr	r3, [r7, #4]
  40306a:	00db      	lsls	r3, r3, #3
  40306c:	4413      	add	r3, r2
  40306e:	6858      	ldr	r0, [r3, #4]
  403070:	f107 020c 	add.w	r2, r7, #12
  403074:	2300      	movs	r3, #0
  403076:	2100      	movs	r1, #0
  403078:	4c0b      	ldr	r4, [pc, #44]	; (4030a8 <local_usart_handler+0x1b0>)
  40307a:	47a0      	blx	r4
	has a priority equal to or higher than the currently running task (the task
	this ISR interrupted), then higher_priority_task_woken will have
	automatically been set to pdTRUE within the semaphore function.
	portEND_SWITCHING_ISR() will then ensure that this ISR returns directly to
	the higher priority unblocked task. */
	portEND_SWITCHING_ISR(higher_priority_task_woken);
  40307c:	68fb      	ldr	r3, [r7, #12]
  40307e:	2b00      	cmp	r3, #0
  403080:	d001      	beq.n	403086 <local_usart_handler+0x18e>
  403082:	4b0e      	ldr	r3, [pc, #56]	; (4030bc <local_usart_handler+0x1c4>)
  403084:	4798      	blx	r3
}
  403086:	bf00      	nop
  403088:	371c      	adds	r7, #28
  40308a:	46bd      	mov	sp, r7
  40308c:	bd90      	pop	{r4, r7, pc}
  40308e:	bf00      	nop
  403090:	0040b5e4 	.word	0x0040b5e4
  403094:	00403881 	.word	0x00403881
  403098:	00403869 	.word	0x00403869
  40309c:	2000050c 	.word	0x2000050c
  4030a0:	0040384d 	.word	0x0040384d
  4030a4:	20000544 	.word	0x20000544
  4030a8:	004056a5 	.word	0x004056a5
  4030ac:	00405085 	.word	0x00405085
  4030b0:	00402de5 	.word	0x00402de5
  4030b4:	004038b5 	.word	0x004038b5
  4030b8:	00403899 	.word	0x00403899
  4030bc:	00405025 	.word	0x00405025

004030c0 <USART0_Handler>:
#endif /* USART */

#ifdef USART0

void USART0_Handler(void)
{
  4030c0:	b580      	push	{r7, lr}
  4030c2:	af00      	add	r7, sp, #0
	local_usart_handler(0);
  4030c4:	2000      	movs	r0, #0
  4030c6:	4b02      	ldr	r3, [pc, #8]	; (4030d0 <USART0_Handler+0x10>)
  4030c8:	4798      	blx	r3
}
  4030ca:	bf00      	nop
  4030cc:	bd80      	pop	{r7, pc}
  4030ce:	bf00      	nop
  4030d0:	00402ef9 	.word	0x00402ef9

004030d4 <USART1_Handler>:
#endif /* USART0 */

#ifdef USART1

void USART1_Handler(void)
{
  4030d4:	b580      	push	{r7, lr}
  4030d6:	af00      	add	r7, sp, #0
	local_usart_handler(1);
  4030d8:	2001      	movs	r0, #1
  4030da:	4b02      	ldr	r3, [pc, #8]	; (4030e4 <USART1_Handler+0x10>)
  4030dc:	4798      	blx	r3
}
  4030de:	bf00      	nop
  4030e0:	bd80      	pop	{r7, pc}
  4030e2:	bf00      	nop
  4030e4:	00402ef9 	.word	0x00402ef9

004030e8 <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  4030e8:	b480      	push	{r7}
  4030ea:	b085      	sub	sp, #20
  4030ec:	af00      	add	r7, sp, #0
  4030ee:	60f8      	str	r0, [r7, #12]
  4030f0:	60b9      	str	r1, [r7, #8]
  4030f2:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  4030f4:	68bb      	ldr	r3, [r7, #8]
  4030f6:	2b00      	cmp	r3, #0
  4030f8:	d007      	beq.n	40310a <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
  4030fa:	68bb      	ldr	r3, [r7, #8]
  4030fc:	681a      	ldr	r2, [r3, #0]
  4030fe:	68fb      	ldr	r3, [r7, #12]
  403100:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  403102:	68bb      	ldr	r3, [r7, #8]
  403104:	685a      	ldr	r2, [r3, #4]
  403106:	68fb      	ldr	r3, [r7, #12]
  403108:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
  40310a:	687b      	ldr	r3, [r7, #4]
  40310c:	2b00      	cmp	r3, #0
  40310e:	d007      	beq.n	403120 <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  403110:	687b      	ldr	r3, [r7, #4]
  403112:	681a      	ldr	r2, [r3, #0]
  403114:	68fb      	ldr	r3, [r7, #12]
  403116:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  403118:	687b      	ldr	r3, [r7, #4]
  40311a:	685a      	ldr	r2, [r3, #4]
  40311c:	68fb      	ldr	r3, [r7, #12]
  40311e:	61da      	str	r2, [r3, #28]
	}
}
  403120:	bf00      	nop
  403122:	3714      	adds	r7, #20
  403124:	46bd      	mov	sp, r7
  403126:	bc80      	pop	{r7}
  403128:	4770      	bx	lr
  40312a:	bf00      	nop

0040312c <pdc_rx_init>:
 */
void pdc_rx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  40312c:	b480      	push	{r7}
  40312e:	b085      	sub	sp, #20
  403130:	af00      	add	r7, sp, #0
  403132:	60f8      	str	r0, [r7, #12]
  403134:	60b9      	str	r1, [r7, #8]
  403136:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  403138:	68bb      	ldr	r3, [r7, #8]
  40313a:	2b00      	cmp	r3, #0
  40313c:	d007      	beq.n	40314e <pdc_rx_init+0x22>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  40313e:	68bb      	ldr	r3, [r7, #8]
  403140:	681a      	ldr	r2, [r3, #0]
  403142:	68fb      	ldr	r3, [r7, #12]
  403144:	601a      	str	r2, [r3, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  403146:	68bb      	ldr	r3, [r7, #8]
  403148:	685a      	ldr	r2, [r3, #4]
  40314a:	68fb      	ldr	r3, [r7, #12]
  40314c:	605a      	str	r2, [r3, #4]
	}
	if (p_next_packet) {
  40314e:	687b      	ldr	r3, [r7, #4]
  403150:	2b00      	cmp	r3, #0
  403152:	d007      	beq.n	403164 <pdc_rx_init+0x38>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  403154:	687b      	ldr	r3, [r7, #4]
  403156:	681a      	ldr	r2, [r3, #0]
  403158:	68fb      	ldr	r3, [r7, #12]
  40315a:	611a      	str	r2, [r3, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  40315c:	687b      	ldr	r3, [r7, #4]
  40315e:	685a      	ldr	r2, [r3, #4]
  403160:	68fb      	ldr	r3, [r7, #12]
  403162:	615a      	str	r2, [r3, #20]
	}
}
  403164:	bf00      	nop
  403166:	3714      	adds	r7, #20
  403168:	46bd      	mov	sp, r7
  40316a:	bc80      	pop	{r7}
  40316c:	4770      	bx	lr
  40316e:	bf00      	nop

00403170 <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  403170:	b480      	push	{r7}
  403172:	b083      	sub	sp, #12
  403174:	af00      	add	r7, sp, #0
  403176:	6078      	str	r0, [r7, #4]
  403178:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  40317a:	683a      	ldr	r2, [r7, #0]
  40317c:	f240 1301 	movw	r3, #257	; 0x101
  403180:	4013      	ands	r3, r2
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  403182:	687a      	ldr	r2, [r7, #4]
  403184:	6213      	str	r3, [r2, #32]
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
}
  403186:	bf00      	nop
  403188:	370c      	adds	r7, #12
  40318a:	46bd      	mov	sp, r7
  40318c:	bc80      	pop	{r7}
  40318e:	4770      	bx	lr

00403190 <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  403190:	b480      	push	{r7}
  403192:	b083      	sub	sp, #12
  403194:	af00      	add	r7, sp, #0
  403196:	6078      	str	r0, [r7, #4]
  403198:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  40319a:	683a      	ldr	r2, [r7, #0]
  40319c:	f240 2302 	movw	r3, #514	; 0x202
  4031a0:	4013      	ands	r3, r2
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  4031a2:	687a      	ldr	r2, [r7, #4]
  4031a4:	6213      	str	r3, [r2, #32]
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
}
  4031a6:	bf00      	nop
  4031a8:	370c      	adds	r7, #12
  4031aa:	46bd      	mov	sp, r7
  4031ac:	bc80      	pop	{r7}
  4031ae:	4770      	bx	lr

004031b0 <pdc_read_rx_counter>:
 *
 * \return Receive Counter Register value.
 */
uint32_t pdc_read_rx_counter(
		Pdc *p_pdc)
{
  4031b0:	b480      	push	{r7}
  4031b2:	b083      	sub	sp, #12
  4031b4:	af00      	add	r7, sp, #0
  4031b6:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	return p_pdc->PERIPH_RCR;
  4031b8:	687b      	ldr	r3, [r7, #4]
  4031ba:	685b      	ldr	r3, [r3, #4]
}
  4031bc:	4618      	mov	r0, r3
  4031be:	370c      	adds	r7, #12
  4031c0:	46bd      	mov	sp, r7
  4031c2:	bc80      	pop	{r7}
  4031c4:	4770      	bx	lr
  4031c6:	bf00      	nop

004031c8 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  4031c8:	b480      	push	{r7}
  4031ca:	b083      	sub	sp, #12
  4031cc:	af00      	add	r7, sp, #0
  4031ce:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  4031d0:	687b      	ldr	r3, [r7, #4]
  4031d2:	2208      	movs	r2, #8
  4031d4:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  4031d6:	687b      	ldr	r3, [r7, #4]
  4031d8:	2220      	movs	r2, #32
  4031da:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  4031dc:	687b      	ldr	r3, [r7, #4]
  4031de:	2204      	movs	r2, #4
  4031e0:	601a      	str	r2, [r3, #0]
}
  4031e2:	bf00      	nop
  4031e4:	370c      	adds	r7, #12
  4031e6:	46bd      	mov	sp, r7
  4031e8:	bc80      	pop	{r7}
  4031ea:	4770      	bx	lr

004031ec <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  4031ec:	b580      	push	{r7, lr}
  4031ee:	b084      	sub	sp, #16
  4031f0:	af00      	add	r7, sp, #0
  4031f2:	6078      	str	r0, [r7, #4]
  4031f4:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
  4031f6:	2300      	movs	r3, #0
  4031f8:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  4031fa:	687b      	ldr	r3, [r7, #4]
  4031fc:	f04f 32ff 	mov.w	r2, #4294967295
  403200:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  403202:	687b      	ldr	r3, [r7, #4]
  403204:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  403206:	6878      	ldr	r0, [r7, #4]
  403208:	4b0e      	ldr	r3, [pc, #56]	; (403244 <twi_master_init+0x58>)
  40320a:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  40320c:	6878      	ldr	r0, [r7, #4]
  40320e:	4b0e      	ldr	r3, [pc, #56]	; (403248 <twi_master_init+0x5c>)
  403210:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  403212:	683b      	ldr	r3, [r7, #0]
  403214:	6859      	ldr	r1, [r3, #4]
  403216:	683b      	ldr	r3, [r7, #0]
  403218:	681b      	ldr	r3, [r3, #0]
  40321a:	461a      	mov	r2, r3
  40321c:	6878      	ldr	r0, [r7, #4]
  40321e:	4b0b      	ldr	r3, [pc, #44]	; (40324c <twi_master_init+0x60>)
  403220:	4798      	blx	r3
  403222:	4603      	mov	r3, r0
  403224:	2b01      	cmp	r3, #1
  403226:	d101      	bne.n	40322c <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  403228:	2301      	movs	r3, #1
  40322a:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  40322c:	683b      	ldr	r3, [r7, #0]
  40322e:	7a5b      	ldrb	r3, [r3, #9]
  403230:	2b01      	cmp	r3, #1
  403232:	d102      	bne.n	40323a <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
  403234:	687b      	ldr	r3, [r7, #4]
  403236:	2240      	movs	r2, #64	; 0x40
  403238:	601a      	str	r2, [r3, #0]
	}

	return status;
  40323a:	68fb      	ldr	r3, [r7, #12]
}
  40323c:	4618      	mov	r0, r3
  40323e:	3710      	adds	r7, #16
  403240:	46bd      	mov	sp, r7
  403242:	bd80      	pop	{r7, pc}
  403244:	004035d9 	.word	0x004035d9
  403248:	004031c9 	.word	0x004031c9
  40324c:	00403251 	.word	0x00403251

00403250 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  403250:	b480      	push	{r7}
  403252:	b089      	sub	sp, #36	; 0x24
  403254:	af00      	add	r7, sp, #0
  403256:	60f8      	str	r0, [r7, #12]
  403258:	60b9      	str	r1, [r7, #8]
  40325a:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  40325c:	2300      	movs	r3, #0
  40325e:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  403260:	68bb      	ldr	r3, [r7, #8]
  403262:	4a34      	ldr	r2, [pc, #208]	; (403334 <twi_set_speed+0xe4>)
  403264:	4293      	cmp	r3, r2
  403266:	d901      	bls.n	40326c <twi_set_speed+0x1c>
		return FAIL;
  403268:	2301      	movs	r3, #1
  40326a:	e05d      	b.n	403328 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  40326c:	68bb      	ldr	r3, [r7, #8]
  40326e:	4a32      	ldr	r2, [pc, #200]	; (403338 <twi_set_speed+0xe8>)
  403270:	4293      	cmp	r3, r2
  403272:	d937      	bls.n	4032e4 <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  403274:	687b      	ldr	r3, [r7, #4]
  403276:	4a31      	ldr	r2, [pc, #196]	; (40333c <twi_set_speed+0xec>)
  403278:	fba2 2303 	umull	r2, r3, r2, r3
  40327c:	0b9b      	lsrs	r3, r3, #14
  40327e:	3b04      	subs	r3, #4
  403280:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  403282:	68ba      	ldr	r2, [r7, #8]
  403284:	4b2e      	ldr	r3, [pc, #184]	; (403340 <twi_set_speed+0xf0>)
  403286:	4413      	add	r3, r2
  403288:	009b      	lsls	r3, r3, #2
  40328a:	687a      	ldr	r2, [r7, #4]
  40328c:	fbb2 f3f3 	udiv	r3, r2, r3
  403290:	3b04      	subs	r3, #4
  403292:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  403294:	e005      	b.n	4032a2 <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
  403296:	69fb      	ldr	r3, [r7, #28]
  403298:	3301      	adds	r3, #1
  40329a:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  40329c:	697b      	ldr	r3, [r7, #20]
  40329e:	085b      	lsrs	r3, r3, #1
  4032a0:	617b      	str	r3, [r7, #20]
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4032a2:	697b      	ldr	r3, [r7, #20]
  4032a4:	2bff      	cmp	r3, #255	; 0xff
  4032a6:	d909      	bls.n	4032bc <twi_set_speed+0x6c>
  4032a8:	69fb      	ldr	r3, [r7, #28]
  4032aa:	2b06      	cmp	r3, #6
  4032ac:	d9f3      	bls.n	403296 <twi_set_speed+0x46>
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4032ae:	e005      	b.n	4032bc <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
  4032b0:	69fb      	ldr	r3, [r7, #28]
  4032b2:	3301      	adds	r3, #1
  4032b4:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  4032b6:	693b      	ldr	r3, [r7, #16]
  4032b8:	085b      	lsrs	r3, r3, #1
  4032ba:	613b      	str	r3, [r7, #16]
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4032bc:	693b      	ldr	r3, [r7, #16]
  4032be:	2bff      	cmp	r3, #255	; 0xff
  4032c0:	d902      	bls.n	4032c8 <twi_set_speed+0x78>
  4032c2:	69fb      	ldr	r3, [r7, #28]
  4032c4:	2b06      	cmp	r3, #6
  4032c6:	d9f3      	bls.n	4032b0 <twi_set_speed+0x60>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4032c8:	697b      	ldr	r3, [r7, #20]
  4032ca:	b2da      	uxtb	r2, r3
  4032cc:	693b      	ldr	r3, [r7, #16]
  4032ce:	021b      	lsls	r3, r3, #8
  4032d0:	b29b      	uxth	r3, r3
  4032d2:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
  4032d4:	69fb      	ldr	r3, [r7, #28]
  4032d6:	041b      	lsls	r3, r3, #16
  4032d8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4032dc:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  4032de:	68fb      	ldr	r3, [r7, #12]
  4032e0:	611a      	str	r2, [r3, #16]
  4032e2:	e020      	b.n	403326 <twi_set_speed+0xd6>
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4032e4:	68bb      	ldr	r3, [r7, #8]
  4032e6:	005b      	lsls	r3, r3, #1
  4032e8:	687a      	ldr	r2, [r7, #4]
  4032ea:	fbb2 f3f3 	udiv	r3, r2, r3
  4032ee:	3b04      	subs	r3, #4
  4032f0:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4032f2:	e005      	b.n	403300 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
  4032f4:	69fb      	ldr	r3, [r7, #28]
  4032f6:	3301      	adds	r3, #1
  4032f8:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  4032fa:	69bb      	ldr	r3, [r7, #24]
  4032fc:	085b      	lsrs	r3, r3, #1
  4032fe:	61bb      	str	r3, [r7, #24]
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  403300:	69bb      	ldr	r3, [r7, #24]
  403302:	2bff      	cmp	r3, #255	; 0xff
  403304:	d902      	bls.n	40330c <twi_set_speed+0xbc>
  403306:	69fb      	ldr	r3, [r7, #28]
  403308:	2b06      	cmp	r3, #6
  40330a:	d9f3      	bls.n	4032f4 <twi_set_speed+0xa4>
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  40330c:	69bb      	ldr	r3, [r7, #24]
  40330e:	b2da      	uxtb	r2, r3
  403310:	69bb      	ldr	r3, [r7, #24]
  403312:	021b      	lsls	r3, r3, #8
  403314:	b29b      	uxth	r3, r3
  403316:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
  403318:	69fb      	ldr	r3, [r7, #28]
  40331a:	041b      	lsls	r3, r3, #16
  40331c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  403320:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  403322:	68fb      	ldr	r3, [r7, #12]
  403324:	611a      	str	r2, [r3, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  403326:	2300      	movs	r3, #0
}
  403328:	4618      	mov	r0, r3
  40332a:	3724      	adds	r7, #36	; 0x24
  40332c:	46bd      	mov	sp, r7
  40332e:	bc80      	pop	{r7}
  403330:	4770      	bx	lr
  403332:	bf00      	nop
  403334:	00061a80 	.word	0x00061a80
  403338:	0005dc00 	.word	0x0005dc00
  40333c:	057619f1 	.word	0x057619f1
  403340:	3ffd1200 	.word	0x3ffd1200

00403344 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
  403344:	b480      	push	{r7}
  403346:	b085      	sub	sp, #20
  403348:	af00      	add	r7, sp, #0
  40334a:	6078      	str	r0, [r7, #4]
  40334c:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  40334e:	683b      	ldr	r3, [r7, #0]
  403350:	2b00      	cmp	r3, #0
  403352:	d101      	bne.n	403358 <twi_mk_addr+0x14>
		return 0;
  403354:	2300      	movs	r3, #0
  403356:	e01d      	b.n	403394 <twi_mk_addr+0x50>

	val = addr[0];
  403358:	687b      	ldr	r3, [r7, #4]
  40335a:	781b      	ldrb	r3, [r3, #0]
  40335c:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  40335e:	683b      	ldr	r3, [r7, #0]
  403360:	2b01      	cmp	r3, #1
  403362:	dd09      	ble.n	403378 <twi_mk_addr+0x34>
		val <<= 8;
  403364:	68fb      	ldr	r3, [r7, #12]
  403366:	021b      	lsls	r3, r3, #8
  403368:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  40336a:	687b      	ldr	r3, [r7, #4]
  40336c:	3301      	adds	r3, #1
  40336e:	781b      	ldrb	r3, [r3, #0]
  403370:	461a      	mov	r2, r3
  403372:	68fb      	ldr	r3, [r7, #12]
  403374:	4313      	orrs	r3, r2
  403376:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  403378:	683b      	ldr	r3, [r7, #0]
  40337a:	2b02      	cmp	r3, #2
  40337c:	dd09      	ble.n	403392 <twi_mk_addr+0x4e>
		val <<= 8;
  40337e:	68fb      	ldr	r3, [r7, #12]
  403380:	021b      	lsls	r3, r3, #8
  403382:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  403384:	687b      	ldr	r3, [r7, #4]
  403386:	3302      	adds	r3, #2
  403388:	781b      	ldrb	r3, [r3, #0]
  40338a:	461a      	mov	r2, r3
  40338c:	68fb      	ldr	r3, [r7, #12]
  40338e:	4313      	orrs	r3, r2
  403390:	60fb      	str	r3, [r7, #12]
	}
	return val;
  403392:	68fb      	ldr	r3, [r7, #12]
}
  403394:	4618      	mov	r0, r3
  403396:	3714      	adds	r7, #20
  403398:	46bd      	mov	sp, r7
  40339a:	bc80      	pop	{r7}
  40339c:	4770      	bx	lr
  40339e:	bf00      	nop

004033a0 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  4033a0:	b580      	push	{r7, lr}
  4033a2:	b088      	sub	sp, #32
  4033a4:	af00      	add	r7, sp, #0
  4033a6:	6078      	str	r0, [r7, #4]
  4033a8:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4033aa:	683b      	ldr	r3, [r7, #0]
  4033ac:	68db      	ldr	r3, [r3, #12]
  4033ae:	61fb      	str	r3, [r7, #28]
	uint8_t *buffer = p_packet->buffer;
  4033b0:	683b      	ldr	r3, [r7, #0]
  4033b2:	689b      	ldr	r3, [r3, #8]
  4033b4:	61bb      	str	r3, [r7, #24]
	uint8_t stop_sent = 0;
  4033b6:	2300      	movs	r3, #0
  4033b8:	75fb      	strb	r3, [r7, #23]
	uint32_t timeout = TWI_TIMEOUT;;
  4033ba:	f247 5330 	movw	r3, #30000	; 0x7530
  4033be:	613b      	str	r3, [r7, #16]
	
	/* Check argument */
	if (cnt == 0) {
  4033c0:	69fb      	ldr	r3, [r7, #28]
  4033c2:	2b00      	cmp	r3, #0
  4033c4:	d101      	bne.n	4033ca <twi_master_read+0x2a>
		return TWI_INVALID_ARGUMENT;
  4033c6:	2301      	movs	r3, #1
  4033c8:	e069      	b.n	40349e <twi_master_read+0xfe>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  4033ca:	687b      	ldr	r3, [r7, #4]
  4033cc:	2200      	movs	r2, #0
  4033ce:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  4033d0:	683b      	ldr	r3, [r7, #0]
  4033d2:	7c1b      	ldrb	r3, [r3, #16]
  4033d4:	041b      	lsls	r3, r3, #16
  4033d6:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  4033da:	683b      	ldr	r3, [r7, #0]
  4033dc:	685b      	ldr	r3, [r3, #4]
  4033de:	021b      	lsls	r3, r3, #8
  4033e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  4033e4:	4313      	orrs	r3, r2
  4033e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  4033ea:	687b      	ldr	r3, [r7, #4]
  4033ec:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  4033ee:	687b      	ldr	r3, [r7, #4]
  4033f0:	2200      	movs	r2, #0
  4033f2:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4033f4:	683a      	ldr	r2, [r7, #0]
  4033f6:	683b      	ldr	r3, [r7, #0]
  4033f8:	685b      	ldr	r3, [r3, #4]
  4033fa:	4619      	mov	r1, r3
  4033fc:	4610      	mov	r0, r2
  4033fe:	4b2a      	ldr	r3, [pc, #168]	; (4034a8 <twi_master_read+0x108>)
  403400:	4798      	blx	r3
  403402:	4602      	mov	r2, r0
  403404:	687b      	ldr	r3, [r7, #4]
  403406:	60da      	str	r2, [r3, #12]

	/* Send a START condition */
	if (cnt == 1) {
  403408:	69fb      	ldr	r3, [r7, #28]
  40340a:	2b01      	cmp	r3, #1
  40340c:	d105      	bne.n	40341a <twi_master_read+0x7a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  40340e:	687b      	ldr	r3, [r7, #4]
  403410:	2203      	movs	r2, #3
  403412:	601a      	str	r2, [r3, #0]
		stop_sent = 1;
  403414:	2301      	movs	r3, #1
  403416:	75fb      	strb	r3, [r7, #23]
  403418:	e034      	b.n	403484 <twi_master_read+0xe4>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  40341a:	687b      	ldr	r3, [r7, #4]
  40341c:	2201      	movs	r2, #1
  40341e:	601a      	str	r2, [r3, #0]
		stop_sent = 0;
  403420:	2300      	movs	r3, #0
  403422:	75fb      	strb	r3, [r7, #23]
	}

	while (cnt > 0) {
  403424:	e02e      	b.n	403484 <twi_master_read+0xe4>
		status = p_twi->TWI_SR;
  403426:	687b      	ldr	r3, [r7, #4]
  403428:	6a1b      	ldr	r3, [r3, #32]
  40342a:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  40342c:	68fb      	ldr	r3, [r7, #12]
  40342e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  403432:	2b00      	cmp	r3, #0
  403434:	d001      	beq.n	40343a <twi_master_read+0x9a>
			return TWI_RECEIVE_NACK;
  403436:	2305      	movs	r3, #5
  403438:	e031      	b.n	40349e <twi_master_read+0xfe>
		}

		if (!timeout--) {
  40343a:	693b      	ldr	r3, [r7, #16]
  40343c:	1e5a      	subs	r2, r3, #1
  40343e:	613a      	str	r2, [r7, #16]
  403440:	2b00      	cmp	r3, #0
  403442:	d101      	bne.n	403448 <twi_master_read+0xa8>
			return TWI_ERROR_TIMEOUT;
  403444:	2309      	movs	r3, #9
  403446:	e02a      	b.n	40349e <twi_master_read+0xfe>
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  403448:	69fb      	ldr	r3, [r7, #28]
  40344a:	2b01      	cmp	r3, #1
  40344c:	d107      	bne.n	40345e <twi_master_read+0xbe>
  40344e:	7dfb      	ldrb	r3, [r7, #23]
  403450:	2b00      	cmp	r3, #0
  403452:	d104      	bne.n	40345e <twi_master_read+0xbe>
			p_twi->TWI_CR = TWI_CR_STOP;
  403454:	687b      	ldr	r3, [r7, #4]
  403456:	2202      	movs	r2, #2
  403458:	601a      	str	r2, [r3, #0]
			stop_sent = 1;
  40345a:	2301      	movs	r3, #1
  40345c:	75fb      	strb	r3, [r7, #23]
		}

		if (!(status & TWI_SR_RXRDY)) {
  40345e:	68fb      	ldr	r3, [r7, #12]
  403460:	f003 0302 	and.w	r3, r3, #2
  403464:	2b00      	cmp	r3, #0
  403466:	d100      	bne.n	40346a <twi_master_read+0xca>
			continue;
  403468:	e00c      	b.n	403484 <twi_master_read+0xe4>
		}
		*buffer++ = p_twi->TWI_RHR;
  40346a:	69bb      	ldr	r3, [r7, #24]
  40346c:	1c5a      	adds	r2, r3, #1
  40346e:	61ba      	str	r2, [r7, #24]
  403470:	687a      	ldr	r2, [r7, #4]
  403472:	6b12      	ldr	r2, [r2, #48]	; 0x30
  403474:	b2d2      	uxtb	r2, r2
  403476:	701a      	strb	r2, [r3, #0]

		cnt--;
  403478:	69fb      	ldr	r3, [r7, #28]
  40347a:	3b01      	subs	r3, #1
  40347c:	61fb      	str	r3, [r7, #28]
		timeout = TWI_TIMEOUT;
  40347e:	f247 5330 	movw	r3, #30000	; 0x7530
  403482:	613b      	str	r3, [r7, #16]
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  403484:	69fb      	ldr	r3, [r7, #28]
  403486:	2b00      	cmp	r3, #0
  403488:	d1cd      	bne.n	403426 <twi_master_read+0x86>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  40348a:	bf00      	nop
  40348c:	687b      	ldr	r3, [r7, #4]
  40348e:	6a1b      	ldr	r3, [r3, #32]
  403490:	f003 0301 	and.w	r3, r3, #1
  403494:	2b00      	cmp	r3, #0
  403496:	d0f9      	beq.n	40348c <twi_master_read+0xec>
	}

	p_twi->TWI_SR;
  403498:	687b      	ldr	r3, [r7, #4]
  40349a:	6a1b      	ldr	r3, [r3, #32]

	return TWI_SUCCESS;
  40349c:	2300      	movs	r3, #0
}
  40349e:	4618      	mov	r0, r3
  4034a0:	3720      	adds	r7, #32
  4034a2:	46bd      	mov	sp, r7
  4034a4:	bd80      	pop	{r7, pc}
  4034a6:	bf00      	nop
  4034a8:	00403345 	.word	0x00403345

004034ac <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  4034ac:	b580      	push	{r7, lr}
  4034ae:	b086      	sub	sp, #24
  4034b0:	af00      	add	r7, sp, #0
  4034b2:	6078      	str	r0, [r7, #4]
  4034b4:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4034b6:	683b      	ldr	r3, [r7, #0]
  4034b8:	68db      	ldr	r3, [r3, #12]
  4034ba:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  4034bc:	683b      	ldr	r3, [r7, #0]
  4034be:	689b      	ldr	r3, [r3, #8]
  4034c0:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  4034c2:	697b      	ldr	r3, [r7, #20]
  4034c4:	2b00      	cmp	r3, #0
  4034c6:	d101      	bne.n	4034cc <twi_master_write+0x20>
		return TWI_INVALID_ARGUMENT;
  4034c8:	2301      	movs	r3, #1
  4034ca:	e056      	b.n	40357a <twi_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  4034cc:	687b      	ldr	r3, [r7, #4]
  4034ce:	2200      	movs	r2, #0
  4034d0:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  4034d2:	683b      	ldr	r3, [r7, #0]
  4034d4:	7c1b      	ldrb	r3, [r3, #16]
  4034d6:	041b      	lsls	r3, r3, #16
  4034d8:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  4034dc:	683b      	ldr	r3, [r7, #0]
  4034de:	685b      	ldr	r3, [r3, #4]
  4034e0:	021b      	lsls	r3, r3, #8
  4034e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  4034e6:	431a      	orrs	r2, r3
  4034e8:	687b      	ldr	r3, [r7, #4]
  4034ea:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  4034ec:	687b      	ldr	r3, [r7, #4]
  4034ee:	2200      	movs	r2, #0
  4034f0:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4034f2:	683a      	ldr	r2, [r7, #0]
  4034f4:	683b      	ldr	r3, [r7, #0]
  4034f6:	685b      	ldr	r3, [r3, #4]
  4034f8:	4619      	mov	r1, r3
  4034fa:	4610      	mov	r0, r2
  4034fc:	4b21      	ldr	r3, [pc, #132]	; (403584 <twi_master_write+0xd8>)
  4034fe:	4798      	blx	r3
  403500:	4602      	mov	r2, r0
  403502:	687b      	ldr	r3, [r7, #4]
  403504:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  403506:	e019      	b.n	40353c <twi_master_write+0x90>
		status = p_twi->TWI_SR;
  403508:	687b      	ldr	r3, [r7, #4]
  40350a:	6a1b      	ldr	r3, [r3, #32]
  40350c:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  40350e:	68fb      	ldr	r3, [r7, #12]
  403510:	f403 7380 	and.w	r3, r3, #256	; 0x100
  403514:	2b00      	cmp	r3, #0
  403516:	d001      	beq.n	40351c <twi_master_write+0x70>
			return TWI_RECEIVE_NACK;
  403518:	2305      	movs	r3, #5
  40351a:	e02e      	b.n	40357a <twi_master_write+0xce>
		}

		if (!(status & TWI_SR_TXRDY)) {
  40351c:	68fb      	ldr	r3, [r7, #12]
  40351e:	f003 0304 	and.w	r3, r3, #4
  403522:	2b00      	cmp	r3, #0
  403524:	d100      	bne.n	403528 <twi_master_write+0x7c>
			continue;
  403526:	e009      	b.n	40353c <twi_master_write+0x90>
		}
		p_twi->TWI_THR = *buffer++;
  403528:	693b      	ldr	r3, [r7, #16]
  40352a:	1c5a      	adds	r2, r3, #1
  40352c:	613a      	str	r2, [r7, #16]
  40352e:	781b      	ldrb	r3, [r3, #0]
  403530:	461a      	mov	r2, r3
  403532:	687b      	ldr	r3, [r7, #4]
  403534:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  403536:	697b      	ldr	r3, [r7, #20]
  403538:	3b01      	subs	r3, #1
  40353a:	617b      	str	r3, [r7, #20]
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  40353c:	697b      	ldr	r3, [r7, #20]
  40353e:	2b00      	cmp	r3, #0
  403540:	d1e2      	bne.n	403508 <twi_master_write+0x5c>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  403542:	687b      	ldr	r3, [r7, #4]
  403544:	6a1b      	ldr	r3, [r3, #32]
  403546:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  403548:	68fb      	ldr	r3, [r7, #12]
  40354a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  40354e:	2b00      	cmp	r3, #0
  403550:	d001      	beq.n	403556 <twi_master_write+0xaa>
			return TWI_RECEIVE_NACK;
  403552:	2305      	movs	r3, #5
  403554:	e011      	b.n	40357a <twi_master_write+0xce>
		}

		if (status & TWI_SR_TXRDY) {
  403556:	68fb      	ldr	r3, [r7, #12]
  403558:	f003 0304 	and.w	r3, r3, #4
  40355c:	2b00      	cmp	r3, #0
  40355e:	d100      	bne.n	403562 <twi_master_write+0xb6>
			break;
		}
	}
  403560:	e7ef      	b.n	403542 <twi_master_write+0x96>
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
			break;
  403562:	bf00      	nop
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  403564:	687b      	ldr	r3, [r7, #4]
  403566:	2202      	movs	r2, #2
  403568:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  40356a:	bf00      	nop
  40356c:	687b      	ldr	r3, [r7, #4]
  40356e:	6a1b      	ldr	r3, [r3, #32]
  403570:	f003 0301 	and.w	r3, r3, #1
  403574:	2b00      	cmp	r3, #0
  403576:	d0f9      	beq.n	40356c <twi_master_write+0xc0>
	}

	return TWI_SUCCESS;
  403578:	2300      	movs	r3, #0
}
  40357a:	4618      	mov	r0, r3
  40357c:	3718      	adds	r7, #24
  40357e:	46bd      	mov	sp, r7
  403580:	bd80      	pop	{r7, pc}
  403582:	bf00      	nop
  403584:	00403345 	.word	0x00403345

00403588 <twi_disable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be disabled.
 */
void twi_disable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
  403588:	b480      	push	{r7}
  40358a:	b083      	sub	sp, #12
  40358c:	af00      	add	r7, sp, #0
  40358e:	6078      	str	r0, [r7, #4]
  403590:	6039      	str	r1, [r7, #0]
	/* Disable the specified interrupts */
	p_twi->TWI_IDR = ul_sources;
  403592:	687b      	ldr	r3, [r7, #4]
  403594:	683a      	ldr	r2, [r7, #0]
  403596:	629a      	str	r2, [r3, #40]	; 0x28
	/* Dummy read */
	p_twi->TWI_SR;
  403598:	687b      	ldr	r3, [r7, #4]
  40359a:	6a1b      	ldr	r3, [r3, #32]
}
  40359c:	bf00      	nop
  40359e:	370c      	adds	r7, #12
  4035a0:	46bd      	mov	sp, r7
  4035a2:	bc80      	pop	{r7}
  4035a4:	4770      	bx	lr
  4035a6:	bf00      	nop

004035a8 <twi_get_interrupt_status>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \retval TWI interrupt status.
 */
uint32_t twi_get_interrupt_status(Twi *p_twi)
{
  4035a8:	b480      	push	{r7}
  4035aa:	b083      	sub	sp, #12
  4035ac:	af00      	add	r7, sp, #0
  4035ae:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_SR;
  4035b0:	687b      	ldr	r3, [r7, #4]
  4035b2:	6a1b      	ldr	r3, [r3, #32]
}
  4035b4:	4618      	mov	r0, r3
  4035b6:	370c      	adds	r7, #12
  4035b8:	46bd      	mov	sp, r7
  4035ba:	bc80      	pop	{r7}
  4035bc:	4770      	bx	lr
  4035be:	bf00      	nop

004035c0 <twi_get_interrupt_mask>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The interrupt mask value.
 */
uint32_t twi_get_interrupt_mask(Twi *p_twi)
{
  4035c0:	b480      	push	{r7}
  4035c2:	b083      	sub	sp, #12
  4035c4:	af00      	add	r7, sp, #0
  4035c6:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_IMR;
  4035c8:	687b      	ldr	r3, [r7, #4]
  4035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
  4035cc:	4618      	mov	r0, r3
  4035ce:	370c      	adds	r7, #12
  4035d0:	46bd      	mov	sp, r7
  4035d2:	bc80      	pop	{r7}
  4035d4:	4770      	bx	lr
  4035d6:	bf00      	nop

004035d8 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  4035d8:	b480      	push	{r7}
  4035da:	b083      	sub	sp, #12
  4035dc:	af00      	add	r7, sp, #0
  4035de:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  4035e0:	687b      	ldr	r3, [r7, #4]
  4035e2:	2280      	movs	r2, #128	; 0x80
  4035e4:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  4035e6:	687b      	ldr	r3, [r7, #4]
  4035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  4035ea:	bf00      	nop
  4035ec:	370c      	adds	r7, #12
  4035ee:	46bd      	mov	sp, r7
  4035f0:	bc80      	pop	{r7}
  4035f2:	4770      	bx	lr

004035f4 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4035f4:	b480      	push	{r7}
  4035f6:	b089      	sub	sp, #36	; 0x24
  4035f8:	af00      	add	r7, sp, #0
  4035fa:	60f8      	str	r0, [r7, #12]
  4035fc:	60b9      	str	r1, [r7, #8]
  4035fe:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  403600:	68bb      	ldr	r3, [r7, #8]
  403602:	011a      	lsls	r2, r3, #4
  403604:	687b      	ldr	r3, [r7, #4]
  403606:	429a      	cmp	r2, r3
  403608:	d802      	bhi.n	403610 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  40360a:	2310      	movs	r3, #16
  40360c:	61fb      	str	r3, [r7, #28]
  40360e:	e001      	b.n	403614 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  403610:	2308      	movs	r3, #8
  403612:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  403614:	687b      	ldr	r3, [r7, #4]
  403616:	00da      	lsls	r2, r3, #3
  403618:	69fb      	ldr	r3, [r7, #28]
  40361a:	68b9      	ldr	r1, [r7, #8]
  40361c:	fb01 f303 	mul.w	r3, r1, r3
  403620:	085b      	lsrs	r3, r3, #1
  403622:	441a      	add	r2, r3
  403624:	69fb      	ldr	r3, [r7, #28]
  403626:	68b9      	ldr	r1, [r7, #8]
  403628:	fb01 f303 	mul.w	r3, r1, r3
  40362c:	fbb2 f3f3 	udiv	r3, r2, r3
  403630:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  403632:	69bb      	ldr	r3, [r7, #24]
  403634:	08db      	lsrs	r3, r3, #3
  403636:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  403638:	69bb      	ldr	r3, [r7, #24]
  40363a:	f003 0307 	and.w	r3, r3, #7
  40363e:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  403640:	697b      	ldr	r3, [r7, #20]
  403642:	2b00      	cmp	r3, #0
  403644:	d003      	beq.n	40364e <usart_set_async_baudrate+0x5a>
  403646:	697b      	ldr	r3, [r7, #20]
  403648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  40364c:	d301      	bcc.n	403652 <usart_set_async_baudrate+0x5e>
		return 1;
  40364e:	2301      	movs	r3, #1
  403650:	e00f      	b.n	403672 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  403652:	69fb      	ldr	r3, [r7, #28]
  403654:	2b08      	cmp	r3, #8
  403656:	d105      	bne.n	403664 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  403658:	68fb      	ldr	r3, [r7, #12]
  40365a:	685b      	ldr	r3, [r3, #4]
  40365c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  403660:	68fb      	ldr	r3, [r7, #12]
  403662:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  403664:	693b      	ldr	r3, [r7, #16]
  403666:	041a      	lsls	r2, r3, #16
  403668:	697b      	ldr	r3, [r7, #20]
  40366a:	431a      	orrs	r2, r3
  40366c:	68fb      	ldr	r3, [r7, #12]
  40366e:	621a      	str	r2, [r3, #32]

	return 0;
  403670:	2300      	movs	r3, #0
}
  403672:	4618      	mov	r0, r3
  403674:	3724      	adds	r7, #36	; 0x24
  403676:	46bd      	mov	sp, r7
  403678:	bc80      	pop	{r7}
  40367a:	4770      	bx	lr

0040367c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  40367c:	b580      	push	{r7, lr}
  40367e:	b082      	sub	sp, #8
  403680:	af00      	add	r7, sp, #0
  403682:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  403684:	6878      	ldr	r0, [r7, #4]
  403686:	4b0f      	ldr	r3, [pc, #60]	; (4036c4 <usart_reset+0x48>)
  403688:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  40368a:	687b      	ldr	r3, [r7, #4]
  40368c:	2200      	movs	r2, #0
  40368e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  403690:	687b      	ldr	r3, [r7, #4]
  403692:	2200      	movs	r2, #0
  403694:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  403696:	687b      	ldr	r3, [r7, #4]
  403698:	2200      	movs	r2, #0
  40369a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  40369c:	6878      	ldr	r0, [r7, #4]
  40369e:	4b0a      	ldr	r3, [pc, #40]	; (4036c8 <usart_reset+0x4c>)
  4036a0:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4036a2:	6878      	ldr	r0, [r7, #4]
  4036a4:	4b09      	ldr	r3, [pc, #36]	; (4036cc <usart_reset+0x50>)
  4036a6:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4036a8:	6878      	ldr	r0, [r7, #4]
  4036aa:	4b09      	ldr	r3, [pc, #36]	; (4036d0 <usart_reset+0x54>)
  4036ac:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4036ae:	6878      	ldr	r0, [r7, #4]
  4036b0:	4b08      	ldr	r3, [pc, #32]	; (4036d4 <usart_reset+0x58>)
  4036b2:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  4036b4:	6878      	ldr	r0, [r7, #4]
  4036b6:	4b08      	ldr	r3, [pc, #32]	; (4036d8 <usart_reset+0x5c>)
  4036b8:	4798      	blx	r3
#endif
}
  4036ba:	bf00      	nop
  4036bc:	3708      	adds	r7, #8
  4036be:	46bd      	mov	sp, r7
  4036c0:	bd80      	pop	{r7, pc}
  4036c2:	bf00      	nop
  4036c4:	00403951 	.word	0x00403951
  4036c8:	004037d1 	.word	0x004037d1
  4036cc:	00403819 	.word	0x00403819
  4036d0:	00403899 	.word	0x00403899
  4036d4:	004038ed 	.word	0x004038ed
  4036d8:	004038d1 	.word	0x004038d1

004036dc <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4036dc:	b580      	push	{r7, lr}
  4036de:	b084      	sub	sp, #16
  4036e0:	af00      	add	r7, sp, #0
  4036e2:	60f8      	str	r0, [r7, #12]
  4036e4:	60b9      	str	r1, [r7, #8]
  4036e6:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4036e8:	68f8      	ldr	r0, [r7, #12]
  4036ea:	4b1a      	ldr	r3, [pc, #104]	; (403754 <usart_init_rs232+0x78>)
  4036ec:	4798      	blx	r3

	ul_reg_val = 0;
  4036ee:	4b1a      	ldr	r3, [pc, #104]	; (403758 <usart_init_rs232+0x7c>)
  4036f0:	2200      	movs	r2, #0
  4036f2:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4036f4:	68bb      	ldr	r3, [r7, #8]
  4036f6:	2b00      	cmp	r3, #0
  4036f8:	d009      	beq.n	40370e <usart_init_rs232+0x32>
  4036fa:	68bb      	ldr	r3, [r7, #8]
  4036fc:	681b      	ldr	r3, [r3, #0]
  4036fe:	687a      	ldr	r2, [r7, #4]
  403700:	4619      	mov	r1, r3
  403702:	68f8      	ldr	r0, [r7, #12]
  403704:	4b15      	ldr	r3, [pc, #84]	; (40375c <usart_init_rs232+0x80>)
  403706:	4798      	blx	r3
  403708:	4603      	mov	r3, r0
  40370a:	2b00      	cmp	r3, #0
  40370c:	d001      	beq.n	403712 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  40370e:	2301      	movs	r3, #1
  403710:	e01b      	b.n	40374a <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  403712:	68bb      	ldr	r3, [r7, #8]
  403714:	685a      	ldr	r2, [r3, #4]
  403716:	68bb      	ldr	r3, [r7, #8]
  403718:	689b      	ldr	r3, [r3, #8]
  40371a:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40371c:	68bb      	ldr	r3, [r7, #8]
  40371e:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  403720:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  403722:	68bb      	ldr	r3, [r7, #8]
  403724:	68db      	ldr	r3, [r3, #12]
  403726:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  403728:	4b0b      	ldr	r3, [pc, #44]	; (403758 <usart_init_rs232+0x7c>)
  40372a:	681b      	ldr	r3, [r3, #0]
  40372c:	4313      	orrs	r3, r2
  40372e:	4a0a      	ldr	r2, [pc, #40]	; (403758 <usart_init_rs232+0x7c>)
  403730:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  403732:	4b09      	ldr	r3, [pc, #36]	; (403758 <usart_init_rs232+0x7c>)
  403734:	681b      	ldr	r3, [r3, #0]
  403736:	4a08      	ldr	r2, [pc, #32]	; (403758 <usart_init_rs232+0x7c>)
  403738:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  40373a:	68fb      	ldr	r3, [r7, #12]
  40373c:	685a      	ldr	r2, [r3, #4]
  40373e:	4b06      	ldr	r3, [pc, #24]	; (403758 <usart_init_rs232+0x7c>)
  403740:	681b      	ldr	r3, [r3, #0]
  403742:	431a      	orrs	r2, r3
  403744:	68fb      	ldr	r3, [r7, #12]
  403746:	605a      	str	r2, [r3, #4]

	return 0;
  403748:	2300      	movs	r3, #0
}
  40374a:	4618      	mov	r0, r3
  40374c:	3710      	adds	r7, #16
  40374e:	46bd      	mov	sp, r7
  403750:	bd80      	pop	{r7, pc}
  403752:	bf00      	nop
  403754:	0040367d 	.word	0x0040367d
  403758:	20000554 	.word	0x20000554
  40375c:	004035f5 	.word	0x004035f5

00403760 <usart_init_rs485>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs485(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  403760:	b580      	push	{r7, lr}
  403762:	b084      	sub	sp, #16
  403764:	af00      	add	r7, sp, #0
  403766:	60f8      	str	r0, [r7, #12]
  403768:	60b9      	str	r1, [r7, #8]
  40376a:	607a      	str	r2, [r7, #4]
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  40376c:	687a      	ldr	r2, [r7, #4]
  40376e:	68b9      	ldr	r1, [r7, #8]
  403770:	68f8      	ldr	r0, [r7, #12]
  403772:	4b0a      	ldr	r3, [pc, #40]	; (40379c <usart_init_rs485+0x3c>)
  403774:	4798      	blx	r3
  403776:	4603      	mov	r3, r0
  403778:	2b00      	cmp	r3, #0
  40377a:	d001      	beq.n	403780 <usart_init_rs485+0x20>
		return 1;
  40377c:	2301      	movs	r3, #1
  40377e:	e008      	b.n	403792 <usart_init_rs485+0x32>
	}

	/* Set RS485 mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  403780:	68fb      	ldr	r3, [r7, #12]
  403782:	685b      	ldr	r3, [r3, #4]
  403784:	f023 030f 	bic.w	r3, r3, #15
  403788:	f043 0201 	orr.w	r2, r3, #1
  40378c:	68fb      	ldr	r3, [r7, #12]
  40378e:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_RS485;

	return 0;
  403790:	2300      	movs	r3, #0
}
  403792:	4618      	mov	r0, r3
  403794:	3710      	adds	r7, #16
  403796:	46bd      	mov	sp, r7
  403798:	bd80      	pop	{r7, pc}
  40379a:	bf00      	nop
  40379c:	004036dd 	.word	0x004036dd

004037a0 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  4037a0:	b480      	push	{r7}
  4037a2:	b083      	sub	sp, #12
  4037a4:	af00      	add	r7, sp, #0
  4037a6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  4037a8:	687b      	ldr	r3, [r7, #4]
  4037aa:	2240      	movs	r2, #64	; 0x40
  4037ac:	601a      	str	r2, [r3, #0]
}
  4037ae:	bf00      	nop
  4037b0:	370c      	adds	r7, #12
  4037b2:	46bd      	mov	sp, r7
  4037b4:	bc80      	pop	{r7}
  4037b6:	4770      	bx	lr

004037b8 <usart_disable_tx>:
 * \brief Disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
  4037b8:	b480      	push	{r7}
  4037ba:	b083      	sub	sp, #12
  4037bc:	af00      	add	r7, sp, #0
  4037be:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXDIS;
  4037c0:	687b      	ldr	r3, [r7, #4]
  4037c2:	2280      	movs	r2, #128	; 0x80
  4037c4:	601a      	str	r2, [r3, #0]
}
  4037c6:	bf00      	nop
  4037c8:	370c      	adds	r7, #12
  4037ca:	46bd      	mov	sp, r7
  4037cc:	bc80      	pop	{r7}
  4037ce:	4770      	bx	lr

004037d0 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4037d0:	b480      	push	{r7}
  4037d2:	b083      	sub	sp, #12
  4037d4:	af00      	add	r7, sp, #0
  4037d6:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4037d8:	687b      	ldr	r3, [r7, #4]
  4037da:	2288      	movs	r2, #136	; 0x88
  4037dc:	601a      	str	r2, [r3, #0]
}
  4037de:	bf00      	nop
  4037e0:	370c      	adds	r7, #12
  4037e2:	46bd      	mov	sp, r7
  4037e4:	bc80      	pop	{r7}
  4037e6:	4770      	bx	lr

004037e8 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4037e8:	b480      	push	{r7}
  4037ea:	b083      	sub	sp, #12
  4037ec:	af00      	add	r7, sp, #0
  4037ee:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4037f0:	687b      	ldr	r3, [r7, #4]
  4037f2:	2210      	movs	r2, #16
  4037f4:	601a      	str	r2, [r3, #0]
}
  4037f6:	bf00      	nop
  4037f8:	370c      	adds	r7, #12
  4037fa:	46bd      	mov	sp, r7
  4037fc:	bc80      	pop	{r7}
  4037fe:	4770      	bx	lr

00403800 <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
  403800:	b480      	push	{r7}
  403802:	b083      	sub	sp, #12
  403804:	af00      	add	r7, sp, #0
  403806:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
  403808:	687b      	ldr	r3, [r7, #4]
  40380a:	2220      	movs	r2, #32
  40380c:	601a      	str	r2, [r3, #0]
}
  40380e:	bf00      	nop
  403810:	370c      	adds	r7, #12
  403812:	46bd      	mov	sp, r7
  403814:	bc80      	pop	{r7}
  403816:	4770      	bx	lr

00403818 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  403818:	b480      	push	{r7}
  40381a:	b083      	sub	sp, #12
  40381c:	af00      	add	r7, sp, #0
  40381e:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  403820:	687b      	ldr	r3, [r7, #4]
  403822:	2224      	movs	r2, #36	; 0x24
  403824:	601a      	str	r2, [r3, #0]
}
  403826:	bf00      	nop
  403828:	370c      	adds	r7, #12
  40382a:	46bd      	mov	sp, r7
  40382c:	bc80      	pop	{r7}
  40382e:	4770      	bx	lr

00403830 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  403830:	b480      	push	{r7}
  403832:	b083      	sub	sp, #12
  403834:	af00      	add	r7, sp, #0
  403836:	6078      	str	r0, [r7, #4]
  403838:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  40383a:	687b      	ldr	r3, [r7, #4]
  40383c:	683a      	ldr	r2, [r7, #0]
  40383e:	609a      	str	r2, [r3, #8]
}
  403840:	bf00      	nop
  403842:	370c      	adds	r7, #12
  403844:	46bd      	mov	sp, r7
  403846:	bc80      	pop	{r7}
  403848:	4770      	bx	lr
  40384a:	bf00      	nop

0040384c <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  40384c:	b480      	push	{r7}
  40384e:	b083      	sub	sp, #12
  403850:	af00      	add	r7, sp, #0
  403852:	6078      	str	r0, [r7, #4]
  403854:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  403856:	687b      	ldr	r3, [r7, #4]
  403858:	683a      	ldr	r2, [r7, #0]
  40385a:	60da      	str	r2, [r3, #12]
}
  40385c:	bf00      	nop
  40385e:	370c      	adds	r7, #12
  403860:	46bd      	mov	sp, r7
  403862:	bc80      	pop	{r7}
  403864:	4770      	bx	lr
  403866:	bf00      	nop

00403868 <usart_get_interrupt_mask>:
 * \param p_usart Pointer to a USART peripheral.
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
  403868:	b480      	push	{r7}
  40386a:	b083      	sub	sp, #12
  40386c:	af00      	add	r7, sp, #0
  40386e:	6078      	str	r0, [r7, #4]
	return p_usart->US_IMR;
  403870:	687b      	ldr	r3, [r7, #4]
  403872:	691b      	ldr	r3, [r3, #16]
}
  403874:	4618      	mov	r0, r3
  403876:	370c      	adds	r7, #12
  403878:	46bd      	mov	sp, r7
  40387a:	bc80      	pop	{r7}
  40387c:	4770      	bx	lr
  40387e:	bf00      	nop

00403880 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  403880:	b480      	push	{r7}
  403882:	b083      	sub	sp, #12
  403884:	af00      	add	r7, sp, #0
  403886:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  403888:	687b      	ldr	r3, [r7, #4]
  40388a:	695b      	ldr	r3, [r3, #20]
}
  40388c:	4618      	mov	r0, r3
  40388e:	370c      	adds	r7, #12
  403890:	46bd      	mov	sp, r7
  403892:	bc80      	pop	{r7}
  403894:	4770      	bx	lr
  403896:	bf00      	nop

00403898 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  403898:	b480      	push	{r7}
  40389a:	b083      	sub	sp, #12
  40389c:	af00      	add	r7, sp, #0
  40389e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  4038a0:	687b      	ldr	r3, [r7, #4]
  4038a2:	f44f 7280 	mov.w	r2, #256	; 0x100
  4038a6:	601a      	str	r2, [r3, #0]
}
  4038a8:	bf00      	nop
  4038aa:	370c      	adds	r7, #12
  4038ac:	46bd      	mov	sp, r7
  4038ae:	bc80      	pop	{r7}
  4038b0:	4770      	bx	lr
  4038b2:	bf00      	nop

004038b4 <usart_start_rx_timeout>:
 * Reset the status bit TIMEOUT in US_CSR.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_start_rx_timeout(Usart *p_usart)
{
  4038b4:	b480      	push	{r7}
  4038b6:	b083      	sub	sp, #12
  4038b8:	af00      	add	r7, sp, #0
  4038ba:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_STTTO;
  4038bc:	687b      	ldr	r3, [r7, #4]
  4038be:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4038c2:	601a      	str	r2, [r3, #0]
}
  4038c4:	bf00      	nop
  4038c6:	370c      	adds	r7, #12
  4038c8:	46bd      	mov	sp, r7
  4038ca:	bc80      	pop	{r7}
  4038cc:	4770      	bx	lr
  4038ce:	bf00      	nop

004038d0 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  4038d0:	b480      	push	{r7}
  4038d2:	b083      	sub	sp, #12
  4038d4:	af00      	add	r7, sp, #0
  4038d6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  4038d8:	687b      	ldr	r3, [r7, #4]
  4038da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  4038de:	601a      	str	r2, [r3, #0]
}
  4038e0:	bf00      	nop
  4038e2:	370c      	adds	r7, #12
  4038e4:	46bd      	mov	sp, r7
  4038e6:	bc80      	pop	{r7}
  4038e8:	4770      	bx	lr
  4038ea:	bf00      	nop

004038ec <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  4038ec:	b480      	push	{r7}
  4038ee:	b083      	sub	sp, #12
  4038f0:	af00      	add	r7, sp, #0
  4038f2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  4038f4:	687b      	ldr	r3, [r7, #4]
  4038f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4038fa:	601a      	str	r2, [r3, #0]
}
  4038fc:	bf00      	nop
  4038fe:	370c      	adds	r7, #12
  403900:	46bd      	mov	sp, r7
  403902:	bc80      	pop	{r7}
  403904:	4770      	bx	lr
  403906:	bf00      	nop

00403908 <usart_get_pdc_base>:
 * \param p_usart Pointer to a UART instance.
 *
 * \return USART PDC registers base for PDC driver to access.
 */
Pdc *usart_get_pdc_base(Usart *p_usart)
{
  403908:	b480      	push	{r7}
  40390a:	b085      	sub	sp, #20
  40390c:	af00      	add	r7, sp, #0
  40390e:	6078      	str	r0, [r7, #4]
	Pdc *p_pdc_base;

	p_pdc_base = (Pdc *)NULL;
  403910:	2300      	movs	r3, #0
  403912:	60fb      	str	r3, [r7, #12]
		p_pdc_base = PDC_USART;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
  403914:	687b      	ldr	r3, [r7, #4]
  403916:	4a0a      	ldr	r2, [pc, #40]	; (403940 <usart_get_pdc_base+0x38>)
  403918:	4293      	cmp	r3, r2
  40391a:	d103      	bne.n	403924 <usart_get_pdc_base+0x1c>
		p_pdc_base = PDC_USART0;
  40391c:	4b09      	ldr	r3, [pc, #36]	; (403944 <usart_get_pdc_base+0x3c>)
  40391e:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  403920:	68fb      	ldr	r3, [r7, #12]
  403922:	e008      	b.n	403936 <usart_get_pdc_base+0x2e>
	}
#endif
#ifdef PDC_USART1
	else if (p_usart == USART1) {
  403924:	687b      	ldr	r3, [r7, #4]
  403926:	4a08      	ldr	r2, [pc, #32]	; (403948 <usart_get_pdc_base+0x40>)
  403928:	4293      	cmp	r3, r2
  40392a:	d103      	bne.n	403934 <usart_get_pdc_base+0x2c>
		p_pdc_base = PDC_USART1;
  40392c:	4b07      	ldr	r3, [pc, #28]	; (40394c <usart_get_pdc_base+0x44>)
  40392e:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  403930:	68fb      	ldr	r3, [r7, #12]
  403932:	e000      	b.n	403936 <usart_get_pdc_base+0x2e>
		p_pdc_base = PDC_USART7;
		return p_pdc_base;
	}
#endif

	return p_pdc_base;
  403934:	68fb      	ldr	r3, [r7, #12]
}
  403936:	4618      	mov	r0, r3
  403938:	3714      	adds	r7, #20
  40393a:	46bd      	mov	sp, r7
  40393c:	bc80      	pop	{r7}
  40393e:	4770      	bx	lr
  403940:	40024000 	.word	0x40024000
  403944:	40024100 	.word	0x40024100
  403948:	40028000 	.word	0x40028000
  40394c:	40028100 	.word	0x40028100

00403950 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  403950:	b480      	push	{r7}
  403952:	b083      	sub	sp, #12
  403954:	af00      	add	r7, sp, #0
  403956:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  403958:	687b      	ldr	r3, [r7, #4]
  40395a:	4a04      	ldr	r2, [pc, #16]	; (40396c <usart_disable_writeprotect+0x1c>)
  40395c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  403960:	bf00      	nop
  403962:	370c      	adds	r7, #12
  403964:	46bd      	mov	sp, r7
  403966:	bc80      	pop	{r7}
  403968:	4770      	bx	lr
  40396a:	bf00      	nop
  40396c:	55534100 	.word	0x55534100

00403970 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  403970:	b480      	push	{r7}
  403972:	b083      	sub	sp, #12
  403974:	af00      	add	r7, sp, #0
  403976:	4603      	mov	r3, r0
  403978:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40397a:	4908      	ldr	r1, [pc, #32]	; (40399c <NVIC_EnableIRQ+0x2c>)
  40397c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403980:	095b      	lsrs	r3, r3, #5
  403982:	79fa      	ldrb	r2, [r7, #7]
  403984:	f002 021f 	and.w	r2, r2, #31
  403988:	2001      	movs	r0, #1
  40398a:	fa00 f202 	lsl.w	r2, r0, r2
  40398e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  403992:	bf00      	nop
  403994:	370c      	adds	r7, #12
  403996:	46bd      	mov	sp, r7
  403998:	bc80      	pop	{r7}
  40399a:	4770      	bx	lr
  40399c:	e000e100 	.word	0xe000e100

004039a0 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4039a0:	b580      	push	{r7, lr}
  4039a2:	b082      	sub	sp, #8
  4039a4:	af00      	add	r7, sp, #0
  4039a6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4039a8:	6878      	ldr	r0, [r7, #4]
  4039aa:	4b03      	ldr	r3, [pc, #12]	; (4039b8 <sysclk_enable_peripheral_clock+0x18>)
  4039ac:	4798      	blx	r3
}
  4039ae:	bf00      	nop
  4039b0:	3708      	adds	r7, #8
  4039b2:	46bd      	mov	sp, r7
  4039b4:	bd80      	pop	{r7, pc}
  4039b6:	bf00      	nop
  4039b8:	004049c9 	.word	0x004049c9

004039bc <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4039bc:	b580      	push	{r7, lr}
  4039be:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4039c0:	200b      	movs	r0, #11
  4039c2:	4b03      	ldr	r3, [pc, #12]	; (4039d0 <ioport_init+0x14>)
  4039c4:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4039c6:	200c      	movs	r0, #12
  4039c8:	4b01      	ldr	r3, [pc, #4]	; (4039d0 <ioport_init+0x14>)
  4039ca:	4798      	blx	r3
	arch_ioport_init();
}
  4039cc:	bf00      	nop
  4039ce:	bd80      	pop	{r7, pc}
  4039d0:	004039a1 	.word	0x004039a1

004039d4 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  4039d4:	b590      	push	{r4, r7, lr}
  4039d6:	b083      	sub	sp, #12
  4039d8:	af02      	add	r7, sp, #8
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */

	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4039da:	4b2d      	ldr	r3, [pc, #180]	; (403a90 <board_init+0xbc>)
  4039dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4039e0:	605a      	str	r2, [r3, #4]

	/* Init IO Port service to enable configuring pins */
	ioport_init();
  4039e2:	4b2c      	ldr	r3, [pc, #176]	; (403a94 <board_init+0xc0>)
  4039e4:	4798      	blx	r3

	/* Configure USART0 Pins (RS485, MODBUS) */
	gpio_configure_group(PINS_USART0_PIO, PINS_USART0, PINS_USART0_FLAGS);
  4039e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4039ea:	2160      	movs	r1, #96	; 0x60
  4039ec:	482a      	ldr	r0, [pc, #168]	; (403a98 <board_init+0xc4>)
  4039ee:	4b2b      	ldr	r3, [pc, #172]	; (403a9c <board_init+0xc8>)
  4039f0:	4798      	blx	r3

	/* Configure USART1 Pins (XBee) */
	gpio_configure_group(PINS_USART1_PIO, PINS_USART1, PINS_USART1_FLAGS);
  4039f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4039f6:	f04f 71b0 	mov.w	r1, #23068672	; 0x1600000
  4039fa:	4827      	ldr	r0, [pc, #156]	; (403a98 <board_init+0xc4>)
  4039fc:	4b27      	ldr	r3, [pc, #156]	; (403a9c <board_init+0xc8>)
  4039fe:	4798      	blx	r3

	/* Configure UART0 Pins (Console) */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  403a00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  403a04:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  403a08:	4823      	ldr	r0, [pc, #140]	; (403a98 <board_init+0xc4>)
  403a0a:	4b24      	ldr	r3, [pc, #144]	; (403a9c <board_init+0xc8>)
  403a0c:	4798      	blx	r3
	
	/* Configure TWI0 Pins */
	gpio_configure_group(PINS_TWI0_PIO, PINS_TWI0, PINS_TWI0_FLAGS);
  403a0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  403a12:	2118      	movs	r1, #24
  403a14:	4820      	ldr	r0, [pc, #128]	; (403a98 <board_init+0xc4>)
  403a16:	4b21      	ldr	r3, [pc, #132]	; (403a9c <board_init+0xc8>)
  403a18:	4798      	blx	r3

	/* Configure Motor Controller Pins */
	#ifndef MOTOR_CTRL_A4955
	#else
		gpio_configure_pin(PIN_MOTOR_IN1_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  403a1a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403a1e:	2020      	movs	r0, #32
  403a20:	4b1f      	ldr	r3, [pc, #124]	; (403aa0 <board_init+0xcc>)
  403a22:	4798      	blx	r3
		gpio_configure_pin(PIN_MOTOR_IN2_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  403a24:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403a28:	2021      	movs	r0, #33	; 0x21
  403a2a:	4b1d      	ldr	r3, [pc, #116]	; (403aa0 <board_init+0xcc>)
  403a2c:	4798      	blx	r3
		gpio_configure_pin(PIN_MOTOR_SLP_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  403a2e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403a32:	2022      	movs	r0, #34	; 0x22
  403a34:	4b1a      	ldr	r3, [pc, #104]	; (403aa0 <board_init+0xcc>)
  403a36:	4798      	blx	r3
		gpio_configure_pin(PIN_MOTOR_OCL_IDX, (PIO_INPUT | PIO_OPENDRAIN));
  403a38:	491a      	ldr	r1, [pc, #104]	; (403aa4 <board_init+0xd0>)
  403a3a:	2023      	movs	r0, #35	; 0x23
  403a3c:	4b18      	ldr	r3, [pc, #96]	; (403aa0 <board_init+0xcc>)
  403a3e:	4798      	blx	r3
	#endif

	/* Configure LED Pins */
	gpio_configure_pin(PIN_DEBUGLED_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  403a40:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403a44:	2010      	movs	r0, #16
  403a46:	4b16      	ldr	r3, [pc, #88]	; (403aa0 <board_init+0xcc>)
  403a48:	4798      	blx	r3

	/* Configure LDO EN Pin */
	gpio_configure_pin(PIN_LDOEN_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  403a4a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403a4e:	2001      	movs	r0, #1
  403a50:	4b13      	ldr	r3, [pc, #76]	; (403aa0 <board_init+0xcc>)
  403a52:	4798      	blx	r3
	
	/* Configure RTC 1 min Interrupt Pin */
	gpio_configure_pin(PIN_RTC_INT_IDX, PIO_INPUT);
  403a54:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403a58:	2000      	movs	r0, #0
  403a5a:	4b11      	ldr	r3, [pc, #68]	; (403aa0 <board_init+0xcc>)
  403a5c:	4798      	blx	r3

	/* Initialize PIOs interrupt handlers (see PIO definition in board.h). */
	pio_handler_set(PIN_RTC_INT_PIO, PIN_RTC_INT_PIO_ID, PIN_RTC_INT_MASK, (PIO_OPENDRAIN | PIO_IT_FALL_EDGE), RTCIntHandler);
  403a5e:	4b12      	ldr	r3, [pc, #72]	; (403aa8 <board_init+0xd4>)
  403a60:	9300      	str	r3, [sp, #0]
  403a62:	2354      	movs	r3, #84	; 0x54
  403a64:	2201      	movs	r2, #1
  403a66:	210b      	movs	r1, #11
  403a68:	480b      	ldr	r0, [pc, #44]	; (403a98 <board_init+0xc4>)
  403a6a:	4c10      	ldr	r4, [pc, #64]	; (403aac <board_init+0xd8>)
  403a6c:	47a0      	blx	r4

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type) PIN_RTC_INT_PIO_ID);
  403a6e:	200b      	movs	r0, #11
  403a70:	4b0f      	ldr	r3, [pc, #60]	; (403ab0 <board_init+0xdc>)
  403a72:	4798      	blx	r3

	/* Set RTC Int Priority */
	pio_handler_set_priority(PIN_RTC_INT_PIO, (IRQn_Type) PIN_RTC_INT_PIO_ID, configLIBRARY_LOWEST_INTERRUPT_PRIORITY);
  403a74:	220f      	movs	r2, #15
  403a76:	210b      	movs	r1, #11
  403a78:	4807      	ldr	r0, [pc, #28]	; (403a98 <board_init+0xc4>)
  403a7a:	4b0e      	ldr	r3, [pc, #56]	; (403ab4 <board_init+0xe0>)
  403a7c:	4798      	blx	r3
	
	/* Enable PIO line interrupts. */
	pio_enable_interrupt(PIN_RTC_INT_PIO, PIN_RTC_INT_MASK);
  403a7e:	2101      	movs	r1, #1
  403a80:	4805      	ldr	r0, [pc, #20]	; (403a98 <board_init+0xc4>)
  403a82:	4b0d      	ldr	r3, [pc, #52]	; (403ab8 <board_init+0xe4>)
  403a84:	4798      	blx	r3
}
  403a86:	bf00      	nop
  403a88:	3704      	adds	r7, #4
  403a8a:	46bd      	mov	sp, r7
  403a8c:	bd90      	pop	{r4, r7, pc}
  403a8e:	bf00      	nop
  403a90:	400e1450 	.word	0x400e1450
  403a94:	004039bd 	.word	0x004039bd
  403a98:	400e0e00 	.word	0x400e0e00
  403a9c:	00404319 	.word	0x00404319
  403aa0:	00404169 	.word	0x00404169
  403aa4:	28000004 	.word	0x28000004
  403aa8:	00400d01 	.word	0x00400d01
  403aac:	00404629 	.word	0x00404629
  403ab0:	00403971 	.word	0x00403971
  403ab4:	004046f9 	.word	0x004046f9
  403ab8:	004040a1 	.word	0x004040a1

00403abc <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  403abc:	b580      	push	{r7, lr}
  403abe:	b082      	sub	sp, #8
  403ac0:	af00      	add	r7, sp, #0
  403ac2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403ac4:	687b      	ldr	r3, [r7, #4]
  403ac6:	2b07      	cmp	r3, #7
  403ac8:	d831      	bhi.n	403b2e <osc_enable+0x72>
  403aca:	a201      	add	r2, pc, #4	; (adr r2, 403ad0 <osc_enable+0x14>)
  403acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403ad0:	00403b2d 	.word	0x00403b2d
  403ad4:	00403af1 	.word	0x00403af1
  403ad8:	00403af9 	.word	0x00403af9
  403adc:	00403b01 	.word	0x00403b01
  403ae0:	00403b09 	.word	0x00403b09
  403ae4:	00403b11 	.word	0x00403b11
  403ae8:	00403b19 	.word	0x00403b19
  403aec:	00403b23 	.word	0x00403b23
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  403af0:	2000      	movs	r0, #0
  403af2:	4b11      	ldr	r3, [pc, #68]	; (403b38 <osc_enable+0x7c>)
  403af4:	4798      	blx	r3
		break;
  403af6:	e01a      	b.n	403b2e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  403af8:	2001      	movs	r0, #1
  403afa:	4b0f      	ldr	r3, [pc, #60]	; (403b38 <osc_enable+0x7c>)
  403afc:	4798      	blx	r3
		break;
  403afe:	e016      	b.n	403b2e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  403b00:	2000      	movs	r0, #0
  403b02:	4b0e      	ldr	r3, [pc, #56]	; (403b3c <osc_enable+0x80>)
  403b04:	4798      	blx	r3
		break;
  403b06:	e012      	b.n	403b2e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  403b08:	2010      	movs	r0, #16
  403b0a:	4b0c      	ldr	r3, [pc, #48]	; (403b3c <osc_enable+0x80>)
  403b0c:	4798      	blx	r3
		break;
  403b0e:	e00e      	b.n	403b2e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  403b10:	2020      	movs	r0, #32
  403b12:	4b0a      	ldr	r3, [pc, #40]	; (403b3c <osc_enable+0x80>)
  403b14:	4798      	blx	r3
		break;
  403b16:	e00a      	b.n	403b2e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  403b18:	213e      	movs	r1, #62	; 0x3e
  403b1a:	2000      	movs	r0, #0
  403b1c:	4b08      	ldr	r3, [pc, #32]	; (403b40 <osc_enable+0x84>)
  403b1e:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  403b20:	e005      	b.n	403b2e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  403b22:	213e      	movs	r1, #62	; 0x3e
  403b24:	2001      	movs	r0, #1
  403b26:	4b06      	ldr	r3, [pc, #24]	; (403b40 <osc_enable+0x84>)
  403b28:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  403b2a:	e000      	b.n	403b2e <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  403b2c:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  403b2e:	bf00      	nop
  403b30:	3708      	adds	r7, #8
  403b32:	46bd      	mov	sp, r7
  403b34:	bd80      	pop	{r7, pc}
  403b36:	bf00      	nop
  403b38:	004047fd 	.word	0x004047fd
  403b3c:	00404869 	.word	0x00404869
  403b40:	004048d9 	.word	0x004048d9

00403b44 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  403b44:	b580      	push	{r7, lr}
  403b46:	b082      	sub	sp, #8
  403b48:	af00      	add	r7, sp, #0
  403b4a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403b4c:	687b      	ldr	r3, [r7, #4]
  403b4e:	2b07      	cmp	r3, #7
  403b50:	d826      	bhi.n	403ba0 <osc_is_ready+0x5c>
  403b52:	a201      	add	r2, pc, #4	; (adr r2, 403b58 <osc_is_ready+0x14>)
  403b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403b58:	00403b79 	.word	0x00403b79
  403b5c:	00403b7d 	.word	0x00403b7d
  403b60:	00403b7d 	.word	0x00403b7d
  403b64:	00403b8f 	.word	0x00403b8f
  403b68:	00403b8f 	.word	0x00403b8f
  403b6c:	00403b8f 	.word	0x00403b8f
  403b70:	00403b8f 	.word	0x00403b8f
  403b74:	00403b8f 	.word	0x00403b8f
	case OSC_SLCK_32K_RC:
		return 1;
  403b78:	2301      	movs	r3, #1
  403b7a:	e012      	b.n	403ba2 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  403b7c:	4b0b      	ldr	r3, [pc, #44]	; (403bac <osc_is_ready+0x68>)
  403b7e:	4798      	blx	r3
  403b80:	4603      	mov	r3, r0
  403b82:	2b00      	cmp	r3, #0
  403b84:	bf14      	ite	ne
  403b86:	2301      	movne	r3, #1
  403b88:	2300      	moveq	r3, #0
  403b8a:	b2db      	uxtb	r3, r3
  403b8c:	e009      	b.n	403ba2 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  403b8e:	4b08      	ldr	r3, [pc, #32]	; (403bb0 <osc_is_ready+0x6c>)
  403b90:	4798      	blx	r3
  403b92:	4603      	mov	r3, r0
  403b94:	2b00      	cmp	r3, #0
  403b96:	bf14      	ite	ne
  403b98:	2301      	movne	r3, #1
  403b9a:	2300      	moveq	r3, #0
  403b9c:	b2db      	uxtb	r3, r3
  403b9e:	e000      	b.n	403ba2 <osc_is_ready+0x5e>
	}

	return 0;
  403ba0:	2300      	movs	r3, #0
}
  403ba2:	4618      	mov	r0, r3
  403ba4:	3708      	adds	r7, #8
  403ba6:	46bd      	mov	sp, r7
  403ba8:	bd80      	pop	{r7, pc}
  403baa:	bf00      	nop
  403bac:	00404835 	.word	0x00404835
  403bb0:	00404951 	.word	0x00404951

00403bb4 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  403bb4:	b480      	push	{r7}
  403bb6:	b083      	sub	sp, #12
  403bb8:	af00      	add	r7, sp, #0
  403bba:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403bbc:	687b      	ldr	r3, [r7, #4]
  403bbe:	2b07      	cmp	r3, #7
  403bc0:	d825      	bhi.n	403c0e <osc_get_rate+0x5a>
  403bc2:	a201      	add	r2, pc, #4	; (adr r2, 403bc8 <osc_get_rate+0x14>)
  403bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403bc8:	00403be9 	.word	0x00403be9
  403bcc:	00403bef 	.word	0x00403bef
  403bd0:	00403bf5 	.word	0x00403bf5
  403bd4:	00403bfb 	.word	0x00403bfb
  403bd8:	00403bff 	.word	0x00403bff
  403bdc:	00403c03 	.word	0x00403c03
  403be0:	00403c07 	.word	0x00403c07
  403be4:	00403c0b 	.word	0x00403c0b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  403be8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  403bec:	e010      	b.n	403c10 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  403bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403bf2:	e00d      	b.n	403c10 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  403bf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403bf8:	e00a      	b.n	403c10 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  403bfa:	4b08      	ldr	r3, [pc, #32]	; (403c1c <osc_get_rate+0x68>)
  403bfc:	e008      	b.n	403c10 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  403bfe:	4b08      	ldr	r3, [pc, #32]	; (403c20 <osc_get_rate+0x6c>)
  403c00:	e006      	b.n	403c10 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  403c02:	4b08      	ldr	r3, [pc, #32]	; (403c24 <osc_get_rate+0x70>)
  403c04:	e004      	b.n	403c10 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  403c06:	4b07      	ldr	r3, [pc, #28]	; (403c24 <osc_get_rate+0x70>)
  403c08:	e002      	b.n	403c10 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  403c0a:	4b06      	ldr	r3, [pc, #24]	; (403c24 <osc_get_rate+0x70>)
  403c0c:	e000      	b.n	403c10 <osc_get_rate+0x5c>
	}

	return 0;
  403c0e:	2300      	movs	r3, #0
}
  403c10:	4618      	mov	r0, r3
  403c12:	370c      	adds	r7, #12
  403c14:	46bd      	mov	sp, r7
  403c16:	bc80      	pop	{r7}
  403c18:	4770      	bx	lr
  403c1a:	bf00      	nop
  403c1c:	003d0900 	.word	0x003d0900
  403c20:	007a1200 	.word	0x007a1200
  403c24:	00b71b00 	.word	0x00b71b00

00403c28 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  403c28:	b580      	push	{r7, lr}
  403c2a:	b082      	sub	sp, #8
  403c2c:	af00      	add	r7, sp, #0
  403c2e:	4603      	mov	r3, r0
  403c30:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  403c32:	bf00      	nop
  403c34:	79fb      	ldrb	r3, [r7, #7]
  403c36:	4618      	mov	r0, r3
  403c38:	4b05      	ldr	r3, [pc, #20]	; (403c50 <osc_wait_ready+0x28>)
  403c3a:	4798      	blx	r3
  403c3c:	4603      	mov	r3, r0
  403c3e:	f083 0301 	eor.w	r3, r3, #1
  403c42:	b2db      	uxtb	r3, r3
  403c44:	2b00      	cmp	r3, #0
  403c46:	d1f5      	bne.n	403c34 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  403c48:	bf00      	nop
  403c4a:	3708      	adds	r7, #8
  403c4c:	46bd      	mov	sp, r7
  403c4e:	bd80      	pop	{r7, pc}
  403c50:	00403b45 	.word	0x00403b45

00403c54 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  403c54:	b580      	push	{r7, lr}
  403c56:	b086      	sub	sp, #24
  403c58:	af00      	add	r7, sp, #0
  403c5a:	60f8      	str	r0, [r7, #12]
  403c5c:	607a      	str	r2, [r7, #4]
  403c5e:	603b      	str	r3, [r7, #0]
  403c60:	460b      	mov	r3, r1
  403c62:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  403c64:	7afb      	ldrb	r3, [r7, #11]
  403c66:	4618      	mov	r0, r3
  403c68:	4b0d      	ldr	r3, [pc, #52]	; (403ca0 <pll_config_init+0x4c>)
  403c6a:	4798      	blx	r3
  403c6c:	4602      	mov	r2, r0
  403c6e:	687b      	ldr	r3, [r7, #4]
  403c70:	fbb2 f3f3 	udiv	r3, r2, r3
  403c74:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  403c76:	697b      	ldr	r3, [r7, #20]
  403c78:	683a      	ldr	r2, [r7, #0]
  403c7a:	fb02 f303 	mul.w	r3, r2, r3
  403c7e:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  403c80:	683b      	ldr	r3, [r7, #0]
  403c82:	3b01      	subs	r3, #1
  403c84:	041a      	lsls	r2, r3, #16
  403c86:	4b07      	ldr	r3, [pc, #28]	; (403ca4 <pll_config_init+0x50>)
  403c88:	4013      	ands	r3, r2
  403c8a:	687a      	ldr	r2, [r7, #4]
  403c8c:	b2d2      	uxtb	r2, r2
  403c8e:	4313      	orrs	r3, r2
  403c90:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  403c94:	68fb      	ldr	r3, [r7, #12]
  403c96:	601a      	str	r2, [r3, #0]
}
  403c98:	bf00      	nop
  403c9a:	3718      	adds	r7, #24
  403c9c:	46bd      	mov	sp, r7
  403c9e:	bd80      	pop	{r7, pc}
  403ca0:	00403bb5 	.word	0x00403bb5
  403ca4:	07ff0000 	.word	0x07ff0000

00403ca8 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  403ca8:	b580      	push	{r7, lr}
  403caa:	b082      	sub	sp, #8
  403cac:	af00      	add	r7, sp, #0
  403cae:	6078      	str	r0, [r7, #4]
  403cb0:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  403cb2:	683b      	ldr	r3, [r7, #0]
  403cb4:	2b00      	cmp	r3, #0
  403cb6:	d108      	bne.n	403cca <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  403cb8:	4b09      	ldr	r3, [pc, #36]	; (403ce0 <pll_enable+0x38>)
  403cba:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  403cbc:	4a09      	ldr	r2, [pc, #36]	; (403ce4 <pll_enable+0x3c>)
  403cbe:	687b      	ldr	r3, [r7, #4]
  403cc0:	681b      	ldr	r3, [r3, #0]
  403cc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  403cc6:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  403cc8:	e005      	b.n	403cd6 <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  403cca:	4b07      	ldr	r3, [pc, #28]	; (403ce8 <pll_enable+0x40>)
  403ccc:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  403cce:	4a05      	ldr	r2, [pc, #20]	; (403ce4 <pll_enable+0x3c>)
  403cd0:	687b      	ldr	r3, [r7, #4]
  403cd2:	681b      	ldr	r3, [r3, #0]
  403cd4:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
}
  403cd6:	bf00      	nop
  403cd8:	3708      	adds	r7, #8
  403cda:	46bd      	mov	sp, r7
  403cdc:	bd80      	pop	{r7, pc}
  403cde:	bf00      	nop
  403ce0:	00404969 	.word	0x00404969
  403ce4:	400e0400 	.word	0x400e0400
  403ce8:	00404999 	.word	0x00404999

00403cec <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  403cec:	b580      	push	{r7, lr}
  403cee:	b082      	sub	sp, #8
  403cf0:	af00      	add	r7, sp, #0
  403cf2:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  403cf4:	687b      	ldr	r3, [r7, #4]
  403cf6:	2b00      	cmp	r3, #0
  403cf8:	d103      	bne.n	403d02 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  403cfa:	4b05      	ldr	r3, [pc, #20]	; (403d10 <pll_is_locked+0x24>)
  403cfc:	4798      	blx	r3
  403cfe:	4603      	mov	r3, r0
  403d00:	e002      	b.n	403d08 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  403d02:	4b04      	ldr	r3, [pc, #16]	; (403d14 <pll_is_locked+0x28>)
  403d04:	4798      	blx	r3
  403d06:	4603      	mov	r3, r0
	}
}
  403d08:	4618      	mov	r0, r3
  403d0a:	3708      	adds	r7, #8
  403d0c:	46bd      	mov	sp, r7
  403d0e:	bd80      	pop	{r7, pc}
  403d10:	00404981 	.word	0x00404981
  403d14:	004049b1 	.word	0x004049b1

00403d18 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  403d18:	b580      	push	{r7, lr}
  403d1a:	b082      	sub	sp, #8
  403d1c:	af00      	add	r7, sp, #0
  403d1e:	4603      	mov	r3, r0
  403d20:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  403d22:	79fb      	ldrb	r3, [r7, #7]
  403d24:	3b03      	subs	r3, #3
  403d26:	2b04      	cmp	r3, #4
  403d28:	d808      	bhi.n	403d3c <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  403d2a:	79fb      	ldrb	r3, [r7, #7]
  403d2c:	4618      	mov	r0, r3
  403d2e:	4b06      	ldr	r3, [pc, #24]	; (403d48 <pll_enable_source+0x30>)
  403d30:	4798      	blx	r3
		osc_wait_ready(e_src);
  403d32:	79fb      	ldrb	r3, [r7, #7]
  403d34:	4618      	mov	r0, r3
  403d36:	4b05      	ldr	r3, [pc, #20]	; (403d4c <pll_enable_source+0x34>)
  403d38:	4798      	blx	r3
		break;
  403d3a:	e000      	b.n	403d3e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  403d3c:	bf00      	nop
	}
}
  403d3e:	bf00      	nop
  403d40:	3708      	adds	r7, #8
  403d42:	46bd      	mov	sp, r7
  403d44:	bd80      	pop	{r7, pc}
  403d46:	bf00      	nop
  403d48:	00403abd 	.word	0x00403abd
  403d4c:	00403c29 	.word	0x00403c29

00403d50 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  403d50:	b580      	push	{r7, lr}
  403d52:	b082      	sub	sp, #8
  403d54:	af00      	add	r7, sp, #0
  403d56:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  403d58:	bf00      	nop
  403d5a:	6878      	ldr	r0, [r7, #4]
  403d5c:	4b04      	ldr	r3, [pc, #16]	; (403d70 <pll_wait_for_lock+0x20>)
  403d5e:	4798      	blx	r3
  403d60:	4603      	mov	r3, r0
  403d62:	2b00      	cmp	r3, #0
  403d64:	d0f9      	beq.n	403d5a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  403d66:	2300      	movs	r3, #0
}
  403d68:	4618      	mov	r0, r3
  403d6a:	3708      	adds	r7, #8
  403d6c:	46bd      	mov	sp, r7
  403d6e:	bd80      	pop	{r7, pc}
  403d70:	00403ced 	.word	0x00403ced

00403d74 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  403d74:	b580      	push	{r7, lr}
  403d76:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  403d78:	2006      	movs	r0, #6
  403d7a:	4b04      	ldr	r3, [pc, #16]	; (403d8c <sysclk_get_main_hz+0x18>)
  403d7c:	4798      	blx	r3
  403d7e:	4602      	mov	r2, r0
  403d80:	4613      	mov	r3, r2
  403d82:	009b      	lsls	r3, r3, #2
  403d84:	4413      	add	r3, r2
  403d86:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  403d88:	4618      	mov	r0, r3
  403d8a:	bd80      	pop	{r7, pc}
  403d8c:	00403bb5 	.word	0x00403bb5

00403d90 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  403d90:	b580      	push	{r7, lr}
  403d92:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  403d94:	4b02      	ldr	r3, [pc, #8]	; (403da0 <sysclk_get_cpu_hz+0x10>)
  403d96:	4798      	blx	r3
  403d98:	4603      	mov	r3, r0
  403d9a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  403d9c:	4618      	mov	r0, r3
  403d9e:	bd80      	pop	{r7, pc}
  403da0:	00403d75 	.word	0x00403d75

00403da4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  403da4:	b590      	push	{r4, r7, lr}
  403da6:	b083      	sub	sp, #12
  403da8:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  403daa:	4811      	ldr	r0, [pc, #68]	; (403df0 <sysclk_init+0x4c>)
  403dac:	4b11      	ldr	r3, [pc, #68]	; (403df4 <sysclk_init+0x50>)
  403dae:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  403db0:	2006      	movs	r0, #6
  403db2:	4b11      	ldr	r3, [pc, #68]	; (403df8 <sysclk_init+0x54>)
  403db4:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  403db6:	1d38      	adds	r0, r7, #4
  403db8:	2314      	movs	r3, #20
  403dba:	2201      	movs	r2, #1
  403dbc:	2106      	movs	r1, #6
  403dbe:	4c0f      	ldr	r4, [pc, #60]	; (403dfc <sysclk_init+0x58>)
  403dc0:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  403dc2:	1d3b      	adds	r3, r7, #4
  403dc4:	2100      	movs	r1, #0
  403dc6:	4618      	mov	r0, r3
  403dc8:	4b0d      	ldr	r3, [pc, #52]	; (403e00 <sysclk_init+0x5c>)
  403dca:	4798      	blx	r3
		pll_wait_for_lock(0);
  403dcc:	2000      	movs	r0, #0
  403dce:	4b0d      	ldr	r3, [pc, #52]	; (403e04 <sysclk_init+0x60>)
  403dd0:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  403dd2:	2010      	movs	r0, #16
  403dd4:	4b0c      	ldr	r3, [pc, #48]	; (403e08 <sysclk_init+0x64>)
  403dd6:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  403dd8:	4b0c      	ldr	r3, [pc, #48]	; (403e0c <sysclk_init+0x68>)
  403dda:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  403ddc:	4b0c      	ldr	r3, [pc, #48]	; (403e10 <sysclk_init+0x6c>)
  403dde:	4798      	blx	r3
  403de0:	4603      	mov	r3, r0
  403de2:	4618      	mov	r0, r3
  403de4:	4b03      	ldr	r3, [pc, #12]	; (403df4 <sysclk_init+0x50>)
  403de6:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  403de8:	bf00      	nop
  403dea:	370c      	adds	r7, #12
  403dec:	46bd      	mov	sp, r7
  403dee:	bd90      	pop	{r4, r7, pc}
  403df0:	07270e00 	.word	0x07270e00
  403df4:	00404cb5 	.word	0x00404cb5
  403df8:	00403d19 	.word	0x00403d19
  403dfc:	00403c55 	.word	0x00403c55
  403e00:	00403ca9 	.word	0x00403ca9
  403e04:	00403d51 	.word	0x00403d51
  403e08:	0040477d 	.word	0x0040477d
  403e0c:	00404b19 	.word	0x00404b19
  403e10:	00403d91 	.word	0x00403d91

00403e14 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  403e14:	b480      	push	{r7}
  403e16:	b085      	sub	sp, #20
  403e18:	af00      	add	r7, sp, #0
  403e1a:	60f8      	str	r0, [r7, #12]
  403e1c:	60b9      	str	r1, [r7, #8]
  403e1e:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  403e20:	687b      	ldr	r3, [r7, #4]
  403e22:	2b00      	cmp	r3, #0
  403e24:	d003      	beq.n	403e2e <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  403e26:	68fb      	ldr	r3, [r7, #12]
  403e28:	68ba      	ldr	r2, [r7, #8]
  403e2a:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  403e2c:	e002      	b.n	403e34 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  403e2e:	68fb      	ldr	r3, [r7, #12]
  403e30:	68ba      	ldr	r2, [r7, #8]
  403e32:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  403e34:	bf00      	nop
  403e36:	3714      	adds	r7, #20
  403e38:	46bd      	mov	sp, r7
  403e3a:	bc80      	pop	{r7}
  403e3c:	4770      	bx	lr
  403e3e:	bf00      	nop

00403e40 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  403e40:	b480      	push	{r7}
  403e42:	b087      	sub	sp, #28
  403e44:	af00      	add	r7, sp, #0
  403e46:	60f8      	str	r0, [r7, #12]
  403e48:	60b9      	str	r1, [r7, #8]
  403e4a:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  403e4c:	68fb      	ldr	r3, [r7, #12]
  403e4e:	687a      	ldr	r2, [r7, #4]
  403e50:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  403e52:	68bb      	ldr	r3, [r7, #8]
  403e54:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  403e58:	d04a      	beq.n	403ef0 <pio_set_peripheral+0xb0>
  403e5a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  403e5e:	d808      	bhi.n	403e72 <pio_set_peripheral+0x32>
  403e60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  403e64:	d016      	beq.n	403e94 <pio_set_peripheral+0x54>
  403e66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  403e6a:	d02c      	beq.n	403ec6 <pio_set_peripheral+0x86>
  403e6c:	2b00      	cmp	r3, #0
  403e6e:	d069      	beq.n	403f44 <pio_set_peripheral+0x104>
  403e70:	e064      	b.n	403f3c <pio_set_peripheral+0xfc>
  403e72:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  403e76:	d065      	beq.n	403f44 <pio_set_peripheral+0x104>
  403e78:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  403e7c:	d803      	bhi.n	403e86 <pio_set_peripheral+0x46>
  403e7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  403e82:	d04a      	beq.n	403f1a <pio_set_peripheral+0xda>
  403e84:	e05a      	b.n	403f3c <pio_set_peripheral+0xfc>
  403e86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  403e8a:	d05b      	beq.n	403f44 <pio_set_peripheral+0x104>
  403e8c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  403e90:	d058      	beq.n	403f44 <pio_set_peripheral+0x104>
  403e92:	e053      	b.n	403f3c <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403e94:	68fb      	ldr	r3, [r7, #12]
  403e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  403e98:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  403e9a:	68fb      	ldr	r3, [r7, #12]
  403e9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  403e9e:	687b      	ldr	r3, [r7, #4]
  403ea0:	43d9      	mvns	r1, r3
  403ea2:	697b      	ldr	r3, [r7, #20]
  403ea4:	400b      	ands	r3, r1
  403ea6:	401a      	ands	r2, r3
  403ea8:	68fb      	ldr	r3, [r7, #12]
  403eaa:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403eac:	68fb      	ldr	r3, [r7, #12]
  403eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  403eb0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  403eb2:	68fb      	ldr	r3, [r7, #12]
  403eb4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  403eb6:	687b      	ldr	r3, [r7, #4]
  403eb8:	43d9      	mvns	r1, r3
  403eba:	697b      	ldr	r3, [r7, #20]
  403ebc:	400b      	ands	r3, r1
  403ebe:	401a      	ands	r2, r3
  403ec0:	68fb      	ldr	r3, [r7, #12]
  403ec2:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  403ec4:	e03a      	b.n	403f3c <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403ec6:	68fb      	ldr	r3, [r7, #12]
  403ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  403eca:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  403ecc:	687a      	ldr	r2, [r7, #4]
  403ece:	697b      	ldr	r3, [r7, #20]
  403ed0:	431a      	orrs	r2, r3
  403ed2:	68fb      	ldr	r3, [r7, #12]
  403ed4:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403ed6:	68fb      	ldr	r3, [r7, #12]
  403ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  403eda:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  403edc:	68fb      	ldr	r3, [r7, #12]
  403ede:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  403ee0:	687b      	ldr	r3, [r7, #4]
  403ee2:	43d9      	mvns	r1, r3
  403ee4:	697b      	ldr	r3, [r7, #20]
  403ee6:	400b      	ands	r3, r1
  403ee8:	401a      	ands	r2, r3
  403eea:	68fb      	ldr	r3, [r7, #12]
  403eec:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  403eee:	e025      	b.n	403f3c <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403ef0:	68fb      	ldr	r3, [r7, #12]
  403ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  403ef4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  403ef6:	68fb      	ldr	r3, [r7, #12]
  403ef8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  403efa:	687b      	ldr	r3, [r7, #4]
  403efc:	43d9      	mvns	r1, r3
  403efe:	697b      	ldr	r3, [r7, #20]
  403f00:	400b      	ands	r3, r1
  403f02:	401a      	ands	r2, r3
  403f04:	68fb      	ldr	r3, [r7, #12]
  403f06:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403f08:	68fb      	ldr	r3, [r7, #12]
  403f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  403f0c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  403f0e:	687a      	ldr	r2, [r7, #4]
  403f10:	697b      	ldr	r3, [r7, #20]
  403f12:	431a      	orrs	r2, r3
  403f14:	68fb      	ldr	r3, [r7, #12]
  403f16:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  403f18:	e010      	b.n	403f3c <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403f1a:	68fb      	ldr	r3, [r7, #12]
  403f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  403f1e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  403f20:	687a      	ldr	r2, [r7, #4]
  403f22:	697b      	ldr	r3, [r7, #20]
  403f24:	431a      	orrs	r2, r3
  403f26:	68fb      	ldr	r3, [r7, #12]
  403f28:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403f2a:	68fb      	ldr	r3, [r7, #12]
  403f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  403f2e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  403f30:	687a      	ldr	r2, [r7, #4]
  403f32:	697b      	ldr	r3, [r7, #20]
  403f34:	431a      	orrs	r2, r3
  403f36:	68fb      	ldr	r3, [r7, #12]
  403f38:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  403f3a:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  403f3c:	68fb      	ldr	r3, [r7, #12]
  403f3e:	687a      	ldr	r2, [r7, #4]
  403f40:	605a      	str	r2, [r3, #4]
  403f42:	e000      	b.n	403f46 <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  403f44:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  403f46:	371c      	adds	r7, #28
  403f48:	46bd      	mov	sp, r7
  403f4a:	bc80      	pop	{r7}
  403f4c:	4770      	bx	lr
  403f4e:	bf00      	nop

00403f50 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  403f50:	b580      	push	{r7, lr}
  403f52:	b084      	sub	sp, #16
  403f54:	af00      	add	r7, sp, #0
  403f56:	60f8      	str	r0, [r7, #12]
  403f58:	60b9      	str	r1, [r7, #8]
  403f5a:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  403f5c:	68b9      	ldr	r1, [r7, #8]
  403f5e:	68f8      	ldr	r0, [r7, #12]
  403f60:	4b19      	ldr	r3, [pc, #100]	; (403fc8 <pio_set_input+0x78>)
  403f62:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  403f64:	687b      	ldr	r3, [r7, #4]
  403f66:	f003 0301 	and.w	r3, r3, #1
  403f6a:	461a      	mov	r2, r3
  403f6c:	68b9      	ldr	r1, [r7, #8]
  403f6e:	68f8      	ldr	r0, [r7, #12]
  403f70:	4b16      	ldr	r3, [pc, #88]	; (403fcc <pio_set_input+0x7c>)
  403f72:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  403f74:	687b      	ldr	r3, [r7, #4]
  403f76:	f003 030a 	and.w	r3, r3, #10
  403f7a:	2b00      	cmp	r3, #0
  403f7c:	d003      	beq.n	403f86 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  403f7e:	68fb      	ldr	r3, [r7, #12]
  403f80:	68ba      	ldr	r2, [r7, #8]
  403f82:	621a      	str	r2, [r3, #32]
  403f84:	e002      	b.n	403f8c <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  403f86:	68fb      	ldr	r3, [r7, #12]
  403f88:	68ba      	ldr	r2, [r7, #8]
  403f8a:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  403f8c:	687b      	ldr	r3, [r7, #4]
  403f8e:	f003 0302 	and.w	r3, r3, #2
  403f92:	2b00      	cmp	r3, #0
  403f94:	d004      	beq.n	403fa0 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  403f96:	68fb      	ldr	r3, [r7, #12]
  403f98:	68ba      	ldr	r2, [r7, #8]
  403f9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  403f9e:	e008      	b.n	403fb2 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  403fa0:	687b      	ldr	r3, [r7, #4]
  403fa2:	f003 0308 	and.w	r3, r3, #8
  403fa6:	2b00      	cmp	r3, #0
  403fa8:	d003      	beq.n	403fb2 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  403faa:	68fb      	ldr	r3, [r7, #12]
  403fac:	68ba      	ldr	r2, [r7, #8]
  403fae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  403fb2:	68fb      	ldr	r3, [r7, #12]
  403fb4:	68ba      	ldr	r2, [r7, #8]
  403fb6:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  403fb8:	68fb      	ldr	r3, [r7, #12]
  403fba:	68ba      	ldr	r2, [r7, #8]
  403fbc:	601a      	str	r2, [r3, #0]
}
  403fbe:	bf00      	nop
  403fc0:	3710      	adds	r7, #16
  403fc2:	46bd      	mov	sp, r7
  403fc4:	bd80      	pop	{r7, pc}
  403fc6:	bf00      	nop
  403fc8:	004040bd 	.word	0x004040bd
  403fcc:	00403e15 	.word	0x00403e15

00403fd0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  403fd0:	b580      	push	{r7, lr}
  403fd2:	b084      	sub	sp, #16
  403fd4:	af00      	add	r7, sp, #0
  403fd6:	60f8      	str	r0, [r7, #12]
  403fd8:	60b9      	str	r1, [r7, #8]
  403fda:	607a      	str	r2, [r7, #4]
  403fdc:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  403fde:	68b9      	ldr	r1, [r7, #8]
  403fe0:	68f8      	ldr	r0, [r7, #12]
  403fe2:	4b12      	ldr	r3, [pc, #72]	; (40402c <pio_set_output+0x5c>)
  403fe4:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  403fe6:	69ba      	ldr	r2, [r7, #24]
  403fe8:	68b9      	ldr	r1, [r7, #8]
  403fea:	68f8      	ldr	r0, [r7, #12]
  403fec:	4b10      	ldr	r3, [pc, #64]	; (404030 <pio_set_output+0x60>)
  403fee:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  403ff0:	683b      	ldr	r3, [r7, #0]
  403ff2:	2b00      	cmp	r3, #0
  403ff4:	d003      	beq.n	403ffe <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  403ff6:	68fb      	ldr	r3, [r7, #12]
  403ff8:	68ba      	ldr	r2, [r7, #8]
  403ffa:	651a      	str	r2, [r3, #80]	; 0x50
  403ffc:	e002      	b.n	404004 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  403ffe:	68fb      	ldr	r3, [r7, #12]
  404000:	68ba      	ldr	r2, [r7, #8]
  404002:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  404004:	687b      	ldr	r3, [r7, #4]
  404006:	2b00      	cmp	r3, #0
  404008:	d003      	beq.n	404012 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  40400a:	68fb      	ldr	r3, [r7, #12]
  40400c:	68ba      	ldr	r2, [r7, #8]
  40400e:	631a      	str	r2, [r3, #48]	; 0x30
  404010:	e002      	b.n	404018 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  404012:	68fb      	ldr	r3, [r7, #12]
  404014:	68ba      	ldr	r2, [r7, #8]
  404016:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  404018:	68fb      	ldr	r3, [r7, #12]
  40401a:	68ba      	ldr	r2, [r7, #8]
  40401c:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  40401e:	68fb      	ldr	r3, [r7, #12]
  404020:	68ba      	ldr	r2, [r7, #8]
  404022:	601a      	str	r2, [r3, #0]
}
  404024:	bf00      	nop
  404026:	3710      	adds	r7, #16
  404028:	46bd      	mov	sp, r7
  40402a:	bd80      	pop	{r7, pc}
  40402c:	004040bd 	.word	0x004040bd
  404030:	00403e15 	.word	0x00403e15

00404034 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  404034:	b480      	push	{r7}
  404036:	b085      	sub	sp, #20
  404038:	af00      	add	r7, sp, #0
  40403a:	60f8      	str	r0, [r7, #12]
  40403c:	60b9      	str	r1, [r7, #8]
  40403e:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  404040:	687b      	ldr	r3, [r7, #4]
  404042:	f003 0310 	and.w	r3, r3, #16
  404046:	2b00      	cmp	r3, #0
  404048:	d020      	beq.n	40408c <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  40404a:	68fb      	ldr	r3, [r7, #12]
  40404c:	68ba      	ldr	r2, [r7, #8]
  40404e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  404052:	687b      	ldr	r3, [r7, #4]
  404054:	f003 0320 	and.w	r3, r3, #32
  404058:	2b00      	cmp	r3, #0
  40405a:	d004      	beq.n	404066 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  40405c:	68fb      	ldr	r3, [r7, #12]
  40405e:	68ba      	ldr	r2, [r7, #8]
  404060:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  404064:	e003      	b.n	40406e <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  404066:	68fb      	ldr	r3, [r7, #12]
  404068:	68ba      	ldr	r2, [r7, #8]
  40406a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  40406e:	687b      	ldr	r3, [r7, #4]
  404070:	f003 0340 	and.w	r3, r3, #64	; 0x40
  404074:	2b00      	cmp	r3, #0
  404076:	d004      	beq.n	404082 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  404078:	68fb      	ldr	r3, [r7, #12]
  40407a:	68ba      	ldr	r2, [r7, #8]
  40407c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  404080:	e008      	b.n	404094 <pio_configure_interrupt+0x60>
		if (ul_attr & PIO_IT_EDGE) {
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  404082:	68fb      	ldr	r3, [r7, #12]
  404084:	68ba      	ldr	r2, [r7, #8]
  404086:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  40408a:	e003      	b.n	404094 <pio_configure_interrupt+0x60>
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  40408c:	68fb      	ldr	r3, [r7, #12]
  40408e:	68ba      	ldr	r2, [r7, #8]
  404090:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	}
}
  404094:	bf00      	nop
  404096:	3714      	adds	r7, #20
  404098:	46bd      	mov	sp, r7
  40409a:	bc80      	pop	{r7}
  40409c:	4770      	bx	lr
  40409e:	bf00      	nop

004040a0 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4040a0:	b480      	push	{r7}
  4040a2:	b083      	sub	sp, #12
  4040a4:	af00      	add	r7, sp, #0
  4040a6:	6078      	str	r0, [r7, #4]
  4040a8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  4040aa:	687b      	ldr	r3, [r7, #4]
  4040ac:	683a      	ldr	r2, [r7, #0]
  4040ae:	641a      	str	r2, [r3, #64]	; 0x40
}
  4040b0:	bf00      	nop
  4040b2:	370c      	adds	r7, #12
  4040b4:	46bd      	mov	sp, r7
  4040b6:	bc80      	pop	{r7}
  4040b8:	4770      	bx	lr
  4040ba:	bf00      	nop

004040bc <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4040bc:	b480      	push	{r7}
  4040be:	b083      	sub	sp, #12
  4040c0:	af00      	add	r7, sp, #0
  4040c2:	6078      	str	r0, [r7, #4]
  4040c4:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4040c6:	687b      	ldr	r3, [r7, #4]
  4040c8:	683a      	ldr	r2, [r7, #0]
  4040ca:	645a      	str	r2, [r3, #68]	; 0x44
}
  4040cc:	bf00      	nop
  4040ce:	370c      	adds	r7, #12
  4040d0:	46bd      	mov	sp, r7
  4040d2:	bc80      	pop	{r7}
  4040d4:	4770      	bx	lr
  4040d6:	bf00      	nop

004040d8 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4040d8:	b480      	push	{r7}
  4040da:	b083      	sub	sp, #12
  4040dc:	af00      	add	r7, sp, #0
  4040de:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4040e0:	687b      	ldr	r3, [r7, #4]
  4040e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4040e4:	4618      	mov	r0, r3
  4040e6:	370c      	adds	r7, #12
  4040e8:	46bd      	mov	sp, r7
  4040ea:	bc80      	pop	{r7}
  4040ec:	4770      	bx	lr
  4040ee:	bf00      	nop

004040f0 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4040f0:	b480      	push	{r7}
  4040f2:	b083      	sub	sp, #12
  4040f4:	af00      	add	r7, sp, #0
  4040f6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4040f8:	687b      	ldr	r3, [r7, #4]
  4040fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4040fc:	4618      	mov	r0, r3
  4040fe:	370c      	adds	r7, #12
  404100:	46bd      	mov	sp, r7
  404102:	bc80      	pop	{r7}
  404104:	4770      	bx	lr
  404106:	bf00      	nop

00404108 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
  404108:	b580      	push	{r7, lr}
  40410a:	b084      	sub	sp, #16
  40410c:	af00      	add	r7, sp, #0
  40410e:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  404110:	6878      	ldr	r0, [r7, #4]
  404112:	4b08      	ldr	r3, [pc, #32]	; (404134 <pio_set_pin_high+0x2c>)
  404114:	4798      	blx	r3
  404116:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  404118:	687b      	ldr	r3, [r7, #4]
  40411a:	f003 031f 	and.w	r3, r3, #31
  40411e:	2201      	movs	r2, #1
  404120:	fa02 f303 	lsl.w	r3, r2, r3
  404124:	461a      	mov	r2, r3
  404126:	68fb      	ldr	r3, [r7, #12]
  404128:	631a      	str	r2, [r3, #48]	; 0x30
}
  40412a:	bf00      	nop
  40412c:	3710      	adds	r7, #16
  40412e:	46bd      	mov	sp, r7
  404130:	bd80      	pop	{r7, pc}
  404132:	bf00      	nop
  404134:	00404445 	.word	0x00404445

00404138 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
  404138:	b580      	push	{r7, lr}
  40413a:	b084      	sub	sp, #16
  40413c:	af00      	add	r7, sp, #0
  40413e:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  404140:	6878      	ldr	r0, [r7, #4]
  404142:	4b08      	ldr	r3, [pc, #32]	; (404164 <pio_set_pin_low+0x2c>)
  404144:	4798      	blx	r3
  404146:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  404148:	687b      	ldr	r3, [r7, #4]
  40414a:	f003 031f 	and.w	r3, r3, #31
  40414e:	2201      	movs	r2, #1
  404150:	fa02 f303 	lsl.w	r3, r2, r3
  404154:	461a      	mov	r2, r3
  404156:	68fb      	ldr	r3, [r7, #12]
  404158:	635a      	str	r2, [r3, #52]	; 0x34
}
  40415a:	bf00      	nop
  40415c:	3710      	adds	r7, #16
  40415e:	46bd      	mov	sp, r7
  404160:	bd80      	pop	{r7, pc}
  404162:	bf00      	nop
  404164:	00404445 	.word	0x00404445

00404168 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  404168:	b590      	push	{r4, r7, lr}
  40416a:	b087      	sub	sp, #28
  40416c:	af02      	add	r7, sp, #8
  40416e:	6078      	str	r0, [r7, #4]
  404170:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  404172:	6878      	ldr	r0, [r7, #4]
  404174:	4b63      	ldr	r3, [pc, #396]	; (404304 <pio_configure_pin+0x19c>)
  404176:	4798      	blx	r3
  404178:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40417a:	683b      	ldr	r3, [r7, #0]
  40417c:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  404180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  404184:	d067      	beq.n	404256 <pio_configure_pin+0xee>
  404186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40418a:	d809      	bhi.n	4041a0 <pio_configure_pin+0x38>
  40418c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  404190:	d02b      	beq.n	4041ea <pio_configure_pin+0x82>
  404192:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  404196:	d043      	beq.n	404220 <pio_configure_pin+0xb8>
  404198:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40419c:	d00a      	beq.n	4041b4 <pio_configure_pin+0x4c>
  40419e:	e0a9      	b.n	4042f4 <pio_configure_pin+0x18c>
  4041a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4041a4:	d07e      	beq.n	4042a4 <pio_configure_pin+0x13c>
  4041a6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4041aa:	d07b      	beq.n	4042a4 <pio_configure_pin+0x13c>
  4041ac:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4041b0:	d06c      	beq.n	40428c <pio_configure_pin+0x124>
  4041b2:	e09f      	b.n	4042f4 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4041b4:	687b      	ldr	r3, [r7, #4]
  4041b6:	f003 031f 	and.w	r3, r3, #31
  4041ba:	2201      	movs	r2, #1
  4041bc:	fa02 f303 	lsl.w	r3, r2, r3
  4041c0:	461a      	mov	r2, r3
  4041c2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4041c6:	68f8      	ldr	r0, [r7, #12]
  4041c8:	4b4f      	ldr	r3, [pc, #316]	; (404308 <pio_configure_pin+0x1a0>)
  4041ca:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4041cc:	687b      	ldr	r3, [r7, #4]
  4041ce:	f003 031f 	and.w	r3, r3, #31
  4041d2:	2201      	movs	r2, #1
  4041d4:	fa02 f303 	lsl.w	r3, r2, r3
  4041d8:	4619      	mov	r1, r3
  4041da:	683b      	ldr	r3, [r7, #0]
  4041dc:	f003 0301 	and.w	r3, r3, #1
  4041e0:	461a      	mov	r2, r3
  4041e2:	68f8      	ldr	r0, [r7, #12]
  4041e4:	4b49      	ldr	r3, [pc, #292]	; (40430c <pio_configure_pin+0x1a4>)
  4041e6:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4041e8:	e086      	b.n	4042f8 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4041ea:	687b      	ldr	r3, [r7, #4]
  4041ec:	f003 031f 	and.w	r3, r3, #31
  4041f0:	2201      	movs	r2, #1
  4041f2:	fa02 f303 	lsl.w	r3, r2, r3
  4041f6:	461a      	mov	r2, r3
  4041f8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4041fc:	68f8      	ldr	r0, [r7, #12]
  4041fe:	4b42      	ldr	r3, [pc, #264]	; (404308 <pio_configure_pin+0x1a0>)
  404200:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  404202:	687b      	ldr	r3, [r7, #4]
  404204:	f003 031f 	and.w	r3, r3, #31
  404208:	2201      	movs	r2, #1
  40420a:	fa02 f303 	lsl.w	r3, r2, r3
  40420e:	4619      	mov	r1, r3
  404210:	683b      	ldr	r3, [r7, #0]
  404212:	f003 0301 	and.w	r3, r3, #1
  404216:	461a      	mov	r2, r3
  404218:	68f8      	ldr	r0, [r7, #12]
  40421a:	4b3c      	ldr	r3, [pc, #240]	; (40430c <pio_configure_pin+0x1a4>)
  40421c:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40421e:	e06b      	b.n	4042f8 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  404220:	687b      	ldr	r3, [r7, #4]
  404222:	f003 031f 	and.w	r3, r3, #31
  404226:	2201      	movs	r2, #1
  404228:	fa02 f303 	lsl.w	r3, r2, r3
  40422c:	461a      	mov	r2, r3
  40422e:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404232:	68f8      	ldr	r0, [r7, #12]
  404234:	4b34      	ldr	r3, [pc, #208]	; (404308 <pio_configure_pin+0x1a0>)
  404236:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  404238:	687b      	ldr	r3, [r7, #4]
  40423a:	f003 031f 	and.w	r3, r3, #31
  40423e:	2201      	movs	r2, #1
  404240:	fa02 f303 	lsl.w	r3, r2, r3
  404244:	4619      	mov	r1, r3
  404246:	683b      	ldr	r3, [r7, #0]
  404248:	f003 0301 	and.w	r3, r3, #1
  40424c:	461a      	mov	r2, r3
  40424e:	68f8      	ldr	r0, [r7, #12]
  404250:	4b2e      	ldr	r3, [pc, #184]	; (40430c <pio_configure_pin+0x1a4>)
  404252:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  404254:	e050      	b.n	4042f8 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  404256:	687b      	ldr	r3, [r7, #4]
  404258:	f003 031f 	and.w	r3, r3, #31
  40425c:	2201      	movs	r2, #1
  40425e:	fa02 f303 	lsl.w	r3, r2, r3
  404262:	461a      	mov	r2, r3
  404264:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  404268:	68f8      	ldr	r0, [r7, #12]
  40426a:	4b27      	ldr	r3, [pc, #156]	; (404308 <pio_configure_pin+0x1a0>)
  40426c:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40426e:	687b      	ldr	r3, [r7, #4]
  404270:	f003 031f 	and.w	r3, r3, #31
  404274:	2201      	movs	r2, #1
  404276:	fa02 f303 	lsl.w	r3, r2, r3
  40427a:	4619      	mov	r1, r3
  40427c:	683b      	ldr	r3, [r7, #0]
  40427e:	f003 0301 	and.w	r3, r3, #1
  404282:	461a      	mov	r2, r3
  404284:	68f8      	ldr	r0, [r7, #12]
  404286:	4b21      	ldr	r3, [pc, #132]	; (40430c <pio_configure_pin+0x1a4>)
  404288:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40428a:	e035      	b.n	4042f8 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40428c:	687b      	ldr	r3, [r7, #4]
  40428e:	f003 031f 	and.w	r3, r3, #31
  404292:	2201      	movs	r2, #1
  404294:	fa02 f303 	lsl.w	r3, r2, r3
  404298:	683a      	ldr	r2, [r7, #0]
  40429a:	4619      	mov	r1, r3
  40429c:	68f8      	ldr	r0, [r7, #12]
  40429e:	4b1c      	ldr	r3, [pc, #112]	; (404310 <pio_configure_pin+0x1a8>)
  4042a0:	4798      	blx	r3
		break;
  4042a2:	e029      	b.n	4042f8 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4042a4:	687b      	ldr	r3, [r7, #4]
  4042a6:	f003 031f 	and.w	r3, r3, #31
  4042aa:	2201      	movs	r2, #1
  4042ac:	fa02 f303 	lsl.w	r3, r2, r3
  4042b0:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4042b2:	683b      	ldr	r3, [r7, #0]
  4042b4:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4042b8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4042bc:	bf0c      	ite	eq
  4042be:	2301      	moveq	r3, #1
  4042c0:	2300      	movne	r3, #0
  4042c2:	b2db      	uxtb	r3, r3
  4042c4:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  4042c6:	683b      	ldr	r3, [r7, #0]
  4042c8:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4042cc:	2b00      	cmp	r3, #0
  4042ce:	bf14      	ite	ne
  4042d0:	2301      	movne	r3, #1
  4042d2:	2300      	moveq	r3, #0
  4042d4:	b2db      	uxtb	r3, r3
  4042d6:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  4042d8:	683b      	ldr	r3, [r7, #0]
  4042da:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4042de:	2b00      	cmp	r3, #0
  4042e0:	bf14      	ite	ne
  4042e2:	2301      	movne	r3, #1
  4042e4:	2300      	moveq	r3, #0
  4042e6:	b2db      	uxtb	r3, r3
  4042e8:	9300      	str	r3, [sp, #0]
  4042ea:	4603      	mov	r3, r0
  4042ec:	68f8      	ldr	r0, [r7, #12]
  4042ee:	4c09      	ldr	r4, [pc, #36]	; (404314 <pio_configure_pin+0x1ac>)
  4042f0:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4042f2:	e001      	b.n	4042f8 <pio_configure_pin+0x190>

	default:
		return 0;
  4042f4:	2300      	movs	r3, #0
  4042f6:	e000      	b.n	4042fa <pio_configure_pin+0x192>
	}

	return 1;
  4042f8:	2301      	movs	r3, #1
}
  4042fa:	4618      	mov	r0, r3
  4042fc:	3714      	adds	r7, #20
  4042fe:	46bd      	mov	sp, r7
  404300:	bd90      	pop	{r4, r7, pc}
  404302:	bf00      	nop
  404304:	00404445 	.word	0x00404445
  404308:	00403e41 	.word	0x00403e41
  40430c:	00403e15 	.word	0x00403e15
  404310:	00403f51 	.word	0x00403f51
  404314:	00403fd1 	.word	0x00403fd1

00404318 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  404318:	b590      	push	{r4, r7, lr}
  40431a:	b087      	sub	sp, #28
  40431c:	af02      	add	r7, sp, #8
  40431e:	60f8      	str	r0, [r7, #12]
  404320:	60b9      	str	r1, [r7, #8]
  404322:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  404324:	687b      	ldr	r3, [r7, #4]
  404326:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  40432a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40432e:	d043      	beq.n	4043b8 <pio_configure_pin_group+0xa0>
  404330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  404334:	d809      	bhi.n	40434a <pio_configure_pin_group+0x32>
  404336:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40433a:	d01f      	beq.n	40437c <pio_configure_pin_group+0x64>
  40433c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  404340:	d02b      	beq.n	40439a <pio_configure_pin_group+0x82>
  404342:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  404346:	d00a      	beq.n	40435e <pio_configure_pin_group+0x46>
  404348:	e06d      	b.n	404426 <pio_configure_pin_group+0x10e>
  40434a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40434e:	d048      	beq.n	4043e2 <pio_configure_pin_group+0xca>
  404350:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  404354:	d045      	beq.n	4043e2 <pio_configure_pin_group+0xca>
  404356:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40435a:	d03c      	beq.n	4043d6 <pio_configure_pin_group+0xbe>
  40435c:	e063      	b.n	404426 <pio_configure_pin_group+0x10e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40435e:	68ba      	ldr	r2, [r7, #8]
  404360:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404364:	68f8      	ldr	r0, [r7, #12]
  404366:	4b33      	ldr	r3, [pc, #204]	; (404434 <pio_configure_pin_group+0x11c>)
  404368:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  40436a:	687b      	ldr	r3, [r7, #4]
  40436c:	f003 0301 	and.w	r3, r3, #1
  404370:	461a      	mov	r2, r3
  404372:	68b9      	ldr	r1, [r7, #8]
  404374:	68f8      	ldr	r0, [r7, #12]
  404376:	4b30      	ldr	r3, [pc, #192]	; (404438 <pio_configure_pin_group+0x120>)
  404378:	4798      	blx	r3
		break;
  40437a:	e056      	b.n	40442a <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  40437c:	68ba      	ldr	r2, [r7, #8]
  40437e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  404382:	68f8      	ldr	r0, [r7, #12]
  404384:	4b2b      	ldr	r3, [pc, #172]	; (404434 <pio_configure_pin_group+0x11c>)
  404386:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  404388:	687b      	ldr	r3, [r7, #4]
  40438a:	f003 0301 	and.w	r3, r3, #1
  40438e:	461a      	mov	r2, r3
  404390:	68b9      	ldr	r1, [r7, #8]
  404392:	68f8      	ldr	r0, [r7, #12]
  404394:	4b28      	ldr	r3, [pc, #160]	; (404438 <pio_configure_pin_group+0x120>)
  404396:	4798      	blx	r3
		break;
  404398:	e047      	b.n	40442a <pio_configure_pin_group+0x112>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  40439a:	68ba      	ldr	r2, [r7, #8]
  40439c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4043a0:	68f8      	ldr	r0, [r7, #12]
  4043a2:	4b24      	ldr	r3, [pc, #144]	; (404434 <pio_configure_pin_group+0x11c>)
  4043a4:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  4043a6:	687b      	ldr	r3, [r7, #4]
  4043a8:	f003 0301 	and.w	r3, r3, #1
  4043ac:	461a      	mov	r2, r3
  4043ae:	68b9      	ldr	r1, [r7, #8]
  4043b0:	68f8      	ldr	r0, [r7, #12]
  4043b2:	4b21      	ldr	r3, [pc, #132]	; (404438 <pio_configure_pin_group+0x120>)
  4043b4:	4798      	blx	r3
		break;
  4043b6:	e038      	b.n	40442a <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  4043b8:	68ba      	ldr	r2, [r7, #8]
  4043ba:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4043be:	68f8      	ldr	r0, [r7, #12]
  4043c0:	4b1c      	ldr	r3, [pc, #112]	; (404434 <pio_configure_pin_group+0x11c>)
  4043c2:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  4043c4:	687b      	ldr	r3, [r7, #4]
  4043c6:	f003 0301 	and.w	r3, r3, #1
  4043ca:	461a      	mov	r2, r3
  4043cc:	68b9      	ldr	r1, [r7, #8]
  4043ce:	68f8      	ldr	r0, [r7, #12]
  4043d0:	4b19      	ldr	r3, [pc, #100]	; (404438 <pio_configure_pin_group+0x120>)
  4043d2:	4798      	blx	r3
		break;
  4043d4:	e029      	b.n	40442a <pio_configure_pin_group+0x112>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  4043d6:	687a      	ldr	r2, [r7, #4]
  4043d8:	68b9      	ldr	r1, [r7, #8]
  4043da:	68f8      	ldr	r0, [r7, #12]
  4043dc:	4b17      	ldr	r3, [pc, #92]	; (40443c <pio_configure_pin_group+0x124>)
  4043de:	4798      	blx	r3
		break;
  4043e0:	e023      	b.n	40442a <pio_configure_pin_group+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4043e2:	687b      	ldr	r3, [r7, #4]
  4043e4:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  4043e8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4043ec:	bf0c      	ite	eq
  4043ee:	2301      	moveq	r3, #1
  4043f0:	2300      	movne	r3, #0
  4043f2:	b2db      	uxtb	r3, r3
  4043f4:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  4043f6:	687b      	ldr	r3, [r7, #4]
  4043f8:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  4043fc:	2b00      	cmp	r3, #0
  4043fe:	bf14      	ite	ne
  404400:	2301      	movne	r3, #1
  404402:	2300      	moveq	r3, #0
  404404:	b2db      	uxtb	r3, r3
  404406:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  404408:	687b      	ldr	r3, [r7, #4]
  40440a:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  40440e:	2b00      	cmp	r3, #0
  404410:	bf14      	ite	ne
  404412:	2301      	movne	r3, #1
  404414:	2300      	moveq	r3, #0
  404416:	b2db      	uxtb	r3, r3
  404418:	9300      	str	r3, [sp, #0]
  40441a:	460b      	mov	r3, r1
  40441c:	68b9      	ldr	r1, [r7, #8]
  40441e:	68f8      	ldr	r0, [r7, #12]
  404420:	4c07      	ldr	r4, [pc, #28]	; (404440 <pio_configure_pin_group+0x128>)
  404422:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  404424:	e001      	b.n	40442a <pio_configure_pin_group+0x112>

	default:
		return 0;
  404426:	2300      	movs	r3, #0
  404428:	e000      	b.n	40442c <pio_configure_pin_group+0x114>
	}

	return 1;
  40442a:	2301      	movs	r3, #1
}
  40442c:	4618      	mov	r0, r3
  40442e:	3714      	adds	r7, #20
  404430:	46bd      	mov	sp, r7
  404432:	bd90      	pop	{r4, r7, pc}
  404434:	00403e41 	.word	0x00403e41
  404438:	00403e15 	.word	0x00403e15
  40443c:	00403f51 	.word	0x00403f51
  404440:	00403fd1 	.word	0x00403fd1

00404444 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  404444:	b480      	push	{r7}
  404446:	b085      	sub	sp, #20
  404448:	af00      	add	r7, sp, #0
  40444a:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40444c:	687b      	ldr	r3, [r7, #4]
  40444e:	095b      	lsrs	r3, r3, #5
  404450:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  404454:	f203 7307 	addw	r3, r3, #1799	; 0x707
  404458:	025b      	lsls	r3, r3, #9
  40445a:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  40445c:	68fb      	ldr	r3, [r7, #12]
}
  40445e:	4618      	mov	r0, r3
  404460:	3714      	adds	r7, #20
  404462:	46bd      	mov	sp, r7
  404464:	bc80      	pop	{r7}
  404466:	4770      	bx	lr

00404468 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  404468:	b480      	push	{r7}
  40446a:	b083      	sub	sp, #12
  40446c:	af00      	add	r7, sp, #0
  40446e:	4603      	mov	r3, r0
  404470:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  404472:	4908      	ldr	r1, [pc, #32]	; (404494 <NVIC_EnableIRQ+0x2c>)
  404474:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404478:	095b      	lsrs	r3, r3, #5
  40447a:	79fa      	ldrb	r2, [r7, #7]
  40447c:	f002 021f 	and.w	r2, r2, #31
  404480:	2001      	movs	r0, #1
  404482:	fa00 f202 	lsl.w	r2, r0, r2
  404486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40448a:	bf00      	nop
  40448c:	370c      	adds	r7, #12
  40448e:	46bd      	mov	sp, r7
  404490:	bc80      	pop	{r7}
  404492:	4770      	bx	lr
  404494:	e000e100 	.word	0xe000e100

00404498 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  404498:	b480      	push	{r7}
  40449a:	b083      	sub	sp, #12
  40449c:	af00      	add	r7, sp, #0
  40449e:	4603      	mov	r3, r0
  4044a0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4044a2:	4909      	ldr	r1, [pc, #36]	; (4044c8 <NVIC_DisableIRQ+0x30>)
  4044a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4044a8:	095b      	lsrs	r3, r3, #5
  4044aa:	79fa      	ldrb	r2, [r7, #7]
  4044ac:	f002 021f 	and.w	r2, r2, #31
  4044b0:	2001      	movs	r0, #1
  4044b2:	fa00 f202 	lsl.w	r2, r0, r2
  4044b6:	3320      	adds	r3, #32
  4044b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4044bc:	bf00      	nop
  4044be:	370c      	adds	r7, #12
  4044c0:	46bd      	mov	sp, r7
  4044c2:	bc80      	pop	{r7}
  4044c4:	4770      	bx	lr
  4044c6:	bf00      	nop
  4044c8:	e000e100 	.word	0xe000e100

004044cc <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  4044cc:	b480      	push	{r7}
  4044ce:	b083      	sub	sp, #12
  4044d0:	af00      	add	r7, sp, #0
  4044d2:	4603      	mov	r3, r0
  4044d4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4044d6:	4909      	ldr	r1, [pc, #36]	; (4044fc <NVIC_ClearPendingIRQ+0x30>)
  4044d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4044dc:	095b      	lsrs	r3, r3, #5
  4044de:	79fa      	ldrb	r2, [r7, #7]
  4044e0:	f002 021f 	and.w	r2, r2, #31
  4044e4:	2001      	movs	r0, #1
  4044e6:	fa00 f202 	lsl.w	r2, r0, r2
  4044ea:	3360      	adds	r3, #96	; 0x60
  4044ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4044f0:	bf00      	nop
  4044f2:	370c      	adds	r7, #12
  4044f4:	46bd      	mov	sp, r7
  4044f6:	bc80      	pop	{r7}
  4044f8:	4770      	bx	lr
  4044fa:	bf00      	nop
  4044fc:	e000e100 	.word	0xe000e100

00404500 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  404500:	b480      	push	{r7}
  404502:	b083      	sub	sp, #12
  404504:	af00      	add	r7, sp, #0
  404506:	4603      	mov	r3, r0
  404508:	6039      	str	r1, [r7, #0]
  40450a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  40450c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404510:	2b00      	cmp	r3, #0
  404512:	da0b      	bge.n	40452c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  404514:	490d      	ldr	r1, [pc, #52]	; (40454c <NVIC_SetPriority+0x4c>)
  404516:	79fb      	ldrb	r3, [r7, #7]
  404518:	f003 030f 	and.w	r3, r3, #15
  40451c:	3b04      	subs	r3, #4
  40451e:	683a      	ldr	r2, [r7, #0]
  404520:	b2d2      	uxtb	r2, r2
  404522:	0112      	lsls	r2, r2, #4
  404524:	b2d2      	uxtb	r2, r2
  404526:	440b      	add	r3, r1
  404528:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
  40452a:	e009      	b.n	404540 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  40452c:	4908      	ldr	r1, [pc, #32]	; (404550 <NVIC_SetPriority+0x50>)
  40452e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404532:	683a      	ldr	r2, [r7, #0]
  404534:	b2d2      	uxtb	r2, r2
  404536:	0112      	lsls	r2, r2, #4
  404538:	b2d2      	uxtb	r2, r2
  40453a:	440b      	add	r3, r1
  40453c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  404540:	bf00      	nop
  404542:	370c      	adds	r7, #12
  404544:	46bd      	mov	sp, r7
  404546:	bc80      	pop	{r7}
  404548:	4770      	bx	lr
  40454a:	bf00      	nop
  40454c:	e000ed00 	.word	0xe000ed00
  404550:	e000e100 	.word	0xe000e100

00404554 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  404554:	b580      	push	{r7, lr}
  404556:	b084      	sub	sp, #16
  404558:	af00      	add	r7, sp, #0
  40455a:	6078      	str	r0, [r7, #4]
  40455c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40455e:	6878      	ldr	r0, [r7, #4]
  404560:	4b2c      	ldr	r3, [pc, #176]	; (404614 <pio_handler_process+0xc0>)
  404562:	4798      	blx	r3
  404564:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  404566:	6878      	ldr	r0, [r7, #4]
  404568:	4b2b      	ldr	r3, [pc, #172]	; (404618 <pio_handler_process+0xc4>)
  40456a:	4798      	blx	r3
  40456c:	4602      	mov	r2, r0
  40456e:	68fb      	ldr	r3, [r7, #12]
  404570:	4013      	ands	r3, r2
  404572:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  404574:	68fb      	ldr	r3, [r7, #12]
  404576:	2b00      	cmp	r3, #0
  404578:	d03c      	beq.n	4045f4 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40457a:	2300      	movs	r3, #0
  40457c:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40457e:	e034      	b.n	4045ea <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  404580:	4a26      	ldr	r2, [pc, #152]	; (40461c <pio_handler_process+0xc8>)
  404582:	68bb      	ldr	r3, [r7, #8]
  404584:	011b      	lsls	r3, r3, #4
  404586:	4413      	add	r3, r2
  404588:	681a      	ldr	r2, [r3, #0]
  40458a:	683b      	ldr	r3, [r7, #0]
  40458c:	429a      	cmp	r2, r3
  40458e:	d126      	bne.n	4045de <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  404590:	4a22      	ldr	r2, [pc, #136]	; (40461c <pio_handler_process+0xc8>)
  404592:	68bb      	ldr	r3, [r7, #8]
  404594:	011b      	lsls	r3, r3, #4
  404596:	4413      	add	r3, r2
  404598:	3304      	adds	r3, #4
  40459a:	681a      	ldr	r2, [r3, #0]
  40459c:	68fb      	ldr	r3, [r7, #12]
  40459e:	4013      	ands	r3, r2
  4045a0:	2b00      	cmp	r3, #0
  4045a2:	d01c      	beq.n	4045de <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4045a4:	4a1d      	ldr	r2, [pc, #116]	; (40461c <pio_handler_process+0xc8>)
  4045a6:	68bb      	ldr	r3, [r7, #8]
  4045a8:	011b      	lsls	r3, r3, #4
  4045aa:	4413      	add	r3, r2
  4045ac:	330c      	adds	r3, #12
  4045ae:	681b      	ldr	r3, [r3, #0]
  4045b0:	491a      	ldr	r1, [pc, #104]	; (40461c <pio_handler_process+0xc8>)
  4045b2:	68ba      	ldr	r2, [r7, #8]
  4045b4:	0112      	lsls	r2, r2, #4
  4045b6:	440a      	add	r2, r1
  4045b8:	6810      	ldr	r0, [r2, #0]
  4045ba:	4918      	ldr	r1, [pc, #96]	; (40461c <pio_handler_process+0xc8>)
  4045bc:	68ba      	ldr	r2, [r7, #8]
  4045be:	0112      	lsls	r2, r2, #4
  4045c0:	440a      	add	r2, r1
  4045c2:	3204      	adds	r2, #4
  4045c4:	6812      	ldr	r2, [r2, #0]
  4045c6:	4611      	mov	r1, r2
  4045c8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4045ca:	4a14      	ldr	r2, [pc, #80]	; (40461c <pio_handler_process+0xc8>)
  4045cc:	68bb      	ldr	r3, [r7, #8]
  4045ce:	011b      	lsls	r3, r3, #4
  4045d0:	4413      	add	r3, r2
  4045d2:	3304      	adds	r3, #4
  4045d4:	681b      	ldr	r3, [r3, #0]
  4045d6:	43db      	mvns	r3, r3
  4045d8:	68fa      	ldr	r2, [r7, #12]
  4045da:	4013      	ands	r3, r2
  4045dc:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4045de:	68bb      	ldr	r3, [r7, #8]
  4045e0:	3301      	adds	r3, #1
  4045e2:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4045e4:	68bb      	ldr	r3, [r7, #8]
  4045e6:	2b06      	cmp	r3, #6
  4045e8:	d803      	bhi.n	4045f2 <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4045ea:	68fb      	ldr	r3, [r7, #12]
  4045ec:	2b00      	cmp	r3, #0
  4045ee:	d1c7      	bne.n	404580 <pio_handler_process+0x2c>
  4045f0:	e000      	b.n	4045f4 <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  4045f2:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4045f4:	4b0a      	ldr	r3, [pc, #40]	; (404620 <pio_handler_process+0xcc>)
  4045f6:	681b      	ldr	r3, [r3, #0]
  4045f8:	2b00      	cmp	r3, #0
  4045fa:	d007      	beq.n	40460c <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  4045fc:	4b09      	ldr	r3, [pc, #36]	; (404624 <pio_handler_process+0xd0>)
  4045fe:	681b      	ldr	r3, [r3, #0]
  404600:	2b00      	cmp	r3, #0
  404602:	d003      	beq.n	40460c <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  404604:	4b07      	ldr	r3, [pc, #28]	; (404624 <pio_handler_process+0xd0>)
  404606:	681b      	ldr	r3, [r3, #0]
  404608:	6878      	ldr	r0, [r7, #4]
  40460a:	4798      	blx	r3
		}
	}
#endif
}
  40460c:	bf00      	nop
  40460e:	3710      	adds	r7, #16
  404610:	46bd      	mov	sp, r7
  404612:	bd80      	pop	{r7, pc}
  404614:	004040d9 	.word	0x004040d9
  404618:	004040f1 	.word	0x004040f1
  40461c:	20000558 	.word	0x20000558
  404620:	20002724 	.word	0x20002724
  404624:	200005cc 	.word	0x200005cc

00404628 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  404628:	b580      	push	{r7, lr}
  40462a:	b086      	sub	sp, #24
  40462c:	af00      	add	r7, sp, #0
  40462e:	60f8      	str	r0, [r7, #12]
  404630:	60b9      	str	r1, [r7, #8]
  404632:	607a      	str	r2, [r7, #4]
  404634:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  404636:	4b21      	ldr	r3, [pc, #132]	; (4046bc <pio_handler_set+0x94>)
  404638:	681b      	ldr	r3, [r3, #0]
  40463a:	2b06      	cmp	r3, #6
  40463c:	d901      	bls.n	404642 <pio_handler_set+0x1a>
		return 1;
  40463e:	2301      	movs	r3, #1
  404640:	e038      	b.n	4046b4 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  404642:	2300      	movs	r3, #0
  404644:	75fb      	strb	r3, [r7, #23]
  404646:	e011      	b.n	40466c <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  404648:	7dfb      	ldrb	r3, [r7, #23]
  40464a:	011b      	lsls	r3, r3, #4
  40464c:	4a1c      	ldr	r2, [pc, #112]	; (4046c0 <pio_handler_set+0x98>)
  40464e:	4413      	add	r3, r2
  404650:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  404652:	693b      	ldr	r3, [r7, #16]
  404654:	681a      	ldr	r2, [r3, #0]
  404656:	68bb      	ldr	r3, [r7, #8]
  404658:	429a      	cmp	r2, r3
  40465a:	d104      	bne.n	404666 <pio_handler_set+0x3e>
  40465c:	693b      	ldr	r3, [r7, #16]
  40465e:	685a      	ldr	r2, [r3, #4]
  404660:	687b      	ldr	r3, [r7, #4]
  404662:	429a      	cmp	r2, r3
  404664:	d008      	beq.n	404678 <pio_handler_set+0x50>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  404666:	7dfb      	ldrb	r3, [r7, #23]
  404668:	3301      	adds	r3, #1
  40466a:	75fb      	strb	r3, [r7, #23]
  40466c:	7dfa      	ldrb	r2, [r7, #23]
  40466e:	4b13      	ldr	r3, [pc, #76]	; (4046bc <pio_handler_set+0x94>)
  404670:	681b      	ldr	r3, [r3, #0]
  404672:	429a      	cmp	r2, r3
  404674:	d9e8      	bls.n	404648 <pio_handler_set+0x20>
  404676:	e000      	b.n	40467a <pio_handler_set+0x52>
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
			break;
  404678:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40467a:	693b      	ldr	r3, [r7, #16]
  40467c:	68ba      	ldr	r2, [r7, #8]
  40467e:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  404680:	693b      	ldr	r3, [r7, #16]
  404682:	687a      	ldr	r2, [r7, #4]
  404684:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  404686:	693b      	ldr	r3, [r7, #16]
  404688:	683a      	ldr	r2, [r7, #0]
  40468a:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  40468c:	693b      	ldr	r3, [r7, #16]
  40468e:	6a3a      	ldr	r2, [r7, #32]
  404690:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  404692:	7dfa      	ldrb	r2, [r7, #23]
  404694:	4b09      	ldr	r3, [pc, #36]	; (4046bc <pio_handler_set+0x94>)
  404696:	681b      	ldr	r3, [r3, #0]
  404698:	3301      	adds	r3, #1
  40469a:	429a      	cmp	r2, r3
  40469c:	d104      	bne.n	4046a8 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  40469e:	4b07      	ldr	r3, [pc, #28]	; (4046bc <pio_handler_set+0x94>)
  4046a0:	681b      	ldr	r3, [r3, #0]
  4046a2:	3301      	adds	r3, #1
  4046a4:	4a05      	ldr	r2, [pc, #20]	; (4046bc <pio_handler_set+0x94>)
  4046a6:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4046a8:	683a      	ldr	r2, [r7, #0]
  4046aa:	6879      	ldr	r1, [r7, #4]
  4046ac:	68f8      	ldr	r0, [r7, #12]
  4046ae:	4b05      	ldr	r3, [pc, #20]	; (4046c4 <pio_handler_set+0x9c>)
  4046b0:	4798      	blx	r3

	return 0;
  4046b2:	2300      	movs	r3, #0
}
  4046b4:	4618      	mov	r0, r3
  4046b6:	3718      	adds	r7, #24
  4046b8:	46bd      	mov	sp, r7
  4046ba:	bd80      	pop	{r7, pc}
  4046bc:	200005c8 	.word	0x200005c8
  4046c0:	20000558 	.word	0x20000558
  4046c4:	00404035 	.word	0x00404035

004046c8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4046c8:	b580      	push	{r7, lr}
  4046ca:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4046cc:	210b      	movs	r1, #11
  4046ce:	4802      	ldr	r0, [pc, #8]	; (4046d8 <PIOA_Handler+0x10>)
  4046d0:	4b02      	ldr	r3, [pc, #8]	; (4046dc <PIOA_Handler+0x14>)
  4046d2:	4798      	blx	r3
}
  4046d4:	bf00      	nop
  4046d6:	bd80      	pop	{r7, pc}
  4046d8:	400e0e00 	.word	0x400e0e00
  4046dc:	00404555 	.word	0x00404555

004046e0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4046e0:	b580      	push	{r7, lr}
  4046e2:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4046e4:	210c      	movs	r1, #12
  4046e6:	4802      	ldr	r0, [pc, #8]	; (4046f0 <PIOB_Handler+0x10>)
  4046e8:	4b02      	ldr	r3, [pc, #8]	; (4046f4 <PIOB_Handler+0x14>)
  4046ea:	4798      	blx	r3
}
  4046ec:	bf00      	nop
  4046ee:	bd80      	pop	{r7, pc}
  4046f0:	400e1000 	.word	0x400e1000
  4046f4:	00404555 	.word	0x00404555

004046f8 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  4046f8:	b580      	push	{r7, lr}
  4046fa:	b086      	sub	sp, #24
  4046fc:	af00      	add	r7, sp, #0
  4046fe:	60f8      	str	r0, [r7, #12]
  404700:	460b      	mov	r3, r1
  404702:	607a      	str	r2, [r7, #4]
  404704:	72fb      	strb	r3, [r7, #11]
	uint32_t bitmask = 0;
  404706:	2300      	movs	r3, #0
  404708:	617b      	str	r3, [r7, #20]

	bitmask = pio_get_interrupt_mask(p_pio);
  40470a:	68f8      	ldr	r0, [r7, #12]
  40470c:	4b13      	ldr	r3, [pc, #76]	; (40475c <pio_handler_set_priority+0x64>)
  40470e:	4798      	blx	r3
  404710:	6178      	str	r0, [r7, #20]
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  404712:	f04f 31ff 	mov.w	r1, #4294967295
  404716:	68f8      	ldr	r0, [r7, #12]
  404718:	4b11      	ldr	r3, [pc, #68]	; (404760 <pio_handler_set_priority+0x68>)
  40471a:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  40471c:	68f8      	ldr	r0, [r7, #12]
  40471e:	4b11      	ldr	r3, [pc, #68]	; (404764 <pio_handler_set_priority+0x6c>)
  404720:	4798      	blx	r3
	NVIC_DisableIRQ(ul_irqn);
  404722:	f997 300b 	ldrsb.w	r3, [r7, #11]
  404726:	4618      	mov	r0, r3
  404728:	4b0f      	ldr	r3, [pc, #60]	; (404768 <pio_handler_set_priority+0x70>)
  40472a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(ul_irqn);
  40472c:	f997 300b 	ldrsb.w	r3, [r7, #11]
  404730:	4618      	mov	r0, r3
  404732:	4b0e      	ldr	r3, [pc, #56]	; (40476c <pio_handler_set_priority+0x74>)
  404734:	4798      	blx	r3
	NVIC_SetPriority(ul_irqn, ul_priority);
  404736:	f997 300b 	ldrsb.w	r3, [r7, #11]
  40473a:	6879      	ldr	r1, [r7, #4]
  40473c:	4618      	mov	r0, r3
  40473e:	4b0c      	ldr	r3, [pc, #48]	; (404770 <pio_handler_set_priority+0x78>)
  404740:	4798      	blx	r3
	NVIC_EnableIRQ(ul_irqn);
  404742:	f997 300b 	ldrsb.w	r3, [r7, #11]
  404746:	4618      	mov	r0, r3
  404748:	4b0a      	ldr	r3, [pc, #40]	; (404774 <pio_handler_set_priority+0x7c>)
  40474a:	4798      	blx	r3
	pio_enable_interrupt(p_pio, bitmask);
  40474c:	6979      	ldr	r1, [r7, #20]
  40474e:	68f8      	ldr	r0, [r7, #12]
  404750:	4b09      	ldr	r3, [pc, #36]	; (404778 <pio_handler_set_priority+0x80>)
  404752:	4798      	blx	r3
}
  404754:	bf00      	nop
  404756:	3718      	adds	r7, #24
  404758:	46bd      	mov	sp, r7
  40475a:	bd80      	pop	{r7, pc}
  40475c:	004040f1 	.word	0x004040f1
  404760:	004040bd 	.word	0x004040bd
  404764:	004040d9 	.word	0x004040d9
  404768:	00404499 	.word	0x00404499
  40476c:	004044cd 	.word	0x004044cd
  404770:	00404501 	.word	0x00404501
  404774:	00404469 	.word	0x00404469
  404778:	004040a1 	.word	0x004040a1

0040477c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  40477c:	b480      	push	{r7}
  40477e:	b085      	sub	sp, #20
  404780:	af00      	add	r7, sp, #0
  404782:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  404784:	491c      	ldr	r1, [pc, #112]	; (4047f8 <pmc_switch_mck_to_pllack+0x7c>)
  404786:	4b1c      	ldr	r3, [pc, #112]	; (4047f8 <pmc_switch_mck_to_pllack+0x7c>)
  404788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40478a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40478e:	687b      	ldr	r3, [r7, #4]
  404790:	4313      	orrs	r3, r2
  404792:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404794:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404798:	60fb      	str	r3, [r7, #12]
  40479a:	e007      	b.n	4047ac <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40479c:	68fb      	ldr	r3, [r7, #12]
  40479e:	2b00      	cmp	r3, #0
  4047a0:	d101      	bne.n	4047a6 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4047a2:	2301      	movs	r3, #1
  4047a4:	e023      	b.n	4047ee <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  4047a6:	68fb      	ldr	r3, [r7, #12]
  4047a8:	3b01      	subs	r3, #1
  4047aa:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4047ac:	4b12      	ldr	r3, [pc, #72]	; (4047f8 <pmc_switch_mck_to_pllack+0x7c>)
  4047ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4047b0:	f003 0308 	and.w	r3, r3, #8
  4047b4:	2b00      	cmp	r3, #0
  4047b6:	d0f1      	beq.n	40479c <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4047b8:	4a0f      	ldr	r2, [pc, #60]	; (4047f8 <pmc_switch_mck_to_pllack+0x7c>)
  4047ba:	4b0f      	ldr	r3, [pc, #60]	; (4047f8 <pmc_switch_mck_to_pllack+0x7c>)
  4047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4047be:	f023 0303 	bic.w	r3, r3, #3
  4047c2:	f043 0302 	orr.w	r3, r3, #2
  4047c6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4047c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4047cc:	60fb      	str	r3, [r7, #12]
  4047ce:	e007      	b.n	4047e0 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4047d0:	68fb      	ldr	r3, [r7, #12]
  4047d2:	2b00      	cmp	r3, #0
  4047d4:	d101      	bne.n	4047da <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4047d6:	2301      	movs	r3, #1
  4047d8:	e009      	b.n	4047ee <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  4047da:	68fb      	ldr	r3, [r7, #12]
  4047dc:	3b01      	subs	r3, #1
  4047de:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4047e0:	4b05      	ldr	r3, [pc, #20]	; (4047f8 <pmc_switch_mck_to_pllack+0x7c>)
  4047e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4047e4:	f003 0308 	and.w	r3, r3, #8
  4047e8:	2b00      	cmp	r3, #0
  4047ea:	d0f1      	beq.n	4047d0 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4047ec:	2300      	movs	r3, #0
}
  4047ee:	4618      	mov	r0, r3
  4047f0:	3714      	adds	r7, #20
  4047f2:	46bd      	mov	sp, r7
  4047f4:	bc80      	pop	{r7}
  4047f6:	4770      	bx	lr
  4047f8:	400e0400 	.word	0x400e0400

004047fc <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4047fc:	b480      	push	{r7}
  4047fe:	b083      	sub	sp, #12
  404800:	af00      	add	r7, sp, #0
  404802:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  404804:	687b      	ldr	r3, [r7, #4]
  404806:	2b01      	cmp	r3, #1
  404808:	d107      	bne.n	40481a <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40480a:	4a08      	ldr	r2, [pc, #32]	; (40482c <pmc_switch_sclk_to_32kxtal+0x30>)
  40480c:	4b07      	ldr	r3, [pc, #28]	; (40482c <pmc_switch_sclk_to_32kxtal+0x30>)
  40480e:	689b      	ldr	r3, [r3, #8]
  404810:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  404814:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  404818:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40481a:	4b04      	ldr	r3, [pc, #16]	; (40482c <pmc_switch_sclk_to_32kxtal+0x30>)
  40481c:	4a04      	ldr	r2, [pc, #16]	; (404830 <pmc_switch_sclk_to_32kxtal+0x34>)
  40481e:	601a      	str	r2, [r3, #0]
}
  404820:	bf00      	nop
  404822:	370c      	adds	r7, #12
  404824:	46bd      	mov	sp, r7
  404826:	bc80      	pop	{r7}
  404828:	4770      	bx	lr
  40482a:	bf00      	nop
  40482c:	400e1410 	.word	0x400e1410
  404830:	a5000008 	.word	0xa5000008

00404834 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  404834:	b480      	push	{r7}
  404836:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  404838:	4b09      	ldr	r3, [pc, #36]	; (404860 <pmc_osc_is_ready_32kxtal+0x2c>)
  40483a:	695b      	ldr	r3, [r3, #20]
  40483c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  404840:	2b00      	cmp	r3, #0
  404842:	d007      	beq.n	404854 <pmc_osc_is_ready_32kxtal+0x20>
  404844:	4b07      	ldr	r3, [pc, #28]	; (404864 <pmc_osc_is_ready_32kxtal+0x30>)
  404846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404848:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40484c:	2b00      	cmp	r3, #0
  40484e:	d001      	beq.n	404854 <pmc_osc_is_ready_32kxtal+0x20>
  404850:	2301      	movs	r3, #1
  404852:	e000      	b.n	404856 <pmc_osc_is_ready_32kxtal+0x22>
  404854:	2300      	movs	r3, #0
}
  404856:	4618      	mov	r0, r3
  404858:	46bd      	mov	sp, r7
  40485a:	bc80      	pop	{r7}
  40485c:	4770      	bx	lr
  40485e:	bf00      	nop
  404860:	400e1410 	.word	0x400e1410
  404864:	400e0400 	.word	0x400e0400

00404868 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  404868:	b480      	push	{r7}
  40486a:	b083      	sub	sp, #12
  40486c:	af00      	add	r7, sp, #0
  40486e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  404870:	4a18      	ldr	r2, [pc, #96]	; (4048d4 <pmc_switch_mainck_to_fastrc+0x6c>)
  404872:	4b18      	ldr	r3, [pc, #96]	; (4048d4 <pmc_switch_mainck_to_fastrc+0x6c>)
  404874:	6a1b      	ldr	r3, [r3, #32]
  404876:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40487a:	f043 0308 	orr.w	r3, r3, #8
  40487e:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  404880:	bf00      	nop
  404882:	4b14      	ldr	r3, [pc, #80]	; (4048d4 <pmc_switch_mainck_to_fastrc+0x6c>)
  404884:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40488a:	2b00      	cmp	r3, #0
  40488c:	d0f9      	beq.n	404882 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40488e:	4911      	ldr	r1, [pc, #68]	; (4048d4 <pmc_switch_mainck_to_fastrc+0x6c>)
  404890:	4b10      	ldr	r3, [pc, #64]	; (4048d4 <pmc_switch_mainck_to_fastrc+0x6c>)
  404892:	6a1b      	ldr	r3, [r3, #32]
  404894:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  404898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40489c:	687a      	ldr	r2, [r7, #4]
  40489e:	4313      	orrs	r3, r2
  4048a0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4048a4:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4048a6:	bf00      	nop
  4048a8:	4b0a      	ldr	r3, [pc, #40]	; (4048d4 <pmc_switch_mainck_to_fastrc+0x6c>)
  4048aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4048ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4048b0:	2b00      	cmp	r3, #0
  4048b2:	d0f9      	beq.n	4048a8 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4048b4:	4a07      	ldr	r2, [pc, #28]	; (4048d4 <pmc_switch_mainck_to_fastrc+0x6c>)
  4048b6:	4b07      	ldr	r3, [pc, #28]	; (4048d4 <pmc_switch_mainck_to_fastrc+0x6c>)
  4048b8:	6a1b      	ldr	r3, [r3, #32]
  4048ba:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  4048be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4048c2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4048c6:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4048c8:	bf00      	nop
  4048ca:	370c      	adds	r7, #12
  4048cc:	46bd      	mov	sp, r7
  4048ce:	bc80      	pop	{r7}
  4048d0:	4770      	bx	lr
  4048d2:	bf00      	nop
  4048d4:	400e0400 	.word	0x400e0400

004048d8 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4048d8:	b480      	push	{r7}
  4048da:	b083      	sub	sp, #12
  4048dc:	af00      	add	r7, sp, #0
  4048de:	6078      	str	r0, [r7, #4]
  4048e0:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4048e2:	687b      	ldr	r3, [r7, #4]
  4048e4:	2b00      	cmp	r3, #0
  4048e6:	d008      	beq.n	4048fa <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4048e8:	4916      	ldr	r1, [pc, #88]	; (404944 <pmc_switch_mainck_to_xtal+0x6c>)
  4048ea:	4b16      	ldr	r3, [pc, #88]	; (404944 <pmc_switch_mainck_to_xtal+0x6c>)
  4048ec:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4048ee:	4a16      	ldr	r2, [pc, #88]	; (404948 <pmc_switch_mainck_to_xtal+0x70>)
  4048f0:	401a      	ands	r2, r3
  4048f2:	4b16      	ldr	r3, [pc, #88]	; (40494c <pmc_switch_mainck_to_xtal+0x74>)
  4048f4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4048f6:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4048f8:	e01e      	b.n	404938 <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4048fa:	4912      	ldr	r1, [pc, #72]	; (404944 <pmc_switch_mainck_to_xtal+0x6c>)
  4048fc:	4b11      	ldr	r3, [pc, #68]	; (404944 <pmc_switch_mainck_to_xtal+0x6c>)
  4048fe:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  404900:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  404904:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  404908:	683a      	ldr	r2, [r7, #0]
  40490a:	0212      	lsls	r2, r2, #8
  40490c:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40490e:	4313      	orrs	r3, r2
  404910:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  404914:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  404918:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40491a:	bf00      	nop
  40491c:	4b09      	ldr	r3, [pc, #36]	; (404944 <pmc_switch_mainck_to_xtal+0x6c>)
  40491e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404920:	f003 0301 	and.w	r3, r3, #1
  404924:	2b00      	cmp	r3, #0
  404926:	d0f9      	beq.n	40491c <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  404928:	4a06      	ldr	r2, [pc, #24]	; (404944 <pmc_switch_mainck_to_xtal+0x6c>)
  40492a:	4b06      	ldr	r3, [pc, #24]	; (404944 <pmc_switch_mainck_to_xtal+0x6c>)
  40492c:	6a1b      	ldr	r3, [r3, #32]
  40492e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  404932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  404936:	6213      	str	r3, [r2, #32]
	}
}
  404938:	bf00      	nop
  40493a:	370c      	adds	r7, #12
  40493c:	46bd      	mov	sp, r7
  40493e:	bc80      	pop	{r7}
  404940:	4770      	bx	lr
  404942:	bf00      	nop
  404944:	400e0400 	.word	0x400e0400
  404948:	fec8fffc 	.word	0xfec8fffc
  40494c:	01370002 	.word	0x01370002

00404950 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  404950:	b480      	push	{r7}
  404952:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  404954:	4b03      	ldr	r3, [pc, #12]	; (404964 <pmc_osc_is_ready_mainck+0x14>)
  404956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  40495c:	4618      	mov	r0, r3
  40495e:	46bd      	mov	sp, r7
  404960:	bc80      	pop	{r7}
  404962:	4770      	bx	lr
  404964:	400e0400 	.word	0x400e0400

00404968 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  404968:	b480      	push	{r7}
  40496a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40496c:	4b03      	ldr	r3, [pc, #12]	; (40497c <pmc_disable_pllack+0x14>)
  40496e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  404972:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  404974:	bf00      	nop
  404976:	46bd      	mov	sp, r7
  404978:	bc80      	pop	{r7}
  40497a:	4770      	bx	lr
  40497c:	400e0400 	.word	0x400e0400

00404980 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  404980:	b480      	push	{r7}
  404982:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  404984:	4b03      	ldr	r3, [pc, #12]	; (404994 <pmc_is_locked_pllack+0x14>)
  404986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404988:	f003 0302 	and.w	r3, r3, #2
}
  40498c:	4618      	mov	r0, r3
  40498e:	46bd      	mov	sp, r7
  404990:	bc80      	pop	{r7}
  404992:	4770      	bx	lr
  404994:	400e0400 	.word	0x400e0400

00404998 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  404998:	b480      	push	{r7}
  40499a:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  40499c:	4b03      	ldr	r3, [pc, #12]	; (4049ac <pmc_disable_pllbck+0x14>)
  40499e:	2200      	movs	r2, #0
  4049a0:	62da      	str	r2, [r3, #44]	; 0x2c
}
  4049a2:	bf00      	nop
  4049a4:	46bd      	mov	sp, r7
  4049a6:	bc80      	pop	{r7}
  4049a8:	4770      	bx	lr
  4049aa:	bf00      	nop
  4049ac:	400e0400 	.word	0x400e0400

004049b0 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  4049b0:	b480      	push	{r7}
  4049b2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  4049b4:	4b03      	ldr	r3, [pc, #12]	; (4049c4 <pmc_is_locked_pllbck+0x14>)
  4049b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4049b8:	f003 0304 	and.w	r3, r3, #4
}
  4049bc:	4618      	mov	r0, r3
  4049be:	46bd      	mov	sp, r7
  4049c0:	bc80      	pop	{r7}
  4049c2:	4770      	bx	lr
  4049c4:	400e0400 	.word	0x400e0400

004049c8 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4049c8:	b480      	push	{r7}
  4049ca:	b083      	sub	sp, #12
  4049cc:	af00      	add	r7, sp, #0
  4049ce:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  4049d0:	687b      	ldr	r3, [r7, #4]
  4049d2:	2b22      	cmp	r3, #34	; 0x22
  4049d4:	d901      	bls.n	4049da <pmc_enable_periph_clk+0x12>
		return 1;
  4049d6:	2301      	movs	r3, #1
  4049d8:	e02f      	b.n	404a3a <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4049da:	687b      	ldr	r3, [r7, #4]
  4049dc:	2b1f      	cmp	r3, #31
  4049de:	d813      	bhi.n	404a08 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4049e0:	4b18      	ldr	r3, [pc, #96]	; (404a44 <pmc_enable_periph_clk+0x7c>)
  4049e2:	699a      	ldr	r2, [r3, #24]
  4049e4:	2101      	movs	r1, #1
  4049e6:	687b      	ldr	r3, [r7, #4]
  4049e8:	fa01 f303 	lsl.w	r3, r1, r3
  4049ec:	401a      	ands	r2, r3
  4049ee:	2101      	movs	r1, #1
  4049f0:	687b      	ldr	r3, [r7, #4]
  4049f2:	fa01 f303 	lsl.w	r3, r1, r3
  4049f6:	429a      	cmp	r2, r3
  4049f8:	d01e      	beq.n	404a38 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4049fa:	4a12      	ldr	r2, [pc, #72]	; (404a44 <pmc_enable_periph_clk+0x7c>)
  4049fc:	2101      	movs	r1, #1
  4049fe:	687b      	ldr	r3, [r7, #4]
  404a00:	fa01 f303 	lsl.w	r3, r1, r3
  404a04:	6113      	str	r3, [r2, #16]
  404a06:	e017      	b.n	404a38 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  404a08:	687b      	ldr	r3, [r7, #4]
  404a0a:	3b20      	subs	r3, #32
  404a0c:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  404a0e:	4b0d      	ldr	r3, [pc, #52]	; (404a44 <pmc_enable_periph_clk+0x7c>)
  404a10:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  404a14:	2101      	movs	r1, #1
  404a16:	687b      	ldr	r3, [r7, #4]
  404a18:	fa01 f303 	lsl.w	r3, r1, r3
  404a1c:	401a      	ands	r2, r3
  404a1e:	2101      	movs	r1, #1
  404a20:	687b      	ldr	r3, [r7, #4]
  404a22:	fa01 f303 	lsl.w	r3, r1, r3
  404a26:	429a      	cmp	r2, r3
  404a28:	d006      	beq.n	404a38 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  404a2a:	4a06      	ldr	r2, [pc, #24]	; (404a44 <pmc_enable_periph_clk+0x7c>)
  404a2c:	2101      	movs	r1, #1
  404a2e:	687b      	ldr	r3, [r7, #4]
  404a30:	fa01 f303 	lsl.w	r3, r1, r3
  404a34:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  404a38:	2300      	movs	r3, #0
}
  404a3a:	4618      	mov	r0, r3
  404a3c:	370c      	adds	r7, #12
  404a3e:	46bd      	mov	sp, r7
  404a40:	bc80      	pop	{r7}
  404a42:	4770      	bx	lr
  404a44:	400e0400 	.word	0x400e0400

00404a48 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  404a48:	b580      	push	{r7, lr}
  404a4a:	b084      	sub	sp, #16
  404a4c:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  404a4e:	4b27      	ldr	r3, [pc, #156]	; (404aec <Reset_Handler+0xa4>)
  404a50:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  404a52:	4b27      	ldr	r3, [pc, #156]	; (404af0 <Reset_Handler+0xa8>)
  404a54:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  404a56:	68fa      	ldr	r2, [r7, #12]
  404a58:	68bb      	ldr	r3, [r7, #8]
  404a5a:	429a      	cmp	r2, r3
  404a5c:	d90d      	bls.n	404a7a <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  404a5e:	e007      	b.n	404a70 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  404a60:	68bb      	ldr	r3, [r7, #8]
  404a62:	1d1a      	adds	r2, r3, #4
  404a64:	60ba      	str	r2, [r7, #8]
  404a66:	68fa      	ldr	r2, [r7, #12]
  404a68:	1d11      	adds	r1, r2, #4
  404a6a:	60f9      	str	r1, [r7, #12]
  404a6c:	6812      	ldr	r2, [r2, #0]
  404a6e:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  404a70:	68bb      	ldr	r3, [r7, #8]
  404a72:	4a20      	ldr	r2, [pc, #128]	; (404af4 <Reset_Handler+0xac>)
  404a74:	4293      	cmp	r3, r2
  404a76:	d3f3      	bcc.n	404a60 <Reset_Handler+0x18>
  404a78:	e020      	b.n	404abc <Reset_Handler+0x74>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  404a7a:	68fa      	ldr	r2, [r7, #12]
  404a7c:	68bb      	ldr	r3, [r7, #8]
  404a7e:	429a      	cmp	r2, r3
  404a80:	d21c      	bcs.n	404abc <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  404a82:	4a1c      	ldr	r2, [pc, #112]	; (404af4 <Reset_Handler+0xac>)
  404a84:	4b1a      	ldr	r3, [pc, #104]	; (404af0 <Reset_Handler+0xa8>)
  404a86:	1ad3      	subs	r3, r2, r3
  404a88:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  404a8a:	68fa      	ldr	r2, [r7, #12]
  404a8c:	687b      	ldr	r3, [r7, #4]
  404a8e:	4413      	add	r3, r2
  404a90:	3b04      	subs	r3, #4
  404a92:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  404a94:	68ba      	ldr	r2, [r7, #8]
  404a96:	687b      	ldr	r3, [r7, #4]
  404a98:	4413      	add	r3, r2
  404a9a:	3b04      	subs	r3, #4
  404a9c:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  404a9e:	e00a      	b.n	404ab6 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  404aa0:	68bb      	ldr	r3, [r7, #8]
  404aa2:	1f1a      	subs	r2, r3, #4
  404aa4:	60ba      	str	r2, [r7, #8]
  404aa6:	68fa      	ldr	r2, [r7, #12]
  404aa8:	1f11      	subs	r1, r2, #4
  404aaa:	60f9      	str	r1, [r7, #12]
  404aac:	6812      	ldr	r2, [r2, #0]
  404aae:	601a      	str	r2, [r3, #0]
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  404ab0:	687b      	ldr	r3, [r7, #4]
  404ab2:	3b04      	subs	r3, #4
  404ab4:	607b      	str	r3, [r7, #4]
  404ab6:	687b      	ldr	r3, [r7, #4]
  404ab8:	2b00      	cmp	r3, #0
  404aba:	d1f1      	bne.n	404aa0 <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  404abc:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  404abe:	4b0e      	ldr	r3, [pc, #56]	; (404af8 <Reset_Handler+0xb0>)
  404ac0:	60bb      	str	r3, [r7, #8]
  404ac2:	e004      	b.n	404ace <Reset_Handler+0x86>
		*pDest++ = 0;
  404ac4:	68bb      	ldr	r3, [r7, #8]
  404ac6:	1d1a      	adds	r2, r3, #4
  404ac8:	60ba      	str	r2, [r7, #8]
  404aca:	2200      	movs	r2, #0
  404acc:	601a      	str	r2, [r3, #0]
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  404ace:	68bb      	ldr	r3, [r7, #8]
  404ad0:	4a0a      	ldr	r2, [pc, #40]	; (404afc <Reset_Handler+0xb4>)
  404ad2:	4293      	cmp	r3, r2
  404ad4:	d3f6      	bcc.n	404ac4 <Reset_Handler+0x7c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  404ad6:	4b0a      	ldr	r3, [pc, #40]	; (404b00 <Reset_Handler+0xb8>)
  404ad8:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  404ada:	4a0a      	ldr	r2, [pc, #40]	; (404b04 <Reset_Handler+0xbc>)
  404adc:	68fb      	ldr	r3, [r7, #12]
  404ade:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  404ae0:	4b09      	ldr	r3, [pc, #36]	; (404b08 <Reset_Handler+0xc0>)
  404ae2:	4798      	blx	r3

	/* Branch to main function */
	main();
  404ae4:	4b09      	ldr	r3, [pc, #36]	; (404b0c <Reset_Handler+0xc4>)
  404ae6:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  404ae8:	e7fe      	b.n	404ae8 <Reset_Handler+0xa0>
  404aea:	bf00      	nop
  404aec:	0040b8a4 	.word	0x0040b8a4
  404af0:	20000000 	.word	0x20000000
  404af4:	2000046c 	.word	0x2000046c
  404af8:	20000470 	.word	0x20000470
  404afc:	20002728 	.word	0x20002728
  404b00:	00400000 	.word	0x00400000
  404b04:	e000ed00 	.word	0xe000ed00
  404b08:	0040b1d5 	.word	0x0040b1d5
  404b0c:	0040741d 	.word	0x0040741d

00404b10 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  404b10:	b480      	push	{r7}
  404b12:	af00      	add	r7, sp, #0
	while (1) {
	}
  404b14:	e7fe      	b.n	404b14 <Dummy_Handler+0x4>
  404b16:	bf00      	nop

00404b18 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  404b18:	b480      	push	{r7}
  404b1a:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  404b1c:	4b5d      	ldr	r3, [pc, #372]	; (404c94 <SystemCoreClockUpdate+0x17c>)
  404b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404b20:	f003 0303 	and.w	r3, r3, #3
  404b24:	2b03      	cmp	r3, #3
  404b26:	f200 8096 	bhi.w	404c56 <SystemCoreClockUpdate+0x13e>
  404b2a:	a201      	add	r2, pc, #4	; (adr r2, 404b30 <SystemCoreClockUpdate+0x18>)
  404b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404b30:	00404b41 	.word	0x00404b41
  404b34:	00404b61 	.word	0x00404b61
  404b38:	00404bab 	.word	0x00404bab
  404b3c:	00404bab 	.word	0x00404bab
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  404b40:	4b55      	ldr	r3, [pc, #340]	; (404c98 <SystemCoreClockUpdate+0x180>)
  404b42:	695b      	ldr	r3, [r3, #20]
  404b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
  404b48:	2b00      	cmp	r3, #0
  404b4a:	d004      	beq.n	404b56 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  404b4c:	4b53      	ldr	r3, [pc, #332]	; (404c9c <SystemCoreClockUpdate+0x184>)
  404b4e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  404b52:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  404b54:	e080      	b.n	404c58 <SystemCoreClockUpdate+0x140>
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  404b56:	4b51      	ldr	r3, [pc, #324]	; (404c9c <SystemCoreClockUpdate+0x184>)
  404b58:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  404b5c:	601a      	str	r2, [r3, #0]
			}
		break;
  404b5e:	e07b      	b.n	404c58 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  404b60:	4b4c      	ldr	r3, [pc, #304]	; (404c94 <SystemCoreClockUpdate+0x17c>)
  404b62:	6a1b      	ldr	r3, [r3, #32]
  404b64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  404b68:	2b00      	cmp	r3, #0
  404b6a:	d003      	beq.n	404b74 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  404b6c:	4b4b      	ldr	r3, [pc, #300]	; (404c9c <SystemCoreClockUpdate+0x184>)
  404b6e:	4a4c      	ldr	r2, [pc, #304]	; (404ca0 <SystemCoreClockUpdate+0x188>)
  404b70:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  404b72:	e071      	b.n	404c58 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
			SystemCoreClock = CHIP_FREQ_XTAL;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  404b74:	4b49      	ldr	r3, [pc, #292]	; (404c9c <SystemCoreClockUpdate+0x184>)
  404b76:	4a4b      	ldr	r2, [pc, #300]	; (404ca4 <SystemCoreClockUpdate+0x18c>)
  404b78:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  404b7a:	4b46      	ldr	r3, [pc, #280]	; (404c94 <SystemCoreClockUpdate+0x17c>)
  404b7c:	6a1b      	ldr	r3, [r3, #32]
  404b7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404b82:	2b10      	cmp	r3, #16
  404b84:	d008      	beq.n	404b98 <SystemCoreClockUpdate+0x80>
  404b86:	2b20      	cmp	r3, #32
  404b88:	d00a      	beq.n	404ba0 <SystemCoreClockUpdate+0x88>
  404b8a:	2b00      	cmp	r3, #0
  404b8c:	d000      	beq.n	404b90 <SystemCoreClockUpdate+0x78>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
			break;
			
			default:
			break;
  404b8e:	e00b      	b.n	404ba8 <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  404b90:	4b42      	ldr	r3, [pc, #264]	; (404c9c <SystemCoreClockUpdate+0x184>)
  404b92:	4a44      	ldr	r2, [pc, #272]	; (404ca4 <SystemCoreClockUpdate+0x18c>)
  404b94:	601a      	str	r2, [r3, #0]
			break;
  404b96:	e007      	b.n	404ba8 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  404b98:	4b40      	ldr	r3, [pc, #256]	; (404c9c <SystemCoreClockUpdate+0x184>)
  404b9a:	4a43      	ldr	r2, [pc, #268]	; (404ca8 <SystemCoreClockUpdate+0x190>)
  404b9c:	601a      	str	r2, [r3, #0]
			break;
  404b9e:	e003      	b.n	404ba8 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  404ba0:	4b3e      	ldr	r3, [pc, #248]	; (404c9c <SystemCoreClockUpdate+0x184>)
  404ba2:	4a3f      	ldr	r2, [pc, #252]	; (404ca0 <SystemCoreClockUpdate+0x188>)
  404ba4:	601a      	str	r2, [r3, #0]
			break;
  404ba6:	bf00      	nop
			
			default:
			break;
			}
		}
		break;
  404ba8:	e056      	b.n	404c58 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  404baa:	4b3a      	ldr	r3, [pc, #232]	; (404c94 <SystemCoreClockUpdate+0x17c>)
  404bac:	6a1b      	ldr	r3, [r3, #32]
  404bae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  404bb2:	2b00      	cmp	r3, #0
  404bb4:	d003      	beq.n	404bbe <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  404bb6:	4b39      	ldr	r3, [pc, #228]	; (404c9c <SystemCoreClockUpdate+0x184>)
  404bb8:	4a39      	ldr	r2, [pc, #228]	; (404ca0 <SystemCoreClockUpdate+0x188>)
  404bba:	601a      	str	r2, [r3, #0]
  404bbc:	e019      	b.n	404bf2 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  404bbe:	4b37      	ldr	r3, [pc, #220]	; (404c9c <SystemCoreClockUpdate+0x184>)
  404bc0:	4a38      	ldr	r2, [pc, #224]	; (404ca4 <SystemCoreClockUpdate+0x18c>)
  404bc2:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  404bc4:	4b33      	ldr	r3, [pc, #204]	; (404c94 <SystemCoreClockUpdate+0x17c>)
  404bc6:	6a1b      	ldr	r3, [r3, #32]
  404bc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404bcc:	2b10      	cmp	r3, #16
  404bce:	d008      	beq.n	404be2 <SystemCoreClockUpdate+0xca>
  404bd0:	2b20      	cmp	r3, #32
  404bd2:	d00a      	beq.n	404bea <SystemCoreClockUpdate+0xd2>
  404bd4:	2b00      	cmp	r3, #0
  404bd6:	d000      	beq.n	404bda <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  404bd8:	e00b      	b.n	404bf2 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  404bda:	4b30      	ldr	r3, [pc, #192]	; (404c9c <SystemCoreClockUpdate+0x184>)
  404bdc:	4a31      	ldr	r2, [pc, #196]	; (404ca4 <SystemCoreClockUpdate+0x18c>)
  404bde:	601a      	str	r2, [r3, #0]
					break;
  404be0:	e007      	b.n	404bf2 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  404be2:	4b2e      	ldr	r3, [pc, #184]	; (404c9c <SystemCoreClockUpdate+0x184>)
  404be4:	4a30      	ldr	r2, [pc, #192]	; (404ca8 <SystemCoreClockUpdate+0x190>)
  404be6:	601a      	str	r2, [r3, #0]
					break;
  404be8:	e003      	b.n	404bf2 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  404bea:	4b2c      	ldr	r3, [pc, #176]	; (404c9c <SystemCoreClockUpdate+0x184>)
  404bec:	4a2c      	ldr	r2, [pc, #176]	; (404ca0 <SystemCoreClockUpdate+0x188>)
  404bee:	601a      	str	r2, [r3, #0]
					break;
  404bf0:	bf00      	nop
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  404bf2:	4b28      	ldr	r3, [pc, #160]	; (404c94 <SystemCoreClockUpdate+0x17c>)
  404bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404bf6:	f003 0303 	and.w	r3, r3, #3
  404bfa:	2b02      	cmp	r3, #2
  404bfc:	d115      	bne.n	404c2a <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  404bfe:	4b25      	ldr	r3, [pc, #148]	; (404c94 <SystemCoreClockUpdate+0x17c>)
  404c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  404c02:	4b2a      	ldr	r3, [pc, #168]	; (404cac <SystemCoreClockUpdate+0x194>)
  404c04:	4013      	ands	r3, r2
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  404c06:	0c1b      	lsrs	r3, r3, #16
  404c08:	3301      	adds	r3, #1
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  404c0a:	4a24      	ldr	r2, [pc, #144]	; (404c9c <SystemCoreClockUpdate+0x184>)
  404c0c:	6812      	ldr	r2, [r2, #0]
  404c0e:	fb02 f303 	mul.w	r3, r2, r3
  404c12:	4a22      	ldr	r2, [pc, #136]	; (404c9c <SystemCoreClockUpdate+0x184>)
  404c14:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  404c16:	4b1f      	ldr	r3, [pc, #124]	; (404c94 <SystemCoreClockUpdate+0x17c>)
  404c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  404c1a:	b2db      	uxtb	r3, r3
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  404c1c:	4a1f      	ldr	r2, [pc, #124]	; (404c9c <SystemCoreClockUpdate+0x184>)
  404c1e:	6812      	ldr	r2, [r2, #0]
  404c20:	fbb2 f3f3 	udiv	r3, r2, r3
  404c24:	4a1d      	ldr	r2, [pc, #116]	; (404c9c <SystemCoreClockUpdate+0x184>)
  404c26:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  404c28:	e016      	b.n	404c58 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  404c2a:	4b1a      	ldr	r3, [pc, #104]	; (404c94 <SystemCoreClockUpdate+0x17c>)
  404c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  404c2e:	4b1f      	ldr	r3, [pc, #124]	; (404cac <SystemCoreClockUpdate+0x194>)
  404c30:	4013      	ands	r3, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  404c32:	0c1b      	lsrs	r3, r3, #16
  404c34:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  404c36:	4a19      	ldr	r2, [pc, #100]	; (404c9c <SystemCoreClockUpdate+0x184>)
  404c38:	6812      	ldr	r2, [r2, #0]
  404c3a:	fb02 f303 	mul.w	r3, r2, r3
  404c3e:	4a17      	ldr	r2, [pc, #92]	; (404c9c <SystemCoreClockUpdate+0x184>)
  404c40:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  404c42:	4b14      	ldr	r3, [pc, #80]	; (404c94 <SystemCoreClockUpdate+0x17c>)
  404c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  404c46:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  404c48:	4a14      	ldr	r2, [pc, #80]	; (404c9c <SystemCoreClockUpdate+0x184>)
  404c4a:	6812      	ldr	r2, [r2, #0]
  404c4c:	fbb2 f3f3 	udiv	r3, r2, r3
  404c50:	4a12      	ldr	r2, [pc, #72]	; (404c9c <SystemCoreClockUpdate+0x184>)
  404c52:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  404c54:	e000      	b.n	404c58 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  404c56:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  404c58:	4b0e      	ldr	r3, [pc, #56]	; (404c94 <SystemCoreClockUpdate+0x17c>)
  404c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404c5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404c60:	2b70      	cmp	r3, #112	; 0x70
  404c62:	d108      	bne.n	404c76 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  404c64:	4b0d      	ldr	r3, [pc, #52]	; (404c9c <SystemCoreClockUpdate+0x184>)
  404c66:	681b      	ldr	r3, [r3, #0]
  404c68:	4a11      	ldr	r2, [pc, #68]	; (404cb0 <SystemCoreClockUpdate+0x198>)
  404c6a:	fba2 2303 	umull	r2, r3, r2, r3
  404c6e:	085b      	lsrs	r3, r3, #1
  404c70:	4a0a      	ldr	r2, [pc, #40]	; (404c9c <SystemCoreClockUpdate+0x184>)
  404c72:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  404c74:	e00a      	b.n	404c8c <SystemCoreClockUpdate+0x174>

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  404c76:	4b07      	ldr	r3, [pc, #28]	; (404c94 <SystemCoreClockUpdate+0x17c>)
  404c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404c7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404c7e:	091b      	lsrs	r3, r3, #4
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  404c80:	4a06      	ldr	r2, [pc, #24]	; (404c9c <SystemCoreClockUpdate+0x184>)
  404c82:	6812      	ldr	r2, [r2, #0]
  404c84:	fa22 f303 	lsr.w	r3, r2, r3
  404c88:	4a04      	ldr	r2, [pc, #16]	; (404c9c <SystemCoreClockUpdate+0x184>)
  404c8a:	6013      	str	r3, [r2, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  404c8c:	bf00      	nop
  404c8e:	46bd      	mov	sp, r7
  404c90:	bc80      	pop	{r7}
  404c92:	4770      	bx	lr
  404c94:	400e0400 	.word	0x400e0400
  404c98:	400e1410 	.word	0x400e1410
  404c9c:	2000002c 	.word	0x2000002c
  404ca0:	00b71b00 	.word	0x00b71b00
  404ca4:	003d0900 	.word	0x003d0900
  404ca8:	007a1200 	.word	0x007a1200
  404cac:	07ff0000 	.word	0x07ff0000
  404cb0:	aaaaaaab 	.word	0xaaaaaaab

00404cb4 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  404cb4:	b480      	push	{r7}
  404cb6:	b083      	sub	sp, #12
  404cb8:	af00      	add	r7, sp, #0
  404cba:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  404cbc:	687b      	ldr	r3, [r7, #4]
  404cbe:	4a18      	ldr	r2, [pc, #96]	; (404d20 <system_init_flash+0x6c>)
  404cc0:	4293      	cmp	r3, r2
  404cc2:	d804      	bhi.n	404cce <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  404cc4:	4b17      	ldr	r3, [pc, #92]	; (404d24 <system_init_flash+0x70>)
  404cc6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  404cca:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  404ccc:	e023      	b.n	404d16 <system_init_flash+0x62>
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  404cce:	687b      	ldr	r3, [r7, #4]
  404cd0:	4a15      	ldr	r2, [pc, #84]	; (404d28 <system_init_flash+0x74>)
  404cd2:	4293      	cmp	r3, r2
  404cd4:	d803      	bhi.n	404cde <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  404cd6:	4b13      	ldr	r3, [pc, #76]	; (404d24 <system_init_flash+0x70>)
  404cd8:	4a14      	ldr	r2, [pc, #80]	; (404d2c <system_init_flash+0x78>)
  404cda:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  404cdc:	e01b      	b.n	404d16 <system_init_flash+0x62>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  404cde:	687b      	ldr	r3, [r7, #4]
  404ce0:	4a13      	ldr	r2, [pc, #76]	; (404d30 <system_init_flash+0x7c>)
  404ce2:	4293      	cmp	r3, r2
  404ce4:	d803      	bhi.n	404cee <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  404ce6:	4b0f      	ldr	r3, [pc, #60]	; (404d24 <system_init_flash+0x70>)
  404ce8:	4a12      	ldr	r2, [pc, #72]	; (404d34 <system_init_flash+0x80>)
  404cea:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  404cec:	e013      	b.n	404d16 <system_init_flash+0x62>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  404cee:	687b      	ldr	r3, [r7, #4]
  404cf0:	4a11      	ldr	r2, [pc, #68]	; (404d38 <system_init_flash+0x84>)
  404cf2:	4293      	cmp	r3, r2
  404cf4:	d803      	bhi.n	404cfe <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  404cf6:	4b0b      	ldr	r3, [pc, #44]	; (404d24 <system_init_flash+0x70>)
  404cf8:	4a10      	ldr	r2, [pc, #64]	; (404d3c <system_init_flash+0x88>)
  404cfa:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  404cfc:	e00b      	b.n	404d16 <system_init_flash+0x62>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  404cfe:	687b      	ldr	r3, [r7, #4]
  404d00:	4a0f      	ldr	r2, [pc, #60]	; (404d40 <system_init_flash+0x8c>)
  404d02:	4293      	cmp	r3, r2
  404d04:	d804      	bhi.n	404d10 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  404d06:	4b07      	ldr	r3, [pc, #28]	; (404d24 <system_init_flash+0x70>)
  404d08:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  404d0c:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  404d0e:	e002      	b.n	404d16 <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  404d10:	4b04      	ldr	r3, [pc, #16]	; (404d24 <system_init_flash+0x70>)
  404d12:	4a0c      	ldr	r2, [pc, #48]	; (404d44 <system_init_flash+0x90>)
  404d14:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  404d16:	bf00      	nop
  404d18:	370c      	adds	r7, #12
  404d1a:	46bd      	mov	sp, r7
  404d1c:	bc80      	pop	{r7}
  404d1e:	4770      	bx	lr
  404d20:	01312cff 	.word	0x01312cff
  404d24:	400e0a00 	.word	0x400e0a00
  404d28:	026259ff 	.word	0x026259ff
  404d2c:	04000100 	.word	0x04000100
  404d30:	039386ff 	.word	0x039386ff
  404d34:	04000200 	.word	0x04000200
  404d38:	04c4b3ff 	.word	0x04c4b3ff
  404d3c:	04000300 	.word	0x04000300
  404d40:	05f5e0ff 	.word	0x05f5e0ff
  404d44:	04000500 	.word	0x04000500

00404d48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
  404d48:	b480      	push	{r7}
  404d4a:	b083      	sub	sp, #12
  404d4c:	af00      	add	r7, sp, #0
  404d4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  404d50:	687b      	ldr	r3, [r7, #4]
  404d52:	f103 0208 	add.w	r2, r3, #8
  404d56:	687b      	ldr	r3, [r7, #4]
  404d58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  404d5a:	687b      	ldr	r3, [r7, #4]
  404d5c:	f04f 32ff 	mov.w	r2, #4294967295
  404d60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  404d62:	687b      	ldr	r3, [r7, #4]
  404d64:	f103 0208 	add.w	r2, r3, #8
  404d68:	687b      	ldr	r3, [r7, #4]
  404d6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  404d6c:	687b      	ldr	r3, [r7, #4]
  404d6e:	f103 0208 	add.w	r2, r3, #8
  404d72:	687b      	ldr	r3, [r7, #4]
  404d74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  404d76:	687b      	ldr	r3, [r7, #4]
  404d78:	2200      	movs	r2, #0
  404d7a:	601a      	str	r2, [r3, #0]
}
  404d7c:	bf00      	nop
  404d7e:	370c      	adds	r7, #12
  404d80:	46bd      	mov	sp, r7
  404d82:	bc80      	pop	{r7}
  404d84:	4770      	bx	lr
  404d86:	bf00      	nop

00404d88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
  404d88:	b480      	push	{r7}
  404d8a:	b083      	sub	sp, #12
  404d8c:	af00      	add	r7, sp, #0
  404d8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  404d90:	687b      	ldr	r3, [r7, #4]
  404d92:	2200      	movs	r2, #0
  404d94:	611a      	str	r2, [r3, #16]
}
  404d96:	bf00      	nop
  404d98:	370c      	adds	r7, #12
  404d9a:	46bd      	mov	sp, r7
  404d9c:	bc80      	pop	{r7}
  404d9e:	4770      	bx	lr

00404da0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
  404da0:	b480      	push	{r7}
  404da2:	b085      	sub	sp, #20
  404da4:	af00      	add	r7, sp, #0
  404da6:	6078      	str	r0, [r7, #4]
  404da8:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  404daa:	687b      	ldr	r3, [r7, #4]
  404dac:	685b      	ldr	r3, [r3, #4]
  404dae:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
  404db0:	68fb      	ldr	r3, [r7, #12]
  404db2:	685a      	ldr	r2, [r3, #4]
  404db4:	683b      	ldr	r3, [r7, #0]
  404db6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  404db8:	687b      	ldr	r3, [r7, #4]
  404dba:	685a      	ldr	r2, [r3, #4]
  404dbc:	683b      	ldr	r3, [r7, #0]
  404dbe:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  404dc0:	68fb      	ldr	r3, [r7, #12]
  404dc2:	685b      	ldr	r3, [r3, #4]
  404dc4:	683a      	ldr	r2, [r7, #0]
  404dc6:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  404dc8:	68fb      	ldr	r3, [r7, #12]
  404dca:	683a      	ldr	r2, [r7, #0]
  404dcc:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  404dce:	687b      	ldr	r3, [r7, #4]
  404dd0:	683a      	ldr	r2, [r7, #0]
  404dd2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  404dd4:	683b      	ldr	r3, [r7, #0]
  404dd6:	687a      	ldr	r2, [r7, #4]
  404dd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  404dda:	687b      	ldr	r3, [r7, #4]
  404ddc:	681b      	ldr	r3, [r3, #0]
  404dde:	1c5a      	adds	r2, r3, #1
  404de0:	687b      	ldr	r3, [r7, #4]
  404de2:	601a      	str	r2, [r3, #0]
}
  404de4:	bf00      	nop
  404de6:	3714      	adds	r7, #20
  404de8:	46bd      	mov	sp, r7
  404dea:	bc80      	pop	{r7}
  404dec:	4770      	bx	lr
  404dee:	bf00      	nop

00404df0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  404df0:	b480      	push	{r7}
  404df2:	b085      	sub	sp, #20
  404df4:	af00      	add	r7, sp, #0
  404df6:	6078      	str	r0, [r7, #4]
  404df8:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  404dfa:	683b      	ldr	r3, [r7, #0]
  404dfc:	681b      	ldr	r3, [r3, #0]
  404dfe:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  404e00:	68bb      	ldr	r3, [r7, #8]
  404e02:	f1b3 3fff 	cmp.w	r3, #4294967295
  404e06:	d103      	bne.n	404e10 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  404e08:	687b      	ldr	r3, [r7, #4]
  404e0a:	691b      	ldr	r3, [r3, #16]
  404e0c:	60fb      	str	r3, [r7, #12]
  404e0e:	e00c      	b.n	404e2a <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  404e10:	687b      	ldr	r3, [r7, #4]
  404e12:	3308      	adds	r3, #8
  404e14:	60fb      	str	r3, [r7, #12]
  404e16:	e002      	b.n	404e1e <vListInsert+0x2e>
  404e18:	68fb      	ldr	r3, [r7, #12]
  404e1a:	685b      	ldr	r3, [r3, #4]
  404e1c:	60fb      	str	r3, [r7, #12]
  404e1e:	68fb      	ldr	r3, [r7, #12]
  404e20:	685b      	ldr	r3, [r3, #4]
  404e22:	681a      	ldr	r2, [r3, #0]
  404e24:	68bb      	ldr	r3, [r7, #8]
  404e26:	429a      	cmp	r2, r3
  404e28:	d9f6      	bls.n	404e18 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  404e2a:	68fb      	ldr	r3, [r7, #12]
  404e2c:	685a      	ldr	r2, [r3, #4]
  404e2e:	683b      	ldr	r3, [r7, #0]
  404e30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  404e32:	683b      	ldr	r3, [r7, #0]
  404e34:	685b      	ldr	r3, [r3, #4]
  404e36:	683a      	ldr	r2, [r7, #0]
  404e38:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  404e3a:	683b      	ldr	r3, [r7, #0]
  404e3c:	68fa      	ldr	r2, [r7, #12]
  404e3e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  404e40:	68fb      	ldr	r3, [r7, #12]
  404e42:	683a      	ldr	r2, [r7, #0]
  404e44:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  404e46:	683b      	ldr	r3, [r7, #0]
  404e48:	687a      	ldr	r2, [r7, #4]
  404e4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  404e4c:	687b      	ldr	r3, [r7, #4]
  404e4e:	681b      	ldr	r3, [r3, #0]
  404e50:	1c5a      	adds	r2, r3, #1
  404e52:	687b      	ldr	r3, [r7, #4]
  404e54:	601a      	str	r2, [r3, #0]
}
  404e56:	bf00      	nop
  404e58:	3714      	adds	r7, #20
  404e5a:	46bd      	mov	sp, r7
  404e5c:	bc80      	pop	{r7}
  404e5e:	4770      	bx	lr

00404e60 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
  404e60:	b480      	push	{r7}
  404e62:	b085      	sub	sp, #20
  404e64:	af00      	add	r7, sp, #0
  404e66:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  404e68:	687b      	ldr	r3, [r7, #4]
  404e6a:	685b      	ldr	r3, [r3, #4]
  404e6c:	687a      	ldr	r2, [r7, #4]
  404e6e:	6892      	ldr	r2, [r2, #8]
  404e70:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  404e72:	687b      	ldr	r3, [r7, #4]
  404e74:	689b      	ldr	r3, [r3, #8]
  404e76:	687a      	ldr	r2, [r7, #4]
  404e78:	6852      	ldr	r2, [r2, #4]
  404e7a:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  404e7c:	687b      	ldr	r3, [r7, #4]
  404e7e:	691b      	ldr	r3, [r3, #16]
  404e80:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  404e82:	68fb      	ldr	r3, [r7, #12]
  404e84:	685a      	ldr	r2, [r3, #4]
  404e86:	687b      	ldr	r3, [r7, #4]
  404e88:	429a      	cmp	r2, r3
  404e8a:	d103      	bne.n	404e94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  404e8c:	687b      	ldr	r3, [r7, #4]
  404e8e:	689a      	ldr	r2, [r3, #8]
  404e90:	68fb      	ldr	r3, [r7, #12]
  404e92:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  404e94:	687b      	ldr	r3, [r7, #4]
  404e96:	2200      	movs	r2, #0
  404e98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
  404e9a:	68fb      	ldr	r3, [r7, #12]
  404e9c:	681b      	ldr	r3, [r3, #0]
  404e9e:	1e5a      	subs	r2, r3, #1
  404ea0:	68fb      	ldr	r3, [r7, #12]
  404ea2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  404ea4:	68fb      	ldr	r3, [r7, #12]
  404ea6:	681b      	ldr	r3, [r3, #0]
}
  404ea8:	4618      	mov	r0, r3
  404eaa:	3714      	adds	r7, #20
  404eac:	46bd      	mov	sp, r7
  404eae:	bc80      	pop	{r7}
  404eb0:	4770      	bx	lr
  404eb2:	bf00      	nop

00404eb4 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  404eb4:	b480      	push	{r7}
  404eb6:	b083      	sub	sp, #12
  404eb8:	af00      	add	r7, sp, #0
  404eba:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  404ebc:	687b      	ldr	r3, [r7, #4]
  404ebe:	2b07      	cmp	r3, #7
  404ec0:	d825      	bhi.n	404f0e <osc_get_rate+0x5a>
  404ec2:	a201      	add	r2, pc, #4	; (adr r2, 404ec8 <osc_get_rate+0x14>)
  404ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404ec8:	00404ee9 	.word	0x00404ee9
  404ecc:	00404eef 	.word	0x00404eef
  404ed0:	00404ef5 	.word	0x00404ef5
  404ed4:	00404efb 	.word	0x00404efb
  404ed8:	00404eff 	.word	0x00404eff
  404edc:	00404f03 	.word	0x00404f03
  404ee0:	00404f07 	.word	0x00404f07
  404ee4:	00404f0b 	.word	0x00404f0b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  404ee8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  404eec:	e010      	b.n	404f10 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  404eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  404ef2:	e00d      	b.n	404f10 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  404ef4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  404ef8:	e00a      	b.n	404f10 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  404efa:	4b08      	ldr	r3, [pc, #32]	; (404f1c <osc_get_rate+0x68>)
  404efc:	e008      	b.n	404f10 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  404efe:	4b08      	ldr	r3, [pc, #32]	; (404f20 <osc_get_rate+0x6c>)
  404f00:	e006      	b.n	404f10 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  404f02:	4b08      	ldr	r3, [pc, #32]	; (404f24 <osc_get_rate+0x70>)
  404f04:	e004      	b.n	404f10 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  404f06:	4b07      	ldr	r3, [pc, #28]	; (404f24 <osc_get_rate+0x70>)
  404f08:	e002      	b.n	404f10 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  404f0a:	4b06      	ldr	r3, [pc, #24]	; (404f24 <osc_get_rate+0x70>)
  404f0c:	e000      	b.n	404f10 <osc_get_rate+0x5c>
	}

	return 0;
  404f0e:	2300      	movs	r3, #0
}
  404f10:	4618      	mov	r0, r3
  404f12:	370c      	adds	r7, #12
  404f14:	46bd      	mov	sp, r7
  404f16:	bc80      	pop	{r7}
  404f18:	4770      	bx	lr
  404f1a:	bf00      	nop
  404f1c:	003d0900 	.word	0x003d0900
  404f20:	007a1200 	.word	0x007a1200
  404f24:	00b71b00 	.word	0x00b71b00

00404f28 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  404f28:	b580      	push	{r7, lr}
  404f2a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  404f2c:	2006      	movs	r0, #6
  404f2e:	4b04      	ldr	r3, [pc, #16]	; (404f40 <sysclk_get_main_hz+0x18>)
  404f30:	4798      	blx	r3
  404f32:	4602      	mov	r2, r0
  404f34:	4613      	mov	r3, r2
  404f36:	009b      	lsls	r3, r3, #2
  404f38:	4413      	add	r3, r2
  404f3a:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  404f3c:	4618      	mov	r0, r3
  404f3e:	bd80      	pop	{r7, pc}
  404f40:	00404eb5 	.word	0x00404eb5

00404f44 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  404f44:	b580      	push	{r7, lr}
  404f46:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  404f48:	4b02      	ldr	r3, [pc, #8]	; (404f54 <sysclk_get_cpu_hz+0x10>)
  404f4a:	4798      	blx	r3
  404f4c:	4603      	mov	r3, r0
  404f4e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  404f50:	4618      	mov	r0, r3
  404f52:	bd80      	pop	{r7, pc}
  404f54:	00404f29 	.word	0x00404f29

00404f58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
  404f58:	b480      	push	{r7}
  404f5a:	b085      	sub	sp, #20
  404f5c:	af00      	add	r7, sp, #0
  404f5e:	60f8      	str	r0, [r7, #12]
  404f60:	60b9      	str	r1, [r7, #8]
  404f62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
  404f64:	68fb      	ldr	r3, [r7, #12]
  404f66:	3b04      	subs	r3, #4
  404f68:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  404f6a:	68fb      	ldr	r3, [r7, #12]
  404f6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  404f70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  404f72:	68fb      	ldr	r3, [r7, #12]
  404f74:	3b04      	subs	r3, #4
  404f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
  404f78:	68ba      	ldr	r2, [r7, #8]
  404f7a:	68fb      	ldr	r3, [r7, #12]
  404f7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  404f7e:	68fb      	ldr	r3, [r7, #12]
  404f80:	3b04      	subs	r3, #4
  404f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
  404f84:	68fb      	ldr	r3, [r7, #12]
  404f86:	2200      	movs	r2, #0
  404f88:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  404f8a:	68fb      	ldr	r3, [r7, #12]
  404f8c:	3b14      	subs	r3, #20
  404f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
  404f90:	687a      	ldr	r2, [r7, #4]
  404f92:	68fb      	ldr	r3, [r7, #12]
  404f94:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
  404f96:	68fb      	ldr	r3, [r7, #12]
  404f98:	3b20      	subs	r3, #32
  404f9a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
  404f9c:	68fb      	ldr	r3, [r7, #12]
}
  404f9e:	4618      	mov	r0, r3
  404fa0:	3714      	adds	r7, #20
  404fa2:	46bd      	mov	sp, r7
  404fa4:	bc80      	pop	{r7}
  404fa6:	4770      	bx	lr

00404fa8 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
  404fa8:	4b06      	ldr	r3, [pc, #24]	; (404fc4 <pxCurrentTCBConst2>)
  404faa:	6819      	ldr	r1, [r3, #0]
  404fac:	6808      	ldr	r0, [r1, #0]
  404fae:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  404fb2:	f380 8809 	msr	PSP, r0
  404fb6:	f04f 0000 	mov.w	r0, #0
  404fba:	f380 8811 	msr	BASEPRI, r0
  404fbe:	f04e 0e0d 	orr.w	lr, lr, #13
  404fc2:	4770      	bx	lr

00404fc4 <pxCurrentTCBConst2>:
  404fc4:	200025dc 	.word	0x200025dc
					"	bx r14							\n"
					"									\n"
					"	.align 2						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
  404fc8:	bf00      	nop
  404fca:	bf00      	nop

00404fcc <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  404fcc:	4804      	ldr	r0, [pc, #16]	; (404fe0 <prvPortStartFirstTask+0x14>)
  404fce:	6800      	ldr	r0, [r0, #0]
  404fd0:	6800      	ldr	r0, [r0, #0]
  404fd2:	f380 8808 	msr	MSP, r0
  404fd6:	b662      	cpsie	i
  404fd8:	df00      	svc	0
  404fda:	bf00      	nop
					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
					" cpsie i				\n" /* Globally enable interrupts. */
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
  404fdc:	bf00      	nop
  404fde:	0000      	.short	0x0000
  404fe0:	e000ed08 	.word	0xe000ed08

00404fe4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
  404fe4:	b580      	push	{r7, lr}
  404fe6:	af00      	add	r7, sp, #0
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  404fe8:	4a0a      	ldr	r2, [pc, #40]	; (405014 <xPortStartScheduler+0x30>)
  404fea:	4b0a      	ldr	r3, [pc, #40]	; (405014 <xPortStartScheduler+0x30>)
  404fec:	681b      	ldr	r3, [r3, #0]
  404fee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  404ff2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  404ff4:	4a07      	ldr	r2, [pc, #28]	; (405014 <xPortStartScheduler+0x30>)
  404ff6:	4b07      	ldr	r3, [pc, #28]	; (405014 <xPortStartScheduler+0x30>)
  404ff8:	681b      	ldr	r3, [r3, #0]
  404ffa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
  404ffe:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  405000:	4b05      	ldr	r3, [pc, #20]	; (405018 <xPortStartScheduler+0x34>)
  405002:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  405004:	4b05      	ldr	r3, [pc, #20]	; (40501c <xPortStartScheduler+0x38>)
  405006:	2200      	movs	r2, #0
  405008:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  40500a:	4b05      	ldr	r3, [pc, #20]	; (405020 <xPortStartScheduler+0x3c>)
  40500c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
  40500e:	2300      	movs	r3, #0
}
  405010:	4618      	mov	r0, r3
  405012:	bd80      	pop	{r7, pc}
  405014:	e000ed20 	.word	0xe000ed20
  405018:	00405111 	.word	0x00405111
  40501c:	20000030 	.word	0x20000030
  405020:	00404fcd 	.word	0x00404fcd

00405024 <vPortYieldFromISR>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
  405024:	b480      	push	{r7}
  405026:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  405028:	4b03      	ldr	r3, [pc, #12]	; (405038 <vPortYieldFromISR+0x14>)
  40502a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40502e:	601a      	str	r2, [r3, #0]
}
  405030:	bf00      	nop
  405032:	46bd      	mov	sp, r7
  405034:	bc80      	pop	{r7}
  405036:	4770      	bx	lr
  405038:	e000ed04 	.word	0xe000ed04

0040503c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  40503c:	b580      	push	{r7, lr}
  40503e:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
  405040:	4b04      	ldr	r3, [pc, #16]	; (405054 <vPortEnterCritical+0x18>)
  405042:	4798      	blx	r3
	uxCriticalNesting++;
  405044:	4b04      	ldr	r3, [pc, #16]	; (405058 <vPortEnterCritical+0x1c>)
  405046:	681b      	ldr	r3, [r3, #0]
  405048:	3301      	adds	r3, #1
  40504a:	4a03      	ldr	r2, [pc, #12]	; (405058 <vPortEnterCritical+0x1c>)
  40504c:	6013      	str	r3, [r2, #0]
}
  40504e:	bf00      	nop
  405050:	bd80      	pop	{r7, pc}
  405052:	bf00      	nop
  405054:	00405085 	.word	0x00405085
  405058:	20000030 	.word	0x20000030

0040505c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  40505c:	b580      	push	{r7, lr}
  40505e:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
  405060:	4b06      	ldr	r3, [pc, #24]	; (40507c <vPortExitCritical+0x20>)
  405062:	681b      	ldr	r3, [r3, #0]
  405064:	3b01      	subs	r3, #1
  405066:	4a05      	ldr	r2, [pc, #20]	; (40507c <vPortExitCritical+0x20>)
  405068:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  40506a:	4b04      	ldr	r3, [pc, #16]	; (40507c <vPortExitCritical+0x20>)
  40506c:	681b      	ldr	r3, [r3, #0]
  40506e:	2b00      	cmp	r3, #0
  405070:	d102      	bne.n	405078 <vPortExitCritical+0x1c>
	{
		portENABLE_INTERRUPTS();
  405072:	2000      	movs	r0, #0
  405074:	4b02      	ldr	r3, [pc, #8]	; (405080 <vPortExitCritical+0x24>)
  405076:	4798      	blx	r3
	}
}
  405078:	bf00      	nop
  40507a:	bd80      	pop	{r7, pc}
  40507c:	20000030 	.word	0x20000030
  405080:	00405099 	.word	0x00405099

00405084 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
  405084:	f3ef 8011 	mrs	r0, BASEPRI
  405088:	f04f 01a0 	mov.w	r1, #160	; 0xa0
  40508c:	f381 8811 	msr	BASEPRI, r1
  405090:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
  405092:	2300      	movs	r3, #0
}
  405094:	4618      	mov	r0, r3
  405096:	bf00      	nop

00405098 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
  405098:	f380 8811 	msr	BASEPRI, r0
  40509c:	4770      	bx	lr
		:::"r0"														\
	);
	
	/* Just to avoid compiler warnings. */
	( void ) ulNewMaskValue;
}
  40509e:	bf00      	nop

004050a0 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
  4050a0:	f3ef 8009 	mrs	r0, PSP
  4050a4:	4b0c      	ldr	r3, [pc, #48]	; (4050d8 <pxCurrentTCBConst>)
  4050a6:	681a      	ldr	r2, [r3, #0]
  4050a8:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4050ac:	6010      	str	r0, [r2, #0]
  4050ae:	e92d 4008 	stmdb	sp!, {r3, lr}
  4050b2:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  4050b6:	f380 8811 	msr	BASEPRI, r0
  4050ba:	f001 f829 	bl	406110 <vTaskSwitchContext>
  4050be:	f04f 0000 	mov.w	r0, #0
  4050c2:	f380 8811 	msr	BASEPRI, r0
  4050c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  4050ca:	6819      	ldr	r1, [r3, #0]
  4050cc:	6808      	ldr	r0, [r1, #0]
  4050ce:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4050d2:	f380 8809 	msr	PSP, r0
  4050d6:	4770      	bx	lr

004050d8 <pxCurrentTCBConst>:
  4050d8:	200025dc 	.word	0x200025dc
	"										\n"
	"	.align 2							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
  4050dc:	bf00      	nop
  4050de:	bf00      	nop

004050e0 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
  4050e0:	b580      	push	{r7, lr}
  4050e2:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4050e4:	4b06      	ldr	r3, [pc, #24]	; (405100 <SysTick_Handler+0x20>)
  4050e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4050ea:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
  4050ec:	4b05      	ldr	r3, [pc, #20]	; (405104 <SysTick_Handler+0x24>)
  4050ee:	4798      	blx	r3
	{
		vTaskIncrementTick();
  4050f0:	4b05      	ldr	r3, [pc, #20]	; (405108 <SysTick_Handler+0x28>)
  4050f2:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  4050f4:	2000      	movs	r0, #0
  4050f6:	4b05      	ldr	r3, [pc, #20]	; (40510c <SysTick_Handler+0x2c>)
  4050f8:	4798      	blx	r3
}
  4050fa:	bf00      	nop
  4050fc:	bd80      	pop	{r7, pc}
  4050fe:	bf00      	nop
  405100:	e000ed04 	.word	0xe000ed04
  405104:	00405085 	.word	0x00405085
  405108:	00405fc5 	.word	0x00405fc5
  40510c:	00405099 	.word	0x00405099

00405110 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
  405110:	b598      	push	{r3, r4, r7, lr}
  405112:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
  405114:	4c07      	ldr	r4, [pc, #28]	; (405134 <vPortSetupTimerInterrupt+0x24>)
  405116:	4b08      	ldr	r3, [pc, #32]	; (405138 <vPortSetupTimerInterrupt+0x28>)
  405118:	4798      	blx	r3
  40511a:	4602      	mov	r2, r0
  40511c:	4b07      	ldr	r3, [pc, #28]	; (40513c <vPortSetupTimerInterrupt+0x2c>)
  40511e:	fba3 2302 	umull	r2, r3, r3, r2
  405122:	099b      	lsrs	r3, r3, #6
  405124:	3b01      	subs	r3, #1
  405126:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
  405128:	4b05      	ldr	r3, [pc, #20]	; (405140 <vPortSetupTimerInterrupt+0x30>)
  40512a:	2207      	movs	r2, #7
  40512c:	601a      	str	r2, [r3, #0]
}
  40512e:	bf00      	nop
  405130:	bd98      	pop	{r3, r4, r7, pc}
  405132:	bf00      	nop
  405134:	e000e014 	.word	0xe000e014
  405138:	00404f45 	.word	0x00404f45
  40513c:	51eb851f 	.word	0x51eb851f
  405140:	e000e010 	.word	0xe000e010

00405144 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
  405144:	b580      	push	{r7, lr}
  405146:	b086      	sub	sp, #24
  405148:	af00      	add	r7, sp, #0
  40514a:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
  40514c:	2300      	movs	r3, #0
  40514e:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
  405150:	4b37      	ldr	r3, [pc, #220]	; (405230 <pvPortMalloc+0xec>)
  405152:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  405154:	4b37      	ldr	r3, [pc, #220]	; (405234 <pvPortMalloc+0xf0>)
  405156:	681b      	ldr	r3, [r3, #0]
  405158:	2b00      	cmp	r3, #0
  40515a:	d101      	bne.n	405160 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
  40515c:	4b36      	ldr	r3, [pc, #216]	; (405238 <pvPortMalloc+0xf4>)
  40515e:	4798      	blx	r3
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
  405160:	687b      	ldr	r3, [r7, #4]
  405162:	2b00      	cmp	r3, #0
  405164:	d00e      	beq.n	405184 <pvPortMalloc+0x40>
		{
			xWantedSize += heapSTRUCT_SIZE;
  405166:	2310      	movs	r3, #16
  405168:	461a      	mov	r2, r3
  40516a:	687b      	ldr	r3, [r7, #4]
  40516c:	4413      	add	r3, r2
  40516e:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  405170:	687b      	ldr	r3, [r7, #4]
  405172:	f003 0307 	and.w	r3, r3, #7
  405176:	2b00      	cmp	r3, #0
  405178:	d004      	beq.n	405184 <pvPortMalloc+0x40>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  40517a:	687b      	ldr	r3, [r7, #4]
  40517c:	f023 0307 	bic.w	r3, r3, #7
  405180:	3308      	adds	r3, #8
  405182:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
  405184:	687b      	ldr	r3, [r7, #4]
  405186:	2b00      	cmp	r3, #0
  405188:	d045      	beq.n	405216 <pvPortMalloc+0xd2>
  40518a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40518e:	687b      	ldr	r3, [r7, #4]
  405190:	4293      	cmp	r3, r2
  405192:	d240      	bcs.n	405216 <pvPortMalloc+0xd2>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
  405194:	4b29      	ldr	r3, [pc, #164]	; (40523c <pvPortMalloc+0xf8>)
  405196:	613b      	str	r3, [r7, #16]
			pxBlock = xStart.pxNextFreeBlock;
  405198:	4b28      	ldr	r3, [pc, #160]	; (40523c <pvPortMalloc+0xf8>)
  40519a:	681b      	ldr	r3, [r3, #0]
  40519c:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  40519e:	e004      	b.n	4051aa <pvPortMalloc+0x66>
			{
				pxPreviousBlock = pxBlock;
  4051a0:	697b      	ldr	r3, [r7, #20]
  4051a2:	613b      	str	r3, [r7, #16]
				pxBlock = pxBlock->pxNextFreeBlock;
  4051a4:	697b      	ldr	r3, [r7, #20]
  4051a6:	681b      	ldr	r3, [r3, #0]
  4051a8:	617b      	str	r3, [r7, #20]
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  4051aa:	697b      	ldr	r3, [r7, #20]
  4051ac:	685a      	ldr	r2, [r3, #4]
  4051ae:	687b      	ldr	r3, [r7, #4]
  4051b0:	429a      	cmp	r2, r3
  4051b2:	d203      	bcs.n	4051bc <pvPortMalloc+0x78>
  4051b4:	697b      	ldr	r3, [r7, #20]
  4051b6:	681b      	ldr	r3, [r3, #0]
  4051b8:	2b00      	cmp	r3, #0
  4051ba:	d1f1      	bne.n	4051a0 <pvPortMalloc+0x5c>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
  4051bc:	4b1d      	ldr	r3, [pc, #116]	; (405234 <pvPortMalloc+0xf0>)
  4051be:	681b      	ldr	r3, [r3, #0]
  4051c0:	697a      	ldr	r2, [r7, #20]
  4051c2:	429a      	cmp	r2, r3
  4051c4:	d027      	beq.n	405216 <pvPortMalloc+0xd2>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  4051c6:	693b      	ldr	r3, [r7, #16]
  4051c8:	681b      	ldr	r3, [r3, #0]
  4051ca:	2210      	movs	r2, #16
  4051cc:	4413      	add	r3, r2
  4051ce:	60fb      	str	r3, [r7, #12]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  4051d0:	697b      	ldr	r3, [r7, #20]
  4051d2:	681a      	ldr	r2, [r3, #0]
  4051d4:	693b      	ldr	r3, [r7, #16]
  4051d6:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  4051d8:	697b      	ldr	r3, [r7, #20]
  4051da:	685a      	ldr	r2, [r3, #4]
  4051dc:	687b      	ldr	r3, [r7, #4]
  4051de:	1ad3      	subs	r3, r2, r3
  4051e0:	2210      	movs	r2, #16
  4051e2:	0052      	lsls	r2, r2, #1
  4051e4:	4293      	cmp	r3, r2
  4051e6:	d90f      	bls.n	405208 <pvPortMalloc+0xc4>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
  4051e8:	697a      	ldr	r2, [r7, #20]
  4051ea:	687b      	ldr	r3, [r7, #4]
  4051ec:	4413      	add	r3, r2
  4051ee:	60bb      	str	r3, [r7, #8]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  4051f0:	697b      	ldr	r3, [r7, #20]
  4051f2:	685a      	ldr	r2, [r3, #4]
  4051f4:	687b      	ldr	r3, [r7, #4]
  4051f6:	1ad2      	subs	r2, r2, r3
  4051f8:	68bb      	ldr	r3, [r7, #8]
  4051fa:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
  4051fc:	697b      	ldr	r3, [r7, #20]
  4051fe:	687a      	ldr	r2, [r7, #4]
  405200:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  405202:	68b8      	ldr	r0, [r7, #8]
  405204:	4b0e      	ldr	r3, [pc, #56]	; (405240 <pvPortMalloc+0xfc>)
  405206:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
  405208:	4b0e      	ldr	r3, [pc, #56]	; (405244 <pvPortMalloc+0x100>)
  40520a:	681a      	ldr	r2, [r3, #0]
  40520c:	697b      	ldr	r3, [r7, #20]
  40520e:	685b      	ldr	r3, [r3, #4]
  405210:	1ad3      	subs	r3, r2, r3
  405212:	4a0c      	ldr	r2, [pc, #48]	; (405244 <pvPortMalloc+0x100>)
  405214:	6013      	str	r3, [r2, #0]
			}
		}
	}
	xTaskResumeAll();
  405216:	4b0c      	ldr	r3, [pc, #48]	; (405248 <pvPortMalloc+0x104>)
  405218:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  40521a:	68fb      	ldr	r3, [r7, #12]
  40521c:	2b00      	cmp	r3, #0
  40521e:	d101      	bne.n	405224 <pvPortMalloc+0xe0>
		{
			vApplicationMallocFailedHook();
  405220:	4b0a      	ldr	r3, [pc, #40]	; (40524c <pvPortMalloc+0x108>)
  405222:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
  405224:	68fb      	ldr	r3, [r7, #12]
}
  405226:	4618      	mov	r0, r3
  405228:	3718      	adds	r7, #24
  40522a:	46bd      	mov	sp, r7
  40522c:	bd80      	pop	{r7, pc}
  40522e:	bf00      	nop
  405230:	00405e5d 	.word	0x00405e5d
  405234:	200025d8 	.word	0x200025d8
  405238:	004052a5 	.word	0x004052a5
  40523c:	200025d0 	.word	0x200025d0
  405240:	00405335 	.word	0x00405335
  405244:	20000034 	.word	0x20000034
  405248:	00405e79 	.word	0x00405e79
  40524c:	004074cd 	.word	0x004074cd

00405250 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  405250:	b580      	push	{r7, lr}
  405252:	b084      	sub	sp, #16
  405254:	af00      	add	r7, sp, #0
  405256:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
  405258:	687b      	ldr	r3, [r7, #4]
  40525a:	60fb      	str	r3, [r7, #12]
xBlockLink *pxLink;

	if( pv != NULL )
  40525c:	687b      	ldr	r3, [r7, #4]
  40525e:	2b00      	cmp	r3, #0
  405260:	d014      	beq.n	40528c <vPortFree+0x3c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
  405262:	2310      	movs	r3, #16
  405264:	425b      	negs	r3, r3
  405266:	68fa      	ldr	r2, [r7, #12]
  405268:	4413      	add	r3, r2
  40526a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
  40526c:	68fb      	ldr	r3, [r7, #12]
  40526e:	60bb      	str	r3, [r7, #8]

		vTaskSuspendAll();
  405270:	4b08      	ldr	r3, [pc, #32]	; (405294 <vPortFree+0x44>)
  405272:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
  405274:	68bb      	ldr	r3, [r7, #8]
  405276:	685a      	ldr	r2, [r3, #4]
  405278:	4b07      	ldr	r3, [pc, #28]	; (405298 <vPortFree+0x48>)
  40527a:	681b      	ldr	r3, [r3, #0]
  40527c:	4413      	add	r3, r2
  40527e:	4a06      	ldr	r2, [pc, #24]	; (405298 <vPortFree+0x48>)
  405280:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
  405282:	68b8      	ldr	r0, [r7, #8]
  405284:	4b05      	ldr	r3, [pc, #20]	; (40529c <vPortFree+0x4c>)
  405286:	4798      	blx	r3
		}
		xTaskResumeAll();
  405288:	4b05      	ldr	r3, [pc, #20]	; (4052a0 <vPortFree+0x50>)
  40528a:	4798      	blx	r3
	}
}
  40528c:	bf00      	nop
  40528e:	3710      	adds	r7, #16
  405290:	46bd      	mov	sp, r7
  405292:	bd80      	pop	{r7, pc}
  405294:	00405e5d 	.word	0x00405e5d
  405298:	20000034 	.word	0x20000034
  40529c:	00405335 	.word	0x00405335
  4052a0:	00405e79 	.word	0x00405e79

004052a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
  4052a4:	b580      	push	{r7, lr}
  4052a6:	b082      	sub	sp, #8
  4052a8:	af00      	add	r7, sp, #0
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
  4052aa:	4b1d      	ldr	r3, [pc, #116]	; (405320 <prvHeapInit+0x7c>)
  4052ac:	4a1d      	ldr	r2, [pc, #116]	; (405324 <prvHeapInit+0x80>)
  4052ae:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
  4052b0:	4b1b      	ldr	r3, [pc, #108]	; (405320 <prvHeapInit+0x7c>)
  4052b2:	2200      	movs	r2, #0
  4052b4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
  4052b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4052ba:	4b1a      	ldr	r3, [pc, #104]	; (405324 <prvHeapInit+0x80>)
  4052bc:	4413      	add	r3, r2
  4052be:	607b      	str	r3, [r7, #4]
	pucHeapEnd -= heapSTRUCT_SIZE;
  4052c0:	2310      	movs	r3, #16
  4052c2:	425b      	negs	r3, r3
  4052c4:	687a      	ldr	r2, [r7, #4]
  4052c6:	4413      	add	r3, r2
  4052c8:	607b      	str	r3, [r7, #4]
	pxEnd = ( void * ) pucHeapEnd;
  4052ca:	4a17      	ldr	r2, [pc, #92]	; (405328 <prvHeapInit+0x84>)
  4052cc:	687b      	ldr	r3, [r7, #4]
  4052ce:	6013      	str	r3, [r2, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
  4052d0:	4b15      	ldr	r3, [pc, #84]	; (405328 <prvHeapInit+0x84>)
  4052d2:	681b      	ldr	r3, [r3, #0]
  4052d4:	f003 0307 	and.w	r3, r3, #7
  4052d8:	2b00      	cmp	r3, #0
  4052da:	d003      	beq.n	4052e4 <prvHeapInit+0x40>
  4052dc:	4b13      	ldr	r3, [pc, #76]	; (40532c <prvHeapInit+0x88>)
  4052de:	4798      	blx	r3
  4052e0:	bf00      	nop
  4052e2:	e7fd      	b.n	4052e0 <prvHeapInit+0x3c>
	pxEnd->xBlockSize = 0;
  4052e4:	4b10      	ldr	r3, [pc, #64]	; (405328 <prvHeapInit+0x84>)
  4052e6:	681b      	ldr	r3, [r3, #0]
  4052e8:	2200      	movs	r2, #0
  4052ea:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
  4052ec:	4b0e      	ldr	r3, [pc, #56]	; (405328 <prvHeapInit+0x84>)
  4052ee:	681b      	ldr	r3, [r3, #0]
  4052f0:	2200      	movs	r2, #0
  4052f2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
  4052f4:	4b0b      	ldr	r3, [pc, #44]	; (405324 <prvHeapInit+0x80>)
  4052f6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
  4052f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4052fc:	2210      	movs	r2, #16
  4052fe:	1a9a      	subs	r2, r3, r2
  405300:	683b      	ldr	r3, [r7, #0]
  405302:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  405304:	4b08      	ldr	r3, [pc, #32]	; (405328 <prvHeapInit+0x84>)
  405306:	681a      	ldr	r2, [r3, #0]
  405308:	683b      	ldr	r3, [r7, #0]
  40530a:	601a      	str	r2, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
  40530c:	4b08      	ldr	r3, [pc, #32]	; (405330 <prvHeapInit+0x8c>)
  40530e:	681b      	ldr	r3, [r3, #0]
  405310:	2210      	movs	r2, #16
  405312:	1a9b      	subs	r3, r3, r2
  405314:	4a06      	ldr	r2, [pc, #24]	; (405330 <prvHeapInit+0x8c>)
  405316:	6013      	str	r3, [r2, #0]
}
  405318:	bf00      	nop
  40531a:	3708      	adds	r7, #8
  40531c:	46bd      	mov	sp, r7
  40531e:	bd80      	pop	{r7, pc}
  405320:	200025d0 	.word	0x200025d0
  405324:	200005d0 	.word	0x200005d0
  405328:	200025d8 	.word	0x200025d8
  40532c:	00405085 	.word	0x00405085
  405330:	20000034 	.word	0x20000034

00405334 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
  405334:	b480      	push	{r7}
  405336:	b085      	sub	sp, #20
  405338:	af00      	add	r7, sp, #0
  40533a:	6078      	str	r0, [r7, #4]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  40533c:	4b27      	ldr	r3, [pc, #156]	; (4053dc <prvInsertBlockIntoFreeList+0xa8>)
  40533e:	60fb      	str	r3, [r7, #12]
  405340:	e002      	b.n	405348 <prvInsertBlockIntoFreeList+0x14>
  405342:	68fb      	ldr	r3, [r7, #12]
  405344:	681b      	ldr	r3, [r3, #0]
  405346:	60fb      	str	r3, [r7, #12]
  405348:	68fb      	ldr	r3, [r7, #12]
  40534a:	681a      	ldr	r2, [r3, #0]
  40534c:	687b      	ldr	r3, [r7, #4]
  40534e:	429a      	cmp	r2, r3
  405350:	d3f7      	bcc.n	405342 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
  405352:	68fb      	ldr	r3, [r7, #12]
  405354:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
  405356:	68fb      	ldr	r3, [r7, #12]
  405358:	685b      	ldr	r3, [r3, #4]
  40535a:	68ba      	ldr	r2, [r7, #8]
  40535c:	441a      	add	r2, r3
  40535e:	687b      	ldr	r3, [r7, #4]
  405360:	429a      	cmp	r2, r3
  405362:	d108      	bne.n	405376 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  405364:	68fb      	ldr	r3, [r7, #12]
  405366:	685a      	ldr	r2, [r3, #4]
  405368:	687b      	ldr	r3, [r7, #4]
  40536a:	685b      	ldr	r3, [r3, #4]
  40536c:	441a      	add	r2, r3
  40536e:	68fb      	ldr	r3, [r7, #12]
  405370:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
  405372:	68fb      	ldr	r3, [r7, #12]
  405374:	607b      	str	r3, [r7, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
  405376:	687b      	ldr	r3, [r7, #4]
  405378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
  40537a:	687b      	ldr	r3, [r7, #4]
  40537c:	685b      	ldr	r3, [r3, #4]
  40537e:	68ba      	ldr	r2, [r7, #8]
  405380:	441a      	add	r2, r3
  405382:	68fb      	ldr	r3, [r7, #12]
  405384:	681b      	ldr	r3, [r3, #0]
  405386:	429a      	cmp	r2, r3
  405388:	d118      	bne.n	4053bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  40538a:	68fb      	ldr	r3, [r7, #12]
  40538c:	681a      	ldr	r2, [r3, #0]
  40538e:	4b14      	ldr	r3, [pc, #80]	; (4053e0 <prvInsertBlockIntoFreeList+0xac>)
  405390:	681b      	ldr	r3, [r3, #0]
  405392:	429a      	cmp	r2, r3
  405394:	d00d      	beq.n	4053b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  405396:	687b      	ldr	r3, [r7, #4]
  405398:	685a      	ldr	r2, [r3, #4]
  40539a:	68fb      	ldr	r3, [r7, #12]
  40539c:	681b      	ldr	r3, [r3, #0]
  40539e:	685b      	ldr	r3, [r3, #4]
  4053a0:	441a      	add	r2, r3
  4053a2:	687b      	ldr	r3, [r7, #4]
  4053a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  4053a6:	68fb      	ldr	r3, [r7, #12]
  4053a8:	681b      	ldr	r3, [r3, #0]
  4053aa:	681a      	ldr	r2, [r3, #0]
  4053ac:	687b      	ldr	r3, [r7, #4]
  4053ae:	601a      	str	r2, [r3, #0]
  4053b0:	e008      	b.n	4053c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  4053b2:	4b0b      	ldr	r3, [pc, #44]	; (4053e0 <prvInsertBlockIntoFreeList+0xac>)
  4053b4:	681a      	ldr	r2, [r3, #0]
  4053b6:	687b      	ldr	r3, [r7, #4]
  4053b8:	601a      	str	r2, [r3, #0]
  4053ba:	e003      	b.n	4053c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
  4053bc:	68fb      	ldr	r3, [r7, #12]
  4053be:	681a      	ldr	r2, [r3, #0]
  4053c0:	687b      	ldr	r3, [r7, #4]
  4053c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  4053c4:	68fa      	ldr	r2, [r7, #12]
  4053c6:	687b      	ldr	r3, [r7, #4]
  4053c8:	429a      	cmp	r2, r3
  4053ca:	d002      	beq.n	4053d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  4053cc:	68fb      	ldr	r3, [r7, #12]
  4053ce:	687a      	ldr	r2, [r7, #4]
  4053d0:	601a      	str	r2, [r3, #0]
	}
}
  4053d2:	bf00      	nop
  4053d4:	3714      	adds	r7, #20
  4053d6:	46bd      	mov	sp, r7
  4053d8:	bc80      	pop	{r7}
  4053da:	4770      	bx	lr
  4053dc:	200025d0 	.word	0x200025d0
  4053e0:	200025d8 	.word	0x200025d8

004053e4 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
  4053e4:	b580      	push	{r7, lr}
  4053e6:	b082      	sub	sp, #8
  4053e8:	af00      	add	r7, sp, #0
  4053ea:	6078      	str	r0, [r7, #4]
  4053ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxQueue );
  4053ee:	687b      	ldr	r3, [r7, #4]
  4053f0:	2b00      	cmp	r3, #0
  4053f2:	d103      	bne.n	4053fc <xQueueGenericReset+0x18>
  4053f4:	4b27      	ldr	r3, [pc, #156]	; (405494 <xQueueGenericReset+0xb0>)
  4053f6:	4798      	blx	r3
  4053f8:	bf00      	nop
  4053fa:	e7fd      	b.n	4053f8 <xQueueGenericReset+0x14>

	taskENTER_CRITICAL();
  4053fc:	4b26      	ldr	r3, [pc, #152]	; (405498 <xQueueGenericReset+0xb4>)
  4053fe:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  405400:	687b      	ldr	r3, [r7, #4]
  405402:	681a      	ldr	r2, [r3, #0]
  405404:	687b      	ldr	r3, [r7, #4]
  405406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  405408:	6879      	ldr	r1, [r7, #4]
  40540a:	6c09      	ldr	r1, [r1, #64]	; 0x40
  40540c:	fb01 f303 	mul.w	r3, r1, r3
  405410:	441a      	add	r2, r3
  405412:	687b      	ldr	r3, [r7, #4]
  405414:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  405416:	687b      	ldr	r3, [r7, #4]
  405418:	2200      	movs	r2, #0
  40541a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  40541c:	687b      	ldr	r3, [r7, #4]
  40541e:	681a      	ldr	r2, [r3, #0]
  405420:	687b      	ldr	r3, [r7, #4]
  405422:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
  405424:	687b      	ldr	r3, [r7, #4]
  405426:	681a      	ldr	r2, [r3, #0]
  405428:	687b      	ldr	r3, [r7, #4]
  40542a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40542c:	3b01      	subs	r3, #1
  40542e:	6879      	ldr	r1, [r7, #4]
  405430:	6c09      	ldr	r1, [r1, #64]	; 0x40
  405432:	fb01 f303 	mul.w	r3, r1, r3
  405436:	441a      	add	r2, r3
  405438:	687b      	ldr	r3, [r7, #4]
  40543a:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  40543c:	687b      	ldr	r3, [r7, #4]
  40543e:	f04f 32ff 	mov.w	r2, #4294967295
  405442:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  405444:	687b      	ldr	r3, [r7, #4]
  405446:	f04f 32ff 	mov.w	r2, #4294967295
  40544a:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  40544c:	683b      	ldr	r3, [r7, #0]
  40544e:	2b00      	cmp	r3, #0
  405450:	d10e      	bne.n	405470 <xQueueGenericReset+0x8c>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  405452:	687b      	ldr	r3, [r7, #4]
  405454:	691b      	ldr	r3, [r3, #16]
  405456:	2b00      	cmp	r3, #0
  405458:	d014      	beq.n	405484 <xQueueGenericReset+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40545a:	687b      	ldr	r3, [r7, #4]
  40545c:	3310      	adds	r3, #16
  40545e:	4618      	mov	r0, r3
  405460:	4b0e      	ldr	r3, [pc, #56]	; (40549c <xQueueGenericReset+0xb8>)
  405462:	4798      	blx	r3
  405464:	4603      	mov	r3, r0
  405466:	2b01      	cmp	r3, #1
  405468:	d10c      	bne.n	405484 <xQueueGenericReset+0xa0>
				{
					portYIELD_WITHIN_API();
  40546a:	4b0d      	ldr	r3, [pc, #52]	; (4054a0 <xQueueGenericReset+0xbc>)
  40546c:	4798      	blx	r3
  40546e:	e009      	b.n	405484 <xQueueGenericReset+0xa0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  405470:	687b      	ldr	r3, [r7, #4]
  405472:	3310      	adds	r3, #16
  405474:	4618      	mov	r0, r3
  405476:	4b0b      	ldr	r3, [pc, #44]	; (4054a4 <xQueueGenericReset+0xc0>)
  405478:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  40547a:	687b      	ldr	r3, [r7, #4]
  40547c:	3324      	adds	r3, #36	; 0x24
  40547e:	4618      	mov	r0, r3
  405480:	4b08      	ldr	r3, [pc, #32]	; (4054a4 <xQueueGenericReset+0xc0>)
  405482:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
  405484:	4b08      	ldr	r3, [pc, #32]	; (4054a8 <xQueueGenericReset+0xc4>)
  405486:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
  405488:	2301      	movs	r3, #1
}
  40548a:	4618      	mov	r0, r3
  40548c:	3708      	adds	r7, #8
  40548e:	46bd      	mov	sp, r7
  405490:	bd80      	pop	{r7, pc}
  405492:	bf00      	nop
  405494:	00405085 	.word	0x00405085
  405498:	0040503d 	.word	0x0040503d
  40549c:	004062f5 	.word	0x004062f5
  4054a0:	00405025 	.word	0x00405025
  4054a4:	00404d49 	.word	0x00404d49
  4054a8:	0040505d 	.word	0x0040505d

004054ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
  4054ac:	b580      	push	{r7, lr}
  4054ae:	b088      	sub	sp, #32
  4054b0:	af00      	add	r7, sp, #0
  4054b2:	60f8      	str	r0, [r7, #12]
  4054b4:	60b9      	str	r1, [r7, #8]
  4054b6:	4613      	mov	r3, r2
  4054b8:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
  4054ba:	2300      	movs	r3, #0
  4054bc:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  4054be:	68fb      	ldr	r3, [r7, #12]
  4054c0:	2b00      	cmp	r3, #0
  4054c2:	d026      	beq.n	405512 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  4054c4:	204c      	movs	r0, #76	; 0x4c
  4054c6:	4b19      	ldr	r3, [pc, #100]	; (40552c <xQueueGenericCreate+0x80>)
  4054c8:	4798      	blx	r3
  4054ca:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
  4054cc:	69bb      	ldr	r3, [r7, #24]
  4054ce:	2b00      	cmp	r3, #0
  4054d0:	d01f      	beq.n	405512 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  4054d2:	68fb      	ldr	r3, [r7, #12]
  4054d4:	68ba      	ldr	r2, [r7, #8]
  4054d6:	fb02 f303 	mul.w	r3, r2, r3
  4054da:	3301      	adds	r3, #1
  4054dc:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  4054de:	6978      	ldr	r0, [r7, #20]
  4054e0:	4b12      	ldr	r3, [pc, #72]	; (40552c <xQueueGenericCreate+0x80>)
  4054e2:	4798      	blx	r3
  4054e4:	4602      	mov	r2, r0
  4054e6:	69bb      	ldr	r3, [r7, #24]
  4054e8:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
  4054ea:	69bb      	ldr	r3, [r7, #24]
  4054ec:	681b      	ldr	r3, [r3, #0]
  4054ee:	2b00      	cmp	r3, #0
  4054f0:	d00c      	beq.n	40550c <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
  4054f2:	69bb      	ldr	r3, [r7, #24]
  4054f4:	68fa      	ldr	r2, [r7, #12]
  4054f6:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  4054f8:	69bb      	ldr	r3, [r7, #24]
  4054fa:	68ba      	ldr	r2, [r7, #8]
  4054fc:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
  4054fe:	2101      	movs	r1, #1
  405500:	69b8      	ldr	r0, [r7, #24]
  405502:	4b0b      	ldr	r3, [pc, #44]	; (405530 <xQueueGenericCreate+0x84>)
  405504:	4798      	blx	r3
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
  405506:	69bb      	ldr	r3, [r7, #24]
  405508:	61fb      	str	r3, [r7, #28]
  40550a:	e002      	b.n	405512 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
  40550c:	69b8      	ldr	r0, [r7, #24]
  40550e:	4b09      	ldr	r3, [pc, #36]	; (405534 <xQueueGenericCreate+0x88>)
  405510:	4798      	blx	r3
			}
		}
	}

	configASSERT( xReturn );
  405512:	69fb      	ldr	r3, [r7, #28]
  405514:	2b00      	cmp	r3, #0
  405516:	d103      	bne.n	405520 <xQueueGenericCreate+0x74>
  405518:	4b07      	ldr	r3, [pc, #28]	; (405538 <xQueueGenericCreate+0x8c>)
  40551a:	4798      	blx	r3
  40551c:	bf00      	nop
  40551e:	e7fd      	b.n	40551c <xQueueGenericCreate+0x70>

	return xReturn;
  405520:	69fb      	ldr	r3, [r7, #28]
}
  405522:	4618      	mov	r0, r3
  405524:	3720      	adds	r7, #32
  405526:	46bd      	mov	sp, r7
  405528:	bd80      	pop	{r7, pc}
  40552a:	bf00      	nop
  40552c:	00405145 	.word	0x00405145
  405530:	004053e5 	.word	0x004053e5
  405534:	00405251 	.word	0x00405251
  405538:	00405085 	.word	0x00405085

0040553c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  40553c:	b580      	push	{r7, lr}
  40553e:	b088      	sub	sp, #32
  405540:	af00      	add	r7, sp, #0
  405542:	60f8      	str	r0, [r7, #12]
  405544:	60b9      	str	r1, [r7, #8]
  405546:	607a      	str	r2, [r7, #4]
  405548:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  40554a:	2300      	movs	r3, #0
  40554c:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
  40554e:	68fb      	ldr	r3, [r7, #12]
  405550:	2b00      	cmp	r3, #0
  405552:	d103      	bne.n	40555c <xQueueGenericSend+0x20>
  405554:	4b46      	ldr	r3, [pc, #280]	; (405670 <xQueueGenericSend+0x134>)
  405556:	4798      	blx	r3
  405558:	bf00      	nop
  40555a:	e7fd      	b.n	405558 <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  40555c:	68bb      	ldr	r3, [r7, #8]
  40555e:	2b00      	cmp	r3, #0
  405560:	d103      	bne.n	40556a <xQueueGenericSend+0x2e>
  405562:	68fb      	ldr	r3, [r7, #12]
  405564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405566:	2b00      	cmp	r3, #0
  405568:	d101      	bne.n	40556e <xQueueGenericSend+0x32>
  40556a:	2301      	movs	r3, #1
  40556c:	e000      	b.n	405570 <xQueueGenericSend+0x34>
  40556e:	2300      	movs	r3, #0
  405570:	2b00      	cmp	r3, #0
  405572:	d103      	bne.n	40557c <xQueueGenericSend+0x40>
  405574:	4b3e      	ldr	r3, [pc, #248]	; (405670 <xQueueGenericSend+0x134>)
  405576:	4798      	blx	r3
  405578:	bf00      	nop
  40557a:	e7fd      	b.n	405578 <xQueueGenericSend+0x3c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  40557c:	4b3d      	ldr	r3, [pc, #244]	; (405674 <xQueueGenericSend+0x138>)
  40557e:	4798      	blx	r3
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  405580:	68fb      	ldr	r3, [r7, #12]
  405582:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  405584:	68fb      	ldr	r3, [r7, #12]
  405586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  405588:	429a      	cmp	r2, r3
  40558a:	d216      	bcs.n	4055ba <xQueueGenericSend+0x7e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40558c:	683a      	ldr	r2, [r7, #0]
  40558e:	68b9      	ldr	r1, [r7, #8]
  405590:	68f8      	ldr	r0, [r7, #12]
  405592:	4b39      	ldr	r3, [pc, #228]	; (405678 <xQueueGenericSend+0x13c>)
  405594:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  405596:	68fb      	ldr	r3, [r7, #12]
  405598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40559a:	2b00      	cmp	r3, #0
  40559c:	d009      	beq.n	4055b2 <xQueueGenericSend+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  40559e:	68fb      	ldr	r3, [r7, #12]
  4055a0:	3324      	adds	r3, #36	; 0x24
  4055a2:	4618      	mov	r0, r3
  4055a4:	4b35      	ldr	r3, [pc, #212]	; (40567c <xQueueGenericSend+0x140>)
  4055a6:	4798      	blx	r3
  4055a8:	4603      	mov	r3, r0
  4055aa:	2b01      	cmp	r3, #1
  4055ac:	d101      	bne.n	4055b2 <xQueueGenericSend+0x76>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  4055ae:	4b34      	ldr	r3, [pc, #208]	; (405680 <xQueueGenericSend+0x144>)
  4055b0:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  4055b2:	4b34      	ldr	r3, [pc, #208]	; (405684 <xQueueGenericSend+0x148>)
  4055b4:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  4055b6:	2301      	movs	r3, #1
  4055b8:	e056      	b.n	405668 <xQueueGenericSend+0x12c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  4055ba:	687b      	ldr	r3, [r7, #4]
  4055bc:	2b00      	cmp	r3, #0
  4055be:	d103      	bne.n	4055c8 <xQueueGenericSend+0x8c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  4055c0:	4b30      	ldr	r3, [pc, #192]	; (405684 <xQueueGenericSend+0x148>)
  4055c2:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  4055c4:	2300      	movs	r3, #0
  4055c6:	e04f      	b.n	405668 <xQueueGenericSend+0x12c>
				}
				else if( xEntryTimeSet == pdFALSE )
  4055c8:	69fb      	ldr	r3, [r7, #28]
  4055ca:	2b00      	cmp	r3, #0
  4055cc:	d106      	bne.n	4055dc <xQueueGenericSend+0xa0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4055ce:	f107 0314 	add.w	r3, r7, #20
  4055d2:	4618      	mov	r0, r3
  4055d4:	4b2c      	ldr	r3, [pc, #176]	; (405688 <xQueueGenericSend+0x14c>)
  4055d6:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  4055d8:	2301      	movs	r3, #1
  4055da:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  4055dc:	4b29      	ldr	r3, [pc, #164]	; (405684 <xQueueGenericSend+0x148>)
  4055de:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  4055e0:	4b2a      	ldr	r3, [pc, #168]	; (40568c <xQueueGenericSend+0x150>)
  4055e2:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4055e4:	4b23      	ldr	r3, [pc, #140]	; (405674 <xQueueGenericSend+0x138>)
  4055e6:	4798      	blx	r3
  4055e8:	68fb      	ldr	r3, [r7, #12]
  4055ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  4055ec:	f1b3 3fff 	cmp.w	r3, #4294967295
  4055f0:	d102      	bne.n	4055f8 <xQueueGenericSend+0xbc>
  4055f2:	68fb      	ldr	r3, [r7, #12]
  4055f4:	2200      	movs	r2, #0
  4055f6:	645a      	str	r2, [r3, #68]	; 0x44
  4055f8:	68fb      	ldr	r3, [r7, #12]
  4055fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4055fc:	f1b3 3fff 	cmp.w	r3, #4294967295
  405600:	d102      	bne.n	405608 <xQueueGenericSend+0xcc>
  405602:	68fb      	ldr	r3, [r7, #12]
  405604:	2200      	movs	r2, #0
  405606:	649a      	str	r2, [r3, #72]	; 0x48
  405608:	4b1e      	ldr	r3, [pc, #120]	; (405684 <xQueueGenericSend+0x148>)
  40560a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40560c:	1d3a      	adds	r2, r7, #4
  40560e:	f107 0314 	add.w	r3, r7, #20
  405612:	4611      	mov	r1, r2
  405614:	4618      	mov	r0, r3
  405616:	4b1e      	ldr	r3, [pc, #120]	; (405690 <xQueueGenericSend+0x154>)
  405618:	4798      	blx	r3
  40561a:	4603      	mov	r3, r0
  40561c:	2b00      	cmp	r3, #0
  40561e:	d11d      	bne.n	40565c <xQueueGenericSend+0x120>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  405620:	68f8      	ldr	r0, [r7, #12]
  405622:	4b1c      	ldr	r3, [pc, #112]	; (405694 <xQueueGenericSend+0x158>)
  405624:	4798      	blx	r3
  405626:	4603      	mov	r3, r0
  405628:	2b00      	cmp	r3, #0
  40562a:	d011      	beq.n	405650 <xQueueGenericSend+0x114>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  40562c:	68fb      	ldr	r3, [r7, #12]
  40562e:	3310      	adds	r3, #16
  405630:	687a      	ldr	r2, [r7, #4]
  405632:	4611      	mov	r1, r2
  405634:	4618      	mov	r0, r3
  405636:	4b18      	ldr	r3, [pc, #96]	; (405698 <xQueueGenericSend+0x15c>)
  405638:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  40563a:	68f8      	ldr	r0, [r7, #12]
  40563c:	4b17      	ldr	r3, [pc, #92]	; (40569c <xQueueGenericSend+0x160>)
  40563e:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  405640:	4b17      	ldr	r3, [pc, #92]	; (4056a0 <xQueueGenericSend+0x164>)
  405642:	4798      	blx	r3
  405644:	4603      	mov	r3, r0
  405646:	2b00      	cmp	r3, #0
  405648:	d198      	bne.n	40557c <xQueueGenericSend+0x40>
				{
					portYIELD_WITHIN_API();
  40564a:	4b0d      	ldr	r3, [pc, #52]	; (405680 <xQueueGenericSend+0x144>)
  40564c:	4798      	blx	r3
  40564e:	e795      	b.n	40557c <xQueueGenericSend+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  405650:	68f8      	ldr	r0, [r7, #12]
  405652:	4b12      	ldr	r3, [pc, #72]	; (40569c <xQueueGenericSend+0x160>)
  405654:	4798      	blx	r3
				( void ) xTaskResumeAll();
  405656:	4b12      	ldr	r3, [pc, #72]	; (4056a0 <xQueueGenericSend+0x164>)
  405658:	4798      	blx	r3
  40565a:	e78f      	b.n	40557c <xQueueGenericSend+0x40>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  40565c:	68f8      	ldr	r0, [r7, #12]
  40565e:	4b0f      	ldr	r3, [pc, #60]	; (40569c <xQueueGenericSend+0x160>)
  405660:	4798      	blx	r3
			( void ) xTaskResumeAll();
  405662:	4b0f      	ldr	r3, [pc, #60]	; (4056a0 <xQueueGenericSend+0x164>)
  405664:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  405666:	2300      	movs	r3, #0
		}
	}
}
  405668:	4618      	mov	r0, r3
  40566a:	3720      	adds	r7, #32
  40566c:	46bd      	mov	sp, r7
  40566e:	bd80      	pop	{r7, pc}
  405670:	00405085 	.word	0x00405085
  405674:	0040503d 	.word	0x0040503d
  405678:	00405935 	.word	0x00405935
  40567c:	004062f5 	.word	0x004062f5
  405680:	00405025 	.word	0x00405025
  405684:	0040505d 	.word	0x0040505d
  405688:	004063b1 	.word	0x004063b1
  40568c:	00405e5d 	.word	0x00405e5d
  405690:	004063ed 	.word	0x004063ed
  405694:	00405b21 	.word	0x00405b21
  405698:	0040620d 	.word	0x0040620d
  40569c:	00405a45 	.word	0x00405a45
  4056a0:	00405e79 	.word	0x00405e79

004056a4 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
  4056a4:	b580      	push	{r7, lr}
  4056a6:	b086      	sub	sp, #24
  4056a8:	af00      	add	r7, sp, #0
  4056aa:	60f8      	str	r0, [r7, #12]
  4056ac:	60b9      	str	r1, [r7, #8]
  4056ae:	607a      	str	r2, [r7, #4]
  4056b0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
  4056b2:	68fb      	ldr	r3, [r7, #12]
  4056b4:	2b00      	cmp	r3, #0
  4056b6:	d103      	bne.n	4056c0 <xQueueGenericSendFromISR+0x1c>
  4056b8:	4b25      	ldr	r3, [pc, #148]	; (405750 <xQueueGenericSendFromISR+0xac>)
  4056ba:	4798      	blx	r3
  4056bc:	bf00      	nop
  4056be:	e7fd      	b.n	4056bc <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  4056c0:	68bb      	ldr	r3, [r7, #8]
  4056c2:	2b00      	cmp	r3, #0
  4056c4:	d103      	bne.n	4056ce <xQueueGenericSendFromISR+0x2a>
  4056c6:	68fb      	ldr	r3, [r7, #12]
  4056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4056ca:	2b00      	cmp	r3, #0
  4056cc:	d101      	bne.n	4056d2 <xQueueGenericSendFromISR+0x2e>
  4056ce:	2301      	movs	r3, #1
  4056d0:	e000      	b.n	4056d4 <xQueueGenericSendFromISR+0x30>
  4056d2:	2300      	movs	r3, #0
  4056d4:	2b00      	cmp	r3, #0
  4056d6:	d103      	bne.n	4056e0 <xQueueGenericSendFromISR+0x3c>
  4056d8:	4b1d      	ldr	r3, [pc, #116]	; (405750 <xQueueGenericSendFromISR+0xac>)
  4056da:	4798      	blx	r3
  4056dc:	bf00      	nop
  4056de:	e7fd      	b.n	4056dc <xQueueGenericSendFromISR+0x38>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  4056e0:	4b1b      	ldr	r3, [pc, #108]	; (405750 <xQueueGenericSendFromISR+0xac>)
  4056e2:	4798      	blx	r3
  4056e4:	6138      	str	r0, [r7, #16]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  4056e6:	68fb      	ldr	r3, [r7, #12]
  4056e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4056ea:	68fb      	ldr	r3, [r7, #12]
  4056ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4056ee:	429a      	cmp	r2, r3
  4056f0:	d224      	bcs.n	40573c <xQueueGenericSendFromISR+0x98>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4056f2:	683a      	ldr	r2, [r7, #0]
  4056f4:	68b9      	ldr	r1, [r7, #8]
  4056f6:	68f8      	ldr	r0, [r7, #12]
  4056f8:	4b16      	ldr	r3, [pc, #88]	; (405754 <xQueueGenericSendFromISR+0xb0>)
  4056fa:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  4056fc:	68fb      	ldr	r3, [r7, #12]
  4056fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  405700:	f1b3 3fff 	cmp.w	r3, #4294967295
  405704:	d112      	bne.n	40572c <xQueueGenericSendFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  405706:	68fb      	ldr	r3, [r7, #12]
  405708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40570a:	2b00      	cmp	r3, #0
  40570c:	d013      	beq.n	405736 <xQueueGenericSendFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40570e:	68fb      	ldr	r3, [r7, #12]
  405710:	3324      	adds	r3, #36	; 0x24
  405712:	4618      	mov	r0, r3
  405714:	4b10      	ldr	r3, [pc, #64]	; (405758 <xQueueGenericSendFromISR+0xb4>)
  405716:	4798      	blx	r3
  405718:	4603      	mov	r3, r0
  40571a:	2b00      	cmp	r3, #0
  40571c:	d00b      	beq.n	405736 <xQueueGenericSendFromISR+0x92>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
  40571e:	687b      	ldr	r3, [r7, #4]
  405720:	2b00      	cmp	r3, #0
  405722:	d008      	beq.n	405736 <xQueueGenericSendFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
  405724:	687b      	ldr	r3, [r7, #4]
  405726:	2201      	movs	r2, #1
  405728:	601a      	str	r2, [r3, #0]
  40572a:	e004      	b.n	405736 <xQueueGenericSendFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  40572c:	68fb      	ldr	r3, [r7, #12]
  40572e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  405730:	1c5a      	adds	r2, r3, #1
  405732:	68fb      	ldr	r3, [r7, #12]
  405734:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
  405736:	2301      	movs	r3, #1
  405738:	617b      	str	r3, [r7, #20]
  40573a:	e001      	b.n	405740 <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  40573c:	2300      	movs	r3, #0
  40573e:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  405740:	6938      	ldr	r0, [r7, #16]
  405742:	4b06      	ldr	r3, [pc, #24]	; (40575c <xQueueGenericSendFromISR+0xb8>)
  405744:	4798      	blx	r3

	return xReturn;
  405746:	697b      	ldr	r3, [r7, #20]
}
  405748:	4618      	mov	r0, r3
  40574a:	3718      	adds	r7, #24
  40574c:	46bd      	mov	sp, r7
  40574e:	bd80      	pop	{r7, pc}
  405750:	00405085 	.word	0x00405085
  405754:	00405935 	.word	0x00405935
  405758:	004062f5 	.word	0x004062f5
  40575c:	00405099 	.word	0x00405099

00405760 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  405760:	b580      	push	{r7, lr}
  405762:	b088      	sub	sp, #32
  405764:	af00      	add	r7, sp, #0
  405766:	60f8      	str	r0, [r7, #12]
  405768:	60b9      	str	r1, [r7, #8]
  40576a:	607a      	str	r2, [r7, #4]
  40576c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  40576e:	2300      	movs	r3, #0
  405770:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
  405772:	68fb      	ldr	r3, [r7, #12]
  405774:	2b00      	cmp	r3, #0
  405776:	d103      	bne.n	405780 <xQueueGenericReceive+0x20>
  405778:	4b5f      	ldr	r3, [pc, #380]	; (4058f8 <xQueueGenericReceive+0x198>)
  40577a:	4798      	blx	r3
  40577c:	bf00      	nop
  40577e:	e7fd      	b.n	40577c <xQueueGenericReceive+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  405780:	68bb      	ldr	r3, [r7, #8]
  405782:	2b00      	cmp	r3, #0
  405784:	d103      	bne.n	40578e <xQueueGenericReceive+0x2e>
  405786:	68fb      	ldr	r3, [r7, #12]
  405788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40578a:	2b00      	cmp	r3, #0
  40578c:	d101      	bne.n	405792 <xQueueGenericReceive+0x32>
  40578e:	2301      	movs	r3, #1
  405790:	e000      	b.n	405794 <xQueueGenericReceive+0x34>
  405792:	2300      	movs	r3, #0
  405794:	2b00      	cmp	r3, #0
  405796:	d103      	bne.n	4057a0 <xQueueGenericReceive+0x40>
  405798:	4b57      	ldr	r3, [pc, #348]	; (4058f8 <xQueueGenericReceive+0x198>)
  40579a:	4798      	blx	r3
  40579c:	bf00      	nop
  40579e:	e7fd      	b.n	40579c <xQueueGenericReceive+0x3c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  4057a0:	4b56      	ldr	r3, [pc, #344]	; (4058fc <xQueueGenericReceive+0x19c>)
  4057a2:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  4057a4:	68fb      	ldr	r3, [r7, #12]
  4057a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4057a8:	2b00      	cmp	r3, #0
  4057aa:	d03b      	beq.n	405824 <xQueueGenericReceive+0xc4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  4057ac:	68fb      	ldr	r3, [r7, #12]
  4057ae:	68db      	ldr	r3, [r3, #12]
  4057b0:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4057b2:	68b9      	ldr	r1, [r7, #8]
  4057b4:	68f8      	ldr	r0, [r7, #12]
  4057b6:	4b52      	ldr	r3, [pc, #328]	; (405900 <xQueueGenericReceive+0x1a0>)
  4057b8:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  4057ba:	683b      	ldr	r3, [r7, #0]
  4057bc:	2b00      	cmp	r3, #0
  4057be:	d11c      	bne.n	4057fa <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  4057c0:	68fb      	ldr	r3, [r7, #12]
  4057c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4057c4:	1e5a      	subs	r2, r3, #1
  4057c6:	68fb      	ldr	r3, [r7, #12]
  4057c8:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4057ca:	68fb      	ldr	r3, [r7, #12]
  4057cc:	681b      	ldr	r3, [r3, #0]
  4057ce:	2b00      	cmp	r3, #0
  4057d0:	d104      	bne.n	4057dc <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  4057d2:	4b4c      	ldr	r3, [pc, #304]	; (405904 <xQueueGenericReceive+0x1a4>)
  4057d4:	4798      	blx	r3
  4057d6:	4602      	mov	r2, r0
  4057d8:	68fb      	ldr	r3, [r7, #12]
  4057da:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4057dc:	68fb      	ldr	r3, [r7, #12]
  4057de:	691b      	ldr	r3, [r3, #16]
  4057e0:	2b00      	cmp	r3, #0
  4057e2:	d01b      	beq.n	40581c <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4057e4:	68fb      	ldr	r3, [r7, #12]
  4057e6:	3310      	adds	r3, #16
  4057e8:	4618      	mov	r0, r3
  4057ea:	4b47      	ldr	r3, [pc, #284]	; (405908 <xQueueGenericReceive+0x1a8>)
  4057ec:	4798      	blx	r3
  4057ee:	4603      	mov	r3, r0
  4057f0:	2b01      	cmp	r3, #1
  4057f2:	d113      	bne.n	40581c <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
  4057f4:	4b45      	ldr	r3, [pc, #276]	; (40590c <xQueueGenericReceive+0x1ac>)
  4057f6:	4798      	blx	r3
  4057f8:	e010      	b.n	40581c <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  4057fa:	68fb      	ldr	r3, [r7, #12]
  4057fc:	69ba      	ldr	r2, [r7, #24]
  4057fe:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  405800:	68fb      	ldr	r3, [r7, #12]
  405802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  405804:	2b00      	cmp	r3, #0
  405806:	d009      	beq.n	40581c <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  405808:	68fb      	ldr	r3, [r7, #12]
  40580a:	3324      	adds	r3, #36	; 0x24
  40580c:	4618      	mov	r0, r3
  40580e:	4b3e      	ldr	r3, [pc, #248]	; (405908 <xQueueGenericReceive+0x1a8>)
  405810:	4798      	blx	r3
  405812:	4603      	mov	r3, r0
  405814:	2b00      	cmp	r3, #0
  405816:	d001      	beq.n	40581c <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  405818:	4b3c      	ldr	r3, [pc, #240]	; (40590c <xQueueGenericReceive+0x1ac>)
  40581a:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
  40581c:	4b3c      	ldr	r3, [pc, #240]	; (405910 <xQueueGenericReceive+0x1b0>)
  40581e:	4798      	blx	r3
				return pdPASS;
  405820:	2301      	movs	r3, #1
  405822:	e064      	b.n	4058ee <xQueueGenericReceive+0x18e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  405824:	687b      	ldr	r3, [r7, #4]
  405826:	2b00      	cmp	r3, #0
  405828:	d103      	bne.n	405832 <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  40582a:	4b39      	ldr	r3, [pc, #228]	; (405910 <xQueueGenericReceive+0x1b0>)
  40582c:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  40582e:	2300      	movs	r3, #0
  405830:	e05d      	b.n	4058ee <xQueueGenericReceive+0x18e>
				}
				else if( xEntryTimeSet == pdFALSE )
  405832:	69fb      	ldr	r3, [r7, #28]
  405834:	2b00      	cmp	r3, #0
  405836:	d106      	bne.n	405846 <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  405838:	f107 0310 	add.w	r3, r7, #16
  40583c:	4618      	mov	r0, r3
  40583e:	4b35      	ldr	r3, [pc, #212]	; (405914 <xQueueGenericReceive+0x1b4>)
  405840:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  405842:	2301      	movs	r3, #1
  405844:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  405846:	4b32      	ldr	r3, [pc, #200]	; (405910 <xQueueGenericReceive+0x1b0>)
  405848:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  40584a:	4b33      	ldr	r3, [pc, #204]	; (405918 <xQueueGenericReceive+0x1b8>)
  40584c:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40584e:	4b2b      	ldr	r3, [pc, #172]	; (4058fc <xQueueGenericReceive+0x19c>)
  405850:	4798      	blx	r3
  405852:	68fb      	ldr	r3, [r7, #12]
  405854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  405856:	f1b3 3fff 	cmp.w	r3, #4294967295
  40585a:	d102      	bne.n	405862 <xQueueGenericReceive+0x102>
  40585c:	68fb      	ldr	r3, [r7, #12]
  40585e:	2200      	movs	r2, #0
  405860:	645a      	str	r2, [r3, #68]	; 0x44
  405862:	68fb      	ldr	r3, [r7, #12]
  405864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  405866:	f1b3 3fff 	cmp.w	r3, #4294967295
  40586a:	d102      	bne.n	405872 <xQueueGenericReceive+0x112>
  40586c:	68fb      	ldr	r3, [r7, #12]
  40586e:	2200      	movs	r2, #0
  405870:	649a      	str	r2, [r3, #72]	; 0x48
  405872:	4b27      	ldr	r3, [pc, #156]	; (405910 <xQueueGenericReceive+0x1b0>)
  405874:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  405876:	1d3a      	adds	r2, r7, #4
  405878:	f107 0310 	add.w	r3, r7, #16
  40587c:	4611      	mov	r1, r2
  40587e:	4618      	mov	r0, r3
  405880:	4b26      	ldr	r3, [pc, #152]	; (40591c <xQueueGenericReceive+0x1bc>)
  405882:	4798      	blx	r3
  405884:	4603      	mov	r3, r0
  405886:	2b00      	cmp	r3, #0
  405888:	d12b      	bne.n	4058e2 <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40588a:	68f8      	ldr	r0, [r7, #12]
  40588c:	4b24      	ldr	r3, [pc, #144]	; (405920 <xQueueGenericReceive+0x1c0>)
  40588e:	4798      	blx	r3
  405890:	4603      	mov	r3, r0
  405892:	2b00      	cmp	r3, #0
  405894:	d01f      	beq.n	4058d6 <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  405896:	68fb      	ldr	r3, [r7, #12]
  405898:	681b      	ldr	r3, [r3, #0]
  40589a:	2b00      	cmp	r3, #0
  40589c:	d108      	bne.n	4058b0 <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
  40589e:	4b17      	ldr	r3, [pc, #92]	; (4058fc <xQueueGenericReceive+0x19c>)
  4058a0:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  4058a2:	68fb      	ldr	r3, [r7, #12]
  4058a4:	685b      	ldr	r3, [r3, #4]
  4058a6:	4618      	mov	r0, r3
  4058a8:	4b1e      	ldr	r3, [pc, #120]	; (405924 <xQueueGenericReceive+0x1c4>)
  4058aa:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  4058ac:	4b18      	ldr	r3, [pc, #96]	; (405910 <xQueueGenericReceive+0x1b0>)
  4058ae:	4798      	blx	r3
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4058b0:	68fb      	ldr	r3, [r7, #12]
  4058b2:	3324      	adds	r3, #36	; 0x24
  4058b4:	687a      	ldr	r2, [r7, #4]
  4058b6:	4611      	mov	r1, r2
  4058b8:	4618      	mov	r0, r3
  4058ba:	4b1b      	ldr	r3, [pc, #108]	; (405928 <xQueueGenericReceive+0x1c8>)
  4058bc:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4058be:	68f8      	ldr	r0, [r7, #12]
  4058c0:	4b1a      	ldr	r3, [pc, #104]	; (40592c <xQueueGenericReceive+0x1cc>)
  4058c2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4058c4:	4b1a      	ldr	r3, [pc, #104]	; (405930 <xQueueGenericReceive+0x1d0>)
  4058c6:	4798      	blx	r3
  4058c8:	4603      	mov	r3, r0
  4058ca:	2b00      	cmp	r3, #0
  4058cc:	f47f af68 	bne.w	4057a0 <xQueueGenericReceive+0x40>
				{
					portYIELD_WITHIN_API();
  4058d0:	4b0e      	ldr	r3, [pc, #56]	; (40590c <xQueueGenericReceive+0x1ac>)
  4058d2:	4798      	blx	r3
  4058d4:	e764      	b.n	4057a0 <xQueueGenericReceive+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  4058d6:	68f8      	ldr	r0, [r7, #12]
  4058d8:	4b14      	ldr	r3, [pc, #80]	; (40592c <xQueueGenericReceive+0x1cc>)
  4058da:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4058dc:	4b14      	ldr	r3, [pc, #80]	; (405930 <xQueueGenericReceive+0x1d0>)
  4058de:	4798      	blx	r3
  4058e0:	e75e      	b.n	4057a0 <xQueueGenericReceive+0x40>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  4058e2:	68f8      	ldr	r0, [r7, #12]
  4058e4:	4b11      	ldr	r3, [pc, #68]	; (40592c <xQueueGenericReceive+0x1cc>)
  4058e6:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4058e8:	4b11      	ldr	r3, [pc, #68]	; (405930 <xQueueGenericReceive+0x1d0>)
  4058ea:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  4058ec:	2300      	movs	r3, #0
		}
	}
}
  4058ee:	4618      	mov	r0, r3
  4058f0:	3720      	adds	r7, #32
  4058f2:	46bd      	mov	sp, r7
  4058f4:	bd80      	pop	{r7, pc}
  4058f6:	bf00      	nop
  4058f8:	00405085 	.word	0x00405085
  4058fc:	0040503d 	.word	0x0040503d
  405900:	004059f5 	.word	0x004059f5
  405904:	00406759 	.word	0x00406759
  405908:	004062f5 	.word	0x004062f5
  40590c:	00405025 	.word	0x00405025
  405910:	0040505d 	.word	0x0040505d
  405914:	004063b1 	.word	0x004063b1
  405918:	00405e5d 	.word	0x00405e5d
  40591c:	004063ed 	.word	0x004063ed
  405920:	00405aed 	.word	0x00405aed
  405924:	004067b1 	.word	0x004067b1
  405928:	0040620d 	.word	0x0040620d
  40592c:	00405a45 	.word	0x00405a45
  405930:	00405e79 	.word	0x00405e79

00405934 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  405934:	b580      	push	{r7, lr}
  405936:	b084      	sub	sp, #16
  405938:	af00      	add	r7, sp, #0
  40593a:	60f8      	str	r0, [r7, #12]
  40593c:	60b9      	str	r1, [r7, #8]
  40593e:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  405940:	68fb      	ldr	r3, [r7, #12]
  405942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405944:	2b00      	cmp	r3, #0
  405946:	d10c      	bne.n	405962 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  405948:	68fb      	ldr	r3, [r7, #12]
  40594a:	681b      	ldr	r3, [r3, #0]
  40594c:	2b00      	cmp	r3, #0
  40594e:	d143      	bne.n	4059d8 <prvCopyDataToQueue+0xa4>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  405950:	68fb      	ldr	r3, [r7, #12]
  405952:	685b      	ldr	r3, [r3, #4]
  405954:	4618      	mov	r0, r3
  405956:	4b25      	ldr	r3, [pc, #148]	; (4059ec <prvCopyDataToQueue+0xb8>)
  405958:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  40595a:	68fb      	ldr	r3, [r7, #12]
  40595c:	2200      	movs	r2, #0
  40595e:	605a      	str	r2, [r3, #4]
  405960:	e03a      	b.n	4059d8 <prvCopyDataToQueue+0xa4>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  405962:	687b      	ldr	r3, [r7, #4]
  405964:	2b00      	cmp	r3, #0
  405966:	d119      	bne.n	40599c <prvCopyDataToQueue+0x68>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  405968:	68fb      	ldr	r3, [r7, #12]
  40596a:	6898      	ldr	r0, [r3, #8]
  40596c:	68fb      	ldr	r3, [r7, #12]
  40596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405970:	461a      	mov	r2, r3
  405972:	68b9      	ldr	r1, [r7, #8]
  405974:	4b1e      	ldr	r3, [pc, #120]	; (4059f0 <prvCopyDataToQueue+0xbc>)
  405976:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  405978:	68fb      	ldr	r3, [r7, #12]
  40597a:	689a      	ldr	r2, [r3, #8]
  40597c:	68fb      	ldr	r3, [r7, #12]
  40597e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405980:	441a      	add	r2, r3
  405982:	68fb      	ldr	r3, [r7, #12]
  405984:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  405986:	68fb      	ldr	r3, [r7, #12]
  405988:	689a      	ldr	r2, [r3, #8]
  40598a:	68fb      	ldr	r3, [r7, #12]
  40598c:	685b      	ldr	r3, [r3, #4]
  40598e:	429a      	cmp	r2, r3
  405990:	d322      	bcc.n	4059d8 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  405992:	68fb      	ldr	r3, [r7, #12]
  405994:	681a      	ldr	r2, [r3, #0]
  405996:	68fb      	ldr	r3, [r7, #12]
  405998:	609a      	str	r2, [r3, #8]
  40599a:	e01d      	b.n	4059d8 <prvCopyDataToQueue+0xa4>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  40599c:	68fb      	ldr	r3, [r7, #12]
  40599e:	68d8      	ldr	r0, [r3, #12]
  4059a0:	68fb      	ldr	r3, [r7, #12]
  4059a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4059a4:	461a      	mov	r2, r3
  4059a6:	68b9      	ldr	r1, [r7, #8]
  4059a8:	4b11      	ldr	r3, [pc, #68]	; (4059f0 <prvCopyDataToQueue+0xbc>)
  4059aa:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  4059ac:	68fb      	ldr	r3, [r7, #12]
  4059ae:	68da      	ldr	r2, [r3, #12]
  4059b0:	68fb      	ldr	r3, [r7, #12]
  4059b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4059b4:	425b      	negs	r3, r3
  4059b6:	441a      	add	r2, r3
  4059b8:	68fb      	ldr	r3, [r7, #12]
  4059ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  4059bc:	68fb      	ldr	r3, [r7, #12]
  4059be:	68da      	ldr	r2, [r3, #12]
  4059c0:	68fb      	ldr	r3, [r7, #12]
  4059c2:	681b      	ldr	r3, [r3, #0]
  4059c4:	429a      	cmp	r2, r3
  4059c6:	d207      	bcs.n	4059d8 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4059c8:	68fb      	ldr	r3, [r7, #12]
  4059ca:	685a      	ldr	r2, [r3, #4]
  4059cc:	68fb      	ldr	r3, [r7, #12]
  4059ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4059d0:	425b      	negs	r3, r3
  4059d2:	441a      	add	r2, r3
  4059d4:	68fb      	ldr	r3, [r7, #12]
  4059d6:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4059d8:	68fb      	ldr	r3, [r7, #12]
  4059da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4059dc:	1c5a      	adds	r2, r3, #1
  4059de:	68fb      	ldr	r3, [r7, #12]
  4059e0:	639a      	str	r2, [r3, #56]	; 0x38
}
  4059e2:	bf00      	nop
  4059e4:	3710      	adds	r7, #16
  4059e6:	46bd      	mov	sp, r7
  4059e8:	bd80      	pop	{r7, pc}
  4059ea:	bf00      	nop
  4059ec:	00406865 	.word	0x00406865
  4059f0:	0040b289 	.word	0x0040b289

004059f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  4059f4:	b580      	push	{r7, lr}
  4059f6:	b082      	sub	sp, #8
  4059f8:	af00      	add	r7, sp, #0
  4059fa:	6078      	str	r0, [r7, #4]
  4059fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  4059fe:	687b      	ldr	r3, [r7, #4]
  405a00:	681b      	ldr	r3, [r3, #0]
  405a02:	2b00      	cmp	r3, #0
  405a04:	d018      	beq.n	405a38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  405a06:	687b      	ldr	r3, [r7, #4]
  405a08:	68da      	ldr	r2, [r3, #12]
  405a0a:	687b      	ldr	r3, [r7, #4]
  405a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405a0e:	441a      	add	r2, r3
  405a10:	687b      	ldr	r3, [r7, #4]
  405a12:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  405a14:	687b      	ldr	r3, [r7, #4]
  405a16:	68da      	ldr	r2, [r3, #12]
  405a18:	687b      	ldr	r3, [r7, #4]
  405a1a:	685b      	ldr	r3, [r3, #4]
  405a1c:	429a      	cmp	r2, r3
  405a1e:	d303      	bcc.n	405a28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  405a20:	687b      	ldr	r3, [r7, #4]
  405a22:	681a      	ldr	r2, [r3, #0]
  405a24:	687b      	ldr	r3, [r7, #4]
  405a26:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  405a28:	687b      	ldr	r3, [r7, #4]
  405a2a:	68d9      	ldr	r1, [r3, #12]
  405a2c:	687b      	ldr	r3, [r7, #4]
  405a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405a30:	461a      	mov	r2, r3
  405a32:	6838      	ldr	r0, [r7, #0]
  405a34:	4b02      	ldr	r3, [pc, #8]	; (405a40 <prvCopyDataFromQueue+0x4c>)
  405a36:	4798      	blx	r3
	}
}
  405a38:	bf00      	nop
  405a3a:	3708      	adds	r7, #8
  405a3c:	46bd      	mov	sp, r7
  405a3e:	bd80      	pop	{r7, pc}
  405a40:	0040b289 	.word	0x0040b289

00405a44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  405a44:	b580      	push	{r7, lr}
  405a46:	b082      	sub	sp, #8
  405a48:	af00      	add	r7, sp, #0
  405a4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  405a4c:	4b23      	ldr	r3, [pc, #140]	; (405adc <prvUnlockQueue+0x98>)
  405a4e:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  405a50:	e012      	b.n	405a78 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  405a52:	687b      	ldr	r3, [r7, #4]
  405a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  405a56:	2b00      	cmp	r3, #0
  405a58:	d013      	beq.n	405a82 <prvUnlockQueue+0x3e>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  405a5a:	687b      	ldr	r3, [r7, #4]
  405a5c:	3324      	adds	r3, #36	; 0x24
  405a5e:	4618      	mov	r0, r3
  405a60:	4b1f      	ldr	r3, [pc, #124]	; (405ae0 <prvUnlockQueue+0x9c>)
  405a62:	4798      	blx	r3
  405a64:	4603      	mov	r3, r0
  405a66:	2b00      	cmp	r3, #0
  405a68:	d001      	beq.n	405a6e <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  405a6a:	4b1e      	ldr	r3, [pc, #120]	; (405ae4 <prvUnlockQueue+0xa0>)
  405a6c:	4798      	blx	r3
				}

				--( pxQueue->xTxLock );
  405a6e:	687b      	ldr	r3, [r7, #4]
  405a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  405a72:	1e5a      	subs	r2, r3, #1
  405a74:	687b      	ldr	r3, [r7, #4]
  405a76:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  405a78:	687b      	ldr	r3, [r7, #4]
  405a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  405a7c:	2b00      	cmp	r3, #0
  405a7e:	dce8      	bgt.n	405a52 <prvUnlockQueue+0xe>
  405a80:	e000      	b.n	405a84 <prvUnlockQueue+0x40>

				--( pxQueue->xTxLock );
			}
			else
			{
				break;
  405a82:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  405a84:	687b      	ldr	r3, [r7, #4]
  405a86:	f04f 32ff 	mov.w	r2, #4294967295
  405a8a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  405a8c:	4b16      	ldr	r3, [pc, #88]	; (405ae8 <prvUnlockQueue+0xa4>)
  405a8e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  405a90:	4b12      	ldr	r3, [pc, #72]	; (405adc <prvUnlockQueue+0x98>)
  405a92:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  405a94:	e012      	b.n	405abc <prvUnlockQueue+0x78>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  405a96:	687b      	ldr	r3, [r7, #4]
  405a98:	691b      	ldr	r3, [r3, #16]
  405a9a:	2b00      	cmp	r3, #0
  405a9c:	d013      	beq.n	405ac6 <prvUnlockQueue+0x82>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  405a9e:	687b      	ldr	r3, [r7, #4]
  405aa0:	3310      	adds	r3, #16
  405aa2:	4618      	mov	r0, r3
  405aa4:	4b0e      	ldr	r3, [pc, #56]	; (405ae0 <prvUnlockQueue+0x9c>)
  405aa6:	4798      	blx	r3
  405aa8:	4603      	mov	r3, r0
  405aaa:	2b00      	cmp	r3, #0
  405aac:	d001      	beq.n	405ab2 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
  405aae:	4b0d      	ldr	r3, [pc, #52]	; (405ae4 <prvUnlockQueue+0xa0>)
  405ab0:	4798      	blx	r3
				}

				--( pxQueue->xRxLock );
  405ab2:	687b      	ldr	r3, [r7, #4]
  405ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  405ab6:	1e5a      	subs	r2, r3, #1
  405ab8:	687b      	ldr	r3, [r7, #4]
  405aba:	645a      	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  405abc:	687b      	ldr	r3, [r7, #4]
  405abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  405ac0:	2b00      	cmp	r3, #0
  405ac2:	dce8      	bgt.n	405a96 <prvUnlockQueue+0x52>
  405ac4:	e000      	b.n	405ac8 <prvUnlockQueue+0x84>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
  405ac6:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  405ac8:	687b      	ldr	r3, [r7, #4]
  405aca:	f04f 32ff 	mov.w	r2, #4294967295
  405ace:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  405ad0:	4b05      	ldr	r3, [pc, #20]	; (405ae8 <prvUnlockQueue+0xa4>)
  405ad2:	4798      	blx	r3
}
  405ad4:	bf00      	nop
  405ad6:	3708      	adds	r7, #8
  405ad8:	46bd      	mov	sp, r7
  405ada:	bd80      	pop	{r7, pc}
  405adc:	0040503d 	.word	0x0040503d
  405ae0:	004062f5 	.word	0x004062f5
  405ae4:	004064a1 	.word	0x004064a1
  405ae8:	0040505d 	.word	0x0040505d

00405aec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
  405aec:	b580      	push	{r7, lr}
  405aee:	b084      	sub	sp, #16
  405af0:	af00      	add	r7, sp, #0
  405af2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  405af4:	4b08      	ldr	r3, [pc, #32]	; (405b18 <prvIsQueueEmpty+0x2c>)
  405af6:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  405af8:	687b      	ldr	r3, [r7, #4]
  405afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  405afc:	2b00      	cmp	r3, #0
  405afe:	bf0c      	ite	eq
  405b00:	2301      	moveq	r3, #1
  405b02:	2300      	movne	r3, #0
  405b04:	b2db      	uxtb	r3, r3
  405b06:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  405b08:	4b04      	ldr	r3, [pc, #16]	; (405b1c <prvIsQueueEmpty+0x30>)
  405b0a:	4798      	blx	r3

	return xReturn;
  405b0c:	68fb      	ldr	r3, [r7, #12]
}
  405b0e:	4618      	mov	r0, r3
  405b10:	3710      	adds	r7, #16
  405b12:	46bd      	mov	sp, r7
  405b14:	bd80      	pop	{r7, pc}
  405b16:	bf00      	nop
  405b18:	0040503d 	.word	0x0040503d
  405b1c:	0040505d 	.word	0x0040505d

00405b20 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
  405b20:	b580      	push	{r7, lr}
  405b22:	b084      	sub	sp, #16
  405b24:	af00      	add	r7, sp, #0
  405b26:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  405b28:	4b09      	ldr	r3, [pc, #36]	; (405b50 <prvIsQueueFull+0x30>)
  405b2a:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  405b2c:	687b      	ldr	r3, [r7, #4]
  405b2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  405b30:	687b      	ldr	r3, [r7, #4]
  405b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  405b34:	429a      	cmp	r2, r3
  405b36:	bf0c      	ite	eq
  405b38:	2301      	moveq	r3, #1
  405b3a:	2300      	movne	r3, #0
  405b3c:	b2db      	uxtb	r3, r3
  405b3e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  405b40:	4b04      	ldr	r3, [pc, #16]	; (405b54 <prvIsQueueFull+0x34>)
  405b42:	4798      	blx	r3

	return xReturn;
  405b44:	68fb      	ldr	r3, [r7, #12]
}
  405b46:	4618      	mov	r0, r3
  405b48:	3710      	adds	r7, #16
  405b4a:	46bd      	mov	sp, r7
  405b4c:	bd80      	pop	{r7, pc}
  405b4e:	bf00      	nop
  405b50:	0040503d 	.word	0x0040503d
  405b54:	0040505d 	.word	0x0040505d

00405b58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  405b58:	b580      	push	{r7, lr}
  405b5a:	b082      	sub	sp, #8
  405b5c:	af00      	add	r7, sp, #0
  405b5e:	6078      	str	r0, [r7, #4]
  405b60:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  405b62:	4b12      	ldr	r3, [pc, #72]	; (405bac <vQueueWaitForMessageRestricted+0x54>)
  405b64:	4798      	blx	r3
  405b66:	687b      	ldr	r3, [r7, #4]
  405b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  405b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
  405b6e:	d102      	bne.n	405b76 <vQueueWaitForMessageRestricted+0x1e>
  405b70:	687b      	ldr	r3, [r7, #4]
  405b72:	2200      	movs	r2, #0
  405b74:	645a      	str	r2, [r3, #68]	; 0x44
  405b76:	687b      	ldr	r3, [r7, #4]
  405b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  405b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
  405b7e:	d102      	bne.n	405b86 <vQueueWaitForMessageRestricted+0x2e>
  405b80:	687b      	ldr	r3, [r7, #4]
  405b82:	2200      	movs	r2, #0
  405b84:	649a      	str	r2, [r3, #72]	; 0x48
  405b86:	4b0a      	ldr	r3, [pc, #40]	; (405bb0 <vQueueWaitForMessageRestricted+0x58>)
  405b88:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  405b8a:	687b      	ldr	r3, [r7, #4]
  405b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  405b8e:	2b00      	cmp	r3, #0
  405b90:	d105      	bne.n	405b9e <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  405b92:	687b      	ldr	r3, [r7, #4]
  405b94:	3324      	adds	r3, #36	; 0x24
  405b96:	6839      	ldr	r1, [r7, #0]
  405b98:	4618      	mov	r0, r3
  405b9a:	4b06      	ldr	r3, [pc, #24]	; (405bb4 <vQueueWaitForMessageRestricted+0x5c>)
  405b9c:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
  405b9e:	6878      	ldr	r0, [r7, #4]
  405ba0:	4b05      	ldr	r3, [pc, #20]	; (405bb8 <vQueueWaitForMessageRestricted+0x60>)
  405ba2:	4798      	blx	r3
	}
  405ba4:	bf00      	nop
  405ba6:	3708      	adds	r7, #8
  405ba8:	46bd      	mov	sp, r7
  405baa:	bd80      	pop	{r7, pc}
  405bac:	0040503d 	.word	0x0040503d
  405bb0:	0040505d 	.word	0x0040505d
  405bb4:	00406291 	.word	0x00406291
  405bb8:	00405a45 	.word	0x00405a45

00405bbc <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  405bbc:	b590      	push	{r4, r7, lr}
  405bbe:	b08b      	sub	sp, #44	; 0x2c
  405bc0:	af02      	add	r7, sp, #8
  405bc2:	60f8      	str	r0, [r7, #12]
  405bc4:	60b9      	str	r1, [r7, #8]
  405bc6:	603b      	str	r3, [r7, #0]
  405bc8:	4613      	mov	r3, r2
  405bca:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
  405bcc:	68fb      	ldr	r3, [r7, #12]
  405bce:	2b00      	cmp	r3, #0
  405bd0:	d103      	bne.n	405bda <xTaskGenericCreate+0x1e>
  405bd2:	4b58      	ldr	r3, [pc, #352]	; (405d34 <xTaskGenericCreate+0x178>)
  405bd4:	4798      	blx	r3
  405bd6:	bf00      	nop
  405bd8:	e7fd      	b.n	405bd6 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
  405bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  405bdc:	2b04      	cmp	r3, #4
  405bde:	d903      	bls.n	405be8 <xTaskGenericCreate+0x2c>
  405be0:	4b54      	ldr	r3, [pc, #336]	; (405d34 <xTaskGenericCreate+0x178>)
  405be2:	4798      	blx	r3
  405be4:	bf00      	nop
  405be6:	e7fd      	b.n	405be4 <xTaskGenericCreate+0x28>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
  405be8:	88fb      	ldrh	r3, [r7, #6]
  405bea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  405bec:	4618      	mov	r0, r3
  405bee:	4b52      	ldr	r3, [pc, #328]	; (405d38 <xTaskGenericCreate+0x17c>)
  405bf0:	4798      	blx	r3
  405bf2:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
  405bf4:	69bb      	ldr	r3, [r7, #24]
  405bf6:	2b00      	cmp	r3, #0
  405bf8:	f000 8084 	beq.w	405d04 <xTaskGenericCreate+0x148>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
  405bfc:	69bb      	ldr	r3, [r7, #24]
  405bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  405c00:	88fb      	ldrh	r3, [r7, #6]
  405c02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  405c06:	3b01      	subs	r3, #1
  405c08:	009b      	lsls	r3, r3, #2
  405c0a:	4413      	add	r3, r2
  405c0c:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
  405c0e:	697b      	ldr	r3, [r7, #20]
  405c10:	f023 0307 	bic.w	r3, r3, #7
  405c14:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  405c16:	697b      	ldr	r3, [r7, #20]
  405c18:	f003 0307 	and.w	r3, r3, #7
  405c1c:	2b00      	cmp	r3, #0
  405c1e:	d003      	beq.n	405c28 <xTaskGenericCreate+0x6c>
  405c20:	4b44      	ldr	r3, [pc, #272]	; (405d34 <xTaskGenericCreate+0x178>)
  405c22:	4798      	blx	r3
  405c24:	bf00      	nop
  405c26:	e7fd      	b.n	405c24 <xTaskGenericCreate+0x68>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
  405c28:	88fb      	ldrh	r3, [r7, #6]
  405c2a:	9300      	str	r3, [sp, #0]
  405c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  405c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  405c30:	68b9      	ldr	r1, [r7, #8]
  405c32:	69b8      	ldr	r0, [r7, #24]
  405c34:	4c41      	ldr	r4, [pc, #260]	; (405d3c <xTaskGenericCreate+0x180>)
  405c36:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  405c38:	683a      	ldr	r2, [r7, #0]
  405c3a:	68f9      	ldr	r1, [r7, #12]
  405c3c:	6978      	ldr	r0, [r7, #20]
  405c3e:	4b40      	ldr	r3, [pc, #256]	; (405d40 <xTaskGenericCreate+0x184>)
  405c40:	4798      	blx	r3
  405c42:	4602      	mov	r2, r0
  405c44:	69bb      	ldr	r3, [r7, #24]
  405c46:	601a      	str	r2, [r3, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  405c48:	69bb      	ldr	r3, [r7, #24]
  405c4a:	681b      	ldr	r3, [r3, #0]
  405c4c:	f003 0307 	and.w	r3, r3, #7
  405c50:	2b00      	cmp	r3, #0
  405c52:	d003      	beq.n	405c5c <xTaskGenericCreate+0xa0>
  405c54:	4b37      	ldr	r3, [pc, #220]	; (405d34 <xTaskGenericCreate+0x178>)
  405c56:	4798      	blx	r3
  405c58:	bf00      	nop
  405c5a:	e7fd      	b.n	405c58 <xTaskGenericCreate+0x9c>

		if( ( void * ) pxCreatedTask != NULL )
  405c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  405c5e:	2b00      	cmp	r3, #0
  405c60:	d002      	beq.n	405c68 <xTaskGenericCreate+0xac>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  405c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  405c64:	69ba      	ldr	r2, [r7, #24]
  405c66:	601a      	str	r2, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  405c68:	4b36      	ldr	r3, [pc, #216]	; (405d44 <xTaskGenericCreate+0x188>)
  405c6a:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  405c6c:	4b36      	ldr	r3, [pc, #216]	; (405d48 <xTaskGenericCreate+0x18c>)
  405c6e:	681b      	ldr	r3, [r3, #0]
  405c70:	3301      	adds	r3, #1
  405c72:	4a35      	ldr	r2, [pc, #212]	; (405d48 <xTaskGenericCreate+0x18c>)
  405c74:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  405c76:	4b35      	ldr	r3, [pc, #212]	; (405d4c <xTaskGenericCreate+0x190>)
  405c78:	681b      	ldr	r3, [r3, #0]
  405c7a:	2b00      	cmp	r3, #0
  405c7c:	d109      	bne.n	405c92 <xTaskGenericCreate+0xd6>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  405c7e:	4a33      	ldr	r2, [pc, #204]	; (405d4c <xTaskGenericCreate+0x190>)
  405c80:	69bb      	ldr	r3, [r7, #24]
  405c82:	6013      	str	r3, [r2, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  405c84:	4b30      	ldr	r3, [pc, #192]	; (405d48 <xTaskGenericCreate+0x18c>)
  405c86:	681b      	ldr	r3, [r3, #0]
  405c88:	2b01      	cmp	r3, #1
  405c8a:	d10f      	bne.n	405cac <xTaskGenericCreate+0xf0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
  405c8c:	4b30      	ldr	r3, [pc, #192]	; (405d50 <xTaskGenericCreate+0x194>)
  405c8e:	4798      	blx	r3
  405c90:	e00c      	b.n	405cac <xTaskGenericCreate+0xf0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  405c92:	4b30      	ldr	r3, [pc, #192]	; (405d54 <xTaskGenericCreate+0x198>)
  405c94:	681b      	ldr	r3, [r3, #0]
  405c96:	2b00      	cmp	r3, #0
  405c98:	d108      	bne.n	405cac <xTaskGenericCreate+0xf0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  405c9a:	4b2c      	ldr	r3, [pc, #176]	; (405d4c <xTaskGenericCreate+0x190>)
  405c9c:	681b      	ldr	r3, [r3, #0]
  405c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  405ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  405ca2:	429a      	cmp	r2, r3
  405ca4:	d802      	bhi.n	405cac <xTaskGenericCreate+0xf0>
					{
						pxCurrentTCB = pxNewTCB;
  405ca6:	4a29      	ldr	r2, [pc, #164]	; (405d4c <xTaskGenericCreate+0x190>)
  405ca8:	69bb      	ldr	r3, [r7, #24]
  405caa:	6013      	str	r3, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  405cac:	69bb      	ldr	r3, [r7, #24]
  405cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  405cb0:	4b29      	ldr	r3, [pc, #164]	; (405d58 <xTaskGenericCreate+0x19c>)
  405cb2:	681b      	ldr	r3, [r3, #0]
  405cb4:	429a      	cmp	r2, r3
  405cb6:	d903      	bls.n	405cc0 <xTaskGenericCreate+0x104>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  405cb8:	69bb      	ldr	r3, [r7, #24]
  405cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  405cbc:	4a26      	ldr	r2, [pc, #152]	; (405d58 <xTaskGenericCreate+0x19c>)
  405cbe:	6013      	str	r3, [r2, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
  405cc0:	4b26      	ldr	r3, [pc, #152]	; (405d5c <xTaskGenericCreate+0x1a0>)
  405cc2:	681b      	ldr	r3, [r3, #0]
  405cc4:	3301      	adds	r3, #1
  405cc6:	4a25      	ldr	r2, [pc, #148]	; (405d5c <xTaskGenericCreate+0x1a0>)
  405cc8:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  405cca:	69bb      	ldr	r3, [r7, #24]
  405ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  405cce:	4b24      	ldr	r3, [pc, #144]	; (405d60 <xTaskGenericCreate+0x1a4>)
  405cd0:	681b      	ldr	r3, [r3, #0]
  405cd2:	429a      	cmp	r2, r3
  405cd4:	d903      	bls.n	405cde <xTaskGenericCreate+0x122>
  405cd6:	69bb      	ldr	r3, [r7, #24]
  405cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  405cda:	4a21      	ldr	r2, [pc, #132]	; (405d60 <xTaskGenericCreate+0x1a4>)
  405cdc:	6013      	str	r3, [r2, #0]
  405cde:	69bb      	ldr	r3, [r7, #24]
  405ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  405ce2:	4613      	mov	r3, r2
  405ce4:	009b      	lsls	r3, r3, #2
  405ce6:	4413      	add	r3, r2
  405ce8:	009b      	lsls	r3, r3, #2
  405cea:	4a1e      	ldr	r2, [pc, #120]	; (405d64 <xTaskGenericCreate+0x1a8>)
  405cec:	441a      	add	r2, r3
  405cee:	69bb      	ldr	r3, [r7, #24]
  405cf0:	3304      	adds	r3, #4
  405cf2:	4619      	mov	r1, r3
  405cf4:	4610      	mov	r0, r2
  405cf6:	4b1c      	ldr	r3, [pc, #112]	; (405d68 <xTaskGenericCreate+0x1ac>)
  405cf8:	4798      	blx	r3

			xReturn = pdPASS;
  405cfa:	2301      	movs	r3, #1
  405cfc:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  405cfe:	4b1b      	ldr	r3, [pc, #108]	; (405d6c <xTaskGenericCreate+0x1b0>)
  405d00:	4798      	blx	r3
  405d02:	e002      	b.n	405d0a <xTaskGenericCreate+0x14e>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  405d04:	f04f 33ff 	mov.w	r3, #4294967295
  405d08:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
  405d0a:	69fb      	ldr	r3, [r7, #28]
  405d0c:	2b01      	cmp	r3, #1
  405d0e:	d10b      	bne.n	405d28 <xTaskGenericCreate+0x16c>
	{
		if( xSchedulerRunning != pdFALSE )
  405d10:	4b10      	ldr	r3, [pc, #64]	; (405d54 <xTaskGenericCreate+0x198>)
  405d12:	681b      	ldr	r3, [r3, #0]
  405d14:	2b00      	cmp	r3, #0
  405d16:	d007      	beq.n	405d28 <xTaskGenericCreate+0x16c>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  405d18:	4b0c      	ldr	r3, [pc, #48]	; (405d4c <xTaskGenericCreate+0x190>)
  405d1a:	681b      	ldr	r3, [r3, #0]
  405d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  405d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  405d20:	429a      	cmp	r2, r3
  405d22:	d201      	bcs.n	405d28 <xTaskGenericCreate+0x16c>
			{
				portYIELD_WITHIN_API();
  405d24:	4b12      	ldr	r3, [pc, #72]	; (405d70 <xTaskGenericCreate+0x1b4>)
  405d26:	4798      	blx	r3
			}
		}
	}

	return xReturn;
  405d28:	69fb      	ldr	r3, [r7, #28]
}
  405d2a:	4618      	mov	r0, r3
  405d2c:	3724      	adds	r7, #36	; 0x24
  405d2e:	46bd      	mov	sp, r7
  405d30:	bd90      	pop	{r4, r7, pc}
  405d32:	bf00      	nop
  405d34:	00405085 	.word	0x00405085
  405d38:	004066c5 	.word	0x004066c5
  405d3c:	004064cd 	.word	0x004064cd
  405d40:	00404f59 	.word	0x00404f59
  405d44:	0040503d 	.word	0x0040503d
  405d48:	200026b4 	.word	0x200026b4
  405d4c:	200025dc 	.word	0x200025dc
  405d50:	00406541 	.word	0x00406541
  405d54:	200026c4 	.word	0x200026c4
  405d58:	200026bc 	.word	0x200026bc
  405d5c:	200026d8 	.word	0x200026d8
  405d60:	200026c0 	.word	0x200026c0
  405d64:	200025e0 	.word	0x200025e0
  405d68:	00404da1 	.word	0x00404da1
  405d6c:	0040505d 	.word	0x0040505d
  405d70:	00405025 	.word	0x00405025

00405d74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
  405d74:	b580      	push	{r7, lr}
  405d76:	b084      	sub	sp, #16
  405d78:	af00      	add	r7, sp, #0
  405d7a:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  405d7c:	2300      	movs	r3, #0
  405d7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
  405d80:	687b      	ldr	r3, [r7, #4]
  405d82:	2b00      	cmp	r3, #0
  405d84:	d012      	beq.n	405dac <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
  405d86:	4b0e      	ldr	r3, [pc, #56]	; (405dc0 <vTaskDelay+0x4c>)
  405d88:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  405d8a:	4b0e      	ldr	r3, [pc, #56]	; (405dc4 <vTaskDelay+0x50>)
  405d8c:	681a      	ldr	r2, [r3, #0]
  405d8e:	687b      	ldr	r3, [r7, #4]
  405d90:	4413      	add	r3, r2
  405d92:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  405d94:	4b0c      	ldr	r3, [pc, #48]	; (405dc8 <vTaskDelay+0x54>)
  405d96:	681b      	ldr	r3, [r3, #0]
  405d98:	3304      	adds	r3, #4
  405d9a:	4618      	mov	r0, r3
  405d9c:	4b0b      	ldr	r3, [pc, #44]	; (405dcc <vTaskDelay+0x58>)
  405d9e:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  405da0:	68b8      	ldr	r0, [r7, #8]
  405da2:	4b0b      	ldr	r3, [pc, #44]	; (405dd0 <vTaskDelay+0x5c>)
  405da4:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  405da6:	4b0b      	ldr	r3, [pc, #44]	; (405dd4 <vTaskDelay+0x60>)
  405da8:	4798      	blx	r3
  405daa:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  405dac:	68fb      	ldr	r3, [r7, #12]
  405dae:	2b00      	cmp	r3, #0
  405db0:	d101      	bne.n	405db6 <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
  405db2:	4b09      	ldr	r3, [pc, #36]	; (405dd8 <vTaskDelay+0x64>)
  405db4:	4798      	blx	r3
		}
	}
  405db6:	bf00      	nop
  405db8:	3710      	adds	r7, #16
  405dba:	46bd      	mov	sp, r7
  405dbc:	bd80      	pop	{r7, pc}
  405dbe:	bf00      	nop
  405dc0:	00405e5d 	.word	0x00405e5d
  405dc4:	200026b8 	.word	0x200026b8
  405dc8:	200025dc 	.word	0x200025dc
  405dcc:	00404e61 	.word	0x00404e61
  405dd0:	00406655 	.word	0x00406655
  405dd4:	00405e79 	.word	0x00405e79
  405dd8:	00405025 	.word	0x00405025

00405ddc <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  405ddc:	b590      	push	{r4, r7, lr}
  405dde:	b087      	sub	sp, #28
  405de0:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
  405de2:	2300      	movs	r3, #0
  405de4:	9303      	str	r3, [sp, #12]
  405de6:	2300      	movs	r3, #0
  405de8:	9302      	str	r3, [sp, #8]
  405dea:	2300      	movs	r3, #0
  405dec:	9301      	str	r3, [sp, #4]
  405dee:	2300      	movs	r3, #0
  405df0:	9300      	str	r3, [sp, #0]
  405df2:	2300      	movs	r3, #0
  405df4:	2264      	movs	r2, #100	; 0x64
  405df6:	4911      	ldr	r1, [pc, #68]	; (405e3c <vTaskStartScheduler+0x60>)
  405df8:	4811      	ldr	r0, [pc, #68]	; (405e40 <vTaskStartScheduler+0x64>)
  405dfa:	4c12      	ldr	r4, [pc, #72]	; (405e44 <vTaskStartScheduler+0x68>)
  405dfc:	47a0      	blx	r4
  405dfe:	6078      	str	r0, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  405e00:	687b      	ldr	r3, [r7, #4]
  405e02:	2b01      	cmp	r3, #1
  405e04:	d102      	bne.n	405e0c <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
  405e06:	4b10      	ldr	r3, [pc, #64]	; (405e48 <vTaskStartScheduler+0x6c>)
  405e08:	4798      	blx	r3
  405e0a:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
  405e0c:	687b      	ldr	r3, [r7, #4]
  405e0e:	2b01      	cmp	r3, #1
  405e10:	d109      	bne.n	405e26 <vTaskStartScheduler+0x4a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  405e12:	4b0e      	ldr	r3, [pc, #56]	; (405e4c <vTaskStartScheduler+0x70>)
  405e14:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
  405e16:	4b0e      	ldr	r3, [pc, #56]	; (405e50 <vTaskStartScheduler+0x74>)
  405e18:	2201      	movs	r2, #1
  405e1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
  405e1c:	4b0d      	ldr	r3, [pc, #52]	; (405e54 <vTaskStartScheduler+0x78>)
  405e1e:	2200      	movs	r2, #0
  405e20:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  405e22:	4b0d      	ldr	r3, [pc, #52]	; (405e58 <vTaskStartScheduler+0x7c>)
  405e24:	4798      	blx	r3
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
  405e26:	687b      	ldr	r3, [r7, #4]
  405e28:	2b00      	cmp	r3, #0
  405e2a:	d103      	bne.n	405e34 <vTaskStartScheduler+0x58>
  405e2c:	4b07      	ldr	r3, [pc, #28]	; (405e4c <vTaskStartScheduler+0x70>)
  405e2e:	4798      	blx	r3
  405e30:	bf00      	nop
  405e32:	e7fd      	b.n	405e30 <vTaskStartScheduler+0x54>
}
  405e34:	bf00      	nop
  405e36:	370c      	adds	r7, #12
  405e38:	46bd      	mov	sp, r7
  405e3a:	bd90      	pop	{r4, r7, pc}
  405e3c:	0040b604 	.word	0x0040b604
  405e40:	004064b9 	.word	0x004064b9
  405e44:	00405bbd 	.word	0x00405bbd
  405e48:	004068e9 	.word	0x004068e9
  405e4c:	00405085 	.word	0x00405085
  405e50:	200026c4 	.word	0x200026c4
  405e54:	200026b8 	.word	0x200026b8
  405e58:	00404fe5 	.word	0x00404fe5

00405e5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
  405e5c:	b480      	push	{r7}
  405e5e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  405e60:	4b04      	ldr	r3, [pc, #16]	; (405e74 <vTaskSuspendAll+0x18>)
  405e62:	681b      	ldr	r3, [r3, #0]
  405e64:	3301      	adds	r3, #1
  405e66:	4a03      	ldr	r2, [pc, #12]	; (405e74 <vTaskSuspendAll+0x18>)
  405e68:	6013      	str	r3, [r2, #0]
}
  405e6a:	bf00      	nop
  405e6c:	46bd      	mov	sp, r7
  405e6e:	bc80      	pop	{r7}
  405e70:	4770      	bx	lr
  405e72:	bf00      	nop
  405e74:	200026c8 	.word	0x200026c8

00405e78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  405e78:	b590      	push	{r4, r7, lr}
  405e7a:	b083      	sub	sp, #12
  405e7c:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  405e7e:	2300      	movs	r3, #0
  405e80:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  405e82:	4b36      	ldr	r3, [pc, #216]	; (405f5c <xTaskResumeAll+0xe4>)
  405e84:	681b      	ldr	r3, [r3, #0]
  405e86:	2b00      	cmp	r3, #0
  405e88:	d103      	bne.n	405e92 <xTaskResumeAll+0x1a>
  405e8a:	4b35      	ldr	r3, [pc, #212]	; (405f60 <xTaskResumeAll+0xe8>)
  405e8c:	4798      	blx	r3
  405e8e:	bf00      	nop
  405e90:	e7fd      	b.n	405e8e <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  405e92:	4b34      	ldr	r3, [pc, #208]	; (405f64 <xTaskResumeAll+0xec>)
  405e94:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  405e96:	4b31      	ldr	r3, [pc, #196]	; (405f5c <xTaskResumeAll+0xe4>)
  405e98:	681b      	ldr	r3, [r3, #0]
  405e9a:	3b01      	subs	r3, #1
  405e9c:	4a2f      	ldr	r2, [pc, #188]	; (405f5c <xTaskResumeAll+0xe4>)
  405e9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  405ea0:	4b2e      	ldr	r3, [pc, #184]	; (405f5c <xTaskResumeAll+0xe4>)
  405ea2:	681b      	ldr	r3, [r3, #0]
  405ea4:	2b00      	cmp	r3, #0
  405ea6:	d152      	bne.n	405f4e <xTaskResumeAll+0xd6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
  405ea8:	4b2f      	ldr	r3, [pc, #188]	; (405f68 <xTaskResumeAll+0xf0>)
  405eaa:	681b      	ldr	r3, [r3, #0]
  405eac:	2b00      	cmp	r3, #0
  405eae:	d04e      	beq.n	405f4e <xTaskResumeAll+0xd6>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
  405eb0:	2300      	movs	r3, #0
  405eb2:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  405eb4:	e027      	b.n	405f06 <xTaskResumeAll+0x8e>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  405eb6:	4b2d      	ldr	r3, [pc, #180]	; (405f6c <xTaskResumeAll+0xf4>)
  405eb8:	68db      	ldr	r3, [r3, #12]
  405eba:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
  405ebc:	f104 0318 	add.w	r3, r4, #24
  405ec0:	4618      	mov	r0, r3
  405ec2:	4b2b      	ldr	r3, [pc, #172]	; (405f70 <xTaskResumeAll+0xf8>)
  405ec4:	4798      	blx	r3
					uxListRemove( &( pxTCB->xGenericListItem ) );
  405ec6:	1d23      	adds	r3, r4, #4
  405ec8:	4618      	mov	r0, r3
  405eca:	4b29      	ldr	r3, [pc, #164]	; (405f70 <xTaskResumeAll+0xf8>)
  405ecc:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
  405ece:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  405ed0:	4b28      	ldr	r3, [pc, #160]	; (405f74 <xTaskResumeAll+0xfc>)
  405ed2:	681b      	ldr	r3, [r3, #0]
  405ed4:	429a      	cmp	r2, r3
  405ed6:	d902      	bls.n	405ede <xTaskResumeAll+0x66>
  405ed8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  405eda:	4a26      	ldr	r2, [pc, #152]	; (405f74 <xTaskResumeAll+0xfc>)
  405edc:	6013      	str	r3, [r2, #0]
  405ede:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  405ee0:	4613      	mov	r3, r2
  405ee2:	009b      	lsls	r3, r3, #2
  405ee4:	4413      	add	r3, r2
  405ee6:	009b      	lsls	r3, r3, #2
  405ee8:	4a23      	ldr	r2, [pc, #140]	; (405f78 <xTaskResumeAll+0x100>)
  405eea:	4413      	add	r3, r2
  405eec:	1d22      	adds	r2, r4, #4
  405eee:	4611      	mov	r1, r2
  405ef0:	4618      	mov	r0, r3
  405ef2:	4b22      	ldr	r3, [pc, #136]	; (405f7c <xTaskResumeAll+0x104>)
  405ef4:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  405ef6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  405ef8:	4b21      	ldr	r3, [pc, #132]	; (405f80 <xTaskResumeAll+0x108>)
  405efa:	681b      	ldr	r3, [r3, #0]
  405efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  405efe:	429a      	cmp	r2, r3
  405f00:	d301      	bcc.n	405f06 <xTaskResumeAll+0x8e>
					{
						xYieldRequired = pdTRUE;
  405f02:	2301      	movs	r3, #1
  405f04:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  405f06:	4b19      	ldr	r3, [pc, #100]	; (405f6c <xTaskResumeAll+0xf4>)
  405f08:	681b      	ldr	r3, [r3, #0]
  405f0a:	2b00      	cmp	r3, #0
  405f0c:	d1d3      	bne.n	405eb6 <xTaskResumeAll+0x3e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  405f0e:	4b1d      	ldr	r3, [pc, #116]	; (405f84 <xTaskResumeAll+0x10c>)
  405f10:	681b      	ldr	r3, [r3, #0]
  405f12:	2b00      	cmp	r3, #0
  405f14:	d00d      	beq.n	405f32 <xTaskResumeAll+0xba>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  405f16:	e006      	b.n	405f26 <xTaskResumeAll+0xae>
					{
						vTaskIncrementTick();
  405f18:	4b1b      	ldr	r3, [pc, #108]	; (405f88 <xTaskResumeAll+0x110>)
  405f1a:	4798      	blx	r3
						--uxMissedTicks;
  405f1c:	4b19      	ldr	r3, [pc, #100]	; (405f84 <xTaskResumeAll+0x10c>)
  405f1e:	681b      	ldr	r3, [r3, #0]
  405f20:	3b01      	subs	r3, #1
  405f22:	4a18      	ldr	r2, [pc, #96]	; (405f84 <xTaskResumeAll+0x10c>)
  405f24:	6013      	str	r3, [r2, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  405f26:	4b17      	ldr	r3, [pc, #92]	; (405f84 <xTaskResumeAll+0x10c>)
  405f28:	681b      	ldr	r3, [r3, #0]
  405f2a:	2b00      	cmp	r3, #0
  405f2c:	d1f4      	bne.n	405f18 <xTaskResumeAll+0xa0>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
  405f2e:	2301      	movs	r3, #1
  405f30:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  405f32:	683b      	ldr	r3, [r7, #0]
  405f34:	2b01      	cmp	r3, #1
  405f36:	d003      	beq.n	405f40 <xTaskResumeAll+0xc8>
  405f38:	4b14      	ldr	r3, [pc, #80]	; (405f8c <xTaskResumeAll+0x114>)
  405f3a:	681b      	ldr	r3, [r3, #0]
  405f3c:	2b01      	cmp	r3, #1
  405f3e:	d106      	bne.n	405f4e <xTaskResumeAll+0xd6>
				{
					xAlreadyYielded = pdTRUE;
  405f40:	2301      	movs	r3, #1
  405f42:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
  405f44:	4b11      	ldr	r3, [pc, #68]	; (405f8c <xTaskResumeAll+0x114>)
  405f46:	2200      	movs	r2, #0
  405f48:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  405f4a:	4b11      	ldr	r3, [pc, #68]	; (405f90 <xTaskResumeAll+0x118>)
  405f4c:	4798      	blx	r3
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  405f4e:	4b11      	ldr	r3, [pc, #68]	; (405f94 <xTaskResumeAll+0x11c>)
  405f50:	4798      	blx	r3

	return xAlreadyYielded;
  405f52:	687b      	ldr	r3, [r7, #4]
}
  405f54:	4618      	mov	r0, r3
  405f56:	370c      	adds	r7, #12
  405f58:	46bd      	mov	sp, r7
  405f5a:	bd90      	pop	{r4, r7, pc}
  405f5c:	200026c8 	.word	0x200026c8
  405f60:	00405085 	.word	0x00405085
  405f64:	0040503d 	.word	0x0040503d
  405f68:	200026b4 	.word	0x200026b4
  405f6c:	20002674 	.word	0x20002674
  405f70:	00404e61 	.word	0x00404e61
  405f74:	200026c0 	.word	0x200026c0
  405f78:	200025e0 	.word	0x200025e0
  405f7c:	00404da1 	.word	0x00404da1
  405f80:	200025dc 	.word	0x200025dc
  405f84:	200026cc 	.word	0x200026cc
  405f88:	00405fc5 	.word	0x00405fc5
  405f8c:	200026d0 	.word	0x200026d0
  405f90:	00405025 	.word	0x00405025
  405f94:	0040505d 	.word	0x0040505d

00405f98 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
  405f98:	b580      	push	{r7, lr}
  405f9a:	b082      	sub	sp, #8
  405f9c:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
  405f9e:	4b06      	ldr	r3, [pc, #24]	; (405fb8 <xTaskGetTickCount+0x20>)
  405fa0:	4798      	blx	r3
	{
		xTicks = xTickCount;
  405fa2:	4b06      	ldr	r3, [pc, #24]	; (405fbc <xTaskGetTickCount+0x24>)
  405fa4:	681b      	ldr	r3, [r3, #0]
  405fa6:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
  405fa8:	4b05      	ldr	r3, [pc, #20]	; (405fc0 <xTaskGetTickCount+0x28>)
  405faa:	4798      	blx	r3

	return xTicks;
  405fac:	687b      	ldr	r3, [r7, #4]
}
  405fae:	4618      	mov	r0, r3
  405fb0:	3708      	adds	r7, #8
  405fb2:	46bd      	mov	sp, r7
  405fb4:	bd80      	pop	{r7, pc}
  405fb6:	bf00      	nop
  405fb8:	0040503d 	.word	0x0040503d
  405fbc:	200026b8 	.word	0x200026b8
  405fc0:	0040505d 	.word	0x0040505d

00405fc4 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
  405fc4:	b580      	push	{r7, lr}
  405fc6:	b084      	sub	sp, #16
  405fc8:	af00      	add	r7, sp, #0

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  405fca:	4b45      	ldr	r3, [pc, #276]	; (4060e0 <vTaskIncrementTick+0x11c>)
  405fcc:	681b      	ldr	r3, [r3, #0]
  405fce:	2b00      	cmp	r3, #0
  405fd0:	d17b      	bne.n	4060ca <vTaskIncrementTick+0x106>
	{
		++xTickCount;
  405fd2:	4b44      	ldr	r3, [pc, #272]	; (4060e4 <vTaskIncrementTick+0x120>)
  405fd4:	681b      	ldr	r3, [r3, #0]
  405fd6:	3301      	adds	r3, #1
  405fd8:	4a42      	ldr	r2, [pc, #264]	; (4060e4 <vTaskIncrementTick+0x120>)
  405fda:	6013      	str	r3, [r2, #0]
		if( xTickCount == ( portTickType ) 0U )
  405fdc:	4b41      	ldr	r3, [pc, #260]	; (4060e4 <vTaskIncrementTick+0x120>)
  405fde:	681b      	ldr	r3, [r3, #0]
  405fe0:	2b00      	cmp	r3, #0
  405fe2:	d12a      	bne.n	40603a <vTaskIncrementTick+0x76>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  405fe4:	4b40      	ldr	r3, [pc, #256]	; (4060e8 <vTaskIncrementTick+0x124>)
  405fe6:	681b      	ldr	r3, [r3, #0]
  405fe8:	681b      	ldr	r3, [r3, #0]
  405fea:	2b00      	cmp	r3, #0
  405fec:	d003      	beq.n	405ff6 <vTaskIncrementTick+0x32>
  405fee:	4b3f      	ldr	r3, [pc, #252]	; (4060ec <vTaskIncrementTick+0x128>)
  405ff0:	4798      	blx	r3
  405ff2:	bf00      	nop
  405ff4:	e7fd      	b.n	405ff2 <vTaskIncrementTick+0x2e>

			pxTemp = pxDelayedTaskList;
  405ff6:	4b3c      	ldr	r3, [pc, #240]	; (4060e8 <vTaskIncrementTick+0x124>)
  405ff8:	681b      	ldr	r3, [r3, #0]
  405ffa:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  405ffc:	4b3c      	ldr	r3, [pc, #240]	; (4060f0 <vTaskIncrementTick+0x12c>)
  405ffe:	681b      	ldr	r3, [r3, #0]
  406000:	4a39      	ldr	r2, [pc, #228]	; (4060e8 <vTaskIncrementTick+0x124>)
  406002:	6013      	str	r3, [r2, #0]
			pxOverflowDelayedTaskList = pxTemp;
  406004:	4a3a      	ldr	r2, [pc, #232]	; (4060f0 <vTaskIncrementTick+0x12c>)
  406006:	68fb      	ldr	r3, [r7, #12]
  406008:	6013      	str	r3, [r2, #0]
			xNumOfOverflows++;
  40600a:	4b3a      	ldr	r3, [pc, #232]	; (4060f4 <vTaskIncrementTick+0x130>)
  40600c:	681b      	ldr	r3, [r3, #0]
  40600e:	3301      	adds	r3, #1
  406010:	4a38      	ldr	r2, [pc, #224]	; (4060f4 <vTaskIncrementTick+0x130>)
  406012:	6013      	str	r3, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  406014:	4b34      	ldr	r3, [pc, #208]	; (4060e8 <vTaskIncrementTick+0x124>)
  406016:	681b      	ldr	r3, [r3, #0]
  406018:	681b      	ldr	r3, [r3, #0]
  40601a:	2b00      	cmp	r3, #0
  40601c:	d104      	bne.n	406028 <vTaskIncrementTick+0x64>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  40601e:	4b36      	ldr	r3, [pc, #216]	; (4060f8 <vTaskIncrementTick+0x134>)
  406020:	f04f 32ff 	mov.w	r2, #4294967295
  406024:	601a      	str	r2, [r3, #0]
  406026:	e008      	b.n	40603a <vTaskIncrementTick+0x76>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  406028:	4b2f      	ldr	r3, [pc, #188]	; (4060e8 <vTaskIncrementTick+0x124>)
  40602a:	681b      	ldr	r3, [r3, #0]
  40602c:	68db      	ldr	r3, [r3, #12]
  40602e:	68db      	ldr	r3, [r3, #12]
  406030:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  406032:	68bb      	ldr	r3, [r7, #8]
  406034:	685b      	ldr	r3, [r3, #4]
  406036:	4a30      	ldr	r2, [pc, #192]	; (4060f8 <vTaskIncrementTick+0x134>)
  406038:	6013      	str	r3, [r2, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  40603a:	4b2a      	ldr	r3, [pc, #168]	; (4060e4 <vTaskIncrementTick+0x120>)
  40603c:	681a      	ldr	r2, [r3, #0]
  40603e:	4b2e      	ldr	r3, [pc, #184]	; (4060f8 <vTaskIncrementTick+0x134>)
  406040:	681b      	ldr	r3, [r3, #0]
  406042:	429a      	cmp	r2, r3
  406044:	d347      	bcc.n	4060d6 <vTaskIncrementTick+0x112>
  406046:	4b28      	ldr	r3, [pc, #160]	; (4060e8 <vTaskIncrementTick+0x124>)
  406048:	681b      	ldr	r3, [r3, #0]
  40604a:	681b      	ldr	r3, [r3, #0]
  40604c:	2b00      	cmp	r3, #0
  40604e:	d104      	bne.n	40605a <vTaskIncrementTick+0x96>
  406050:	4b29      	ldr	r3, [pc, #164]	; (4060f8 <vTaskIncrementTick+0x134>)
  406052:	f04f 32ff 	mov.w	r2, #4294967295
  406056:	601a      	str	r2, [r3, #0]
  406058:	e03d      	b.n	4060d6 <vTaskIncrementTick+0x112>
  40605a:	4b23      	ldr	r3, [pc, #140]	; (4060e8 <vTaskIncrementTick+0x124>)
  40605c:	681b      	ldr	r3, [r3, #0]
  40605e:	68db      	ldr	r3, [r3, #12]
  406060:	68db      	ldr	r3, [r3, #12]
  406062:	60bb      	str	r3, [r7, #8]
  406064:	68bb      	ldr	r3, [r7, #8]
  406066:	685b      	ldr	r3, [r3, #4]
  406068:	607b      	str	r3, [r7, #4]
  40606a:	4b1e      	ldr	r3, [pc, #120]	; (4060e4 <vTaskIncrementTick+0x120>)
  40606c:	681a      	ldr	r2, [r3, #0]
  40606e:	687b      	ldr	r3, [r7, #4]
  406070:	429a      	cmp	r2, r3
  406072:	d203      	bcs.n	40607c <vTaskIncrementTick+0xb8>
  406074:	4a20      	ldr	r2, [pc, #128]	; (4060f8 <vTaskIncrementTick+0x134>)
  406076:	687b      	ldr	r3, [r7, #4]
  406078:	6013      	str	r3, [r2, #0]
  40607a:	e02c      	b.n	4060d6 <vTaskIncrementTick+0x112>
  40607c:	68bb      	ldr	r3, [r7, #8]
  40607e:	3304      	adds	r3, #4
  406080:	4618      	mov	r0, r3
  406082:	4b1e      	ldr	r3, [pc, #120]	; (4060fc <vTaskIncrementTick+0x138>)
  406084:	4798      	blx	r3
  406086:	68bb      	ldr	r3, [r7, #8]
  406088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40608a:	2b00      	cmp	r3, #0
  40608c:	d004      	beq.n	406098 <vTaskIncrementTick+0xd4>
  40608e:	68bb      	ldr	r3, [r7, #8]
  406090:	3318      	adds	r3, #24
  406092:	4618      	mov	r0, r3
  406094:	4b19      	ldr	r3, [pc, #100]	; (4060fc <vTaskIncrementTick+0x138>)
  406096:	4798      	blx	r3
  406098:	68bb      	ldr	r3, [r7, #8]
  40609a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40609c:	4b18      	ldr	r3, [pc, #96]	; (406100 <vTaskIncrementTick+0x13c>)
  40609e:	681b      	ldr	r3, [r3, #0]
  4060a0:	429a      	cmp	r2, r3
  4060a2:	d903      	bls.n	4060ac <vTaskIncrementTick+0xe8>
  4060a4:	68bb      	ldr	r3, [r7, #8]
  4060a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4060a8:	4a15      	ldr	r2, [pc, #84]	; (406100 <vTaskIncrementTick+0x13c>)
  4060aa:	6013      	str	r3, [r2, #0]
  4060ac:	68bb      	ldr	r3, [r7, #8]
  4060ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4060b0:	4613      	mov	r3, r2
  4060b2:	009b      	lsls	r3, r3, #2
  4060b4:	4413      	add	r3, r2
  4060b6:	009b      	lsls	r3, r3, #2
  4060b8:	4a12      	ldr	r2, [pc, #72]	; (406104 <vTaskIncrementTick+0x140>)
  4060ba:	441a      	add	r2, r3
  4060bc:	68bb      	ldr	r3, [r7, #8]
  4060be:	3304      	adds	r3, #4
  4060c0:	4619      	mov	r1, r3
  4060c2:	4610      	mov	r0, r2
  4060c4:	4b10      	ldr	r3, [pc, #64]	; (406108 <vTaskIncrementTick+0x144>)
  4060c6:	4798      	blx	r3
  4060c8:	e7bd      	b.n	406046 <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
  4060ca:	4b10      	ldr	r3, [pc, #64]	; (40610c <vTaskIncrementTick+0x148>)
  4060cc:	681b      	ldr	r3, [r3, #0]
  4060ce:	3301      	adds	r3, #1
  4060d0:	4a0e      	ldr	r2, [pc, #56]	; (40610c <vTaskIncrementTick+0x148>)
  4060d2:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
  4060d4:	e7ff      	b.n	4060d6 <vTaskIncrementTick+0x112>
  4060d6:	bf00      	nop
  4060d8:	3710      	adds	r7, #16
  4060da:	46bd      	mov	sp, r7
  4060dc:	bd80      	pop	{r7, pc}
  4060de:	bf00      	nop
  4060e0:	200026c8 	.word	0x200026c8
  4060e4:	200026b8 	.word	0x200026b8
  4060e8:	2000266c 	.word	0x2000266c
  4060ec:	00405085 	.word	0x00405085
  4060f0:	20002670 	.word	0x20002670
  4060f4:	200026d4 	.word	0x200026d4
  4060f8:	20000038 	.word	0x20000038
  4060fc:	00404e61 	.word	0x00404e61
  406100:	200026c0 	.word	0x200026c0
  406104:	200025e0 	.word	0x200025e0
  406108:	00404da1 	.word	0x00404da1
  40610c:	200026cc 	.word	0x200026cc

00406110 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  406110:	b580      	push	{r7, lr}
  406112:	b082      	sub	sp, #8
  406114:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  406116:	4b34      	ldr	r3, [pc, #208]	; (4061e8 <vTaskSwitchContext+0xd8>)
  406118:	681b      	ldr	r3, [r3, #0]
  40611a:	2b00      	cmp	r3, #0
  40611c:	d003      	beq.n	406126 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  40611e:	4b33      	ldr	r3, [pc, #204]	; (4061ec <vTaskSwitchContext+0xdc>)
  406120:	2201      	movs	r2, #1
  406122:	601a      	str	r2, [r3, #0]

		taskSELECT_HIGHEST_PRIORITY_TASK();

		traceTASK_SWITCHED_IN();
	}
}
  406124:	e05b      	b.n	4061de <vTaskSwitchContext+0xce>
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
				ulTaskSwitchedInTime = ulTempCounter;
		}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
  406126:	4b32      	ldr	r3, [pc, #200]	; (4061f0 <vTaskSwitchContext+0xe0>)
  406128:	681b      	ldr	r3, [r3, #0]
  40612a:	681a      	ldr	r2, [r3, #0]
  40612c:	4b30      	ldr	r3, [pc, #192]	; (4061f0 <vTaskSwitchContext+0xe0>)
  40612e:	681b      	ldr	r3, [r3, #0]
  406130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406132:	429a      	cmp	r2, r3
  406134:	d808      	bhi.n	406148 <vTaskSwitchContext+0x38>
  406136:	4b2e      	ldr	r3, [pc, #184]	; (4061f0 <vTaskSwitchContext+0xe0>)
  406138:	681a      	ldr	r2, [r3, #0]
  40613a:	4b2d      	ldr	r3, [pc, #180]	; (4061f0 <vTaskSwitchContext+0xe0>)
  40613c:	681b      	ldr	r3, [r3, #0]
  40613e:	3334      	adds	r3, #52	; 0x34
  406140:	4619      	mov	r1, r3
  406142:	4610      	mov	r0, r2
  406144:	4b2b      	ldr	r3, [pc, #172]	; (4061f4 <vTaskSwitchContext+0xe4>)
  406146:	4798      	blx	r3
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
  406148:	4b29      	ldr	r3, [pc, #164]	; (4061f0 <vTaskSwitchContext+0xe0>)
  40614a:	681b      	ldr	r3, [r3, #0]
  40614c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40614e:	2214      	movs	r2, #20
  406150:	4929      	ldr	r1, [pc, #164]	; (4061f8 <vTaskSwitchContext+0xe8>)
  406152:	4618      	mov	r0, r3
  406154:	4b29      	ldr	r3, [pc, #164]	; (4061fc <vTaskSwitchContext+0xec>)
  406156:	4798      	blx	r3
  406158:	4603      	mov	r3, r0
  40615a:	2b00      	cmp	r3, #0
  40615c:	d016      	beq.n	40618c <vTaskSwitchContext+0x7c>
  40615e:	4b24      	ldr	r3, [pc, #144]	; (4061f0 <vTaskSwitchContext+0xe0>)
  406160:	681a      	ldr	r2, [r3, #0]
  406162:	4b23      	ldr	r3, [pc, #140]	; (4061f0 <vTaskSwitchContext+0xe0>)
  406164:	681b      	ldr	r3, [r3, #0]
  406166:	3334      	adds	r3, #52	; 0x34
  406168:	4619      	mov	r1, r3
  40616a:	4610      	mov	r0, r2
  40616c:	4b21      	ldr	r3, [pc, #132]	; (4061f4 <vTaskSwitchContext+0xe4>)
  40616e:	4798      	blx	r3

		taskSELECT_HIGHEST_PRIORITY_TASK();
  406170:	e00c      	b.n	40618c <vTaskSwitchContext+0x7c>
  406172:	4b23      	ldr	r3, [pc, #140]	; (406200 <vTaskSwitchContext+0xf0>)
  406174:	681b      	ldr	r3, [r3, #0]
  406176:	2b00      	cmp	r3, #0
  406178:	d103      	bne.n	406182 <vTaskSwitchContext+0x72>
  40617a:	4b22      	ldr	r3, [pc, #136]	; (406204 <vTaskSwitchContext+0xf4>)
  40617c:	4798      	blx	r3
  40617e:	bf00      	nop
  406180:	e7fd      	b.n	40617e <vTaskSwitchContext+0x6e>
  406182:	4b1f      	ldr	r3, [pc, #124]	; (406200 <vTaskSwitchContext+0xf0>)
  406184:	681b      	ldr	r3, [r3, #0]
  406186:	3b01      	subs	r3, #1
  406188:	4a1d      	ldr	r2, [pc, #116]	; (406200 <vTaskSwitchContext+0xf0>)
  40618a:	6013      	str	r3, [r2, #0]
  40618c:	4b1c      	ldr	r3, [pc, #112]	; (406200 <vTaskSwitchContext+0xf0>)
  40618e:	681a      	ldr	r2, [r3, #0]
  406190:	491d      	ldr	r1, [pc, #116]	; (406208 <vTaskSwitchContext+0xf8>)
  406192:	4613      	mov	r3, r2
  406194:	009b      	lsls	r3, r3, #2
  406196:	4413      	add	r3, r2
  406198:	009b      	lsls	r3, r3, #2
  40619a:	440b      	add	r3, r1
  40619c:	681b      	ldr	r3, [r3, #0]
  40619e:	2b00      	cmp	r3, #0
  4061a0:	d0e7      	beq.n	406172 <vTaskSwitchContext+0x62>
  4061a2:	4b17      	ldr	r3, [pc, #92]	; (406200 <vTaskSwitchContext+0xf0>)
  4061a4:	681a      	ldr	r2, [r3, #0]
  4061a6:	4613      	mov	r3, r2
  4061a8:	009b      	lsls	r3, r3, #2
  4061aa:	4413      	add	r3, r2
  4061ac:	009b      	lsls	r3, r3, #2
  4061ae:	4a16      	ldr	r2, [pc, #88]	; (406208 <vTaskSwitchContext+0xf8>)
  4061b0:	4413      	add	r3, r2
  4061b2:	607b      	str	r3, [r7, #4]
  4061b4:	687b      	ldr	r3, [r7, #4]
  4061b6:	685b      	ldr	r3, [r3, #4]
  4061b8:	685a      	ldr	r2, [r3, #4]
  4061ba:	687b      	ldr	r3, [r7, #4]
  4061bc:	605a      	str	r2, [r3, #4]
  4061be:	687b      	ldr	r3, [r7, #4]
  4061c0:	685a      	ldr	r2, [r3, #4]
  4061c2:	687b      	ldr	r3, [r7, #4]
  4061c4:	3308      	adds	r3, #8
  4061c6:	429a      	cmp	r2, r3
  4061c8:	d104      	bne.n	4061d4 <vTaskSwitchContext+0xc4>
  4061ca:	687b      	ldr	r3, [r7, #4]
  4061cc:	685b      	ldr	r3, [r3, #4]
  4061ce:	685a      	ldr	r2, [r3, #4]
  4061d0:	687b      	ldr	r3, [r7, #4]
  4061d2:	605a      	str	r2, [r3, #4]
  4061d4:	687b      	ldr	r3, [r7, #4]
  4061d6:	685b      	ldr	r3, [r3, #4]
  4061d8:	68db      	ldr	r3, [r3, #12]
  4061da:	4a05      	ldr	r2, [pc, #20]	; (4061f0 <vTaskSwitchContext+0xe0>)
  4061dc:	6013      	str	r3, [r2, #0]

		traceTASK_SWITCHED_IN();
	}
}
  4061de:	bf00      	nop
  4061e0:	3708      	adds	r7, #8
  4061e2:	46bd      	mov	sp, r7
  4061e4:	bd80      	pop	{r7, pc}
  4061e6:	bf00      	nop
  4061e8:	200026c8 	.word	0x200026c8
  4061ec:	200026d0 	.word	0x200026d0
  4061f0:	200025dc 	.word	0x200025dc
  4061f4:	004074b9 	.word	0x004074b9
  4061f8:	0040b60c 	.word	0x0040b60c
  4061fc:	0040b225 	.word	0x0040b225
  406200:	200026c0 	.word	0x200026c0
  406204:	00405085 	.word	0x00405085
  406208:	200025e0 	.word	0x200025e0

0040620c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  40620c:	b580      	push	{r7, lr}
  40620e:	b084      	sub	sp, #16
  406210:	af00      	add	r7, sp, #0
  406212:	6078      	str	r0, [r7, #4]
  406214:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
  406216:	687b      	ldr	r3, [r7, #4]
  406218:	2b00      	cmp	r3, #0
  40621a:	d103      	bne.n	406224 <vTaskPlaceOnEventList+0x18>
  40621c:	4b14      	ldr	r3, [pc, #80]	; (406270 <vTaskPlaceOnEventList+0x64>)
  40621e:	4798      	blx	r3
  406220:	bf00      	nop
  406222:	e7fd      	b.n	406220 <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  406224:	4b13      	ldr	r3, [pc, #76]	; (406274 <vTaskPlaceOnEventList+0x68>)
  406226:	681b      	ldr	r3, [r3, #0]
  406228:	3318      	adds	r3, #24
  40622a:	4619      	mov	r1, r3
  40622c:	6878      	ldr	r0, [r7, #4]
  40622e:	4b12      	ldr	r3, [pc, #72]	; (406278 <vTaskPlaceOnEventList+0x6c>)
  406230:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  406232:	4b10      	ldr	r3, [pc, #64]	; (406274 <vTaskPlaceOnEventList+0x68>)
  406234:	681b      	ldr	r3, [r3, #0]
  406236:	3304      	adds	r3, #4
  406238:	4618      	mov	r0, r3
  40623a:	4b10      	ldr	r3, [pc, #64]	; (40627c <vTaskPlaceOnEventList+0x70>)
  40623c:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  40623e:	683b      	ldr	r3, [r7, #0]
  406240:	f1b3 3fff 	cmp.w	r3, #4294967295
  406244:	d107      	bne.n	406256 <vTaskPlaceOnEventList+0x4a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  406246:	4b0b      	ldr	r3, [pc, #44]	; (406274 <vTaskPlaceOnEventList+0x68>)
  406248:	681b      	ldr	r3, [r3, #0]
  40624a:	3304      	adds	r3, #4
  40624c:	4619      	mov	r1, r3
  40624e:	480c      	ldr	r0, [pc, #48]	; (406280 <vTaskPlaceOnEventList+0x74>)
  406250:	4b0c      	ldr	r3, [pc, #48]	; (406284 <vTaskPlaceOnEventList+0x78>)
  406252:	4798      	blx	r3
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
  406254:	e007      	b.n	406266 <vTaskPlaceOnEventList+0x5a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
  406256:	4b0c      	ldr	r3, [pc, #48]	; (406288 <vTaskPlaceOnEventList+0x7c>)
  406258:	681a      	ldr	r2, [r3, #0]
  40625a:	683b      	ldr	r3, [r7, #0]
  40625c:	4413      	add	r3, r2
  40625e:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  406260:	68f8      	ldr	r0, [r7, #12]
  406262:	4b0a      	ldr	r3, [pc, #40]	; (40628c <vTaskPlaceOnEventList+0x80>)
  406264:	4798      	blx	r3
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
  406266:	bf00      	nop
  406268:	3710      	adds	r7, #16
  40626a:	46bd      	mov	sp, r7
  40626c:	bd80      	pop	{r7, pc}
  40626e:	bf00      	nop
  406270:	00405085 	.word	0x00405085
  406274:	200025dc 	.word	0x200025dc
  406278:	00404df1 	.word	0x00404df1
  40627c:	00404e61 	.word	0x00404e61
  406280:	200026a0 	.word	0x200026a0
  406284:	00404da1 	.word	0x00404da1
  406288:	200026b8 	.word	0x200026b8
  40628c:	00406655 	.word	0x00406655

00406290 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
  406290:	b580      	push	{r7, lr}
  406292:	b084      	sub	sp, #16
  406294:	af00      	add	r7, sp, #0
  406296:	6078      	str	r0, [r7, #4]
  406298:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
  40629a:	687b      	ldr	r3, [r7, #4]
  40629c:	2b00      	cmp	r3, #0
  40629e:	d103      	bne.n	4062a8 <vTaskPlaceOnEventListRestricted+0x18>
  4062a0:	4b0e      	ldr	r3, [pc, #56]	; (4062dc <vTaskPlaceOnEventListRestricted+0x4c>)
  4062a2:	4798      	blx	r3
  4062a4:	bf00      	nop
  4062a6:	e7fd      	b.n	4062a4 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  4062a8:	4b0d      	ldr	r3, [pc, #52]	; (4062e0 <vTaskPlaceOnEventListRestricted+0x50>)
  4062aa:	681b      	ldr	r3, [r3, #0]
  4062ac:	3318      	adds	r3, #24
  4062ae:	4619      	mov	r1, r3
  4062b0:	6878      	ldr	r0, [r7, #4]
  4062b2:	4b0c      	ldr	r3, [pc, #48]	; (4062e4 <vTaskPlaceOnEventListRestricted+0x54>)
  4062b4:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  4062b6:	4b0a      	ldr	r3, [pc, #40]	; (4062e0 <vTaskPlaceOnEventListRestricted+0x50>)
  4062b8:	681b      	ldr	r3, [r3, #0]
  4062ba:	3304      	adds	r3, #4
  4062bc:	4618      	mov	r0, r3
  4062be:	4b0a      	ldr	r3, [pc, #40]	; (4062e8 <vTaskPlaceOnEventListRestricted+0x58>)
  4062c0:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
  4062c2:	4b0a      	ldr	r3, [pc, #40]	; (4062ec <vTaskPlaceOnEventListRestricted+0x5c>)
  4062c4:	681a      	ldr	r2, [r3, #0]
  4062c6:	683b      	ldr	r3, [r7, #0]
  4062c8:	4413      	add	r3, r2
  4062ca:	60fb      	str	r3, [r7, #12]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  4062cc:	68f8      	ldr	r0, [r7, #12]
  4062ce:	4b08      	ldr	r3, [pc, #32]	; (4062f0 <vTaskPlaceOnEventListRestricted+0x60>)
  4062d0:	4798      	blx	r3
	}
  4062d2:	bf00      	nop
  4062d4:	3710      	adds	r7, #16
  4062d6:	46bd      	mov	sp, r7
  4062d8:	bd80      	pop	{r7, pc}
  4062da:	bf00      	nop
  4062dc:	00405085 	.word	0x00405085
  4062e0:	200025dc 	.word	0x200025dc
  4062e4:	00404da1 	.word	0x00404da1
  4062e8:	00404e61 	.word	0x00404e61
  4062ec:	200026b8 	.word	0x200026b8
  4062f0:	00406655 	.word	0x00406655

004062f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  4062f4:	b580      	push	{r7, lr}
  4062f6:	b084      	sub	sp, #16
  4062f8:	af00      	add	r7, sp, #0
  4062fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4062fc:	687b      	ldr	r3, [r7, #4]
  4062fe:	68db      	ldr	r3, [r3, #12]
  406300:	68db      	ldr	r3, [r3, #12]
  406302:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
  406304:	68bb      	ldr	r3, [r7, #8]
  406306:	2b00      	cmp	r3, #0
  406308:	d103      	bne.n	406312 <xTaskRemoveFromEventList+0x1e>
  40630a:	4b21      	ldr	r3, [pc, #132]	; (406390 <xTaskRemoveFromEventList+0x9c>)
  40630c:	4798      	blx	r3
  40630e:	bf00      	nop
  406310:	e7fd      	b.n	40630e <xTaskRemoveFromEventList+0x1a>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  406312:	68bb      	ldr	r3, [r7, #8]
  406314:	3318      	adds	r3, #24
  406316:	4618      	mov	r0, r3
  406318:	4b1e      	ldr	r3, [pc, #120]	; (406394 <xTaskRemoveFromEventList+0xa0>)
  40631a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  40631c:	4b1e      	ldr	r3, [pc, #120]	; (406398 <xTaskRemoveFromEventList+0xa4>)
  40631e:	681b      	ldr	r3, [r3, #0]
  406320:	2b00      	cmp	r3, #0
  406322:	d11d      	bne.n	406360 <xTaskRemoveFromEventList+0x6c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  406324:	68bb      	ldr	r3, [r7, #8]
  406326:	3304      	adds	r3, #4
  406328:	4618      	mov	r0, r3
  40632a:	4b1a      	ldr	r3, [pc, #104]	; (406394 <xTaskRemoveFromEventList+0xa0>)
  40632c:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  40632e:	68bb      	ldr	r3, [r7, #8]
  406330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406332:	4b1a      	ldr	r3, [pc, #104]	; (40639c <xTaskRemoveFromEventList+0xa8>)
  406334:	681b      	ldr	r3, [r3, #0]
  406336:	429a      	cmp	r2, r3
  406338:	d903      	bls.n	406342 <xTaskRemoveFromEventList+0x4e>
  40633a:	68bb      	ldr	r3, [r7, #8]
  40633c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40633e:	4a17      	ldr	r2, [pc, #92]	; (40639c <xTaskRemoveFromEventList+0xa8>)
  406340:	6013      	str	r3, [r2, #0]
  406342:	68bb      	ldr	r3, [r7, #8]
  406344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406346:	4613      	mov	r3, r2
  406348:	009b      	lsls	r3, r3, #2
  40634a:	4413      	add	r3, r2
  40634c:	009b      	lsls	r3, r3, #2
  40634e:	4a14      	ldr	r2, [pc, #80]	; (4063a0 <xTaskRemoveFromEventList+0xac>)
  406350:	441a      	add	r2, r3
  406352:	68bb      	ldr	r3, [r7, #8]
  406354:	3304      	adds	r3, #4
  406356:	4619      	mov	r1, r3
  406358:	4610      	mov	r0, r2
  40635a:	4b12      	ldr	r3, [pc, #72]	; (4063a4 <xTaskRemoveFromEventList+0xb0>)
  40635c:	4798      	blx	r3
  40635e:	e005      	b.n	40636c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  406360:	68bb      	ldr	r3, [r7, #8]
  406362:	3318      	adds	r3, #24
  406364:	4619      	mov	r1, r3
  406366:	4810      	ldr	r0, [pc, #64]	; (4063a8 <xTaskRemoveFromEventList+0xb4>)
  406368:	4b0e      	ldr	r3, [pc, #56]	; (4063a4 <xTaskRemoveFromEventList+0xb0>)
  40636a:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40636c:	68bb      	ldr	r3, [r7, #8]
  40636e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406370:	4b0e      	ldr	r3, [pc, #56]	; (4063ac <xTaskRemoveFromEventList+0xb8>)
  406372:	681b      	ldr	r3, [r3, #0]
  406374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406376:	429a      	cmp	r2, r3
  406378:	d302      	bcc.n	406380 <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
  40637a:	2301      	movs	r3, #1
  40637c:	60fb      	str	r3, [r7, #12]
  40637e:	e001      	b.n	406384 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
  406380:	2300      	movs	r3, #0
  406382:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
  406384:	68fb      	ldr	r3, [r7, #12]
}
  406386:	4618      	mov	r0, r3
  406388:	3710      	adds	r7, #16
  40638a:	46bd      	mov	sp, r7
  40638c:	bd80      	pop	{r7, pc}
  40638e:	bf00      	nop
  406390:	00405085 	.word	0x00405085
  406394:	00404e61 	.word	0x00404e61
  406398:	200026c8 	.word	0x200026c8
  40639c:	200026c0 	.word	0x200026c0
  4063a0:	200025e0 	.word	0x200025e0
  4063a4:	00404da1 	.word	0x00404da1
  4063a8:	20002674 	.word	0x20002674
  4063ac:	200025dc 	.word	0x200025dc

004063b0 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  4063b0:	b580      	push	{r7, lr}
  4063b2:	b082      	sub	sp, #8
  4063b4:	af00      	add	r7, sp, #0
  4063b6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
  4063b8:	687b      	ldr	r3, [r7, #4]
  4063ba:	2b00      	cmp	r3, #0
  4063bc:	d103      	bne.n	4063c6 <vTaskSetTimeOutState+0x16>
  4063be:	4b08      	ldr	r3, [pc, #32]	; (4063e0 <vTaskSetTimeOutState+0x30>)
  4063c0:	4798      	blx	r3
  4063c2:	bf00      	nop
  4063c4:	e7fd      	b.n	4063c2 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4063c6:	4b07      	ldr	r3, [pc, #28]	; (4063e4 <vTaskSetTimeOutState+0x34>)
  4063c8:	681a      	ldr	r2, [r3, #0]
  4063ca:	687b      	ldr	r3, [r7, #4]
  4063cc:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4063ce:	4b06      	ldr	r3, [pc, #24]	; (4063e8 <vTaskSetTimeOutState+0x38>)
  4063d0:	681a      	ldr	r2, [r3, #0]
  4063d2:	687b      	ldr	r3, [r7, #4]
  4063d4:	605a      	str	r2, [r3, #4]
}
  4063d6:	bf00      	nop
  4063d8:	3708      	adds	r7, #8
  4063da:	46bd      	mov	sp, r7
  4063dc:	bd80      	pop	{r7, pc}
  4063de:	bf00      	nop
  4063e0:	00405085 	.word	0x00405085
  4063e4:	200026d4 	.word	0x200026d4
  4063e8:	200026b8 	.word	0x200026b8

004063ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  4063ec:	b580      	push	{r7, lr}
  4063ee:	b084      	sub	sp, #16
  4063f0:	af00      	add	r7, sp, #0
  4063f2:	6078      	str	r0, [r7, #4]
  4063f4:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
  4063f6:	687b      	ldr	r3, [r7, #4]
  4063f8:	2b00      	cmp	r3, #0
  4063fa:	d103      	bne.n	406404 <xTaskCheckForTimeOut+0x18>
  4063fc:	4b22      	ldr	r3, [pc, #136]	; (406488 <xTaskCheckForTimeOut+0x9c>)
  4063fe:	4798      	blx	r3
  406400:	bf00      	nop
  406402:	e7fd      	b.n	406400 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
  406404:	683b      	ldr	r3, [r7, #0]
  406406:	2b00      	cmp	r3, #0
  406408:	d103      	bne.n	406412 <xTaskCheckForTimeOut+0x26>
  40640a:	4b1f      	ldr	r3, [pc, #124]	; (406488 <xTaskCheckForTimeOut+0x9c>)
  40640c:	4798      	blx	r3
  40640e:	bf00      	nop
  406410:	e7fd      	b.n	40640e <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
  406412:	4b1e      	ldr	r3, [pc, #120]	; (40648c <xTaskCheckForTimeOut+0xa0>)
  406414:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  406416:	683b      	ldr	r3, [r7, #0]
  406418:	681b      	ldr	r3, [r3, #0]
  40641a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40641e:	d102      	bne.n	406426 <xTaskCheckForTimeOut+0x3a>
			{
				xReturn = pdFALSE;
  406420:	2300      	movs	r3, #0
  406422:	60fb      	str	r3, [r7, #12]
  406424:	e029      	b.n	40647a <xTaskCheckForTimeOut+0x8e>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  406426:	687b      	ldr	r3, [r7, #4]
  406428:	681a      	ldr	r2, [r3, #0]
  40642a:	4b19      	ldr	r3, [pc, #100]	; (406490 <xTaskCheckForTimeOut+0xa4>)
  40642c:	681b      	ldr	r3, [r3, #0]
  40642e:	429a      	cmp	r2, r3
  406430:	d008      	beq.n	406444 <xTaskCheckForTimeOut+0x58>
  406432:	687b      	ldr	r3, [r7, #4]
  406434:	685a      	ldr	r2, [r3, #4]
  406436:	4b17      	ldr	r3, [pc, #92]	; (406494 <xTaskCheckForTimeOut+0xa8>)
  406438:	681b      	ldr	r3, [r3, #0]
  40643a:	429a      	cmp	r2, r3
  40643c:	d802      	bhi.n	406444 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  40643e:	2301      	movs	r3, #1
  406440:	60fb      	str	r3, [r7, #12]
  406442:	e01a      	b.n	40647a <xTaskCheckForTimeOut+0x8e>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  406444:	4b13      	ldr	r3, [pc, #76]	; (406494 <xTaskCheckForTimeOut+0xa8>)
  406446:	681a      	ldr	r2, [r3, #0]
  406448:	687b      	ldr	r3, [r7, #4]
  40644a:	685b      	ldr	r3, [r3, #4]
  40644c:	1ad2      	subs	r2, r2, r3
  40644e:	683b      	ldr	r3, [r7, #0]
  406450:	681b      	ldr	r3, [r3, #0]
  406452:	429a      	cmp	r2, r3
  406454:	d20f      	bcs.n	406476 <xTaskCheckForTimeOut+0x8a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  406456:	4b0f      	ldr	r3, [pc, #60]	; (406494 <xTaskCheckForTimeOut+0xa8>)
  406458:	681a      	ldr	r2, [r3, #0]
  40645a:	687b      	ldr	r3, [r7, #4]
  40645c:	685b      	ldr	r3, [r3, #4]
  40645e:	1ad3      	subs	r3, r2, r3
  406460:	683a      	ldr	r2, [r7, #0]
  406462:	6812      	ldr	r2, [r2, #0]
  406464:	1ad2      	subs	r2, r2, r3
  406466:	683b      	ldr	r3, [r7, #0]
  406468:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
  40646a:	6878      	ldr	r0, [r7, #4]
  40646c:	4b0a      	ldr	r3, [pc, #40]	; (406498 <xTaskCheckForTimeOut+0xac>)
  40646e:	4798      	blx	r3
			xReturn = pdFALSE;
  406470:	2300      	movs	r3, #0
  406472:	60fb      	str	r3, [r7, #12]
  406474:	e001      	b.n	40647a <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			xReturn = pdTRUE;
  406476:	2301      	movs	r3, #1
  406478:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
  40647a:	4b08      	ldr	r3, [pc, #32]	; (40649c <xTaskCheckForTimeOut+0xb0>)
  40647c:	4798      	blx	r3

	return xReturn;
  40647e:	68fb      	ldr	r3, [r7, #12]
}
  406480:	4618      	mov	r0, r3
  406482:	3710      	adds	r7, #16
  406484:	46bd      	mov	sp, r7
  406486:	bd80      	pop	{r7, pc}
  406488:	00405085 	.word	0x00405085
  40648c:	0040503d 	.word	0x0040503d
  406490:	200026d4 	.word	0x200026d4
  406494:	200026b8 	.word	0x200026b8
  406498:	004063b1 	.word	0x004063b1
  40649c:	0040505d 	.word	0x0040505d

004064a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
  4064a0:	b480      	push	{r7}
  4064a2:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
  4064a4:	4b03      	ldr	r3, [pc, #12]	; (4064b4 <vTaskMissedYield+0x14>)
  4064a6:	2201      	movs	r2, #1
  4064a8:	601a      	str	r2, [r3, #0]
}
  4064aa:	bf00      	nop
  4064ac:	46bd      	mov	sp, r7
  4064ae:	bc80      	pop	{r7}
  4064b0:	4770      	bx	lr
  4064b2:	bf00      	nop
  4064b4:	200026d0 	.word	0x200026d0

004064b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  4064b8:	b580      	push	{r7, lr}
  4064ba:	b082      	sub	sp, #8
  4064bc:	af00      	add	r7, sp, #0
  4064be:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
  4064c0:	4b01      	ldr	r3, [pc, #4]	; (4064c8 <prvIdleTask+0x10>)
  4064c2:	4798      	blx	r3
				}
				xTaskResumeAll();
			}
		}
		#endif
	}
  4064c4:	e7fc      	b.n	4064c0 <prvIdleTask+0x8>
  4064c6:	bf00      	nop
  4064c8:	004065c5 	.word	0x004065c5

004064cc <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
  4064cc:	b580      	push	{r7, lr}
  4064ce:	b084      	sub	sp, #16
  4064d0:	af00      	add	r7, sp, #0
  4064d2:	60f8      	str	r0, [r7, #12]
  4064d4:	60b9      	str	r1, [r7, #8]
  4064d6:	607a      	str	r2, [r7, #4]
  4064d8:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  4064da:	68fb      	ldr	r3, [r7, #12]
  4064dc:	3334      	adds	r3, #52	; 0x34
  4064de:	220c      	movs	r2, #12
  4064e0:	68b9      	ldr	r1, [r7, #8]
  4064e2:	4618      	mov	r0, r3
  4064e4:	4b14      	ldr	r3, [pc, #80]	; (406538 <prvInitialiseTCBVariables+0x6c>)
  4064e6:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  4064e8:	68fb      	ldr	r3, [r7, #12]
  4064ea:	2200      	movs	r2, #0
  4064ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
  4064f0:	687b      	ldr	r3, [r7, #4]
  4064f2:	2b04      	cmp	r3, #4
  4064f4:	d901      	bls.n	4064fa <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
  4064f6:	2304      	movs	r3, #4
  4064f8:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
  4064fa:	68fb      	ldr	r3, [r7, #12]
  4064fc:	687a      	ldr	r2, [r7, #4]
  4064fe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  406500:	68fb      	ldr	r3, [r7, #12]
  406502:	687a      	ldr	r2, [r7, #4]
  406504:	641a      	str	r2, [r3, #64]	; 0x40
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  406506:	68fb      	ldr	r3, [r7, #12]
  406508:	3304      	adds	r3, #4
  40650a:	4618      	mov	r0, r3
  40650c:	4b0b      	ldr	r3, [pc, #44]	; (40653c <prvInitialiseTCBVariables+0x70>)
  40650e:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  406510:	68fb      	ldr	r3, [r7, #12]
  406512:	3318      	adds	r3, #24
  406514:	4618      	mov	r0, r3
  406516:	4b09      	ldr	r3, [pc, #36]	; (40653c <prvInitialiseTCBVariables+0x70>)
  406518:	4798      	blx	r3

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  40651a:	68fb      	ldr	r3, [r7, #12]
  40651c:	68fa      	ldr	r2, [r7, #12]
  40651e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  406520:	687b      	ldr	r3, [r7, #4]
  406522:	f1c3 0205 	rsb	r2, r3, #5
  406526:	68fb      	ldr	r3, [r7, #12]
  406528:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  40652a:	68fb      	ldr	r3, [r7, #12]
  40652c:	68fa      	ldr	r2, [r7, #12]
  40652e:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
  406530:	bf00      	nop
  406532:	3710      	adds	r7, #16
  406534:	46bd      	mov	sp, r7
  406536:	bd80      	pop	{r7, pc}
  406538:	0040b459 	.word	0x0040b459
  40653c:	00404d89 	.word	0x00404d89

00406540 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
  406540:	b580      	push	{r7, lr}
  406542:	b082      	sub	sp, #8
  406544:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  406546:	2300      	movs	r3, #0
  406548:	607b      	str	r3, [r7, #4]
  40654a:	e00c      	b.n	406566 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  40654c:	687a      	ldr	r2, [r7, #4]
  40654e:	4613      	mov	r3, r2
  406550:	009b      	lsls	r3, r3, #2
  406552:	4413      	add	r3, r2
  406554:	009b      	lsls	r3, r3, #2
  406556:	4a12      	ldr	r2, [pc, #72]	; (4065a0 <prvInitialiseTaskLists+0x60>)
  406558:	4413      	add	r3, r2
  40655a:	4618      	mov	r0, r3
  40655c:	4b11      	ldr	r3, [pc, #68]	; (4065a4 <prvInitialiseTaskLists+0x64>)
  40655e:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  406560:	687b      	ldr	r3, [r7, #4]
  406562:	3301      	adds	r3, #1
  406564:	607b      	str	r3, [r7, #4]
  406566:	687b      	ldr	r3, [r7, #4]
  406568:	2b04      	cmp	r3, #4
  40656a:	d9ef      	bls.n	40654c <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  40656c:	480e      	ldr	r0, [pc, #56]	; (4065a8 <prvInitialiseTaskLists+0x68>)
  40656e:	4b0d      	ldr	r3, [pc, #52]	; (4065a4 <prvInitialiseTaskLists+0x64>)
  406570:	4798      	blx	r3
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  406572:	480e      	ldr	r0, [pc, #56]	; (4065ac <prvInitialiseTaskLists+0x6c>)
  406574:	4b0b      	ldr	r3, [pc, #44]	; (4065a4 <prvInitialiseTaskLists+0x64>)
  406576:	4798      	blx	r3
	vListInitialise( ( xList * ) &xPendingReadyList );
  406578:	480d      	ldr	r0, [pc, #52]	; (4065b0 <prvInitialiseTaskLists+0x70>)
  40657a:	4b0a      	ldr	r3, [pc, #40]	; (4065a4 <prvInitialiseTaskLists+0x64>)
  40657c:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  40657e:	480d      	ldr	r0, [pc, #52]	; (4065b4 <prvInitialiseTaskLists+0x74>)
  406580:	4b08      	ldr	r3, [pc, #32]	; (4065a4 <prvInitialiseTaskLists+0x64>)
  406582:	4798      	blx	r3
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  406584:	480c      	ldr	r0, [pc, #48]	; (4065b8 <prvInitialiseTaskLists+0x78>)
  406586:	4b07      	ldr	r3, [pc, #28]	; (4065a4 <prvInitialiseTaskLists+0x64>)
  406588:	4798      	blx	r3
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  40658a:	4b0c      	ldr	r3, [pc, #48]	; (4065bc <prvInitialiseTaskLists+0x7c>)
  40658c:	4a06      	ldr	r2, [pc, #24]	; (4065a8 <prvInitialiseTaskLists+0x68>)
  40658e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  406590:	4b0b      	ldr	r3, [pc, #44]	; (4065c0 <prvInitialiseTaskLists+0x80>)
  406592:	4a06      	ldr	r2, [pc, #24]	; (4065ac <prvInitialiseTaskLists+0x6c>)
  406594:	601a      	str	r2, [r3, #0]
}
  406596:	bf00      	nop
  406598:	3708      	adds	r7, #8
  40659a:	46bd      	mov	sp, r7
  40659c:	bd80      	pop	{r7, pc}
  40659e:	bf00      	nop
  4065a0:	200025e0 	.word	0x200025e0
  4065a4:	00404d49 	.word	0x00404d49
  4065a8:	20002644 	.word	0x20002644
  4065ac:	20002658 	.word	0x20002658
  4065b0:	20002674 	.word	0x20002674
  4065b4:	20002688 	.word	0x20002688
  4065b8:	200026a0 	.word	0x200026a0
  4065bc:	2000266c 	.word	0x2000266c
  4065c0:	20002670 	.word	0x20002670

004065c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
  4065c4:	b580      	push	{r7, lr}
  4065c6:	b082      	sub	sp, #8
  4065c8:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  4065ca:	e028      	b.n	40661e <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
  4065cc:	4b18      	ldr	r3, [pc, #96]	; (406630 <prvCheckTasksWaitingTermination+0x6c>)
  4065ce:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4065d0:	4b18      	ldr	r3, [pc, #96]	; (406634 <prvCheckTasksWaitingTermination+0x70>)
  4065d2:	681b      	ldr	r3, [r3, #0]
  4065d4:	2b00      	cmp	r3, #0
  4065d6:	bf0c      	ite	eq
  4065d8:	2301      	moveq	r3, #1
  4065da:	2300      	movne	r3, #0
  4065dc:	b2db      	uxtb	r3, r3
  4065de:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
  4065e0:	4b15      	ldr	r3, [pc, #84]	; (406638 <prvCheckTasksWaitingTermination+0x74>)
  4065e2:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
  4065e4:	687b      	ldr	r3, [r7, #4]
  4065e6:	2b00      	cmp	r3, #0
  4065e8:	d119      	bne.n	40661e <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  4065ea:	4b14      	ldr	r3, [pc, #80]	; (40663c <prvCheckTasksWaitingTermination+0x78>)
  4065ec:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  4065ee:	4b11      	ldr	r3, [pc, #68]	; (406634 <prvCheckTasksWaitingTermination+0x70>)
  4065f0:	68db      	ldr	r3, [r3, #12]
  4065f2:	68db      	ldr	r3, [r3, #12]
  4065f4:	603b      	str	r3, [r7, #0]
					uxListRemove( &( pxTCB->xGenericListItem ) );
  4065f6:	683b      	ldr	r3, [r7, #0]
  4065f8:	3304      	adds	r3, #4
  4065fa:	4618      	mov	r0, r3
  4065fc:	4b10      	ldr	r3, [pc, #64]	; (406640 <prvCheckTasksWaitingTermination+0x7c>)
  4065fe:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  406600:	4b10      	ldr	r3, [pc, #64]	; (406644 <prvCheckTasksWaitingTermination+0x80>)
  406602:	681b      	ldr	r3, [r3, #0]
  406604:	3b01      	subs	r3, #1
  406606:	4a0f      	ldr	r2, [pc, #60]	; (406644 <prvCheckTasksWaitingTermination+0x80>)
  406608:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  40660a:	4b0f      	ldr	r3, [pc, #60]	; (406648 <prvCheckTasksWaitingTermination+0x84>)
  40660c:	681b      	ldr	r3, [r3, #0]
  40660e:	3b01      	subs	r3, #1
  406610:	4a0d      	ldr	r2, [pc, #52]	; (406648 <prvCheckTasksWaitingTermination+0x84>)
  406612:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
  406614:	4b0d      	ldr	r3, [pc, #52]	; (40664c <prvCheckTasksWaitingTermination+0x88>)
  406616:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
  406618:	6838      	ldr	r0, [r7, #0]
  40661a:	4b0d      	ldr	r3, [pc, #52]	; (406650 <prvCheckTasksWaitingTermination+0x8c>)
  40661c:	4798      	blx	r3
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  40661e:	4b0a      	ldr	r3, [pc, #40]	; (406648 <prvCheckTasksWaitingTermination+0x84>)
  406620:	681b      	ldr	r3, [r3, #0]
  406622:	2b00      	cmp	r3, #0
  406624:	d1d2      	bne.n	4065cc <prvCheckTasksWaitingTermination+0x8>
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif
}
  406626:	bf00      	nop
  406628:	3708      	adds	r7, #8
  40662a:	46bd      	mov	sp, r7
  40662c:	bd80      	pop	{r7, pc}
  40662e:	bf00      	nop
  406630:	00405e5d 	.word	0x00405e5d
  406634:	20002688 	.word	0x20002688
  406638:	00405e79 	.word	0x00405e79
  40663c:	0040503d 	.word	0x0040503d
  406640:	00404e61 	.word	0x00404e61
  406644:	200026b4 	.word	0x200026b4
  406648:	2000269c 	.word	0x2000269c
  40664c:	0040505d 	.word	0x0040505d
  406650:	00406735 	.word	0x00406735

00406654 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  406654:	b580      	push	{r7, lr}
  406656:	b082      	sub	sp, #8
  406658:	af00      	add	r7, sp, #0
  40665a:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  40665c:	4b13      	ldr	r3, [pc, #76]	; (4066ac <prvAddCurrentTaskToDelayedList+0x58>)
  40665e:	681b      	ldr	r3, [r3, #0]
  406660:	687a      	ldr	r2, [r7, #4]
  406662:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
  406664:	4b12      	ldr	r3, [pc, #72]	; (4066b0 <prvAddCurrentTaskToDelayedList+0x5c>)
  406666:	681b      	ldr	r3, [r3, #0]
  406668:	687a      	ldr	r2, [r7, #4]
  40666a:	429a      	cmp	r2, r3
  40666c:	d209      	bcs.n	406682 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  40666e:	4b11      	ldr	r3, [pc, #68]	; (4066b4 <prvAddCurrentTaskToDelayedList+0x60>)
  406670:	681a      	ldr	r2, [r3, #0]
  406672:	4b0e      	ldr	r3, [pc, #56]	; (4066ac <prvAddCurrentTaskToDelayedList+0x58>)
  406674:	681b      	ldr	r3, [r3, #0]
  406676:	3304      	adds	r3, #4
  406678:	4619      	mov	r1, r3
  40667a:	4610      	mov	r0, r2
  40667c:	4b0e      	ldr	r3, [pc, #56]	; (4066b8 <prvAddCurrentTaskToDelayedList+0x64>)
  40667e:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
  406680:	e010      	b.n	4066a4 <prvAddCurrentTaskToDelayedList+0x50>
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  406682:	4b0e      	ldr	r3, [pc, #56]	; (4066bc <prvAddCurrentTaskToDelayedList+0x68>)
  406684:	681a      	ldr	r2, [r3, #0]
  406686:	4b09      	ldr	r3, [pc, #36]	; (4066ac <prvAddCurrentTaskToDelayedList+0x58>)
  406688:	681b      	ldr	r3, [r3, #0]
  40668a:	3304      	adds	r3, #4
  40668c:	4619      	mov	r1, r3
  40668e:	4610      	mov	r0, r2
  406690:	4b09      	ldr	r3, [pc, #36]	; (4066b8 <prvAddCurrentTaskToDelayedList+0x64>)
  406692:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  406694:	4b0a      	ldr	r3, [pc, #40]	; (4066c0 <prvAddCurrentTaskToDelayedList+0x6c>)
  406696:	681b      	ldr	r3, [r3, #0]
  406698:	687a      	ldr	r2, [r7, #4]
  40669a:	429a      	cmp	r2, r3
  40669c:	d202      	bcs.n	4066a4 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
  40669e:	4a08      	ldr	r2, [pc, #32]	; (4066c0 <prvAddCurrentTaskToDelayedList+0x6c>)
  4066a0:	687b      	ldr	r3, [r7, #4]
  4066a2:	6013      	str	r3, [r2, #0]
		}
	}
}
  4066a4:	bf00      	nop
  4066a6:	3708      	adds	r7, #8
  4066a8:	46bd      	mov	sp, r7
  4066aa:	bd80      	pop	{r7, pc}
  4066ac:	200025dc 	.word	0x200025dc
  4066b0:	200026b8 	.word	0x200026b8
  4066b4:	20002670 	.word	0x20002670
  4066b8:	00404df1 	.word	0x00404df1
  4066bc:	2000266c 	.word	0x2000266c
  4066c0:	20000038 	.word	0x20000038

004066c4 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
  4066c4:	b580      	push	{r7, lr}
  4066c6:	b084      	sub	sp, #16
  4066c8:	af00      	add	r7, sp, #0
  4066ca:	4603      	mov	r3, r0
  4066cc:	6039      	str	r1, [r7, #0]
  4066ce:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  4066d0:	2044      	movs	r0, #68	; 0x44
  4066d2:	4b15      	ldr	r3, [pc, #84]	; (406728 <prvAllocateTCBAndStack+0x64>)
  4066d4:	4798      	blx	r3
  4066d6:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
  4066d8:	68fb      	ldr	r3, [r7, #12]
  4066da:	2b00      	cmp	r3, #0
  4066dc:	d01e      	beq.n	40671c <prvAllocateTCBAndStack+0x58>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  4066de:	683b      	ldr	r3, [r7, #0]
  4066e0:	2b00      	cmp	r3, #0
  4066e2:	d106      	bne.n	4066f2 <prvAllocateTCBAndStack+0x2e>
  4066e4:	88fb      	ldrh	r3, [r7, #6]
  4066e6:	009b      	lsls	r3, r3, #2
  4066e8:	4618      	mov	r0, r3
  4066ea:	4b0f      	ldr	r3, [pc, #60]	; (406728 <prvAllocateTCBAndStack+0x64>)
  4066ec:	4798      	blx	r3
  4066ee:	4603      	mov	r3, r0
  4066f0:	e000      	b.n	4066f4 <prvAllocateTCBAndStack+0x30>
  4066f2:	683b      	ldr	r3, [r7, #0]
  4066f4:	68fa      	ldr	r2, [r7, #12]
  4066f6:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  4066f8:	68fb      	ldr	r3, [r7, #12]
  4066fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4066fc:	2b00      	cmp	r3, #0
  4066fe:	d105      	bne.n	40670c <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  406700:	68f8      	ldr	r0, [r7, #12]
  406702:	4b0a      	ldr	r3, [pc, #40]	; (40672c <prvAllocateTCBAndStack+0x68>)
  406704:	4798      	blx	r3
			pxNewTCB = NULL;
  406706:	2300      	movs	r3, #0
  406708:	60fb      	str	r3, [r7, #12]
  40670a:	e007      	b.n	40671c <prvAllocateTCBAndStack+0x58>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
  40670c:	68fb      	ldr	r3, [r7, #12]
  40670e:	6b18      	ldr	r0, [r3, #48]	; 0x30
  406710:	88fb      	ldrh	r3, [r7, #6]
  406712:	009b      	lsls	r3, r3, #2
  406714:	461a      	mov	r2, r3
  406716:	21a5      	movs	r1, #165	; 0xa5
  406718:	4b05      	ldr	r3, [pc, #20]	; (406730 <prvAllocateTCBAndStack+0x6c>)
  40671a:	4798      	blx	r3
		}
	}

	return pxNewTCB;
  40671c:	68fb      	ldr	r3, [r7, #12]
}
  40671e:	4618      	mov	r0, r3
  406720:	3710      	adds	r7, #16
  406722:	46bd      	mov	sp, r7
  406724:	bd80      	pop	{r7, pc}
  406726:	bf00      	nop
  406728:	00405145 	.word	0x00405145
  40672c:	00405251 	.word	0x00405251
  406730:	0040b3bd 	.word	0x0040b3bd

00406734 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
  406734:	b580      	push	{r7, lr}
  406736:	b082      	sub	sp, #8
  406738:	af00      	add	r7, sp, #0
  40673a:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  40673c:	687b      	ldr	r3, [r7, #4]
  40673e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406740:	4618      	mov	r0, r3
  406742:	4b04      	ldr	r3, [pc, #16]	; (406754 <prvDeleteTCB+0x20>)
  406744:	4798      	blx	r3
		vPortFree( pxTCB );
  406746:	6878      	ldr	r0, [r7, #4]
  406748:	4b02      	ldr	r3, [pc, #8]	; (406754 <prvDeleteTCB+0x20>)
  40674a:	4798      	blx	r3
	}
  40674c:	bf00      	nop
  40674e:	3708      	adds	r7, #8
  406750:	46bd      	mov	sp, r7
  406752:	bd80      	pop	{r7, pc}
  406754:	00405251 	.word	0x00405251

00406758 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
  406758:	b480      	push	{r7}
  40675a:	b083      	sub	sp, #12
  40675c:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  40675e:	4b04      	ldr	r3, [pc, #16]	; (406770 <xTaskGetCurrentTaskHandle+0x18>)
  406760:	681b      	ldr	r3, [r3, #0]
  406762:	607b      	str	r3, [r7, #4]

		return xReturn;
  406764:	687b      	ldr	r3, [r7, #4]
	}
  406766:	4618      	mov	r0, r3
  406768:	370c      	adds	r7, #12
  40676a:	46bd      	mov	sp, r7
  40676c:	bc80      	pop	{r7}
  40676e:	4770      	bx	lr
  406770:	200025dc 	.word	0x200025dc

00406774 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
  406774:	b480      	push	{r7}
  406776:	b083      	sub	sp, #12
  406778:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  40677a:	4b0b      	ldr	r3, [pc, #44]	; (4067a8 <xTaskGetSchedulerState+0x34>)
  40677c:	681b      	ldr	r3, [r3, #0]
  40677e:	2b00      	cmp	r3, #0
  406780:	d102      	bne.n	406788 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  406782:	2300      	movs	r3, #0
  406784:	607b      	str	r3, [r7, #4]
  406786:	e008      	b.n	40679a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  406788:	4b08      	ldr	r3, [pc, #32]	; (4067ac <xTaskGetSchedulerState+0x38>)
  40678a:	681b      	ldr	r3, [r3, #0]
  40678c:	2b00      	cmp	r3, #0
  40678e:	d102      	bne.n	406796 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
  406790:	2301      	movs	r3, #1
  406792:	607b      	str	r3, [r7, #4]
  406794:	e001      	b.n	40679a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  406796:	2302      	movs	r3, #2
  406798:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
  40679a:	687b      	ldr	r3, [r7, #4]
	}
  40679c:	4618      	mov	r0, r3
  40679e:	370c      	adds	r7, #12
  4067a0:	46bd      	mov	sp, r7
  4067a2:	bc80      	pop	{r7}
  4067a4:	4770      	bx	lr
  4067a6:	bf00      	nop
  4067a8:	200026c4 	.word	0x200026c4
  4067ac:	200026c8 	.word	0x200026c8

004067b0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  4067b0:	b580      	push	{r7, lr}
  4067b2:	b084      	sub	sp, #16
  4067b4:	af00      	add	r7, sp, #0
  4067b6:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  4067b8:	687b      	ldr	r3, [r7, #4]
  4067ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  4067bc:	687b      	ldr	r3, [r7, #4]
  4067be:	2b00      	cmp	r3, #0
  4067c0:	d041      	beq.n	406846 <vTaskPriorityInherit+0x96>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  4067c2:	68fb      	ldr	r3, [r7, #12]
  4067c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4067c6:	4b22      	ldr	r3, [pc, #136]	; (406850 <vTaskPriorityInherit+0xa0>)
  4067c8:	681b      	ldr	r3, [r3, #0]
  4067ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4067cc:	429a      	cmp	r2, r3
  4067ce:	d23a      	bcs.n	406846 <vTaskPriorityInherit+0x96>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  4067d0:	4b1f      	ldr	r3, [pc, #124]	; (406850 <vTaskPriorityInherit+0xa0>)
  4067d2:	681b      	ldr	r3, [r3, #0]
  4067d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4067d6:	f1c3 0205 	rsb	r2, r3, #5
  4067da:	68fb      	ldr	r3, [r7, #12]
  4067dc:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  4067de:	68fb      	ldr	r3, [r7, #12]
  4067e0:	6959      	ldr	r1, [r3, #20]
  4067e2:	68fb      	ldr	r3, [r7, #12]
  4067e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4067e6:	4613      	mov	r3, r2
  4067e8:	009b      	lsls	r3, r3, #2
  4067ea:	4413      	add	r3, r2
  4067ec:	009b      	lsls	r3, r3, #2
  4067ee:	4a19      	ldr	r2, [pc, #100]	; (406854 <vTaskPriorityInherit+0xa4>)
  4067f0:	4413      	add	r3, r2
  4067f2:	4299      	cmp	r1, r3
  4067f4:	d122      	bne.n	40683c <vTaskPriorityInherit+0x8c>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  4067f6:	68fb      	ldr	r3, [r7, #12]
  4067f8:	3304      	adds	r3, #4
  4067fa:	4618      	mov	r0, r3
  4067fc:	4b16      	ldr	r3, [pc, #88]	; (406858 <vTaskPriorityInherit+0xa8>)
  4067fe:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  406800:	4b13      	ldr	r3, [pc, #76]	; (406850 <vTaskPriorityInherit+0xa0>)
  406802:	681b      	ldr	r3, [r3, #0]
  406804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406806:	68fb      	ldr	r3, [r7, #12]
  406808:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
  40680a:	68fb      	ldr	r3, [r7, #12]
  40680c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40680e:	4b13      	ldr	r3, [pc, #76]	; (40685c <vTaskPriorityInherit+0xac>)
  406810:	681b      	ldr	r3, [r3, #0]
  406812:	429a      	cmp	r2, r3
  406814:	d903      	bls.n	40681e <vTaskPriorityInherit+0x6e>
  406816:	68fb      	ldr	r3, [r7, #12]
  406818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40681a:	4a10      	ldr	r2, [pc, #64]	; (40685c <vTaskPriorityInherit+0xac>)
  40681c:	6013      	str	r3, [r2, #0]
  40681e:	68fb      	ldr	r3, [r7, #12]
  406820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406822:	4613      	mov	r3, r2
  406824:	009b      	lsls	r3, r3, #2
  406826:	4413      	add	r3, r2
  406828:	009b      	lsls	r3, r3, #2
  40682a:	4a0a      	ldr	r2, [pc, #40]	; (406854 <vTaskPriorityInherit+0xa4>)
  40682c:	441a      	add	r2, r3
  40682e:	68fb      	ldr	r3, [r7, #12]
  406830:	3304      	adds	r3, #4
  406832:	4619      	mov	r1, r3
  406834:	4610      	mov	r0, r2
  406836:	4b0a      	ldr	r3, [pc, #40]	; (406860 <vTaskPriorityInherit+0xb0>)
  406838:	4798      	blx	r3
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
  40683a:	e004      	b.n	406846 <vTaskPriorityInherit+0x96>
					prvAddTaskToReadyQueue( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40683c:	4b04      	ldr	r3, [pc, #16]	; (406850 <vTaskPriorityInherit+0xa0>)
  40683e:	681b      	ldr	r3, [r3, #0]
  406840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406842:	68fb      	ldr	r3, [r7, #12]
  406844:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
  406846:	bf00      	nop
  406848:	3710      	adds	r7, #16
  40684a:	46bd      	mov	sp, r7
  40684c:	bd80      	pop	{r7, pc}
  40684e:	bf00      	nop
  406850:	200025dc 	.word	0x200025dc
  406854:	200025e0 	.word	0x200025e0
  406858:	00404e61 	.word	0x00404e61
  40685c:	200026c0 	.word	0x200026c0
  406860:	00404da1 	.word	0x00404da1

00406864 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  406864:	b580      	push	{r7, lr}
  406866:	b084      	sub	sp, #16
  406868:	af00      	add	r7, sp, #0
  40686a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  40686c:	687b      	ldr	r3, [r7, #4]
  40686e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
  406870:	687b      	ldr	r3, [r7, #4]
  406872:	2b00      	cmp	r3, #0
  406874:	d02c      	beq.n	4068d0 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  406876:	68fb      	ldr	r3, [r7, #12]
  406878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40687a:	68fb      	ldr	r3, [r7, #12]
  40687c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40687e:	429a      	cmp	r2, r3
  406880:	d026      	beq.n	4068d0 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  406882:	68fb      	ldr	r3, [r7, #12]
  406884:	3304      	adds	r3, #4
  406886:	4618      	mov	r0, r3
  406888:	4b13      	ldr	r3, [pc, #76]	; (4068d8 <vTaskPriorityDisinherit+0x74>)
  40688a:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  40688c:	68fb      	ldr	r3, [r7, #12]
  40688e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  406890:	68fb      	ldr	r3, [r7, #12]
  406892:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  406894:	68fb      	ldr	r3, [r7, #12]
  406896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406898:	f1c3 0205 	rsb	r2, r3, #5
  40689c:	68fb      	ldr	r3, [r7, #12]
  40689e:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
  4068a0:	68fb      	ldr	r3, [r7, #12]
  4068a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4068a4:	4b0d      	ldr	r3, [pc, #52]	; (4068dc <vTaskPriorityDisinherit+0x78>)
  4068a6:	681b      	ldr	r3, [r3, #0]
  4068a8:	429a      	cmp	r2, r3
  4068aa:	d903      	bls.n	4068b4 <vTaskPriorityDisinherit+0x50>
  4068ac:	68fb      	ldr	r3, [r7, #12]
  4068ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4068b0:	4a0a      	ldr	r2, [pc, #40]	; (4068dc <vTaskPriorityDisinherit+0x78>)
  4068b2:	6013      	str	r3, [r2, #0]
  4068b4:	68fb      	ldr	r3, [r7, #12]
  4068b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4068b8:	4613      	mov	r3, r2
  4068ba:	009b      	lsls	r3, r3, #2
  4068bc:	4413      	add	r3, r2
  4068be:	009b      	lsls	r3, r3, #2
  4068c0:	4a07      	ldr	r2, [pc, #28]	; (4068e0 <vTaskPriorityDisinherit+0x7c>)
  4068c2:	441a      	add	r2, r3
  4068c4:	68fb      	ldr	r3, [r7, #12]
  4068c6:	3304      	adds	r3, #4
  4068c8:	4619      	mov	r1, r3
  4068ca:	4610      	mov	r0, r2
  4068cc:	4b05      	ldr	r3, [pc, #20]	; (4068e4 <vTaskPriorityDisinherit+0x80>)
  4068ce:	4798      	blx	r3
			}
		}
	}
  4068d0:	bf00      	nop
  4068d2:	3710      	adds	r7, #16
  4068d4:	46bd      	mov	sp, r7
  4068d6:	bd80      	pop	{r7, pc}
  4068d8:	00404e61 	.word	0x00404e61
  4068dc:	200026c0 	.word	0x200026c0
  4068e0:	200025e0 	.word	0x200025e0
  4068e4:	00404da1 	.word	0x00404da1

004068e8 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
  4068e8:	b590      	push	{r4, r7, lr}
  4068ea:	b087      	sub	sp, #28
  4068ec:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
  4068ee:	2300      	movs	r3, #0
  4068f0:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  4068f2:	4b10      	ldr	r3, [pc, #64]	; (406934 <xTimerCreateTimerTask+0x4c>)
  4068f4:	4798      	blx	r3

	if( xTimerQueue != NULL )
  4068f6:	4b10      	ldr	r3, [pc, #64]	; (406938 <xTimerCreateTimerTask+0x50>)
  4068f8:	681b      	ldr	r3, [r3, #0]
  4068fa:	2b00      	cmp	r3, #0
  4068fc:	d00e      	beq.n	40691c <xTimerCreateTimerTask+0x34>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  4068fe:	2300      	movs	r3, #0
  406900:	9303      	str	r3, [sp, #12]
  406902:	2300      	movs	r3, #0
  406904:	9302      	str	r3, [sp, #8]
  406906:	2300      	movs	r3, #0
  406908:	9301      	str	r3, [sp, #4]
  40690a:	2304      	movs	r3, #4
  40690c:	9300      	str	r3, [sp, #0]
  40690e:	2300      	movs	r3, #0
  406910:	22c8      	movs	r2, #200	; 0xc8
  406912:	490a      	ldr	r1, [pc, #40]	; (40693c <xTimerCreateTimerTask+0x54>)
  406914:	480a      	ldr	r0, [pc, #40]	; (406940 <xTimerCreateTimerTask+0x58>)
  406916:	4c0b      	ldr	r4, [pc, #44]	; (406944 <xTimerCreateTimerTask+0x5c>)
  406918:	47a0      	blx	r4
  40691a:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
  40691c:	687b      	ldr	r3, [r7, #4]
  40691e:	2b00      	cmp	r3, #0
  406920:	d103      	bne.n	40692a <xTimerCreateTimerTask+0x42>
  406922:	4b09      	ldr	r3, [pc, #36]	; (406948 <xTimerCreateTimerTask+0x60>)
  406924:	4798      	blx	r3
  406926:	bf00      	nop
  406928:	e7fd      	b.n	406926 <xTimerCreateTimerTask+0x3e>
	return xReturn;
  40692a:	687b      	ldr	r3, [r7, #4]
}
  40692c:	4618      	mov	r0, r3
  40692e:	370c      	adds	r7, #12
  406930:	46bd      	mov	sp, r7
  406932:	bd90      	pop	{r4, r7, pc}
  406934:	00406e01 	.word	0x00406e01
  406938:	2000270c 	.word	0x2000270c
  40693c:	0040b620 	.word	0x0040b620
  406940:	00406a5d 	.word	0x00406a5d
  406944:	00405bbd 	.word	0x00405bbd
  406948:	00405085 	.word	0x00405085

0040694c <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
  40694c:	b590      	push	{r4, r7, lr}
  40694e:	b089      	sub	sp, #36	; 0x24
  406950:	af00      	add	r7, sp, #0
  406952:	60f8      	str	r0, [r7, #12]
  406954:	60b9      	str	r1, [r7, #8]
  406956:	607a      	str	r2, [r7, #4]
  406958:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
  40695a:	2300      	movs	r3, #0
  40695c:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  40695e:	4b1a      	ldr	r3, [pc, #104]	; (4069c8 <xTimerGenericCommand+0x7c>)
  406960:	681b      	ldr	r3, [r3, #0]
  406962:	2b00      	cmp	r3, #0
  406964:	d02a      	beq.n	4069bc <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  406966:	68bb      	ldr	r3, [r7, #8]
  406968:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
  40696a:	687b      	ldr	r3, [r7, #4]
  40696c:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  40696e:	68fb      	ldr	r3, [r7, #12]
  406970:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
  406972:	683b      	ldr	r3, [r7, #0]
  406974:	2b00      	cmp	r3, #0
  406976:	d118      	bne.n	4069aa <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  406978:	4b14      	ldr	r3, [pc, #80]	; (4069cc <xTimerGenericCommand+0x80>)
  40697a:	4798      	blx	r3
  40697c:	4603      	mov	r3, r0
  40697e:	2b01      	cmp	r3, #1
  406980:	d109      	bne.n	406996 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  406982:	4b11      	ldr	r3, [pc, #68]	; (4069c8 <xTimerGenericCommand+0x7c>)
  406984:	6818      	ldr	r0, [r3, #0]
  406986:	f107 0110 	add.w	r1, r7, #16
  40698a:	2300      	movs	r3, #0
  40698c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  40698e:	4c10      	ldr	r4, [pc, #64]	; (4069d0 <xTimerGenericCommand+0x84>)
  406990:	47a0      	blx	r4
  406992:	61f8      	str	r0, [r7, #28]
  406994:	e012      	b.n	4069bc <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  406996:	4b0c      	ldr	r3, [pc, #48]	; (4069c8 <xTimerGenericCommand+0x7c>)
  406998:	6818      	ldr	r0, [r3, #0]
  40699a:	f107 0110 	add.w	r1, r7, #16
  40699e:	2300      	movs	r3, #0
  4069a0:	2200      	movs	r2, #0
  4069a2:	4c0b      	ldr	r4, [pc, #44]	; (4069d0 <xTimerGenericCommand+0x84>)
  4069a4:	47a0      	blx	r4
  4069a6:	61f8      	str	r0, [r7, #28]
  4069a8:	e008      	b.n	4069bc <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4069aa:	4b07      	ldr	r3, [pc, #28]	; (4069c8 <xTimerGenericCommand+0x7c>)
  4069ac:	6818      	ldr	r0, [r3, #0]
  4069ae:	f107 0110 	add.w	r1, r7, #16
  4069b2:	2300      	movs	r3, #0
  4069b4:	683a      	ldr	r2, [r7, #0]
  4069b6:	4c07      	ldr	r4, [pc, #28]	; (4069d4 <xTimerGenericCommand+0x88>)
  4069b8:	47a0      	blx	r4
  4069ba:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
  4069bc:	69fb      	ldr	r3, [r7, #28]
}
  4069be:	4618      	mov	r0, r3
  4069c0:	3724      	adds	r7, #36	; 0x24
  4069c2:	46bd      	mov	sp, r7
  4069c4:	bd90      	pop	{r4, r7, pc}
  4069c6:	bf00      	nop
  4069c8:	2000270c 	.word	0x2000270c
  4069cc:	00406775 	.word	0x00406775
  4069d0:	0040553d 	.word	0x0040553d
  4069d4:	004056a5 	.word	0x004056a5

004069d8 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
  4069d8:	b590      	push	{r4, r7, lr}
  4069da:	b087      	sub	sp, #28
  4069dc:	af02      	add	r7, sp, #8
  4069de:	6078      	str	r0, [r7, #4]
  4069e0:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4069e2:	4b19      	ldr	r3, [pc, #100]	; (406a48 <prvProcessExpiredTimer+0x70>)
  4069e4:	681b      	ldr	r3, [r3, #0]
  4069e6:	68db      	ldr	r3, [r3, #12]
  4069e8:	68db      	ldr	r3, [r3, #12]
  4069ea:	60fb      	str	r3, [r7, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
  4069ec:	68fb      	ldr	r3, [r7, #12]
  4069ee:	3304      	adds	r3, #4
  4069f0:	4618      	mov	r0, r3
  4069f2:	4b16      	ldr	r3, [pc, #88]	; (406a4c <prvProcessExpiredTimer+0x74>)
  4069f4:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  4069f6:	68fb      	ldr	r3, [r7, #12]
  4069f8:	69db      	ldr	r3, [r3, #28]
  4069fa:	2b01      	cmp	r3, #1
  4069fc:	d11b      	bne.n	406a36 <prvProcessExpiredTimer+0x5e>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  4069fe:	68fb      	ldr	r3, [r7, #12]
  406a00:	699a      	ldr	r2, [r3, #24]
  406a02:	687b      	ldr	r3, [r7, #4]
  406a04:	18d1      	adds	r1, r2, r3
  406a06:	687b      	ldr	r3, [r7, #4]
  406a08:	683a      	ldr	r2, [r7, #0]
  406a0a:	68f8      	ldr	r0, [r7, #12]
  406a0c:	4c10      	ldr	r4, [pc, #64]	; (406a50 <prvProcessExpiredTimer+0x78>)
  406a0e:	47a0      	blx	r4
  406a10:	4603      	mov	r3, r0
  406a12:	2b01      	cmp	r3, #1
  406a14:	d10f      	bne.n	406a36 <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  406a16:	2300      	movs	r3, #0
  406a18:	9300      	str	r3, [sp, #0]
  406a1a:	2300      	movs	r3, #0
  406a1c:	687a      	ldr	r2, [r7, #4]
  406a1e:	2100      	movs	r1, #0
  406a20:	68f8      	ldr	r0, [r7, #12]
  406a22:	4c0c      	ldr	r4, [pc, #48]	; (406a54 <prvProcessExpiredTimer+0x7c>)
  406a24:	47a0      	blx	r4
  406a26:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
  406a28:	68bb      	ldr	r3, [r7, #8]
  406a2a:	2b00      	cmp	r3, #0
  406a2c:	d103      	bne.n	406a36 <prvProcessExpiredTimer+0x5e>
  406a2e:	4b0a      	ldr	r3, [pc, #40]	; (406a58 <prvProcessExpiredTimer+0x80>)
  406a30:	4798      	blx	r3
  406a32:	bf00      	nop
  406a34:	e7fd      	b.n	406a32 <prvProcessExpiredTimer+0x5a>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  406a36:	68fb      	ldr	r3, [r7, #12]
  406a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406a3a:	68f8      	ldr	r0, [r7, #12]
  406a3c:	4798      	blx	r3
}
  406a3e:	bf00      	nop
  406a40:	3714      	adds	r7, #20
  406a42:	46bd      	mov	sp, r7
  406a44:	bd90      	pop	{r4, r7, pc}
  406a46:	bf00      	nop
  406a48:	20002704 	.word	0x20002704
  406a4c:	00404e61 	.word	0x00404e61
  406a50:	00406ba5 	.word	0x00406ba5
  406a54:	0040694d 	.word	0x0040694d
  406a58:	00405085 	.word	0x00405085

00406a5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  406a5c:	b580      	push	{r7, lr}
  406a5e:	b084      	sub	sp, #16
  406a60:	af00      	add	r7, sp, #0
  406a62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  406a64:	f107 0308 	add.w	r3, r7, #8
  406a68:	4618      	mov	r0, r3
  406a6a:	4b05      	ldr	r3, [pc, #20]	; (406a80 <prvTimerTask+0x24>)
  406a6c:	4798      	blx	r3
  406a6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  406a70:	68bb      	ldr	r3, [r7, #8]
  406a72:	4619      	mov	r1, r3
  406a74:	68f8      	ldr	r0, [r7, #12]
  406a76:	4b03      	ldr	r3, [pc, #12]	; (406a84 <prvTimerTask+0x28>)
  406a78:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
  406a7a:	4b03      	ldr	r3, [pc, #12]	; (406a88 <prvTimerTask+0x2c>)
  406a7c:	4798      	blx	r3
	}
  406a7e:	e7f1      	b.n	406a64 <prvTimerTask+0x8>
  406a80:	00406b11 	.word	0x00406b11
  406a84:	00406a8d 	.word	0x00406a8d
  406a88:	00406c2d 	.word	0x00406c2d

00406a8c <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
  406a8c:	b580      	push	{r7, lr}
  406a8e:	b084      	sub	sp, #16
  406a90:	af00      	add	r7, sp, #0
  406a92:	6078      	str	r0, [r7, #4]
  406a94:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  406a96:	4b17      	ldr	r3, [pc, #92]	; (406af4 <prvProcessTimerOrBlockTask+0x68>)
  406a98:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  406a9a:	f107 0308 	add.w	r3, r7, #8
  406a9e:	4618      	mov	r0, r3
  406aa0:	4b15      	ldr	r3, [pc, #84]	; (406af8 <prvProcessTimerOrBlockTask+0x6c>)
  406aa2:	4798      	blx	r3
  406aa4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
  406aa6:	68bb      	ldr	r3, [r7, #8]
  406aa8:	2b00      	cmp	r3, #0
  406aaa:	d11d      	bne.n	406ae8 <prvProcessTimerOrBlockTask+0x5c>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  406aac:	683b      	ldr	r3, [r7, #0]
  406aae:	2b00      	cmp	r3, #0
  406ab0:	d10a      	bne.n	406ac8 <prvProcessTimerOrBlockTask+0x3c>
  406ab2:	687a      	ldr	r2, [r7, #4]
  406ab4:	68fb      	ldr	r3, [r7, #12]
  406ab6:	429a      	cmp	r2, r3
  406ab8:	d806      	bhi.n	406ac8 <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
  406aba:	4b10      	ldr	r3, [pc, #64]	; (406afc <prvProcessTimerOrBlockTask+0x70>)
  406abc:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  406abe:	68f9      	ldr	r1, [r7, #12]
  406ac0:	6878      	ldr	r0, [r7, #4]
  406ac2:	4b0f      	ldr	r3, [pc, #60]	; (406b00 <prvProcessTimerOrBlockTask+0x74>)
  406ac4:	4798      	blx	r3
		else
		{
			xTaskResumeAll();
		}
	}
}
  406ac6:	e011      	b.n	406aec <prvProcessTimerOrBlockTask+0x60>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  406ac8:	4b0e      	ldr	r3, [pc, #56]	; (406b04 <prvProcessTimerOrBlockTask+0x78>)
  406aca:	6818      	ldr	r0, [r3, #0]
  406acc:	687a      	ldr	r2, [r7, #4]
  406ace:	68fb      	ldr	r3, [r7, #12]
  406ad0:	1ad3      	subs	r3, r2, r3
  406ad2:	4619      	mov	r1, r3
  406ad4:	4b0c      	ldr	r3, [pc, #48]	; (406b08 <prvProcessTimerOrBlockTask+0x7c>)
  406ad6:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  406ad8:	4b08      	ldr	r3, [pc, #32]	; (406afc <prvProcessTimerOrBlockTask+0x70>)
  406ada:	4798      	blx	r3
  406adc:	4603      	mov	r3, r0
  406ade:	2b00      	cmp	r3, #0
  406ae0:	d104      	bne.n	406aec <prvProcessTimerOrBlockTask+0x60>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
  406ae2:	4b0a      	ldr	r3, [pc, #40]	; (406b0c <prvProcessTimerOrBlockTask+0x80>)
  406ae4:	4798      	blx	r3
		else
		{
			xTaskResumeAll();
		}
	}
}
  406ae6:	e001      	b.n	406aec <prvProcessTimerOrBlockTask+0x60>
				}
			}
		}
		else
		{
			xTaskResumeAll();
  406ae8:	4b04      	ldr	r3, [pc, #16]	; (406afc <prvProcessTimerOrBlockTask+0x70>)
  406aea:	4798      	blx	r3
		}
	}
}
  406aec:	bf00      	nop
  406aee:	3710      	adds	r7, #16
  406af0:	46bd      	mov	sp, r7
  406af2:	bd80      	pop	{r7, pc}
  406af4:	00405e5d 	.word	0x00405e5d
  406af8:	00406b59 	.word	0x00406b59
  406afc:	00405e79 	.word	0x00405e79
  406b00:	004069d9 	.word	0x004069d9
  406b04:	2000270c 	.word	0x2000270c
  406b08:	00405b59 	.word	0x00405b59
  406b0c:	00405025 	.word	0x00405025

00406b10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
  406b10:	b480      	push	{r7}
  406b12:	b085      	sub	sp, #20
  406b14:	af00      	add	r7, sp, #0
  406b16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  406b18:	4b0e      	ldr	r3, [pc, #56]	; (406b54 <prvGetNextExpireTime+0x44>)
  406b1a:	681b      	ldr	r3, [r3, #0]
  406b1c:	681b      	ldr	r3, [r3, #0]
  406b1e:	2b00      	cmp	r3, #0
  406b20:	bf0c      	ite	eq
  406b22:	2301      	moveq	r3, #1
  406b24:	2300      	movne	r3, #0
  406b26:	b2db      	uxtb	r3, r3
  406b28:	461a      	mov	r2, r3
  406b2a:	687b      	ldr	r3, [r7, #4]
  406b2c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  406b2e:	687b      	ldr	r3, [r7, #4]
  406b30:	681b      	ldr	r3, [r3, #0]
  406b32:	2b00      	cmp	r3, #0
  406b34:	d105      	bne.n	406b42 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  406b36:	4b07      	ldr	r3, [pc, #28]	; (406b54 <prvGetNextExpireTime+0x44>)
  406b38:	681b      	ldr	r3, [r3, #0]
  406b3a:	68db      	ldr	r3, [r3, #12]
  406b3c:	681b      	ldr	r3, [r3, #0]
  406b3e:	60fb      	str	r3, [r7, #12]
  406b40:	e001      	b.n	406b46 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
  406b42:	2300      	movs	r3, #0
  406b44:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
  406b46:	68fb      	ldr	r3, [r7, #12]
}
  406b48:	4618      	mov	r0, r3
  406b4a:	3714      	adds	r7, #20
  406b4c:	46bd      	mov	sp, r7
  406b4e:	bc80      	pop	{r7}
  406b50:	4770      	bx	lr
  406b52:	bf00      	nop
  406b54:	20002704 	.word	0x20002704

00406b58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
  406b58:	b580      	push	{r7, lr}
  406b5a:	b084      	sub	sp, #16
  406b5c:	af00      	add	r7, sp, #0
  406b5e:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
  406b60:	4b0d      	ldr	r3, [pc, #52]	; (406b98 <prvSampleTimeNow+0x40>)
  406b62:	4798      	blx	r3
  406b64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
  406b66:	4b0d      	ldr	r3, [pc, #52]	; (406b9c <prvSampleTimeNow+0x44>)
  406b68:	681b      	ldr	r3, [r3, #0]
  406b6a:	68fa      	ldr	r2, [r7, #12]
  406b6c:	429a      	cmp	r2, r3
  406b6e:	d208      	bcs.n	406b82 <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
  406b70:	4b0a      	ldr	r3, [pc, #40]	; (406b9c <prvSampleTimeNow+0x44>)
  406b72:	681b      	ldr	r3, [r3, #0]
  406b74:	4618      	mov	r0, r3
  406b76:	4b0a      	ldr	r3, [pc, #40]	; (406ba0 <prvSampleTimeNow+0x48>)
  406b78:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  406b7a:	687b      	ldr	r3, [r7, #4]
  406b7c:	2201      	movs	r2, #1
  406b7e:	601a      	str	r2, [r3, #0]
  406b80:	e002      	b.n	406b88 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  406b82:	687b      	ldr	r3, [r7, #4]
  406b84:	2200      	movs	r2, #0
  406b86:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
  406b88:	4a04      	ldr	r2, [pc, #16]	; (406b9c <prvSampleTimeNow+0x44>)
  406b8a:	68fb      	ldr	r3, [r7, #12]
  406b8c:	6013      	str	r3, [r2, #0]

	return xTimeNow;
  406b8e:	68fb      	ldr	r3, [r7, #12]
}
  406b90:	4618      	mov	r0, r3
  406b92:	3710      	adds	r7, #16
  406b94:	46bd      	mov	sp, r7
  406b96:	bd80      	pop	{r7, pc}
  406b98:	00405f99 	.word	0x00405f99
  406b9c:	20002710 	.word	0x20002710
  406ba0:	00406d39 	.word	0x00406d39

00406ba4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  406ba4:	b580      	push	{r7, lr}
  406ba6:	b086      	sub	sp, #24
  406ba8:	af00      	add	r7, sp, #0
  406baa:	60f8      	str	r0, [r7, #12]
  406bac:	60b9      	str	r1, [r7, #8]
  406bae:	607a      	str	r2, [r7, #4]
  406bb0:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
  406bb2:	2300      	movs	r3, #0
  406bb4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  406bb6:	68fb      	ldr	r3, [r7, #12]
  406bb8:	68ba      	ldr	r2, [r7, #8]
  406bba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  406bbc:	68fb      	ldr	r3, [r7, #12]
  406bbe:	68fa      	ldr	r2, [r7, #12]
  406bc0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
  406bc2:	68ba      	ldr	r2, [r7, #8]
  406bc4:	687b      	ldr	r3, [r7, #4]
  406bc6:	429a      	cmp	r2, r3
  406bc8:	d812      	bhi.n	406bf0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  406bca:	687a      	ldr	r2, [r7, #4]
  406bcc:	683b      	ldr	r3, [r7, #0]
  406bce:	1ad2      	subs	r2, r2, r3
  406bd0:	68fb      	ldr	r3, [r7, #12]
  406bd2:	699b      	ldr	r3, [r3, #24]
  406bd4:	429a      	cmp	r2, r3
  406bd6:	d302      	bcc.n	406bde <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  406bd8:	2301      	movs	r3, #1
  406bda:	617b      	str	r3, [r7, #20]
  406bdc:	e01b      	b.n	406c16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  406bde:	4b10      	ldr	r3, [pc, #64]	; (406c20 <prvInsertTimerInActiveList+0x7c>)
  406be0:	681a      	ldr	r2, [r3, #0]
  406be2:	68fb      	ldr	r3, [r7, #12]
  406be4:	3304      	adds	r3, #4
  406be6:	4619      	mov	r1, r3
  406be8:	4610      	mov	r0, r2
  406bea:	4b0e      	ldr	r3, [pc, #56]	; (406c24 <prvInsertTimerInActiveList+0x80>)
  406bec:	4798      	blx	r3
  406bee:	e012      	b.n	406c16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  406bf0:	687a      	ldr	r2, [r7, #4]
  406bf2:	683b      	ldr	r3, [r7, #0]
  406bf4:	429a      	cmp	r2, r3
  406bf6:	d206      	bcs.n	406c06 <prvInsertTimerInActiveList+0x62>
  406bf8:	68ba      	ldr	r2, [r7, #8]
  406bfa:	683b      	ldr	r3, [r7, #0]
  406bfc:	429a      	cmp	r2, r3
  406bfe:	d302      	bcc.n	406c06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  406c00:	2301      	movs	r3, #1
  406c02:	617b      	str	r3, [r7, #20]
  406c04:	e007      	b.n	406c16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  406c06:	4b08      	ldr	r3, [pc, #32]	; (406c28 <prvInsertTimerInActiveList+0x84>)
  406c08:	681a      	ldr	r2, [r3, #0]
  406c0a:	68fb      	ldr	r3, [r7, #12]
  406c0c:	3304      	adds	r3, #4
  406c0e:	4619      	mov	r1, r3
  406c10:	4610      	mov	r0, r2
  406c12:	4b04      	ldr	r3, [pc, #16]	; (406c24 <prvInsertTimerInActiveList+0x80>)
  406c14:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
  406c16:	697b      	ldr	r3, [r7, #20]
}
  406c18:	4618      	mov	r0, r3
  406c1a:	3718      	adds	r7, #24
  406c1c:	46bd      	mov	sp, r7
  406c1e:	bd80      	pop	{r7, pc}
  406c20:	20002708 	.word	0x20002708
  406c24:	00404df1 	.word	0x00404df1
  406c28:	20002704 	.word	0x20002704

00406c2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
  406c2c:	b590      	push	{r4, r7, lr}
  406c2e:	b08b      	sub	sp, #44	; 0x2c
  406c30:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  406c32:	1d3b      	adds	r3, r7, #4
  406c34:	4618      	mov	r0, r3
  406c36:	4b38      	ldr	r3, [pc, #224]	; (406d18 <prvProcessReceivedCommands+0xec>)
  406c38:	4798      	blx	r3
  406c3a:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  406c3c:	e05d      	b.n	406cfa <prvProcessReceivedCommands+0xce>
	{
		pxTimer = xMessage.pxTimer;
  406c3e:	693b      	ldr	r3, [r7, #16]
  406c40:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
  406c42:	69bb      	ldr	r3, [r7, #24]
  406c44:	2b00      	cmp	r3, #0
  406c46:	d008      	beq.n	406c5a <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  406c48:	69bb      	ldr	r3, [r7, #24]
  406c4a:	695b      	ldr	r3, [r3, #20]
  406c4c:	2b00      	cmp	r3, #0
  406c4e:	d004      	beq.n	406c5a <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
  406c50:	69bb      	ldr	r3, [r7, #24]
  406c52:	3304      	adds	r3, #4
  406c54:	4618      	mov	r0, r3
  406c56:	4b31      	ldr	r3, [pc, #196]	; (406d1c <prvProcessReceivedCommands+0xf0>)
  406c58:	4798      	blx	r3
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
  406c5a:	68bb      	ldr	r3, [r7, #8]
  406c5c:	2b03      	cmp	r3, #3
  406c5e:	d84b      	bhi.n	406cf8 <prvProcessReceivedCommands+0xcc>
  406c60:	a201      	add	r2, pc, #4	; (adr r2, 406c68 <prvProcessReceivedCommands+0x3c>)
  406c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  406c66:	bf00      	nop
  406c68:	00406c79 	.word	0x00406c79
  406c6c:	00406cfb 	.word	0x00406cfb
  406c70:	00406cc7 	.word	0x00406cc7
  406c74:	00406cf1 	.word	0x00406cf1
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  406c78:	68fa      	ldr	r2, [r7, #12]
  406c7a:	69bb      	ldr	r3, [r7, #24]
  406c7c:	699b      	ldr	r3, [r3, #24]
  406c7e:	18d1      	adds	r1, r2, r3
  406c80:	68fb      	ldr	r3, [r7, #12]
  406c82:	69fa      	ldr	r2, [r7, #28]
  406c84:	69b8      	ldr	r0, [r7, #24]
  406c86:	4c26      	ldr	r4, [pc, #152]	; (406d20 <prvProcessReceivedCommands+0xf4>)
  406c88:	47a0      	blx	r4
  406c8a:	4603      	mov	r3, r0
  406c8c:	2b01      	cmp	r3, #1
  406c8e:	d134      	bne.n	406cfa <prvProcessReceivedCommands+0xce>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  406c90:	69bb      	ldr	r3, [r7, #24]
  406c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406c94:	69b8      	ldr	r0, [r7, #24]
  406c96:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  406c98:	69bb      	ldr	r3, [r7, #24]
  406c9a:	69db      	ldr	r3, [r3, #28]
  406c9c:	2b01      	cmp	r3, #1
  406c9e:	d12c      	bne.n	406cfa <prvProcessReceivedCommands+0xce>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  406ca0:	68fa      	ldr	r2, [r7, #12]
  406ca2:	69bb      	ldr	r3, [r7, #24]
  406ca4:	699b      	ldr	r3, [r3, #24]
  406ca6:	441a      	add	r2, r3
  406ca8:	2300      	movs	r3, #0
  406caa:	9300      	str	r3, [sp, #0]
  406cac:	2300      	movs	r3, #0
  406cae:	2100      	movs	r1, #0
  406cb0:	69b8      	ldr	r0, [r7, #24]
  406cb2:	4c1c      	ldr	r4, [pc, #112]	; (406d24 <prvProcessReceivedCommands+0xf8>)
  406cb4:	47a0      	blx	r4
  406cb6:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
  406cb8:	697b      	ldr	r3, [r7, #20]
  406cba:	2b00      	cmp	r3, #0
  406cbc:	d11d      	bne.n	406cfa <prvProcessReceivedCommands+0xce>
  406cbe:	4b1a      	ldr	r3, [pc, #104]	; (406d28 <prvProcessReceivedCommands+0xfc>)
  406cc0:	4798      	blx	r3
  406cc2:	bf00      	nop
  406cc4:	e7fd      	b.n	406cc2 <prvProcessReceivedCommands+0x96>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  406cc6:	68fa      	ldr	r2, [r7, #12]
  406cc8:	69bb      	ldr	r3, [r7, #24]
  406cca:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  406ccc:	69bb      	ldr	r3, [r7, #24]
  406cce:	699b      	ldr	r3, [r3, #24]
  406cd0:	2b00      	cmp	r3, #0
  406cd2:	d103      	bne.n	406cdc <prvProcessReceivedCommands+0xb0>
  406cd4:	4b14      	ldr	r3, [pc, #80]	; (406d28 <prvProcessReceivedCommands+0xfc>)
  406cd6:	4798      	blx	r3
  406cd8:	bf00      	nop
  406cda:	e7fd      	b.n	406cd8 <prvProcessReceivedCommands+0xac>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  406cdc:	69bb      	ldr	r3, [r7, #24]
  406cde:	699a      	ldr	r2, [r3, #24]
  406ce0:	69fb      	ldr	r3, [r7, #28]
  406ce2:	18d1      	adds	r1, r2, r3
  406ce4:	69fb      	ldr	r3, [r7, #28]
  406ce6:	69fa      	ldr	r2, [r7, #28]
  406ce8:	69b8      	ldr	r0, [r7, #24]
  406cea:	4c0d      	ldr	r4, [pc, #52]	; (406d20 <prvProcessReceivedCommands+0xf4>)
  406cec:	47a0      	blx	r4
				break;
  406cee:	e004      	b.n	406cfa <prvProcessReceivedCommands+0xce>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
  406cf0:	69b8      	ldr	r0, [r7, #24]
  406cf2:	4b0e      	ldr	r3, [pc, #56]	; (406d2c <prvProcessReceivedCommands+0x100>)
  406cf4:	4798      	blx	r3
				break;
  406cf6:	e000      	b.n	406cfa <prvProcessReceivedCommands+0xce>

			default	:
				/* Don't expect to get here. */
				break;
  406cf8:	bf00      	nop

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  406cfa:	4b0d      	ldr	r3, [pc, #52]	; (406d30 <prvProcessReceivedCommands+0x104>)
  406cfc:	6818      	ldr	r0, [r3, #0]
  406cfe:	f107 0108 	add.w	r1, r7, #8
  406d02:	2300      	movs	r3, #0
  406d04:	2200      	movs	r2, #0
  406d06:	4c0b      	ldr	r4, [pc, #44]	; (406d34 <prvProcessReceivedCommands+0x108>)
  406d08:	47a0      	blx	r4
  406d0a:	4603      	mov	r3, r0
  406d0c:	2b00      	cmp	r3, #0
  406d0e:	d196      	bne.n	406c3e <prvProcessReceivedCommands+0x12>
			default	:
				/* Don't expect to get here. */
				break;
		}
	}
}
  406d10:	bf00      	nop
  406d12:	3724      	adds	r7, #36	; 0x24
  406d14:	46bd      	mov	sp, r7
  406d16:	bd90      	pop	{r4, r7, pc}
  406d18:	00406b59 	.word	0x00406b59
  406d1c:	00404e61 	.word	0x00404e61
  406d20:	00406ba5 	.word	0x00406ba5
  406d24:	0040694d 	.word	0x0040694d
  406d28:	00405085 	.word	0x00405085
  406d2c:	00405251 	.word	0x00405251
  406d30:	2000270c 	.word	0x2000270c
  406d34:	00405761 	.word	0x00405761

00406d38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
  406d38:	b590      	push	{r4, r7, lr}
  406d3a:	b08b      	sub	sp, #44	; 0x2c
  406d3c:	af02      	add	r7, sp, #8
  406d3e:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  406d40:	e03e      	b.n	406dc0 <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  406d42:	4b29      	ldr	r3, [pc, #164]	; (406de8 <prvSwitchTimerLists+0xb0>)
  406d44:	681b      	ldr	r3, [r3, #0]
  406d46:	68db      	ldr	r3, [r3, #12]
  406d48:	681b      	ldr	r3, [r3, #0]
  406d4a:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  406d4c:	4b26      	ldr	r3, [pc, #152]	; (406de8 <prvSwitchTimerLists+0xb0>)
  406d4e:	681b      	ldr	r3, [r3, #0]
  406d50:	68db      	ldr	r3, [r3, #12]
  406d52:	68db      	ldr	r3, [r3, #12]
  406d54:	61bb      	str	r3, [r7, #24]
		uxListRemove( &( pxTimer->xTimerListItem ) );
  406d56:	69bb      	ldr	r3, [r7, #24]
  406d58:	3304      	adds	r3, #4
  406d5a:	4618      	mov	r0, r3
  406d5c:	4b23      	ldr	r3, [pc, #140]	; (406dec <prvSwitchTimerLists+0xb4>)
  406d5e:	4798      	blx	r3

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  406d60:	69bb      	ldr	r3, [r7, #24]
  406d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406d64:	69b8      	ldr	r0, [r7, #24]
  406d66:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  406d68:	69bb      	ldr	r3, [r7, #24]
  406d6a:	69db      	ldr	r3, [r3, #28]
  406d6c:	2b01      	cmp	r3, #1
  406d6e:	d127      	bne.n	406dc0 <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  406d70:	69bb      	ldr	r3, [r7, #24]
  406d72:	699a      	ldr	r2, [r3, #24]
  406d74:	69fb      	ldr	r3, [r7, #28]
  406d76:	4413      	add	r3, r2
  406d78:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
  406d7a:	697a      	ldr	r2, [r7, #20]
  406d7c:	69fb      	ldr	r3, [r7, #28]
  406d7e:	429a      	cmp	r2, r3
  406d80:	d90e      	bls.n	406da0 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  406d82:	69bb      	ldr	r3, [r7, #24]
  406d84:	697a      	ldr	r2, [r7, #20]
  406d86:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  406d88:	69bb      	ldr	r3, [r7, #24]
  406d8a:	69ba      	ldr	r2, [r7, #24]
  406d8c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  406d8e:	4b16      	ldr	r3, [pc, #88]	; (406de8 <prvSwitchTimerLists+0xb0>)
  406d90:	681a      	ldr	r2, [r3, #0]
  406d92:	69bb      	ldr	r3, [r7, #24]
  406d94:	3304      	adds	r3, #4
  406d96:	4619      	mov	r1, r3
  406d98:	4610      	mov	r0, r2
  406d9a:	4b15      	ldr	r3, [pc, #84]	; (406df0 <prvSwitchTimerLists+0xb8>)
  406d9c:	4798      	blx	r3
  406d9e:	e00f      	b.n	406dc0 <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  406da0:	2300      	movs	r3, #0
  406da2:	9300      	str	r3, [sp, #0]
  406da4:	2300      	movs	r3, #0
  406da6:	69fa      	ldr	r2, [r7, #28]
  406da8:	2100      	movs	r1, #0
  406daa:	69b8      	ldr	r0, [r7, #24]
  406dac:	4c11      	ldr	r4, [pc, #68]	; (406df4 <prvSwitchTimerLists+0xbc>)
  406dae:	47a0      	blx	r4
  406db0:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
  406db2:	693b      	ldr	r3, [r7, #16]
  406db4:	2b00      	cmp	r3, #0
  406db6:	d103      	bne.n	406dc0 <prvSwitchTimerLists+0x88>
  406db8:	4b0f      	ldr	r3, [pc, #60]	; (406df8 <prvSwitchTimerLists+0xc0>)
  406dba:	4798      	blx	r3
  406dbc:	bf00      	nop
  406dbe:	e7fd      	b.n	406dbc <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  406dc0:	4b09      	ldr	r3, [pc, #36]	; (406de8 <prvSwitchTimerLists+0xb0>)
  406dc2:	681b      	ldr	r3, [r3, #0]
  406dc4:	681b      	ldr	r3, [r3, #0]
  406dc6:	2b00      	cmp	r3, #0
  406dc8:	d1bb      	bne.n	406d42 <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
  406dca:	4b07      	ldr	r3, [pc, #28]	; (406de8 <prvSwitchTimerLists+0xb0>)
  406dcc:	681b      	ldr	r3, [r3, #0]
  406dce:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
  406dd0:	4b0a      	ldr	r3, [pc, #40]	; (406dfc <prvSwitchTimerLists+0xc4>)
  406dd2:	681b      	ldr	r3, [r3, #0]
  406dd4:	4a04      	ldr	r2, [pc, #16]	; (406de8 <prvSwitchTimerLists+0xb0>)
  406dd6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
  406dd8:	4a08      	ldr	r2, [pc, #32]	; (406dfc <prvSwitchTimerLists+0xc4>)
  406dda:	68fb      	ldr	r3, [r7, #12]
  406ddc:	6013      	str	r3, [r2, #0]
}
  406dde:	bf00      	nop
  406de0:	3724      	adds	r7, #36	; 0x24
  406de2:	46bd      	mov	sp, r7
  406de4:	bd90      	pop	{r4, r7, pc}
  406de6:	bf00      	nop
  406de8:	20002704 	.word	0x20002704
  406dec:	00404e61 	.word	0x00404e61
  406df0:	00404df1 	.word	0x00404df1
  406df4:	0040694d 	.word	0x0040694d
  406df8:	00405085 	.word	0x00405085
  406dfc:	20002708 	.word	0x20002708

00406e00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  406e00:	b580      	push	{r7, lr}
  406e02:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  406e04:	4b0e      	ldr	r3, [pc, #56]	; (406e40 <prvCheckForValidListAndQueue+0x40>)
  406e06:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  406e08:	4b0e      	ldr	r3, [pc, #56]	; (406e44 <prvCheckForValidListAndQueue+0x44>)
  406e0a:	681b      	ldr	r3, [r3, #0]
  406e0c:	2b00      	cmp	r3, #0
  406e0e:	d113      	bne.n	406e38 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
  406e10:	480d      	ldr	r0, [pc, #52]	; (406e48 <prvCheckForValidListAndQueue+0x48>)
  406e12:	4b0e      	ldr	r3, [pc, #56]	; (406e4c <prvCheckForValidListAndQueue+0x4c>)
  406e14:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
  406e16:	480e      	ldr	r0, [pc, #56]	; (406e50 <prvCheckForValidListAndQueue+0x50>)
  406e18:	4b0c      	ldr	r3, [pc, #48]	; (406e4c <prvCheckForValidListAndQueue+0x4c>)
  406e1a:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
  406e1c:	4b0d      	ldr	r3, [pc, #52]	; (406e54 <prvCheckForValidListAndQueue+0x54>)
  406e1e:	4a0a      	ldr	r2, [pc, #40]	; (406e48 <prvCheckForValidListAndQueue+0x48>)
  406e20:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  406e22:	4b0d      	ldr	r3, [pc, #52]	; (406e58 <prvCheckForValidListAndQueue+0x58>)
  406e24:	4a0a      	ldr	r2, [pc, #40]	; (406e50 <prvCheckForValidListAndQueue+0x50>)
  406e26:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  406e28:	2200      	movs	r2, #0
  406e2a:	210c      	movs	r1, #12
  406e2c:	2005      	movs	r0, #5
  406e2e:	4b0b      	ldr	r3, [pc, #44]	; (406e5c <prvCheckForValidListAndQueue+0x5c>)
  406e30:	4798      	blx	r3
  406e32:	4602      	mov	r2, r0
  406e34:	4b03      	ldr	r3, [pc, #12]	; (406e44 <prvCheckForValidListAndQueue+0x44>)
  406e36:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
  406e38:	4b09      	ldr	r3, [pc, #36]	; (406e60 <prvCheckForValidListAndQueue+0x60>)
  406e3a:	4798      	blx	r3
}
  406e3c:	bf00      	nop
  406e3e:	bd80      	pop	{r7, pc}
  406e40:	0040503d 	.word	0x0040503d
  406e44:	2000270c 	.word	0x2000270c
  406e48:	200026dc 	.word	0x200026dc
  406e4c:	00404d49 	.word	0x00404d49
  406e50:	200026f0 	.word	0x200026f0
  406e54:	20002704 	.word	0x20002704
  406e58:	20002708 	.word	0x20002708
  406e5c:	004054ad 	.word	0x004054ad
  406e60:	0040505d 	.word	0x0040505d

00406e64 <vCommTask>:

void WriteMbusRegs(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len);
void SendRespPkt(uint8_t *pkt, uint8_t len);

void vCommTask(void *pvParameters)
{
  406e64:	b590      	push	{r4, r7, lr}
  406e66:	b0d3      	sub	sp, #332	; 0x14c
  406e68:	af02      	add	r7, sp, #8
  406e6a:	1d3b      	adds	r3, r7, #4
  406e6c:	6018      	str	r0, [r3, #0]
    
	/* RS485 Rx buffer */
	uint8_t rs485RxBuffer[RS485_BUFFER_SIZE];
	/* RS485 Tx buffer */
    uint8_t respBuff[RS485_BUFFER_SIZE], respLen = 0;
  406e6e:	f107 030b 	add.w	r3, r7, #11
  406e72:	2200      	movs	r2, #0
  406e74:	701a      	strb	r2, [r3, #0]
    uint8_t commState = 0, recvdBytes = 0, prevRecvdBytes;
  406e76:	2300      	movs	r3, #0
  406e78:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
  406e7c:	2300      	movs	r3, #0
  406e7e:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
    /* Init Mbus writeFunc() ptr */
    writeFunc = WriteMbusRegs;
  406e82:	4b40      	ldr	r3, [pc, #256]	; (406f84 <vCommTask+0x120>)
  406e84:	4a40      	ldr	r2, [pc, #256]	; (406f88 <vCommTask+0x124>)
  406e86:	601a      	str	r2, [r3, #0]
	
	/* Start Receiving Data */
	usart_disable_tx(RS485_USART);
  406e88:	4840      	ldr	r0, [pc, #256]	; (406f8c <vCommTask+0x128>)
  406e8a:	4b41      	ldr	r3, [pc, #260]	; (406f90 <vCommTask+0x12c>)
  406e8c:	4798      	blx	r3
	usart_enable_rx(RS485_USART);
  406e8e:	483f      	ldr	r0, [pc, #252]	; (406f8c <vCommTask+0x128>)
  406e90:	4b40      	ldr	r3, [pc, #256]	; (406f94 <vCommTask+0x130>)
  406e92:	4798      	blx	r3
	Rs485PdcStartRx((uint32_t)rs485RxBuffer,RS485_BUFFER_SIZE);
  406e94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
  406e98:	2196      	movs	r1, #150	; 0x96
  406e9a:	4618      	mov	r0, r3
  406e9c:	4b3e      	ldr	r3, [pc, #248]	; (406f98 <vCommTask+0x134>)
  406e9e:	4798      	blx	r3

    while(1)
    {
        /* Sleep for some time and check if data recvd */
        vTaskDelay(40 / portTICK_RATE_MS);
  406ea0:	2008      	movs	r0, #8
  406ea2:	4b3e      	ldr	r3, [pc, #248]	; (406f9c <vCommTask+0x138>)
  406ea4:	4798      	blx	r3
        
		recvdBytes = Rs485PdcGetRxBytes();
  406ea6:	4b3e      	ldr	r3, [pc, #248]	; (406fa0 <vCommTask+0x13c>)
  406ea8:	4798      	blx	r3
  406eaa:	4603      	mov	r3, r0
  406eac:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
		/* Check if data received on 485 */
		switch(commState)
  406eb0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
  406eb4:	2b00      	cmp	r3, #0
  406eb6:	d002      	beq.n	406ebe <vCommTask+0x5a>
  406eb8:	2b01      	cmp	r3, #1
  406eba:	d00c      	beq.n	406ed6 <vCommTask+0x72>
  406ebc:	e061      	b.n	406f82 <vCommTask+0x11e>
		{
			case 0:
				if(recvdBytes!=0)
  406ebe:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
  406ec2:	2b00      	cmp	r3, #0
  406ec4:	d05c      	beq.n	406f80 <vCommTask+0x11c>
				{
					commState = 1;
  406ec6:	2301      	movs	r3, #1
  406ec8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
					prevRecvdBytes = recvdBytes;
  406ecc:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
  406ed0:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
				}
				break;
  406ed4:	e054      	b.n	406f80 <vCommTask+0x11c>
			case 1:
				if(prevRecvdBytes != recvdBytes)
  406ed6:	f897 213e 	ldrb.w	r2, [r7, #318]	; 0x13e
  406eda:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
  406ede:	429a      	cmp	r2, r3
  406ee0:	d004      	beq.n	406eec <vCommTask+0x88>
				{
					prevRecvdBytes = recvdBytes;
  406ee2:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
  406ee6:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
					
					usart_enable_rx(RS485_USART);
					pdc_enable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN);
					Rs485PdcStartRx((uint32_t)rs485RxBuffer,RS485_BUFFER_SIZE);
				}
				break;
  406eea:	e04a      	b.n	406f82 <vCommTask+0x11e>
					prevRecvdBytes = recvdBytes;
				}
				else
				{
					/* 1 Modbus Pkt received. Process it. */
					usart_disable_rx(RS485_USART);
  406eec:	4827      	ldr	r0, [pc, #156]	; (406f8c <vCommTask+0x128>)
  406eee:	4b2d      	ldr	r3, [pc, #180]	; (406fa4 <vCommTask+0x140>)
  406ef0:	4798      	blx	r3
					pdc_disable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN);
  406ef2:	4b2d      	ldr	r3, [pc, #180]	; (406fa8 <vCommTask+0x144>)
  406ef4:	681b      	ldr	r3, [r3, #0]
  406ef6:	2101      	movs	r1, #1
  406ef8:	4618      	mov	r0, r3
  406efa:	4b2c      	ldr	r3, [pc, #176]	; (406fac <vCommTask+0x148>)
  406efc:	4798      	blx	r3

					/* Parse Received MBUS Pkt, update actual variables */
					ParseMbusPkt(slaveAddr, rs485RxBuffer, recvdBytes, respBuff, &respLen);
  406efe:	4b2c      	ldr	r3, [pc, #176]	; (406fb0 <vCommTask+0x14c>)
  406f00:	7818      	ldrb	r0, [r3, #0]
  406f02:	f107 040c 	add.w	r4, r7, #12
  406f06:	f897 213d 	ldrb.w	r2, [r7, #317]	; 0x13d
  406f0a:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
  406f0e:	f107 030b 	add.w	r3, r7, #11
  406f12:	9300      	str	r3, [sp, #0]
  406f14:	4623      	mov	r3, r4
  406f16:	4c27      	ldr	r4, [pc, #156]	; (406fb4 <vCommTask+0x150>)
  406f18:	47a0      	blx	r4
				
					/* Generate MBus Resp */
					if(respLen)
  406f1a:	f107 030b 	add.w	r3, r7, #11
  406f1e:	781b      	ldrb	r3, [r3, #0]
  406f20:	2b00      	cmp	r3, #0
  406f22:	d008      	beq.n	406f36 <vCommTask+0xd2>
					{
						SendRespPkt(respBuff, respLen);
  406f24:	f107 030b 	add.w	r3, r7, #11
  406f28:	781a      	ldrb	r2, [r3, #0]
  406f2a:	f107 030c 	add.w	r3, r7, #12
  406f2e:	4611      	mov	r1, r2
  406f30:	4618      	mov	r0, r3
  406f32:	4b21      	ldr	r3, [pc, #132]	; (406fb8 <vCommTask+0x154>)
  406f34:	4798      	blx	r3
					}
					
					memset((uint8_t *)rs485RxBuffer,0,sizeof(rs485RxBuffer));
  406f36:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
  406f3a:	2296      	movs	r2, #150	; 0x96
  406f3c:	2100      	movs	r1, #0
  406f3e:	4618      	mov	r0, r3
  406f40:	4b1e      	ldr	r3, [pc, #120]	; (406fbc <vCommTask+0x158>)
  406f42:	4798      	blx	r3
					memset(respBuff,0,sizeof(respBuff));
  406f44:	f107 030c 	add.w	r3, r7, #12
  406f48:	2296      	movs	r2, #150	; 0x96
  406f4a:	2100      	movs	r1, #0
  406f4c:	4618      	mov	r0, r3
  406f4e:	4b1b      	ldr	r3, [pc, #108]	; (406fbc <vCommTask+0x158>)
  406f50:	4798      	blx	r3
					respLen = 0;
  406f52:	f107 030b 	add.w	r3, r7, #11
  406f56:	2200      	movs	r2, #0
  406f58:	701a      	strb	r2, [r3, #0]
					commState = 0;
  406f5a:	2300      	movs	r3, #0
  406f5c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
					
					usart_enable_rx(RS485_USART);
  406f60:	480a      	ldr	r0, [pc, #40]	; (406f8c <vCommTask+0x128>)
  406f62:	4b0c      	ldr	r3, [pc, #48]	; (406f94 <vCommTask+0x130>)
  406f64:	4798      	blx	r3
					pdc_enable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN);
  406f66:	4b10      	ldr	r3, [pc, #64]	; (406fa8 <vCommTask+0x144>)
  406f68:	681b      	ldr	r3, [r3, #0]
  406f6a:	2101      	movs	r1, #1
  406f6c:	4618      	mov	r0, r3
  406f6e:	4b14      	ldr	r3, [pc, #80]	; (406fc0 <vCommTask+0x15c>)
  406f70:	4798      	blx	r3
					Rs485PdcStartRx((uint32_t)rs485RxBuffer,RS485_BUFFER_SIZE);
  406f72:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
  406f76:	2196      	movs	r1, #150	; 0x96
  406f78:	4618      	mov	r0, r3
  406f7a:	4b07      	ldr	r3, [pc, #28]	; (406f98 <vCommTask+0x134>)
  406f7c:	4798      	blx	r3
				}
				break;
  406f7e:	e000      	b.n	406f82 <vCommTask+0x11e>
				if(recvdBytes!=0)
				{
					commState = 1;
					prevRecvdBytes = recvdBytes;
				}
				break;
  406f80:	bf00      	nop
					pdc_enable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN);
					Rs485PdcStartRx((uint32_t)rs485RxBuffer,RS485_BUFFER_SIZE);
				}
				break;
		}
    }
  406f82:	e78d      	b.n	406ea0 <vCommTask+0x3c>
  406f84:	20002714 	.word	0x20002714
  406f88:	00406fd5 	.word	0x00406fd5
  406f8c:	40028000 	.word	0x40028000
  406f90:	004037b9 	.word	0x004037b9
  406f94:	004037e9 	.word	0x004037e9
  406f98:	00402a11 	.word	0x00402a11
  406f9c:	00405d75 	.word	0x00405d75
  406fa0:	00402a4d 	.word	0x00402a4d
  406fa4:	00403801 	.word	0x00403801
  406fa8:	20002718 	.word	0x20002718
  406fac:	00403191 	.word	0x00403191
  406fb0:	2000003c 	.word	0x2000003c
  406fb4:	004006f1 	.word	0x004006f1
  406fb8:	00407321 	.word	0x00407321
  406fbc:	0040b3bd 	.word	0x0040b3bd
  406fc0:	00403171 	.word	0x00403171

00406fc4 <vCommInit>:
}

void vCommInit(void)
{
  406fc4:	b580      	push	{r7, lr}
  406fc6:	af00      	add	r7, sp, #0
    /* Init RS485 port with PDC support */
    InitRs485Pdc();
  406fc8:	4b01      	ldr	r3, [pc, #4]	; (406fd0 <vCommInit+0xc>)
  406fca:	4798      	blx	r3
}
  406fcc:	bf00      	nop
  406fce:	bd80      	pop	{r7, pc}
  406fd0:	00402951 	.word	0x00402951

00406fd4 <WriteMbusRegs>:

void WriteMbusRegs(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len)
{
  406fd4:	b590      	push	{r4, r7, lr}
  406fd6:	b087      	sub	sp, #28
  406fd8:	af02      	add	r7, sp, #8
  406fda:	6078      	str	r0, [r7, #4]
  406fdc:	460b      	mov	r3, r1
  406fde:	70fb      	strb	r3, [r7, #3]
  406fe0:	4613      	mov	r3, r2
  406fe2:	70bb      	strb	r3, [r7, #2]
    uint16_t *ptr;
	uint8_t *ptr8;
    
    while(len)
  406fe4:	e16c      	b.n	4072c0 <WriteMbusRegs+0x2ec>
    {
        switch(regAddr)
  406fe6:	78fb      	ldrb	r3, [r7, #3]
  406fe8:	2b25      	cmp	r3, #37	; 0x25
  406fea:	f200 8162 	bhi.w	4072b2 <WriteMbusRegs+0x2de>
  406fee:	a201      	add	r2, pc, #4	; (adr r2, 406ff4 <WriteMbusRegs+0x20>)
  406ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  406ff4:	0040708d 	.word	0x0040708d
  406ff8:	004070a3 	.word	0x004070a3
  406ffc:	004070b9 	.word	0x004070b9
  407000:	004070cf 	.word	0x004070cf
  407004:	004070e5 	.word	0x004070e5
  407008:	004070fb 	.word	0x004070fb
  40700c:	00407111 	.word	0x00407111
  407010:	004072b3 	.word	0x004072b3
  407014:	004072b3 	.word	0x004072b3
  407018:	00407127 	.word	0x00407127
  40701c:	004072b3 	.word	0x004072b3
  407020:	00407153 	.word	0x00407153
  407024:	004072b3 	.word	0x004072b3
  407028:	0040717f 	.word	0x0040717f
  40702c:	004072b3 	.word	0x004072b3
  407030:	004072b3 	.word	0x004072b3
  407034:	004072b3 	.word	0x004072b3
  407038:	004072b3 	.word	0x004072b3
  40703c:	004072b3 	.word	0x004072b3
  407040:	004071ab 	.word	0x004071ab
  407044:	004072b3 	.word	0x004072b3
  407048:	004072b3 	.word	0x004072b3
  40704c:	004072b3 	.word	0x004072b3
  407050:	004072b3 	.word	0x004072b3
  407054:	00407293 	.word	0x00407293
  407058:	004072b3 	.word	0x004072b3
  40705c:	004072b3 	.word	0x004072b3
  407060:	004072b3 	.word	0x004072b3
  407064:	004072b3 	.word	0x004072b3
  407068:	004072b3 	.word	0x004072b3
  40706c:	004072b3 	.word	0x004072b3
  407070:	004071d7 	.word	0x004071d7
  407074:	004072b3 	.word	0x004072b3
  407078:	00407203 	.word	0x00407203
  40707c:	004072b3 	.word	0x004072b3
  407080:	00407233 	.word	0x00407233
  407084:	004072b3 	.word	0x004072b3
  407088:	00407263 	.word	0x00407263
        {
            case MBUS_REG_SEC:
				#ifndef DS3231_USE_RTOS_API
					DSSetSecs(BOARD_TWI, mbusBuff[regAddr]);
  40708c:	78fb      	ldrb	r3, [r7, #3]
  40708e:	005b      	lsls	r3, r3, #1
  407090:	687a      	ldr	r2, [r7, #4]
  407092:	4413      	add	r3, r2
  407094:	881b      	ldrh	r3, [r3, #0]
  407096:	b2db      	uxtb	r3, r3
  407098:	4619      	mov	r1, r3
  40709a:	488d      	ldr	r0, [pc, #564]	; (4072d0 <WriteMbusRegs+0x2fc>)
  40709c:	4b8d      	ldr	r3, [pc, #564]	; (4072d4 <WriteMbusRegs+0x300>)
  40709e:	4798      	blx	r3
				#else
					DSSetSecsTo(twiPort, mbusBuff[regAddr],50);
				#endif
                break;
  4070a0:	e108      	b.n	4072b4 <WriteMbusRegs+0x2e0>
            case MBUS_REG_MIN:
				#ifndef DS3231_USE_RTOS_API
					DSSetMins(BOARD_TWI, mbusBuff[regAddr]);
  4070a2:	78fb      	ldrb	r3, [r7, #3]
  4070a4:	005b      	lsls	r3, r3, #1
  4070a6:	687a      	ldr	r2, [r7, #4]
  4070a8:	4413      	add	r3, r2
  4070aa:	881b      	ldrh	r3, [r3, #0]
  4070ac:	b2db      	uxtb	r3, r3
  4070ae:	4619      	mov	r1, r3
  4070b0:	4887      	ldr	r0, [pc, #540]	; (4072d0 <WriteMbusRegs+0x2fc>)
  4070b2:	4b89      	ldr	r3, [pc, #548]	; (4072d8 <WriteMbusRegs+0x304>)
  4070b4:	4798      	blx	r3
				#else
					DSSetMinsTo(twiPort, mbusBuff[regAddr],50);
				#endif
                break;
  4070b6:	e0fd      	b.n	4072b4 <WriteMbusRegs+0x2e0>
            case MBUS_REG_HRS:
				#ifndef DS3231_USE_RTOS_API
					DSSetHrs(BOARD_TWI, mbusBuff[regAddr]);
  4070b8:	78fb      	ldrb	r3, [r7, #3]
  4070ba:	005b      	lsls	r3, r3, #1
  4070bc:	687a      	ldr	r2, [r7, #4]
  4070be:	4413      	add	r3, r2
  4070c0:	881b      	ldrh	r3, [r3, #0]
  4070c2:	b2db      	uxtb	r3, r3
  4070c4:	4619      	mov	r1, r3
  4070c6:	4882      	ldr	r0, [pc, #520]	; (4072d0 <WriteMbusRegs+0x2fc>)
  4070c8:	4b84      	ldr	r3, [pc, #528]	; (4072dc <WriteMbusRegs+0x308>)
  4070ca:	4798      	blx	r3
				#else
					DSSetHrsTo(twiPort, mbusBuff[regAddr],50);
				#endif
                break;
  4070cc:	e0f2      	b.n	4072b4 <WriteMbusRegs+0x2e0>
            case MBUS_REG_DAY:
				#ifndef DS3231_USE_RTOS_API
					DSSetDay(BOARD_TWI, mbusBuff[regAddr]);
  4070ce:	78fb      	ldrb	r3, [r7, #3]
  4070d0:	005b      	lsls	r3, r3, #1
  4070d2:	687a      	ldr	r2, [r7, #4]
  4070d4:	4413      	add	r3, r2
  4070d6:	881b      	ldrh	r3, [r3, #0]
  4070d8:	b2db      	uxtb	r3, r3
  4070da:	4619      	mov	r1, r3
  4070dc:	487c      	ldr	r0, [pc, #496]	; (4072d0 <WriteMbusRegs+0x2fc>)
  4070de:	4b80      	ldr	r3, [pc, #512]	; (4072e0 <WriteMbusRegs+0x30c>)
  4070e0:	4798      	blx	r3
				#else
					DSSetDayTo(twiPort, mbusBuff[regAddr],50);
				#endif
                break;
  4070e2:	e0e7      	b.n	4072b4 <WriteMbusRegs+0x2e0>
            case MBUS_REG_DD:
				#ifndef DS3231_USE_RTOS_API
					DSSetDate(BOARD_TWI, mbusBuff[regAddr]);
  4070e4:	78fb      	ldrb	r3, [r7, #3]
  4070e6:	005b      	lsls	r3, r3, #1
  4070e8:	687a      	ldr	r2, [r7, #4]
  4070ea:	4413      	add	r3, r2
  4070ec:	881b      	ldrh	r3, [r3, #0]
  4070ee:	b2db      	uxtb	r3, r3
  4070f0:	4619      	mov	r1, r3
  4070f2:	4877      	ldr	r0, [pc, #476]	; (4072d0 <WriteMbusRegs+0x2fc>)
  4070f4:	4b7b      	ldr	r3, [pc, #492]	; (4072e4 <WriteMbusRegs+0x310>)
  4070f6:	4798      	blx	r3
				#else
					DSSetDateTo(twiPort, mbusBuff[regAddr],50);
				#endif
                break;
  4070f8:	e0dc      	b.n	4072b4 <WriteMbusRegs+0x2e0>
            case MBUS_REG_MM:
				#ifndef DS3231_USE_RTOS_API
					DSSetMonth(BOARD_TWI, mbusBuff[regAddr]);
  4070fa:	78fb      	ldrb	r3, [r7, #3]
  4070fc:	005b      	lsls	r3, r3, #1
  4070fe:	687a      	ldr	r2, [r7, #4]
  407100:	4413      	add	r3, r2
  407102:	881b      	ldrh	r3, [r3, #0]
  407104:	b2db      	uxtb	r3, r3
  407106:	4619      	mov	r1, r3
  407108:	4871      	ldr	r0, [pc, #452]	; (4072d0 <WriteMbusRegs+0x2fc>)
  40710a:	4b77      	ldr	r3, [pc, #476]	; (4072e8 <WriteMbusRegs+0x314>)
  40710c:	4798      	blx	r3
				#else
					DSSetMonthTo(twiPort, mbusBuff[regAddr],50);
				#endif
                break;
  40710e:	e0d1      	b.n	4072b4 <WriteMbusRegs+0x2e0>
            case MBUS_REG_YY:
				#ifndef DS3231_USE_RTOS_API
					DSSetYear(BOARD_TWI, mbusBuff[regAddr]);
  407110:	78fb      	ldrb	r3, [r7, #3]
  407112:	005b      	lsls	r3, r3, #1
  407114:	687a      	ldr	r2, [r7, #4]
  407116:	4413      	add	r3, r2
  407118:	881b      	ldrh	r3, [r3, #0]
  40711a:	b2db      	uxtb	r3, r3
  40711c:	4619      	mov	r1, r3
  40711e:	486c      	ldr	r0, [pc, #432]	; (4072d0 <WriteMbusRegs+0x2fc>)
  407120:	4b72      	ldr	r3, [pc, #456]	; (4072ec <WriteMbusRegs+0x318>)
  407122:	4798      	blx	r3
				#else
					DSSetYearTo(twiPort, mbusBuff[regAddr],50);
				#endif
                break;
  407124:	e0c6      	b.n	4072b4 <WriteMbusRegs+0x2e0>
            case MBUS_REG_LATH:
                ptr = (uint16_t*)&lat;
  407126:	4b72      	ldr	r3, [pc, #456]	; (4072f0 <WriteMbusRegs+0x31c>)
  407128:	60fb      	str	r3, [r7, #12]
                ptr[1] = mBusRegs[MBUS_REG_LATH];
  40712a:	68fb      	ldr	r3, [r7, #12]
  40712c:	3302      	adds	r3, #2
  40712e:	4a71      	ldr	r2, [pc, #452]	; (4072f4 <WriteMbusRegs+0x320>)
  407130:	8a52      	ldrh	r2, [r2, #18]
  407132:	801a      	strh	r2, [r3, #0]
                ptr[0] = mBusRegs[MBUS_REG_LATL];
  407134:	4b6f      	ldr	r3, [pc, #444]	; (4072f4 <WriteMbusRegs+0x320>)
  407136:	8a1a      	ldrh	r2, [r3, #16]
  407138:	68fb      	ldr	r3, [r7, #12]
  40713a:	801a      	strh	r2, [r3, #0]
				/* Update EEPROM */
				ptr8 = (uint8_t *)&lat;
  40713c:	4b6c      	ldr	r3, [pc, #432]	; (4072f0 <WriteMbusRegs+0x31c>)
  40713e:	60bb      	str	r3, [r7, #8]
				WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_LAT0, ptr8, 4);
  407140:	2304      	movs	r3, #4
  407142:	9300      	str	r3, [sp, #0]
  407144:	68bb      	ldr	r3, [r7, #8]
  407146:	2200      	movs	r2, #0
  407148:	2150      	movs	r1, #80	; 0x50
  40714a:	4861      	ldr	r0, [pc, #388]	; (4072d0 <WriteMbusRegs+0x2fc>)
  40714c:	4c6a      	ldr	r4, [pc, #424]	; (4072f8 <WriteMbusRegs+0x324>)
  40714e:	47a0      	blx	r4
                break;
  407150:	e0b0      	b.n	4072b4 <WriteMbusRegs+0x2e0>
            case MBUS_REG_LONH:
                ptr = (uint16_t*)&lon;
  407152:	4b6a      	ldr	r3, [pc, #424]	; (4072fc <WriteMbusRegs+0x328>)
  407154:	60fb      	str	r3, [r7, #12]
                ptr[1] = mBusRegs[MBUS_REG_LONH];
  407156:	68fb      	ldr	r3, [r7, #12]
  407158:	3302      	adds	r3, #2
  40715a:	4a66      	ldr	r2, [pc, #408]	; (4072f4 <WriteMbusRegs+0x320>)
  40715c:	8ad2      	ldrh	r2, [r2, #22]
  40715e:	801a      	strh	r2, [r3, #0]
                ptr[0] = mBusRegs[MBUS_REG_LONL];
  407160:	4b64      	ldr	r3, [pc, #400]	; (4072f4 <WriteMbusRegs+0x320>)
  407162:	8a9a      	ldrh	r2, [r3, #20]
  407164:	68fb      	ldr	r3, [r7, #12]
  407166:	801a      	strh	r2, [r3, #0]
				/* Update EEPROM */
                ptr8 = (uint8_t *)&lon;
  407168:	4b64      	ldr	r3, [pc, #400]	; (4072fc <WriteMbusRegs+0x328>)
  40716a:	60bb      	str	r3, [r7, #8]
                WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_LON0, ptr8, 4);
  40716c:	2304      	movs	r3, #4
  40716e:	9300      	str	r3, [sp, #0]
  407170:	68bb      	ldr	r3, [r7, #8]
  407172:	2204      	movs	r2, #4
  407174:	2150      	movs	r1, #80	; 0x50
  407176:	4856      	ldr	r0, [pc, #344]	; (4072d0 <WriteMbusRegs+0x2fc>)
  407178:	4c5f      	ldr	r4, [pc, #380]	; (4072f8 <WriteMbusRegs+0x324>)
  40717a:	47a0      	blx	r4
                break;
  40717c:	e09a      	b.n	4072b4 <WriteMbusRegs+0x2e0>
            case MBUS_REG_TZH:
                ptr = (uint16_t*)&timeZone;
  40717e:	4b60      	ldr	r3, [pc, #384]	; (407300 <WriteMbusRegs+0x32c>)
  407180:	60fb      	str	r3, [r7, #12]
                ptr[1] = mBusRegs[MBUS_REG_TZH];
  407182:	68fb      	ldr	r3, [r7, #12]
  407184:	3302      	adds	r3, #2
  407186:	4a5b      	ldr	r2, [pc, #364]	; (4072f4 <WriteMbusRegs+0x320>)
  407188:	8b52      	ldrh	r2, [r2, #26]
  40718a:	801a      	strh	r2, [r3, #0]
                ptr[0] = mBusRegs[MBUS_REG_TZL];
  40718c:	4b59      	ldr	r3, [pc, #356]	; (4072f4 <WriteMbusRegs+0x320>)
  40718e:	8b1a      	ldrh	r2, [r3, #24]
  407190:	68fb      	ldr	r3, [r7, #12]
  407192:	801a      	strh	r2, [r3, #0]
                /* Update EEPROM */
				ptr8 = (uint8_t *)&timeZone;
  407194:	4b5a      	ldr	r3, [pc, #360]	; (407300 <WriteMbusRegs+0x32c>)
  407196:	60bb      	str	r3, [r7, #8]
				WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_TZ0, ptr8, 4);
  407198:	2304      	movs	r3, #4
  40719a:	9300      	str	r3, [sp, #0]
  40719c:	68bb      	ldr	r3, [r7, #8]
  40719e:	2208      	movs	r2, #8
  4071a0:	2150      	movs	r1, #80	; 0x50
  4071a2:	484b      	ldr	r0, [pc, #300]	; (4072d0 <WriteMbusRegs+0x2fc>)
  4071a4:	4c54      	ldr	r4, [pc, #336]	; (4072f8 <WriteMbusRegs+0x324>)
  4071a6:	47a0      	blx	r4
                break;
  4071a8:	e084      	b.n	4072b4 <WriteMbusRegs+0x2e0>
            case MBUS_REG_PNLRNGH:
                ptr = (uint16_t*)&pvAngleRng;
  4071aa:	4b56      	ldr	r3, [pc, #344]	; (407304 <WriteMbusRegs+0x330>)
  4071ac:	60fb      	str	r3, [r7, #12]
                ptr[1] = mBusRegs[MBUS_REG_PNLRNGH];
  4071ae:	68fb      	ldr	r3, [r7, #12]
  4071b0:	3302      	adds	r3, #2
  4071b2:	4a50      	ldr	r2, [pc, #320]	; (4072f4 <WriteMbusRegs+0x320>)
  4071b4:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
  4071b6:	801a      	strh	r2, [r3, #0]
                ptr[0] = mBusRegs[MBUS_REG_PNLRNGL];
  4071b8:	4b4e      	ldr	r3, [pc, #312]	; (4072f4 <WriteMbusRegs+0x320>)
  4071ba:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
  4071bc:	68fb      	ldr	r3, [r7, #12]
  4071be:	801a      	strh	r2, [r3, #0]
                /* Update EEPROM */
				ptr8 = (uint8_t *)&pvAngleRng;
  4071c0:	4b50      	ldr	r3, [pc, #320]	; (407304 <WriteMbusRegs+0x330>)
  4071c2:	60bb      	str	r3, [r7, #8]
				WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_PNLRNG0, ptr8, 4);
  4071c4:	2304      	movs	r3, #4
  4071c6:	9300      	str	r3, [sp, #0]
  4071c8:	68bb      	ldr	r3, [r7, #8]
  4071ca:	2214      	movs	r2, #20
  4071cc:	2150      	movs	r1, #80	; 0x50
  4071ce:	4840      	ldr	r0, [pc, #256]	; (4072d0 <WriteMbusRegs+0x2fc>)
  4071d0:	4c49      	ldr	r4, [pc, #292]	; (4072f8 <WriteMbusRegs+0x324>)
  4071d2:	47a0      	blx	r4
                break;
  4071d4:	e06e      	b.n	4072b4 <WriteMbusRegs+0x2e0>
            case MBUS_REG_DISTH:
                ptr = (uint16_t*)&dist;
  4071d6:	4b4c      	ldr	r3, [pc, #304]	; (407308 <WriteMbusRegs+0x334>)
  4071d8:	60fb      	str	r3, [r7, #12]
                ptr[1] = mBusRegs[MBUS_REG_DISTH];
  4071da:	68fb      	ldr	r3, [r7, #12]
  4071dc:	3302      	adds	r3, #2
  4071de:	4a45      	ldr	r2, [pc, #276]	; (4072f4 <WriteMbusRegs+0x320>)
  4071e0:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
  4071e2:	801a      	strh	r2, [r3, #0]
                ptr[0] = mBusRegs[MBUS_REG_DISTL];
  4071e4:	4b43      	ldr	r3, [pc, #268]	; (4072f4 <WriteMbusRegs+0x320>)
  4071e6:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
  4071e8:	68fb      	ldr	r3, [r7, #12]
  4071ea:	801a      	strh	r2, [r3, #0]
                /* Update EEPROM */
				ptr8 = (uint8_t *)&dist;
  4071ec:	4b46      	ldr	r3, [pc, #280]	; (407308 <WriteMbusRegs+0x334>)
  4071ee:	60bb      	str	r3, [r7, #8]
				WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_DIST0, ptr8, 4);
  4071f0:	2304      	movs	r3, #4
  4071f2:	9300      	str	r3, [sp, #0]
  4071f4:	68bb      	ldr	r3, [r7, #8]
  4071f6:	220c      	movs	r2, #12
  4071f8:	2150      	movs	r1, #80	; 0x50
  4071fa:	4835      	ldr	r0, [pc, #212]	; (4072d0 <WriteMbusRegs+0x2fc>)
  4071fc:	4c3e      	ldr	r4, [pc, #248]	; (4072f8 <WriteMbusRegs+0x324>)
  4071fe:	47a0      	blx	r4
                break;
  407200:	e058      	b.n	4072b4 <WriteMbusRegs+0x2e0>
            case MBUS_REG_WIDTHH:
                ptr = (uint16_t*)&width;
  407202:	4b42      	ldr	r3, [pc, #264]	; (40730c <WriteMbusRegs+0x338>)
  407204:	60fb      	str	r3, [r7, #12]
                ptr[1] = mBusRegs[MBUS_REG_WIDTHH];
  407206:	68fb      	ldr	r3, [r7, #12]
  407208:	3302      	adds	r3, #2
  40720a:	4a3a      	ldr	r2, [pc, #232]	; (4072f4 <WriteMbusRegs+0x320>)
  40720c:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
  407210:	801a      	strh	r2, [r3, #0]
                ptr[0] = mBusRegs[MBUS_REG_WIDTHL];
  407212:	4b38      	ldr	r3, [pc, #224]	; (4072f4 <WriteMbusRegs+0x320>)
  407214:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
  407218:	68fb      	ldr	r3, [r7, #12]
  40721a:	801a      	strh	r2, [r3, #0]
                /* Update EEPROM */
				ptr8 = (uint8_t *)&width;
  40721c:	4b3b      	ldr	r3, [pc, #236]	; (40730c <WriteMbusRegs+0x338>)
  40721e:	60bb      	str	r3, [r7, #8]
                WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_WIDTH0, ptr8, 4);
  407220:	2304      	movs	r3, #4
  407222:	9300      	str	r3, [sp, #0]
  407224:	68bb      	ldr	r3, [r7, #8]
  407226:	2210      	movs	r2, #16
  407228:	2150      	movs	r1, #80	; 0x50
  40722a:	4829      	ldr	r0, [pc, #164]	; (4072d0 <WriteMbusRegs+0x2fc>)
  40722c:	4c32      	ldr	r4, [pc, #200]	; (4072f8 <WriteMbusRegs+0x324>)
  40722e:	47a0      	blx	r4
                break;
  407230:	e040      	b.n	4072b4 <WriteMbusRegs+0x2e0>
			case MBUS_REG_BKPARAM1H:
				ptr = (uint16_t*)&bkTrkParam1;
  407232:	4b37      	ldr	r3, [pc, #220]	; (407310 <WriteMbusRegs+0x33c>)
  407234:	60fb      	str	r3, [r7, #12]
				ptr[1] = mBusRegs[MBUS_REG_BKPARAM1H];
  407236:	68fb      	ldr	r3, [r7, #12]
  407238:	3302      	adds	r3, #2
  40723a:	4a2e      	ldr	r2, [pc, #184]	; (4072f4 <WriteMbusRegs+0x320>)
  40723c:	f8b2 2046 	ldrh.w	r2, [r2, #70]	; 0x46
  407240:	801a      	strh	r2, [r3, #0]
				ptr[0] = mBusRegs[MBUS_REG_BKPARAM1L];
  407242:	4b2c      	ldr	r3, [pc, #176]	; (4072f4 <WriteMbusRegs+0x320>)
  407244:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
  407248:	68fb      	ldr	r3, [r7, #12]
  40724a:	801a      	strh	r2, [r3, #0]
				/* Update EEPROM */
				ptr8 = (uint8_t *)&bkTrkParam1;
  40724c:	4b30      	ldr	r3, [pc, #192]	; (407310 <WriteMbusRegs+0x33c>)
  40724e:	60bb      	str	r3, [r7, #8]
				WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_BKPARAM10, ptr8, 4);
  407250:	2304      	movs	r3, #4
  407252:	9300      	str	r3, [sp, #0]
  407254:	68bb      	ldr	r3, [r7, #8]
  407256:	2218      	movs	r2, #24
  407258:	2150      	movs	r1, #80	; 0x50
  40725a:	481d      	ldr	r0, [pc, #116]	; (4072d0 <WriteMbusRegs+0x2fc>)
  40725c:	4c26      	ldr	r4, [pc, #152]	; (4072f8 <WriteMbusRegs+0x324>)
  40725e:	47a0      	blx	r4
				break;
  407260:	e028      	b.n	4072b4 <WriteMbusRegs+0x2e0>
			case MBUS_REG_BKPARAM2H:
				ptr = (uint16_t*)&bkTrkParam2;
  407262:	4b2c      	ldr	r3, [pc, #176]	; (407314 <WriteMbusRegs+0x340>)
  407264:	60fb      	str	r3, [r7, #12]
				ptr[1] = mBusRegs[MBUS_REG_BKPARAM2H];
  407266:	68fb      	ldr	r3, [r7, #12]
  407268:	3302      	adds	r3, #2
  40726a:	4a22      	ldr	r2, [pc, #136]	; (4072f4 <WriteMbusRegs+0x320>)
  40726c:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
  407270:	801a      	strh	r2, [r3, #0]
				ptr[0] = mBusRegs[MBUS_REG_BKPARAM2L];
  407272:	4b20      	ldr	r3, [pc, #128]	; (4072f4 <WriteMbusRegs+0x320>)
  407274:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
  407278:	68fb      	ldr	r3, [r7, #12]
  40727a:	801a      	strh	r2, [r3, #0]
				/* Update EEPROM */
				ptr8 = (uint8_t *)&bkTrkParam2;
  40727c:	4b25      	ldr	r3, [pc, #148]	; (407314 <WriteMbusRegs+0x340>)
  40727e:	60bb      	str	r3, [r7, #8]
				WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_BKPARAM20, ptr8, 4);
  407280:	2304      	movs	r3, #4
  407282:	9300      	str	r3, [sp, #0]
  407284:	68bb      	ldr	r3, [r7, #8]
  407286:	221c      	movs	r2, #28
  407288:	2150      	movs	r1, #80	; 0x50
  40728a:	4811      	ldr	r0, [pc, #68]	; (4072d0 <WriteMbusRegs+0x2fc>)
  40728c:	4c1a      	ldr	r4, [pc, #104]	; (4072f8 <WriteMbusRegs+0x324>)
  40728e:	47a0      	blx	r4
				break;
  407290:	e010      	b.n	4072b4 <WriteMbusRegs+0x2e0>
            case MBUS_REG_OPMODE:
                mBusRegs[MBUS_REG_MOTON] = 0;
  407292:	4b18      	ldr	r3, [pc, #96]	; (4072f4 <WriteMbusRegs+0x320>)
  407294:	2200      	movs	r2, #0
  407296:	869a      	strh	r2, [r3, #52]	; 0x34
                minCtr = 0;
  407298:	4b1f      	ldr	r3, [pc, #124]	; (407318 <WriteMbusRegs+0x344>)
  40729a:	2200      	movs	r2, #0
  40729c:	701a      	strb	r2, [r3, #0]
                /* Turn Motor Off */
				#ifndef MOTOR_CTRL_A4955
					gpio_set_pin_low(PIN_MOTOR_RST_IDX);
				#else
					gpio_set_pin_low(PIN_MOTOR_SLP_IDX);
  40729e:	2022      	movs	r0, #34	; 0x22
  4072a0:	4b1e      	ldr	r3, [pc, #120]	; (40731c <WriteMbusRegs+0x348>)
  4072a2:	4798      	blx	r3
					gpio_set_pin_low(PIN_MOTOR_IN1_IDX);
  4072a4:	2020      	movs	r0, #32
  4072a6:	4b1d      	ldr	r3, [pc, #116]	; (40731c <WriteMbusRegs+0x348>)
  4072a8:	4798      	blx	r3
					gpio_set_pin_low(PIN_MOTOR_IN2_IDX);
  4072aa:	2021      	movs	r0, #33	; 0x21
  4072ac:	4b1b      	ldr	r3, [pc, #108]	; (40731c <WriteMbusRegs+0x348>)
  4072ae:	4798      	blx	r3
				#endif
                break;
  4072b0:	e000      	b.n	4072b4 <WriteMbusRegs+0x2e0>
            default:
                break;
  4072b2:	bf00      	nop
        }    
        regAddr++;
  4072b4:	78fb      	ldrb	r3, [r7, #3]
  4072b6:	3301      	adds	r3, #1
  4072b8:	70fb      	strb	r3, [r7, #3]
        len--;
  4072ba:	78bb      	ldrb	r3, [r7, #2]
  4072bc:	3b01      	subs	r3, #1
  4072be:	70bb      	strb	r3, [r7, #2]
void WriteMbusRegs(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len)
{
    uint16_t *ptr;
	uint8_t *ptr8;
    
    while(len)
  4072c0:	78bb      	ldrb	r3, [r7, #2]
  4072c2:	2b00      	cmp	r3, #0
  4072c4:	f47f ae8f 	bne.w	406fe6 <WriteMbusRegs+0x12>
                break;
        }    
        regAddr++;
        len--;
    }
}
  4072c8:	bf00      	nop
  4072ca:	3714      	adds	r7, #20
  4072cc:	46bd      	mov	sp, r7
  4072ce:	bd90      	pop	{r4, r7, pc}
  4072d0:	40018000 	.word	0x40018000
  4072d4:	00400349 	.word	0x00400349
  4072d8:	0040036d 	.word	0x0040036d
  4072dc:	00400391 	.word	0x00400391
  4072e0:	00400415 	.word	0x00400415
  4072e4:	00400439 	.word	0x00400439
  4072e8:	0040045d 	.word	0x0040045d
  4072ec:	00400481 	.word	0x00400481
  4072f0:	2000000c 	.word	0x2000000c
  4072f4:	2000048c 	.word	0x2000048c
  4072f8:	004001cd 	.word	0x004001cd
  4072fc:	20000010 	.word	0x20000010
  407300:	20000014 	.word	0x20000014
  407304:	20000020 	.word	0x20000020
  407308:	20000018 	.word	0x20000018
  40730c:	2000001c 	.word	0x2000001c
  407310:	20000024 	.word	0x20000024
  407314:	20000028 	.word	0x20000028
  407318:	200004d9 	.word	0x200004d9
  40731c:	00404139 	.word	0x00404139

00407320 <SendRespPkt>:

void SendRespPkt(uint8_t *pkt, uint8_t len)
{
  407320:	b580      	push	{r7, lr}
  407322:	b082      	sub	sp, #8
  407324:	af00      	add	r7, sp, #0
  407326:	6078      	str	r0, [r7, #4]
  407328:	460b      	mov	r3, r1
  40732a:	70fb      	strb	r3, [r7, #3]
	usart_enable_tx(RS485_USART);
  40732c:	480c      	ldr	r0, [pc, #48]	; (407360 <SendRespPkt+0x40>)
  40732e:	4b0d      	ldr	r3, [pc, #52]	; (407364 <SendRespPkt+0x44>)
  407330:	4798      	blx	r3
	/* 3.5 Char Wait Time */
	
	/* Start PDC Transfer */
	Rs485PdcStartTx((uint32_t)pkt, len);
  407332:	687b      	ldr	r3, [r7, #4]
  407334:	78fa      	ldrb	r2, [r7, #3]
  407336:	b292      	uxth	r2, r2
  407338:	4611      	mov	r1, r2
  40733a:	4618      	mov	r0, r3
  40733c:	4b0a      	ldr	r3, [pc, #40]	; (407368 <SendRespPkt+0x48>)
  40733e:	4798      	blx	r3

	/* Wait till tx completes */
	while(!Rs485PdcGetTxStatus())
  407340:	e002      	b.n	407348 <SendRespPkt+0x28>
		vTaskDelay(10 / portTICK_RATE_MS);
  407342:	2002      	movs	r0, #2
  407344:	4b09      	ldr	r3, [pc, #36]	; (40736c <SendRespPkt+0x4c>)
  407346:	4798      	blx	r3
	
	/* Start PDC Transfer */
	Rs485PdcStartTx((uint32_t)pkt, len);

	/* Wait till tx completes */
	while(!Rs485PdcGetTxStatus())
  407348:	4b09      	ldr	r3, [pc, #36]	; (407370 <SendRespPkt+0x50>)
  40734a:	4798      	blx	r3
  40734c:	4603      	mov	r3, r0
  40734e:	2b00      	cmp	r3, #0
  407350:	d0f7      	beq.n	407342 <SendRespPkt+0x22>
		vTaskDelay(10 / portTICK_RATE_MS);

	/* 3.5 Char Wait Time */

	usart_disable_tx(RS485_USART);
  407352:	4803      	ldr	r0, [pc, #12]	; (407360 <SendRespPkt+0x40>)
  407354:	4b07      	ldr	r3, [pc, #28]	; (407374 <SendRespPkt+0x54>)
  407356:	4798      	blx	r3
}
  407358:	bf00      	nop
  40735a:	3708      	adds	r7, #8
  40735c:	46bd      	mov	sp, r7
  40735e:	bd80      	pop	{r7, pc}
  407360:	40028000 	.word	0x40028000
  407364:	004037a1 	.word	0x004037a1
  407368:	004029d5 	.word	0x004029d5
  40736c:	00405d75 	.word	0x00405d75
  407370:	00402a85 	.word	0x00402a85
  407374:	004037b9 	.word	0x004037b9

00407378 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  407378:	b480      	push	{r7}
  40737a:	b083      	sub	sp, #12
  40737c:	af00      	add	r7, sp, #0
  40737e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  407380:	687b      	ldr	r3, [r7, #4]
  407382:	2b07      	cmp	r3, #7
  407384:	d825      	bhi.n	4073d2 <osc_get_rate+0x5a>
  407386:	a201      	add	r2, pc, #4	; (adr r2, 40738c <osc_get_rate+0x14>)
  407388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40738c:	004073ad 	.word	0x004073ad
  407390:	004073b3 	.word	0x004073b3
  407394:	004073b9 	.word	0x004073b9
  407398:	004073bf 	.word	0x004073bf
  40739c:	004073c3 	.word	0x004073c3
  4073a0:	004073c7 	.word	0x004073c7
  4073a4:	004073cb 	.word	0x004073cb
  4073a8:	004073cf 	.word	0x004073cf
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4073ac:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4073b0:	e010      	b.n	4073d4 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4073b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4073b6:	e00d      	b.n	4073d4 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4073b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4073bc:	e00a      	b.n	4073d4 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4073be:	4b08      	ldr	r3, [pc, #32]	; (4073e0 <osc_get_rate+0x68>)
  4073c0:	e008      	b.n	4073d4 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4073c2:	4b08      	ldr	r3, [pc, #32]	; (4073e4 <osc_get_rate+0x6c>)
  4073c4:	e006      	b.n	4073d4 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4073c6:	4b08      	ldr	r3, [pc, #32]	; (4073e8 <osc_get_rate+0x70>)
  4073c8:	e004      	b.n	4073d4 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4073ca:	4b07      	ldr	r3, [pc, #28]	; (4073e8 <osc_get_rate+0x70>)
  4073cc:	e002      	b.n	4073d4 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4073ce:	4b06      	ldr	r3, [pc, #24]	; (4073e8 <osc_get_rate+0x70>)
  4073d0:	e000      	b.n	4073d4 <osc_get_rate+0x5c>
	}

	return 0;
  4073d2:	2300      	movs	r3, #0
}
  4073d4:	4618      	mov	r0, r3
  4073d6:	370c      	adds	r7, #12
  4073d8:	46bd      	mov	sp, r7
  4073da:	bc80      	pop	{r7}
  4073dc:	4770      	bx	lr
  4073de:	bf00      	nop
  4073e0:	003d0900 	.word	0x003d0900
  4073e4:	007a1200 	.word	0x007a1200
  4073e8:	00b71b00 	.word	0x00b71b00

004073ec <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4073ec:	b580      	push	{r7, lr}
  4073ee:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4073f0:	2006      	movs	r0, #6
  4073f2:	4b04      	ldr	r3, [pc, #16]	; (407404 <sysclk_get_main_hz+0x18>)
  4073f4:	4798      	blx	r3
  4073f6:	4602      	mov	r2, r0
  4073f8:	4613      	mov	r3, r2
  4073fa:	009b      	lsls	r3, r3, #2
  4073fc:	4413      	add	r3, r2
  4073fe:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  407400:	4618      	mov	r0, r3
  407402:	bd80      	pop	{r7, pc}
  407404:	00407379 	.word	0x00407379

00407408 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  407408:	b580      	push	{r7, lr}
  40740a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40740c:	4b02      	ldr	r3, [pc, #8]	; (407418 <sysclk_get_cpu_hz+0x10>)
  40740e:	4798      	blx	r3
  407410:	4603      	mov	r3, r0
  407412:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  407414:	4618      	mov	r0, r3
  407416:	bd80      	pop	{r7, pc}
  407418:	004073ed 	.word	0x004073ed

0040741c <main>:
/*	*** Updates ***

*/

int main (void)
{
  40741c:	b590      	push	{r4, r7, lr}
  40741e:	b085      	sub	sp, #20
  407420:	af04      	add	r7, sp, #16
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
  407422:	4b1a      	ldr	r3, [pc, #104]	; (40748c <main+0x70>)
  407424:	4798      	blx	r3
	/* Initialize all peripherals */
	board_init();
  407426:	4b1a      	ldr	r3, [pc, #104]	; (407490 <main+0x74>)
  407428:	4798      	blx	r3
	delay_init(sysclk_get_cpu_hz());
	
	vInitPeripherals();
  40742a:	4b1a      	ldr	r3, [pc, #104]	; (407494 <main+0x78>)
  40742c:	4798      	blx	r3

	/* Enable global interrupts. */   
    
//     xTaskCreate(vCCTask, "Cc", 100, NULL, 2, NULL);
    xTaskCreate(vPvTrackerTask, (const signed char *)"Pv", 300, NULL, 1, NULL);
  40742e:	2300      	movs	r3, #0
  407430:	9303      	str	r3, [sp, #12]
  407432:	2300      	movs	r3, #0
  407434:	9302      	str	r3, [sp, #8]
  407436:	2300      	movs	r3, #0
  407438:	9301      	str	r3, [sp, #4]
  40743a:	2301      	movs	r3, #1
  40743c:	9300      	str	r3, [sp, #0]
  40743e:	2300      	movs	r3, #0
  407440:	f44f 7296 	mov.w	r2, #300	; 0x12c
  407444:	4914      	ldr	r1, [pc, #80]	; (407498 <main+0x7c>)
  407446:	4815      	ldr	r0, [pc, #84]	; (40749c <main+0x80>)
  407448:	4c15      	ldr	r4, [pc, #84]	; (4074a0 <main+0x84>)
  40744a:	47a0      	blx	r4
    xTaskCreate(vCommTask, (const signed char *)"Comm", 512, NULL, 1, NULL);
  40744c:	2300      	movs	r3, #0
  40744e:	9303      	str	r3, [sp, #12]
  407450:	2300      	movs	r3, #0
  407452:	9302      	str	r3, [sp, #8]
  407454:	2300      	movs	r3, #0
  407456:	9301      	str	r3, [sp, #4]
  407458:	2301      	movs	r3, #1
  40745a:	9300      	str	r3, [sp, #0]
  40745c:	2300      	movs	r3, #0
  40745e:	f44f 7200 	mov.w	r2, #512	; 0x200
  407462:	4910      	ldr	r1, [pc, #64]	; (4074a4 <main+0x88>)
  407464:	4810      	ldr	r0, [pc, #64]	; (4074a8 <main+0x8c>)
  407466:	4c0e      	ldr	r4, [pc, #56]	; (4074a0 <main+0x84>)
  407468:	47a0      	blx	r4
	xTaskCreate(vBlinkTask, (const signed char *)"Blinky", 100, NULL, 1, NULL);
  40746a:	2300      	movs	r3, #0
  40746c:	9303      	str	r3, [sp, #12]
  40746e:	2300      	movs	r3, #0
  407470:	9302      	str	r3, [sp, #8]
  407472:	2300      	movs	r3, #0
  407474:	9301      	str	r3, [sp, #4]
  407476:	2301      	movs	r3, #1
  407478:	9300      	str	r3, [sp, #0]
  40747a:	2300      	movs	r3, #0
  40747c:	2264      	movs	r2, #100	; 0x64
  40747e:	490b      	ldr	r1, [pc, #44]	; (4074ac <main+0x90>)
  407480:	480b      	ldr	r0, [pc, #44]	; (4074b0 <main+0x94>)
  407482:	4c07      	ldr	r4, [pc, #28]	; (4074a0 <main+0x84>)
  407484:	47a0      	blx	r4
    
    /* Start Watchdog Timer */
        
    vTaskStartScheduler();
  407486:	4b0b      	ldr	r3, [pc, #44]	; (4074b4 <main+0x98>)
  407488:	4798      	blx	r3
     
	for( ;; );
  40748a:	e7fe      	b.n	40748a <main+0x6e>
  40748c:	00403da5 	.word	0x00403da5
  407490:	004039d5 	.word	0x004039d5
  407494:	004074dd 	.word	0x004074dd
  407498:	0040b628 	.word	0x0040b628
  40749c:	00400d4d 	.word	0x00400d4d
  4074a0:	00405bbd 	.word	0x00405bbd
  4074a4:	0040b62c 	.word	0x0040b62c
  4074a8:	00406e65 	.word	0x00406e65
  4074ac:	0040b634 	.word	0x0040b634
  4074b0:	00407619 	.word	0x00407619
  4074b4:	00405ddd 	.word	0x00405ddd

004074b8 <vApplicationStackOverflowHook>:
}

void vApplicationStackOverflowHook(xTaskHandle pxTask, char *pcTaskName )
{
  4074b8:	b580      	push	{r7, lr}
  4074ba:	b082      	sub	sp, #8
  4074bc:	af00      	add	r7, sp, #0
  4074be:	6078      	str	r0, [r7, #4]
  4074c0:	6039      	str	r1, [r7, #0]
	/* The stack space has been execeeded for a task, considering allocating more. */
	taskDISABLE_INTERRUPTS();
  4074c2:	4b01      	ldr	r3, [pc, #4]	; (4074c8 <vApplicationStackOverflowHook+0x10>)
  4074c4:	4798      	blx	r3
	for( ;; );
  4074c6:	e7fe      	b.n	4074c6 <vApplicationStackOverflowHook+0xe>
  4074c8:	00405085 	.word	0x00405085

004074cc <vApplicationMallocFailedHook>:
}

void vApplicationMallocFailedHook( void )
{
  4074cc:	b580      	push	{r7, lr}
  4074ce:	af00      	add	r7, sp, #0
	/* The heap space has been execeeded. */
	taskDISABLE_INTERRUPTS();
  4074d0:	4b01      	ldr	r3, [pc, #4]	; (4074d8 <vApplicationMallocFailedHook+0xc>)
  4074d2:	4798      	blx	r3
	for( ;; );
  4074d4:	e7fe      	b.n	4074d4 <vApplicationMallocFailedHook+0x8>
  4074d6:	bf00      	nop
  4074d8:	00405085 	.word	0x00405085

004074dc <vInitPeripherals>:
}

void vInitPeripherals( void )
{
  4074dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4074e0:	b087      	sub	sp, #28
  4074e2:	af00      	add	r7, sp, #0
	#if defined(DEBUG_EN) || defined(LOG_EN)
		ConsoleInit();
	#endif
	
	gpio_set_pin_low(PIN_LDOEN_IDX);
  4074e4:	2001      	movs	r0, #1
  4074e6:	4b45      	ldr	r3, [pc, #276]	; (4075fc <vInitPeripherals+0x120>)
  4074e8:	4798      	blx	r3
	delay_ms(500);
  4074ea:	4b45      	ldr	r3, [pc, #276]	; (407600 <vInitPeripherals+0x124>)
  4074ec:	4798      	blx	r3
  4074ee:	4603      	mov	r3, r0
  4074f0:	4619      	mov	r1, r3
  4074f2:	f04f 0200 	mov.w	r2, #0
  4074f6:	460b      	mov	r3, r1
  4074f8:	4614      	mov	r4, r2
  4074fa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
  4074fe:	ea4b 7b93 	orr.w	fp, fp, r3, lsr #30
  407502:	ea4f 0a83 	mov.w	sl, r3, lsl #2
  407506:	4653      	mov	r3, sl
  407508:	465c      	mov	r4, fp
  40750a:	ea4f 1944 	mov.w	r9, r4, lsl #5
  40750e:	ea49 69d3 	orr.w	r9, r9, r3, lsr #27
  407512:	ea4f 1843 	mov.w	r8, r3, lsl #5
  407516:	ebb8 0803 	subs.w	r8, r8, r3
  40751a:	eb69 0904 	sbc.w	r9, r9, r4
  40751e:	eb18 0801 	adds.w	r8, r8, r1
  407522:	eb49 0902 	adc.w	r9, r9, r2
  407526:	ea4f 0389 	mov.w	r3, r9, lsl #2
  40752a:	617b      	str	r3, [r7, #20]
  40752c:	697b      	ldr	r3, [r7, #20]
  40752e:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
  407532:	617b      	str	r3, [r7, #20]
  407534:	ea4f 0388 	mov.w	r3, r8, lsl #2
  407538:	613b      	str	r3, [r7, #16]
  40753a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
  40753e:	4641      	mov	r1, r8
  407540:	464a      	mov	r2, r9
  407542:	f243 63af 	movw	r3, #13999	; 0x36af
  407546:	f04f 0400 	mov.w	r4, #0
  40754a:	eb11 0803 	adds.w	r8, r1, r3
  40754e:	eb42 0904 	adc.w	r9, r2, r4
  407552:	4640      	mov	r0, r8
  407554:	4649      	mov	r1, r9
  407556:	4c2b      	ldr	r4, [pc, #172]	; (407604 <vInitPeripherals+0x128>)
  407558:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40755c:	f04f 0300 	mov.w	r3, #0
  407560:	47a0      	blx	r4
  407562:	4603      	mov	r3, r0
  407564:	460c      	mov	r4, r1
  407566:	4618      	mov	r0, r3
  407568:	4b27      	ldr	r3, [pc, #156]	; (407608 <vInitPeripherals+0x12c>)
  40756a:	4798      	blx	r3
	/* Enable LDO */
	gpio_set_pin_high(PIN_LDOEN_IDX);
  40756c:	2001      	movs	r0, #1
  40756e:	4b27      	ldr	r3, [pc, #156]	; (40760c <vInitPeripherals+0x130>)
  407570:	4798      	blx	r3
	delay_ms(1000);
  407572:	4b23      	ldr	r3, [pc, #140]	; (407600 <vInitPeripherals+0x124>)
  407574:	4798      	blx	r3
  407576:	4603      	mov	r3, r0
  407578:	4619      	mov	r1, r3
  40757a:	f04f 0200 	mov.w	r2, #0
  40757e:	460b      	mov	r3, r1
  407580:	4614      	mov	r4, r2
  407582:	00a0      	lsls	r0, r4, #2
  407584:	60f8      	str	r0, [r7, #12]
  407586:	68f8      	ldr	r0, [r7, #12]
  407588:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  40758c:	60f8      	str	r0, [r7, #12]
  40758e:	009b      	lsls	r3, r3, #2
  407590:	60bb      	str	r3, [r7, #8]
  407592:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  407596:	0166      	lsls	r6, r4, #5
  407598:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  40759c:	015d      	lsls	r5, r3, #5
  40759e:	1aed      	subs	r5, r5, r3
  4075a0:	eb66 0604 	sbc.w	r6, r6, r4
  4075a4:	186d      	adds	r5, r5, r1
  4075a6:	eb46 0602 	adc.w	r6, r6, r2
  4075aa:	00f3      	lsls	r3, r6, #3
  4075ac:	607b      	str	r3, [r7, #4]
  4075ae:	687b      	ldr	r3, [r7, #4]
  4075b0:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
  4075b4:	607b      	str	r3, [r7, #4]
  4075b6:	00eb      	lsls	r3, r5, #3
  4075b8:	603b      	str	r3, [r7, #0]
  4075ba:	e9d7 5600 	ldrd	r5, r6, [r7]
  4075be:	4629      	mov	r1, r5
  4075c0:	4632      	mov	r2, r6
  4075c2:	f243 63af 	movw	r3, #13999	; 0x36af
  4075c6:	f04f 0400 	mov.w	r4, #0
  4075ca:	18cd      	adds	r5, r1, r3
  4075cc:	eb42 0604 	adc.w	r6, r2, r4
  4075d0:	4628      	mov	r0, r5
  4075d2:	4631      	mov	r1, r6
  4075d4:	4c0b      	ldr	r4, [pc, #44]	; (407604 <vInitPeripherals+0x128>)
  4075d6:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4075da:	f04f 0300 	mov.w	r3, #0
  4075de:	47a0      	blx	r4
  4075e0:	4603      	mov	r3, r0
  4075e2:	460c      	mov	r4, r1
  4075e4:	4618      	mov	r0, r3
  4075e6:	4b08      	ldr	r3, [pc, #32]	; (407608 <vInitPeripherals+0x12c>)
  4075e8:	4798      	blx	r3

	/* Initialize all RTOS vars */
	//vCCInit();
	vPvTrackerInit();
  4075ea:	4b09      	ldr	r3, [pc, #36]	; (407610 <vInitPeripherals+0x134>)
  4075ec:	4798      	blx	r3
	vCommInit();
  4075ee:	4b09      	ldr	r3, [pc, #36]	; (407614 <vInitPeripherals+0x138>)
  4075f0:	4798      	blx	r3
}
  4075f2:	bf00      	nop
  4075f4:	371c      	adds	r7, #28
  4075f6:	46bd      	mov	sp, r7
  4075f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4075fc:	00404139 	.word	0x00404139
  407600:	00407409 	.word	0x00407409
  407604:	0040aeb1 	.word	0x0040aeb1
  407608:	20000001 	.word	0x20000001
  40760c:	00404109 	.word	0x00404109
  407610:	00400ddd 	.word	0x00400ddd
  407614:	00406fc5 	.word	0x00406fc5

00407618 <vBlinkTask>:

void vBlinkTask( void *pvParameters )
{
  407618:	b580      	push	{r7, lr}
  40761a:	b082      	sub	sp, #8
  40761c:	af00      	add	r7, sp, #0
  40761e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		gpio_set_pin_high(PIN_DEBUGLED_IDX);
  407620:	2010      	movs	r0, #16
  407622:	4b06      	ldr	r3, [pc, #24]	; (40763c <vBlinkTask+0x24>)
  407624:	4798      	blx	r3
		vTaskDelay(500 / portTICK_RATE_MS);
  407626:	2064      	movs	r0, #100	; 0x64
  407628:	4b05      	ldr	r3, [pc, #20]	; (407640 <vBlinkTask+0x28>)
  40762a:	4798      	blx	r3
		gpio_set_pin_low(PIN_DEBUGLED_IDX);
  40762c:	2010      	movs	r0, #16
  40762e:	4b05      	ldr	r3, [pc, #20]	; (407644 <vBlinkTask+0x2c>)
  407630:	4798      	blx	r3
		vTaskDelay(500 / portTICK_RATE_MS);
  407632:	2064      	movs	r0, #100	; 0x64
  407634:	4b02      	ldr	r3, [pc, #8]	; (407640 <vBlinkTask+0x28>)
  407636:	4798      	blx	r3
	}
  407638:	e7f2      	b.n	407620 <vBlinkTask+0x8>
  40763a:	bf00      	nop
  40763c:	00404109 	.word	0x00404109
  407640:	00405d75 	.word	0x00405d75
  407644:	00404139 	.word	0x00404139

00407648 <cos>:
  407648:	b530      	push	{r4, r5, lr}
  40764a:	4a22      	ldr	r2, [pc, #136]	; (4076d4 <cos+0x8c>)
  40764c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  407650:	4293      	cmp	r3, r2
  407652:	b087      	sub	sp, #28
  407654:	dd1b      	ble.n	40768e <cos+0x46>
  407656:	4a20      	ldr	r2, [pc, #128]	; (4076d8 <cos+0x90>)
  407658:	4293      	cmp	r3, r2
  40765a:	dd05      	ble.n	407668 <cos+0x20>
  40765c:	4602      	mov	r2, r0
  40765e:	460b      	mov	r3, r1
  407660:	f002 fc50 	bl	409f04 <__aeabi_dsub>
  407664:	b007      	add	sp, #28
  407666:	bd30      	pop	{r4, r5, pc}
  407668:	aa02      	add	r2, sp, #8
  40766a:	f000 ff09 	bl	408480 <__ieee754_rem_pio2>
  40766e:	f000 0303 	and.w	r3, r0, #3
  407672:	2b01      	cmp	r3, #1
  407674:	d01a      	beq.n	4076ac <cos+0x64>
  407676:	2b02      	cmp	r3, #2
  407678:	d00f      	beq.n	40769a <cos+0x52>
  40767a:	b31b      	cbz	r3, 4076c4 <cos+0x7c>
  40767c:	2401      	movs	r4, #1
  40767e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  407682:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407686:	9400      	str	r4, [sp, #0]
  407688:	f001 fefe 	bl	409488 <__kernel_sin>
  40768c:	e7ea      	b.n	407664 <cos+0x1c>
  40768e:	2200      	movs	r2, #0
  407690:	2300      	movs	r3, #0
  407692:	f001 f9d9 	bl	408a48 <__kernel_cos>
  407696:	b007      	add	sp, #28
  407698:	bd30      	pop	{r4, r5, pc}
  40769a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40769e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4076a2:	f001 f9d1 	bl	408a48 <__kernel_cos>
  4076a6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4076aa:	e7db      	b.n	407664 <cos+0x1c>
  4076ac:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  4076b0:	9300      	str	r3, [sp, #0]
  4076b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4076b6:	4622      	mov	r2, r4
  4076b8:	462b      	mov	r3, r5
  4076ba:	f001 fee5 	bl	409488 <__kernel_sin>
  4076be:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4076c2:	e7cf      	b.n	407664 <cos+0x1c>
  4076c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4076c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4076cc:	f001 f9bc 	bl	408a48 <__kernel_cos>
  4076d0:	e7c8      	b.n	407664 <cos+0x1c>
  4076d2:	bf00      	nop
  4076d4:	3fe921fb 	.word	0x3fe921fb
  4076d8:	7fefffff 	.word	0x7fefffff

004076dc <sin>:
  4076dc:	b530      	push	{r4, r5, lr}
  4076de:	4a1f      	ldr	r2, [pc, #124]	; (40775c <sin+0x80>)
  4076e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  4076e4:	4293      	cmp	r3, r2
  4076e6:	b087      	sub	sp, #28
  4076e8:	dd1b      	ble.n	407722 <sin+0x46>
  4076ea:	4a1d      	ldr	r2, [pc, #116]	; (407760 <sin+0x84>)
  4076ec:	4293      	cmp	r3, r2
  4076ee:	dd05      	ble.n	4076fc <sin+0x20>
  4076f0:	4602      	mov	r2, r0
  4076f2:	460b      	mov	r3, r1
  4076f4:	f002 fc06 	bl	409f04 <__aeabi_dsub>
  4076f8:	b007      	add	sp, #28
  4076fa:	bd30      	pop	{r4, r5, pc}
  4076fc:	aa02      	add	r2, sp, #8
  4076fe:	f000 febf 	bl	408480 <__ieee754_rem_pio2>
  407702:	f000 0003 	and.w	r0, r0, #3
  407706:	2801      	cmp	r0, #1
  407708:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40770c:	d01a      	beq.n	407744 <sin+0x68>
  40770e:	2802      	cmp	r0, #2
  407710:	d00f      	beq.n	407732 <sin+0x56>
  407712:	b1e0      	cbz	r0, 40774e <sin+0x72>
  407714:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407718:	f001 f996 	bl	408a48 <__kernel_cos>
  40771c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  407720:	e7ea      	b.n	4076f8 <sin+0x1c>
  407722:	2300      	movs	r3, #0
  407724:	9300      	str	r3, [sp, #0]
  407726:	2200      	movs	r2, #0
  407728:	2300      	movs	r3, #0
  40772a:	f001 fead 	bl	409488 <__kernel_sin>
  40772e:	b007      	add	sp, #28
  407730:	bd30      	pop	{r4, r5, pc}
  407732:	2401      	movs	r4, #1
  407734:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407738:	9400      	str	r4, [sp, #0]
  40773a:	f001 fea5 	bl	409488 <__kernel_sin>
  40773e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  407742:	e7d9      	b.n	4076f8 <sin+0x1c>
  407744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407748:	f001 f97e 	bl	408a48 <__kernel_cos>
  40774c:	e7d4      	b.n	4076f8 <sin+0x1c>
  40774e:	2401      	movs	r4, #1
  407750:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407754:	9400      	str	r4, [sp, #0]
  407756:	f001 fe97 	bl	409488 <__kernel_sin>
  40775a:	e7cd      	b.n	4076f8 <sin+0x1c>
  40775c:	3fe921fb 	.word	0x3fe921fb
  407760:	7fefffff 	.word	0x7fefffff

00407764 <tan>:
  407764:	b530      	push	{r4, r5, lr}
  407766:	4a14      	ldr	r2, [pc, #80]	; (4077b8 <tan+0x54>)
  407768:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  40776c:	4293      	cmp	r3, r2
  40776e:	b087      	sub	sp, #28
  407770:	dd19      	ble.n	4077a6 <tan+0x42>
  407772:	4a12      	ldr	r2, [pc, #72]	; (4077bc <tan+0x58>)
  407774:	4293      	cmp	r3, r2
  407776:	dd05      	ble.n	407784 <tan+0x20>
  407778:	4602      	mov	r2, r0
  40777a:	460b      	mov	r3, r1
  40777c:	f002 fbc2 	bl	409f04 <__aeabi_dsub>
  407780:	b007      	add	sp, #28
  407782:	bd30      	pop	{r4, r5, pc}
  407784:	aa02      	add	r2, sp, #8
  407786:	f000 fe7b 	bl	408480 <__ieee754_rem_pio2>
  40778a:	0044      	lsls	r4, r0, #1
  40778c:	f004 0402 	and.w	r4, r4, #2
  407790:	f1c4 0401 	rsb	r4, r4, #1
  407794:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  407798:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40779c:	9400      	str	r4, [sp, #0]
  40779e:	f001 ff2b 	bl	4095f8 <__kernel_tan>
  4077a2:	b007      	add	sp, #28
  4077a4:	bd30      	pop	{r4, r5, pc}
  4077a6:	2301      	movs	r3, #1
  4077a8:	9300      	str	r3, [sp, #0]
  4077aa:	2200      	movs	r2, #0
  4077ac:	2300      	movs	r3, #0
  4077ae:	f001 ff23 	bl	4095f8 <__kernel_tan>
  4077b2:	b007      	add	sp, #28
  4077b4:	bd30      	pop	{r4, r5, pc}
  4077b6:	bf00      	nop
  4077b8:	3fe921fb 	.word	0x3fe921fb
  4077bc:	7fefffff 	.word	0x7fefffff

004077c0 <acos>:
  4077c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4077c4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 40786c <acos+0xac>
  4077c8:	b08b      	sub	sp, #44	; 0x2c
  4077ca:	4604      	mov	r4, r0
  4077cc:	460d      	mov	r5, r1
  4077ce:	f000 f907 	bl	4079e0 <__ieee754_acos>
  4077d2:	f998 3000 	ldrsb.w	r3, [r8]
  4077d6:	3301      	adds	r3, #1
  4077d8:	4606      	mov	r6, r0
  4077da:	460f      	mov	r7, r1
  4077dc:	d02e      	beq.n	40783c <acos+0x7c>
  4077de:	4622      	mov	r2, r4
  4077e0:	462b      	mov	r3, r5
  4077e2:	4620      	mov	r0, r4
  4077e4:	4629      	mov	r1, r5
  4077e6:	f002 ffdb 	bl	40a7a0 <__aeabi_dcmpun>
  4077ea:	4681      	mov	r9, r0
  4077ec:	bb30      	cbnz	r0, 40783c <acos+0x7c>
  4077ee:	4620      	mov	r0, r4
  4077f0:	4629      	mov	r1, r5
  4077f2:	f002 fa67 	bl	409cc4 <fabs>
  4077f6:	2200      	movs	r2, #0
  4077f8:	4b19      	ldr	r3, [pc, #100]	; (407860 <acos+0xa0>)
  4077fa:	f002 ffc7 	bl	40a78c <__aeabi_dcmpgt>
  4077fe:	b1e8      	cbz	r0, 40783c <acos+0x7c>
  407800:	4b18      	ldr	r3, [pc, #96]	; (407864 <acos+0xa4>)
  407802:	4819      	ldr	r0, [pc, #100]	; (407868 <acos+0xa8>)
  407804:	f8cd 9020 	str.w	r9, [sp, #32]
  407808:	2201      	movs	r2, #1
  40780a:	e88d 000c 	stmia.w	sp, {r2, r3}
  40780e:	e9cd 4504 	strd	r4, r5, [sp, #16]
  407812:	e9cd 4502 	strd	r4, r5, [sp, #8]
  407816:	f002 fae5 	bl	409de4 <nan>
  40781a:	f998 3000 	ldrsb.w	r3, [r8]
  40781e:	2b02      	cmp	r3, #2
  407820:	e9cd 0106 	strd	r0, r1, [sp, #24]
  407824:	d00f      	beq.n	407846 <acos+0x86>
  407826:	4668      	mov	r0, sp
  407828:	f002 fada 	bl	409de0 <matherr>
  40782c:	b158      	cbz	r0, 407846 <acos+0x86>
  40782e:	9b08      	ldr	r3, [sp, #32]
  407830:	b983      	cbnz	r3, 407854 <acos+0x94>
  407832:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  407836:	b00b      	add	sp, #44	; 0x2c
  407838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40783c:	4630      	mov	r0, r6
  40783e:	4639      	mov	r1, r7
  407840:	b00b      	add	sp, #44	; 0x2c
  407842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407846:	f003 fcbf 	bl	40b1c8 <__errno>
  40784a:	2321      	movs	r3, #33	; 0x21
  40784c:	6003      	str	r3, [r0, #0]
  40784e:	9b08      	ldr	r3, [sp, #32]
  407850:	2b00      	cmp	r3, #0
  407852:	d0ee      	beq.n	407832 <acos+0x72>
  407854:	f003 fcb8 	bl	40b1c8 <__errno>
  407858:	9b08      	ldr	r3, [sp, #32]
  40785a:	6003      	str	r3, [r0, #0]
  40785c:	e7e9      	b.n	407832 <acos+0x72>
  40785e:	bf00      	nop
  407860:	3ff00000 	.word	0x3ff00000
  407864:	0040b63c 	.word	0x0040b63c
  407868:	0040b648 	.word	0x0040b648
  40786c:	2000003d 	.word	0x2000003d

00407870 <asin>:
  407870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407874:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 40791c <asin+0xac>
  407878:	b08b      	sub	sp, #44	; 0x2c
  40787a:	4604      	mov	r4, r0
  40787c:	460d      	mov	r5, r1
  40787e:	f000 fb03 	bl	407e88 <__ieee754_asin>
  407882:	f998 3000 	ldrsb.w	r3, [r8]
  407886:	3301      	adds	r3, #1
  407888:	4606      	mov	r6, r0
  40788a:	460f      	mov	r7, r1
  40788c:	d02e      	beq.n	4078ec <asin+0x7c>
  40788e:	4622      	mov	r2, r4
  407890:	462b      	mov	r3, r5
  407892:	4620      	mov	r0, r4
  407894:	4629      	mov	r1, r5
  407896:	f002 ff83 	bl	40a7a0 <__aeabi_dcmpun>
  40789a:	4681      	mov	r9, r0
  40789c:	bb30      	cbnz	r0, 4078ec <asin+0x7c>
  40789e:	4620      	mov	r0, r4
  4078a0:	4629      	mov	r1, r5
  4078a2:	f002 fa0f 	bl	409cc4 <fabs>
  4078a6:	2200      	movs	r2, #0
  4078a8:	4b19      	ldr	r3, [pc, #100]	; (407910 <asin+0xa0>)
  4078aa:	f002 ff6f 	bl	40a78c <__aeabi_dcmpgt>
  4078ae:	b1e8      	cbz	r0, 4078ec <asin+0x7c>
  4078b0:	4b18      	ldr	r3, [pc, #96]	; (407914 <asin+0xa4>)
  4078b2:	4819      	ldr	r0, [pc, #100]	; (407918 <asin+0xa8>)
  4078b4:	f8cd 9020 	str.w	r9, [sp, #32]
  4078b8:	2201      	movs	r2, #1
  4078ba:	e88d 000c 	stmia.w	sp, {r2, r3}
  4078be:	e9cd 4504 	strd	r4, r5, [sp, #16]
  4078c2:	e9cd 4502 	strd	r4, r5, [sp, #8]
  4078c6:	f002 fa8d 	bl	409de4 <nan>
  4078ca:	f998 3000 	ldrsb.w	r3, [r8]
  4078ce:	2b02      	cmp	r3, #2
  4078d0:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4078d4:	d00f      	beq.n	4078f6 <asin+0x86>
  4078d6:	4668      	mov	r0, sp
  4078d8:	f002 fa82 	bl	409de0 <matherr>
  4078dc:	b158      	cbz	r0, 4078f6 <asin+0x86>
  4078de:	9b08      	ldr	r3, [sp, #32]
  4078e0:	b983      	cbnz	r3, 407904 <asin+0x94>
  4078e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4078e6:	b00b      	add	sp, #44	; 0x2c
  4078e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4078ec:	4630      	mov	r0, r6
  4078ee:	4639      	mov	r1, r7
  4078f0:	b00b      	add	sp, #44	; 0x2c
  4078f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4078f6:	f003 fc67 	bl	40b1c8 <__errno>
  4078fa:	2321      	movs	r3, #33	; 0x21
  4078fc:	6003      	str	r3, [r0, #0]
  4078fe:	9b08      	ldr	r3, [sp, #32]
  407900:	2b00      	cmp	r3, #0
  407902:	d0ee      	beq.n	4078e2 <asin+0x72>
  407904:	f003 fc60 	bl	40b1c8 <__errno>
  407908:	9b08      	ldr	r3, [sp, #32]
  40790a:	6003      	str	r3, [r0, #0]
  40790c:	e7e9      	b.n	4078e2 <asin+0x72>
  40790e:	bf00      	nop
  407910:	3ff00000 	.word	0x3ff00000
  407914:	0040b644 	.word	0x0040b644
  407918:	0040b648 	.word	0x0040b648
  40791c:	2000003d 	.word	0x2000003d

00407920 <atan2>:
  407920:	f000 bce2 	b.w	4082e8 <__ieee754_atan2>

00407924 <sqrt>:
  407924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407928:	b08b      	sub	sp, #44	; 0x2c
  40792a:	4604      	mov	r4, r0
  40792c:	460d      	mov	r5, r1
  40792e:	f000 ffc9 	bl	4088c4 <__ieee754_sqrt>
  407932:	4b28      	ldr	r3, [pc, #160]	; (4079d4 <sqrt+0xb0>)
  407934:	f993 a000 	ldrsb.w	sl, [r3]
  407938:	f1ba 3fff 	cmp.w	sl, #4294967295
  40793c:	4606      	mov	r6, r0
  40793e:	460f      	mov	r7, r1
  407940:	d012      	beq.n	407968 <sqrt+0x44>
  407942:	4622      	mov	r2, r4
  407944:	462b      	mov	r3, r5
  407946:	4620      	mov	r0, r4
  407948:	4629      	mov	r1, r5
  40794a:	f002 ff29 	bl	40a7a0 <__aeabi_dcmpun>
  40794e:	4683      	mov	fp, r0
  407950:	b950      	cbnz	r0, 407968 <sqrt+0x44>
  407952:	f04f 0800 	mov.w	r8, #0
  407956:	f04f 0900 	mov.w	r9, #0
  40795a:	4642      	mov	r2, r8
  40795c:	464b      	mov	r3, r9
  40795e:	4620      	mov	r0, r4
  407960:	4629      	mov	r1, r5
  407962:	f002 fef5 	bl	40a750 <__aeabi_dcmplt>
  407966:	b920      	cbnz	r0, 407972 <sqrt+0x4e>
  407968:	4630      	mov	r0, r6
  40796a:	4639      	mov	r1, r7
  40796c:	b00b      	add	sp, #44	; 0x2c
  40796e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407972:	4b19      	ldr	r3, [pc, #100]	; (4079d8 <sqrt+0xb4>)
  407974:	f8cd b020 	str.w	fp, [sp, #32]
  407978:	2201      	movs	r2, #1
  40797a:	e9cd 4504 	strd	r4, r5, [sp, #16]
  40797e:	e9cd 4502 	strd	r4, r5, [sp, #8]
  407982:	e88d 000c 	stmia.w	sp, {r2, r3}
  407986:	f1ba 0f00 	cmp.w	sl, #0
  40798a:	d015      	beq.n	4079b8 <sqrt+0x94>
  40798c:	4642      	mov	r2, r8
  40798e:	464b      	mov	r3, r9
  407990:	4640      	mov	r0, r8
  407992:	4649      	mov	r1, r9
  407994:	f002 fd94 	bl	40a4c0 <__aeabi_ddiv>
  407998:	f1ba 0f02 	cmp.w	sl, #2
  40799c:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4079a0:	d10c      	bne.n	4079bc <sqrt+0x98>
  4079a2:	f003 fc11 	bl	40b1c8 <__errno>
  4079a6:	2321      	movs	r3, #33	; 0x21
  4079a8:	6003      	str	r3, [r0, #0]
  4079aa:	9b08      	ldr	r3, [sp, #32]
  4079ac:	b963      	cbnz	r3, 4079c8 <sqrt+0xa4>
  4079ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4079b2:	b00b      	add	sp, #44	; 0x2c
  4079b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4079b8:	e9cd 8906 	strd	r8, r9, [sp, #24]
  4079bc:	4668      	mov	r0, sp
  4079be:	f002 fa0f 	bl	409de0 <matherr>
  4079c2:	2800      	cmp	r0, #0
  4079c4:	d1f1      	bne.n	4079aa <sqrt+0x86>
  4079c6:	e7ec      	b.n	4079a2 <sqrt+0x7e>
  4079c8:	f003 fbfe 	bl	40b1c8 <__errno>
  4079cc:	9b08      	ldr	r3, [sp, #32]
  4079ce:	6003      	str	r3, [r0, #0]
  4079d0:	e7ed      	b.n	4079ae <sqrt+0x8a>
  4079d2:	bf00      	nop
  4079d4:	2000003d 	.word	0x2000003d
  4079d8:	0040b64c 	.word	0x0040b64c
  4079dc:	00000000 	.word	0x00000000

004079e0 <__ieee754_acos>:
  4079e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4079e4:	4ec4      	ldr	r6, [pc, #784]	; (407cf8 <__ieee754_acos+0x318>)
  4079e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  4079ea:	42b3      	cmp	r3, r6
  4079ec:	460c      	mov	r4, r1
  4079ee:	4605      	mov	r5, r0
  4079f0:	dd0d      	ble.n	407a0e <__ieee754_acos+0x2e>
  4079f2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
  4079f6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
  4079fa:	4303      	orrs	r3, r0
  4079fc:	f040 80b9 	bne.w	407b72 <__ieee754_acos+0x192>
  407a00:	2900      	cmp	r1, #0
  407a02:	f340 8140 	ble.w	407c86 <__ieee754_acos+0x2a6>
  407a06:	2000      	movs	r0, #0
  407a08:	2100      	movs	r1, #0
  407a0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407a0e:	4ebb      	ldr	r6, [pc, #748]	; (407cfc <__ieee754_acos+0x31c>)
  407a10:	42b3      	cmp	r3, r6
  407a12:	f340 80a6 	ble.w	407b62 <__ieee754_acos+0x182>
  407a16:	2900      	cmp	r1, #0
  407a18:	f2c0 8178 	blt.w	407d0c <__ieee754_acos+0x32c>
  407a1c:	4602      	mov	r2, r0
  407a1e:	460b      	mov	r3, r1
  407a20:	2000      	movs	r0, #0
  407a22:	49b7      	ldr	r1, [pc, #732]	; (407d00 <__ieee754_acos+0x320>)
  407a24:	f002 fa6e 	bl	409f04 <__aeabi_dsub>
  407a28:	2200      	movs	r2, #0
  407a2a:	4bb6      	ldr	r3, [pc, #728]	; (407d04 <__ieee754_acos+0x324>)
  407a2c:	f002 fc1e 	bl	40a26c <__aeabi_dmul>
  407a30:	4604      	mov	r4, r0
  407a32:	460d      	mov	r5, r1
  407a34:	f000 ff46 	bl	4088c4 <__ieee754_sqrt>
  407a38:	a395      	add	r3, pc, #596	; (adr r3, 407c90 <__ieee754_acos+0x2b0>)
  407a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
  407a3e:	4689      	mov	r9, r1
  407a40:	4680      	mov	r8, r0
  407a42:	4629      	mov	r1, r5
  407a44:	4620      	mov	r0, r4
  407a46:	f002 fc11 	bl	40a26c <__aeabi_dmul>
  407a4a:	a393      	add	r3, pc, #588	; (adr r3, 407c98 <__ieee754_acos+0x2b8>)
  407a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
  407a50:	f002 fa5a 	bl	409f08 <__adddf3>
  407a54:	4622      	mov	r2, r4
  407a56:	462b      	mov	r3, r5
  407a58:	f002 fc08 	bl	40a26c <__aeabi_dmul>
  407a5c:	a390      	add	r3, pc, #576	; (adr r3, 407ca0 <__ieee754_acos+0x2c0>)
  407a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
  407a62:	f002 fa4f 	bl	409f04 <__aeabi_dsub>
  407a66:	4622      	mov	r2, r4
  407a68:	462b      	mov	r3, r5
  407a6a:	f002 fbff 	bl	40a26c <__aeabi_dmul>
  407a6e:	a38e      	add	r3, pc, #568	; (adr r3, 407ca8 <__ieee754_acos+0x2c8>)
  407a70:	e9d3 2300 	ldrd	r2, r3, [r3]
  407a74:	f002 fa48 	bl	409f08 <__adddf3>
  407a78:	4622      	mov	r2, r4
  407a7a:	462b      	mov	r3, r5
  407a7c:	f002 fbf6 	bl	40a26c <__aeabi_dmul>
  407a80:	a38b      	add	r3, pc, #556	; (adr r3, 407cb0 <__ieee754_acos+0x2d0>)
  407a82:	e9d3 2300 	ldrd	r2, r3, [r3]
  407a86:	f002 fa3d 	bl	409f04 <__aeabi_dsub>
  407a8a:	4622      	mov	r2, r4
  407a8c:	462b      	mov	r3, r5
  407a8e:	f002 fbed 	bl	40a26c <__aeabi_dmul>
  407a92:	a389      	add	r3, pc, #548	; (adr r3, 407cb8 <__ieee754_acos+0x2d8>)
  407a94:	e9d3 2300 	ldrd	r2, r3, [r3]
  407a98:	f002 fa36 	bl	409f08 <__adddf3>
  407a9c:	4622      	mov	r2, r4
  407a9e:	462b      	mov	r3, r5
  407aa0:	f002 fbe4 	bl	40a26c <__aeabi_dmul>
  407aa4:	a386      	add	r3, pc, #536	; (adr r3, 407cc0 <__ieee754_acos+0x2e0>)
  407aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
  407aaa:	4682      	mov	sl, r0
  407aac:	468b      	mov	fp, r1
  407aae:	4620      	mov	r0, r4
  407ab0:	4629      	mov	r1, r5
  407ab2:	f002 fbdb 	bl	40a26c <__aeabi_dmul>
  407ab6:	a384      	add	r3, pc, #528	; (adr r3, 407cc8 <__ieee754_acos+0x2e8>)
  407ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
  407abc:	f002 fa22 	bl	409f04 <__aeabi_dsub>
  407ac0:	4622      	mov	r2, r4
  407ac2:	462b      	mov	r3, r5
  407ac4:	f002 fbd2 	bl	40a26c <__aeabi_dmul>
  407ac8:	a381      	add	r3, pc, #516	; (adr r3, 407cd0 <__ieee754_acos+0x2f0>)
  407aca:	e9d3 2300 	ldrd	r2, r3, [r3]
  407ace:	f002 fa1b 	bl	409f08 <__adddf3>
  407ad2:	4622      	mov	r2, r4
  407ad4:	462b      	mov	r3, r5
  407ad6:	f002 fbc9 	bl	40a26c <__aeabi_dmul>
  407ada:	a37f      	add	r3, pc, #508	; (adr r3, 407cd8 <__ieee754_acos+0x2f8>)
  407adc:	e9d3 2300 	ldrd	r2, r3, [r3]
  407ae0:	f002 fa10 	bl	409f04 <__aeabi_dsub>
  407ae4:	4622      	mov	r2, r4
  407ae6:	462b      	mov	r3, r5
  407ae8:	f002 fbc0 	bl	40a26c <__aeabi_dmul>
  407aec:	2200      	movs	r2, #0
  407aee:	4b84      	ldr	r3, [pc, #528]	; (407d00 <__ieee754_acos+0x320>)
  407af0:	f002 fa0a 	bl	409f08 <__adddf3>
  407af4:	4602      	mov	r2, r0
  407af6:	460b      	mov	r3, r1
  407af8:	4650      	mov	r0, sl
  407afa:	4659      	mov	r1, fp
  407afc:	f002 fce0 	bl	40a4c0 <__aeabi_ddiv>
  407b00:	4642      	mov	r2, r8
  407b02:	464b      	mov	r3, r9
  407b04:	f002 fbb2 	bl	40a26c <__aeabi_dmul>
  407b08:	2600      	movs	r6, #0
  407b0a:	4682      	mov	sl, r0
  407b0c:	468b      	mov	fp, r1
  407b0e:	4632      	mov	r2, r6
  407b10:	464b      	mov	r3, r9
  407b12:	4630      	mov	r0, r6
  407b14:	4649      	mov	r1, r9
  407b16:	f002 fba9 	bl	40a26c <__aeabi_dmul>
  407b1a:	4602      	mov	r2, r0
  407b1c:	460b      	mov	r3, r1
  407b1e:	4620      	mov	r0, r4
  407b20:	4629      	mov	r1, r5
  407b22:	f002 f9ef 	bl	409f04 <__aeabi_dsub>
  407b26:	4632      	mov	r2, r6
  407b28:	4604      	mov	r4, r0
  407b2a:	460d      	mov	r5, r1
  407b2c:	464b      	mov	r3, r9
  407b2e:	4640      	mov	r0, r8
  407b30:	4649      	mov	r1, r9
  407b32:	f002 f9e9 	bl	409f08 <__adddf3>
  407b36:	4602      	mov	r2, r0
  407b38:	460b      	mov	r3, r1
  407b3a:	4620      	mov	r0, r4
  407b3c:	4629      	mov	r1, r5
  407b3e:	f002 fcbf 	bl	40a4c0 <__aeabi_ddiv>
  407b42:	4602      	mov	r2, r0
  407b44:	460b      	mov	r3, r1
  407b46:	4650      	mov	r0, sl
  407b48:	4659      	mov	r1, fp
  407b4a:	f002 f9dd 	bl	409f08 <__adddf3>
  407b4e:	4632      	mov	r2, r6
  407b50:	464b      	mov	r3, r9
  407b52:	f002 f9d9 	bl	409f08 <__adddf3>
  407b56:	4602      	mov	r2, r0
  407b58:	460b      	mov	r3, r1
  407b5a:	f002 f9d5 	bl	409f08 <__adddf3>
  407b5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407b62:	4a69      	ldr	r2, [pc, #420]	; (407d08 <__ieee754_acos+0x328>)
  407b64:	4293      	cmp	r3, r2
  407b66:	dc0e      	bgt.n	407b86 <__ieee754_acos+0x1a6>
  407b68:	a15d      	add	r1, pc, #372	; (adr r1, 407ce0 <__ieee754_acos+0x300>)
  407b6a:	e9d1 0100 	ldrd	r0, r1, [r1]
  407b6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407b72:	4602      	mov	r2, r0
  407b74:	460b      	mov	r3, r1
  407b76:	f002 f9c5 	bl	409f04 <__aeabi_dsub>
  407b7a:	4602      	mov	r2, r0
  407b7c:	460b      	mov	r3, r1
  407b7e:	f002 fc9f 	bl	40a4c0 <__aeabi_ddiv>
  407b82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407b86:	4602      	mov	r2, r0
  407b88:	460b      	mov	r3, r1
  407b8a:	f002 fb6f 	bl	40a26c <__aeabi_dmul>
  407b8e:	a340      	add	r3, pc, #256	; (adr r3, 407c90 <__ieee754_acos+0x2b0>)
  407b90:	e9d3 2300 	ldrd	r2, r3, [r3]
  407b94:	4606      	mov	r6, r0
  407b96:	460f      	mov	r7, r1
  407b98:	f002 fb68 	bl	40a26c <__aeabi_dmul>
  407b9c:	a33e      	add	r3, pc, #248	; (adr r3, 407c98 <__ieee754_acos+0x2b8>)
  407b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
  407ba2:	f002 f9b1 	bl	409f08 <__adddf3>
  407ba6:	4632      	mov	r2, r6
  407ba8:	463b      	mov	r3, r7
  407baa:	f002 fb5f 	bl	40a26c <__aeabi_dmul>
  407bae:	a33c      	add	r3, pc, #240	; (adr r3, 407ca0 <__ieee754_acos+0x2c0>)
  407bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
  407bb4:	f002 f9a6 	bl	409f04 <__aeabi_dsub>
  407bb8:	4632      	mov	r2, r6
  407bba:	463b      	mov	r3, r7
  407bbc:	f002 fb56 	bl	40a26c <__aeabi_dmul>
  407bc0:	a339      	add	r3, pc, #228	; (adr r3, 407ca8 <__ieee754_acos+0x2c8>)
  407bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
  407bc6:	f002 f99f 	bl	409f08 <__adddf3>
  407bca:	4632      	mov	r2, r6
  407bcc:	463b      	mov	r3, r7
  407bce:	f002 fb4d 	bl	40a26c <__aeabi_dmul>
  407bd2:	a337      	add	r3, pc, #220	; (adr r3, 407cb0 <__ieee754_acos+0x2d0>)
  407bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
  407bd8:	f002 f994 	bl	409f04 <__aeabi_dsub>
  407bdc:	4632      	mov	r2, r6
  407bde:	463b      	mov	r3, r7
  407be0:	f002 fb44 	bl	40a26c <__aeabi_dmul>
  407be4:	a334      	add	r3, pc, #208	; (adr r3, 407cb8 <__ieee754_acos+0x2d8>)
  407be6:	e9d3 2300 	ldrd	r2, r3, [r3]
  407bea:	f002 f98d 	bl	409f08 <__adddf3>
  407bee:	4632      	mov	r2, r6
  407bf0:	463b      	mov	r3, r7
  407bf2:	f002 fb3b 	bl	40a26c <__aeabi_dmul>
  407bf6:	a332      	add	r3, pc, #200	; (adr r3, 407cc0 <__ieee754_acos+0x2e0>)
  407bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
  407bfc:	4680      	mov	r8, r0
  407bfe:	4689      	mov	r9, r1
  407c00:	4630      	mov	r0, r6
  407c02:	4639      	mov	r1, r7
  407c04:	f002 fb32 	bl	40a26c <__aeabi_dmul>
  407c08:	a32f      	add	r3, pc, #188	; (adr r3, 407cc8 <__ieee754_acos+0x2e8>)
  407c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
  407c0e:	f002 f979 	bl	409f04 <__aeabi_dsub>
  407c12:	4632      	mov	r2, r6
  407c14:	463b      	mov	r3, r7
  407c16:	f002 fb29 	bl	40a26c <__aeabi_dmul>
  407c1a:	a32d      	add	r3, pc, #180	; (adr r3, 407cd0 <__ieee754_acos+0x2f0>)
  407c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
  407c20:	f002 f972 	bl	409f08 <__adddf3>
  407c24:	4632      	mov	r2, r6
  407c26:	463b      	mov	r3, r7
  407c28:	f002 fb20 	bl	40a26c <__aeabi_dmul>
  407c2c:	a32a      	add	r3, pc, #168	; (adr r3, 407cd8 <__ieee754_acos+0x2f8>)
  407c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
  407c32:	f002 f967 	bl	409f04 <__aeabi_dsub>
  407c36:	4632      	mov	r2, r6
  407c38:	463b      	mov	r3, r7
  407c3a:	f002 fb17 	bl	40a26c <__aeabi_dmul>
  407c3e:	2200      	movs	r2, #0
  407c40:	4b2f      	ldr	r3, [pc, #188]	; (407d00 <__ieee754_acos+0x320>)
  407c42:	f002 f961 	bl	409f08 <__adddf3>
  407c46:	4602      	mov	r2, r0
  407c48:	460b      	mov	r3, r1
  407c4a:	4640      	mov	r0, r8
  407c4c:	4649      	mov	r1, r9
  407c4e:	f002 fc37 	bl	40a4c0 <__aeabi_ddiv>
  407c52:	462a      	mov	r2, r5
  407c54:	4623      	mov	r3, r4
  407c56:	f002 fb09 	bl	40a26c <__aeabi_dmul>
  407c5a:	4602      	mov	r2, r0
  407c5c:	460b      	mov	r3, r1
  407c5e:	a122      	add	r1, pc, #136	; (adr r1, 407ce8 <__ieee754_acos+0x308>)
  407c60:	e9d1 0100 	ldrd	r0, r1, [r1]
  407c64:	f002 f94e 	bl	409f04 <__aeabi_dsub>
  407c68:	4602      	mov	r2, r0
  407c6a:	460b      	mov	r3, r1
  407c6c:	4628      	mov	r0, r5
  407c6e:	4621      	mov	r1, r4
  407c70:	f002 f948 	bl	409f04 <__aeabi_dsub>
  407c74:	4602      	mov	r2, r0
  407c76:	460b      	mov	r3, r1
  407c78:	a119      	add	r1, pc, #100	; (adr r1, 407ce0 <__ieee754_acos+0x300>)
  407c7a:	e9d1 0100 	ldrd	r0, r1, [r1]
  407c7e:	f002 f941 	bl	409f04 <__aeabi_dsub>
  407c82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407c86:	a11a      	add	r1, pc, #104	; (adr r1, 407cf0 <__ieee754_acos+0x310>)
  407c88:	e9d1 0100 	ldrd	r0, r1, [r1]
  407c8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407c90:	0dfdf709 	.word	0x0dfdf709
  407c94:	3f023de1 	.word	0x3f023de1
  407c98:	7501b288 	.word	0x7501b288
  407c9c:	3f49efe0 	.word	0x3f49efe0
  407ca0:	b5688f3b 	.word	0xb5688f3b
  407ca4:	3fa48228 	.word	0x3fa48228
  407ca8:	0e884455 	.word	0x0e884455
  407cac:	3fc9c155 	.word	0x3fc9c155
  407cb0:	03eb6f7d 	.word	0x03eb6f7d
  407cb4:	3fd4d612 	.word	0x3fd4d612
  407cb8:	55555555 	.word	0x55555555
  407cbc:	3fc55555 	.word	0x3fc55555
  407cc0:	b12e9282 	.word	0xb12e9282
  407cc4:	3fb3b8c5 	.word	0x3fb3b8c5
  407cc8:	1b8d0159 	.word	0x1b8d0159
  407ccc:	3fe6066c 	.word	0x3fe6066c
  407cd0:	9c598ac8 	.word	0x9c598ac8
  407cd4:	40002ae5 	.word	0x40002ae5
  407cd8:	1c8a2d4b 	.word	0x1c8a2d4b
  407cdc:	40033a27 	.word	0x40033a27
  407ce0:	54442d18 	.word	0x54442d18
  407ce4:	3ff921fb 	.word	0x3ff921fb
  407ce8:	33145c07 	.word	0x33145c07
  407cec:	3c91a626 	.word	0x3c91a626
  407cf0:	54442d18 	.word	0x54442d18
  407cf4:	400921fb 	.word	0x400921fb
  407cf8:	3fefffff 	.word	0x3fefffff
  407cfc:	3fdfffff 	.word	0x3fdfffff
  407d00:	3ff00000 	.word	0x3ff00000
  407d04:	3fe00000 	.word	0x3fe00000
  407d08:	3c600000 	.word	0x3c600000
  407d0c:	2200      	movs	r2, #0
  407d0e:	4b5c      	ldr	r3, [pc, #368]	; (407e80 <__ieee754_acos+0x4a0>)
  407d10:	f002 f8fa 	bl	409f08 <__adddf3>
  407d14:	2200      	movs	r2, #0
  407d16:	4b5b      	ldr	r3, [pc, #364]	; (407e84 <__ieee754_acos+0x4a4>)
  407d18:	f002 faa8 	bl	40a26c <__aeabi_dmul>
  407d1c:	a340      	add	r3, pc, #256	; (adr r3, 407e20 <__ieee754_acos+0x440>)
  407d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
  407d22:	4604      	mov	r4, r0
  407d24:	460d      	mov	r5, r1
  407d26:	f002 faa1 	bl	40a26c <__aeabi_dmul>
  407d2a:	a33f      	add	r3, pc, #252	; (adr r3, 407e28 <__ieee754_acos+0x448>)
  407d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
  407d30:	f002 f8ea 	bl	409f08 <__adddf3>
  407d34:	4622      	mov	r2, r4
  407d36:	462b      	mov	r3, r5
  407d38:	f002 fa98 	bl	40a26c <__aeabi_dmul>
  407d3c:	a33c      	add	r3, pc, #240	; (adr r3, 407e30 <__ieee754_acos+0x450>)
  407d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
  407d42:	f002 f8df 	bl	409f04 <__aeabi_dsub>
  407d46:	4622      	mov	r2, r4
  407d48:	462b      	mov	r3, r5
  407d4a:	f002 fa8f 	bl	40a26c <__aeabi_dmul>
  407d4e:	a33a      	add	r3, pc, #232	; (adr r3, 407e38 <__ieee754_acos+0x458>)
  407d50:	e9d3 2300 	ldrd	r2, r3, [r3]
  407d54:	f002 f8d8 	bl	409f08 <__adddf3>
  407d58:	4622      	mov	r2, r4
  407d5a:	462b      	mov	r3, r5
  407d5c:	f002 fa86 	bl	40a26c <__aeabi_dmul>
  407d60:	a337      	add	r3, pc, #220	; (adr r3, 407e40 <__ieee754_acos+0x460>)
  407d62:	e9d3 2300 	ldrd	r2, r3, [r3]
  407d66:	f002 f8cd 	bl	409f04 <__aeabi_dsub>
  407d6a:	4622      	mov	r2, r4
  407d6c:	462b      	mov	r3, r5
  407d6e:	f002 fa7d 	bl	40a26c <__aeabi_dmul>
  407d72:	a335      	add	r3, pc, #212	; (adr r3, 407e48 <__ieee754_acos+0x468>)
  407d74:	e9d3 2300 	ldrd	r2, r3, [r3]
  407d78:	f002 f8c6 	bl	409f08 <__adddf3>
  407d7c:	4622      	mov	r2, r4
  407d7e:	462b      	mov	r3, r5
  407d80:	f002 fa74 	bl	40a26c <__aeabi_dmul>
  407d84:	4680      	mov	r8, r0
  407d86:	4689      	mov	r9, r1
  407d88:	4620      	mov	r0, r4
  407d8a:	4629      	mov	r1, r5
  407d8c:	f000 fd9a 	bl	4088c4 <__ieee754_sqrt>
  407d90:	a32f      	add	r3, pc, #188	; (adr r3, 407e50 <__ieee754_acos+0x470>)
  407d92:	e9d3 2300 	ldrd	r2, r3, [r3]
  407d96:	4606      	mov	r6, r0
  407d98:	460f      	mov	r7, r1
  407d9a:	4620      	mov	r0, r4
  407d9c:	4629      	mov	r1, r5
  407d9e:	f002 fa65 	bl	40a26c <__aeabi_dmul>
  407da2:	a32d      	add	r3, pc, #180	; (adr r3, 407e58 <__ieee754_acos+0x478>)
  407da4:	e9d3 2300 	ldrd	r2, r3, [r3]
  407da8:	f002 f8ac 	bl	409f04 <__aeabi_dsub>
  407dac:	4622      	mov	r2, r4
  407dae:	462b      	mov	r3, r5
  407db0:	f002 fa5c 	bl	40a26c <__aeabi_dmul>
  407db4:	a32a      	add	r3, pc, #168	; (adr r3, 407e60 <__ieee754_acos+0x480>)
  407db6:	e9d3 2300 	ldrd	r2, r3, [r3]
  407dba:	f002 f8a5 	bl	409f08 <__adddf3>
  407dbe:	4622      	mov	r2, r4
  407dc0:	462b      	mov	r3, r5
  407dc2:	f002 fa53 	bl	40a26c <__aeabi_dmul>
  407dc6:	a328      	add	r3, pc, #160	; (adr r3, 407e68 <__ieee754_acos+0x488>)
  407dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
  407dcc:	f002 f89a 	bl	409f04 <__aeabi_dsub>
  407dd0:	4622      	mov	r2, r4
  407dd2:	462b      	mov	r3, r5
  407dd4:	f002 fa4a 	bl	40a26c <__aeabi_dmul>
  407dd8:	2200      	movs	r2, #0
  407dda:	4b29      	ldr	r3, [pc, #164]	; (407e80 <__ieee754_acos+0x4a0>)
  407ddc:	f002 f894 	bl	409f08 <__adddf3>
  407de0:	4602      	mov	r2, r0
  407de2:	460b      	mov	r3, r1
  407de4:	4640      	mov	r0, r8
  407de6:	4649      	mov	r1, r9
  407de8:	f002 fb6a 	bl	40a4c0 <__aeabi_ddiv>
  407dec:	4632      	mov	r2, r6
  407dee:	463b      	mov	r3, r7
  407df0:	f002 fa3c 	bl	40a26c <__aeabi_dmul>
  407df4:	a31e      	add	r3, pc, #120	; (adr r3, 407e70 <__ieee754_acos+0x490>)
  407df6:	e9d3 2300 	ldrd	r2, r3, [r3]
  407dfa:	f002 f883 	bl	409f04 <__aeabi_dsub>
  407dfe:	4632      	mov	r2, r6
  407e00:	463b      	mov	r3, r7
  407e02:	f002 f881 	bl	409f08 <__adddf3>
  407e06:	4602      	mov	r2, r0
  407e08:	460b      	mov	r3, r1
  407e0a:	f002 f87d 	bl	409f08 <__adddf3>
  407e0e:	4602      	mov	r2, r0
  407e10:	460b      	mov	r3, r1
  407e12:	a119      	add	r1, pc, #100	; (adr r1, 407e78 <__ieee754_acos+0x498>)
  407e14:	e9d1 0100 	ldrd	r0, r1, [r1]
  407e18:	f002 f874 	bl	409f04 <__aeabi_dsub>
  407e1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407e20:	0dfdf709 	.word	0x0dfdf709
  407e24:	3f023de1 	.word	0x3f023de1
  407e28:	7501b288 	.word	0x7501b288
  407e2c:	3f49efe0 	.word	0x3f49efe0
  407e30:	b5688f3b 	.word	0xb5688f3b
  407e34:	3fa48228 	.word	0x3fa48228
  407e38:	0e884455 	.word	0x0e884455
  407e3c:	3fc9c155 	.word	0x3fc9c155
  407e40:	03eb6f7d 	.word	0x03eb6f7d
  407e44:	3fd4d612 	.word	0x3fd4d612
  407e48:	55555555 	.word	0x55555555
  407e4c:	3fc55555 	.word	0x3fc55555
  407e50:	b12e9282 	.word	0xb12e9282
  407e54:	3fb3b8c5 	.word	0x3fb3b8c5
  407e58:	1b8d0159 	.word	0x1b8d0159
  407e5c:	3fe6066c 	.word	0x3fe6066c
  407e60:	9c598ac8 	.word	0x9c598ac8
  407e64:	40002ae5 	.word	0x40002ae5
  407e68:	1c8a2d4b 	.word	0x1c8a2d4b
  407e6c:	40033a27 	.word	0x40033a27
  407e70:	33145c07 	.word	0x33145c07
  407e74:	3c91a626 	.word	0x3c91a626
  407e78:	54442d18 	.word	0x54442d18
  407e7c:	400921fb 	.word	0x400921fb
  407e80:	3ff00000 	.word	0x3ff00000
  407e84:	3fe00000 	.word	0x3fe00000

00407e88 <__ieee754_asin>:
  407e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407e8c:	4bc0      	ldr	r3, [pc, #768]	; (408190 <__ieee754_asin+0x308>)
  407e8e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
  407e92:	4598      	cmp	r8, r3
  407e94:	b084      	sub	sp, #16
  407e96:	460d      	mov	r5, r1
  407e98:	4604      	mov	r4, r0
  407e9a:	dd14      	ble.n	407ec6 <__ieee754_asin+0x3e>
  407e9c:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
  407ea0:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
  407ea4:	4603      	mov	r3, r0
  407ea6:	ea58 0303 	orrs.w	r3, r8, r3
  407eaa:	d023      	beq.n	407ef4 <__ieee754_asin+0x6c>
  407eac:	4602      	mov	r2, r0
  407eae:	460b      	mov	r3, r1
  407eb0:	f002 f828 	bl	409f04 <__aeabi_dsub>
  407eb4:	4602      	mov	r2, r0
  407eb6:	460b      	mov	r3, r1
  407eb8:	f002 fb02 	bl	40a4c0 <__aeabi_ddiv>
  407ebc:	4604      	mov	r4, r0
  407ebe:	4620      	mov	r0, r4
  407ec0:	b004      	add	sp, #16
  407ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407ec6:	4bb3      	ldr	r3, [pc, #716]	; (408194 <__ieee754_asin+0x30c>)
  407ec8:	4598      	cmp	r8, r3
  407eca:	468a      	mov	sl, r1
  407ecc:	dc2b      	bgt.n	407f26 <__ieee754_asin+0x9e>
  407ece:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
  407ed2:	f280 8167 	bge.w	4081a4 <__ieee754_asin+0x31c>
  407ed6:	a392      	add	r3, pc, #584	; (adr r3, 408120 <__ieee754_asin+0x298>)
  407ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
  407edc:	f002 f814 	bl	409f08 <__adddf3>
  407ee0:	2200      	movs	r2, #0
  407ee2:	4bad      	ldr	r3, [pc, #692]	; (408198 <__ieee754_asin+0x310>)
  407ee4:	f002 fc52 	bl	40a78c <__aeabi_dcmpgt>
  407ee8:	b1e8      	cbz	r0, 407f26 <__ieee754_asin+0x9e>
  407eea:	4629      	mov	r1, r5
  407eec:	4620      	mov	r0, r4
  407eee:	b004      	add	sp, #16
  407ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407ef4:	a38c      	add	r3, pc, #560	; (adr r3, 408128 <__ieee754_asin+0x2a0>)
  407ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
  407efa:	f002 f9b7 	bl	40a26c <__aeabi_dmul>
  407efe:	a38c      	add	r3, pc, #560	; (adr r3, 408130 <__ieee754_asin+0x2a8>)
  407f00:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f04:	4606      	mov	r6, r0
  407f06:	460f      	mov	r7, r1
  407f08:	4620      	mov	r0, r4
  407f0a:	4629      	mov	r1, r5
  407f0c:	f002 f9ae 	bl	40a26c <__aeabi_dmul>
  407f10:	4602      	mov	r2, r0
  407f12:	460b      	mov	r3, r1
  407f14:	4630      	mov	r0, r6
  407f16:	4639      	mov	r1, r7
  407f18:	f001 fff6 	bl	409f08 <__adddf3>
  407f1c:	4604      	mov	r4, r0
  407f1e:	4620      	mov	r0, r4
  407f20:	b004      	add	sp, #16
  407f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407f26:	4620      	mov	r0, r4
  407f28:	4629      	mov	r1, r5
  407f2a:	f001 fecb 	bl	409cc4 <fabs>
  407f2e:	4602      	mov	r2, r0
  407f30:	460b      	mov	r3, r1
  407f32:	2000      	movs	r0, #0
  407f34:	4998      	ldr	r1, [pc, #608]	; (408198 <__ieee754_asin+0x310>)
  407f36:	f001 ffe5 	bl	409f04 <__aeabi_dsub>
  407f3a:	2200      	movs	r2, #0
  407f3c:	4b97      	ldr	r3, [pc, #604]	; (40819c <__ieee754_asin+0x314>)
  407f3e:	f002 f995 	bl	40a26c <__aeabi_dmul>
  407f42:	a37d      	add	r3, pc, #500	; (adr r3, 408138 <__ieee754_asin+0x2b0>)
  407f44:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f48:	4604      	mov	r4, r0
  407f4a:	460d      	mov	r5, r1
  407f4c:	f002 f98e 	bl	40a26c <__aeabi_dmul>
  407f50:	a37b      	add	r3, pc, #492	; (adr r3, 408140 <__ieee754_asin+0x2b8>)
  407f52:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f56:	f001 ffd7 	bl	409f08 <__adddf3>
  407f5a:	4622      	mov	r2, r4
  407f5c:	462b      	mov	r3, r5
  407f5e:	f002 f985 	bl	40a26c <__aeabi_dmul>
  407f62:	a379      	add	r3, pc, #484	; (adr r3, 408148 <__ieee754_asin+0x2c0>)
  407f64:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f68:	f001 ffcc 	bl	409f04 <__aeabi_dsub>
  407f6c:	4622      	mov	r2, r4
  407f6e:	462b      	mov	r3, r5
  407f70:	f002 f97c 	bl	40a26c <__aeabi_dmul>
  407f74:	a376      	add	r3, pc, #472	; (adr r3, 408150 <__ieee754_asin+0x2c8>)
  407f76:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f7a:	f001 ffc5 	bl	409f08 <__adddf3>
  407f7e:	4622      	mov	r2, r4
  407f80:	462b      	mov	r3, r5
  407f82:	f002 f973 	bl	40a26c <__aeabi_dmul>
  407f86:	a374      	add	r3, pc, #464	; (adr r3, 408158 <__ieee754_asin+0x2d0>)
  407f88:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f8c:	f001 ffba 	bl	409f04 <__aeabi_dsub>
  407f90:	4622      	mov	r2, r4
  407f92:	462b      	mov	r3, r5
  407f94:	f002 f96a 	bl	40a26c <__aeabi_dmul>
  407f98:	a371      	add	r3, pc, #452	; (adr r3, 408160 <__ieee754_asin+0x2d8>)
  407f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f9e:	f001 ffb3 	bl	409f08 <__adddf3>
  407fa2:	4622      	mov	r2, r4
  407fa4:	462b      	mov	r3, r5
  407fa6:	f002 f961 	bl	40a26c <__aeabi_dmul>
  407faa:	a36f      	add	r3, pc, #444	; (adr r3, 408168 <__ieee754_asin+0x2e0>)
  407fac:	e9d3 2300 	ldrd	r2, r3, [r3]
  407fb0:	e9cd 0100 	strd	r0, r1, [sp]
  407fb4:	4620      	mov	r0, r4
  407fb6:	4629      	mov	r1, r5
  407fb8:	f002 f958 	bl	40a26c <__aeabi_dmul>
  407fbc:	a36c      	add	r3, pc, #432	; (adr r3, 408170 <__ieee754_asin+0x2e8>)
  407fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
  407fc2:	f001 ff9f 	bl	409f04 <__aeabi_dsub>
  407fc6:	4622      	mov	r2, r4
  407fc8:	462b      	mov	r3, r5
  407fca:	f002 f94f 	bl	40a26c <__aeabi_dmul>
  407fce:	a36a      	add	r3, pc, #424	; (adr r3, 408178 <__ieee754_asin+0x2f0>)
  407fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
  407fd4:	f001 ff98 	bl	409f08 <__adddf3>
  407fd8:	4622      	mov	r2, r4
  407fda:	462b      	mov	r3, r5
  407fdc:	f002 f946 	bl	40a26c <__aeabi_dmul>
  407fe0:	a367      	add	r3, pc, #412	; (adr r3, 408180 <__ieee754_asin+0x2f8>)
  407fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
  407fe6:	f001 ff8d 	bl	409f04 <__aeabi_dsub>
  407fea:	4622      	mov	r2, r4
  407fec:	462b      	mov	r3, r5
  407fee:	f002 f93d 	bl	40a26c <__aeabi_dmul>
  407ff2:	4b69      	ldr	r3, [pc, #420]	; (408198 <__ieee754_asin+0x310>)
  407ff4:	2200      	movs	r2, #0
  407ff6:	f001 ff87 	bl	409f08 <__adddf3>
  407ffa:	e9cd 0102 	strd	r0, r1, [sp, #8]
  407ffe:	4620      	mov	r0, r4
  408000:	4629      	mov	r1, r5
  408002:	f000 fc5f 	bl	4088c4 <__ieee754_sqrt>
  408006:	4b66      	ldr	r3, [pc, #408]	; (4081a0 <__ieee754_asin+0x318>)
  408008:	4598      	cmp	r8, r3
  40800a:	4606      	mov	r6, r0
  40800c:	460f      	mov	r7, r1
  40800e:	dc66      	bgt.n	4080de <__ieee754_asin+0x256>
  408010:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408014:	e9dd 0100 	ldrd	r0, r1, [sp]
  408018:	f002 fa52 	bl	40a4c0 <__aeabi_ddiv>
  40801c:	4632      	mov	r2, r6
  40801e:	e9cd 0100 	strd	r0, r1, [sp]
  408022:	463b      	mov	r3, r7
  408024:	4630      	mov	r0, r6
  408026:	4639      	mov	r1, r7
  408028:	f001 ff6e 	bl	409f08 <__adddf3>
  40802c:	4602      	mov	r2, r0
  40802e:	460b      	mov	r3, r1
  408030:	e9dd 0100 	ldrd	r0, r1, [sp]
  408034:	f002 f91a 	bl	40a26c <__aeabi_dmul>
  408038:	f04f 0800 	mov.w	r8, #0
  40803c:	e9cd 0100 	strd	r0, r1, [sp]
  408040:	4642      	mov	r2, r8
  408042:	463b      	mov	r3, r7
  408044:	4640      	mov	r0, r8
  408046:	4639      	mov	r1, r7
  408048:	f002 f910 	bl	40a26c <__aeabi_dmul>
  40804c:	4602      	mov	r2, r0
  40804e:	460b      	mov	r3, r1
  408050:	4620      	mov	r0, r4
  408052:	4629      	mov	r1, r5
  408054:	f001 ff56 	bl	409f04 <__aeabi_dsub>
  408058:	4642      	mov	r2, r8
  40805a:	4604      	mov	r4, r0
  40805c:	460d      	mov	r5, r1
  40805e:	463b      	mov	r3, r7
  408060:	4630      	mov	r0, r6
  408062:	4639      	mov	r1, r7
  408064:	f001 ff50 	bl	409f08 <__adddf3>
  408068:	4602      	mov	r2, r0
  40806a:	460b      	mov	r3, r1
  40806c:	4620      	mov	r0, r4
  40806e:	4629      	mov	r1, r5
  408070:	f002 fa26 	bl	40a4c0 <__aeabi_ddiv>
  408074:	4602      	mov	r2, r0
  408076:	460b      	mov	r3, r1
  408078:	f001 ff46 	bl	409f08 <__adddf3>
  40807c:	4602      	mov	r2, r0
  40807e:	460b      	mov	r3, r1
  408080:	a12b      	add	r1, pc, #172	; (adr r1, 408130 <__ieee754_asin+0x2a8>)
  408082:	e9d1 0100 	ldrd	r0, r1, [r1]
  408086:	f001 ff3d 	bl	409f04 <__aeabi_dsub>
  40808a:	4602      	mov	r2, r0
  40808c:	460b      	mov	r3, r1
  40808e:	e9dd 0100 	ldrd	r0, r1, [sp]
  408092:	f001 ff37 	bl	409f04 <__aeabi_dsub>
  408096:	4642      	mov	r2, r8
  408098:	4604      	mov	r4, r0
  40809a:	460d      	mov	r5, r1
  40809c:	463b      	mov	r3, r7
  40809e:	4640      	mov	r0, r8
  4080a0:	4639      	mov	r1, r7
  4080a2:	f001 ff31 	bl	409f08 <__adddf3>
  4080a6:	4602      	mov	r2, r0
  4080a8:	460b      	mov	r3, r1
  4080aa:	a137      	add	r1, pc, #220	; (adr r1, 408188 <__ieee754_asin+0x300>)
  4080ac:	e9d1 0100 	ldrd	r0, r1, [r1]
  4080b0:	f001 ff28 	bl	409f04 <__aeabi_dsub>
  4080b4:	4602      	mov	r2, r0
  4080b6:	460b      	mov	r3, r1
  4080b8:	4620      	mov	r0, r4
  4080ba:	4629      	mov	r1, r5
  4080bc:	f001 ff22 	bl	409f04 <__aeabi_dsub>
  4080c0:	4602      	mov	r2, r0
  4080c2:	460b      	mov	r3, r1
  4080c4:	a130      	add	r1, pc, #192	; (adr r1, 408188 <__ieee754_asin+0x300>)
  4080c6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4080ca:	f001 ff1b 	bl	409f04 <__aeabi_dsub>
  4080ce:	4604      	mov	r4, r0
  4080d0:	f1ba 0f00 	cmp.w	sl, #0
  4080d4:	f73f aef3 	bgt.w	407ebe <__ieee754_asin+0x36>
  4080d8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4080dc:	e6ef      	b.n	407ebe <__ieee754_asin+0x36>
  4080de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4080e2:	e9dd 0100 	ldrd	r0, r1, [sp]
  4080e6:	f002 f9eb 	bl	40a4c0 <__aeabi_ddiv>
  4080ea:	4632      	mov	r2, r6
  4080ec:	463b      	mov	r3, r7
  4080ee:	f002 f8bd 	bl	40a26c <__aeabi_dmul>
  4080f2:	4632      	mov	r2, r6
  4080f4:	463b      	mov	r3, r7
  4080f6:	f001 ff07 	bl	409f08 <__adddf3>
  4080fa:	4602      	mov	r2, r0
  4080fc:	460b      	mov	r3, r1
  4080fe:	f001 ff03 	bl	409f08 <__adddf3>
  408102:	a30b      	add	r3, pc, #44	; (adr r3, 408130 <__ieee754_asin+0x2a8>)
  408104:	e9d3 2300 	ldrd	r2, r3, [r3]
  408108:	f001 fefc 	bl	409f04 <__aeabi_dsub>
  40810c:	4602      	mov	r2, r0
  40810e:	460b      	mov	r3, r1
  408110:	a105      	add	r1, pc, #20	; (adr r1, 408128 <__ieee754_asin+0x2a0>)
  408112:	e9d1 0100 	ldrd	r0, r1, [r1]
  408116:	f001 fef5 	bl	409f04 <__aeabi_dsub>
  40811a:	4604      	mov	r4, r0
  40811c:	e7d8      	b.n	4080d0 <__ieee754_asin+0x248>
  40811e:	bf00      	nop
  408120:	8800759c 	.word	0x8800759c
  408124:	7e37e43c 	.word	0x7e37e43c
  408128:	54442d18 	.word	0x54442d18
  40812c:	3ff921fb 	.word	0x3ff921fb
  408130:	33145c07 	.word	0x33145c07
  408134:	3c91a626 	.word	0x3c91a626
  408138:	0dfdf709 	.word	0x0dfdf709
  40813c:	3f023de1 	.word	0x3f023de1
  408140:	7501b288 	.word	0x7501b288
  408144:	3f49efe0 	.word	0x3f49efe0
  408148:	b5688f3b 	.word	0xb5688f3b
  40814c:	3fa48228 	.word	0x3fa48228
  408150:	0e884455 	.word	0x0e884455
  408154:	3fc9c155 	.word	0x3fc9c155
  408158:	03eb6f7d 	.word	0x03eb6f7d
  40815c:	3fd4d612 	.word	0x3fd4d612
  408160:	55555555 	.word	0x55555555
  408164:	3fc55555 	.word	0x3fc55555
  408168:	b12e9282 	.word	0xb12e9282
  40816c:	3fb3b8c5 	.word	0x3fb3b8c5
  408170:	1b8d0159 	.word	0x1b8d0159
  408174:	3fe6066c 	.word	0x3fe6066c
  408178:	9c598ac8 	.word	0x9c598ac8
  40817c:	40002ae5 	.word	0x40002ae5
  408180:	1c8a2d4b 	.word	0x1c8a2d4b
  408184:	40033a27 	.word	0x40033a27
  408188:	54442d18 	.word	0x54442d18
  40818c:	3fe921fb 	.word	0x3fe921fb
  408190:	3fefffff 	.word	0x3fefffff
  408194:	3fdfffff 	.word	0x3fdfffff
  408198:	3ff00000 	.word	0x3ff00000
  40819c:	3fe00000 	.word	0x3fe00000
  4081a0:	3fef3332 	.word	0x3fef3332
  4081a4:	4602      	mov	r2, r0
  4081a6:	460b      	mov	r3, r1
  4081a8:	f002 f860 	bl	40a26c <__aeabi_dmul>
  4081ac:	a338      	add	r3, pc, #224	; (adr r3, 408290 <__ieee754_asin+0x408>)
  4081ae:	e9d3 2300 	ldrd	r2, r3, [r3]
  4081b2:	4606      	mov	r6, r0
  4081b4:	460f      	mov	r7, r1
  4081b6:	f002 f859 	bl	40a26c <__aeabi_dmul>
  4081ba:	a337      	add	r3, pc, #220	; (adr r3, 408298 <__ieee754_asin+0x410>)
  4081bc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4081c0:	f001 fea2 	bl	409f08 <__adddf3>
  4081c4:	4632      	mov	r2, r6
  4081c6:	463b      	mov	r3, r7
  4081c8:	f002 f850 	bl	40a26c <__aeabi_dmul>
  4081cc:	a334      	add	r3, pc, #208	; (adr r3, 4082a0 <__ieee754_asin+0x418>)
  4081ce:	e9d3 2300 	ldrd	r2, r3, [r3]
  4081d2:	f001 fe97 	bl	409f04 <__aeabi_dsub>
  4081d6:	4632      	mov	r2, r6
  4081d8:	463b      	mov	r3, r7
  4081da:	f002 f847 	bl	40a26c <__aeabi_dmul>
  4081de:	a332      	add	r3, pc, #200	; (adr r3, 4082a8 <__ieee754_asin+0x420>)
  4081e0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4081e4:	f001 fe90 	bl	409f08 <__adddf3>
  4081e8:	4632      	mov	r2, r6
  4081ea:	463b      	mov	r3, r7
  4081ec:	f002 f83e 	bl	40a26c <__aeabi_dmul>
  4081f0:	a32f      	add	r3, pc, #188	; (adr r3, 4082b0 <__ieee754_asin+0x428>)
  4081f2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4081f6:	f001 fe85 	bl	409f04 <__aeabi_dsub>
  4081fa:	4632      	mov	r2, r6
  4081fc:	463b      	mov	r3, r7
  4081fe:	f002 f835 	bl	40a26c <__aeabi_dmul>
  408202:	a32d      	add	r3, pc, #180	; (adr r3, 4082b8 <__ieee754_asin+0x430>)
  408204:	e9d3 2300 	ldrd	r2, r3, [r3]
  408208:	f001 fe7e 	bl	409f08 <__adddf3>
  40820c:	4632      	mov	r2, r6
  40820e:	463b      	mov	r3, r7
  408210:	f002 f82c 	bl	40a26c <__aeabi_dmul>
  408214:	a32a      	add	r3, pc, #168	; (adr r3, 4082c0 <__ieee754_asin+0x438>)
  408216:	e9d3 2300 	ldrd	r2, r3, [r3]
  40821a:	4680      	mov	r8, r0
  40821c:	4689      	mov	r9, r1
  40821e:	4630      	mov	r0, r6
  408220:	4639      	mov	r1, r7
  408222:	f002 f823 	bl	40a26c <__aeabi_dmul>
  408226:	a328      	add	r3, pc, #160	; (adr r3, 4082c8 <__ieee754_asin+0x440>)
  408228:	e9d3 2300 	ldrd	r2, r3, [r3]
  40822c:	f001 fe6a 	bl	409f04 <__aeabi_dsub>
  408230:	4632      	mov	r2, r6
  408232:	463b      	mov	r3, r7
  408234:	f002 f81a 	bl	40a26c <__aeabi_dmul>
  408238:	a325      	add	r3, pc, #148	; (adr r3, 4082d0 <__ieee754_asin+0x448>)
  40823a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40823e:	f001 fe63 	bl	409f08 <__adddf3>
  408242:	4632      	mov	r2, r6
  408244:	463b      	mov	r3, r7
  408246:	f002 f811 	bl	40a26c <__aeabi_dmul>
  40824a:	a323      	add	r3, pc, #140	; (adr r3, 4082d8 <__ieee754_asin+0x450>)
  40824c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408250:	f001 fe58 	bl	409f04 <__aeabi_dsub>
  408254:	4632      	mov	r2, r6
  408256:	463b      	mov	r3, r7
  408258:	f002 f808 	bl	40a26c <__aeabi_dmul>
  40825c:	2200      	movs	r2, #0
  40825e:	4b20      	ldr	r3, [pc, #128]	; (4082e0 <__ieee754_asin+0x458>)
  408260:	f001 fe52 	bl	409f08 <__adddf3>
  408264:	4602      	mov	r2, r0
  408266:	460b      	mov	r3, r1
  408268:	4640      	mov	r0, r8
  40826a:	4649      	mov	r1, r9
  40826c:	f002 f928 	bl	40a4c0 <__aeabi_ddiv>
  408270:	4622      	mov	r2, r4
  408272:	462b      	mov	r3, r5
  408274:	f001 fffa 	bl	40a26c <__aeabi_dmul>
  408278:	4622      	mov	r2, r4
  40827a:	462b      	mov	r3, r5
  40827c:	f001 fe44 	bl	409f08 <__adddf3>
  408280:	4604      	mov	r4, r0
  408282:	4620      	mov	r0, r4
  408284:	b004      	add	sp, #16
  408286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40828a:	bf00      	nop
  40828c:	f3af 8000 	nop.w
  408290:	0dfdf709 	.word	0x0dfdf709
  408294:	3f023de1 	.word	0x3f023de1
  408298:	7501b288 	.word	0x7501b288
  40829c:	3f49efe0 	.word	0x3f49efe0
  4082a0:	b5688f3b 	.word	0xb5688f3b
  4082a4:	3fa48228 	.word	0x3fa48228
  4082a8:	0e884455 	.word	0x0e884455
  4082ac:	3fc9c155 	.word	0x3fc9c155
  4082b0:	03eb6f7d 	.word	0x03eb6f7d
  4082b4:	3fd4d612 	.word	0x3fd4d612
  4082b8:	55555555 	.word	0x55555555
  4082bc:	3fc55555 	.word	0x3fc55555
  4082c0:	b12e9282 	.word	0xb12e9282
  4082c4:	3fb3b8c5 	.word	0x3fb3b8c5
  4082c8:	1b8d0159 	.word	0x1b8d0159
  4082cc:	3fe6066c 	.word	0x3fe6066c
  4082d0:	9c598ac8 	.word	0x9c598ac8
  4082d4:	40002ae5 	.word	0x40002ae5
  4082d8:	1c8a2d4b 	.word	0x1c8a2d4b
  4082dc:	40033a27 	.word	0x40033a27
  4082e0:	3ff00000 	.word	0x3ff00000
  4082e4:	00000000 	.word	0x00000000

004082e8 <__ieee754_atan2>:
  4082e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4082ec:	4254      	negs	r4, r2
  4082ee:	4314      	orrs	r4, r2
  4082f0:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
  4082f4:	f8df e180 	ldr.w	lr, [pc, #384]	; 408478 <__ieee754_atan2+0x190>
  4082f8:	ea49 74d4 	orr.w	r4, r9, r4, lsr #31
  4082fc:	4574      	cmp	r4, lr
  4082fe:	4606      	mov	r6, r0
  408300:	460d      	mov	r5, r1
  408302:	d83e      	bhi.n	408382 <__ieee754_atan2+0x9a>
  408304:	4244      	negs	r4, r0
  408306:	4304      	orrs	r4, r0
  408308:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
  40830c:	ea4b 74d4 	orr.w	r4, fp, r4, lsr #31
  408310:	4574      	cmp	r4, lr
  408312:	468a      	mov	sl, r1
  408314:	d835      	bhi.n	408382 <__ieee754_atan2+0x9a>
  408316:	f103 4440 	add.w	r4, r3, #3221225472	; 0xc0000000
  40831a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
  40831e:	4314      	orrs	r4, r2
  408320:	d044      	beq.n	4083ac <__ieee754_atan2+0xc4>
  408322:	179c      	asrs	r4, r3, #30
  408324:	f004 0402 	and.w	r4, r4, #2
  408328:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
  40832c:	ea50 010b 	orrs.w	r1, r0, fp
  408330:	d02f      	beq.n	408392 <__ieee754_atan2+0xaa>
  408332:	ea52 0109 	orrs.w	r1, r2, r9
  408336:	d033      	beq.n	4083a0 <__ieee754_atan2+0xb8>
  408338:	45f1      	cmp	r9, lr
  40833a:	d046      	beq.n	4083ca <__ieee754_atan2+0xe2>
  40833c:	45f3      	cmp	fp, lr
  40833e:	d02f      	beq.n	4083a0 <__ieee754_atan2+0xb8>
  408340:	ebc9 090b 	rsb	r9, r9, fp
  408344:	ea4f 5929 	mov.w	r9, r9, asr #20
  408348:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
  40834c:	dc34      	bgt.n	4083b8 <__ieee754_atan2+0xd0>
  40834e:	2b00      	cmp	r3, #0
  408350:	db57      	blt.n	408402 <__ieee754_atan2+0x11a>
  408352:	4630      	mov	r0, r6
  408354:	4629      	mov	r1, r5
  408356:	f002 f8b3 	bl	40a4c0 <__aeabi_ddiv>
  40835a:	f001 fcb3 	bl	409cc4 <fabs>
  40835e:	f001 fb13 	bl	409988 <atan>
  408362:	2c01      	cmp	r4, #1
  408364:	d04a      	beq.n	4083fc <__ieee754_atan2+0x114>
  408366:	2c02      	cmp	r4, #2
  408368:	d03b      	beq.n	4083e2 <__ieee754_atan2+0xfa>
  40836a:	b184      	cbz	r4, 40838e <__ieee754_atan2+0xa6>
  40836c:	a332      	add	r3, pc, #200	; (adr r3, 408438 <__ieee754_atan2+0x150>)
  40836e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408372:	f001 fdc7 	bl	409f04 <__aeabi_dsub>
  408376:	a332      	add	r3, pc, #200	; (adr r3, 408440 <__ieee754_atan2+0x158>)
  408378:	e9d3 2300 	ldrd	r2, r3, [r3]
  40837c:	f001 fdc2 	bl	409f04 <__aeabi_dsub>
  408380:	e005      	b.n	40838e <__ieee754_atan2+0xa6>
  408382:	4610      	mov	r0, r2
  408384:	4619      	mov	r1, r3
  408386:	4632      	mov	r2, r6
  408388:	462b      	mov	r3, r5
  40838a:	f001 fdbd 	bl	409f08 <__adddf3>
  40838e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408392:	2c02      	cmp	r4, #2
  408394:	d014      	beq.n	4083c0 <__ieee754_atan2+0xd8>
  408396:	2c03      	cmp	r4, #3
  408398:	d10c      	bne.n	4083b4 <__ieee754_atan2+0xcc>
  40839a:	482d      	ldr	r0, [pc, #180]	; (408450 <__ieee754_atan2+0x168>)
  40839c:	492d      	ldr	r1, [pc, #180]	; (408454 <__ieee754_atan2+0x16c>)
  40839e:	e7f6      	b.n	40838e <__ieee754_atan2+0xa6>
  4083a0:	f1ba 0f00 	cmp.w	sl, #0
  4083a4:	482a      	ldr	r0, [pc, #168]	; (408450 <__ieee754_atan2+0x168>)
  4083a6:	db0e      	blt.n	4083c6 <__ieee754_atan2+0xde>
  4083a8:	492b      	ldr	r1, [pc, #172]	; (408458 <__ieee754_atan2+0x170>)
  4083aa:	e7f0      	b.n	40838e <__ieee754_atan2+0xa6>
  4083ac:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4083b0:	f001 baea 	b.w	409988 <atan>
  4083b4:	4629      	mov	r1, r5
  4083b6:	e7ea      	b.n	40838e <__ieee754_atan2+0xa6>
  4083b8:	a123      	add	r1, pc, #140	; (adr r1, 408448 <__ieee754_atan2+0x160>)
  4083ba:	e9d1 0100 	ldrd	r0, r1, [r1]
  4083be:	e7d0      	b.n	408362 <__ieee754_atan2+0x7a>
  4083c0:	4823      	ldr	r0, [pc, #140]	; (408450 <__ieee754_atan2+0x168>)
  4083c2:	4926      	ldr	r1, [pc, #152]	; (40845c <__ieee754_atan2+0x174>)
  4083c4:	e7e3      	b.n	40838e <__ieee754_atan2+0xa6>
  4083c6:	4926      	ldr	r1, [pc, #152]	; (408460 <__ieee754_atan2+0x178>)
  4083c8:	e7e1      	b.n	40838e <__ieee754_atan2+0xa6>
  4083ca:	45cb      	cmp	fp, r9
  4083cc:	d01f      	beq.n	40840e <__ieee754_atan2+0x126>
  4083ce:	2c02      	cmp	r4, #2
  4083d0:	d0f6      	beq.n	4083c0 <__ieee754_atan2+0xd8>
  4083d2:	2c03      	cmp	r4, #3
  4083d4:	d0e1      	beq.n	40839a <__ieee754_atan2+0xb2>
  4083d6:	2c01      	cmp	r4, #1
  4083d8:	f04f 0000 	mov.w	r0, #0
  4083dc:	d020      	beq.n	408420 <__ieee754_atan2+0x138>
  4083de:	4601      	mov	r1, r0
  4083e0:	e7d5      	b.n	40838e <__ieee754_atan2+0xa6>
  4083e2:	a315      	add	r3, pc, #84	; (adr r3, 408438 <__ieee754_atan2+0x150>)
  4083e4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4083e8:	f001 fd8c 	bl	409f04 <__aeabi_dsub>
  4083ec:	4602      	mov	r2, r0
  4083ee:	460b      	mov	r3, r1
  4083f0:	a113      	add	r1, pc, #76	; (adr r1, 408440 <__ieee754_atan2+0x158>)
  4083f2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4083f6:	f001 fd85 	bl	409f04 <__aeabi_dsub>
  4083fa:	e7c8      	b.n	40838e <__ieee754_atan2+0xa6>
  4083fc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  408400:	e7c5      	b.n	40838e <__ieee754_atan2+0xa6>
  408402:	f119 0f3c 	cmn.w	r9, #60	; 0x3c
  408406:	daa4      	bge.n	408352 <__ieee754_atan2+0x6a>
  408408:	2000      	movs	r0, #0
  40840a:	2100      	movs	r1, #0
  40840c:	e7a9      	b.n	408362 <__ieee754_atan2+0x7a>
  40840e:	2c02      	cmp	r4, #2
  408410:	d00e      	beq.n	408430 <__ieee754_atan2+0x148>
  408412:	2c03      	cmp	r4, #3
  408414:	d009      	beq.n	40842a <__ieee754_atan2+0x142>
  408416:	2c01      	cmp	r4, #1
  408418:	480d      	ldr	r0, [pc, #52]	; (408450 <__ieee754_atan2+0x168>)
  40841a:	d004      	beq.n	408426 <__ieee754_atan2+0x13e>
  40841c:	4911      	ldr	r1, [pc, #68]	; (408464 <__ieee754_atan2+0x17c>)
  40841e:	e7b6      	b.n	40838e <__ieee754_atan2+0xa6>
  408420:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  408424:	e7b3      	b.n	40838e <__ieee754_atan2+0xa6>
  408426:	4910      	ldr	r1, [pc, #64]	; (408468 <__ieee754_atan2+0x180>)
  408428:	e7b1      	b.n	40838e <__ieee754_atan2+0xa6>
  40842a:	4810      	ldr	r0, [pc, #64]	; (40846c <__ieee754_atan2+0x184>)
  40842c:	4910      	ldr	r1, [pc, #64]	; (408470 <__ieee754_atan2+0x188>)
  40842e:	e7ae      	b.n	40838e <__ieee754_atan2+0xa6>
  408430:	480e      	ldr	r0, [pc, #56]	; (40846c <__ieee754_atan2+0x184>)
  408432:	4910      	ldr	r1, [pc, #64]	; (408474 <__ieee754_atan2+0x18c>)
  408434:	e7ab      	b.n	40838e <__ieee754_atan2+0xa6>
  408436:	bf00      	nop
  408438:	33145c07 	.word	0x33145c07
  40843c:	3ca1a626 	.word	0x3ca1a626
  408440:	54442d18 	.word	0x54442d18
  408444:	400921fb 	.word	0x400921fb
  408448:	54442d18 	.word	0x54442d18
  40844c:	3ff921fb 	.word	0x3ff921fb
  408450:	54442d18 	.word	0x54442d18
  408454:	c00921fb 	.word	0xc00921fb
  408458:	3ff921fb 	.word	0x3ff921fb
  40845c:	400921fb 	.word	0x400921fb
  408460:	bff921fb 	.word	0xbff921fb
  408464:	3fe921fb 	.word	0x3fe921fb
  408468:	bfe921fb 	.word	0xbfe921fb
  40846c:	7f3321d2 	.word	0x7f3321d2
  408470:	c002d97c 	.word	0xc002d97c
  408474:	4002d97c 	.word	0x4002d97c
  408478:	7ff00000 	.word	0x7ff00000
  40847c:	00000000 	.word	0x00000000

00408480 <__ieee754_rem_pio2>:
  408480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408484:	4e94      	ldr	r6, [pc, #592]	; (4086d8 <__ieee754_rem_pio2+0x258>)
  408486:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  40848a:	42b7      	cmp	r7, r6
  40848c:	b091      	sub	sp, #68	; 0x44
  40848e:	f340 8082 	ble.w	408596 <__ieee754_rem_pio2+0x116>
  408492:	4692      	mov	sl, r2
  408494:	4a91      	ldr	r2, [pc, #580]	; (4086dc <__ieee754_rem_pio2+0x25c>)
  408496:	4297      	cmp	r7, r2
  408498:	460c      	mov	r4, r1
  40849a:	dc26      	bgt.n	4084ea <__ieee754_rem_pio2+0x6a>
  40849c:	2900      	cmp	r1, #0
  40849e:	a384      	add	r3, pc, #528	; (adr r3, 4086b0 <__ieee754_rem_pio2+0x230>)
  4084a0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4084a4:	f340 81a8 	ble.w	4087f8 <__ieee754_rem_pio2+0x378>
  4084a8:	f001 fd2c 	bl	409f04 <__aeabi_dsub>
  4084ac:	4b8c      	ldr	r3, [pc, #560]	; (4086e0 <__ieee754_rem_pio2+0x260>)
  4084ae:	429f      	cmp	r7, r3
  4084b0:	4604      	mov	r4, r0
  4084b2:	460d      	mov	r5, r1
  4084b4:	f000 8084 	beq.w	4085c0 <__ieee754_rem_pio2+0x140>
  4084b8:	a37f      	add	r3, pc, #508	; (adr r3, 4086b8 <__ieee754_rem_pio2+0x238>)
  4084ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4084be:	f001 fd21 	bl	409f04 <__aeabi_dsub>
  4084c2:	4602      	mov	r2, r0
  4084c4:	460b      	mov	r3, r1
  4084c6:	e9ca 2300 	strd	r2, r3, [sl]
  4084ca:	4620      	mov	r0, r4
  4084cc:	4629      	mov	r1, r5
  4084ce:	f001 fd19 	bl	409f04 <__aeabi_dsub>
  4084d2:	a379      	add	r3, pc, #484	; (adr r3, 4086b8 <__ieee754_rem_pio2+0x238>)
  4084d4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4084d8:	f001 fd14 	bl	409f04 <__aeabi_dsub>
  4084dc:	2501      	movs	r5, #1
  4084de:	e9ca 0102 	strd	r0, r1, [sl, #8]
  4084e2:	4628      	mov	r0, r5
  4084e4:	b011      	add	sp, #68	; 0x44
  4084e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4084ea:	4a7e      	ldr	r2, [pc, #504]	; (4086e4 <__ieee754_rem_pio2+0x264>)
  4084ec:	4297      	cmp	r7, r2
  4084ee:	f340 8084 	ble.w	4085fa <__ieee754_rem_pio2+0x17a>
  4084f2:	4a7d      	ldr	r2, [pc, #500]	; (4086e8 <__ieee754_rem_pio2+0x268>)
  4084f4:	4297      	cmp	r7, r2
  4084f6:	dc59      	bgt.n	4085ac <__ieee754_rem_pio2+0x12c>
  4084f8:	153d      	asrs	r5, r7, #20
  4084fa:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
  4084fe:	eba7 5305 	sub.w	r3, r7, r5, lsl #20
  408502:	4619      	mov	r1, r3
  408504:	461f      	mov	r7, r3
  408506:	4606      	mov	r6, r0
  408508:	f002 f960 	bl	40a7cc <__aeabi_d2iz>
  40850c:	f001 fe48 	bl	40a1a0 <__aeabi_i2d>
  408510:	4680      	mov	r8, r0
  408512:	4689      	mov	r9, r1
  408514:	4602      	mov	r2, r0
  408516:	460b      	mov	r3, r1
  408518:	4630      	mov	r0, r6
  40851a:	4639      	mov	r1, r7
  40851c:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  408520:	f001 fcf0 	bl	409f04 <__aeabi_dsub>
  408524:	2200      	movs	r2, #0
  408526:	4b71      	ldr	r3, [pc, #452]	; (4086ec <__ieee754_rem_pio2+0x26c>)
  408528:	f001 fea0 	bl	40a26c <__aeabi_dmul>
  40852c:	4689      	mov	r9, r1
  40852e:	4680      	mov	r8, r0
  408530:	f002 f94c 	bl	40a7cc <__aeabi_d2iz>
  408534:	f001 fe34 	bl	40a1a0 <__aeabi_i2d>
  408538:	4602      	mov	r2, r0
  40853a:	460b      	mov	r3, r1
  40853c:	4606      	mov	r6, r0
  40853e:	460f      	mov	r7, r1
  408540:	4640      	mov	r0, r8
  408542:	4649      	mov	r1, r9
  408544:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  408548:	f001 fcdc 	bl	409f04 <__aeabi_dsub>
  40854c:	2200      	movs	r2, #0
  40854e:	4b67      	ldr	r3, [pc, #412]	; (4086ec <__ieee754_rem_pio2+0x26c>)
  408550:	f001 fe8c 	bl	40a26c <__aeabi_dmul>
  408554:	2200      	movs	r2, #0
  408556:	2300      	movs	r3, #0
  408558:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  40855c:	f002 f8ee 	bl	40a73c <__aeabi_dcmpeq>
  408560:	2800      	cmp	r0, #0
  408562:	f000 8175 	beq.w	408850 <__ieee754_rem_pio2+0x3d0>
  408566:	2300      	movs	r3, #0
  408568:	4630      	mov	r0, r6
  40856a:	4639      	mov	r1, r7
  40856c:	2200      	movs	r2, #0
  40856e:	f002 f8e5 	bl	40a73c <__aeabi_dcmpeq>
  408572:	2800      	cmp	r0, #0
  408574:	bf14      	ite	ne
  408576:	2301      	movne	r3, #1
  408578:	2302      	moveq	r3, #2
  40857a:	4a5d      	ldr	r2, [pc, #372]	; (4086f0 <__ieee754_rem_pio2+0x270>)
  40857c:	9201      	str	r2, [sp, #4]
  40857e:	2102      	movs	r1, #2
  408580:	9100      	str	r1, [sp, #0]
  408582:	462a      	mov	r2, r5
  408584:	4651      	mov	r1, sl
  408586:	a80a      	add	r0, sp, #40	; 0x28
  408588:	f000 fb82 	bl	408c90 <__kernel_rem_pio2>
  40858c:	2c00      	cmp	r4, #0
  40858e:	f2c0 8151 	blt.w	408834 <__ieee754_rem_pio2+0x3b4>
  408592:	4605      	mov	r5, r0
  408594:	e006      	b.n	4085a4 <__ieee754_rem_pio2+0x124>
  408596:	e9c2 0100 	strd	r0, r1, [r2]
  40859a:	2500      	movs	r5, #0
  40859c:	2400      	movs	r4, #0
  40859e:	e9c2 4502 	strd	r4, r5, [r2, #8]
  4085a2:	2500      	movs	r5, #0
  4085a4:	4628      	mov	r0, r5
  4085a6:	b011      	add	sp, #68	; 0x44
  4085a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4085ac:	4602      	mov	r2, r0
  4085ae:	460b      	mov	r3, r1
  4085b0:	f001 fca8 	bl	409f04 <__aeabi_dsub>
  4085b4:	2500      	movs	r5, #0
  4085b6:	e9ca 0102 	strd	r0, r1, [sl, #8]
  4085ba:	e9ca 0100 	strd	r0, r1, [sl]
  4085be:	e7f1      	b.n	4085a4 <__ieee754_rem_pio2+0x124>
  4085c0:	a33f      	add	r3, pc, #252	; (adr r3, 4086c0 <__ieee754_rem_pio2+0x240>)
  4085c2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085c6:	f001 fc9d 	bl	409f04 <__aeabi_dsub>
  4085ca:	a33f      	add	r3, pc, #252	; (adr r3, 4086c8 <__ieee754_rem_pio2+0x248>)
  4085cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085d0:	460d      	mov	r5, r1
  4085d2:	4604      	mov	r4, r0
  4085d4:	f001 fc96 	bl	409f04 <__aeabi_dsub>
  4085d8:	4602      	mov	r2, r0
  4085da:	460b      	mov	r3, r1
  4085dc:	e9ca 2300 	strd	r2, r3, [sl]
  4085e0:	4629      	mov	r1, r5
  4085e2:	4620      	mov	r0, r4
  4085e4:	f001 fc8e 	bl	409f04 <__aeabi_dsub>
  4085e8:	a337      	add	r3, pc, #220	; (adr r3, 4086c8 <__ieee754_rem_pio2+0x248>)
  4085ea:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085ee:	f001 fc89 	bl	409f04 <__aeabi_dsub>
  4085f2:	2501      	movs	r5, #1
  4085f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
  4085f8:	e7d4      	b.n	4085a4 <__ieee754_rem_pio2+0x124>
  4085fa:	f001 fb63 	bl	409cc4 <fabs>
  4085fe:	a334      	add	r3, pc, #208	; (adr r3, 4086d0 <__ieee754_rem_pio2+0x250>)
  408600:	e9d3 2300 	ldrd	r2, r3, [r3]
  408604:	4680      	mov	r8, r0
  408606:	4689      	mov	r9, r1
  408608:	f001 fe30 	bl	40a26c <__aeabi_dmul>
  40860c:	2200      	movs	r2, #0
  40860e:	4b39      	ldr	r3, [pc, #228]	; (4086f4 <__ieee754_rem_pio2+0x274>)
  408610:	f001 fc7a 	bl	409f08 <__adddf3>
  408614:	f002 f8da 	bl	40a7cc <__aeabi_d2iz>
  408618:	4605      	mov	r5, r0
  40861a:	f001 fdc1 	bl	40a1a0 <__aeabi_i2d>
  40861e:	a324      	add	r3, pc, #144	; (adr r3, 4086b0 <__ieee754_rem_pio2+0x230>)
  408620:	e9d3 2300 	ldrd	r2, r3, [r3]
  408624:	e9cd 0104 	strd	r0, r1, [sp, #16]
  408628:	f001 fe20 	bl	40a26c <__aeabi_dmul>
  40862c:	4602      	mov	r2, r0
  40862e:	460b      	mov	r3, r1
  408630:	4640      	mov	r0, r8
  408632:	4649      	mov	r1, r9
  408634:	f001 fc66 	bl	409f04 <__aeabi_dsub>
  408638:	a31f      	add	r3, pc, #124	; (adr r3, 4086b8 <__ieee754_rem_pio2+0x238>)
  40863a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40863e:	4680      	mov	r8, r0
  408640:	4689      	mov	r9, r1
  408642:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  408646:	f001 fe11 	bl	40a26c <__aeabi_dmul>
  40864a:	2d1f      	cmp	r5, #31
  40864c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  408650:	dc54      	bgt.n	4086fc <__ieee754_rem_pio2+0x27c>
  408652:	4b29      	ldr	r3, [pc, #164]	; (4086f8 <__ieee754_rem_pio2+0x278>)
  408654:	1e6a      	subs	r2, r5, #1
  408656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40865a:	429f      	cmp	r7, r3
  40865c:	d04e      	beq.n	4086fc <__ieee754_rem_pio2+0x27c>
  40865e:	4602      	mov	r2, r0
  408660:	460b      	mov	r3, r1
  408662:	4640      	mov	r0, r8
  408664:	4649      	mov	r1, r9
  408666:	f001 fc4d 	bl	409f04 <__aeabi_dsub>
  40866a:	4602      	mov	r2, r0
  40866c:	460b      	mov	r3, r1
  40866e:	e9ca 2300 	strd	r2, r3, [sl]
  408672:	4683      	mov	fp, r0
  408674:	460e      	mov	r6, r1
  408676:	465a      	mov	r2, fp
  408678:	4633      	mov	r3, r6
  40867a:	4640      	mov	r0, r8
  40867c:	4649      	mov	r1, r9
  40867e:	f001 fc41 	bl	409f04 <__aeabi_dsub>
  408682:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408686:	f001 fc3d 	bl	409f04 <__aeabi_dsub>
  40868a:	2c00      	cmp	r4, #0
  40868c:	4602      	mov	r2, r0
  40868e:	460b      	mov	r3, r1
  408690:	e9ca 2302 	strd	r2, r3, [sl, #8]
  408694:	da86      	bge.n	4085a4 <__ieee754_rem_pio2+0x124>
  408696:	465b      	mov	r3, fp
  408698:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  40869c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4086a0:	e88a 0048 	stmia.w	sl, {r3, r6}
  4086a4:	f8ca 100c 	str.w	r1, [sl, #12]
  4086a8:	f8ca 0008 	str.w	r0, [sl, #8]
  4086ac:	426d      	negs	r5, r5
  4086ae:	e779      	b.n	4085a4 <__ieee754_rem_pio2+0x124>
  4086b0:	54400000 	.word	0x54400000
  4086b4:	3ff921fb 	.word	0x3ff921fb
  4086b8:	1a626331 	.word	0x1a626331
  4086bc:	3dd0b461 	.word	0x3dd0b461
  4086c0:	1a600000 	.word	0x1a600000
  4086c4:	3dd0b461 	.word	0x3dd0b461
  4086c8:	2e037073 	.word	0x2e037073
  4086cc:	3ba3198a 	.word	0x3ba3198a
  4086d0:	6dc9c883 	.word	0x6dc9c883
  4086d4:	3fe45f30 	.word	0x3fe45f30
  4086d8:	3fe921fb 	.word	0x3fe921fb
  4086dc:	4002d97b 	.word	0x4002d97b
  4086e0:	3ff921fb 	.word	0x3ff921fb
  4086e4:	413921fb 	.word	0x413921fb
  4086e8:	7fefffff 	.word	0x7fefffff
  4086ec:	41700000 	.word	0x41700000
  4086f0:	0040b6d4 	.word	0x0040b6d4
  4086f4:	3fe00000 	.word	0x3fe00000
  4086f8:	0040b654 	.word	0x0040b654
  4086fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408700:	4640      	mov	r0, r8
  408702:	4649      	mov	r1, r9
  408704:	f001 fbfe 	bl	409f04 <__aeabi_dsub>
  408708:	153a      	asrs	r2, r7, #20
  40870a:	f3c1 530a 	ubfx	r3, r1, #20, #11
  40870e:	1ad3      	subs	r3, r2, r3
  408710:	2b10      	cmp	r3, #16
  408712:	4683      	mov	fp, r0
  408714:	460e      	mov	r6, r1
  408716:	9209      	str	r2, [sp, #36]	; 0x24
  408718:	e9ca 0100 	strd	r0, r1, [sl]
  40871c:	ddab      	ble.n	408676 <__ieee754_rem_pio2+0x1f6>
  40871e:	a35e      	add	r3, pc, #376	; (adr r3, 408898 <__ieee754_rem_pio2+0x418>)
  408720:	e9d3 2300 	ldrd	r2, r3, [r3]
  408724:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  408728:	f001 fda0 	bl	40a26c <__aeabi_dmul>
  40872c:	4606      	mov	r6, r0
  40872e:	460f      	mov	r7, r1
  408730:	4602      	mov	r2, r0
  408732:	460b      	mov	r3, r1
  408734:	4640      	mov	r0, r8
  408736:	4649      	mov	r1, r9
  408738:	f001 fbe4 	bl	409f04 <__aeabi_dsub>
  40873c:	e9cd 0106 	strd	r0, r1, [sp, #24]
  408740:	4602      	mov	r2, r0
  408742:	460b      	mov	r3, r1
  408744:	4640      	mov	r0, r8
  408746:	4649      	mov	r1, r9
  408748:	f001 fbdc 	bl	409f04 <__aeabi_dsub>
  40874c:	4632      	mov	r2, r6
  40874e:	463b      	mov	r3, r7
  408750:	f001 fbd8 	bl	409f04 <__aeabi_dsub>
  408754:	a352      	add	r3, pc, #328	; (adr r3, 4088a0 <__ieee754_rem_pio2+0x420>)
  408756:	e9d3 2300 	ldrd	r2, r3, [r3]
  40875a:	4606      	mov	r6, r0
  40875c:	460f      	mov	r7, r1
  40875e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  408762:	f001 fd83 	bl	40a26c <__aeabi_dmul>
  408766:	4632      	mov	r2, r6
  408768:	463b      	mov	r3, r7
  40876a:	f001 fbcb 	bl	409f04 <__aeabi_dsub>
  40876e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  408772:	e9cd 0102 	strd	r0, r1, [sp, #8]
  408776:	4602      	mov	r2, r0
  408778:	460b      	mov	r3, r1
  40877a:	4640      	mov	r0, r8
  40877c:	4649      	mov	r1, r9
  40877e:	f001 fbc1 	bl	409f04 <__aeabi_dsub>
  408782:	460b      	mov	r3, r1
  408784:	f3c1 570a 	ubfx	r7, r1, #20, #11
  408788:	460e      	mov	r6, r1
  40878a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40878c:	1bcf      	subs	r7, r1, r7
  40878e:	4602      	mov	r2, r0
  408790:	2f31      	cmp	r7, #49	; 0x31
  408792:	4683      	mov	fp, r0
  408794:	e9ca 2300 	strd	r2, r3, [sl]
  408798:	dd7a      	ble.n	408890 <__ieee754_rem_pio2+0x410>
  40879a:	a343      	add	r3, pc, #268	; (adr r3, 4088a8 <__ieee754_rem_pio2+0x428>)
  40879c:	e9d3 2300 	ldrd	r2, r3, [r3]
  4087a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4087a4:	f001 fd62 	bl	40a26c <__aeabi_dmul>
  4087a8:	4606      	mov	r6, r0
  4087aa:	460f      	mov	r7, r1
  4087ac:	4602      	mov	r2, r0
  4087ae:	460b      	mov	r3, r1
  4087b0:	4640      	mov	r0, r8
  4087b2:	4649      	mov	r1, r9
  4087b4:	e9cd 8906 	strd	r8, r9, [sp, #24]
  4087b8:	f001 fba4 	bl	409f04 <__aeabi_dsub>
  4087bc:	4602      	mov	r2, r0
  4087be:	460b      	mov	r3, r1
  4087c0:	4680      	mov	r8, r0
  4087c2:	4689      	mov	r9, r1
  4087c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4087c8:	f001 fb9c 	bl	409f04 <__aeabi_dsub>
  4087cc:	4632      	mov	r2, r6
  4087ce:	463b      	mov	r3, r7
  4087d0:	f001 fb98 	bl	409f04 <__aeabi_dsub>
  4087d4:	a336      	add	r3, pc, #216	; (adr r3, 4088b0 <__ieee754_rem_pio2+0x430>)
  4087d6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4087da:	4606      	mov	r6, r0
  4087dc:	460f      	mov	r7, r1
  4087de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4087e2:	f001 fd43 	bl	40a26c <__aeabi_dmul>
  4087e6:	4632      	mov	r2, r6
  4087e8:	463b      	mov	r3, r7
  4087ea:	f001 fb8b 	bl	409f04 <__aeabi_dsub>
  4087ee:	4602      	mov	r2, r0
  4087f0:	460b      	mov	r3, r1
  4087f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4087f6:	e734      	b.n	408662 <__ieee754_rem_pio2+0x1e2>
  4087f8:	f001 fb86 	bl	409f08 <__adddf3>
  4087fc:	4b30      	ldr	r3, [pc, #192]	; (4088c0 <__ieee754_rem_pio2+0x440>)
  4087fe:	429f      	cmp	r7, r3
  408800:	4604      	mov	r4, r0
  408802:	460d      	mov	r5, r1
  408804:	d026      	beq.n	408854 <__ieee754_rem_pio2+0x3d4>
  408806:	a32c      	add	r3, pc, #176	; (adr r3, 4088b8 <__ieee754_rem_pio2+0x438>)
  408808:	e9d3 2300 	ldrd	r2, r3, [r3]
  40880c:	f001 fb7c 	bl	409f08 <__adddf3>
  408810:	4602      	mov	r2, r0
  408812:	460b      	mov	r3, r1
  408814:	e9ca 2300 	strd	r2, r3, [sl]
  408818:	4629      	mov	r1, r5
  40881a:	4620      	mov	r0, r4
  40881c:	f001 fb72 	bl	409f04 <__aeabi_dsub>
  408820:	a325      	add	r3, pc, #148	; (adr r3, 4088b8 <__ieee754_rem_pio2+0x438>)
  408822:	e9d3 2300 	ldrd	r2, r3, [r3]
  408826:	f001 fb6f 	bl	409f08 <__adddf3>
  40882a:	f04f 35ff 	mov.w	r5, #4294967295
  40882e:	e9ca 0102 	strd	r0, r1, [sl, #8]
  408832:	e6b7      	b.n	4085a4 <__ieee754_rem_pio2+0x124>
  408834:	f8da 2004 	ldr.w	r2, [sl, #4]
  408838:	f8da 300c 	ldr.w	r3, [sl, #12]
  40883c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  408840:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  408844:	4245      	negs	r5, r0
  408846:	f8ca 2004 	str.w	r2, [sl, #4]
  40884a:	f8ca 300c 	str.w	r3, [sl, #12]
  40884e:	e6a9      	b.n	4085a4 <__ieee754_rem_pio2+0x124>
  408850:	2303      	movs	r3, #3
  408852:	e692      	b.n	40857a <__ieee754_rem_pio2+0xfa>
  408854:	a310      	add	r3, pc, #64	; (adr r3, 408898 <__ieee754_rem_pio2+0x418>)
  408856:	e9d3 2300 	ldrd	r2, r3, [r3]
  40885a:	f001 fb55 	bl	409f08 <__adddf3>
  40885e:	a310      	add	r3, pc, #64	; (adr r3, 4088a0 <__ieee754_rem_pio2+0x420>)
  408860:	e9d3 2300 	ldrd	r2, r3, [r3]
  408864:	460d      	mov	r5, r1
  408866:	4604      	mov	r4, r0
  408868:	f001 fb4e 	bl	409f08 <__adddf3>
  40886c:	4602      	mov	r2, r0
  40886e:	460b      	mov	r3, r1
  408870:	e9ca 2300 	strd	r2, r3, [sl]
  408874:	4629      	mov	r1, r5
  408876:	4620      	mov	r0, r4
  408878:	f001 fb44 	bl	409f04 <__aeabi_dsub>
  40887c:	a308      	add	r3, pc, #32	; (adr r3, 4088a0 <__ieee754_rem_pio2+0x420>)
  40887e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408882:	f001 fb41 	bl	409f08 <__adddf3>
  408886:	f04f 35ff 	mov.w	r5, #4294967295
  40888a:	e9ca 0102 	strd	r0, r1, [sl, #8]
  40888e:	e689      	b.n	4085a4 <__ieee754_rem_pio2+0x124>
  408890:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  408894:	e6ef      	b.n	408676 <__ieee754_rem_pio2+0x1f6>
  408896:	bf00      	nop
  408898:	1a600000 	.word	0x1a600000
  40889c:	3dd0b461 	.word	0x3dd0b461
  4088a0:	2e037073 	.word	0x2e037073
  4088a4:	3ba3198a 	.word	0x3ba3198a
  4088a8:	2e000000 	.word	0x2e000000
  4088ac:	3ba3198a 	.word	0x3ba3198a
  4088b0:	252049c1 	.word	0x252049c1
  4088b4:	397b839a 	.word	0x397b839a
  4088b8:	1a626331 	.word	0x1a626331
  4088bc:	3dd0b461 	.word	0x3dd0b461
  4088c0:	3ff921fb 	.word	0x3ff921fb

004088c4 <__ieee754_sqrt>:
  4088c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4088c8:	4e5d      	ldr	r6, [pc, #372]	; (408a40 <__ieee754_sqrt+0x17c>)
  4088ca:	46b6      	mov	lr, r6
  4088cc:	400e      	ands	r6, r1
  4088ce:	4576      	cmp	r6, lr
  4088d0:	460c      	mov	r4, r1
  4088d2:	4605      	mov	r5, r0
  4088d4:	f000 8095 	beq.w	408a02 <__ieee754_sqrt+0x13e>
  4088d8:	2900      	cmp	r1, #0
  4088da:	460b      	mov	r3, r1
  4088dc:	4602      	mov	r2, r0
  4088de:	dd73      	ble.n	4089c8 <__ieee754_sqrt+0x104>
  4088e0:	150f      	asrs	r7, r1, #20
  4088e2:	d07e      	beq.n	4089e2 <__ieee754_sqrt+0x11e>
  4088e4:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  4088e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
  4088ec:	07f8      	lsls	r0, r7, #31
  4088ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4088f2:	d464      	bmi.n	4089be <__ieee754_sqrt+0xfa>
  4088f4:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  4088f8:	2600      	movs	r6, #0
  4088fa:	440b      	add	r3, r1
  4088fc:	107f      	asrs	r7, r7, #1
  4088fe:	0052      	lsls	r2, r2, #1
  408900:	46b6      	mov	lr, r6
  408902:	2016      	movs	r0, #22
  408904:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  408908:	eb0e 0401 	add.w	r4, lr, r1
  40890c:	429c      	cmp	r4, r3
  40890e:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  408912:	ea4f 0242 	mov.w	r2, r2, lsl #1
  408916:	dc03      	bgt.n	408920 <__ieee754_sqrt+0x5c>
  408918:	1b1b      	subs	r3, r3, r4
  40891a:	eb04 0e01 	add.w	lr, r4, r1
  40891e:	440e      	add	r6, r1
  408920:	3801      	subs	r0, #1
  408922:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  408926:	ea4f 0151 	mov.w	r1, r1, lsr #1
  40892a:	d1ed      	bne.n	408908 <__ieee754_sqrt+0x44>
  40892c:	4684      	mov	ip, r0
  40892e:	2420      	movs	r4, #32
  408930:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  408934:	e009      	b.n	40894a <__ieee754_sqrt+0x86>
  408936:	d020      	beq.n	40897a <__ieee754_sqrt+0xb6>
  408938:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  40893c:	3c01      	subs	r4, #1
  40893e:	ea4f 0151 	mov.w	r1, r1, lsr #1
  408942:	442b      	add	r3, r5
  408944:	ea4f 0242 	mov.w	r2, r2, lsl #1
  408948:	d020      	beq.n	40898c <__ieee754_sqrt+0xc8>
  40894a:	459e      	cmp	lr, r3
  40894c:	eb01 050c 	add.w	r5, r1, ip
  408950:	daf1      	bge.n	408936 <__ieee754_sqrt+0x72>
  408952:	2d00      	cmp	r5, #0
  408954:	eb05 0c01 	add.w	ip, r5, r1
  408958:	db09      	blt.n	40896e <__ieee754_sqrt+0xaa>
  40895a:	46f0      	mov	r8, lr
  40895c:	4295      	cmp	r5, r2
  40895e:	ebce 0303 	rsb	r3, lr, r3
  408962:	d900      	bls.n	408966 <__ieee754_sqrt+0xa2>
  408964:	3b01      	subs	r3, #1
  408966:	1b52      	subs	r2, r2, r5
  408968:	4408      	add	r0, r1
  40896a:	46c6      	mov	lr, r8
  40896c:	e7e4      	b.n	408938 <__ieee754_sqrt+0x74>
  40896e:	f1bc 0f00 	cmp.w	ip, #0
  408972:	dbf2      	blt.n	40895a <__ieee754_sqrt+0x96>
  408974:	f10e 0801 	add.w	r8, lr, #1
  408978:	e7f0      	b.n	40895c <__ieee754_sqrt+0x98>
  40897a:	4295      	cmp	r5, r2
  40897c:	d817      	bhi.n	4089ae <__ieee754_sqrt+0xea>
  40897e:	2d00      	cmp	r5, #0
  408980:	eb05 0c01 	add.w	ip, r5, r1
  408984:	db47      	blt.n	408a16 <__ieee754_sqrt+0x152>
  408986:	4698      	mov	r8, r3
  408988:	2300      	movs	r3, #0
  40898a:	e7ec      	b.n	408966 <__ieee754_sqrt+0xa2>
  40898c:	4313      	orrs	r3, r2
  40898e:	d110      	bne.n	4089b2 <__ieee754_sqrt+0xee>
  408990:	0840      	lsrs	r0, r0, #1
  408992:	1073      	asrs	r3, r6, #1
  408994:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  408998:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40899c:	07f2      	lsls	r2, r6, #31
  40899e:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  4089a2:	bf48      	it	mi
  4089a4:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  4089a8:	4649      	mov	r1, r9
  4089aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4089ae:	4673      	mov	r3, lr
  4089b0:	e7c2      	b.n	408938 <__ieee754_sqrt+0x74>
  4089b2:	1c41      	adds	r1, r0, #1
  4089b4:	d033      	beq.n	408a1e <__ieee754_sqrt+0x15a>
  4089b6:	f000 0301 	and.w	r3, r0, #1
  4089ba:	4418      	add	r0, r3
  4089bc:	e7e8      	b.n	408990 <__ieee754_sqrt+0xcc>
  4089be:	005b      	lsls	r3, r3, #1
  4089c0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  4089c4:	0052      	lsls	r2, r2, #1
  4089c6:	e795      	b.n	4088f4 <__ieee754_sqrt+0x30>
  4089c8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  4089cc:	4306      	orrs	r6, r0
  4089ce:	d0ec      	beq.n	4089aa <__ieee754_sqrt+0xe6>
  4089d0:	bb69      	cbnz	r1, 408a2e <__ieee754_sqrt+0x16a>
  4089d2:	460f      	mov	r7, r1
  4089d4:	0ad3      	lsrs	r3, r2, #11
  4089d6:	3f15      	subs	r7, #21
  4089d8:	0552      	lsls	r2, r2, #21
  4089da:	2b00      	cmp	r3, #0
  4089dc:	d0fa      	beq.n	4089d4 <__ieee754_sqrt+0x110>
  4089de:	02dd      	lsls	r5, r3, #11
  4089e0:	d420      	bmi.n	408a24 <__ieee754_sqrt+0x160>
  4089e2:	2100      	movs	r1, #0
  4089e4:	e000      	b.n	4089e8 <__ieee754_sqrt+0x124>
  4089e6:	4601      	mov	r1, r0
  4089e8:	005b      	lsls	r3, r3, #1
  4089ea:	02dc      	lsls	r4, r3, #11
  4089ec:	f101 0001 	add.w	r0, r1, #1
  4089f0:	d5f9      	bpl.n	4089e6 <__ieee754_sqrt+0x122>
  4089f2:	f1c0 0420 	rsb	r4, r0, #32
  4089f6:	fa22 f404 	lsr.w	r4, r2, r4
  4089fa:	4323      	orrs	r3, r4
  4089fc:	1a7f      	subs	r7, r7, r1
  4089fe:	4082      	lsls	r2, r0
  408a00:	e770      	b.n	4088e4 <__ieee754_sqrt+0x20>
  408a02:	4602      	mov	r2, r0
  408a04:	460b      	mov	r3, r1
  408a06:	f001 fc31 	bl	40a26c <__aeabi_dmul>
  408a0a:	462a      	mov	r2, r5
  408a0c:	4623      	mov	r3, r4
  408a0e:	f001 fa7b 	bl	409f08 <__adddf3>
  408a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408a16:	f1bc 0f00 	cmp.w	ip, #0
  408a1a:	daab      	bge.n	408974 <__ieee754_sqrt+0xb0>
  408a1c:	e7b3      	b.n	408986 <__ieee754_sqrt+0xc2>
  408a1e:	3601      	adds	r6, #1
  408a20:	4620      	mov	r0, r4
  408a22:	e7b6      	b.n	408992 <__ieee754_sqrt+0xce>
  408a24:	2420      	movs	r4, #32
  408a26:	f04f 31ff 	mov.w	r1, #4294967295
  408a2a:	2000      	movs	r0, #0
  408a2c:	e7e3      	b.n	4089f6 <__ieee754_sqrt+0x132>
  408a2e:	4602      	mov	r2, r0
  408a30:	460b      	mov	r3, r1
  408a32:	f001 fa67 	bl	409f04 <__aeabi_dsub>
  408a36:	4602      	mov	r2, r0
  408a38:	460b      	mov	r3, r1
  408a3a:	f001 fd41 	bl	40a4c0 <__aeabi_ddiv>
  408a3e:	e7b4      	b.n	4089aa <__ieee754_sqrt+0xe6>
  408a40:	7ff00000 	.word	0x7ff00000
  408a44:	00000000 	.word	0x00000000

00408a48 <__kernel_cos>:
  408a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408a4c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  408a50:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  408a54:	b085      	sub	sp, #20
  408a56:	460c      	mov	r4, r1
  408a58:	4692      	mov	sl, r2
  408a5a:	469b      	mov	fp, r3
  408a5c:	4605      	mov	r5, r0
  408a5e:	da6b      	bge.n	408b38 <__kernel_cos+0xf0>
  408a60:	f001 feb4 	bl	40a7cc <__aeabi_d2iz>
  408a64:	2800      	cmp	r0, #0
  408a66:	f000 80e8 	beq.w	408c3a <__kernel_cos+0x1f2>
  408a6a:	462a      	mov	r2, r5
  408a6c:	4623      	mov	r3, r4
  408a6e:	4628      	mov	r0, r5
  408a70:	4621      	mov	r1, r4
  408a72:	f001 fbfb 	bl	40a26c <__aeabi_dmul>
  408a76:	a374      	add	r3, pc, #464	; (adr r3, 408c48 <__kernel_cos+0x200>)
  408a78:	e9d3 2300 	ldrd	r2, r3, [r3]
  408a7c:	4680      	mov	r8, r0
  408a7e:	4689      	mov	r9, r1
  408a80:	f001 fbf4 	bl	40a26c <__aeabi_dmul>
  408a84:	a372      	add	r3, pc, #456	; (adr r3, 408c50 <__kernel_cos+0x208>)
  408a86:	e9d3 2300 	ldrd	r2, r3, [r3]
  408a8a:	f001 fa3d 	bl	409f08 <__adddf3>
  408a8e:	4642      	mov	r2, r8
  408a90:	464b      	mov	r3, r9
  408a92:	f001 fbeb 	bl	40a26c <__aeabi_dmul>
  408a96:	a370      	add	r3, pc, #448	; (adr r3, 408c58 <__kernel_cos+0x210>)
  408a98:	e9d3 2300 	ldrd	r2, r3, [r3]
  408a9c:	f001 fa32 	bl	409f04 <__aeabi_dsub>
  408aa0:	4642      	mov	r2, r8
  408aa2:	464b      	mov	r3, r9
  408aa4:	f001 fbe2 	bl	40a26c <__aeabi_dmul>
  408aa8:	a36d      	add	r3, pc, #436	; (adr r3, 408c60 <__kernel_cos+0x218>)
  408aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
  408aae:	f001 fa2b 	bl	409f08 <__adddf3>
  408ab2:	4642      	mov	r2, r8
  408ab4:	464b      	mov	r3, r9
  408ab6:	f001 fbd9 	bl	40a26c <__aeabi_dmul>
  408aba:	a36b      	add	r3, pc, #428	; (adr r3, 408c68 <__kernel_cos+0x220>)
  408abc:	e9d3 2300 	ldrd	r2, r3, [r3]
  408ac0:	f001 fa20 	bl	409f04 <__aeabi_dsub>
  408ac4:	4642      	mov	r2, r8
  408ac6:	464b      	mov	r3, r9
  408ac8:	f001 fbd0 	bl	40a26c <__aeabi_dmul>
  408acc:	a368      	add	r3, pc, #416	; (adr r3, 408c70 <__kernel_cos+0x228>)
  408ace:	e9d3 2300 	ldrd	r2, r3, [r3]
  408ad2:	f001 fa19 	bl	409f08 <__adddf3>
  408ad6:	4642      	mov	r2, r8
  408ad8:	464b      	mov	r3, r9
  408ada:	f001 fbc7 	bl	40a26c <__aeabi_dmul>
  408ade:	e9cd 0100 	strd	r0, r1, [sp]
  408ae2:	2200      	movs	r2, #0
  408ae4:	4b64      	ldr	r3, [pc, #400]	; (408c78 <__kernel_cos+0x230>)
  408ae6:	4640      	mov	r0, r8
  408ae8:	4649      	mov	r1, r9
  408aea:	f001 fbbf 	bl	40a26c <__aeabi_dmul>
  408aee:	e9dd 2300 	ldrd	r2, r3, [sp]
  408af2:	4606      	mov	r6, r0
  408af4:	460f      	mov	r7, r1
  408af6:	4640      	mov	r0, r8
  408af8:	4649      	mov	r1, r9
  408afa:	f001 fbb7 	bl	40a26c <__aeabi_dmul>
  408afe:	4652      	mov	r2, sl
  408b00:	4680      	mov	r8, r0
  408b02:	4689      	mov	r9, r1
  408b04:	465b      	mov	r3, fp
  408b06:	4628      	mov	r0, r5
  408b08:	4621      	mov	r1, r4
  408b0a:	f001 fbaf 	bl	40a26c <__aeabi_dmul>
  408b0e:	4602      	mov	r2, r0
  408b10:	460b      	mov	r3, r1
  408b12:	4640      	mov	r0, r8
  408b14:	4649      	mov	r1, r9
  408b16:	f001 f9f5 	bl	409f04 <__aeabi_dsub>
  408b1a:	4602      	mov	r2, r0
  408b1c:	460b      	mov	r3, r1
  408b1e:	4630      	mov	r0, r6
  408b20:	4639      	mov	r1, r7
  408b22:	f001 f9ef 	bl	409f04 <__aeabi_dsub>
  408b26:	4602      	mov	r2, r0
  408b28:	460b      	mov	r3, r1
  408b2a:	2000      	movs	r0, #0
  408b2c:	4953      	ldr	r1, [pc, #332]	; (408c7c <__kernel_cos+0x234>)
  408b2e:	f001 f9e9 	bl	409f04 <__aeabi_dsub>
  408b32:	b005      	add	sp, #20
  408b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408b38:	4602      	mov	r2, r0
  408b3a:	460b      	mov	r3, r1
  408b3c:	f001 fb96 	bl	40a26c <__aeabi_dmul>
  408b40:	a341      	add	r3, pc, #260	; (adr r3, 408c48 <__kernel_cos+0x200>)
  408b42:	e9d3 2300 	ldrd	r2, r3, [r3]
  408b46:	4680      	mov	r8, r0
  408b48:	4689      	mov	r9, r1
  408b4a:	f001 fb8f 	bl	40a26c <__aeabi_dmul>
  408b4e:	a340      	add	r3, pc, #256	; (adr r3, 408c50 <__kernel_cos+0x208>)
  408b50:	e9d3 2300 	ldrd	r2, r3, [r3]
  408b54:	f001 f9d8 	bl	409f08 <__adddf3>
  408b58:	4642      	mov	r2, r8
  408b5a:	464b      	mov	r3, r9
  408b5c:	f001 fb86 	bl	40a26c <__aeabi_dmul>
  408b60:	a33d      	add	r3, pc, #244	; (adr r3, 408c58 <__kernel_cos+0x210>)
  408b62:	e9d3 2300 	ldrd	r2, r3, [r3]
  408b66:	f001 f9cd 	bl	409f04 <__aeabi_dsub>
  408b6a:	4642      	mov	r2, r8
  408b6c:	464b      	mov	r3, r9
  408b6e:	f001 fb7d 	bl	40a26c <__aeabi_dmul>
  408b72:	a33b      	add	r3, pc, #236	; (adr r3, 408c60 <__kernel_cos+0x218>)
  408b74:	e9d3 2300 	ldrd	r2, r3, [r3]
  408b78:	f001 f9c6 	bl	409f08 <__adddf3>
  408b7c:	4642      	mov	r2, r8
  408b7e:	464b      	mov	r3, r9
  408b80:	f001 fb74 	bl	40a26c <__aeabi_dmul>
  408b84:	a338      	add	r3, pc, #224	; (adr r3, 408c68 <__kernel_cos+0x220>)
  408b86:	e9d3 2300 	ldrd	r2, r3, [r3]
  408b8a:	f001 f9bb 	bl	409f04 <__aeabi_dsub>
  408b8e:	4642      	mov	r2, r8
  408b90:	464b      	mov	r3, r9
  408b92:	f001 fb6b 	bl	40a26c <__aeabi_dmul>
  408b96:	a336      	add	r3, pc, #216	; (adr r3, 408c70 <__kernel_cos+0x228>)
  408b98:	e9d3 2300 	ldrd	r2, r3, [r3]
  408b9c:	f001 f9b4 	bl	409f08 <__adddf3>
  408ba0:	464b      	mov	r3, r9
  408ba2:	4642      	mov	r2, r8
  408ba4:	f001 fb62 	bl	40a26c <__aeabi_dmul>
  408ba8:	4b35      	ldr	r3, [pc, #212]	; (408c80 <__kernel_cos+0x238>)
  408baa:	429e      	cmp	r6, r3
  408bac:	e9cd 0100 	strd	r0, r1, [sp]
  408bb0:	dd97      	ble.n	408ae2 <__kernel_cos+0x9a>
  408bb2:	4b34      	ldr	r3, [pc, #208]	; (408c84 <__kernel_cos+0x23c>)
  408bb4:	429e      	cmp	r6, r3
  408bb6:	f04f 0200 	mov.w	r2, #0
  408bba:	dc38      	bgt.n	408c2e <__kernel_cos+0x1e6>
  408bbc:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
  408bc0:	2000      	movs	r0, #0
  408bc2:	492e      	ldr	r1, [pc, #184]	; (408c7c <__kernel_cos+0x234>)
  408bc4:	4616      	mov	r6, r2
  408bc6:	461f      	mov	r7, r3
  408bc8:	f001 f99c 	bl	409f04 <__aeabi_dsub>
  408bcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
  408bd0:	2200      	movs	r2, #0
  408bd2:	4b29      	ldr	r3, [pc, #164]	; (408c78 <__kernel_cos+0x230>)
  408bd4:	4640      	mov	r0, r8
  408bd6:	4649      	mov	r1, r9
  408bd8:	f001 fb48 	bl	40a26c <__aeabi_dmul>
  408bdc:	4632      	mov	r2, r6
  408bde:	463b      	mov	r3, r7
  408be0:	f001 f990 	bl	409f04 <__aeabi_dsub>
  408be4:	e9dd 2300 	ldrd	r2, r3, [sp]
  408be8:	4606      	mov	r6, r0
  408bea:	460f      	mov	r7, r1
  408bec:	4640      	mov	r0, r8
  408bee:	4649      	mov	r1, r9
  408bf0:	f001 fb3c 	bl	40a26c <__aeabi_dmul>
  408bf4:	4652      	mov	r2, sl
  408bf6:	4680      	mov	r8, r0
  408bf8:	4689      	mov	r9, r1
  408bfa:	465b      	mov	r3, fp
  408bfc:	4628      	mov	r0, r5
  408bfe:	4621      	mov	r1, r4
  408c00:	f001 fb34 	bl	40a26c <__aeabi_dmul>
  408c04:	4602      	mov	r2, r0
  408c06:	460b      	mov	r3, r1
  408c08:	4640      	mov	r0, r8
  408c0a:	4649      	mov	r1, r9
  408c0c:	f001 f97a 	bl	409f04 <__aeabi_dsub>
  408c10:	4602      	mov	r2, r0
  408c12:	460b      	mov	r3, r1
  408c14:	4630      	mov	r0, r6
  408c16:	4639      	mov	r1, r7
  408c18:	f001 f974 	bl	409f04 <__aeabi_dsub>
  408c1c:	4602      	mov	r2, r0
  408c1e:	460b      	mov	r3, r1
  408c20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  408c24:	f001 f96e 	bl	409f04 <__aeabi_dsub>
  408c28:	b005      	add	sp, #20
  408c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408c2e:	4b16      	ldr	r3, [pc, #88]	; (408c88 <__kernel_cos+0x240>)
  408c30:	4f16      	ldr	r7, [pc, #88]	; (408c8c <__kernel_cos+0x244>)
  408c32:	e9cd 2302 	strd	r2, r3, [sp, #8]
  408c36:	2600      	movs	r6, #0
  408c38:	e7ca      	b.n	408bd0 <__kernel_cos+0x188>
  408c3a:	4910      	ldr	r1, [pc, #64]	; (408c7c <__kernel_cos+0x234>)
  408c3c:	2000      	movs	r0, #0
  408c3e:	b005      	add	sp, #20
  408c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408c44:	f3af 8000 	nop.w
  408c48:	be8838d4 	.word	0xbe8838d4
  408c4c:	bda8fae9 	.word	0xbda8fae9
  408c50:	bdb4b1c4 	.word	0xbdb4b1c4
  408c54:	3e21ee9e 	.word	0x3e21ee9e
  408c58:	809c52ad 	.word	0x809c52ad
  408c5c:	3e927e4f 	.word	0x3e927e4f
  408c60:	19cb1590 	.word	0x19cb1590
  408c64:	3efa01a0 	.word	0x3efa01a0
  408c68:	16c15177 	.word	0x16c15177
  408c6c:	3f56c16c 	.word	0x3f56c16c
  408c70:	5555554c 	.word	0x5555554c
  408c74:	3fa55555 	.word	0x3fa55555
  408c78:	3fe00000 	.word	0x3fe00000
  408c7c:	3ff00000 	.word	0x3ff00000
  408c80:	3fd33332 	.word	0x3fd33332
  408c84:	3fe90000 	.word	0x3fe90000
  408c88:	3fe70000 	.word	0x3fe70000
  408c8c:	3fd20000 	.word	0x3fd20000

00408c90 <__kernel_rem_pio2>:
  408c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408c94:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
  408c98:	4c79      	ldr	r4, [pc, #484]	; (408e80 <__kernel_rem_pio2+0x1f0>)
  408c9a:	9ea6      	ldr	r6, [sp, #664]	; 0x298
  408c9c:	4d79      	ldr	r5, [pc, #484]	; (408e84 <__kernel_rem_pio2+0x1f4>)
  408c9e:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
  408ca2:	9409      	str	r4, [sp, #36]	; 0x24
  408ca4:	4626      	mov	r6, r4
  408ca6:	1ed4      	subs	r4, r2, #3
  408ca8:	fb85 7504 	smull	r7, r5, r5, r4
  408cac:	17e4      	asrs	r4, r4, #31
  408cae:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
  408cb2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  408cb6:	461d      	mov	r5, r3
  408cb8:	930c      	str	r3, [sp, #48]	; 0x30
  408cba:	1c63      	adds	r3, r4, #1
  408cbc:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
  408cc0:	3d01      	subs	r5, #1
  408cc2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  408cc6:	9308      	str	r3, [sp, #32]
  408cc8:	462b      	mov	r3, r5
  408cca:	940d      	str	r4, [sp, #52]	; 0x34
  408ccc:	9502      	str	r5, [sp, #8]
  408cce:	1b65      	subs	r5, r4, r5
  408cd0:	18f4      	adds	r4, r6, r3
  408cd2:	9004      	str	r0, [sp, #16]
  408cd4:	910a      	str	r1, [sp, #40]	; 0x28
  408cd6:	d416      	bmi.n	408d06 <__kernel_rem_pio2+0x76>
  408cd8:	442c      	add	r4, r5
  408cda:	3401      	adds	r4, #1
  408cdc:	ae22      	add	r6, sp, #136	; 0x88
  408cde:	9fa7      	ldr	r7, [sp, #668]	; 0x29c
  408ce0:	e008      	b.n	408cf4 <__kernel_rem_pio2+0x64>
  408ce2:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
  408ce6:	f001 fa5b 	bl	40a1a0 <__aeabi_i2d>
  408cea:	3501      	adds	r5, #1
  408cec:	42a5      	cmp	r5, r4
  408cee:	e9e6 0102 	strd	r0, r1, [r6, #8]!
  408cf2:	d008      	beq.n	408d06 <__kernel_rem_pio2+0x76>
  408cf4:	2d00      	cmp	r5, #0
  408cf6:	daf4      	bge.n	408ce2 <__kernel_rem_pio2+0x52>
  408cf8:	3501      	adds	r5, #1
  408cfa:	2000      	movs	r0, #0
  408cfc:	2100      	movs	r1, #0
  408cfe:	42a5      	cmp	r5, r4
  408d00:	e9e6 0102 	strd	r0, r1, [r6, #8]!
  408d04:	d1f6      	bne.n	408cf4 <__kernel_rem_pio2+0x64>
  408d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408d08:	2b00      	cmp	r3, #0
  408d0a:	db31      	blt.n	408d70 <__kernel_rem_pio2+0xe0>
  408d0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408d0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408d10:	a974      	add	r1, sp, #464	; 0x1d0
  408d12:	eb01 0bc2 	add.w	fp, r1, r2, lsl #3
  408d16:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
  408d1a:	9a02      	ldr	r2, [sp, #8]
  408d1c:	a924      	add	r1, sp, #144	; 0x90
  408d1e:	00db      	lsls	r3, r3, #3
  408d20:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
  408d24:	9301      	str	r3, [sp, #4]
  408d26:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
  408d2a:	9b02      	ldr	r3, [sp, #8]
  408d2c:	2b00      	cmp	r3, #0
  408d2e:	f2c0 8190 	blt.w	409052 <__kernel_rem_pio2+0x3c2>
  408d32:	9b04      	ldr	r3, [sp, #16]
  408d34:	f1a3 0508 	sub.w	r5, r3, #8
  408d38:	9b01      	ldr	r3, [sp, #4]
  408d3a:	464c      	mov	r4, r9
  408d3c:	eb09 0803 	add.w	r8, r9, r3
  408d40:	2600      	movs	r6, #0
  408d42:	2700      	movs	r7, #0
  408d44:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
  408d48:	e874 0102 	ldrd	r0, r1, [r4], #-8
  408d4c:	f001 fa8e 	bl	40a26c <__aeabi_dmul>
  408d50:	4602      	mov	r2, r0
  408d52:	460b      	mov	r3, r1
  408d54:	4630      	mov	r0, r6
  408d56:	4639      	mov	r1, r7
  408d58:	f001 f8d6 	bl	409f08 <__adddf3>
  408d5c:	4544      	cmp	r4, r8
  408d5e:	4606      	mov	r6, r0
  408d60:	460f      	mov	r7, r1
  408d62:	d1ef      	bne.n	408d44 <__kernel_rem_pio2+0xb4>
  408d64:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  408d68:	45da      	cmp	sl, fp
  408d6a:	f109 0908 	add.w	r9, r9, #8
  408d6e:	d1dc      	bne.n	408d2a <__kernel_rem_pio2+0x9a>
  408d70:	9d09      	ldr	r5, [sp, #36]	; 0x24
  408d72:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
  408d76:	3b02      	subs	r3, #2
  408d78:	009b      	lsls	r3, r3, #2
  408d7a:	1d1a      	adds	r2, r3, #4
  408d7c:	a910      	add	r1, sp, #64	; 0x40
  408d7e:	440a      	add	r2, r1
  408d80:	440b      	add	r3, r1
  408d82:	920f      	str	r2, [sp, #60]	; 0x3c
  408d84:	930e      	str	r3, [sp, #56]	; 0x38
  408d86:	ab9c      	add	r3, sp, #624	; 0x270
  408d88:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  408d8c:	2d00      	cmp	r5, #0
  408d8e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
  408d92:	dd2b      	ble.n	408dec <__kernel_rem_pio2+0x15c>
  408d94:	ab9c      	add	r3, sp, #624	; 0x270
  408d96:	eb03 04c5 	add.w	r4, r3, r5, lsl #3
  408d9a:	3ca8      	subs	r4, #168	; 0xa8
  408d9c:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
  408da0:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
  408da4:	2200      	movs	r2, #0
  408da6:	4b38      	ldr	r3, [pc, #224]	; (408e88 <__kernel_rem_pio2+0x1f8>)
  408da8:	4630      	mov	r0, r6
  408daa:	4639      	mov	r1, r7
  408dac:	f001 fa5e 	bl	40a26c <__aeabi_dmul>
  408db0:	f001 fd0c 	bl	40a7cc <__aeabi_d2iz>
  408db4:	f001 f9f4 	bl	40a1a0 <__aeabi_i2d>
  408db8:	2200      	movs	r2, #0
  408dba:	4b34      	ldr	r3, [pc, #208]	; (408e8c <__kernel_rem_pio2+0x1fc>)
  408dbc:	4680      	mov	r8, r0
  408dbe:	4689      	mov	r9, r1
  408dc0:	f001 fa54 	bl	40a26c <__aeabi_dmul>
  408dc4:	4602      	mov	r2, r0
  408dc6:	460b      	mov	r3, r1
  408dc8:	4630      	mov	r0, r6
  408dca:	4639      	mov	r1, r7
  408dcc:	f001 f89a 	bl	409f04 <__aeabi_dsub>
  408dd0:	f001 fcfc 	bl	40a7cc <__aeabi_d2iz>
  408dd4:	e874 2302 	ldrd	r2, r3, [r4], #-8
  408dd8:	f84a 0f04 	str.w	r0, [sl, #4]!
  408ddc:	4649      	mov	r1, r9
  408dde:	4640      	mov	r0, r8
  408de0:	f001 f892 	bl	409f08 <__adddf3>
  408de4:	455c      	cmp	r4, fp
  408de6:	4606      	mov	r6, r0
  408de8:	460f      	mov	r7, r1
  408dea:	d1db      	bne.n	408da4 <__kernel_rem_pio2+0x114>
  408dec:	9c08      	ldr	r4, [sp, #32]
  408dee:	4630      	mov	r0, r6
  408df0:	4639      	mov	r1, r7
  408df2:	4622      	mov	r2, r4
  408df4:	f000 fffc 	bl	409df0 <scalbn>
  408df8:	2200      	movs	r2, #0
  408dfa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  408dfe:	4606      	mov	r6, r0
  408e00:	460f      	mov	r7, r1
  408e02:	f001 fa33 	bl	40a26c <__aeabi_dmul>
  408e06:	f000 ff63 	bl	409cd0 <floor>
  408e0a:	2200      	movs	r2, #0
  408e0c:	4b20      	ldr	r3, [pc, #128]	; (408e90 <__kernel_rem_pio2+0x200>)
  408e0e:	f001 fa2d 	bl	40a26c <__aeabi_dmul>
  408e12:	4602      	mov	r2, r0
  408e14:	460b      	mov	r3, r1
  408e16:	4630      	mov	r0, r6
  408e18:	4639      	mov	r1, r7
  408e1a:	f001 f873 	bl	409f04 <__aeabi_dsub>
  408e1e:	460f      	mov	r7, r1
  408e20:	4606      	mov	r6, r0
  408e22:	f001 fcd3 	bl	40a7cc <__aeabi_d2iz>
  408e26:	4681      	mov	r9, r0
  408e28:	f001 f9ba 	bl	40a1a0 <__aeabi_i2d>
  408e2c:	4602      	mov	r2, r0
  408e2e:	460b      	mov	r3, r1
  408e30:	4630      	mov	r0, r6
  408e32:	4639      	mov	r1, r7
  408e34:	f001 f866 	bl	409f04 <__aeabi_dsub>
  408e38:	2c00      	cmp	r4, #0
  408e3a:	4606      	mov	r6, r0
  408e3c:	460f      	mov	r7, r1
  408e3e:	f340 80ef 	ble.w	409020 <__kernel_rem_pio2+0x390>
  408e42:	1e69      	subs	r1, r5, #1
  408e44:	aa10      	add	r2, sp, #64	; 0x40
  408e46:	f1c4 0318 	rsb	r3, r4, #24
  408e4a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  408e4e:	fa42 f003 	asr.w	r0, r2, r3
  408e52:	fa00 f303 	lsl.w	r3, r0, r3
  408e56:	1ad3      	subs	r3, r2, r3
  408e58:	aa10      	add	r2, sp, #64	; 0x40
  408e5a:	f1c4 0817 	rsb	r8, r4, #23
  408e5e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  408e62:	4481      	add	r9, r0
  408e64:	fa43 f808 	asr.w	r8, r3, r8
  408e68:	f1b8 0f00 	cmp.w	r8, #0
  408e6c:	dd3d      	ble.n	408eea <__kernel_rem_pio2+0x25a>
  408e6e:	2d00      	cmp	r5, #0
  408e70:	f109 0901 	add.w	r9, r9, #1
  408e74:	f340 82d6 	ble.w	409424 <__kernel_rem_pio2+0x794>
  408e78:	2200      	movs	r2, #0
  408e7a:	4614      	mov	r4, r2
  408e7c:	a90f      	add	r1, sp, #60	; 0x3c
  408e7e:	e011      	b.n	408ea4 <__kernel_rem_pio2+0x214>
  408e80:	0040b7dc 	.word	0x0040b7dc
  408e84:	2aaaaaab 	.word	0x2aaaaaab
  408e88:	3e700000 	.word	0x3e700000
  408e8c:	41700000 	.word	0x41700000
  408e90:	40200000 	.word	0x40200000
  408e94:	f1c3 7080 	rsb	r0, r3, #16777216	; 0x1000000
  408e98:	b10b      	cbz	r3, 408e9e <__kernel_rem_pio2+0x20e>
  408e9a:	6008      	str	r0, [r1, #0]
  408e9c:	2401      	movs	r4, #1
  408e9e:	3201      	adds	r2, #1
  408ea0:	4295      	cmp	r5, r2
  408ea2:	dd0d      	ble.n	408ec0 <__kernel_rem_pio2+0x230>
  408ea4:	f851 3f04 	ldr.w	r3, [r1, #4]!
  408ea8:	2c00      	cmp	r4, #0
  408eaa:	d0f3      	beq.n	408e94 <__kernel_rem_pio2+0x204>
  408eac:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
  408eb0:	3201      	adds	r2, #1
  408eb2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
  408eb6:	4295      	cmp	r5, r2
  408eb8:	600b      	str	r3, [r1, #0]
  408eba:	f04f 0401 	mov.w	r4, #1
  408ebe:	dcf1      	bgt.n	408ea4 <__kernel_rem_pio2+0x214>
  408ec0:	9b08      	ldr	r3, [sp, #32]
  408ec2:	2b00      	cmp	r3, #0
  408ec4:	dd0d      	ble.n	408ee2 <__kernel_rem_pio2+0x252>
  408ec6:	2b01      	cmp	r3, #1
  408ec8:	f000 80b2 	beq.w	409030 <__kernel_rem_pio2+0x3a0>
  408ecc:	2b02      	cmp	r3, #2
  408ece:	d108      	bne.n	408ee2 <__kernel_rem_pio2+0x252>
  408ed0:	1e6a      	subs	r2, r5, #1
  408ed2:	ab10      	add	r3, sp, #64	; 0x40
  408ed4:	a910      	add	r1, sp, #64	; 0x40
  408ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408eda:	f3c3 0315 	ubfx	r3, r3, #0, #22
  408ede:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  408ee2:	f1b8 0f02 	cmp.w	r8, #2
  408ee6:	f000 8082 	beq.w	408fee <__kernel_rem_pio2+0x35e>
  408eea:	2200      	movs	r2, #0
  408eec:	2300      	movs	r3, #0
  408eee:	4630      	mov	r0, r6
  408ef0:	4639      	mov	r1, r7
  408ef2:	f001 fc23 	bl	40a73c <__aeabi_dcmpeq>
  408ef6:	2800      	cmp	r0, #0
  408ef8:	f000 825e 	beq.w	4093b8 <__kernel_rem_pio2+0x728>
  408efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408efe:	f105 3bff 	add.w	fp, r5, #4294967295
  408f02:	455b      	cmp	r3, fp
  408f04:	dc10      	bgt.n	408f28 <__kernel_rem_pio2+0x298>
  408f06:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
  408f0a:	aa10      	add	r2, sp, #64	; 0x40
  408f0c:	3b01      	subs	r3, #1
  408f0e:	980f      	ldr	r0, [sp, #60]	; 0x3c
  408f10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  408f14:	2200      	movs	r2, #0
  408f16:	f853 1904 	ldr.w	r1, [r3], #-4
  408f1a:	4283      	cmp	r3, r0
  408f1c:	ea42 0201 	orr.w	r2, r2, r1
  408f20:	d1f9      	bne.n	408f16 <__kernel_rem_pio2+0x286>
  408f22:	2a00      	cmp	r2, #0
  408f24:	f040 80b2 	bne.w	40908c <__kernel_rem_pio2+0x3fc>
  408f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408f2a:	aa10      	add	r2, sp, #64	; 0x40
  408f2c:	3b01      	subs	r3, #1
  408f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  408f32:	2b00      	cmp	r3, #0
  408f34:	f040 8274 	bne.w	409420 <__kernel_rem_pio2+0x790>
  408f38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408f3a:	2301      	movs	r3, #1
  408f3c:	f852 1904 	ldr.w	r1, [r2], #-4
  408f40:	3301      	adds	r3, #1
  408f42:	2900      	cmp	r1, #0
  408f44:	d0fa      	beq.n	408f3c <__kernel_rem_pio2+0x2ac>
  408f46:	18e9      	adds	r1, r5, r3
  408f48:	1c6a      	adds	r2, r5, #1
  408f4a:	428a      	cmp	r2, r1
  408f4c:	910b      	str	r1, [sp, #44]	; 0x2c
  408f4e:	dc49      	bgt.n	408fe4 <__kernel_rem_pio2+0x354>
  408f50:	990d      	ldr	r1, [sp, #52]	; 0x34
  408f52:	980c      	ldr	r0, [sp, #48]	; 0x30
  408f54:	1851      	adds	r1, r2, r1
  408f56:	00db      	lsls	r3, r3, #3
  408f58:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
  408f5c:	9305      	str	r3, [sp, #20]
  408f5e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
  408f60:	4405      	add	r5, r0
  408f62:	3901      	subs	r1, #1
  408f64:	00e8      	lsls	r0, r5, #3
  408f66:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
  408f6a:	ab24      	add	r3, sp, #144	; 0x90
  408f6c:	00d2      	lsls	r2, r2, #3
  408f6e:	eb03 0b00 	add.w	fp, r3, r0
  408f72:	ab74      	add	r3, sp, #464	; 0x1d0
  408f74:	4413      	add	r3, r2
  408f76:	9301      	str	r3, [sp, #4]
  408f78:	f1a2 0308 	sub.w	r3, r2, #8
  408f7c:	9006      	str	r0, [sp, #24]
  408f7e:	9307      	str	r3, [sp, #28]
  408f80:	f04f 0900 	mov.w	r9, #0
  408f84:	f85a 0f04 	ldr.w	r0, [sl, #4]!
  408f88:	f001 f90a 	bl	40a1a0 <__aeabi_i2d>
  408f8c:	9b02      	ldr	r3, [sp, #8]
  408f8e:	2b00      	cmp	r3, #0
  408f90:	e8eb 0102 	strd	r0, r1, [fp], #8
  408f94:	db28      	blt.n	408fe8 <__kernel_rem_pio2+0x358>
  408f96:	9b06      	ldr	r3, [sp, #24]
  408f98:	eb03 0409 	add.w	r4, r3, r9
  408f9c:	9b07      	ldr	r3, [sp, #28]
  408f9e:	eb09 0803 	add.w	r8, r9, r3
  408fa2:	ab24      	add	r3, sp, #144	; 0x90
  408fa4:	441c      	add	r4, r3
  408fa6:	4498      	add	r8, r3
  408fa8:	9b04      	ldr	r3, [sp, #16]
  408faa:	2600      	movs	r6, #0
  408fac:	f1a3 0508 	sub.w	r5, r3, #8
  408fb0:	2700      	movs	r7, #0
  408fb2:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
  408fb6:	e874 0102 	ldrd	r0, r1, [r4], #-8
  408fba:	f001 f957 	bl	40a26c <__aeabi_dmul>
  408fbe:	4602      	mov	r2, r0
  408fc0:	460b      	mov	r3, r1
  408fc2:	4630      	mov	r0, r6
  408fc4:	4639      	mov	r1, r7
  408fc6:	f000 ff9f 	bl	409f08 <__adddf3>
  408fca:	4544      	cmp	r4, r8
  408fcc:	4606      	mov	r6, r0
  408fce:	460f      	mov	r7, r1
  408fd0:	d1ef      	bne.n	408fb2 <__kernel_rem_pio2+0x322>
  408fd2:	9b01      	ldr	r3, [sp, #4]
  408fd4:	e8e3 6702 	strd	r6, r7, [r3], #8
  408fd8:	9301      	str	r3, [sp, #4]
  408fda:	9b05      	ldr	r3, [sp, #20]
  408fdc:	f109 0908 	add.w	r9, r9, #8
  408fe0:	4599      	cmp	r9, r3
  408fe2:	d1cf      	bne.n	408f84 <__kernel_rem_pio2+0x2f4>
  408fe4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  408fe6:	e6ce      	b.n	408d86 <__kernel_rem_pio2+0xf6>
  408fe8:	2600      	movs	r6, #0
  408fea:	2700      	movs	r7, #0
  408fec:	e7f1      	b.n	408fd2 <__kernel_rem_pio2+0x342>
  408fee:	4632      	mov	r2, r6
  408ff0:	463b      	mov	r3, r7
  408ff2:	2000      	movs	r0, #0
  408ff4:	49b0      	ldr	r1, [pc, #704]	; (4092b8 <__kernel_rem_pio2+0x628>)
  408ff6:	f000 ff85 	bl	409f04 <__aeabi_dsub>
  408ffa:	4606      	mov	r6, r0
  408ffc:	460f      	mov	r7, r1
  408ffe:	2c00      	cmp	r4, #0
  409000:	f43f af73 	beq.w	408eea <__kernel_rem_pio2+0x25a>
  409004:	9a08      	ldr	r2, [sp, #32]
  409006:	49ac      	ldr	r1, [pc, #688]	; (4092b8 <__kernel_rem_pio2+0x628>)
  409008:	2000      	movs	r0, #0
  40900a:	f000 fef1 	bl	409df0 <scalbn>
  40900e:	4602      	mov	r2, r0
  409010:	460b      	mov	r3, r1
  409012:	4630      	mov	r0, r6
  409014:	4639      	mov	r1, r7
  409016:	f000 ff75 	bl	409f04 <__aeabi_dsub>
  40901a:	4606      	mov	r6, r0
  40901c:	460f      	mov	r7, r1
  40901e:	e764      	b.n	408eea <__kernel_rem_pio2+0x25a>
  409020:	d110      	bne.n	409044 <__kernel_rem_pio2+0x3b4>
  409022:	1e6b      	subs	r3, r5, #1
  409024:	aa10      	add	r2, sp, #64	; 0x40
  409026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40902a:	ea4f 58e3 	mov.w	r8, r3, asr #23
  40902e:	e71b      	b.n	408e68 <__kernel_rem_pio2+0x1d8>
  409030:	1e6a      	subs	r2, r5, #1
  409032:	ab10      	add	r3, sp, #64	; 0x40
  409034:	a910      	add	r1, sp, #64	; 0x40
  409036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40903a:	f3c3 0316 	ubfx	r3, r3, #0, #23
  40903e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  409042:	e74e      	b.n	408ee2 <__kernel_rem_pio2+0x252>
  409044:	2200      	movs	r2, #0
  409046:	4b9d      	ldr	r3, [pc, #628]	; (4092bc <__kernel_rem_pio2+0x62c>)
  409048:	f001 fb96 	bl	40a778 <__aeabi_dcmpge>
  40904c:	b958      	cbnz	r0, 409066 <__kernel_rem_pio2+0x3d6>
  40904e:	4680      	mov	r8, r0
  409050:	e74b      	b.n	408eea <__kernel_rem_pio2+0x25a>
  409052:	2600      	movs	r6, #0
  409054:	2700      	movs	r7, #0
  409056:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  40905a:	45da      	cmp	sl, fp
  40905c:	f109 0908 	add.w	r9, r9, #8
  409060:	f47f ae63 	bne.w	408d2a <__kernel_rem_pio2+0x9a>
  409064:	e684      	b.n	408d70 <__kernel_rem_pio2+0xe0>
  409066:	2d00      	cmp	r5, #0
  409068:	f109 0901 	add.w	r9, r9, #1
  40906c:	bfc8      	it	gt
  40906e:	f04f 0802 	movgt.w	r8, #2
  409072:	f73f af01 	bgt.w	408e78 <__kernel_rem_pio2+0x1e8>
  409076:	4632      	mov	r2, r6
  409078:	463b      	mov	r3, r7
  40907a:	2000      	movs	r0, #0
  40907c:	498e      	ldr	r1, [pc, #568]	; (4092b8 <__kernel_rem_pio2+0x628>)
  40907e:	f000 ff41 	bl	409f04 <__aeabi_dsub>
  409082:	f04f 0802 	mov.w	r8, #2
  409086:	4606      	mov	r6, r0
  409088:	460f      	mov	r7, r1
  40908a:	e72e      	b.n	408eea <__kernel_rem_pio2+0x25a>
  40908c:	ab10      	add	r3, sp, #64	; 0x40
  40908e:	9a08      	ldr	r2, [sp, #32]
  409090:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
  409094:	f8cd 9014 	str.w	r9, [sp, #20]
  409098:	3a18      	subs	r2, #24
  40909a:	f8cd 8004 	str.w	r8, [sp, #4]
  40909e:	9208      	str	r2, [sp, #32]
  4090a0:	b96b      	cbnz	r3, 4090be <__kernel_rem_pio2+0x42e>
  4090a2:	f10b 4380 	add.w	r3, fp, #1073741824	; 0x40000000
  4090a6:	3b01      	subs	r3, #1
  4090a8:	a910      	add	r1, sp, #64	; 0x40
  4090aa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  4090ae:	f853 1904 	ldr.w	r1, [r3], #-4
  4090b2:	f10b 3bff 	add.w	fp, fp, #4294967295
  4090b6:	3a18      	subs	r2, #24
  4090b8:	2900      	cmp	r1, #0
  4090ba:	d0f8      	beq.n	4090ae <__kernel_rem_pio2+0x41e>
  4090bc:	9208      	str	r2, [sp, #32]
  4090be:	9a08      	ldr	r2, [sp, #32]
  4090c0:	497d      	ldr	r1, [pc, #500]	; (4092b8 <__kernel_rem_pio2+0x628>)
  4090c2:	2000      	movs	r0, #0
  4090c4:	f000 fe94 	bl	409df0 <scalbn>
  4090c8:	f1bb 0f00 	cmp.w	fp, #0
  4090cc:	4604      	mov	r4, r0
  4090ce:	460d      	mov	r5, r1
  4090d0:	f2c0 81b8 	blt.w	409444 <__kernel_rem_pio2+0x7b4>
  4090d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
  4090d8:	f50d 78e8 	add.w	r8, sp, #464	; 0x1d0
  4090dc:	aa10      	add	r2, sp, #64	; 0x40
  4090de:	eb02 068b 	add.w	r6, r2, fp, lsl #2
  4090e2:	eb08 0903 	add.w	r9, r8, r3
  4090e6:	9304      	str	r3, [sp, #16]
  4090e8:	3604      	adds	r6, #4
  4090ea:	f109 0708 	add.w	r7, r9, #8
  4090ee:	f856 0d04 	ldr.w	r0, [r6, #-4]!
  4090f2:	f001 f855 	bl	40a1a0 <__aeabi_i2d>
  4090f6:	4622      	mov	r2, r4
  4090f8:	462b      	mov	r3, r5
  4090fa:	f001 f8b7 	bl	40a26c <__aeabi_dmul>
  4090fe:	2200      	movs	r2, #0
  409100:	e967 0102 	strd	r0, r1, [r7, #-8]!
  409104:	4b6e      	ldr	r3, [pc, #440]	; (4092c0 <__kernel_rem_pio2+0x630>)
  409106:	4620      	mov	r0, r4
  409108:	4629      	mov	r1, r5
  40910a:	f001 f8af 	bl	40a26c <__aeabi_dmul>
  40910e:	45b8      	cmp	r8, r7
  409110:	4604      	mov	r4, r0
  409112:	460d      	mov	r5, r1
  409114:	d1eb      	bne.n	4090ee <__kernel_rem_pio2+0x45e>
  409116:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
  40911a:	464b      	mov	r3, r9
  40911c:	f8cd a008 	str.w	sl, [sp, #8]
  409120:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  409124:	f8cd b018 	str.w	fp, [sp, #24]
  409128:	f04f 0900 	mov.w	r9, #0
  40912c:	469b      	mov	fp, r3
  40912e:	f1ba 0f00 	cmp.w	sl, #0
  409132:	f2c0 812a 	blt.w	40938a <__kernel_rem_pio2+0x6fa>
  409136:	f8df 818c 	ldr.w	r8, [pc, #396]	; 4092c4 <__kernel_rem_pio2+0x634>
  40913a:	465d      	mov	r5, fp
  40913c:	a35c      	add	r3, pc, #368	; (adr r3, 4092b0 <__kernel_rem_pio2+0x620>)
  40913e:	e9d3 2300 	ldrd	r2, r3, [r3]
  409142:	2600      	movs	r6, #0
  409144:	2700      	movs	r7, #0
  409146:	2400      	movs	r4, #0
  409148:	e003      	b.n	409152 <__kernel_rem_pio2+0x4c2>
  40914a:	45a1      	cmp	r9, r4
  40914c:	db10      	blt.n	409170 <__kernel_rem_pio2+0x4e0>
  40914e:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
  409152:	e8f5 0102 	ldrd	r0, r1, [r5], #8
  409156:	f001 f889 	bl	40a26c <__aeabi_dmul>
  40915a:	4602      	mov	r2, r0
  40915c:	460b      	mov	r3, r1
  40915e:	4630      	mov	r0, r6
  409160:	4639      	mov	r1, r7
  409162:	f000 fed1 	bl	409f08 <__adddf3>
  409166:	3401      	adds	r4, #1
  409168:	45a2      	cmp	sl, r4
  40916a:	4606      	mov	r6, r0
  40916c:	460f      	mov	r7, r1
  40916e:	daec      	bge.n	40914a <__kernel_rem_pio2+0x4ba>
  409170:	9b02      	ldr	r3, [sp, #8]
  409172:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  409176:	f1ab 0b08 	sub.w	fp, fp, #8
  40917a:	e9c3 6700 	strd	r6, r7, [r3]
  40917e:	ab72      	add	r3, sp, #456	; 0x1c8
  409180:	455b      	cmp	r3, fp
  409182:	f109 0901 	add.w	r9, r9, #1
  409186:	d1d2      	bne.n	40912e <__kernel_rem_pio2+0x49e>
  409188:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  40918a:	f8dd b018 	ldr.w	fp, [sp, #24]
  40918e:	f8dd a008 	ldr.w	sl, [sp, #8]
  409192:	2b03      	cmp	r3, #3
  409194:	f200 8083 	bhi.w	40929e <__kernel_rem_pio2+0x60e>
  409198:	e8df f013 	tbh	[pc, r3, lsl #1]
  40919c:	009600d5 	.word	0x009600d5
  4091a0:	00040096 	.word	0x00040096
  4091a4:	f1bb 0f00 	cmp.w	fp, #0
  4091a8:	f340 8156 	ble.w	409458 <__kernel_rem_pio2+0x7c8>
  4091ac:	9b04      	ldr	r3, [sp, #16]
  4091ae:	f8cd b008 	str.w	fp, [sp, #8]
  4091b2:	eb0a 0803 	add.w	r8, sl, r3
  4091b6:	e9d8 6700 	ldrd	r6, r7, [r8]
  4091ba:	46d3      	mov	fp, sl
  4091bc:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
  4091c0:	4632      	mov	r2, r6
  4091c2:	463b      	mov	r3, r7
  4091c4:	4648      	mov	r0, r9
  4091c6:	4651      	mov	r1, sl
  4091c8:	f000 fe9e 	bl	409f08 <__adddf3>
  4091cc:	4604      	mov	r4, r0
  4091ce:	460d      	mov	r5, r1
  4091d0:	4602      	mov	r2, r0
  4091d2:	460b      	mov	r3, r1
  4091d4:	4648      	mov	r0, r9
  4091d6:	4651      	mov	r1, sl
  4091d8:	f000 fe94 	bl	409f04 <__aeabi_dsub>
  4091dc:	4632      	mov	r2, r6
  4091de:	463b      	mov	r3, r7
  4091e0:	f000 fe92 	bl	409f08 <__adddf3>
  4091e4:	e9c8 0100 	strd	r0, r1, [r8]
  4091e8:	e968 4502 	strd	r4, r5, [r8, #-8]!
  4091ec:	45c3      	cmp	fp, r8
  4091ee:	4626      	mov	r6, r4
  4091f0:	462f      	mov	r7, r5
  4091f2:	d1e3      	bne.n	4091bc <__kernel_rem_pio2+0x52c>
  4091f4:	46da      	mov	sl, fp
  4091f6:	f8dd b008 	ldr.w	fp, [sp, #8]
  4091fa:	f1bb 0f01 	cmp.w	fp, #1
  4091fe:	f340 812b 	ble.w	409458 <__kernel_rem_pio2+0x7c8>
  409202:	9b04      	ldr	r3, [sp, #16]
  409204:	4453      	add	r3, sl
  409206:	e9d3 6700 	ldrd	r6, r7, [r3]
  40920a:	4698      	mov	r8, r3
  40920c:	4699      	mov	r9, r3
  40920e:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
  409212:	e959 3402 	ldrd	r3, r4, [r9, #-8]
  409216:	4630      	mov	r0, r6
  409218:	e9cd 3402 	strd	r3, r4, [sp, #8]
  40921c:	461a      	mov	r2, r3
  40921e:	4639      	mov	r1, r7
  409220:	4623      	mov	r3, r4
  409222:	f000 fe71 	bl	409f08 <__adddf3>
  409226:	4604      	mov	r4, r0
  409228:	460d      	mov	r5, r1
  40922a:	4602      	mov	r2, r0
  40922c:	460b      	mov	r3, r1
  40922e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409232:	f000 fe67 	bl	409f04 <__aeabi_dsub>
  409236:	4632      	mov	r2, r6
  409238:	463b      	mov	r3, r7
  40923a:	f000 fe65 	bl	409f08 <__adddf3>
  40923e:	e9c9 0100 	strd	r0, r1, [r9]
  409242:	e969 4502 	strd	r4, r5, [r9, #-8]!
  409246:	45cb      	cmp	fp, r9
  409248:	4626      	mov	r6, r4
  40924a:	462f      	mov	r7, r5
  40924c:	d1e1      	bne.n	409212 <__kernel_rem_pio2+0x582>
  40924e:	2300      	movs	r3, #0
  409250:	f108 0808 	add.w	r8, r8, #8
  409254:	461d      	mov	r5, r3
  409256:	ac50      	add	r4, sp, #320	; 0x140
  409258:	4618      	mov	r0, r3
  40925a:	4629      	mov	r1, r5
  40925c:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
  409260:	f000 fe52 	bl	409f08 <__adddf3>
  409264:	4544      	cmp	r4, r8
  409266:	4603      	mov	r3, r0
  409268:	460d      	mov	r5, r1
  40926a:	d1f5      	bne.n	409258 <__kernel_rem_pio2+0x5c8>
  40926c:	9a01      	ldr	r2, [sp, #4]
  40926e:	2a00      	cmp	r2, #0
  409270:	f000 80da 	beq.w	409428 <__kernel_rem_pio2+0x798>
  409274:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  409276:	f8da 4004 	ldr.w	r4, [sl, #4]
  40927a:	f8da 200c 	ldr.w	r2, [sl, #12]
  40927e:	f8da 1000 	ldr.w	r1, [sl]
  409282:	f8da 0008 	ldr.w	r0, [sl, #8]
  409286:	613b      	str	r3, [r7, #16]
  409288:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
  40928c:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
  409290:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
  409294:	617d      	str	r5, [r7, #20]
  409296:	607c      	str	r4, [r7, #4]
  409298:	60fb      	str	r3, [r7, #12]
  40929a:	6039      	str	r1, [r7, #0]
  40929c:	60b8      	str	r0, [r7, #8]
  40929e:	9b05      	ldr	r3, [sp, #20]
  4092a0:	f003 0007 	and.w	r0, r3, #7
  4092a4:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  4092a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4092ac:	f3af 8000 	nop.w
  4092b0:	40000000 	.word	0x40000000
  4092b4:	3ff921fb 	.word	0x3ff921fb
  4092b8:	3ff00000 	.word	0x3ff00000
  4092bc:	3fe00000 	.word	0x3fe00000
  4092c0:	3e700000 	.word	0x3e700000
  4092c4:	0040b7f0 	.word	0x0040b7f0
  4092c8:	9c04      	ldr	r4, [sp, #16]
  4092ca:	2600      	movs	r6, #0
  4092cc:	3408      	adds	r4, #8
  4092ce:	4454      	add	r4, sl
  4092d0:	4633      	mov	r3, r6
  4092d2:	4630      	mov	r0, r6
  4092d4:	4619      	mov	r1, r3
  4092d6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  4092da:	f000 fe15 	bl	409f08 <__adddf3>
  4092de:	4554      	cmp	r4, sl
  4092e0:	4606      	mov	r6, r0
  4092e2:	460b      	mov	r3, r1
  4092e4:	d1f5      	bne.n	4092d2 <__kernel_rem_pio2+0x642>
  4092e6:	9a01      	ldr	r2, [sp, #4]
  4092e8:	4630      	mov	r0, r6
  4092ea:	4619      	mov	r1, r3
  4092ec:	2a00      	cmp	r2, #0
  4092ee:	d04f      	beq.n	409390 <__kernel_rem_pio2+0x700>
  4092f0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4092f2:	f103 4400 	add.w	r4, r3, #2147483648	; 0x80000000
  4092f6:	4632      	mov	r2, r6
  4092f8:	6044      	str	r4, [r0, #4]
  4092fa:	6006      	str	r6, [r0, #0]
  4092fc:	e9da 0100 	ldrd	r0, r1, [sl]
  409300:	f000 fe00 	bl	409f04 <__aeabi_dsub>
  409304:	f1bb 0f00 	cmp.w	fp, #0
  409308:	4602      	mov	r2, r0
  40930a:	460b      	mov	r3, r1
  40930c:	dd0d      	ble.n	40932a <__kernel_rem_pio2+0x69a>
  40930e:	2401      	movs	r4, #1
  409310:	4610      	mov	r0, r2
  409312:	4619      	mov	r1, r3
  409314:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
  409318:	f000 fdf6 	bl	409f08 <__adddf3>
  40931c:	3401      	adds	r4, #1
  40931e:	45a3      	cmp	fp, r4
  409320:	4602      	mov	r2, r0
  409322:	460b      	mov	r3, r1
  409324:	daf4      	bge.n	409310 <__kernel_rem_pio2+0x680>
  409326:	9901      	ldr	r1, [sp, #4]
  409328:	b109      	cbz	r1, 40932e <__kernel_rem_pio2+0x69e>
  40932a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  40932e:	4619      	mov	r1, r3
  409330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409332:	4610      	mov	r0, r2
  409334:	e9c3 0102 	strd	r0, r1, [r3, #8]
  409338:	9b05      	ldr	r3, [sp, #20]
  40933a:	f003 0007 	and.w	r0, r3, #7
  40933e:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  409342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409346:	9b04      	ldr	r3, [sp, #16]
  409348:	2200      	movs	r2, #0
  40934a:	3308      	adds	r3, #8
  40934c:	449a      	add	sl, r3
  40934e:	4613      	mov	r3, r2
  409350:	4610      	mov	r0, r2
  409352:	4619      	mov	r1, r3
  409354:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
  409358:	f000 fdd6 	bl	409f08 <__adddf3>
  40935c:	f10b 3bff 	add.w	fp, fp, #4294967295
  409360:	f1bb 3fff 	cmp.w	fp, #4294967295
  409364:	4602      	mov	r2, r0
  409366:	460b      	mov	r3, r1
  409368:	d1f2      	bne.n	409350 <__kernel_rem_pio2+0x6c0>
  40936a:	9901      	ldr	r1, [sp, #4]
  40936c:	b109      	cbz	r1, 409372 <__kernel_rem_pio2+0x6e2>
  40936e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  409372:	4619      	mov	r1, r3
  409374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409376:	4610      	mov	r0, r2
  409378:	e9c3 0100 	strd	r0, r1, [r3]
  40937c:	9b05      	ldr	r3, [sp, #20]
  40937e:	f003 0007 	and.w	r0, r3, #7
  409382:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  409386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40938a:	2600      	movs	r6, #0
  40938c:	2700      	movs	r7, #0
  40938e:	e6ef      	b.n	409170 <__kernel_rem_pio2+0x4e0>
  409390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409392:	4632      	mov	r2, r6
  409394:	e9c3 0100 	strd	r0, r1, [r3]
  409398:	460b      	mov	r3, r1
  40939a:	e9da 0100 	ldrd	r0, r1, [sl]
  40939e:	f000 fdb1 	bl	409f04 <__aeabi_dsub>
  4093a2:	f1bb 0f00 	cmp.w	fp, #0
  4093a6:	4602      	mov	r2, r0
  4093a8:	460b      	mov	r3, r1
  4093aa:	dcb0      	bgt.n	40930e <__kernel_rem_pio2+0x67e>
  4093ac:	4619      	mov	r1, r3
  4093ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4093b0:	4610      	mov	r0, r2
  4093b2:	e9c3 0102 	strd	r0, r1, [r3, #8]
  4093b6:	e7bf      	b.n	409338 <__kernel_rem_pio2+0x6a8>
  4093b8:	9b08      	ldr	r3, [sp, #32]
  4093ba:	f8cd 9014 	str.w	r9, [sp, #20]
  4093be:	425a      	negs	r2, r3
  4093c0:	4630      	mov	r0, r6
  4093c2:	4639      	mov	r1, r7
  4093c4:	f8cd 8004 	str.w	r8, [sp, #4]
  4093c8:	f000 fd12 	bl	409df0 <scalbn>
  4093cc:	2200      	movs	r2, #0
  4093ce:	4b2c      	ldr	r3, [pc, #176]	; (409480 <__kernel_rem_pio2+0x7f0>)
  4093d0:	4606      	mov	r6, r0
  4093d2:	460f      	mov	r7, r1
  4093d4:	f001 f9d0 	bl	40a778 <__aeabi_dcmpge>
  4093d8:	2800      	cmp	r0, #0
  4093da:	d040      	beq.n	40945e <__kernel_rem_pio2+0x7ce>
  4093dc:	2200      	movs	r2, #0
  4093de:	4b29      	ldr	r3, [pc, #164]	; (409484 <__kernel_rem_pio2+0x7f4>)
  4093e0:	4630      	mov	r0, r6
  4093e2:	4639      	mov	r1, r7
  4093e4:	f000 ff42 	bl	40a26c <__aeabi_dmul>
  4093e8:	f001 f9f0 	bl	40a7cc <__aeabi_d2iz>
  4093ec:	4604      	mov	r4, r0
  4093ee:	f000 fed7 	bl	40a1a0 <__aeabi_i2d>
  4093f2:	2200      	movs	r2, #0
  4093f4:	4b22      	ldr	r3, [pc, #136]	; (409480 <__kernel_rem_pio2+0x7f0>)
  4093f6:	f000 ff39 	bl	40a26c <__aeabi_dmul>
  4093fa:	460b      	mov	r3, r1
  4093fc:	4602      	mov	r2, r0
  4093fe:	4639      	mov	r1, r7
  409400:	4630      	mov	r0, r6
  409402:	f000 fd7f 	bl	409f04 <__aeabi_dsub>
  409406:	f001 f9e1 	bl	40a7cc <__aeabi_d2iz>
  40940a:	9b08      	ldr	r3, [sp, #32]
  40940c:	3318      	adds	r3, #24
  40940e:	f105 0b01 	add.w	fp, r5, #1
  409412:	9308      	str	r3, [sp, #32]
  409414:	ab10      	add	r3, sp, #64	; 0x40
  409416:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
  40941a:	f843 402b 	str.w	r4, [r3, fp, lsl #2]
  40941e:	e64e      	b.n	4090be <__kernel_rem_pio2+0x42e>
  409420:	2301      	movs	r3, #1
  409422:	e590      	b.n	408f46 <__kernel_rem_pio2+0x2b6>
  409424:	2400      	movs	r4, #0
  409426:	e54b      	b.n	408ec0 <__kernel_rem_pio2+0x230>
  409428:	4618      	mov	r0, r3
  40942a:	4629      	mov	r1, r5
  40942c:	e9da 2300 	ldrd	r2, r3, [sl]
  409430:	e9da 4502 	ldrd	r4, r5, [sl, #8]
  409434:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  409436:	e9c7 0104 	strd	r0, r1, [r7, #16]
  40943a:	e9c7 2300 	strd	r2, r3, [r7]
  40943e:	e9c7 4502 	strd	r4, r5, [r7, #8]
  409442:	e72c      	b.n	40929e <__kernel_rem_pio2+0x60e>
  409444:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  409446:	2b03      	cmp	r3, #3
  409448:	f63f af29 	bhi.w	40929e <__kernel_rem_pio2+0x60e>
  40944c:	e8df f003 	tbb	[pc, r3]
  409450:	02101015 	.word	0x02101015
  409454:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
  409458:	2300      	movs	r3, #0
  40945a:	461d      	mov	r5, r3
  40945c:	e706      	b.n	40926c <__kernel_rem_pio2+0x5dc>
  40945e:	4630      	mov	r0, r6
  409460:	4639      	mov	r1, r7
  409462:	f001 f9b3 	bl	40a7cc <__aeabi_d2iz>
  409466:	ab10      	add	r3, sp, #64	; 0x40
  409468:	46ab      	mov	fp, r5
  40946a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
  40946e:	e626      	b.n	4090be <__kernel_rem_pio2+0x42e>
  409470:	2600      	movs	r6, #0
  409472:	4633      	mov	r3, r6
  409474:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
  409478:	e735      	b.n	4092e6 <__kernel_rem_pio2+0x656>
  40947a:	2200      	movs	r2, #0
  40947c:	4613      	mov	r3, r2
  40947e:	e774      	b.n	40936a <__kernel_rem_pio2+0x6da>
  409480:	41700000 	.word	0x41700000
  409484:	3e700000 	.word	0x3e700000

00409488 <__kernel_sin>:
  409488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40948c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  409490:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  409494:	b085      	sub	sp, #20
  409496:	460c      	mov	r4, r1
  409498:	4690      	mov	r8, r2
  40949a:	4699      	mov	r9, r3
  40949c:	4605      	mov	r5, r0
  40949e:	da04      	bge.n	4094aa <__kernel_sin+0x22>
  4094a0:	f001 f994 	bl	40a7cc <__aeabi_d2iz>
  4094a4:	2800      	cmp	r0, #0
  4094a6:	f000 8085 	beq.w	4095b4 <__kernel_sin+0x12c>
  4094aa:	462a      	mov	r2, r5
  4094ac:	4623      	mov	r3, r4
  4094ae:	4628      	mov	r0, r5
  4094b0:	4621      	mov	r1, r4
  4094b2:	f000 fedb 	bl	40a26c <__aeabi_dmul>
  4094b6:	4606      	mov	r6, r0
  4094b8:	460f      	mov	r7, r1
  4094ba:	4602      	mov	r2, r0
  4094bc:	460b      	mov	r3, r1
  4094be:	4628      	mov	r0, r5
  4094c0:	4621      	mov	r1, r4
  4094c2:	f000 fed3 	bl	40a26c <__aeabi_dmul>
  4094c6:	a33e      	add	r3, pc, #248	; (adr r3, 4095c0 <__kernel_sin+0x138>)
  4094c8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4094cc:	4682      	mov	sl, r0
  4094ce:	468b      	mov	fp, r1
  4094d0:	4630      	mov	r0, r6
  4094d2:	4639      	mov	r1, r7
  4094d4:	f000 feca 	bl	40a26c <__aeabi_dmul>
  4094d8:	a33b      	add	r3, pc, #236	; (adr r3, 4095c8 <__kernel_sin+0x140>)
  4094da:	e9d3 2300 	ldrd	r2, r3, [r3]
  4094de:	f000 fd11 	bl	409f04 <__aeabi_dsub>
  4094e2:	4632      	mov	r2, r6
  4094e4:	463b      	mov	r3, r7
  4094e6:	f000 fec1 	bl	40a26c <__aeabi_dmul>
  4094ea:	a339      	add	r3, pc, #228	; (adr r3, 4095d0 <__kernel_sin+0x148>)
  4094ec:	e9d3 2300 	ldrd	r2, r3, [r3]
  4094f0:	f000 fd0a 	bl	409f08 <__adddf3>
  4094f4:	4632      	mov	r2, r6
  4094f6:	463b      	mov	r3, r7
  4094f8:	f000 feb8 	bl	40a26c <__aeabi_dmul>
  4094fc:	a336      	add	r3, pc, #216	; (adr r3, 4095d8 <__kernel_sin+0x150>)
  4094fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  409502:	f000 fcff 	bl	409f04 <__aeabi_dsub>
  409506:	4632      	mov	r2, r6
  409508:	463b      	mov	r3, r7
  40950a:	f000 feaf 	bl	40a26c <__aeabi_dmul>
  40950e:	a334      	add	r3, pc, #208	; (adr r3, 4095e0 <__kernel_sin+0x158>)
  409510:	e9d3 2300 	ldrd	r2, r3, [r3]
  409514:	f000 fcf8 	bl	409f08 <__adddf3>
  409518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40951a:	e9cd 0100 	strd	r0, r1, [sp]
  40951e:	b39b      	cbz	r3, 409588 <__kernel_sin+0x100>
  409520:	2200      	movs	r2, #0
  409522:	4b33      	ldr	r3, [pc, #204]	; (4095f0 <__kernel_sin+0x168>)
  409524:	4640      	mov	r0, r8
  409526:	4649      	mov	r1, r9
  409528:	f000 fea0 	bl	40a26c <__aeabi_dmul>
  40952c:	e9dd 2300 	ldrd	r2, r3, [sp]
  409530:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409534:	4650      	mov	r0, sl
  409536:	4659      	mov	r1, fp
  409538:	f000 fe98 	bl	40a26c <__aeabi_dmul>
  40953c:	4602      	mov	r2, r0
  40953e:	460b      	mov	r3, r1
  409540:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409544:	f000 fcde 	bl	409f04 <__aeabi_dsub>
  409548:	4632      	mov	r2, r6
  40954a:	463b      	mov	r3, r7
  40954c:	f000 fe8e 	bl	40a26c <__aeabi_dmul>
  409550:	4642      	mov	r2, r8
  409552:	464b      	mov	r3, r9
  409554:	f000 fcd6 	bl	409f04 <__aeabi_dsub>
  409558:	a323      	add	r3, pc, #140	; (adr r3, 4095e8 <__kernel_sin+0x160>)
  40955a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40955e:	4606      	mov	r6, r0
  409560:	460f      	mov	r7, r1
  409562:	4650      	mov	r0, sl
  409564:	4659      	mov	r1, fp
  409566:	f000 fe81 	bl	40a26c <__aeabi_dmul>
  40956a:	4602      	mov	r2, r0
  40956c:	460b      	mov	r3, r1
  40956e:	4630      	mov	r0, r6
  409570:	4639      	mov	r1, r7
  409572:	f000 fcc9 	bl	409f08 <__adddf3>
  409576:	4602      	mov	r2, r0
  409578:	460b      	mov	r3, r1
  40957a:	4628      	mov	r0, r5
  40957c:	4621      	mov	r1, r4
  40957e:	f000 fcc1 	bl	409f04 <__aeabi_dsub>
  409582:	b005      	add	sp, #20
  409584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409588:	4602      	mov	r2, r0
  40958a:	460b      	mov	r3, r1
  40958c:	4630      	mov	r0, r6
  40958e:	4639      	mov	r1, r7
  409590:	f000 fe6c 	bl	40a26c <__aeabi_dmul>
  409594:	a314      	add	r3, pc, #80	; (adr r3, 4095e8 <__kernel_sin+0x160>)
  409596:	e9d3 2300 	ldrd	r2, r3, [r3]
  40959a:	f000 fcb3 	bl	409f04 <__aeabi_dsub>
  40959e:	4652      	mov	r2, sl
  4095a0:	465b      	mov	r3, fp
  4095a2:	f000 fe63 	bl	40a26c <__aeabi_dmul>
  4095a6:	462a      	mov	r2, r5
  4095a8:	4623      	mov	r3, r4
  4095aa:	f000 fcad 	bl	409f08 <__adddf3>
  4095ae:	b005      	add	sp, #20
  4095b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4095b4:	4628      	mov	r0, r5
  4095b6:	4621      	mov	r1, r4
  4095b8:	b005      	add	sp, #20
  4095ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4095be:	bf00      	nop
  4095c0:	5acfd57c 	.word	0x5acfd57c
  4095c4:	3de5d93a 	.word	0x3de5d93a
  4095c8:	8a2b9ceb 	.word	0x8a2b9ceb
  4095cc:	3e5ae5e6 	.word	0x3e5ae5e6
  4095d0:	57b1fe7d 	.word	0x57b1fe7d
  4095d4:	3ec71de3 	.word	0x3ec71de3
  4095d8:	19c161d5 	.word	0x19c161d5
  4095dc:	3f2a01a0 	.word	0x3f2a01a0
  4095e0:	1110f8a6 	.word	0x1110f8a6
  4095e4:	3f811111 	.word	0x3f811111
  4095e8:	55555549 	.word	0x55555549
  4095ec:	3fc55555 	.word	0x3fc55555
  4095f0:	3fe00000 	.word	0x3fe00000
  4095f4:	00000000 	.word	0x00000000

004095f8 <__kernel_tan>:
  4095f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4095fc:	4cd8      	ldr	r4, [pc, #864]	; (409960 <__kernel_tan+0x368>)
  4095fe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  409602:	42a6      	cmp	r6, r4
  409604:	b087      	sub	sp, #28
  409606:	468a      	mov	sl, r1
  409608:	4689      	mov	r9, r1
  40960a:	4617      	mov	r7, r2
  40960c:	4698      	mov	r8, r3
  40960e:	4683      	mov	fp, r0
  409610:	dc16      	bgt.n	409640 <__kernel_tan+0x48>
  409612:	f001 f8db 	bl	40a7cc <__aeabi_d2iz>
  409616:	bb88      	cbnz	r0, 40967c <__kernel_tan+0x84>
  409618:	465b      	mov	r3, fp
  40961a:	431e      	orrs	r6, r3
  40961c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40961e:	3301      	adds	r3, #1
  409620:	4333      	orrs	r3, r6
  409622:	f000 8156 	beq.w	4098d2 <__kernel_tan+0x2da>
  409626:	9b10      	ldr	r3, [sp, #64]	; 0x40
  409628:	2b01      	cmp	r3, #1
  40962a:	f000 81a8 	beq.w	40997e <__kernel_tan+0x386>
  40962e:	465a      	mov	r2, fp
  409630:	4653      	mov	r3, sl
  409632:	2000      	movs	r0, #0
  409634:	49cb      	ldr	r1, [pc, #812]	; (409964 <__kernel_tan+0x36c>)
  409636:	f000 ff43 	bl	40a4c0 <__aeabi_ddiv>
  40963a:	b007      	add	sp, #28
  40963c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409640:	4bc9      	ldr	r3, [pc, #804]	; (409968 <__kernel_tan+0x370>)
  409642:	429e      	cmp	r6, r3
  409644:	dd1a      	ble.n	40967c <__kernel_tan+0x84>
  409646:	2900      	cmp	r1, #0
  409648:	f2c0 8192 	blt.w	409970 <__kernel_tan+0x378>
  40964c:	465a      	mov	r2, fp
  40964e:	4653      	mov	r3, sl
  409650:	a1a5      	add	r1, pc, #660	; (adr r1, 4098e8 <__kernel_tan+0x2f0>)
  409652:	e9d1 0100 	ldrd	r0, r1, [r1]
  409656:	f000 fc55 	bl	409f04 <__aeabi_dsub>
  40965a:	463a      	mov	r2, r7
  40965c:	4643      	mov	r3, r8
  40965e:	4604      	mov	r4, r0
  409660:	460d      	mov	r5, r1
  409662:	a1a3      	add	r1, pc, #652	; (adr r1, 4098f0 <__kernel_tan+0x2f8>)
  409664:	e9d1 0100 	ldrd	r0, r1, [r1]
  409668:	f000 fc4c 	bl	409f04 <__aeabi_dsub>
  40966c:	4622      	mov	r2, r4
  40966e:	462b      	mov	r3, r5
  409670:	f000 fc4a 	bl	409f08 <__adddf3>
  409674:	2700      	movs	r7, #0
  409676:	4683      	mov	fp, r0
  409678:	468a      	mov	sl, r1
  40967a:	46b8      	mov	r8, r7
  40967c:	465a      	mov	r2, fp
  40967e:	4653      	mov	r3, sl
  409680:	4658      	mov	r0, fp
  409682:	4651      	mov	r1, sl
  409684:	f000 fdf2 	bl	40a26c <__aeabi_dmul>
  409688:	4603      	mov	r3, r0
  40968a:	460c      	mov	r4, r1
  40968c:	e9cd 3400 	strd	r3, r4, [sp]
  409690:	4602      	mov	r2, r0
  409692:	460b      	mov	r3, r1
  409694:	f000 fdea 	bl	40a26c <__aeabi_dmul>
  409698:	e9dd 2300 	ldrd	r2, r3, [sp]
  40969c:	4604      	mov	r4, r0
  40969e:	460d      	mov	r5, r1
  4096a0:	4658      	mov	r0, fp
  4096a2:	4651      	mov	r1, sl
  4096a4:	f000 fde2 	bl	40a26c <__aeabi_dmul>
  4096a8:	a393      	add	r3, pc, #588	; (adr r3, 4098f8 <__kernel_tan+0x300>)
  4096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4096ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4096b2:	4620      	mov	r0, r4
  4096b4:	4629      	mov	r1, r5
  4096b6:	f000 fdd9 	bl	40a26c <__aeabi_dmul>
  4096ba:	a391      	add	r3, pc, #580	; (adr r3, 409900 <__kernel_tan+0x308>)
  4096bc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4096c0:	f000 fc22 	bl	409f08 <__adddf3>
  4096c4:	4622      	mov	r2, r4
  4096c6:	462b      	mov	r3, r5
  4096c8:	f000 fdd0 	bl	40a26c <__aeabi_dmul>
  4096cc:	a38e      	add	r3, pc, #568	; (adr r3, 409908 <__kernel_tan+0x310>)
  4096ce:	e9d3 2300 	ldrd	r2, r3, [r3]
  4096d2:	f000 fc19 	bl	409f08 <__adddf3>
  4096d6:	4622      	mov	r2, r4
  4096d8:	462b      	mov	r3, r5
  4096da:	f000 fdc7 	bl	40a26c <__aeabi_dmul>
  4096de:	a38c      	add	r3, pc, #560	; (adr r3, 409910 <__kernel_tan+0x318>)
  4096e0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4096e4:	f000 fc10 	bl	409f08 <__adddf3>
  4096e8:	4622      	mov	r2, r4
  4096ea:	462b      	mov	r3, r5
  4096ec:	f000 fdbe 	bl	40a26c <__aeabi_dmul>
  4096f0:	a389      	add	r3, pc, #548	; (adr r3, 409918 <__kernel_tan+0x320>)
  4096f2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4096f6:	f000 fc07 	bl	409f08 <__adddf3>
  4096fa:	4622      	mov	r2, r4
  4096fc:	462b      	mov	r3, r5
  4096fe:	f000 fdb5 	bl	40a26c <__aeabi_dmul>
  409702:	a387      	add	r3, pc, #540	; (adr r3, 409920 <__kernel_tan+0x328>)
  409704:	e9d3 2300 	ldrd	r2, r3, [r3]
  409708:	f000 fbfe 	bl	409f08 <__adddf3>
  40970c:	e9dd 2300 	ldrd	r2, r3, [sp]
  409710:	f000 fdac 	bl	40a26c <__aeabi_dmul>
  409714:	a384      	add	r3, pc, #528	; (adr r3, 409928 <__kernel_tan+0x330>)
  409716:	e9d3 2300 	ldrd	r2, r3, [r3]
  40971a:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40971e:	4620      	mov	r0, r4
  409720:	4629      	mov	r1, r5
  409722:	f000 fda3 	bl	40a26c <__aeabi_dmul>
  409726:	a382      	add	r3, pc, #520	; (adr r3, 409930 <__kernel_tan+0x338>)
  409728:	e9d3 2300 	ldrd	r2, r3, [r3]
  40972c:	f000 fbec 	bl	409f08 <__adddf3>
  409730:	4622      	mov	r2, r4
  409732:	462b      	mov	r3, r5
  409734:	f000 fd9a 	bl	40a26c <__aeabi_dmul>
  409738:	a37f      	add	r3, pc, #508	; (adr r3, 409938 <__kernel_tan+0x340>)
  40973a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40973e:	f000 fbe3 	bl	409f08 <__adddf3>
  409742:	4622      	mov	r2, r4
  409744:	462b      	mov	r3, r5
  409746:	f000 fd91 	bl	40a26c <__aeabi_dmul>
  40974a:	a37d      	add	r3, pc, #500	; (adr r3, 409940 <__kernel_tan+0x348>)
  40974c:	e9d3 2300 	ldrd	r2, r3, [r3]
  409750:	f000 fbda 	bl	409f08 <__adddf3>
  409754:	4622      	mov	r2, r4
  409756:	462b      	mov	r3, r5
  409758:	f000 fd88 	bl	40a26c <__aeabi_dmul>
  40975c:	a37a      	add	r3, pc, #488	; (adr r3, 409948 <__kernel_tan+0x350>)
  40975e:	e9d3 2300 	ldrd	r2, r3, [r3]
  409762:	f000 fbd1 	bl	409f08 <__adddf3>
  409766:	4622      	mov	r2, r4
  409768:	462b      	mov	r3, r5
  40976a:	f000 fd7f 	bl	40a26c <__aeabi_dmul>
  40976e:	a378      	add	r3, pc, #480	; (adr r3, 409950 <__kernel_tan+0x358>)
  409770:	e9d3 2300 	ldrd	r2, r3, [r3]
  409774:	f000 fbc8 	bl	409f08 <__adddf3>
  409778:	4602      	mov	r2, r0
  40977a:	460b      	mov	r3, r1
  40977c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  409780:	f000 fbc2 	bl	409f08 <__adddf3>
  409784:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409788:	f000 fd70 	bl	40a26c <__aeabi_dmul>
  40978c:	463a      	mov	r2, r7
  40978e:	4643      	mov	r3, r8
  409790:	f000 fbba 	bl	409f08 <__adddf3>
  409794:	e9dd 2300 	ldrd	r2, r3, [sp]
  409798:	f000 fd68 	bl	40a26c <__aeabi_dmul>
  40979c:	4602      	mov	r2, r0
  40979e:	460b      	mov	r3, r1
  4097a0:	4638      	mov	r0, r7
  4097a2:	4641      	mov	r1, r8
  4097a4:	f000 fbb0 	bl	409f08 <__adddf3>
  4097a8:	a36b      	add	r3, pc, #428	; (adr r3, 409958 <__kernel_tan+0x360>)
  4097aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4097ae:	4604      	mov	r4, r0
  4097b0:	460d      	mov	r5, r1
  4097b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4097b6:	f000 fd59 	bl	40a26c <__aeabi_dmul>
  4097ba:	4622      	mov	r2, r4
  4097bc:	462b      	mov	r3, r5
  4097be:	f000 fba3 	bl	409f08 <__adddf3>
  4097c2:	460b      	mov	r3, r1
  4097c4:	4602      	mov	r2, r0
  4097c6:	4651      	mov	r1, sl
  4097c8:	4658      	mov	r0, fp
  4097ca:	e9cd 2300 	strd	r2, r3, [sp]
  4097ce:	f000 fb9b 	bl	409f08 <__adddf3>
  4097d2:	4b65      	ldr	r3, [pc, #404]	; (409968 <__kernel_tan+0x370>)
  4097d4:	429e      	cmp	r6, r3
  4097d6:	4604      	mov	r4, r0
  4097d8:	460d      	mov	r5, r1
  4097da:	dc3a      	bgt.n	409852 <__kernel_tan+0x25a>
  4097dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4097de:	2b01      	cmp	r3, #1
  4097e0:	d034      	beq.n	40984c <__kernel_tan+0x254>
  4097e2:	4602      	mov	r2, r0
  4097e4:	460b      	mov	r3, r1
  4097e6:	2000      	movs	r0, #0
  4097e8:	495e      	ldr	r1, [pc, #376]	; (409964 <__kernel_tan+0x36c>)
  4097ea:	f000 fe69 	bl	40a4c0 <__aeabi_ddiv>
  4097ee:	2400      	movs	r4, #0
  4097f0:	460f      	mov	r7, r1
  4097f2:	4606      	mov	r6, r0
  4097f4:	465a      	mov	r2, fp
  4097f6:	4653      	mov	r3, sl
  4097f8:	4620      	mov	r0, r4
  4097fa:	4629      	mov	r1, r5
  4097fc:	f000 fb82 	bl	409f04 <__aeabi_dsub>
  409800:	46a0      	mov	r8, r4
  409802:	4602      	mov	r2, r0
  409804:	460b      	mov	r3, r1
  409806:	e9dd 0100 	ldrd	r0, r1, [sp]
  40980a:	f000 fb7b 	bl	409f04 <__aeabi_dsub>
  40980e:	4642      	mov	r2, r8
  409810:	463b      	mov	r3, r7
  409812:	f000 fd2b 	bl	40a26c <__aeabi_dmul>
  409816:	46a9      	mov	r9, r5
  409818:	4604      	mov	r4, r0
  40981a:	460d      	mov	r5, r1
  40981c:	4642      	mov	r2, r8
  40981e:	463b      	mov	r3, r7
  409820:	4640      	mov	r0, r8
  409822:	4649      	mov	r1, r9
  409824:	f000 fd22 	bl	40a26c <__aeabi_dmul>
  409828:	2200      	movs	r2, #0
  40982a:	4b50      	ldr	r3, [pc, #320]	; (40996c <__kernel_tan+0x374>)
  40982c:	f000 fb6c 	bl	409f08 <__adddf3>
  409830:	4602      	mov	r2, r0
  409832:	460b      	mov	r3, r1
  409834:	4620      	mov	r0, r4
  409836:	4629      	mov	r1, r5
  409838:	f000 fb66 	bl	409f08 <__adddf3>
  40983c:	4632      	mov	r2, r6
  40983e:	463b      	mov	r3, r7
  409840:	f000 fd14 	bl	40a26c <__aeabi_dmul>
  409844:	4642      	mov	r2, r8
  409846:	463b      	mov	r3, r7
  409848:	f000 fb5e 	bl	409f08 <__adddf3>
  40984c:	b007      	add	sp, #28
  40984e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409852:	9810      	ldr	r0, [sp, #64]	; 0x40
  409854:	f000 fca4 	bl	40a1a0 <__aeabi_i2d>
  409858:	4622      	mov	r2, r4
  40985a:	4606      	mov	r6, r0
  40985c:	460f      	mov	r7, r1
  40985e:	462b      	mov	r3, r5
  409860:	4620      	mov	r0, r4
  409862:	4629      	mov	r1, r5
  409864:	f000 fd02 	bl	40a26c <__aeabi_dmul>
  409868:	4632      	mov	r2, r6
  40986a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40986e:	463b      	mov	r3, r7
  409870:	4620      	mov	r0, r4
  409872:	4629      	mov	r1, r5
  409874:	f000 fb48 	bl	409f08 <__adddf3>
  409878:	4602      	mov	r2, r0
  40987a:	460b      	mov	r3, r1
  40987c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409880:	f000 fe1e 	bl	40a4c0 <__aeabi_ddiv>
  409884:	e9dd 2300 	ldrd	r2, r3, [sp]
  409888:	f000 fb3c 	bl	409f04 <__aeabi_dsub>
  40988c:	4602      	mov	r2, r0
  40988e:	460b      	mov	r3, r1
  409890:	4658      	mov	r0, fp
  409892:	4651      	mov	r1, sl
  409894:	f000 fb36 	bl	409f04 <__aeabi_dsub>
  409898:	4602      	mov	r2, r0
  40989a:	460b      	mov	r3, r1
  40989c:	f000 fb34 	bl	409f08 <__adddf3>
  4098a0:	4602      	mov	r2, r0
  4098a2:	460b      	mov	r3, r1
  4098a4:	4630      	mov	r0, r6
  4098a6:	4639      	mov	r1, r7
  4098a8:	f000 fb2c 	bl	409f04 <__aeabi_dsub>
  4098ac:	4604      	mov	r4, r0
  4098ae:	ea4f 70a9 	mov.w	r0, r9, asr #30
  4098b2:	f000 0002 	and.w	r0, r0, #2
  4098b6:	f1c0 0001 	rsb	r0, r0, #1
  4098ba:	460d      	mov	r5, r1
  4098bc:	f000 fc70 	bl	40a1a0 <__aeabi_i2d>
  4098c0:	4602      	mov	r2, r0
  4098c2:	460b      	mov	r3, r1
  4098c4:	4620      	mov	r0, r4
  4098c6:	4629      	mov	r1, r5
  4098c8:	f000 fcd0 	bl	40a26c <__aeabi_dmul>
  4098cc:	b007      	add	sp, #28
  4098ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4098d2:	4658      	mov	r0, fp
  4098d4:	4651      	mov	r1, sl
  4098d6:	f000 f9f5 	bl	409cc4 <fabs>
  4098da:	4602      	mov	r2, r0
  4098dc:	460b      	mov	r3, r1
  4098de:	2000      	movs	r0, #0
  4098e0:	4922      	ldr	r1, [pc, #136]	; (40996c <__kernel_tan+0x374>)
  4098e2:	f000 fded 	bl	40a4c0 <__aeabi_ddiv>
  4098e6:	e7b1      	b.n	40984c <__kernel_tan+0x254>
  4098e8:	54442d18 	.word	0x54442d18
  4098ec:	3fe921fb 	.word	0x3fe921fb
  4098f0:	33145c07 	.word	0x33145c07
  4098f4:	3c81a626 	.word	0x3c81a626
  4098f8:	74bf7ad4 	.word	0x74bf7ad4
  4098fc:	3efb2a70 	.word	0x3efb2a70
  409900:	32f0a7e9 	.word	0x32f0a7e9
  409904:	3f12b80f 	.word	0x3f12b80f
  409908:	1a8d1068 	.word	0x1a8d1068
  40990c:	3f3026f7 	.word	0x3f3026f7
  409910:	fee08315 	.word	0xfee08315
  409914:	3f57dbc8 	.word	0x3f57dbc8
  409918:	e96e8493 	.word	0xe96e8493
  40991c:	3f8226e3 	.word	0x3f8226e3
  409920:	1bb341fe 	.word	0x1bb341fe
  409924:	3faba1ba 	.word	0x3faba1ba
  409928:	db605373 	.word	0xdb605373
  40992c:	bef375cb 	.word	0xbef375cb
  409930:	a03792a6 	.word	0xa03792a6
  409934:	3f147e88 	.word	0x3f147e88
  409938:	f2f26501 	.word	0xf2f26501
  40993c:	3f4344d8 	.word	0x3f4344d8
  409940:	c9560328 	.word	0xc9560328
  409944:	3f6d6d22 	.word	0x3f6d6d22
  409948:	8406d637 	.word	0x8406d637
  40994c:	3f9664f4 	.word	0x3f9664f4
  409950:	1110fe7a 	.word	0x1110fe7a
  409954:	3fc11111 	.word	0x3fc11111
  409958:	55555563 	.word	0x55555563
  40995c:	3fd55555 	.word	0x3fd55555
  409960:	3e2fffff 	.word	0x3e2fffff
  409964:	bff00000 	.word	0xbff00000
  409968:	3fe59427 	.word	0x3fe59427
  40996c:	3ff00000 	.word	0x3ff00000
  409970:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  409974:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
  409978:	4683      	mov	fp, r0
  40997a:	469a      	mov	sl, r3
  40997c:	e666      	b.n	40964c <__kernel_tan+0x54>
  40997e:	4658      	mov	r0, fp
  409980:	4651      	mov	r1, sl
  409982:	e763      	b.n	40984c <__kernel_tan+0x254>
  409984:	0000      	movs	r0, r0
	...

00409988 <atan>:
  409988:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40998c:	4bc0      	ldr	r3, [pc, #768]	; (409c90 <atan+0x308>)
  40998e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  409992:	429e      	cmp	r6, r3
  409994:	460d      	mov	r5, r1
  409996:	468a      	mov	sl, r1
  409998:	4604      	mov	r4, r0
  40999a:	dd0f      	ble.n	4099bc <atan+0x34>
  40999c:	4bbd      	ldr	r3, [pc, #756]	; (409c94 <atan+0x30c>)
  40999e:	429e      	cmp	r6, r3
  4099a0:	f300 80b2 	bgt.w	409b08 <atan+0x180>
  4099a4:	f000 80ad 	beq.w	409b02 <atan+0x17a>
  4099a8:	4bbb      	ldr	r3, [pc, #748]	; (409c98 <atan+0x310>)
  4099aa:	49bc      	ldr	r1, [pc, #752]	; (409c9c <atan+0x314>)
  4099ac:	4cbc      	ldr	r4, [pc, #752]	; (409ca0 <atan+0x318>)
  4099ae:	f1ba 0f00 	cmp.w	sl, #0
  4099b2:	bfc8      	it	gt
  4099b4:	4619      	movgt	r1, r3
  4099b6:	4620      	mov	r0, r4
  4099b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4099bc:	4bb9      	ldr	r3, [pc, #740]	; (409ca4 <atan+0x31c>)
  4099be:	429e      	cmp	r6, r3
  4099c0:	f300 80bc 	bgt.w	409b3c <atan+0x1b4>
  4099c4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
  4099c8:	429e      	cmp	r6, r3
  4099ca:	f340 80a7 	ble.w	409b1c <atan+0x194>
  4099ce:	f04f 3bff 	mov.w	fp, #4294967295
  4099d2:	4622      	mov	r2, r4
  4099d4:	462b      	mov	r3, r5
  4099d6:	4620      	mov	r0, r4
  4099d8:	4629      	mov	r1, r5
  4099da:	f000 fc47 	bl	40a26c <__aeabi_dmul>
  4099de:	4602      	mov	r2, r0
  4099e0:	460b      	mov	r3, r1
  4099e2:	4680      	mov	r8, r0
  4099e4:	4689      	mov	r9, r1
  4099e6:	f000 fc41 	bl	40a26c <__aeabi_dmul>
  4099ea:	a391      	add	r3, pc, #580	; (adr r3, 409c30 <atan+0x2a8>)
  4099ec:	e9d3 2300 	ldrd	r2, r3, [r3]
  4099f0:	4606      	mov	r6, r0
  4099f2:	460f      	mov	r7, r1
  4099f4:	f000 fc3a 	bl	40a26c <__aeabi_dmul>
  4099f8:	a38f      	add	r3, pc, #572	; (adr r3, 409c38 <atan+0x2b0>)
  4099fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4099fe:	f000 fa83 	bl	409f08 <__adddf3>
  409a02:	4632      	mov	r2, r6
  409a04:	463b      	mov	r3, r7
  409a06:	f000 fc31 	bl	40a26c <__aeabi_dmul>
  409a0a:	a38d      	add	r3, pc, #564	; (adr r3, 409c40 <atan+0x2b8>)
  409a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
  409a10:	f000 fa7a 	bl	409f08 <__adddf3>
  409a14:	4632      	mov	r2, r6
  409a16:	463b      	mov	r3, r7
  409a18:	f000 fc28 	bl	40a26c <__aeabi_dmul>
  409a1c:	a38a      	add	r3, pc, #552	; (adr r3, 409c48 <atan+0x2c0>)
  409a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
  409a22:	f000 fa71 	bl	409f08 <__adddf3>
  409a26:	4632      	mov	r2, r6
  409a28:	463b      	mov	r3, r7
  409a2a:	f000 fc1f 	bl	40a26c <__aeabi_dmul>
  409a2e:	a388      	add	r3, pc, #544	; (adr r3, 409c50 <atan+0x2c8>)
  409a30:	e9d3 2300 	ldrd	r2, r3, [r3]
  409a34:	f000 fa68 	bl	409f08 <__adddf3>
  409a38:	4632      	mov	r2, r6
  409a3a:	463b      	mov	r3, r7
  409a3c:	f000 fc16 	bl	40a26c <__aeabi_dmul>
  409a40:	a385      	add	r3, pc, #532	; (adr r3, 409c58 <atan+0x2d0>)
  409a42:	e9d3 2300 	ldrd	r2, r3, [r3]
  409a46:	f000 fa5f 	bl	409f08 <__adddf3>
  409a4a:	4642      	mov	r2, r8
  409a4c:	464b      	mov	r3, r9
  409a4e:	f000 fc0d 	bl	40a26c <__aeabi_dmul>
  409a52:	a383      	add	r3, pc, #524	; (adr r3, 409c60 <atan+0x2d8>)
  409a54:	e9d3 2300 	ldrd	r2, r3, [r3]
  409a58:	4680      	mov	r8, r0
  409a5a:	4689      	mov	r9, r1
  409a5c:	4630      	mov	r0, r6
  409a5e:	4639      	mov	r1, r7
  409a60:	f000 fc04 	bl	40a26c <__aeabi_dmul>
  409a64:	a380      	add	r3, pc, #512	; (adr r3, 409c68 <atan+0x2e0>)
  409a66:	e9d3 2300 	ldrd	r2, r3, [r3]
  409a6a:	f000 fa4b 	bl	409f04 <__aeabi_dsub>
  409a6e:	4632      	mov	r2, r6
  409a70:	463b      	mov	r3, r7
  409a72:	f000 fbfb 	bl	40a26c <__aeabi_dmul>
  409a76:	a37e      	add	r3, pc, #504	; (adr r3, 409c70 <atan+0x2e8>)
  409a78:	e9d3 2300 	ldrd	r2, r3, [r3]
  409a7c:	f000 fa42 	bl	409f04 <__aeabi_dsub>
  409a80:	4632      	mov	r2, r6
  409a82:	463b      	mov	r3, r7
  409a84:	f000 fbf2 	bl	40a26c <__aeabi_dmul>
  409a88:	a37b      	add	r3, pc, #492	; (adr r3, 409c78 <atan+0x2f0>)
  409a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
  409a8e:	f000 fa39 	bl	409f04 <__aeabi_dsub>
  409a92:	4632      	mov	r2, r6
  409a94:	463b      	mov	r3, r7
  409a96:	f000 fbe9 	bl	40a26c <__aeabi_dmul>
  409a9a:	a379      	add	r3, pc, #484	; (adr r3, 409c80 <atan+0x2f8>)
  409a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
  409aa0:	f000 fa30 	bl	409f04 <__aeabi_dsub>
  409aa4:	4632      	mov	r2, r6
  409aa6:	463b      	mov	r3, r7
  409aa8:	f000 fbe0 	bl	40a26c <__aeabi_dmul>
  409aac:	f1bb 3fff 	cmp.w	fp, #4294967295
  409ab0:	4602      	mov	r2, r0
  409ab2:	460b      	mov	r3, r1
  409ab4:	d069      	beq.n	409b8a <atan+0x202>
  409ab6:	4640      	mov	r0, r8
  409ab8:	4649      	mov	r1, r9
  409aba:	f000 fa25 	bl	409f08 <__adddf3>
  409abe:	4622      	mov	r2, r4
  409ac0:	462b      	mov	r3, r5
  409ac2:	f000 fbd3 	bl	40a26c <__aeabi_dmul>
  409ac6:	4e78      	ldr	r6, [pc, #480]	; (409ca8 <atan+0x320>)
  409ac8:	4b78      	ldr	r3, [pc, #480]	; (409cac <atan+0x324>)
  409aca:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
  409ace:	445e      	add	r6, fp
  409ad0:	449b      	add	fp, r3
  409ad2:	e9db 2300 	ldrd	r2, r3, [fp]
  409ad6:	f000 fa15 	bl	409f04 <__aeabi_dsub>
  409ada:	4622      	mov	r2, r4
  409adc:	462b      	mov	r3, r5
  409ade:	f000 fa11 	bl	409f04 <__aeabi_dsub>
  409ae2:	4602      	mov	r2, r0
  409ae4:	460b      	mov	r3, r1
  409ae6:	e9d6 0100 	ldrd	r0, r1, [r6]
  409aea:	f000 fa0b 	bl	409f04 <__aeabi_dsub>
  409aee:	f1ba 0f00 	cmp.w	sl, #0
  409af2:	4604      	mov	r4, r0
  409af4:	f6bf af5f 	bge.w	4099b6 <atan+0x2e>
  409af8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  409afc:	4620      	mov	r0, r4
  409afe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409b02:	2800      	cmp	r0, #0
  409b04:	f43f af50 	beq.w	4099a8 <atan+0x20>
  409b08:	4622      	mov	r2, r4
  409b0a:	4620      	mov	r0, r4
  409b0c:	462b      	mov	r3, r5
  409b0e:	4629      	mov	r1, r5
  409b10:	f000 f9fa 	bl	409f08 <__adddf3>
  409b14:	4604      	mov	r4, r0
  409b16:	4620      	mov	r0, r4
  409b18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409b1c:	a35a      	add	r3, pc, #360	; (adr r3, 409c88 <atan+0x300>)
  409b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
  409b22:	f000 f9f1 	bl	409f08 <__adddf3>
  409b26:	2200      	movs	r2, #0
  409b28:	4b61      	ldr	r3, [pc, #388]	; (409cb0 <atan+0x328>)
  409b2a:	f000 fe2f 	bl	40a78c <__aeabi_dcmpgt>
  409b2e:	2800      	cmp	r0, #0
  409b30:	f43f af4d 	beq.w	4099ce <atan+0x46>
  409b34:	4629      	mov	r1, r5
  409b36:	4620      	mov	r0, r4
  409b38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409b3c:	f000 f8c2 	bl	409cc4 <fabs>
  409b40:	4b5c      	ldr	r3, [pc, #368]	; (409cb4 <atan+0x32c>)
  409b42:	429e      	cmp	r6, r3
  409b44:	4604      	mov	r4, r0
  409b46:	460d      	mov	r5, r1
  409b48:	dc2f      	bgt.n	409baa <atan+0x222>
  409b4a:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
  409b4e:	429e      	cmp	r6, r3
  409b50:	dc54      	bgt.n	409bfc <atan+0x274>
  409b52:	4602      	mov	r2, r0
  409b54:	460b      	mov	r3, r1
  409b56:	f000 f9d7 	bl	409f08 <__adddf3>
  409b5a:	2200      	movs	r2, #0
  409b5c:	4b54      	ldr	r3, [pc, #336]	; (409cb0 <atan+0x328>)
  409b5e:	f000 f9d1 	bl	409f04 <__aeabi_dsub>
  409b62:	2200      	movs	r2, #0
  409b64:	4606      	mov	r6, r0
  409b66:	460f      	mov	r7, r1
  409b68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  409b6c:	4620      	mov	r0, r4
  409b6e:	4629      	mov	r1, r5
  409b70:	f000 f9ca 	bl	409f08 <__adddf3>
  409b74:	4602      	mov	r2, r0
  409b76:	460b      	mov	r3, r1
  409b78:	4630      	mov	r0, r6
  409b7a:	4639      	mov	r1, r7
  409b7c:	f000 fca0 	bl	40a4c0 <__aeabi_ddiv>
  409b80:	f04f 0b00 	mov.w	fp, #0
  409b84:	4604      	mov	r4, r0
  409b86:	460d      	mov	r5, r1
  409b88:	e723      	b.n	4099d2 <atan+0x4a>
  409b8a:	4640      	mov	r0, r8
  409b8c:	4649      	mov	r1, r9
  409b8e:	f000 f9bb 	bl	409f08 <__adddf3>
  409b92:	4622      	mov	r2, r4
  409b94:	462b      	mov	r3, r5
  409b96:	f000 fb69 	bl	40a26c <__aeabi_dmul>
  409b9a:	4602      	mov	r2, r0
  409b9c:	460b      	mov	r3, r1
  409b9e:	4620      	mov	r0, r4
  409ba0:	4629      	mov	r1, r5
  409ba2:	f000 f9af 	bl	409f04 <__aeabi_dsub>
  409ba6:	4604      	mov	r4, r0
  409ba8:	e705      	b.n	4099b6 <atan+0x2e>
  409baa:	4b43      	ldr	r3, [pc, #268]	; (409cb8 <atan+0x330>)
  409bac:	429e      	cmp	r6, r3
  409bae:	dc1a      	bgt.n	409be6 <atan+0x25e>
  409bb0:	2200      	movs	r2, #0
  409bb2:	4b42      	ldr	r3, [pc, #264]	; (409cbc <atan+0x334>)
  409bb4:	f000 f9a6 	bl	409f04 <__aeabi_dsub>
  409bb8:	2200      	movs	r2, #0
  409bba:	4606      	mov	r6, r0
  409bbc:	460f      	mov	r7, r1
  409bbe:	4b3f      	ldr	r3, [pc, #252]	; (409cbc <atan+0x334>)
  409bc0:	4620      	mov	r0, r4
  409bc2:	4629      	mov	r1, r5
  409bc4:	f000 fb52 	bl	40a26c <__aeabi_dmul>
  409bc8:	2200      	movs	r2, #0
  409bca:	4b39      	ldr	r3, [pc, #228]	; (409cb0 <atan+0x328>)
  409bcc:	f000 f99c 	bl	409f08 <__adddf3>
  409bd0:	4602      	mov	r2, r0
  409bd2:	460b      	mov	r3, r1
  409bd4:	4630      	mov	r0, r6
  409bd6:	4639      	mov	r1, r7
  409bd8:	f000 fc72 	bl	40a4c0 <__aeabi_ddiv>
  409bdc:	f04f 0b02 	mov.w	fp, #2
  409be0:	4604      	mov	r4, r0
  409be2:	460d      	mov	r5, r1
  409be4:	e6f5      	b.n	4099d2 <atan+0x4a>
  409be6:	4602      	mov	r2, r0
  409be8:	460b      	mov	r3, r1
  409bea:	2000      	movs	r0, #0
  409bec:	4934      	ldr	r1, [pc, #208]	; (409cc0 <atan+0x338>)
  409bee:	f000 fc67 	bl	40a4c0 <__aeabi_ddiv>
  409bf2:	f04f 0b03 	mov.w	fp, #3
  409bf6:	4604      	mov	r4, r0
  409bf8:	460d      	mov	r5, r1
  409bfa:	e6ea      	b.n	4099d2 <atan+0x4a>
  409bfc:	2200      	movs	r2, #0
  409bfe:	4b2c      	ldr	r3, [pc, #176]	; (409cb0 <atan+0x328>)
  409c00:	f000 f980 	bl	409f04 <__aeabi_dsub>
  409c04:	2200      	movs	r2, #0
  409c06:	4606      	mov	r6, r0
  409c08:	460f      	mov	r7, r1
  409c0a:	4b29      	ldr	r3, [pc, #164]	; (409cb0 <atan+0x328>)
  409c0c:	4620      	mov	r0, r4
  409c0e:	4629      	mov	r1, r5
  409c10:	f000 f97a 	bl	409f08 <__adddf3>
  409c14:	4602      	mov	r2, r0
  409c16:	460b      	mov	r3, r1
  409c18:	4630      	mov	r0, r6
  409c1a:	4639      	mov	r1, r7
  409c1c:	f000 fc50 	bl	40a4c0 <__aeabi_ddiv>
  409c20:	f04f 0b01 	mov.w	fp, #1
  409c24:	4604      	mov	r4, r0
  409c26:	460d      	mov	r5, r1
  409c28:	e6d3      	b.n	4099d2 <atan+0x4a>
  409c2a:	bf00      	nop
  409c2c:	f3af 8000 	nop.w
  409c30:	e322da11 	.word	0xe322da11
  409c34:	3f90ad3a 	.word	0x3f90ad3a
  409c38:	24760deb 	.word	0x24760deb
  409c3c:	3fa97b4b 	.word	0x3fa97b4b
  409c40:	a0d03d51 	.word	0xa0d03d51
  409c44:	3fb10d66 	.word	0x3fb10d66
  409c48:	c54c206e 	.word	0xc54c206e
  409c4c:	3fb745cd 	.word	0x3fb745cd
  409c50:	920083ff 	.word	0x920083ff
  409c54:	3fc24924 	.word	0x3fc24924
  409c58:	5555550d 	.word	0x5555550d
  409c5c:	3fd55555 	.word	0x3fd55555
  409c60:	2c6a6c2f 	.word	0x2c6a6c2f
  409c64:	bfa2b444 	.word	0xbfa2b444
  409c68:	52defd9a 	.word	0x52defd9a
  409c6c:	3fadde2d 	.word	0x3fadde2d
  409c70:	af749a6d 	.word	0xaf749a6d
  409c74:	3fb3b0f2 	.word	0x3fb3b0f2
  409c78:	fe231671 	.word	0xfe231671
  409c7c:	3fbc71c6 	.word	0x3fbc71c6
  409c80:	9998ebc4 	.word	0x9998ebc4
  409c84:	3fc99999 	.word	0x3fc99999
  409c88:	8800759c 	.word	0x8800759c
  409c8c:	7e37e43c 	.word	0x7e37e43c
  409c90:	440fffff 	.word	0x440fffff
  409c94:	7ff00000 	.word	0x7ff00000
  409c98:	3ff921fb 	.word	0x3ff921fb
  409c9c:	bff921fb 	.word	0xbff921fb
  409ca0:	54442d18 	.word	0x54442d18
  409ca4:	3fdbffff 	.word	0x3fdbffff
  409ca8:	0040b850 	.word	0x0040b850
  409cac:	0040b830 	.word	0x0040b830
  409cb0:	3ff00000 	.word	0x3ff00000
  409cb4:	3ff2ffff 	.word	0x3ff2ffff
  409cb8:	40037fff 	.word	0x40037fff
  409cbc:	3ff80000 	.word	0x3ff80000
  409cc0:	bff00000 	.word	0xbff00000

00409cc4 <fabs>:
  409cc4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  409cc8:	4770      	bx	lr
  409cca:	bf00      	nop
  409ccc:	0000      	movs	r0, r0
	...

00409cd0 <floor>:
  409cd0:	f3c1 520a 	ubfx	r2, r1, #20, #11
  409cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409cd8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
  409cdc:	2e13      	cmp	r6, #19
  409cde:	460b      	mov	r3, r1
  409ce0:	460d      	mov	r5, r1
  409ce2:	4604      	mov	r4, r0
  409ce4:	4688      	mov	r8, r1
  409ce6:	4607      	mov	r7, r0
  409ce8:	dc1c      	bgt.n	409d24 <floor+0x54>
  409cea:	2e00      	cmp	r6, #0
  409cec:	db3f      	blt.n	409d6e <floor+0x9e>
  409cee:	4a3a      	ldr	r2, [pc, #232]	; (409dd8 <floor+0x108>)
  409cf0:	fa42 f906 	asr.w	r9, r2, r6
  409cf4:	ea01 0209 	and.w	r2, r1, r9
  409cf8:	4302      	orrs	r2, r0
  409cfa:	4686      	mov	lr, r0
  409cfc:	d017      	beq.n	409d2e <floor+0x5e>
  409cfe:	a334      	add	r3, pc, #208	; (adr r3, 409dd0 <floor+0x100>)
  409d00:	e9d3 2300 	ldrd	r2, r3, [r3]
  409d04:	f000 f900 	bl	409f08 <__adddf3>
  409d08:	2200      	movs	r2, #0
  409d0a:	2300      	movs	r3, #0
  409d0c:	f000 fd3e 	bl	40a78c <__aeabi_dcmpgt>
  409d10:	b120      	cbz	r0, 409d1c <floor+0x4c>
  409d12:	2d00      	cmp	r5, #0
  409d14:	db40      	blt.n	409d98 <floor+0xc8>
  409d16:	ea28 0509 	bic.w	r5, r8, r9
  409d1a:	2700      	movs	r7, #0
  409d1c:	4638      	mov	r0, r7
  409d1e:	4629      	mov	r1, r5
  409d20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409d24:	2e33      	cmp	r6, #51	; 0x33
  409d26:	dd06      	ble.n	409d36 <floor+0x66>
  409d28:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  409d2c:	d02f      	beq.n	409d8e <floor+0xbe>
  409d2e:	4620      	mov	r0, r4
  409d30:	4619      	mov	r1, r3
  409d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409d36:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
  409d3a:	f04f 39ff 	mov.w	r9, #4294967295
  409d3e:	fa29 f902 	lsr.w	r9, r9, r2
  409d42:	ea10 0f09 	tst.w	r0, r9
  409d46:	d0f2      	beq.n	409d2e <floor+0x5e>
  409d48:	a321      	add	r3, pc, #132	; (adr r3, 409dd0 <floor+0x100>)
  409d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
  409d4e:	f000 f8db 	bl	409f08 <__adddf3>
  409d52:	2200      	movs	r2, #0
  409d54:	2300      	movs	r3, #0
  409d56:	f000 fd19 	bl	40a78c <__aeabi_dcmpgt>
  409d5a:	2800      	cmp	r0, #0
  409d5c:	d0de      	beq.n	409d1c <floor+0x4c>
  409d5e:	2d00      	cmp	r5, #0
  409d60:	db20      	blt.n	409da4 <floor+0xd4>
  409d62:	4645      	mov	r5, r8
  409d64:	ea27 0709 	bic.w	r7, r7, r9
  409d68:	4638      	mov	r0, r7
  409d6a:	4629      	mov	r1, r5
  409d6c:	e7d8      	b.n	409d20 <floor+0x50>
  409d6e:	a318      	add	r3, pc, #96	; (adr r3, 409dd0 <floor+0x100>)
  409d70:	e9d3 2300 	ldrd	r2, r3, [r3]
  409d74:	f000 f8c8 	bl	409f08 <__adddf3>
  409d78:	2200      	movs	r2, #0
  409d7a:	2300      	movs	r3, #0
  409d7c:	f000 fd06 	bl	40a78c <__aeabi_dcmpgt>
  409d80:	2800      	cmp	r0, #0
  409d82:	d0cb      	beq.n	409d1c <floor+0x4c>
  409d84:	2d00      	cmp	r5, #0
  409d86:	db18      	blt.n	409dba <floor+0xea>
  409d88:	2700      	movs	r7, #0
  409d8a:	463d      	mov	r5, r7
  409d8c:	e7c6      	b.n	409d1c <floor+0x4c>
  409d8e:	4602      	mov	r2, r0
  409d90:	460b      	mov	r3, r1
  409d92:	f000 f8b9 	bl	409f08 <__adddf3>
  409d96:	e7cc      	b.n	409d32 <floor+0x62>
  409d98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  409d9c:	fa43 f606 	asr.w	r6, r3, r6
  409da0:	44b0      	add	r8, r6
  409da2:	e7b8      	b.n	409d16 <floor+0x46>
  409da4:	2e14      	cmp	r6, #20
  409da6:	d010      	beq.n	409dca <floor+0xfa>
  409da8:	2301      	movs	r3, #1
  409daa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
  409dae:	fa03 f606 	lsl.w	r6, r3, r6
  409db2:	1937      	adds	r7, r6, r4
  409db4:	bf28      	it	cs
  409db6:	4498      	addcs	r8, r3
  409db8:	e7d3      	b.n	409d62 <floor+0x92>
  409dba:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
  409dbe:	4b07      	ldr	r3, [pc, #28]	; (409ddc <floor+0x10c>)
  409dc0:	4322      	orrs	r2, r4
  409dc2:	bf18      	it	ne
  409dc4:	461d      	movne	r5, r3
  409dc6:	2700      	movs	r7, #0
  409dc8:	e7a8      	b.n	409d1c <floor+0x4c>
  409dca:	f105 0801 	add.w	r8, r5, #1
  409dce:	e7c8      	b.n	409d62 <floor+0x92>
  409dd0:	8800759c 	.word	0x8800759c
  409dd4:	7e37e43c 	.word	0x7e37e43c
  409dd8:	000fffff 	.word	0x000fffff
  409ddc:	bff00000 	.word	0xbff00000

00409de0 <matherr>:
  409de0:	2000      	movs	r0, #0
  409de2:	4770      	bx	lr

00409de4 <nan>:
  409de4:	2000      	movs	r0, #0
  409de6:	4901      	ldr	r1, [pc, #4]	; (409dec <nan+0x8>)
  409de8:	4770      	bx	lr
  409dea:	bf00      	nop
  409dec:	7ff80000 	.word	0x7ff80000

00409df0 <scalbn>:
  409df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409df2:	f3c1 560a 	ubfx	r6, r1, #20, #11
  409df6:	4604      	mov	r4, r0
  409df8:	460d      	mov	r5, r1
  409dfa:	460b      	mov	r3, r1
  409dfc:	4617      	mov	r7, r2
  409dfe:	bb06      	cbnz	r6, 409e42 <scalbn+0x52>
  409e00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  409e04:	4303      	orrs	r3, r0
  409e06:	d025      	beq.n	409e54 <scalbn+0x64>
  409e08:	2200      	movs	r2, #0
  409e0a:	4b35      	ldr	r3, [pc, #212]	; (409ee0 <scalbn+0xf0>)
  409e0c:	f000 fa2e 	bl	40a26c <__aeabi_dmul>
  409e10:	4a34      	ldr	r2, [pc, #208]	; (409ee4 <scalbn+0xf4>)
  409e12:	4297      	cmp	r7, r2
  409e14:	4604      	mov	r4, r0
  409e16:	460d      	mov	r5, r1
  409e18:	460b      	mov	r3, r1
  409e1a:	db2a      	blt.n	409e72 <scalbn+0x82>
  409e1c:	f3c1 560a 	ubfx	r6, r1, #20, #11
  409e20:	3e36      	subs	r6, #54	; 0x36
  409e22:	443e      	add	r6, r7
  409e24:	f240 72fe 	movw	r2, #2046	; 0x7fe
  409e28:	4296      	cmp	r6, r2
  409e2a:	dc28      	bgt.n	409e7e <scalbn+0x8e>
  409e2c:	2e00      	cmp	r6, #0
  409e2e:	dd12      	ble.n	409e56 <scalbn+0x66>
  409e30:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  409e34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  409e38:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  409e3c:	4620      	mov	r0, r4
  409e3e:	4629      	mov	r1, r5
  409e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409e42:	f240 72ff 	movw	r2, #2047	; 0x7ff
  409e46:	4296      	cmp	r6, r2
  409e48:	d1eb      	bne.n	409e22 <scalbn+0x32>
  409e4a:	4602      	mov	r2, r0
  409e4c:	460b      	mov	r3, r1
  409e4e:	f000 f85b 	bl	409f08 <__adddf3>
  409e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409e56:	f116 0f35 	cmn.w	r6, #53	; 0x35
  409e5a:	da1d      	bge.n	409e98 <scalbn+0xa8>
  409e5c:	f24c 3350 	movw	r3, #50000	; 0xc350
  409e60:	429f      	cmp	r7, r3
  409e62:	4622      	mov	r2, r4
  409e64:	462b      	mov	r3, r5
  409e66:	dc25      	bgt.n	409eb4 <scalbn+0xc4>
  409e68:	a119      	add	r1, pc, #100	; (adr r1, 409ed0 <scalbn+0xe0>)
  409e6a:	e9d1 0100 	ldrd	r0, r1, [r1]
  409e6e:	f000 f83d 	bl	409eec <copysign>
  409e72:	a317      	add	r3, pc, #92	; (adr r3, 409ed0 <scalbn+0xe0>)
  409e74:	e9d3 2300 	ldrd	r2, r3, [r3]
  409e78:	f000 f9f8 	bl	40a26c <__aeabi_dmul>
  409e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409e7e:	4622      	mov	r2, r4
  409e80:	462b      	mov	r3, r5
  409e82:	a115      	add	r1, pc, #84	; (adr r1, 409ed8 <scalbn+0xe8>)
  409e84:	e9d1 0100 	ldrd	r0, r1, [r1]
  409e88:	f000 f830 	bl	409eec <copysign>
  409e8c:	a312      	add	r3, pc, #72	; (adr r3, 409ed8 <scalbn+0xe8>)
  409e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
  409e92:	f000 f9eb 	bl	40a26c <__aeabi_dmul>
  409e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409e98:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  409e9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  409ea0:	3636      	adds	r6, #54	; 0x36
  409ea2:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  409ea6:	4620      	mov	r0, r4
  409ea8:	4629      	mov	r1, r5
  409eaa:	2200      	movs	r2, #0
  409eac:	4b0e      	ldr	r3, [pc, #56]	; (409ee8 <scalbn+0xf8>)
  409eae:	f000 f9dd 	bl	40a26c <__aeabi_dmul>
  409eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409eb4:	a108      	add	r1, pc, #32	; (adr r1, 409ed8 <scalbn+0xe8>)
  409eb6:	e9d1 0100 	ldrd	r0, r1, [r1]
  409eba:	f000 f817 	bl	409eec <copysign>
  409ebe:	a306      	add	r3, pc, #24	; (adr r3, 409ed8 <scalbn+0xe8>)
  409ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
  409ec4:	f000 f9d2 	bl	40a26c <__aeabi_dmul>
  409ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409eca:	bf00      	nop
  409ecc:	f3af 8000 	nop.w
  409ed0:	c2f8f359 	.word	0xc2f8f359
  409ed4:	01a56e1f 	.word	0x01a56e1f
  409ed8:	8800759c 	.word	0x8800759c
  409edc:	7e37e43c 	.word	0x7e37e43c
  409ee0:	43500000 	.word	0x43500000
  409ee4:	ffff3cb0 	.word	0xffff3cb0
  409ee8:	3c900000 	.word	0x3c900000

00409eec <copysign>:
  409eec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  409ef0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
  409ef4:	ea42 0103 	orr.w	r1, r2, r3
  409ef8:	4770      	bx	lr
  409efa:	bf00      	nop

00409efc <__aeabi_drsub>:
  409efc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  409f00:	e002      	b.n	409f08 <__adddf3>
  409f02:	bf00      	nop

00409f04 <__aeabi_dsub>:
  409f04:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00409f08 <__adddf3>:
  409f08:	b530      	push	{r4, r5, lr}
  409f0a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  409f0e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  409f12:	ea94 0f05 	teq	r4, r5
  409f16:	bf08      	it	eq
  409f18:	ea90 0f02 	teqeq	r0, r2
  409f1c:	bf1f      	itttt	ne
  409f1e:	ea54 0c00 	orrsne.w	ip, r4, r0
  409f22:	ea55 0c02 	orrsne.w	ip, r5, r2
  409f26:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  409f2a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  409f2e:	f000 80e2 	beq.w	40a0f6 <__adddf3+0x1ee>
  409f32:	ea4f 5454 	mov.w	r4, r4, lsr #21
  409f36:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  409f3a:	bfb8      	it	lt
  409f3c:	426d      	neglt	r5, r5
  409f3e:	dd0c      	ble.n	409f5a <__adddf3+0x52>
  409f40:	442c      	add	r4, r5
  409f42:	ea80 0202 	eor.w	r2, r0, r2
  409f46:	ea81 0303 	eor.w	r3, r1, r3
  409f4a:	ea82 0000 	eor.w	r0, r2, r0
  409f4e:	ea83 0101 	eor.w	r1, r3, r1
  409f52:	ea80 0202 	eor.w	r2, r0, r2
  409f56:	ea81 0303 	eor.w	r3, r1, r3
  409f5a:	2d36      	cmp	r5, #54	; 0x36
  409f5c:	bf88      	it	hi
  409f5e:	bd30      	pophi	{r4, r5, pc}
  409f60:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  409f64:	ea4f 3101 	mov.w	r1, r1, lsl #12
  409f68:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  409f6c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  409f70:	d002      	beq.n	409f78 <__adddf3+0x70>
  409f72:	4240      	negs	r0, r0
  409f74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  409f78:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  409f7c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  409f80:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  409f84:	d002      	beq.n	409f8c <__adddf3+0x84>
  409f86:	4252      	negs	r2, r2
  409f88:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  409f8c:	ea94 0f05 	teq	r4, r5
  409f90:	f000 80a7 	beq.w	40a0e2 <__adddf3+0x1da>
  409f94:	f1a4 0401 	sub.w	r4, r4, #1
  409f98:	f1d5 0e20 	rsbs	lr, r5, #32
  409f9c:	db0d      	blt.n	409fba <__adddf3+0xb2>
  409f9e:	fa02 fc0e 	lsl.w	ip, r2, lr
  409fa2:	fa22 f205 	lsr.w	r2, r2, r5
  409fa6:	1880      	adds	r0, r0, r2
  409fa8:	f141 0100 	adc.w	r1, r1, #0
  409fac:	fa03 f20e 	lsl.w	r2, r3, lr
  409fb0:	1880      	adds	r0, r0, r2
  409fb2:	fa43 f305 	asr.w	r3, r3, r5
  409fb6:	4159      	adcs	r1, r3
  409fb8:	e00e      	b.n	409fd8 <__adddf3+0xd0>
  409fba:	f1a5 0520 	sub.w	r5, r5, #32
  409fbe:	f10e 0e20 	add.w	lr, lr, #32
  409fc2:	2a01      	cmp	r2, #1
  409fc4:	fa03 fc0e 	lsl.w	ip, r3, lr
  409fc8:	bf28      	it	cs
  409fca:	f04c 0c02 	orrcs.w	ip, ip, #2
  409fce:	fa43 f305 	asr.w	r3, r3, r5
  409fd2:	18c0      	adds	r0, r0, r3
  409fd4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  409fd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  409fdc:	d507      	bpl.n	409fee <__adddf3+0xe6>
  409fde:	f04f 0e00 	mov.w	lr, #0
  409fe2:	f1dc 0c00 	rsbs	ip, ip, #0
  409fe6:	eb7e 0000 	sbcs.w	r0, lr, r0
  409fea:	eb6e 0101 	sbc.w	r1, lr, r1
  409fee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  409ff2:	d31b      	bcc.n	40a02c <__adddf3+0x124>
  409ff4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  409ff8:	d30c      	bcc.n	40a014 <__adddf3+0x10c>
  409ffa:	0849      	lsrs	r1, r1, #1
  409ffc:	ea5f 0030 	movs.w	r0, r0, rrx
  40a000:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40a004:	f104 0401 	add.w	r4, r4, #1
  40a008:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40a00c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40a010:	f080 809a 	bcs.w	40a148 <__adddf3+0x240>
  40a014:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40a018:	bf08      	it	eq
  40a01a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40a01e:	f150 0000 	adcs.w	r0, r0, #0
  40a022:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a026:	ea41 0105 	orr.w	r1, r1, r5
  40a02a:	bd30      	pop	{r4, r5, pc}
  40a02c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40a030:	4140      	adcs	r0, r0
  40a032:	eb41 0101 	adc.w	r1, r1, r1
  40a036:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a03a:	f1a4 0401 	sub.w	r4, r4, #1
  40a03e:	d1e9      	bne.n	40a014 <__adddf3+0x10c>
  40a040:	f091 0f00 	teq	r1, #0
  40a044:	bf04      	itt	eq
  40a046:	4601      	moveq	r1, r0
  40a048:	2000      	moveq	r0, #0
  40a04a:	fab1 f381 	clz	r3, r1
  40a04e:	bf08      	it	eq
  40a050:	3320      	addeq	r3, #32
  40a052:	f1a3 030b 	sub.w	r3, r3, #11
  40a056:	f1b3 0220 	subs.w	r2, r3, #32
  40a05a:	da0c      	bge.n	40a076 <__adddf3+0x16e>
  40a05c:	320c      	adds	r2, #12
  40a05e:	dd08      	ble.n	40a072 <__adddf3+0x16a>
  40a060:	f102 0c14 	add.w	ip, r2, #20
  40a064:	f1c2 020c 	rsb	r2, r2, #12
  40a068:	fa01 f00c 	lsl.w	r0, r1, ip
  40a06c:	fa21 f102 	lsr.w	r1, r1, r2
  40a070:	e00c      	b.n	40a08c <__adddf3+0x184>
  40a072:	f102 0214 	add.w	r2, r2, #20
  40a076:	bfd8      	it	le
  40a078:	f1c2 0c20 	rsble	ip, r2, #32
  40a07c:	fa01 f102 	lsl.w	r1, r1, r2
  40a080:	fa20 fc0c 	lsr.w	ip, r0, ip
  40a084:	bfdc      	itt	le
  40a086:	ea41 010c 	orrle.w	r1, r1, ip
  40a08a:	4090      	lslle	r0, r2
  40a08c:	1ae4      	subs	r4, r4, r3
  40a08e:	bfa2      	ittt	ge
  40a090:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40a094:	4329      	orrge	r1, r5
  40a096:	bd30      	popge	{r4, r5, pc}
  40a098:	ea6f 0404 	mvn.w	r4, r4
  40a09c:	3c1f      	subs	r4, #31
  40a09e:	da1c      	bge.n	40a0da <__adddf3+0x1d2>
  40a0a0:	340c      	adds	r4, #12
  40a0a2:	dc0e      	bgt.n	40a0c2 <__adddf3+0x1ba>
  40a0a4:	f104 0414 	add.w	r4, r4, #20
  40a0a8:	f1c4 0220 	rsb	r2, r4, #32
  40a0ac:	fa20 f004 	lsr.w	r0, r0, r4
  40a0b0:	fa01 f302 	lsl.w	r3, r1, r2
  40a0b4:	ea40 0003 	orr.w	r0, r0, r3
  40a0b8:	fa21 f304 	lsr.w	r3, r1, r4
  40a0bc:	ea45 0103 	orr.w	r1, r5, r3
  40a0c0:	bd30      	pop	{r4, r5, pc}
  40a0c2:	f1c4 040c 	rsb	r4, r4, #12
  40a0c6:	f1c4 0220 	rsb	r2, r4, #32
  40a0ca:	fa20 f002 	lsr.w	r0, r0, r2
  40a0ce:	fa01 f304 	lsl.w	r3, r1, r4
  40a0d2:	ea40 0003 	orr.w	r0, r0, r3
  40a0d6:	4629      	mov	r1, r5
  40a0d8:	bd30      	pop	{r4, r5, pc}
  40a0da:	fa21 f004 	lsr.w	r0, r1, r4
  40a0de:	4629      	mov	r1, r5
  40a0e0:	bd30      	pop	{r4, r5, pc}
  40a0e2:	f094 0f00 	teq	r4, #0
  40a0e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40a0ea:	bf06      	itte	eq
  40a0ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40a0f0:	3401      	addeq	r4, #1
  40a0f2:	3d01      	subne	r5, #1
  40a0f4:	e74e      	b.n	409f94 <__adddf3+0x8c>
  40a0f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a0fa:	bf18      	it	ne
  40a0fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a100:	d029      	beq.n	40a156 <__adddf3+0x24e>
  40a102:	ea94 0f05 	teq	r4, r5
  40a106:	bf08      	it	eq
  40a108:	ea90 0f02 	teqeq	r0, r2
  40a10c:	d005      	beq.n	40a11a <__adddf3+0x212>
  40a10e:	ea54 0c00 	orrs.w	ip, r4, r0
  40a112:	bf04      	itt	eq
  40a114:	4619      	moveq	r1, r3
  40a116:	4610      	moveq	r0, r2
  40a118:	bd30      	pop	{r4, r5, pc}
  40a11a:	ea91 0f03 	teq	r1, r3
  40a11e:	bf1e      	ittt	ne
  40a120:	2100      	movne	r1, #0
  40a122:	2000      	movne	r0, #0
  40a124:	bd30      	popne	{r4, r5, pc}
  40a126:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40a12a:	d105      	bne.n	40a138 <__adddf3+0x230>
  40a12c:	0040      	lsls	r0, r0, #1
  40a12e:	4149      	adcs	r1, r1
  40a130:	bf28      	it	cs
  40a132:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40a136:	bd30      	pop	{r4, r5, pc}
  40a138:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40a13c:	bf3c      	itt	cc
  40a13e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40a142:	bd30      	popcc	{r4, r5, pc}
  40a144:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a148:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40a14c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40a150:	f04f 0000 	mov.w	r0, #0
  40a154:	bd30      	pop	{r4, r5, pc}
  40a156:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a15a:	bf1a      	itte	ne
  40a15c:	4619      	movne	r1, r3
  40a15e:	4610      	movne	r0, r2
  40a160:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40a164:	bf1c      	itt	ne
  40a166:	460b      	movne	r3, r1
  40a168:	4602      	movne	r2, r0
  40a16a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40a16e:	bf06      	itte	eq
  40a170:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40a174:	ea91 0f03 	teqeq	r1, r3
  40a178:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40a17c:	bd30      	pop	{r4, r5, pc}
  40a17e:	bf00      	nop

0040a180 <__aeabi_ui2d>:
  40a180:	f090 0f00 	teq	r0, #0
  40a184:	bf04      	itt	eq
  40a186:	2100      	moveq	r1, #0
  40a188:	4770      	bxeq	lr
  40a18a:	b530      	push	{r4, r5, lr}
  40a18c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a190:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a194:	f04f 0500 	mov.w	r5, #0
  40a198:	f04f 0100 	mov.w	r1, #0
  40a19c:	e750      	b.n	40a040 <__adddf3+0x138>
  40a19e:	bf00      	nop

0040a1a0 <__aeabi_i2d>:
  40a1a0:	f090 0f00 	teq	r0, #0
  40a1a4:	bf04      	itt	eq
  40a1a6:	2100      	moveq	r1, #0
  40a1a8:	4770      	bxeq	lr
  40a1aa:	b530      	push	{r4, r5, lr}
  40a1ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a1b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a1b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40a1b8:	bf48      	it	mi
  40a1ba:	4240      	negmi	r0, r0
  40a1bc:	f04f 0100 	mov.w	r1, #0
  40a1c0:	e73e      	b.n	40a040 <__adddf3+0x138>
  40a1c2:	bf00      	nop

0040a1c4 <__aeabi_f2d>:
  40a1c4:	0042      	lsls	r2, r0, #1
  40a1c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40a1ca:	ea4f 0131 	mov.w	r1, r1, rrx
  40a1ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40a1d2:	bf1f      	itttt	ne
  40a1d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40a1d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a1dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40a1e0:	4770      	bxne	lr
  40a1e2:	f092 0f00 	teq	r2, #0
  40a1e6:	bf14      	ite	ne
  40a1e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a1ec:	4770      	bxeq	lr
  40a1ee:	b530      	push	{r4, r5, lr}
  40a1f0:	f44f 7460 	mov.w	r4, #896	; 0x380
  40a1f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a1f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a1fc:	e720      	b.n	40a040 <__adddf3+0x138>
  40a1fe:	bf00      	nop

0040a200 <__aeabi_ul2d>:
  40a200:	ea50 0201 	orrs.w	r2, r0, r1
  40a204:	bf08      	it	eq
  40a206:	4770      	bxeq	lr
  40a208:	b530      	push	{r4, r5, lr}
  40a20a:	f04f 0500 	mov.w	r5, #0
  40a20e:	e00a      	b.n	40a226 <__aeabi_l2d+0x16>

0040a210 <__aeabi_l2d>:
  40a210:	ea50 0201 	orrs.w	r2, r0, r1
  40a214:	bf08      	it	eq
  40a216:	4770      	bxeq	lr
  40a218:	b530      	push	{r4, r5, lr}
  40a21a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40a21e:	d502      	bpl.n	40a226 <__aeabi_l2d+0x16>
  40a220:	4240      	negs	r0, r0
  40a222:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a226:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a22a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a22e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40a232:	f43f aedc 	beq.w	409fee <__adddf3+0xe6>
  40a236:	f04f 0203 	mov.w	r2, #3
  40a23a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a23e:	bf18      	it	ne
  40a240:	3203      	addne	r2, #3
  40a242:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a246:	bf18      	it	ne
  40a248:	3203      	addne	r2, #3
  40a24a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40a24e:	f1c2 0320 	rsb	r3, r2, #32
  40a252:	fa00 fc03 	lsl.w	ip, r0, r3
  40a256:	fa20 f002 	lsr.w	r0, r0, r2
  40a25a:	fa01 fe03 	lsl.w	lr, r1, r3
  40a25e:	ea40 000e 	orr.w	r0, r0, lr
  40a262:	fa21 f102 	lsr.w	r1, r1, r2
  40a266:	4414      	add	r4, r2
  40a268:	e6c1      	b.n	409fee <__adddf3+0xe6>
  40a26a:	bf00      	nop

0040a26c <__aeabi_dmul>:
  40a26c:	b570      	push	{r4, r5, r6, lr}
  40a26e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40a272:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40a276:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40a27a:	bf1d      	ittte	ne
  40a27c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40a280:	ea94 0f0c 	teqne	r4, ip
  40a284:	ea95 0f0c 	teqne	r5, ip
  40a288:	f000 f8de 	bleq	40a448 <__aeabi_dmul+0x1dc>
  40a28c:	442c      	add	r4, r5
  40a28e:	ea81 0603 	eor.w	r6, r1, r3
  40a292:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40a296:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40a29a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40a29e:	bf18      	it	ne
  40a2a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40a2a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a2a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40a2ac:	d038      	beq.n	40a320 <__aeabi_dmul+0xb4>
  40a2ae:	fba0 ce02 	umull	ip, lr, r0, r2
  40a2b2:	f04f 0500 	mov.w	r5, #0
  40a2b6:	fbe1 e502 	umlal	lr, r5, r1, r2
  40a2ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40a2be:	fbe0 e503 	umlal	lr, r5, r0, r3
  40a2c2:	f04f 0600 	mov.w	r6, #0
  40a2c6:	fbe1 5603 	umlal	r5, r6, r1, r3
  40a2ca:	f09c 0f00 	teq	ip, #0
  40a2ce:	bf18      	it	ne
  40a2d0:	f04e 0e01 	orrne.w	lr, lr, #1
  40a2d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40a2d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40a2dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40a2e0:	d204      	bcs.n	40a2ec <__aeabi_dmul+0x80>
  40a2e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40a2e6:	416d      	adcs	r5, r5
  40a2e8:	eb46 0606 	adc.w	r6, r6, r6
  40a2ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40a2f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40a2f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40a2f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40a2fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40a300:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40a304:	bf88      	it	hi
  40a306:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40a30a:	d81e      	bhi.n	40a34a <__aeabi_dmul+0xde>
  40a30c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40a310:	bf08      	it	eq
  40a312:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40a316:	f150 0000 	adcs.w	r0, r0, #0
  40a31a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a31e:	bd70      	pop	{r4, r5, r6, pc}
  40a320:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40a324:	ea46 0101 	orr.w	r1, r6, r1
  40a328:	ea40 0002 	orr.w	r0, r0, r2
  40a32c:	ea81 0103 	eor.w	r1, r1, r3
  40a330:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40a334:	bfc2      	ittt	gt
  40a336:	ebd4 050c 	rsbsgt	r5, r4, ip
  40a33a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40a33e:	bd70      	popgt	{r4, r5, r6, pc}
  40a340:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a344:	f04f 0e00 	mov.w	lr, #0
  40a348:	3c01      	subs	r4, #1
  40a34a:	f300 80ab 	bgt.w	40a4a4 <__aeabi_dmul+0x238>
  40a34e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40a352:	bfde      	ittt	le
  40a354:	2000      	movle	r0, #0
  40a356:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40a35a:	bd70      	pople	{r4, r5, r6, pc}
  40a35c:	f1c4 0400 	rsb	r4, r4, #0
  40a360:	3c20      	subs	r4, #32
  40a362:	da35      	bge.n	40a3d0 <__aeabi_dmul+0x164>
  40a364:	340c      	adds	r4, #12
  40a366:	dc1b      	bgt.n	40a3a0 <__aeabi_dmul+0x134>
  40a368:	f104 0414 	add.w	r4, r4, #20
  40a36c:	f1c4 0520 	rsb	r5, r4, #32
  40a370:	fa00 f305 	lsl.w	r3, r0, r5
  40a374:	fa20 f004 	lsr.w	r0, r0, r4
  40a378:	fa01 f205 	lsl.w	r2, r1, r5
  40a37c:	ea40 0002 	orr.w	r0, r0, r2
  40a380:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40a384:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a388:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40a38c:	fa21 f604 	lsr.w	r6, r1, r4
  40a390:	eb42 0106 	adc.w	r1, r2, r6
  40a394:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a398:	bf08      	it	eq
  40a39a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a39e:	bd70      	pop	{r4, r5, r6, pc}
  40a3a0:	f1c4 040c 	rsb	r4, r4, #12
  40a3a4:	f1c4 0520 	rsb	r5, r4, #32
  40a3a8:	fa00 f304 	lsl.w	r3, r0, r4
  40a3ac:	fa20 f005 	lsr.w	r0, r0, r5
  40a3b0:	fa01 f204 	lsl.w	r2, r1, r4
  40a3b4:	ea40 0002 	orr.w	r0, r0, r2
  40a3b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a3bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40a3c0:	f141 0100 	adc.w	r1, r1, #0
  40a3c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a3c8:	bf08      	it	eq
  40a3ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a3ce:	bd70      	pop	{r4, r5, r6, pc}
  40a3d0:	f1c4 0520 	rsb	r5, r4, #32
  40a3d4:	fa00 f205 	lsl.w	r2, r0, r5
  40a3d8:	ea4e 0e02 	orr.w	lr, lr, r2
  40a3dc:	fa20 f304 	lsr.w	r3, r0, r4
  40a3e0:	fa01 f205 	lsl.w	r2, r1, r5
  40a3e4:	ea43 0302 	orr.w	r3, r3, r2
  40a3e8:	fa21 f004 	lsr.w	r0, r1, r4
  40a3ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a3f0:	fa21 f204 	lsr.w	r2, r1, r4
  40a3f4:	ea20 0002 	bic.w	r0, r0, r2
  40a3f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40a3fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a400:	bf08      	it	eq
  40a402:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a406:	bd70      	pop	{r4, r5, r6, pc}
  40a408:	f094 0f00 	teq	r4, #0
  40a40c:	d10f      	bne.n	40a42e <__aeabi_dmul+0x1c2>
  40a40e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40a412:	0040      	lsls	r0, r0, #1
  40a414:	eb41 0101 	adc.w	r1, r1, r1
  40a418:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a41c:	bf08      	it	eq
  40a41e:	3c01      	subeq	r4, #1
  40a420:	d0f7      	beq.n	40a412 <__aeabi_dmul+0x1a6>
  40a422:	ea41 0106 	orr.w	r1, r1, r6
  40a426:	f095 0f00 	teq	r5, #0
  40a42a:	bf18      	it	ne
  40a42c:	4770      	bxne	lr
  40a42e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40a432:	0052      	lsls	r2, r2, #1
  40a434:	eb43 0303 	adc.w	r3, r3, r3
  40a438:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40a43c:	bf08      	it	eq
  40a43e:	3d01      	subeq	r5, #1
  40a440:	d0f7      	beq.n	40a432 <__aeabi_dmul+0x1c6>
  40a442:	ea43 0306 	orr.w	r3, r3, r6
  40a446:	4770      	bx	lr
  40a448:	ea94 0f0c 	teq	r4, ip
  40a44c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40a450:	bf18      	it	ne
  40a452:	ea95 0f0c 	teqne	r5, ip
  40a456:	d00c      	beq.n	40a472 <__aeabi_dmul+0x206>
  40a458:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a45c:	bf18      	it	ne
  40a45e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a462:	d1d1      	bne.n	40a408 <__aeabi_dmul+0x19c>
  40a464:	ea81 0103 	eor.w	r1, r1, r3
  40a468:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a46c:	f04f 0000 	mov.w	r0, #0
  40a470:	bd70      	pop	{r4, r5, r6, pc}
  40a472:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a476:	bf06      	itte	eq
  40a478:	4610      	moveq	r0, r2
  40a47a:	4619      	moveq	r1, r3
  40a47c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a480:	d019      	beq.n	40a4b6 <__aeabi_dmul+0x24a>
  40a482:	ea94 0f0c 	teq	r4, ip
  40a486:	d102      	bne.n	40a48e <__aeabi_dmul+0x222>
  40a488:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40a48c:	d113      	bne.n	40a4b6 <__aeabi_dmul+0x24a>
  40a48e:	ea95 0f0c 	teq	r5, ip
  40a492:	d105      	bne.n	40a4a0 <__aeabi_dmul+0x234>
  40a494:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40a498:	bf1c      	itt	ne
  40a49a:	4610      	movne	r0, r2
  40a49c:	4619      	movne	r1, r3
  40a49e:	d10a      	bne.n	40a4b6 <__aeabi_dmul+0x24a>
  40a4a0:	ea81 0103 	eor.w	r1, r1, r3
  40a4a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a4a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40a4ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40a4b0:	f04f 0000 	mov.w	r0, #0
  40a4b4:	bd70      	pop	{r4, r5, r6, pc}
  40a4b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40a4ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40a4be:	bd70      	pop	{r4, r5, r6, pc}

0040a4c0 <__aeabi_ddiv>:
  40a4c0:	b570      	push	{r4, r5, r6, lr}
  40a4c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40a4c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40a4ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40a4ce:	bf1d      	ittte	ne
  40a4d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40a4d4:	ea94 0f0c 	teqne	r4, ip
  40a4d8:	ea95 0f0c 	teqne	r5, ip
  40a4dc:	f000 f8a7 	bleq	40a62e <__aeabi_ddiv+0x16e>
  40a4e0:	eba4 0405 	sub.w	r4, r4, r5
  40a4e4:	ea81 0e03 	eor.w	lr, r1, r3
  40a4e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40a4ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40a4f0:	f000 8088 	beq.w	40a604 <__aeabi_ddiv+0x144>
  40a4f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40a4f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40a4fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40a500:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40a504:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40a508:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40a50c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40a510:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40a514:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40a518:	429d      	cmp	r5, r3
  40a51a:	bf08      	it	eq
  40a51c:	4296      	cmpeq	r6, r2
  40a51e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40a522:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40a526:	d202      	bcs.n	40a52e <__aeabi_ddiv+0x6e>
  40a528:	085b      	lsrs	r3, r3, #1
  40a52a:	ea4f 0232 	mov.w	r2, r2, rrx
  40a52e:	1ab6      	subs	r6, r6, r2
  40a530:	eb65 0503 	sbc.w	r5, r5, r3
  40a534:	085b      	lsrs	r3, r3, #1
  40a536:	ea4f 0232 	mov.w	r2, r2, rrx
  40a53a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40a53e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40a542:	ebb6 0e02 	subs.w	lr, r6, r2
  40a546:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a54a:	bf22      	ittt	cs
  40a54c:	1ab6      	subcs	r6, r6, r2
  40a54e:	4675      	movcs	r5, lr
  40a550:	ea40 000c 	orrcs.w	r0, r0, ip
  40a554:	085b      	lsrs	r3, r3, #1
  40a556:	ea4f 0232 	mov.w	r2, r2, rrx
  40a55a:	ebb6 0e02 	subs.w	lr, r6, r2
  40a55e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a562:	bf22      	ittt	cs
  40a564:	1ab6      	subcs	r6, r6, r2
  40a566:	4675      	movcs	r5, lr
  40a568:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40a56c:	085b      	lsrs	r3, r3, #1
  40a56e:	ea4f 0232 	mov.w	r2, r2, rrx
  40a572:	ebb6 0e02 	subs.w	lr, r6, r2
  40a576:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a57a:	bf22      	ittt	cs
  40a57c:	1ab6      	subcs	r6, r6, r2
  40a57e:	4675      	movcs	r5, lr
  40a580:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40a584:	085b      	lsrs	r3, r3, #1
  40a586:	ea4f 0232 	mov.w	r2, r2, rrx
  40a58a:	ebb6 0e02 	subs.w	lr, r6, r2
  40a58e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a592:	bf22      	ittt	cs
  40a594:	1ab6      	subcs	r6, r6, r2
  40a596:	4675      	movcs	r5, lr
  40a598:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40a59c:	ea55 0e06 	orrs.w	lr, r5, r6
  40a5a0:	d018      	beq.n	40a5d4 <__aeabi_ddiv+0x114>
  40a5a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40a5a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40a5aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40a5ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40a5b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40a5b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40a5ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40a5be:	d1c0      	bne.n	40a542 <__aeabi_ddiv+0x82>
  40a5c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a5c4:	d10b      	bne.n	40a5de <__aeabi_ddiv+0x11e>
  40a5c6:	ea41 0100 	orr.w	r1, r1, r0
  40a5ca:	f04f 0000 	mov.w	r0, #0
  40a5ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40a5d2:	e7b6      	b.n	40a542 <__aeabi_ddiv+0x82>
  40a5d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a5d8:	bf04      	itt	eq
  40a5da:	4301      	orreq	r1, r0
  40a5dc:	2000      	moveq	r0, #0
  40a5de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40a5e2:	bf88      	it	hi
  40a5e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40a5e8:	f63f aeaf 	bhi.w	40a34a <__aeabi_dmul+0xde>
  40a5ec:	ebb5 0c03 	subs.w	ip, r5, r3
  40a5f0:	bf04      	itt	eq
  40a5f2:	ebb6 0c02 	subseq.w	ip, r6, r2
  40a5f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40a5fa:	f150 0000 	adcs.w	r0, r0, #0
  40a5fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a602:	bd70      	pop	{r4, r5, r6, pc}
  40a604:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40a608:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40a60c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40a610:	bfc2      	ittt	gt
  40a612:	ebd4 050c 	rsbsgt	r5, r4, ip
  40a616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40a61a:	bd70      	popgt	{r4, r5, r6, pc}
  40a61c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a620:	f04f 0e00 	mov.w	lr, #0
  40a624:	3c01      	subs	r4, #1
  40a626:	e690      	b.n	40a34a <__aeabi_dmul+0xde>
  40a628:	ea45 0e06 	orr.w	lr, r5, r6
  40a62c:	e68d      	b.n	40a34a <__aeabi_dmul+0xde>
  40a62e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40a632:	ea94 0f0c 	teq	r4, ip
  40a636:	bf08      	it	eq
  40a638:	ea95 0f0c 	teqeq	r5, ip
  40a63c:	f43f af3b 	beq.w	40a4b6 <__aeabi_dmul+0x24a>
  40a640:	ea94 0f0c 	teq	r4, ip
  40a644:	d10a      	bne.n	40a65c <__aeabi_ddiv+0x19c>
  40a646:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40a64a:	f47f af34 	bne.w	40a4b6 <__aeabi_dmul+0x24a>
  40a64e:	ea95 0f0c 	teq	r5, ip
  40a652:	f47f af25 	bne.w	40a4a0 <__aeabi_dmul+0x234>
  40a656:	4610      	mov	r0, r2
  40a658:	4619      	mov	r1, r3
  40a65a:	e72c      	b.n	40a4b6 <__aeabi_dmul+0x24a>
  40a65c:	ea95 0f0c 	teq	r5, ip
  40a660:	d106      	bne.n	40a670 <__aeabi_ddiv+0x1b0>
  40a662:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40a666:	f43f aefd 	beq.w	40a464 <__aeabi_dmul+0x1f8>
  40a66a:	4610      	mov	r0, r2
  40a66c:	4619      	mov	r1, r3
  40a66e:	e722      	b.n	40a4b6 <__aeabi_dmul+0x24a>
  40a670:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a674:	bf18      	it	ne
  40a676:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a67a:	f47f aec5 	bne.w	40a408 <__aeabi_dmul+0x19c>
  40a67e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40a682:	f47f af0d 	bne.w	40a4a0 <__aeabi_dmul+0x234>
  40a686:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40a68a:	f47f aeeb 	bne.w	40a464 <__aeabi_dmul+0x1f8>
  40a68e:	e712      	b.n	40a4b6 <__aeabi_dmul+0x24a>

0040a690 <__gedf2>:
  40a690:	f04f 3cff 	mov.w	ip, #4294967295
  40a694:	e006      	b.n	40a6a4 <__cmpdf2+0x4>
  40a696:	bf00      	nop

0040a698 <__ledf2>:
  40a698:	f04f 0c01 	mov.w	ip, #1
  40a69c:	e002      	b.n	40a6a4 <__cmpdf2+0x4>
  40a69e:	bf00      	nop

0040a6a0 <__cmpdf2>:
  40a6a0:	f04f 0c01 	mov.w	ip, #1
  40a6a4:	f84d cd04 	str.w	ip, [sp, #-4]!
  40a6a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a6ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a6b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a6b4:	bf18      	it	ne
  40a6b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40a6ba:	d01b      	beq.n	40a6f4 <__cmpdf2+0x54>
  40a6bc:	b001      	add	sp, #4
  40a6be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40a6c2:	bf0c      	ite	eq
  40a6c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40a6c8:	ea91 0f03 	teqne	r1, r3
  40a6cc:	bf02      	ittt	eq
  40a6ce:	ea90 0f02 	teqeq	r0, r2
  40a6d2:	2000      	moveq	r0, #0
  40a6d4:	4770      	bxeq	lr
  40a6d6:	f110 0f00 	cmn.w	r0, #0
  40a6da:	ea91 0f03 	teq	r1, r3
  40a6de:	bf58      	it	pl
  40a6e0:	4299      	cmppl	r1, r3
  40a6e2:	bf08      	it	eq
  40a6e4:	4290      	cmpeq	r0, r2
  40a6e6:	bf2c      	ite	cs
  40a6e8:	17d8      	asrcs	r0, r3, #31
  40a6ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40a6ee:	f040 0001 	orr.w	r0, r0, #1
  40a6f2:	4770      	bx	lr
  40a6f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a6f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a6fc:	d102      	bne.n	40a704 <__cmpdf2+0x64>
  40a6fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40a702:	d107      	bne.n	40a714 <__cmpdf2+0x74>
  40a704:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a708:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a70c:	d1d6      	bne.n	40a6bc <__cmpdf2+0x1c>
  40a70e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40a712:	d0d3      	beq.n	40a6bc <__cmpdf2+0x1c>
  40a714:	f85d 0b04 	ldr.w	r0, [sp], #4
  40a718:	4770      	bx	lr
  40a71a:	bf00      	nop

0040a71c <__aeabi_cdrcmple>:
  40a71c:	4684      	mov	ip, r0
  40a71e:	4610      	mov	r0, r2
  40a720:	4662      	mov	r2, ip
  40a722:	468c      	mov	ip, r1
  40a724:	4619      	mov	r1, r3
  40a726:	4663      	mov	r3, ip
  40a728:	e000      	b.n	40a72c <__aeabi_cdcmpeq>
  40a72a:	bf00      	nop

0040a72c <__aeabi_cdcmpeq>:
  40a72c:	b501      	push	{r0, lr}
  40a72e:	f7ff ffb7 	bl	40a6a0 <__cmpdf2>
  40a732:	2800      	cmp	r0, #0
  40a734:	bf48      	it	mi
  40a736:	f110 0f00 	cmnmi.w	r0, #0
  40a73a:	bd01      	pop	{r0, pc}

0040a73c <__aeabi_dcmpeq>:
  40a73c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a740:	f7ff fff4 	bl	40a72c <__aeabi_cdcmpeq>
  40a744:	bf0c      	ite	eq
  40a746:	2001      	moveq	r0, #1
  40a748:	2000      	movne	r0, #0
  40a74a:	f85d fb08 	ldr.w	pc, [sp], #8
  40a74e:	bf00      	nop

0040a750 <__aeabi_dcmplt>:
  40a750:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a754:	f7ff ffea 	bl	40a72c <__aeabi_cdcmpeq>
  40a758:	bf34      	ite	cc
  40a75a:	2001      	movcc	r0, #1
  40a75c:	2000      	movcs	r0, #0
  40a75e:	f85d fb08 	ldr.w	pc, [sp], #8
  40a762:	bf00      	nop

0040a764 <__aeabi_dcmple>:
  40a764:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a768:	f7ff ffe0 	bl	40a72c <__aeabi_cdcmpeq>
  40a76c:	bf94      	ite	ls
  40a76e:	2001      	movls	r0, #1
  40a770:	2000      	movhi	r0, #0
  40a772:	f85d fb08 	ldr.w	pc, [sp], #8
  40a776:	bf00      	nop

0040a778 <__aeabi_dcmpge>:
  40a778:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a77c:	f7ff ffce 	bl	40a71c <__aeabi_cdrcmple>
  40a780:	bf94      	ite	ls
  40a782:	2001      	movls	r0, #1
  40a784:	2000      	movhi	r0, #0
  40a786:	f85d fb08 	ldr.w	pc, [sp], #8
  40a78a:	bf00      	nop

0040a78c <__aeabi_dcmpgt>:
  40a78c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a790:	f7ff ffc4 	bl	40a71c <__aeabi_cdrcmple>
  40a794:	bf34      	ite	cc
  40a796:	2001      	movcc	r0, #1
  40a798:	2000      	movcs	r0, #0
  40a79a:	f85d fb08 	ldr.w	pc, [sp], #8
  40a79e:	bf00      	nop

0040a7a0 <__aeabi_dcmpun>:
  40a7a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a7a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a7a8:	d102      	bne.n	40a7b0 <__aeabi_dcmpun+0x10>
  40a7aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40a7ae:	d10a      	bne.n	40a7c6 <__aeabi_dcmpun+0x26>
  40a7b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a7b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a7b8:	d102      	bne.n	40a7c0 <__aeabi_dcmpun+0x20>
  40a7ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40a7be:	d102      	bne.n	40a7c6 <__aeabi_dcmpun+0x26>
  40a7c0:	f04f 0000 	mov.w	r0, #0
  40a7c4:	4770      	bx	lr
  40a7c6:	f04f 0001 	mov.w	r0, #1
  40a7ca:	4770      	bx	lr

0040a7cc <__aeabi_d2iz>:
  40a7cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40a7d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40a7d4:	d215      	bcs.n	40a802 <__aeabi_d2iz+0x36>
  40a7d6:	d511      	bpl.n	40a7fc <__aeabi_d2iz+0x30>
  40a7d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40a7dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40a7e0:	d912      	bls.n	40a808 <__aeabi_d2iz+0x3c>
  40a7e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40a7e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40a7ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40a7ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40a7f2:	fa23 f002 	lsr.w	r0, r3, r2
  40a7f6:	bf18      	it	ne
  40a7f8:	4240      	negne	r0, r0
  40a7fa:	4770      	bx	lr
  40a7fc:	f04f 0000 	mov.w	r0, #0
  40a800:	4770      	bx	lr
  40a802:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40a806:	d105      	bne.n	40a814 <__aeabi_d2iz+0x48>
  40a808:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40a80c:	bf08      	it	eq
  40a80e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40a812:	4770      	bx	lr
  40a814:	f04f 0000 	mov.w	r0, #0
  40a818:	4770      	bx	lr
  40a81a:	bf00      	nop

0040a81c <__aeabi_d2f>:
  40a81c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40a820:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  40a824:	bf24      	itt	cs
  40a826:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40a82a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40a82e:	d90d      	bls.n	40a84c <__aeabi_d2f+0x30>
  40a830:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40a834:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  40a838:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  40a83c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  40a840:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  40a844:	bf08      	it	eq
  40a846:	f020 0001 	biceq.w	r0, r0, #1
  40a84a:	4770      	bx	lr
  40a84c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  40a850:	d121      	bne.n	40a896 <__aeabi_d2f+0x7a>
  40a852:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40a856:	bfbc      	itt	lt
  40a858:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  40a85c:	4770      	bxlt	lr
  40a85e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a862:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40a866:	f1c2 0218 	rsb	r2, r2, #24
  40a86a:	f1c2 0c20 	rsb	ip, r2, #32
  40a86e:	fa10 f30c 	lsls.w	r3, r0, ip
  40a872:	fa20 f002 	lsr.w	r0, r0, r2
  40a876:	bf18      	it	ne
  40a878:	f040 0001 	orrne.w	r0, r0, #1
  40a87c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40a880:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  40a884:	fa03 fc0c 	lsl.w	ip, r3, ip
  40a888:	ea40 000c 	orr.w	r0, r0, ip
  40a88c:	fa23 f302 	lsr.w	r3, r3, r2
  40a890:	ea4f 0343 	mov.w	r3, r3, lsl #1
  40a894:	e7cc      	b.n	40a830 <__aeabi_d2f+0x14>
  40a896:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40a89a:	d107      	bne.n	40a8ac <__aeabi_d2f+0x90>
  40a89c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  40a8a0:	bf1e      	ittt	ne
  40a8a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40a8a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40a8aa:	4770      	bxne	lr
  40a8ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  40a8b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40a8b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40a8b8:	4770      	bx	lr
  40a8ba:	bf00      	nop

0040a8bc <__aeabi_frsub>:
  40a8bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  40a8c0:	e002      	b.n	40a8c8 <__addsf3>
  40a8c2:	bf00      	nop

0040a8c4 <__aeabi_fsub>:
  40a8c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0040a8c8 <__addsf3>:
  40a8c8:	0042      	lsls	r2, r0, #1
  40a8ca:	bf1f      	itttt	ne
  40a8cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  40a8d0:	ea92 0f03 	teqne	r2, r3
  40a8d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  40a8d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40a8dc:	d06a      	beq.n	40a9b4 <__addsf3+0xec>
  40a8de:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40a8e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  40a8e6:	bfc1      	itttt	gt
  40a8e8:	18d2      	addgt	r2, r2, r3
  40a8ea:	4041      	eorgt	r1, r0
  40a8ec:	4048      	eorgt	r0, r1
  40a8ee:	4041      	eorgt	r1, r0
  40a8f0:	bfb8      	it	lt
  40a8f2:	425b      	neglt	r3, r3
  40a8f4:	2b19      	cmp	r3, #25
  40a8f6:	bf88      	it	hi
  40a8f8:	4770      	bxhi	lr
  40a8fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  40a8fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40a902:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  40a906:	bf18      	it	ne
  40a908:	4240      	negne	r0, r0
  40a90a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40a90e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  40a912:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  40a916:	bf18      	it	ne
  40a918:	4249      	negne	r1, r1
  40a91a:	ea92 0f03 	teq	r2, r3
  40a91e:	d03f      	beq.n	40a9a0 <__addsf3+0xd8>
  40a920:	f1a2 0201 	sub.w	r2, r2, #1
  40a924:	fa41 fc03 	asr.w	ip, r1, r3
  40a928:	eb10 000c 	adds.w	r0, r0, ip
  40a92c:	f1c3 0320 	rsb	r3, r3, #32
  40a930:	fa01 f103 	lsl.w	r1, r1, r3
  40a934:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40a938:	d502      	bpl.n	40a940 <__addsf3+0x78>
  40a93a:	4249      	negs	r1, r1
  40a93c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  40a940:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  40a944:	d313      	bcc.n	40a96e <__addsf3+0xa6>
  40a946:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  40a94a:	d306      	bcc.n	40a95a <__addsf3+0x92>
  40a94c:	0840      	lsrs	r0, r0, #1
  40a94e:	ea4f 0131 	mov.w	r1, r1, rrx
  40a952:	f102 0201 	add.w	r2, r2, #1
  40a956:	2afe      	cmp	r2, #254	; 0xfe
  40a958:	d251      	bcs.n	40a9fe <__addsf3+0x136>
  40a95a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  40a95e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40a962:	bf08      	it	eq
  40a964:	f020 0001 	biceq.w	r0, r0, #1
  40a968:	ea40 0003 	orr.w	r0, r0, r3
  40a96c:	4770      	bx	lr
  40a96e:	0049      	lsls	r1, r1, #1
  40a970:	eb40 0000 	adc.w	r0, r0, r0
  40a974:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  40a978:	f1a2 0201 	sub.w	r2, r2, #1
  40a97c:	d1ed      	bne.n	40a95a <__addsf3+0x92>
  40a97e:	fab0 fc80 	clz	ip, r0
  40a982:	f1ac 0c08 	sub.w	ip, ip, #8
  40a986:	ebb2 020c 	subs.w	r2, r2, ip
  40a98a:	fa00 f00c 	lsl.w	r0, r0, ip
  40a98e:	bfaa      	itet	ge
  40a990:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  40a994:	4252      	neglt	r2, r2
  40a996:	4318      	orrge	r0, r3
  40a998:	bfbc      	itt	lt
  40a99a:	40d0      	lsrlt	r0, r2
  40a99c:	4318      	orrlt	r0, r3
  40a99e:	4770      	bx	lr
  40a9a0:	f092 0f00 	teq	r2, #0
  40a9a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  40a9a8:	bf06      	itte	eq
  40a9aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  40a9ae:	3201      	addeq	r2, #1
  40a9b0:	3b01      	subne	r3, #1
  40a9b2:	e7b5      	b.n	40a920 <__addsf3+0x58>
  40a9b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
  40a9b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  40a9bc:	bf18      	it	ne
  40a9be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40a9c2:	d021      	beq.n	40aa08 <__addsf3+0x140>
  40a9c4:	ea92 0f03 	teq	r2, r3
  40a9c8:	d004      	beq.n	40a9d4 <__addsf3+0x10c>
  40a9ca:	f092 0f00 	teq	r2, #0
  40a9ce:	bf08      	it	eq
  40a9d0:	4608      	moveq	r0, r1
  40a9d2:	4770      	bx	lr
  40a9d4:	ea90 0f01 	teq	r0, r1
  40a9d8:	bf1c      	itt	ne
  40a9da:	2000      	movne	r0, #0
  40a9dc:	4770      	bxne	lr
  40a9de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  40a9e2:	d104      	bne.n	40a9ee <__addsf3+0x126>
  40a9e4:	0040      	lsls	r0, r0, #1
  40a9e6:	bf28      	it	cs
  40a9e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  40a9ec:	4770      	bx	lr
  40a9ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  40a9f2:	bf3c      	itt	cc
  40a9f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  40a9f8:	4770      	bxcc	lr
  40a9fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40a9fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  40aa02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40aa06:	4770      	bx	lr
  40aa08:	ea7f 6222 	mvns.w	r2, r2, asr #24
  40aa0c:	bf16      	itet	ne
  40aa0e:	4608      	movne	r0, r1
  40aa10:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  40aa14:	4601      	movne	r1, r0
  40aa16:	0242      	lsls	r2, r0, #9
  40aa18:	bf06      	itte	eq
  40aa1a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  40aa1e:	ea90 0f01 	teqeq	r0, r1
  40aa22:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  40aa26:	4770      	bx	lr

0040aa28 <__aeabi_ui2f>:
  40aa28:	f04f 0300 	mov.w	r3, #0
  40aa2c:	e004      	b.n	40aa38 <__aeabi_i2f+0x8>
  40aa2e:	bf00      	nop

0040aa30 <__aeabi_i2f>:
  40aa30:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  40aa34:	bf48      	it	mi
  40aa36:	4240      	negmi	r0, r0
  40aa38:	ea5f 0c00 	movs.w	ip, r0
  40aa3c:	bf08      	it	eq
  40aa3e:	4770      	bxeq	lr
  40aa40:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  40aa44:	4601      	mov	r1, r0
  40aa46:	f04f 0000 	mov.w	r0, #0
  40aa4a:	e01c      	b.n	40aa86 <__aeabi_l2f+0x2a>

0040aa4c <__aeabi_ul2f>:
  40aa4c:	ea50 0201 	orrs.w	r2, r0, r1
  40aa50:	bf08      	it	eq
  40aa52:	4770      	bxeq	lr
  40aa54:	f04f 0300 	mov.w	r3, #0
  40aa58:	e00a      	b.n	40aa70 <__aeabi_l2f+0x14>
  40aa5a:	bf00      	nop

0040aa5c <__aeabi_l2f>:
  40aa5c:	ea50 0201 	orrs.w	r2, r0, r1
  40aa60:	bf08      	it	eq
  40aa62:	4770      	bxeq	lr
  40aa64:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  40aa68:	d502      	bpl.n	40aa70 <__aeabi_l2f+0x14>
  40aa6a:	4240      	negs	r0, r0
  40aa6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40aa70:	ea5f 0c01 	movs.w	ip, r1
  40aa74:	bf02      	ittt	eq
  40aa76:	4684      	moveq	ip, r0
  40aa78:	4601      	moveq	r1, r0
  40aa7a:	2000      	moveq	r0, #0
  40aa7c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  40aa80:	bf08      	it	eq
  40aa82:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  40aa86:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  40aa8a:	fabc f28c 	clz	r2, ip
  40aa8e:	3a08      	subs	r2, #8
  40aa90:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  40aa94:	db10      	blt.n	40aab8 <__aeabi_l2f+0x5c>
  40aa96:	fa01 fc02 	lsl.w	ip, r1, r2
  40aa9a:	4463      	add	r3, ip
  40aa9c:	fa00 fc02 	lsl.w	ip, r0, r2
  40aaa0:	f1c2 0220 	rsb	r2, r2, #32
  40aaa4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40aaa8:	fa20 f202 	lsr.w	r2, r0, r2
  40aaac:	eb43 0002 	adc.w	r0, r3, r2
  40aab0:	bf08      	it	eq
  40aab2:	f020 0001 	biceq.w	r0, r0, #1
  40aab6:	4770      	bx	lr
  40aab8:	f102 0220 	add.w	r2, r2, #32
  40aabc:	fa01 fc02 	lsl.w	ip, r1, r2
  40aac0:	f1c2 0220 	rsb	r2, r2, #32
  40aac4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  40aac8:	fa21 f202 	lsr.w	r2, r1, r2
  40aacc:	eb43 0002 	adc.w	r0, r3, r2
  40aad0:	bf08      	it	eq
  40aad2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  40aad6:	4770      	bx	lr

0040aad8 <__aeabi_fmul>:
  40aad8:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40aadc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  40aae0:	bf1e      	ittt	ne
  40aae2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40aae6:	ea92 0f0c 	teqne	r2, ip
  40aaea:	ea93 0f0c 	teqne	r3, ip
  40aaee:	d06f      	beq.n	40abd0 <__aeabi_fmul+0xf8>
  40aaf0:	441a      	add	r2, r3
  40aaf2:	ea80 0c01 	eor.w	ip, r0, r1
  40aaf6:	0240      	lsls	r0, r0, #9
  40aaf8:	bf18      	it	ne
  40aafa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  40aafe:	d01e      	beq.n	40ab3e <__aeabi_fmul+0x66>
  40ab00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  40ab04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  40ab08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  40ab0c:	fba0 3101 	umull	r3, r1, r0, r1
  40ab10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  40ab14:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  40ab18:	bf3e      	ittt	cc
  40ab1a:	0049      	lslcc	r1, r1, #1
  40ab1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  40ab20:	005b      	lslcc	r3, r3, #1
  40ab22:	ea40 0001 	orr.w	r0, r0, r1
  40ab26:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  40ab2a:	2afd      	cmp	r2, #253	; 0xfd
  40ab2c:	d81d      	bhi.n	40ab6a <__aeabi_fmul+0x92>
  40ab2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  40ab32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40ab36:	bf08      	it	eq
  40ab38:	f020 0001 	biceq.w	r0, r0, #1
  40ab3c:	4770      	bx	lr
  40ab3e:	f090 0f00 	teq	r0, #0
  40ab42:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  40ab46:	bf08      	it	eq
  40ab48:	0249      	lsleq	r1, r1, #9
  40ab4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  40ab4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  40ab52:	3a7f      	subs	r2, #127	; 0x7f
  40ab54:	bfc2      	ittt	gt
  40ab56:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40ab5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  40ab5e:	4770      	bxgt	lr
  40ab60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40ab64:	f04f 0300 	mov.w	r3, #0
  40ab68:	3a01      	subs	r2, #1
  40ab6a:	dc5d      	bgt.n	40ac28 <__aeabi_fmul+0x150>
  40ab6c:	f112 0f19 	cmn.w	r2, #25
  40ab70:	bfdc      	itt	le
  40ab72:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  40ab76:	4770      	bxle	lr
  40ab78:	f1c2 0200 	rsb	r2, r2, #0
  40ab7c:	0041      	lsls	r1, r0, #1
  40ab7e:	fa21 f102 	lsr.w	r1, r1, r2
  40ab82:	f1c2 0220 	rsb	r2, r2, #32
  40ab86:	fa00 fc02 	lsl.w	ip, r0, r2
  40ab8a:	ea5f 0031 	movs.w	r0, r1, rrx
  40ab8e:	f140 0000 	adc.w	r0, r0, #0
  40ab92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  40ab96:	bf08      	it	eq
  40ab98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  40ab9c:	4770      	bx	lr
  40ab9e:	f092 0f00 	teq	r2, #0
  40aba2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  40aba6:	bf02      	ittt	eq
  40aba8:	0040      	lsleq	r0, r0, #1
  40abaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  40abae:	3a01      	subeq	r2, #1
  40abb0:	d0f9      	beq.n	40aba6 <__aeabi_fmul+0xce>
  40abb2:	ea40 000c 	orr.w	r0, r0, ip
  40abb6:	f093 0f00 	teq	r3, #0
  40abba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40abbe:	bf02      	ittt	eq
  40abc0:	0049      	lsleq	r1, r1, #1
  40abc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  40abc6:	3b01      	subeq	r3, #1
  40abc8:	d0f9      	beq.n	40abbe <__aeabi_fmul+0xe6>
  40abca:	ea41 010c 	orr.w	r1, r1, ip
  40abce:	e78f      	b.n	40aaf0 <__aeabi_fmul+0x18>
  40abd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  40abd4:	ea92 0f0c 	teq	r2, ip
  40abd8:	bf18      	it	ne
  40abda:	ea93 0f0c 	teqne	r3, ip
  40abde:	d00a      	beq.n	40abf6 <__aeabi_fmul+0x11e>
  40abe0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  40abe4:	bf18      	it	ne
  40abe6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  40abea:	d1d8      	bne.n	40ab9e <__aeabi_fmul+0xc6>
  40abec:	ea80 0001 	eor.w	r0, r0, r1
  40abf0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  40abf4:	4770      	bx	lr
  40abf6:	f090 0f00 	teq	r0, #0
  40abfa:	bf17      	itett	ne
  40abfc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  40ac00:	4608      	moveq	r0, r1
  40ac02:	f091 0f00 	teqne	r1, #0
  40ac06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  40ac0a:	d014      	beq.n	40ac36 <__aeabi_fmul+0x15e>
  40ac0c:	ea92 0f0c 	teq	r2, ip
  40ac10:	d101      	bne.n	40ac16 <__aeabi_fmul+0x13e>
  40ac12:	0242      	lsls	r2, r0, #9
  40ac14:	d10f      	bne.n	40ac36 <__aeabi_fmul+0x15e>
  40ac16:	ea93 0f0c 	teq	r3, ip
  40ac1a:	d103      	bne.n	40ac24 <__aeabi_fmul+0x14c>
  40ac1c:	024b      	lsls	r3, r1, #9
  40ac1e:	bf18      	it	ne
  40ac20:	4608      	movne	r0, r1
  40ac22:	d108      	bne.n	40ac36 <__aeabi_fmul+0x15e>
  40ac24:	ea80 0001 	eor.w	r0, r0, r1
  40ac28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  40ac2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40ac30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40ac34:	4770      	bx	lr
  40ac36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40ac3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  40ac3e:	4770      	bx	lr

0040ac40 <__aeabi_fdiv>:
  40ac40:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40ac44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  40ac48:	bf1e      	ittt	ne
  40ac4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40ac4e:	ea92 0f0c 	teqne	r2, ip
  40ac52:	ea93 0f0c 	teqne	r3, ip
  40ac56:	d069      	beq.n	40ad2c <__aeabi_fdiv+0xec>
  40ac58:	eba2 0203 	sub.w	r2, r2, r3
  40ac5c:	ea80 0c01 	eor.w	ip, r0, r1
  40ac60:	0249      	lsls	r1, r1, #9
  40ac62:	ea4f 2040 	mov.w	r0, r0, lsl #9
  40ac66:	d037      	beq.n	40acd8 <__aeabi_fdiv+0x98>
  40ac68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40ac6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  40ac70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  40ac74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  40ac78:	428b      	cmp	r3, r1
  40ac7a:	bf38      	it	cc
  40ac7c:	005b      	lslcc	r3, r3, #1
  40ac7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  40ac82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  40ac86:	428b      	cmp	r3, r1
  40ac88:	bf24      	itt	cs
  40ac8a:	1a5b      	subcs	r3, r3, r1
  40ac8c:	ea40 000c 	orrcs.w	r0, r0, ip
  40ac90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  40ac94:	bf24      	itt	cs
  40ac96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  40ac9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40ac9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  40aca2:	bf24      	itt	cs
  40aca4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  40aca8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40acac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  40acb0:	bf24      	itt	cs
  40acb2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  40acb6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40acba:	011b      	lsls	r3, r3, #4
  40acbc:	bf18      	it	ne
  40acbe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  40acc2:	d1e0      	bne.n	40ac86 <__aeabi_fdiv+0x46>
  40acc4:	2afd      	cmp	r2, #253	; 0xfd
  40acc6:	f63f af50 	bhi.w	40ab6a <__aeabi_fmul+0x92>
  40acca:	428b      	cmp	r3, r1
  40accc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40acd0:	bf08      	it	eq
  40acd2:	f020 0001 	biceq.w	r0, r0, #1
  40acd6:	4770      	bx	lr
  40acd8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  40acdc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  40ace0:	327f      	adds	r2, #127	; 0x7f
  40ace2:	bfc2      	ittt	gt
  40ace4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40ace8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  40acec:	4770      	bxgt	lr
  40acee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40acf2:	f04f 0300 	mov.w	r3, #0
  40acf6:	3a01      	subs	r2, #1
  40acf8:	e737      	b.n	40ab6a <__aeabi_fmul+0x92>
  40acfa:	f092 0f00 	teq	r2, #0
  40acfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  40ad02:	bf02      	ittt	eq
  40ad04:	0040      	lsleq	r0, r0, #1
  40ad06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  40ad0a:	3a01      	subeq	r2, #1
  40ad0c:	d0f9      	beq.n	40ad02 <__aeabi_fdiv+0xc2>
  40ad0e:	ea40 000c 	orr.w	r0, r0, ip
  40ad12:	f093 0f00 	teq	r3, #0
  40ad16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40ad1a:	bf02      	ittt	eq
  40ad1c:	0049      	lsleq	r1, r1, #1
  40ad1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  40ad22:	3b01      	subeq	r3, #1
  40ad24:	d0f9      	beq.n	40ad1a <__aeabi_fdiv+0xda>
  40ad26:	ea41 010c 	orr.w	r1, r1, ip
  40ad2a:	e795      	b.n	40ac58 <__aeabi_fdiv+0x18>
  40ad2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  40ad30:	ea92 0f0c 	teq	r2, ip
  40ad34:	d108      	bne.n	40ad48 <__aeabi_fdiv+0x108>
  40ad36:	0242      	lsls	r2, r0, #9
  40ad38:	f47f af7d 	bne.w	40ac36 <__aeabi_fmul+0x15e>
  40ad3c:	ea93 0f0c 	teq	r3, ip
  40ad40:	f47f af70 	bne.w	40ac24 <__aeabi_fmul+0x14c>
  40ad44:	4608      	mov	r0, r1
  40ad46:	e776      	b.n	40ac36 <__aeabi_fmul+0x15e>
  40ad48:	ea93 0f0c 	teq	r3, ip
  40ad4c:	d104      	bne.n	40ad58 <__aeabi_fdiv+0x118>
  40ad4e:	024b      	lsls	r3, r1, #9
  40ad50:	f43f af4c 	beq.w	40abec <__aeabi_fmul+0x114>
  40ad54:	4608      	mov	r0, r1
  40ad56:	e76e      	b.n	40ac36 <__aeabi_fmul+0x15e>
  40ad58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  40ad5c:	bf18      	it	ne
  40ad5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  40ad62:	d1ca      	bne.n	40acfa <__aeabi_fdiv+0xba>
  40ad64:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  40ad68:	f47f af5c 	bne.w	40ac24 <__aeabi_fmul+0x14c>
  40ad6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  40ad70:	f47f af3c 	bne.w	40abec <__aeabi_fmul+0x114>
  40ad74:	e75f      	b.n	40ac36 <__aeabi_fmul+0x15e>
  40ad76:	bf00      	nop

0040ad78 <__gesf2>:
  40ad78:	f04f 3cff 	mov.w	ip, #4294967295
  40ad7c:	e006      	b.n	40ad8c <__cmpsf2+0x4>
  40ad7e:	bf00      	nop

0040ad80 <__lesf2>:
  40ad80:	f04f 0c01 	mov.w	ip, #1
  40ad84:	e002      	b.n	40ad8c <__cmpsf2+0x4>
  40ad86:	bf00      	nop

0040ad88 <__cmpsf2>:
  40ad88:	f04f 0c01 	mov.w	ip, #1
  40ad8c:	f84d cd04 	str.w	ip, [sp, #-4]!
  40ad90:	ea4f 0240 	mov.w	r2, r0, lsl #1
  40ad94:	ea4f 0341 	mov.w	r3, r1, lsl #1
  40ad98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  40ad9c:	bf18      	it	ne
  40ad9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40ada2:	d011      	beq.n	40adc8 <__cmpsf2+0x40>
  40ada4:	b001      	add	sp, #4
  40ada6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  40adaa:	bf18      	it	ne
  40adac:	ea90 0f01 	teqne	r0, r1
  40adb0:	bf58      	it	pl
  40adb2:	ebb2 0003 	subspl.w	r0, r2, r3
  40adb6:	bf88      	it	hi
  40adb8:	17c8      	asrhi	r0, r1, #31
  40adba:	bf38      	it	cc
  40adbc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  40adc0:	bf18      	it	ne
  40adc2:	f040 0001 	orrne.w	r0, r0, #1
  40adc6:	4770      	bx	lr
  40adc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  40adcc:	d102      	bne.n	40add4 <__cmpsf2+0x4c>
  40adce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  40add2:	d105      	bne.n	40ade0 <__cmpsf2+0x58>
  40add4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  40add8:	d1e4      	bne.n	40ada4 <__cmpsf2+0x1c>
  40adda:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  40adde:	d0e1      	beq.n	40ada4 <__cmpsf2+0x1c>
  40ade0:	f85d 0b04 	ldr.w	r0, [sp], #4
  40ade4:	4770      	bx	lr
  40ade6:	bf00      	nop

0040ade8 <__aeabi_cfrcmple>:
  40ade8:	4684      	mov	ip, r0
  40adea:	4608      	mov	r0, r1
  40adec:	4661      	mov	r1, ip
  40adee:	e7ff      	b.n	40adf0 <__aeabi_cfcmpeq>

0040adf0 <__aeabi_cfcmpeq>:
  40adf0:	b50f      	push	{r0, r1, r2, r3, lr}
  40adf2:	f7ff ffc9 	bl	40ad88 <__cmpsf2>
  40adf6:	2800      	cmp	r0, #0
  40adf8:	bf48      	it	mi
  40adfa:	f110 0f00 	cmnmi.w	r0, #0
  40adfe:	bd0f      	pop	{r0, r1, r2, r3, pc}

0040ae00 <__aeabi_fcmpeq>:
  40ae00:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ae04:	f7ff fff4 	bl	40adf0 <__aeabi_cfcmpeq>
  40ae08:	bf0c      	ite	eq
  40ae0a:	2001      	moveq	r0, #1
  40ae0c:	2000      	movne	r0, #0
  40ae0e:	f85d fb08 	ldr.w	pc, [sp], #8
  40ae12:	bf00      	nop

0040ae14 <__aeabi_fcmplt>:
  40ae14:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ae18:	f7ff ffea 	bl	40adf0 <__aeabi_cfcmpeq>
  40ae1c:	bf34      	ite	cc
  40ae1e:	2001      	movcc	r0, #1
  40ae20:	2000      	movcs	r0, #0
  40ae22:	f85d fb08 	ldr.w	pc, [sp], #8
  40ae26:	bf00      	nop

0040ae28 <__aeabi_fcmple>:
  40ae28:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ae2c:	f7ff ffe0 	bl	40adf0 <__aeabi_cfcmpeq>
  40ae30:	bf94      	ite	ls
  40ae32:	2001      	movls	r0, #1
  40ae34:	2000      	movhi	r0, #0
  40ae36:	f85d fb08 	ldr.w	pc, [sp], #8
  40ae3a:	bf00      	nop

0040ae3c <__aeabi_fcmpge>:
  40ae3c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ae40:	f7ff ffd2 	bl	40ade8 <__aeabi_cfrcmple>
  40ae44:	bf94      	ite	ls
  40ae46:	2001      	movls	r0, #1
  40ae48:	2000      	movhi	r0, #0
  40ae4a:	f85d fb08 	ldr.w	pc, [sp], #8
  40ae4e:	bf00      	nop

0040ae50 <__aeabi_fcmpgt>:
  40ae50:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ae54:	f7ff ffc8 	bl	40ade8 <__aeabi_cfrcmple>
  40ae58:	bf34      	ite	cc
  40ae5a:	2001      	movcc	r0, #1
  40ae5c:	2000      	movcs	r0, #0
  40ae5e:	f85d fb08 	ldr.w	pc, [sp], #8
  40ae62:	bf00      	nop

0040ae64 <__aeabi_f2iz>:
  40ae64:	ea4f 0240 	mov.w	r2, r0, lsl #1
  40ae68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  40ae6c:	d30f      	bcc.n	40ae8e <__aeabi_f2iz+0x2a>
  40ae6e:	f04f 039e 	mov.w	r3, #158	; 0x9e
  40ae72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  40ae76:	d90d      	bls.n	40ae94 <__aeabi_f2iz+0x30>
  40ae78:	ea4f 2300 	mov.w	r3, r0, lsl #8
  40ae7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40ae80:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  40ae84:	fa23 f002 	lsr.w	r0, r3, r2
  40ae88:	bf18      	it	ne
  40ae8a:	4240      	negne	r0, r0
  40ae8c:	4770      	bx	lr
  40ae8e:	f04f 0000 	mov.w	r0, #0
  40ae92:	4770      	bx	lr
  40ae94:	f112 0f61 	cmn.w	r2, #97	; 0x61
  40ae98:	d101      	bne.n	40ae9e <__aeabi_f2iz+0x3a>
  40ae9a:	0242      	lsls	r2, r0, #9
  40ae9c:	d105      	bne.n	40aeaa <__aeabi_f2iz+0x46>
  40ae9e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  40aea2:	bf08      	it	eq
  40aea4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40aea8:	4770      	bx	lr
  40aeaa:	f04f 0000 	mov.w	r0, #0
  40aeae:	4770      	bx	lr

0040aeb0 <__aeabi_uldivmod>:
  40aeb0:	b953      	cbnz	r3, 40aec8 <__aeabi_uldivmod+0x18>
  40aeb2:	b94a      	cbnz	r2, 40aec8 <__aeabi_uldivmod+0x18>
  40aeb4:	2900      	cmp	r1, #0
  40aeb6:	bf08      	it	eq
  40aeb8:	2800      	cmpeq	r0, #0
  40aeba:	bf1c      	itt	ne
  40aebc:	f04f 31ff 	movne.w	r1, #4294967295
  40aec0:	f04f 30ff 	movne.w	r0, #4294967295
  40aec4:	f000 b97e 	b.w	40b1c4 <__aeabi_idiv0>
  40aec8:	f1ad 0c08 	sub.w	ip, sp, #8
  40aecc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40aed0:	f000 f806 	bl	40aee0 <__udivmoddi4>
  40aed4:	f8dd e004 	ldr.w	lr, [sp, #4]
  40aed8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40aedc:	b004      	add	sp, #16
  40aede:	4770      	bx	lr

0040aee0 <__udivmoddi4>:
  40aee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40aee4:	468c      	mov	ip, r1
  40aee6:	460e      	mov	r6, r1
  40aee8:	4604      	mov	r4, r0
  40aeea:	9d08      	ldr	r5, [sp, #32]
  40aeec:	2b00      	cmp	r3, #0
  40aeee:	d150      	bne.n	40af92 <__udivmoddi4+0xb2>
  40aef0:	428a      	cmp	r2, r1
  40aef2:	4617      	mov	r7, r2
  40aef4:	d96c      	bls.n	40afd0 <__udivmoddi4+0xf0>
  40aef6:	fab2 fe82 	clz	lr, r2
  40aefa:	f1be 0f00 	cmp.w	lr, #0
  40aefe:	d00b      	beq.n	40af18 <__udivmoddi4+0x38>
  40af00:	f1ce 0420 	rsb	r4, lr, #32
  40af04:	fa20 f404 	lsr.w	r4, r0, r4
  40af08:	fa01 f60e 	lsl.w	r6, r1, lr
  40af0c:	ea44 0c06 	orr.w	ip, r4, r6
  40af10:	fa02 f70e 	lsl.w	r7, r2, lr
  40af14:	fa00 f40e 	lsl.w	r4, r0, lr
  40af18:	ea4f 4917 	mov.w	r9, r7, lsr #16
  40af1c:	0c22      	lsrs	r2, r4, #16
  40af1e:	fbbc f0f9 	udiv	r0, ip, r9
  40af22:	fa1f f887 	uxth.w	r8, r7
  40af26:	fb09 c610 	mls	r6, r9, r0, ip
  40af2a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  40af2e:	fb00 f308 	mul.w	r3, r0, r8
  40af32:	42b3      	cmp	r3, r6
  40af34:	d909      	bls.n	40af4a <__udivmoddi4+0x6a>
  40af36:	19f6      	adds	r6, r6, r7
  40af38:	f100 32ff 	add.w	r2, r0, #4294967295
  40af3c:	f080 8122 	bcs.w	40b184 <__udivmoddi4+0x2a4>
  40af40:	42b3      	cmp	r3, r6
  40af42:	f240 811f 	bls.w	40b184 <__udivmoddi4+0x2a4>
  40af46:	3802      	subs	r0, #2
  40af48:	443e      	add	r6, r7
  40af4a:	1af6      	subs	r6, r6, r3
  40af4c:	b2a2      	uxth	r2, r4
  40af4e:	fbb6 f3f9 	udiv	r3, r6, r9
  40af52:	fb09 6613 	mls	r6, r9, r3, r6
  40af56:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40af5a:	fb03 f808 	mul.w	r8, r3, r8
  40af5e:	45a0      	cmp	r8, r4
  40af60:	d909      	bls.n	40af76 <__udivmoddi4+0x96>
  40af62:	19e4      	adds	r4, r4, r7
  40af64:	f103 32ff 	add.w	r2, r3, #4294967295
  40af68:	f080 810a 	bcs.w	40b180 <__udivmoddi4+0x2a0>
  40af6c:	45a0      	cmp	r8, r4
  40af6e:	f240 8107 	bls.w	40b180 <__udivmoddi4+0x2a0>
  40af72:	3b02      	subs	r3, #2
  40af74:	443c      	add	r4, r7
  40af76:	ebc8 0404 	rsb	r4, r8, r4
  40af7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40af7e:	2100      	movs	r1, #0
  40af80:	2d00      	cmp	r5, #0
  40af82:	d062      	beq.n	40b04a <__udivmoddi4+0x16a>
  40af84:	fa24 f40e 	lsr.w	r4, r4, lr
  40af88:	2300      	movs	r3, #0
  40af8a:	602c      	str	r4, [r5, #0]
  40af8c:	606b      	str	r3, [r5, #4]
  40af8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40af92:	428b      	cmp	r3, r1
  40af94:	d907      	bls.n	40afa6 <__udivmoddi4+0xc6>
  40af96:	2d00      	cmp	r5, #0
  40af98:	d055      	beq.n	40b046 <__udivmoddi4+0x166>
  40af9a:	2100      	movs	r1, #0
  40af9c:	e885 0041 	stmia.w	r5, {r0, r6}
  40afa0:	4608      	mov	r0, r1
  40afa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40afa6:	fab3 f183 	clz	r1, r3
  40afaa:	2900      	cmp	r1, #0
  40afac:	f040 8090 	bne.w	40b0d0 <__udivmoddi4+0x1f0>
  40afb0:	42b3      	cmp	r3, r6
  40afb2:	d302      	bcc.n	40afba <__udivmoddi4+0xda>
  40afb4:	4282      	cmp	r2, r0
  40afb6:	f200 80f8 	bhi.w	40b1aa <__udivmoddi4+0x2ca>
  40afba:	1a84      	subs	r4, r0, r2
  40afbc:	eb66 0603 	sbc.w	r6, r6, r3
  40afc0:	2001      	movs	r0, #1
  40afc2:	46b4      	mov	ip, r6
  40afc4:	2d00      	cmp	r5, #0
  40afc6:	d040      	beq.n	40b04a <__udivmoddi4+0x16a>
  40afc8:	e885 1010 	stmia.w	r5, {r4, ip}
  40afcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40afd0:	b912      	cbnz	r2, 40afd8 <__udivmoddi4+0xf8>
  40afd2:	2701      	movs	r7, #1
  40afd4:	fbb7 f7f2 	udiv	r7, r7, r2
  40afd8:	fab7 fe87 	clz	lr, r7
  40afdc:	f1be 0f00 	cmp.w	lr, #0
  40afe0:	d135      	bne.n	40b04e <__udivmoddi4+0x16e>
  40afe2:	1bf3      	subs	r3, r6, r7
  40afe4:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40afe8:	fa1f fc87 	uxth.w	ip, r7
  40afec:	2101      	movs	r1, #1
  40afee:	fbb3 f0f8 	udiv	r0, r3, r8
  40aff2:	0c22      	lsrs	r2, r4, #16
  40aff4:	fb08 3610 	mls	r6, r8, r0, r3
  40aff8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  40affc:	fb0c f300 	mul.w	r3, ip, r0
  40b000:	42b3      	cmp	r3, r6
  40b002:	d907      	bls.n	40b014 <__udivmoddi4+0x134>
  40b004:	19f6      	adds	r6, r6, r7
  40b006:	f100 32ff 	add.w	r2, r0, #4294967295
  40b00a:	d202      	bcs.n	40b012 <__udivmoddi4+0x132>
  40b00c:	42b3      	cmp	r3, r6
  40b00e:	f200 80ce 	bhi.w	40b1ae <__udivmoddi4+0x2ce>
  40b012:	4610      	mov	r0, r2
  40b014:	1af6      	subs	r6, r6, r3
  40b016:	b2a2      	uxth	r2, r4
  40b018:	fbb6 f3f8 	udiv	r3, r6, r8
  40b01c:	fb08 6613 	mls	r6, r8, r3, r6
  40b020:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40b024:	fb0c fc03 	mul.w	ip, ip, r3
  40b028:	45a4      	cmp	ip, r4
  40b02a:	d907      	bls.n	40b03c <__udivmoddi4+0x15c>
  40b02c:	19e4      	adds	r4, r4, r7
  40b02e:	f103 32ff 	add.w	r2, r3, #4294967295
  40b032:	d202      	bcs.n	40b03a <__udivmoddi4+0x15a>
  40b034:	45a4      	cmp	ip, r4
  40b036:	f200 80b5 	bhi.w	40b1a4 <__udivmoddi4+0x2c4>
  40b03a:	4613      	mov	r3, r2
  40b03c:	ebcc 0404 	rsb	r4, ip, r4
  40b040:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40b044:	e79c      	b.n	40af80 <__udivmoddi4+0xa0>
  40b046:	4629      	mov	r1, r5
  40b048:	4628      	mov	r0, r5
  40b04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b04e:	f1ce 0120 	rsb	r1, lr, #32
  40b052:	fa06 f30e 	lsl.w	r3, r6, lr
  40b056:	fa07 f70e 	lsl.w	r7, r7, lr
  40b05a:	fa20 f901 	lsr.w	r9, r0, r1
  40b05e:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40b062:	40ce      	lsrs	r6, r1
  40b064:	ea49 0903 	orr.w	r9, r9, r3
  40b068:	fbb6 faf8 	udiv	sl, r6, r8
  40b06c:	ea4f 4419 	mov.w	r4, r9, lsr #16
  40b070:	fb08 661a 	mls	r6, r8, sl, r6
  40b074:	fa1f fc87 	uxth.w	ip, r7
  40b078:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  40b07c:	fb0a f20c 	mul.w	r2, sl, ip
  40b080:	429a      	cmp	r2, r3
  40b082:	fa00 f40e 	lsl.w	r4, r0, lr
  40b086:	d90a      	bls.n	40b09e <__udivmoddi4+0x1be>
  40b088:	19db      	adds	r3, r3, r7
  40b08a:	f10a 31ff 	add.w	r1, sl, #4294967295
  40b08e:	f080 8087 	bcs.w	40b1a0 <__udivmoddi4+0x2c0>
  40b092:	429a      	cmp	r2, r3
  40b094:	f240 8084 	bls.w	40b1a0 <__udivmoddi4+0x2c0>
  40b098:	f1aa 0a02 	sub.w	sl, sl, #2
  40b09c:	443b      	add	r3, r7
  40b09e:	1a9b      	subs	r3, r3, r2
  40b0a0:	fa1f f989 	uxth.w	r9, r9
  40b0a4:	fbb3 f1f8 	udiv	r1, r3, r8
  40b0a8:	fb08 3311 	mls	r3, r8, r1, r3
  40b0ac:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  40b0b0:	fb01 f60c 	mul.w	r6, r1, ip
  40b0b4:	429e      	cmp	r6, r3
  40b0b6:	d907      	bls.n	40b0c8 <__udivmoddi4+0x1e8>
  40b0b8:	19db      	adds	r3, r3, r7
  40b0ba:	f101 32ff 	add.w	r2, r1, #4294967295
  40b0be:	d26b      	bcs.n	40b198 <__udivmoddi4+0x2b8>
  40b0c0:	429e      	cmp	r6, r3
  40b0c2:	d969      	bls.n	40b198 <__udivmoddi4+0x2b8>
  40b0c4:	3902      	subs	r1, #2
  40b0c6:	443b      	add	r3, r7
  40b0c8:	1b9b      	subs	r3, r3, r6
  40b0ca:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  40b0ce:	e78e      	b.n	40afee <__udivmoddi4+0x10e>
  40b0d0:	f1c1 0e20 	rsb	lr, r1, #32
  40b0d4:	fa22 f40e 	lsr.w	r4, r2, lr
  40b0d8:	408b      	lsls	r3, r1
  40b0da:	4323      	orrs	r3, r4
  40b0dc:	fa20 f70e 	lsr.w	r7, r0, lr
  40b0e0:	fa06 f401 	lsl.w	r4, r6, r1
  40b0e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40b0e8:	fa26 f60e 	lsr.w	r6, r6, lr
  40b0ec:	433c      	orrs	r4, r7
  40b0ee:	fbb6 f9fc 	udiv	r9, r6, ip
  40b0f2:	0c27      	lsrs	r7, r4, #16
  40b0f4:	fb0c 6619 	mls	r6, ip, r9, r6
  40b0f8:	fa1f f883 	uxth.w	r8, r3
  40b0fc:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  40b100:	fb09 f708 	mul.w	r7, r9, r8
  40b104:	42b7      	cmp	r7, r6
  40b106:	fa02 f201 	lsl.w	r2, r2, r1
  40b10a:	fa00 fa01 	lsl.w	sl, r0, r1
  40b10e:	d908      	bls.n	40b122 <__udivmoddi4+0x242>
  40b110:	18f6      	adds	r6, r6, r3
  40b112:	f109 30ff 	add.w	r0, r9, #4294967295
  40b116:	d241      	bcs.n	40b19c <__udivmoddi4+0x2bc>
  40b118:	42b7      	cmp	r7, r6
  40b11a:	d93f      	bls.n	40b19c <__udivmoddi4+0x2bc>
  40b11c:	f1a9 0902 	sub.w	r9, r9, #2
  40b120:	441e      	add	r6, r3
  40b122:	1bf6      	subs	r6, r6, r7
  40b124:	b2a0      	uxth	r0, r4
  40b126:	fbb6 f4fc 	udiv	r4, r6, ip
  40b12a:	fb0c 6614 	mls	r6, ip, r4, r6
  40b12e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  40b132:	fb04 f808 	mul.w	r8, r4, r8
  40b136:	45b8      	cmp	r8, r7
  40b138:	d907      	bls.n	40b14a <__udivmoddi4+0x26a>
  40b13a:	18ff      	adds	r7, r7, r3
  40b13c:	f104 30ff 	add.w	r0, r4, #4294967295
  40b140:	d228      	bcs.n	40b194 <__udivmoddi4+0x2b4>
  40b142:	45b8      	cmp	r8, r7
  40b144:	d926      	bls.n	40b194 <__udivmoddi4+0x2b4>
  40b146:	3c02      	subs	r4, #2
  40b148:	441f      	add	r7, r3
  40b14a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  40b14e:	ebc8 0707 	rsb	r7, r8, r7
  40b152:	fba0 8902 	umull	r8, r9, r0, r2
  40b156:	454f      	cmp	r7, r9
  40b158:	4644      	mov	r4, r8
  40b15a:	464e      	mov	r6, r9
  40b15c:	d314      	bcc.n	40b188 <__udivmoddi4+0x2a8>
  40b15e:	d029      	beq.n	40b1b4 <__udivmoddi4+0x2d4>
  40b160:	b365      	cbz	r5, 40b1bc <__udivmoddi4+0x2dc>
  40b162:	ebba 0304 	subs.w	r3, sl, r4
  40b166:	eb67 0706 	sbc.w	r7, r7, r6
  40b16a:	fa07 fe0e 	lsl.w	lr, r7, lr
  40b16e:	40cb      	lsrs	r3, r1
  40b170:	40cf      	lsrs	r7, r1
  40b172:	ea4e 0303 	orr.w	r3, lr, r3
  40b176:	e885 0088 	stmia.w	r5, {r3, r7}
  40b17a:	2100      	movs	r1, #0
  40b17c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b180:	4613      	mov	r3, r2
  40b182:	e6f8      	b.n	40af76 <__udivmoddi4+0x96>
  40b184:	4610      	mov	r0, r2
  40b186:	e6e0      	b.n	40af4a <__udivmoddi4+0x6a>
  40b188:	ebb8 0402 	subs.w	r4, r8, r2
  40b18c:	eb69 0603 	sbc.w	r6, r9, r3
  40b190:	3801      	subs	r0, #1
  40b192:	e7e5      	b.n	40b160 <__udivmoddi4+0x280>
  40b194:	4604      	mov	r4, r0
  40b196:	e7d8      	b.n	40b14a <__udivmoddi4+0x26a>
  40b198:	4611      	mov	r1, r2
  40b19a:	e795      	b.n	40b0c8 <__udivmoddi4+0x1e8>
  40b19c:	4681      	mov	r9, r0
  40b19e:	e7c0      	b.n	40b122 <__udivmoddi4+0x242>
  40b1a0:	468a      	mov	sl, r1
  40b1a2:	e77c      	b.n	40b09e <__udivmoddi4+0x1be>
  40b1a4:	3b02      	subs	r3, #2
  40b1a6:	443c      	add	r4, r7
  40b1a8:	e748      	b.n	40b03c <__udivmoddi4+0x15c>
  40b1aa:	4608      	mov	r0, r1
  40b1ac:	e70a      	b.n	40afc4 <__udivmoddi4+0xe4>
  40b1ae:	3802      	subs	r0, #2
  40b1b0:	443e      	add	r6, r7
  40b1b2:	e72f      	b.n	40b014 <__udivmoddi4+0x134>
  40b1b4:	45c2      	cmp	sl, r8
  40b1b6:	d3e7      	bcc.n	40b188 <__udivmoddi4+0x2a8>
  40b1b8:	463e      	mov	r6, r7
  40b1ba:	e7d1      	b.n	40b160 <__udivmoddi4+0x280>
  40b1bc:	4629      	mov	r1, r5
  40b1be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b1c2:	bf00      	nop

0040b1c4 <__aeabi_idiv0>:
  40b1c4:	4770      	bx	lr
  40b1c6:	bf00      	nop

0040b1c8 <__errno>:
  40b1c8:	4b01      	ldr	r3, [pc, #4]	; (40b1d0 <__errno+0x8>)
  40b1ca:	6818      	ldr	r0, [r3, #0]
  40b1cc:	4770      	bx	lr
  40b1ce:	bf00      	nop
  40b1d0:	20000468 	.word	0x20000468

0040b1d4 <__libc_init_array>:
  40b1d4:	b570      	push	{r4, r5, r6, lr}
  40b1d6:	4e0f      	ldr	r6, [pc, #60]	; (40b214 <__libc_init_array+0x40>)
  40b1d8:	4d0f      	ldr	r5, [pc, #60]	; (40b218 <__libc_init_array+0x44>)
  40b1da:	1b76      	subs	r6, r6, r5
  40b1dc:	10b6      	asrs	r6, r6, #2
  40b1de:	bf18      	it	ne
  40b1e0:	2400      	movne	r4, #0
  40b1e2:	d005      	beq.n	40b1f0 <__libc_init_array+0x1c>
  40b1e4:	3401      	adds	r4, #1
  40b1e6:	f855 3b04 	ldr.w	r3, [r5], #4
  40b1ea:	4798      	blx	r3
  40b1ec:	42a6      	cmp	r6, r4
  40b1ee:	d1f9      	bne.n	40b1e4 <__libc_init_array+0x10>
  40b1f0:	4e0a      	ldr	r6, [pc, #40]	; (40b21c <__libc_init_array+0x48>)
  40b1f2:	4d0b      	ldr	r5, [pc, #44]	; (40b220 <__libc_init_array+0x4c>)
  40b1f4:	1b76      	subs	r6, r6, r5
  40b1f6:	f000 fb3f 	bl	40b878 <_init>
  40b1fa:	10b6      	asrs	r6, r6, #2
  40b1fc:	bf18      	it	ne
  40b1fe:	2400      	movne	r4, #0
  40b200:	d006      	beq.n	40b210 <__libc_init_array+0x3c>
  40b202:	3401      	adds	r4, #1
  40b204:	f855 3b04 	ldr.w	r3, [r5], #4
  40b208:	4798      	blx	r3
  40b20a:	42a6      	cmp	r6, r4
  40b20c:	d1f9      	bne.n	40b202 <__libc_init_array+0x2e>
  40b20e:	bd70      	pop	{r4, r5, r6, pc}
  40b210:	bd70      	pop	{r4, r5, r6, pc}
  40b212:	bf00      	nop
  40b214:	0040b884 	.word	0x0040b884
  40b218:	0040b884 	.word	0x0040b884
  40b21c:	0040b88c 	.word	0x0040b88c
  40b220:	0040b884 	.word	0x0040b884

0040b224 <memcmp>:
  40b224:	2a03      	cmp	r2, #3
  40b226:	b470      	push	{r4, r5, r6}
  40b228:	d926      	bls.n	40b278 <memcmp+0x54>
  40b22a:	ea40 0301 	orr.w	r3, r0, r1
  40b22e:	079b      	lsls	r3, r3, #30
  40b230:	d011      	beq.n	40b256 <memcmp+0x32>
  40b232:	7804      	ldrb	r4, [r0, #0]
  40b234:	780d      	ldrb	r5, [r1, #0]
  40b236:	42ac      	cmp	r4, r5
  40b238:	d122      	bne.n	40b280 <memcmp+0x5c>
  40b23a:	4402      	add	r2, r0
  40b23c:	1c43      	adds	r3, r0, #1
  40b23e:	e005      	b.n	40b24c <memcmp+0x28>
  40b240:	f813 4b01 	ldrb.w	r4, [r3], #1
  40b244:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  40b248:	42ac      	cmp	r4, r5
  40b24a:	d119      	bne.n	40b280 <memcmp+0x5c>
  40b24c:	4293      	cmp	r3, r2
  40b24e:	d1f7      	bne.n	40b240 <memcmp+0x1c>
  40b250:	2000      	movs	r0, #0
  40b252:	bc70      	pop	{r4, r5, r6}
  40b254:	4770      	bx	lr
  40b256:	460c      	mov	r4, r1
  40b258:	4603      	mov	r3, r0
  40b25a:	681e      	ldr	r6, [r3, #0]
  40b25c:	6825      	ldr	r5, [r4, #0]
  40b25e:	42ae      	cmp	r6, r5
  40b260:	4618      	mov	r0, r3
  40b262:	4621      	mov	r1, r4
  40b264:	f103 0304 	add.w	r3, r3, #4
  40b268:	f104 0404 	add.w	r4, r4, #4
  40b26c:	d1e1      	bne.n	40b232 <memcmp+0xe>
  40b26e:	3a04      	subs	r2, #4
  40b270:	2a03      	cmp	r2, #3
  40b272:	4618      	mov	r0, r3
  40b274:	4621      	mov	r1, r4
  40b276:	d8f0      	bhi.n	40b25a <memcmp+0x36>
  40b278:	2a00      	cmp	r2, #0
  40b27a:	d1da      	bne.n	40b232 <memcmp+0xe>
  40b27c:	4610      	mov	r0, r2
  40b27e:	e7e8      	b.n	40b252 <memcmp+0x2e>
  40b280:	1b60      	subs	r0, r4, r5
  40b282:	bc70      	pop	{r4, r5, r6}
  40b284:	4770      	bx	lr
  40b286:	bf00      	nop

0040b288 <memcpy>:
  40b288:	4684      	mov	ip, r0
  40b28a:	ea41 0300 	orr.w	r3, r1, r0
  40b28e:	f013 0303 	ands.w	r3, r3, #3
  40b292:	d16d      	bne.n	40b370 <memcpy+0xe8>
  40b294:	3a40      	subs	r2, #64	; 0x40
  40b296:	d341      	bcc.n	40b31c <memcpy+0x94>
  40b298:	f851 3b04 	ldr.w	r3, [r1], #4
  40b29c:	f840 3b04 	str.w	r3, [r0], #4
  40b2a0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b2a4:	f840 3b04 	str.w	r3, [r0], #4
  40b2a8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b2ac:	f840 3b04 	str.w	r3, [r0], #4
  40b2b0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b2b4:	f840 3b04 	str.w	r3, [r0], #4
  40b2b8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b2bc:	f840 3b04 	str.w	r3, [r0], #4
  40b2c0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b2c4:	f840 3b04 	str.w	r3, [r0], #4
  40b2c8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b2cc:	f840 3b04 	str.w	r3, [r0], #4
  40b2d0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b2d4:	f840 3b04 	str.w	r3, [r0], #4
  40b2d8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b2dc:	f840 3b04 	str.w	r3, [r0], #4
  40b2e0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b2e4:	f840 3b04 	str.w	r3, [r0], #4
  40b2e8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b2ec:	f840 3b04 	str.w	r3, [r0], #4
  40b2f0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b2f4:	f840 3b04 	str.w	r3, [r0], #4
  40b2f8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b2fc:	f840 3b04 	str.w	r3, [r0], #4
  40b300:	f851 3b04 	ldr.w	r3, [r1], #4
  40b304:	f840 3b04 	str.w	r3, [r0], #4
  40b308:	f851 3b04 	ldr.w	r3, [r1], #4
  40b30c:	f840 3b04 	str.w	r3, [r0], #4
  40b310:	f851 3b04 	ldr.w	r3, [r1], #4
  40b314:	f840 3b04 	str.w	r3, [r0], #4
  40b318:	3a40      	subs	r2, #64	; 0x40
  40b31a:	d2bd      	bcs.n	40b298 <memcpy+0x10>
  40b31c:	3230      	adds	r2, #48	; 0x30
  40b31e:	d311      	bcc.n	40b344 <memcpy+0xbc>
  40b320:	f851 3b04 	ldr.w	r3, [r1], #4
  40b324:	f840 3b04 	str.w	r3, [r0], #4
  40b328:	f851 3b04 	ldr.w	r3, [r1], #4
  40b32c:	f840 3b04 	str.w	r3, [r0], #4
  40b330:	f851 3b04 	ldr.w	r3, [r1], #4
  40b334:	f840 3b04 	str.w	r3, [r0], #4
  40b338:	f851 3b04 	ldr.w	r3, [r1], #4
  40b33c:	f840 3b04 	str.w	r3, [r0], #4
  40b340:	3a10      	subs	r2, #16
  40b342:	d2ed      	bcs.n	40b320 <memcpy+0x98>
  40b344:	320c      	adds	r2, #12
  40b346:	d305      	bcc.n	40b354 <memcpy+0xcc>
  40b348:	f851 3b04 	ldr.w	r3, [r1], #4
  40b34c:	f840 3b04 	str.w	r3, [r0], #4
  40b350:	3a04      	subs	r2, #4
  40b352:	d2f9      	bcs.n	40b348 <memcpy+0xc0>
  40b354:	3204      	adds	r2, #4
  40b356:	d008      	beq.n	40b36a <memcpy+0xe2>
  40b358:	07d2      	lsls	r2, r2, #31
  40b35a:	bf1c      	itt	ne
  40b35c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40b360:	f800 3b01 	strbne.w	r3, [r0], #1
  40b364:	d301      	bcc.n	40b36a <memcpy+0xe2>
  40b366:	880b      	ldrh	r3, [r1, #0]
  40b368:	8003      	strh	r3, [r0, #0]
  40b36a:	4660      	mov	r0, ip
  40b36c:	4770      	bx	lr
  40b36e:	bf00      	nop
  40b370:	2a08      	cmp	r2, #8
  40b372:	d313      	bcc.n	40b39c <memcpy+0x114>
  40b374:	078b      	lsls	r3, r1, #30
  40b376:	d08d      	beq.n	40b294 <memcpy+0xc>
  40b378:	f010 0303 	ands.w	r3, r0, #3
  40b37c:	d08a      	beq.n	40b294 <memcpy+0xc>
  40b37e:	f1c3 0304 	rsb	r3, r3, #4
  40b382:	1ad2      	subs	r2, r2, r3
  40b384:	07db      	lsls	r3, r3, #31
  40b386:	bf1c      	itt	ne
  40b388:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40b38c:	f800 3b01 	strbne.w	r3, [r0], #1
  40b390:	d380      	bcc.n	40b294 <memcpy+0xc>
  40b392:	f831 3b02 	ldrh.w	r3, [r1], #2
  40b396:	f820 3b02 	strh.w	r3, [r0], #2
  40b39a:	e77b      	b.n	40b294 <memcpy+0xc>
  40b39c:	3a04      	subs	r2, #4
  40b39e:	d3d9      	bcc.n	40b354 <memcpy+0xcc>
  40b3a0:	3a01      	subs	r2, #1
  40b3a2:	f811 3b01 	ldrb.w	r3, [r1], #1
  40b3a6:	f800 3b01 	strb.w	r3, [r0], #1
  40b3aa:	d2f9      	bcs.n	40b3a0 <memcpy+0x118>
  40b3ac:	780b      	ldrb	r3, [r1, #0]
  40b3ae:	7003      	strb	r3, [r0, #0]
  40b3b0:	784b      	ldrb	r3, [r1, #1]
  40b3b2:	7043      	strb	r3, [r0, #1]
  40b3b4:	788b      	ldrb	r3, [r1, #2]
  40b3b6:	7083      	strb	r3, [r0, #2]
  40b3b8:	4660      	mov	r0, ip
  40b3ba:	4770      	bx	lr

0040b3bc <memset>:
  40b3bc:	b470      	push	{r4, r5, r6}
  40b3be:	0784      	lsls	r4, r0, #30
  40b3c0:	d046      	beq.n	40b450 <memset+0x94>
  40b3c2:	1e54      	subs	r4, r2, #1
  40b3c4:	2a00      	cmp	r2, #0
  40b3c6:	d041      	beq.n	40b44c <memset+0x90>
  40b3c8:	b2cd      	uxtb	r5, r1
  40b3ca:	4603      	mov	r3, r0
  40b3cc:	e002      	b.n	40b3d4 <memset+0x18>
  40b3ce:	1e62      	subs	r2, r4, #1
  40b3d0:	b3e4      	cbz	r4, 40b44c <memset+0x90>
  40b3d2:	4614      	mov	r4, r2
  40b3d4:	f803 5b01 	strb.w	r5, [r3], #1
  40b3d8:	079a      	lsls	r2, r3, #30
  40b3da:	d1f8      	bne.n	40b3ce <memset+0x12>
  40b3dc:	2c03      	cmp	r4, #3
  40b3de:	d92e      	bls.n	40b43e <memset+0x82>
  40b3e0:	b2cd      	uxtb	r5, r1
  40b3e2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40b3e6:	2c0f      	cmp	r4, #15
  40b3e8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40b3ec:	d919      	bls.n	40b422 <memset+0x66>
  40b3ee:	f103 0210 	add.w	r2, r3, #16
  40b3f2:	4626      	mov	r6, r4
  40b3f4:	3e10      	subs	r6, #16
  40b3f6:	2e0f      	cmp	r6, #15
  40b3f8:	f842 5c10 	str.w	r5, [r2, #-16]
  40b3fc:	f842 5c0c 	str.w	r5, [r2, #-12]
  40b400:	f842 5c08 	str.w	r5, [r2, #-8]
  40b404:	f842 5c04 	str.w	r5, [r2, #-4]
  40b408:	f102 0210 	add.w	r2, r2, #16
  40b40c:	d8f2      	bhi.n	40b3f4 <memset+0x38>
  40b40e:	f1a4 0210 	sub.w	r2, r4, #16
  40b412:	f022 020f 	bic.w	r2, r2, #15
  40b416:	f004 040f 	and.w	r4, r4, #15
  40b41a:	3210      	adds	r2, #16
  40b41c:	2c03      	cmp	r4, #3
  40b41e:	4413      	add	r3, r2
  40b420:	d90d      	bls.n	40b43e <memset+0x82>
  40b422:	461e      	mov	r6, r3
  40b424:	4622      	mov	r2, r4
  40b426:	3a04      	subs	r2, #4
  40b428:	2a03      	cmp	r2, #3
  40b42a:	f846 5b04 	str.w	r5, [r6], #4
  40b42e:	d8fa      	bhi.n	40b426 <memset+0x6a>
  40b430:	1f22      	subs	r2, r4, #4
  40b432:	f022 0203 	bic.w	r2, r2, #3
  40b436:	3204      	adds	r2, #4
  40b438:	4413      	add	r3, r2
  40b43a:	f004 0403 	and.w	r4, r4, #3
  40b43e:	b12c      	cbz	r4, 40b44c <memset+0x90>
  40b440:	b2c9      	uxtb	r1, r1
  40b442:	441c      	add	r4, r3
  40b444:	f803 1b01 	strb.w	r1, [r3], #1
  40b448:	42a3      	cmp	r3, r4
  40b44a:	d1fb      	bne.n	40b444 <memset+0x88>
  40b44c:	bc70      	pop	{r4, r5, r6}
  40b44e:	4770      	bx	lr
  40b450:	4614      	mov	r4, r2
  40b452:	4603      	mov	r3, r0
  40b454:	e7c2      	b.n	40b3dc <memset+0x20>
  40b456:	bf00      	nop

0040b458 <strncpy>:
  40b458:	ea40 0301 	orr.w	r3, r0, r1
  40b45c:	079b      	lsls	r3, r3, #30
  40b45e:	b470      	push	{r4, r5, r6}
  40b460:	d12b      	bne.n	40b4ba <strncpy+0x62>
  40b462:	2a03      	cmp	r2, #3
  40b464:	d929      	bls.n	40b4ba <strncpy+0x62>
  40b466:	460c      	mov	r4, r1
  40b468:	4603      	mov	r3, r0
  40b46a:	4621      	mov	r1, r4
  40b46c:	f854 6b04 	ldr.w	r6, [r4], #4
  40b470:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
  40b474:	ea25 0506 	bic.w	r5, r5, r6
  40b478:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
  40b47c:	d106      	bne.n	40b48c <strncpy+0x34>
  40b47e:	3a04      	subs	r2, #4
  40b480:	2a03      	cmp	r2, #3
  40b482:	f843 6b04 	str.w	r6, [r3], #4
  40b486:	4621      	mov	r1, r4
  40b488:	d8ef      	bhi.n	40b46a <strncpy+0x12>
  40b48a:	b1a2      	cbz	r2, 40b4b6 <strncpy+0x5e>
  40b48c:	780c      	ldrb	r4, [r1, #0]
  40b48e:	701c      	strb	r4, [r3, #0]
  40b490:	3a01      	subs	r2, #1
  40b492:	3301      	adds	r3, #1
  40b494:	3101      	adds	r1, #1
  40b496:	b13c      	cbz	r4, 40b4a8 <strncpy+0x50>
  40b498:	b16a      	cbz	r2, 40b4b6 <strncpy+0x5e>
  40b49a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40b49e:	f803 4b01 	strb.w	r4, [r3], #1
  40b4a2:	3a01      	subs	r2, #1
  40b4a4:	2c00      	cmp	r4, #0
  40b4a6:	d1f7      	bne.n	40b498 <strncpy+0x40>
  40b4a8:	b12a      	cbz	r2, 40b4b6 <strncpy+0x5e>
  40b4aa:	441a      	add	r2, r3
  40b4ac:	2100      	movs	r1, #0
  40b4ae:	f803 1b01 	strb.w	r1, [r3], #1
  40b4b2:	429a      	cmp	r2, r3
  40b4b4:	d1fb      	bne.n	40b4ae <strncpy+0x56>
  40b4b6:	bc70      	pop	{r4, r5, r6}
  40b4b8:	4770      	bx	lr
  40b4ba:	4603      	mov	r3, r0
  40b4bc:	e7e5      	b.n	40b48a <strncpy+0x32>
  40b4be:	bf00      	nop

0040b4c0 <register_fini>:
  40b4c0:	4b02      	ldr	r3, [pc, #8]	; (40b4cc <register_fini+0xc>)
  40b4c2:	b113      	cbz	r3, 40b4ca <register_fini+0xa>
  40b4c4:	4802      	ldr	r0, [pc, #8]	; (40b4d0 <register_fini+0x10>)
  40b4c6:	f000 b805 	b.w	40b4d4 <atexit>
  40b4ca:	4770      	bx	lr
  40b4cc:	00000000 	.word	0x00000000
  40b4d0:	0040b4e1 	.word	0x0040b4e1

0040b4d4 <atexit>:
  40b4d4:	2300      	movs	r3, #0
  40b4d6:	4601      	mov	r1, r0
  40b4d8:	461a      	mov	r2, r3
  40b4da:	4618      	mov	r0, r3
  40b4dc:	f000 b814 	b.w	40b508 <__register_exitproc>

0040b4e0 <__libc_fini_array>:
  40b4e0:	b538      	push	{r3, r4, r5, lr}
  40b4e2:	4d07      	ldr	r5, [pc, #28]	; (40b500 <__libc_fini_array+0x20>)
  40b4e4:	4c07      	ldr	r4, [pc, #28]	; (40b504 <__libc_fini_array+0x24>)
  40b4e6:	1b2c      	subs	r4, r5, r4
  40b4e8:	10a4      	asrs	r4, r4, #2
  40b4ea:	d005      	beq.n	40b4f8 <__libc_fini_array+0x18>
  40b4ec:	3c01      	subs	r4, #1
  40b4ee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40b4f2:	4798      	blx	r3
  40b4f4:	2c00      	cmp	r4, #0
  40b4f6:	d1f9      	bne.n	40b4ec <__libc_fini_array+0xc>
  40b4f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40b4fc:	f000 b9c6 	b.w	40b88c <_fini>
  40b500:	0040b89c 	.word	0x0040b89c
  40b504:	0040b898 	.word	0x0040b898

0040b508 <__register_exitproc>:
  40b508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40b50c:	4c25      	ldr	r4, [pc, #148]	; (40b5a4 <__register_exitproc+0x9c>)
  40b50e:	6825      	ldr	r5, [r4, #0]
  40b510:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40b514:	4606      	mov	r6, r0
  40b516:	4688      	mov	r8, r1
  40b518:	4692      	mov	sl, r2
  40b51a:	4699      	mov	r9, r3
  40b51c:	b3c4      	cbz	r4, 40b590 <__register_exitproc+0x88>
  40b51e:	6860      	ldr	r0, [r4, #4]
  40b520:	281f      	cmp	r0, #31
  40b522:	dc17      	bgt.n	40b554 <__register_exitproc+0x4c>
  40b524:	1c43      	adds	r3, r0, #1
  40b526:	b176      	cbz	r6, 40b546 <__register_exitproc+0x3e>
  40b528:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40b52c:	2201      	movs	r2, #1
  40b52e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40b532:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40b536:	4082      	lsls	r2, r0
  40b538:	4311      	orrs	r1, r2
  40b53a:	2e02      	cmp	r6, #2
  40b53c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40b540:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  40b544:	d01e      	beq.n	40b584 <__register_exitproc+0x7c>
  40b546:	3002      	adds	r0, #2
  40b548:	6063      	str	r3, [r4, #4]
  40b54a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40b54e:	2000      	movs	r0, #0
  40b550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b554:	4b14      	ldr	r3, [pc, #80]	; (40b5a8 <__register_exitproc+0xa0>)
  40b556:	b303      	cbz	r3, 40b59a <__register_exitproc+0x92>
  40b558:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40b55c:	f3af 8000 	nop.w
  40b560:	4604      	mov	r4, r0
  40b562:	b1d0      	cbz	r0, 40b59a <__register_exitproc+0x92>
  40b564:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40b568:	2700      	movs	r7, #0
  40b56a:	e880 0088 	stmia.w	r0, {r3, r7}
  40b56e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40b572:	4638      	mov	r0, r7
  40b574:	2301      	movs	r3, #1
  40b576:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40b57a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40b57e:	2e00      	cmp	r6, #0
  40b580:	d0e1      	beq.n	40b546 <__register_exitproc+0x3e>
  40b582:	e7d1      	b.n	40b528 <__register_exitproc+0x20>
  40b584:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  40b588:	430a      	orrs	r2, r1
  40b58a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40b58e:	e7da      	b.n	40b546 <__register_exitproc+0x3e>
  40b590:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40b594:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40b598:	e7c1      	b.n	40b51e <__register_exitproc+0x16>
  40b59a:	f04f 30ff 	mov.w	r0, #4294967295
  40b59e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b5a2:	bf00      	nop
  40b5a4:	0040b874 	.word	0x0040b874
  40b5a8:	00000000 	.word	0x00000000
  40b5ac:	00002580 	.word	0x00002580
  40b5b0:	000000c0 	.word	0x000000c0
  40b5b4:	00000800 	.word	0x00000800
	...

0040b5c4 <all_twi_definitions>:
  40b5c4:	40018000 40018100 00000013 00000013     ...@...@........
  40b5d4:	4001c000 4001c100 00000014 00000014     ...@...@........

0040b5e4 <all_usart_definitions>:
  40b5e4:	40024000 40024100 0000000e 0000000e     .@.@.A.@........
  40b5f4:	40028000 40028100 0000000f 0000000f     ...@...@........
  40b604:	454c4449 00000000                       IDLE....

0040b60c <ucExpectedStackBytes.6087>:
  40b60c:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
  40b61c:	a5a5a5a5 20726d54 00637653 00007650     ....Tmr Svc.Pv..
  40b62c:	6d6d6f43 00000000 6e696c42 0000796b     Comm....Blinky..
  40b63c:	736f6361 00000000 6e697361 00000000     acos....asin....
  40b64c:	74727173 00000000                       sqrt....

0040b654 <npio2_hw>:
  40b654:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
  40b664:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
  40b674:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
  40b684:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
  40b694:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
  40b6a4:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
  40b6b4:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
  40b6c4:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

0040b6d4 <two_over_pi>:
  40b6d4:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
  40b6e4:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
  40b6f4:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
  40b704:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
  40b714:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
  40b724:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
  40b734:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
  40b744:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
  40b754:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
  40b764:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
  40b774:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
  40b784:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
  40b794:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
  40b7a4:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
  40b7b4:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
  40b7c4:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
  40b7d4:	0060e27b 00c08c6b                       {.`.k...

0040b7dc <init_jk>:
  40b7dc:	00000002 00000003 00000004 00000006     ................
  40b7ec:	00000000                                ....

0040b7f0 <PIo2>:
  40b7f0:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
  40b800:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
  40b810:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
  40b820:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

0040b830 <atanlo>:
  40b830:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
  40b840:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

0040b850 <atanhi>:
  40b850:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
  40b860:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
  40b870:	00000043                                C...

0040b874 <_global_impure_ptr>:
  40b874:	20000040                                @.. 

0040b878 <_init>:
  40b878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b87a:	bf00      	nop
  40b87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40b87e:	bc08      	pop	{r3}
  40b880:	469e      	mov	lr, r3
  40b882:	4770      	bx	lr

0040b884 <__init_array_start>:
  40b884:	0040b4c1 	.word	0x0040b4c1

0040b888 <__frame_dummy_init_array_entry>:
  40b888:	004000f1                                ..@.

0040b88c <_fini>:
  40b88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b88e:	bf00      	nop
  40b890:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40b892:	bc08      	pop	{r3}
  40b894:	469e      	mov	lr, r3
  40b896:	4770      	bx	lr

0040b898 <__fini_array_start>:
  40b898:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <lat>:
2000000c:	ba88 418b                                   ...A

20000010 <lon>:
20000010:	e153 429c                                   S..B

20000014 <timeZone>:
20000014:	0000 40b0                                   ...@

20000018 <dist>:
20000018:	0000 40a0                                   ...@

2000001c <width>:
2000001c:	0000 4000                                   ...@

20000020 <pvAngleRng>:
20000020:	0000 422c                                   ..,B

20000024 <bkTrkParam1>:
20000024:	7a57 3ced                                   Wz.<

20000028 <bkTrkParam2>:
20000028:	999a 3fc9                                   ...?

2000002c <SystemCoreClock>:
2000002c:	0900 003d                                   ..=.

20000030 <uxCriticalNesting>:
20000030:	aaaa aaaa                                   ....

20000034 <xFreeBytesRemaining>:
20000034:	2000 0000                                   . ..

20000038 <xNextTaskUnblockTime>:
20000038:	ffff ffff                                   ....

2000003c <slaveAddr>:
2000003c:	0101                                             .

2000003d <__fdlib_version>:
2000003d:	0001 0000                                        ...

20000040 <impure_data>:
20000040:	0000 0000 032c 2000 0394 2000 03fc 2000     ....,.. ... ... 
	...
20000074:	b870 0040 0000 0000 0000 0000 0000 0000     p.@.............
	...
200000e8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000f8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000468 <_impure_ptr>:
20000468:	0040 2000                                   @.. 
