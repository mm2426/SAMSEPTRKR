
SAMSEPTRKR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000fd20  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040fd20  0040fd20  0001fd20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009a4  20000000  0040fd28  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00002580  200009a8  004106d0  000209a4  2**3
                  ALLOC
  4 .stack        00003000  20002f28  00412c50  000209a4  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000209a4  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209ce  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001727c  00000000  00000000  00020a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003d57  00000000  00000000  00037ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000ad81  00000000  00000000  0003b9fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001460  00000000  00000000  0004677b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001240  00000000  00000000  00047bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00019bf0  00000000  00000000  00048e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001b9cd  00000000  00000000  00062a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005562c  00000000  00000000  0007e3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00006050  00000000  00000000  000d3a04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20005f28 	.word	0x20005f28
  400004:	004050f5 	.word	0x004050f5
  400008:	004051bd 	.word	0x004051bd
  40000c:	004051bd 	.word	0x004051bd
  400010:	004051bd 	.word	0x004051bd
  400014:	004051bd 	.word	0x004051bd
  400018:	004051bd 	.word	0x004051bd
	...
  40002c:	004056ad 	.word	0x004056ad
  400030:	004051bd 	.word	0x004051bd
  400034:	00000000 	.word	0x00000000
  400038:	004057a5 	.word	0x004057a5
  40003c:	004057e5 	.word	0x004057e5
  400040:	004051bd 	.word	0x004051bd
  400044:	004051bd 	.word	0x004051bd
  400048:	004051bd 	.word	0x004051bd
  40004c:	004051bd 	.word	0x004051bd
  400050:	004051bd 	.word	0x004051bd
  400054:	004051bd 	.word	0x004051bd
  400058:	004051bd 	.word	0x004051bd
  40005c:	00000000 	.word	0x00000000
  400060:	004051bd 	.word	0x004051bd
  400064:	004051bd 	.word	0x004051bd
  400068:	00000000 	.word	0x00000000
  40006c:	00404d75 	.word	0x00404d75
  400070:	00404d8d 	.word	0x00404d8d
  400074:	00000000 	.word	0x00000000
  400078:	00403689 	.word	0x00403689
  40007c:	0040369d 	.word	0x0040369d
	...
  400088:	004051bd 	.word	0x004051bd
  40008c:	00403385 	.word	0x00403385
  400090:	00403399 	.word	0x00403399
  400094:	004051bd 	.word	0x004051bd
  400098:	004051bd 	.word	0x004051bd
  40009c:	004051bd 	.word	0x004051bd
  4000a0:	004051bd 	.word	0x004051bd
  4000a4:	004051bd 	.word	0x004051bd
	...
  4000b4:	004051bd 	.word	0x004051bd
  4000b8:	004051bd 	.word	0x004051bd
  4000bc:	004051bd 	.word	0x004051bd
  4000c0:	004051bd 	.word	0x004051bd
  4000c4:	004051bd 	.word	0x004051bd
  4000c8:	004051bd 	.word	0x004051bd

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200009a8 	.word	0x200009a8
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040fd28 	.word	0x0040fd28

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	200009ac 	.word	0x200009ac
  40011c:	0040fd28 	.word	0x0040fd28
  400120:	0040fd28 	.word	0x0040fd28
  400124:	00000000 	.word	0x00000000

00400128 <nvm_write>:
	return STATUS_OK;
}

status_code_t nvm_write(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
  400128:	b590      	push	{r4, r7, lr}
  40012a:	b085      	sub	sp, #20
  40012c:	af00      	add	r7, sp, #0
  40012e:	60b9      	str	r1, [r7, #8]
  400130:	607a      	str	r2, [r7, #4]
  400132:	603b      	str	r3, [r7, #0]
  400134:	4603      	mov	r3, r0
  400136:	73fb      	strb	r3, [r7, #15]
	switch (mem) {
  400138:	7bfb      	ldrb	r3, [r7, #15]
  40013a:	2b00      	cmp	r3, #0
  40013c:	d002      	beq.n	400144 <nvm_write+0x1c>
  40013e:	2b01      	cmp	r3, #1
  400140:	d00c      	beq.n	40015c <nvm_write+0x34>
  400142:	e015      	b.n	400170 <nvm_write+0x48>
	case INT_FLASH:
#if SAM4S

		if (flash_write(address, (const void *)buffer, len, false)) {
  400144:	2300      	movs	r3, #0
  400146:	683a      	ldr	r2, [r7, #0]
  400148:	6879      	ldr	r1, [r7, #4]
  40014a:	68b8      	ldr	r0, [r7, #8]
  40014c:	4c0e      	ldr	r4, [pc, #56]	; (400188 <nvm_write+0x60>)
  40014e:	47a0      	blx	r4
  400150:	4603      	mov	r3, r0
  400152:	2b00      	cmp	r3, #0
  400154:	d00f      	beq.n	400176 <nvm_write+0x4e>
			return ERR_INVALID_ARG;
  400156:	f06f 0307 	mvn.w	r3, #7
  40015a:	e010      	b.n	40017e <nvm_write+0x56>
#endif
		break;

#if SAM4S
	case INT_USERPAGE:
		if (flash_write_user_signature((const void *)buffer, len)) {
  40015c:	6839      	ldr	r1, [r7, #0]
  40015e:	6878      	ldr	r0, [r7, #4]
  400160:	4b0a      	ldr	r3, [pc, #40]	; (40018c <nvm_write+0x64>)
  400162:	4798      	blx	r3
  400164:	4603      	mov	r3, r0
  400166:	2b00      	cmp	r3, #0
  400168:	d007      	beq.n	40017a <nvm_write+0x52>
			return ERR_INVALID_ARG;
  40016a:	f06f 0307 	mvn.w	r3, #7
  40016e:	e006      	b.n	40017e <nvm_write+0x56>
	}
	break;
#endif

	default:
		return ERR_INVALID_ARG;
  400170:	f06f 0307 	mvn.w	r3, #7
  400174:	e003      	b.n	40017e <nvm_write+0x56>
		if (flash_write(address, (const void *)buffer, len, true)) {
			return ERR_INVALID_ARG;
		}

#endif
		break;
  400176:	bf00      	nop
  400178:	e000      	b.n	40017c <nvm_write+0x54>
#if SAM4S
	case INT_USERPAGE:
		if (flash_write_user_signature((const void *)buffer, len)) {
			return ERR_INVALID_ARG;
		}
		break;
  40017a:	bf00      	nop

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
  40017c:	2300      	movs	r3, #0
}
  40017e:	4618      	mov	r0, r3
  400180:	3714      	adds	r7, #20
  400182:	46bd      	mov	sp, r7
  400184:	bd90      	pop	{r4, r7, pc}
  400186:	bf00      	nop
  400188:	00400309 	.word	0x00400309
  40018c:	00400439 	.word	0x00400439

00400190 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  400190:	b480      	push	{r7}
  400192:	b083      	sub	sp, #12
  400194:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400196:	f3ef 8310 	mrs	r3, PRIMASK
  40019a:	607b      	str	r3, [r7, #4]
  return(result);
  40019c:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40019e:	2b00      	cmp	r3, #0
  4001a0:	bf0c      	ite	eq
  4001a2:	2301      	moveq	r3, #1
  4001a4:	2300      	movne	r3, #0
  4001a6:	b2db      	uxtb	r3, r3
  4001a8:	603b      	str	r3, [r7, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4001aa:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4001ac:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4001b0:	4b04      	ldr	r3, [pc, #16]	; (4001c4 <cpu_irq_save+0x34>)
  4001b2:	2200      	movs	r2, #0
  4001b4:	701a      	strb	r2, [r3, #0]
	return flags;
  4001b6:	683b      	ldr	r3, [r7, #0]
}
  4001b8:	4618      	mov	r0, r3
  4001ba:	370c      	adds	r7, #12
  4001bc:	46bd      	mov	sp, r7
  4001be:	bc80      	pop	{r7}
  4001c0:	4770      	bx	lr
  4001c2:	bf00      	nop
  4001c4:	20000114 	.word	0x20000114

004001c8 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  4001c8:	b480      	push	{r7}
  4001ca:	b083      	sub	sp, #12
  4001cc:	af00      	add	r7, sp, #0
  4001ce:	6078      	str	r0, [r7, #4]
	return (flags);
  4001d0:	687b      	ldr	r3, [r7, #4]
  4001d2:	2b00      	cmp	r3, #0
  4001d4:	bf14      	ite	ne
  4001d6:	2301      	movne	r3, #1
  4001d8:	2300      	moveq	r3, #0
  4001da:	b2db      	uxtb	r3, r3
}
  4001dc:	4618      	mov	r0, r3
  4001de:	370c      	adds	r7, #12
  4001e0:	46bd      	mov	sp, r7
  4001e2:	bc80      	pop	{r7}
  4001e4:	4770      	bx	lr
  4001e6:	bf00      	nop

004001e8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  4001e8:	b580      	push	{r7, lr}
  4001ea:	b082      	sub	sp, #8
  4001ec:	af00      	add	r7, sp, #0
  4001ee:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  4001f0:	6878      	ldr	r0, [r7, #4]
  4001f2:	4b07      	ldr	r3, [pc, #28]	; (400210 <cpu_irq_restore+0x28>)
  4001f4:	4798      	blx	r3
  4001f6:	4603      	mov	r3, r0
  4001f8:	2b00      	cmp	r3, #0
  4001fa:	d005      	beq.n	400208 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  4001fc:	4b05      	ldr	r3, [pc, #20]	; (400214 <cpu_irq_restore+0x2c>)
  4001fe:	2201      	movs	r2, #1
  400200:	701a      	strb	r2, [r3, #0]
  400202:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400206:	b662      	cpsie	i
}
  400208:	bf00      	nop
  40020a:	3708      	adds	r7, #8
  40020c:	46bd      	mov	sp, r7
  40020e:	bd80      	pop	{r7, pc}
  400210:	004001c9 	.word	0x004001c9
  400214:	20000114 	.word	0x20000114

00400218 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
  400218:	b580      	push	{r7, lr}
  40021a:	b086      	sub	sp, #24
  40021c:	af00      	add	r7, sp, #0
  40021e:	60f8      	str	r0, [r7, #12]
  400220:	60b9      	str	r1, [r7, #8]
  400222:	607a      	str	r2, [r7, #4]
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
  400224:	68bb      	ldr	r3, [r7, #8]
  400226:	2b0e      	cmp	r3, #14
  400228:	d002      	beq.n	400230 <efc_perform_command+0x18>
  40022a:	68bb      	ldr	r3, [r7, #8]
  40022c:	2b0f      	cmp	r3, #15
  40022e:	d102      	bne.n	400236 <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
  400230:	f04f 33ff 	mov.w	r3, #4294967295
  400234:	e016      	b.n	400264 <efc_perform_command+0x4c>
	}

	flags = cpu_irq_save();
  400236:	4b0d      	ldr	r3, [pc, #52]	; (40026c <efc_perform_command+0x54>)
  400238:	4798      	blx	r3
  40023a:	6178      	str	r0, [r7, #20]
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
  40023c:	687b      	ldr	r3, [r7, #4]
  40023e:	021b      	lsls	r3, r3, #8
  400240:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  400244:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
  400248:	68ba      	ldr	r2, [r7, #8]
  40024a:	b2d2      	uxtb	r2, r2
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
  40024c:	4313      	orrs	r3, r2
		return EFC_RC_NOT_SUPPORT;
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
  40024e:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
  400252:	4619      	mov	r1, r3
  400254:	68f8      	ldr	r0, [r7, #12]
  400256:	4b06      	ldr	r3, [pc, #24]	; (400270 <efc_perform_command+0x58>)
  400258:	4798      	blx	r3
  40025a:	6138      	str	r0, [r7, #16]
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
	cpu_irq_restore(flags);
  40025c:	6978      	ldr	r0, [r7, #20]
  40025e:	4b05      	ldr	r3, [pc, #20]	; (400274 <efc_perform_command+0x5c>)
  400260:	4798      	blx	r3
	return result;
  400262:	693b      	ldr	r3, [r7, #16]
}
  400264:	4618      	mov	r0, r3
  400266:	3718      	adds	r7, #24
  400268:	46bd      	mov	sp, r7
  40026a:	bd80      	pop	{r7, pc}
  40026c:	00400191 	.word	0x00400191
  400270:	200000c1 	.word	0x200000c1
  400274:	004001e9 	.word	0x004001e9

00400278 <translate_address>:
 * \param pus_page The first page accessed.
 * \param pus_offset Byte offset in the first page.
 */
static void translate_address(Efc **pp_efc, uint32_t ul_addr,
		uint16_t *pus_page, uint16_t *pus_offset)
{
  400278:	b480      	push	{r7}
  40027a:	b087      	sub	sp, #28
  40027c:	af00      	add	r7, sp, #0
  40027e:	60f8      	str	r0, [r7, #12]
  400280:	60b9      	str	r1, [r7, #8]
  400282:	607a      	str	r2, [r7, #4]
  400284:	603b      	str	r3, [r7, #0]
	us_offset = (ul_addr - IFLASH0_ADDR) % IFLASH0_PAGE_SIZE;
#else
	Assert(ul_addr >= IFLASH_ADDR);
	Assert(ul_addr <= (IFLASH_ADDR + IFLASH_SIZE));

	p_efc = EFC;
  400286:	4b11      	ldr	r3, [pc, #68]	; (4002cc <translate_address+0x54>)
  400288:	617b      	str	r3, [r7, #20]
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
  40028a:	68bb      	ldr	r3, [r7, #8]
  40028c:	f5a3 0380 	sub.w	r3, r3, #4194304	; 0x400000
  400290:	0a5b      	lsrs	r3, r3, #9
  400292:	827b      	strh	r3, [r7, #18]
	us_offset = (ul_addr - IFLASH_ADDR) % IFLASH_PAGE_SIZE;
  400294:	68bb      	ldr	r3, [r7, #8]
  400296:	b29b      	uxth	r3, r3
  400298:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40029c:	823b      	strh	r3, [r7, #16]
#endif

	/* Store values */
	if (pp_efc) {
  40029e:	68fb      	ldr	r3, [r7, #12]
  4002a0:	2b00      	cmp	r3, #0
  4002a2:	d002      	beq.n	4002aa <translate_address+0x32>
		*pp_efc = p_efc;
  4002a4:	68fb      	ldr	r3, [r7, #12]
  4002a6:	697a      	ldr	r2, [r7, #20]
  4002a8:	601a      	str	r2, [r3, #0]
	}

	if (pus_page) {
  4002aa:	687b      	ldr	r3, [r7, #4]
  4002ac:	2b00      	cmp	r3, #0
  4002ae:	d002      	beq.n	4002b6 <translate_address+0x3e>
		*pus_page = us_page;
  4002b0:	687b      	ldr	r3, [r7, #4]
  4002b2:	8a7a      	ldrh	r2, [r7, #18]
  4002b4:	801a      	strh	r2, [r3, #0]
	}

	if (pus_offset) {
  4002b6:	683b      	ldr	r3, [r7, #0]
  4002b8:	2b00      	cmp	r3, #0
  4002ba:	d002      	beq.n	4002c2 <translate_address+0x4a>
		*pus_offset = us_offset;
  4002bc:	683b      	ldr	r3, [r7, #0]
  4002be:	8a3a      	ldrh	r2, [r7, #16]
  4002c0:	801a      	strh	r2, [r3, #0]
	}
}
  4002c2:	bf00      	nop
  4002c4:	371c      	adds	r7, #28
  4002c6:	46bd      	mov	sp, r7
  4002c8:	bc80      	pop	{r7}
  4002ca:	4770      	bx	lr
  4002cc:	400e0a00 	.word	0x400e0a00

004002d0 <compute_address>:
 * \param us_offset Byte offset inside page.
 * \param pul_addr Computed address (optional).
 */
static void compute_address(Efc *p_efc, uint16_t us_page, uint16_t us_offset,
		uint32_t *pul_addr)
{
  4002d0:	b480      	push	{r7}
  4002d2:	b087      	sub	sp, #28
  4002d4:	af00      	add	r7, sp, #0
  4002d6:	60f8      	str	r0, [r7, #12]
  4002d8:	607b      	str	r3, [r7, #4]
  4002da:	460b      	mov	r3, r1
  4002dc:	817b      	strh	r3, [r7, #10]
  4002de:	4613      	mov	r3, r2
  4002e0:	813b      	strh	r3, [r7, #8]
/* One bank flash */
#else
	/* avoid Cppcheck Warning */
	UNUSED(p_efc);
	/* Compute address */
	ul_addr = IFLASH_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
  4002e2:	897b      	ldrh	r3, [r7, #10]
  4002e4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
  4002e8:	025a      	lsls	r2, r3, #9
  4002ea:	893b      	ldrh	r3, [r7, #8]
  4002ec:	4413      	add	r3, r2
  4002ee:	617b      	str	r3, [r7, #20]
#endif

	/* Store result */
	if (pul_addr != NULL) {
  4002f0:	687b      	ldr	r3, [r7, #4]
  4002f2:	2b00      	cmp	r3, #0
  4002f4:	d002      	beq.n	4002fc <compute_address+0x2c>
		*pul_addr = ul_addr;
  4002f6:	687b      	ldr	r3, [r7, #4]
  4002f8:	697a      	ldr	r2, [r7, #20]
  4002fa:	601a      	str	r2, [r3, #0]
	}
}
  4002fc:	bf00      	nop
  4002fe:	371c      	adds	r7, #28
  400300:	46bd      	mov	sp, r7
  400302:	bc80      	pop	{r7}
  400304:	4770      	bx	lr
  400306:	bf00      	nop

00400308 <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
  400308:	b590      	push	{r4, r7, lr}
  40030a:	b08f      	sub	sp, #60	; 0x3c
  40030c:	af00      	add	r7, sp, #0
  40030e:	60f8      	str	r0, [r7, #12]
  400310:	60b9      	str	r1, [r7, #8]
  400312:	607a      	str	r2, [r7, #4]
  400314:	603b      	str	r3, [r7, #0]
	uint32_t ul_page_addr;
	uint16_t us_padding;
	uint32_t ul_error;
	uint32_t ul_idx;
	uint32_t *p_aligned_dest;
	uint8_t *puc_page_buffer = (uint8_t *) gs_ul_page_buffer;
  400316:	4b43      	ldr	r3, [pc, #268]	; (400424 <flash_write+0x11c>)
  400318:	62bb      	str	r3, [r7, #40]	; 0x28

	translate_address(&p_efc, ul_address, &us_page, &us_offset);
  40031a:	f107 0318 	add.w	r3, r7, #24
  40031e:	f107 021a 	add.w	r2, r7, #26
  400322:	f107 001c 	add.w	r0, r7, #28
  400326:	68f9      	ldr	r1, [r7, #12]
  400328:	4c3f      	ldr	r4, [pc, #252]	; (400428 <flash_write+0x120>)
  40032a:	47a0      	blx	r4
#else
	UNUSED(ul_fws_temp);
#endif

	/* Write all pages */
	while (ul_size > 0) {
  40032c:	e071      	b.n	400412 <flash_write+0x10a>
		/* Copy data in temporary buffer to avoid alignment problems. */
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
  40032e:	8b3b      	ldrh	r3, [r7, #24]
  400330:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
  400334:	687b      	ldr	r3, [r7, #4]
  400336:	4293      	cmp	r3, r2
  400338:	bf28      	it	cs
  40033a:	4613      	movcs	r3, r2
  40033c:	627b      	str	r3, [r7, #36]	; 0x24
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
  40033e:	69f8      	ldr	r0, [r7, #28]
  400340:	8b79      	ldrh	r1, [r7, #26]
  400342:	f107 0314 	add.w	r3, r7, #20
  400346:	2200      	movs	r2, #0
  400348:	4c38      	ldr	r4, [pc, #224]	; (40042c <flash_write+0x124>)
  40034a:	47a0      	blx	r4
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
  40034c:	8b3b      	ldrh	r3, [r7, #24]
  40034e:	425b      	negs	r3, r3
  400350:	b29a      	uxth	r2, r3
  400352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400354:	b29b      	uxth	r3, r3
  400356:	1ad3      	subs	r3, r2, r3
  400358:	b29b      	uxth	r3, r3
  40035a:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40035e:	847b      	strh	r3, [r7, #34]	; 0x22

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
  400360:	697b      	ldr	r3, [r7, #20]
  400362:	4619      	mov	r1, r3
  400364:	8b3b      	ldrh	r3, [r7, #24]
  400366:	461a      	mov	r2, r3
  400368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  40036a:	4b31      	ldr	r3, [pc, #196]	; (400430 <flash_write+0x128>)
  40036c:	4798      	blx	r3

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
  40036e:	8b3b      	ldrh	r3, [r7, #24]
  400370:	461a      	mov	r2, r3
  400372:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400374:	4413      	add	r3, r2
  400376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  400378:	68b9      	ldr	r1, [r7, #8]
  40037a:	4618      	mov	r0, r3
  40037c:	4b2c      	ldr	r3, [pc, #176]	; (400430 <flash_write+0x128>)
  40037e:	4798      	blx	r3

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
  400380:	8b3b      	ldrh	r3, [r7, #24]
  400382:	461a      	mov	r2, r3
  400384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400386:	4413      	add	r3, r2
  400388:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40038a:	18d0      	adds	r0, r2, r3
				(void *)(ul_page_addr + us_offset + writeSize),
  40038c:	8b3b      	ldrh	r3, [r7, #24]
  40038e:	461a      	mov	r2, r3
  400390:	697b      	ldr	r3, [r7, #20]
  400392:	441a      	add	r2, r3
  400394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400396:	4413      	add	r3, r2

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
  400398:	4619      	mov	r1, r3
  40039a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
  40039c:	461a      	mov	r2, r3
  40039e:	4b24      	ldr	r3, [pc, #144]	; (400430 <flash_write+0x128>)
  4003a0:	4798      	blx	r3

		/* Write page.
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
  4003a2:	697b      	ldr	r3, [r7, #20]
  4003a4:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
  4003a6:	2300      	movs	r3, #0
  4003a8:	633b      	str	r3, [r7, #48]	; 0x30
  4003aa:	e00a      	b.n	4003c2 <flash_write+0xba>
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
  4003ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4003ae:	1d1a      	adds	r2, r3, #4
  4003b0:	62fa      	str	r2, [r7, #44]	; 0x2c
  4003b2:	491c      	ldr	r1, [pc, #112]	; (400424 <flash_write+0x11c>)
  4003b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  4003b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  4003ba:	601a      	str	r2, [r3, #0]
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
				++ul_idx) {
  4003bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4003be:	3301      	adds	r3, #1
  4003c0:	633b      	str	r3, [r7, #48]	; 0x30
		/* Write page.
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
  4003c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4003c4:	2b7f      	cmp	r3, #127	; 0x7f
  4003c6:	d9f1      	bls.n	4003ac <flash_write+0xa4>
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
		}

		if (ul_erase_flag) {
  4003c8:	683b      	ldr	r3, [r7, #0]
  4003ca:	2b00      	cmp	r3, #0
  4003cc:	d007      	beq.n	4003de <flash_write+0xd6>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
  4003ce:	69fb      	ldr	r3, [r7, #28]
  4003d0:	8b7a      	ldrh	r2, [r7, #26]
  4003d2:	2103      	movs	r1, #3
  4003d4:	4618      	mov	r0, r3
  4003d6:	4b17      	ldr	r3, [pc, #92]	; (400434 <flash_write+0x12c>)
  4003d8:	4798      	blx	r3
  4003da:	6378      	str	r0, [r7, #52]	; 0x34
  4003dc:	e006      	b.n	4003ec <flash_write+0xe4>
					us_page);
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
  4003de:	69fb      	ldr	r3, [r7, #28]
  4003e0:	8b7a      	ldrh	r2, [r7, #26]
  4003e2:	2101      	movs	r1, #1
  4003e4:	4618      	mov	r0, r3
  4003e6:	4b13      	ldr	r3, [pc, #76]	; (400434 <flash_write+0x12c>)
  4003e8:	4798      	blx	r3
  4003ea:	6378      	str	r0, [r7, #52]	; 0x34
					us_page);
		}

		if (ul_error) {
  4003ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  4003ee:	2b00      	cmp	r3, #0
  4003f0:	d001      	beq.n	4003f6 <flash_write+0xee>
			return ul_error;
  4003f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  4003f4:	e011      	b.n	40041a <flash_write+0x112>
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
  4003f6:	68ba      	ldr	r2, [r7, #8]
  4003f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4003fa:	4413      	add	r3, r2
  4003fc:	60bb      	str	r3, [r7, #8]
		ul_size -= writeSize;
  4003fe:	687a      	ldr	r2, [r7, #4]
  400400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400402:	1ad3      	subs	r3, r2, r3
  400404:	607b      	str	r3, [r7, #4]
		us_page++;
  400406:	8b7b      	ldrh	r3, [r7, #26]
  400408:	3301      	adds	r3, #1
  40040a:	b29b      	uxth	r3, r3
  40040c:	837b      	strh	r3, [r7, #26]
		us_offset = 0;
  40040e:	2300      	movs	r3, #0
  400410:	833b      	strh	r3, [r7, #24]
#else
	UNUSED(ul_fws_temp);
#endif

	/* Write all pages */
	while (ul_size > 0) {
  400412:	687b      	ldr	r3, [r7, #4]
  400414:	2b00      	cmp	r3, #0
  400416:	d18a      	bne.n	40032e <flash_write+0x26>
#if SAM3S || SAM3N || SAM3XA || SAM3U
	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
#endif

	return FLASH_RC_OK;
  400418:	2300      	movs	r3, #0
}
  40041a:	4618      	mov	r0, r3
  40041c:	373c      	adds	r7, #60	; 0x3c
  40041e:	46bd      	mov	sp, r7
  400420:	bd90      	pop	{r4, r7, pc}
  400422:	bf00      	nop
  400424:	200009c4 	.word	0x200009c4
  400428:	00400279 	.word	0x00400279
  40042c:	004002d1 	.word	0x004002d1
  400430:	0040b909 	.word	0x0040b909
  400434:	00400219 	.word	0x00400219

00400438 <flash_write_user_signature>:
 * \param ul_size Data buffer size in 32 bit words.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_write_user_signature(const void *p_buffer, uint32_t ul_size)
{
  400438:	b580      	push	{r7, lr}
  40043a:	b084      	sub	sp, #16
  40043c:	af00      	add	r7, sp, #0
  40043e:	6078      	str	r0, [r7, #4]
  400440:	6039      	str	r1, [r7, #0]
	uint32_t ul_idx;
	uint32_t *p_dest;

	/* The user signature should be no longer than 512 bytes */
	if (ul_size > (IFLASH_PAGE_SIZE / sizeof(uint32_t))) {
  400442:	683b      	ldr	r3, [r7, #0]
  400444:	2b80      	cmp	r3, #128	; 0x80
  400446:	d901      	bls.n	40044c <flash_write_user_signature+0x14>
		return FLASH_RC_INVALID;
  400448:	2311      	movs	r3, #17
  40044a:	e025      	b.n	400498 <flash_write_user_signature+0x60>
	}

	/* Copy Buffer data */
	memcpy((uint8_t *) gs_ul_page_buffer, p_buffer, 
			ul_size * sizeof(uint32_t));
  40044c:	683b      	ldr	r3, [r7, #0]
  40044e:	009b      	lsls	r3, r3, #2
	if (ul_size > (IFLASH_PAGE_SIZE / sizeof(uint32_t))) {
		return FLASH_RC_INVALID;
	}

	/* Copy Buffer data */
	memcpy((uint8_t *) gs_ul_page_buffer, p_buffer, 
  400450:	461a      	mov	r2, r3
  400452:	6879      	ldr	r1, [r7, #4]
  400454:	4812      	ldr	r0, [pc, #72]	; (4004a0 <flash_write_user_signature+0x68>)
  400456:	4b13      	ldr	r3, [pc, #76]	; (4004a4 <flash_write_user_signature+0x6c>)
  400458:	4798      	blx	r3

	/* Write page buffer.
	* Writing 8-bit and 16-bit data is not allowed and may lead to
	* unpredictable data corruption.
	*/
	p_dest = (uint32_t *)IFLASH_ADDR;
  40045a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  40045e:	60bb      	str	r3, [r7, #8]
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t)); 
  400460:	2300      	movs	r3, #0
  400462:	60fb      	str	r3, [r7, #12]
  400464:	e00a      	b.n	40047c <flash_write_user_signature+0x44>
			ul_idx++) {
		*p_dest++ = gs_ul_page_buffer[ul_idx];
  400466:	68bb      	ldr	r3, [r7, #8]
  400468:	1d1a      	adds	r2, r3, #4
  40046a:	60ba      	str	r2, [r7, #8]
  40046c:	490c      	ldr	r1, [pc, #48]	; (4004a0 <flash_write_user_signature+0x68>)
  40046e:	68fa      	ldr	r2, [r7, #12]
  400470:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  400474:	601a      	str	r2, [r3, #0]
	* Writing 8-bit and 16-bit data is not allowed and may lead to
	* unpredictable data corruption.
	*/
	p_dest = (uint32_t *)IFLASH_ADDR;
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t)); 
			ul_idx++) {
  400476:	68fb      	ldr	r3, [r7, #12]
  400478:	3301      	adds	r3, #1
  40047a:	60fb      	str	r3, [r7, #12]
	/* Write page buffer.
	* Writing 8-bit and 16-bit data is not allowed and may lead to
	* unpredictable data corruption.
	*/
	p_dest = (uint32_t *)IFLASH_ADDR;
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t)); 
  40047c:	68fb      	ldr	r3, [r7, #12]
  40047e:	2b7f      	cmp	r3, #127	; 0x7f
  400480:	d9f1      	bls.n	400466 <flash_write_user_signature+0x2e>
			ul_idx++) {
		*p_dest++ = gs_ul_page_buffer[ul_idx];
	}

	/* Send the write signature command */
	if (FLASH_RC_OK != efc_perform_command(EFC, EFC_FCMD_WUS, 0)) {
  400482:	2200      	movs	r2, #0
  400484:	2112      	movs	r1, #18
  400486:	4808      	ldr	r0, [pc, #32]	; (4004a8 <flash_write_user_signature+0x70>)
  400488:	4b08      	ldr	r3, [pc, #32]	; (4004ac <flash_write_user_signature+0x74>)
  40048a:	4798      	blx	r3
  40048c:	4603      	mov	r3, r0
  40048e:	2b00      	cmp	r3, #0
  400490:	d001      	beq.n	400496 <flash_write_user_signature+0x5e>
		return FLASH_RC_ERROR;
  400492:	2310      	movs	r3, #16
  400494:	e000      	b.n	400498 <flash_write_user_signature+0x60>
	}

	return FLASH_RC_OK;
  400496:	2300      	movs	r3, #0
}
  400498:	4618      	mov	r0, r3
  40049a:	3710      	adds	r7, #16
  40049c:	46bd      	mov	sp, r7
  40049e:	bd80      	pop	{r7, pc}
  4004a0:	200009c4 	.word	0x200009c4
  4004a4:	0040b909 	.word	0x0040b909
  4004a8:	400e0a00 	.word	0x400e0a00
  4004ac:	00400219 	.word	0x00400219

004004b0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4004b0:	b480      	push	{r7}
  4004b2:	b083      	sub	sp, #12
  4004b4:	af00      	add	r7, sp, #0
  4004b6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4004b8:	687b      	ldr	r3, [r7, #4]
  4004ba:	2b07      	cmp	r3, #7
  4004bc:	d825      	bhi.n	40050a <osc_get_rate+0x5a>
  4004be:	a201      	add	r2, pc, #4	; (adr r2, 4004c4 <osc_get_rate+0x14>)
  4004c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4004c4:	004004e5 	.word	0x004004e5
  4004c8:	004004eb 	.word	0x004004eb
  4004cc:	004004f1 	.word	0x004004f1
  4004d0:	004004f7 	.word	0x004004f7
  4004d4:	004004fb 	.word	0x004004fb
  4004d8:	004004ff 	.word	0x004004ff
  4004dc:	00400503 	.word	0x00400503
  4004e0:	00400507 	.word	0x00400507
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4004e4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4004e8:	e010      	b.n	40050c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4004ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4004ee:	e00d      	b.n	40050c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4004f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4004f4:	e00a      	b.n	40050c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4004f6:	4b08      	ldr	r3, [pc, #32]	; (400518 <osc_get_rate+0x68>)
  4004f8:	e008      	b.n	40050c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4004fa:	4b08      	ldr	r3, [pc, #32]	; (40051c <osc_get_rate+0x6c>)
  4004fc:	e006      	b.n	40050c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4004fe:	4b08      	ldr	r3, [pc, #32]	; (400520 <osc_get_rate+0x70>)
  400500:	e004      	b.n	40050c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400502:	4b07      	ldr	r3, [pc, #28]	; (400520 <osc_get_rate+0x70>)
  400504:	e002      	b.n	40050c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400506:	4b06      	ldr	r3, [pc, #24]	; (400520 <osc_get_rate+0x70>)
  400508:	e000      	b.n	40050c <osc_get_rate+0x5c>
	}

	return 0;
  40050a:	2300      	movs	r3, #0
}
  40050c:	4618      	mov	r0, r3
  40050e:	370c      	adds	r7, #12
  400510:	46bd      	mov	sp, r7
  400512:	bc80      	pop	{r7}
  400514:	4770      	bx	lr
  400516:	bf00      	nop
  400518:	003d0900 	.word	0x003d0900
  40051c:	007a1200 	.word	0x007a1200
  400520:	00b71b00 	.word	0x00b71b00

00400524 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400524:	b580      	push	{r7, lr}
  400526:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400528:	2006      	movs	r0, #6
  40052a:	4b04      	ldr	r3, [pc, #16]	; (40053c <sysclk_get_main_hz+0x18>)
  40052c:	4798      	blx	r3
  40052e:	4602      	mov	r2, r0
  400530:	4613      	mov	r3, r2
  400532:	009b      	lsls	r3, r3, #2
  400534:	4413      	add	r3, r2
  400536:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400538:	4618      	mov	r0, r3
  40053a:	bd80      	pop	{r7, pc}
  40053c:	004004b1 	.word	0x004004b1

00400540 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400540:	b580      	push	{r7, lr}
  400542:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400544:	4b02      	ldr	r3, [pc, #8]	; (400550 <sysclk_get_cpu_hz+0x10>)
  400546:	4798      	blx	r3
  400548:	4603      	mov	r3, r0
  40054a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40054c:	4618      	mov	r0, r3
  40054e:	bd80      	pop	{r7, pc}
  400550:	00400525 	.word	0x00400525

00400554 <WriteEEPROM>:
	 /*
	  * 2 LSBs of chipAddr (A1,A0) are the memory addresses (A9, A8).
	  * Write operation takes place in pages of 16Bytes only. Any data more than that is wrapped around.
	  */
	 void WriteEEPROM(Twi * Port, uint8_t chipAddr, uint16_t memAddr, uint8_t *dPkt, uint8_t dLen)
	 {
  400554:	b5f0      	push	{r4, r5, r6, r7, lr}
  400556:	b08b      	sub	sp, #44	; 0x2c
  400558:	af00      	add	r7, sp, #0
  40055a:	60f8      	str	r0, [r7, #12]
  40055c:	607b      	str	r3, [r7, #4]
  40055e:	460b      	mov	r3, r1
  400560:	72fb      	strb	r3, [r7, #11]
  400562:	4613      	mov	r3, r2
  400564:	813b      	strh	r3, [r7, #8]
		 twi_packet_t pkt;
		 /* Set Device Address */
		 pkt.chip = (chipAddr&0xFC);
  400566:	7afb      	ldrb	r3, [r7, #11]
  400568:	f023 0303 	bic.w	r3, r3, #3
  40056c:	b2db      	uxtb	r3, r3
  40056e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		 pkt.chip |= ((memAddr>>8)&0x03);
  400572:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
  400576:	b25a      	sxtb	r2, r3
  400578:	893b      	ldrh	r3, [r7, #8]
  40057a:	0a1b      	lsrs	r3, r3, #8
  40057c:	b29b      	uxth	r3, r3
  40057e:	b25b      	sxtb	r3, r3
  400580:	f003 0303 	and.w	r3, r3, #3
  400584:	b25b      	sxtb	r3, r3
  400586:	4313      	orrs	r3, r2
  400588:	b25b      	sxtb	r3, r3
  40058a:	b2db      	uxtb	r3, r3
  40058c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		 /* Page Number */
		 pkt.addr[0] = memAddr;
  400590:	893b      	ldrh	r3, [r7, #8]
  400592:	b2db      	uxtb	r3, r3
  400594:	753b      	strb	r3, [r7, #20]
		 /* No Address Bytes to be clocked */
		 pkt.addr_length = 1;
  400596:	2301      	movs	r3, #1
  400598:	61bb      	str	r3, [r7, #24]
		 /* Address of buffer where recvd data is to be stored */
		 pkt.buffer = dPkt;
  40059a:	687b      	ldr	r3, [r7, #4]
  40059c:	61fb      	str	r3, [r7, #28]
		 /* No of bytes to read */
		 pkt.length = dLen;
  40059e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
  4005a2:	623b      	str	r3, [r7, #32]
		 twi_master_write(Port, &pkt);
  4005a4:	f107 0314 	add.w	r3, r7, #20
  4005a8:	4619      	mov	r1, r3
  4005aa:	68f8      	ldr	r0, [r7, #12]
  4005ac:	4b15      	ldr	r3, [pc, #84]	; (400604 <WriteEEPROM+0xb0>)
  4005ae:	4798      	blx	r3
		 delay_ms(5);
  4005b0:	4b15      	ldr	r3, [pc, #84]	; (400608 <WriteEEPROM+0xb4>)
  4005b2:	4798      	blx	r3
  4005b4:	4603      	mov	r3, r0
  4005b6:	4619      	mov	r1, r3
  4005b8:	f04f 0200 	mov.w	r2, #0
  4005bc:	460b      	mov	r3, r1
  4005be:	4614      	mov	r4, r2
  4005c0:	00a6      	lsls	r6, r4, #2
  4005c2:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  4005c6:	009d      	lsls	r5, r3, #2
  4005c8:	462b      	mov	r3, r5
  4005ca:	4634      	mov	r4, r6
  4005cc:	185b      	adds	r3, r3, r1
  4005ce:	eb44 0402 	adc.w	r4, r4, r2
  4005d2:	f243 61af 	movw	r1, #13999	; 0x36af
  4005d6:	f04f 0200 	mov.w	r2, #0
  4005da:	185d      	adds	r5, r3, r1
  4005dc:	eb44 0602 	adc.w	r6, r4, r2
  4005e0:	4628      	mov	r0, r5
  4005e2:	4631      	mov	r1, r6
  4005e4:	4c09      	ldr	r4, [pc, #36]	; (40060c <WriteEEPROM+0xb8>)
  4005e6:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4005ea:	f04f 0300 	mov.w	r3, #0
  4005ee:	47a0      	blx	r4
  4005f0:	4603      	mov	r3, r0
  4005f2:	460c      	mov	r4, r1
  4005f4:	4618      	mov	r0, r3
  4005f6:	4b06      	ldr	r3, [pc, #24]	; (400610 <WriteEEPROM+0xbc>)
  4005f8:	4798      	blx	r3
	 }
  4005fa:	bf00      	nop
  4005fc:	372c      	adds	r7, #44	; 0x2c
  4005fe:	46bd      	mov	sp, r7
  400600:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400602:	bf00      	nop
  400604:	00403a75 	.word	0x00403a75
  400608:	00400541 	.word	0x00400541
  40060c:	0040b531 	.word	0x0040b531
  400610:	200000f1 	.word	0x200000f1

00400614 <ReadEEPROM>:
	 /*
	  * 2 LSBs of chipAddr (A1,A0) are the memory addresses (A9, A8).
	  * Read operation does not wrap around on page boundaries.
	  */
	 void ReadEEPROM(Twi * Port, uint8_t chipAddr, uint16_t memAddr, uint8_t *dPkt, uint16_t dLen)
	 {
  400614:	b580      	push	{r7, lr}
  400616:	b08a      	sub	sp, #40	; 0x28
  400618:	af00      	add	r7, sp, #0
  40061a:	60f8      	str	r0, [r7, #12]
  40061c:	607b      	str	r3, [r7, #4]
  40061e:	460b      	mov	r3, r1
  400620:	72fb      	strb	r3, [r7, #11]
  400622:	4613      	mov	r3, r2
  400624:	813b      	strh	r3, [r7, #8]
		 twi_packet_t pkt;
		 /* Set Device Address */
		 pkt.chip = (chipAddr&0xFC);
  400626:	7afb      	ldrb	r3, [r7, #11]
  400628:	f023 0303 	bic.w	r3, r3, #3
  40062c:	b2db      	uxtb	r3, r3
  40062e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		 pkt.chip |= ((memAddr>>8)&0x03);
  400632:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
  400636:	b25a      	sxtb	r2, r3
  400638:	893b      	ldrh	r3, [r7, #8]
  40063a:	0a1b      	lsrs	r3, r3, #8
  40063c:	b29b      	uxth	r3, r3
  40063e:	b25b      	sxtb	r3, r3
  400640:	f003 0303 	and.w	r3, r3, #3
  400644:	b25b      	sxtb	r3, r3
  400646:	4313      	orrs	r3, r2
  400648:	b25b      	sxtb	r3, r3
  40064a:	b2db      	uxtb	r3, r3
  40064c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		 /* Page Number */
		 pkt.addr[0] = memAddr;
  400650:	893b      	ldrh	r3, [r7, #8]
  400652:	b2db      	uxtb	r3, r3
  400654:	753b      	strb	r3, [r7, #20]
		 /* No Address Bytes to be clocked */
		 pkt.addr_length = 1;
  400656:	2301      	movs	r3, #1
  400658:	61bb      	str	r3, [r7, #24]
		 /* Address of buffer where recvd data is to be stored */
		 pkt.buffer = dPkt;
  40065a:	687b      	ldr	r3, [r7, #4]
  40065c:	61fb      	str	r3, [r7, #28]
		 /* No of bytes to read */
		 pkt.length = dLen;
  40065e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
  400660:	623b      	str	r3, [r7, #32]
		 twi_master_read(Port, &pkt);
  400662:	f107 0314 	add.w	r3, r7, #20
  400666:	4619      	mov	r1, r3
  400668:	68f8      	ldr	r0, [r7, #12]
  40066a:	4b03      	ldr	r3, [pc, #12]	; (400678 <ReadEEPROM+0x64>)
  40066c:	4798      	blx	r3
	 }
  40066e:	bf00      	nop
  400670:	3728      	adds	r7, #40	; 0x28
  400672:	46bd      	mov	sp, r7
  400674:	bd80      	pop	{r7, pc}
  400676:	bf00      	nop
  400678:	00403969 	.word	0x00403969

0040067c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40067c:	b480      	push	{r7}
  40067e:	b083      	sub	sp, #12
  400680:	af00      	add	r7, sp, #0
  400682:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400684:	687b      	ldr	r3, [r7, #4]
  400686:	2b07      	cmp	r3, #7
  400688:	d825      	bhi.n	4006d6 <osc_get_rate+0x5a>
  40068a:	a201      	add	r2, pc, #4	; (adr r2, 400690 <osc_get_rate+0x14>)
  40068c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400690:	004006b1 	.word	0x004006b1
  400694:	004006b7 	.word	0x004006b7
  400698:	004006bd 	.word	0x004006bd
  40069c:	004006c3 	.word	0x004006c3
  4006a0:	004006c7 	.word	0x004006c7
  4006a4:	004006cb 	.word	0x004006cb
  4006a8:	004006cf 	.word	0x004006cf
  4006ac:	004006d3 	.word	0x004006d3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4006b0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4006b4:	e010      	b.n	4006d8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4006b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4006ba:	e00d      	b.n	4006d8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4006bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4006c0:	e00a      	b.n	4006d8 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4006c2:	4b08      	ldr	r3, [pc, #32]	; (4006e4 <osc_get_rate+0x68>)
  4006c4:	e008      	b.n	4006d8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4006c6:	4b08      	ldr	r3, [pc, #32]	; (4006e8 <osc_get_rate+0x6c>)
  4006c8:	e006      	b.n	4006d8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4006ca:	4b08      	ldr	r3, [pc, #32]	; (4006ec <osc_get_rate+0x70>)
  4006cc:	e004      	b.n	4006d8 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4006ce:	4b07      	ldr	r3, [pc, #28]	; (4006ec <osc_get_rate+0x70>)
  4006d0:	e002      	b.n	4006d8 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4006d2:	4b06      	ldr	r3, [pc, #24]	; (4006ec <osc_get_rate+0x70>)
  4006d4:	e000      	b.n	4006d8 <osc_get_rate+0x5c>
	}

	return 0;
  4006d6:	2300      	movs	r3, #0
}
  4006d8:	4618      	mov	r0, r3
  4006da:	370c      	adds	r7, #12
  4006dc:	46bd      	mov	sp, r7
  4006de:	bc80      	pop	{r7}
  4006e0:	4770      	bx	lr
  4006e2:	bf00      	nop
  4006e4:	003d0900 	.word	0x003d0900
  4006e8:	007a1200 	.word	0x007a1200
  4006ec:	00b71b00 	.word	0x00b71b00

004006f0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4006f0:	b580      	push	{r7, lr}
  4006f2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4006f4:	2006      	movs	r0, #6
  4006f6:	4b04      	ldr	r3, [pc, #16]	; (400708 <sysclk_get_main_hz+0x18>)
  4006f8:	4798      	blx	r3
  4006fa:	4602      	mov	r2, r0
  4006fc:	4613      	mov	r3, r2
  4006fe:	009b      	lsls	r3, r3, #2
  400700:	4413      	add	r3, r2
  400702:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400704:	4618      	mov	r0, r3
  400706:	bd80      	pop	{r7, pc}
  400708:	0040067d 	.word	0x0040067d

0040070c <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  40070c:	b580      	push	{r7, lr}
  40070e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400710:	4b02      	ldr	r3, [pc, #8]	; (40071c <sysclk_get_peripheral_hz+0x10>)
  400712:	4798      	blx	r3
  400714:	4603      	mov	r3, r0
  400716:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400718:	4618      	mov	r0, r3
  40071a:	bd80      	pop	{r7, pc}
  40071c:	004006f1 	.word	0x004006f1

00400720 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400720:	b580      	push	{r7, lr}
  400722:	b082      	sub	sp, #8
  400724:	af00      	add	r7, sp, #0
  400726:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400728:	6878      	ldr	r0, [r7, #4]
  40072a:	4b03      	ldr	r3, [pc, #12]	; (400738 <sysclk_enable_peripheral_clock+0x18>)
  40072c:	4798      	blx	r3
}
  40072e:	bf00      	nop
  400730:	3708      	adds	r7, #8
  400732:	46bd      	mov	sp, r7
  400734:	bd80      	pop	{r7, pc}
  400736:	bf00      	nop
  400738:	00405075 	.word	0x00405075

0040073c <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  40073c:	b580      	push	{r7, lr}
  40073e:	b08c      	sub	sp, #48	; 0x30
  400740:	af00      	add	r7, sp, #0
  400742:	6078      	str	r0, [r7, #4]
  400744:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400746:	4b31      	ldr	r3, [pc, #196]	; (40080c <usart_serial_init+0xd0>)
  400748:	4798      	blx	r3
  40074a:	4603      	mov	r3, r0
  40074c:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  40074e:	683b      	ldr	r3, [r7, #0]
  400750:	681b      	ldr	r3, [r3, #0]
  400752:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  400754:	683b      	ldr	r3, [r7, #0]
  400756:	689b      	ldr	r3, [r3, #8]
  400758:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  40075a:	683b      	ldr	r3, [r7, #0]
  40075c:	681b      	ldr	r3, [r3, #0]
  40075e:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  400760:	683b      	ldr	r3, [r7, #0]
  400762:	685b      	ldr	r3, [r3, #4]
  400764:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  400766:	683b      	ldr	r3, [r7, #0]
  400768:	689b      	ldr	r3, [r3, #8]
  40076a:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  40076c:	683b      	ldr	r3, [r7, #0]
  40076e:	68db      	ldr	r3, [r3, #12]
  400770:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  400772:	2300      	movs	r3, #0
  400774:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400776:	687b      	ldr	r3, [r7, #4]
  400778:	4a25      	ldr	r2, [pc, #148]	; (400810 <usart_serial_init+0xd4>)
  40077a:	4293      	cmp	r3, r2
  40077c:	d108      	bne.n	400790 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  40077e:	2008      	movs	r0, #8
  400780:	4b24      	ldr	r3, [pc, #144]	; (400814 <usart_serial_init+0xd8>)
  400782:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400784:	f107 0324 	add.w	r3, r7, #36	; 0x24
  400788:	4619      	mov	r1, r3
  40078a:	6878      	ldr	r0, [r7, #4]
  40078c:	4b22      	ldr	r3, [pc, #136]	; (400818 <usart_serial_init+0xdc>)
  40078e:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400790:	687b      	ldr	r3, [r7, #4]
  400792:	4a22      	ldr	r2, [pc, #136]	; (40081c <usart_serial_init+0xe0>)
  400794:	4293      	cmp	r3, r2
  400796:	d108      	bne.n	4007aa <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  400798:	2009      	movs	r0, #9
  40079a:	4b1e      	ldr	r3, [pc, #120]	; (400814 <usart_serial_init+0xd8>)
  40079c:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40079e:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4007a2:	4619      	mov	r1, r3
  4007a4:	6878      	ldr	r0, [r7, #4]
  4007a6:	4b1c      	ldr	r3, [pc, #112]	; (400818 <usart_serial_init+0xdc>)
  4007a8:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4007aa:	687b      	ldr	r3, [r7, #4]
  4007ac:	4a1c      	ldr	r2, [pc, #112]	; (400820 <usart_serial_init+0xe4>)
  4007ae:	4293      	cmp	r3, r2
  4007b0:	d111      	bne.n	4007d6 <usart_serial_init+0x9a>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  4007b2:	200e      	movs	r0, #14
  4007b4:	4b17      	ldr	r3, [pc, #92]	; (400814 <usart_serial_init+0xd8>)
  4007b6:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4007b8:	4b14      	ldr	r3, [pc, #80]	; (40080c <usart_serial_init+0xd0>)
  4007ba:	4798      	blx	r3
  4007bc:	4602      	mov	r2, r0
  4007be:	f107 030c 	add.w	r3, r7, #12
  4007c2:	4619      	mov	r1, r3
  4007c4:	6878      	ldr	r0, [r7, #4]
  4007c6:	4b17      	ldr	r3, [pc, #92]	; (400824 <usart_serial_init+0xe8>)
  4007c8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4007ca:	6878      	ldr	r0, [r7, #4]
  4007cc:	4b16      	ldr	r3, [pc, #88]	; (400828 <usart_serial_init+0xec>)
  4007ce:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4007d0:	6878      	ldr	r0, [r7, #4]
  4007d2:	4b16      	ldr	r3, [pc, #88]	; (40082c <usart_serial_init+0xf0>)
  4007d4:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4007d6:	687b      	ldr	r3, [r7, #4]
  4007d8:	4a15      	ldr	r2, [pc, #84]	; (400830 <usart_serial_init+0xf4>)
  4007da:	4293      	cmp	r3, r2
  4007dc:	d111      	bne.n	400802 <usart_serial_init+0xc6>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  4007de:	200f      	movs	r0, #15
  4007e0:	4b0c      	ldr	r3, [pc, #48]	; (400814 <usart_serial_init+0xd8>)
  4007e2:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4007e4:	4b09      	ldr	r3, [pc, #36]	; (40080c <usart_serial_init+0xd0>)
  4007e6:	4798      	blx	r3
  4007e8:	4602      	mov	r2, r0
  4007ea:	f107 030c 	add.w	r3, r7, #12
  4007ee:	4619      	mov	r1, r3
  4007f0:	6878      	ldr	r0, [r7, #4]
  4007f2:	4b0c      	ldr	r3, [pc, #48]	; (400824 <usart_serial_init+0xe8>)
  4007f4:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4007f6:	6878      	ldr	r0, [r7, #4]
  4007f8:	4b0b      	ldr	r3, [pc, #44]	; (400828 <usart_serial_init+0xec>)
  4007fa:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4007fc:	6878      	ldr	r0, [r7, #4]
  4007fe:	4b0b      	ldr	r3, [pc, #44]	; (40082c <usart_serial_init+0xf0>)
  400800:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  400802:	bf00      	nop
  400804:	3730      	adds	r7, #48	; 0x30
  400806:	46bd      	mov	sp, r7
  400808:	bd80      	pop	{r7, pc}
  40080a:	bf00      	nop
  40080c:	0040070d 	.word	0x0040070d
  400810:	400e0600 	.word	0x400e0600
  400814:	00400721 	.word	0x00400721
  400818:	00403bbd 	.word	0x00403bbd
  40081c:	400e0800 	.word	0x400e0800
  400820:	40024000 	.word	0x40024000
  400824:	00403d89 	.word	0x00403d89
  400828:	00403e4d 	.word	0x00403e4d
  40082c:	00403e95 	.word	0x00403e95
  400830:	40028000 	.word	0x40028000

00400834 <ConsoleInit>:
 /* Pointer to Console UART PDC register base */
 Pdc *cnslUartPdcBase;
 pdc_packet_t cnslPdcPkt;

 void ConsoleInit(void)
 {
  400834:	b580      	push	{r7, lr}
  400836:	b084      	sub	sp, #16
  400838:	af00      	add	r7, sp, #0
	const usart_serial_options_t settings = {
  40083a:	463b      	mov	r3, r7
  40083c:	2200      	movs	r2, #0
  40083e:	601a      	str	r2, [r3, #0]
  400840:	605a      	str	r2, [r3, #4]
  400842:	609a      	str	r2, [r3, #8]
  400844:	60da      	str	r2, [r3, #12]
  400846:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40084a:	603b      	str	r3, [r7, #0]
  40084c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400850:	60bb      	str	r3, [r7, #8]
		.baudrate = CNSL_BAUDRATE,
		.paritytype = UART_MR_PAR_NO
	};
	
	sysclk_enable_peripheral_clock(CNSL_UART_ID);
  400852:	2008      	movs	r0, #8
  400854:	4b0e      	ldr	r3, [pc, #56]	; (400890 <ConsoleInit+0x5c>)
  400856:	4798      	blx	r3
	usart_serial_init((Usart *)CNSL_UART,(usart_serial_options_t *)&settings);
  400858:	463b      	mov	r3, r7
  40085a:	4619      	mov	r1, r3
  40085c:	480d      	ldr	r0, [pc, #52]	; (400894 <ConsoleInit+0x60>)
  40085e:	4b0e      	ldr	r3, [pc, #56]	; (400898 <ConsoleInit+0x64>)
  400860:	4798      	blx	r3
	
	uart_enable_tx(CNSL_UART);
  400862:	480c      	ldr	r0, [pc, #48]	; (400894 <ConsoleInit+0x60>)
  400864:	4b0d      	ldr	r3, [pc, #52]	; (40089c <ConsoleInit+0x68>)
  400866:	4798      	blx	r3
	uart_disable_rx(CNSL_UART);
  400868:	480a      	ldr	r0, [pc, #40]	; (400894 <ConsoleInit+0x60>)
  40086a:	4b0d      	ldr	r3, [pc, #52]	; (4008a0 <ConsoleInit+0x6c>)
  40086c:	4798      	blx	r3

	cnslUartPdcBase = uart_get_pdc_base(CNSL_UART);
  40086e:	4809      	ldr	r0, [pc, #36]	; (400894 <ConsoleInit+0x60>)
  400870:	4b0c      	ldr	r3, [pc, #48]	; (4008a4 <ConsoleInit+0x70>)
  400872:	4798      	blx	r3
  400874:	4602      	mov	r2, r0
  400876:	4b0c      	ldr	r3, [pc, #48]	; (4008a8 <ConsoleInit+0x74>)
  400878:	601a      	str	r2, [r3, #0]
	pdc_enable_transfer(cnslUartPdcBase, PERIPH_PTCR_TXTEN);
  40087a:	4b0b      	ldr	r3, [pc, #44]	; (4008a8 <ConsoleInit+0x74>)
  40087c:	681b      	ldr	r3, [r3, #0]
  40087e:	f44f 7180 	mov.w	r1, #256	; 0x100
  400882:	4618      	mov	r0, r3
  400884:	4b09      	ldr	r3, [pc, #36]	; (4008ac <ConsoleInit+0x78>)
  400886:	4798      	blx	r3
 }
  400888:	bf00      	nop
  40088a:	3710      	adds	r7, #16
  40088c:	46bd      	mov	sp, r7
  40088e:	bd80      	pop	{r7, pc}
  400890:	00400721 	.word	0x00400721
  400894:	400e0600 	.word	0x400e0600
  400898:	0040073d 	.word	0x0040073d
  40089c:	00403c1d 	.word	0x00403c1d
  4008a0:	00403c35 	.word	0x00403c35
  4008a4:	00403c65 	.word	0x00403c65
  4008a8:	20002e90 	.word	0x20002e90
  4008ac:	00403739 	.word	0x00403739

004008b0 <ConsoleWrite>:
 
 void ConsoleWrite(uint8_t *buff, uint16_t dataLen)
 {
  4008b0:	b580      	push	{r7, lr}
  4008b2:	b082      	sub	sp, #8
  4008b4:	af00      	add	r7, sp, #0
  4008b6:	6078      	str	r0, [r7, #4]
  4008b8:	460b      	mov	r3, r1
  4008ba:	807b      	strh	r3, [r7, #2]
	/* Initiate PDC Transfer for dataLen bytes */
	cnslPdcPkt.ul_addr = (uint32_t) buff;
  4008bc:	687b      	ldr	r3, [r7, #4]
  4008be:	4a0e      	ldr	r2, [pc, #56]	; (4008f8 <ConsoleWrite+0x48>)
  4008c0:	6013      	str	r3, [r2, #0]
	cnslPdcPkt.ul_size = dataLen;
  4008c2:	887b      	ldrh	r3, [r7, #2]
  4008c4:	4a0c      	ldr	r2, [pc, #48]	; (4008f8 <ConsoleWrite+0x48>)
  4008c6:	6053      	str	r3, [r2, #4]
	pdc_tx_init(cnslUartPdcBase, &cnslPdcPkt, NULL);
  4008c8:	4b0c      	ldr	r3, [pc, #48]	; (4008fc <ConsoleWrite+0x4c>)
  4008ca:	681b      	ldr	r3, [r3, #0]
  4008cc:	2200      	movs	r2, #0
  4008ce:	490a      	ldr	r1, [pc, #40]	; (4008f8 <ConsoleWrite+0x48>)
  4008d0:	4618      	mov	r0, r3
  4008d2:	4b0b      	ldr	r3, [pc, #44]	; (400900 <ConsoleWrite+0x50>)
  4008d4:	4798      	blx	r3
	/* If previous transfer not complete, wait */
	while (!(uart_get_status(CNSL_UART) & UART_SR_ENDTX))
  4008d6:	e002      	b.n	4008de <ConsoleWrite+0x2e>
	{
		#ifndef __FREERTOS__
			delay_ms(1);
		#else
			vTaskDelay(1 / portTICK_RATE_MS);
  4008d8:	2000      	movs	r0, #0
  4008da:	4b0a      	ldr	r3, [pc, #40]	; (400904 <ConsoleWrite+0x54>)
  4008dc:	4798      	blx	r3
	/* Initiate PDC Transfer for dataLen bytes */
	cnslPdcPkt.ul_addr = (uint32_t) buff;
	cnslPdcPkt.ul_size = dataLen;
	pdc_tx_init(cnslUartPdcBase, &cnslPdcPkt, NULL);
	/* If previous transfer not complete, wait */
	while (!(uart_get_status(CNSL_UART) & UART_SR_ENDTX))
  4008de:	480a      	ldr	r0, [pc, #40]	; (400908 <ConsoleWrite+0x58>)
  4008e0:	4b0a      	ldr	r3, [pc, #40]	; (40090c <ConsoleWrite+0x5c>)
  4008e2:	4798      	blx	r3
  4008e4:	4603      	mov	r3, r0
  4008e6:	f003 0310 	and.w	r3, r3, #16
  4008ea:	2b00      	cmp	r3, #0
  4008ec:	d0f4      	beq.n	4008d8 <ConsoleWrite+0x28>
			delay_ms(1);
		#else
			vTaskDelay(1 / portTICK_RATE_MS);
		#endif
	}
  4008ee:	bf00      	nop
  4008f0:	3708      	adds	r7, #8
  4008f2:	46bd      	mov	sp, r7
  4008f4:	bd80      	pop	{r7, pc}
  4008f6:	bf00      	nop
  4008f8:	20002e88 	.word	0x20002e88
  4008fc:	20002e90 	.word	0x20002e90
  400900:	004036b1 	.word	0x004036b1
  400904:	00406479 	.word	0x00406479
  400908:	400e0600 	.word	0x400e0600
  40090c:	00403c4d 	.word	0x00403c4d

00400910 <DSGetTime>:

#include "DS3231.h"

#ifndef DS3231_USE_RTOS_API
	void DSGetTime(Twi *port, uint16_t *recvTime)
	{
  400910:	b580      	push	{r7, lr}
  400912:	b088      	sub	sp, #32
  400914:	af00      	add	r7, sp, #0
  400916:	6078      	str	r0, [r7, #4]
  400918:	6039      	str	r1, [r7, #0]
		uint8_t buff[3];
		twi_packet_t pkt;
	
		pkt.chip = DS_ADDR;
  40091a:	2368      	movs	r3, #104	; 0x68
  40091c:	763b      	strb	r3, [r7, #24]
		pkt.addr[0] = DS_REG_SEC;
  40091e:	2300      	movs	r3, #0
  400920:	723b      	strb	r3, [r7, #8]
		pkt.addr_length = 1;
  400922:	2301      	movs	r3, #1
  400924:	60fb      	str	r3, [r7, #12]
		pkt.buffer = buff;
  400926:	f107 031c 	add.w	r3, r7, #28
  40092a:	613b      	str	r3, [r7, #16]
		pkt.length = 3;
  40092c:	2303      	movs	r3, #3
  40092e:	617b      	str	r3, [r7, #20]
		twi_master_read(port, &pkt);
  400930:	f107 0308 	add.w	r3, r7, #8
  400934:	4619      	mov	r1, r3
  400936:	6878      	ldr	r0, [r7, #4]
  400938:	4b09      	ldr	r3, [pc, #36]	; (400960 <DSGetTime+0x50>)
  40093a:	4798      	blx	r3

		//SS
		recvTime[0] = buff[0];
  40093c:	7f3b      	ldrb	r3, [r7, #28]
  40093e:	b29a      	uxth	r2, r3
  400940:	683b      	ldr	r3, [r7, #0]
  400942:	801a      	strh	r2, [r3, #0]
		//MM
		recvTime[1] = buff[1];
  400944:	683b      	ldr	r3, [r7, #0]
  400946:	3302      	adds	r3, #2
  400948:	7f7a      	ldrb	r2, [r7, #29]
  40094a:	b292      	uxth	r2, r2
  40094c:	801a      	strh	r2, [r3, #0]
		//HH
		recvTime[2] = buff[2];
  40094e:	683b      	ldr	r3, [r7, #0]
  400950:	3304      	adds	r3, #4
  400952:	7fba      	ldrb	r2, [r7, #30]
  400954:	b292      	uxth	r2, r2
  400956:	801a      	strh	r2, [r3, #0]
	}
  400958:	bf00      	nop
  40095a:	3720      	adds	r7, #32
  40095c:	46bd      	mov	sp, r7
  40095e:	bd80      	pop	{r7, pc}
  400960:	00403969 	.word	0x00403969

00400964 <DSSetSecs>:
	{
		DSReadByte(port, DS_REG_SEC, (uint8_t *)ss);
	}

	void DSSetSecs(Twi *port, uint8_t ss)
	{
  400964:	b580      	push	{r7, lr}
  400966:	b082      	sub	sp, #8
  400968:	af00      	add	r7, sp, #0
  40096a:	6078      	str	r0, [r7, #4]
  40096c:	460b      	mov	r3, r1
  40096e:	70fb      	strb	r3, [r7, #3]
		DSWriteByte(port, DS_REG_SEC, ss);
  400970:	78fb      	ldrb	r3, [r7, #3]
  400972:	461a      	mov	r2, r3
  400974:	2100      	movs	r1, #0
  400976:	6878      	ldr	r0, [r7, #4]
  400978:	4b02      	ldr	r3, [pc, #8]	; (400984 <DSSetSecs+0x20>)
  40097a:	4798      	blx	r3
	}
  40097c:	bf00      	nop
  40097e:	3708      	adds	r7, #8
  400980:	46bd      	mov	sp, r7
  400982:	bd80      	pop	{r7, pc}
  400984:	00400b31 	.word	0x00400b31

00400988 <DSSetMins>:
	{
		DSReadByte(port, DS_REG_MIN, (uint8_t *)mm);
	}

	void DSSetMins(Twi *port, uint8_t mm)
	{
  400988:	b580      	push	{r7, lr}
  40098a:	b082      	sub	sp, #8
  40098c:	af00      	add	r7, sp, #0
  40098e:	6078      	str	r0, [r7, #4]
  400990:	460b      	mov	r3, r1
  400992:	70fb      	strb	r3, [r7, #3]
		DSWriteByte(port, DS_REG_MIN, mm);
  400994:	78fb      	ldrb	r3, [r7, #3]
  400996:	461a      	mov	r2, r3
  400998:	2101      	movs	r1, #1
  40099a:	6878      	ldr	r0, [r7, #4]
  40099c:	4b02      	ldr	r3, [pc, #8]	; (4009a8 <DSSetMins+0x20>)
  40099e:	4798      	blx	r3
	}
  4009a0:	bf00      	nop
  4009a2:	3708      	adds	r7, #8
  4009a4:	46bd      	mov	sp, r7
  4009a6:	bd80      	pop	{r7, pc}
  4009a8:	00400b31 	.word	0x00400b31

004009ac <DSSetHrs>:
	{
		DSReadByte(port, DS_REG_HRS, (uint8_t *)hh);
	}

	void DSSetHrs(Twi *port, uint8_t hh)
	{
  4009ac:	b580      	push	{r7, lr}
  4009ae:	b082      	sub	sp, #8
  4009b0:	af00      	add	r7, sp, #0
  4009b2:	6078      	str	r0, [r7, #4]
  4009b4:	460b      	mov	r3, r1
  4009b6:	70fb      	strb	r3, [r7, #3]
		DSWriteByte(port, DS_REG_HRS, hh);
  4009b8:	78fb      	ldrb	r3, [r7, #3]
  4009ba:	461a      	mov	r2, r3
  4009bc:	2102      	movs	r1, #2
  4009be:	6878      	ldr	r0, [r7, #4]
  4009c0:	4b02      	ldr	r3, [pc, #8]	; (4009cc <DSSetHrs+0x20>)
  4009c2:	4798      	blx	r3
	}
  4009c4:	bf00      	nop
  4009c6:	3708      	adds	r7, #8
  4009c8:	46bd      	mov	sp, r7
  4009ca:	bd80      	pop	{r7, pc}
  4009cc:	00400b31 	.word	0x00400b31

004009d0 <DSGetFullDate>:

	void DSGetFullDate(Twi *port, uint16_t *recvDate)
	{
  4009d0:	b580      	push	{r7, lr}
  4009d2:	b088      	sub	sp, #32
  4009d4:	af00      	add	r7, sp, #0
  4009d6:	6078      	str	r0, [r7, #4]
  4009d8:	6039      	str	r1, [r7, #0]
		uint8_t buff[4];
		twi_packet_t pkt;
    
		pkt.chip = DS_ADDR;
  4009da:	2368      	movs	r3, #104	; 0x68
  4009dc:	763b      	strb	r3, [r7, #24]
		pkt.addr[0] = DS_REG_DAY;
  4009de:	2303      	movs	r3, #3
  4009e0:	723b      	strb	r3, [r7, #8]
		pkt.addr_length = 1;
  4009e2:	2301      	movs	r3, #1
  4009e4:	60fb      	str	r3, [r7, #12]
		pkt.buffer = buff;
  4009e6:	f107 031c 	add.w	r3, r7, #28
  4009ea:	613b      	str	r3, [r7, #16]
		pkt.length = 4;
  4009ec:	2304      	movs	r3, #4
  4009ee:	617b      	str	r3, [r7, #20]
		twi_master_read(port, &pkt);
  4009f0:	f107 0308 	add.w	r3, r7, #8
  4009f4:	4619      	mov	r1, r3
  4009f6:	6878      	ldr	r0, [r7, #4]
  4009f8:	4b0c      	ldr	r3, [pc, #48]	; (400a2c <DSGetFullDate+0x5c>)
  4009fa:	4798      	blx	r3
		//DAY
		recvDate[0] = buff[0];
  4009fc:	7f3b      	ldrb	r3, [r7, #28]
  4009fe:	b29a      	uxth	r2, r3
  400a00:	683b      	ldr	r3, [r7, #0]
  400a02:	801a      	strh	r2, [r3, #0]
		//DD
		recvDate[1] = buff[1];
  400a04:	683b      	ldr	r3, [r7, #0]
  400a06:	3302      	adds	r3, #2
  400a08:	7f7a      	ldrb	r2, [r7, #29]
  400a0a:	b292      	uxth	r2, r2
  400a0c:	801a      	strh	r2, [r3, #0]
		//MM
		recvDate[2] = buff[2];
  400a0e:	683b      	ldr	r3, [r7, #0]
  400a10:	3304      	adds	r3, #4
  400a12:	7fba      	ldrb	r2, [r7, #30]
  400a14:	b292      	uxth	r2, r2
  400a16:	801a      	strh	r2, [r3, #0]
		//YY
		recvDate[3] = buff[3];
  400a18:	683b      	ldr	r3, [r7, #0]
  400a1a:	3306      	adds	r3, #6
  400a1c:	7ffa      	ldrb	r2, [r7, #31]
  400a1e:	b292      	uxth	r2, r2
  400a20:	801a      	strh	r2, [r3, #0]
	}
  400a22:	bf00      	nop
  400a24:	3720      	adds	r7, #32
  400a26:	46bd      	mov	sp, r7
  400a28:	bd80      	pop	{r7, pc}
  400a2a:	bf00      	nop
  400a2c:	00403969 	.word	0x00403969

00400a30 <DSSetDay>:
	{
		DSReadByte(port, DS_REG_DAY, (uint8_t *)d);
	}

	void DSSetDay(Twi *port, uint8_t d)
	{
  400a30:	b580      	push	{r7, lr}
  400a32:	b082      	sub	sp, #8
  400a34:	af00      	add	r7, sp, #0
  400a36:	6078      	str	r0, [r7, #4]
  400a38:	460b      	mov	r3, r1
  400a3a:	70fb      	strb	r3, [r7, #3]
		DSWriteByte(port, DS_REG_DAY, d);
  400a3c:	78fb      	ldrb	r3, [r7, #3]
  400a3e:	461a      	mov	r2, r3
  400a40:	2103      	movs	r1, #3
  400a42:	6878      	ldr	r0, [r7, #4]
  400a44:	4b02      	ldr	r3, [pc, #8]	; (400a50 <DSSetDay+0x20>)
  400a46:	4798      	blx	r3
	}
  400a48:	bf00      	nop
  400a4a:	3708      	adds	r7, #8
  400a4c:	46bd      	mov	sp, r7
  400a4e:	bd80      	pop	{r7, pc}
  400a50:	00400b31 	.word	0x00400b31

00400a54 <DSSetDate>:
	{
		DSReadByte(port, DS_REG_DAT, (uint8_t *)dd);
	}

	void DSSetDate(Twi *port, uint8_t dd)
	{
  400a54:	b580      	push	{r7, lr}
  400a56:	b082      	sub	sp, #8
  400a58:	af00      	add	r7, sp, #0
  400a5a:	6078      	str	r0, [r7, #4]
  400a5c:	460b      	mov	r3, r1
  400a5e:	70fb      	strb	r3, [r7, #3]
		DSWriteByte(port, DS_REG_DAT, dd);
  400a60:	78fb      	ldrb	r3, [r7, #3]
  400a62:	461a      	mov	r2, r3
  400a64:	2104      	movs	r1, #4
  400a66:	6878      	ldr	r0, [r7, #4]
  400a68:	4b02      	ldr	r3, [pc, #8]	; (400a74 <DSSetDate+0x20>)
  400a6a:	4798      	blx	r3
	}
  400a6c:	bf00      	nop
  400a6e:	3708      	adds	r7, #8
  400a70:	46bd      	mov	sp, r7
  400a72:	bd80      	pop	{r7, pc}
  400a74:	00400b31 	.word	0x00400b31

00400a78 <DSSetMonth>:
	{
		DSReadByte(port, DS_REG_MON, (uint8_t *)mm);
	}

	void DSSetMonth(Twi *port, uint8_t mm)
	{
  400a78:	b580      	push	{r7, lr}
  400a7a:	b082      	sub	sp, #8
  400a7c:	af00      	add	r7, sp, #0
  400a7e:	6078      	str	r0, [r7, #4]
  400a80:	460b      	mov	r3, r1
  400a82:	70fb      	strb	r3, [r7, #3]
		DSWriteByte(port, DS_REG_MON, mm);
  400a84:	78fb      	ldrb	r3, [r7, #3]
  400a86:	461a      	mov	r2, r3
  400a88:	2105      	movs	r1, #5
  400a8a:	6878      	ldr	r0, [r7, #4]
  400a8c:	4b02      	ldr	r3, [pc, #8]	; (400a98 <DSSetMonth+0x20>)
  400a8e:	4798      	blx	r3
	}
  400a90:	bf00      	nop
  400a92:	3708      	adds	r7, #8
  400a94:	46bd      	mov	sp, r7
  400a96:	bd80      	pop	{r7, pc}
  400a98:	00400b31 	.word	0x00400b31

00400a9c <DSSetYear>:
	{
		DSReadByte(port, DS_REG_YRS, (uint8_t *)yy);
	}

	void DSSetYear(Twi *port, uint8_t yy)
	{
  400a9c:	b580      	push	{r7, lr}
  400a9e:	b082      	sub	sp, #8
  400aa0:	af00      	add	r7, sp, #0
  400aa2:	6078      	str	r0, [r7, #4]
  400aa4:	460b      	mov	r3, r1
  400aa6:	70fb      	strb	r3, [r7, #3]
		DSWriteByte(port, DS_REG_YRS, yy);
  400aa8:	78fb      	ldrb	r3, [r7, #3]
  400aaa:	461a      	mov	r2, r3
  400aac:	2106      	movs	r1, #6
  400aae:	6878      	ldr	r0, [r7, #4]
  400ab0:	4b02      	ldr	r3, [pc, #8]	; (400abc <DSSetYear+0x20>)
  400ab2:	4798      	blx	r3
	}
  400ab4:	bf00      	nop
  400ab6:	3708      	adds	r7, #8
  400ab8:	46bd      	mov	sp, r7
  400aba:	bd80      	pop	{r7, pc}
  400abc:	00400b31 	.word	0x00400b31

00400ac0 <DSEnAL2>:
			DSWriteByte(port, DS_REG_CTRL, 0x04);
		}
	}

	void DSEnAL2(Twi *port, uint8_t en)
	{
  400ac0:	b580      	push	{r7, lr}
  400ac2:	b088      	sub	sp, #32
  400ac4:	af00      	add	r7, sp, #0
  400ac6:	6078      	str	r0, [r7, #4]
  400ac8:	460b      	mov	r3, r1
  400aca:	70fb      	strb	r3, [r7, #3]
		uint8_t buff[3];
		twi_packet_t pkt;

		if(en)
  400acc:	78fb      	ldrb	r3, [r7, #3]
  400ace:	2b00      	cmp	r3, #0
  400ad0:	d021      	beq.n	400b16 <DSEnAL2+0x56>
		{
			pkt.chip = DS_ADDR;
  400ad2:	2368      	movs	r3, #104	; 0x68
  400ad4:	763b      	strb	r3, [r7, #24]
			pkt.addr[0] = DS_REG_AL2M;
  400ad6:	230b      	movs	r3, #11
  400ad8:	723b      	strb	r3, [r7, #8]
			pkt.addr_length = 1;
  400ada:	2301      	movs	r3, #1
  400adc:	60fb      	str	r3, [r7, #12]
			pkt.buffer = buff;
  400ade:	f107 031c 	add.w	r3, r7, #28
  400ae2:	613b      	str	r3, [r7, #16]
			pkt.length = 3;
  400ae4:	2303      	movs	r3, #3
  400ae6:	617b      	str	r3, [r7, #20]

			buff[0] = 0x80;
  400ae8:	2380      	movs	r3, #128	; 0x80
  400aea:	773b      	strb	r3, [r7, #28]
			buff[1] = 0x80;
  400aec:	2380      	movs	r3, #128	; 0x80
  400aee:	777b      	strb	r3, [r7, #29]
			buff[2] = 0x80;
  400af0:	2380      	movs	r3, #128	; 0x80
  400af2:	77bb      	strb	r3, [r7, #30]

			//Set Alarm 2 for 1 min interrupt
			twi_master_write(port, &pkt);
  400af4:	f107 0308 	add.w	r3, r7, #8
  400af8:	4619      	mov	r1, r3
  400afa:	6878      	ldr	r0, [r7, #4]
  400afc:	4b0a      	ldr	r3, [pc, #40]	; (400b28 <DSEnAL2+0x68>)
  400afe:	4798      	blx	r3
			//Write Enable Alarm Register
			DSWriteByte(port, DS_REG_CTRL, 0x06);
  400b00:	2206      	movs	r2, #6
  400b02:	210e      	movs	r1, #14
  400b04:	6878      	ldr	r0, [r7, #4]
  400b06:	4b09      	ldr	r3, [pc, #36]	; (400b2c <DSEnAL2+0x6c>)
  400b08:	4798      	blx	r3
			//Clear Status Reg
			DSWriteByte(port, DS_REG_STAT, 0x80);
  400b0a:	2280      	movs	r2, #128	; 0x80
  400b0c:	210f      	movs	r1, #15
  400b0e:	6878      	ldr	r0, [r7, #4]
  400b10:	4b06      	ldr	r3, [pc, #24]	; (400b2c <DSEnAL2+0x6c>)
  400b12:	4798      	blx	r3
		else
		{
			//Write Disable Alarm Register
			DSWriteByte(port, DS_REG_CTRL, 0x04);
		}
	}
  400b14:	e004      	b.n	400b20 <DSEnAL2+0x60>
			DSWriteByte(port, DS_REG_STAT, 0x80);
		}
		else
		{
			//Write Disable Alarm Register
			DSWriteByte(port, DS_REG_CTRL, 0x04);
  400b16:	2204      	movs	r2, #4
  400b18:	210e      	movs	r1, #14
  400b1a:	6878      	ldr	r0, [r7, #4]
  400b1c:	4b03      	ldr	r3, [pc, #12]	; (400b2c <DSEnAL2+0x6c>)
  400b1e:	4798      	blx	r3
		}
	}
  400b20:	bf00      	nop
  400b22:	3720      	adds	r7, #32
  400b24:	46bd      	mov	sp, r7
  400b26:	bd80      	pop	{r7, pc}
  400b28:	00403a75 	.word	0x00403a75
  400b2c:	00400b31 	.word	0x00400b31

00400b30 <DSWriteByte>:
		twi_master_read(port, &pkt);
		*temp = (((uint16_t)buff[0])<<8) | buff[1];
	}

	void DSWriteByte(Twi *port, uint8_t reg, uint8_t data)
	{
  400b30:	b580      	push	{r7, lr}
  400b32:	b088      	sub	sp, #32
  400b34:	af00      	add	r7, sp, #0
  400b36:	6078      	str	r0, [r7, #4]
  400b38:	460b      	mov	r3, r1
  400b3a:	70fb      	strb	r3, [r7, #3]
  400b3c:	4613      	mov	r3, r2
  400b3e:	70bb      	strb	r3, [r7, #2]
		twi_packet_t pkt;
    
		pkt.chip = DS_ADDR;
  400b40:	2368      	movs	r3, #104	; 0x68
  400b42:	773b      	strb	r3, [r7, #28]
		pkt.addr[0] = reg;
  400b44:	78fb      	ldrb	r3, [r7, #3]
  400b46:	733b      	strb	r3, [r7, #12]
		pkt.addr_length = 1;
  400b48:	2301      	movs	r3, #1
  400b4a:	613b      	str	r3, [r7, #16]
		pkt.buffer = &data;
  400b4c:	1cbb      	adds	r3, r7, #2
  400b4e:	617b      	str	r3, [r7, #20]
		pkt.length = 1;
  400b50:	2301      	movs	r3, #1
  400b52:	61bb      	str	r3, [r7, #24]
	
		twi_master_write(port, &pkt);
  400b54:	f107 030c 	add.w	r3, r7, #12
  400b58:	4619      	mov	r1, r3
  400b5a:	6878      	ldr	r0, [r7, #4]
  400b5c:	4b02      	ldr	r3, [pc, #8]	; (400b68 <DSWriteByte+0x38>)
  400b5e:	4798      	blx	r3
	}
  400b60:	bf00      	nop
  400b62:	3720      	adds	r7, #32
  400b64:	46bd      	mov	sp, r7
  400b66:	bd80      	pop	{r7, pc}
  400b68:	00403a75 	.word	0x00403a75

00400b6c <DSReadByte>:

	void DSReadByte(Twi *port, uint8_t reg, uint8_t *recvData)
	{
  400b6c:	b580      	push	{r7, lr}
  400b6e:	b08a      	sub	sp, #40	; 0x28
  400b70:	af00      	add	r7, sp, #0
  400b72:	60f8      	str	r0, [r7, #12]
  400b74:	460b      	mov	r3, r1
  400b76:	607a      	str	r2, [r7, #4]
  400b78:	72fb      	strb	r3, [r7, #11]
		twi_packet_t pkt;
    
		pkt.chip = DS_ADDR;
  400b7a:	2368      	movs	r3, #104	; 0x68
  400b7c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		pkt.addr[0] = reg;
  400b80:	7afb      	ldrb	r3, [r7, #11]
  400b82:	753b      	strb	r3, [r7, #20]
		pkt.addr_length = 1;
  400b84:	2301      	movs	r3, #1
  400b86:	61bb      	str	r3, [r7, #24]
		pkt.buffer = recvData;
  400b88:	687b      	ldr	r3, [r7, #4]
  400b8a:	61fb      	str	r3, [r7, #28]
		pkt.length = 1;
  400b8c:	2301      	movs	r3, #1
  400b8e:	623b      	str	r3, [r7, #32]
    
		twi_master_read(port, &pkt);
  400b90:	f107 0314 	add.w	r3, r7, #20
  400b94:	4619      	mov	r1, r3
  400b96:	68f8      	ldr	r0, [r7, #12]
  400b98:	4b02      	ldr	r3, [pc, #8]	; (400ba4 <DSReadByte+0x38>)
  400b9a:	4798      	blx	r3
	}
  400b9c:	bf00      	nop
  400b9e:	3728      	adds	r7, #40	; 0x28
  400ba0:	46bd      	mov	sp, r7
  400ba2:	bd80      	pop	{r7, pc}
  400ba4:	00403969 	.word	0x00403969

00400ba8 <ICMInitialize>:

#include "ICM20648.h"

#ifndef ICM20648_USE_RTOS_API
	void ICMInitialize(Twi *port, uint8_t sla)
	{
  400ba8:	b590      	push	{r4, r7, lr}
  400baa:	b083      	sub	sp, #12
  400bac:	af00      	add	r7, sp, #0
  400bae:	6078      	str	r0, [r7, #4]
  400bb0:	460b      	mov	r3, r1
  400bb2:	70fb      	strb	r3, [r7, #3]
		//Select USER Bank 0
		ICMWriteByte(port, sla,ICM_REG_BANK_SEL,0x00);
  400bb4:	78f9      	ldrb	r1, [r7, #3]
  400bb6:	2300      	movs	r3, #0
  400bb8:	227f      	movs	r2, #127	; 0x7f
  400bba:	6878      	ldr	r0, [r7, #4]
  400bbc:	4c11      	ldr	r4, [pc, #68]	; (400c04 <ICMInitialize+0x5c>)
  400bbe:	47a0      	blx	r4
    
		//Auto Select Best Clock Source
		ICMWriteByte(port, sla,ICM_REG_PWR_MGMT1,0x01);
  400bc0:	78f9      	ldrb	r1, [r7, #3]
  400bc2:	2301      	movs	r3, #1
  400bc4:	2206      	movs	r2, #6
  400bc6:	6878      	ldr	r0, [r7, #4]
  400bc8:	4c0e      	ldr	r4, [pc, #56]	; (400c04 <ICMInitialize+0x5c>)
  400bca:	47a0      	blx	r4
    
		//Select USER Bank 2
		ICMWriteByte(port, sla,ICM_REG_BANK_SEL,0x20);
  400bcc:	78f9      	ldrb	r1, [r7, #3]
  400bce:	2320      	movs	r3, #32
  400bd0:	227f      	movs	r2, #127	; 0x7f
  400bd2:	6878      	ldr	r0, [r7, #4]
  400bd4:	4c0b      	ldr	r4, [pc, #44]	; (400c04 <ICMInitialize+0x5c>)
  400bd6:	47a0      	blx	r4
    
		//Accel Full Scale set to 2G
		//ICMWriteByte(sla,ICM_REG_ACC_CONFIG,0x00);
		//Full Scale = 2G, Enable DLP, Cutoff = 23Hz
		ICMWriteByte(port, sla,ICM_REG_ACC_CONFIG,0x31);
  400bd8:	78f9      	ldrb	r1, [r7, #3]
  400bda:	2331      	movs	r3, #49	; 0x31
  400bdc:	2214      	movs	r2, #20
  400bde:	6878      	ldr	r0, [r7, #4]
  400be0:	4c08      	ldr	r4, [pc, #32]	; (400c04 <ICMInitialize+0x5c>)
  400be2:	47a0      	blx	r4
    
		//Output Data Rate Set to 17.xx Hz
		ICMWriteByte(port, sla,ICM_REG_ACC_SMPLRT_DIV1,0x00);
  400be4:	78f9      	ldrb	r1, [r7, #3]
  400be6:	2300      	movs	r3, #0
  400be8:	2210      	movs	r2, #16
  400bea:	6878      	ldr	r0, [r7, #4]
  400bec:	4c05      	ldr	r4, [pc, #20]	; (400c04 <ICMInitialize+0x5c>)
  400bee:	47a0      	blx	r4
		ICMWriteByte(port, sla,ICM_REG_ACC_SMPLRT_DIV2,0x3F);
  400bf0:	78f9      	ldrb	r1, [r7, #3]
  400bf2:	233f      	movs	r3, #63	; 0x3f
  400bf4:	2211      	movs	r2, #17
  400bf6:	6878      	ldr	r0, [r7, #4]
  400bf8:	4c02      	ldr	r4, [pc, #8]	; (400c04 <ICMInitialize+0x5c>)
  400bfa:	47a0      	blx	r4
    
	}
  400bfc:	bf00      	nop
  400bfe:	370c      	adds	r7, #12
  400c00:	46bd      	mov	sp, r7
  400c02:	bd90      	pop	{r4, r7, pc}
  400c04:	00400c85 	.word	0x00400c85

00400c08 <ICMReadAccDataAll>:
		ICMReadByte(port, sla, ICM_REG_ACC_ZOUTH, &((uint8_t *)recvData)[1]);
		ICMReadByte(port, sla, ICM_REG_ACC_ZOUTL, &((uint8_t *)recvData)[0]);
	}

	void ICMReadAccDataAll(Twi *port, uint8_t sla, uint16_t *recvData)
	{
  400c08:	b590      	push	{r4, r7, lr}
  400c0a:	b085      	sub	sp, #20
  400c0c:	af00      	add	r7, sp, #0
  400c0e:	60f8      	str	r0, [r7, #12]
  400c10:	460b      	mov	r3, r1
  400c12:	607a      	str	r2, [r7, #4]
  400c14:	72fb      	strb	r3, [r7, #11]
		//Select USER Bank 0
		ICMWriteByte(port, sla,ICM_REG_BANK_SEL,0x00);
  400c16:	7af9      	ldrb	r1, [r7, #11]
  400c18:	2300      	movs	r3, #0
  400c1a:	227f      	movs	r2, #127	; 0x7f
  400c1c:	68f8      	ldr	r0, [r7, #12]
  400c1e:	4c17      	ldr	r4, [pc, #92]	; (400c7c <ICMReadAccDataAll+0x74>)
  400c20:	47a0      	blx	r4
    
		//Read ACC data
		ICMReadByte(port, sla, ICM_REG_ACC_XOUTH, &((uint8_t *)recvData)[1]);
  400c22:	687b      	ldr	r3, [r7, #4]
  400c24:	3301      	adds	r3, #1
  400c26:	7af9      	ldrb	r1, [r7, #11]
  400c28:	222d      	movs	r2, #45	; 0x2d
  400c2a:	68f8      	ldr	r0, [r7, #12]
  400c2c:	4c14      	ldr	r4, [pc, #80]	; (400c80 <ICMReadAccDataAll+0x78>)
  400c2e:	47a0      	blx	r4
		ICMReadByte(port, sla, ICM_REG_ACC_XOUTL, &((uint8_t *)recvData)[0]);
  400c30:	7af9      	ldrb	r1, [r7, #11]
  400c32:	687b      	ldr	r3, [r7, #4]
  400c34:	222e      	movs	r2, #46	; 0x2e
  400c36:	68f8      	ldr	r0, [r7, #12]
  400c38:	4c11      	ldr	r4, [pc, #68]	; (400c80 <ICMReadAccDataAll+0x78>)
  400c3a:	47a0      	blx	r4
		ICMReadByte(port, sla, ICM_REG_ACC_YOUTH, &((uint8_t *)recvData)[3]);
  400c3c:	687b      	ldr	r3, [r7, #4]
  400c3e:	3303      	adds	r3, #3
  400c40:	7af9      	ldrb	r1, [r7, #11]
  400c42:	222f      	movs	r2, #47	; 0x2f
  400c44:	68f8      	ldr	r0, [r7, #12]
  400c46:	4c0e      	ldr	r4, [pc, #56]	; (400c80 <ICMReadAccDataAll+0x78>)
  400c48:	47a0      	blx	r4
		ICMReadByte(port, sla, ICM_REG_ACC_YOUTL, &((uint8_t *)recvData)[2]);
  400c4a:	687b      	ldr	r3, [r7, #4]
  400c4c:	3302      	adds	r3, #2
  400c4e:	7af9      	ldrb	r1, [r7, #11]
  400c50:	2230      	movs	r2, #48	; 0x30
  400c52:	68f8      	ldr	r0, [r7, #12]
  400c54:	4c0a      	ldr	r4, [pc, #40]	; (400c80 <ICMReadAccDataAll+0x78>)
  400c56:	47a0      	blx	r4
		ICMReadByte(port, sla, ICM_REG_ACC_ZOUTH, &((uint8_t *)recvData)[5]);
  400c58:	687b      	ldr	r3, [r7, #4]
  400c5a:	3305      	adds	r3, #5
  400c5c:	7af9      	ldrb	r1, [r7, #11]
  400c5e:	2231      	movs	r2, #49	; 0x31
  400c60:	68f8      	ldr	r0, [r7, #12]
  400c62:	4c07      	ldr	r4, [pc, #28]	; (400c80 <ICMReadAccDataAll+0x78>)
  400c64:	47a0      	blx	r4
		ICMReadByte(port, sla, ICM_REG_ACC_ZOUTL, &((uint8_t *)recvData)[4]);
  400c66:	687b      	ldr	r3, [r7, #4]
  400c68:	3304      	adds	r3, #4
  400c6a:	7af9      	ldrb	r1, [r7, #11]
  400c6c:	2232      	movs	r2, #50	; 0x32
  400c6e:	68f8      	ldr	r0, [r7, #12]
  400c70:	4c03      	ldr	r4, [pc, #12]	; (400c80 <ICMReadAccDataAll+0x78>)
  400c72:	47a0      	blx	r4
	}
  400c74:	bf00      	nop
  400c76:	3714      	adds	r7, #20
  400c78:	46bd      	mov	sp, r7
  400c7a:	bd90      	pop	{r4, r7, pc}
  400c7c:	00400c85 	.word	0x00400c85
  400c80:	00400ccd 	.word	0x00400ccd

00400c84 <ICMWriteByte>:

	void ICMWriteByte(Twi *port, uint8_t sla, uint8_t reg, uint8_t data)
	{
  400c84:	b580      	push	{r7, lr}
  400c86:	b088      	sub	sp, #32
  400c88:	af00      	add	r7, sp, #0
  400c8a:	6078      	str	r0, [r7, #4]
  400c8c:	4608      	mov	r0, r1
  400c8e:	4611      	mov	r1, r2
  400c90:	461a      	mov	r2, r3
  400c92:	4603      	mov	r3, r0
  400c94:	70fb      	strb	r3, [r7, #3]
  400c96:	460b      	mov	r3, r1
  400c98:	70bb      	strb	r3, [r7, #2]
  400c9a:	4613      	mov	r3, r2
  400c9c:	707b      	strb	r3, [r7, #1]
		twi_packet_t pkt;
    
		pkt.chip = sla;
  400c9e:	78fb      	ldrb	r3, [r7, #3]
  400ca0:	773b      	strb	r3, [r7, #28]
		pkt.addr[0] = reg;
  400ca2:	78bb      	ldrb	r3, [r7, #2]
  400ca4:	733b      	strb	r3, [r7, #12]
		pkt.addr_length = 1;
  400ca6:	2301      	movs	r3, #1
  400ca8:	613b      	str	r3, [r7, #16]
		pkt.buffer = &data;
  400caa:	1c7b      	adds	r3, r7, #1
  400cac:	617b      	str	r3, [r7, #20]
		pkt.length = 1;
  400cae:	2301      	movs	r3, #1
  400cb0:	61bb      	str	r3, [r7, #24]
    
		twi_master_write(port, &pkt);
  400cb2:	f107 030c 	add.w	r3, r7, #12
  400cb6:	4619      	mov	r1, r3
  400cb8:	6878      	ldr	r0, [r7, #4]
  400cba:	4b03      	ldr	r3, [pc, #12]	; (400cc8 <ICMWriteByte+0x44>)
  400cbc:	4798      	blx	r3
	}
  400cbe:	bf00      	nop
  400cc0:	3720      	adds	r7, #32
  400cc2:	46bd      	mov	sp, r7
  400cc4:	bd80      	pop	{r7, pc}
  400cc6:	bf00      	nop
  400cc8:	00403a75 	.word	0x00403a75

00400ccc <ICMReadByte>:

	void ICMReadByte(Twi *port, uint8_t sla, uint8_t reg, uint8_t *recvData)
	{
  400ccc:	b580      	push	{r7, lr}
  400cce:	b08a      	sub	sp, #40	; 0x28
  400cd0:	af00      	add	r7, sp, #0
  400cd2:	60f8      	str	r0, [r7, #12]
  400cd4:	607b      	str	r3, [r7, #4]
  400cd6:	460b      	mov	r3, r1
  400cd8:	72fb      	strb	r3, [r7, #11]
  400cda:	4613      	mov	r3, r2
  400cdc:	72bb      	strb	r3, [r7, #10]
		twi_packet_t pkt;
    
		pkt.chip = sla;
  400cde:	7afb      	ldrb	r3, [r7, #11]
  400ce0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		pkt.addr[0] = reg;
  400ce4:	7abb      	ldrb	r3, [r7, #10]
  400ce6:	753b      	strb	r3, [r7, #20]
		pkt.addr_length = 1;
  400ce8:	2301      	movs	r3, #1
  400cea:	61bb      	str	r3, [r7, #24]
		pkt.buffer = recvData;
  400cec:	687b      	ldr	r3, [r7, #4]
  400cee:	61fb      	str	r3, [r7, #28]
		pkt.length = 1;
  400cf0:	2301      	movs	r3, #1
  400cf2:	623b      	str	r3, [r7, #32]
    
		twi_master_read(port, &pkt);
  400cf4:	f107 0314 	add.w	r3, r7, #20
  400cf8:	4619      	mov	r1, r3
  400cfa:	68f8      	ldr	r0, [r7, #12]
  400cfc:	4b02      	ldr	r3, [pc, #8]	; (400d08 <ICMReadByte+0x3c>)
  400cfe:	4798      	blx	r3
	}
  400d00:	bf00      	nop
  400d02:	3728      	adds	r7, #40	; 0x28
  400d04:	46bd      	mov	sp, r7
  400d06:	bd80      	pop	{r7, pc}
  400d08:	00403969 	.word	0x00403969

00400d0c <ParseMbusPkt>:
//Write function pointer
void (*writeFunc)(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len);

/* Modbus stack parser function */
void ParseMbusPkt(uint8_t slaveAddr, uint8_t *buff, uint8_t len, uint8_t *respBuff, uint8_t *respLen)
{
  400d0c:	b580      	push	{r7, lr}
  400d0e:	b08a      	sub	sp, #40	; 0x28
  400d10:	af00      	add	r7, sp, #0
  400d12:	60b9      	str	r1, [r7, #8]
  400d14:	607b      	str	r3, [r7, #4]
  400d16:	4603      	mov	r3, r0
  400d18:	73fb      	strb	r3, [r7, #15]
  400d1a:	4613      	mov	r3, r2
  400d1c:	73bb      	strb	r3, [r7, #14]
	 uint16_t crc = 0, recvCrc = 0;
  400d1e:	2300      	movs	r3, #0
  400d20:	83fb      	strh	r3, [r7, #30]
  400d22:	2300      	movs	r3, #0
  400d24:	83bb      	strh	r3, [r7, #28]
	 uint16_t regAddr = 0, numReg = 0;
  400d26:	2300      	movs	r3, #0
  400d28:	837b      	strh	r3, [r7, #26]
  400d2a:	2300      	movs	r3, #0
  400d2c:	833b      	strh	r3, [r7, #24]
	 uint16_t regVal = 0;
  400d2e:	2300      	movs	r3, #0
  400d30:	84fb      	strh	r3, [r7, #38]	; 0x26
	 uint8_t fCode = 0, genErrRsp = 0;
  400d32:	2300      	movs	r3, #0
  400d34:	75fb      	strb	r3, [r7, #23]
  400d36:	2300      	movs	r3, #0
  400d38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	 uint8_t expFuncCode = 0, expCode = 0;
  400d3c:	2300      	movs	r3, #0
  400d3e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  400d42:	2300      	movs	r3, #0
  400d44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	 uint8_t i = 0, ind = 0;
  400d48:	2300      	movs	r3, #0
  400d4a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  400d4e:	2300      	movs	r3, #0
  400d50:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	 
	 /* Self Addr recvd or Broadcast Addr = 0 recvd */
	 if(buff[0]==slaveAddr||buff[0]==0)
  400d54:	68bb      	ldr	r3, [r7, #8]
  400d56:	781b      	ldrb	r3, [r3, #0]
  400d58:	7bfa      	ldrb	r2, [r7, #15]
  400d5a:	429a      	cmp	r2, r3
  400d5c:	d004      	beq.n	400d68 <ParseMbusPkt+0x5c>
  400d5e:	68bb      	ldr	r3, [r7, #8]
  400d60:	781b      	ldrb	r3, [r3, #0]
  400d62:	2b00      	cmp	r3, #0
  400d64:	f040 81fb 	bne.w	40115e <ParseMbusPkt+0x452>
	 {
		 /* Calc CRC */
		 recvCrc = (((uint16_t)buff[len-1])<<8)|buff[len-2];
  400d68:	7bbb      	ldrb	r3, [r7, #14]
  400d6a:	3b01      	subs	r3, #1
  400d6c:	68ba      	ldr	r2, [r7, #8]
  400d6e:	4413      	add	r3, r2
  400d70:	781b      	ldrb	r3, [r3, #0]
  400d72:	021b      	lsls	r3, r3, #8
  400d74:	b21a      	sxth	r2, r3
  400d76:	7bbb      	ldrb	r3, [r7, #14]
  400d78:	3b02      	subs	r3, #2
  400d7a:	68b9      	ldr	r1, [r7, #8]
  400d7c:	440b      	add	r3, r1
  400d7e:	781b      	ldrb	r3, [r3, #0]
  400d80:	b21b      	sxth	r3, r3
  400d82:	4313      	orrs	r3, r2
  400d84:	b21b      	sxth	r3, r3
  400d86:	83bb      	strh	r3, [r7, #28]
		 crc = calcCRC(buff,len-2);
  400d88:	7bbb      	ldrb	r3, [r7, #14]
  400d8a:	3b02      	subs	r3, #2
  400d8c:	b2db      	uxtb	r3, r3
  400d8e:	4619      	mov	r1, r3
  400d90:	68b8      	ldr	r0, [r7, #8]
  400d92:	4b90      	ldr	r3, [pc, #576]	; (400fd4 <ParseMbusPkt+0x2c8>)
  400d94:	4798      	blx	r3
  400d96:	4603      	mov	r3, r0
  400d98:	83fb      	strh	r3, [r7, #30]
		 /* If CRC Matched */
		 if(crc==recvCrc)
  400d9a:	8bfa      	ldrh	r2, [r7, #30]
  400d9c:	8bbb      	ldrh	r3, [r7, #28]
  400d9e:	429a      	cmp	r2, r3
  400da0:	f040 81e0 	bne.w	401164 <ParseMbusPkt+0x458>
		 {
			 /* Function Code Extraction */
			 fCode = buff[1];
  400da4:	68bb      	ldr	r3, [r7, #8]
  400da6:	785b      	ldrb	r3, [r3, #1]
  400da8:	75fb      	strb	r3, [r7, #23]
			 switch(fCode)
  400daa:	7dfb      	ldrb	r3, [r7, #23]
  400dac:	2b06      	cmp	r3, #6
  400dae:	f000 80a9 	beq.w	400f04 <ParseMbusPkt+0x1f8>
  400db2:	2b10      	cmp	r3, #16
  400db4:	f000 8114 	beq.w	400fe0 <ParseMbusPkt+0x2d4>
  400db8:	2b03      	cmp	r3, #3
  400dba:	f040 81c2 	bne.w	401142 <ParseMbusPkt+0x436>
			 {
				 /* Read Analog Reg Func Code Recvd */
				 case 0x03:
				 numReg = (((uint16_t)buff[4])<<8)|buff[5];
  400dbe:	68bb      	ldr	r3, [r7, #8]
  400dc0:	3304      	adds	r3, #4
  400dc2:	781b      	ldrb	r3, [r3, #0]
  400dc4:	021b      	lsls	r3, r3, #8
  400dc6:	b21a      	sxth	r2, r3
  400dc8:	68bb      	ldr	r3, [r7, #8]
  400dca:	3305      	adds	r3, #5
  400dcc:	781b      	ldrb	r3, [r3, #0]
  400dce:	b21b      	sxth	r3, r3
  400dd0:	4313      	orrs	r3, r2
  400dd2:	b21b      	sxth	r3, r3
  400dd4:	833b      	strh	r3, [r7, #24]
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
  400dd6:	8b3b      	ldrh	r3, [r7, #24]
  400dd8:	2b00      	cmp	r3, #0
  400dda:	f000 8088 	beq.w	400eee <ParseMbusPkt+0x1e2>
  400dde:	8b3b      	ldrh	r3, [r7, #24]
  400de0:	2b7d      	cmp	r3, #125	; 0x7d
  400de2:	f200 8084 	bhi.w	400eee <ParseMbusPkt+0x1e2>
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
  400de6:	68bb      	ldr	r3, [r7, #8]
  400de8:	3302      	adds	r3, #2
  400dea:	781b      	ldrb	r3, [r3, #0]
  400dec:	021b      	lsls	r3, r3, #8
  400dee:	b21a      	sxth	r2, r3
  400df0:	68bb      	ldr	r3, [r7, #8]
  400df2:	3303      	adds	r3, #3
  400df4:	781b      	ldrb	r3, [r3, #0]
  400df6:	b21b      	sxth	r3, r3
  400df8:	4313      	orrs	r3, r2
  400dfa:	b21b      	sxth	r3, r3
  400dfc:	837b      	strh	r3, [r7, #26]
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  400dfe:	8b7a      	ldrh	r2, [r7, #26]
  400e00:	8b3b      	ldrh	r3, [r7, #24]
  400e02:	4413      	add	r3, r2
  400e04:	2b28      	cmp	r3, #40	; 0x28
  400e06:	dc68      	bgt.n	400eda <ParseMbusPkt+0x1ce>
					 {
						 /* Process Read Reg Req */
						 /* Gen Valid Resp */
						 respBuff[0] = slaveAddr;
  400e08:	687b      	ldr	r3, [r7, #4]
  400e0a:	7bfa      	ldrb	r2, [r7, #15]
  400e0c:	701a      	strb	r2, [r3, #0]
						 respBuff[1] = 0x03;
  400e0e:	687b      	ldr	r3, [r7, #4]
  400e10:	3301      	adds	r3, #1
  400e12:	2203      	movs	r2, #3
  400e14:	701a      	strb	r2, [r3, #0]
						 respBuff[2] = (numReg *2); //No of Data Bytes
  400e16:	687b      	ldr	r3, [r7, #4]
  400e18:	3302      	adds	r3, #2
  400e1a:	8b3a      	ldrh	r2, [r7, #24]
  400e1c:	b2d2      	uxtb	r2, r2
  400e1e:	0052      	lsls	r2, r2, #1
  400e20:	b2d2      	uxtb	r2, r2
  400e22:	701a      	strb	r2, [r3, #0]
						 
						 i = 3;
  400e24:	2303      	movs	r3, #3
  400e26:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
						 for(ind = 0; ind < numReg; ind++)
  400e2a:	2300      	movs	r3, #0
  400e2c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  400e30:	e028      	b.n	400e84 <ParseMbusPkt+0x178>
						 {
							 respBuff[i++] = (mBusRegs[regAddr+ind]>>8);
  400e32:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400e36:	1c5a      	adds	r2, r3, #1
  400e38:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
  400e3c:	461a      	mov	r2, r3
  400e3e:	687b      	ldr	r3, [r7, #4]
  400e40:	4413      	add	r3, r2
  400e42:	8b79      	ldrh	r1, [r7, #26]
  400e44:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
  400e48:	440a      	add	r2, r1
  400e4a:	4963      	ldr	r1, [pc, #396]	; (400fd8 <ParseMbusPkt+0x2cc>)
  400e4c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
  400e50:	0a12      	lsrs	r2, r2, #8
  400e52:	b292      	uxth	r2, r2
  400e54:	b2d2      	uxtb	r2, r2
  400e56:	701a      	strb	r2, [r3, #0]
							 respBuff[i++] = (mBusRegs[regAddr+ind]&0x00FF);
  400e58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400e5c:	1c5a      	adds	r2, r3, #1
  400e5e:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
  400e62:	461a      	mov	r2, r3
  400e64:	687b      	ldr	r3, [r7, #4]
  400e66:	4413      	add	r3, r2
  400e68:	8b79      	ldrh	r1, [r7, #26]
  400e6a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
  400e6e:	440a      	add	r2, r1
  400e70:	4959      	ldr	r1, [pc, #356]	; (400fd8 <ParseMbusPkt+0x2cc>)
  400e72:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
  400e76:	b2d2      	uxtb	r2, r2
  400e78:	701a      	strb	r2, [r3, #0]
						 respBuff[0] = slaveAddr;
						 respBuff[1] = 0x03;
						 respBuff[2] = (numReg *2); //No of Data Bytes
						 
						 i = 3;
						 for(ind = 0; ind < numReg; ind++)
  400e7a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  400e7e:	3301      	adds	r3, #1
  400e80:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  400e84:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  400e88:	b29b      	uxth	r3, r3
  400e8a:	8b3a      	ldrh	r2, [r7, #24]
  400e8c:	429a      	cmp	r2, r3
  400e8e:	d8d0      	bhi.n	400e32 <ParseMbusPkt+0x126>
						 {
							 respBuff[i++] = (mBusRegs[regAddr+ind]>>8);
							 respBuff[i++] = (mBusRegs[regAddr+ind]&0x00FF);
						 }
						 crc = calcCRC(respBuff, i);
  400e90:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400e94:	4619      	mov	r1, r3
  400e96:	6878      	ldr	r0, [r7, #4]
  400e98:	4b4e      	ldr	r3, [pc, #312]	; (400fd4 <ParseMbusPkt+0x2c8>)
  400e9a:	4798      	blx	r3
  400e9c:	4603      	mov	r3, r0
  400e9e:	83fb      	strh	r3, [r7, #30]
						 respBuff[i++] = (crc&0x00FF);
  400ea0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400ea4:	1c5a      	adds	r2, r3, #1
  400ea6:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
  400eaa:	461a      	mov	r2, r3
  400eac:	687b      	ldr	r3, [r7, #4]
  400eae:	4413      	add	r3, r2
  400eb0:	8bfa      	ldrh	r2, [r7, #30]
  400eb2:	b2d2      	uxtb	r2, r2
  400eb4:	701a      	strb	r2, [r3, #0]
						 respBuff[i++] = (crc>>8);
  400eb6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400eba:	1c5a      	adds	r2, r3, #1
  400ebc:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
  400ec0:	461a      	mov	r2, r3
  400ec2:	687b      	ldr	r3, [r7, #4]
  400ec4:	4413      	add	r3, r2
  400ec6:	8bfa      	ldrh	r2, [r7, #30]
  400ec8:	0a12      	lsrs	r2, r2, #8
  400eca:	b292      	uxth	r2, r2
  400ecc:	b2d2      	uxtb	r2, r2
  400ece:	701a      	strb	r2, [r3, #0]
						 *respLen = i;
  400ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400ed2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
  400ed6:	701a      	strb	r2, [r3, #0]
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  400ed8:	e013      	b.n	400f02 <ParseMbusPkt+0x1f6>
						 *respLen = i;
					 }
					 else
					 {
						 /* Error code = 0x02 */
						 genErrRsp = 1;
  400eda:	2301      	movs	r3, #1
  400edc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						 expFuncCode = 0x83;
  400ee0:	2383      	movs	r3, #131	; 0x83
  400ee2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						 expCode = 0x02;
  400ee6:	2302      	movs	r3, #2
  400ee8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  400eec:	e009      	b.n	400f02 <ParseMbusPkt+0x1f6>
					 }
				 }
				 else
				 {
					 /* Error Code 0x03 */
					 genErrRsp = 1;
  400eee:	2301      	movs	r3, #1
  400ef0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					 expFuncCode = 0x83;
  400ef4:	2383      	movs	r3, #131	; 0x83
  400ef6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					 expCode = 0x03;
  400efa:	2303      	movs	r3, #3
  400efc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 }
				 break;
  400f00:	e12c      	b.n	40115c <ParseMbusPkt+0x450>
  400f02:	e12b      	b.n	40115c <ParseMbusPkt+0x450>
				 /* Write Single Analog Reg */
				 case 0x06:
				 /* Output Value = 0x0000 or 0xFF00 */
				 regVal = (((uint16_t)buff[4])<<8)|(buff[5]);
  400f04:	68bb      	ldr	r3, [r7, #8]
  400f06:	3304      	adds	r3, #4
  400f08:	781b      	ldrb	r3, [r3, #0]
  400f0a:	021b      	lsls	r3, r3, #8
  400f0c:	b21a      	sxth	r2, r3
  400f0e:	68bb      	ldr	r3, [r7, #8]
  400f10:	3305      	adds	r3, #5
  400f12:	781b      	ldrb	r3, [r3, #0]
  400f14:	b21b      	sxth	r3, r3
  400f16:	4313      	orrs	r3, r2
  400f18:	b21b      	sxth	r3, r3
  400f1a:	84fb      	strh	r3, [r7, #38]	; 0x26
				 if(1)
				 {
					 /* Output Address = OK */
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
  400f1c:	68bb      	ldr	r3, [r7, #8]
  400f1e:	3302      	adds	r3, #2
  400f20:	781b      	ldrb	r3, [r3, #0]
  400f22:	021b      	lsls	r3, r3, #8
  400f24:	b21a      	sxth	r2, r3
  400f26:	68bb      	ldr	r3, [r7, #8]
  400f28:	3303      	adds	r3, #3
  400f2a:	781b      	ldrb	r3, [r3, #0]
  400f2c:	b21b      	sxth	r3, r3
  400f2e:	4313      	orrs	r3, r2
  400f30:	b21b      	sxth	r3, r3
  400f32:	837b      	strh	r3, [r7, #26]
					 if(regAddr <= MBUS_MAX_REGS)
  400f34:	8b7b      	ldrh	r3, [r7, #26]
  400f36:	2b28      	cmp	r3, #40	; 0x28
  400f38:	d841      	bhi.n	400fbe <ParseMbusPkt+0x2b2>
					 {
						 /* Gen Valid Mbus Resp */
						 mBusRegs[regAddr] = regVal;
  400f3a:	8b7b      	ldrh	r3, [r7, #26]
  400f3c:	4926      	ldr	r1, [pc, #152]	; (400fd8 <ParseMbusPkt+0x2cc>)
  400f3e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  400f40:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						 /* Success Error Code */
						 respBuff[0] = slaveAddr;
  400f44:	687b      	ldr	r3, [r7, #4]
  400f46:	7bfa      	ldrb	r2, [r7, #15]
  400f48:	701a      	strb	r2, [r3, #0]
						 respBuff[1] = 0x06;
  400f4a:	687b      	ldr	r3, [r7, #4]
  400f4c:	3301      	adds	r3, #1
  400f4e:	2206      	movs	r2, #6
  400f50:	701a      	strb	r2, [r3, #0]
						 respBuff[2] = buff[2];
  400f52:	687b      	ldr	r3, [r7, #4]
  400f54:	3302      	adds	r3, #2
  400f56:	68ba      	ldr	r2, [r7, #8]
  400f58:	7892      	ldrb	r2, [r2, #2]
  400f5a:	701a      	strb	r2, [r3, #0]
						 respBuff[3] = buff[3];
  400f5c:	687b      	ldr	r3, [r7, #4]
  400f5e:	3303      	adds	r3, #3
  400f60:	68ba      	ldr	r2, [r7, #8]
  400f62:	78d2      	ldrb	r2, [r2, #3]
  400f64:	701a      	strb	r2, [r3, #0]
						 respBuff[4] = buff[4];
  400f66:	687b      	ldr	r3, [r7, #4]
  400f68:	3304      	adds	r3, #4
  400f6a:	68ba      	ldr	r2, [r7, #8]
  400f6c:	7912      	ldrb	r2, [r2, #4]
  400f6e:	701a      	strb	r2, [r3, #0]
						 respBuff[5] = buff[5];
  400f70:	687b      	ldr	r3, [r7, #4]
  400f72:	3305      	adds	r3, #5
  400f74:	68ba      	ldr	r2, [r7, #8]
  400f76:	7952      	ldrb	r2, [r2, #5]
  400f78:	701a      	strb	r2, [r3, #0]
						 crc = calcCRC(respBuff, 6);
  400f7a:	2106      	movs	r1, #6
  400f7c:	6878      	ldr	r0, [r7, #4]
  400f7e:	4b15      	ldr	r3, [pc, #84]	; (400fd4 <ParseMbusPkt+0x2c8>)
  400f80:	4798      	blx	r3
  400f82:	4603      	mov	r3, r0
  400f84:	83fb      	strh	r3, [r7, #30]
						 respBuff[6] = (crc&0x00FF);
  400f86:	687b      	ldr	r3, [r7, #4]
  400f88:	3306      	adds	r3, #6
  400f8a:	8bfa      	ldrh	r2, [r7, #30]
  400f8c:	b2d2      	uxtb	r2, r2
  400f8e:	701a      	strb	r2, [r3, #0]
						 respBuff[7] = (crc>>8);
  400f90:	687b      	ldr	r3, [r7, #4]
  400f92:	3307      	adds	r3, #7
  400f94:	8bfa      	ldrh	r2, [r7, #30]
  400f96:	0a12      	lsrs	r2, r2, #8
  400f98:	b292      	uxth	r2, r2
  400f9a:	b2d2      	uxtb	r2, r2
  400f9c:	701a      	strb	r2, [r3, #0]
						 *respLen = 8;
  400f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400fa0:	2208      	movs	r2, #8
  400fa2:	701a      	strb	r2, [r3, #0]
						 
						 /* Process Write Reg Req */
						 if(writeFunc!=NULL)
  400fa4:	4b0d      	ldr	r3, [pc, #52]	; (400fdc <ParseMbusPkt+0x2d0>)
  400fa6:	681b      	ldr	r3, [r3, #0]
  400fa8:	2b00      	cmp	r3, #0
  400faa:	f000 80d6 	beq.w	40115a <ParseMbusPkt+0x44e>
							writeFunc(mBusRegs,regAddr,1);
  400fae:	4b0b      	ldr	r3, [pc, #44]	; (400fdc <ParseMbusPkt+0x2d0>)
  400fb0:	681b      	ldr	r3, [r3, #0]
  400fb2:	8b7a      	ldrh	r2, [r7, #26]
  400fb4:	b2d1      	uxtb	r1, r2
  400fb6:	2201      	movs	r2, #1
  400fb8:	4807      	ldr	r0, [pc, #28]	; (400fd8 <ParseMbusPkt+0x2cc>)
  400fba:	4798      	blx	r3
					 /* Illegal Data Value Error */
					 genErrRsp = 1;
					 expFuncCode = 0x86;
					 expCode = 0x03;
				 }
				 break;
  400fbc:	e0cd      	b.n	40115a <ParseMbusPkt+0x44e>
							writeFunc(mBusRegs,regAddr,1);
					 }
					 else
					 {
						 /* Illegal Data Address Error */
						 genErrRsp = 1;
  400fbe:	2301      	movs	r3, #1
  400fc0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						 expFuncCode = 0x86;
  400fc4:	2386      	movs	r3, #134	; 0x86
  400fc6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						 expCode = 0x02;
  400fca:	2302      	movs	r3, #2
  400fcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					 /* Illegal Data Value Error */
					 genErrRsp = 1;
					 expFuncCode = 0x86;
					 expCode = 0x03;
				 }
				 break;
  400fd0:	e0c3      	b.n	40115a <ParseMbusPkt+0x44e>
  400fd2:	bf00      	nop
  400fd4:	004011c5 	.word	0x004011c5
  400fd8:	20000bc4 	.word	0x20000bc4
  400fdc:	20002e94 	.word	0x20002e94
				 case 0x10: /* Write Mul Register */
				 numReg = (((uint16_t)buff[4])<<8)|buff[5];
  400fe0:	68bb      	ldr	r3, [r7, #8]
  400fe2:	3304      	adds	r3, #4
  400fe4:	781b      	ldrb	r3, [r3, #0]
  400fe6:	021b      	lsls	r3, r3, #8
  400fe8:	b21a      	sxth	r2, r3
  400fea:	68bb      	ldr	r3, [r7, #8]
  400fec:	3305      	adds	r3, #5
  400fee:	781b      	ldrb	r3, [r3, #0]
  400ff0:	b21b      	sxth	r3, r3
  400ff2:	4313      	orrs	r3, r2
  400ff4:	b21b      	sxth	r3, r3
  400ff6:	833b      	strh	r3, [r7, #24]
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
  400ff8:	8b3b      	ldrh	r3, [r7, #24]
  400ffa:	2b00      	cmp	r3, #0
  400ffc:	f000 8096 	beq.w	40112c <ParseMbusPkt+0x420>
  401000:	8b3b      	ldrh	r3, [r7, #24]
  401002:	2b7d      	cmp	r3, #125	; 0x7d
  401004:	f200 8092 	bhi.w	40112c <ParseMbusPkt+0x420>
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
  401008:	68bb      	ldr	r3, [r7, #8]
  40100a:	3302      	adds	r3, #2
  40100c:	781b      	ldrb	r3, [r3, #0]
  40100e:	021b      	lsls	r3, r3, #8
  401010:	b21a      	sxth	r2, r3
  401012:	68bb      	ldr	r3, [r7, #8]
  401014:	3303      	adds	r3, #3
  401016:	781b      	ldrb	r3, [r3, #0]
  401018:	b21b      	sxth	r3, r3
  40101a:	4313      	orrs	r3, r2
  40101c:	b21b      	sxth	r3, r3
  40101e:	837b      	strh	r3, [r7, #26]
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  401020:	8b7a      	ldrh	r2, [r7, #26]
  401022:	8b3b      	ldrh	r3, [r7, #24]
  401024:	4413      	add	r3, r2
  401026:	2b28      	cmp	r3, #40	; 0x28
  401028:	dc76      	bgt.n	401118 <ParseMbusPkt+0x40c>
					 {
						 /* Gen Valid Resp */
						 respBuff[0] = slaveAddr;
  40102a:	687b      	ldr	r3, [r7, #4]
  40102c:	7bfa      	ldrb	r2, [r7, #15]
  40102e:	701a      	strb	r2, [r3, #0]
						 respBuff[1] = 0x10;
  401030:	687b      	ldr	r3, [r7, #4]
  401032:	3301      	adds	r3, #1
  401034:	2210      	movs	r2, #16
  401036:	701a      	strb	r2, [r3, #0]
						 respBuff[2] = buff[2];
  401038:	687b      	ldr	r3, [r7, #4]
  40103a:	3302      	adds	r3, #2
  40103c:	68ba      	ldr	r2, [r7, #8]
  40103e:	7892      	ldrb	r2, [r2, #2]
  401040:	701a      	strb	r2, [r3, #0]
						 respBuff[3] = buff[3];
  401042:	687b      	ldr	r3, [r7, #4]
  401044:	3303      	adds	r3, #3
  401046:	68ba      	ldr	r2, [r7, #8]
  401048:	78d2      	ldrb	r2, [r2, #3]
  40104a:	701a      	strb	r2, [r3, #0]
						 respBuff[4] = buff[4];
  40104c:	687b      	ldr	r3, [r7, #4]
  40104e:	3304      	adds	r3, #4
  401050:	68ba      	ldr	r2, [r7, #8]
  401052:	7912      	ldrb	r2, [r2, #4]
  401054:	701a      	strb	r2, [r3, #0]
						 respBuff[5] = buff[5];
  401056:	687b      	ldr	r3, [r7, #4]
  401058:	3305      	adds	r3, #5
  40105a:	68ba      	ldr	r2, [r7, #8]
  40105c:	7952      	ldrb	r2, [r2, #5]
  40105e:	701a      	strb	r2, [r3, #0]
						 crc = calcCRC(respBuff, 6);
  401060:	2106      	movs	r1, #6
  401062:	6878      	ldr	r0, [r7, #4]
  401064:	4b54      	ldr	r3, [pc, #336]	; (4011b8 <ParseMbusPkt+0x4ac>)
  401066:	4798      	blx	r3
  401068:	4603      	mov	r3, r0
  40106a:	83fb      	strh	r3, [r7, #30]
						 respBuff[6] = (crc&0x00FF);
  40106c:	687b      	ldr	r3, [r7, #4]
  40106e:	3306      	adds	r3, #6
  401070:	8bfa      	ldrh	r2, [r7, #30]
  401072:	b2d2      	uxtb	r2, r2
  401074:	701a      	strb	r2, [r3, #0]
						 respBuff[7] = (crc>>8);
  401076:	687b      	ldr	r3, [r7, #4]
  401078:	3307      	adds	r3, #7
  40107a:	8bfa      	ldrh	r2, [r7, #30]
  40107c:	0a12      	lsrs	r2, r2, #8
  40107e:	b292      	uxth	r2, r2
  401080:	b2d2      	uxtb	r2, r2
  401082:	701a      	strb	r2, [r3, #0]
						 *respLen = 8;
  401084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  401086:	2208      	movs	r2, #8
  401088:	701a      	strb	r2, [r3, #0]
						 
						 /* Byte count */
						 numReg = 7 + buff[6];
  40108a:	68bb      	ldr	r3, [r7, #8]
  40108c:	3306      	adds	r3, #6
  40108e:	781b      	ldrb	r3, [r3, #0]
  401090:	b29b      	uxth	r3, r3
  401092:	3307      	adds	r3, #7
  401094:	833b      	strh	r3, [r7, #24]
						 ind = 0;
  401096:	2300      	movs	r3, #0
  401098:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
						 for(i = 7; i < numReg; i++)
  40109c:	2307      	movs	r3, #7
  40109e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  4010a2:	e02a      	b.n	4010fa <ParseMbusPkt+0x3ee>
						 {
							 if(i%2==1)
  4010a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  4010a8:	f003 0301 	and.w	r3, r3, #1
  4010ac:	b2db      	uxtb	r3, r3
  4010ae:	2b00      	cmp	r3, #0
  4010b0:	d008      	beq.n	4010c4 <ParseMbusPkt+0x3b8>
							 {
								 regVal = ((uint16_t)buff[i])<<8;
  4010b2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  4010b6:	68ba      	ldr	r2, [r7, #8]
  4010b8:	4413      	add	r3, r2
  4010ba:	781b      	ldrb	r3, [r3, #0]
  4010bc:	b29b      	uxth	r3, r3
  4010be:	021b      	lsls	r3, r3, #8
  4010c0:	84fb      	strh	r3, [r7, #38]	; 0x26
  4010c2:	e015      	b.n	4010f0 <ParseMbusPkt+0x3e4>
							 }
							 else
							 {
								 regVal |= buff[i];
  4010c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  4010c8:	68ba      	ldr	r2, [r7, #8]
  4010ca:	4413      	add	r3, r2
  4010cc:	781b      	ldrb	r3, [r3, #0]
  4010ce:	b29a      	uxth	r2, r3
  4010d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  4010d2:	4313      	orrs	r3, r2
  4010d4:	84fb      	strh	r3, [r7, #38]	; 0x26
								 mBusRegs[regAddr+ind] = regVal;
  4010d6:	8b7a      	ldrh	r2, [r7, #26]
  4010d8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  4010dc:	4413      	add	r3, r2
  4010de:	4937      	ldr	r1, [pc, #220]	; (4011bc <ParseMbusPkt+0x4b0>)
  4010e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  4010e2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								 ind ++;
  4010e6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  4010ea:	3301      	adds	r3, #1
  4010ec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
						 *respLen = 8;
						 
						 /* Byte count */
						 numReg = 7 + buff[6];
						 ind = 0;
						 for(i = 7; i < numReg; i++)
  4010f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  4010f4:	3301      	adds	r3, #1
  4010f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  4010fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  4010fe:	b29b      	uxth	r3, r3
  401100:	8b3a      	ldrh	r2, [r7, #24]
  401102:	429a      	cmp	r2, r3
  401104:	d8ce      	bhi.n	4010a4 <ParseMbusPkt+0x398>
								 mBusRegs[regAddr+ind] = regVal;
								 ind ++;
							 }
						 }
						 /* Process Write Reg Req */
						 writeFunc(mBusRegs,regAddr,ind);
  401106:	4b2e      	ldr	r3, [pc, #184]	; (4011c0 <ParseMbusPkt+0x4b4>)
  401108:	681b      	ldr	r3, [r3, #0]
  40110a:	8b7a      	ldrh	r2, [r7, #26]
  40110c:	b2d1      	uxtb	r1, r2
  40110e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
  401112:	482a      	ldr	r0, [pc, #168]	; (4011bc <ParseMbusPkt+0x4b0>)
  401114:	4798      	blx	r3
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  401116:	e013      	b.n	401140 <ParseMbusPkt+0x434>
						 writeFunc(mBusRegs,regAddr,ind);
					 }
					 else
					 {
						 /* Error code = 0x02 */
						 genErrRsp = 1;
  401118:	2301      	movs	r3, #1
  40111a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						 expFuncCode = 0x90;
  40111e:	2390      	movs	r3, #144	; 0x90
  401120:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						 expCode = 0x02;
  401124:	2302      	movs	r3, #2
  401126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  40112a:	e009      	b.n	401140 <ParseMbusPkt+0x434>
					 }
				 }
				 else
				 {
					 /* Error Code 0x03 */
					 genErrRsp = 1;
  40112c:	2301      	movs	r3, #1
  40112e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					 expFuncCode = 0x90;
  401132:	2390      	movs	r3, #144	; 0x90
  401134:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					 expCode = 0x03;
  401138:	2303      	movs	r3, #3
  40113a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 }
				 break;
  40113e:	e00d      	b.n	40115c <ParseMbusPkt+0x450>
  401140:	e00c      	b.n	40115c <ParseMbusPkt+0x450>
				 default:
				 /* Illegal Function Code Error */
				 /* Set MSB of recvd Function code */
				 /* Error Code 0x01 */
				 expFuncCode = fCode|(1<<7);
  401142:	7dfb      	ldrb	r3, [r7, #23]
  401144:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401148:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				 expCode = 0x01;
  40114c:	2301      	movs	r3, #1
  40114e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 genErrRsp = 1;
  401152:	2301      	movs	r3, #1
  401154:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				 break;
  401158:	e000      	b.n	40115c <ParseMbusPkt+0x450>
					 /* Illegal Data Value Error */
					 genErrRsp = 1;
					 expFuncCode = 0x86;
					 expCode = 0x03;
				 }
				 break;
  40115a:	bf00      	nop
	 {
		 /* Calc CRC */
		 recvCrc = (((uint16_t)buff[len-1])<<8)|buff[len-2];
		 crc = calcCRC(buff,len-2);
		 /* If CRC Matched */
		 if(crc==recvCrc)
  40115c:	e002      	b.n	401164 <ParseMbusPkt+0x458>
			 }
		 }
	 }
	 else
	 {
		 *respLen = 0;
  40115e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  401160:	2200      	movs	r2, #0
  401162:	701a      	strb	r2, [r3, #0]
	 }
	 
	 if(genErrRsp)
  401164:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
  401168:	2b00      	cmp	r3, #0
  40116a:	d021      	beq.n	4011b0 <ParseMbusPkt+0x4a4>
	 {
		 respBuff[0] = slaveAddr;
  40116c:	687b      	ldr	r3, [r7, #4]
  40116e:	7bfa      	ldrb	r2, [r7, #15]
  401170:	701a      	strb	r2, [r3, #0]
		 respBuff[1] = expFuncCode;
  401172:	687b      	ldr	r3, [r7, #4]
  401174:	3301      	adds	r3, #1
  401176:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
  40117a:	701a      	strb	r2, [r3, #0]
		 respBuff[2] = expCode;
  40117c:	687b      	ldr	r3, [r7, #4]
  40117e:	3302      	adds	r3, #2
  401180:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
  401184:	701a      	strb	r2, [r3, #0]
		 crc = calcCRC(respBuff, 3);
  401186:	2103      	movs	r1, #3
  401188:	6878      	ldr	r0, [r7, #4]
  40118a:	4b0b      	ldr	r3, [pc, #44]	; (4011b8 <ParseMbusPkt+0x4ac>)
  40118c:	4798      	blx	r3
  40118e:	4603      	mov	r3, r0
  401190:	83fb      	strh	r3, [r7, #30]
		 respBuff[3] = (crc&0x00FF);
  401192:	687b      	ldr	r3, [r7, #4]
  401194:	3303      	adds	r3, #3
  401196:	8bfa      	ldrh	r2, [r7, #30]
  401198:	b2d2      	uxtb	r2, r2
  40119a:	701a      	strb	r2, [r3, #0]
		 respBuff[4] = (crc>>8);
  40119c:	687b      	ldr	r3, [r7, #4]
  40119e:	3304      	adds	r3, #4
  4011a0:	8bfa      	ldrh	r2, [r7, #30]
  4011a2:	0a12      	lsrs	r2, r2, #8
  4011a4:	b292      	uxth	r2, r2
  4011a6:	b2d2      	uxtb	r2, r2
  4011a8:	701a      	strb	r2, [r3, #0]
		 *respLen = 5;
  4011aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4011ac:	2205      	movs	r2, #5
  4011ae:	701a      	strb	r2, [r3, #0]
	 }
 }
  4011b0:	bf00      	nop
  4011b2:	3728      	adds	r7, #40	; 0x28
  4011b4:	46bd      	mov	sp, r7
  4011b6:	bd80      	pop	{r7, pc}
  4011b8:	004011c5 	.word	0x004011c5
  4011bc:	20000bc4 	.word	0x20000bc4
  4011c0:	20002e94 	.word	0x20002e94

004011c4 <calcCRC>:

 uint16_t calcCRC(uint8_t *buff, uint8_t len)
 {
  4011c4:	b480      	push	{r7}
  4011c6:	b085      	sub	sp, #20
  4011c8:	af00      	add	r7, sp, #0
  4011ca:	6078      	str	r0, [r7, #4]
  4011cc:	460b      	mov	r3, r1
  4011ce:	70fb      	strb	r3, [r7, #3]
	 uint16_t crcReg = 0xFFFF;
  4011d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4011d4:	81fb      	strh	r3, [r7, #14]
	 uint8_t i = 0, j=0;
  4011d6:	2300      	movs	r3, #0
  4011d8:	737b      	strb	r3, [r7, #13]
  4011da:	2300      	movs	r3, #0
  4011dc:	733b      	strb	r3, [r7, #12]

	 for(i=0;i<len;i++)
  4011de:	2300      	movs	r3, #0
  4011e0:	737b      	strb	r3, [r7, #13]
  4011e2:	e026      	b.n	401232 <calcCRC+0x6e>
	 {
		 crcReg = crcReg ^ buff[i];
  4011e4:	7b7b      	ldrb	r3, [r7, #13]
  4011e6:	687a      	ldr	r2, [r7, #4]
  4011e8:	4413      	add	r3, r2
  4011ea:	781b      	ldrb	r3, [r3, #0]
  4011ec:	b29a      	uxth	r2, r3
  4011ee:	89fb      	ldrh	r3, [r7, #14]
  4011f0:	4053      	eors	r3, r2
  4011f2:	81fb      	strh	r3, [r7, #14]
		 for(j=0;j<8;j++)
  4011f4:	2300      	movs	r3, #0
  4011f6:	733b      	strb	r3, [r7, #12]
  4011f8:	e015      	b.n	401226 <calcCRC+0x62>
		 {

			 if(bitIsSet(crcReg,0))
  4011fa:	89fb      	ldrh	r3, [r7, #14]
  4011fc:	f003 0301 	and.w	r3, r3, #1
  401200:	2b00      	cmp	r3, #0
  401202:	d00a      	beq.n	40121a <calcCRC+0x56>
			 {
				 crcReg = crcReg >> 1;
  401204:	89fb      	ldrh	r3, [r7, #14]
  401206:	085b      	lsrs	r3, r3, #1
  401208:	81fb      	strh	r3, [r7, #14]
				 crcReg = crcReg ^ MBUS_CRC_POLY;
  40120a:	89fb      	ldrh	r3, [r7, #14]
  40120c:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
  401210:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
  401214:	43db      	mvns	r3, r3
  401216:	81fb      	strh	r3, [r7, #14]
  401218:	e002      	b.n	401220 <calcCRC+0x5c>
			 }
			 else
			 {
				 crcReg = crcReg >> 1;
  40121a:	89fb      	ldrh	r3, [r7, #14]
  40121c:	085b      	lsrs	r3, r3, #1
  40121e:	81fb      	strh	r3, [r7, #14]
	 uint8_t i = 0, j=0;

	 for(i=0;i<len;i++)
	 {
		 crcReg = crcReg ^ buff[i];
		 for(j=0;j<8;j++)
  401220:	7b3b      	ldrb	r3, [r7, #12]
  401222:	3301      	adds	r3, #1
  401224:	733b      	strb	r3, [r7, #12]
  401226:	7b3b      	ldrb	r3, [r7, #12]
  401228:	2b07      	cmp	r3, #7
  40122a:	d9e6      	bls.n	4011fa <calcCRC+0x36>
 uint16_t calcCRC(uint8_t *buff, uint8_t len)
 {
	 uint16_t crcReg = 0xFFFF;
	 uint8_t i = 0, j=0;

	 for(i=0;i<len;i++)
  40122c:	7b7b      	ldrb	r3, [r7, #13]
  40122e:	3301      	adds	r3, #1
  401230:	737b      	strb	r3, [r7, #13]
  401232:	7b7a      	ldrb	r2, [r7, #13]
  401234:	78fb      	ldrb	r3, [r7, #3]
  401236:	429a      	cmp	r2, r3
  401238:	d3d4      	bcc.n	4011e4 <calcCRC+0x20>
			 {
				 crcReg = crcReg >> 1;
			 }
		 }
	 }
	 return crcReg;
  40123a:	89fb      	ldrh	r3, [r7, #14]
 }
  40123c:	4618      	mov	r0, r3
  40123e:	3714      	adds	r7, #20
  401240:	46bd      	mov	sp, r7
  401242:	bc80      	pop	{r7}
  401244:	4770      	bx	lr
  401246:	bf00      	nop

00401248 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  401248:	b480      	push	{r7}
  40124a:	b083      	sub	sp, #12
  40124c:	af00      	add	r7, sp, #0
  40124e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401250:	687b      	ldr	r3, [r7, #4]
  401252:	2b07      	cmp	r3, #7
  401254:	d825      	bhi.n	4012a2 <osc_get_rate+0x5a>
  401256:	a201      	add	r2, pc, #4	; (adr r2, 40125c <osc_get_rate+0x14>)
  401258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40125c:	0040127d 	.word	0x0040127d
  401260:	00401283 	.word	0x00401283
  401264:	00401289 	.word	0x00401289
  401268:	0040128f 	.word	0x0040128f
  40126c:	00401293 	.word	0x00401293
  401270:	00401297 	.word	0x00401297
  401274:	0040129b 	.word	0x0040129b
  401278:	0040129f 	.word	0x0040129f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40127c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401280:	e010      	b.n	4012a4 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  401282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401286:	e00d      	b.n	4012a4 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  401288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40128c:	e00a      	b.n	4012a4 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40128e:	4b08      	ldr	r3, [pc, #32]	; (4012b0 <osc_get_rate+0x68>)
  401290:	e008      	b.n	4012a4 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  401292:	4b08      	ldr	r3, [pc, #32]	; (4012b4 <osc_get_rate+0x6c>)
  401294:	e006      	b.n	4012a4 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  401296:	4b08      	ldr	r3, [pc, #32]	; (4012b8 <osc_get_rate+0x70>)
  401298:	e004      	b.n	4012a4 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40129a:	4b07      	ldr	r3, [pc, #28]	; (4012b8 <osc_get_rate+0x70>)
  40129c:	e002      	b.n	4012a4 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40129e:	4b06      	ldr	r3, [pc, #24]	; (4012b8 <osc_get_rate+0x70>)
  4012a0:	e000      	b.n	4012a4 <osc_get_rate+0x5c>
	}

	return 0;
  4012a2:	2300      	movs	r3, #0
}
  4012a4:	4618      	mov	r0, r3
  4012a6:	370c      	adds	r7, #12
  4012a8:	46bd      	mov	sp, r7
  4012aa:	bc80      	pop	{r7}
  4012ac:	4770      	bx	lr
  4012ae:	bf00      	nop
  4012b0:	003d0900 	.word	0x003d0900
  4012b4:	007a1200 	.word	0x007a1200
  4012b8:	00b71b00 	.word	0x00b71b00

004012bc <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4012bc:	b580      	push	{r7, lr}
  4012be:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4012c0:	2006      	movs	r0, #6
  4012c2:	4b04      	ldr	r3, [pc, #16]	; (4012d4 <sysclk_get_main_hz+0x18>)
  4012c4:	4798      	blx	r3
  4012c6:	4602      	mov	r2, r0
  4012c8:	4613      	mov	r3, r2
  4012ca:	009b      	lsls	r3, r3, #2
  4012cc:	4413      	add	r3, r2
  4012ce:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4012d0:	4618      	mov	r0, r3
  4012d2:	bd80      	pop	{r7, pc}
  4012d4:	00401249 	.word	0x00401249

004012d8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  4012d8:	b580      	push	{r7, lr}
  4012da:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4012dc:	4b02      	ldr	r3, [pc, #8]	; (4012e8 <sysclk_get_peripheral_hz+0x10>)
  4012de:	4798      	blx	r3
  4012e0:	4603      	mov	r3, r0
  4012e2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4012e4:	4618      	mov	r0, r3
  4012e6:	bd80      	pop	{r7, pc}
  4012e8:	004012bd 	.word	0x004012bd

004012ec <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4012ec:	b580      	push	{r7, lr}
  4012ee:	b082      	sub	sp, #8
  4012f0:	af00      	add	r7, sp, #0
  4012f2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4012f4:	6878      	ldr	r0, [r7, #4]
  4012f6:	4b03      	ldr	r3, [pc, #12]	; (401304 <sysclk_enable_peripheral_clock+0x18>)
  4012f8:	4798      	blx	r3
}
  4012fa:	bf00      	nop
  4012fc:	3708      	adds	r7, #8
  4012fe:	46bd      	mov	sp, r7
  401300:	bd80      	pop	{r7, pc}
  401302:	bf00      	nop
  401304:	00405075 	.word	0x00405075

00401308 <RTCIntHandler>:

static void InitTWI(void);

/* RTC 1 Min ISR */
void RTCIntHandler(uint32_t ul_id, uint32_t ul_mask)
{
  401308:	b480      	push	{r7}
  40130a:	b083      	sub	sp, #12
  40130c:	af00      	add	r7, sp, #0
  40130e:	6078      	str	r0, [r7, #4]
  401310:	6039      	str	r1, [r7, #0]
    if (PIN_RTC_INT_PIO_ID != ul_id || PIN_RTC_INT_MASK != ul_mask)
  401312:	687b      	ldr	r3, [r7, #4]
  401314:	2b0b      	cmp	r3, #11
  401316:	d113      	bne.n	401340 <RTCIntHandler+0x38>
  401318:	683b      	ldr	r3, [r7, #0]
  40131a:	2b01      	cmp	r3, #1
  40131c:	d110      	bne.n	401340 <RTCIntHandler+0x38>
		return;
	
    /* If Auto Mode */
    if(!mBusRegs[MBUS_REG_OPMODE])
  40131e:	4b0b      	ldr	r3, [pc, #44]	; (40134c <RTCIntHandler+0x44>)
  401320:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
  401322:	2b00      	cmp	r3, #0
  401324:	d10d      	bne.n	401342 <RTCIntHandler+0x3a>
    {
        /* Increment Time Var */
        if(minCtr < TRACKING_INTERVAL)
  401326:	4b0a      	ldr	r3, [pc, #40]	; (401350 <RTCIntHandler+0x48>)
  401328:	781b      	ldrb	r3, [r3, #0]
  40132a:	b2db      	uxtb	r3, r3
  40132c:	2b02      	cmp	r3, #2
  40132e:	d808      	bhi.n	401342 <RTCIntHandler+0x3a>
            minCtr++;
  401330:	4b07      	ldr	r3, [pc, #28]	; (401350 <RTCIntHandler+0x48>)
  401332:	781b      	ldrb	r3, [r3, #0]
  401334:	b2db      	uxtb	r3, r3
  401336:	3301      	adds	r3, #1
  401338:	b2da      	uxtb	r2, r3
  40133a:	4b05      	ldr	r3, [pc, #20]	; (401350 <RTCIntHandler+0x48>)
  40133c:	701a      	strb	r2, [r3, #0]
  40133e:	e000      	b.n	401342 <RTCIntHandler+0x3a>

/* RTC 1 Min ISR */
void RTCIntHandler(uint32_t ul_id, uint32_t ul_mask)
{
    if (PIN_RTC_INT_PIO_ID != ul_id || PIN_RTC_INT_MASK != ul_mask)
		return;
  401340:	bf00      	nop
    {
        /* Increment Time Var */
        if(minCtr < TRACKING_INTERVAL)
            minCtr++;
    }
}
  401342:	370c      	adds	r7, #12
  401344:	46bd      	mov	sp, r7
  401346:	bc80      	pop	{r7}
  401348:	4770      	bx	lr
  40134a:	bf00      	nop
  40134c:	20000bc4 	.word	0x20000bc4
  401350:	20000c15 	.word	0x20000c15

00401354 <vPvTrackerTask>:

void vPvTrackerTask(void *pvParameters)
{
  401354:	b5f0      	push	{r4, r5, r6, r7, lr}
  401356:	b085      	sub	sp, #20
  401358:	af00      	add	r7, sp, #0
  40135a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0;
  40135c:	2300      	movs	r3, #0
  40135e:	73fb      	strb	r3, [r7, #15]
		
    #ifdef LOG_EN
		sprintf(LogBuff, "Hrs,Mins,Secs,Tracking Mode,PvAngle,BkAngle\r\n");
  401360:	4b28      	ldr	r3, [pc, #160]	; (401404 <vPvTrackerTask+0xb0>)
  401362:	4a29      	ldr	r2, [pc, #164]	; (401408 <vPvTrackerTask+0xb4>)
  401364:	4614      	mov	r4, r2
  401366:	469e      	mov	lr, r3
  401368:	f104 0c20 	add.w	ip, r4, #32
  40136c:	4675      	mov	r5, lr
  40136e:	4626      	mov	r6, r4
  401370:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  401372:	6028      	str	r0, [r5, #0]
  401374:	6069      	str	r1, [r5, #4]
  401376:	60aa      	str	r2, [r5, #8]
  401378:	60eb      	str	r3, [r5, #12]
  40137a:	3410      	adds	r4, #16
  40137c:	f10e 0e10 	add.w	lr, lr, #16
  401380:	4564      	cmp	r4, ip
  401382:	d1f3      	bne.n	40136c <vPvTrackerTask+0x18>
  401384:	4675      	mov	r5, lr
  401386:	4623      	mov	r3, r4
  401388:	cb07      	ldmia	r3!, {r0, r1, r2}
  40138a:	6028      	str	r0, [r5, #0]
  40138c:	6069      	str	r1, [r5, #4]
  40138e:	60aa      	str	r2, [r5, #8]
  401390:	881b      	ldrh	r3, [r3, #0]
  401392:	81ab      	strh	r3, [r5, #12]
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
  401394:	481b      	ldr	r0, [pc, #108]	; (401404 <vPvTrackerTask+0xb0>)
  401396:	4b1d      	ldr	r3, [pc, #116]	; (40140c <vPvTrackerTask+0xb8>)
  401398:	4798      	blx	r3
  40139a:	4603      	mov	r3, r0
  40139c:	b29b      	uxth	r3, r3
  40139e:	4619      	mov	r1, r3
  4013a0:	4818      	ldr	r0, [pc, #96]	; (401404 <vPvTrackerTask+0xb0>)
  4013a2:	4b1b      	ldr	r3, [pc, #108]	; (401410 <vPvTrackerTask+0xbc>)
  4013a4:	4798      	blx	r3
    #endif
	
	/* These Init routines are shifted here because they should only be called after the scheduler has started */
	/* Init Accelerometer */
	#ifndef ICM20648_USE_RTOS_API
		ICMInitialize(BOARD_TWI, ICM_ADDR);
  4013a6:	2169      	movs	r1, #105	; 0x69
  4013a8:	481a      	ldr	r0, [pc, #104]	; (401414 <vPvTrackerTask+0xc0>)
  4013aa:	4b1b      	ldr	r3, [pc, #108]	; (401418 <vPvTrackerTask+0xc4>)
  4013ac:	4798      	blx	r3
		ICMInitializeTo(twiPort, ICM_ADDR, 50);
	#endif

	/* Init RTC 1 min Alarm */
	#ifndef DS3231_USE_RTOS_API
		DSEnAL2(BOARD_TWI, 1);
  4013ae:	2101      	movs	r1, #1
  4013b0:	4818      	ldr	r0, [pc, #96]	; (401414 <vPvTrackerTask+0xc0>)
  4013b2:	4b1a      	ldr	r3, [pc, #104]	; (40141c <vPvTrackerTask+0xc8>)
  4013b4:	4798      	blx	r3

	while(1)
    {
		/* Clear RTC interrupt flag */
		#ifndef DS3231_USE_RTOS_API
			DSReadByte(BOARD_TWI, DS_REG_STAT,&status);
  4013b6:	f107 030f 	add.w	r3, r7, #15
  4013ba:	461a      	mov	r2, r3
  4013bc:	210f      	movs	r1, #15
  4013be:	4815      	ldr	r0, [pc, #84]	; (401414 <vPvTrackerTask+0xc0>)
  4013c0:	4b17      	ldr	r3, [pc, #92]	; (401420 <vPvTrackerTask+0xcc>)
  4013c2:	4798      	blx	r3
		#else
			DSReadByteTo(twiPort, DS_REG_STAT,&status,50);
		#endif
        if(status&0x02)
  4013c4:	7bfb      	ldrb	r3, [r7, #15]
  4013c6:	f003 0302 	and.w	r3, r3, #2
  4013ca:	2b00      	cmp	r3, #0
  4013cc:	d004      	beq.n	4013d8 <vPvTrackerTask+0x84>
        {
            /* Clear Status Reg */
			#ifndef DS3231_USE_RTOS_API
				DSWriteByte(BOARD_TWI, DS_REG_STAT, 0x00);
  4013ce:	2200      	movs	r2, #0
  4013d0:	210f      	movs	r1, #15
  4013d2:	4810      	ldr	r0, [pc, #64]	; (401414 <vPvTrackerTask+0xc0>)
  4013d4:	4b13      	ldr	r3, [pc, #76]	; (401424 <vPvTrackerTask+0xd0>)
  4013d6:	4798      	blx	r3
				DSWriteByteTo(twiPort, DS_REG_STAT, 0x00, 50);
			#endif
        }
        
        /* In Tracking / Auto Mode */
        if(!mBusRegs[MBUS_REG_OPMODE])
  4013d8:	4b13      	ldr	r3, [pc, #76]	; (401428 <vPvTrackerTask+0xd4>)
  4013da:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
  4013dc:	2b00      	cmp	r3, #0
  4013de:	d10a      	bne.n	4013f6 <vPvTrackerTask+0xa2>
        {
			/* If Tracking Time Expired */
            if(minCtr >= TRACKING_INTERVAL)
  4013e0:	4b12      	ldr	r3, [pc, #72]	; (40142c <vPvTrackerTask+0xd8>)
  4013e2:	781b      	ldrb	r3, [r3, #0]
  4013e4:	b2db      	uxtb	r3, r3
  4013e6:	2b02      	cmp	r3, #2
  4013e8:	d907      	bls.n	4013fa <vPvTrackerTask+0xa6>
            {
                PVTrack();
  4013ea:	4b11      	ldr	r3, [pc, #68]	; (401430 <vPvTrackerTask+0xdc>)
  4013ec:	4798      	blx	r3
                minCtr = 0;
  4013ee:	4b0f      	ldr	r3, [pc, #60]	; (40142c <vPvTrackerTask+0xd8>)
  4013f0:	2200      	movs	r2, #0
  4013f2:	701a      	strb	r2, [r3, #0]
  4013f4:	e001      	b.n	4013fa <vPvTrackerTask+0xa6>
            /* LED1 Heart Beat Status (No Block) */
        }
        else
        {
            /* In Manual Mode */
            TestCode();
  4013f6:	4b0f      	ldr	r3, [pc, #60]	; (401434 <vPvTrackerTask+0xe0>)
  4013f8:	4798      	blx	r3
        }
        //vTaskDelay(pdMS_TO_TICKS(1000));
		vTaskDelay(200);
  4013fa:	20c8      	movs	r0, #200	; 0xc8
  4013fc:	4b0e      	ldr	r3, [pc, #56]	; (401438 <vPvTrackerTask+0xe4>)
  4013fe:	4798      	blx	r3
    }
  401400:	e7d9      	b.n	4013b6 <vPvTrackerTask+0x62>
  401402:	bf00      	nop
  401404:	20002eb0 	.word	0x20002eb0
  401408:	0040f860 	.word	0x0040f860
  40140c:	0040bb41 	.word	0x0040bb41
  401410:	004008b1 	.word	0x004008b1
  401414:	40018000 	.word	0x40018000
  401418:	00400ba9 	.word	0x00400ba9
  40141c:	00400ac1 	.word	0x00400ac1
  401420:	00400b6d 	.word	0x00400b6d
  401424:	00400b31 	.word	0x00400b31
  401428:	20000bc4 	.word	0x20000bc4
  40142c:	20000c15 	.word	0x20000c15
  401430:	004019ad 	.word	0x004019ad
  401434:	00401bb9 	.word	0x00401bb9
  401438:	00406479 	.word	0x00406479

0040143c <vPvTrackerInit>:
}

void vPvTrackerInit(void)
{
  40143c:	b580      	push	{r7, lr}
  40143e:	af00      	add	r7, sp, #0
    /* Initialize all peripherals */
    /* Initialize TWI Port */
    //InitTwiRTOS();
	InitTWI();
  401440:	4b04      	ldr	r3, [pc, #16]	; (401454 <vPvTrackerInit+0x18>)
  401442:	4798      	blx	r3
	/* Init TWI ADC */

	/* Initialize Variables from EEPROM */
    InitVars();
  401444:	4b04      	ldr	r3, [pc, #16]	; (401458 <vPvTrackerInit+0x1c>)
  401446:	4798      	blx	r3
    
    /* Init Motor Controller */
	#ifndef MOTOR_CTRL_A4955
	#else
		/* Put driver in sleep mode */
		gpio_set_pin_low(PIN_MOTOR_SLP_IDX);
  401448:	2022      	movs	r0, #34	; 0x22
  40144a:	4b04      	ldr	r3, [pc, #16]	; (40145c <vPvTrackerInit+0x20>)
  40144c:	4798      	blx	r3
	#endif
}
  40144e:	bf00      	nop
  401450:	bd80      	pop	{r7, pc}
  401452:	bf00      	nop
  401454:	0040195d 	.word	0x0040195d
  401458:	00401461 	.word	0x00401461
  40145c:	004047e5 	.word	0x004047e5

00401460 <InitVars>:

/* Initializes RAM variables from Ext. EERPOM */
void InitVars(void)
{
  401460:	b590      	push	{r4, r7, lr}
  401462:	b08f      	sub	sp, #60	; 0x3c
  401464:	af02      	add	r7, sp, #8
    uint16_t *ptr;
	uint8_t *ptr8;

	uint8_t memBuff[(EE_REG_DEFCONFIG - EE_REG_BASE) + 1];
    /* Read vars from Memory */
	ReadEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_BASE, memBuff, (EE_REG_DEFCONFIG - EE_REG_BASE) + 1);
  401466:	1d3a      	adds	r2, r7, #4
  401468:	2321      	movs	r3, #33	; 0x21
  40146a:	9300      	str	r3, [sp, #0]
  40146c:	4613      	mov	r3, r2
  40146e:	2200      	movs	r2, #0
  401470:	2150      	movs	r1, #80	; 0x50
  401472:	4897      	ldr	r0, [pc, #604]	; (4016d0 <InitVars+0x270>)
  401474:	4c97      	ldr	r4, [pc, #604]	; (4016d4 <InitVars+0x274>)
  401476:	47a0      	blx	r4
	
	#ifndef FORCE_WRITE_DEF_VALS
		/* Check for known value in default config register */
		if(memBuff[(EE_REG_DEFCONFIG - EE_REG_BASE)] == 0xAB)
  401478:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
  40147c:	2bab      	cmp	r3, #171	; 0xab
  40147e:	f040 817a 	bne.w	401776 <InitVars+0x316>
		{
			/* Configuration already exists, load values from EEPROM */
		
			/* Update LATL and LATH Regs */
			mBusRegs[MBUS_REG_LATL] = memBuff[EE_REG_LAT1 - EE_REG_BASE];
  401482:	797b      	ldrb	r3, [r7, #5]
  401484:	b29a      	uxth	r2, r3
  401486:	4b94      	ldr	r3, [pc, #592]	; (4016d8 <InitVars+0x278>)
  401488:	821a      	strh	r2, [r3, #16]
			mBusRegs[MBUS_REG_LATL] = (mBusRegs[MBUS_REG_LATL]<<8) | memBuff[EE_REG_LAT0 - EE_REG_BASE];
  40148a:	4b93      	ldr	r3, [pc, #588]	; (4016d8 <InitVars+0x278>)
  40148c:	8a1b      	ldrh	r3, [r3, #16]
  40148e:	021b      	lsls	r3, r3, #8
  401490:	b21a      	sxth	r2, r3
  401492:	793b      	ldrb	r3, [r7, #4]
  401494:	b21b      	sxth	r3, r3
  401496:	4313      	orrs	r3, r2
  401498:	b21b      	sxth	r3, r3
  40149a:	b29a      	uxth	r2, r3
  40149c:	4b8e      	ldr	r3, [pc, #568]	; (4016d8 <InitVars+0x278>)
  40149e:	821a      	strh	r2, [r3, #16]
			mBusRegs[MBUS_REG_LATH] = memBuff[EE_REG_LAT3 - EE_REG_BASE];
  4014a0:	79fb      	ldrb	r3, [r7, #7]
  4014a2:	b29a      	uxth	r2, r3
  4014a4:	4b8c      	ldr	r3, [pc, #560]	; (4016d8 <InitVars+0x278>)
  4014a6:	825a      	strh	r2, [r3, #18]
			mBusRegs[MBUS_REG_LATH] = (mBusRegs[MBUS_REG_LATH]<<8) | memBuff[EE_REG_LAT2 - EE_REG_BASE];
  4014a8:	4b8b      	ldr	r3, [pc, #556]	; (4016d8 <InitVars+0x278>)
  4014aa:	8a5b      	ldrh	r3, [r3, #18]
  4014ac:	021b      	lsls	r3, r3, #8
  4014ae:	b21a      	sxth	r2, r3
  4014b0:	79bb      	ldrb	r3, [r7, #6]
  4014b2:	b21b      	sxth	r3, r3
  4014b4:	4313      	orrs	r3, r2
  4014b6:	b21b      	sxth	r3, r3
  4014b8:	b29a      	uxth	r2, r3
  4014ba:	4b87      	ldr	r3, [pc, #540]	; (4016d8 <InitVars+0x278>)
  4014bc:	825a      	strh	r2, [r3, #18]
		
			/* Update LONL and LONH Regs */
			mBusRegs[MBUS_REG_LONL] = memBuff[EE_REG_LON1 - EE_REG_BASE];
  4014be:	7a7b      	ldrb	r3, [r7, #9]
  4014c0:	b29a      	uxth	r2, r3
  4014c2:	4b85      	ldr	r3, [pc, #532]	; (4016d8 <InitVars+0x278>)
  4014c4:	829a      	strh	r2, [r3, #20]
			mBusRegs[MBUS_REG_LONL] = (mBusRegs[MBUS_REG_LONL]<<8) | memBuff[EE_REG_LON0 - EE_REG_BASE];
  4014c6:	4b84      	ldr	r3, [pc, #528]	; (4016d8 <InitVars+0x278>)
  4014c8:	8a9b      	ldrh	r3, [r3, #20]
  4014ca:	021b      	lsls	r3, r3, #8
  4014cc:	b21a      	sxth	r2, r3
  4014ce:	7a3b      	ldrb	r3, [r7, #8]
  4014d0:	b21b      	sxth	r3, r3
  4014d2:	4313      	orrs	r3, r2
  4014d4:	b21b      	sxth	r3, r3
  4014d6:	b29a      	uxth	r2, r3
  4014d8:	4b7f      	ldr	r3, [pc, #508]	; (4016d8 <InitVars+0x278>)
  4014da:	829a      	strh	r2, [r3, #20]
			mBusRegs[MBUS_REG_LONH] = memBuff[EE_REG_LON3 - EE_REG_BASE];
  4014dc:	7afb      	ldrb	r3, [r7, #11]
  4014de:	b29a      	uxth	r2, r3
  4014e0:	4b7d      	ldr	r3, [pc, #500]	; (4016d8 <InitVars+0x278>)
  4014e2:	82da      	strh	r2, [r3, #22]
			mBusRegs[MBUS_REG_LONH] = (mBusRegs[MBUS_REG_LONH]<<8) | memBuff[EE_REG_LON2 - EE_REG_BASE];
  4014e4:	4b7c      	ldr	r3, [pc, #496]	; (4016d8 <InitVars+0x278>)
  4014e6:	8adb      	ldrh	r3, [r3, #22]
  4014e8:	021b      	lsls	r3, r3, #8
  4014ea:	b21a      	sxth	r2, r3
  4014ec:	7abb      	ldrb	r3, [r7, #10]
  4014ee:	b21b      	sxth	r3, r3
  4014f0:	4313      	orrs	r3, r2
  4014f2:	b21b      	sxth	r3, r3
  4014f4:	b29a      	uxth	r2, r3
  4014f6:	4b78      	ldr	r3, [pc, #480]	; (4016d8 <InitVars+0x278>)
  4014f8:	82da      	strh	r2, [r3, #22]
		
			/* Update TZL and TZH Regs */
			mBusRegs[MBUS_REG_TZL] = memBuff[EE_REG_TZ1 - EE_REG_BASE];
  4014fa:	7b7b      	ldrb	r3, [r7, #13]
  4014fc:	b29a      	uxth	r2, r3
  4014fe:	4b76      	ldr	r3, [pc, #472]	; (4016d8 <InitVars+0x278>)
  401500:	831a      	strh	r2, [r3, #24]
			mBusRegs[MBUS_REG_TZL] = (mBusRegs[MBUS_REG_TZL]<<8) | memBuff[EE_REG_TZ0 - EE_REG_BASE];
  401502:	4b75      	ldr	r3, [pc, #468]	; (4016d8 <InitVars+0x278>)
  401504:	8b1b      	ldrh	r3, [r3, #24]
  401506:	021b      	lsls	r3, r3, #8
  401508:	b21a      	sxth	r2, r3
  40150a:	7b3b      	ldrb	r3, [r7, #12]
  40150c:	b21b      	sxth	r3, r3
  40150e:	4313      	orrs	r3, r2
  401510:	b21b      	sxth	r3, r3
  401512:	b29a      	uxth	r2, r3
  401514:	4b70      	ldr	r3, [pc, #448]	; (4016d8 <InitVars+0x278>)
  401516:	831a      	strh	r2, [r3, #24]
			mBusRegs[MBUS_REG_TZH] = memBuff[EE_REG_TZ3 - EE_REG_BASE];
  401518:	7bfb      	ldrb	r3, [r7, #15]
  40151a:	b29a      	uxth	r2, r3
  40151c:	4b6e      	ldr	r3, [pc, #440]	; (4016d8 <InitVars+0x278>)
  40151e:	835a      	strh	r2, [r3, #26]
			mBusRegs[MBUS_REG_TZH] = (mBusRegs[MBUS_REG_TZH]<<8) | memBuff[EE_REG_TZ2 - EE_REG_BASE];
  401520:	4b6d      	ldr	r3, [pc, #436]	; (4016d8 <InitVars+0x278>)
  401522:	8b5b      	ldrh	r3, [r3, #26]
  401524:	021b      	lsls	r3, r3, #8
  401526:	b21a      	sxth	r2, r3
  401528:	7bbb      	ldrb	r3, [r7, #14]
  40152a:	b21b      	sxth	r3, r3
  40152c:	4313      	orrs	r3, r2
  40152e:	b21b      	sxth	r3, r3
  401530:	b29a      	uxth	r2, r3
  401532:	4b69      	ldr	r3, [pc, #420]	; (4016d8 <InitVars+0x278>)
  401534:	835a      	strh	r2, [r3, #26]
		
			/* Update DISTL and DISTH Regs */
			mBusRegs[MBUS_REG_DISTL] = memBuff[EE_REG_DIST1 - EE_REG_BASE];
  401536:	7c7b      	ldrb	r3, [r7, #17]
  401538:	b29a      	uxth	r2, r3
  40153a:	4b67      	ldr	r3, [pc, #412]	; (4016d8 <InitVars+0x278>)
  40153c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			mBusRegs[MBUS_REG_DISTL] = (mBusRegs[MBUS_REG_DISTL]<<8) | memBuff[EE_REG_DIST0 - EE_REG_BASE];
  401540:	4b65      	ldr	r3, [pc, #404]	; (4016d8 <InitVars+0x278>)
  401542:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
  401546:	021b      	lsls	r3, r3, #8
  401548:	b21a      	sxth	r2, r3
  40154a:	7c3b      	ldrb	r3, [r7, #16]
  40154c:	b21b      	sxth	r3, r3
  40154e:	4313      	orrs	r3, r2
  401550:	b21b      	sxth	r3, r3
  401552:	b29a      	uxth	r2, r3
  401554:	4b60      	ldr	r3, [pc, #384]	; (4016d8 <InitVars+0x278>)
  401556:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			mBusRegs[MBUS_REG_DISTH] = memBuff[EE_REG_DIST3 - EE_REG_BASE];
  40155a:	7cfb      	ldrb	r3, [r7, #19]
  40155c:	b29a      	uxth	r2, r3
  40155e:	4b5e      	ldr	r3, [pc, #376]	; (4016d8 <InitVars+0x278>)
  401560:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			mBusRegs[MBUS_REG_DISTH] = (mBusRegs[MBUS_REG_DISTH]<<8) | memBuff[EE_REG_DIST2 - EE_REG_BASE];
  401564:	4b5c      	ldr	r3, [pc, #368]	; (4016d8 <InitVars+0x278>)
  401566:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
  40156a:	021b      	lsls	r3, r3, #8
  40156c:	b21a      	sxth	r2, r3
  40156e:	7cbb      	ldrb	r3, [r7, #18]
  401570:	b21b      	sxth	r3, r3
  401572:	4313      	orrs	r3, r2
  401574:	b21b      	sxth	r3, r3
  401576:	b29a      	uxth	r2, r3
  401578:	4b57      	ldr	r3, [pc, #348]	; (4016d8 <InitVars+0x278>)
  40157a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

			/* Update WIDTHL and WIDTH Regs */
			mBusRegs[MBUS_REG_WIDTHL] = memBuff[EE_REG_WIDTH1 - EE_REG_BASE];
  40157e:	7d7b      	ldrb	r3, [r7, #21]
  401580:	b29a      	uxth	r2, r3
  401582:	4b55      	ldr	r3, [pc, #340]	; (4016d8 <InitVars+0x278>)
  401584:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			mBusRegs[MBUS_REG_WIDTHL] = (mBusRegs[MBUS_REG_WIDTHL]<<8) | memBuff[EE_REG_WIDTH0 - EE_REG_BASE];
  401588:	4b53      	ldr	r3, [pc, #332]	; (4016d8 <InitVars+0x278>)
  40158a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
  40158e:	021b      	lsls	r3, r3, #8
  401590:	b21a      	sxth	r2, r3
  401592:	7d3b      	ldrb	r3, [r7, #20]
  401594:	b21b      	sxth	r3, r3
  401596:	4313      	orrs	r3, r2
  401598:	b21b      	sxth	r3, r3
  40159a:	b29a      	uxth	r2, r3
  40159c:	4b4e      	ldr	r3, [pc, #312]	; (4016d8 <InitVars+0x278>)
  40159e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			mBusRegs[MBUS_REG_WIDTHH] = memBuff[EE_REG_WIDTH3 - EE_REG_BASE];
  4015a2:	7dfb      	ldrb	r3, [r7, #23]
  4015a4:	b29a      	uxth	r2, r3
  4015a6:	4b4c      	ldr	r3, [pc, #304]	; (4016d8 <InitVars+0x278>)
  4015a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			mBusRegs[MBUS_REG_WIDTHH] = (mBusRegs[MBUS_REG_WIDTHH]<<8) | memBuff[EE_REG_WIDTH2 - EE_REG_BASE];
  4015ac:	4b4a      	ldr	r3, [pc, #296]	; (4016d8 <InitVars+0x278>)
  4015ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
  4015b2:	021b      	lsls	r3, r3, #8
  4015b4:	b21a      	sxth	r2, r3
  4015b6:	7dbb      	ldrb	r3, [r7, #22]
  4015b8:	b21b      	sxth	r3, r3
  4015ba:	4313      	orrs	r3, r2
  4015bc:	b21b      	sxth	r3, r3
  4015be:	b29a      	uxth	r2, r3
  4015c0:	4b45      	ldr	r3, [pc, #276]	; (4016d8 <InitVars+0x278>)
  4015c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			/* Update PNLRNGL and PNLRNGH Regs */
			mBusRegs[MBUS_REG_PNLRNGL] = memBuff[EE_REG_PNLRNG1 - EE_REG_BASE];
  4015c6:	7e7b      	ldrb	r3, [r7, #25]
  4015c8:	b29a      	uxth	r2, r3
  4015ca:	4b43      	ldr	r3, [pc, #268]	; (4016d8 <InitVars+0x278>)
  4015cc:	849a      	strh	r2, [r3, #36]	; 0x24
			mBusRegs[MBUS_REG_PNLRNGL] = (mBusRegs[MBUS_REG_PNLRNGL]<<8) | memBuff[EE_REG_PNLRNG0 - EE_REG_BASE];
  4015ce:	4b42      	ldr	r3, [pc, #264]	; (4016d8 <InitVars+0x278>)
  4015d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  4015d2:	021b      	lsls	r3, r3, #8
  4015d4:	b21a      	sxth	r2, r3
  4015d6:	7e3b      	ldrb	r3, [r7, #24]
  4015d8:	b21b      	sxth	r3, r3
  4015da:	4313      	orrs	r3, r2
  4015dc:	b21b      	sxth	r3, r3
  4015de:	b29a      	uxth	r2, r3
  4015e0:	4b3d      	ldr	r3, [pc, #244]	; (4016d8 <InitVars+0x278>)
  4015e2:	849a      	strh	r2, [r3, #36]	; 0x24
			mBusRegs[MBUS_REG_PNLRNGH] = memBuff[EE_REG_PNLRNG3 - EE_REG_BASE];
  4015e4:	7efb      	ldrb	r3, [r7, #27]
  4015e6:	b29a      	uxth	r2, r3
  4015e8:	4b3b      	ldr	r3, [pc, #236]	; (4016d8 <InitVars+0x278>)
  4015ea:	84da      	strh	r2, [r3, #38]	; 0x26
			mBusRegs[MBUS_REG_PNLRNGH] = (mBusRegs[MBUS_REG_PNLRNGH]<<8) | memBuff[EE_REG_PNLRNG2 - EE_REG_BASE];
  4015ec:	4b3a      	ldr	r3, [pc, #232]	; (4016d8 <InitVars+0x278>)
  4015ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
  4015f0:	021b      	lsls	r3, r3, #8
  4015f2:	b21a      	sxth	r2, r3
  4015f4:	7ebb      	ldrb	r3, [r7, #26]
  4015f6:	b21b      	sxth	r3, r3
  4015f8:	4313      	orrs	r3, r2
  4015fa:	b21b      	sxth	r3, r3
  4015fc:	b29a      	uxth	r2, r3
  4015fe:	4b36      	ldr	r3, [pc, #216]	; (4016d8 <InitVars+0x278>)
  401600:	84da      	strh	r2, [r3, #38]	; 0x26

			/* Update BKPARAM1L and BKPARAM1H Regs */
			mBusRegs[MBUS_REG_BKPARAM1L] = memBuff[EE_REG_BKPARAM11 - EE_REG_BASE];
  401602:	7f7b      	ldrb	r3, [r7, #29]
  401604:	b29a      	uxth	r2, r3
  401606:	4b34      	ldr	r3, [pc, #208]	; (4016d8 <InitVars+0x278>)
  401608:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			mBusRegs[MBUS_REG_BKPARAM1L] = (mBusRegs[MBUS_REG_BKPARAM1L]<<8) | memBuff[EE_REG_BKPARAM10 - EE_REG_BASE];
  40160c:	4b32      	ldr	r3, [pc, #200]	; (4016d8 <InitVars+0x278>)
  40160e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
  401612:	021b      	lsls	r3, r3, #8
  401614:	b21a      	sxth	r2, r3
  401616:	7f3b      	ldrb	r3, [r7, #28]
  401618:	b21b      	sxth	r3, r3
  40161a:	4313      	orrs	r3, r2
  40161c:	b21b      	sxth	r3, r3
  40161e:	b29a      	uxth	r2, r3
  401620:	4b2d      	ldr	r3, [pc, #180]	; (4016d8 <InitVars+0x278>)
  401622:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			mBusRegs[MBUS_REG_BKPARAM1H] = memBuff[EE_REG_BKPARAM13 - EE_REG_BASE];
  401626:	7ffb      	ldrb	r3, [r7, #31]
  401628:	b29a      	uxth	r2, r3
  40162a:	4b2b      	ldr	r3, [pc, #172]	; (4016d8 <InitVars+0x278>)
  40162c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			mBusRegs[MBUS_REG_BKPARAM1H] = (mBusRegs[MBUS_REG_BKPARAM1H]<<8) | memBuff[EE_REG_BKPARAM12 - EE_REG_BASE];
  401630:	4b29      	ldr	r3, [pc, #164]	; (4016d8 <InitVars+0x278>)
  401632:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
  401636:	021b      	lsls	r3, r3, #8
  401638:	b21a      	sxth	r2, r3
  40163a:	7fbb      	ldrb	r3, [r7, #30]
  40163c:	b21b      	sxth	r3, r3
  40163e:	4313      	orrs	r3, r2
  401640:	b21b      	sxth	r3, r3
  401642:	b29a      	uxth	r2, r3
  401644:	4b24      	ldr	r3, [pc, #144]	; (4016d8 <InitVars+0x278>)
  401646:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			/* Update BKPARAM2L and BKPARAM2H Regs */
			mBusRegs[MBUS_REG_BKPARAM2L] = memBuff[EE_REG_BKPARAM21 - EE_REG_BASE];
  40164a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  40164e:	b29a      	uxth	r2, r3
  401650:	4b21      	ldr	r3, [pc, #132]	; (4016d8 <InitVars+0x278>)
  401652:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			mBusRegs[MBUS_REG_BKPARAM2L] = (mBusRegs[MBUS_REG_BKPARAM2L]<<8) | memBuff[EE_REG_BKPARAM20 - EE_REG_BASE];
  401656:	4b20      	ldr	r3, [pc, #128]	; (4016d8 <InitVars+0x278>)
  401658:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  40165c:	021b      	lsls	r3, r3, #8
  40165e:	b21a      	sxth	r2, r3
  401660:	f897 3020 	ldrb.w	r3, [r7, #32]
  401664:	b21b      	sxth	r3, r3
  401666:	4313      	orrs	r3, r2
  401668:	b21b      	sxth	r3, r3
  40166a:	b29a      	uxth	r2, r3
  40166c:	4b1a      	ldr	r3, [pc, #104]	; (4016d8 <InitVars+0x278>)
  40166e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			mBusRegs[MBUS_REG_BKPARAM2H] = memBuff[EE_REG_BKPARAM23 - EE_REG_BASE];
  401672:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401676:	b29a      	uxth	r2, r3
  401678:	4b17      	ldr	r3, [pc, #92]	; (4016d8 <InitVars+0x278>)
  40167a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			mBusRegs[MBUS_REG_BKPARAM2H] = (mBusRegs[MBUS_REG_BKPARAM2H]<<8) | memBuff[EE_REG_BKPARAM22 - EE_REG_BASE];
  40167e:	4b16      	ldr	r3, [pc, #88]	; (4016d8 <InitVars+0x278>)
  401680:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
  401684:	021b      	lsls	r3, r3, #8
  401686:	b21a      	sxth	r2, r3
  401688:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  40168c:	b21b      	sxth	r3, r3
  40168e:	4313      	orrs	r3, r2
  401690:	b21b      	sxth	r3, r3
  401692:	b29a      	uxth	r2, r3
  401694:	4b10      	ldr	r3, [pc, #64]	; (4016d8 <InitVars+0x278>)
  401696:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

			/* Init local vars */
			ptr = (uint16_t*)&lat;
  40169a:	4b10      	ldr	r3, [pc, #64]	; (4016dc <InitVars+0x27c>)
  40169c:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_LATH];
  40169e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4016a0:	3302      	adds	r3, #2
  4016a2:	4a0d      	ldr	r2, [pc, #52]	; (4016d8 <InitVars+0x278>)
  4016a4:	8a52      	ldrh	r2, [r2, #18]
  4016a6:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_LATL];
  4016a8:	4b0b      	ldr	r3, [pc, #44]	; (4016d8 <InitVars+0x278>)
  4016aa:	8a1a      	ldrh	r2, [r3, #16]
  4016ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4016ae:	801a      	strh	r2, [r3, #0]
			ptr = (uint16_t*)&lon;
  4016b0:	4b0b      	ldr	r3, [pc, #44]	; (4016e0 <InitVars+0x280>)
  4016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_LONH];
  4016b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4016b6:	3302      	adds	r3, #2
  4016b8:	4a07      	ldr	r2, [pc, #28]	; (4016d8 <InitVars+0x278>)
  4016ba:	8ad2      	ldrh	r2, [r2, #22]
  4016bc:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_LONL];
  4016be:	4b06      	ldr	r3, [pc, #24]	; (4016d8 <InitVars+0x278>)
  4016c0:	8a9a      	ldrh	r2, [r3, #20]
  4016c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4016c4:	801a      	strh	r2, [r3, #0]
			ptr = (uint16_t*)&timeZone;
  4016c6:	4b07      	ldr	r3, [pc, #28]	; (4016e4 <InitVars+0x284>)
  4016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_TZH];
  4016ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4016cc:	3302      	adds	r3, #2
  4016ce:	e00b      	b.n	4016e8 <InitVars+0x288>
  4016d0:	40018000 	.word	0x40018000
  4016d4:	00400615 	.word	0x00400615
  4016d8:	20000bc4 	.word	0x20000bc4
  4016dc:	200000fc 	.word	0x200000fc
  4016e0:	20000100 	.word	0x20000100
  4016e4:	20000104 	.word	0x20000104
  4016e8:	4a8c      	ldr	r2, [pc, #560]	; (40191c <InitVars+0x4bc>)
  4016ea:	8b52      	ldrh	r2, [r2, #26]
  4016ec:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_TZL];
  4016ee:	4b8b      	ldr	r3, [pc, #556]	; (40191c <InitVars+0x4bc>)
  4016f0:	8b1a      	ldrh	r2, [r3, #24]
  4016f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4016f4:	801a      	strh	r2, [r3, #0]
			ptr = (uint16_t*)&width;
  4016f6:	4b8a      	ldr	r3, [pc, #552]	; (401920 <InitVars+0x4c0>)
  4016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_WIDTHH];
  4016fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4016fc:	3302      	adds	r3, #2
  4016fe:	4a87      	ldr	r2, [pc, #540]	; (40191c <InitVars+0x4bc>)
  401700:	f8b2 2046 	ldrh.w	r2, [r2, #70]	; 0x46
  401704:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_WIDTHL];
  401706:	4b85      	ldr	r3, [pc, #532]	; (40191c <InitVars+0x4bc>)
  401708:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
  40170c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40170e:	801a      	strh	r2, [r3, #0]
			ptr = (uint16_t*)&dist;
  401710:	4b84      	ldr	r3, [pc, #528]	; (401924 <InitVars+0x4c4>)
  401712:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_DISTH];
  401714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401716:	3302      	adds	r3, #2
  401718:	4a80      	ldr	r2, [pc, #512]	; (40191c <InitVars+0x4bc>)
  40171a:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
  40171e:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_DISTL];
  401720:	4b7e      	ldr	r3, [pc, #504]	; (40191c <InitVars+0x4bc>)
  401722:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
  401726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401728:	801a      	strh	r2, [r3, #0]
			ptr = (uint16_t*)&pvAngleRng;
  40172a:	4b7f      	ldr	r3, [pc, #508]	; (401928 <InitVars+0x4c8>)
  40172c:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_PNLRNGH];
  40172e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401730:	3302      	adds	r3, #2
  401732:	4a7a      	ldr	r2, [pc, #488]	; (40191c <InitVars+0x4bc>)
  401734:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
  401736:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_PNLRNGL];
  401738:	4b78      	ldr	r3, [pc, #480]	; (40191c <InitVars+0x4bc>)
  40173a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
  40173c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40173e:	801a      	strh	r2, [r3, #0]
			ptr = (uint16_t*)&bkTrkParam1;
  401740:	4b7a      	ldr	r3, [pc, #488]	; (40192c <InitVars+0x4cc>)
  401742:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_BKPARAM1H];
  401744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401746:	3302      	adds	r3, #2
  401748:	4a74      	ldr	r2, [pc, #464]	; (40191c <InitVars+0x4bc>)
  40174a:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
  40174e:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_BKPARAM1L];
  401750:	4b72      	ldr	r3, [pc, #456]	; (40191c <InitVars+0x4bc>)
  401752:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
  401756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401758:	801a      	strh	r2, [r3, #0]
			ptr = (uint16_t*)&bkTrkParam2;
  40175a:	4b75      	ldr	r3, [pc, #468]	; (401930 <InitVars+0x4d0>)
  40175c:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_BKPARAM2H];
  40175e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401760:	3302      	adds	r3, #2
  401762:	4a6e      	ldr	r2, [pc, #440]	; (40191c <InitVars+0x4bc>)
  401764:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
  401768:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_BKPARAM2L];
  40176a:	4b6c      	ldr	r3, [pc, #432]	; (40191c <InitVars+0x4bc>)
  40176c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
  401770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401772:	801a      	strh	r2, [r3, #0]
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_BKPARAM20, ptr8, 4);

			memBuff[0] = 0xAB;
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_DEFCONFIG, memBuff, 1);
		}
}
  401774:	e0cd      	b.n	401912 <InitVars+0x4b2>
		}
		else
	#endif
		{
			/* First time programming, write default configuration to EEPROM */
			lat = 17.46608f; 
  401776:	4b6f      	ldr	r3, [pc, #444]	; (401934 <InitVars+0x4d4>)
  401778:	4a6f      	ldr	r2, [pc, #444]	; (401938 <InitVars+0x4d8>)
  40177a:	601a      	str	r2, [r3, #0]
			lon = 78.44009f;
  40177c:	4b6f      	ldr	r3, [pc, #444]	; (40193c <InitVars+0x4dc>)
  40177e:	4a70      	ldr	r2, [pc, #448]	; (401940 <InitVars+0x4e0>)
  401780:	601a      	str	r2, [r3, #0]
			timeZone = 5.5f;
  401782:	4b70      	ldr	r3, [pc, #448]	; (401944 <InitVars+0x4e4>)
  401784:	4a70      	ldr	r2, [pc, #448]	; (401948 <InitVars+0x4e8>)
  401786:	601a      	str	r2, [r3, #0]
			dist = 5.0f;
  401788:	4b66      	ldr	r3, [pc, #408]	; (401924 <InitVars+0x4c4>)
  40178a:	4a70      	ldr	r2, [pc, #448]	; (40194c <InitVars+0x4ec>)
  40178c:	601a      	str	r2, [r3, #0]
			width = 2.0f;
  40178e:	4b64      	ldr	r3, [pc, #400]	; (401920 <InitVars+0x4c0>)
  401790:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401794:	601a      	str	r2, [r3, #0]
			/* Panels will track +/-pvAngleRng degrees. */
			pvAngleRng = 43;
  401796:	4b64      	ldr	r3, [pc, #400]	; (401928 <InitVars+0x4c8>)
  401798:	4a6d      	ldr	r2, [pc, #436]	; (401950 <InitVars+0x4f0>)
  40179a:	601a      	str	r2, [r3, #0]
			#warning "Backtracking Parameters uninitialized"
			/* Backtracking parameters */
			bkTrkParam1 = 0.0f;
  40179c:	4b63      	ldr	r3, [pc, #396]	; (40192c <InitVars+0x4cc>)
  40179e:	f04f 0200 	mov.w	r2, #0
  4017a2:	601a      	str	r2, [r3, #0]
			bkTrkParam1 = 0.0f;
  4017a4:	4b61      	ldr	r3, [pc, #388]	; (40192c <InitVars+0x4cc>)
  4017a6:	f04f 0200 	mov.w	r2, #0
  4017aa:	601a      	str	r2, [r3, #0]
			/* Init MODBUS Regs */
			ptr = (uint16_t*)&lat;
  4017ac:	4b61      	ldr	r3, [pc, #388]	; (401934 <InitVars+0x4d4>)
  4017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_LATH] = ptr[1];
  4017b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4017b2:	885a      	ldrh	r2, [r3, #2]
  4017b4:	4b59      	ldr	r3, [pc, #356]	; (40191c <InitVars+0x4bc>)
  4017b6:	825a      	strh	r2, [r3, #18]
			mBusRegs[MBUS_REG_LATL] = ptr[0];
  4017b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4017ba:	881a      	ldrh	r2, [r3, #0]
  4017bc:	4b57      	ldr	r3, [pc, #348]	; (40191c <InitVars+0x4bc>)
  4017be:	821a      	strh	r2, [r3, #16]
		
			ptr = (uint16_t*)&lon;
  4017c0:	4b5e      	ldr	r3, [pc, #376]	; (40193c <InitVars+0x4dc>)
  4017c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_LONH] = ptr[1];
  4017c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4017c6:	885a      	ldrh	r2, [r3, #2]
  4017c8:	4b54      	ldr	r3, [pc, #336]	; (40191c <InitVars+0x4bc>)
  4017ca:	82da      	strh	r2, [r3, #22]
			mBusRegs[MBUS_REG_LONL] = ptr[0];
  4017cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4017ce:	881a      	ldrh	r2, [r3, #0]
  4017d0:	4b52      	ldr	r3, [pc, #328]	; (40191c <InitVars+0x4bc>)
  4017d2:	829a      	strh	r2, [r3, #20]

			ptr = (uint16_t*)&timeZone;
  4017d4:	4b5b      	ldr	r3, [pc, #364]	; (401944 <InitVars+0x4e4>)
  4017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_TZH] = ptr[1];
  4017d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4017da:	885a      	ldrh	r2, [r3, #2]
  4017dc:	4b4f      	ldr	r3, [pc, #316]	; (40191c <InitVars+0x4bc>)
  4017de:	835a      	strh	r2, [r3, #26]
			mBusRegs[MBUS_REG_TZL] = ptr[0];
  4017e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4017e2:	881a      	ldrh	r2, [r3, #0]
  4017e4:	4b4d      	ldr	r3, [pc, #308]	; (40191c <InitVars+0x4bc>)
  4017e6:	831a      	strh	r2, [r3, #24]

			ptr = (uint16_t*)&width;
  4017e8:	4b4d      	ldr	r3, [pc, #308]	; (401920 <InitVars+0x4c0>)
  4017ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_WIDTHH] = ptr[1];
  4017ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4017ee:	885a      	ldrh	r2, [r3, #2]
  4017f0:	4b4a      	ldr	r3, [pc, #296]	; (40191c <InitVars+0x4bc>)
  4017f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			mBusRegs[MBUS_REG_WIDTHL] = ptr[0];
  4017f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4017f8:	881a      	ldrh	r2, [r3, #0]
  4017fa:	4b48      	ldr	r3, [pc, #288]	; (40191c <InitVars+0x4bc>)
  4017fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

			ptr = (uint16_t*)&dist;
  401800:	4b48      	ldr	r3, [pc, #288]	; (401924 <InitVars+0x4c4>)
  401802:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_DISTH] = ptr[1];
  401804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401806:	885a      	ldrh	r2, [r3, #2]
  401808:	4b44      	ldr	r3, [pc, #272]	; (40191c <InitVars+0x4bc>)
  40180a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			mBusRegs[MBUS_REG_DISTL] = ptr[0];
  40180e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401810:	881a      	ldrh	r2, [r3, #0]
  401812:	4b42      	ldr	r3, [pc, #264]	; (40191c <InitVars+0x4bc>)
  401814:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			ptr = (uint16_t*)&pvAngleRng;
  401818:	4b43      	ldr	r3, [pc, #268]	; (401928 <InitVars+0x4c8>)
  40181a:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_PNLRNGH] = ptr[1];
  40181c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40181e:	885a      	ldrh	r2, [r3, #2]
  401820:	4b3e      	ldr	r3, [pc, #248]	; (40191c <InitVars+0x4bc>)
  401822:	84da      	strh	r2, [r3, #38]	; 0x26
			mBusRegs[MBUS_REG_PNLRNGL] = ptr[0];
  401824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401826:	881a      	ldrh	r2, [r3, #0]
  401828:	4b3c      	ldr	r3, [pc, #240]	; (40191c <InitVars+0x4bc>)
  40182a:	849a      	strh	r2, [r3, #36]	; 0x24

			ptr = (uint16_t*)&bkTrkParam1;
  40182c:	4b3f      	ldr	r3, [pc, #252]	; (40192c <InitVars+0x4cc>)
  40182e:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_BKPARAM1H] = ptr[1];
  401830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401832:	885a      	ldrh	r2, [r3, #2]
  401834:	4b39      	ldr	r3, [pc, #228]	; (40191c <InitVars+0x4bc>)
  401836:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			mBusRegs[MBUS_REG_BKPARAM1L] = ptr[0];
  40183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40183c:	881a      	ldrh	r2, [r3, #0]
  40183e:	4b37      	ldr	r3, [pc, #220]	; (40191c <InitVars+0x4bc>)
  401840:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

			ptr = (uint16_t*)&bkTrkParam2;
  401844:	4b3a      	ldr	r3, [pc, #232]	; (401930 <InitVars+0x4d0>)
  401846:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_BKPARAM2H] = ptr[1];
  401848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40184a:	885a      	ldrh	r2, [r3, #2]
  40184c:	4b33      	ldr	r3, [pc, #204]	; (40191c <InitVars+0x4bc>)
  40184e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			mBusRegs[MBUS_REG_BKPARAM2L] = ptr[0];
  401852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401854:	881a      	ldrh	r2, [r3, #0]
  401856:	4b31      	ldr	r3, [pc, #196]	; (40191c <InitVars+0x4bc>)
  401858:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

			/* Update EEPROM */
			ptr8 = (uint8_t *)&lat;
  40185c:	4b35      	ldr	r3, [pc, #212]	; (401934 <InitVars+0x4d4>)
  40185e:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_LAT0, ptr8, 4);
  401860:	2304      	movs	r3, #4
  401862:	9300      	str	r3, [sp, #0]
  401864:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401866:	2200      	movs	r2, #0
  401868:	2150      	movs	r1, #80	; 0x50
  40186a:	483a      	ldr	r0, [pc, #232]	; (401954 <InitVars+0x4f4>)
  40186c:	4c3a      	ldr	r4, [pc, #232]	; (401958 <InitVars+0x4f8>)
  40186e:	47a0      	blx	r4

			ptr8 = (uint8_t *)&lon;
  401870:	4b32      	ldr	r3, [pc, #200]	; (40193c <InitVars+0x4dc>)
  401872:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_LON0, ptr8, 4);
  401874:	2304      	movs	r3, #4
  401876:	9300      	str	r3, [sp, #0]
  401878:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40187a:	2204      	movs	r2, #4
  40187c:	2150      	movs	r1, #80	; 0x50
  40187e:	4835      	ldr	r0, [pc, #212]	; (401954 <InitVars+0x4f4>)
  401880:	4c35      	ldr	r4, [pc, #212]	; (401958 <InitVars+0x4f8>)
  401882:	47a0      	blx	r4

			ptr8 = (uint8_t *)&timeZone;
  401884:	4b2f      	ldr	r3, [pc, #188]	; (401944 <InitVars+0x4e4>)
  401886:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_TZ0, ptr8, 4);
  401888:	2304      	movs	r3, #4
  40188a:	9300      	str	r3, [sp, #0]
  40188c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40188e:	2208      	movs	r2, #8
  401890:	2150      	movs	r1, #80	; 0x50
  401892:	4830      	ldr	r0, [pc, #192]	; (401954 <InitVars+0x4f4>)
  401894:	4c30      	ldr	r4, [pc, #192]	; (401958 <InitVars+0x4f8>)
  401896:	47a0      	blx	r4

			ptr8 = (uint8_t *)&width;
  401898:	4b21      	ldr	r3, [pc, #132]	; (401920 <InitVars+0x4c0>)
  40189a:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_WIDTH0, ptr8, 4);
  40189c:	2304      	movs	r3, #4
  40189e:	9300      	str	r3, [sp, #0]
  4018a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4018a2:	2210      	movs	r2, #16
  4018a4:	2150      	movs	r1, #80	; 0x50
  4018a6:	482b      	ldr	r0, [pc, #172]	; (401954 <InitVars+0x4f4>)
  4018a8:	4c2b      	ldr	r4, [pc, #172]	; (401958 <InitVars+0x4f8>)
  4018aa:	47a0      	blx	r4

			ptr8 = (uint8_t *)&dist;
  4018ac:	4b1d      	ldr	r3, [pc, #116]	; (401924 <InitVars+0x4c4>)
  4018ae:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_DIST0, ptr8, 4);
  4018b0:	2304      	movs	r3, #4
  4018b2:	9300      	str	r3, [sp, #0]
  4018b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4018b6:	220c      	movs	r2, #12
  4018b8:	2150      	movs	r1, #80	; 0x50
  4018ba:	4826      	ldr	r0, [pc, #152]	; (401954 <InitVars+0x4f4>)
  4018bc:	4c26      	ldr	r4, [pc, #152]	; (401958 <InitVars+0x4f8>)
  4018be:	47a0      	blx	r4

			ptr8 = (uint8_t *)&pvAngleRng;
  4018c0:	4b19      	ldr	r3, [pc, #100]	; (401928 <InitVars+0x4c8>)
  4018c2:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_PNLRNG0, ptr8, 4);
  4018c4:	2304      	movs	r3, #4
  4018c6:	9300      	str	r3, [sp, #0]
  4018c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4018ca:	2214      	movs	r2, #20
  4018cc:	2150      	movs	r1, #80	; 0x50
  4018ce:	4821      	ldr	r0, [pc, #132]	; (401954 <InitVars+0x4f4>)
  4018d0:	4c21      	ldr	r4, [pc, #132]	; (401958 <InitVars+0x4f8>)
  4018d2:	47a0      	blx	r4

			ptr8 = (uint8_t *)&bkTrkParam1;
  4018d4:	4b15      	ldr	r3, [pc, #84]	; (40192c <InitVars+0x4cc>)
  4018d6:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_BKPARAM10, ptr8, 4);
  4018d8:	2304      	movs	r3, #4
  4018da:	9300      	str	r3, [sp, #0]
  4018dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4018de:	2218      	movs	r2, #24
  4018e0:	2150      	movs	r1, #80	; 0x50
  4018e2:	481c      	ldr	r0, [pc, #112]	; (401954 <InitVars+0x4f4>)
  4018e4:	4c1c      	ldr	r4, [pc, #112]	; (401958 <InitVars+0x4f8>)
  4018e6:	47a0      	blx	r4

			ptr8 = (uint8_t *)&bkTrkParam2;
  4018e8:	4b11      	ldr	r3, [pc, #68]	; (401930 <InitVars+0x4d0>)
  4018ea:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_BKPARAM20, ptr8, 4);
  4018ec:	2304      	movs	r3, #4
  4018ee:	9300      	str	r3, [sp, #0]
  4018f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4018f2:	221c      	movs	r2, #28
  4018f4:	2150      	movs	r1, #80	; 0x50
  4018f6:	4817      	ldr	r0, [pc, #92]	; (401954 <InitVars+0x4f4>)
  4018f8:	4c17      	ldr	r4, [pc, #92]	; (401958 <InitVars+0x4f8>)
  4018fa:	47a0      	blx	r4

			memBuff[0] = 0xAB;
  4018fc:	23ab      	movs	r3, #171	; 0xab
  4018fe:	713b      	strb	r3, [r7, #4]
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_DEFCONFIG, memBuff, 1);
  401900:	1d3a      	adds	r2, r7, #4
  401902:	2301      	movs	r3, #1
  401904:	9300      	str	r3, [sp, #0]
  401906:	4613      	mov	r3, r2
  401908:	2220      	movs	r2, #32
  40190a:	2150      	movs	r1, #80	; 0x50
  40190c:	4811      	ldr	r0, [pc, #68]	; (401954 <InitVars+0x4f4>)
  40190e:	4c12      	ldr	r4, [pc, #72]	; (401958 <InitVars+0x4f8>)
  401910:	47a0      	blx	r4
		}
}
  401912:	bf00      	nop
  401914:	3734      	adds	r7, #52	; 0x34
  401916:	46bd      	mov	sp, r7
  401918:	bd90      	pop	{r4, r7, pc}
  40191a:	bf00      	nop
  40191c:	20000bc4 	.word	0x20000bc4
  401920:	2000010c 	.word	0x2000010c
  401924:	20000108 	.word	0x20000108
  401928:	20000110 	.word	0x20000110
  40192c:	20002e9c 	.word	0x20002e9c
  401930:	20002ea0 	.word	0x20002ea0
  401934:	200000fc 	.word	0x200000fc
  401938:	418bba88 	.word	0x418bba88
  40193c:	20000100 	.word	0x20000100
  401940:	429ce153 	.word	0x429ce153
  401944:	20000104 	.word	0x20000104
  401948:	40b00000 	.word	0x40b00000
  40194c:	40a00000 	.word	0x40a00000
  401950:	422c0000 	.word	0x422c0000
  401954:	40018000 	.word	0x40018000
  401958:	00400555 	.word	0x00400555

0040195c <InitTWI>:

static void InitTWI(void)
{
  40195c:	b580      	push	{r7, lr}
  40195e:	b084      	sub	sp, #16
  401960:	af00      	add	r7, sp, #0
	twi_options_t twiSettings = {
		sysclk_get_peripheral_hz(),
  401962:	4b0c      	ldr	r3, [pc, #48]	; (401994 <InitTWI+0x38>)
  401964:	4798      	blx	r3
  401966:	4603      	mov	r3, r0
		}
}

static void InitTWI(void)
{
	twi_options_t twiSettings = {
  401968:	607b      	str	r3, [r7, #4]
  40196a:	4b0b      	ldr	r3, [pc, #44]	; (401998 <InitTWI+0x3c>)
  40196c:	60bb      	str	r3, [r7, #8]
  40196e:	2300      	movs	r3, #0
  401970:	733b      	strb	r3, [r7, #12]
  401972:	2300      	movs	r3, #0
  401974:	737b      	strb	r3, [r7, #13]
		400000,
		0,
		0
	};
	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_TWI_ID);
  401976:	2013      	movs	r0, #19
  401978:	4b08      	ldr	r3, [pc, #32]	; (40199c <InitTWI+0x40>)
  40197a:	4798      	blx	r3

	/* Enable TWI master mode */
	twi_enable_master_mode(BOARD_TWI);
  40197c:	4808      	ldr	r0, [pc, #32]	; (4019a0 <InitTWI+0x44>)
  40197e:	4b09      	ldr	r3, [pc, #36]	; (4019a4 <InitTWI+0x48>)
  401980:	4798      	blx	r3

	/* Initialize TWI peripheral */
	twi_master_init(BOARD_TWI, &twiSettings);
  401982:	1d3b      	adds	r3, r7, #4
  401984:	4619      	mov	r1, r3
  401986:	4806      	ldr	r0, [pc, #24]	; (4019a0 <InitTWI+0x44>)
  401988:	4b07      	ldr	r3, [pc, #28]	; (4019a8 <InitTWI+0x4c>)
  40198a:	4798      	blx	r3
}
  40198c:	bf00      	nop
  40198e:	3710      	adds	r7, #16
  401990:	46bd      	mov	sp, r7
  401992:	bd80      	pop	{r7, pc}
  401994:	004012d9 	.word	0x004012d9
  401998:	00061a80 	.word	0x00061a80
  40199c:	004012ed 	.word	0x004012ed
  4019a0:	40018000 	.word	0x40018000
  4019a4:	00403791 	.word	0x00403791
  4019a8:	004037b5 	.word	0x004037b5

004019ac <PVTrack>:
// 	//InitTWI();
// 	twiPort = freertos_twi_master_init(BOARD_TWI, &settings);
// }

void PVTrack(void)
{
  4019ac:	b580      	push	{r7, lr}
  4019ae:	b084      	sub	sp, #16
  4019b0:	af00      	add	r7, sp, #0
//     while(ccStatus)
//     {
//         vTaskDelay(pdMS_TO_TICKS(10));
//     }
    
    taskENTER_CRITICAL();
  4019b2:	4b6a      	ldr	r3, [pc, #424]	; (401b5c <PVTrack+0x1b0>)
  4019b4:	4798      	blx	r3
    
    /* Read RTC */
	#ifndef DS3231_USE_RTOS_API
		DSGetTime(BOARD_TWI, (uint16_t *)&mBusRegs[MBUS_REG_SEC]);
  4019b6:	496a      	ldr	r1, [pc, #424]	; (401b60 <PVTrack+0x1b4>)
  4019b8:	486a      	ldr	r0, [pc, #424]	; (401b64 <PVTrack+0x1b8>)
  4019ba:	4b6b      	ldr	r3, [pc, #428]	; (401b68 <PVTrack+0x1bc>)
  4019bc:	4798      	blx	r3
		DSGetFullDate(BOARD_TWI, (uint16_t *)&mBusRegs[MBUS_REG_DAY]);
  4019be:	496b      	ldr	r1, [pc, #428]	; (401b6c <PVTrack+0x1c0>)
  4019c0:	4868      	ldr	r0, [pc, #416]	; (401b64 <PVTrack+0x1b8>)
  4019c2:	4b6b      	ldr	r3, [pc, #428]	; (401b70 <PVTrack+0x1c4>)
  4019c4:	4798      	blx	r3
		DSGetTimeTo(twiPort, (uint16_t *)&mBusRegs[MBUS_REG_SEC], 50);
		DSGetFullDateTo(twiPort, (uint16_t *)&mBusRegs[MBUS_REG_DAY], 50);
	#endif
    
    /* Clacluate PV Angle from time */
    pvAngle = GetPvAngle();
  4019c6:	4b6b      	ldr	r3, [pc, #428]	; (401b74 <PVTrack+0x1c8>)
  4019c8:	4798      	blx	r3
  4019ca:	4603      	mov	r3, r0
  4019cc:	607b      	str	r3, [r7, #4]
    ptr = (uint16_t*)&pvAngle;
  4019ce:	1d3b      	adds	r3, r7, #4
  4019d0:	60fb      	str	r3, [r7, #12]
    mBusRegs[MBUS_REG_PVANGLEH] = ptr[1];
  4019d2:	68fb      	ldr	r3, [r7, #12]
  4019d4:	885a      	ldrh	r2, [r3, #2]
  4019d6:	4b62      	ldr	r3, [pc, #392]	; (401b60 <PVTrack+0x1b4>)
  4019d8:	845a      	strh	r2, [r3, #34]	; 0x22
    mBusRegs[MBUS_REG_PVANGLEL] = ptr[0];
  4019da:	68fb      	ldr	r3, [r7, #12]
  4019dc:	881a      	ldrh	r2, [r3, #0]
  4019de:	4b60      	ldr	r3, [pc, #384]	; (401b60 <PVTrack+0x1b4>)
  4019e0:	841a      	strh	r2, [r3, #32]
        sprintf(LogBuff, "\r\n");
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
    #endif
    
    #ifdef LOG_EN
        sprintf(LogBuff,"%d,", bkTrkFlg);
  4019e2:	4b65      	ldr	r3, [pc, #404]	; (401b78 <PVTrack+0x1cc>)
  4019e4:	781b      	ldrb	r3, [r3, #0]
  4019e6:	461a      	mov	r2, r3
  4019e8:	4964      	ldr	r1, [pc, #400]	; (401b7c <PVTrack+0x1d0>)
  4019ea:	4865      	ldr	r0, [pc, #404]	; (401b80 <PVTrack+0x1d4>)
  4019ec:	4b65      	ldr	r3, [pc, #404]	; (401b84 <PVTrack+0x1d8>)
  4019ee:	4798      	blx	r3
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
  4019f0:	4863      	ldr	r0, [pc, #396]	; (401b80 <PVTrack+0x1d4>)
  4019f2:	4b65      	ldr	r3, [pc, #404]	; (401b88 <PVTrack+0x1dc>)
  4019f4:	4798      	blx	r3
  4019f6:	4603      	mov	r3, r0
  4019f8:	b29b      	uxth	r3, r3
  4019fa:	4619      	mov	r1, r3
  4019fc:	4860      	ldr	r0, [pc, #384]	; (401b80 <PVTrack+0x1d4>)
  4019fe:	4b63      	ldr	r3, [pc, #396]	; (401b8c <PVTrack+0x1e0>)
  401a00:	4798      	blx	r3
        PrintFlt(pvAngle);
  401a02:	687b      	ldr	r3, [r7, #4]
  401a04:	4618      	mov	r0, r3
  401a06:	4b62      	ldr	r3, [pc, #392]	; (401b90 <PVTrack+0x1e4>)
  401a08:	4798      	blx	r3
		LogBuff[0] = ',';
  401a0a:	4b5d      	ldr	r3, [pc, #372]	; (401b80 <PVTrack+0x1d4>)
  401a0c:	222c      	movs	r2, #44	; 0x2c
  401a0e:	701a      	strb	r2, [r3, #0]
		ConsoleWrite((uint8_t *)LogBuff, 1);
  401a10:	2101      	movs	r1, #1
  401a12:	485b      	ldr	r0, [pc, #364]	; (401b80 <PVTrack+0x1d4>)
  401a14:	4b5d      	ldr	r3, [pc, #372]	; (401b8c <PVTrack+0x1e0>)
  401a16:	4798      	blx	r3
    #endif
    
    /* If not backtracking */
    if(!bkTrkFlg)
  401a18:	4b57      	ldr	r3, [pc, #348]	; (401b78 <PVTrack+0x1cc>)
  401a1a:	781b      	ldrb	r3, [r3, #0]
  401a1c:	2b00      	cmp	r3, #0
  401a1e:	d126      	bne.n	401a6e <PVTrack+0xc2>
    {
        #ifdef LOG_EN
            sprintf(LogBuff,"NA\r\n");
  401a20:	4b57      	ldr	r3, [pc, #348]	; (401b80 <PVTrack+0x1d4>)
  401a22:	4a5c      	ldr	r2, [pc, #368]	; (401b94 <PVTrack+0x1e8>)
  401a24:	6810      	ldr	r0, [r2, #0]
  401a26:	6018      	str	r0, [r3, #0]
  401a28:	7912      	ldrb	r2, [r2, #4]
  401a2a:	711a      	strb	r2, [r3, #4]
			ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
  401a2c:	4854      	ldr	r0, [pc, #336]	; (401b80 <PVTrack+0x1d4>)
  401a2e:	4b56      	ldr	r3, [pc, #344]	; (401b88 <PVTrack+0x1dc>)
  401a30:	4798      	blx	r3
  401a32:	4603      	mov	r3, r0
  401a34:	b29b      	uxth	r3, r3
  401a36:	4619      	mov	r1, r3
  401a38:	4851      	ldr	r0, [pc, #324]	; (401b80 <PVTrack+0x1d4>)
  401a3a:	4b54      	ldr	r3, [pc, #336]	; (401b8c <PVTrack+0x1e0>)
  401a3c:	4798      	blx	r3
        #endif
        /* If Angle between +/- pvAngleRng deg */
        if(pvAngle>= -pvAngleRng && pvAngle <= pvAngleRng)
  401a3e:	4b56      	ldr	r3, [pc, #344]	; (401b98 <PVTrack+0x1ec>)
  401a40:	681b      	ldr	r3, [r3, #0]
  401a42:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
  401a46:	6879      	ldr	r1, [r7, #4]
  401a48:	4b54      	ldr	r3, [pc, #336]	; (401b9c <PVTrack+0x1f0>)
  401a4a:	4610      	mov	r0, r2
  401a4c:	4798      	blx	r3
  401a4e:	4603      	mov	r3, r0
  401a50:	2b00      	cmp	r3, #0
  401a52:	d008      	beq.n	401a66 <PVTrack+0xba>
  401a54:	687a      	ldr	r2, [r7, #4]
  401a56:	4b50      	ldr	r3, [pc, #320]	; (401b98 <PVTrack+0x1ec>)
  401a58:	6819      	ldr	r1, [r3, #0]
  401a5a:	4b50      	ldr	r3, [pc, #320]	; (401b9c <PVTrack+0x1f0>)
  401a5c:	4610      	mov	r0, r2
  401a5e:	4798      	blx	r3
  401a60:	4603      	mov	r3, r0
  401a62:	2b00      	cmp	r3, #0
  401a64:	d170      	bne.n	401b48 <PVTrack+0x19c>
                GotoAngle(pvAngle);
            #endif
        }
        else
        {
            bkTrkFlg = 1;
  401a66:	4b44      	ldr	r3, [pc, #272]	; (401b78 <PVTrack+0x1cc>)
  401a68:	2201      	movs	r2, #1
  401a6a:	701a      	strb	r2, [r3, #0]
  401a6c:	e06c      	b.n	401b48 <PVTrack+0x19c>
        }
    }
    else
    {
        if(pvAngle>= -90 && pvAngle <= 90)
  401a6e:	687a      	ldr	r2, [r7, #4]
  401a70:	4b4b      	ldr	r3, [pc, #300]	; (401ba0 <PVTrack+0x1f4>)
  401a72:	494c      	ldr	r1, [pc, #304]	; (401ba4 <PVTrack+0x1f8>)
  401a74:	4610      	mov	r0, r2
  401a76:	4798      	blx	r3
  401a78:	4603      	mov	r3, r0
  401a7a:	2b00      	cmp	r3, #0
  401a7c:	d03e      	beq.n	401afc <PVTrack+0x150>
  401a7e:	687a      	ldr	r2, [r7, #4]
  401a80:	4b46      	ldr	r3, [pc, #280]	; (401b9c <PVTrack+0x1f0>)
  401a82:	4949      	ldr	r1, [pc, #292]	; (401ba8 <PVTrack+0x1fc>)
  401a84:	4610      	mov	r0, r2
  401a86:	4798      	blx	r3
  401a88:	4603      	mov	r3, r0
  401a8a:	2b00      	cmp	r3, #0
  401a8c:	d036      	beq.n	401afc <PVTrack+0x150>
        {
            bkTrkAngle = GetPvBackTrackAngle(pvAngle);
  401a8e:	687b      	ldr	r3, [r7, #4]
  401a90:	4618      	mov	r0, r3
  401a92:	4b46      	ldr	r3, [pc, #280]	; (401bac <PVTrack+0x200>)
  401a94:	4798      	blx	r3
  401a96:	60b8      	str	r0, [r7, #8]
            
            /* If bkTrkAngle is within +/- given range */ 
            if(bkTrkAngle>= -pvAngleRng && bkTrkAngle <= pvAngleRng)
  401a98:	4b3f      	ldr	r3, [pc, #252]	; (401b98 <PVTrack+0x1ec>)
  401a9a:	681b      	ldr	r3, [r3, #0]
  401a9c:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
  401aa0:	4b3e      	ldr	r3, [pc, #248]	; (401b9c <PVTrack+0x1f0>)
  401aa2:	68b9      	ldr	r1, [r7, #8]
  401aa4:	4610      	mov	r0, r2
  401aa6:	4798      	blx	r3
  401aa8:	4603      	mov	r3, r0
  401aaa:	2b00      	cmp	r3, #0
  401aac:	d016      	beq.n	401adc <PVTrack+0x130>
  401aae:	4b3a      	ldr	r3, [pc, #232]	; (401b98 <PVTrack+0x1ec>)
  401ab0:	681a      	ldr	r2, [r3, #0]
  401ab2:	4b3a      	ldr	r3, [pc, #232]	; (401b9c <PVTrack+0x1f0>)
  401ab4:	4611      	mov	r1, r2
  401ab6:	68b8      	ldr	r0, [r7, #8]
  401ab8:	4798      	blx	r3
  401aba:	4603      	mov	r3, r0
  401abc:	2b00      	cmp	r3, #0
  401abe:	d00d      	beq.n	401adc <PVTrack+0x130>
            {
                #ifdef LOG_EN
                    PrintFlt(bkTrkAngle);
  401ac0:	68b8      	ldr	r0, [r7, #8]
  401ac2:	4b33      	ldr	r3, [pc, #204]	; (401b90 <PVTrack+0x1e4>)
  401ac4:	4798      	blx	r3
					LogBuff[0] = '\r';
  401ac6:	4b2e      	ldr	r3, [pc, #184]	; (401b80 <PVTrack+0x1d4>)
  401ac8:	220d      	movs	r2, #13
  401aca:	701a      	strb	r2, [r3, #0]
					LogBuff[1] = '\n';
  401acc:	4b2c      	ldr	r3, [pc, #176]	; (401b80 <PVTrack+0x1d4>)
  401ace:	220a      	movs	r2, #10
  401ad0:	705a      	strb	r2, [r3, #1]
					ConsoleWrite((uint8_t *)LogBuff, 2);
  401ad2:	2102      	movs	r1, #2
  401ad4:	482a      	ldr	r0, [pc, #168]	; (401b80 <PVTrack+0x1d4>)
  401ad6:	4b2d      	ldr	r3, [pc, #180]	; (401b8c <PVTrack+0x1e0>)
  401ad8:	4798      	blx	r3
        if(pvAngle>= -90 && pvAngle <= 90)
        {
            bkTrkAngle = GetPvBackTrackAngle(pvAngle);
            
            /* If bkTrkAngle is within +/- given range */ 
            if(bkTrkAngle>= -pvAngleRng && bkTrkAngle <= pvAngleRng)
  401ada:	e01e      	b.n	401b1a <PVTrack+0x16e>
                #endif
            }
            #ifdef LOG_EN
                else
                {
                    sprintf(LogBuff,"NA\r\n");
  401adc:	4b28      	ldr	r3, [pc, #160]	; (401b80 <PVTrack+0x1d4>)
  401ade:	4a2d      	ldr	r2, [pc, #180]	; (401b94 <PVTrack+0x1e8>)
  401ae0:	6810      	ldr	r0, [r2, #0]
  401ae2:	6018      	str	r0, [r3, #0]
  401ae4:	7912      	ldrb	r2, [r2, #4]
  401ae6:	711a      	strb	r2, [r3, #4]
					ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
  401ae8:	4825      	ldr	r0, [pc, #148]	; (401b80 <PVTrack+0x1d4>)
  401aea:	4b27      	ldr	r3, [pc, #156]	; (401b88 <PVTrack+0x1dc>)
  401aec:	4798      	blx	r3
  401aee:	4603      	mov	r3, r0
  401af0:	b29b      	uxth	r3, r3
  401af2:	4619      	mov	r1, r3
  401af4:	4822      	ldr	r0, [pc, #136]	; (401b80 <PVTrack+0x1d4>)
  401af6:	4b25      	ldr	r3, [pc, #148]	; (401b8c <PVTrack+0x1e0>)
  401af8:	4798      	blx	r3
        if(pvAngle>= -90 && pvAngle <= 90)
        {
            bkTrkAngle = GetPvBackTrackAngle(pvAngle);
            
            /* If bkTrkAngle is within +/- given range */ 
            if(bkTrkAngle>= -pvAngleRng && bkTrkAngle <= pvAngleRng)
  401afa:	e00e      	b.n	401b1a <PVTrack+0x16e>
            #endif
        }
        #ifdef LOG_EN
            else
            {
                sprintf(LogBuff,"NA\r\n");
  401afc:	4b20      	ldr	r3, [pc, #128]	; (401b80 <PVTrack+0x1d4>)
  401afe:	4a25      	ldr	r2, [pc, #148]	; (401b94 <PVTrack+0x1e8>)
  401b00:	6810      	ldr	r0, [r2, #0]
  401b02:	6018      	str	r0, [r3, #0]
  401b04:	7912      	ldrb	r2, [r2, #4]
  401b06:	711a      	strb	r2, [r3, #4]
				ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
  401b08:	481d      	ldr	r0, [pc, #116]	; (401b80 <PVTrack+0x1d4>)
  401b0a:	4b1f      	ldr	r3, [pc, #124]	; (401b88 <PVTrack+0x1dc>)
  401b0c:	4798      	blx	r3
  401b0e:	4603      	mov	r3, r0
  401b10:	b29b      	uxth	r3, r3
  401b12:	4619      	mov	r1, r3
  401b14:	481a      	ldr	r0, [pc, #104]	; (401b80 <PVTrack+0x1d4>)
  401b16:	4b1d      	ldr	r3, [pc, #116]	; (401b8c <PVTrack+0x1e0>)
  401b18:	4798      	blx	r3
            }
        #endif
        if(pvAngle>= -pvAngleRng && pvAngle <= pvAngleRng)
  401b1a:	4b1f      	ldr	r3, [pc, #124]	; (401b98 <PVTrack+0x1ec>)
  401b1c:	681b      	ldr	r3, [r3, #0]
  401b1e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
  401b22:	6879      	ldr	r1, [r7, #4]
  401b24:	4b1d      	ldr	r3, [pc, #116]	; (401b9c <PVTrack+0x1f0>)
  401b26:	4610      	mov	r0, r2
  401b28:	4798      	blx	r3
  401b2a:	4603      	mov	r3, r0
  401b2c:	2b00      	cmp	r3, #0
  401b2e:	d00b      	beq.n	401b48 <PVTrack+0x19c>
  401b30:	687a      	ldr	r2, [r7, #4]
  401b32:	4b19      	ldr	r3, [pc, #100]	; (401b98 <PVTrack+0x1ec>)
  401b34:	6819      	ldr	r1, [r3, #0]
  401b36:	4b19      	ldr	r3, [pc, #100]	; (401b9c <PVTrack+0x1f0>)
  401b38:	4610      	mov	r0, r2
  401b3a:	4798      	blx	r3
  401b3c:	4603      	mov	r3, r0
  401b3e:	2b00      	cmp	r3, #0
  401b40:	d002      	beq.n	401b48 <PVTrack+0x19c>
        {
            bkTrkFlg = 0;
  401b42:	4b0d      	ldr	r3, [pc, #52]	; (401b78 <PVTrack+0x1cc>)
  401b44:	2200      	movs	r2, #0
  401b46:	701a      	strb	r2, [r3, #0]
        }
    }
          
    /* Clear any required flags */
    minCtr = 0;
  401b48:	4b19      	ldr	r3, [pc, #100]	; (401bb0 <PVTrack+0x204>)
  401b4a:	2200      	movs	r2, #0
  401b4c:	701a      	strb	r2, [r3, #0]
    taskEXIT_CRITICAL();
  401b4e:	4b19      	ldr	r3, [pc, #100]	; (401bb4 <PVTrack+0x208>)
  401b50:	4798      	blx	r3
    
    /* Enable Charge Ctrlr */
    //ccEn = 1;
} 
  401b52:	bf00      	nop
  401b54:	3710      	adds	r7, #16
  401b56:	46bd      	mov	sp, r7
  401b58:	bd80      	pop	{r7, pc}
  401b5a:	bf00      	nop
  401b5c:	00405741 	.word	0x00405741
  401b60:	20000bc4 	.word	0x20000bc4
  401b64:	40018000 	.word	0x40018000
  401b68:	00400911 	.word	0x00400911
  401b6c:	20000bca 	.word	0x20000bca
  401b70:	004009d1 	.word	0x004009d1
  401b74:	00401f19 	.word	0x00401f19
  401b78:	20000c14 	.word	0x20000c14
  401b7c:	0040f890 	.word	0x0040f890
  401b80:	20002eb0 	.word	0x20002eb0
  401b84:	0040bad9 	.word	0x0040bad9
  401b88:	0040bb41 	.word	0x0040bb41
  401b8c:	004008b1 	.word	0x004008b1
  401b90:	00401c99 	.word	0x00401c99
  401b94:	0040f894 	.word	0x0040f894
  401b98:	20000110 	.word	0x20000110
  401b9c:	0040b4a9 	.word	0x0040b4a9
  401ba0:	0040b4bd 	.word	0x0040b4bd
  401ba4:	c2b40000 	.word	0xc2b40000
  401ba8:	42b40000 	.word	0x42b40000
  401bac:	00402c7d 	.word	0x00402c7d
  401bb0:	20000c15 	.word	0x20000c15
  401bb4:	00405761 	.word	0x00405761

00401bb8 <TestCode>:
    mBusRegs[MBUS_REG_ANXH] = ptr[1];
    mBusRegs[MBUS_REG_ANXL] = ptr[0];
}

void TestCode(void)
{
  401bb8:	b580      	push	{r7, lr}
  401bba:	b088      	sub	sp, #32
  401bbc:	af00      	add	r7, sp, #0
    int16_t accVals[3] = {0, 0, 0};
  401bbe:	2300      	movs	r3, #0
  401bc0:	82bb      	strh	r3, [r7, #20]
  401bc2:	2300      	movs	r3, #0
  401bc4:	82fb      	strh	r3, [r7, #22]
  401bc6:	2300      	movs	r3, #0
  401bc8:	833b      	strh	r3, [r7, #24]
    float oriVals[3], pvAngle=0;
  401bca:	f04f 0300 	mov.w	r3, #0
  401bce:	607b      	str	r3, [r7, #4]
    uint16_t *ptr;
    #ifndef DS3231_USE_RTOS_API
		DSGetTime(BOARD_TWI, (uint16_t *)&mBusRegs[MBUS_REG_SEC]);
  401bd0:	4927      	ldr	r1, [pc, #156]	; (401c70 <TestCode+0xb8>)
  401bd2:	4828      	ldr	r0, [pc, #160]	; (401c74 <TestCode+0xbc>)
  401bd4:	4b28      	ldr	r3, [pc, #160]	; (401c78 <TestCode+0xc0>)
  401bd6:	4798      	blx	r3
		DSGetFullDate(BOARD_TWI, (uint16_t *)&mBusRegs[MBUS_REG_DAY]);
  401bd8:	4928      	ldr	r1, [pc, #160]	; (401c7c <TestCode+0xc4>)
  401bda:	4826      	ldr	r0, [pc, #152]	; (401c74 <TestCode+0xbc>)
  401bdc:	4b28      	ldr	r3, [pc, #160]	; (401c80 <TestCode+0xc8>)
  401bde:	4798      	blx	r3
		(((mBusRegs[MBUS_REG_SEC]>>4)*10) + (mBusRegs[MBUS_REG_SEC]&0x000F)));
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
    #endif

	#ifndef ICM20648_USE_RTOS_API
		ICMReadAccDataAll(BOARD_TWI, ICM_ADDR,(uint16_t*)accVals);
  401be0:	f107 0314 	add.w	r3, r7, #20
  401be4:	461a      	mov	r2, r3
  401be6:	2169      	movs	r1, #105	; 0x69
  401be8:	4822      	ldr	r0, [pc, #136]	; (401c74 <TestCode+0xbc>)
  401bea:	4b26      	ldr	r3, [pc, #152]	; (401c84 <TestCode+0xcc>)
  401bec:	4798      	blx	r3
	#else
		ICMReadAccDataAllTo(twiPort, ICM_ADDR,(uint16_t*)accVals, 50);
	#endif
    GetOrientation(accVals, oriVals);
  401bee:	f107 0208 	add.w	r2, r7, #8
  401bf2:	f107 0314 	add.w	r3, r7, #20
  401bf6:	4611      	mov	r1, r2
  401bf8:	4618      	mov	r0, r3
  401bfa:	4b23      	ldr	r3, [pc, #140]	; (401c88 <TestCode+0xd0>)
  401bfc:	4798      	blx	r3
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
        PrintFlt(oriVals[0]);
        sprintf(LogBuff,"\r\n");
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
    #endif
    ptr = (uint16_t*)&oriVals[0];
  401bfe:	f107 0308 	add.w	r3, r7, #8
  401c02:	61fb      	str	r3, [r7, #28]
    mBusRegs[MBUS_REG_ANXH] = ptr[1];
  401c04:	69fb      	ldr	r3, [r7, #28]
  401c06:	885a      	ldrh	r2, [r3, #2]
  401c08:	4b19      	ldr	r3, [pc, #100]	; (401c70 <TestCode+0xb8>)
  401c0a:	83da      	strh	r2, [r3, #30]
    mBusRegs[MBUS_REG_ANXL] = ptr[0];
  401c0c:	69fb      	ldr	r3, [r7, #28]
  401c0e:	881a      	ldrh	r2, [r3, #0]
  401c10:	4b17      	ldr	r3, [pc, #92]	; (401c70 <TestCode+0xb8>)
  401c12:	839a      	strh	r2, [r3, #28]
    pvAngle = GetPvAngle();
  401c14:	4b1d      	ldr	r3, [pc, #116]	; (401c8c <TestCode+0xd4>)
  401c16:	4798      	blx	r3
  401c18:	4603      	mov	r3, r0
  401c1a:	607b      	str	r3, [r7, #4]
    ptr = (uint16_t*)&pvAngle;
  401c1c:	1d3b      	adds	r3, r7, #4
  401c1e:	61fb      	str	r3, [r7, #28]
    mBusRegs[MBUS_REG_PVANGLEH] = ptr[1];
  401c20:	69fb      	ldr	r3, [r7, #28]
  401c22:	885a      	ldrh	r2, [r3, #2]
  401c24:	4b12      	ldr	r3, [pc, #72]	; (401c70 <TestCode+0xb8>)
  401c26:	845a      	strh	r2, [r3, #34]	; 0x22
    mBusRegs[MBUS_REG_PVANGLEL] = ptr[0];
  401c28:	69fb      	ldr	r3, [r7, #28]
  401c2a:	881a      	ldrh	r2, [r3, #0]
  401c2c:	4b10      	ldr	r3, [pc, #64]	; (401c70 <TestCode+0xb8>)
  401c2e:	841a      	strh	r2, [r3, #32]
    
	if(mBusRegs[MBUS_REG_MOTDR])
  401c30:	4b0f      	ldr	r3, [pc, #60]	; (401c70 <TestCode+0xb8>)
  401c32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
  401c34:	2b00      	cmp	r3, #0
  401c36:	d006      	beq.n	401c46 <TestCode+0x8e>
	{
		gpio_set_pin_low(PIN_MOTOR_IN1_IDX);
  401c38:	2020      	movs	r0, #32
  401c3a:	4b15      	ldr	r3, [pc, #84]	; (401c90 <TestCode+0xd8>)
  401c3c:	4798      	blx	r3
		gpio_set_pin_high(PIN_MOTOR_IN2_IDX);
  401c3e:	2021      	movs	r0, #33	; 0x21
  401c40:	4b14      	ldr	r3, [pc, #80]	; (401c94 <TestCode+0xdc>)
  401c42:	4798      	blx	r3
  401c44:	e005      	b.n	401c52 <TestCode+0x9a>
	}
	else
	{
		gpio_set_pin_high(PIN_MOTOR_IN1_IDX);
  401c46:	2020      	movs	r0, #32
  401c48:	4b12      	ldr	r3, [pc, #72]	; (401c94 <TestCode+0xdc>)
  401c4a:	4798      	blx	r3
		gpio_set_pin_low(PIN_MOTOR_IN2_IDX);
  401c4c:	2021      	movs	r0, #33	; 0x21
  401c4e:	4b10      	ldr	r3, [pc, #64]	; (401c90 <TestCode+0xd8>)
  401c50:	4798      	blx	r3
	}

    if(mBusRegs[MBUS_REG_MOTON])
  401c52:	4b07      	ldr	r3, [pc, #28]	; (401c70 <TestCode+0xb8>)
  401c54:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
  401c56:	2b00      	cmp	r3, #0
  401c58:	d003      	beq.n	401c62 <TestCode+0xaa>
        //Disable Charge Ctrlr
		//ccEn = 0;
        /* Turn Motor On */
		#ifndef MOTOR_CTRL_A4955
		#else
			gpio_set_pin_high(PIN_MOTOR_SLP_IDX);
  401c5a:	2022      	movs	r0, #34	; 0x22
  401c5c:	4b0d      	ldr	r3, [pc, #52]	; (401c94 <TestCode+0xdc>)
  401c5e:	4798      	blx	r3
		#ifndef MOTOR_CTRL_A4955
		#else
			gpio_set_pin_low(PIN_MOTOR_SLP_IDX);
		#endif
    }
}
  401c60:	e002      	b.n	401c68 <TestCode+0xb0>
        //Enable Charge Ctrlr
        //ccEn = 1;
        /* Turn Motor Off */
		#ifndef MOTOR_CTRL_A4955
		#else
			gpio_set_pin_low(PIN_MOTOR_SLP_IDX);
  401c62:	2022      	movs	r0, #34	; 0x22
  401c64:	4b0a      	ldr	r3, [pc, #40]	; (401c90 <TestCode+0xd8>)
  401c66:	4798      	blx	r3
		#endif
    }
}
  401c68:	bf00      	nop
  401c6a:	3720      	adds	r7, #32
  401c6c:	46bd      	mov	sp, r7
  401c6e:	bd80      	pop	{r7, pc}
  401c70:	20000bc4 	.word	0x20000bc4
  401c74:	40018000 	.word	0x40018000
  401c78:	00400911 	.word	0x00400911
  401c7c:	20000bca 	.word	0x20000bca
  401c80:	004009d1 	.word	0x004009d1
  401c84:	00400c09 	.word	0x00400c09
  401c88:	00401d85 	.word	0x00401d85
  401c8c:	00401f19 	.word	0x00401f19
  401c90:	004047e5 	.word	0x004047e5
  401c94:	004047b5 	.word	0x004047b5

00401c98 <PrintFlt>:

#if defined(DEBUG_EN) || defined(LOG_EN)
    char buff2[10];
	void PrintFlt(float val)
    {
  401c98:	b590      	push	{r4, r7, lr}
  401c9a:	b085      	sub	sp, #20
  401c9c:	af00      	add	r7, sp, #0
  401c9e:	6078      	str	r0, [r7, #4]
        int iVal, fVal;

        if(val>0)
  401ca0:	4b2c      	ldr	r3, [pc, #176]	; (401d54 <PrintFlt+0xbc>)
  401ca2:	f04f 0100 	mov.w	r1, #0
  401ca6:	6878      	ldr	r0, [r7, #4]
  401ca8:	4798      	blx	r3
  401caa:	4603      	mov	r3, r0
  401cac:	2b00      	cmp	r3, #0
  401cae:	d020      	beq.n	401cf2 <PrintFlt+0x5a>
        {
            iVal = val;
  401cb0:	4b29      	ldr	r3, [pc, #164]	; (401d58 <PrintFlt+0xc0>)
  401cb2:	6878      	ldr	r0, [r7, #4]
  401cb4:	4798      	blx	r3
  401cb6:	4603      	mov	r3, r0
  401cb8:	60fb      	str	r3, [r7, #12]
            fVal = (val-iVal)*100;
  401cba:	4b28      	ldr	r3, [pc, #160]	; (401d5c <PrintFlt+0xc4>)
  401cbc:	68f8      	ldr	r0, [r7, #12]
  401cbe:	4798      	blx	r3
  401cc0:	4602      	mov	r2, r0
  401cc2:	4b27      	ldr	r3, [pc, #156]	; (401d60 <PrintFlt+0xc8>)
  401cc4:	4611      	mov	r1, r2
  401cc6:	6878      	ldr	r0, [r7, #4]
  401cc8:	4798      	blx	r3
  401cca:	4603      	mov	r3, r0
  401ccc:	461a      	mov	r2, r3
  401cce:	4b25      	ldr	r3, [pc, #148]	; (401d64 <PrintFlt+0xcc>)
  401cd0:	4925      	ldr	r1, [pc, #148]	; (401d68 <PrintFlt+0xd0>)
  401cd2:	4610      	mov	r0, r2
  401cd4:	4798      	blx	r3
  401cd6:	4603      	mov	r3, r0
  401cd8:	461a      	mov	r2, r3
  401cda:	4b1f      	ldr	r3, [pc, #124]	; (401d58 <PrintFlt+0xc0>)
  401cdc:	4610      	mov	r0, r2
  401cde:	4798      	blx	r3
  401ce0:	4603      	mov	r3, r0
  401ce2:	60bb      	str	r3, [r7, #8]
            sprintf(buff2,"%d.%d",iVal,fVal);
  401ce4:	68bb      	ldr	r3, [r7, #8]
  401ce6:	68fa      	ldr	r2, [r7, #12]
  401ce8:	4920      	ldr	r1, [pc, #128]	; (401d6c <PrintFlt+0xd4>)
  401cea:	4821      	ldr	r0, [pc, #132]	; (401d70 <PrintFlt+0xd8>)
  401cec:	4c21      	ldr	r4, [pc, #132]	; (401d74 <PrintFlt+0xdc>)
  401cee:	47a0      	blx	r4
  401cf0:	e023      	b.n	401d3a <PrintFlt+0xa2>
        }
        else
        {
            val = fabs(val);
  401cf2:	687b      	ldr	r3, [r7, #4]
  401cf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  401cf8:	607b      	str	r3, [r7, #4]
            iVal = val;
  401cfa:	4b17      	ldr	r3, [pc, #92]	; (401d58 <PrintFlt+0xc0>)
  401cfc:	6878      	ldr	r0, [r7, #4]
  401cfe:	4798      	blx	r3
  401d00:	4603      	mov	r3, r0
  401d02:	60fb      	str	r3, [r7, #12]
            fVal = (val-iVal)*100;
  401d04:	4b15      	ldr	r3, [pc, #84]	; (401d5c <PrintFlt+0xc4>)
  401d06:	68f8      	ldr	r0, [r7, #12]
  401d08:	4798      	blx	r3
  401d0a:	4602      	mov	r2, r0
  401d0c:	4b14      	ldr	r3, [pc, #80]	; (401d60 <PrintFlt+0xc8>)
  401d0e:	4611      	mov	r1, r2
  401d10:	6878      	ldr	r0, [r7, #4]
  401d12:	4798      	blx	r3
  401d14:	4603      	mov	r3, r0
  401d16:	461a      	mov	r2, r3
  401d18:	4b12      	ldr	r3, [pc, #72]	; (401d64 <PrintFlt+0xcc>)
  401d1a:	4913      	ldr	r1, [pc, #76]	; (401d68 <PrintFlt+0xd0>)
  401d1c:	4610      	mov	r0, r2
  401d1e:	4798      	blx	r3
  401d20:	4603      	mov	r3, r0
  401d22:	461a      	mov	r2, r3
  401d24:	4b0c      	ldr	r3, [pc, #48]	; (401d58 <PrintFlt+0xc0>)
  401d26:	4610      	mov	r0, r2
  401d28:	4798      	blx	r3
  401d2a:	4603      	mov	r3, r0
  401d2c:	60bb      	str	r3, [r7, #8]
            sprintf(buff2,"-%d.%d",iVal,fVal);
  401d2e:	68bb      	ldr	r3, [r7, #8]
  401d30:	68fa      	ldr	r2, [r7, #12]
  401d32:	4911      	ldr	r1, [pc, #68]	; (401d78 <PrintFlt+0xe0>)
  401d34:	480e      	ldr	r0, [pc, #56]	; (401d70 <PrintFlt+0xd8>)
  401d36:	4c0f      	ldr	r4, [pc, #60]	; (401d74 <PrintFlt+0xdc>)
  401d38:	47a0      	blx	r4
        }   
        ConsoleWrite((uint8_t *)buff2, strlen(buff2));
  401d3a:	480d      	ldr	r0, [pc, #52]	; (401d70 <PrintFlt+0xd8>)
  401d3c:	4b0f      	ldr	r3, [pc, #60]	; (401d7c <PrintFlt+0xe4>)
  401d3e:	4798      	blx	r3
  401d40:	4603      	mov	r3, r0
  401d42:	b29b      	uxth	r3, r3
  401d44:	4619      	mov	r1, r3
  401d46:	480a      	ldr	r0, [pc, #40]	; (401d70 <PrintFlt+0xd8>)
  401d48:	4b0d      	ldr	r3, [pc, #52]	; (401d80 <PrintFlt+0xe8>)
  401d4a:	4798      	blx	r3
    }
  401d4c:	bf00      	nop
  401d4e:	3714      	adds	r7, #20
  401d50:	46bd      	mov	sp, r7
  401d52:	bd90      	pop	{r4, r7, pc}
  401d54:	0040b4d1 	.word	0x0040b4d1
  401d58:	0040b4e5 	.word	0x0040b4e5
  401d5c:	0040b0b1 	.word	0x0040b0b1
  401d60:	0040af45 	.word	0x0040af45
  401d64:	0040b159 	.word	0x0040b159
  401d68:	42c80000 	.word	0x42c80000
  401d6c:	0040f89c 	.word	0x0040f89c
  401d70:	20002ea4 	.word	0x20002ea4
  401d74:	0040bad9 	.word	0x0040bad9
  401d78:	0040f8a4 	.word	0x0040f8a4
  401d7c:	0040bb41 	.word	0x0040bb41
  401d80:	004008b1 	.word	0x004008b1

00401d84 <GetOrientation>:
#endif

void GetOrientation(int16_t *acc, float *orientation)
{
  401d84:	b5f0      	push	{r4, r5, r6, r7, lr}
  401d86:	b087      	sub	sp, #28
  401d88:	af00      	add	r7, sp, #0
  401d8a:	6078      	str	r0, [r7, #4]
  401d8c:	6039      	str	r1, [r7, #0]
    float accFlt[3];
    accFlt[0] = ((float)acc[0])/32768.0f;
  401d8e:	687b      	ldr	r3, [r7, #4]
  401d90:	f9b3 2000 	ldrsh.w	r2, [r3]
  401d94:	4b55      	ldr	r3, [pc, #340]	; (401eec <GetOrientation+0x168>)
  401d96:	4610      	mov	r0, r2
  401d98:	4798      	blx	r3
  401d9a:	4602      	mov	r2, r0
  401d9c:	4b54      	ldr	r3, [pc, #336]	; (401ef0 <GetOrientation+0x16c>)
  401d9e:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
  401da2:	4610      	mov	r0, r2
  401da4:	4798      	blx	r3
  401da6:	4603      	mov	r3, r0
  401da8:	60fb      	str	r3, [r7, #12]
    accFlt[1] = ((float)acc[1])/32768.0f;
  401daa:	687b      	ldr	r3, [r7, #4]
  401dac:	3302      	adds	r3, #2
  401dae:	f9b3 2000 	ldrsh.w	r2, [r3]
  401db2:	4b4e      	ldr	r3, [pc, #312]	; (401eec <GetOrientation+0x168>)
  401db4:	4610      	mov	r0, r2
  401db6:	4798      	blx	r3
  401db8:	4602      	mov	r2, r0
  401dba:	4b4d      	ldr	r3, [pc, #308]	; (401ef0 <GetOrientation+0x16c>)
  401dbc:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
  401dc0:	4610      	mov	r0, r2
  401dc2:	4798      	blx	r3
  401dc4:	4603      	mov	r3, r0
  401dc6:	613b      	str	r3, [r7, #16]
    accFlt[2] = ((float)acc[2])/32768.0f;
  401dc8:	687b      	ldr	r3, [r7, #4]
  401dca:	3304      	adds	r3, #4
  401dcc:	f9b3 2000 	ldrsh.w	r2, [r3]
  401dd0:	4b46      	ldr	r3, [pc, #280]	; (401eec <GetOrientation+0x168>)
  401dd2:	4610      	mov	r0, r2
  401dd4:	4798      	blx	r3
  401dd6:	4602      	mov	r2, r0
  401dd8:	4b45      	ldr	r3, [pc, #276]	; (401ef0 <GetOrientation+0x16c>)
  401dda:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
  401dde:	4610      	mov	r0, r2
  401de0:	4798      	blx	r3
  401de2:	4603      	mov	r3, r0
  401de4:	617b      	str	r3, [r7, #20]
    
    //Equation 25 (Rotate Across X Axis)
    orientation[0] = atan2(accFlt[1], accFlt[2]);
  401de6:	693a      	ldr	r2, [r7, #16]
  401de8:	4b42      	ldr	r3, [pc, #264]	; (401ef4 <GetOrientation+0x170>)
  401dea:	4610      	mov	r0, r2
  401dec:	4798      	blx	r3
  401dee:	4604      	mov	r4, r0
  401df0:	460d      	mov	r5, r1
  401df2:	697a      	ldr	r2, [r7, #20]
  401df4:	4b3f      	ldr	r3, [pc, #252]	; (401ef4 <GetOrientation+0x170>)
  401df6:	4610      	mov	r0, r2
  401df8:	4798      	blx	r3
  401dfa:	4602      	mov	r2, r0
  401dfc:	460b      	mov	r3, r1
  401dfe:	4620      	mov	r0, r4
  401e00:	4629      	mov	r1, r5
  401e02:	4c3d      	ldr	r4, [pc, #244]	; (401ef8 <GetOrientation+0x174>)
  401e04:	47a0      	blx	r4
  401e06:	460a      	mov	r2, r1
  401e08:	4601      	mov	r1, r0
  401e0a:	4b3c      	ldr	r3, [pc, #240]	; (401efc <GetOrientation+0x178>)
  401e0c:	4608      	mov	r0, r1
  401e0e:	4611      	mov	r1, r2
  401e10:	4798      	blx	r3
  401e12:	4602      	mov	r2, r0
  401e14:	683b      	ldr	r3, [r7, #0]
  401e16:	601a      	str	r2, [r3, #0]
    //Radian to degrees conversion
    orientation[0] = (180.0f * orientation[0])/(float)M_PI;
  401e18:	683b      	ldr	r3, [r7, #0]
  401e1a:	681a      	ldr	r2, [r3, #0]
  401e1c:	4b38      	ldr	r3, [pc, #224]	; (401f00 <GetOrientation+0x17c>)
  401e1e:	4939      	ldr	r1, [pc, #228]	; (401f04 <GetOrientation+0x180>)
  401e20:	4610      	mov	r0, r2
  401e22:	4798      	blx	r3
  401e24:	4603      	mov	r3, r0
  401e26:	461a      	mov	r2, r3
  401e28:	4b31      	ldr	r3, [pc, #196]	; (401ef0 <GetOrientation+0x16c>)
  401e2a:	4937      	ldr	r1, [pc, #220]	; (401f08 <GetOrientation+0x184>)
  401e2c:	4610      	mov	r0, r2
  401e2e:	4798      	blx	r3
  401e30:	4603      	mov	r3, r0
  401e32:	461a      	mov	r2, r3
  401e34:	683b      	ldr	r3, [r7, #0]
  401e36:	601a      	str	r2, [r3, #0]
    
    //Equation 26 (Rotate Across Y Axis)
    orientation[1] = sqrt(accFlt[1]*accFlt[1] + accFlt[2]*accFlt[2]);
  401e38:	683b      	ldr	r3, [r7, #0]
  401e3a:	1d1c      	adds	r4, r3, #4
  401e3c:	693a      	ldr	r2, [r7, #16]
  401e3e:	6939      	ldr	r1, [r7, #16]
  401e40:	4b2f      	ldr	r3, [pc, #188]	; (401f00 <GetOrientation+0x17c>)
  401e42:	4610      	mov	r0, r2
  401e44:	4798      	blx	r3
  401e46:	4603      	mov	r3, r0
  401e48:	461d      	mov	r5, r3
  401e4a:	697a      	ldr	r2, [r7, #20]
  401e4c:	6979      	ldr	r1, [r7, #20]
  401e4e:	4b2c      	ldr	r3, [pc, #176]	; (401f00 <GetOrientation+0x17c>)
  401e50:	4610      	mov	r0, r2
  401e52:	4798      	blx	r3
  401e54:	4603      	mov	r3, r0
  401e56:	461a      	mov	r2, r3
  401e58:	4b2c      	ldr	r3, [pc, #176]	; (401f0c <GetOrientation+0x188>)
  401e5a:	4611      	mov	r1, r2
  401e5c:	4628      	mov	r0, r5
  401e5e:	4798      	blx	r3
  401e60:	4603      	mov	r3, r0
  401e62:	461a      	mov	r2, r3
  401e64:	4b23      	ldr	r3, [pc, #140]	; (401ef4 <GetOrientation+0x170>)
  401e66:	4610      	mov	r0, r2
  401e68:	4798      	blx	r3
  401e6a:	4602      	mov	r2, r0
  401e6c:	460b      	mov	r3, r1
  401e6e:	4610      	mov	r0, r2
  401e70:	4619      	mov	r1, r3
  401e72:	4b27      	ldr	r3, [pc, #156]	; (401f10 <GetOrientation+0x18c>)
  401e74:	4798      	blx	r3
  401e76:	460a      	mov	r2, r1
  401e78:	4601      	mov	r1, r0
  401e7a:	4b20      	ldr	r3, [pc, #128]	; (401efc <GetOrientation+0x178>)
  401e7c:	4608      	mov	r0, r1
  401e7e:	4611      	mov	r1, r2
  401e80:	4798      	blx	r3
  401e82:	4603      	mov	r3, r0
  401e84:	6023      	str	r3, [r4, #0]
    orientation[1] = atan2(-accFlt[0], orientation[1]); 
  401e86:	683b      	ldr	r3, [r7, #0]
  401e88:	1d1c      	adds	r4, r3, #4
  401e8a:	68fb      	ldr	r3, [r7, #12]
  401e8c:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
  401e90:	4b18      	ldr	r3, [pc, #96]	; (401ef4 <GetOrientation+0x170>)
  401e92:	4610      	mov	r0, r2
  401e94:	4798      	blx	r3
  401e96:	4605      	mov	r5, r0
  401e98:	460e      	mov	r6, r1
  401e9a:	683b      	ldr	r3, [r7, #0]
  401e9c:	3304      	adds	r3, #4
  401e9e:	681a      	ldr	r2, [r3, #0]
  401ea0:	4b14      	ldr	r3, [pc, #80]	; (401ef4 <GetOrientation+0x170>)
  401ea2:	4610      	mov	r0, r2
  401ea4:	4798      	blx	r3
  401ea6:	4602      	mov	r2, r0
  401ea8:	460b      	mov	r3, r1
  401eaa:	4628      	mov	r0, r5
  401eac:	4631      	mov	r1, r6
  401eae:	4d12      	ldr	r5, [pc, #72]	; (401ef8 <GetOrientation+0x174>)
  401eb0:	47a8      	blx	r5
  401eb2:	460a      	mov	r2, r1
  401eb4:	4601      	mov	r1, r0
  401eb6:	4b11      	ldr	r3, [pc, #68]	; (401efc <GetOrientation+0x178>)
  401eb8:	4608      	mov	r0, r1
  401eba:	4611      	mov	r1, r2
  401ebc:	4798      	blx	r3
  401ebe:	4603      	mov	r3, r0
  401ec0:	6023      	str	r3, [r4, #0]
    //Radian to degrees conversion
    orientation[1] = (180.0f * orientation[1])/(float)M_PI;
  401ec2:	683b      	ldr	r3, [r7, #0]
  401ec4:	1d1c      	adds	r4, r3, #4
  401ec6:	683b      	ldr	r3, [r7, #0]
  401ec8:	3304      	adds	r3, #4
  401eca:	681a      	ldr	r2, [r3, #0]
  401ecc:	4b0c      	ldr	r3, [pc, #48]	; (401f00 <GetOrientation+0x17c>)
  401ece:	490d      	ldr	r1, [pc, #52]	; (401f04 <GetOrientation+0x180>)
  401ed0:	4610      	mov	r0, r2
  401ed2:	4798      	blx	r3
  401ed4:	4603      	mov	r3, r0
  401ed6:	461a      	mov	r2, r3
  401ed8:	4b05      	ldr	r3, [pc, #20]	; (401ef0 <GetOrientation+0x16c>)
  401eda:	490b      	ldr	r1, [pc, #44]	; (401f08 <GetOrientation+0x184>)
  401edc:	4610      	mov	r0, r2
  401ede:	4798      	blx	r3
  401ee0:	4603      	mov	r3, r0
  401ee2:	6023      	str	r3, [r4, #0]
}
  401ee4:	bf00      	nop
  401ee6:	371c      	adds	r7, #28
  401ee8:	46bd      	mov	sp, r7
  401eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401eec:	0040b0b1 	.word	0x0040b0b1
  401ef0:	0040b2c1 	.word	0x0040b2c1
  401ef4:	0040a845 	.word	0x0040a845
  401ef8:	00407fa5 	.word	0x00407fa5
  401efc:	0040ae9d 	.word	0x0040ae9d
  401f00:	0040b159 	.word	0x0040b159
  401f04:	43340000 	.word	0x43340000
  401f08:	40490fdb 	.word	0x40490fdb
  401f0c:	0040af49 	.word	0x0040af49
  401f10:	00407fa9 	.word	0x00407fa9
  401f14:	00000000 	.word	0x00000000

00401f18 <GetPvAngle>:

float GetPvAngle(void)
{
  401f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401f1c:	b0b1      	sub	sp, #196	; 0xc4
  401f1e:	af02      	add	r7, sp, #8
	float e, f, g, h, i, j, k, l, m, n, o, p;
	float q, r, s, t;
	float timeInSecs;
    
    //BCD to Int Conversion
    date = ((mBusRegs[MBUS_REG_DD]>>4)*10) + (mBusRegs[MBUS_REG_DD]&0x000F); 
  401f20:	4b55      	ldr	r3, [pc, #340]	; (402078 <GetPvAngle+0x160>)
  401f22:	891b      	ldrh	r3, [r3, #8]
  401f24:	091b      	lsrs	r3, r3, #4
  401f26:	b29b      	uxth	r3, r3
  401f28:	461a      	mov	r2, r3
  401f2a:	0092      	lsls	r2, r2, #2
  401f2c:	4413      	add	r3, r2
  401f2e:	005b      	lsls	r3, r3, #1
  401f30:	b29a      	uxth	r2, r3
  401f32:	4b51      	ldr	r3, [pc, #324]	; (402078 <GetPvAngle+0x160>)
  401f34:	891b      	ldrh	r3, [r3, #8]
  401f36:	f003 030f 	and.w	r3, r3, #15
  401f3a:	b29b      	uxth	r3, r3
  401f3c:	4413      	add	r3, r2
  401f3e:	b29b      	uxth	r3, r3
  401f40:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
    mon = ((mBusRegs[MBUS_REG_MM]>>4)*10) + (mBusRegs[MBUS_REG_MM]&0x000F); 
  401f44:	4b4c      	ldr	r3, [pc, #304]	; (402078 <GetPvAngle+0x160>)
  401f46:	895b      	ldrh	r3, [r3, #10]
  401f48:	091b      	lsrs	r3, r3, #4
  401f4a:	b29b      	uxth	r3, r3
  401f4c:	461a      	mov	r2, r3
  401f4e:	0092      	lsls	r2, r2, #2
  401f50:	4413      	add	r3, r2
  401f52:	005b      	lsls	r3, r3, #1
  401f54:	b29a      	uxth	r2, r3
  401f56:	4b48      	ldr	r3, [pc, #288]	; (402078 <GetPvAngle+0x160>)
  401f58:	895b      	ldrh	r3, [r3, #10]
  401f5a:	f003 030f 	and.w	r3, r3, #15
  401f5e:	b29b      	uxth	r3, r3
  401f60:	4413      	add	r3, r2
  401f62:	b29b      	uxth	r3, r3
  401f64:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
    year = ((mBusRegs[MBUS_REG_YY]>>4)*10) + (mBusRegs[MBUS_REG_YY]&0x000F); 
  401f68:	4b43      	ldr	r3, [pc, #268]	; (402078 <GetPvAngle+0x160>)
  401f6a:	899b      	ldrh	r3, [r3, #12]
  401f6c:	091b      	lsrs	r3, r3, #4
  401f6e:	b29b      	uxth	r3, r3
  401f70:	461a      	mov	r2, r3
  401f72:	0092      	lsls	r2, r2, #2
  401f74:	4413      	add	r3, r2
  401f76:	005b      	lsls	r3, r3, #1
  401f78:	b29a      	uxth	r2, r3
  401f7a:	4b3f      	ldr	r3, [pc, #252]	; (402078 <GetPvAngle+0x160>)
  401f7c:	899b      	ldrh	r3, [r3, #12]
  401f7e:	f003 030f 	and.w	r3, r3, #15
  401f82:	b29b      	uxth	r3, r3
  401f84:	4413      	add	r3, r2
  401f86:	b29b      	uxth	r3, r3
  401f88:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
    year += 2000;
  401f8c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
  401f90:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
  401f94:	b29b      	uxth	r3, r3
  401f96:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
    hrs = ((mBusRegs[MBUS_REG_HRS]>>4)*10) + (mBusRegs[MBUS_REG_HRS]&0x000F); 
  401f9a:	4b37      	ldr	r3, [pc, #220]	; (402078 <GetPvAngle+0x160>)
  401f9c:	889b      	ldrh	r3, [r3, #4]
  401f9e:	091b      	lsrs	r3, r3, #4
  401fa0:	b29b      	uxth	r3, r3
  401fa2:	461a      	mov	r2, r3
  401fa4:	0092      	lsls	r2, r2, #2
  401fa6:	4413      	add	r3, r2
  401fa8:	005b      	lsls	r3, r3, #1
  401faa:	b29a      	uxth	r2, r3
  401fac:	4b32      	ldr	r3, [pc, #200]	; (402078 <GetPvAngle+0x160>)
  401fae:	889b      	ldrh	r3, [r3, #4]
  401fb0:	f003 030f 	and.w	r3, r3, #15
  401fb4:	b29b      	uxth	r3, r3
  401fb6:	4413      	add	r3, r2
  401fb8:	b29b      	uxth	r3, r3
  401fba:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
    min = ((mBusRegs[MBUS_REG_MIN]>>4)*10) + (mBusRegs[MBUS_REG_MIN]&0x000F); 
  401fbe:	4b2e      	ldr	r3, [pc, #184]	; (402078 <GetPvAngle+0x160>)
  401fc0:	885b      	ldrh	r3, [r3, #2]
  401fc2:	091b      	lsrs	r3, r3, #4
  401fc4:	b29b      	uxth	r3, r3
  401fc6:	461a      	mov	r2, r3
  401fc8:	0092      	lsls	r2, r2, #2
  401fca:	4413      	add	r3, r2
  401fcc:	005b      	lsls	r3, r3, #1
  401fce:	b29a      	uxth	r2, r3
  401fd0:	4b29      	ldr	r3, [pc, #164]	; (402078 <GetPvAngle+0x160>)
  401fd2:	885b      	ldrh	r3, [r3, #2]
  401fd4:	f003 030f 	and.w	r3, r3, #15
  401fd8:	b29b      	uxth	r3, r3
  401fda:	4413      	add	r3, r2
  401fdc:	b29b      	uxth	r3, r3
  401fde:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    sec = ((mBusRegs[MBUS_REG_SEC]>>4)*10) + (mBusRegs[MBUS_REG_SEC]&0x000F); 
  401fe2:	4b25      	ldr	r3, [pc, #148]	; (402078 <GetPvAngle+0x160>)
  401fe4:	881b      	ldrh	r3, [r3, #0]
  401fe6:	091b      	lsrs	r3, r3, #4
  401fe8:	b29b      	uxth	r3, r3
  401fea:	461a      	mov	r2, r3
  401fec:	0092      	lsls	r2, r2, #2
  401fee:	4413      	add	r3, r2
  401ff0:	005b      	lsls	r3, r3, #1
  401ff2:	b29a      	uxth	r2, r3
  401ff4:	4b20      	ldr	r3, [pc, #128]	; (402078 <GetPvAngle+0x160>)
  401ff6:	881b      	ldrh	r3, [r3, #0]
  401ff8:	f003 030f 	and.w	r3, r3, #15
  401ffc:	b29b      	uxth	r3, r3
  401ffe:	4413      	add	r3, r2
  402000:	b29b      	uxth	r3, r3
  402002:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
    
    #ifdef LOG_EN
        sprintf(LogBuff,"%d,%d,%d,", hrs, min, sec);
  402006:	f9b7 20a8 	ldrsh.w	r2, [r7, #168]	; 0xa8
  40200a:	f9b7 10a6 	ldrsh.w	r1, [r7, #166]	; 0xa6
  40200e:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
  402012:	9300      	str	r3, [sp, #0]
  402014:	460b      	mov	r3, r1
  402016:	4919      	ldr	r1, [pc, #100]	; (40207c <GetPvAngle+0x164>)
  402018:	4819      	ldr	r0, [pc, #100]	; (402080 <GetPvAngle+0x168>)
  40201a:	4c1a      	ldr	r4, [pc, #104]	; (402084 <GetPvAngle+0x16c>)
  40201c:	47a0      	blx	r4
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
  40201e:	4818      	ldr	r0, [pc, #96]	; (402080 <GetPvAngle+0x168>)
  402020:	4b19      	ldr	r3, [pc, #100]	; (402088 <GetPvAngle+0x170>)
  402022:	4798      	blx	r3
  402024:	4603      	mov	r3, r0
  402026:	b29b      	uxth	r3, r3
  402028:	4619      	mov	r1, r3
  40202a:	4815      	ldr	r0, [pc, #84]	; (402080 <GetPvAngle+0x168>)
  40202c:	4b17      	ldr	r3, [pc, #92]	; (40208c <GetPvAngle+0x174>)
  40202e:	4798      	blx	r3
    #endif
    
    timeInSecs = (hrs*3600 + min*60 + sec)/86400.0f;
  402030:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	; 0xa8
  402034:	f44f 6261 	mov.w	r2, #3600	; 0xe10
  402038:	fb02 f103 	mul.w	r1, r2, r3
  40203c:	f9b7 20a6 	ldrsh.w	r2, [r7, #166]	; 0xa6
  402040:	4613      	mov	r3, r2
  402042:	011b      	lsls	r3, r3, #4
  402044:	1a9b      	subs	r3, r3, r2
  402046:	009b      	lsls	r3, r3, #2
  402048:	18ca      	adds	r2, r1, r3
  40204a:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
  40204e:	441a      	add	r2, r3
  402050:	4b0f      	ldr	r3, [pc, #60]	; (402090 <GetPvAngle+0x178>)
  402052:	4610      	mov	r0, r2
  402054:	4798      	blx	r3
  402056:	4602      	mov	r2, r0
  402058:	4b0e      	ldr	r3, [pc, #56]	; (402094 <GetPvAngle+0x17c>)
  40205a:	490f      	ldr	r1, [pc, #60]	; (402098 <GetPvAngle+0x180>)
  40205c:	4610      	mov	r0, r2
  40205e:	4798      	blx	r3
  402060:	4603      	mov	r3, r0
  402062:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    //Angle Calcualation Algorithm
	if (mon <= 2)
  402066:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
  40206a:	2b02      	cmp	r3, #2
  40206c:	dc16      	bgt.n	40209c <GetPvAngle+0x184>
	{
		x1 = 1;
  40206e:	2301      	movs	r3, #1
  402070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  402074:	e015      	b.n	4020a2 <GetPvAngle+0x18a>
  402076:	bf00      	nop
  402078:	20000bc4 	.word	0x20000bc4
  40207c:	0040f8ac 	.word	0x0040f8ac
  402080:	20002eb0 	.word	0x20002eb0
  402084:	0040bad9 	.word	0x0040bad9
  402088:	0040bb41 	.word	0x0040bb41
  40208c:	004008b1 	.word	0x004008b1
  402090:	0040b0b1 	.word	0x0040b0b1
  402094:	0040b2c1 	.word	0x0040b2c1
  402098:	47a8c000 	.word	0x47a8c000
	}
	else
	{
		x1 = 0;
  40209c:	2300      	movs	r3, #0
  40209e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	}
	x2 = 12 * x1;
  4020a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
  4020a6:	4613      	mov	r3, r2
  4020a8:	005b      	lsls	r3, r3, #1
  4020aa:	4413      	add	r3, r2
  4020ac:	009b      	lsls	r3, r3, #2
  4020ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	x3 = x2 - 3;
  4020b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
  4020b6:	3b03      	subs	r3, #3
  4020b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	x4 = mon + x3;
  4020bc:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	; 0xac
  4020c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
  4020c4:	4413      	add	r3, r2
  4020c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	x5 = 4800 - x1;
  4020ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
  4020ce:	f5c3 5396 	rsb	r3, r3, #4800	; 0x12c0
  4020d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	x7 = x5 + year;
  4020d6:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
  4020da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
  4020de:	4413      	add	r3, r2
  4020e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	y0 = 153*x4;
  4020e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
  4020e8:	4613      	mov	r3, r2
  4020ea:	00db      	lsls	r3, r3, #3
  4020ec:	4413      	add	r3, r2
  4020ee:	011a      	lsls	r2, r3, #4
  4020f0:	4413      	add	r3, r2
  4020f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	y1 = y0 + 2;
  4020f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
  4020fa:	3302      	adds	r3, #2
  4020fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	y2 = y1 / 5.0f;
  402100:	4b8a      	ldr	r3, [pc, #552]	; (40232c <GetPvAngle+0x414>)
  402102:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
  402106:	4798      	blx	r3
  402108:	4602      	mov	r2, r0
  40210a:	4b89      	ldr	r3, [pc, #548]	; (402330 <GetPvAngle+0x418>)
  40210c:	4989      	ldr	r1, [pc, #548]	; (402334 <GetPvAngle+0x41c>)
  40210e:	4610      	mov	r0, r2
  402110:	4798      	blx	r3
  402112:	4603      	mov	r3, r0
  402114:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	y3 = date + y2;
  402118:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
  40211c:	4b83      	ldr	r3, [pc, #524]	; (40232c <GetPvAngle+0x414>)
  40211e:	4610      	mov	r0, r2
  402120:	4798      	blx	r3
  402122:	4602      	mov	r2, r0
  402124:	4b84      	ldr	r3, [pc, #528]	; (402338 <GetPvAngle+0x420>)
  402126:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
  40212a:	4610      	mov	r0, r2
  40212c:	4798      	blx	r3
  40212e:	4603      	mov	r3, r0
  402130:	67fb      	str	r3, [r7, #124]	; 0x7c
	y4 = 365 * x7;
  402132:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
  402136:	f240 126d 	movw	r2, #365	; 0x16d
  40213a:	fb02 f303 	mul.w	r3, r2, r3
  40213e:	67bb      	str	r3, [r7, #120]	; 0x78
	y5 = y3 + y4;
  402140:	4b7a      	ldr	r3, [pc, #488]	; (40232c <GetPvAngle+0x414>)
  402142:	6fb8      	ldr	r0, [r7, #120]	; 0x78
  402144:	4798      	blx	r3
  402146:	4602      	mov	r2, r0
  402148:	4b7b      	ldr	r3, [pc, #492]	; (402338 <GetPvAngle+0x420>)
  40214a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
  40214c:	4610      	mov	r0, r2
  40214e:	4798      	blx	r3
  402150:	4603      	mov	r3, r0
  402152:	677b      	str	r3, [r7, #116]	; 0x74
	y6 = x7 / 4.0f;
  402154:	4b75      	ldr	r3, [pc, #468]	; (40232c <GetPvAngle+0x414>)
  402156:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
  40215a:	4798      	blx	r3
  40215c:	4602      	mov	r2, r0
  40215e:	4b74      	ldr	r3, [pc, #464]	; (402330 <GetPvAngle+0x418>)
  402160:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  402164:	4610      	mov	r0, r2
  402166:	4798      	blx	r3
  402168:	4603      	mov	r3, r0
  40216a:	673b      	str	r3, [r7, #112]	; 0x70
	y7 = y5 + y6;
  40216c:	4b72      	ldr	r3, [pc, #456]	; (402338 <GetPvAngle+0x420>)
  40216e:	6f39      	ldr	r1, [r7, #112]	; 0x70
  402170:	6f78      	ldr	r0, [r7, #116]	; 0x74
  402172:	4798      	blx	r3
  402174:	4603      	mov	r3, r0
  402176:	66fb      	str	r3, [r7, #108]	; 0x6c
	y8 = x7 / 100.0f;
  402178:	4b6c      	ldr	r3, [pc, #432]	; (40232c <GetPvAngle+0x414>)
  40217a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
  40217e:	4798      	blx	r3
  402180:	4602      	mov	r2, r0
  402182:	4b6b      	ldr	r3, [pc, #428]	; (402330 <GetPvAngle+0x418>)
  402184:	496d      	ldr	r1, [pc, #436]	; (40233c <GetPvAngle+0x424>)
  402186:	4610      	mov	r0, r2
  402188:	4798      	blx	r3
  40218a:	4603      	mov	r3, r0
  40218c:	66bb      	str	r3, [r7, #104]	; 0x68
	y9 = y7 - y8;
  40218e:	4b6c      	ldr	r3, [pc, #432]	; (402340 <GetPvAngle+0x428>)
  402190:	6eb9      	ldr	r1, [r7, #104]	; 0x68
  402192:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
  402194:	4798      	blx	r3
  402196:	4603      	mov	r3, r0
  402198:	667b      	str	r3, [r7, #100]	; 0x64
	y10 = x7 / 400.0f;
  40219a:	4b64      	ldr	r3, [pc, #400]	; (40232c <GetPvAngle+0x414>)
  40219c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
  4021a0:	4798      	blx	r3
  4021a2:	4602      	mov	r2, r0
  4021a4:	4b62      	ldr	r3, [pc, #392]	; (402330 <GetPvAngle+0x418>)
  4021a6:	4967      	ldr	r1, [pc, #412]	; (402344 <GetPvAngle+0x42c>)
  4021a8:	4610      	mov	r0, r2
  4021aa:	4798      	blx	r3
  4021ac:	4603      	mov	r3, r0
  4021ae:	663b      	str	r3, [r7, #96]	; 0x60
	y11 = y9 + y10;
  4021b0:	4b61      	ldr	r3, [pc, #388]	; (402338 <GetPvAngle+0x420>)
  4021b2:	6e39      	ldr	r1, [r7, #96]	; 0x60
  4021b4:	6e78      	ldr	r0, [r7, #100]	; 0x64
  4021b6:	4798      	blx	r3
  4021b8:	4603      	mov	r3, r0
  4021ba:	65fb      	str	r3, [r7, #92]	; 0x5c

	x9 = y11 - 32045;
  4021bc:	4b60      	ldr	r3, [pc, #384]	; (402340 <GetPvAngle+0x428>)
  4021be:	4962      	ldr	r1, [pc, #392]	; (402348 <GetPvAngle+0x430>)
  4021c0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
  4021c2:	4798      	blx	r3
  4021c4:	4603      	mov	r3, r0
  4021c6:	65bb      	str	r3, [r7, #88]	; 0x58
	y12 = hrs - 12;
  4021c8:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	; 0xa8
  4021cc:	3b0c      	subs	r3, #12
  4021ce:	657b      	str	r3, [r7, #84]	; 0x54
	y13 = y12 / 24.0f;
  4021d0:	4b56      	ldr	r3, [pc, #344]	; (40232c <GetPvAngle+0x414>)
  4021d2:	6d78      	ldr	r0, [r7, #84]	; 0x54
  4021d4:	4798      	blx	r3
  4021d6:	4602      	mov	r2, r0
  4021d8:	4b55      	ldr	r3, [pc, #340]	; (402330 <GetPvAngle+0x418>)
  4021da:	495c      	ldr	r1, [pc, #368]	; (40234c <GetPvAngle+0x434>)
  4021dc:	4610      	mov	r0, r2
  4021de:	4798      	blx	r3
  4021e0:	4603      	mov	r3, r0
  4021e2:	653b      	str	r3, [r7, #80]	; 0x50
	y14 = min / 1440.0f;
  4021e4:	f9b7 20a6 	ldrsh.w	r2, [r7, #166]	; 0xa6
  4021e8:	4b50      	ldr	r3, [pc, #320]	; (40232c <GetPvAngle+0x414>)
  4021ea:	4610      	mov	r0, r2
  4021ec:	4798      	blx	r3
  4021ee:	4602      	mov	r2, r0
  4021f0:	4b4f      	ldr	r3, [pc, #316]	; (402330 <GetPvAngle+0x418>)
  4021f2:	4957      	ldr	r1, [pc, #348]	; (402350 <GetPvAngle+0x438>)
  4021f4:	4610      	mov	r0, r2
  4021f6:	4798      	blx	r3
  4021f8:	4603      	mov	r3, r0
  4021fa:	64fb      	str	r3, [r7, #76]	; 0x4c
	y15 = y13 + y14;
  4021fc:	4b4e      	ldr	r3, [pc, #312]	; (402338 <GetPvAngle+0x420>)
  4021fe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
  402200:	6d38      	ldr	r0, [r7, #80]	; 0x50
  402202:	4798      	blx	r3
  402204:	4603      	mov	r3, r0
  402206:	64bb      	str	r3, [r7, #72]	; 0x48
	y16 = sec / 86400.0f;
  402208:	f9b7 20a4 	ldrsh.w	r2, [r7, #164]	; 0xa4
  40220c:	4b47      	ldr	r3, [pc, #284]	; (40232c <GetPvAngle+0x414>)
  40220e:	4610      	mov	r0, r2
  402210:	4798      	blx	r3
  402212:	4602      	mov	r2, r0
  402214:	4b46      	ldr	r3, [pc, #280]	; (402330 <GetPvAngle+0x418>)
  402216:	494f      	ldr	r1, [pc, #316]	; (402354 <GetPvAngle+0x43c>)
  402218:	4610      	mov	r0, r2
  40221a:	4798      	blx	r3
  40221c:	4603      	mov	r3, r0
  40221e:	647b      	str	r3, [r7, #68]	; 0x44
	x13 = y15 + y16;
  402220:	4b45      	ldr	r3, [pc, #276]	; (402338 <GetPvAngle+0x420>)
  402222:	6c79      	ldr	r1, [r7, #68]	; 0x44
  402224:	6cb8      	ldr	r0, [r7, #72]	; 0x48
  402226:	4798      	blx	r3
  402228:	4603      	mov	r3, r0
  40222a:	643b      	str	r3, [r7, #64]	; 0x40

	e = x9 + x13;
  40222c:	4b42      	ldr	r3, [pc, #264]	; (402338 <GetPvAngle+0x420>)
  40222e:	6c39      	ldr	r1, [r7, #64]	; 0x40
  402230:	6db8      	ldr	r0, [r7, #88]	; 0x58
  402232:	4798      	blx	r3
  402234:	4603      	mov	r3, r0
  402236:	63fb      	str	r3, [r7, #60]	; 0x3c
	f = (e - 2451545.0f) / 36525.0f;
  402238:	4b41      	ldr	r3, [pc, #260]	; (402340 <GetPvAngle+0x428>)
  40223a:	4947      	ldr	r1, [pc, #284]	; (402358 <GetPvAngle+0x440>)
  40223c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
  40223e:	4798      	blx	r3
  402240:	4603      	mov	r3, r0
  402242:	461a      	mov	r2, r3
  402244:	4b3a      	ldr	r3, [pc, #232]	; (402330 <GetPvAngle+0x418>)
  402246:	4945      	ldr	r1, [pc, #276]	; (40235c <GetPvAngle+0x444>)
  402248:	4610      	mov	r0, r2
  40224a:	4798      	blx	r3
  40224c:	4603      	mov	r3, r0
  40224e:	63bb      	str	r3, [r7, #56]	; 0x38
	g = ((int)(280.46646f + f*(36000.76983f + f*0.0003032f))) % 360; //mod
  402250:	4b43      	ldr	r3, [pc, #268]	; (402360 <GetPvAngle+0x448>)
  402252:	4944      	ldr	r1, [pc, #272]	; (402364 <GetPvAngle+0x44c>)
  402254:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  402256:	4798      	blx	r3
  402258:	4603      	mov	r3, r0
  40225a:	461a      	mov	r2, r3
  40225c:	4b36      	ldr	r3, [pc, #216]	; (402338 <GetPvAngle+0x420>)
  40225e:	4942      	ldr	r1, [pc, #264]	; (402368 <GetPvAngle+0x450>)
  402260:	4610      	mov	r0, r2
  402262:	4798      	blx	r3
  402264:	4603      	mov	r3, r0
  402266:	461a      	mov	r2, r3
  402268:	4b3d      	ldr	r3, [pc, #244]	; (402360 <GetPvAngle+0x448>)
  40226a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  40226c:	4610      	mov	r0, r2
  40226e:	4798      	blx	r3
  402270:	4603      	mov	r3, r0
  402272:	461a      	mov	r2, r3
  402274:	4b30      	ldr	r3, [pc, #192]	; (402338 <GetPvAngle+0x420>)
  402276:	493d      	ldr	r1, [pc, #244]	; (40236c <GetPvAngle+0x454>)
  402278:	4610      	mov	r0, r2
  40227a:	4798      	blx	r3
  40227c:	4603      	mov	r3, r0
  40227e:	461a      	mov	r2, r3
  402280:	4b3b      	ldr	r3, [pc, #236]	; (402370 <GetPvAngle+0x458>)
  402282:	4610      	mov	r0, r2
  402284:	4798      	blx	r3
  402286:	4603      	mov	r3, r0
  402288:	4a3a      	ldr	r2, [pc, #232]	; (402374 <GetPvAngle+0x45c>)
  40228a:	fb83 1202 	smull	r1, r2, r3, r2
  40228e:	441a      	add	r2, r3
  402290:	1211      	asrs	r1, r2, #8
  402292:	17da      	asrs	r2, r3, #31
  402294:	1a8a      	subs	r2, r1, r2
  402296:	f44f 71b4 	mov.w	r1, #360	; 0x168
  40229a:	fb01 f202 	mul.w	r2, r1, r2
  40229e:	1a9a      	subs	r2, r3, r2
  4022a0:	4b22      	ldr	r3, [pc, #136]	; (40232c <GetPvAngle+0x414>)
  4022a2:	4610      	mov	r0, r2
  4022a4:	4798      	blx	r3
  4022a6:	4603      	mov	r3, r0
  4022a8:	637b      	str	r3, [r7, #52]	; 0x34
	h = 357.52911f + f*(35999.05029f - 0.0001537f*f);
  4022aa:	4b2d      	ldr	r3, [pc, #180]	; (402360 <GetPvAngle+0x448>)
  4022ac:	4932      	ldr	r1, [pc, #200]	; (402378 <GetPvAngle+0x460>)
  4022ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  4022b0:	4798      	blx	r3
  4022b2:	4603      	mov	r3, r0
  4022b4:	461a      	mov	r2, r3
  4022b6:	4b22      	ldr	r3, [pc, #136]	; (402340 <GetPvAngle+0x428>)
  4022b8:	4611      	mov	r1, r2
  4022ba:	4830      	ldr	r0, [pc, #192]	; (40237c <GetPvAngle+0x464>)
  4022bc:	4798      	blx	r3
  4022be:	4603      	mov	r3, r0
  4022c0:	461a      	mov	r2, r3
  4022c2:	4b27      	ldr	r3, [pc, #156]	; (402360 <GetPvAngle+0x448>)
  4022c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  4022c6:	4610      	mov	r0, r2
  4022c8:	4798      	blx	r3
  4022ca:	4603      	mov	r3, r0
  4022cc:	461a      	mov	r2, r3
  4022ce:	4b1a      	ldr	r3, [pc, #104]	; (402338 <GetPvAngle+0x420>)
  4022d0:	492b      	ldr	r1, [pc, #172]	; (402380 <GetPvAngle+0x468>)
  4022d2:	4610      	mov	r0, r2
  4022d4:	4798      	blx	r3
  4022d6:	4603      	mov	r3, r0
  4022d8:	633b      	str	r3, [r7, #48]	; 0x30
	i = 0.016708634f - f*(0.000042037f + 0.0000001267f*f);
  4022da:	4b21      	ldr	r3, [pc, #132]	; (402360 <GetPvAngle+0x448>)
  4022dc:	4929      	ldr	r1, [pc, #164]	; (402384 <GetPvAngle+0x46c>)
  4022de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  4022e0:	4798      	blx	r3
  4022e2:	4603      	mov	r3, r0
  4022e4:	461a      	mov	r2, r3
  4022e6:	4b14      	ldr	r3, [pc, #80]	; (402338 <GetPvAngle+0x420>)
  4022e8:	4927      	ldr	r1, [pc, #156]	; (402388 <GetPvAngle+0x470>)
  4022ea:	4610      	mov	r0, r2
  4022ec:	4798      	blx	r3
  4022ee:	4603      	mov	r3, r0
  4022f0:	461a      	mov	r2, r3
  4022f2:	4b1b      	ldr	r3, [pc, #108]	; (402360 <GetPvAngle+0x448>)
  4022f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  4022f6:	4610      	mov	r0, r2
  4022f8:	4798      	blx	r3
  4022fa:	4603      	mov	r3, r0
  4022fc:	461a      	mov	r2, r3
  4022fe:	4b10      	ldr	r3, [pc, #64]	; (402340 <GetPvAngle+0x428>)
  402300:	4611      	mov	r1, r2
  402302:	4822      	ldr	r0, [pc, #136]	; (40238c <GetPvAngle+0x474>)
  402304:	4798      	blx	r3
  402306:	4603      	mov	r3, r0
  402308:	62fb      	str	r3, [r7, #44]	; 0x2c
	j = sin(Rad(h))*(1.914602f - f*(0.004817f + 0.000014f*f));
  40230a:	6b38      	ldr	r0, [r7, #48]	; 0x30
  40230c:	4b20      	ldr	r3, [pc, #128]	; (402390 <GetPvAngle+0x478>)
  40230e:	4798      	blx	r3
  402310:	4602      	mov	r2, r0
  402312:	4b20      	ldr	r3, [pc, #128]	; (402394 <GetPvAngle+0x47c>)
  402314:	4610      	mov	r0, r2
  402316:	4798      	blx	r3
  402318:	4603      	mov	r3, r0
  40231a:	460c      	mov	r4, r1
  40231c:	4618      	mov	r0, r3
  40231e:	4621      	mov	r1, r4
  402320:	4b1d      	ldr	r3, [pc, #116]	; (402398 <GetPvAngle+0x480>)
  402322:	4798      	blx	r3
  402324:	4605      	mov	r5, r0
  402326:	460e      	mov	r6, r1
  402328:	4b0d      	ldr	r3, [pc, #52]	; (402360 <GetPvAngle+0x448>)
  40232a:	e037      	b.n	40239c <GetPvAngle+0x484>
  40232c:	0040b0b1 	.word	0x0040b0b1
  402330:	0040b2c1 	.word	0x0040b2c1
  402334:	40a00000 	.word	0x40a00000
  402338:	0040af49 	.word	0x0040af49
  40233c:	42c80000 	.word	0x42c80000
  402340:	0040af45 	.word	0x0040af45
  402344:	43c80000 	.word	0x43c80000
  402348:	46fa5a00 	.word	0x46fa5a00
  40234c:	41c00000 	.word	0x41c00000
  402350:	44b40000 	.word	0x44b40000
  402354:	47a8c000 	.word	0x47a8c000
  402358:	4a15a164 	.word	0x4a15a164
  40235c:	470ead00 	.word	0x470ead00
  402360:	0040b159 	.word	0x0040b159
  402364:	399ef6d1 	.word	0x399ef6d1
  402368:	470ca0c5 	.word	0x470ca0c5
  40236c:	438c3bb5 	.word	0x438c3bb5
  402370:	0040b4e5 	.word	0x0040b4e5
  402374:	b60b60b7 	.word	0xb60b60b7
  402378:	39212a88 	.word	0x39212a88
  40237c:	470c9f0d 	.word	0x470c9f0d
  402380:	43b2c3ba 	.word	0x43b2c3ba
  402384:	34080b08 	.word	0x34080b08
  402388:	383050e3 	.word	0x383050e3
  40238c:	3c88e08c 	.word	0x3c88e08c
  402390:	00402de9 	.word	0x00402de9
  402394:	0040a845 	.word	0x0040a845
  402398:	00407d61 	.word	0x00407d61
  40239c:	4994      	ldr	r1, [pc, #592]	; (4025f0 <GetPvAngle+0x6d8>)
  40239e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  4023a0:	4798      	blx	r3
  4023a2:	4603      	mov	r3, r0
  4023a4:	461a      	mov	r2, r3
  4023a6:	4b93      	ldr	r3, [pc, #588]	; (4025f4 <GetPvAngle+0x6dc>)
  4023a8:	4993      	ldr	r1, [pc, #588]	; (4025f8 <GetPvAngle+0x6e0>)
  4023aa:	4610      	mov	r0, r2
  4023ac:	4798      	blx	r3
  4023ae:	4603      	mov	r3, r0
  4023b0:	461a      	mov	r2, r3
  4023b2:	4b92      	ldr	r3, [pc, #584]	; (4025fc <GetPvAngle+0x6e4>)
  4023b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  4023b6:	4610      	mov	r0, r2
  4023b8:	4798      	blx	r3
  4023ba:	4603      	mov	r3, r0
  4023bc:	461a      	mov	r2, r3
  4023be:	4b90      	ldr	r3, [pc, #576]	; (402600 <GetPvAngle+0x6e8>)
  4023c0:	4611      	mov	r1, r2
  4023c2:	4890      	ldr	r0, [pc, #576]	; (402604 <GetPvAngle+0x6ec>)
  4023c4:	4798      	blx	r3
  4023c6:	4603      	mov	r3, r0
  4023c8:	461a      	mov	r2, r3
  4023ca:	4b8f      	ldr	r3, [pc, #572]	; (402608 <GetPvAngle+0x6f0>)
  4023cc:	4610      	mov	r0, r2
  4023ce:	4798      	blx	r3
  4023d0:	4602      	mov	r2, r0
  4023d2:	460b      	mov	r3, r1
  4023d4:	4c8d      	ldr	r4, [pc, #564]	; (40260c <GetPvAngle+0x6f4>)
  4023d6:	4628      	mov	r0, r5
  4023d8:	4631      	mov	r1, r6
  4023da:	47a0      	blx	r4
  4023dc:	4603      	mov	r3, r0
  4023de:	460c      	mov	r4, r1
  4023e0:	4619      	mov	r1, r3
  4023e2:	4622      	mov	r2, r4
  4023e4:	4b8a      	ldr	r3, [pc, #552]	; (402610 <GetPvAngle+0x6f8>)
  4023e6:	4608      	mov	r0, r1
  4023e8:	4611      	mov	r1, r2
  4023ea:	4798      	blx	r3
  4023ec:	4603      	mov	r3, r0
  4023ee:	62bb      	str	r3, [r7, #40]	; 0x28
	j = j + sin(Rad(2 * h))*(0.019993f - 0.000101f*f);
  4023f0:	4b85      	ldr	r3, [pc, #532]	; (402608 <GetPvAngle+0x6f0>)
  4023f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  4023f4:	4798      	blx	r3
  4023f6:	4605      	mov	r5, r0
  4023f8:	460e      	mov	r6, r1
  4023fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  4023fc:	4b7d      	ldr	r3, [pc, #500]	; (4025f4 <GetPvAngle+0x6dc>)
  4023fe:	4611      	mov	r1, r2
  402400:	4610      	mov	r0, r2
  402402:	4798      	blx	r3
  402404:	4603      	mov	r3, r0
  402406:	4618      	mov	r0, r3
  402408:	4b82      	ldr	r3, [pc, #520]	; (402614 <GetPvAngle+0x6fc>)
  40240a:	4798      	blx	r3
  40240c:	4602      	mov	r2, r0
  40240e:	4b7e      	ldr	r3, [pc, #504]	; (402608 <GetPvAngle+0x6f0>)
  402410:	4610      	mov	r0, r2
  402412:	4798      	blx	r3
  402414:	4603      	mov	r3, r0
  402416:	460c      	mov	r4, r1
  402418:	4618      	mov	r0, r3
  40241a:	4621      	mov	r1, r4
  40241c:	4b7e      	ldr	r3, [pc, #504]	; (402618 <GetPvAngle+0x700>)
  40241e:	4798      	blx	r3
  402420:	4680      	mov	r8, r0
  402422:	4689      	mov	r9, r1
  402424:	4b75      	ldr	r3, [pc, #468]	; (4025fc <GetPvAngle+0x6e4>)
  402426:	497d      	ldr	r1, [pc, #500]	; (40261c <GetPvAngle+0x704>)
  402428:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  40242a:	4798      	blx	r3
  40242c:	4603      	mov	r3, r0
  40242e:	461a      	mov	r2, r3
  402430:	4b73      	ldr	r3, [pc, #460]	; (402600 <GetPvAngle+0x6e8>)
  402432:	4611      	mov	r1, r2
  402434:	487a      	ldr	r0, [pc, #488]	; (402620 <GetPvAngle+0x708>)
  402436:	4798      	blx	r3
  402438:	4603      	mov	r3, r0
  40243a:	461a      	mov	r2, r3
  40243c:	4b72      	ldr	r3, [pc, #456]	; (402608 <GetPvAngle+0x6f0>)
  40243e:	4610      	mov	r0, r2
  402440:	4798      	blx	r3
  402442:	4602      	mov	r2, r0
  402444:	460b      	mov	r3, r1
  402446:	4c71      	ldr	r4, [pc, #452]	; (40260c <GetPvAngle+0x6f4>)
  402448:	4640      	mov	r0, r8
  40244a:	4649      	mov	r1, r9
  40244c:	47a0      	blx	r4
  40244e:	4603      	mov	r3, r0
  402450:	460c      	mov	r4, r1
  402452:	461a      	mov	r2, r3
  402454:	4623      	mov	r3, r4
  402456:	4c73      	ldr	r4, [pc, #460]	; (402624 <GetPvAngle+0x70c>)
  402458:	4628      	mov	r0, r5
  40245a:	4631      	mov	r1, r6
  40245c:	47a0      	blx	r4
  40245e:	4603      	mov	r3, r0
  402460:	460c      	mov	r4, r1
  402462:	4619      	mov	r1, r3
  402464:	4622      	mov	r2, r4
  402466:	4b6a      	ldr	r3, [pc, #424]	; (402610 <GetPvAngle+0x6f8>)
  402468:	4608      	mov	r0, r1
  40246a:	4611      	mov	r1, r2
  40246c:	4798      	blx	r3
  40246e:	4603      	mov	r3, r0
  402470:	62bb      	str	r3, [r7, #40]	; 0x28
	j = j + sin(Rad(3 * h))*0.000289f;
  402472:	4b65      	ldr	r3, [pc, #404]	; (402608 <GetPvAngle+0x6f0>)
  402474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  402476:	4798      	blx	r3
  402478:	4605      	mov	r5, r0
  40247a:	460e      	mov	r6, r1
  40247c:	4b5f      	ldr	r3, [pc, #380]	; (4025fc <GetPvAngle+0x6e4>)
  40247e:	496a      	ldr	r1, [pc, #424]	; (402628 <GetPvAngle+0x710>)
  402480:	6b38      	ldr	r0, [r7, #48]	; 0x30
  402482:	4798      	blx	r3
  402484:	4603      	mov	r3, r0
  402486:	4618      	mov	r0, r3
  402488:	4b62      	ldr	r3, [pc, #392]	; (402614 <GetPvAngle+0x6fc>)
  40248a:	4798      	blx	r3
  40248c:	4602      	mov	r2, r0
  40248e:	4b5e      	ldr	r3, [pc, #376]	; (402608 <GetPvAngle+0x6f0>)
  402490:	4610      	mov	r0, r2
  402492:	4798      	blx	r3
  402494:	4603      	mov	r3, r0
  402496:	460c      	mov	r4, r1
  402498:	4618      	mov	r0, r3
  40249a:	4621      	mov	r1, r4
  40249c:	4b5e      	ldr	r3, [pc, #376]	; (402618 <GetPvAngle+0x700>)
  40249e:	4798      	blx	r3
  4024a0:	4c5a      	ldr	r4, [pc, #360]	; (40260c <GetPvAngle+0x6f4>)
  4024a2:	a34f      	add	r3, pc, #316	; (adr r3, 4025e0 <GetPvAngle+0x6c8>)
  4024a4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4024a8:	47a0      	blx	r4
  4024aa:	4603      	mov	r3, r0
  4024ac:	460c      	mov	r4, r1
  4024ae:	461a      	mov	r2, r3
  4024b0:	4623      	mov	r3, r4
  4024b2:	4c5c      	ldr	r4, [pc, #368]	; (402624 <GetPvAngle+0x70c>)
  4024b4:	4628      	mov	r0, r5
  4024b6:	4631      	mov	r1, r6
  4024b8:	47a0      	blx	r4
  4024ba:	4603      	mov	r3, r0
  4024bc:	460c      	mov	r4, r1
  4024be:	4619      	mov	r1, r3
  4024c0:	4622      	mov	r2, r4
  4024c2:	4b53      	ldr	r3, [pc, #332]	; (402610 <GetPvAngle+0x6f8>)
  4024c4:	4608      	mov	r0, r1
  4024c6:	4611      	mov	r1, r2
  4024c8:	4798      	blx	r3
  4024ca:	4603      	mov	r3, r0
  4024cc:	62bb      	str	r3, [r7, #40]	; 0x28
	k = g + j;
  4024ce:	4b49      	ldr	r3, [pc, #292]	; (4025f4 <GetPvAngle+0x6dc>)
  4024d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  4024d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
  4024d4:	4798      	blx	r3
  4024d6:	4603      	mov	r3, r0
  4024d8:	627b      	str	r3, [r7, #36]	; 0x24
	l = k - 0.00569f - 0.00478f*sin(Rad(125.04f - 1934.136f*f));
  4024da:	4b49      	ldr	r3, [pc, #292]	; (402600 <GetPvAngle+0x6e8>)
  4024dc:	4953      	ldr	r1, [pc, #332]	; (40262c <GetPvAngle+0x714>)
  4024de:	6a78      	ldr	r0, [r7, #36]	; 0x24
  4024e0:	4798      	blx	r3
  4024e2:	4603      	mov	r3, r0
  4024e4:	461a      	mov	r2, r3
  4024e6:	4b48      	ldr	r3, [pc, #288]	; (402608 <GetPvAngle+0x6f0>)
  4024e8:	4610      	mov	r0, r2
  4024ea:	4798      	blx	r3
  4024ec:	4605      	mov	r5, r0
  4024ee:	460e      	mov	r6, r1
  4024f0:	4b42      	ldr	r3, [pc, #264]	; (4025fc <GetPvAngle+0x6e4>)
  4024f2:	494f      	ldr	r1, [pc, #316]	; (402630 <GetPvAngle+0x718>)
  4024f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  4024f6:	4798      	blx	r3
  4024f8:	4603      	mov	r3, r0
  4024fa:	461a      	mov	r2, r3
  4024fc:	4b40      	ldr	r3, [pc, #256]	; (402600 <GetPvAngle+0x6e8>)
  4024fe:	4611      	mov	r1, r2
  402500:	484c      	ldr	r0, [pc, #304]	; (402634 <GetPvAngle+0x71c>)
  402502:	4798      	blx	r3
  402504:	4603      	mov	r3, r0
  402506:	4618      	mov	r0, r3
  402508:	4b42      	ldr	r3, [pc, #264]	; (402614 <GetPvAngle+0x6fc>)
  40250a:	4798      	blx	r3
  40250c:	4602      	mov	r2, r0
  40250e:	4b3e      	ldr	r3, [pc, #248]	; (402608 <GetPvAngle+0x6f0>)
  402510:	4610      	mov	r0, r2
  402512:	4798      	blx	r3
  402514:	4603      	mov	r3, r0
  402516:	460c      	mov	r4, r1
  402518:	4618      	mov	r0, r3
  40251a:	4621      	mov	r1, r4
  40251c:	4b3e      	ldr	r3, [pc, #248]	; (402618 <GetPvAngle+0x700>)
  40251e:	4798      	blx	r3
  402520:	4c3a      	ldr	r4, [pc, #232]	; (40260c <GetPvAngle+0x6f4>)
  402522:	a331      	add	r3, pc, #196	; (adr r3, 4025e8 <GetPvAngle+0x6d0>)
  402524:	e9d3 2300 	ldrd	r2, r3, [r3]
  402528:	47a0      	blx	r4
  40252a:	4603      	mov	r3, r0
  40252c:	460c      	mov	r4, r1
  40252e:	461a      	mov	r2, r3
  402530:	4623      	mov	r3, r4
  402532:	4c41      	ldr	r4, [pc, #260]	; (402638 <GetPvAngle+0x720>)
  402534:	4628      	mov	r0, r5
  402536:	4631      	mov	r1, r6
  402538:	47a0      	blx	r4
  40253a:	4603      	mov	r3, r0
  40253c:	460c      	mov	r4, r1
  40253e:	4619      	mov	r1, r3
  402540:	4622      	mov	r2, r4
  402542:	4b33      	ldr	r3, [pc, #204]	; (402610 <GetPvAngle+0x6f8>)
  402544:	4608      	mov	r0, r1
  402546:	4611      	mov	r1, r2
  402548:	4798      	blx	r3
  40254a:	4603      	mov	r3, r0
  40254c:	623b      	str	r3, [r7, #32]
	m = 23 + (26 + ((21.448f - f*(46.815f + f*(0.00059f - f*0.001813f)))) / 60.0f) / 60.0f;
  40254e:	4b2b      	ldr	r3, [pc, #172]	; (4025fc <GetPvAngle+0x6e4>)
  402550:	493a      	ldr	r1, [pc, #232]	; (40263c <GetPvAngle+0x724>)
  402552:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  402554:	4798      	blx	r3
  402556:	4603      	mov	r3, r0
  402558:	461a      	mov	r2, r3
  40255a:	4b29      	ldr	r3, [pc, #164]	; (402600 <GetPvAngle+0x6e8>)
  40255c:	4611      	mov	r1, r2
  40255e:	4838      	ldr	r0, [pc, #224]	; (402640 <GetPvAngle+0x728>)
  402560:	4798      	blx	r3
  402562:	4603      	mov	r3, r0
  402564:	461a      	mov	r2, r3
  402566:	4b25      	ldr	r3, [pc, #148]	; (4025fc <GetPvAngle+0x6e4>)
  402568:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  40256a:	4610      	mov	r0, r2
  40256c:	4798      	blx	r3
  40256e:	4603      	mov	r3, r0
  402570:	461a      	mov	r2, r3
  402572:	4b20      	ldr	r3, [pc, #128]	; (4025f4 <GetPvAngle+0x6dc>)
  402574:	4933      	ldr	r1, [pc, #204]	; (402644 <GetPvAngle+0x72c>)
  402576:	4610      	mov	r0, r2
  402578:	4798      	blx	r3
  40257a:	4603      	mov	r3, r0
  40257c:	461a      	mov	r2, r3
  40257e:	4b1f      	ldr	r3, [pc, #124]	; (4025fc <GetPvAngle+0x6e4>)
  402580:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  402582:	4610      	mov	r0, r2
  402584:	4798      	blx	r3
  402586:	4603      	mov	r3, r0
  402588:	461a      	mov	r2, r3
  40258a:	4b1d      	ldr	r3, [pc, #116]	; (402600 <GetPvAngle+0x6e8>)
  40258c:	4611      	mov	r1, r2
  40258e:	482e      	ldr	r0, [pc, #184]	; (402648 <GetPvAngle+0x730>)
  402590:	4798      	blx	r3
  402592:	4603      	mov	r3, r0
  402594:	461a      	mov	r2, r3
  402596:	4b2d      	ldr	r3, [pc, #180]	; (40264c <GetPvAngle+0x734>)
  402598:	492d      	ldr	r1, [pc, #180]	; (402650 <GetPvAngle+0x738>)
  40259a:	4610      	mov	r0, r2
  40259c:	4798      	blx	r3
  40259e:	4603      	mov	r3, r0
  4025a0:	461a      	mov	r2, r3
  4025a2:	4b14      	ldr	r3, [pc, #80]	; (4025f4 <GetPvAngle+0x6dc>)
  4025a4:	492b      	ldr	r1, [pc, #172]	; (402654 <GetPvAngle+0x73c>)
  4025a6:	4610      	mov	r0, r2
  4025a8:	4798      	blx	r3
  4025aa:	4603      	mov	r3, r0
  4025ac:	461a      	mov	r2, r3
  4025ae:	4b27      	ldr	r3, [pc, #156]	; (40264c <GetPvAngle+0x734>)
  4025b0:	4927      	ldr	r1, [pc, #156]	; (402650 <GetPvAngle+0x738>)
  4025b2:	4610      	mov	r0, r2
  4025b4:	4798      	blx	r3
  4025b6:	4603      	mov	r3, r0
  4025b8:	461a      	mov	r2, r3
  4025ba:	4b0e      	ldr	r3, [pc, #56]	; (4025f4 <GetPvAngle+0x6dc>)
  4025bc:	4926      	ldr	r1, [pc, #152]	; (402658 <GetPvAngle+0x740>)
  4025be:	4610      	mov	r0, r2
  4025c0:	4798      	blx	r3
  4025c2:	4603      	mov	r3, r0
  4025c4:	61fb      	str	r3, [r7, #28]
	n = m + 0.00256f*cos(Rad(125.04f - 1934.136f*f));
  4025c6:	4b10      	ldr	r3, [pc, #64]	; (402608 <GetPvAngle+0x6f0>)
  4025c8:	69f8      	ldr	r0, [r7, #28]
  4025ca:	4798      	blx	r3
  4025cc:	4605      	mov	r5, r0
  4025ce:	460e      	mov	r6, r1
  4025d0:	4b0a      	ldr	r3, [pc, #40]	; (4025fc <GetPvAngle+0x6e4>)
  4025d2:	4917      	ldr	r1, [pc, #92]	; (402630 <GetPvAngle+0x718>)
  4025d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  4025d6:	4798      	blx	r3
  4025d8:	4603      	mov	r3, r0
  4025da:	e03f      	b.n	40265c <GetPvAngle+0x744>
  4025dc:	f3af 8000 	nop.w
  4025e0:	80000000 	.word	0x80000000
  4025e4:	3f32f09d 	.word	0x3f32f09d
  4025e8:	80000000 	.word	0x80000000
  4025ec:	3f739431 	.word	0x3f739431
  4025f0:	376ae18b 	.word	0x376ae18b
  4025f4:	0040af49 	.word	0x0040af49
  4025f8:	3b9dd7ed 	.word	0x3b9dd7ed
  4025fc:	0040b159 	.word	0x0040b159
  402600:	0040af45 	.word	0x0040af45
  402604:	3ff511ae 	.word	0x3ff511ae
  402608:	0040a845 	.word	0x0040a845
  40260c:	0040a8ed 	.word	0x0040a8ed
  402610:	0040ae9d 	.word	0x0040ae9d
  402614:	00402de9 	.word	0x00402de9
  402618:	00407d61 	.word	0x00407d61
  40261c:	38d3cff6 	.word	0x38d3cff6
  402620:	3ca3c85c 	.word	0x3ca3c85c
  402624:	0040a589 	.word	0x0040a589
  402628:	40400000 	.word	0x40400000
  40262c:	3bba732e 	.word	0x3bba732e
  402630:	44f1c45a 	.word	0x44f1c45a
  402634:	42fa147b 	.word	0x42fa147b
  402638:	0040a585 	.word	0x0040a585
  40263c:	3aeda22f 	.word	0x3aeda22f
  402640:	3a1aaa3b 	.word	0x3a1aaa3b
  402644:	423b428f 	.word	0x423b428f
  402648:	41ab9581 	.word	0x41ab9581
  40264c:	0040b2c1 	.word	0x0040b2c1
  402650:	42700000 	.word	0x42700000
  402654:	41d00000 	.word	0x41d00000
  402658:	41b80000 	.word	0x41b80000
  40265c:	461a      	mov	r2, r3
  40265e:	4ba2      	ldr	r3, [pc, #648]	; (4028e8 <GetPvAngle+0x9d0>)
  402660:	4611      	mov	r1, r2
  402662:	48a2      	ldr	r0, [pc, #648]	; (4028ec <GetPvAngle+0x9d4>)
  402664:	4798      	blx	r3
  402666:	4603      	mov	r3, r0
  402668:	4618      	mov	r0, r3
  40266a:	4ba1      	ldr	r3, [pc, #644]	; (4028f0 <GetPvAngle+0x9d8>)
  40266c:	4798      	blx	r3
  40266e:	4602      	mov	r2, r0
  402670:	4ba0      	ldr	r3, [pc, #640]	; (4028f4 <GetPvAngle+0x9dc>)
  402672:	4610      	mov	r0, r2
  402674:	4798      	blx	r3
  402676:	4603      	mov	r3, r0
  402678:	460c      	mov	r4, r1
  40267a:	4618      	mov	r0, r3
  40267c:	4621      	mov	r1, r4
  40267e:	4b9e      	ldr	r3, [pc, #632]	; (4028f8 <GetPvAngle+0x9e0>)
  402680:	4798      	blx	r3
  402682:	4c9e      	ldr	r4, [pc, #632]	; (4028fc <GetPvAngle+0x9e4>)
  402684:	a396      	add	r3, pc, #600	; (adr r3, 4028e0 <GetPvAngle+0x9c8>)
  402686:	e9d3 2300 	ldrd	r2, r3, [r3]
  40268a:	47a0      	blx	r4
  40268c:	4603      	mov	r3, r0
  40268e:	460c      	mov	r4, r1
  402690:	461a      	mov	r2, r3
  402692:	4623      	mov	r3, r4
  402694:	4c9a      	ldr	r4, [pc, #616]	; (402900 <GetPvAngle+0x9e8>)
  402696:	4628      	mov	r0, r5
  402698:	4631      	mov	r1, r6
  40269a:	47a0      	blx	r4
  40269c:	4603      	mov	r3, r0
  40269e:	460c      	mov	r4, r1
  4026a0:	4619      	mov	r1, r3
  4026a2:	4622      	mov	r2, r4
  4026a4:	4b97      	ldr	r3, [pc, #604]	; (402904 <GetPvAngle+0x9ec>)
  4026a6:	4608      	mov	r0, r1
  4026a8:	4611      	mov	r1, r2
  4026aa:	4798      	blx	r3
  4026ac:	4603      	mov	r3, r0
  4026ae:	61bb      	str	r3, [r7, #24]
	o = Deg(asin(sin(Rad(n))*sin(Rad(l))));
  4026b0:	69b8      	ldr	r0, [r7, #24]
  4026b2:	4b8f      	ldr	r3, [pc, #572]	; (4028f0 <GetPvAngle+0x9d8>)
  4026b4:	4798      	blx	r3
  4026b6:	4602      	mov	r2, r0
  4026b8:	4b8e      	ldr	r3, [pc, #568]	; (4028f4 <GetPvAngle+0x9dc>)
  4026ba:	4610      	mov	r0, r2
  4026bc:	4798      	blx	r3
  4026be:	4603      	mov	r3, r0
  4026c0:	460c      	mov	r4, r1
  4026c2:	4618      	mov	r0, r3
  4026c4:	4621      	mov	r1, r4
  4026c6:	4b90      	ldr	r3, [pc, #576]	; (402908 <GetPvAngle+0x9f0>)
  4026c8:	4798      	blx	r3
  4026ca:	4605      	mov	r5, r0
  4026cc:	460e      	mov	r6, r1
  4026ce:	6a38      	ldr	r0, [r7, #32]
  4026d0:	4b87      	ldr	r3, [pc, #540]	; (4028f0 <GetPvAngle+0x9d8>)
  4026d2:	4798      	blx	r3
  4026d4:	4602      	mov	r2, r0
  4026d6:	4b87      	ldr	r3, [pc, #540]	; (4028f4 <GetPvAngle+0x9dc>)
  4026d8:	4610      	mov	r0, r2
  4026da:	4798      	blx	r3
  4026dc:	4603      	mov	r3, r0
  4026de:	460c      	mov	r4, r1
  4026e0:	4618      	mov	r0, r3
  4026e2:	4621      	mov	r1, r4
  4026e4:	4b88      	ldr	r3, [pc, #544]	; (402908 <GetPvAngle+0x9f0>)
  4026e6:	4798      	blx	r3
  4026e8:	4602      	mov	r2, r0
  4026ea:	460b      	mov	r3, r1
  4026ec:	4c83      	ldr	r4, [pc, #524]	; (4028fc <GetPvAngle+0x9e4>)
  4026ee:	4628      	mov	r0, r5
  4026f0:	4631      	mov	r1, r6
  4026f2:	47a0      	blx	r4
  4026f4:	4603      	mov	r3, r0
  4026f6:	460c      	mov	r4, r1
  4026f8:	4618      	mov	r0, r3
  4026fa:	4621      	mov	r1, r4
  4026fc:	4b83      	ldr	r3, [pc, #524]	; (40290c <GetPvAngle+0x9f4>)
  4026fe:	4798      	blx	r3
  402700:	460a      	mov	r2, r1
  402702:	4601      	mov	r1, r0
  402704:	4b7f      	ldr	r3, [pc, #508]	; (402904 <GetPvAngle+0x9ec>)
  402706:	4608      	mov	r0, r1
  402708:	4611      	mov	r1, r2
  40270a:	4798      	blx	r3
  40270c:	4603      	mov	r3, r0
  40270e:	4618      	mov	r0, r3
  402710:	4b7f      	ldr	r3, [pc, #508]	; (402910 <GetPvAngle+0x9f8>)
  402712:	4798      	blx	r3
  402714:	6178      	str	r0, [r7, #20]
	p = tan(Rad(n / 2))*tan(Rad(n / 2));
  402716:	4b7f      	ldr	r3, [pc, #508]	; (402914 <GetPvAngle+0x9fc>)
  402718:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40271c:	69b8      	ldr	r0, [r7, #24]
  40271e:	4798      	blx	r3
  402720:	4603      	mov	r3, r0
  402722:	4618      	mov	r0, r3
  402724:	4b72      	ldr	r3, [pc, #456]	; (4028f0 <GetPvAngle+0x9d8>)
  402726:	4798      	blx	r3
  402728:	4602      	mov	r2, r0
  40272a:	4b72      	ldr	r3, [pc, #456]	; (4028f4 <GetPvAngle+0x9dc>)
  40272c:	4610      	mov	r0, r2
  40272e:	4798      	blx	r3
  402730:	4603      	mov	r3, r0
  402732:	460c      	mov	r4, r1
  402734:	4618      	mov	r0, r3
  402736:	4621      	mov	r1, r4
  402738:	4b77      	ldr	r3, [pc, #476]	; (402918 <GetPvAngle+0xa00>)
  40273a:	4798      	blx	r3
  40273c:	4605      	mov	r5, r0
  40273e:	460e      	mov	r6, r1
  402740:	4b74      	ldr	r3, [pc, #464]	; (402914 <GetPvAngle+0x9fc>)
  402742:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402746:	69b8      	ldr	r0, [r7, #24]
  402748:	4798      	blx	r3
  40274a:	4603      	mov	r3, r0
  40274c:	4618      	mov	r0, r3
  40274e:	4b68      	ldr	r3, [pc, #416]	; (4028f0 <GetPvAngle+0x9d8>)
  402750:	4798      	blx	r3
  402752:	4602      	mov	r2, r0
  402754:	4b67      	ldr	r3, [pc, #412]	; (4028f4 <GetPvAngle+0x9dc>)
  402756:	4610      	mov	r0, r2
  402758:	4798      	blx	r3
  40275a:	4603      	mov	r3, r0
  40275c:	460c      	mov	r4, r1
  40275e:	4618      	mov	r0, r3
  402760:	4621      	mov	r1, r4
  402762:	4b6d      	ldr	r3, [pc, #436]	; (402918 <GetPvAngle+0xa00>)
  402764:	4798      	blx	r3
  402766:	4602      	mov	r2, r0
  402768:	460b      	mov	r3, r1
  40276a:	4c64      	ldr	r4, [pc, #400]	; (4028fc <GetPvAngle+0x9e4>)
  40276c:	4628      	mov	r0, r5
  40276e:	4631      	mov	r1, r6
  402770:	47a0      	blx	r4
  402772:	4603      	mov	r3, r0
  402774:	460c      	mov	r4, r1
  402776:	4619      	mov	r1, r3
  402778:	4622      	mov	r2, r4
  40277a:	4b62      	ldr	r3, [pc, #392]	; (402904 <GetPvAngle+0x9ec>)
  40277c:	4608      	mov	r0, r1
  40277e:	4611      	mov	r1, r2
  402780:	4798      	blx	r3
  402782:	4603      	mov	r3, r0
  402784:	613b      	str	r3, [r7, #16]
	q = 4.0f * Deg(p*sin(2.0f * Rad(g)) - 2.0f * i*sin(Rad(h)) + 4.0f * i*p*sin(Rad(h))*cos(2.0f * Rad(g)) - 0.5f*p*p*sin(4.0f * Rad(g)) - 1.25f*i*i*sin(2.0f * Rad(h)));
  402786:	4b5b      	ldr	r3, [pc, #364]	; (4028f4 <GetPvAngle+0x9dc>)
  402788:	6938      	ldr	r0, [r7, #16]
  40278a:	4798      	blx	r3
  40278c:	4605      	mov	r5, r0
  40278e:	460e      	mov	r6, r1
  402790:	6b78      	ldr	r0, [r7, #52]	; 0x34
  402792:	4b57      	ldr	r3, [pc, #348]	; (4028f0 <GetPvAngle+0x9d8>)
  402794:	4798      	blx	r3
  402796:	4602      	mov	r2, r0
  402798:	4b60      	ldr	r3, [pc, #384]	; (40291c <GetPvAngle+0xa04>)
  40279a:	4611      	mov	r1, r2
  40279c:	4610      	mov	r0, r2
  40279e:	4798      	blx	r3
  4027a0:	4603      	mov	r3, r0
  4027a2:	461a      	mov	r2, r3
  4027a4:	4b53      	ldr	r3, [pc, #332]	; (4028f4 <GetPvAngle+0x9dc>)
  4027a6:	4610      	mov	r0, r2
  4027a8:	4798      	blx	r3
  4027aa:	4603      	mov	r3, r0
  4027ac:	460c      	mov	r4, r1
  4027ae:	4618      	mov	r0, r3
  4027b0:	4621      	mov	r1, r4
  4027b2:	4b55      	ldr	r3, [pc, #340]	; (402908 <GetPvAngle+0x9f0>)
  4027b4:	4798      	blx	r3
  4027b6:	4602      	mov	r2, r0
  4027b8:	460b      	mov	r3, r1
  4027ba:	4c50      	ldr	r4, [pc, #320]	; (4028fc <GetPvAngle+0x9e4>)
  4027bc:	4628      	mov	r0, r5
  4027be:	4631      	mov	r1, r6
  4027c0:	47a0      	blx	r4
  4027c2:	4603      	mov	r3, r0
  4027c4:	460c      	mov	r4, r1
  4027c6:	461d      	mov	r5, r3
  4027c8:	4626      	mov	r6, r4
  4027ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  4027cc:	4b53      	ldr	r3, [pc, #332]	; (40291c <GetPvAngle+0xa04>)
  4027ce:	4611      	mov	r1, r2
  4027d0:	4610      	mov	r0, r2
  4027d2:	4798      	blx	r3
  4027d4:	4603      	mov	r3, r0
  4027d6:	461a      	mov	r2, r3
  4027d8:	4b46      	ldr	r3, [pc, #280]	; (4028f4 <GetPvAngle+0x9dc>)
  4027da:	4610      	mov	r0, r2
  4027dc:	4798      	blx	r3
  4027de:	4680      	mov	r8, r0
  4027e0:	4689      	mov	r9, r1
  4027e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
  4027e4:	4b42      	ldr	r3, [pc, #264]	; (4028f0 <GetPvAngle+0x9d8>)
  4027e6:	4798      	blx	r3
  4027e8:	4602      	mov	r2, r0
  4027ea:	4b42      	ldr	r3, [pc, #264]	; (4028f4 <GetPvAngle+0x9dc>)
  4027ec:	4610      	mov	r0, r2
  4027ee:	4798      	blx	r3
  4027f0:	4603      	mov	r3, r0
  4027f2:	460c      	mov	r4, r1
  4027f4:	4618      	mov	r0, r3
  4027f6:	4621      	mov	r1, r4
  4027f8:	4b43      	ldr	r3, [pc, #268]	; (402908 <GetPvAngle+0x9f0>)
  4027fa:	4798      	blx	r3
  4027fc:	4602      	mov	r2, r0
  4027fe:	460b      	mov	r3, r1
  402800:	4c3e      	ldr	r4, [pc, #248]	; (4028fc <GetPvAngle+0x9e4>)
  402802:	4640      	mov	r0, r8
  402804:	4649      	mov	r1, r9
  402806:	47a0      	blx	r4
  402808:	4603      	mov	r3, r0
  40280a:	460c      	mov	r4, r1
  40280c:	461a      	mov	r2, r3
  40280e:	4623      	mov	r3, r4
  402810:	4c43      	ldr	r4, [pc, #268]	; (402920 <GetPvAngle+0xa08>)
  402812:	4628      	mov	r0, r5
  402814:	4631      	mov	r1, r6
  402816:	47a0      	blx	r4
  402818:	4603      	mov	r3, r0
  40281a:	460c      	mov	r4, r1
  40281c:	461d      	mov	r5, r3
  40281e:	4626      	mov	r6, r4
  402820:	4b40      	ldr	r3, [pc, #256]	; (402924 <GetPvAngle+0xa0c>)
  402822:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  402826:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  402828:	4798      	blx	r3
  40282a:	4603      	mov	r3, r0
  40282c:	461a      	mov	r2, r3
  40282e:	4b3d      	ldr	r3, [pc, #244]	; (402924 <GetPvAngle+0xa0c>)
  402830:	6939      	ldr	r1, [r7, #16]
  402832:	4610      	mov	r0, r2
  402834:	4798      	blx	r3
  402836:	4603      	mov	r3, r0
  402838:	461a      	mov	r2, r3
  40283a:	4b2e      	ldr	r3, [pc, #184]	; (4028f4 <GetPvAngle+0x9dc>)
  40283c:	4610      	mov	r0, r2
  40283e:	4798      	blx	r3
  402840:	4680      	mov	r8, r0
  402842:	4689      	mov	r9, r1
  402844:	6b38      	ldr	r0, [r7, #48]	; 0x30
  402846:	4b2a      	ldr	r3, [pc, #168]	; (4028f0 <GetPvAngle+0x9d8>)
  402848:	4798      	blx	r3
  40284a:	4602      	mov	r2, r0
  40284c:	4b29      	ldr	r3, [pc, #164]	; (4028f4 <GetPvAngle+0x9dc>)
  40284e:	4610      	mov	r0, r2
  402850:	4798      	blx	r3
  402852:	4603      	mov	r3, r0
  402854:	460c      	mov	r4, r1
  402856:	4618      	mov	r0, r3
  402858:	4621      	mov	r1, r4
  40285a:	4b2b      	ldr	r3, [pc, #172]	; (402908 <GetPvAngle+0x9f0>)
  40285c:	4798      	blx	r3
  40285e:	4602      	mov	r2, r0
  402860:	460b      	mov	r3, r1
  402862:	4c26      	ldr	r4, [pc, #152]	; (4028fc <GetPvAngle+0x9e4>)
  402864:	4640      	mov	r0, r8
  402866:	4649      	mov	r1, r9
  402868:	47a0      	blx	r4
  40286a:	4603      	mov	r3, r0
  40286c:	460c      	mov	r4, r1
  40286e:	4698      	mov	r8, r3
  402870:	46a1      	mov	r9, r4
  402872:	6b78      	ldr	r0, [r7, #52]	; 0x34
  402874:	4b1e      	ldr	r3, [pc, #120]	; (4028f0 <GetPvAngle+0x9d8>)
  402876:	4798      	blx	r3
  402878:	4602      	mov	r2, r0
  40287a:	4b28      	ldr	r3, [pc, #160]	; (40291c <GetPvAngle+0xa04>)
  40287c:	4611      	mov	r1, r2
  40287e:	4610      	mov	r0, r2
  402880:	4798      	blx	r3
  402882:	4603      	mov	r3, r0
  402884:	461a      	mov	r2, r3
  402886:	4b1b      	ldr	r3, [pc, #108]	; (4028f4 <GetPvAngle+0x9dc>)
  402888:	4610      	mov	r0, r2
  40288a:	4798      	blx	r3
  40288c:	4603      	mov	r3, r0
  40288e:	460c      	mov	r4, r1
  402890:	4618      	mov	r0, r3
  402892:	4621      	mov	r1, r4
  402894:	4b18      	ldr	r3, [pc, #96]	; (4028f8 <GetPvAngle+0x9e0>)
  402896:	4798      	blx	r3
  402898:	4602      	mov	r2, r0
  40289a:	460b      	mov	r3, r1
  40289c:	4c17      	ldr	r4, [pc, #92]	; (4028fc <GetPvAngle+0x9e4>)
  40289e:	4640      	mov	r0, r8
  4028a0:	4649      	mov	r1, r9
  4028a2:	47a0      	blx	r4
  4028a4:	4603      	mov	r3, r0
  4028a6:	460c      	mov	r4, r1
  4028a8:	461a      	mov	r2, r3
  4028aa:	4623      	mov	r3, r4
  4028ac:	4c14      	ldr	r4, [pc, #80]	; (402900 <GetPvAngle+0x9e8>)
  4028ae:	4628      	mov	r0, r5
  4028b0:	4631      	mov	r1, r6
  4028b2:	47a0      	blx	r4
  4028b4:	4603      	mov	r3, r0
  4028b6:	460c      	mov	r4, r1
  4028b8:	461d      	mov	r5, r3
  4028ba:	4626      	mov	r6, r4
  4028bc:	4b19      	ldr	r3, [pc, #100]	; (402924 <GetPvAngle+0xa0c>)
  4028be:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  4028c2:	6938      	ldr	r0, [r7, #16]
  4028c4:	4798      	blx	r3
  4028c6:	4603      	mov	r3, r0
  4028c8:	461a      	mov	r2, r3
  4028ca:	4b16      	ldr	r3, [pc, #88]	; (402924 <GetPvAngle+0xa0c>)
  4028cc:	6939      	ldr	r1, [r7, #16]
  4028ce:	4610      	mov	r0, r2
  4028d0:	4798      	blx	r3
  4028d2:	4603      	mov	r3, r0
  4028d4:	461a      	mov	r2, r3
  4028d6:	4b07      	ldr	r3, [pc, #28]	; (4028f4 <GetPvAngle+0x9dc>)
  4028d8:	4610      	mov	r0, r2
  4028da:	e025      	b.n	402928 <GetPvAngle+0xa10>
  4028dc:	f3af 8000 	nop.w
  4028e0:	80000000 	.word	0x80000000
  4028e4:	3f64f8b5 	.word	0x3f64f8b5
  4028e8:	0040af45 	.word	0x0040af45
  4028ec:	42fa147b 	.word	0x42fa147b
  4028f0:	00402de9 	.word	0x00402de9
  4028f4:	0040a845 	.word	0x0040a845
  4028f8:	00407ccd 	.word	0x00407ccd
  4028fc:	0040a8ed 	.word	0x0040a8ed
  402900:	0040a589 	.word	0x0040a589
  402904:	0040ae9d 	.word	0x0040ae9d
  402908:	00407d61 	.word	0x00407d61
  40290c:	00407ef5 	.word	0x00407ef5
  402910:	00402e21 	.word	0x00402e21
  402914:	0040b2c1 	.word	0x0040b2c1
  402918:	00407de9 	.word	0x00407de9
  40291c:	0040af49 	.word	0x0040af49
  402920:	0040a585 	.word	0x0040a585
  402924:	0040b159 	.word	0x0040b159
  402928:	4798      	blx	r3
  40292a:	4680      	mov	r8, r0
  40292c:	4689      	mov	r9, r1
  40292e:	6b78      	ldr	r0, [r7, #52]	; 0x34
  402930:	4b9e      	ldr	r3, [pc, #632]	; (402bac <GetPvAngle+0xc94>)
  402932:	4798      	blx	r3
  402934:	4602      	mov	r2, r0
  402936:	4b9e      	ldr	r3, [pc, #632]	; (402bb0 <GetPvAngle+0xc98>)
  402938:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  40293c:	4610      	mov	r0, r2
  40293e:	4798      	blx	r3
  402940:	4603      	mov	r3, r0
  402942:	461a      	mov	r2, r3
  402944:	4b9b      	ldr	r3, [pc, #620]	; (402bb4 <GetPvAngle+0xc9c>)
  402946:	4610      	mov	r0, r2
  402948:	4798      	blx	r3
  40294a:	4603      	mov	r3, r0
  40294c:	460c      	mov	r4, r1
  40294e:	4618      	mov	r0, r3
  402950:	4621      	mov	r1, r4
  402952:	4b99      	ldr	r3, [pc, #612]	; (402bb8 <GetPvAngle+0xca0>)
  402954:	4798      	blx	r3
  402956:	4602      	mov	r2, r0
  402958:	460b      	mov	r3, r1
  40295a:	4c98      	ldr	r4, [pc, #608]	; (402bbc <GetPvAngle+0xca4>)
  40295c:	4640      	mov	r0, r8
  40295e:	4649      	mov	r1, r9
  402960:	47a0      	blx	r4
  402962:	4603      	mov	r3, r0
  402964:	460c      	mov	r4, r1
  402966:	461a      	mov	r2, r3
  402968:	4623      	mov	r3, r4
  40296a:	4c95      	ldr	r4, [pc, #596]	; (402bc0 <GetPvAngle+0xca8>)
  40296c:	4628      	mov	r0, r5
  40296e:	4631      	mov	r1, r6
  402970:	47a0      	blx	r4
  402972:	4603      	mov	r3, r0
  402974:	460c      	mov	r4, r1
  402976:	461d      	mov	r5, r3
  402978:	4626      	mov	r6, r4
  40297a:	4b8d      	ldr	r3, [pc, #564]	; (402bb0 <GetPvAngle+0xc98>)
  40297c:	4991      	ldr	r1, [pc, #580]	; (402bc4 <GetPvAngle+0xcac>)
  40297e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  402980:	4798      	blx	r3
  402982:	4603      	mov	r3, r0
  402984:	461a      	mov	r2, r3
  402986:	4b8a      	ldr	r3, [pc, #552]	; (402bb0 <GetPvAngle+0xc98>)
  402988:	6af9      	ldr	r1, [r7, #44]	; 0x2c
  40298a:	4610      	mov	r0, r2
  40298c:	4798      	blx	r3
  40298e:	4603      	mov	r3, r0
  402990:	461a      	mov	r2, r3
  402992:	4b88      	ldr	r3, [pc, #544]	; (402bb4 <GetPvAngle+0xc9c>)
  402994:	4610      	mov	r0, r2
  402996:	4798      	blx	r3
  402998:	4680      	mov	r8, r0
  40299a:	4689      	mov	r9, r1
  40299c:	6b38      	ldr	r0, [r7, #48]	; 0x30
  40299e:	4b83      	ldr	r3, [pc, #524]	; (402bac <GetPvAngle+0xc94>)
  4029a0:	4798      	blx	r3
  4029a2:	4602      	mov	r2, r0
  4029a4:	4b88      	ldr	r3, [pc, #544]	; (402bc8 <GetPvAngle+0xcb0>)
  4029a6:	4611      	mov	r1, r2
  4029a8:	4610      	mov	r0, r2
  4029aa:	4798      	blx	r3
  4029ac:	4603      	mov	r3, r0
  4029ae:	461a      	mov	r2, r3
  4029b0:	4b80      	ldr	r3, [pc, #512]	; (402bb4 <GetPvAngle+0xc9c>)
  4029b2:	4610      	mov	r0, r2
  4029b4:	4798      	blx	r3
  4029b6:	4603      	mov	r3, r0
  4029b8:	460c      	mov	r4, r1
  4029ba:	4618      	mov	r0, r3
  4029bc:	4621      	mov	r1, r4
  4029be:	4b7e      	ldr	r3, [pc, #504]	; (402bb8 <GetPvAngle+0xca0>)
  4029c0:	4798      	blx	r3
  4029c2:	4602      	mov	r2, r0
  4029c4:	460b      	mov	r3, r1
  4029c6:	4c7d      	ldr	r4, [pc, #500]	; (402bbc <GetPvAngle+0xca4>)
  4029c8:	4640      	mov	r0, r8
  4029ca:	4649      	mov	r1, r9
  4029cc:	47a0      	blx	r4
  4029ce:	4603      	mov	r3, r0
  4029d0:	460c      	mov	r4, r1
  4029d2:	461a      	mov	r2, r3
  4029d4:	4623      	mov	r3, r4
  4029d6:	4c7a      	ldr	r4, [pc, #488]	; (402bc0 <GetPvAngle+0xca8>)
  4029d8:	4628      	mov	r0, r5
  4029da:	4631      	mov	r1, r6
  4029dc:	47a0      	blx	r4
  4029de:	4603      	mov	r3, r0
  4029e0:	460c      	mov	r4, r1
  4029e2:	4619      	mov	r1, r3
  4029e4:	4622      	mov	r2, r4
  4029e6:	4b79      	ldr	r3, [pc, #484]	; (402bcc <GetPvAngle+0xcb4>)
  4029e8:	4608      	mov	r0, r1
  4029ea:	4611      	mov	r1, r2
  4029ec:	4798      	blx	r3
  4029ee:	4603      	mov	r3, r0
  4029f0:	4618      	mov	r0, r3
  4029f2:	4b77      	ldr	r3, [pc, #476]	; (402bd0 <GetPvAngle+0xcb8>)
  4029f4:	4798      	blx	r3
  4029f6:	4602      	mov	r2, r0
  4029f8:	4b6d      	ldr	r3, [pc, #436]	; (402bb0 <GetPvAngle+0xc98>)
  4029fa:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  4029fe:	4610      	mov	r0, r2
  402a00:	4798      	blx	r3
  402a02:	4603      	mov	r3, r0
  402a04:	60fb      	str	r3, [r7, #12]
	r = Deg(acos(cos(Rad(90.833f)) / (cos(Rad(lat))*cos(Rad(o))) - tan(Rad(lat))*tan(Rad(o))));
  402a06:	4873      	ldr	r0, [pc, #460]	; (402bd4 <GetPvAngle+0xcbc>)
  402a08:	4b68      	ldr	r3, [pc, #416]	; (402bac <GetPvAngle+0xc94>)
  402a0a:	4798      	blx	r3
  402a0c:	4602      	mov	r2, r0
  402a0e:	4b69      	ldr	r3, [pc, #420]	; (402bb4 <GetPvAngle+0xc9c>)
  402a10:	4610      	mov	r0, r2
  402a12:	4798      	blx	r3
  402a14:	4603      	mov	r3, r0
  402a16:	460c      	mov	r4, r1
  402a18:	4618      	mov	r0, r3
  402a1a:	4621      	mov	r1, r4
  402a1c:	4b6e      	ldr	r3, [pc, #440]	; (402bd8 <GetPvAngle+0xcc0>)
  402a1e:	4798      	blx	r3
  402a20:	4605      	mov	r5, r0
  402a22:	460e      	mov	r6, r1
  402a24:	4b6d      	ldr	r3, [pc, #436]	; (402bdc <GetPvAngle+0xcc4>)
  402a26:	681b      	ldr	r3, [r3, #0]
  402a28:	4618      	mov	r0, r3
  402a2a:	4b60      	ldr	r3, [pc, #384]	; (402bac <GetPvAngle+0xc94>)
  402a2c:	4798      	blx	r3
  402a2e:	4602      	mov	r2, r0
  402a30:	4b60      	ldr	r3, [pc, #384]	; (402bb4 <GetPvAngle+0xc9c>)
  402a32:	4610      	mov	r0, r2
  402a34:	4798      	blx	r3
  402a36:	4603      	mov	r3, r0
  402a38:	460c      	mov	r4, r1
  402a3a:	4618      	mov	r0, r3
  402a3c:	4621      	mov	r1, r4
  402a3e:	4b66      	ldr	r3, [pc, #408]	; (402bd8 <GetPvAngle+0xcc0>)
  402a40:	4798      	blx	r3
  402a42:	4680      	mov	r8, r0
  402a44:	4689      	mov	r9, r1
  402a46:	6978      	ldr	r0, [r7, #20]
  402a48:	4b58      	ldr	r3, [pc, #352]	; (402bac <GetPvAngle+0xc94>)
  402a4a:	4798      	blx	r3
  402a4c:	4602      	mov	r2, r0
  402a4e:	4b59      	ldr	r3, [pc, #356]	; (402bb4 <GetPvAngle+0xc9c>)
  402a50:	4610      	mov	r0, r2
  402a52:	4798      	blx	r3
  402a54:	4603      	mov	r3, r0
  402a56:	460c      	mov	r4, r1
  402a58:	4618      	mov	r0, r3
  402a5a:	4621      	mov	r1, r4
  402a5c:	4b5e      	ldr	r3, [pc, #376]	; (402bd8 <GetPvAngle+0xcc0>)
  402a5e:	4798      	blx	r3
  402a60:	4602      	mov	r2, r0
  402a62:	460b      	mov	r3, r1
  402a64:	4c55      	ldr	r4, [pc, #340]	; (402bbc <GetPvAngle+0xca4>)
  402a66:	4640      	mov	r0, r8
  402a68:	4649      	mov	r1, r9
  402a6a:	47a0      	blx	r4
  402a6c:	4603      	mov	r3, r0
  402a6e:	460c      	mov	r4, r1
  402a70:	461a      	mov	r2, r3
  402a72:	4623      	mov	r3, r4
  402a74:	4c5a      	ldr	r4, [pc, #360]	; (402be0 <GetPvAngle+0xcc8>)
  402a76:	4628      	mov	r0, r5
  402a78:	4631      	mov	r1, r6
  402a7a:	47a0      	blx	r4
  402a7c:	4603      	mov	r3, r0
  402a7e:	460c      	mov	r4, r1
  402a80:	461d      	mov	r5, r3
  402a82:	4626      	mov	r6, r4
  402a84:	4b55      	ldr	r3, [pc, #340]	; (402bdc <GetPvAngle+0xcc4>)
  402a86:	681b      	ldr	r3, [r3, #0]
  402a88:	4618      	mov	r0, r3
  402a8a:	4b48      	ldr	r3, [pc, #288]	; (402bac <GetPvAngle+0xc94>)
  402a8c:	4798      	blx	r3
  402a8e:	4602      	mov	r2, r0
  402a90:	4b48      	ldr	r3, [pc, #288]	; (402bb4 <GetPvAngle+0xc9c>)
  402a92:	4610      	mov	r0, r2
  402a94:	4798      	blx	r3
  402a96:	4603      	mov	r3, r0
  402a98:	460c      	mov	r4, r1
  402a9a:	4618      	mov	r0, r3
  402a9c:	4621      	mov	r1, r4
  402a9e:	4b51      	ldr	r3, [pc, #324]	; (402be4 <GetPvAngle+0xccc>)
  402aa0:	4798      	blx	r3
  402aa2:	4680      	mov	r8, r0
  402aa4:	4689      	mov	r9, r1
  402aa6:	6978      	ldr	r0, [r7, #20]
  402aa8:	4b40      	ldr	r3, [pc, #256]	; (402bac <GetPvAngle+0xc94>)
  402aaa:	4798      	blx	r3
  402aac:	4602      	mov	r2, r0
  402aae:	4b41      	ldr	r3, [pc, #260]	; (402bb4 <GetPvAngle+0xc9c>)
  402ab0:	4610      	mov	r0, r2
  402ab2:	4798      	blx	r3
  402ab4:	4603      	mov	r3, r0
  402ab6:	460c      	mov	r4, r1
  402ab8:	4618      	mov	r0, r3
  402aba:	4621      	mov	r1, r4
  402abc:	4b49      	ldr	r3, [pc, #292]	; (402be4 <GetPvAngle+0xccc>)
  402abe:	4798      	blx	r3
  402ac0:	4602      	mov	r2, r0
  402ac2:	460b      	mov	r3, r1
  402ac4:	4c3d      	ldr	r4, [pc, #244]	; (402bbc <GetPvAngle+0xca4>)
  402ac6:	4640      	mov	r0, r8
  402ac8:	4649      	mov	r1, r9
  402aca:	47a0      	blx	r4
  402acc:	4603      	mov	r3, r0
  402ace:	460c      	mov	r4, r1
  402ad0:	461a      	mov	r2, r3
  402ad2:	4623      	mov	r3, r4
  402ad4:	4c3a      	ldr	r4, [pc, #232]	; (402bc0 <GetPvAngle+0xca8>)
  402ad6:	4628      	mov	r0, r5
  402ad8:	4631      	mov	r1, r6
  402ada:	47a0      	blx	r4
  402adc:	4603      	mov	r3, r0
  402ade:	460c      	mov	r4, r1
  402ae0:	4618      	mov	r0, r3
  402ae2:	4621      	mov	r1, r4
  402ae4:	4b40      	ldr	r3, [pc, #256]	; (402be8 <GetPvAngle+0xcd0>)
  402ae6:	4798      	blx	r3
  402ae8:	460a      	mov	r2, r1
  402aea:	4601      	mov	r1, r0
  402aec:	4b37      	ldr	r3, [pc, #220]	; (402bcc <GetPvAngle+0xcb4>)
  402aee:	4608      	mov	r0, r1
  402af0:	4611      	mov	r1, r2
  402af2:	4798      	blx	r3
  402af4:	4603      	mov	r3, r0
  402af6:	4618      	mov	r0, r3
  402af8:	4b35      	ldr	r3, [pc, #212]	; (402bd0 <GetPvAngle+0xcb8>)
  402afa:	4798      	blx	r3
  402afc:	60b8      	str	r0, [r7, #8]
	s = ((int)(timeInSecs * 1440 + q + 4 * lon - 60 * timeZone)) % 1440;
  402afe:	4b2c      	ldr	r3, [pc, #176]	; (402bb0 <GetPvAngle+0xc98>)
  402b00:	493a      	ldr	r1, [pc, #232]	; (402bec <GetPvAngle+0xcd4>)
  402b02:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
  402b06:	4798      	blx	r3
  402b08:	4603      	mov	r3, r0
  402b0a:	461a      	mov	r2, r3
  402b0c:	4b2e      	ldr	r3, [pc, #184]	; (402bc8 <GetPvAngle+0xcb0>)
  402b0e:	68f9      	ldr	r1, [r7, #12]
  402b10:	4610      	mov	r0, r2
  402b12:	4798      	blx	r3
  402b14:	4603      	mov	r3, r0
  402b16:	461c      	mov	r4, r3
  402b18:	4b35      	ldr	r3, [pc, #212]	; (402bf0 <GetPvAngle+0xcd8>)
  402b1a:	681a      	ldr	r2, [r3, #0]
  402b1c:	4b24      	ldr	r3, [pc, #144]	; (402bb0 <GetPvAngle+0xc98>)
  402b1e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  402b22:	4610      	mov	r0, r2
  402b24:	4798      	blx	r3
  402b26:	4603      	mov	r3, r0
  402b28:	461a      	mov	r2, r3
  402b2a:	4b27      	ldr	r3, [pc, #156]	; (402bc8 <GetPvAngle+0xcb0>)
  402b2c:	4611      	mov	r1, r2
  402b2e:	4620      	mov	r0, r4
  402b30:	4798      	blx	r3
  402b32:	4603      	mov	r3, r0
  402b34:	461c      	mov	r4, r3
  402b36:	4b2f      	ldr	r3, [pc, #188]	; (402bf4 <GetPvAngle+0xcdc>)
  402b38:	681a      	ldr	r2, [r3, #0]
  402b3a:	4b1d      	ldr	r3, [pc, #116]	; (402bb0 <GetPvAngle+0xc98>)
  402b3c:	492e      	ldr	r1, [pc, #184]	; (402bf8 <GetPvAngle+0xce0>)
  402b3e:	4610      	mov	r0, r2
  402b40:	4798      	blx	r3
  402b42:	4603      	mov	r3, r0
  402b44:	461a      	mov	r2, r3
  402b46:	4b2d      	ldr	r3, [pc, #180]	; (402bfc <GetPvAngle+0xce4>)
  402b48:	4611      	mov	r1, r2
  402b4a:	4620      	mov	r0, r4
  402b4c:	4798      	blx	r3
  402b4e:	4603      	mov	r3, r0
  402b50:	461a      	mov	r2, r3
  402b52:	4b2b      	ldr	r3, [pc, #172]	; (402c00 <GetPvAngle+0xce8>)
  402b54:	4610      	mov	r0, r2
  402b56:	4798      	blx	r3
  402b58:	4603      	mov	r3, r0
  402b5a:	4a2a      	ldr	r2, [pc, #168]	; (402c04 <GetPvAngle+0xcec>)
  402b5c:	fb83 1202 	smull	r1, r2, r3, r2
  402b60:	441a      	add	r2, r3
  402b62:	1291      	asrs	r1, r2, #10
  402b64:	17da      	asrs	r2, r3, #31
  402b66:	1a8a      	subs	r2, r1, r2
  402b68:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
  402b6c:	fb01 f202 	mul.w	r2, r1, r2
  402b70:	1a9a      	subs	r2, r3, r2
  402b72:	4b25      	ldr	r3, [pc, #148]	; (402c08 <GetPvAngle+0xcf0>)
  402b74:	4610      	mov	r0, r2
  402b76:	4798      	blx	r3
  402b78:	4603      	mov	r3, r0
  402b7a:	607b      	str	r3, [r7, #4]
	if ((s / 4.0f) < 0)
  402b7c:	4b23      	ldr	r3, [pc, #140]	; (402c0c <GetPvAngle+0xcf4>)
  402b7e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  402b82:	6878      	ldr	r0, [r7, #4]
  402b84:	4798      	blx	r3
  402b86:	4603      	mov	r3, r0
  402b88:	461a      	mov	r2, r3
  402b8a:	4b21      	ldr	r3, [pc, #132]	; (402c10 <GetPvAngle+0xcf8>)
  402b8c:	f04f 0100 	mov.w	r1, #0
  402b90:	4610      	mov	r0, r2
  402b92:	4798      	blx	r3
  402b94:	4603      	mov	r3, r0
  402b96:	2b00      	cmp	r3, #0
  402b98:	d044      	beq.n	402c24 <GetPvAngle+0xd0c>
	{
		t = (s / 4.0f) + 180.0f;
  402b9a:	4b1c      	ldr	r3, [pc, #112]	; (402c0c <GetPvAngle+0xcf4>)
  402b9c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  402ba0:	6878      	ldr	r0, [r7, #4]
  402ba2:	4798      	blx	r3
  402ba4:	4603      	mov	r3, r0
  402ba6:	461a      	mov	r2, r3
  402ba8:	e034      	b.n	402c14 <GetPvAngle+0xcfc>
  402baa:	bf00      	nop
  402bac:	00402de9 	.word	0x00402de9
  402bb0:	0040b159 	.word	0x0040b159
  402bb4:	0040a845 	.word	0x0040a845
  402bb8:	00407d61 	.word	0x00407d61
  402bbc:	0040a8ed 	.word	0x0040a8ed
  402bc0:	0040a585 	.word	0x0040a585
  402bc4:	3fa00000 	.word	0x3fa00000
  402bc8:	0040af49 	.word	0x0040af49
  402bcc:	0040ae9d 	.word	0x0040ae9d
  402bd0:	00402e21 	.word	0x00402e21
  402bd4:	42b5aa7f 	.word	0x42b5aa7f
  402bd8:	00407ccd 	.word	0x00407ccd
  402bdc:	200000fc 	.word	0x200000fc
  402be0:	0040ab41 	.word	0x0040ab41
  402be4:	00407de9 	.word	0x00407de9
  402be8:	00407e45 	.word	0x00407e45
  402bec:	44b40000 	.word	0x44b40000
  402bf0:	20000100 	.word	0x20000100
  402bf4:	20000104 	.word	0x20000104
  402bf8:	42700000 	.word	0x42700000
  402bfc:	0040af45 	.word	0x0040af45
  402c00:	0040b4e5 	.word	0x0040b4e5
  402c04:	b60b60b7 	.word	0xb60b60b7
  402c08:	0040b0b1 	.word	0x0040b0b1
  402c0c:	0040b2c1 	.word	0x0040b2c1
  402c10:	0040b495 	.word	0x0040b495
  402c14:	4b13      	ldr	r3, [pc, #76]	; (402c64 <GetPvAngle+0xd4c>)
  402c16:	4914      	ldr	r1, [pc, #80]	; (402c68 <GetPvAngle+0xd50>)
  402c18:	4610      	mov	r0, r2
  402c1a:	4798      	blx	r3
  402c1c:	4603      	mov	r3, r0
  402c1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  402c22:	e00d      	b.n	402c40 <GetPvAngle+0xd28>
	}
	else
	{
		t = (s / 4.0f) - 180.0f;
  402c24:	4b11      	ldr	r3, [pc, #68]	; (402c6c <GetPvAngle+0xd54>)
  402c26:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  402c2a:	6878      	ldr	r0, [r7, #4]
  402c2c:	4798      	blx	r3
  402c2e:	4603      	mov	r3, r0
  402c30:	461a      	mov	r2, r3
  402c32:	4b0f      	ldr	r3, [pc, #60]	; (402c70 <GetPvAngle+0xd58>)
  402c34:	490c      	ldr	r1, [pc, #48]	; (402c68 <GetPvAngle+0xd50>)
  402c36:	4610      	mov	r0, r2
  402c38:	4798      	blx	r3
  402c3a:	4603      	mov	r3, r0
  402c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	}
	return (90.0f / r*t);
  402c40:	4b0a      	ldr	r3, [pc, #40]	; (402c6c <GetPvAngle+0xd54>)
  402c42:	68b9      	ldr	r1, [r7, #8]
  402c44:	480b      	ldr	r0, [pc, #44]	; (402c74 <GetPvAngle+0xd5c>)
  402c46:	4798      	blx	r3
  402c48:	4603      	mov	r3, r0
  402c4a:	461a      	mov	r2, r3
  402c4c:	4b0a      	ldr	r3, [pc, #40]	; (402c78 <GetPvAngle+0xd60>)
  402c4e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
  402c52:	4610      	mov	r0, r2
  402c54:	4798      	blx	r3
  402c56:	4603      	mov	r3, r0
}
  402c58:	4618      	mov	r0, r3
  402c5a:	37bc      	adds	r7, #188	; 0xbc
  402c5c:	46bd      	mov	sp, r7
  402c5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402c62:	bf00      	nop
  402c64:	0040af49 	.word	0x0040af49
  402c68:	43340000 	.word	0x43340000
  402c6c:	0040b2c1 	.word	0x0040b2c1
  402c70:	0040af45 	.word	0x0040af45
  402c74:	42b40000 	.word	0x42b40000
  402c78:	0040b159 	.word	0x0040b159

00402c7c <GetPvBackTrackAngle>:

float GetPvBackTrackAngle(float pvAngle)
{
  402c7c:	b590      	push	{r4, r7, lr}
  402c7e:	b085      	sub	sp, #20
  402c80:	af00      	add	r7, sp, #0
  402c82:	6078      	str	r0, [r7, #4]
	float a0;
	
	a0 = pvAngle*0.0174603f;
  402c84:	4b44      	ldr	r3, [pc, #272]	; (402d98 <GetPvBackTrackAngle+0x11c>)
  402c86:	4945      	ldr	r1, [pc, #276]	; (402d9c <GetPvBackTrackAngle+0x120>)
  402c88:	6878      	ldr	r0, [r7, #4]
  402c8a:	4798      	blx	r3
  402c8c:	4603      	mov	r3, r0
  402c8e:	60fb      	str	r3, [r7, #12]
	a0 += 1.575f;
  402c90:	4b43      	ldr	r3, [pc, #268]	; (402da0 <GetPvBackTrackAngle+0x124>)
  402c92:	4944      	ldr	r1, [pc, #272]	; (402da4 <GetPvBackTrackAngle+0x128>)
  402c94:	68f8      	ldr	r0, [r7, #12]
  402c96:	4798      	blx	r3
  402c98:	4603      	mov	r3, r0
  402c9a:	60fb      	str	r3, [r7, #12]
	a0 -= 0.028989f;
  402c9c:	4b42      	ldr	r3, [pc, #264]	; (402da8 <GetPvBackTrackAngle+0x12c>)
  402c9e:	4943      	ldr	r1, [pc, #268]	; (402dac <GetPvBackTrackAngle+0x130>)
  402ca0:	68f8      	ldr	r0, [r7, #12]
  402ca2:	4798      	blx	r3
  402ca4:	4603      	mov	r3, r0
  402ca6:	60fb      	str	r3, [r7, #12]
	a0 = sin(a0);
  402ca8:	4b41      	ldr	r3, [pc, #260]	; (402db0 <GetPvBackTrackAngle+0x134>)
  402caa:	68f8      	ldr	r0, [r7, #12]
  402cac:	4798      	blx	r3
  402cae:	4603      	mov	r3, r0
  402cb0:	460c      	mov	r4, r1
  402cb2:	4618      	mov	r0, r3
  402cb4:	4621      	mov	r1, r4
  402cb6:	4b3f      	ldr	r3, [pc, #252]	; (402db4 <GetPvBackTrackAngle+0x138>)
  402cb8:	4798      	blx	r3
  402cba:	460a      	mov	r2, r1
  402cbc:	4601      	mov	r1, r0
  402cbe:	4b3e      	ldr	r3, [pc, #248]	; (402db8 <GetPvBackTrackAngle+0x13c>)
  402cc0:	4608      	mov	r0, r1
  402cc2:	4611      	mov	r1, r2
  402cc4:	4798      	blx	r3
  402cc6:	4603      	mov	r3, r0
  402cc8:	60fb      	str	r3, [r7, #12]
	a0 = a0 * dist;
  402cca:	4b3c      	ldr	r3, [pc, #240]	; (402dbc <GetPvBackTrackAngle+0x140>)
  402ccc:	681a      	ldr	r2, [r3, #0]
  402cce:	4b32      	ldr	r3, [pc, #200]	; (402d98 <GetPvBackTrackAngle+0x11c>)
  402cd0:	4611      	mov	r1, r2
  402cd2:	68f8      	ldr	r0, [r7, #12]
  402cd4:	4798      	blx	r3
  402cd6:	4603      	mov	r3, r0
  402cd8:	60fb      	str	r3, [r7, #12]
	a0 = a0 / width;
  402cda:	4b39      	ldr	r3, [pc, #228]	; (402dc0 <GetPvBackTrackAngle+0x144>)
  402cdc:	681a      	ldr	r2, [r3, #0]
  402cde:	4b39      	ldr	r3, [pc, #228]	; (402dc4 <GetPvBackTrackAngle+0x148>)
  402ce0:	4611      	mov	r1, r2
  402ce2:	68f8      	ldr	r0, [r7, #12]
  402ce4:	4798      	blx	r3
  402ce6:	4603      	mov	r3, r0
  402ce8:	60fb      	str	r3, [r7, #12]
	/* If this val is < 1 enter back track calculation */
	/* Otherwise exit backtracking mode */
	if (a0 < 1)
  402cea:	4b37      	ldr	r3, [pc, #220]	; (402dc8 <GetPvBackTrackAngle+0x14c>)
  402cec:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  402cf0:	68f8      	ldr	r0, [r7, #12]
  402cf2:	4798      	blx	r3
  402cf4:	4603      	mov	r3, r0
  402cf6:	2b00      	cmp	r3, #0
  402cf8:	d048      	beq.n	402d8c <GetPvBackTrackAngle+0x110>
	{
		a0 = asin(a0);
  402cfa:	4b2d      	ldr	r3, [pc, #180]	; (402db0 <GetPvBackTrackAngle+0x134>)
  402cfc:	68f8      	ldr	r0, [r7, #12]
  402cfe:	4798      	blx	r3
  402d00:	4603      	mov	r3, r0
  402d02:	460c      	mov	r4, r1
  402d04:	4618      	mov	r0, r3
  402d06:	4621      	mov	r1, r4
  402d08:	4b30      	ldr	r3, [pc, #192]	; (402dcc <GetPvBackTrackAngle+0x150>)
  402d0a:	4798      	blx	r3
  402d0c:	460a      	mov	r2, r1
  402d0e:	4601      	mov	r1, r0
  402d10:	4b29      	ldr	r3, [pc, #164]	; (402db8 <GetPvBackTrackAngle+0x13c>)
  402d12:	4608      	mov	r0, r1
  402d14:	4611      	mov	r1, r2
  402d16:	4798      	blx	r3
  402d18:	4603      	mov	r3, r0
  402d1a:	60fb      	str	r3, [r7, #12]
		a0 = a0 * 57.2958f;
  402d1c:	4b1e      	ldr	r3, [pc, #120]	; (402d98 <GetPvBackTrackAngle+0x11c>)
  402d1e:	492c      	ldr	r1, [pc, #176]	; (402dd0 <GetPvBackTrackAngle+0x154>)
  402d20:	68f8      	ldr	r0, [r7, #12]
  402d22:	4798      	blx	r3
  402d24:	4603      	mov	r3, r0
  402d26:	60fb      	str	r3, [r7, #12]
		if ((pvAngle >= -90) && (pvAngle < 0))
  402d28:	4b2a      	ldr	r3, [pc, #168]	; (402dd4 <GetPvBackTrackAngle+0x158>)
  402d2a:	492b      	ldr	r1, [pc, #172]	; (402dd8 <GetPvBackTrackAngle+0x15c>)
  402d2c:	6878      	ldr	r0, [r7, #4]
  402d2e:	4798      	blx	r3
  402d30:	4603      	mov	r3, r0
  402d32:	2b00      	cmp	r3, #0
  402d34:	d012      	beq.n	402d5c <GetPvBackTrackAngle+0xe0>
  402d36:	4b24      	ldr	r3, [pc, #144]	; (402dc8 <GetPvBackTrackAngle+0x14c>)
  402d38:	f04f 0100 	mov.w	r1, #0
  402d3c:	6878      	ldr	r0, [r7, #4]
  402d3e:	4798      	blx	r3
  402d40:	4603      	mov	r3, r0
  402d42:	2b00      	cmp	r3, #0
  402d44:	d00a      	beq.n	402d5c <GetPvBackTrackAngle+0xe0>
		{
			a0 = -a0 / 2.0;
  402d46:	68fb      	ldr	r3, [r7, #12]
  402d48:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
  402d4c:	4b1d      	ldr	r3, [pc, #116]	; (402dc4 <GetPvBackTrackAngle+0x148>)
  402d4e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402d52:	4610      	mov	r0, r2
  402d54:	4798      	blx	r3
  402d56:	4603      	mov	r3, r0
  402d58:	60fb      	str	r3, [r7, #12]
  402d5a:	e015      	b.n	402d88 <GetPvBackTrackAngle+0x10c>
		}
		else if ((pvAngle >= 0) && (pvAngle <= 90))
  402d5c:	4b1d      	ldr	r3, [pc, #116]	; (402dd4 <GetPvBackTrackAngle+0x158>)
  402d5e:	f04f 0100 	mov.w	r1, #0
  402d62:	6878      	ldr	r0, [r7, #4]
  402d64:	4798      	blx	r3
  402d66:	4603      	mov	r3, r0
  402d68:	2b00      	cmp	r3, #0
  402d6a:	d00d      	beq.n	402d88 <GetPvBackTrackAngle+0x10c>
  402d6c:	4b1b      	ldr	r3, [pc, #108]	; (402ddc <GetPvBackTrackAngle+0x160>)
  402d6e:	491c      	ldr	r1, [pc, #112]	; (402de0 <GetPvBackTrackAngle+0x164>)
  402d70:	6878      	ldr	r0, [r7, #4]
  402d72:	4798      	blx	r3
  402d74:	4603      	mov	r3, r0
  402d76:	2b00      	cmp	r3, #0
  402d78:	d006      	beq.n	402d88 <GetPvBackTrackAngle+0x10c>
		{
			a0 = a0 / 2.0;
  402d7a:	4b12      	ldr	r3, [pc, #72]	; (402dc4 <GetPvBackTrackAngle+0x148>)
  402d7c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402d80:	68f8      	ldr	r0, [r7, #12]
  402d82:	4798      	blx	r3
  402d84:	4603      	mov	r3, r0
  402d86:	60fb      	str	r3, [r7, #12]
		}
		return a0;
  402d88:	68fb      	ldr	r3, [r7, #12]
  402d8a:	e000      	b.n	402d8e <GetPvBackTrackAngle+0x112>
	}
	else
		return NAN;
  402d8c:	4b15      	ldr	r3, [pc, #84]	; (402de4 <GetPvBackTrackAngle+0x168>)
}
  402d8e:	4618      	mov	r0, r3
  402d90:	3714      	adds	r7, #20
  402d92:	46bd      	mov	sp, r7
  402d94:	bd90      	pop	{r4, r7, pc}
  402d96:	bf00      	nop
  402d98:	0040b159 	.word	0x0040b159
  402d9c:	3c8f08e7 	.word	0x3c8f08e7
  402da0:	0040af49 	.word	0x0040af49
  402da4:	3fc9999a 	.word	0x3fc9999a
  402da8:	0040af45 	.word	0x0040af45
  402dac:	3ced7a57 	.word	0x3ced7a57
  402db0:	0040a845 	.word	0x0040a845
  402db4:	00407d61 	.word	0x00407d61
  402db8:	0040ae9d 	.word	0x0040ae9d
  402dbc:	20000108 	.word	0x20000108
  402dc0:	2000010c 	.word	0x2000010c
  402dc4:	0040b2c1 	.word	0x0040b2c1
  402dc8:	0040b495 	.word	0x0040b495
  402dcc:	00407ef5 	.word	0x00407ef5
  402dd0:	42652ee6 	.word	0x42652ee6
  402dd4:	0040b4bd 	.word	0x0040b4bd
  402dd8:	c2b40000 	.word	0xc2b40000
  402ddc:	0040b4a9 	.word	0x0040b4a9
  402de0:	42b40000 	.word	0x42b40000
  402de4:	7fc00000 	.word	0x7fc00000

00402de8 <Rad>:

float Rad(float deg)
{
  402de8:	b580      	push	{r7, lr}
  402dea:	b082      	sub	sp, #8
  402dec:	af00      	add	r7, sp, #0
  402dee:	6078      	str	r0, [r7, #4]
	return ((float)M_PI*deg)/180.0f;
  402df0:	4b07      	ldr	r3, [pc, #28]	; (402e10 <Rad+0x28>)
  402df2:	4908      	ldr	r1, [pc, #32]	; (402e14 <Rad+0x2c>)
  402df4:	6878      	ldr	r0, [r7, #4]
  402df6:	4798      	blx	r3
  402df8:	4603      	mov	r3, r0
  402dfa:	461a      	mov	r2, r3
  402dfc:	4b06      	ldr	r3, [pc, #24]	; (402e18 <Rad+0x30>)
  402dfe:	4907      	ldr	r1, [pc, #28]	; (402e1c <Rad+0x34>)
  402e00:	4610      	mov	r0, r2
  402e02:	4798      	blx	r3
  402e04:	4603      	mov	r3, r0
}
  402e06:	4618      	mov	r0, r3
  402e08:	3708      	adds	r7, #8
  402e0a:	46bd      	mov	sp, r7
  402e0c:	bd80      	pop	{r7, pc}
  402e0e:	bf00      	nop
  402e10:	0040b159 	.word	0x0040b159
  402e14:	40490fdb 	.word	0x40490fdb
  402e18:	0040b2c1 	.word	0x0040b2c1
  402e1c:	43340000 	.word	0x43340000

00402e20 <Deg>:

float Deg(float rad)
{
  402e20:	b580      	push	{r7, lr}
  402e22:	b082      	sub	sp, #8
  402e24:	af00      	add	r7, sp, #0
  402e26:	6078      	str	r0, [r7, #4]
	return (180.0f *rad) / (float)M_PI;
  402e28:	4b07      	ldr	r3, [pc, #28]	; (402e48 <Deg+0x28>)
  402e2a:	4908      	ldr	r1, [pc, #32]	; (402e4c <Deg+0x2c>)
  402e2c:	6878      	ldr	r0, [r7, #4]
  402e2e:	4798      	blx	r3
  402e30:	4603      	mov	r3, r0
  402e32:	461a      	mov	r2, r3
  402e34:	4b06      	ldr	r3, [pc, #24]	; (402e50 <Deg+0x30>)
  402e36:	4907      	ldr	r1, [pc, #28]	; (402e54 <Deg+0x34>)
  402e38:	4610      	mov	r0, r2
  402e3a:	4798      	blx	r3
  402e3c:	4603      	mov	r3, r0
}
  402e3e:	4618      	mov	r0, r3
  402e40:	3708      	adds	r7, #8
  402e42:	46bd      	mov	sp, r7
  402e44:	bd80      	pop	{r7, pc}
  402e46:	bf00      	nop
  402e48:	0040b159 	.word	0x0040b159
  402e4c:	43340000 	.word	0x43340000
  402e50:	0040b2c1 	.word	0x0040b2c1
  402e54:	40490fdb 	.word	0x40490fdb

00402e58 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  402e58:	b480      	push	{r7}
  402e5a:	b083      	sub	sp, #12
  402e5c:	af00      	add	r7, sp, #0
  402e5e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402e60:	687b      	ldr	r3, [r7, #4]
  402e62:	2b07      	cmp	r3, #7
  402e64:	d825      	bhi.n	402eb2 <osc_get_rate+0x5a>
  402e66:	a201      	add	r2, pc, #4	; (adr r2, 402e6c <osc_get_rate+0x14>)
  402e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402e6c:	00402e8d 	.word	0x00402e8d
  402e70:	00402e93 	.word	0x00402e93
  402e74:	00402e99 	.word	0x00402e99
  402e78:	00402e9f 	.word	0x00402e9f
  402e7c:	00402ea3 	.word	0x00402ea3
  402e80:	00402ea7 	.word	0x00402ea7
  402e84:	00402eab 	.word	0x00402eab
  402e88:	00402eaf 	.word	0x00402eaf
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  402e8c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402e90:	e010      	b.n	402eb4 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  402e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402e96:	e00d      	b.n	402eb4 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  402e98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402e9c:	e00a      	b.n	402eb4 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  402e9e:	4b08      	ldr	r3, [pc, #32]	; (402ec0 <osc_get_rate+0x68>)
  402ea0:	e008      	b.n	402eb4 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  402ea2:	4b08      	ldr	r3, [pc, #32]	; (402ec4 <osc_get_rate+0x6c>)
  402ea4:	e006      	b.n	402eb4 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  402ea6:	4b08      	ldr	r3, [pc, #32]	; (402ec8 <osc_get_rate+0x70>)
  402ea8:	e004      	b.n	402eb4 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  402eaa:	4b07      	ldr	r3, [pc, #28]	; (402ec8 <osc_get_rate+0x70>)
  402eac:	e002      	b.n	402eb4 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  402eae:	4b06      	ldr	r3, [pc, #24]	; (402ec8 <osc_get_rate+0x70>)
  402eb0:	e000      	b.n	402eb4 <osc_get_rate+0x5c>
	}

	return 0;
  402eb2:	2300      	movs	r3, #0
}
  402eb4:	4618      	mov	r0, r3
  402eb6:	370c      	adds	r7, #12
  402eb8:	46bd      	mov	sp, r7
  402eba:	bc80      	pop	{r7}
  402ebc:	4770      	bx	lr
  402ebe:	bf00      	nop
  402ec0:	003d0900 	.word	0x003d0900
  402ec4:	007a1200 	.word	0x007a1200
  402ec8:	00b71b00 	.word	0x00b71b00

00402ecc <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  402ecc:	b580      	push	{r7, lr}
  402ece:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  402ed0:	2006      	movs	r0, #6
  402ed2:	4b04      	ldr	r3, [pc, #16]	; (402ee4 <sysclk_get_main_hz+0x18>)
  402ed4:	4798      	blx	r3
  402ed6:	4602      	mov	r2, r0
  402ed8:	4613      	mov	r3, r2
  402eda:	009b      	lsls	r3, r3, #2
  402edc:	4413      	add	r3, r2
  402ede:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  402ee0:	4618      	mov	r0, r3
  402ee2:	bd80      	pop	{r7, pc}
  402ee4:	00402e59 	.word	0x00402e59

00402ee8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  402ee8:	b580      	push	{r7, lr}
  402eea:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  402eec:	4b02      	ldr	r3, [pc, #8]	; (402ef8 <sysclk_get_peripheral_hz+0x10>)
  402eee:	4798      	blx	r3
  402ef0:	4603      	mov	r3, r0
  402ef2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  402ef4:	4618      	mov	r0, r3
  402ef6:	bd80      	pop	{r7, pc}
  402ef8:	00402ecd 	.word	0x00402ecd

00402efc <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  402efc:	b580      	push	{r7, lr}
  402efe:	b082      	sub	sp, #8
  402f00:	af00      	add	r7, sp, #0
  402f02:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  402f04:	6878      	ldr	r0, [r7, #4]
  402f06:	4b03      	ldr	r3, [pc, #12]	; (402f14 <sysclk_enable_peripheral_clock+0x18>)
  402f08:	4798      	blx	r3
}
  402f0a:	bf00      	nop
  402f0c:	3708      	adds	r7, #8
  402f0e:	46bd      	mov	sp, r7
  402f10:	bd80      	pop	{r7, pc}
  402f12:	bf00      	nop
  402f14:	00405075 	.word	0x00405075

00402f18 <InitRs485Pdc>:
 pdc_packet_t rs485PdcPkt;
 /* Pointer to PDC register base. */
 Pdc *rs485PdcBase;

 void InitRs485Pdc(void)
 {
  402f18:	b5b0      	push	{r4, r5, r7, lr}
  402f1a:	b086      	sub	sp, #24
  402f1c:	af00      	add	r7, sp, #0
	 const sam_usart_opt_t usart_console_settings = {
  402f1e:	4b15      	ldr	r3, [pc, #84]	; (402f74 <InitRs485Pdc+0x5c>)
  402f20:	463c      	mov	r4, r7
  402f22:	461d      	mov	r5, r3
  402f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402f28:	e895 0003 	ldmia.w	r5, {r0, r1}
  402f2c:	e884 0003 	stmia.w	r4, {r0, r1}
		 /* This field is only used in IrDA mode. */
		 0
	 };

	 /* Enable the peripheral clock in the PMC. */
	 sysclk_enable_peripheral_clock(RS485_USART_ID);
  402f30:	200f      	movs	r0, #15
  402f32:	4b11      	ldr	r3, [pc, #68]	; (402f78 <InitRs485Pdc+0x60>)
  402f34:	4798      	blx	r3

	 /* Configure USART in RS485 mode. */
	 usart_init_rs485(RS485_USART, &usart_console_settings,
  402f36:	4b11      	ldr	r3, [pc, #68]	; (402f7c <InitRs485Pdc+0x64>)
  402f38:	4798      	blx	r3
  402f3a:	4602      	mov	r2, r0
  402f3c:	463b      	mov	r3, r7
  402f3e:	4619      	mov	r1, r3
  402f40:	480f      	ldr	r0, [pc, #60]	; (402f80 <InitRs485Pdc+0x68>)
  402f42:	4b10      	ldr	r3, [pc, #64]	; (402f84 <InitRs485Pdc+0x6c>)
  402f44:	4798      	blx	r3
	 sysclk_get_peripheral_hz());


	 /* Enable TX & RX function. */
	 usart_enable_tx(RS485_USART);
  402f46:	480e      	ldr	r0, [pc, #56]	; (402f80 <InitRs485Pdc+0x68>)
  402f48:	4b0f      	ldr	r3, [pc, #60]	; (402f88 <InitRs485Pdc+0x70>)
  402f4a:	4798      	blx	r3
	 usart_enable_rx(RS485_USART);
  402f4c:	480c      	ldr	r0, [pc, #48]	; (402f80 <InitRs485Pdc+0x68>)
  402f4e:	4b0f      	ldr	r3, [pc, #60]	; (402f8c <InitRs485Pdc+0x74>)
  402f50:	4798      	blx	r3
 	 
	 /* Get board USART PDC base address and enable receiver and transmitter. */
	 rs485PdcBase = usart_get_pdc_base(RS485_USART);
  402f52:	480b      	ldr	r0, [pc, #44]	; (402f80 <InitRs485Pdc+0x68>)
  402f54:	4b0e      	ldr	r3, [pc, #56]	; (402f90 <InitRs485Pdc+0x78>)
  402f56:	4798      	blx	r3
  402f58:	4602      	mov	r2, r0
  402f5a:	4b0e      	ldr	r3, [pc, #56]	; (402f94 <InitRs485Pdc+0x7c>)
  402f5c:	601a      	str	r2, [r3, #0]
	 pdc_enable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  402f5e:	4b0d      	ldr	r3, [pc, #52]	; (402f94 <InitRs485Pdc+0x7c>)
  402f60:	681b      	ldr	r3, [r3, #0]
  402f62:	f240 1101 	movw	r1, #257	; 0x101
  402f66:	4618      	mov	r0, r3
  402f68:	4b0b      	ldr	r3, [pc, #44]	; (402f98 <InitRs485Pdc+0x80>)
  402f6a:	4798      	blx	r3

 }
  402f6c:	bf00      	nop
  402f6e:	3718      	adds	r7, #24
  402f70:	46bd      	mov	sp, r7
  402f72:	bdb0      	pop	{r4, r5, r7, pc}
  402f74:	0040f8b8 	.word	0x0040f8b8
  402f78:	00402efd 	.word	0x00402efd
  402f7c:	00402ee9 	.word	0x00402ee9
  402f80:	40028000 	.word	0x40028000
  402f84:	00403e0d 	.word	0x00403e0d
  402f88:	00403e4d 	.word	0x00403e4d
  402f8c:	00403e95 	.word	0x00403e95
  402f90:	00403fb5 	.word	0x00403fb5
  402f94:	20002f14 	.word	0x20002f14
  402f98:	00403739 	.word	0x00403739

00402f9c <Rs485PdcStartTx>:

 /* Set pointers and start transmitting */
 void Rs485PdcStartTx(uint32_t buff, uint16_t nBytes)
 {
  402f9c:	b580      	push	{r7, lr}
  402f9e:	b082      	sub	sp, #8
  402fa0:	af00      	add	r7, sp, #0
  402fa2:	6078      	str	r0, [r7, #4]
  402fa4:	460b      	mov	r3, r1
  402fa6:	807b      	strh	r3, [r7, #2]
	rs485PdcPkt.ul_addr = buff;
  402fa8:	4a08      	ldr	r2, [pc, #32]	; (402fcc <Rs485PdcStartTx+0x30>)
  402faa:	687b      	ldr	r3, [r7, #4]
  402fac:	6013      	str	r3, [r2, #0]
	rs485PdcPkt.ul_size = nBytes;
  402fae:	887b      	ldrh	r3, [r7, #2]
  402fb0:	4a06      	ldr	r2, [pc, #24]	; (402fcc <Rs485PdcStartTx+0x30>)
  402fb2:	6053      	str	r3, [r2, #4]
	pdc_tx_init(rs485PdcBase, &rs485PdcPkt, NULL);
  402fb4:	4b06      	ldr	r3, [pc, #24]	; (402fd0 <Rs485PdcStartTx+0x34>)
  402fb6:	681b      	ldr	r3, [r3, #0]
  402fb8:	2200      	movs	r2, #0
  402fba:	4904      	ldr	r1, [pc, #16]	; (402fcc <Rs485PdcStartTx+0x30>)
  402fbc:	4618      	mov	r0, r3
  402fbe:	4b05      	ldr	r3, [pc, #20]	; (402fd4 <Rs485PdcStartTx+0x38>)
  402fc0:	4798      	blx	r3
 }
  402fc2:	bf00      	nop
  402fc4:	3708      	adds	r7, #8
  402fc6:	46bd      	mov	sp, r7
  402fc8:	bd80      	pop	{r7, pc}
  402fca:	bf00      	nop
  402fcc:	20002f18 	.word	0x20002f18
  402fd0:	20002f14 	.word	0x20002f14
  402fd4:	004036b1 	.word	0x004036b1

00402fd8 <Rs485PdcStartRx>:

 /* Set pointers and start receiving */
 void Rs485PdcStartRx(uint32_t buff, uint16_t nBytes)
 {
  402fd8:	b580      	push	{r7, lr}
  402fda:	b082      	sub	sp, #8
  402fdc:	af00      	add	r7, sp, #0
  402fde:	6078      	str	r0, [r7, #4]
  402fe0:	460b      	mov	r3, r1
  402fe2:	807b      	strh	r3, [r7, #2]
	rs485PdcPkt.ul_addr = buff;
  402fe4:	4a08      	ldr	r2, [pc, #32]	; (403008 <Rs485PdcStartRx+0x30>)
  402fe6:	687b      	ldr	r3, [r7, #4]
  402fe8:	6013      	str	r3, [r2, #0]
	rs485PdcPkt.ul_size = nBytes;
  402fea:	887b      	ldrh	r3, [r7, #2]
  402fec:	4a06      	ldr	r2, [pc, #24]	; (403008 <Rs485PdcStartRx+0x30>)
  402fee:	6053      	str	r3, [r2, #4]
	pdc_rx_init(rs485PdcBase, &rs485PdcPkt, NULL);
  402ff0:	4b06      	ldr	r3, [pc, #24]	; (40300c <Rs485PdcStartRx+0x34>)
  402ff2:	681b      	ldr	r3, [r3, #0]
  402ff4:	2200      	movs	r2, #0
  402ff6:	4904      	ldr	r1, [pc, #16]	; (403008 <Rs485PdcStartRx+0x30>)
  402ff8:	4618      	mov	r0, r3
  402ffa:	4b05      	ldr	r3, [pc, #20]	; (403010 <Rs485PdcStartRx+0x38>)
  402ffc:	4798      	blx	r3
 }
  402ffe:	bf00      	nop
  403000:	3708      	adds	r7, #8
  403002:	46bd      	mov	sp, r7
  403004:	bd80      	pop	{r7, pc}
  403006:	bf00      	nop
  403008:	20002f18 	.word	0x20002f18
  40300c:	20002f14 	.word	0x20002f14
  403010:	004036f5 	.word	0x004036f5

00403014 <Rs485PdcGetRxBytes>:
 
 /* Returns number of bytes in Rx buffer */
 uint32_t Rs485PdcGetRxBytes(void)
 {
  403014:	b580      	push	{r7, lr}
  403016:	b082      	sub	sp, #8
  403018:	af00      	add	r7, sp, #0
	uint32_t recvdBytes = RS485_BUFFER_SIZE;
  40301a:	2396      	movs	r3, #150	; 0x96
  40301c:	607b      	str	r3, [r7, #4]
	recvdBytes -= pdc_read_rx_counter(rs485PdcBase);
  40301e:	4b09      	ldr	r3, [pc, #36]	; (403044 <Rs485PdcGetRxBytes+0x30>)
  403020:	681b      	ldr	r3, [r3, #0]
  403022:	4618      	mov	r0, r3
  403024:	4b08      	ldr	r3, [pc, #32]	; (403048 <Rs485PdcGetRxBytes+0x34>)
  403026:	4798      	blx	r3
  403028:	4602      	mov	r2, r0
  40302a:	687b      	ldr	r3, [r7, #4]
  40302c:	1a9b      	subs	r3, r3, r2
  40302e:	607b      	str	r3, [r7, #4]
	if(recvdBytes>RS485_BUFFER_SIZE)//If overflow occurred. 
  403030:	687b      	ldr	r3, [r7, #4]
  403032:	2b96      	cmp	r3, #150	; 0x96
  403034:	d901      	bls.n	40303a <Rs485PdcGetRxBytes+0x26>
	{
		recvdBytes = 0;
  403036:	2300      	movs	r3, #0
  403038:	607b      	str	r3, [r7, #4]
	}
	return recvdBytes;
  40303a:	687b      	ldr	r3, [r7, #4]
 }
  40303c:	4618      	mov	r0, r3
  40303e:	3708      	adds	r7, #8
  403040:	46bd      	mov	sp, r7
  403042:	bd80      	pop	{r7, pc}
  403044:	20002f14 	.word	0x20002f14
  403048:	00403779 	.word	0x00403779

0040304c <Rs485PdcGetTxStatus>:
	return (usart_get_status(RS485_USART)&US_CSR_ENDRX);
 }

 /* Returns 1 if Tx Buffer is empty else 0 */
 uint32_t Rs485PdcGetTxStatus(void)
 {
  40304c:	b580      	push	{r7, lr}
  40304e:	af00      	add	r7, sp, #0
	return (usart_get_status(RS485_USART)&US_CSR_ENDTX);
  403050:	4803      	ldr	r0, [pc, #12]	; (403060 <Rs485PdcGetTxStatus+0x14>)
  403052:	4b04      	ldr	r3, [pc, #16]	; (403064 <Rs485PdcGetTxStatus+0x18>)
  403054:	4798      	blx	r3
  403056:	4603      	mov	r3, r0
  403058:	f003 0310 	and.w	r3, r3, #16
 }
  40305c:	4618      	mov	r0, r3
  40305e:	bd80      	pop	{r7, pc}
  403060:	40028000 	.word	0x40028000
  403064:	00403f2d 	.word	0x00403f2d

00403068 <local_twi_handler>:
/*
 * For internal use only.
 * A common TWI interrupt handler that is called for all TWI peripherals.
 */
static void local_twi_handler(const portBASE_TYPE twi_index)
{
  403068:	b590      	push	{r4, r7, lr}
  40306a:	b08b      	sub	sp, #44	; 0x2c
  40306c:	af00      	add	r7, sp, #0
  40306e:	6078      	str	r0, [r7, #4]
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
  403070:	2300      	movs	r3, #0
  403072:	60bb      	str	r3, [r7, #8]
	uint32_t twi_status;
	Twi *twi_port;
	bool transfer_timeout = false;
  403074:	2300      	movs	r3, #0
  403076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	twi_port = all_twi_definitions[twi_index].peripheral_base_address;
  40307a:	4a7f      	ldr	r2, [pc, #508]	; (403278 <local_twi_handler+0x210>)
  40307c:	687b      	ldr	r3, [r7, #4]
  40307e:	011b      	lsls	r3, r3, #4
  403080:	4413      	add	r3, r2
  403082:	681b      	ldr	r3, [r3, #0]
  403084:	61bb      	str	r3, [r7, #24]

	twi_status = twi_get_interrupt_status(twi_port);
  403086:	69b8      	ldr	r0, [r7, #24]
  403088:	4b7c      	ldr	r3, [pc, #496]	; (40327c <local_twi_handler+0x214>)
  40308a:	4798      	blx	r3
  40308c:	6178      	str	r0, [r7, #20]
	twi_status &= twi_get_interrupt_mask(twi_port);
  40308e:	69b8      	ldr	r0, [r7, #24]
  403090:	4b7b      	ldr	r3, [pc, #492]	; (403280 <local_twi_handler+0x218>)
  403092:	4798      	blx	r3
  403094:	4602      	mov	r2, r0
  403096:	697b      	ldr	r3, [r7, #20]
  403098:	4013      	ands	r3, r2
  40309a:	617b      	str	r3, [r7, #20]

	/* Has the PDC completed a transmission? */
	if ((twi_status & TWI_SR_ENDTX) != 0UL) {
  40309c:	697b      	ldr	r3, [r7, #20]
  40309e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  4030a2:	2b00      	cmp	r3, #0
  4030a4:	d071      	beq.n	40318a <local_twi_handler+0x122>
		/* Disable PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_TXTDIS);
  4030a6:	4a74      	ldr	r2, [pc, #464]	; (403278 <local_twi_handler+0x210>)
  4030a8:	687b      	ldr	r3, [r7, #4]
  4030aa:	011b      	lsls	r3, r3, #4
  4030ac:	4413      	add	r3, r2
  4030ae:	3304      	adds	r3, #4
  4030b0:	681b      	ldr	r3, [r3, #0]
  4030b2:	f44f 7100 	mov.w	r1, #512	; 0x200
  4030b6:	4618      	mov	r0, r3
  4030b8:	4b72      	ldr	r3, [pc, #456]	; (403284 <local_twi_handler+0x21c>)
  4030ba:	4798      	blx	r3
		twi_disable_interrupt(twi_port, TWI_IDR_ENDTX);
  4030bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4030c0:	69b8      	ldr	r0, [r7, #24]
  4030c2:	4b71      	ldr	r3, [pc, #452]	; (403288 <local_twi_handler+0x220>)
  4030c4:	4798      	blx	r3

		uint8_t status;
		uint32_t timeout_counter = 0;
  4030c6:	2300      	movs	r3, #0
  4030c8:	623b      	str	r3, [r7, #32]

		/* Wait for TX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  4030ca:	69bb      	ldr	r3, [r7, #24]
  4030cc:	6a1b      	ldr	r3, [r3, #32]
  4030ce:	74fb      	strb	r3, [r7, #19]
			if (status & TWI_SR_TXRDY) {
  4030d0:	7cfb      	ldrb	r3, [r7, #19]
  4030d2:	f003 0304 	and.w	r3, r3, #4
  4030d6:	2b00      	cmp	r3, #0
  4030d8:	d10a      	bne.n	4030f0 <local_twi_handler+0x88>
				break;
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  4030da:	6a3b      	ldr	r3, [r7, #32]
  4030dc:	3301      	adds	r3, #1
  4030de:	623b      	str	r3, [r7, #32]
  4030e0:	6a3b      	ldr	r3, [r7, #32]
  4030e2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4030e6:	d1f0      	bne.n	4030ca <local_twi_handler+0x62>
				transfer_timeout = true;
  4030e8:	2301      	movs	r3, #1
  4030ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
  4030ee:	e000      	b.n	4030f2 <local_twi_handler+0x8a>

		/* Wait for TX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
			if (status & TWI_SR_TXRDY) {
				break;
  4030f0:	bf00      	nop
				transfer_timeout = true;
				break;
			}
		}
		/* Complete the transfer - stop and last byte */
		twi_port->TWI_CR = TWI_CR_STOP;
  4030f2:	69bb      	ldr	r3, [r7, #24]
  4030f4:	2202      	movs	r2, #2
  4030f6:	601a      	str	r2, [r3, #0]
		twi_port->TWI_THR = twis[twi_index].buffer[twis[twi_index].length-1];
  4030f8:	4a64      	ldr	r2, [pc, #400]	; (40328c <local_twi_handler+0x224>)
  4030fa:	687b      	ldr	r3, [r7, #4]
  4030fc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  403100:	4962      	ldr	r1, [pc, #392]	; (40328c <local_twi_handler+0x224>)
  403102:	687b      	ldr	r3, [r7, #4]
  403104:	00db      	lsls	r3, r3, #3
  403106:	440b      	add	r3, r1
  403108:	685b      	ldr	r3, [r3, #4]
  40310a:	3b01      	subs	r3, #1
  40310c:	4413      	add	r3, r2
  40310e:	781b      	ldrb	r3, [r3, #0]
  403110:	461a      	mov	r2, r3
  403112:	69bb      	ldr	r3, [r7, #24]
  403114:	635a      	str	r2, [r3, #52]	; 0x34

		/* Wait for TX complete flag */
		while (1) {
			status = twi_port->TWI_SR;
  403116:	69bb      	ldr	r3, [r7, #24]
  403118:	6a1b      	ldr	r3, [r3, #32]
  40311a:	74fb      	strb	r3, [r7, #19]
			if (status & TWI_SR_TXCOMP) {
  40311c:	7cfb      	ldrb	r3, [r7, #19]
  40311e:	f003 0301 	and.w	r3, r3, #1
  403122:	2b00      	cmp	r3, #0
  403124:	d10a      	bne.n	40313c <local_twi_handler+0xd4>
				break;
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  403126:	6a3b      	ldr	r3, [r7, #32]
  403128:	3301      	adds	r3, #1
  40312a:	623b      	str	r3, [r7, #32]
  40312c:	6a3b      	ldr	r3, [r7, #32]
  40312e:	f1b3 3fff 	cmp.w	r3, #4294967295
  403132:	d1f0      	bne.n	403116 <local_twi_handler+0xae>
				transfer_timeout = true;
  403134:	2301      	movs	r3, #1
  403136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
  40313a:	e000      	b.n	40313e <local_twi_handler+0xd6>

		/* Wait for TX complete flag */
		while (1) {
			status = twi_port->TWI_SR;
			if (status & TWI_SR_TXCOMP) {
				break;
  40313c:	bf00      	nop
				break;
			}
		}
		/* If the driver is supporting multi-threading, then return the access
		mutex. */
		if (tx_dma_control[twi_index].peripheral_access_sem != NULL) {
  40313e:	4a54      	ldr	r2, [pc, #336]	; (403290 <local_twi_handler+0x228>)
  403140:	687b      	ldr	r3, [r7, #4]
  403142:	00db      	lsls	r3, r3, #3
  403144:	4413      	add	r3, r2
  403146:	685b      	ldr	r3, [r3, #4]
  403148:	2b00      	cmp	r3, #0
  40314a:	d00a      	beq.n	403162 <local_twi_handler+0xfa>
			xSemaphoreGiveFromISR(
  40314c:	4a50      	ldr	r2, [pc, #320]	; (403290 <local_twi_handler+0x228>)
  40314e:	687b      	ldr	r3, [r7, #4]
  403150:	00db      	lsls	r3, r3, #3
  403152:	4413      	add	r3, r2
  403154:	6858      	ldr	r0, [r3, #4]
  403156:	f107 0208 	add.w	r2, r7, #8
  40315a:	2300      	movs	r3, #0
  40315c:	2100      	movs	r1, #0
  40315e:	4c4d      	ldr	r4, [pc, #308]	; (403294 <local_twi_handler+0x22c>)
  403160:	47a0      	blx	r4
					&higher_priority_task_woken);
		}

		/* if the sending task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  403162:	6a3b      	ldr	r3, [r7, #32]
  403164:	f1b3 3fff 	cmp.w	r3, #4294967295
  403168:	d00f      	beq.n	40318a <local_twi_handler+0x122>
			if (tx_dma_control[twi_index]. transaction_complete_notification_semaphore != NULL) {
  40316a:	4a49      	ldr	r2, [pc, #292]	; (403290 <local_twi_handler+0x228>)
  40316c:	687b      	ldr	r3, [r7, #4]
  40316e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  403172:	2b00      	cmp	r3, #0
  403174:	d009      	beq.n	40318a <local_twi_handler+0x122>
				xSemaphoreGiveFromISR(
  403176:	4a46      	ldr	r2, [pc, #280]	; (403290 <local_twi_handler+0x228>)
  403178:	687b      	ldr	r3, [r7, #4]
  40317a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
  40317e:	f107 0208 	add.w	r2, r7, #8
  403182:	2300      	movs	r3, #0
  403184:	2100      	movs	r1, #0
  403186:	4c43      	ldr	r4, [pc, #268]	; (403294 <local_twi_handler+0x22c>)
  403188:	47a0      	blx	r4
			}
		}
	}

	/* Has the PDC completed a reception? */
	if ((twi_status & TWI_SR_ENDRX) != 0UL) {
  40318a:	697b      	ldr	r3, [r7, #20]
  40318c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  403190:	2b00      	cmp	r3, #0
  403192:	f000 80a8 	beq.w	4032e6 <local_twi_handler+0x27e>
		uint32_t timeout_counter = 0;
  403196:	2300      	movs	r3, #0
  403198:	61fb      	str	r3, [r7, #28]
		uint32_t status;
		/* Must handle the two last bytes */
		/* Disable PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_RXTDIS);
  40319a:	4a37      	ldr	r2, [pc, #220]	; (403278 <local_twi_handler+0x210>)
  40319c:	687b      	ldr	r3, [r7, #4]
  40319e:	011b      	lsls	r3, r3, #4
  4031a0:	4413      	add	r3, r2
  4031a2:	3304      	adds	r3, #4
  4031a4:	681b      	ldr	r3, [r3, #0]
  4031a6:	2102      	movs	r1, #2
  4031a8:	4618      	mov	r0, r3
  4031aa:	4b36      	ldr	r3, [pc, #216]	; (403284 <local_twi_handler+0x21c>)
  4031ac:	4798      	blx	r3

		twi_disable_interrupt(twi_port, TWI_IDR_ENDRX);
  4031ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4031b2:	69b8      	ldr	r0, [r7, #24]
  4031b4:	4b34      	ldr	r3, [pc, #208]	; (403288 <local_twi_handler+0x220>)
  4031b6:	4798      	blx	r3

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  4031b8:	69bb      	ldr	r3, [r7, #24]
  4031ba:	6a1b      	ldr	r3, [r3, #32]
  4031bc:	60fb      	str	r3, [r7, #12]
			if (status & TWI_SR_RXRDY) {
  4031be:	68fb      	ldr	r3, [r7, #12]
  4031c0:	f003 0302 	and.w	r3, r3, #2
  4031c4:	2b00      	cmp	r3, #0
  4031c6:	d107      	bne.n	4031d8 <local_twi_handler+0x170>
				break;
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  4031c8:	69fb      	ldr	r3, [r7, #28]
  4031ca:	3301      	adds	r3, #1
  4031cc:	61fb      	str	r3, [r7, #28]
  4031ce:	69fb      	ldr	r3, [r7, #28]
  4031d0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4031d4:	d002      	beq.n	4031dc <local_twi_handler+0x174>
				break;
			}
		}
  4031d6:	e7ef      	b.n	4031b8 <local_twi_handler+0x150>

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
			if (status & TWI_SR_RXRDY) {
				break;
  4031d8:	bf00      	nop
  4031da:	e000      	b.n	4031de <local_twi_handler+0x176>
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
				break;
  4031dc:	bf00      	nop
			}
		}
		/* Complete the transfer. */
		twi_port->TWI_CR = TWI_CR_STOP;
  4031de:	69bb      	ldr	r3, [r7, #24]
  4031e0:	2202      	movs	r2, #2
  4031e2:	601a      	str	r2, [r3, #0]
		/* Read second last data */
		twis[twi_index].buffer[(twis[twi_index].length)-2] = twi_port->TWI_RHR;
  4031e4:	4a29      	ldr	r2, [pc, #164]	; (40328c <local_twi_handler+0x224>)
  4031e6:	687b      	ldr	r3, [r7, #4]
  4031e8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  4031ec:	4927      	ldr	r1, [pc, #156]	; (40328c <local_twi_handler+0x224>)
  4031ee:	687b      	ldr	r3, [r7, #4]
  4031f0:	00db      	lsls	r3, r3, #3
  4031f2:	440b      	add	r3, r1
  4031f4:	685b      	ldr	r3, [r3, #4]
  4031f6:	3b02      	subs	r3, #2
  4031f8:	4413      	add	r3, r2
  4031fa:	69ba      	ldr	r2, [r7, #24]
  4031fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
  4031fe:	b2d2      	uxtb	r2, r2
  403200:	701a      	strb	r2, [r3, #0]

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  403202:	69bb      	ldr	r3, [r7, #24]
  403204:	6a1b      	ldr	r3, [r3, #32]
  403206:	60fb      	str	r3, [r7, #12]
			if (status & TWI_SR_RXRDY) {
  403208:	68fb      	ldr	r3, [r7, #12]
  40320a:	f003 0302 	and.w	r3, r3, #2
  40320e:	2b00      	cmp	r3, #0
  403210:	d107      	bne.n	403222 <local_twi_handler+0x1ba>
				break;
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  403212:	69fb      	ldr	r3, [r7, #28]
  403214:	3301      	adds	r3, #1
  403216:	61fb      	str	r3, [r7, #28]
  403218:	69fb      	ldr	r3, [r7, #28]
  40321a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40321e:	d002      	beq.n	403226 <local_twi_handler+0x1be>
				break;
			}
		}
  403220:	e7ef      	b.n	403202 <local_twi_handler+0x19a>

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
			if (status & TWI_SR_RXRDY) {
				break;
  403222:	bf00      	nop
  403224:	e000      	b.n	403228 <local_twi_handler+0x1c0>
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
				break;
  403226:	bf00      	nop
			}
		}

		if (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  403228:	69fb      	ldr	r3, [r7, #28]
  40322a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40322e:	d034      	beq.n	40329a <local_twi_handler+0x232>
			/* Read last data */
			twis[twi_index].buffer[(twis[twi_index].length)-1] = twi_port->TWI_RHR;
  403230:	4a16      	ldr	r2, [pc, #88]	; (40328c <local_twi_handler+0x224>)
  403232:	687b      	ldr	r3, [r7, #4]
  403234:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  403238:	4914      	ldr	r1, [pc, #80]	; (40328c <local_twi_handler+0x224>)
  40323a:	687b      	ldr	r3, [r7, #4]
  40323c:	00db      	lsls	r3, r3, #3
  40323e:	440b      	add	r3, r1
  403240:	685b      	ldr	r3, [r3, #4]
  403242:	3b01      	subs	r3, #1
  403244:	4413      	add	r3, r2
  403246:	69ba      	ldr	r2, [r7, #24]
  403248:	6b12      	ldr	r2, [r2, #48]	; 0x30
  40324a:	b2d2      	uxtb	r2, r2
  40324c:	701a      	strb	r2, [r3, #0]
			timeout_counter = 0;
  40324e:	2300      	movs	r3, #0
  403250:	61fb      	str	r3, [r7, #28]
			/* Wait for TX complete flag before releasing semaphore */
			while (1) {
				status = twi_port->TWI_SR;
  403252:	69bb      	ldr	r3, [r7, #24]
  403254:	6a1b      	ldr	r3, [r3, #32]
  403256:	60fb      	str	r3, [r7, #12]
				if (status & TWI_SR_TXCOMP) {
  403258:	68fb      	ldr	r3, [r7, #12]
  40325a:	f003 0301 	and.w	r3, r3, #1
  40325e:	2b00      	cmp	r3, #0
  403260:	d11a      	bne.n	403298 <local_twi_handler+0x230>
					break;
				}
				/* Check timeout condition. */
				if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  403262:	69fb      	ldr	r3, [r7, #28]
  403264:	3301      	adds	r3, #1
  403266:	61fb      	str	r3, [r7, #28]
  403268:	69fb      	ldr	r3, [r7, #28]
  40326a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40326e:	d1f0      	bne.n	403252 <local_twi_handler+0x1ea>
					transfer_timeout = true;
  403270:	2301      	movs	r3, #1
  403272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
  403276:	e010      	b.n	40329a <local_twi_handler+0x232>
  403278:	0040f8d0 	.word	0x0040f8d0
  40327c:	00403b71 	.word	0x00403b71
  403280:	00403b89 	.word	0x00403b89
  403284:	00403759 	.word	0x00403759
  403288:	00403b51 	.word	0x00403b51
  40328c:	20000c38 	.word	0x20000c38
  403290:	20000c18 	.word	0x20000c18
  403294:	00405da9 	.word	0x00405da9
			timeout_counter = 0;
			/* Wait for TX complete flag before releasing semaphore */
			while (1) {
				status = twi_port->TWI_SR;
				if (status & TWI_SR_TXCOMP) {
					break;
  403298:	bf00      	nop
		}

		/* If the driver is supporting multi-threading, then return the access
		mutex.  NOTE: As the peripheral is half duplex there is only one
		access mutex, and the reception uses the tx access muted. */
		if (tx_dma_control[twi_index].peripheral_access_sem != NULL) {
  40329a:	4a33      	ldr	r2, [pc, #204]	; (403368 <local_twi_handler+0x300>)
  40329c:	687b      	ldr	r3, [r7, #4]
  40329e:	00db      	lsls	r3, r3, #3
  4032a0:	4413      	add	r3, r2
  4032a2:	685b      	ldr	r3, [r3, #4]
  4032a4:	2b00      	cmp	r3, #0
  4032a6:	d00a      	beq.n	4032be <local_twi_handler+0x256>
			xSemaphoreGiveFromISR(
  4032a8:	4a2f      	ldr	r2, [pc, #188]	; (403368 <local_twi_handler+0x300>)
  4032aa:	687b      	ldr	r3, [r7, #4]
  4032ac:	00db      	lsls	r3, r3, #3
  4032ae:	4413      	add	r3, r2
  4032b0:	6858      	ldr	r0, [r3, #4]
  4032b2:	f107 0208 	add.w	r2, r7, #8
  4032b6:	2300      	movs	r3, #0
  4032b8:	2100      	movs	r1, #0
  4032ba:	4c2c      	ldr	r4, [pc, #176]	; (40336c <local_twi_handler+0x304>)
  4032bc:	47a0      	blx	r4
					&higher_priority_task_woken);
		}

		/* if the receiving task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if  (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  4032be:	69fb      	ldr	r3, [r7, #28]
  4032c0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4032c4:	d00f      	beq.n	4032e6 <local_twi_handler+0x27e>
			if (rx_dma_control[twi_index].transaction_complete_notification_semaphore != NULL) {
  4032c6:	4a2a      	ldr	r2, [pc, #168]	; (403370 <local_twi_handler+0x308>)
  4032c8:	687b      	ldr	r3, [r7, #4]
  4032ca:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  4032ce:	2b00      	cmp	r3, #0
  4032d0:	d009      	beq.n	4032e6 <local_twi_handler+0x27e>
				xSemaphoreGiveFromISR(
  4032d2:	4a27      	ldr	r2, [pc, #156]	; (403370 <local_twi_handler+0x308>)
  4032d4:	687b      	ldr	r3, [r7, #4]
  4032d6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
  4032da:	f107 0208 	add.w	r2, r7, #8
  4032de:	2300      	movs	r3, #0
  4032e0:	2100      	movs	r1, #0
  4032e2:	4c22      	ldr	r4, [pc, #136]	; (40336c <local_twi_handler+0x304>)
  4032e4:	47a0      	blx	r4
						&higher_priority_task_woken);
			}
		}
	}

	if (((twi_status & SR_ERROR_INTERRUPTS) != 0) || (transfer_timeout == true)) {
  4032e6:	697b      	ldr	r3, [r7, #20]
  4032e8:	f403 7350 	and.w	r3, r3, #832	; 0x340
  4032ec:	2b00      	cmp	r3, #0
  4032ee:	d103      	bne.n	4032f8 <local_twi_handler+0x290>
  4032f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4032f4:	2b00      	cmp	r3, #0
  4032f6:	d02e      	beq.n	403356 <local_twi_handler+0x2ee>
		Stop the transmission, disable interrupts used by the peripheral, and
		ensure the peripheral access mutex is made available to tasks.  As this
		peripheral is half duplex, only the Tx peripheral access mutex exits.*/

		/* Stop the PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
  4032f8:	4a1e      	ldr	r2, [pc, #120]	; (403374 <local_twi_handler+0x30c>)
  4032fa:	687b      	ldr	r3, [r7, #4]
  4032fc:	011b      	lsls	r3, r3, #4
  4032fe:	4413      	add	r3, r2
  403300:	3304      	adds	r3, #4
  403302:	681b      	ldr	r3, [r3, #0]
  403304:	f240 2102 	movw	r1, #514	; 0x202
  403308:	4618      	mov	r0, r3
  40330a:	4b1b      	ldr	r3, [pc, #108]	; (403378 <local_twi_handler+0x310>)
  40330c:	4798      	blx	r3

		if (!(twi_status & TWI_SR_NACK)) {
  40330e:	697b      	ldr	r3, [r7, #20]
  403310:	f403 7380 	and.w	r3, r3, #256	; 0x100
  403314:	2b00      	cmp	r3, #0
  403316:	d102      	bne.n	40331e <local_twi_handler+0x2b6>
			/* Do not send stop if NACK received. Handled by hardware */
			twi_port->TWI_CR = TWI_CR_STOP;
  403318:	69bb      	ldr	r3, [r7, #24]
  40331a:	2202      	movs	r2, #2
  40331c:	601a      	str	r2, [r3, #0]
		}
		twi_disable_interrupt(twi_port, TWI_IDR_ENDTX);
  40331e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  403322:	69b8      	ldr	r0, [r7, #24]
  403324:	4b15      	ldr	r3, [pc, #84]	; (40337c <local_twi_handler+0x314>)
  403326:	4798      	blx	r3
		twi_disable_interrupt(twi_port, TWI_IDR_ENDRX);
  403328:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40332c:	69b8      	ldr	r0, [r7, #24]
  40332e:	4b13      	ldr	r3, [pc, #76]	; (40337c <local_twi_handler+0x314>)
  403330:	4798      	blx	r3

		if (tx_dma_control[twi_index].peripheral_access_sem != NULL) {
  403332:	4a0d      	ldr	r2, [pc, #52]	; (403368 <local_twi_handler+0x300>)
  403334:	687b      	ldr	r3, [r7, #4]
  403336:	00db      	lsls	r3, r3, #3
  403338:	4413      	add	r3, r2
  40333a:	685b      	ldr	r3, [r3, #4]
  40333c:	2b00      	cmp	r3, #0
  40333e:	d00a      	beq.n	403356 <local_twi_handler+0x2ee>
			xSemaphoreGiveFromISR(
  403340:	4a09      	ldr	r2, [pc, #36]	; (403368 <local_twi_handler+0x300>)
  403342:	687b      	ldr	r3, [r7, #4]
  403344:	00db      	lsls	r3, r3, #3
  403346:	4413      	add	r3, r2
  403348:	6858      	ldr	r0, [r3, #4]
  40334a:	f107 0208 	add.w	r2, r7, #8
  40334e:	2300      	movs	r3, #0
  403350:	2100      	movs	r1, #0
  403352:	4c06      	ldr	r4, [pc, #24]	; (40336c <local_twi_handler+0x304>)
  403354:	47a0      	blx	r4
	has a priority equal to or higher than the currently running task (the task
	this ISR interrupted), then higher_priority_task_woken will have
	automatically been set to pdTRUE within the semaphore function.
	portEND_SWITCHING_ISR() will then ensure that this ISR returns directly to
	the higher priority unblocked task. */
	portEND_SWITCHING_ISR(higher_priority_task_woken);
  403356:	68bb      	ldr	r3, [r7, #8]
  403358:	2b00      	cmp	r3, #0
  40335a:	d001      	beq.n	403360 <local_twi_handler+0x2f8>
  40335c:	4b08      	ldr	r3, [pc, #32]	; (403380 <local_twi_handler+0x318>)
  40335e:	4798      	blx	r3
}
  403360:	bf00      	nop
  403362:	372c      	adds	r7, #44	; 0x2c
  403364:	46bd      	mov	sp, r7
  403366:	bd90      	pop	{r4, r7, pc}
  403368:	20000c18 	.word	0x20000c18
  40336c:	00405da9 	.word	0x00405da9
  403370:	20000c28 	.word	0x20000c28
  403374:	0040f8d0 	.word	0x0040f8d0
  403378:	00403759 	.word	0x00403759
  40337c:	00403b51 	.word	0x00403b51
  403380:	00405729 	.word	0x00405729

00403384 <TWI0_Handler>:
#endif /* TWI */

#ifdef TWI0

void TWI0_Handler(void)
{
  403384:	b580      	push	{r7, lr}
  403386:	af00      	add	r7, sp, #0
	local_twi_handler(0);
  403388:	2000      	movs	r0, #0
  40338a:	4b02      	ldr	r3, [pc, #8]	; (403394 <TWI0_Handler+0x10>)
  40338c:	4798      	blx	r3
}
  40338e:	bf00      	nop
  403390:	bd80      	pop	{r7, pc}
  403392:	bf00      	nop
  403394:	00403069 	.word	0x00403069

00403398 <TWI1_Handler>:
#endif

#ifdef TWI1

void TWI1_Handler(void)
{
  403398:	b580      	push	{r7, lr}
  40339a:	af00      	add	r7, sp, #0
	local_twi_handler(1);
  40339c:	2001      	movs	r0, #1
  40339e:	4b02      	ldr	r3, [pc, #8]	; (4033a8 <TWI1_Handler+0x10>)
  4033a0:	4798      	blx	r3
}
  4033a2:	bf00      	nop
  4033a4:	bd80      	pop	{r7, pc}
  4033a6:	bf00      	nop
  4033a8:	00403069 	.word	0x00403069

004033ac <configure_rx_dma>:
 * For internal use only.
 * Configures the Rx DMA to receive data into free space within the Rx buffer.
 */
static void configure_rx_dma(uint32_t usart_index,
		enum buffer_operations operation_performed)
{
  4033ac:	b580      	push	{r7, lr}
  4033ae:	b084      	sub	sp, #16
  4033b0:	af00      	add	r7, sp, #0
  4033b2:	6078      	str	r0, [r7, #4]
  4033b4:	460b      	mov	r3, r1
  4033b6:	70fb      	strb	r3, [r7, #3]
	freertos_pdc_rx_control_t *rx_buffer_definition;

	rx_buffer_definition = &(rx_buffer_definitions[usart_index]);
  4033b8:	687a      	ldr	r2, [r7, #4]
  4033ba:	4613      	mov	r3, r2
  4033bc:	00db      	lsls	r3, r3, #3
  4033be:	1a9b      	subs	r3, r3, r2
  4033c0:	009b      	lsls	r3, r3, #2
  4033c2:	4a38      	ldr	r2, [pc, #224]	; (4034a4 <configure_rx_dma+0xf8>)
  4033c4:	4413      	add	r3, r2
  4033c6:	60fb      	str	r3, [r7, #12]

	/* How much space is there between the start of the DMA buffer and the
	current read pointer?  */

	if (((uint32_t)rx_buffer_definition->next_byte_to_read) ==
  4033c8:	68fb      	ldr	r3, [r7, #12]
  4033ca:	699b      	ldr	r3, [r3, #24]
  4033cc:	461a      	mov	r2, r3
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
  4033ce:	68fb      	ldr	r3, [r7, #12]
  4033d0:	689b      	ldr	r3, [r3, #8]
	rx_buffer_definition = &(rx_buffer_definitions[usart_index]);

	/* How much space is there between the start of the DMA buffer and the
	current read pointer?  */

	if (((uint32_t)rx_buffer_definition->next_byte_to_read) ==
  4033d2:	429a      	cmp	r2, r3
  4033d4:	d10e      	bne.n	4033f4 <configure_rx_dma+0x48>
		/* The read pointer and the write pointer are equal.  If this function
		was called because data was added to the buffer, then there is no free
		space in the buffer remaining.  If this function was called because data
		was removed from the buffer, then the space remaining is from the write
		pointer up to the end of the buffer. */
		if (operation_performed == data_added) {
  4033d6:	78fb      	ldrb	r3, [r7, #3]
  4033d8:	2b00      	cmp	r3, #0
  4033da:	d103      	bne.n	4033e4 <configure_rx_dma+0x38>
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
  4033dc:	68fb      	ldr	r3, [r7, #12]
  4033de:	2200      	movs	r2, #0
  4033e0:	60da      	str	r2, [r3, #12]
  4033e2:	e01e      	b.n	403422 <configure_rx_dma+0x76>
		} else {
			rx_buffer_definition->rx_pdc_parameters.ul_size =
				rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
  4033e4:	68fb      	ldr	r3, [r7, #12]
  4033e6:	685a      	ldr	r2, [r3, #4]
  4033e8:	68fb      	ldr	r3, [r7, #12]
  4033ea:	689b      	ldr	r3, [r3, #8]
  4033ec:	1ad2      	subs	r2, r2, r3
		was removed from the buffer, then the space remaining is from the write
		pointer up to the end of the buffer. */
		if (operation_performed == data_added) {
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
		} else {
			rx_buffer_definition->rx_pdc_parameters.ul_size =
  4033ee:	68fb      	ldr	r3, [r7, #12]
  4033f0:	60da      	str	r2, [r3, #12]
  4033f2:	e016      	b.n	403422 <configure_rx_dma+0x76>
				rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
		}
	} else if (((uint32_t)rx_buffer_definition->next_byte_to_read) >
  4033f4:	68fb      	ldr	r3, [r7, #12]
  4033f6:	699b      	ldr	r3, [r3, #24]
  4033f8:	461a      	mov	r2, r3
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
  4033fa:	68fb      	ldr	r3, [r7, #12]
  4033fc:	689b      	ldr	r3, [r3, #8]
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
		} else {
			rx_buffer_definition->rx_pdc_parameters.ul_size =
				rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
		}
	} else if (((uint32_t)rx_buffer_definition->next_byte_to_read) >
  4033fe:	429a      	cmp	r2, r3
  403400:	d908      	bls.n	403414 <configure_rx_dma+0x68>
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
		/* The read pointer is ahead of the write pointer.  The space available
		is up to the write pointer to ensure unread data is not overwritten. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
			((uint32_t) rx_buffer_definition->next_byte_to_read) - rx_buffer_definition->rx_pdc_parameters.ul_addr;
  403402:	68fb      	ldr	r3, [r7, #12]
  403404:	699b      	ldr	r3, [r3, #24]
  403406:	461a      	mov	r2, r3
  403408:	68fb      	ldr	r3, [r7, #12]
  40340a:	689b      	ldr	r3, [r3, #8]
  40340c:	1ad2      	subs	r2, r2, r3
		}
	} else if (((uint32_t)rx_buffer_definition->next_byte_to_read) >
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
		/* The read pointer is ahead of the write pointer.  The space available
		is up to the write pointer to ensure unread data is not overwritten. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
  40340e:	68fb      	ldr	r3, [r7, #12]
  403410:	60da      	str	r2, [r3, #12]
  403412:	e006      	b.n	403422 <configure_rx_dma+0x76>
			((uint32_t) rx_buffer_definition->next_byte_to_read) - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	} else {
		/* The write pointer is ahead of the read pointer so the space
		available is up to the end of the buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
			rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
  403414:	68fb      	ldr	r3, [r7, #12]
  403416:	685a      	ldr	r2, [r3, #4]
  403418:	68fb      	ldr	r3, [r7, #12]
  40341a:	689b      	ldr	r3, [r3, #8]
  40341c:	1ad2      	subs	r2, r2, r3
		rx_buffer_definition->rx_pdc_parameters.ul_size =
			((uint32_t) rx_buffer_definition->next_byte_to_read) - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	} else {
		/* The write pointer is ahead of the read pointer so the space
		available is up to the end of the buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
  40341e:	68fb      	ldr	r3, [r7, #12]
  403420:	60da      	str	r2, [r3, #12]
			rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	}

	configASSERT((rx_buffer_definition->rx_pdc_parameters.ul_addr +
  403422:	68fb      	ldr	r3, [r7, #12]
  403424:	689a      	ldr	r2, [r3, #8]
  403426:	68fb      	ldr	r3, [r7, #12]
  403428:	68db      	ldr	r3, [r3, #12]
  40342a:	441a      	add	r2, r3
  40342c:	68fb      	ldr	r3, [r7, #12]
  40342e:	685b      	ldr	r3, [r3, #4]
  403430:	429a      	cmp	r2, r3
  403432:	d903      	bls.n	40343c <configure_rx_dma+0x90>
  403434:	4b1c      	ldr	r3, [pc, #112]	; (4034a8 <configure_rx_dma+0xfc>)
  403436:	4798      	blx	r3
  403438:	bf00      	nop
  40343a:	e7fd      	b.n	403438 <configure_rx_dma+0x8c>
			rx_buffer_definition->rx_pdc_parameters.ul_size) <=
			rx_buffer_definition->past_rx_buffer_end_address);

	if (rx_buffer_definition->rx_pdc_parameters.ul_size > 0) {
  40343c:	68fb      	ldr	r3, [r7, #12]
  40343e:	68db      	ldr	r3, [r3, #12]
  403440:	2b00      	cmp	r3, #0
  403442:	d020      	beq.n	403486 <configure_rx_dma+0xda>
		/* Restart the DMA to receive into whichever space was calculated
		as remaining.  First clear any characters that might already be in the
		registers. */
		pdc_rx_init(
  403444:	4a19      	ldr	r2, [pc, #100]	; (4034ac <configure_rx_dma+0x100>)
  403446:	687b      	ldr	r3, [r7, #4]
  403448:	011b      	lsls	r3, r3, #4
  40344a:	4413      	add	r3, r2
  40344c:	3304      	adds	r3, #4
  40344e:	6818      	ldr	r0, [r3, #0]
  403450:	68fb      	ldr	r3, [r7, #12]
  403452:	3308      	adds	r3, #8
  403454:	2200      	movs	r2, #0
  403456:	4619      	mov	r1, r3
  403458:	4b15      	ldr	r3, [pc, #84]	; (4034b0 <configure_rx_dma+0x104>)
  40345a:	4798      	blx	r3
				all_usart_definitions[usart_index].pdc_base_address, &rx_buffer_definition->rx_pdc_parameters,
				NULL);
		pdc_enable_transfer(
  40345c:	4a13      	ldr	r2, [pc, #76]	; (4034ac <configure_rx_dma+0x100>)
  40345e:	687b      	ldr	r3, [r7, #4]
  403460:	011b      	lsls	r3, r3, #4
  403462:	4413      	add	r3, r2
  403464:	3304      	adds	r3, #4
  403466:	681b      	ldr	r3, [r3, #0]
  403468:	2101      	movs	r1, #1
  40346a:	4618      	mov	r0, r3
  40346c:	4b11      	ldr	r3, [pc, #68]	; (4034b4 <configure_rx_dma+0x108>)
  40346e:	4798      	blx	r3
				all_usart_definitions[usart_index].pdc_base_address,
				PERIPH_PTCR_RXTEN);
		usart_enable_interrupt(
				all_usart_definitions[usart_index].peripheral_base_address, US_IER_ENDRX |
  403470:	4a0e      	ldr	r2, [pc, #56]	; (4034ac <configure_rx_dma+0x100>)
  403472:	687b      	ldr	r3, [r7, #4]
  403474:	011b      	lsls	r3, r3, #4
  403476:	4413      	add	r3, r2
  403478:	681b      	ldr	r3, [r3, #0]
				all_usart_definitions[usart_index].pdc_base_address, &rx_buffer_definition->rx_pdc_parameters,
				NULL);
		pdc_enable_transfer(
				all_usart_definitions[usart_index].pdc_base_address,
				PERIPH_PTCR_RXTEN);
		usart_enable_interrupt(
  40347a:	f44f 7184 	mov.w	r1, #264	; 0x108
  40347e:	4618      	mov	r0, r3
  403480:	4b0d      	ldr	r3, [pc, #52]	; (4034b8 <configure_rx_dma+0x10c>)
  403482:	4798      	blx	r3
		space. */
		usart_disable_interrupt(
				all_usart_definitions[usart_index].peripheral_base_address, US_IER_ENDRX |
				US_IER_TIMEOUT);
	}
}
  403484:	e009      	b.n	40349a <configure_rx_dma+0xee>
	} else {
		/* The write pointer has reached the read pointer.  There is no
		more room so the DMA is not re-enabled until a read has created
		space. */
		usart_disable_interrupt(
				all_usart_definitions[usart_index].peripheral_base_address, US_IER_ENDRX |
  403486:	4a09      	ldr	r2, [pc, #36]	; (4034ac <configure_rx_dma+0x100>)
  403488:	687b      	ldr	r3, [r7, #4]
  40348a:	011b      	lsls	r3, r3, #4
  40348c:	4413      	add	r3, r2
  40348e:	681b      	ldr	r3, [r3, #0]
				US_IER_TIMEOUT);
	} else {
		/* The write pointer has reached the read pointer.  There is no
		more room so the DMA is not re-enabled until a read has created
		space. */
		usart_disable_interrupt(
  403490:	f44f 7184 	mov.w	r1, #264	; 0x108
  403494:	4618      	mov	r0, r3
  403496:	4b09      	ldr	r3, [pc, #36]	; (4034bc <configure_rx_dma+0x110>)
  403498:	4798      	blx	r3
				all_usart_definitions[usart_index].peripheral_base_address, US_IER_ENDRX |
				US_IER_TIMEOUT);
	}
}
  40349a:	bf00      	nop
  40349c:	3710      	adds	r7, #16
  40349e:	46bd      	mov	sp, r7
  4034a0:	bd80      	pop	{r7, pc}
  4034a2:	bf00      	nop
  4034a4:	20000c48 	.word	0x20000c48
  4034a8:	00405789 	.word	0x00405789
  4034ac:	0040f8f0 	.word	0x0040f8f0
  4034b0:	004036f5 	.word	0x004036f5
  4034b4:	00403739 	.word	0x00403739
  4034b8:	00403edd 	.word	0x00403edd
  4034bc:	00403ef9 	.word	0x00403ef9

004034c0 <local_usart_handler>:
/*
 * For internal use only.
 * A common USART interrupt handler that is called for all USART peripherals.
 */
static void local_usart_handler(const portBASE_TYPE usart_index)
{
  4034c0:	b590      	push	{r4, r7, lr}
  4034c2:	b087      	sub	sp, #28
  4034c4:	af00      	add	r7, sp, #0
  4034c6:	6078      	str	r0, [r7, #4]
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
  4034c8:	2300      	movs	r3, #0
  4034ca:	60fb      	str	r3, [r7, #12]
	uint32_t usart_status;
	freertos_pdc_rx_control_t *rx_buffer_definition;

	usart_status = usart_get_status(
			all_usart_definitions[usart_index].peripheral_base_address);
  4034cc:	4a62      	ldr	r2, [pc, #392]	; (403658 <local_usart_handler+0x198>)
  4034ce:	687b      	ldr	r3, [r7, #4]
  4034d0:	011b      	lsls	r3, r3, #4
  4034d2:	4413      	add	r3, r2
  4034d4:	681b      	ldr	r3, [r3, #0]
{
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
	uint32_t usart_status;
	freertos_pdc_rx_control_t *rx_buffer_definition;

	usart_status = usart_get_status(
  4034d6:	4618      	mov	r0, r3
  4034d8:	4b60      	ldr	r3, [pc, #384]	; (40365c <local_usart_handler+0x19c>)
  4034da:	4798      	blx	r3
  4034dc:	6178      	str	r0, [r7, #20]
			all_usart_definitions[usart_index].peripheral_base_address);
	usart_status &= usart_get_interrupt_mask(
			all_usart_definitions[usart_index].peripheral_base_address);
  4034de:	4a5e      	ldr	r2, [pc, #376]	; (403658 <local_usart_handler+0x198>)
  4034e0:	687b      	ldr	r3, [r7, #4]
  4034e2:	011b      	lsls	r3, r3, #4
  4034e4:	4413      	add	r3, r2
  4034e6:	681b      	ldr	r3, [r3, #0]
	uint32_t usart_status;
	freertos_pdc_rx_control_t *rx_buffer_definition;

	usart_status = usart_get_status(
			all_usart_definitions[usart_index].peripheral_base_address);
	usart_status &= usart_get_interrupt_mask(
  4034e8:	4618      	mov	r0, r3
  4034ea:	4b5d      	ldr	r3, [pc, #372]	; (403660 <local_usart_handler+0x1a0>)
  4034ec:	4798      	blx	r3
  4034ee:	4602      	mov	r2, r0
  4034f0:	697b      	ldr	r3, [r7, #20]
  4034f2:	4013      	ands	r3, r2
  4034f4:	617b      	str	r3, [r7, #20]
			all_usart_definitions[usart_index].peripheral_base_address);

	rx_buffer_definition = &(rx_buffer_definitions[usart_index]);
  4034f6:	687a      	ldr	r2, [r7, #4]
  4034f8:	4613      	mov	r3, r2
  4034fa:	00db      	lsls	r3, r3, #3
  4034fc:	1a9b      	subs	r3, r3, r2
  4034fe:	009b      	lsls	r3, r3, #2
  403500:	4a58      	ldr	r2, [pc, #352]	; (403664 <local_usart_handler+0x1a4>)
  403502:	4413      	add	r3, r2
  403504:	613b      	str	r3, [r7, #16]

	/* Has the PDC completed a transmission? */
	if ((usart_status & US_CSR_ENDTX) != 0UL) {
  403506:	697b      	ldr	r3, [r7, #20]
  403508:	f003 0310 	and.w	r3, r3, #16
  40350c:	2b00      	cmp	r3, #0
  40350e:	d02a      	beq.n	403566 <local_usart_handler+0xa6>
		usart_disable_interrupt(
				all_usart_definitions[usart_index].peripheral_base_address,
  403510:	4a51      	ldr	r2, [pc, #324]	; (403658 <local_usart_handler+0x198>)
  403512:	687b      	ldr	r3, [r7, #4]
  403514:	011b      	lsls	r3, r3, #4
  403516:	4413      	add	r3, r2
  403518:	681b      	ldr	r3, [r3, #0]

	rx_buffer_definition = &(rx_buffer_definitions[usart_index]);

	/* Has the PDC completed a transmission? */
	if ((usart_status & US_CSR_ENDTX) != 0UL) {
		usart_disable_interrupt(
  40351a:	2110      	movs	r1, #16
  40351c:	4618      	mov	r0, r3
  40351e:	4b52      	ldr	r3, [pc, #328]	; (403668 <local_usart_handler+0x1a8>)
  403520:	4798      	blx	r3
				all_usart_definitions[usart_index].peripheral_base_address,
				US_IER_ENDTX);

		/* If the driver is supporting multi-threading, then return the access
		mutex. */
		if (tx_dma_control[usart_index].peripheral_access_sem != NULL) {
  403522:	4a52      	ldr	r2, [pc, #328]	; (40366c <local_usart_handler+0x1ac>)
  403524:	687b      	ldr	r3, [r7, #4]
  403526:	00db      	lsls	r3, r3, #3
  403528:	4413      	add	r3, r2
  40352a:	685b      	ldr	r3, [r3, #4]
  40352c:	2b00      	cmp	r3, #0
  40352e:	d00a      	beq.n	403546 <local_usart_handler+0x86>
			xSemaphoreGiveFromISR(
  403530:	4a4e      	ldr	r2, [pc, #312]	; (40366c <local_usart_handler+0x1ac>)
  403532:	687b      	ldr	r3, [r7, #4]
  403534:	00db      	lsls	r3, r3, #3
  403536:	4413      	add	r3, r2
  403538:	6858      	ldr	r0, [r3, #4]
  40353a:	f107 020c 	add.w	r2, r7, #12
  40353e:	2300      	movs	r3, #0
  403540:	2100      	movs	r1, #0
  403542:	4c4b      	ldr	r4, [pc, #300]	; (403670 <local_usart_handler+0x1b0>)
  403544:	47a0      	blx	r4
					&higher_priority_task_woken);
		}

		/* if the sending task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if (tx_dma_control[usart_index].transaction_complete_notification_semaphore != NULL) {
  403546:	4a49      	ldr	r2, [pc, #292]	; (40366c <local_usart_handler+0x1ac>)
  403548:	687b      	ldr	r3, [r7, #4]
  40354a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  40354e:	2b00      	cmp	r3, #0
  403550:	d009      	beq.n	403566 <local_usart_handler+0xa6>
			xSemaphoreGiveFromISR(
  403552:	4a46      	ldr	r2, [pc, #280]	; (40366c <local_usart_handler+0x1ac>)
  403554:	687b      	ldr	r3, [r7, #4]
  403556:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
  40355a:	f107 020c 	add.w	r2, r7, #12
  40355e:	2300      	movs	r3, #0
  403560:	2100      	movs	r1, #0
  403562:	4c43      	ldr	r4, [pc, #268]	; (403670 <local_usart_handler+0x1b0>)
  403564:	47a0      	blx	r4
					tx_dma_control[usart_index].transaction_complete_notification_semaphore,
					&higher_priority_task_woken);
		}
	}

	if ((usart_status & US_CSR_ENDRX) != 0UL) {
  403566:	697b      	ldr	r3, [r7, #20]
  403568:	f003 0308 	and.w	r3, r3, #8
  40356c:	2b00      	cmp	r3, #0
  40356e:	d031      	beq.n	4035d4 <local_usart_handler+0x114>
		/* It is possible to initialise the peripheral to only use Tx and not Rx.
		Check that Rx has been initialised. */
		configASSERT(rx_buffer_definition->next_byte_to_read);
  403570:	693b      	ldr	r3, [r7, #16]
  403572:	699b      	ldr	r3, [r3, #24]
  403574:	2b00      	cmp	r3, #0
  403576:	d103      	bne.n	403580 <local_usart_handler+0xc0>
  403578:	4b3e      	ldr	r3, [pc, #248]	; (403674 <local_usart_handler+0x1b4>)
  40357a:	4798      	blx	r3
  40357c:	bf00      	nop
  40357e:	e7fd      	b.n	40357c <local_usart_handler+0xbc>
		configASSERT(rx_buffer_definition->next_byte_to_read !=
  403580:	693b      	ldr	r3, [r7, #16]
  403582:	699b      	ldr	r3, [r3, #24]
  403584:	2b01      	cmp	r3, #1
  403586:	d103      	bne.n	403590 <local_usart_handler+0xd0>
  403588:	4b3a      	ldr	r3, [pc, #232]	; (403674 <local_usart_handler+0x1b4>)
  40358a:	4798      	blx	r3
  40358c:	bf00      	nop
  40358e:	e7fd      	b.n	40358c <local_usart_handler+0xcc>
				RX_NOT_USED);

		/* Out of DMA buffer, configure the next buffer.  Start by moving
		the DMA buffer start address up to the end of the previously defined
		buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_addr +=
  403590:	693b      	ldr	r3, [r7, #16]
  403592:	689a      	ldr	r2, [r3, #8]
				rx_buffer_definition->rx_pdc_parameters.ul_size;
  403594:	693b      	ldr	r3, [r7, #16]
  403596:	68db      	ldr	r3, [r3, #12]
				RX_NOT_USED);

		/* Out of DMA buffer, configure the next buffer.  Start by moving
		the DMA buffer start address up to the end of the previously defined
		buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_addr +=
  403598:	441a      	add	r2, r3
  40359a:	693b      	ldr	r3, [r7, #16]
  40359c:	609a      	str	r2, [r3, #8]
				rx_buffer_definition->rx_pdc_parameters.ul_size;

		/* If the end of the buffer has been reached, wrap back to the start. */
		if (rx_buffer_definition->rx_pdc_parameters.ul_addr >=
  40359e:	693b      	ldr	r3, [r7, #16]
  4035a0:	689a      	ldr	r2, [r3, #8]
				rx_buffer_definition->past_rx_buffer_end_address)
  4035a2:	693b      	ldr	r3, [r7, #16]
  4035a4:	685b      	ldr	r3, [r3, #4]
		buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_addr +=
				rx_buffer_definition->rx_pdc_parameters.ul_size;

		/* If the end of the buffer has been reached, wrap back to the start. */
		if (rx_buffer_definition->rx_pdc_parameters.ul_addr >=
  4035a6:	429a      	cmp	r2, r3
  4035a8:	d303      	bcc.n	4035b2 <local_usart_handler+0xf2>
				rx_buffer_definition->past_rx_buffer_end_address)
		{
			rx_buffer_definition->rx_pdc_parameters.ul_addr =
					rx_buffer_definition->rx_buffer_start_address;
  4035aa:	693b      	ldr	r3, [r7, #16]
  4035ac:	681a      	ldr	r2, [r3, #0]

		/* If the end of the buffer has been reached, wrap back to the start. */
		if (rx_buffer_definition->rx_pdc_parameters.ul_addr >=
				rx_buffer_definition->past_rx_buffer_end_address)
		{
			rx_buffer_definition->rx_pdc_parameters.ul_addr =
  4035ae:	693b      	ldr	r3, [r7, #16]
  4035b0:	609a      	str	r2, [r3, #8]
					rx_buffer_definition->rx_buffer_start_address;
		}

		/* Reset the Rx DMA to receive data into whatever free space remains in
		the Rx buffer. */
		configure_rx_dma(usart_index, data_added);
  4035b2:	687b      	ldr	r3, [r7, #4]
  4035b4:	2100      	movs	r1, #0
  4035b6:	4618      	mov	r0, r3
  4035b8:	4b2f      	ldr	r3, [pc, #188]	; (403678 <local_usart_handler+0x1b8>)
  4035ba:	4798      	blx	r3

		if (rx_buffer_definition->rx_event_semaphore != NULL) {
  4035bc:	693b      	ldr	r3, [r7, #16]
  4035be:	691b      	ldr	r3, [r3, #16]
  4035c0:	2b00      	cmp	r3, #0
  4035c2:	d007      	beq.n	4035d4 <local_usart_handler+0x114>
			/* Notify that new data is available. */
			xSemaphoreGiveFromISR(
  4035c4:	693b      	ldr	r3, [r7, #16]
  4035c6:	6918      	ldr	r0, [r3, #16]
  4035c8:	f107 020c 	add.w	r2, r7, #12
  4035cc:	2300      	movs	r3, #0
  4035ce:	2100      	movs	r1, #0
  4035d0:	4c27      	ldr	r4, [pc, #156]	; (403670 <local_usart_handler+0x1b0>)
  4035d2:	47a0      	blx	r4
					rx_buffer_definition->rx_event_semaphore,
					&higher_priority_task_woken);
		}
	}

	if ((usart_status & US_IER_TIMEOUT) != 0UL) {
  4035d4:	697b      	ldr	r3, [r7, #20]
  4035d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4035da:	2b00      	cmp	r3, #0
  4035dc:	d013      	beq.n	403606 <local_usart_handler+0x146>
		/* More characters have been placed into the Rx buffer.

		Restart the timeout after more data has been received. */
		usart_start_rx_timeout(all_usart_definitions[usart_index].peripheral_base_address);
  4035de:	4a1e      	ldr	r2, [pc, #120]	; (403658 <local_usart_handler+0x198>)
  4035e0:	687b      	ldr	r3, [r7, #4]
  4035e2:	011b      	lsls	r3, r3, #4
  4035e4:	4413      	add	r3, r2
  4035e6:	681b      	ldr	r3, [r3, #0]
  4035e8:	4618      	mov	r0, r3
  4035ea:	4b24      	ldr	r3, [pc, #144]	; (40367c <local_usart_handler+0x1bc>)
  4035ec:	4798      	blx	r3

		if (rx_buffer_definition->rx_event_semaphore != NULL) {
  4035ee:	693b      	ldr	r3, [r7, #16]
  4035f0:	691b      	ldr	r3, [r3, #16]
  4035f2:	2b00      	cmp	r3, #0
  4035f4:	d007      	beq.n	403606 <local_usart_handler+0x146>
			/* Notify that new data is available. */
			xSemaphoreGiveFromISR(
  4035f6:	693b      	ldr	r3, [r7, #16]
  4035f8:	6918      	ldr	r0, [r3, #16]
  4035fa:	f107 020c 	add.w	r2, r7, #12
  4035fe:	2300      	movs	r3, #0
  403600:	2100      	movs	r1, #0
  403602:	4c1b      	ldr	r4, [pc, #108]	; (403670 <local_usart_handler+0x1b0>)
  403604:	47a0      	blx	r4
					rx_buffer_definition->rx_event_semaphore,
					&higher_priority_task_woken);
		}
	}

	if ((usart_status & SR_ERROR_INTERRUPTS) != 0) {
  403606:	697b      	ldr	r3, [r7, #20]
  403608:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
  40360c:	2b00      	cmp	r3, #0
  40360e:	d019      	beq.n	403644 <local_usart_handler+0x184>
		/* An error occurred in either a transmission or reception.  Abort, and
		ensure the peripheral access mutex is made available to tasks. */
		usart_reset_status(
				all_usart_definitions[usart_index].peripheral_base_address);
  403610:	4a11      	ldr	r2, [pc, #68]	; (403658 <local_usart_handler+0x198>)
  403612:	687b      	ldr	r3, [r7, #4]
  403614:	011b      	lsls	r3, r3, #4
  403616:	4413      	add	r3, r2
  403618:	681b      	ldr	r3, [r3, #0]
	}

	if ((usart_status & SR_ERROR_INTERRUPTS) != 0) {
		/* An error occurred in either a transmission or reception.  Abort, and
		ensure the peripheral access mutex is made available to tasks. */
		usart_reset_status(
  40361a:	4618      	mov	r0, r3
  40361c:	4b18      	ldr	r3, [pc, #96]	; (403680 <local_usart_handler+0x1c0>)
  40361e:	4798      	blx	r3
				all_usart_definitions[usart_index].peripheral_base_address);
		if (tx_dma_control[usart_index].peripheral_access_sem != NULL) {
  403620:	4a12      	ldr	r2, [pc, #72]	; (40366c <local_usart_handler+0x1ac>)
  403622:	687b      	ldr	r3, [r7, #4]
  403624:	00db      	lsls	r3, r3, #3
  403626:	4413      	add	r3, r2
  403628:	685b      	ldr	r3, [r3, #4]
  40362a:	2b00      	cmp	r3, #0
  40362c:	d00a      	beq.n	403644 <local_usart_handler+0x184>
			xSemaphoreGiveFromISR(
  40362e:	4a0f      	ldr	r2, [pc, #60]	; (40366c <local_usart_handler+0x1ac>)
  403630:	687b      	ldr	r3, [r7, #4]
  403632:	00db      	lsls	r3, r3, #3
  403634:	4413      	add	r3, r2
  403636:	6858      	ldr	r0, [r3, #4]
  403638:	f107 020c 	add.w	r2, r7, #12
  40363c:	2300      	movs	r3, #0
  40363e:	2100      	movs	r1, #0
  403640:	4c0b      	ldr	r4, [pc, #44]	; (403670 <local_usart_handler+0x1b0>)
  403642:	47a0      	blx	r4
	has a priority equal to or higher than the currently running task (the task
	this ISR interrupted), then higher_priority_task_woken will have
	automatically been set to pdTRUE within the semaphore function.
	portEND_SWITCHING_ISR() will then ensure that this ISR returns directly to
	the higher priority unblocked task. */
	portEND_SWITCHING_ISR(higher_priority_task_woken);
  403644:	68fb      	ldr	r3, [r7, #12]
  403646:	2b00      	cmp	r3, #0
  403648:	d001      	beq.n	40364e <local_usart_handler+0x18e>
  40364a:	4b0e      	ldr	r3, [pc, #56]	; (403684 <local_usart_handler+0x1c4>)
  40364c:	4798      	blx	r3
}
  40364e:	bf00      	nop
  403650:	371c      	adds	r7, #28
  403652:	46bd      	mov	sp, r7
  403654:	bd90      	pop	{r4, r7, pc}
  403656:	bf00      	nop
  403658:	0040f8f0 	.word	0x0040f8f0
  40365c:	00403f2d 	.word	0x00403f2d
  403660:	00403f15 	.word	0x00403f15
  403664:	20000c48 	.word	0x20000c48
  403668:	00403ef9 	.word	0x00403ef9
  40366c:	20000c80 	.word	0x20000c80
  403670:	00405da9 	.word	0x00405da9
  403674:	00405789 	.word	0x00405789
  403678:	004033ad 	.word	0x004033ad
  40367c:	00403f61 	.word	0x00403f61
  403680:	00403f45 	.word	0x00403f45
  403684:	00405729 	.word	0x00405729

00403688 <USART0_Handler>:
#endif /* USART */

#ifdef USART0

void USART0_Handler(void)
{
  403688:	b580      	push	{r7, lr}
  40368a:	af00      	add	r7, sp, #0
	local_usart_handler(0);
  40368c:	2000      	movs	r0, #0
  40368e:	4b02      	ldr	r3, [pc, #8]	; (403698 <USART0_Handler+0x10>)
  403690:	4798      	blx	r3
}
  403692:	bf00      	nop
  403694:	bd80      	pop	{r7, pc}
  403696:	bf00      	nop
  403698:	004034c1 	.word	0x004034c1

0040369c <USART1_Handler>:
#endif /* USART0 */

#ifdef USART1

void USART1_Handler(void)
{
  40369c:	b580      	push	{r7, lr}
  40369e:	af00      	add	r7, sp, #0
	local_usart_handler(1);
  4036a0:	2001      	movs	r0, #1
  4036a2:	4b02      	ldr	r3, [pc, #8]	; (4036ac <USART1_Handler+0x10>)
  4036a4:	4798      	blx	r3
}
  4036a6:	bf00      	nop
  4036a8:	bd80      	pop	{r7, pc}
  4036aa:	bf00      	nop
  4036ac:	004034c1 	.word	0x004034c1

004036b0 <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  4036b0:	b480      	push	{r7}
  4036b2:	b085      	sub	sp, #20
  4036b4:	af00      	add	r7, sp, #0
  4036b6:	60f8      	str	r0, [r7, #12]
  4036b8:	60b9      	str	r1, [r7, #8]
  4036ba:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  4036bc:	68bb      	ldr	r3, [r7, #8]
  4036be:	2b00      	cmp	r3, #0
  4036c0:	d007      	beq.n	4036d2 <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
  4036c2:	68bb      	ldr	r3, [r7, #8]
  4036c4:	681a      	ldr	r2, [r3, #0]
  4036c6:	68fb      	ldr	r3, [r7, #12]
  4036c8:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  4036ca:	68bb      	ldr	r3, [r7, #8]
  4036cc:	685a      	ldr	r2, [r3, #4]
  4036ce:	68fb      	ldr	r3, [r7, #12]
  4036d0:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
  4036d2:	687b      	ldr	r3, [r7, #4]
  4036d4:	2b00      	cmp	r3, #0
  4036d6:	d007      	beq.n	4036e8 <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  4036d8:	687b      	ldr	r3, [r7, #4]
  4036da:	681a      	ldr	r2, [r3, #0]
  4036dc:	68fb      	ldr	r3, [r7, #12]
  4036de:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  4036e0:	687b      	ldr	r3, [r7, #4]
  4036e2:	685a      	ldr	r2, [r3, #4]
  4036e4:	68fb      	ldr	r3, [r7, #12]
  4036e6:	61da      	str	r2, [r3, #28]
	}
}
  4036e8:	bf00      	nop
  4036ea:	3714      	adds	r7, #20
  4036ec:	46bd      	mov	sp, r7
  4036ee:	bc80      	pop	{r7}
  4036f0:	4770      	bx	lr
  4036f2:	bf00      	nop

004036f4 <pdc_rx_init>:
 */
void pdc_rx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  4036f4:	b480      	push	{r7}
  4036f6:	b085      	sub	sp, #20
  4036f8:	af00      	add	r7, sp, #0
  4036fa:	60f8      	str	r0, [r7, #12]
  4036fc:	60b9      	str	r1, [r7, #8]
  4036fe:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  403700:	68bb      	ldr	r3, [r7, #8]
  403702:	2b00      	cmp	r3, #0
  403704:	d007      	beq.n	403716 <pdc_rx_init+0x22>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  403706:	68bb      	ldr	r3, [r7, #8]
  403708:	681a      	ldr	r2, [r3, #0]
  40370a:	68fb      	ldr	r3, [r7, #12]
  40370c:	601a      	str	r2, [r3, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  40370e:	68bb      	ldr	r3, [r7, #8]
  403710:	685a      	ldr	r2, [r3, #4]
  403712:	68fb      	ldr	r3, [r7, #12]
  403714:	605a      	str	r2, [r3, #4]
	}
	if (p_next_packet) {
  403716:	687b      	ldr	r3, [r7, #4]
  403718:	2b00      	cmp	r3, #0
  40371a:	d007      	beq.n	40372c <pdc_rx_init+0x38>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  40371c:	687b      	ldr	r3, [r7, #4]
  40371e:	681a      	ldr	r2, [r3, #0]
  403720:	68fb      	ldr	r3, [r7, #12]
  403722:	611a      	str	r2, [r3, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  403724:	687b      	ldr	r3, [r7, #4]
  403726:	685a      	ldr	r2, [r3, #4]
  403728:	68fb      	ldr	r3, [r7, #12]
  40372a:	615a      	str	r2, [r3, #20]
	}
}
  40372c:	bf00      	nop
  40372e:	3714      	adds	r7, #20
  403730:	46bd      	mov	sp, r7
  403732:	bc80      	pop	{r7}
  403734:	4770      	bx	lr
  403736:	bf00      	nop

00403738 <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  403738:	b480      	push	{r7}
  40373a:	b083      	sub	sp, #12
  40373c:	af00      	add	r7, sp, #0
  40373e:	6078      	str	r0, [r7, #4]
  403740:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  403742:	683a      	ldr	r2, [r7, #0]
  403744:	f240 1301 	movw	r3, #257	; 0x101
  403748:	4013      	ands	r3, r2
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  40374a:	687a      	ldr	r2, [r7, #4]
  40374c:	6213      	str	r3, [r2, #32]
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
}
  40374e:	bf00      	nop
  403750:	370c      	adds	r7, #12
  403752:	46bd      	mov	sp, r7
  403754:	bc80      	pop	{r7}
  403756:	4770      	bx	lr

00403758 <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  403758:	b480      	push	{r7}
  40375a:	b083      	sub	sp, #12
  40375c:	af00      	add	r7, sp, #0
  40375e:	6078      	str	r0, [r7, #4]
  403760:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  403762:	683a      	ldr	r2, [r7, #0]
  403764:	f240 2302 	movw	r3, #514	; 0x202
  403768:	4013      	ands	r3, r2
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  40376a:	687a      	ldr	r2, [r7, #4]
  40376c:	6213      	str	r3, [r2, #32]
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
}
  40376e:	bf00      	nop
  403770:	370c      	adds	r7, #12
  403772:	46bd      	mov	sp, r7
  403774:	bc80      	pop	{r7}
  403776:	4770      	bx	lr

00403778 <pdc_read_rx_counter>:
 *
 * \return Receive Counter Register value.
 */
uint32_t pdc_read_rx_counter(
		Pdc *p_pdc)
{
  403778:	b480      	push	{r7}
  40377a:	b083      	sub	sp, #12
  40377c:	af00      	add	r7, sp, #0
  40377e:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	return p_pdc->PERIPH_RCR;
  403780:	687b      	ldr	r3, [r7, #4]
  403782:	685b      	ldr	r3, [r3, #4]
}
  403784:	4618      	mov	r0, r3
  403786:	370c      	adds	r7, #12
  403788:	46bd      	mov	sp, r7
  40378a:	bc80      	pop	{r7}
  40378c:	4770      	bx	lr
  40378e:	bf00      	nop

00403790 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  403790:	b480      	push	{r7}
  403792:	b083      	sub	sp, #12
  403794:	af00      	add	r7, sp, #0
  403796:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  403798:	687b      	ldr	r3, [r7, #4]
  40379a:	2208      	movs	r2, #8
  40379c:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  40379e:	687b      	ldr	r3, [r7, #4]
  4037a0:	2220      	movs	r2, #32
  4037a2:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  4037a4:	687b      	ldr	r3, [r7, #4]
  4037a6:	2204      	movs	r2, #4
  4037a8:	601a      	str	r2, [r3, #0]
}
  4037aa:	bf00      	nop
  4037ac:	370c      	adds	r7, #12
  4037ae:	46bd      	mov	sp, r7
  4037b0:	bc80      	pop	{r7}
  4037b2:	4770      	bx	lr

004037b4 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  4037b4:	b580      	push	{r7, lr}
  4037b6:	b084      	sub	sp, #16
  4037b8:	af00      	add	r7, sp, #0
  4037ba:	6078      	str	r0, [r7, #4]
  4037bc:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
  4037be:	2300      	movs	r3, #0
  4037c0:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  4037c2:	687b      	ldr	r3, [r7, #4]
  4037c4:	f04f 32ff 	mov.w	r2, #4294967295
  4037c8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  4037ca:	687b      	ldr	r3, [r7, #4]
  4037cc:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  4037ce:	6878      	ldr	r0, [r7, #4]
  4037d0:	4b0e      	ldr	r3, [pc, #56]	; (40380c <twi_master_init+0x58>)
  4037d2:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  4037d4:	6878      	ldr	r0, [r7, #4]
  4037d6:	4b0e      	ldr	r3, [pc, #56]	; (403810 <twi_master_init+0x5c>)
  4037d8:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  4037da:	683b      	ldr	r3, [r7, #0]
  4037dc:	6859      	ldr	r1, [r3, #4]
  4037de:	683b      	ldr	r3, [r7, #0]
  4037e0:	681b      	ldr	r3, [r3, #0]
  4037e2:	461a      	mov	r2, r3
  4037e4:	6878      	ldr	r0, [r7, #4]
  4037e6:	4b0b      	ldr	r3, [pc, #44]	; (403814 <twi_master_init+0x60>)
  4037e8:	4798      	blx	r3
  4037ea:	4603      	mov	r3, r0
  4037ec:	2b01      	cmp	r3, #1
  4037ee:	d101      	bne.n	4037f4 <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  4037f0:	2301      	movs	r3, #1
  4037f2:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  4037f4:	683b      	ldr	r3, [r7, #0]
  4037f6:	7a5b      	ldrb	r3, [r3, #9]
  4037f8:	2b01      	cmp	r3, #1
  4037fa:	d102      	bne.n	403802 <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
  4037fc:	687b      	ldr	r3, [r7, #4]
  4037fe:	2240      	movs	r2, #64	; 0x40
  403800:	601a      	str	r2, [r3, #0]
	}

	return status;
  403802:	68fb      	ldr	r3, [r7, #12]
}
  403804:	4618      	mov	r0, r3
  403806:	3710      	adds	r7, #16
  403808:	46bd      	mov	sp, r7
  40380a:	bd80      	pop	{r7, pc}
  40380c:	00403ba1 	.word	0x00403ba1
  403810:	00403791 	.word	0x00403791
  403814:	00403819 	.word	0x00403819

00403818 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  403818:	b480      	push	{r7}
  40381a:	b089      	sub	sp, #36	; 0x24
  40381c:	af00      	add	r7, sp, #0
  40381e:	60f8      	str	r0, [r7, #12]
  403820:	60b9      	str	r1, [r7, #8]
  403822:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  403824:	2300      	movs	r3, #0
  403826:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  403828:	68bb      	ldr	r3, [r7, #8]
  40382a:	4a34      	ldr	r2, [pc, #208]	; (4038fc <twi_set_speed+0xe4>)
  40382c:	4293      	cmp	r3, r2
  40382e:	d901      	bls.n	403834 <twi_set_speed+0x1c>
		return FAIL;
  403830:	2301      	movs	r3, #1
  403832:	e05d      	b.n	4038f0 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  403834:	68bb      	ldr	r3, [r7, #8]
  403836:	4a32      	ldr	r2, [pc, #200]	; (403900 <twi_set_speed+0xe8>)
  403838:	4293      	cmp	r3, r2
  40383a:	d937      	bls.n	4038ac <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  40383c:	687b      	ldr	r3, [r7, #4]
  40383e:	4a31      	ldr	r2, [pc, #196]	; (403904 <twi_set_speed+0xec>)
  403840:	fba2 2303 	umull	r2, r3, r2, r3
  403844:	0b9b      	lsrs	r3, r3, #14
  403846:	3b04      	subs	r3, #4
  403848:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  40384a:	68ba      	ldr	r2, [r7, #8]
  40384c:	4b2e      	ldr	r3, [pc, #184]	; (403908 <twi_set_speed+0xf0>)
  40384e:	4413      	add	r3, r2
  403850:	009b      	lsls	r3, r3, #2
  403852:	687a      	ldr	r2, [r7, #4]
  403854:	fbb2 f3f3 	udiv	r3, r2, r3
  403858:	3b04      	subs	r3, #4
  40385a:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40385c:	e005      	b.n	40386a <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
  40385e:	69fb      	ldr	r3, [r7, #28]
  403860:	3301      	adds	r3, #1
  403862:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  403864:	697b      	ldr	r3, [r7, #20]
  403866:	085b      	lsrs	r3, r3, #1
  403868:	617b      	str	r3, [r7, #20]
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40386a:	697b      	ldr	r3, [r7, #20]
  40386c:	2bff      	cmp	r3, #255	; 0xff
  40386e:	d909      	bls.n	403884 <twi_set_speed+0x6c>
  403870:	69fb      	ldr	r3, [r7, #28]
  403872:	2b06      	cmp	r3, #6
  403874:	d9f3      	bls.n	40385e <twi_set_speed+0x46>
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  403876:	e005      	b.n	403884 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
  403878:	69fb      	ldr	r3, [r7, #28]
  40387a:	3301      	adds	r3, #1
  40387c:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  40387e:	693b      	ldr	r3, [r7, #16]
  403880:	085b      	lsrs	r3, r3, #1
  403882:	613b      	str	r3, [r7, #16]
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  403884:	693b      	ldr	r3, [r7, #16]
  403886:	2bff      	cmp	r3, #255	; 0xff
  403888:	d902      	bls.n	403890 <twi_set_speed+0x78>
  40388a:	69fb      	ldr	r3, [r7, #28]
  40388c:	2b06      	cmp	r3, #6
  40388e:	d9f3      	bls.n	403878 <twi_set_speed+0x60>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  403890:	697b      	ldr	r3, [r7, #20]
  403892:	b2da      	uxtb	r2, r3
  403894:	693b      	ldr	r3, [r7, #16]
  403896:	021b      	lsls	r3, r3, #8
  403898:	b29b      	uxth	r3, r3
  40389a:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
  40389c:	69fb      	ldr	r3, [r7, #28]
  40389e:	041b      	lsls	r3, r3, #16
  4038a0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4038a4:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  4038a6:	68fb      	ldr	r3, [r7, #12]
  4038a8:	611a      	str	r2, [r3, #16]
  4038aa:	e020      	b.n	4038ee <twi_set_speed+0xd6>
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4038ac:	68bb      	ldr	r3, [r7, #8]
  4038ae:	005b      	lsls	r3, r3, #1
  4038b0:	687a      	ldr	r2, [r7, #4]
  4038b2:	fbb2 f3f3 	udiv	r3, r2, r3
  4038b6:	3b04      	subs	r3, #4
  4038b8:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4038ba:	e005      	b.n	4038c8 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
  4038bc:	69fb      	ldr	r3, [r7, #28]
  4038be:	3301      	adds	r3, #1
  4038c0:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  4038c2:	69bb      	ldr	r3, [r7, #24]
  4038c4:	085b      	lsrs	r3, r3, #1
  4038c6:	61bb      	str	r3, [r7, #24]
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4038c8:	69bb      	ldr	r3, [r7, #24]
  4038ca:	2bff      	cmp	r3, #255	; 0xff
  4038cc:	d902      	bls.n	4038d4 <twi_set_speed+0xbc>
  4038ce:	69fb      	ldr	r3, [r7, #28]
  4038d0:	2b06      	cmp	r3, #6
  4038d2:	d9f3      	bls.n	4038bc <twi_set_speed+0xa4>
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  4038d4:	69bb      	ldr	r3, [r7, #24]
  4038d6:	b2da      	uxtb	r2, r3
  4038d8:	69bb      	ldr	r3, [r7, #24]
  4038da:	021b      	lsls	r3, r3, #8
  4038dc:	b29b      	uxth	r3, r3
  4038de:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
  4038e0:	69fb      	ldr	r3, [r7, #28]
  4038e2:	041b      	lsls	r3, r3, #16
  4038e4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  4038e8:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  4038ea:	68fb      	ldr	r3, [r7, #12]
  4038ec:	611a      	str	r2, [r3, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  4038ee:	2300      	movs	r3, #0
}
  4038f0:	4618      	mov	r0, r3
  4038f2:	3724      	adds	r7, #36	; 0x24
  4038f4:	46bd      	mov	sp, r7
  4038f6:	bc80      	pop	{r7}
  4038f8:	4770      	bx	lr
  4038fa:	bf00      	nop
  4038fc:	00061a80 	.word	0x00061a80
  403900:	0005dc00 	.word	0x0005dc00
  403904:	057619f1 	.word	0x057619f1
  403908:	3ffd1200 	.word	0x3ffd1200

0040390c <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
  40390c:	b480      	push	{r7}
  40390e:	b085      	sub	sp, #20
  403910:	af00      	add	r7, sp, #0
  403912:	6078      	str	r0, [r7, #4]
  403914:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  403916:	683b      	ldr	r3, [r7, #0]
  403918:	2b00      	cmp	r3, #0
  40391a:	d101      	bne.n	403920 <twi_mk_addr+0x14>
		return 0;
  40391c:	2300      	movs	r3, #0
  40391e:	e01d      	b.n	40395c <twi_mk_addr+0x50>

	val = addr[0];
  403920:	687b      	ldr	r3, [r7, #4]
  403922:	781b      	ldrb	r3, [r3, #0]
  403924:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  403926:	683b      	ldr	r3, [r7, #0]
  403928:	2b01      	cmp	r3, #1
  40392a:	dd09      	ble.n	403940 <twi_mk_addr+0x34>
		val <<= 8;
  40392c:	68fb      	ldr	r3, [r7, #12]
  40392e:	021b      	lsls	r3, r3, #8
  403930:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  403932:	687b      	ldr	r3, [r7, #4]
  403934:	3301      	adds	r3, #1
  403936:	781b      	ldrb	r3, [r3, #0]
  403938:	461a      	mov	r2, r3
  40393a:	68fb      	ldr	r3, [r7, #12]
  40393c:	4313      	orrs	r3, r2
  40393e:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  403940:	683b      	ldr	r3, [r7, #0]
  403942:	2b02      	cmp	r3, #2
  403944:	dd09      	ble.n	40395a <twi_mk_addr+0x4e>
		val <<= 8;
  403946:	68fb      	ldr	r3, [r7, #12]
  403948:	021b      	lsls	r3, r3, #8
  40394a:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  40394c:	687b      	ldr	r3, [r7, #4]
  40394e:	3302      	adds	r3, #2
  403950:	781b      	ldrb	r3, [r3, #0]
  403952:	461a      	mov	r2, r3
  403954:	68fb      	ldr	r3, [r7, #12]
  403956:	4313      	orrs	r3, r2
  403958:	60fb      	str	r3, [r7, #12]
	}
	return val;
  40395a:	68fb      	ldr	r3, [r7, #12]
}
  40395c:	4618      	mov	r0, r3
  40395e:	3714      	adds	r7, #20
  403960:	46bd      	mov	sp, r7
  403962:	bc80      	pop	{r7}
  403964:	4770      	bx	lr
  403966:	bf00      	nop

00403968 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  403968:	b580      	push	{r7, lr}
  40396a:	b088      	sub	sp, #32
  40396c:	af00      	add	r7, sp, #0
  40396e:	6078      	str	r0, [r7, #4]
  403970:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  403972:	683b      	ldr	r3, [r7, #0]
  403974:	68db      	ldr	r3, [r3, #12]
  403976:	61fb      	str	r3, [r7, #28]
	uint8_t *buffer = p_packet->buffer;
  403978:	683b      	ldr	r3, [r7, #0]
  40397a:	689b      	ldr	r3, [r3, #8]
  40397c:	61bb      	str	r3, [r7, #24]
	uint8_t stop_sent = 0;
  40397e:	2300      	movs	r3, #0
  403980:	75fb      	strb	r3, [r7, #23]
	uint32_t timeout = TWI_TIMEOUT;;
  403982:	f247 5330 	movw	r3, #30000	; 0x7530
  403986:	613b      	str	r3, [r7, #16]
	
	/* Check argument */
	if (cnt == 0) {
  403988:	69fb      	ldr	r3, [r7, #28]
  40398a:	2b00      	cmp	r3, #0
  40398c:	d101      	bne.n	403992 <twi_master_read+0x2a>
		return TWI_INVALID_ARGUMENT;
  40398e:	2301      	movs	r3, #1
  403990:	e069      	b.n	403a66 <twi_master_read+0xfe>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  403992:	687b      	ldr	r3, [r7, #4]
  403994:	2200      	movs	r2, #0
  403996:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  403998:	683b      	ldr	r3, [r7, #0]
  40399a:	7c1b      	ldrb	r3, [r3, #16]
  40399c:	041b      	lsls	r3, r3, #16
  40399e:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  4039a2:	683b      	ldr	r3, [r7, #0]
  4039a4:	685b      	ldr	r3, [r3, #4]
  4039a6:	021b      	lsls	r3, r3, #8
  4039a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  4039ac:	4313      	orrs	r3, r2
  4039ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  4039b2:	687b      	ldr	r3, [r7, #4]
  4039b4:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  4039b6:	687b      	ldr	r3, [r7, #4]
  4039b8:	2200      	movs	r2, #0
  4039ba:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4039bc:	683a      	ldr	r2, [r7, #0]
  4039be:	683b      	ldr	r3, [r7, #0]
  4039c0:	685b      	ldr	r3, [r3, #4]
  4039c2:	4619      	mov	r1, r3
  4039c4:	4610      	mov	r0, r2
  4039c6:	4b2a      	ldr	r3, [pc, #168]	; (403a70 <twi_master_read+0x108>)
  4039c8:	4798      	blx	r3
  4039ca:	4602      	mov	r2, r0
  4039cc:	687b      	ldr	r3, [r7, #4]
  4039ce:	60da      	str	r2, [r3, #12]

	/* Send a START condition */
	if (cnt == 1) {
  4039d0:	69fb      	ldr	r3, [r7, #28]
  4039d2:	2b01      	cmp	r3, #1
  4039d4:	d105      	bne.n	4039e2 <twi_master_read+0x7a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  4039d6:	687b      	ldr	r3, [r7, #4]
  4039d8:	2203      	movs	r2, #3
  4039da:	601a      	str	r2, [r3, #0]
		stop_sent = 1;
  4039dc:	2301      	movs	r3, #1
  4039de:	75fb      	strb	r3, [r7, #23]
  4039e0:	e034      	b.n	403a4c <twi_master_read+0xe4>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  4039e2:	687b      	ldr	r3, [r7, #4]
  4039e4:	2201      	movs	r2, #1
  4039e6:	601a      	str	r2, [r3, #0]
		stop_sent = 0;
  4039e8:	2300      	movs	r3, #0
  4039ea:	75fb      	strb	r3, [r7, #23]
	}

	while (cnt > 0) {
  4039ec:	e02e      	b.n	403a4c <twi_master_read+0xe4>
		status = p_twi->TWI_SR;
  4039ee:	687b      	ldr	r3, [r7, #4]
  4039f0:	6a1b      	ldr	r3, [r3, #32]
  4039f2:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  4039f4:	68fb      	ldr	r3, [r7, #12]
  4039f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4039fa:	2b00      	cmp	r3, #0
  4039fc:	d001      	beq.n	403a02 <twi_master_read+0x9a>
			return TWI_RECEIVE_NACK;
  4039fe:	2305      	movs	r3, #5
  403a00:	e031      	b.n	403a66 <twi_master_read+0xfe>
		}

		if (!timeout--) {
  403a02:	693b      	ldr	r3, [r7, #16]
  403a04:	1e5a      	subs	r2, r3, #1
  403a06:	613a      	str	r2, [r7, #16]
  403a08:	2b00      	cmp	r3, #0
  403a0a:	d101      	bne.n	403a10 <twi_master_read+0xa8>
			return TWI_ERROR_TIMEOUT;
  403a0c:	2309      	movs	r3, #9
  403a0e:	e02a      	b.n	403a66 <twi_master_read+0xfe>
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  403a10:	69fb      	ldr	r3, [r7, #28]
  403a12:	2b01      	cmp	r3, #1
  403a14:	d107      	bne.n	403a26 <twi_master_read+0xbe>
  403a16:	7dfb      	ldrb	r3, [r7, #23]
  403a18:	2b00      	cmp	r3, #0
  403a1a:	d104      	bne.n	403a26 <twi_master_read+0xbe>
			p_twi->TWI_CR = TWI_CR_STOP;
  403a1c:	687b      	ldr	r3, [r7, #4]
  403a1e:	2202      	movs	r2, #2
  403a20:	601a      	str	r2, [r3, #0]
			stop_sent = 1;
  403a22:	2301      	movs	r3, #1
  403a24:	75fb      	strb	r3, [r7, #23]
		}

		if (!(status & TWI_SR_RXRDY)) {
  403a26:	68fb      	ldr	r3, [r7, #12]
  403a28:	f003 0302 	and.w	r3, r3, #2
  403a2c:	2b00      	cmp	r3, #0
  403a2e:	d100      	bne.n	403a32 <twi_master_read+0xca>
			continue;
  403a30:	e00c      	b.n	403a4c <twi_master_read+0xe4>
		}
		*buffer++ = p_twi->TWI_RHR;
  403a32:	69bb      	ldr	r3, [r7, #24]
  403a34:	1c5a      	adds	r2, r3, #1
  403a36:	61ba      	str	r2, [r7, #24]
  403a38:	687a      	ldr	r2, [r7, #4]
  403a3a:	6b12      	ldr	r2, [r2, #48]	; 0x30
  403a3c:	b2d2      	uxtb	r2, r2
  403a3e:	701a      	strb	r2, [r3, #0]

		cnt--;
  403a40:	69fb      	ldr	r3, [r7, #28]
  403a42:	3b01      	subs	r3, #1
  403a44:	61fb      	str	r3, [r7, #28]
		timeout = TWI_TIMEOUT;
  403a46:	f247 5330 	movw	r3, #30000	; 0x7530
  403a4a:	613b      	str	r3, [r7, #16]
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  403a4c:	69fb      	ldr	r3, [r7, #28]
  403a4e:	2b00      	cmp	r3, #0
  403a50:	d1cd      	bne.n	4039ee <twi_master_read+0x86>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  403a52:	bf00      	nop
  403a54:	687b      	ldr	r3, [r7, #4]
  403a56:	6a1b      	ldr	r3, [r3, #32]
  403a58:	f003 0301 	and.w	r3, r3, #1
  403a5c:	2b00      	cmp	r3, #0
  403a5e:	d0f9      	beq.n	403a54 <twi_master_read+0xec>
	}

	p_twi->TWI_SR;
  403a60:	687b      	ldr	r3, [r7, #4]
  403a62:	6a1b      	ldr	r3, [r3, #32]

	return TWI_SUCCESS;
  403a64:	2300      	movs	r3, #0
}
  403a66:	4618      	mov	r0, r3
  403a68:	3720      	adds	r7, #32
  403a6a:	46bd      	mov	sp, r7
  403a6c:	bd80      	pop	{r7, pc}
  403a6e:	bf00      	nop
  403a70:	0040390d 	.word	0x0040390d

00403a74 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  403a74:	b580      	push	{r7, lr}
  403a76:	b086      	sub	sp, #24
  403a78:	af00      	add	r7, sp, #0
  403a7a:	6078      	str	r0, [r7, #4]
  403a7c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  403a7e:	683b      	ldr	r3, [r7, #0]
  403a80:	68db      	ldr	r3, [r3, #12]
  403a82:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  403a84:	683b      	ldr	r3, [r7, #0]
  403a86:	689b      	ldr	r3, [r3, #8]
  403a88:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  403a8a:	697b      	ldr	r3, [r7, #20]
  403a8c:	2b00      	cmp	r3, #0
  403a8e:	d101      	bne.n	403a94 <twi_master_write+0x20>
		return TWI_INVALID_ARGUMENT;
  403a90:	2301      	movs	r3, #1
  403a92:	e056      	b.n	403b42 <twi_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  403a94:	687b      	ldr	r3, [r7, #4]
  403a96:	2200      	movs	r2, #0
  403a98:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  403a9a:	683b      	ldr	r3, [r7, #0]
  403a9c:	7c1b      	ldrb	r3, [r3, #16]
  403a9e:	041b      	lsls	r3, r3, #16
  403aa0:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  403aa4:	683b      	ldr	r3, [r7, #0]
  403aa6:	685b      	ldr	r3, [r3, #4]
  403aa8:	021b      	lsls	r3, r3, #8
  403aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  403aae:	431a      	orrs	r2, r3
  403ab0:	687b      	ldr	r3, [r7, #4]
  403ab2:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  403ab4:	687b      	ldr	r3, [r7, #4]
  403ab6:	2200      	movs	r2, #0
  403ab8:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  403aba:	683a      	ldr	r2, [r7, #0]
  403abc:	683b      	ldr	r3, [r7, #0]
  403abe:	685b      	ldr	r3, [r3, #4]
  403ac0:	4619      	mov	r1, r3
  403ac2:	4610      	mov	r0, r2
  403ac4:	4b21      	ldr	r3, [pc, #132]	; (403b4c <twi_master_write+0xd8>)
  403ac6:	4798      	blx	r3
  403ac8:	4602      	mov	r2, r0
  403aca:	687b      	ldr	r3, [r7, #4]
  403acc:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  403ace:	e019      	b.n	403b04 <twi_master_write+0x90>
		status = p_twi->TWI_SR;
  403ad0:	687b      	ldr	r3, [r7, #4]
  403ad2:	6a1b      	ldr	r3, [r3, #32]
  403ad4:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  403ad6:	68fb      	ldr	r3, [r7, #12]
  403ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  403adc:	2b00      	cmp	r3, #0
  403ade:	d001      	beq.n	403ae4 <twi_master_write+0x70>
			return TWI_RECEIVE_NACK;
  403ae0:	2305      	movs	r3, #5
  403ae2:	e02e      	b.n	403b42 <twi_master_write+0xce>
		}

		if (!(status & TWI_SR_TXRDY)) {
  403ae4:	68fb      	ldr	r3, [r7, #12]
  403ae6:	f003 0304 	and.w	r3, r3, #4
  403aea:	2b00      	cmp	r3, #0
  403aec:	d100      	bne.n	403af0 <twi_master_write+0x7c>
			continue;
  403aee:	e009      	b.n	403b04 <twi_master_write+0x90>
		}
		p_twi->TWI_THR = *buffer++;
  403af0:	693b      	ldr	r3, [r7, #16]
  403af2:	1c5a      	adds	r2, r3, #1
  403af4:	613a      	str	r2, [r7, #16]
  403af6:	781b      	ldrb	r3, [r3, #0]
  403af8:	461a      	mov	r2, r3
  403afa:	687b      	ldr	r3, [r7, #4]
  403afc:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  403afe:	697b      	ldr	r3, [r7, #20]
  403b00:	3b01      	subs	r3, #1
  403b02:	617b      	str	r3, [r7, #20]
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  403b04:	697b      	ldr	r3, [r7, #20]
  403b06:	2b00      	cmp	r3, #0
  403b08:	d1e2      	bne.n	403ad0 <twi_master_write+0x5c>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  403b0a:	687b      	ldr	r3, [r7, #4]
  403b0c:	6a1b      	ldr	r3, [r3, #32]
  403b0e:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  403b10:	68fb      	ldr	r3, [r7, #12]
  403b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
  403b16:	2b00      	cmp	r3, #0
  403b18:	d001      	beq.n	403b1e <twi_master_write+0xaa>
			return TWI_RECEIVE_NACK;
  403b1a:	2305      	movs	r3, #5
  403b1c:	e011      	b.n	403b42 <twi_master_write+0xce>
		}

		if (status & TWI_SR_TXRDY) {
  403b1e:	68fb      	ldr	r3, [r7, #12]
  403b20:	f003 0304 	and.w	r3, r3, #4
  403b24:	2b00      	cmp	r3, #0
  403b26:	d100      	bne.n	403b2a <twi_master_write+0xb6>
			break;
		}
	}
  403b28:	e7ef      	b.n	403b0a <twi_master_write+0x96>
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
			break;
  403b2a:	bf00      	nop
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  403b2c:	687b      	ldr	r3, [r7, #4]
  403b2e:	2202      	movs	r2, #2
  403b30:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  403b32:	bf00      	nop
  403b34:	687b      	ldr	r3, [r7, #4]
  403b36:	6a1b      	ldr	r3, [r3, #32]
  403b38:	f003 0301 	and.w	r3, r3, #1
  403b3c:	2b00      	cmp	r3, #0
  403b3e:	d0f9      	beq.n	403b34 <twi_master_write+0xc0>
	}

	return TWI_SUCCESS;
  403b40:	2300      	movs	r3, #0
}
  403b42:	4618      	mov	r0, r3
  403b44:	3718      	adds	r7, #24
  403b46:	46bd      	mov	sp, r7
  403b48:	bd80      	pop	{r7, pc}
  403b4a:	bf00      	nop
  403b4c:	0040390d 	.word	0x0040390d

00403b50 <twi_disable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be disabled.
 */
void twi_disable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
  403b50:	b480      	push	{r7}
  403b52:	b083      	sub	sp, #12
  403b54:	af00      	add	r7, sp, #0
  403b56:	6078      	str	r0, [r7, #4]
  403b58:	6039      	str	r1, [r7, #0]
	/* Disable the specified interrupts */
	p_twi->TWI_IDR = ul_sources;
  403b5a:	687b      	ldr	r3, [r7, #4]
  403b5c:	683a      	ldr	r2, [r7, #0]
  403b5e:	629a      	str	r2, [r3, #40]	; 0x28
	/* Dummy read */
	p_twi->TWI_SR;
  403b60:	687b      	ldr	r3, [r7, #4]
  403b62:	6a1b      	ldr	r3, [r3, #32]
}
  403b64:	bf00      	nop
  403b66:	370c      	adds	r7, #12
  403b68:	46bd      	mov	sp, r7
  403b6a:	bc80      	pop	{r7}
  403b6c:	4770      	bx	lr
  403b6e:	bf00      	nop

00403b70 <twi_get_interrupt_status>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \retval TWI interrupt status.
 */
uint32_t twi_get_interrupt_status(Twi *p_twi)
{
  403b70:	b480      	push	{r7}
  403b72:	b083      	sub	sp, #12
  403b74:	af00      	add	r7, sp, #0
  403b76:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_SR;
  403b78:	687b      	ldr	r3, [r7, #4]
  403b7a:	6a1b      	ldr	r3, [r3, #32]
}
  403b7c:	4618      	mov	r0, r3
  403b7e:	370c      	adds	r7, #12
  403b80:	46bd      	mov	sp, r7
  403b82:	bc80      	pop	{r7}
  403b84:	4770      	bx	lr
  403b86:	bf00      	nop

00403b88 <twi_get_interrupt_mask>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The interrupt mask value.
 */
uint32_t twi_get_interrupt_mask(Twi *p_twi)
{
  403b88:	b480      	push	{r7}
  403b8a:	b083      	sub	sp, #12
  403b8c:	af00      	add	r7, sp, #0
  403b8e:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_IMR;
  403b90:	687b      	ldr	r3, [r7, #4]
  403b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
  403b94:	4618      	mov	r0, r3
  403b96:	370c      	adds	r7, #12
  403b98:	46bd      	mov	sp, r7
  403b9a:	bc80      	pop	{r7}
  403b9c:	4770      	bx	lr
  403b9e:	bf00      	nop

00403ba0 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  403ba0:	b480      	push	{r7}
  403ba2:	b083      	sub	sp, #12
  403ba4:	af00      	add	r7, sp, #0
  403ba6:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  403ba8:	687b      	ldr	r3, [r7, #4]
  403baa:	2280      	movs	r2, #128	; 0x80
  403bac:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  403bae:	687b      	ldr	r3, [r7, #4]
  403bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  403bb2:	bf00      	nop
  403bb4:	370c      	adds	r7, #12
  403bb6:	46bd      	mov	sp, r7
  403bb8:	bc80      	pop	{r7}
  403bba:	4770      	bx	lr

00403bbc <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  403bbc:	b480      	push	{r7}
  403bbe:	b085      	sub	sp, #20
  403bc0:	af00      	add	r7, sp, #0
  403bc2:	6078      	str	r0, [r7, #4]
  403bc4:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  403bc6:	2300      	movs	r3, #0
  403bc8:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  403bca:	687b      	ldr	r3, [r7, #4]
  403bcc:	22ac      	movs	r2, #172	; 0xac
  403bce:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  403bd0:	683b      	ldr	r3, [r7, #0]
  403bd2:	681a      	ldr	r2, [r3, #0]
  403bd4:	683b      	ldr	r3, [r7, #0]
  403bd6:	685b      	ldr	r3, [r3, #4]
  403bd8:	fbb2 f3f3 	udiv	r3, r2, r3
  403bdc:	091b      	lsrs	r3, r3, #4
  403bde:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  403be0:	68fb      	ldr	r3, [r7, #12]
  403be2:	2b00      	cmp	r3, #0
  403be4:	d003      	beq.n	403bee <uart_init+0x32>
  403be6:	68fb      	ldr	r3, [r7, #12]
  403be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  403bec:	d301      	bcc.n	403bf2 <uart_init+0x36>
		return 1;
  403bee:	2301      	movs	r3, #1
  403bf0:	e00f      	b.n	403c12 <uart_init+0x56>

	p_uart->UART_BRGR = cd;
  403bf2:	687b      	ldr	r3, [r7, #4]
  403bf4:	68fa      	ldr	r2, [r7, #12]
  403bf6:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  403bf8:	683b      	ldr	r3, [r7, #0]
  403bfa:	689a      	ldr	r2, [r3, #8]
  403bfc:	687b      	ldr	r3, [r7, #4]
  403bfe:	605a      	str	r2, [r3, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  403c00:	687b      	ldr	r3, [r7, #4]
  403c02:	f240 2202 	movw	r2, #514	; 0x202
  403c06:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  403c0a:	687b      	ldr	r3, [r7, #4]
  403c0c:	2250      	movs	r2, #80	; 0x50
  403c0e:	601a      	str	r2, [r3, #0]

	return 0;
  403c10:	2300      	movs	r3, #0
}
  403c12:	4618      	mov	r0, r3
  403c14:	3714      	adds	r7, #20
  403c16:	46bd      	mov	sp, r7
  403c18:	bc80      	pop	{r7}
  403c1a:	4770      	bx	lr

00403c1c <uart_enable_tx>:
 * \brief Enable UART transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
  403c1c:	b480      	push	{r7}
  403c1e:	b083      	sub	sp, #12
  403c20:	af00      	add	r7, sp, #0
  403c22:	6078      	str	r0, [r7, #4]
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  403c24:	687b      	ldr	r3, [r7, #4]
  403c26:	2240      	movs	r2, #64	; 0x40
  403c28:	601a      	str	r2, [r3, #0]
}
  403c2a:	bf00      	nop
  403c2c:	370c      	adds	r7, #12
  403c2e:	46bd      	mov	sp, r7
  403c30:	bc80      	pop	{r7}
  403c32:	4770      	bx	lr

00403c34 <uart_disable_rx>:
 * \brief Disable UART receiver.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_disable_rx(Uart *p_uart)
{
  403c34:	b480      	push	{r7}
  403c36:	b083      	sub	sp, #12
  403c38:	af00      	add	r7, sp, #0
  403c3a:	6078      	str	r0, [r7, #4]
	/* Disable receiver */
	p_uart->UART_CR = UART_CR_RXDIS;
  403c3c:	687b      	ldr	r3, [r7, #4]
  403c3e:	2220      	movs	r2, #32
  403c40:	601a      	str	r2, [r3, #0]
}
  403c42:	bf00      	nop
  403c44:	370c      	adds	r7, #12
  403c46:	46bd      	mov	sp, r7
  403c48:	bc80      	pop	{r7}
  403c4a:	4770      	bx	lr

00403c4c <uart_get_status>:
 * \param p_uart Pointer to a UART instance.
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
  403c4c:	b480      	push	{r7}
  403c4e:	b083      	sub	sp, #12
  403c50:	af00      	add	r7, sp, #0
  403c52:	6078      	str	r0, [r7, #4]
	return p_uart->UART_SR;
  403c54:	687b      	ldr	r3, [r7, #4]
  403c56:	695b      	ldr	r3, [r3, #20]
}
  403c58:	4618      	mov	r0, r3
  403c5a:	370c      	adds	r7, #12
  403c5c:	46bd      	mov	sp, r7
  403c5e:	bc80      	pop	{r7}
  403c60:	4770      	bx	lr
  403c62:	bf00      	nop

00403c64 <uart_get_pdc_base>:
 * \param p_uart Pointer to a UART instance.
 *
 * \return UART PDC registers base for PDC driver to access.
 */
Pdc *uart_get_pdc_base(Uart *p_uart)
{
  403c64:	b480      	push	{r7}
  403c66:	b085      	sub	sp, #20
  403c68:	af00      	add	r7, sp, #0
  403c6a:	6078      	str	r0, [r7, #4]
	Pdc *p_pdc_base;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	if (p_uart == UART0)
  403c6c:	687b      	ldr	r3, [r7, #4]
  403c6e:	4a08      	ldr	r2, [pc, #32]	; (403c90 <uart_get_pdc_base+0x2c>)
  403c70:	4293      	cmp	r3, r2
  403c72:	d101      	bne.n	403c78 <uart_get_pdc_base+0x14>
		p_pdc_base = PDC_UART0;
  403c74:	4b07      	ldr	r3, [pc, #28]	; (403c94 <uart_get_pdc_base+0x30>)
  403c76:	60fb      	str	r3, [r7, #12]
#else
#error "Unsupported device"
#endif

#if (SAM3S || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	if (p_uart == UART1)
  403c78:	687b      	ldr	r3, [r7, #4]
  403c7a:	4a07      	ldr	r2, [pc, #28]	; (403c98 <uart_get_pdc_base+0x34>)
  403c7c:	4293      	cmp	r3, r2
  403c7e:	d101      	bne.n	403c84 <uart_get_pdc_base+0x20>
		p_pdc_base = PDC_UART1;
  403c80:	4b06      	ldr	r3, [pc, #24]	; (403c9c <uart_get_pdc_base+0x38>)
  403c82:	60fb      	str	r3, [r7, #12]
#if (SAM4N)
	if (p_uart == UART2)
		p_pdc_base = PDC_UART2;
#endif

	return p_pdc_base;
  403c84:	68fb      	ldr	r3, [r7, #12]
}
  403c86:	4618      	mov	r0, r3
  403c88:	3714      	adds	r7, #20
  403c8a:	46bd      	mov	sp, r7
  403c8c:	bc80      	pop	{r7}
  403c8e:	4770      	bx	lr
  403c90:	400e0600 	.word	0x400e0600
  403c94:	400e0700 	.word	0x400e0700
  403c98:	400e0800 	.word	0x400e0800
  403c9c:	400e0900 	.word	0x400e0900

00403ca0 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  403ca0:	b480      	push	{r7}
  403ca2:	b089      	sub	sp, #36	; 0x24
  403ca4:	af00      	add	r7, sp, #0
  403ca6:	60f8      	str	r0, [r7, #12]
  403ca8:	60b9      	str	r1, [r7, #8]
  403caa:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  403cac:	68bb      	ldr	r3, [r7, #8]
  403cae:	011a      	lsls	r2, r3, #4
  403cb0:	687b      	ldr	r3, [r7, #4]
  403cb2:	429a      	cmp	r2, r3
  403cb4:	d802      	bhi.n	403cbc <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  403cb6:	2310      	movs	r3, #16
  403cb8:	61fb      	str	r3, [r7, #28]
  403cba:	e001      	b.n	403cc0 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  403cbc:	2308      	movs	r3, #8
  403cbe:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  403cc0:	687b      	ldr	r3, [r7, #4]
  403cc2:	00da      	lsls	r2, r3, #3
  403cc4:	69fb      	ldr	r3, [r7, #28]
  403cc6:	68b9      	ldr	r1, [r7, #8]
  403cc8:	fb01 f303 	mul.w	r3, r1, r3
  403ccc:	085b      	lsrs	r3, r3, #1
  403cce:	441a      	add	r2, r3
  403cd0:	69fb      	ldr	r3, [r7, #28]
  403cd2:	68b9      	ldr	r1, [r7, #8]
  403cd4:	fb01 f303 	mul.w	r3, r1, r3
  403cd8:	fbb2 f3f3 	udiv	r3, r2, r3
  403cdc:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  403cde:	69bb      	ldr	r3, [r7, #24]
  403ce0:	08db      	lsrs	r3, r3, #3
  403ce2:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  403ce4:	69bb      	ldr	r3, [r7, #24]
  403ce6:	f003 0307 	and.w	r3, r3, #7
  403cea:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  403cec:	697b      	ldr	r3, [r7, #20]
  403cee:	2b00      	cmp	r3, #0
  403cf0:	d003      	beq.n	403cfa <usart_set_async_baudrate+0x5a>
  403cf2:	697b      	ldr	r3, [r7, #20]
  403cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  403cf8:	d301      	bcc.n	403cfe <usart_set_async_baudrate+0x5e>
		return 1;
  403cfa:	2301      	movs	r3, #1
  403cfc:	e00f      	b.n	403d1e <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  403cfe:	69fb      	ldr	r3, [r7, #28]
  403d00:	2b08      	cmp	r3, #8
  403d02:	d105      	bne.n	403d10 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  403d04:	68fb      	ldr	r3, [r7, #12]
  403d06:	685b      	ldr	r3, [r3, #4]
  403d08:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  403d0c:	68fb      	ldr	r3, [r7, #12]
  403d0e:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  403d10:	693b      	ldr	r3, [r7, #16]
  403d12:	041a      	lsls	r2, r3, #16
  403d14:	697b      	ldr	r3, [r7, #20]
  403d16:	431a      	orrs	r2, r3
  403d18:	68fb      	ldr	r3, [r7, #12]
  403d1a:	621a      	str	r2, [r3, #32]

	return 0;
  403d1c:	2300      	movs	r3, #0
}
  403d1e:	4618      	mov	r0, r3
  403d20:	3724      	adds	r7, #36	; 0x24
  403d22:	46bd      	mov	sp, r7
  403d24:	bc80      	pop	{r7}
  403d26:	4770      	bx	lr

00403d28 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  403d28:	b580      	push	{r7, lr}
  403d2a:	b082      	sub	sp, #8
  403d2c:	af00      	add	r7, sp, #0
  403d2e:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  403d30:	6878      	ldr	r0, [r7, #4]
  403d32:	4b0f      	ldr	r3, [pc, #60]	; (403d70 <usart_reset+0x48>)
  403d34:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  403d36:	687b      	ldr	r3, [r7, #4]
  403d38:	2200      	movs	r2, #0
  403d3a:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  403d3c:	687b      	ldr	r3, [r7, #4]
  403d3e:	2200      	movs	r2, #0
  403d40:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  403d42:	687b      	ldr	r3, [r7, #4]
  403d44:	2200      	movs	r2, #0
  403d46:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  403d48:	6878      	ldr	r0, [r7, #4]
  403d4a:	4b0a      	ldr	r3, [pc, #40]	; (403d74 <usart_reset+0x4c>)
  403d4c:	4798      	blx	r3
	usart_reset_rx(p_usart);
  403d4e:	6878      	ldr	r0, [r7, #4]
  403d50:	4b09      	ldr	r3, [pc, #36]	; (403d78 <usart_reset+0x50>)
  403d52:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  403d54:	6878      	ldr	r0, [r7, #4]
  403d56:	4b09      	ldr	r3, [pc, #36]	; (403d7c <usart_reset+0x54>)
  403d58:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  403d5a:	6878      	ldr	r0, [r7, #4]
  403d5c:	4b08      	ldr	r3, [pc, #32]	; (403d80 <usart_reset+0x58>)
  403d5e:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  403d60:	6878      	ldr	r0, [r7, #4]
  403d62:	4b08      	ldr	r3, [pc, #32]	; (403d84 <usart_reset+0x5c>)
  403d64:	4798      	blx	r3
#endif
}
  403d66:	bf00      	nop
  403d68:	3708      	adds	r7, #8
  403d6a:	46bd      	mov	sp, r7
  403d6c:	bd80      	pop	{r7, pc}
  403d6e:	bf00      	nop
  403d70:	00403ffd 	.word	0x00403ffd
  403d74:	00403e7d 	.word	0x00403e7d
  403d78:	00403ec5 	.word	0x00403ec5
  403d7c:	00403f45 	.word	0x00403f45
  403d80:	00403f99 	.word	0x00403f99
  403d84:	00403f7d 	.word	0x00403f7d

00403d88 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  403d88:	b580      	push	{r7, lr}
  403d8a:	b084      	sub	sp, #16
  403d8c:	af00      	add	r7, sp, #0
  403d8e:	60f8      	str	r0, [r7, #12]
  403d90:	60b9      	str	r1, [r7, #8]
  403d92:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  403d94:	68f8      	ldr	r0, [r7, #12]
  403d96:	4b1a      	ldr	r3, [pc, #104]	; (403e00 <usart_init_rs232+0x78>)
  403d98:	4798      	blx	r3

	ul_reg_val = 0;
  403d9a:	4b1a      	ldr	r3, [pc, #104]	; (403e04 <usart_init_rs232+0x7c>)
  403d9c:	2200      	movs	r2, #0
  403d9e:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  403da0:	68bb      	ldr	r3, [r7, #8]
  403da2:	2b00      	cmp	r3, #0
  403da4:	d009      	beq.n	403dba <usart_init_rs232+0x32>
  403da6:	68bb      	ldr	r3, [r7, #8]
  403da8:	681b      	ldr	r3, [r3, #0]
  403daa:	687a      	ldr	r2, [r7, #4]
  403dac:	4619      	mov	r1, r3
  403dae:	68f8      	ldr	r0, [r7, #12]
  403db0:	4b15      	ldr	r3, [pc, #84]	; (403e08 <usart_init_rs232+0x80>)
  403db2:	4798      	blx	r3
  403db4:	4603      	mov	r3, r0
  403db6:	2b00      	cmp	r3, #0
  403db8:	d001      	beq.n	403dbe <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  403dba:	2301      	movs	r3, #1
  403dbc:	e01b      	b.n	403df6 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  403dbe:	68bb      	ldr	r3, [r7, #8]
  403dc0:	685a      	ldr	r2, [r3, #4]
  403dc2:	68bb      	ldr	r3, [r7, #8]
  403dc4:	689b      	ldr	r3, [r3, #8]
  403dc6:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  403dc8:	68bb      	ldr	r3, [r7, #8]
  403dca:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  403dcc:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  403dce:	68bb      	ldr	r3, [r7, #8]
  403dd0:	68db      	ldr	r3, [r3, #12]
  403dd2:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  403dd4:	4b0b      	ldr	r3, [pc, #44]	; (403e04 <usart_init_rs232+0x7c>)
  403dd6:	681b      	ldr	r3, [r3, #0]
  403dd8:	4313      	orrs	r3, r2
  403dda:	4a0a      	ldr	r2, [pc, #40]	; (403e04 <usart_init_rs232+0x7c>)
  403ddc:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  403dde:	4b09      	ldr	r3, [pc, #36]	; (403e04 <usart_init_rs232+0x7c>)
  403de0:	681b      	ldr	r3, [r3, #0]
  403de2:	4a08      	ldr	r2, [pc, #32]	; (403e04 <usart_init_rs232+0x7c>)
  403de4:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  403de6:	68fb      	ldr	r3, [r7, #12]
  403de8:	685a      	ldr	r2, [r3, #4]
  403dea:	4b06      	ldr	r3, [pc, #24]	; (403e04 <usart_init_rs232+0x7c>)
  403dec:	681b      	ldr	r3, [r3, #0]
  403dee:	431a      	orrs	r2, r3
  403df0:	68fb      	ldr	r3, [r7, #12]
  403df2:	605a      	str	r2, [r3, #4]

	return 0;
  403df4:	2300      	movs	r3, #0
}
  403df6:	4618      	mov	r0, r3
  403df8:	3710      	adds	r7, #16
  403dfa:	46bd      	mov	sp, r7
  403dfc:	bd80      	pop	{r7, pc}
  403dfe:	bf00      	nop
  403e00:	00403d29 	.word	0x00403d29
  403e04:	20000c90 	.word	0x20000c90
  403e08:	00403ca1 	.word	0x00403ca1

00403e0c <usart_init_rs485>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs485(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  403e0c:	b580      	push	{r7, lr}
  403e0e:	b084      	sub	sp, #16
  403e10:	af00      	add	r7, sp, #0
  403e12:	60f8      	str	r0, [r7, #12]
  403e14:	60b9      	str	r1, [r7, #8]
  403e16:	607a      	str	r2, [r7, #4]
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  403e18:	687a      	ldr	r2, [r7, #4]
  403e1a:	68b9      	ldr	r1, [r7, #8]
  403e1c:	68f8      	ldr	r0, [r7, #12]
  403e1e:	4b0a      	ldr	r3, [pc, #40]	; (403e48 <usart_init_rs485+0x3c>)
  403e20:	4798      	blx	r3
  403e22:	4603      	mov	r3, r0
  403e24:	2b00      	cmp	r3, #0
  403e26:	d001      	beq.n	403e2c <usart_init_rs485+0x20>
		return 1;
  403e28:	2301      	movs	r3, #1
  403e2a:	e008      	b.n	403e3e <usart_init_rs485+0x32>
	}

	/* Set RS485 mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  403e2c:	68fb      	ldr	r3, [r7, #12]
  403e2e:	685b      	ldr	r3, [r3, #4]
  403e30:	f023 030f 	bic.w	r3, r3, #15
  403e34:	f043 0201 	orr.w	r2, r3, #1
  403e38:	68fb      	ldr	r3, [r7, #12]
  403e3a:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_RS485;

	return 0;
  403e3c:	2300      	movs	r3, #0
}
  403e3e:	4618      	mov	r0, r3
  403e40:	3710      	adds	r7, #16
  403e42:	46bd      	mov	sp, r7
  403e44:	bd80      	pop	{r7, pc}
  403e46:	bf00      	nop
  403e48:	00403d89 	.word	0x00403d89

00403e4c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  403e4c:	b480      	push	{r7}
  403e4e:	b083      	sub	sp, #12
  403e50:	af00      	add	r7, sp, #0
  403e52:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  403e54:	687b      	ldr	r3, [r7, #4]
  403e56:	2240      	movs	r2, #64	; 0x40
  403e58:	601a      	str	r2, [r3, #0]
}
  403e5a:	bf00      	nop
  403e5c:	370c      	adds	r7, #12
  403e5e:	46bd      	mov	sp, r7
  403e60:	bc80      	pop	{r7}
  403e62:	4770      	bx	lr

00403e64 <usart_disable_tx>:
 * \brief Disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
  403e64:	b480      	push	{r7}
  403e66:	b083      	sub	sp, #12
  403e68:	af00      	add	r7, sp, #0
  403e6a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXDIS;
  403e6c:	687b      	ldr	r3, [r7, #4]
  403e6e:	2280      	movs	r2, #128	; 0x80
  403e70:	601a      	str	r2, [r3, #0]
}
  403e72:	bf00      	nop
  403e74:	370c      	adds	r7, #12
  403e76:	46bd      	mov	sp, r7
  403e78:	bc80      	pop	{r7}
  403e7a:	4770      	bx	lr

00403e7c <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  403e7c:	b480      	push	{r7}
  403e7e:	b083      	sub	sp, #12
  403e80:	af00      	add	r7, sp, #0
  403e82:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  403e84:	687b      	ldr	r3, [r7, #4]
  403e86:	2288      	movs	r2, #136	; 0x88
  403e88:	601a      	str	r2, [r3, #0]
}
  403e8a:	bf00      	nop
  403e8c:	370c      	adds	r7, #12
  403e8e:	46bd      	mov	sp, r7
  403e90:	bc80      	pop	{r7}
  403e92:	4770      	bx	lr

00403e94 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  403e94:	b480      	push	{r7}
  403e96:	b083      	sub	sp, #12
  403e98:	af00      	add	r7, sp, #0
  403e9a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  403e9c:	687b      	ldr	r3, [r7, #4]
  403e9e:	2210      	movs	r2, #16
  403ea0:	601a      	str	r2, [r3, #0]
}
  403ea2:	bf00      	nop
  403ea4:	370c      	adds	r7, #12
  403ea6:	46bd      	mov	sp, r7
  403ea8:	bc80      	pop	{r7}
  403eaa:	4770      	bx	lr

00403eac <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
  403eac:	b480      	push	{r7}
  403eae:	b083      	sub	sp, #12
  403eb0:	af00      	add	r7, sp, #0
  403eb2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
  403eb4:	687b      	ldr	r3, [r7, #4]
  403eb6:	2220      	movs	r2, #32
  403eb8:	601a      	str	r2, [r3, #0]
}
  403eba:	bf00      	nop
  403ebc:	370c      	adds	r7, #12
  403ebe:	46bd      	mov	sp, r7
  403ec0:	bc80      	pop	{r7}
  403ec2:	4770      	bx	lr

00403ec4 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  403ec4:	b480      	push	{r7}
  403ec6:	b083      	sub	sp, #12
  403ec8:	af00      	add	r7, sp, #0
  403eca:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  403ecc:	687b      	ldr	r3, [r7, #4]
  403ece:	2224      	movs	r2, #36	; 0x24
  403ed0:	601a      	str	r2, [r3, #0]
}
  403ed2:	bf00      	nop
  403ed4:	370c      	adds	r7, #12
  403ed6:	46bd      	mov	sp, r7
  403ed8:	bc80      	pop	{r7}
  403eda:	4770      	bx	lr

00403edc <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  403edc:	b480      	push	{r7}
  403ede:	b083      	sub	sp, #12
  403ee0:	af00      	add	r7, sp, #0
  403ee2:	6078      	str	r0, [r7, #4]
  403ee4:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  403ee6:	687b      	ldr	r3, [r7, #4]
  403ee8:	683a      	ldr	r2, [r7, #0]
  403eea:	609a      	str	r2, [r3, #8]
}
  403eec:	bf00      	nop
  403eee:	370c      	adds	r7, #12
  403ef0:	46bd      	mov	sp, r7
  403ef2:	bc80      	pop	{r7}
  403ef4:	4770      	bx	lr
  403ef6:	bf00      	nop

00403ef8 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  403ef8:	b480      	push	{r7}
  403efa:	b083      	sub	sp, #12
  403efc:	af00      	add	r7, sp, #0
  403efe:	6078      	str	r0, [r7, #4]
  403f00:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  403f02:	687b      	ldr	r3, [r7, #4]
  403f04:	683a      	ldr	r2, [r7, #0]
  403f06:	60da      	str	r2, [r3, #12]
}
  403f08:	bf00      	nop
  403f0a:	370c      	adds	r7, #12
  403f0c:	46bd      	mov	sp, r7
  403f0e:	bc80      	pop	{r7}
  403f10:	4770      	bx	lr
  403f12:	bf00      	nop

00403f14 <usart_get_interrupt_mask>:
 * \param p_usart Pointer to a USART peripheral.
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
  403f14:	b480      	push	{r7}
  403f16:	b083      	sub	sp, #12
  403f18:	af00      	add	r7, sp, #0
  403f1a:	6078      	str	r0, [r7, #4]
	return p_usart->US_IMR;
  403f1c:	687b      	ldr	r3, [r7, #4]
  403f1e:	691b      	ldr	r3, [r3, #16]
}
  403f20:	4618      	mov	r0, r3
  403f22:	370c      	adds	r7, #12
  403f24:	46bd      	mov	sp, r7
  403f26:	bc80      	pop	{r7}
  403f28:	4770      	bx	lr
  403f2a:	bf00      	nop

00403f2c <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  403f2c:	b480      	push	{r7}
  403f2e:	b083      	sub	sp, #12
  403f30:	af00      	add	r7, sp, #0
  403f32:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  403f34:	687b      	ldr	r3, [r7, #4]
  403f36:	695b      	ldr	r3, [r3, #20]
}
  403f38:	4618      	mov	r0, r3
  403f3a:	370c      	adds	r7, #12
  403f3c:	46bd      	mov	sp, r7
  403f3e:	bc80      	pop	{r7}
  403f40:	4770      	bx	lr
  403f42:	bf00      	nop

00403f44 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  403f44:	b480      	push	{r7}
  403f46:	b083      	sub	sp, #12
  403f48:	af00      	add	r7, sp, #0
  403f4a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  403f4c:	687b      	ldr	r3, [r7, #4]
  403f4e:	f44f 7280 	mov.w	r2, #256	; 0x100
  403f52:	601a      	str	r2, [r3, #0]
}
  403f54:	bf00      	nop
  403f56:	370c      	adds	r7, #12
  403f58:	46bd      	mov	sp, r7
  403f5a:	bc80      	pop	{r7}
  403f5c:	4770      	bx	lr
  403f5e:	bf00      	nop

00403f60 <usart_start_rx_timeout>:
 * Reset the status bit TIMEOUT in US_CSR.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_start_rx_timeout(Usart *p_usart)
{
  403f60:	b480      	push	{r7}
  403f62:	b083      	sub	sp, #12
  403f64:	af00      	add	r7, sp, #0
  403f66:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_STTTO;
  403f68:	687b      	ldr	r3, [r7, #4]
  403f6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  403f6e:	601a      	str	r2, [r3, #0]
}
  403f70:	bf00      	nop
  403f72:	370c      	adds	r7, #12
  403f74:	46bd      	mov	sp, r7
  403f76:	bc80      	pop	{r7}
  403f78:	4770      	bx	lr
  403f7a:	bf00      	nop

00403f7c <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  403f7c:	b480      	push	{r7}
  403f7e:	b083      	sub	sp, #12
  403f80:	af00      	add	r7, sp, #0
  403f82:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  403f84:	687b      	ldr	r3, [r7, #4]
  403f86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  403f8a:	601a      	str	r2, [r3, #0]
}
  403f8c:	bf00      	nop
  403f8e:	370c      	adds	r7, #12
  403f90:	46bd      	mov	sp, r7
  403f92:	bc80      	pop	{r7}
  403f94:	4770      	bx	lr
  403f96:	bf00      	nop

00403f98 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  403f98:	b480      	push	{r7}
  403f9a:	b083      	sub	sp, #12
  403f9c:	af00      	add	r7, sp, #0
  403f9e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  403fa0:	687b      	ldr	r3, [r7, #4]
  403fa2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  403fa6:	601a      	str	r2, [r3, #0]
}
  403fa8:	bf00      	nop
  403faa:	370c      	adds	r7, #12
  403fac:	46bd      	mov	sp, r7
  403fae:	bc80      	pop	{r7}
  403fb0:	4770      	bx	lr
  403fb2:	bf00      	nop

00403fb4 <usart_get_pdc_base>:
 * \param p_usart Pointer to a UART instance.
 *
 * \return USART PDC registers base for PDC driver to access.
 */
Pdc *usart_get_pdc_base(Usart *p_usart)
{
  403fb4:	b480      	push	{r7}
  403fb6:	b085      	sub	sp, #20
  403fb8:	af00      	add	r7, sp, #0
  403fba:	6078      	str	r0, [r7, #4]
	Pdc *p_pdc_base;

	p_pdc_base = (Pdc *)NULL;
  403fbc:	2300      	movs	r3, #0
  403fbe:	60fb      	str	r3, [r7, #12]
		p_pdc_base = PDC_USART;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
  403fc0:	687b      	ldr	r3, [r7, #4]
  403fc2:	4a0a      	ldr	r2, [pc, #40]	; (403fec <usart_get_pdc_base+0x38>)
  403fc4:	4293      	cmp	r3, r2
  403fc6:	d103      	bne.n	403fd0 <usart_get_pdc_base+0x1c>
		p_pdc_base = PDC_USART0;
  403fc8:	4b09      	ldr	r3, [pc, #36]	; (403ff0 <usart_get_pdc_base+0x3c>)
  403fca:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  403fcc:	68fb      	ldr	r3, [r7, #12]
  403fce:	e008      	b.n	403fe2 <usart_get_pdc_base+0x2e>
	}
#endif
#ifdef PDC_USART1
	else if (p_usart == USART1) {
  403fd0:	687b      	ldr	r3, [r7, #4]
  403fd2:	4a08      	ldr	r2, [pc, #32]	; (403ff4 <usart_get_pdc_base+0x40>)
  403fd4:	4293      	cmp	r3, r2
  403fd6:	d103      	bne.n	403fe0 <usart_get_pdc_base+0x2c>
		p_pdc_base = PDC_USART1;
  403fd8:	4b07      	ldr	r3, [pc, #28]	; (403ff8 <usart_get_pdc_base+0x44>)
  403fda:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  403fdc:	68fb      	ldr	r3, [r7, #12]
  403fde:	e000      	b.n	403fe2 <usart_get_pdc_base+0x2e>
		p_pdc_base = PDC_USART7;
		return p_pdc_base;
	}
#endif

	return p_pdc_base;
  403fe0:	68fb      	ldr	r3, [r7, #12]
}
  403fe2:	4618      	mov	r0, r3
  403fe4:	3714      	adds	r7, #20
  403fe6:	46bd      	mov	sp, r7
  403fe8:	bc80      	pop	{r7}
  403fea:	4770      	bx	lr
  403fec:	40024000 	.word	0x40024000
  403ff0:	40024100 	.word	0x40024100
  403ff4:	40028000 	.word	0x40028000
  403ff8:	40028100 	.word	0x40028100

00403ffc <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  403ffc:	b480      	push	{r7}
  403ffe:	b083      	sub	sp, #12
  404000:	af00      	add	r7, sp, #0
  404002:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  404004:	687b      	ldr	r3, [r7, #4]
  404006:	4a04      	ldr	r2, [pc, #16]	; (404018 <usart_disable_writeprotect+0x1c>)
  404008:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  40400c:	bf00      	nop
  40400e:	370c      	adds	r7, #12
  404010:	46bd      	mov	sp, r7
  404012:	bc80      	pop	{r7}
  404014:	4770      	bx	lr
  404016:	bf00      	nop
  404018:	55534100 	.word	0x55534100

0040401c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  40401c:	b480      	push	{r7}
  40401e:	b083      	sub	sp, #12
  404020:	af00      	add	r7, sp, #0
  404022:	4603      	mov	r3, r0
  404024:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  404026:	4908      	ldr	r1, [pc, #32]	; (404048 <NVIC_EnableIRQ+0x2c>)
  404028:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40402c:	095b      	lsrs	r3, r3, #5
  40402e:	79fa      	ldrb	r2, [r7, #7]
  404030:	f002 021f 	and.w	r2, r2, #31
  404034:	2001      	movs	r0, #1
  404036:	fa00 f202 	lsl.w	r2, r0, r2
  40403a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40403e:	bf00      	nop
  404040:	370c      	adds	r7, #12
  404042:	46bd      	mov	sp, r7
  404044:	bc80      	pop	{r7}
  404046:	4770      	bx	lr
  404048:	e000e100 	.word	0xe000e100

0040404c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  40404c:	b580      	push	{r7, lr}
  40404e:	b082      	sub	sp, #8
  404050:	af00      	add	r7, sp, #0
  404052:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  404054:	6878      	ldr	r0, [r7, #4]
  404056:	4b03      	ldr	r3, [pc, #12]	; (404064 <sysclk_enable_peripheral_clock+0x18>)
  404058:	4798      	blx	r3
}
  40405a:	bf00      	nop
  40405c:	3708      	adds	r7, #8
  40405e:	46bd      	mov	sp, r7
  404060:	bd80      	pop	{r7, pc}
  404062:	bf00      	nop
  404064:	00405075 	.word	0x00405075

00404068 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  404068:	b580      	push	{r7, lr}
  40406a:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  40406c:	200b      	movs	r0, #11
  40406e:	4b03      	ldr	r3, [pc, #12]	; (40407c <ioport_init+0x14>)
  404070:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  404072:	200c      	movs	r0, #12
  404074:	4b01      	ldr	r3, [pc, #4]	; (40407c <ioport_init+0x14>)
  404076:	4798      	blx	r3
	arch_ioport_init();
}
  404078:	bf00      	nop
  40407a:	bd80      	pop	{r7, pc}
  40407c:	0040404d 	.word	0x0040404d

00404080 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  404080:	b590      	push	{r4, r7, lr}
  404082:	b083      	sub	sp, #12
  404084:	af02      	add	r7, sp, #8
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */

	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  404086:	4b2d      	ldr	r3, [pc, #180]	; (40413c <board_init+0xbc>)
  404088:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40408c:	605a      	str	r2, [r3, #4]

	/* Init IO Port service to enable configuring pins */
	ioport_init();
  40408e:	4b2c      	ldr	r3, [pc, #176]	; (404140 <board_init+0xc0>)
  404090:	4798      	blx	r3

	/* Configure USART0 Pins (RS485, MODBUS) */
	gpio_configure_group(PINS_USART0_PIO, PINS_USART0, PINS_USART0_FLAGS);
  404092:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  404096:	2160      	movs	r1, #96	; 0x60
  404098:	482a      	ldr	r0, [pc, #168]	; (404144 <board_init+0xc4>)
  40409a:	4b2b      	ldr	r3, [pc, #172]	; (404148 <board_init+0xc8>)
  40409c:	4798      	blx	r3

	/* Configure USART1 Pins (XBee) */
	gpio_configure_group(PINS_USART1_PIO, PINS_USART1, PINS_USART1_FLAGS);
  40409e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4040a2:	f04f 71b0 	mov.w	r1, #23068672	; 0x1600000
  4040a6:	4827      	ldr	r0, [pc, #156]	; (404144 <board_init+0xc4>)
  4040a8:	4b27      	ldr	r3, [pc, #156]	; (404148 <board_init+0xc8>)
  4040aa:	4798      	blx	r3

	/* Configure UART0 Pins (Console) */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  4040ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4040b0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  4040b4:	4823      	ldr	r0, [pc, #140]	; (404144 <board_init+0xc4>)
  4040b6:	4b24      	ldr	r3, [pc, #144]	; (404148 <board_init+0xc8>)
  4040b8:	4798      	blx	r3
	
	/* Configure TWI0 Pins */
	gpio_configure_group(PINS_TWI0_PIO, PINS_TWI0, PINS_TWI0_FLAGS);
  4040ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4040be:	2118      	movs	r1, #24
  4040c0:	4820      	ldr	r0, [pc, #128]	; (404144 <board_init+0xc4>)
  4040c2:	4b21      	ldr	r3, [pc, #132]	; (404148 <board_init+0xc8>)
  4040c4:	4798      	blx	r3

	/* Configure Motor Controller Pins */
	#ifndef MOTOR_CTRL_A4955
	#else
		gpio_configure_pin(PIN_MOTOR_IN1_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  4040c6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4040ca:	2020      	movs	r0, #32
  4040cc:	4b1f      	ldr	r3, [pc, #124]	; (40414c <board_init+0xcc>)
  4040ce:	4798      	blx	r3
		gpio_configure_pin(PIN_MOTOR_IN2_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  4040d0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4040d4:	2021      	movs	r0, #33	; 0x21
  4040d6:	4b1d      	ldr	r3, [pc, #116]	; (40414c <board_init+0xcc>)
  4040d8:	4798      	blx	r3
		gpio_configure_pin(PIN_MOTOR_SLP_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  4040da:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4040de:	2022      	movs	r0, #34	; 0x22
  4040e0:	4b1a      	ldr	r3, [pc, #104]	; (40414c <board_init+0xcc>)
  4040e2:	4798      	blx	r3
		gpio_configure_pin(PIN_MOTOR_OCL_IDX, (PIO_INPUT | PIO_OPENDRAIN));
  4040e4:	491a      	ldr	r1, [pc, #104]	; (404150 <board_init+0xd0>)
  4040e6:	2023      	movs	r0, #35	; 0x23
  4040e8:	4b18      	ldr	r3, [pc, #96]	; (40414c <board_init+0xcc>)
  4040ea:	4798      	blx	r3
	#endif

	/* Configure LED Pins */
	gpio_configure_pin(PIN_DEBUGLED_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  4040ec:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4040f0:	2010      	movs	r0, #16
  4040f2:	4b16      	ldr	r3, [pc, #88]	; (40414c <board_init+0xcc>)
  4040f4:	4798      	blx	r3

	/* Configure LDO EN Pin */
	gpio_configure_pin(PIN_LDOEN_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  4040f6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4040fa:	2001      	movs	r0, #1
  4040fc:	4b13      	ldr	r3, [pc, #76]	; (40414c <board_init+0xcc>)
  4040fe:	4798      	blx	r3
	
	/* Configure RTC 1 min Interrupt Pin */
	gpio_configure_pin(PIN_RTC_INT_IDX, PIO_INPUT);
  404100:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  404104:	2000      	movs	r0, #0
  404106:	4b11      	ldr	r3, [pc, #68]	; (40414c <board_init+0xcc>)
  404108:	4798      	blx	r3

	/* Initialize PIOs interrupt handlers (see PIO definition in board.h). */
	pio_handler_set(PIN_RTC_INT_PIO, PIN_RTC_INT_PIO_ID, PIN_RTC_INT_MASK, (PIO_OPENDRAIN | PIO_IT_FALL_EDGE), RTCIntHandler);
  40410a:	4b12      	ldr	r3, [pc, #72]	; (404154 <board_init+0xd4>)
  40410c:	9300      	str	r3, [sp, #0]
  40410e:	2354      	movs	r3, #84	; 0x54
  404110:	2201      	movs	r2, #1
  404112:	210b      	movs	r1, #11
  404114:	480b      	ldr	r0, [pc, #44]	; (404144 <board_init+0xc4>)
  404116:	4c10      	ldr	r4, [pc, #64]	; (404158 <board_init+0xd8>)
  404118:	47a0      	blx	r4

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type) PIN_RTC_INT_PIO_ID);
  40411a:	200b      	movs	r0, #11
  40411c:	4b0f      	ldr	r3, [pc, #60]	; (40415c <board_init+0xdc>)
  40411e:	4798      	blx	r3

	/* Set RTC Int Priority */
	pio_handler_set_priority(PIN_RTC_INT_PIO, (IRQn_Type) PIN_RTC_INT_PIO_ID, configLIBRARY_LOWEST_INTERRUPT_PRIORITY);
  404120:	220f      	movs	r2, #15
  404122:	210b      	movs	r1, #11
  404124:	4807      	ldr	r0, [pc, #28]	; (404144 <board_init+0xc4>)
  404126:	4b0e      	ldr	r3, [pc, #56]	; (404160 <board_init+0xe0>)
  404128:	4798      	blx	r3
	
	/* Enable PIO line interrupts. */
	pio_enable_interrupt(PIN_RTC_INT_PIO, PIN_RTC_INT_MASK);
  40412a:	2101      	movs	r1, #1
  40412c:	4805      	ldr	r0, [pc, #20]	; (404144 <board_init+0xc4>)
  40412e:	4b0d      	ldr	r3, [pc, #52]	; (404164 <board_init+0xe4>)
  404130:	4798      	blx	r3
}
  404132:	bf00      	nop
  404134:	3704      	adds	r7, #4
  404136:	46bd      	mov	sp, r7
  404138:	bd90      	pop	{r4, r7, pc}
  40413a:	bf00      	nop
  40413c:	400e1450 	.word	0x400e1450
  404140:	00404069 	.word	0x00404069
  404144:	400e0e00 	.word	0x400e0e00
  404148:	004049c5 	.word	0x004049c5
  40414c:	00404815 	.word	0x00404815
  404150:	28000004 	.word	0x28000004
  404154:	00401309 	.word	0x00401309
  404158:	00404cd5 	.word	0x00404cd5
  40415c:	0040401d 	.word	0x0040401d
  404160:	00404da5 	.word	0x00404da5
  404164:	0040474d 	.word	0x0040474d

00404168 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  404168:	b580      	push	{r7, lr}
  40416a:	b082      	sub	sp, #8
  40416c:	af00      	add	r7, sp, #0
  40416e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  404170:	687b      	ldr	r3, [r7, #4]
  404172:	2b07      	cmp	r3, #7
  404174:	d831      	bhi.n	4041da <osc_enable+0x72>
  404176:	a201      	add	r2, pc, #4	; (adr r2, 40417c <osc_enable+0x14>)
  404178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40417c:	004041d9 	.word	0x004041d9
  404180:	0040419d 	.word	0x0040419d
  404184:	004041a5 	.word	0x004041a5
  404188:	004041ad 	.word	0x004041ad
  40418c:	004041b5 	.word	0x004041b5
  404190:	004041bd 	.word	0x004041bd
  404194:	004041c5 	.word	0x004041c5
  404198:	004041cf 	.word	0x004041cf
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  40419c:	2000      	movs	r0, #0
  40419e:	4b11      	ldr	r3, [pc, #68]	; (4041e4 <osc_enable+0x7c>)
  4041a0:	4798      	blx	r3
		break;
  4041a2:	e01a      	b.n	4041da <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4041a4:	2001      	movs	r0, #1
  4041a6:	4b0f      	ldr	r3, [pc, #60]	; (4041e4 <osc_enable+0x7c>)
  4041a8:	4798      	blx	r3
		break;
  4041aa:	e016      	b.n	4041da <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4041ac:	2000      	movs	r0, #0
  4041ae:	4b0e      	ldr	r3, [pc, #56]	; (4041e8 <osc_enable+0x80>)
  4041b0:	4798      	blx	r3
		break;
  4041b2:	e012      	b.n	4041da <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4041b4:	2010      	movs	r0, #16
  4041b6:	4b0c      	ldr	r3, [pc, #48]	; (4041e8 <osc_enable+0x80>)
  4041b8:	4798      	blx	r3
		break;
  4041ba:	e00e      	b.n	4041da <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4041bc:	2020      	movs	r0, #32
  4041be:	4b0a      	ldr	r3, [pc, #40]	; (4041e8 <osc_enable+0x80>)
  4041c0:	4798      	blx	r3
		break;
  4041c2:	e00a      	b.n	4041da <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4041c4:	213e      	movs	r1, #62	; 0x3e
  4041c6:	2000      	movs	r0, #0
  4041c8:	4b08      	ldr	r3, [pc, #32]	; (4041ec <osc_enable+0x84>)
  4041ca:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  4041cc:	e005      	b.n	4041da <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  4041ce:	213e      	movs	r1, #62	; 0x3e
  4041d0:	2001      	movs	r0, #1
  4041d2:	4b06      	ldr	r3, [pc, #24]	; (4041ec <osc_enable+0x84>)
  4041d4:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  4041d6:	e000      	b.n	4041da <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  4041d8:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  4041da:	bf00      	nop
  4041dc:	3708      	adds	r7, #8
  4041de:	46bd      	mov	sp, r7
  4041e0:	bd80      	pop	{r7, pc}
  4041e2:	bf00      	nop
  4041e4:	00404ea9 	.word	0x00404ea9
  4041e8:	00404f15 	.word	0x00404f15
  4041ec:	00404f85 	.word	0x00404f85

004041f0 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  4041f0:	b580      	push	{r7, lr}
  4041f2:	b082      	sub	sp, #8
  4041f4:	af00      	add	r7, sp, #0
  4041f6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4041f8:	687b      	ldr	r3, [r7, #4]
  4041fa:	2b07      	cmp	r3, #7
  4041fc:	d826      	bhi.n	40424c <osc_is_ready+0x5c>
  4041fe:	a201      	add	r2, pc, #4	; (adr r2, 404204 <osc_is_ready+0x14>)
  404200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404204:	00404225 	.word	0x00404225
  404208:	00404229 	.word	0x00404229
  40420c:	00404229 	.word	0x00404229
  404210:	0040423b 	.word	0x0040423b
  404214:	0040423b 	.word	0x0040423b
  404218:	0040423b 	.word	0x0040423b
  40421c:	0040423b 	.word	0x0040423b
  404220:	0040423b 	.word	0x0040423b
	case OSC_SLCK_32K_RC:
		return 1;
  404224:	2301      	movs	r3, #1
  404226:	e012      	b.n	40424e <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  404228:	4b0b      	ldr	r3, [pc, #44]	; (404258 <osc_is_ready+0x68>)
  40422a:	4798      	blx	r3
  40422c:	4603      	mov	r3, r0
  40422e:	2b00      	cmp	r3, #0
  404230:	bf14      	ite	ne
  404232:	2301      	movne	r3, #1
  404234:	2300      	moveq	r3, #0
  404236:	b2db      	uxtb	r3, r3
  404238:	e009      	b.n	40424e <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40423a:	4b08      	ldr	r3, [pc, #32]	; (40425c <osc_is_ready+0x6c>)
  40423c:	4798      	blx	r3
  40423e:	4603      	mov	r3, r0
  404240:	2b00      	cmp	r3, #0
  404242:	bf14      	ite	ne
  404244:	2301      	movne	r3, #1
  404246:	2300      	moveq	r3, #0
  404248:	b2db      	uxtb	r3, r3
  40424a:	e000      	b.n	40424e <osc_is_ready+0x5e>
	}

	return 0;
  40424c:	2300      	movs	r3, #0
}
  40424e:	4618      	mov	r0, r3
  404250:	3708      	adds	r7, #8
  404252:	46bd      	mov	sp, r7
  404254:	bd80      	pop	{r7, pc}
  404256:	bf00      	nop
  404258:	00404ee1 	.word	0x00404ee1
  40425c:	00404ffd 	.word	0x00404ffd

00404260 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  404260:	b480      	push	{r7}
  404262:	b083      	sub	sp, #12
  404264:	af00      	add	r7, sp, #0
  404266:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  404268:	687b      	ldr	r3, [r7, #4]
  40426a:	2b07      	cmp	r3, #7
  40426c:	d825      	bhi.n	4042ba <osc_get_rate+0x5a>
  40426e:	a201      	add	r2, pc, #4	; (adr r2, 404274 <osc_get_rate+0x14>)
  404270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404274:	00404295 	.word	0x00404295
  404278:	0040429b 	.word	0x0040429b
  40427c:	004042a1 	.word	0x004042a1
  404280:	004042a7 	.word	0x004042a7
  404284:	004042ab 	.word	0x004042ab
  404288:	004042af 	.word	0x004042af
  40428c:	004042b3 	.word	0x004042b3
  404290:	004042b7 	.word	0x004042b7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  404294:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  404298:	e010      	b.n	4042bc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40429a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40429e:	e00d      	b.n	4042bc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4042a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4042a4:	e00a      	b.n	4042bc <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4042a6:	4b08      	ldr	r3, [pc, #32]	; (4042c8 <osc_get_rate+0x68>)
  4042a8:	e008      	b.n	4042bc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4042aa:	4b08      	ldr	r3, [pc, #32]	; (4042cc <osc_get_rate+0x6c>)
  4042ac:	e006      	b.n	4042bc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4042ae:	4b08      	ldr	r3, [pc, #32]	; (4042d0 <osc_get_rate+0x70>)
  4042b0:	e004      	b.n	4042bc <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4042b2:	4b07      	ldr	r3, [pc, #28]	; (4042d0 <osc_get_rate+0x70>)
  4042b4:	e002      	b.n	4042bc <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4042b6:	4b06      	ldr	r3, [pc, #24]	; (4042d0 <osc_get_rate+0x70>)
  4042b8:	e000      	b.n	4042bc <osc_get_rate+0x5c>
	}

	return 0;
  4042ba:	2300      	movs	r3, #0
}
  4042bc:	4618      	mov	r0, r3
  4042be:	370c      	adds	r7, #12
  4042c0:	46bd      	mov	sp, r7
  4042c2:	bc80      	pop	{r7}
  4042c4:	4770      	bx	lr
  4042c6:	bf00      	nop
  4042c8:	003d0900 	.word	0x003d0900
  4042cc:	007a1200 	.word	0x007a1200
  4042d0:	00b71b00 	.word	0x00b71b00

004042d4 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  4042d4:	b580      	push	{r7, lr}
  4042d6:	b082      	sub	sp, #8
  4042d8:	af00      	add	r7, sp, #0
  4042da:	4603      	mov	r3, r0
  4042dc:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  4042de:	bf00      	nop
  4042e0:	79fb      	ldrb	r3, [r7, #7]
  4042e2:	4618      	mov	r0, r3
  4042e4:	4b05      	ldr	r3, [pc, #20]	; (4042fc <osc_wait_ready+0x28>)
  4042e6:	4798      	blx	r3
  4042e8:	4603      	mov	r3, r0
  4042ea:	f083 0301 	eor.w	r3, r3, #1
  4042ee:	b2db      	uxtb	r3, r3
  4042f0:	2b00      	cmp	r3, #0
  4042f2:	d1f5      	bne.n	4042e0 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  4042f4:	bf00      	nop
  4042f6:	3708      	adds	r7, #8
  4042f8:	46bd      	mov	sp, r7
  4042fa:	bd80      	pop	{r7, pc}
  4042fc:	004041f1 	.word	0x004041f1

00404300 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  404300:	b580      	push	{r7, lr}
  404302:	b086      	sub	sp, #24
  404304:	af00      	add	r7, sp, #0
  404306:	60f8      	str	r0, [r7, #12]
  404308:	607a      	str	r2, [r7, #4]
  40430a:	603b      	str	r3, [r7, #0]
  40430c:	460b      	mov	r3, r1
  40430e:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  404310:	7afb      	ldrb	r3, [r7, #11]
  404312:	4618      	mov	r0, r3
  404314:	4b0d      	ldr	r3, [pc, #52]	; (40434c <pll_config_init+0x4c>)
  404316:	4798      	blx	r3
  404318:	4602      	mov	r2, r0
  40431a:	687b      	ldr	r3, [r7, #4]
  40431c:	fbb2 f3f3 	udiv	r3, r2, r3
  404320:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  404322:	697b      	ldr	r3, [r7, #20]
  404324:	683a      	ldr	r2, [r7, #0]
  404326:	fb02 f303 	mul.w	r3, r2, r3
  40432a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  40432c:	683b      	ldr	r3, [r7, #0]
  40432e:	3b01      	subs	r3, #1
  404330:	041a      	lsls	r2, r3, #16
  404332:	4b07      	ldr	r3, [pc, #28]	; (404350 <pll_config_init+0x50>)
  404334:	4013      	ands	r3, r2
  404336:	687a      	ldr	r2, [r7, #4]
  404338:	b2d2      	uxtb	r2, r2
  40433a:	4313      	orrs	r3, r2
  40433c:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  404340:	68fb      	ldr	r3, [r7, #12]
  404342:	601a      	str	r2, [r3, #0]
}
  404344:	bf00      	nop
  404346:	3718      	adds	r7, #24
  404348:	46bd      	mov	sp, r7
  40434a:	bd80      	pop	{r7, pc}
  40434c:	00404261 	.word	0x00404261
  404350:	07ff0000 	.word	0x07ff0000

00404354 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  404354:	b580      	push	{r7, lr}
  404356:	b082      	sub	sp, #8
  404358:	af00      	add	r7, sp, #0
  40435a:	6078      	str	r0, [r7, #4]
  40435c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40435e:	683b      	ldr	r3, [r7, #0]
  404360:	2b00      	cmp	r3, #0
  404362:	d108      	bne.n	404376 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  404364:	4b09      	ldr	r3, [pc, #36]	; (40438c <pll_enable+0x38>)
  404366:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  404368:	4a09      	ldr	r2, [pc, #36]	; (404390 <pll_enable+0x3c>)
  40436a:	687b      	ldr	r3, [r7, #4]
  40436c:	681b      	ldr	r3, [r3, #0]
  40436e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  404372:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  404374:	e005      	b.n	404382 <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  404376:	4b07      	ldr	r3, [pc, #28]	; (404394 <pll_enable+0x40>)
  404378:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  40437a:	4a05      	ldr	r2, [pc, #20]	; (404390 <pll_enable+0x3c>)
  40437c:	687b      	ldr	r3, [r7, #4]
  40437e:	681b      	ldr	r3, [r3, #0]
  404380:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
}
  404382:	bf00      	nop
  404384:	3708      	adds	r7, #8
  404386:	46bd      	mov	sp, r7
  404388:	bd80      	pop	{r7, pc}
  40438a:	bf00      	nop
  40438c:	00405015 	.word	0x00405015
  404390:	400e0400 	.word	0x400e0400
  404394:	00405045 	.word	0x00405045

00404398 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  404398:	b580      	push	{r7, lr}
  40439a:	b082      	sub	sp, #8
  40439c:	af00      	add	r7, sp, #0
  40439e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4043a0:	687b      	ldr	r3, [r7, #4]
  4043a2:	2b00      	cmp	r3, #0
  4043a4:	d103      	bne.n	4043ae <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  4043a6:	4b05      	ldr	r3, [pc, #20]	; (4043bc <pll_is_locked+0x24>)
  4043a8:	4798      	blx	r3
  4043aa:	4603      	mov	r3, r0
  4043ac:	e002      	b.n	4043b4 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  4043ae:	4b04      	ldr	r3, [pc, #16]	; (4043c0 <pll_is_locked+0x28>)
  4043b0:	4798      	blx	r3
  4043b2:	4603      	mov	r3, r0
	}
}
  4043b4:	4618      	mov	r0, r3
  4043b6:	3708      	adds	r7, #8
  4043b8:	46bd      	mov	sp, r7
  4043ba:	bd80      	pop	{r7, pc}
  4043bc:	0040502d 	.word	0x0040502d
  4043c0:	0040505d 	.word	0x0040505d

004043c4 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  4043c4:	b580      	push	{r7, lr}
  4043c6:	b082      	sub	sp, #8
  4043c8:	af00      	add	r7, sp, #0
  4043ca:	4603      	mov	r3, r0
  4043cc:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  4043ce:	79fb      	ldrb	r3, [r7, #7]
  4043d0:	3b03      	subs	r3, #3
  4043d2:	2b04      	cmp	r3, #4
  4043d4:	d808      	bhi.n	4043e8 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  4043d6:	79fb      	ldrb	r3, [r7, #7]
  4043d8:	4618      	mov	r0, r3
  4043da:	4b06      	ldr	r3, [pc, #24]	; (4043f4 <pll_enable_source+0x30>)
  4043dc:	4798      	blx	r3
		osc_wait_ready(e_src);
  4043de:	79fb      	ldrb	r3, [r7, #7]
  4043e0:	4618      	mov	r0, r3
  4043e2:	4b05      	ldr	r3, [pc, #20]	; (4043f8 <pll_enable_source+0x34>)
  4043e4:	4798      	blx	r3
		break;
  4043e6:	e000      	b.n	4043ea <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  4043e8:	bf00      	nop
	}
}
  4043ea:	bf00      	nop
  4043ec:	3708      	adds	r7, #8
  4043ee:	46bd      	mov	sp, r7
  4043f0:	bd80      	pop	{r7, pc}
  4043f2:	bf00      	nop
  4043f4:	00404169 	.word	0x00404169
  4043f8:	004042d5 	.word	0x004042d5

004043fc <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4043fc:	b580      	push	{r7, lr}
  4043fe:	b082      	sub	sp, #8
  404400:	af00      	add	r7, sp, #0
  404402:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  404404:	bf00      	nop
  404406:	6878      	ldr	r0, [r7, #4]
  404408:	4b04      	ldr	r3, [pc, #16]	; (40441c <pll_wait_for_lock+0x20>)
  40440a:	4798      	blx	r3
  40440c:	4603      	mov	r3, r0
  40440e:	2b00      	cmp	r3, #0
  404410:	d0f9      	beq.n	404406 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  404412:	2300      	movs	r3, #0
}
  404414:	4618      	mov	r0, r3
  404416:	3708      	adds	r7, #8
  404418:	46bd      	mov	sp, r7
  40441a:	bd80      	pop	{r7, pc}
  40441c:	00404399 	.word	0x00404399

00404420 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  404420:	b580      	push	{r7, lr}
  404422:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  404424:	2006      	movs	r0, #6
  404426:	4b04      	ldr	r3, [pc, #16]	; (404438 <sysclk_get_main_hz+0x18>)
  404428:	4798      	blx	r3
  40442a:	4602      	mov	r2, r0
  40442c:	4613      	mov	r3, r2
  40442e:	009b      	lsls	r3, r3, #2
  404430:	4413      	add	r3, r2
  404432:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  404434:	4618      	mov	r0, r3
  404436:	bd80      	pop	{r7, pc}
  404438:	00404261 	.word	0x00404261

0040443c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40443c:	b580      	push	{r7, lr}
  40443e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  404440:	4b02      	ldr	r3, [pc, #8]	; (40444c <sysclk_get_cpu_hz+0x10>)
  404442:	4798      	blx	r3
  404444:	4603      	mov	r3, r0
  404446:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  404448:	4618      	mov	r0, r3
  40444a:	bd80      	pop	{r7, pc}
  40444c:	00404421 	.word	0x00404421

00404450 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  404450:	b590      	push	{r4, r7, lr}
  404452:	b083      	sub	sp, #12
  404454:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  404456:	4811      	ldr	r0, [pc, #68]	; (40449c <sysclk_init+0x4c>)
  404458:	4b11      	ldr	r3, [pc, #68]	; (4044a0 <sysclk_init+0x50>)
  40445a:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  40445c:	2006      	movs	r0, #6
  40445e:	4b11      	ldr	r3, [pc, #68]	; (4044a4 <sysclk_init+0x54>)
  404460:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  404462:	1d38      	adds	r0, r7, #4
  404464:	2314      	movs	r3, #20
  404466:	2201      	movs	r2, #1
  404468:	2106      	movs	r1, #6
  40446a:	4c0f      	ldr	r4, [pc, #60]	; (4044a8 <sysclk_init+0x58>)
  40446c:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  40446e:	1d3b      	adds	r3, r7, #4
  404470:	2100      	movs	r1, #0
  404472:	4618      	mov	r0, r3
  404474:	4b0d      	ldr	r3, [pc, #52]	; (4044ac <sysclk_init+0x5c>)
  404476:	4798      	blx	r3
		pll_wait_for_lock(0);
  404478:	2000      	movs	r0, #0
  40447a:	4b0d      	ldr	r3, [pc, #52]	; (4044b0 <sysclk_init+0x60>)
  40447c:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40447e:	2010      	movs	r0, #16
  404480:	4b0c      	ldr	r3, [pc, #48]	; (4044b4 <sysclk_init+0x64>)
  404482:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  404484:	4b0c      	ldr	r3, [pc, #48]	; (4044b8 <sysclk_init+0x68>)
  404486:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  404488:	4b0c      	ldr	r3, [pc, #48]	; (4044bc <sysclk_init+0x6c>)
  40448a:	4798      	blx	r3
  40448c:	4603      	mov	r3, r0
  40448e:	4618      	mov	r0, r3
  404490:	4b03      	ldr	r3, [pc, #12]	; (4044a0 <sysclk_init+0x50>)
  404492:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  404494:	bf00      	nop
  404496:	370c      	adds	r7, #12
  404498:	46bd      	mov	sp, r7
  40449a:	bd90      	pop	{r4, r7, pc}
  40449c:	07270e00 	.word	0x07270e00
  4044a0:	00405361 	.word	0x00405361
  4044a4:	004043c5 	.word	0x004043c5
  4044a8:	00404301 	.word	0x00404301
  4044ac:	00404355 	.word	0x00404355
  4044b0:	004043fd 	.word	0x004043fd
  4044b4:	00404e29 	.word	0x00404e29
  4044b8:	004051c5 	.word	0x004051c5
  4044bc:	0040443d 	.word	0x0040443d

004044c0 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  4044c0:	b480      	push	{r7}
  4044c2:	b085      	sub	sp, #20
  4044c4:	af00      	add	r7, sp, #0
  4044c6:	60f8      	str	r0, [r7, #12]
  4044c8:	60b9      	str	r1, [r7, #8]
  4044ca:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4044cc:	687b      	ldr	r3, [r7, #4]
  4044ce:	2b00      	cmp	r3, #0
  4044d0:	d003      	beq.n	4044da <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  4044d2:	68fb      	ldr	r3, [r7, #12]
  4044d4:	68ba      	ldr	r2, [r7, #8]
  4044d6:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  4044d8:	e002      	b.n	4044e0 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4044da:	68fb      	ldr	r3, [r7, #12]
  4044dc:	68ba      	ldr	r2, [r7, #8]
  4044de:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  4044e0:	bf00      	nop
  4044e2:	3714      	adds	r7, #20
  4044e4:	46bd      	mov	sp, r7
  4044e6:	bc80      	pop	{r7}
  4044e8:	4770      	bx	lr
  4044ea:	bf00      	nop

004044ec <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4044ec:	b480      	push	{r7}
  4044ee:	b087      	sub	sp, #28
  4044f0:	af00      	add	r7, sp, #0
  4044f2:	60f8      	str	r0, [r7, #12]
  4044f4:	60b9      	str	r1, [r7, #8]
  4044f6:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4044f8:	68fb      	ldr	r3, [r7, #12]
  4044fa:	687a      	ldr	r2, [r7, #4]
  4044fc:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4044fe:	68bb      	ldr	r3, [r7, #8]
  404500:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  404504:	d04a      	beq.n	40459c <pio_set_peripheral+0xb0>
  404506:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40450a:	d808      	bhi.n	40451e <pio_set_peripheral+0x32>
  40450c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  404510:	d016      	beq.n	404540 <pio_set_peripheral+0x54>
  404512:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  404516:	d02c      	beq.n	404572 <pio_set_peripheral+0x86>
  404518:	2b00      	cmp	r3, #0
  40451a:	d069      	beq.n	4045f0 <pio_set_peripheral+0x104>
  40451c:	e064      	b.n	4045e8 <pio_set_peripheral+0xfc>
  40451e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  404522:	d065      	beq.n	4045f0 <pio_set_peripheral+0x104>
  404524:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  404528:	d803      	bhi.n	404532 <pio_set_peripheral+0x46>
  40452a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40452e:	d04a      	beq.n	4045c6 <pio_set_peripheral+0xda>
  404530:	e05a      	b.n	4045e8 <pio_set_peripheral+0xfc>
  404532:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  404536:	d05b      	beq.n	4045f0 <pio_set_peripheral+0x104>
  404538:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40453c:	d058      	beq.n	4045f0 <pio_set_peripheral+0x104>
  40453e:	e053      	b.n	4045e8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  404540:	68fb      	ldr	r3, [r7, #12]
  404542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  404544:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  404546:	68fb      	ldr	r3, [r7, #12]
  404548:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40454a:	687b      	ldr	r3, [r7, #4]
  40454c:	43d9      	mvns	r1, r3
  40454e:	697b      	ldr	r3, [r7, #20]
  404550:	400b      	ands	r3, r1
  404552:	401a      	ands	r2, r3
  404554:	68fb      	ldr	r3, [r7, #12]
  404556:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  404558:	68fb      	ldr	r3, [r7, #12]
  40455a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40455c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40455e:	68fb      	ldr	r3, [r7, #12]
  404560:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  404562:	687b      	ldr	r3, [r7, #4]
  404564:	43d9      	mvns	r1, r3
  404566:	697b      	ldr	r3, [r7, #20]
  404568:	400b      	ands	r3, r1
  40456a:	401a      	ands	r2, r3
  40456c:	68fb      	ldr	r3, [r7, #12]
  40456e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  404570:	e03a      	b.n	4045e8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  404572:	68fb      	ldr	r3, [r7, #12]
  404574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  404576:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  404578:	687a      	ldr	r2, [r7, #4]
  40457a:	697b      	ldr	r3, [r7, #20]
  40457c:	431a      	orrs	r2, r3
  40457e:	68fb      	ldr	r3, [r7, #12]
  404580:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  404582:	68fb      	ldr	r3, [r7, #12]
  404584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  404586:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  404588:	68fb      	ldr	r3, [r7, #12]
  40458a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40458c:	687b      	ldr	r3, [r7, #4]
  40458e:	43d9      	mvns	r1, r3
  404590:	697b      	ldr	r3, [r7, #20]
  404592:	400b      	ands	r3, r1
  404594:	401a      	ands	r2, r3
  404596:	68fb      	ldr	r3, [r7, #12]
  404598:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40459a:	e025      	b.n	4045e8 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40459c:	68fb      	ldr	r3, [r7, #12]
  40459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4045a0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4045a2:	68fb      	ldr	r3, [r7, #12]
  4045a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4045a6:	687b      	ldr	r3, [r7, #4]
  4045a8:	43d9      	mvns	r1, r3
  4045aa:	697b      	ldr	r3, [r7, #20]
  4045ac:	400b      	ands	r3, r1
  4045ae:	401a      	ands	r2, r3
  4045b0:	68fb      	ldr	r3, [r7, #12]
  4045b2:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4045b4:	68fb      	ldr	r3, [r7, #12]
  4045b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4045b8:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4045ba:	687a      	ldr	r2, [r7, #4]
  4045bc:	697b      	ldr	r3, [r7, #20]
  4045be:	431a      	orrs	r2, r3
  4045c0:	68fb      	ldr	r3, [r7, #12]
  4045c2:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4045c4:	e010      	b.n	4045e8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4045c6:	68fb      	ldr	r3, [r7, #12]
  4045c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4045ca:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4045cc:	687a      	ldr	r2, [r7, #4]
  4045ce:	697b      	ldr	r3, [r7, #20]
  4045d0:	431a      	orrs	r2, r3
  4045d2:	68fb      	ldr	r3, [r7, #12]
  4045d4:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4045d6:	68fb      	ldr	r3, [r7, #12]
  4045d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4045da:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4045dc:	687a      	ldr	r2, [r7, #4]
  4045de:	697b      	ldr	r3, [r7, #20]
  4045e0:	431a      	orrs	r2, r3
  4045e2:	68fb      	ldr	r3, [r7, #12]
  4045e4:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4045e6:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4045e8:	68fb      	ldr	r3, [r7, #12]
  4045ea:	687a      	ldr	r2, [r7, #4]
  4045ec:	605a      	str	r2, [r3, #4]
  4045ee:	e000      	b.n	4045f2 <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  4045f0:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  4045f2:	371c      	adds	r7, #28
  4045f4:	46bd      	mov	sp, r7
  4045f6:	bc80      	pop	{r7}
  4045f8:	4770      	bx	lr
  4045fa:	bf00      	nop

004045fc <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  4045fc:	b580      	push	{r7, lr}
  4045fe:	b084      	sub	sp, #16
  404600:	af00      	add	r7, sp, #0
  404602:	60f8      	str	r0, [r7, #12]
  404604:	60b9      	str	r1, [r7, #8]
  404606:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  404608:	68b9      	ldr	r1, [r7, #8]
  40460a:	68f8      	ldr	r0, [r7, #12]
  40460c:	4b19      	ldr	r3, [pc, #100]	; (404674 <pio_set_input+0x78>)
  40460e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  404610:	687b      	ldr	r3, [r7, #4]
  404612:	f003 0301 	and.w	r3, r3, #1
  404616:	461a      	mov	r2, r3
  404618:	68b9      	ldr	r1, [r7, #8]
  40461a:	68f8      	ldr	r0, [r7, #12]
  40461c:	4b16      	ldr	r3, [pc, #88]	; (404678 <pio_set_input+0x7c>)
  40461e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  404620:	687b      	ldr	r3, [r7, #4]
  404622:	f003 030a 	and.w	r3, r3, #10
  404626:	2b00      	cmp	r3, #0
  404628:	d003      	beq.n	404632 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  40462a:	68fb      	ldr	r3, [r7, #12]
  40462c:	68ba      	ldr	r2, [r7, #8]
  40462e:	621a      	str	r2, [r3, #32]
  404630:	e002      	b.n	404638 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  404632:	68fb      	ldr	r3, [r7, #12]
  404634:	68ba      	ldr	r2, [r7, #8]
  404636:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  404638:	687b      	ldr	r3, [r7, #4]
  40463a:	f003 0302 	and.w	r3, r3, #2
  40463e:	2b00      	cmp	r3, #0
  404640:	d004      	beq.n	40464c <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  404642:	68fb      	ldr	r3, [r7, #12]
  404644:	68ba      	ldr	r2, [r7, #8]
  404646:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40464a:	e008      	b.n	40465e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40464c:	687b      	ldr	r3, [r7, #4]
  40464e:	f003 0308 	and.w	r3, r3, #8
  404652:	2b00      	cmp	r3, #0
  404654:	d003      	beq.n	40465e <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  404656:	68fb      	ldr	r3, [r7, #12]
  404658:	68ba      	ldr	r2, [r7, #8]
  40465a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  40465e:	68fb      	ldr	r3, [r7, #12]
  404660:	68ba      	ldr	r2, [r7, #8]
  404662:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  404664:	68fb      	ldr	r3, [r7, #12]
  404666:	68ba      	ldr	r2, [r7, #8]
  404668:	601a      	str	r2, [r3, #0]
}
  40466a:	bf00      	nop
  40466c:	3710      	adds	r7, #16
  40466e:	46bd      	mov	sp, r7
  404670:	bd80      	pop	{r7, pc}
  404672:	bf00      	nop
  404674:	00404769 	.word	0x00404769
  404678:	004044c1 	.word	0x004044c1

0040467c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40467c:	b580      	push	{r7, lr}
  40467e:	b084      	sub	sp, #16
  404680:	af00      	add	r7, sp, #0
  404682:	60f8      	str	r0, [r7, #12]
  404684:	60b9      	str	r1, [r7, #8]
  404686:	607a      	str	r2, [r7, #4]
  404688:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40468a:	68b9      	ldr	r1, [r7, #8]
  40468c:	68f8      	ldr	r0, [r7, #12]
  40468e:	4b12      	ldr	r3, [pc, #72]	; (4046d8 <pio_set_output+0x5c>)
  404690:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  404692:	69ba      	ldr	r2, [r7, #24]
  404694:	68b9      	ldr	r1, [r7, #8]
  404696:	68f8      	ldr	r0, [r7, #12]
  404698:	4b10      	ldr	r3, [pc, #64]	; (4046dc <pio_set_output+0x60>)
  40469a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40469c:	683b      	ldr	r3, [r7, #0]
  40469e:	2b00      	cmp	r3, #0
  4046a0:	d003      	beq.n	4046aa <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  4046a2:	68fb      	ldr	r3, [r7, #12]
  4046a4:	68ba      	ldr	r2, [r7, #8]
  4046a6:	651a      	str	r2, [r3, #80]	; 0x50
  4046a8:	e002      	b.n	4046b0 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4046aa:	68fb      	ldr	r3, [r7, #12]
  4046ac:	68ba      	ldr	r2, [r7, #8]
  4046ae:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4046b0:	687b      	ldr	r3, [r7, #4]
  4046b2:	2b00      	cmp	r3, #0
  4046b4:	d003      	beq.n	4046be <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  4046b6:	68fb      	ldr	r3, [r7, #12]
  4046b8:	68ba      	ldr	r2, [r7, #8]
  4046ba:	631a      	str	r2, [r3, #48]	; 0x30
  4046bc:	e002      	b.n	4046c4 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4046be:	68fb      	ldr	r3, [r7, #12]
  4046c0:	68ba      	ldr	r2, [r7, #8]
  4046c2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4046c4:	68fb      	ldr	r3, [r7, #12]
  4046c6:	68ba      	ldr	r2, [r7, #8]
  4046c8:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  4046ca:	68fb      	ldr	r3, [r7, #12]
  4046cc:	68ba      	ldr	r2, [r7, #8]
  4046ce:	601a      	str	r2, [r3, #0]
}
  4046d0:	bf00      	nop
  4046d2:	3710      	adds	r7, #16
  4046d4:	46bd      	mov	sp, r7
  4046d6:	bd80      	pop	{r7, pc}
  4046d8:	00404769 	.word	0x00404769
  4046dc:	004044c1 	.word	0x004044c1

004046e0 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  4046e0:	b480      	push	{r7}
  4046e2:	b085      	sub	sp, #20
  4046e4:	af00      	add	r7, sp, #0
  4046e6:	60f8      	str	r0, [r7, #12]
  4046e8:	60b9      	str	r1, [r7, #8]
  4046ea:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  4046ec:	687b      	ldr	r3, [r7, #4]
  4046ee:	f003 0310 	and.w	r3, r3, #16
  4046f2:	2b00      	cmp	r3, #0
  4046f4:	d020      	beq.n	404738 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  4046f6:	68fb      	ldr	r3, [r7, #12]
  4046f8:	68ba      	ldr	r2, [r7, #8]
  4046fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4046fe:	687b      	ldr	r3, [r7, #4]
  404700:	f003 0320 	and.w	r3, r3, #32
  404704:	2b00      	cmp	r3, #0
  404706:	d004      	beq.n	404712 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  404708:	68fb      	ldr	r3, [r7, #12]
  40470a:	68ba      	ldr	r2, [r7, #8]
  40470c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  404710:	e003      	b.n	40471a <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  404712:	68fb      	ldr	r3, [r7, #12]
  404714:	68ba      	ldr	r2, [r7, #8]
  404716:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  40471a:	687b      	ldr	r3, [r7, #4]
  40471c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  404720:	2b00      	cmp	r3, #0
  404722:	d004      	beq.n	40472e <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  404724:	68fb      	ldr	r3, [r7, #12]
  404726:	68ba      	ldr	r2, [r7, #8]
  404728:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  40472c:	e008      	b.n	404740 <pio_configure_interrupt+0x60>
		if (ul_attr & PIO_IT_EDGE) {
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  40472e:	68fb      	ldr	r3, [r7, #12]
  404730:	68ba      	ldr	r2, [r7, #8]
  404732:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  404736:	e003      	b.n	404740 <pio_configure_interrupt+0x60>
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  404738:	68fb      	ldr	r3, [r7, #12]
  40473a:	68ba      	ldr	r2, [r7, #8]
  40473c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	}
}
  404740:	bf00      	nop
  404742:	3714      	adds	r7, #20
  404744:	46bd      	mov	sp, r7
  404746:	bc80      	pop	{r7}
  404748:	4770      	bx	lr
  40474a:	bf00      	nop

0040474c <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  40474c:	b480      	push	{r7}
  40474e:	b083      	sub	sp, #12
  404750:	af00      	add	r7, sp, #0
  404752:	6078      	str	r0, [r7, #4]
  404754:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  404756:	687b      	ldr	r3, [r7, #4]
  404758:	683a      	ldr	r2, [r7, #0]
  40475a:	641a      	str	r2, [r3, #64]	; 0x40
}
  40475c:	bf00      	nop
  40475e:	370c      	adds	r7, #12
  404760:	46bd      	mov	sp, r7
  404762:	bc80      	pop	{r7}
  404764:	4770      	bx	lr
  404766:	bf00      	nop

00404768 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  404768:	b480      	push	{r7}
  40476a:	b083      	sub	sp, #12
  40476c:	af00      	add	r7, sp, #0
  40476e:	6078      	str	r0, [r7, #4]
  404770:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  404772:	687b      	ldr	r3, [r7, #4]
  404774:	683a      	ldr	r2, [r7, #0]
  404776:	645a      	str	r2, [r3, #68]	; 0x44
}
  404778:	bf00      	nop
  40477a:	370c      	adds	r7, #12
  40477c:	46bd      	mov	sp, r7
  40477e:	bc80      	pop	{r7}
  404780:	4770      	bx	lr
  404782:	bf00      	nop

00404784 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  404784:	b480      	push	{r7}
  404786:	b083      	sub	sp, #12
  404788:	af00      	add	r7, sp, #0
  40478a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  40478c:	687b      	ldr	r3, [r7, #4]
  40478e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  404790:	4618      	mov	r0, r3
  404792:	370c      	adds	r7, #12
  404794:	46bd      	mov	sp, r7
  404796:	bc80      	pop	{r7}
  404798:	4770      	bx	lr
  40479a:	bf00      	nop

0040479c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  40479c:	b480      	push	{r7}
  40479e:	b083      	sub	sp, #12
  4047a0:	af00      	add	r7, sp, #0
  4047a2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4047a4:	687b      	ldr	r3, [r7, #4]
  4047a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4047a8:	4618      	mov	r0, r3
  4047aa:	370c      	adds	r7, #12
  4047ac:	46bd      	mov	sp, r7
  4047ae:	bc80      	pop	{r7}
  4047b0:	4770      	bx	lr
  4047b2:	bf00      	nop

004047b4 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
  4047b4:	b580      	push	{r7, lr}
  4047b6:	b084      	sub	sp, #16
  4047b8:	af00      	add	r7, sp, #0
  4047ba:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  4047bc:	6878      	ldr	r0, [r7, #4]
  4047be:	4b08      	ldr	r3, [pc, #32]	; (4047e0 <pio_set_pin_high+0x2c>)
  4047c0:	4798      	blx	r3
  4047c2:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  4047c4:	687b      	ldr	r3, [r7, #4]
  4047c6:	f003 031f 	and.w	r3, r3, #31
  4047ca:	2201      	movs	r2, #1
  4047cc:	fa02 f303 	lsl.w	r3, r2, r3
  4047d0:	461a      	mov	r2, r3
  4047d2:	68fb      	ldr	r3, [r7, #12]
  4047d4:	631a      	str	r2, [r3, #48]	; 0x30
}
  4047d6:	bf00      	nop
  4047d8:	3710      	adds	r7, #16
  4047da:	46bd      	mov	sp, r7
  4047dc:	bd80      	pop	{r7, pc}
  4047de:	bf00      	nop
  4047e0:	00404af1 	.word	0x00404af1

004047e4 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
  4047e4:	b580      	push	{r7, lr}
  4047e6:	b084      	sub	sp, #16
  4047e8:	af00      	add	r7, sp, #0
  4047ea:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  4047ec:	6878      	ldr	r0, [r7, #4]
  4047ee:	4b08      	ldr	r3, [pc, #32]	; (404810 <pio_set_pin_low+0x2c>)
  4047f0:	4798      	blx	r3
  4047f2:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  4047f4:	687b      	ldr	r3, [r7, #4]
  4047f6:	f003 031f 	and.w	r3, r3, #31
  4047fa:	2201      	movs	r2, #1
  4047fc:	fa02 f303 	lsl.w	r3, r2, r3
  404800:	461a      	mov	r2, r3
  404802:	68fb      	ldr	r3, [r7, #12]
  404804:	635a      	str	r2, [r3, #52]	; 0x34
}
  404806:	bf00      	nop
  404808:	3710      	adds	r7, #16
  40480a:	46bd      	mov	sp, r7
  40480c:	bd80      	pop	{r7, pc}
  40480e:	bf00      	nop
  404810:	00404af1 	.word	0x00404af1

00404814 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  404814:	b590      	push	{r4, r7, lr}
  404816:	b087      	sub	sp, #28
  404818:	af02      	add	r7, sp, #8
  40481a:	6078      	str	r0, [r7, #4]
  40481c:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  40481e:	6878      	ldr	r0, [r7, #4]
  404820:	4b63      	ldr	r3, [pc, #396]	; (4049b0 <pio_configure_pin+0x19c>)
  404822:	4798      	blx	r3
  404824:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  404826:	683b      	ldr	r3, [r7, #0]
  404828:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  40482c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  404830:	d067      	beq.n	404902 <pio_configure_pin+0xee>
  404832:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  404836:	d809      	bhi.n	40484c <pio_configure_pin+0x38>
  404838:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40483c:	d02b      	beq.n	404896 <pio_configure_pin+0x82>
  40483e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  404842:	d043      	beq.n	4048cc <pio_configure_pin+0xb8>
  404844:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  404848:	d00a      	beq.n	404860 <pio_configure_pin+0x4c>
  40484a:	e0a9      	b.n	4049a0 <pio_configure_pin+0x18c>
  40484c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  404850:	d07e      	beq.n	404950 <pio_configure_pin+0x13c>
  404852:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  404856:	d07b      	beq.n	404950 <pio_configure_pin+0x13c>
  404858:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40485c:	d06c      	beq.n	404938 <pio_configure_pin+0x124>
  40485e:	e09f      	b.n	4049a0 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  404860:	687b      	ldr	r3, [r7, #4]
  404862:	f003 031f 	and.w	r3, r3, #31
  404866:	2201      	movs	r2, #1
  404868:	fa02 f303 	lsl.w	r3, r2, r3
  40486c:	461a      	mov	r2, r3
  40486e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404872:	68f8      	ldr	r0, [r7, #12]
  404874:	4b4f      	ldr	r3, [pc, #316]	; (4049b4 <pio_configure_pin+0x1a0>)
  404876:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  404878:	687b      	ldr	r3, [r7, #4]
  40487a:	f003 031f 	and.w	r3, r3, #31
  40487e:	2201      	movs	r2, #1
  404880:	fa02 f303 	lsl.w	r3, r2, r3
  404884:	4619      	mov	r1, r3
  404886:	683b      	ldr	r3, [r7, #0]
  404888:	f003 0301 	and.w	r3, r3, #1
  40488c:	461a      	mov	r2, r3
  40488e:	68f8      	ldr	r0, [r7, #12]
  404890:	4b49      	ldr	r3, [pc, #292]	; (4049b8 <pio_configure_pin+0x1a4>)
  404892:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  404894:	e086      	b.n	4049a4 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  404896:	687b      	ldr	r3, [r7, #4]
  404898:	f003 031f 	and.w	r3, r3, #31
  40489c:	2201      	movs	r2, #1
  40489e:	fa02 f303 	lsl.w	r3, r2, r3
  4048a2:	461a      	mov	r2, r3
  4048a4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4048a8:	68f8      	ldr	r0, [r7, #12]
  4048aa:	4b42      	ldr	r3, [pc, #264]	; (4049b4 <pio_configure_pin+0x1a0>)
  4048ac:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4048ae:	687b      	ldr	r3, [r7, #4]
  4048b0:	f003 031f 	and.w	r3, r3, #31
  4048b4:	2201      	movs	r2, #1
  4048b6:	fa02 f303 	lsl.w	r3, r2, r3
  4048ba:	4619      	mov	r1, r3
  4048bc:	683b      	ldr	r3, [r7, #0]
  4048be:	f003 0301 	and.w	r3, r3, #1
  4048c2:	461a      	mov	r2, r3
  4048c4:	68f8      	ldr	r0, [r7, #12]
  4048c6:	4b3c      	ldr	r3, [pc, #240]	; (4049b8 <pio_configure_pin+0x1a4>)
  4048c8:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4048ca:	e06b      	b.n	4049a4 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4048cc:	687b      	ldr	r3, [r7, #4]
  4048ce:	f003 031f 	and.w	r3, r3, #31
  4048d2:	2201      	movs	r2, #1
  4048d4:	fa02 f303 	lsl.w	r3, r2, r3
  4048d8:	461a      	mov	r2, r3
  4048da:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4048de:	68f8      	ldr	r0, [r7, #12]
  4048e0:	4b34      	ldr	r3, [pc, #208]	; (4049b4 <pio_configure_pin+0x1a0>)
  4048e2:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4048e4:	687b      	ldr	r3, [r7, #4]
  4048e6:	f003 031f 	and.w	r3, r3, #31
  4048ea:	2201      	movs	r2, #1
  4048ec:	fa02 f303 	lsl.w	r3, r2, r3
  4048f0:	4619      	mov	r1, r3
  4048f2:	683b      	ldr	r3, [r7, #0]
  4048f4:	f003 0301 	and.w	r3, r3, #1
  4048f8:	461a      	mov	r2, r3
  4048fa:	68f8      	ldr	r0, [r7, #12]
  4048fc:	4b2e      	ldr	r3, [pc, #184]	; (4049b8 <pio_configure_pin+0x1a4>)
  4048fe:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  404900:	e050      	b.n	4049a4 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  404902:	687b      	ldr	r3, [r7, #4]
  404904:	f003 031f 	and.w	r3, r3, #31
  404908:	2201      	movs	r2, #1
  40490a:	fa02 f303 	lsl.w	r3, r2, r3
  40490e:	461a      	mov	r2, r3
  404910:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  404914:	68f8      	ldr	r0, [r7, #12]
  404916:	4b27      	ldr	r3, [pc, #156]	; (4049b4 <pio_configure_pin+0x1a0>)
  404918:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40491a:	687b      	ldr	r3, [r7, #4]
  40491c:	f003 031f 	and.w	r3, r3, #31
  404920:	2201      	movs	r2, #1
  404922:	fa02 f303 	lsl.w	r3, r2, r3
  404926:	4619      	mov	r1, r3
  404928:	683b      	ldr	r3, [r7, #0]
  40492a:	f003 0301 	and.w	r3, r3, #1
  40492e:	461a      	mov	r2, r3
  404930:	68f8      	ldr	r0, [r7, #12]
  404932:	4b21      	ldr	r3, [pc, #132]	; (4049b8 <pio_configure_pin+0x1a4>)
  404934:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  404936:	e035      	b.n	4049a4 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  404938:	687b      	ldr	r3, [r7, #4]
  40493a:	f003 031f 	and.w	r3, r3, #31
  40493e:	2201      	movs	r2, #1
  404940:	fa02 f303 	lsl.w	r3, r2, r3
  404944:	683a      	ldr	r2, [r7, #0]
  404946:	4619      	mov	r1, r3
  404948:	68f8      	ldr	r0, [r7, #12]
  40494a:	4b1c      	ldr	r3, [pc, #112]	; (4049bc <pio_configure_pin+0x1a8>)
  40494c:	4798      	blx	r3
		break;
  40494e:	e029      	b.n	4049a4 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  404950:	687b      	ldr	r3, [r7, #4]
  404952:	f003 031f 	and.w	r3, r3, #31
  404956:	2201      	movs	r2, #1
  404958:	fa02 f303 	lsl.w	r3, r2, r3
  40495c:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40495e:	683b      	ldr	r3, [r7, #0]
  404960:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  404964:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  404968:	bf0c      	ite	eq
  40496a:	2301      	moveq	r3, #1
  40496c:	2300      	movne	r3, #0
  40496e:	b2db      	uxtb	r3, r3
  404970:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  404972:	683b      	ldr	r3, [r7, #0]
  404974:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  404978:	2b00      	cmp	r3, #0
  40497a:	bf14      	ite	ne
  40497c:	2301      	movne	r3, #1
  40497e:	2300      	moveq	r3, #0
  404980:	b2db      	uxtb	r3, r3
  404982:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  404984:	683b      	ldr	r3, [r7, #0]
  404986:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40498a:	2b00      	cmp	r3, #0
  40498c:	bf14      	ite	ne
  40498e:	2301      	movne	r3, #1
  404990:	2300      	moveq	r3, #0
  404992:	b2db      	uxtb	r3, r3
  404994:	9300      	str	r3, [sp, #0]
  404996:	4603      	mov	r3, r0
  404998:	68f8      	ldr	r0, [r7, #12]
  40499a:	4c09      	ldr	r4, [pc, #36]	; (4049c0 <pio_configure_pin+0x1ac>)
  40499c:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40499e:	e001      	b.n	4049a4 <pio_configure_pin+0x190>

	default:
		return 0;
  4049a0:	2300      	movs	r3, #0
  4049a2:	e000      	b.n	4049a6 <pio_configure_pin+0x192>
	}

	return 1;
  4049a4:	2301      	movs	r3, #1
}
  4049a6:	4618      	mov	r0, r3
  4049a8:	3714      	adds	r7, #20
  4049aa:	46bd      	mov	sp, r7
  4049ac:	bd90      	pop	{r4, r7, pc}
  4049ae:	bf00      	nop
  4049b0:	00404af1 	.word	0x00404af1
  4049b4:	004044ed 	.word	0x004044ed
  4049b8:	004044c1 	.word	0x004044c1
  4049bc:	004045fd 	.word	0x004045fd
  4049c0:	0040467d 	.word	0x0040467d

004049c4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  4049c4:	b590      	push	{r4, r7, lr}
  4049c6:	b087      	sub	sp, #28
  4049c8:	af02      	add	r7, sp, #8
  4049ca:	60f8      	str	r0, [r7, #12]
  4049cc:	60b9      	str	r1, [r7, #8]
  4049ce:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4049d0:	687b      	ldr	r3, [r7, #4]
  4049d2:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  4049d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4049da:	d043      	beq.n	404a64 <pio_configure_pin_group+0xa0>
  4049dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4049e0:	d809      	bhi.n	4049f6 <pio_configure_pin_group+0x32>
  4049e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4049e6:	d01f      	beq.n	404a28 <pio_configure_pin_group+0x64>
  4049e8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4049ec:	d02b      	beq.n	404a46 <pio_configure_pin_group+0x82>
  4049ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4049f2:	d00a      	beq.n	404a0a <pio_configure_pin_group+0x46>
  4049f4:	e06d      	b.n	404ad2 <pio_configure_pin_group+0x10e>
  4049f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4049fa:	d048      	beq.n	404a8e <pio_configure_pin_group+0xca>
  4049fc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  404a00:	d045      	beq.n	404a8e <pio_configure_pin_group+0xca>
  404a02:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  404a06:	d03c      	beq.n	404a82 <pio_configure_pin_group+0xbe>
  404a08:	e063      	b.n	404ad2 <pio_configure_pin_group+0x10e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  404a0a:	68ba      	ldr	r2, [r7, #8]
  404a0c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404a10:	68f8      	ldr	r0, [r7, #12]
  404a12:	4b33      	ldr	r3, [pc, #204]	; (404ae0 <pio_configure_pin_group+0x11c>)
  404a14:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  404a16:	687b      	ldr	r3, [r7, #4]
  404a18:	f003 0301 	and.w	r3, r3, #1
  404a1c:	461a      	mov	r2, r3
  404a1e:	68b9      	ldr	r1, [r7, #8]
  404a20:	68f8      	ldr	r0, [r7, #12]
  404a22:	4b30      	ldr	r3, [pc, #192]	; (404ae4 <pio_configure_pin_group+0x120>)
  404a24:	4798      	blx	r3
		break;
  404a26:	e056      	b.n	404ad6 <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  404a28:	68ba      	ldr	r2, [r7, #8]
  404a2a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  404a2e:	68f8      	ldr	r0, [r7, #12]
  404a30:	4b2b      	ldr	r3, [pc, #172]	; (404ae0 <pio_configure_pin_group+0x11c>)
  404a32:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  404a34:	687b      	ldr	r3, [r7, #4]
  404a36:	f003 0301 	and.w	r3, r3, #1
  404a3a:	461a      	mov	r2, r3
  404a3c:	68b9      	ldr	r1, [r7, #8]
  404a3e:	68f8      	ldr	r0, [r7, #12]
  404a40:	4b28      	ldr	r3, [pc, #160]	; (404ae4 <pio_configure_pin_group+0x120>)
  404a42:	4798      	blx	r3
		break;
  404a44:	e047      	b.n	404ad6 <pio_configure_pin_group+0x112>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  404a46:	68ba      	ldr	r2, [r7, #8]
  404a48:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404a4c:	68f8      	ldr	r0, [r7, #12]
  404a4e:	4b24      	ldr	r3, [pc, #144]	; (404ae0 <pio_configure_pin_group+0x11c>)
  404a50:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  404a52:	687b      	ldr	r3, [r7, #4]
  404a54:	f003 0301 	and.w	r3, r3, #1
  404a58:	461a      	mov	r2, r3
  404a5a:	68b9      	ldr	r1, [r7, #8]
  404a5c:	68f8      	ldr	r0, [r7, #12]
  404a5e:	4b21      	ldr	r3, [pc, #132]	; (404ae4 <pio_configure_pin_group+0x120>)
  404a60:	4798      	blx	r3
		break;
  404a62:	e038      	b.n	404ad6 <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  404a64:	68ba      	ldr	r2, [r7, #8]
  404a66:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  404a6a:	68f8      	ldr	r0, [r7, #12]
  404a6c:	4b1c      	ldr	r3, [pc, #112]	; (404ae0 <pio_configure_pin_group+0x11c>)
  404a6e:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  404a70:	687b      	ldr	r3, [r7, #4]
  404a72:	f003 0301 	and.w	r3, r3, #1
  404a76:	461a      	mov	r2, r3
  404a78:	68b9      	ldr	r1, [r7, #8]
  404a7a:	68f8      	ldr	r0, [r7, #12]
  404a7c:	4b19      	ldr	r3, [pc, #100]	; (404ae4 <pio_configure_pin_group+0x120>)
  404a7e:	4798      	blx	r3
		break;
  404a80:	e029      	b.n	404ad6 <pio_configure_pin_group+0x112>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  404a82:	687a      	ldr	r2, [r7, #4]
  404a84:	68b9      	ldr	r1, [r7, #8]
  404a86:	68f8      	ldr	r0, [r7, #12]
  404a88:	4b17      	ldr	r3, [pc, #92]	; (404ae8 <pio_configure_pin_group+0x124>)
  404a8a:	4798      	blx	r3
		break;
  404a8c:	e023      	b.n	404ad6 <pio_configure_pin_group+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  404a8e:	687b      	ldr	r3, [r7, #4]
  404a90:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  404a94:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  404a98:	bf0c      	ite	eq
  404a9a:	2301      	moveq	r3, #1
  404a9c:	2300      	movne	r3, #0
  404a9e:	b2db      	uxtb	r3, r3
  404aa0:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  404aa2:	687b      	ldr	r3, [r7, #4]
  404aa4:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  404aa8:	2b00      	cmp	r3, #0
  404aaa:	bf14      	ite	ne
  404aac:	2301      	movne	r3, #1
  404aae:	2300      	moveq	r3, #0
  404ab0:	b2db      	uxtb	r3, r3
  404ab2:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  404ab4:	687b      	ldr	r3, [r7, #4]
  404ab6:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  404aba:	2b00      	cmp	r3, #0
  404abc:	bf14      	ite	ne
  404abe:	2301      	movne	r3, #1
  404ac0:	2300      	moveq	r3, #0
  404ac2:	b2db      	uxtb	r3, r3
  404ac4:	9300      	str	r3, [sp, #0]
  404ac6:	460b      	mov	r3, r1
  404ac8:	68b9      	ldr	r1, [r7, #8]
  404aca:	68f8      	ldr	r0, [r7, #12]
  404acc:	4c07      	ldr	r4, [pc, #28]	; (404aec <pio_configure_pin_group+0x128>)
  404ace:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  404ad0:	e001      	b.n	404ad6 <pio_configure_pin_group+0x112>

	default:
		return 0;
  404ad2:	2300      	movs	r3, #0
  404ad4:	e000      	b.n	404ad8 <pio_configure_pin_group+0x114>
	}

	return 1;
  404ad6:	2301      	movs	r3, #1
}
  404ad8:	4618      	mov	r0, r3
  404ada:	3714      	adds	r7, #20
  404adc:	46bd      	mov	sp, r7
  404ade:	bd90      	pop	{r4, r7, pc}
  404ae0:	004044ed 	.word	0x004044ed
  404ae4:	004044c1 	.word	0x004044c1
  404ae8:	004045fd 	.word	0x004045fd
  404aec:	0040467d 	.word	0x0040467d

00404af0 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  404af0:	b480      	push	{r7}
  404af2:	b085      	sub	sp, #20
  404af4:	af00      	add	r7, sp, #0
  404af6:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  404af8:	687b      	ldr	r3, [r7, #4]
  404afa:	095b      	lsrs	r3, r3, #5
  404afc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  404b00:	f203 7307 	addw	r3, r3, #1799	; 0x707
  404b04:	025b      	lsls	r3, r3, #9
  404b06:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  404b08:	68fb      	ldr	r3, [r7, #12]
}
  404b0a:	4618      	mov	r0, r3
  404b0c:	3714      	adds	r7, #20
  404b0e:	46bd      	mov	sp, r7
  404b10:	bc80      	pop	{r7}
  404b12:	4770      	bx	lr

00404b14 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  404b14:	b480      	push	{r7}
  404b16:	b083      	sub	sp, #12
  404b18:	af00      	add	r7, sp, #0
  404b1a:	4603      	mov	r3, r0
  404b1c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  404b1e:	4908      	ldr	r1, [pc, #32]	; (404b40 <NVIC_EnableIRQ+0x2c>)
  404b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404b24:	095b      	lsrs	r3, r3, #5
  404b26:	79fa      	ldrb	r2, [r7, #7]
  404b28:	f002 021f 	and.w	r2, r2, #31
  404b2c:	2001      	movs	r0, #1
  404b2e:	fa00 f202 	lsl.w	r2, r0, r2
  404b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  404b36:	bf00      	nop
  404b38:	370c      	adds	r7, #12
  404b3a:	46bd      	mov	sp, r7
  404b3c:	bc80      	pop	{r7}
  404b3e:	4770      	bx	lr
  404b40:	e000e100 	.word	0xe000e100

00404b44 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  404b44:	b480      	push	{r7}
  404b46:	b083      	sub	sp, #12
  404b48:	af00      	add	r7, sp, #0
  404b4a:	4603      	mov	r3, r0
  404b4c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  404b4e:	4909      	ldr	r1, [pc, #36]	; (404b74 <NVIC_DisableIRQ+0x30>)
  404b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404b54:	095b      	lsrs	r3, r3, #5
  404b56:	79fa      	ldrb	r2, [r7, #7]
  404b58:	f002 021f 	and.w	r2, r2, #31
  404b5c:	2001      	movs	r0, #1
  404b5e:	fa00 f202 	lsl.w	r2, r0, r2
  404b62:	3320      	adds	r3, #32
  404b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  404b68:	bf00      	nop
  404b6a:	370c      	adds	r7, #12
  404b6c:	46bd      	mov	sp, r7
  404b6e:	bc80      	pop	{r7}
  404b70:	4770      	bx	lr
  404b72:	bf00      	nop
  404b74:	e000e100 	.word	0xe000e100

00404b78 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  404b78:	b480      	push	{r7}
  404b7a:	b083      	sub	sp, #12
  404b7c:	af00      	add	r7, sp, #0
  404b7e:	4603      	mov	r3, r0
  404b80:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  404b82:	4909      	ldr	r1, [pc, #36]	; (404ba8 <NVIC_ClearPendingIRQ+0x30>)
  404b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404b88:	095b      	lsrs	r3, r3, #5
  404b8a:	79fa      	ldrb	r2, [r7, #7]
  404b8c:	f002 021f 	and.w	r2, r2, #31
  404b90:	2001      	movs	r0, #1
  404b92:	fa00 f202 	lsl.w	r2, r0, r2
  404b96:	3360      	adds	r3, #96	; 0x60
  404b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  404b9c:	bf00      	nop
  404b9e:	370c      	adds	r7, #12
  404ba0:	46bd      	mov	sp, r7
  404ba2:	bc80      	pop	{r7}
  404ba4:	4770      	bx	lr
  404ba6:	bf00      	nop
  404ba8:	e000e100 	.word	0xe000e100

00404bac <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  404bac:	b480      	push	{r7}
  404bae:	b083      	sub	sp, #12
  404bb0:	af00      	add	r7, sp, #0
  404bb2:	4603      	mov	r3, r0
  404bb4:	6039      	str	r1, [r7, #0]
  404bb6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  404bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404bbc:	2b00      	cmp	r3, #0
  404bbe:	da0b      	bge.n	404bd8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  404bc0:	490d      	ldr	r1, [pc, #52]	; (404bf8 <NVIC_SetPriority+0x4c>)
  404bc2:	79fb      	ldrb	r3, [r7, #7]
  404bc4:	f003 030f 	and.w	r3, r3, #15
  404bc8:	3b04      	subs	r3, #4
  404bca:	683a      	ldr	r2, [r7, #0]
  404bcc:	b2d2      	uxtb	r2, r2
  404bce:	0112      	lsls	r2, r2, #4
  404bd0:	b2d2      	uxtb	r2, r2
  404bd2:	440b      	add	r3, r1
  404bd4:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
  404bd6:	e009      	b.n	404bec <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  404bd8:	4908      	ldr	r1, [pc, #32]	; (404bfc <NVIC_SetPriority+0x50>)
  404bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404bde:	683a      	ldr	r2, [r7, #0]
  404be0:	b2d2      	uxtb	r2, r2
  404be2:	0112      	lsls	r2, r2, #4
  404be4:	b2d2      	uxtb	r2, r2
  404be6:	440b      	add	r3, r1
  404be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  404bec:	bf00      	nop
  404bee:	370c      	adds	r7, #12
  404bf0:	46bd      	mov	sp, r7
  404bf2:	bc80      	pop	{r7}
  404bf4:	4770      	bx	lr
  404bf6:	bf00      	nop
  404bf8:	e000ed00 	.word	0xe000ed00
  404bfc:	e000e100 	.word	0xe000e100

00404c00 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  404c00:	b580      	push	{r7, lr}
  404c02:	b084      	sub	sp, #16
  404c04:	af00      	add	r7, sp, #0
  404c06:	6078      	str	r0, [r7, #4]
  404c08:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  404c0a:	6878      	ldr	r0, [r7, #4]
  404c0c:	4b2c      	ldr	r3, [pc, #176]	; (404cc0 <pio_handler_process+0xc0>)
  404c0e:	4798      	blx	r3
  404c10:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  404c12:	6878      	ldr	r0, [r7, #4]
  404c14:	4b2b      	ldr	r3, [pc, #172]	; (404cc4 <pio_handler_process+0xc4>)
  404c16:	4798      	blx	r3
  404c18:	4602      	mov	r2, r0
  404c1a:	68fb      	ldr	r3, [r7, #12]
  404c1c:	4013      	ands	r3, r2
  404c1e:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  404c20:	68fb      	ldr	r3, [r7, #12]
  404c22:	2b00      	cmp	r3, #0
  404c24:	d03c      	beq.n	404ca0 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  404c26:	2300      	movs	r3, #0
  404c28:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  404c2a:	e034      	b.n	404c96 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  404c2c:	4a26      	ldr	r2, [pc, #152]	; (404cc8 <pio_handler_process+0xc8>)
  404c2e:	68bb      	ldr	r3, [r7, #8]
  404c30:	011b      	lsls	r3, r3, #4
  404c32:	4413      	add	r3, r2
  404c34:	681a      	ldr	r2, [r3, #0]
  404c36:	683b      	ldr	r3, [r7, #0]
  404c38:	429a      	cmp	r2, r3
  404c3a:	d126      	bne.n	404c8a <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  404c3c:	4a22      	ldr	r2, [pc, #136]	; (404cc8 <pio_handler_process+0xc8>)
  404c3e:	68bb      	ldr	r3, [r7, #8]
  404c40:	011b      	lsls	r3, r3, #4
  404c42:	4413      	add	r3, r2
  404c44:	3304      	adds	r3, #4
  404c46:	681a      	ldr	r2, [r3, #0]
  404c48:	68fb      	ldr	r3, [r7, #12]
  404c4a:	4013      	ands	r3, r2
  404c4c:	2b00      	cmp	r3, #0
  404c4e:	d01c      	beq.n	404c8a <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  404c50:	4a1d      	ldr	r2, [pc, #116]	; (404cc8 <pio_handler_process+0xc8>)
  404c52:	68bb      	ldr	r3, [r7, #8]
  404c54:	011b      	lsls	r3, r3, #4
  404c56:	4413      	add	r3, r2
  404c58:	330c      	adds	r3, #12
  404c5a:	681b      	ldr	r3, [r3, #0]
  404c5c:	491a      	ldr	r1, [pc, #104]	; (404cc8 <pio_handler_process+0xc8>)
  404c5e:	68ba      	ldr	r2, [r7, #8]
  404c60:	0112      	lsls	r2, r2, #4
  404c62:	440a      	add	r2, r1
  404c64:	6810      	ldr	r0, [r2, #0]
  404c66:	4918      	ldr	r1, [pc, #96]	; (404cc8 <pio_handler_process+0xc8>)
  404c68:	68ba      	ldr	r2, [r7, #8]
  404c6a:	0112      	lsls	r2, r2, #4
  404c6c:	440a      	add	r2, r1
  404c6e:	3204      	adds	r2, #4
  404c70:	6812      	ldr	r2, [r2, #0]
  404c72:	4611      	mov	r1, r2
  404c74:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  404c76:	4a14      	ldr	r2, [pc, #80]	; (404cc8 <pio_handler_process+0xc8>)
  404c78:	68bb      	ldr	r3, [r7, #8]
  404c7a:	011b      	lsls	r3, r3, #4
  404c7c:	4413      	add	r3, r2
  404c7e:	3304      	adds	r3, #4
  404c80:	681b      	ldr	r3, [r3, #0]
  404c82:	43db      	mvns	r3, r3
  404c84:	68fa      	ldr	r2, [r7, #12]
  404c86:	4013      	ands	r3, r2
  404c88:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  404c8a:	68bb      	ldr	r3, [r7, #8]
  404c8c:	3301      	adds	r3, #1
  404c8e:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  404c90:	68bb      	ldr	r3, [r7, #8]
  404c92:	2b06      	cmp	r3, #6
  404c94:	d803      	bhi.n	404c9e <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  404c96:	68fb      	ldr	r3, [r7, #12]
  404c98:	2b00      	cmp	r3, #0
  404c9a:	d1c7      	bne.n	404c2c <pio_handler_process+0x2c>
  404c9c:	e000      	b.n	404ca0 <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  404c9e:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  404ca0:	4b0a      	ldr	r3, [pc, #40]	; (404ccc <pio_handler_process+0xcc>)
  404ca2:	681b      	ldr	r3, [r3, #0]
  404ca4:	2b00      	cmp	r3, #0
  404ca6:	d007      	beq.n	404cb8 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  404ca8:	4b09      	ldr	r3, [pc, #36]	; (404cd0 <pio_handler_process+0xd0>)
  404caa:	681b      	ldr	r3, [r3, #0]
  404cac:	2b00      	cmp	r3, #0
  404cae:	d003      	beq.n	404cb8 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  404cb0:	4b07      	ldr	r3, [pc, #28]	; (404cd0 <pio_handler_process+0xd0>)
  404cb2:	681b      	ldr	r3, [r3, #0]
  404cb4:	6878      	ldr	r0, [r7, #4]
  404cb6:	4798      	blx	r3
		}
	}
#endif
}
  404cb8:	bf00      	nop
  404cba:	3710      	adds	r7, #16
  404cbc:	46bd      	mov	sp, r7
  404cbe:	bd80      	pop	{r7, pc}
  404cc0:	00404785 	.word	0x00404785
  404cc4:	0040479d 	.word	0x0040479d
  404cc8:	20000c94 	.word	0x20000c94
  404ccc:	20002f20 	.word	0x20002f20
  404cd0:	20000d08 	.word	0x20000d08

00404cd4 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  404cd4:	b580      	push	{r7, lr}
  404cd6:	b086      	sub	sp, #24
  404cd8:	af00      	add	r7, sp, #0
  404cda:	60f8      	str	r0, [r7, #12]
  404cdc:	60b9      	str	r1, [r7, #8]
  404cde:	607a      	str	r2, [r7, #4]
  404ce0:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  404ce2:	4b21      	ldr	r3, [pc, #132]	; (404d68 <pio_handler_set+0x94>)
  404ce4:	681b      	ldr	r3, [r3, #0]
  404ce6:	2b06      	cmp	r3, #6
  404ce8:	d901      	bls.n	404cee <pio_handler_set+0x1a>
		return 1;
  404cea:	2301      	movs	r3, #1
  404cec:	e038      	b.n	404d60 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  404cee:	2300      	movs	r3, #0
  404cf0:	75fb      	strb	r3, [r7, #23]
  404cf2:	e011      	b.n	404d18 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  404cf4:	7dfb      	ldrb	r3, [r7, #23]
  404cf6:	011b      	lsls	r3, r3, #4
  404cf8:	4a1c      	ldr	r2, [pc, #112]	; (404d6c <pio_handler_set+0x98>)
  404cfa:	4413      	add	r3, r2
  404cfc:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  404cfe:	693b      	ldr	r3, [r7, #16]
  404d00:	681a      	ldr	r2, [r3, #0]
  404d02:	68bb      	ldr	r3, [r7, #8]
  404d04:	429a      	cmp	r2, r3
  404d06:	d104      	bne.n	404d12 <pio_handler_set+0x3e>
  404d08:	693b      	ldr	r3, [r7, #16]
  404d0a:	685a      	ldr	r2, [r3, #4]
  404d0c:	687b      	ldr	r3, [r7, #4]
  404d0e:	429a      	cmp	r2, r3
  404d10:	d008      	beq.n	404d24 <pio_handler_set+0x50>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  404d12:	7dfb      	ldrb	r3, [r7, #23]
  404d14:	3301      	adds	r3, #1
  404d16:	75fb      	strb	r3, [r7, #23]
  404d18:	7dfa      	ldrb	r2, [r7, #23]
  404d1a:	4b13      	ldr	r3, [pc, #76]	; (404d68 <pio_handler_set+0x94>)
  404d1c:	681b      	ldr	r3, [r3, #0]
  404d1e:	429a      	cmp	r2, r3
  404d20:	d9e8      	bls.n	404cf4 <pio_handler_set+0x20>
  404d22:	e000      	b.n	404d26 <pio_handler_set+0x52>
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
			break;
  404d24:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  404d26:	693b      	ldr	r3, [r7, #16]
  404d28:	68ba      	ldr	r2, [r7, #8]
  404d2a:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  404d2c:	693b      	ldr	r3, [r7, #16]
  404d2e:	687a      	ldr	r2, [r7, #4]
  404d30:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  404d32:	693b      	ldr	r3, [r7, #16]
  404d34:	683a      	ldr	r2, [r7, #0]
  404d36:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  404d38:	693b      	ldr	r3, [r7, #16]
  404d3a:	6a3a      	ldr	r2, [r7, #32]
  404d3c:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  404d3e:	7dfa      	ldrb	r2, [r7, #23]
  404d40:	4b09      	ldr	r3, [pc, #36]	; (404d68 <pio_handler_set+0x94>)
  404d42:	681b      	ldr	r3, [r3, #0]
  404d44:	3301      	adds	r3, #1
  404d46:	429a      	cmp	r2, r3
  404d48:	d104      	bne.n	404d54 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  404d4a:	4b07      	ldr	r3, [pc, #28]	; (404d68 <pio_handler_set+0x94>)
  404d4c:	681b      	ldr	r3, [r3, #0]
  404d4e:	3301      	adds	r3, #1
  404d50:	4a05      	ldr	r2, [pc, #20]	; (404d68 <pio_handler_set+0x94>)
  404d52:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  404d54:	683a      	ldr	r2, [r7, #0]
  404d56:	6879      	ldr	r1, [r7, #4]
  404d58:	68f8      	ldr	r0, [r7, #12]
  404d5a:	4b05      	ldr	r3, [pc, #20]	; (404d70 <pio_handler_set+0x9c>)
  404d5c:	4798      	blx	r3

	return 0;
  404d5e:	2300      	movs	r3, #0
}
  404d60:	4618      	mov	r0, r3
  404d62:	3718      	adds	r7, #24
  404d64:	46bd      	mov	sp, r7
  404d66:	bd80      	pop	{r7, pc}
  404d68:	20000d04 	.word	0x20000d04
  404d6c:	20000c94 	.word	0x20000c94
  404d70:	004046e1 	.word	0x004046e1

00404d74 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  404d74:	b580      	push	{r7, lr}
  404d76:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  404d78:	210b      	movs	r1, #11
  404d7a:	4802      	ldr	r0, [pc, #8]	; (404d84 <PIOA_Handler+0x10>)
  404d7c:	4b02      	ldr	r3, [pc, #8]	; (404d88 <PIOA_Handler+0x14>)
  404d7e:	4798      	blx	r3
}
  404d80:	bf00      	nop
  404d82:	bd80      	pop	{r7, pc}
  404d84:	400e0e00 	.word	0x400e0e00
  404d88:	00404c01 	.word	0x00404c01

00404d8c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  404d8c:	b580      	push	{r7, lr}
  404d8e:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  404d90:	210c      	movs	r1, #12
  404d92:	4802      	ldr	r0, [pc, #8]	; (404d9c <PIOB_Handler+0x10>)
  404d94:	4b02      	ldr	r3, [pc, #8]	; (404da0 <PIOB_Handler+0x14>)
  404d96:	4798      	blx	r3
}
  404d98:	bf00      	nop
  404d9a:	bd80      	pop	{r7, pc}
  404d9c:	400e1000 	.word	0x400e1000
  404da0:	00404c01 	.word	0x00404c01

00404da4 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  404da4:	b580      	push	{r7, lr}
  404da6:	b086      	sub	sp, #24
  404da8:	af00      	add	r7, sp, #0
  404daa:	60f8      	str	r0, [r7, #12]
  404dac:	460b      	mov	r3, r1
  404dae:	607a      	str	r2, [r7, #4]
  404db0:	72fb      	strb	r3, [r7, #11]
	uint32_t bitmask = 0;
  404db2:	2300      	movs	r3, #0
  404db4:	617b      	str	r3, [r7, #20]

	bitmask = pio_get_interrupt_mask(p_pio);
  404db6:	68f8      	ldr	r0, [r7, #12]
  404db8:	4b13      	ldr	r3, [pc, #76]	; (404e08 <pio_handler_set_priority+0x64>)
  404dba:	4798      	blx	r3
  404dbc:	6178      	str	r0, [r7, #20]
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  404dbe:	f04f 31ff 	mov.w	r1, #4294967295
  404dc2:	68f8      	ldr	r0, [r7, #12]
  404dc4:	4b11      	ldr	r3, [pc, #68]	; (404e0c <pio_handler_set_priority+0x68>)
  404dc6:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  404dc8:	68f8      	ldr	r0, [r7, #12]
  404dca:	4b11      	ldr	r3, [pc, #68]	; (404e10 <pio_handler_set_priority+0x6c>)
  404dcc:	4798      	blx	r3
	NVIC_DisableIRQ(ul_irqn);
  404dce:	f997 300b 	ldrsb.w	r3, [r7, #11]
  404dd2:	4618      	mov	r0, r3
  404dd4:	4b0f      	ldr	r3, [pc, #60]	; (404e14 <pio_handler_set_priority+0x70>)
  404dd6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(ul_irqn);
  404dd8:	f997 300b 	ldrsb.w	r3, [r7, #11]
  404ddc:	4618      	mov	r0, r3
  404dde:	4b0e      	ldr	r3, [pc, #56]	; (404e18 <pio_handler_set_priority+0x74>)
  404de0:	4798      	blx	r3
	NVIC_SetPriority(ul_irqn, ul_priority);
  404de2:	f997 300b 	ldrsb.w	r3, [r7, #11]
  404de6:	6879      	ldr	r1, [r7, #4]
  404de8:	4618      	mov	r0, r3
  404dea:	4b0c      	ldr	r3, [pc, #48]	; (404e1c <pio_handler_set_priority+0x78>)
  404dec:	4798      	blx	r3
	NVIC_EnableIRQ(ul_irqn);
  404dee:	f997 300b 	ldrsb.w	r3, [r7, #11]
  404df2:	4618      	mov	r0, r3
  404df4:	4b0a      	ldr	r3, [pc, #40]	; (404e20 <pio_handler_set_priority+0x7c>)
  404df6:	4798      	blx	r3
	pio_enable_interrupt(p_pio, bitmask);
  404df8:	6979      	ldr	r1, [r7, #20]
  404dfa:	68f8      	ldr	r0, [r7, #12]
  404dfc:	4b09      	ldr	r3, [pc, #36]	; (404e24 <pio_handler_set_priority+0x80>)
  404dfe:	4798      	blx	r3
}
  404e00:	bf00      	nop
  404e02:	3718      	adds	r7, #24
  404e04:	46bd      	mov	sp, r7
  404e06:	bd80      	pop	{r7, pc}
  404e08:	0040479d 	.word	0x0040479d
  404e0c:	00404769 	.word	0x00404769
  404e10:	00404785 	.word	0x00404785
  404e14:	00404b45 	.word	0x00404b45
  404e18:	00404b79 	.word	0x00404b79
  404e1c:	00404bad 	.word	0x00404bad
  404e20:	00404b15 	.word	0x00404b15
  404e24:	0040474d 	.word	0x0040474d

00404e28 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  404e28:	b480      	push	{r7}
  404e2a:	b085      	sub	sp, #20
  404e2c:	af00      	add	r7, sp, #0
  404e2e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  404e30:	491c      	ldr	r1, [pc, #112]	; (404ea4 <pmc_switch_mck_to_pllack+0x7c>)
  404e32:	4b1c      	ldr	r3, [pc, #112]	; (404ea4 <pmc_switch_mck_to_pllack+0x7c>)
  404e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404e36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  404e3a:	687b      	ldr	r3, [r7, #4]
  404e3c:	4313      	orrs	r3, r2
  404e3e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404e40:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404e44:	60fb      	str	r3, [r7, #12]
  404e46:	e007      	b.n	404e58 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  404e48:	68fb      	ldr	r3, [r7, #12]
  404e4a:	2b00      	cmp	r3, #0
  404e4c:	d101      	bne.n	404e52 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  404e4e:	2301      	movs	r3, #1
  404e50:	e023      	b.n	404e9a <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  404e52:	68fb      	ldr	r3, [r7, #12]
  404e54:	3b01      	subs	r3, #1
  404e56:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404e58:	4b12      	ldr	r3, [pc, #72]	; (404ea4 <pmc_switch_mck_to_pllack+0x7c>)
  404e5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404e5c:	f003 0308 	and.w	r3, r3, #8
  404e60:	2b00      	cmp	r3, #0
  404e62:	d0f1      	beq.n	404e48 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  404e64:	4a0f      	ldr	r2, [pc, #60]	; (404ea4 <pmc_switch_mck_to_pllack+0x7c>)
  404e66:	4b0f      	ldr	r3, [pc, #60]	; (404ea4 <pmc_switch_mck_to_pllack+0x7c>)
  404e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404e6a:	f023 0303 	bic.w	r3, r3, #3
  404e6e:	f043 0302 	orr.w	r3, r3, #2
  404e72:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404e74:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404e78:	60fb      	str	r3, [r7, #12]
  404e7a:	e007      	b.n	404e8c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  404e7c:	68fb      	ldr	r3, [r7, #12]
  404e7e:	2b00      	cmp	r3, #0
  404e80:	d101      	bne.n	404e86 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  404e82:	2301      	movs	r3, #1
  404e84:	e009      	b.n	404e9a <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  404e86:	68fb      	ldr	r3, [r7, #12]
  404e88:	3b01      	subs	r3, #1
  404e8a:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404e8c:	4b05      	ldr	r3, [pc, #20]	; (404ea4 <pmc_switch_mck_to_pllack+0x7c>)
  404e8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404e90:	f003 0308 	and.w	r3, r3, #8
  404e94:	2b00      	cmp	r3, #0
  404e96:	d0f1      	beq.n	404e7c <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  404e98:	2300      	movs	r3, #0
}
  404e9a:	4618      	mov	r0, r3
  404e9c:	3714      	adds	r7, #20
  404e9e:	46bd      	mov	sp, r7
  404ea0:	bc80      	pop	{r7}
  404ea2:	4770      	bx	lr
  404ea4:	400e0400 	.word	0x400e0400

00404ea8 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  404ea8:	b480      	push	{r7}
  404eaa:	b083      	sub	sp, #12
  404eac:	af00      	add	r7, sp, #0
  404eae:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  404eb0:	687b      	ldr	r3, [r7, #4]
  404eb2:	2b01      	cmp	r3, #1
  404eb4:	d107      	bne.n	404ec6 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  404eb6:	4a08      	ldr	r2, [pc, #32]	; (404ed8 <pmc_switch_sclk_to_32kxtal+0x30>)
  404eb8:	4b07      	ldr	r3, [pc, #28]	; (404ed8 <pmc_switch_sclk_to_32kxtal+0x30>)
  404eba:	689b      	ldr	r3, [r3, #8]
  404ebc:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  404ec0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  404ec4:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  404ec6:	4b04      	ldr	r3, [pc, #16]	; (404ed8 <pmc_switch_sclk_to_32kxtal+0x30>)
  404ec8:	4a04      	ldr	r2, [pc, #16]	; (404edc <pmc_switch_sclk_to_32kxtal+0x34>)
  404eca:	601a      	str	r2, [r3, #0]
}
  404ecc:	bf00      	nop
  404ece:	370c      	adds	r7, #12
  404ed0:	46bd      	mov	sp, r7
  404ed2:	bc80      	pop	{r7}
  404ed4:	4770      	bx	lr
  404ed6:	bf00      	nop
  404ed8:	400e1410 	.word	0x400e1410
  404edc:	a5000008 	.word	0xa5000008

00404ee0 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  404ee0:	b480      	push	{r7}
  404ee2:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  404ee4:	4b09      	ldr	r3, [pc, #36]	; (404f0c <pmc_osc_is_ready_32kxtal+0x2c>)
  404ee6:	695b      	ldr	r3, [r3, #20]
  404ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  404eec:	2b00      	cmp	r3, #0
  404eee:	d007      	beq.n	404f00 <pmc_osc_is_ready_32kxtal+0x20>
  404ef0:	4b07      	ldr	r3, [pc, #28]	; (404f10 <pmc_osc_is_ready_32kxtal+0x30>)
  404ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  404ef8:	2b00      	cmp	r3, #0
  404efa:	d001      	beq.n	404f00 <pmc_osc_is_ready_32kxtal+0x20>
  404efc:	2301      	movs	r3, #1
  404efe:	e000      	b.n	404f02 <pmc_osc_is_ready_32kxtal+0x22>
  404f00:	2300      	movs	r3, #0
}
  404f02:	4618      	mov	r0, r3
  404f04:	46bd      	mov	sp, r7
  404f06:	bc80      	pop	{r7}
  404f08:	4770      	bx	lr
  404f0a:	bf00      	nop
  404f0c:	400e1410 	.word	0x400e1410
  404f10:	400e0400 	.word	0x400e0400

00404f14 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  404f14:	b480      	push	{r7}
  404f16:	b083      	sub	sp, #12
  404f18:	af00      	add	r7, sp, #0
  404f1a:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  404f1c:	4a18      	ldr	r2, [pc, #96]	; (404f80 <pmc_switch_mainck_to_fastrc+0x6c>)
  404f1e:	4b18      	ldr	r3, [pc, #96]	; (404f80 <pmc_switch_mainck_to_fastrc+0x6c>)
  404f20:	6a1b      	ldr	r3, [r3, #32]
  404f22:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  404f26:	f043 0308 	orr.w	r3, r3, #8
  404f2a:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  404f2c:	bf00      	nop
  404f2e:	4b14      	ldr	r3, [pc, #80]	; (404f80 <pmc_switch_mainck_to_fastrc+0x6c>)
  404f30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  404f36:	2b00      	cmp	r3, #0
  404f38:	d0f9      	beq.n	404f2e <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  404f3a:	4911      	ldr	r1, [pc, #68]	; (404f80 <pmc_switch_mainck_to_fastrc+0x6c>)
  404f3c:	4b10      	ldr	r3, [pc, #64]	; (404f80 <pmc_switch_mainck_to_fastrc+0x6c>)
  404f3e:	6a1b      	ldr	r3, [r3, #32]
  404f40:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  404f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  404f48:	687a      	ldr	r2, [r7, #4]
  404f4a:	4313      	orrs	r3, r2
  404f4c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  404f50:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  404f52:	bf00      	nop
  404f54:	4b0a      	ldr	r3, [pc, #40]	; (404f80 <pmc_switch_mainck_to_fastrc+0x6c>)
  404f56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  404f5c:	2b00      	cmp	r3, #0
  404f5e:	d0f9      	beq.n	404f54 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  404f60:	4a07      	ldr	r2, [pc, #28]	; (404f80 <pmc_switch_mainck_to_fastrc+0x6c>)
  404f62:	4b07      	ldr	r3, [pc, #28]	; (404f80 <pmc_switch_mainck_to_fastrc+0x6c>)
  404f64:	6a1b      	ldr	r3, [r3, #32]
  404f66:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  404f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  404f6e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  404f72:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  404f74:	bf00      	nop
  404f76:	370c      	adds	r7, #12
  404f78:	46bd      	mov	sp, r7
  404f7a:	bc80      	pop	{r7}
  404f7c:	4770      	bx	lr
  404f7e:	bf00      	nop
  404f80:	400e0400 	.word	0x400e0400

00404f84 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  404f84:	b480      	push	{r7}
  404f86:	b083      	sub	sp, #12
  404f88:	af00      	add	r7, sp, #0
  404f8a:	6078      	str	r0, [r7, #4]
  404f8c:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  404f8e:	687b      	ldr	r3, [r7, #4]
  404f90:	2b00      	cmp	r3, #0
  404f92:	d008      	beq.n	404fa6 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  404f94:	4916      	ldr	r1, [pc, #88]	; (404ff0 <pmc_switch_mainck_to_xtal+0x6c>)
  404f96:	4b16      	ldr	r3, [pc, #88]	; (404ff0 <pmc_switch_mainck_to_xtal+0x6c>)
  404f98:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  404f9a:	4a16      	ldr	r2, [pc, #88]	; (404ff4 <pmc_switch_mainck_to_xtal+0x70>)
  404f9c:	401a      	ands	r2, r3
  404f9e:	4b16      	ldr	r3, [pc, #88]	; (404ff8 <pmc_switch_mainck_to_xtal+0x74>)
  404fa0:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  404fa2:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  404fa4:	e01e      	b.n	404fe4 <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  404fa6:	4912      	ldr	r1, [pc, #72]	; (404ff0 <pmc_switch_mainck_to_xtal+0x6c>)
  404fa8:	4b11      	ldr	r3, [pc, #68]	; (404ff0 <pmc_switch_mainck_to_xtal+0x6c>)
  404faa:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  404fac:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  404fb0:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  404fb4:	683a      	ldr	r2, [r7, #0]
  404fb6:	0212      	lsls	r2, r2, #8
  404fb8:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  404fba:	4313      	orrs	r3, r2
  404fbc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  404fc0:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  404fc4:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  404fc6:	bf00      	nop
  404fc8:	4b09      	ldr	r3, [pc, #36]	; (404ff0 <pmc_switch_mainck_to_xtal+0x6c>)
  404fca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404fcc:	f003 0301 	and.w	r3, r3, #1
  404fd0:	2b00      	cmp	r3, #0
  404fd2:	d0f9      	beq.n	404fc8 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  404fd4:	4a06      	ldr	r2, [pc, #24]	; (404ff0 <pmc_switch_mainck_to_xtal+0x6c>)
  404fd6:	4b06      	ldr	r3, [pc, #24]	; (404ff0 <pmc_switch_mainck_to_xtal+0x6c>)
  404fd8:	6a1b      	ldr	r3, [r3, #32]
  404fda:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  404fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  404fe2:	6213      	str	r3, [r2, #32]
	}
}
  404fe4:	bf00      	nop
  404fe6:	370c      	adds	r7, #12
  404fe8:	46bd      	mov	sp, r7
  404fea:	bc80      	pop	{r7}
  404fec:	4770      	bx	lr
  404fee:	bf00      	nop
  404ff0:	400e0400 	.word	0x400e0400
  404ff4:	fec8fffc 	.word	0xfec8fffc
  404ff8:	01370002 	.word	0x01370002

00404ffc <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  404ffc:	b480      	push	{r7}
  404ffe:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  405000:	4b03      	ldr	r3, [pc, #12]	; (405010 <pmc_osc_is_ready_mainck+0x14>)
  405002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  405004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  405008:	4618      	mov	r0, r3
  40500a:	46bd      	mov	sp, r7
  40500c:	bc80      	pop	{r7}
  40500e:	4770      	bx	lr
  405010:	400e0400 	.word	0x400e0400

00405014 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  405014:	b480      	push	{r7}
  405016:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  405018:	4b03      	ldr	r3, [pc, #12]	; (405028 <pmc_disable_pllack+0x14>)
  40501a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40501e:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  405020:	bf00      	nop
  405022:	46bd      	mov	sp, r7
  405024:	bc80      	pop	{r7}
  405026:	4770      	bx	lr
  405028:	400e0400 	.word	0x400e0400

0040502c <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  40502c:	b480      	push	{r7}
  40502e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  405030:	4b03      	ldr	r3, [pc, #12]	; (405040 <pmc_is_locked_pllack+0x14>)
  405032:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  405034:	f003 0302 	and.w	r3, r3, #2
}
  405038:	4618      	mov	r0, r3
  40503a:	46bd      	mov	sp, r7
  40503c:	bc80      	pop	{r7}
  40503e:	4770      	bx	lr
  405040:	400e0400 	.word	0x400e0400

00405044 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  405044:	b480      	push	{r7}
  405046:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  405048:	4b03      	ldr	r3, [pc, #12]	; (405058 <pmc_disable_pllbck+0x14>)
  40504a:	2200      	movs	r2, #0
  40504c:	62da      	str	r2, [r3, #44]	; 0x2c
}
  40504e:	bf00      	nop
  405050:	46bd      	mov	sp, r7
  405052:	bc80      	pop	{r7}
  405054:	4770      	bx	lr
  405056:	bf00      	nop
  405058:	400e0400 	.word	0x400e0400

0040505c <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  40505c:	b480      	push	{r7}
  40505e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  405060:	4b03      	ldr	r3, [pc, #12]	; (405070 <pmc_is_locked_pllbck+0x14>)
  405062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  405064:	f003 0304 	and.w	r3, r3, #4
}
  405068:	4618      	mov	r0, r3
  40506a:	46bd      	mov	sp, r7
  40506c:	bc80      	pop	{r7}
  40506e:	4770      	bx	lr
  405070:	400e0400 	.word	0x400e0400

00405074 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  405074:	b480      	push	{r7}
  405076:	b083      	sub	sp, #12
  405078:	af00      	add	r7, sp, #0
  40507a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  40507c:	687b      	ldr	r3, [r7, #4]
  40507e:	2b22      	cmp	r3, #34	; 0x22
  405080:	d901      	bls.n	405086 <pmc_enable_periph_clk+0x12>
		return 1;
  405082:	2301      	movs	r3, #1
  405084:	e02f      	b.n	4050e6 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  405086:	687b      	ldr	r3, [r7, #4]
  405088:	2b1f      	cmp	r3, #31
  40508a:	d813      	bhi.n	4050b4 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40508c:	4b18      	ldr	r3, [pc, #96]	; (4050f0 <pmc_enable_periph_clk+0x7c>)
  40508e:	699a      	ldr	r2, [r3, #24]
  405090:	2101      	movs	r1, #1
  405092:	687b      	ldr	r3, [r7, #4]
  405094:	fa01 f303 	lsl.w	r3, r1, r3
  405098:	401a      	ands	r2, r3
  40509a:	2101      	movs	r1, #1
  40509c:	687b      	ldr	r3, [r7, #4]
  40509e:	fa01 f303 	lsl.w	r3, r1, r3
  4050a2:	429a      	cmp	r2, r3
  4050a4:	d01e      	beq.n	4050e4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4050a6:	4a12      	ldr	r2, [pc, #72]	; (4050f0 <pmc_enable_periph_clk+0x7c>)
  4050a8:	2101      	movs	r1, #1
  4050aa:	687b      	ldr	r3, [r7, #4]
  4050ac:	fa01 f303 	lsl.w	r3, r1, r3
  4050b0:	6113      	str	r3, [r2, #16]
  4050b2:	e017      	b.n	4050e4 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4050b4:	687b      	ldr	r3, [r7, #4]
  4050b6:	3b20      	subs	r3, #32
  4050b8:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4050ba:	4b0d      	ldr	r3, [pc, #52]	; (4050f0 <pmc_enable_periph_clk+0x7c>)
  4050bc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4050c0:	2101      	movs	r1, #1
  4050c2:	687b      	ldr	r3, [r7, #4]
  4050c4:	fa01 f303 	lsl.w	r3, r1, r3
  4050c8:	401a      	ands	r2, r3
  4050ca:	2101      	movs	r1, #1
  4050cc:	687b      	ldr	r3, [r7, #4]
  4050ce:	fa01 f303 	lsl.w	r3, r1, r3
  4050d2:	429a      	cmp	r2, r3
  4050d4:	d006      	beq.n	4050e4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4050d6:	4a06      	ldr	r2, [pc, #24]	; (4050f0 <pmc_enable_periph_clk+0x7c>)
  4050d8:	2101      	movs	r1, #1
  4050da:	687b      	ldr	r3, [r7, #4]
  4050dc:	fa01 f303 	lsl.w	r3, r1, r3
  4050e0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4050e4:	2300      	movs	r3, #0
}
  4050e6:	4618      	mov	r0, r3
  4050e8:	370c      	adds	r7, #12
  4050ea:	46bd      	mov	sp, r7
  4050ec:	bc80      	pop	{r7}
  4050ee:	4770      	bx	lr
  4050f0:	400e0400 	.word	0x400e0400

004050f4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4050f4:	b580      	push	{r7, lr}
  4050f6:	b084      	sub	sp, #16
  4050f8:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  4050fa:	4b27      	ldr	r3, [pc, #156]	; (405198 <Reset_Handler+0xa4>)
  4050fc:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  4050fe:	4b27      	ldr	r3, [pc, #156]	; (40519c <Reset_Handler+0xa8>)
  405100:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  405102:	68fa      	ldr	r2, [r7, #12]
  405104:	68bb      	ldr	r3, [r7, #8]
  405106:	429a      	cmp	r2, r3
  405108:	d90d      	bls.n	405126 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  40510a:	e007      	b.n	40511c <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  40510c:	68bb      	ldr	r3, [r7, #8]
  40510e:	1d1a      	adds	r2, r3, #4
  405110:	60ba      	str	r2, [r7, #8]
  405112:	68fa      	ldr	r2, [r7, #12]
  405114:	1d11      	adds	r1, r2, #4
  405116:	60f9      	str	r1, [r7, #12]
  405118:	6812      	ldr	r2, [r2, #0]
  40511a:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  40511c:	68bb      	ldr	r3, [r7, #8]
  40511e:	4a20      	ldr	r2, [pc, #128]	; (4051a0 <Reset_Handler+0xac>)
  405120:	4293      	cmp	r3, r2
  405122:	d3f3      	bcc.n	40510c <Reset_Handler+0x18>
  405124:	e020      	b.n	405168 <Reset_Handler+0x74>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  405126:	68fa      	ldr	r2, [r7, #12]
  405128:	68bb      	ldr	r3, [r7, #8]
  40512a:	429a      	cmp	r2, r3
  40512c:	d21c      	bcs.n	405168 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  40512e:	4a1c      	ldr	r2, [pc, #112]	; (4051a0 <Reset_Handler+0xac>)
  405130:	4b1a      	ldr	r3, [pc, #104]	; (40519c <Reset_Handler+0xa8>)
  405132:	1ad3      	subs	r3, r2, r3
  405134:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  405136:	68fa      	ldr	r2, [r7, #12]
  405138:	687b      	ldr	r3, [r7, #4]
  40513a:	4413      	add	r3, r2
  40513c:	3b04      	subs	r3, #4
  40513e:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  405140:	68ba      	ldr	r2, [r7, #8]
  405142:	687b      	ldr	r3, [r7, #4]
  405144:	4413      	add	r3, r2
  405146:	3b04      	subs	r3, #4
  405148:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  40514a:	e00a      	b.n	405162 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  40514c:	68bb      	ldr	r3, [r7, #8]
  40514e:	1f1a      	subs	r2, r3, #4
  405150:	60ba      	str	r2, [r7, #8]
  405152:	68fa      	ldr	r2, [r7, #12]
  405154:	1f11      	subs	r1, r2, #4
  405156:	60f9      	str	r1, [r7, #12]
  405158:	6812      	ldr	r2, [r2, #0]
  40515a:	601a      	str	r2, [r3, #0]
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  40515c:	687b      	ldr	r3, [r7, #4]
  40515e:	3b04      	subs	r3, #4
  405160:	607b      	str	r3, [r7, #4]
  405162:	687b      	ldr	r3, [r7, #4]
  405164:	2b00      	cmp	r3, #0
  405166:	d1f1      	bne.n	40514c <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  405168:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40516a:	4b0e      	ldr	r3, [pc, #56]	; (4051a4 <Reset_Handler+0xb0>)
  40516c:	60bb      	str	r3, [r7, #8]
  40516e:	e004      	b.n	40517a <Reset_Handler+0x86>
		*pDest++ = 0;
  405170:	68bb      	ldr	r3, [r7, #8]
  405172:	1d1a      	adds	r2, r3, #4
  405174:	60ba      	str	r2, [r7, #8]
  405176:	2200      	movs	r2, #0
  405178:	601a      	str	r2, [r3, #0]
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40517a:	68bb      	ldr	r3, [r7, #8]
  40517c:	4a0a      	ldr	r2, [pc, #40]	; (4051a8 <Reset_Handler+0xb4>)
  40517e:	4293      	cmp	r3, r2
  405180:	d3f6      	bcc.n	405170 <Reset_Handler+0x7c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  405182:	4b0a      	ldr	r3, [pc, #40]	; (4051ac <Reset_Handler+0xb8>)
  405184:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  405186:	4a0a      	ldr	r2, [pc, #40]	; (4051b0 <Reset_Handler+0xbc>)
  405188:	68fb      	ldr	r3, [r7, #12]
  40518a:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  40518c:	4b09      	ldr	r3, [pc, #36]	; (4051b4 <Reset_Handler+0xc0>)
  40518e:	4798      	blx	r3

	/* Branch to main function */
	main();
  405190:	4b09      	ldr	r3, [pc, #36]	; (4051b8 <Reset_Handler+0xc4>)
  405192:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  405194:	e7fe      	b.n	405194 <Reset_Handler+0xa0>
  405196:	bf00      	nop
  405198:	0040fd28 	.word	0x0040fd28
  40519c:	20000000 	.word	0x20000000
  4051a0:	200009a4 	.word	0x200009a4
  4051a4:	200009a8 	.word	0x200009a8
  4051a8:	20002f28 	.word	0x20002f28
  4051ac:	00400000 	.word	0x00400000
  4051b0:	e000ed00 	.word	0xe000ed00
  4051b4:	0040b855 	.word	0x0040b855
  4051b8:	00407a99 	.word	0x00407a99

004051bc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4051bc:	b480      	push	{r7}
  4051be:	af00      	add	r7, sp, #0
	while (1) {
	}
  4051c0:	e7fe      	b.n	4051c0 <Dummy_Handler+0x4>
  4051c2:	bf00      	nop

004051c4 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  4051c4:	b480      	push	{r7}
  4051c6:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4051c8:	4b5d      	ldr	r3, [pc, #372]	; (405340 <SystemCoreClockUpdate+0x17c>)
  4051ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4051cc:	f003 0303 	and.w	r3, r3, #3
  4051d0:	2b03      	cmp	r3, #3
  4051d2:	f200 8096 	bhi.w	405302 <SystemCoreClockUpdate+0x13e>
  4051d6:	a201      	add	r2, pc, #4	; (adr r2, 4051dc <SystemCoreClockUpdate+0x18>)
  4051d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4051dc:	004051ed 	.word	0x004051ed
  4051e0:	0040520d 	.word	0x0040520d
  4051e4:	00405257 	.word	0x00405257
  4051e8:	00405257 	.word	0x00405257
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4051ec:	4b55      	ldr	r3, [pc, #340]	; (405344 <SystemCoreClockUpdate+0x180>)
  4051ee:	695b      	ldr	r3, [r3, #20]
  4051f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4051f4:	2b00      	cmp	r3, #0
  4051f6:	d004      	beq.n	405202 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4051f8:	4b53      	ldr	r3, [pc, #332]	; (405348 <SystemCoreClockUpdate+0x184>)
  4051fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4051fe:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  405200:	e080      	b.n	405304 <SystemCoreClockUpdate+0x140>
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  405202:	4b51      	ldr	r3, [pc, #324]	; (405348 <SystemCoreClockUpdate+0x184>)
  405204:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  405208:	601a      	str	r2, [r3, #0]
			}
		break;
  40520a:	e07b      	b.n	405304 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40520c:	4b4c      	ldr	r3, [pc, #304]	; (405340 <SystemCoreClockUpdate+0x17c>)
  40520e:	6a1b      	ldr	r3, [r3, #32]
  405210:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  405214:	2b00      	cmp	r3, #0
  405216:	d003      	beq.n	405220 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  405218:	4b4b      	ldr	r3, [pc, #300]	; (405348 <SystemCoreClockUpdate+0x184>)
  40521a:	4a4c      	ldr	r2, [pc, #304]	; (40534c <SystemCoreClockUpdate+0x188>)
  40521c:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  40521e:	e071      	b.n	405304 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
			SystemCoreClock = CHIP_FREQ_XTAL;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  405220:	4b49      	ldr	r3, [pc, #292]	; (405348 <SystemCoreClockUpdate+0x184>)
  405222:	4a4b      	ldr	r2, [pc, #300]	; (405350 <SystemCoreClockUpdate+0x18c>)
  405224:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  405226:	4b46      	ldr	r3, [pc, #280]	; (405340 <SystemCoreClockUpdate+0x17c>)
  405228:	6a1b      	ldr	r3, [r3, #32]
  40522a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40522e:	2b10      	cmp	r3, #16
  405230:	d008      	beq.n	405244 <SystemCoreClockUpdate+0x80>
  405232:	2b20      	cmp	r3, #32
  405234:	d00a      	beq.n	40524c <SystemCoreClockUpdate+0x88>
  405236:	2b00      	cmp	r3, #0
  405238:	d000      	beq.n	40523c <SystemCoreClockUpdate+0x78>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
			break;
			
			default:
			break;
  40523a:	e00b      	b.n	405254 <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40523c:	4b42      	ldr	r3, [pc, #264]	; (405348 <SystemCoreClockUpdate+0x184>)
  40523e:	4a44      	ldr	r2, [pc, #272]	; (405350 <SystemCoreClockUpdate+0x18c>)
  405240:	601a      	str	r2, [r3, #0]
			break;
  405242:	e007      	b.n	405254 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  405244:	4b40      	ldr	r3, [pc, #256]	; (405348 <SystemCoreClockUpdate+0x184>)
  405246:	4a43      	ldr	r2, [pc, #268]	; (405354 <SystemCoreClockUpdate+0x190>)
  405248:	601a      	str	r2, [r3, #0]
			break;
  40524a:	e003      	b.n	405254 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40524c:	4b3e      	ldr	r3, [pc, #248]	; (405348 <SystemCoreClockUpdate+0x184>)
  40524e:	4a3f      	ldr	r2, [pc, #252]	; (40534c <SystemCoreClockUpdate+0x188>)
  405250:	601a      	str	r2, [r3, #0]
			break;
  405252:	bf00      	nop
			
			default:
			break;
			}
		}
		break;
  405254:	e056      	b.n	405304 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  405256:	4b3a      	ldr	r3, [pc, #232]	; (405340 <SystemCoreClockUpdate+0x17c>)
  405258:	6a1b      	ldr	r3, [r3, #32]
  40525a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40525e:	2b00      	cmp	r3, #0
  405260:	d003      	beq.n	40526a <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  405262:	4b39      	ldr	r3, [pc, #228]	; (405348 <SystemCoreClockUpdate+0x184>)
  405264:	4a39      	ldr	r2, [pc, #228]	; (40534c <SystemCoreClockUpdate+0x188>)
  405266:	601a      	str	r2, [r3, #0]
  405268:	e019      	b.n	40529e <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40526a:	4b37      	ldr	r3, [pc, #220]	; (405348 <SystemCoreClockUpdate+0x184>)
  40526c:	4a38      	ldr	r2, [pc, #224]	; (405350 <SystemCoreClockUpdate+0x18c>)
  40526e:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  405270:	4b33      	ldr	r3, [pc, #204]	; (405340 <SystemCoreClockUpdate+0x17c>)
  405272:	6a1b      	ldr	r3, [r3, #32]
  405274:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405278:	2b10      	cmp	r3, #16
  40527a:	d008      	beq.n	40528e <SystemCoreClockUpdate+0xca>
  40527c:	2b20      	cmp	r3, #32
  40527e:	d00a      	beq.n	405296 <SystemCoreClockUpdate+0xd2>
  405280:	2b00      	cmp	r3, #0
  405282:	d000      	beq.n	405286 <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  405284:	e00b      	b.n	40529e <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  405286:	4b30      	ldr	r3, [pc, #192]	; (405348 <SystemCoreClockUpdate+0x184>)
  405288:	4a31      	ldr	r2, [pc, #196]	; (405350 <SystemCoreClockUpdate+0x18c>)
  40528a:	601a      	str	r2, [r3, #0]
					break;
  40528c:	e007      	b.n	40529e <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40528e:	4b2e      	ldr	r3, [pc, #184]	; (405348 <SystemCoreClockUpdate+0x184>)
  405290:	4a30      	ldr	r2, [pc, #192]	; (405354 <SystemCoreClockUpdate+0x190>)
  405292:	601a      	str	r2, [r3, #0]
					break;
  405294:	e003      	b.n	40529e <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  405296:	4b2c      	ldr	r3, [pc, #176]	; (405348 <SystemCoreClockUpdate+0x184>)
  405298:	4a2c      	ldr	r2, [pc, #176]	; (40534c <SystemCoreClockUpdate+0x188>)
  40529a:	601a      	str	r2, [r3, #0]
					break;
  40529c:	bf00      	nop
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40529e:	4b28      	ldr	r3, [pc, #160]	; (405340 <SystemCoreClockUpdate+0x17c>)
  4052a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4052a2:	f003 0303 	and.w	r3, r3, #3
  4052a6:	2b02      	cmp	r3, #2
  4052a8:	d115      	bne.n	4052d6 <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4052aa:	4b25      	ldr	r3, [pc, #148]	; (405340 <SystemCoreClockUpdate+0x17c>)
  4052ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4052ae:	4b2a      	ldr	r3, [pc, #168]	; (405358 <SystemCoreClockUpdate+0x194>)
  4052b0:	4013      	ands	r3, r2
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  4052b2:	0c1b      	lsrs	r3, r3, #16
  4052b4:	3301      	adds	r3, #1
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4052b6:	4a24      	ldr	r2, [pc, #144]	; (405348 <SystemCoreClockUpdate+0x184>)
  4052b8:	6812      	ldr	r2, [r2, #0]
  4052ba:	fb02 f303 	mul.w	r3, r2, r3
  4052be:	4a22      	ldr	r2, [pc, #136]	; (405348 <SystemCoreClockUpdate+0x184>)
  4052c0:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4052c2:	4b1f      	ldr	r3, [pc, #124]	; (405340 <SystemCoreClockUpdate+0x17c>)
  4052c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  4052c6:	b2db      	uxtb	r3, r3
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4052c8:	4a1f      	ldr	r2, [pc, #124]	; (405348 <SystemCoreClockUpdate+0x184>)
  4052ca:	6812      	ldr	r2, [r2, #0]
  4052cc:	fbb2 f3f3 	udiv	r3, r2, r3
  4052d0:	4a1d      	ldr	r2, [pc, #116]	; (405348 <SystemCoreClockUpdate+0x184>)
  4052d2:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  4052d4:	e016      	b.n	405304 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4052d6:	4b1a      	ldr	r3, [pc, #104]	; (405340 <SystemCoreClockUpdate+0x17c>)
  4052d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4052da:	4b1f      	ldr	r3, [pc, #124]	; (405358 <SystemCoreClockUpdate+0x194>)
  4052dc:	4013      	ands	r3, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  4052de:	0c1b      	lsrs	r3, r3, #16
  4052e0:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4052e2:	4a19      	ldr	r2, [pc, #100]	; (405348 <SystemCoreClockUpdate+0x184>)
  4052e4:	6812      	ldr	r2, [r2, #0]
  4052e6:	fb02 f303 	mul.w	r3, r2, r3
  4052ea:	4a17      	ldr	r2, [pc, #92]	; (405348 <SystemCoreClockUpdate+0x184>)
  4052ec:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4052ee:	4b14      	ldr	r3, [pc, #80]	; (405340 <SystemCoreClockUpdate+0x17c>)
  4052f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  4052f2:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4052f4:	4a14      	ldr	r2, [pc, #80]	; (405348 <SystemCoreClockUpdate+0x184>)
  4052f6:	6812      	ldr	r2, [r2, #0]
  4052f8:	fbb2 f3f3 	udiv	r3, r2, r3
  4052fc:	4a12      	ldr	r2, [pc, #72]	; (405348 <SystemCoreClockUpdate+0x184>)
  4052fe:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  405300:	e000      	b.n	405304 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  405302:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  405304:	4b0e      	ldr	r3, [pc, #56]	; (405340 <SystemCoreClockUpdate+0x17c>)
  405306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405308:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40530c:	2b70      	cmp	r3, #112	; 0x70
  40530e:	d108      	bne.n	405322 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  405310:	4b0d      	ldr	r3, [pc, #52]	; (405348 <SystemCoreClockUpdate+0x184>)
  405312:	681b      	ldr	r3, [r3, #0]
  405314:	4a11      	ldr	r2, [pc, #68]	; (40535c <SystemCoreClockUpdate+0x198>)
  405316:	fba2 2303 	umull	r2, r3, r2, r3
  40531a:	085b      	lsrs	r3, r3, #1
  40531c:	4a0a      	ldr	r2, [pc, #40]	; (405348 <SystemCoreClockUpdate+0x184>)
  40531e:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  405320:	e00a      	b.n	405338 <SystemCoreClockUpdate+0x174>

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  405322:	4b07      	ldr	r3, [pc, #28]	; (405340 <SystemCoreClockUpdate+0x17c>)
  405324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405326:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40532a:	091b      	lsrs	r3, r3, #4
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  40532c:	4a06      	ldr	r2, [pc, #24]	; (405348 <SystemCoreClockUpdate+0x184>)
  40532e:	6812      	ldr	r2, [r2, #0]
  405330:	fa22 f303 	lsr.w	r3, r2, r3
  405334:	4a04      	ldr	r2, [pc, #16]	; (405348 <SystemCoreClockUpdate+0x184>)
  405336:	6013      	str	r3, [r2, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  405338:	bf00      	nop
  40533a:	46bd      	mov	sp, r7
  40533c:	bc80      	pop	{r7}
  40533e:	4770      	bx	lr
  405340:	400e0400 	.word	0x400e0400
  405344:	400e1410 	.word	0x400e1410
  405348:	20000118 	.word	0x20000118
  40534c:	00b71b00 	.word	0x00b71b00
  405350:	003d0900 	.word	0x003d0900
  405354:	007a1200 	.word	0x007a1200
  405358:	07ff0000 	.word	0x07ff0000
  40535c:	aaaaaaab 	.word	0xaaaaaaab

00405360 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  405360:	b480      	push	{r7}
  405362:	b083      	sub	sp, #12
  405364:	af00      	add	r7, sp, #0
  405366:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  405368:	687b      	ldr	r3, [r7, #4]
  40536a:	4a18      	ldr	r2, [pc, #96]	; (4053cc <system_init_flash+0x6c>)
  40536c:	4293      	cmp	r3, r2
  40536e:	d804      	bhi.n	40537a <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  405370:	4b17      	ldr	r3, [pc, #92]	; (4053d0 <system_init_flash+0x70>)
  405372:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  405376:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  405378:	e023      	b.n	4053c2 <system_init_flash+0x62>
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40537a:	687b      	ldr	r3, [r7, #4]
  40537c:	4a15      	ldr	r2, [pc, #84]	; (4053d4 <system_init_flash+0x74>)
  40537e:	4293      	cmp	r3, r2
  405380:	d803      	bhi.n	40538a <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  405382:	4b13      	ldr	r3, [pc, #76]	; (4053d0 <system_init_flash+0x70>)
  405384:	4a14      	ldr	r2, [pc, #80]	; (4053d8 <system_init_flash+0x78>)
  405386:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  405388:	e01b      	b.n	4053c2 <system_init_flash+0x62>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  40538a:	687b      	ldr	r3, [r7, #4]
  40538c:	4a13      	ldr	r2, [pc, #76]	; (4053dc <system_init_flash+0x7c>)
  40538e:	4293      	cmp	r3, r2
  405390:	d803      	bhi.n	40539a <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  405392:	4b0f      	ldr	r3, [pc, #60]	; (4053d0 <system_init_flash+0x70>)
  405394:	4a12      	ldr	r2, [pc, #72]	; (4053e0 <system_init_flash+0x80>)
  405396:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  405398:	e013      	b.n	4053c2 <system_init_flash+0x62>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40539a:	687b      	ldr	r3, [r7, #4]
  40539c:	4a11      	ldr	r2, [pc, #68]	; (4053e4 <system_init_flash+0x84>)
  40539e:	4293      	cmp	r3, r2
  4053a0:	d803      	bhi.n	4053aa <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4053a2:	4b0b      	ldr	r3, [pc, #44]	; (4053d0 <system_init_flash+0x70>)
  4053a4:	4a10      	ldr	r2, [pc, #64]	; (4053e8 <system_init_flash+0x88>)
  4053a6:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  4053a8:	e00b      	b.n	4053c2 <system_init_flash+0x62>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4053aa:	687b      	ldr	r3, [r7, #4]
  4053ac:	4a0f      	ldr	r2, [pc, #60]	; (4053ec <system_init_flash+0x8c>)
  4053ae:	4293      	cmp	r3, r2
  4053b0:	d804      	bhi.n	4053bc <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4053b2:	4b07      	ldr	r3, [pc, #28]	; (4053d0 <system_init_flash+0x70>)
  4053b4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4053b8:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  4053ba:	e002      	b.n	4053c2 <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4053bc:	4b04      	ldr	r3, [pc, #16]	; (4053d0 <system_init_flash+0x70>)
  4053be:	4a0c      	ldr	r2, [pc, #48]	; (4053f0 <system_init_flash+0x90>)
  4053c0:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  4053c2:	bf00      	nop
  4053c4:	370c      	adds	r7, #12
  4053c6:	46bd      	mov	sp, r7
  4053c8:	bc80      	pop	{r7}
  4053ca:	4770      	bx	lr
  4053cc:	01312cff 	.word	0x01312cff
  4053d0:	400e0a00 	.word	0x400e0a00
  4053d4:	026259ff 	.word	0x026259ff
  4053d8:	04000100 	.word	0x04000100
  4053dc:	039386ff 	.word	0x039386ff
  4053e0:	04000200 	.word	0x04000200
  4053e4:	04c4b3ff 	.word	0x04c4b3ff
  4053e8:	04000300 	.word	0x04000300
  4053ec:	05f5e0ff 	.word	0x05f5e0ff
  4053f0:	04000500 	.word	0x04000500

004053f4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  4053f4:	b480      	push	{r7}
  4053f6:	b085      	sub	sp, #20
  4053f8:	af00      	add	r7, sp, #0
  4053fa:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  4053fc:	4b10      	ldr	r3, [pc, #64]	; (405440 <_sbrk+0x4c>)
  4053fe:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  405400:	4b10      	ldr	r3, [pc, #64]	; (405444 <_sbrk+0x50>)
  405402:	681b      	ldr	r3, [r3, #0]
  405404:	2b00      	cmp	r3, #0
  405406:	d102      	bne.n	40540e <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  405408:	4b0e      	ldr	r3, [pc, #56]	; (405444 <_sbrk+0x50>)
  40540a:	4a0f      	ldr	r2, [pc, #60]	; (405448 <_sbrk+0x54>)
  40540c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  40540e:	4b0d      	ldr	r3, [pc, #52]	; (405444 <_sbrk+0x50>)
  405410:	681b      	ldr	r3, [r3, #0]
  405412:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  405414:	68ba      	ldr	r2, [r7, #8]
  405416:	687b      	ldr	r3, [r7, #4]
  405418:	441a      	add	r2, r3
  40541a:	68fb      	ldr	r3, [r7, #12]
  40541c:	429a      	cmp	r2, r3
  40541e:	dd02      	ble.n	405426 <_sbrk+0x32>
		return (caddr_t) -1;	
  405420:	f04f 33ff 	mov.w	r3, #4294967295
  405424:	e006      	b.n	405434 <_sbrk+0x40>
	}

	heap += incr;
  405426:	4b07      	ldr	r3, [pc, #28]	; (405444 <_sbrk+0x50>)
  405428:	681a      	ldr	r2, [r3, #0]
  40542a:	687b      	ldr	r3, [r7, #4]
  40542c:	4413      	add	r3, r2
  40542e:	4a05      	ldr	r2, [pc, #20]	; (405444 <_sbrk+0x50>)
  405430:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  405432:	68bb      	ldr	r3, [r7, #8]
}
  405434:	4618      	mov	r0, r3
  405436:	3714      	adds	r7, #20
  405438:	46bd      	mov	sp, r7
  40543a:	bc80      	pop	{r7}
  40543c:	4770      	bx	lr
  40543e:	bf00      	nop
  405440:	2000fffc 	.word	0x2000fffc
  405444:	20000d0c 	.word	0x20000d0c
  405448:	20005f28 	.word	0x20005f28

0040544c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
  40544c:	b480      	push	{r7}
  40544e:	b083      	sub	sp, #12
  405450:	af00      	add	r7, sp, #0
  405452:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  405454:	687b      	ldr	r3, [r7, #4]
  405456:	f103 0208 	add.w	r2, r3, #8
  40545a:	687b      	ldr	r3, [r7, #4]
  40545c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40545e:	687b      	ldr	r3, [r7, #4]
  405460:	f04f 32ff 	mov.w	r2, #4294967295
  405464:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  405466:	687b      	ldr	r3, [r7, #4]
  405468:	f103 0208 	add.w	r2, r3, #8
  40546c:	687b      	ldr	r3, [r7, #4]
  40546e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  405470:	687b      	ldr	r3, [r7, #4]
  405472:	f103 0208 	add.w	r2, r3, #8
  405476:	687b      	ldr	r3, [r7, #4]
  405478:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  40547a:	687b      	ldr	r3, [r7, #4]
  40547c:	2200      	movs	r2, #0
  40547e:	601a      	str	r2, [r3, #0]
}
  405480:	bf00      	nop
  405482:	370c      	adds	r7, #12
  405484:	46bd      	mov	sp, r7
  405486:	bc80      	pop	{r7}
  405488:	4770      	bx	lr
  40548a:	bf00      	nop

0040548c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
  40548c:	b480      	push	{r7}
  40548e:	b083      	sub	sp, #12
  405490:	af00      	add	r7, sp, #0
  405492:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  405494:	687b      	ldr	r3, [r7, #4]
  405496:	2200      	movs	r2, #0
  405498:	611a      	str	r2, [r3, #16]
}
  40549a:	bf00      	nop
  40549c:	370c      	adds	r7, #12
  40549e:	46bd      	mov	sp, r7
  4054a0:	bc80      	pop	{r7}
  4054a2:	4770      	bx	lr

004054a4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
  4054a4:	b480      	push	{r7}
  4054a6:	b085      	sub	sp, #20
  4054a8:	af00      	add	r7, sp, #0
  4054aa:	6078      	str	r0, [r7, #4]
  4054ac:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  4054ae:	687b      	ldr	r3, [r7, #4]
  4054b0:	685b      	ldr	r3, [r3, #4]
  4054b2:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
  4054b4:	68fb      	ldr	r3, [r7, #12]
  4054b6:	685a      	ldr	r2, [r3, #4]
  4054b8:	683b      	ldr	r3, [r7, #0]
  4054ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  4054bc:	687b      	ldr	r3, [r7, #4]
  4054be:	685a      	ldr	r2, [r3, #4]
  4054c0:	683b      	ldr	r3, [r7, #0]
  4054c2:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  4054c4:	68fb      	ldr	r3, [r7, #12]
  4054c6:	685b      	ldr	r3, [r3, #4]
  4054c8:	683a      	ldr	r2, [r7, #0]
  4054ca:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  4054cc:	68fb      	ldr	r3, [r7, #12]
  4054ce:	683a      	ldr	r2, [r7, #0]
  4054d0:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  4054d2:	687b      	ldr	r3, [r7, #4]
  4054d4:	683a      	ldr	r2, [r7, #0]
  4054d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4054d8:	683b      	ldr	r3, [r7, #0]
  4054da:	687a      	ldr	r2, [r7, #4]
  4054dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  4054de:	687b      	ldr	r3, [r7, #4]
  4054e0:	681b      	ldr	r3, [r3, #0]
  4054e2:	1c5a      	adds	r2, r3, #1
  4054e4:	687b      	ldr	r3, [r7, #4]
  4054e6:	601a      	str	r2, [r3, #0]
}
  4054e8:	bf00      	nop
  4054ea:	3714      	adds	r7, #20
  4054ec:	46bd      	mov	sp, r7
  4054ee:	bc80      	pop	{r7}
  4054f0:	4770      	bx	lr
  4054f2:	bf00      	nop

004054f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  4054f4:	b480      	push	{r7}
  4054f6:	b085      	sub	sp, #20
  4054f8:	af00      	add	r7, sp, #0
  4054fa:	6078      	str	r0, [r7, #4]
  4054fc:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  4054fe:	683b      	ldr	r3, [r7, #0]
  405500:	681b      	ldr	r3, [r3, #0]
  405502:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  405504:	68bb      	ldr	r3, [r7, #8]
  405506:	f1b3 3fff 	cmp.w	r3, #4294967295
  40550a:	d103      	bne.n	405514 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  40550c:	687b      	ldr	r3, [r7, #4]
  40550e:	691b      	ldr	r3, [r3, #16]
  405510:	60fb      	str	r3, [r7, #12]
  405512:	e00c      	b.n	40552e <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  405514:	687b      	ldr	r3, [r7, #4]
  405516:	3308      	adds	r3, #8
  405518:	60fb      	str	r3, [r7, #12]
  40551a:	e002      	b.n	405522 <vListInsert+0x2e>
  40551c:	68fb      	ldr	r3, [r7, #12]
  40551e:	685b      	ldr	r3, [r3, #4]
  405520:	60fb      	str	r3, [r7, #12]
  405522:	68fb      	ldr	r3, [r7, #12]
  405524:	685b      	ldr	r3, [r3, #4]
  405526:	681a      	ldr	r2, [r3, #0]
  405528:	68bb      	ldr	r3, [r7, #8]
  40552a:	429a      	cmp	r2, r3
  40552c:	d9f6      	bls.n	40551c <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  40552e:	68fb      	ldr	r3, [r7, #12]
  405530:	685a      	ldr	r2, [r3, #4]
  405532:	683b      	ldr	r3, [r7, #0]
  405534:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  405536:	683b      	ldr	r3, [r7, #0]
  405538:	685b      	ldr	r3, [r3, #4]
  40553a:	683a      	ldr	r2, [r7, #0]
  40553c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  40553e:	683b      	ldr	r3, [r7, #0]
  405540:	68fa      	ldr	r2, [r7, #12]
  405542:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  405544:	68fb      	ldr	r3, [r7, #12]
  405546:	683a      	ldr	r2, [r7, #0]
  405548:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40554a:	683b      	ldr	r3, [r7, #0]
  40554c:	687a      	ldr	r2, [r7, #4]
  40554e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  405550:	687b      	ldr	r3, [r7, #4]
  405552:	681b      	ldr	r3, [r3, #0]
  405554:	1c5a      	adds	r2, r3, #1
  405556:	687b      	ldr	r3, [r7, #4]
  405558:	601a      	str	r2, [r3, #0]
}
  40555a:	bf00      	nop
  40555c:	3714      	adds	r7, #20
  40555e:	46bd      	mov	sp, r7
  405560:	bc80      	pop	{r7}
  405562:	4770      	bx	lr

00405564 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
  405564:	b480      	push	{r7}
  405566:	b085      	sub	sp, #20
  405568:	af00      	add	r7, sp, #0
  40556a:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  40556c:	687b      	ldr	r3, [r7, #4]
  40556e:	685b      	ldr	r3, [r3, #4]
  405570:	687a      	ldr	r2, [r7, #4]
  405572:	6892      	ldr	r2, [r2, #8]
  405574:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  405576:	687b      	ldr	r3, [r7, #4]
  405578:	689b      	ldr	r3, [r3, #8]
  40557a:	687a      	ldr	r2, [r7, #4]
  40557c:	6852      	ldr	r2, [r2, #4]
  40557e:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  405580:	687b      	ldr	r3, [r7, #4]
  405582:	691b      	ldr	r3, [r3, #16]
  405584:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  405586:	68fb      	ldr	r3, [r7, #12]
  405588:	685a      	ldr	r2, [r3, #4]
  40558a:	687b      	ldr	r3, [r7, #4]
  40558c:	429a      	cmp	r2, r3
  40558e:	d103      	bne.n	405598 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  405590:	687b      	ldr	r3, [r7, #4]
  405592:	689a      	ldr	r2, [r3, #8]
  405594:	68fb      	ldr	r3, [r7, #12]
  405596:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  405598:	687b      	ldr	r3, [r7, #4]
  40559a:	2200      	movs	r2, #0
  40559c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
  40559e:	68fb      	ldr	r3, [r7, #12]
  4055a0:	681b      	ldr	r3, [r3, #0]
  4055a2:	1e5a      	subs	r2, r3, #1
  4055a4:	68fb      	ldr	r3, [r7, #12]
  4055a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  4055a8:	68fb      	ldr	r3, [r7, #12]
  4055aa:	681b      	ldr	r3, [r3, #0]
}
  4055ac:	4618      	mov	r0, r3
  4055ae:	3714      	adds	r7, #20
  4055b0:	46bd      	mov	sp, r7
  4055b2:	bc80      	pop	{r7}
  4055b4:	4770      	bx	lr
  4055b6:	bf00      	nop

004055b8 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4055b8:	b480      	push	{r7}
  4055ba:	b083      	sub	sp, #12
  4055bc:	af00      	add	r7, sp, #0
  4055be:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4055c0:	687b      	ldr	r3, [r7, #4]
  4055c2:	2b07      	cmp	r3, #7
  4055c4:	d825      	bhi.n	405612 <osc_get_rate+0x5a>
  4055c6:	a201      	add	r2, pc, #4	; (adr r2, 4055cc <osc_get_rate+0x14>)
  4055c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4055cc:	004055ed 	.word	0x004055ed
  4055d0:	004055f3 	.word	0x004055f3
  4055d4:	004055f9 	.word	0x004055f9
  4055d8:	004055ff 	.word	0x004055ff
  4055dc:	00405603 	.word	0x00405603
  4055e0:	00405607 	.word	0x00405607
  4055e4:	0040560b 	.word	0x0040560b
  4055e8:	0040560f 	.word	0x0040560f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4055ec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4055f0:	e010      	b.n	405614 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4055f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4055f6:	e00d      	b.n	405614 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4055f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4055fc:	e00a      	b.n	405614 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4055fe:	4b08      	ldr	r3, [pc, #32]	; (405620 <osc_get_rate+0x68>)
  405600:	e008      	b.n	405614 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  405602:	4b08      	ldr	r3, [pc, #32]	; (405624 <osc_get_rate+0x6c>)
  405604:	e006      	b.n	405614 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  405606:	4b08      	ldr	r3, [pc, #32]	; (405628 <osc_get_rate+0x70>)
  405608:	e004      	b.n	405614 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40560a:	4b07      	ldr	r3, [pc, #28]	; (405628 <osc_get_rate+0x70>)
  40560c:	e002      	b.n	405614 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40560e:	4b06      	ldr	r3, [pc, #24]	; (405628 <osc_get_rate+0x70>)
  405610:	e000      	b.n	405614 <osc_get_rate+0x5c>
	}

	return 0;
  405612:	2300      	movs	r3, #0
}
  405614:	4618      	mov	r0, r3
  405616:	370c      	adds	r7, #12
  405618:	46bd      	mov	sp, r7
  40561a:	bc80      	pop	{r7}
  40561c:	4770      	bx	lr
  40561e:	bf00      	nop
  405620:	003d0900 	.word	0x003d0900
  405624:	007a1200 	.word	0x007a1200
  405628:	00b71b00 	.word	0x00b71b00

0040562c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40562c:	b580      	push	{r7, lr}
  40562e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  405630:	2006      	movs	r0, #6
  405632:	4b04      	ldr	r3, [pc, #16]	; (405644 <sysclk_get_main_hz+0x18>)
  405634:	4798      	blx	r3
  405636:	4602      	mov	r2, r0
  405638:	4613      	mov	r3, r2
  40563a:	009b      	lsls	r3, r3, #2
  40563c:	4413      	add	r3, r2
  40563e:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  405640:	4618      	mov	r0, r3
  405642:	bd80      	pop	{r7, pc}
  405644:	004055b9 	.word	0x004055b9

00405648 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  405648:	b580      	push	{r7, lr}
  40564a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40564c:	4b02      	ldr	r3, [pc, #8]	; (405658 <sysclk_get_cpu_hz+0x10>)
  40564e:	4798      	blx	r3
  405650:	4603      	mov	r3, r0
  405652:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  405654:	4618      	mov	r0, r3
  405656:	bd80      	pop	{r7, pc}
  405658:	0040562d 	.word	0x0040562d

0040565c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
  40565c:	b480      	push	{r7}
  40565e:	b085      	sub	sp, #20
  405660:	af00      	add	r7, sp, #0
  405662:	60f8      	str	r0, [r7, #12]
  405664:	60b9      	str	r1, [r7, #8]
  405666:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
  405668:	68fb      	ldr	r3, [r7, #12]
  40566a:	3b04      	subs	r3, #4
  40566c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  40566e:	68fb      	ldr	r3, [r7, #12]
  405670:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  405674:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  405676:	68fb      	ldr	r3, [r7, #12]
  405678:	3b04      	subs	r3, #4
  40567a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
  40567c:	68ba      	ldr	r2, [r7, #8]
  40567e:	68fb      	ldr	r3, [r7, #12]
  405680:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  405682:	68fb      	ldr	r3, [r7, #12]
  405684:	3b04      	subs	r3, #4
  405686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
  405688:	68fb      	ldr	r3, [r7, #12]
  40568a:	2200      	movs	r2, #0
  40568c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  40568e:	68fb      	ldr	r3, [r7, #12]
  405690:	3b14      	subs	r3, #20
  405692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
  405694:	687a      	ldr	r2, [r7, #4]
  405696:	68fb      	ldr	r3, [r7, #12]
  405698:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
  40569a:	68fb      	ldr	r3, [r7, #12]
  40569c:	3b20      	subs	r3, #32
  40569e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
  4056a0:	68fb      	ldr	r3, [r7, #12]
}
  4056a2:	4618      	mov	r0, r3
  4056a4:	3714      	adds	r7, #20
  4056a6:	46bd      	mov	sp, r7
  4056a8:	bc80      	pop	{r7}
  4056aa:	4770      	bx	lr

004056ac <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
  4056ac:	4b06      	ldr	r3, [pc, #24]	; (4056c8 <pxCurrentTCBConst2>)
  4056ae:	6819      	ldr	r1, [r3, #0]
  4056b0:	6808      	ldr	r0, [r1, #0]
  4056b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4056b6:	f380 8809 	msr	PSP, r0
  4056ba:	f04f 0000 	mov.w	r0, #0
  4056be:	f380 8811 	msr	BASEPRI, r0
  4056c2:	f04e 0e0d 	orr.w	lr, lr, #13
  4056c6:	4770      	bx	lr

004056c8 <pxCurrentTCBConst2>:
  4056c8:	20002d1c 	.word	0x20002d1c
					"	bx r14							\n"
					"									\n"
					"	.align 2						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
  4056cc:	bf00      	nop
  4056ce:	bf00      	nop

004056d0 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  4056d0:	4804      	ldr	r0, [pc, #16]	; (4056e4 <prvPortStartFirstTask+0x14>)
  4056d2:	6800      	ldr	r0, [r0, #0]
  4056d4:	6800      	ldr	r0, [r0, #0]
  4056d6:	f380 8808 	msr	MSP, r0
  4056da:	b662      	cpsie	i
  4056dc:	df00      	svc	0
  4056de:	bf00      	nop
					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
					" cpsie i				\n" /* Globally enable interrupts. */
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
  4056e0:	bf00      	nop
  4056e2:	0000      	.short	0x0000
  4056e4:	e000ed08 	.word	0xe000ed08

004056e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
  4056e8:	b580      	push	{r7, lr}
  4056ea:	af00      	add	r7, sp, #0
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4056ec:	4a0a      	ldr	r2, [pc, #40]	; (405718 <xPortStartScheduler+0x30>)
  4056ee:	4b0a      	ldr	r3, [pc, #40]	; (405718 <xPortStartScheduler+0x30>)
  4056f0:	681b      	ldr	r3, [r3, #0]
  4056f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4056f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4056f8:	4a07      	ldr	r2, [pc, #28]	; (405718 <xPortStartScheduler+0x30>)
  4056fa:	4b07      	ldr	r3, [pc, #28]	; (405718 <xPortStartScheduler+0x30>)
  4056fc:	681b      	ldr	r3, [r3, #0]
  4056fe:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
  405702:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  405704:	4b05      	ldr	r3, [pc, #20]	; (40571c <xPortStartScheduler+0x34>)
  405706:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  405708:	4b05      	ldr	r3, [pc, #20]	; (405720 <xPortStartScheduler+0x38>)
  40570a:	2200      	movs	r2, #0
  40570c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  40570e:	4b05      	ldr	r3, [pc, #20]	; (405724 <xPortStartScheduler+0x3c>)
  405710:	4798      	blx	r3

	/* Should not get here! */
	return 0;
  405712:	2300      	movs	r3, #0
}
  405714:	4618      	mov	r0, r3
  405716:	bd80      	pop	{r7, pc}
  405718:	e000ed20 	.word	0xe000ed20
  40571c:	00405815 	.word	0x00405815
  405720:	2000011c 	.word	0x2000011c
  405724:	004056d1 	.word	0x004056d1

00405728 <vPortYieldFromISR>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
  405728:	b480      	push	{r7}
  40572a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  40572c:	4b03      	ldr	r3, [pc, #12]	; (40573c <vPortYieldFromISR+0x14>)
  40572e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  405732:	601a      	str	r2, [r3, #0]
}
  405734:	bf00      	nop
  405736:	46bd      	mov	sp, r7
  405738:	bc80      	pop	{r7}
  40573a:	4770      	bx	lr
  40573c:	e000ed04 	.word	0xe000ed04

00405740 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  405740:	b580      	push	{r7, lr}
  405742:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
  405744:	4b04      	ldr	r3, [pc, #16]	; (405758 <vPortEnterCritical+0x18>)
  405746:	4798      	blx	r3
	uxCriticalNesting++;
  405748:	4b04      	ldr	r3, [pc, #16]	; (40575c <vPortEnterCritical+0x1c>)
  40574a:	681b      	ldr	r3, [r3, #0]
  40574c:	3301      	adds	r3, #1
  40574e:	4a03      	ldr	r2, [pc, #12]	; (40575c <vPortEnterCritical+0x1c>)
  405750:	6013      	str	r3, [r2, #0]
}
  405752:	bf00      	nop
  405754:	bd80      	pop	{r7, pc}
  405756:	bf00      	nop
  405758:	00405789 	.word	0x00405789
  40575c:	2000011c 	.word	0x2000011c

00405760 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  405760:	b580      	push	{r7, lr}
  405762:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
  405764:	4b06      	ldr	r3, [pc, #24]	; (405780 <vPortExitCritical+0x20>)
  405766:	681b      	ldr	r3, [r3, #0]
  405768:	3b01      	subs	r3, #1
  40576a:	4a05      	ldr	r2, [pc, #20]	; (405780 <vPortExitCritical+0x20>)
  40576c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  40576e:	4b04      	ldr	r3, [pc, #16]	; (405780 <vPortExitCritical+0x20>)
  405770:	681b      	ldr	r3, [r3, #0]
  405772:	2b00      	cmp	r3, #0
  405774:	d102      	bne.n	40577c <vPortExitCritical+0x1c>
	{
		portENABLE_INTERRUPTS();
  405776:	2000      	movs	r0, #0
  405778:	4b02      	ldr	r3, [pc, #8]	; (405784 <vPortExitCritical+0x24>)
  40577a:	4798      	blx	r3
	}
}
  40577c:	bf00      	nop
  40577e:	bd80      	pop	{r7, pc}
  405780:	2000011c 	.word	0x2000011c
  405784:	0040579d 	.word	0x0040579d

00405788 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
  405788:	f3ef 8011 	mrs	r0, BASEPRI
  40578c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
  405790:	f381 8811 	msr	BASEPRI, r1
  405794:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
  405796:	2300      	movs	r3, #0
}
  405798:	4618      	mov	r0, r3
  40579a:	bf00      	nop

0040579c <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
  40579c:	f380 8811 	msr	BASEPRI, r0
  4057a0:	4770      	bx	lr
		:::"r0"														\
	);
	
	/* Just to avoid compiler warnings. */
	( void ) ulNewMaskValue;
}
  4057a2:	bf00      	nop

004057a4 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
  4057a4:	f3ef 8009 	mrs	r0, PSP
  4057a8:	4b0c      	ldr	r3, [pc, #48]	; (4057dc <pxCurrentTCBConst>)
  4057aa:	681a      	ldr	r2, [r3, #0]
  4057ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4057b0:	6010      	str	r0, [r2, #0]
  4057b2:	e92d 4008 	stmdb	sp!, {r3, lr}
  4057b6:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  4057ba:	f380 8811 	msr	BASEPRI, r0
  4057be:	f001 f829 	bl	406814 <vTaskSwitchContext>
  4057c2:	f04f 0000 	mov.w	r0, #0
  4057c6:	f380 8811 	msr	BASEPRI, r0
  4057ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  4057ce:	6819      	ldr	r1, [r3, #0]
  4057d0:	6808      	ldr	r0, [r1, #0]
  4057d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4057d6:	f380 8809 	msr	PSP, r0
  4057da:	4770      	bx	lr

004057dc <pxCurrentTCBConst>:
  4057dc:	20002d1c 	.word	0x20002d1c
	"										\n"
	"	.align 2							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
  4057e0:	bf00      	nop
  4057e2:	bf00      	nop

004057e4 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
  4057e4:	b580      	push	{r7, lr}
  4057e6:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4057e8:	4b06      	ldr	r3, [pc, #24]	; (405804 <SysTick_Handler+0x20>)
  4057ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4057ee:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
  4057f0:	4b05      	ldr	r3, [pc, #20]	; (405808 <SysTick_Handler+0x24>)
  4057f2:	4798      	blx	r3
	{
		vTaskIncrementTick();
  4057f4:	4b05      	ldr	r3, [pc, #20]	; (40580c <SysTick_Handler+0x28>)
  4057f6:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  4057f8:	2000      	movs	r0, #0
  4057fa:	4b05      	ldr	r3, [pc, #20]	; (405810 <SysTick_Handler+0x2c>)
  4057fc:	4798      	blx	r3
}
  4057fe:	bf00      	nop
  405800:	bd80      	pop	{r7, pc}
  405802:	bf00      	nop
  405804:	e000ed04 	.word	0xe000ed04
  405808:	00405789 	.word	0x00405789
  40580c:	004066c9 	.word	0x004066c9
  405810:	0040579d 	.word	0x0040579d

00405814 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
  405814:	b598      	push	{r3, r4, r7, lr}
  405816:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
  405818:	4c07      	ldr	r4, [pc, #28]	; (405838 <vPortSetupTimerInterrupt+0x24>)
  40581a:	4b08      	ldr	r3, [pc, #32]	; (40583c <vPortSetupTimerInterrupt+0x28>)
  40581c:	4798      	blx	r3
  40581e:	4602      	mov	r2, r0
  405820:	4b07      	ldr	r3, [pc, #28]	; (405840 <vPortSetupTimerInterrupt+0x2c>)
  405822:	fba3 2302 	umull	r2, r3, r3, r2
  405826:	099b      	lsrs	r3, r3, #6
  405828:	3b01      	subs	r3, #1
  40582a:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
  40582c:	4b05      	ldr	r3, [pc, #20]	; (405844 <vPortSetupTimerInterrupt+0x30>)
  40582e:	2207      	movs	r2, #7
  405830:	601a      	str	r2, [r3, #0]
}
  405832:	bf00      	nop
  405834:	bd98      	pop	{r3, r4, r7, pc}
  405836:	bf00      	nop
  405838:	e000e014 	.word	0xe000e014
  40583c:	00405649 	.word	0x00405649
  405840:	51eb851f 	.word	0x51eb851f
  405844:	e000e010 	.word	0xe000e010

00405848 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
  405848:	b580      	push	{r7, lr}
  40584a:	b086      	sub	sp, #24
  40584c:	af00      	add	r7, sp, #0
  40584e:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
  405850:	2300      	movs	r3, #0
  405852:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
  405854:	4b37      	ldr	r3, [pc, #220]	; (405934 <pvPortMalloc+0xec>)
  405856:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  405858:	4b37      	ldr	r3, [pc, #220]	; (405938 <pvPortMalloc+0xf0>)
  40585a:	681b      	ldr	r3, [r3, #0]
  40585c:	2b00      	cmp	r3, #0
  40585e:	d101      	bne.n	405864 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
  405860:	4b36      	ldr	r3, [pc, #216]	; (40593c <pvPortMalloc+0xf4>)
  405862:	4798      	blx	r3
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
  405864:	687b      	ldr	r3, [r7, #4]
  405866:	2b00      	cmp	r3, #0
  405868:	d00e      	beq.n	405888 <pvPortMalloc+0x40>
		{
			xWantedSize += heapSTRUCT_SIZE;
  40586a:	2310      	movs	r3, #16
  40586c:	461a      	mov	r2, r3
  40586e:	687b      	ldr	r3, [r7, #4]
  405870:	4413      	add	r3, r2
  405872:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  405874:	687b      	ldr	r3, [r7, #4]
  405876:	f003 0307 	and.w	r3, r3, #7
  40587a:	2b00      	cmp	r3, #0
  40587c:	d004      	beq.n	405888 <pvPortMalloc+0x40>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  40587e:	687b      	ldr	r3, [r7, #4]
  405880:	f023 0307 	bic.w	r3, r3, #7
  405884:	3308      	adds	r3, #8
  405886:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
  405888:	687b      	ldr	r3, [r7, #4]
  40588a:	2b00      	cmp	r3, #0
  40588c:	d045      	beq.n	40591a <pvPortMalloc+0xd2>
  40588e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  405892:	687b      	ldr	r3, [r7, #4]
  405894:	4293      	cmp	r3, r2
  405896:	d240      	bcs.n	40591a <pvPortMalloc+0xd2>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
  405898:	4b29      	ldr	r3, [pc, #164]	; (405940 <pvPortMalloc+0xf8>)
  40589a:	613b      	str	r3, [r7, #16]
			pxBlock = xStart.pxNextFreeBlock;
  40589c:	4b28      	ldr	r3, [pc, #160]	; (405940 <pvPortMalloc+0xf8>)
  40589e:	681b      	ldr	r3, [r3, #0]
  4058a0:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  4058a2:	e004      	b.n	4058ae <pvPortMalloc+0x66>
			{
				pxPreviousBlock = pxBlock;
  4058a4:	697b      	ldr	r3, [r7, #20]
  4058a6:	613b      	str	r3, [r7, #16]
				pxBlock = pxBlock->pxNextFreeBlock;
  4058a8:	697b      	ldr	r3, [r7, #20]
  4058aa:	681b      	ldr	r3, [r3, #0]
  4058ac:	617b      	str	r3, [r7, #20]
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  4058ae:	697b      	ldr	r3, [r7, #20]
  4058b0:	685a      	ldr	r2, [r3, #4]
  4058b2:	687b      	ldr	r3, [r7, #4]
  4058b4:	429a      	cmp	r2, r3
  4058b6:	d203      	bcs.n	4058c0 <pvPortMalloc+0x78>
  4058b8:	697b      	ldr	r3, [r7, #20]
  4058ba:	681b      	ldr	r3, [r3, #0]
  4058bc:	2b00      	cmp	r3, #0
  4058be:	d1f1      	bne.n	4058a4 <pvPortMalloc+0x5c>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
  4058c0:	4b1d      	ldr	r3, [pc, #116]	; (405938 <pvPortMalloc+0xf0>)
  4058c2:	681b      	ldr	r3, [r3, #0]
  4058c4:	697a      	ldr	r2, [r7, #20]
  4058c6:	429a      	cmp	r2, r3
  4058c8:	d027      	beq.n	40591a <pvPortMalloc+0xd2>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  4058ca:	693b      	ldr	r3, [r7, #16]
  4058cc:	681b      	ldr	r3, [r3, #0]
  4058ce:	2210      	movs	r2, #16
  4058d0:	4413      	add	r3, r2
  4058d2:	60fb      	str	r3, [r7, #12]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  4058d4:	697b      	ldr	r3, [r7, #20]
  4058d6:	681a      	ldr	r2, [r3, #0]
  4058d8:	693b      	ldr	r3, [r7, #16]
  4058da:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  4058dc:	697b      	ldr	r3, [r7, #20]
  4058de:	685a      	ldr	r2, [r3, #4]
  4058e0:	687b      	ldr	r3, [r7, #4]
  4058e2:	1ad3      	subs	r3, r2, r3
  4058e4:	2210      	movs	r2, #16
  4058e6:	0052      	lsls	r2, r2, #1
  4058e8:	4293      	cmp	r3, r2
  4058ea:	d90f      	bls.n	40590c <pvPortMalloc+0xc4>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
  4058ec:	697a      	ldr	r2, [r7, #20]
  4058ee:	687b      	ldr	r3, [r7, #4]
  4058f0:	4413      	add	r3, r2
  4058f2:	60bb      	str	r3, [r7, #8]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  4058f4:	697b      	ldr	r3, [r7, #20]
  4058f6:	685a      	ldr	r2, [r3, #4]
  4058f8:	687b      	ldr	r3, [r7, #4]
  4058fa:	1ad2      	subs	r2, r2, r3
  4058fc:	68bb      	ldr	r3, [r7, #8]
  4058fe:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
  405900:	697b      	ldr	r3, [r7, #20]
  405902:	687a      	ldr	r2, [r7, #4]
  405904:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  405906:	68b8      	ldr	r0, [r7, #8]
  405908:	4b0e      	ldr	r3, [pc, #56]	; (405944 <pvPortMalloc+0xfc>)
  40590a:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
  40590c:	4b0e      	ldr	r3, [pc, #56]	; (405948 <pvPortMalloc+0x100>)
  40590e:	681a      	ldr	r2, [r3, #0]
  405910:	697b      	ldr	r3, [r7, #20]
  405912:	685b      	ldr	r3, [r3, #4]
  405914:	1ad3      	subs	r3, r2, r3
  405916:	4a0c      	ldr	r2, [pc, #48]	; (405948 <pvPortMalloc+0x100>)
  405918:	6013      	str	r3, [r2, #0]
			}
		}
	}
	xTaskResumeAll();
  40591a:	4b0c      	ldr	r3, [pc, #48]	; (40594c <pvPortMalloc+0x104>)
  40591c:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  40591e:	68fb      	ldr	r3, [r7, #12]
  405920:	2b00      	cmp	r3, #0
  405922:	d101      	bne.n	405928 <pvPortMalloc+0xe0>
		{
			vApplicationMallocFailedHook();
  405924:	4b0a      	ldr	r3, [pc, #40]	; (405950 <pvPortMalloc+0x108>)
  405926:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
  405928:	68fb      	ldr	r3, [r7, #12]
}
  40592a:	4618      	mov	r0, r3
  40592c:	3718      	adds	r7, #24
  40592e:	46bd      	mov	sp, r7
  405930:	bd80      	pop	{r7, pc}
  405932:	bf00      	nop
  405934:	00406561 	.word	0x00406561
  405938:	20002d18 	.word	0x20002d18
  40593c:	004059a9 	.word	0x004059a9
  405940:	20002d10 	.word	0x20002d10
  405944:	00405a39 	.word	0x00405a39
  405948:	20000120 	.word	0x20000120
  40594c:	0040657d 	.word	0x0040657d
  405950:	00407b49 	.word	0x00407b49

00405954 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  405954:	b580      	push	{r7, lr}
  405956:	b084      	sub	sp, #16
  405958:	af00      	add	r7, sp, #0
  40595a:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
  40595c:	687b      	ldr	r3, [r7, #4]
  40595e:	60fb      	str	r3, [r7, #12]
xBlockLink *pxLink;

	if( pv != NULL )
  405960:	687b      	ldr	r3, [r7, #4]
  405962:	2b00      	cmp	r3, #0
  405964:	d014      	beq.n	405990 <vPortFree+0x3c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
  405966:	2310      	movs	r3, #16
  405968:	425b      	negs	r3, r3
  40596a:	68fa      	ldr	r2, [r7, #12]
  40596c:	4413      	add	r3, r2
  40596e:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
  405970:	68fb      	ldr	r3, [r7, #12]
  405972:	60bb      	str	r3, [r7, #8]

		vTaskSuspendAll();
  405974:	4b08      	ldr	r3, [pc, #32]	; (405998 <vPortFree+0x44>)
  405976:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
  405978:	68bb      	ldr	r3, [r7, #8]
  40597a:	685a      	ldr	r2, [r3, #4]
  40597c:	4b07      	ldr	r3, [pc, #28]	; (40599c <vPortFree+0x48>)
  40597e:	681b      	ldr	r3, [r3, #0]
  405980:	4413      	add	r3, r2
  405982:	4a06      	ldr	r2, [pc, #24]	; (40599c <vPortFree+0x48>)
  405984:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
  405986:	68b8      	ldr	r0, [r7, #8]
  405988:	4b05      	ldr	r3, [pc, #20]	; (4059a0 <vPortFree+0x4c>)
  40598a:	4798      	blx	r3
		}
		xTaskResumeAll();
  40598c:	4b05      	ldr	r3, [pc, #20]	; (4059a4 <vPortFree+0x50>)
  40598e:	4798      	blx	r3
	}
}
  405990:	bf00      	nop
  405992:	3710      	adds	r7, #16
  405994:	46bd      	mov	sp, r7
  405996:	bd80      	pop	{r7, pc}
  405998:	00406561 	.word	0x00406561
  40599c:	20000120 	.word	0x20000120
  4059a0:	00405a39 	.word	0x00405a39
  4059a4:	0040657d 	.word	0x0040657d

004059a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
  4059a8:	b580      	push	{r7, lr}
  4059aa:	b082      	sub	sp, #8
  4059ac:	af00      	add	r7, sp, #0
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
  4059ae:	4b1d      	ldr	r3, [pc, #116]	; (405a24 <prvHeapInit+0x7c>)
  4059b0:	4a1d      	ldr	r2, [pc, #116]	; (405a28 <prvHeapInit+0x80>)
  4059b2:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
  4059b4:	4b1b      	ldr	r3, [pc, #108]	; (405a24 <prvHeapInit+0x7c>)
  4059b6:	2200      	movs	r2, #0
  4059b8:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
  4059ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4059be:	4b1a      	ldr	r3, [pc, #104]	; (405a28 <prvHeapInit+0x80>)
  4059c0:	4413      	add	r3, r2
  4059c2:	607b      	str	r3, [r7, #4]
	pucHeapEnd -= heapSTRUCT_SIZE;
  4059c4:	2310      	movs	r3, #16
  4059c6:	425b      	negs	r3, r3
  4059c8:	687a      	ldr	r2, [r7, #4]
  4059ca:	4413      	add	r3, r2
  4059cc:	607b      	str	r3, [r7, #4]
	pxEnd = ( void * ) pucHeapEnd;
  4059ce:	4a17      	ldr	r2, [pc, #92]	; (405a2c <prvHeapInit+0x84>)
  4059d0:	687b      	ldr	r3, [r7, #4]
  4059d2:	6013      	str	r3, [r2, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
  4059d4:	4b15      	ldr	r3, [pc, #84]	; (405a2c <prvHeapInit+0x84>)
  4059d6:	681b      	ldr	r3, [r3, #0]
  4059d8:	f003 0307 	and.w	r3, r3, #7
  4059dc:	2b00      	cmp	r3, #0
  4059de:	d003      	beq.n	4059e8 <prvHeapInit+0x40>
  4059e0:	4b13      	ldr	r3, [pc, #76]	; (405a30 <prvHeapInit+0x88>)
  4059e2:	4798      	blx	r3
  4059e4:	bf00      	nop
  4059e6:	e7fd      	b.n	4059e4 <prvHeapInit+0x3c>
	pxEnd->xBlockSize = 0;
  4059e8:	4b10      	ldr	r3, [pc, #64]	; (405a2c <prvHeapInit+0x84>)
  4059ea:	681b      	ldr	r3, [r3, #0]
  4059ec:	2200      	movs	r2, #0
  4059ee:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
  4059f0:	4b0e      	ldr	r3, [pc, #56]	; (405a2c <prvHeapInit+0x84>)
  4059f2:	681b      	ldr	r3, [r3, #0]
  4059f4:	2200      	movs	r2, #0
  4059f6:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
  4059f8:	4b0b      	ldr	r3, [pc, #44]	; (405a28 <prvHeapInit+0x80>)
  4059fa:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
  4059fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  405a00:	2210      	movs	r2, #16
  405a02:	1a9a      	subs	r2, r3, r2
  405a04:	683b      	ldr	r3, [r7, #0]
  405a06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  405a08:	4b08      	ldr	r3, [pc, #32]	; (405a2c <prvHeapInit+0x84>)
  405a0a:	681a      	ldr	r2, [r3, #0]
  405a0c:	683b      	ldr	r3, [r7, #0]
  405a0e:	601a      	str	r2, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
  405a10:	4b08      	ldr	r3, [pc, #32]	; (405a34 <prvHeapInit+0x8c>)
  405a12:	681b      	ldr	r3, [r3, #0]
  405a14:	2210      	movs	r2, #16
  405a16:	1a9b      	subs	r3, r3, r2
  405a18:	4a06      	ldr	r2, [pc, #24]	; (405a34 <prvHeapInit+0x8c>)
  405a1a:	6013      	str	r3, [r2, #0]
}
  405a1c:	bf00      	nop
  405a1e:	3708      	adds	r7, #8
  405a20:	46bd      	mov	sp, r7
  405a22:	bd80      	pop	{r7, pc}
  405a24:	20002d10 	.word	0x20002d10
  405a28:	20000d10 	.word	0x20000d10
  405a2c:	20002d18 	.word	0x20002d18
  405a30:	00405789 	.word	0x00405789
  405a34:	20000120 	.word	0x20000120

00405a38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
  405a38:	b480      	push	{r7}
  405a3a:	b085      	sub	sp, #20
  405a3c:	af00      	add	r7, sp, #0
  405a3e:	6078      	str	r0, [r7, #4]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  405a40:	4b27      	ldr	r3, [pc, #156]	; (405ae0 <prvInsertBlockIntoFreeList+0xa8>)
  405a42:	60fb      	str	r3, [r7, #12]
  405a44:	e002      	b.n	405a4c <prvInsertBlockIntoFreeList+0x14>
  405a46:	68fb      	ldr	r3, [r7, #12]
  405a48:	681b      	ldr	r3, [r3, #0]
  405a4a:	60fb      	str	r3, [r7, #12]
  405a4c:	68fb      	ldr	r3, [r7, #12]
  405a4e:	681a      	ldr	r2, [r3, #0]
  405a50:	687b      	ldr	r3, [r7, #4]
  405a52:	429a      	cmp	r2, r3
  405a54:	d3f7      	bcc.n	405a46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
  405a56:	68fb      	ldr	r3, [r7, #12]
  405a58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
  405a5a:	68fb      	ldr	r3, [r7, #12]
  405a5c:	685b      	ldr	r3, [r3, #4]
  405a5e:	68ba      	ldr	r2, [r7, #8]
  405a60:	441a      	add	r2, r3
  405a62:	687b      	ldr	r3, [r7, #4]
  405a64:	429a      	cmp	r2, r3
  405a66:	d108      	bne.n	405a7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  405a68:	68fb      	ldr	r3, [r7, #12]
  405a6a:	685a      	ldr	r2, [r3, #4]
  405a6c:	687b      	ldr	r3, [r7, #4]
  405a6e:	685b      	ldr	r3, [r3, #4]
  405a70:	441a      	add	r2, r3
  405a72:	68fb      	ldr	r3, [r7, #12]
  405a74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
  405a76:	68fb      	ldr	r3, [r7, #12]
  405a78:	607b      	str	r3, [r7, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
  405a7a:	687b      	ldr	r3, [r7, #4]
  405a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
  405a7e:	687b      	ldr	r3, [r7, #4]
  405a80:	685b      	ldr	r3, [r3, #4]
  405a82:	68ba      	ldr	r2, [r7, #8]
  405a84:	441a      	add	r2, r3
  405a86:	68fb      	ldr	r3, [r7, #12]
  405a88:	681b      	ldr	r3, [r3, #0]
  405a8a:	429a      	cmp	r2, r3
  405a8c:	d118      	bne.n	405ac0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  405a8e:	68fb      	ldr	r3, [r7, #12]
  405a90:	681a      	ldr	r2, [r3, #0]
  405a92:	4b14      	ldr	r3, [pc, #80]	; (405ae4 <prvInsertBlockIntoFreeList+0xac>)
  405a94:	681b      	ldr	r3, [r3, #0]
  405a96:	429a      	cmp	r2, r3
  405a98:	d00d      	beq.n	405ab6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  405a9a:	687b      	ldr	r3, [r7, #4]
  405a9c:	685a      	ldr	r2, [r3, #4]
  405a9e:	68fb      	ldr	r3, [r7, #12]
  405aa0:	681b      	ldr	r3, [r3, #0]
  405aa2:	685b      	ldr	r3, [r3, #4]
  405aa4:	441a      	add	r2, r3
  405aa6:	687b      	ldr	r3, [r7, #4]
  405aa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  405aaa:	68fb      	ldr	r3, [r7, #12]
  405aac:	681b      	ldr	r3, [r3, #0]
  405aae:	681a      	ldr	r2, [r3, #0]
  405ab0:	687b      	ldr	r3, [r7, #4]
  405ab2:	601a      	str	r2, [r3, #0]
  405ab4:	e008      	b.n	405ac8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  405ab6:	4b0b      	ldr	r3, [pc, #44]	; (405ae4 <prvInsertBlockIntoFreeList+0xac>)
  405ab8:	681a      	ldr	r2, [r3, #0]
  405aba:	687b      	ldr	r3, [r7, #4]
  405abc:	601a      	str	r2, [r3, #0]
  405abe:	e003      	b.n	405ac8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
  405ac0:	68fb      	ldr	r3, [r7, #12]
  405ac2:	681a      	ldr	r2, [r3, #0]
  405ac4:	687b      	ldr	r3, [r7, #4]
  405ac6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  405ac8:	68fa      	ldr	r2, [r7, #12]
  405aca:	687b      	ldr	r3, [r7, #4]
  405acc:	429a      	cmp	r2, r3
  405ace:	d002      	beq.n	405ad6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  405ad0:	68fb      	ldr	r3, [r7, #12]
  405ad2:	687a      	ldr	r2, [r7, #4]
  405ad4:	601a      	str	r2, [r3, #0]
	}
}
  405ad6:	bf00      	nop
  405ad8:	3714      	adds	r7, #20
  405ada:	46bd      	mov	sp, r7
  405adc:	bc80      	pop	{r7}
  405ade:	4770      	bx	lr
  405ae0:	20002d10 	.word	0x20002d10
  405ae4:	20002d18 	.word	0x20002d18

00405ae8 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
  405ae8:	b580      	push	{r7, lr}
  405aea:	b082      	sub	sp, #8
  405aec:	af00      	add	r7, sp, #0
  405aee:	6078      	str	r0, [r7, #4]
  405af0:	6039      	str	r1, [r7, #0]
	configASSERT( pxQueue );
  405af2:	687b      	ldr	r3, [r7, #4]
  405af4:	2b00      	cmp	r3, #0
  405af6:	d103      	bne.n	405b00 <xQueueGenericReset+0x18>
  405af8:	4b27      	ldr	r3, [pc, #156]	; (405b98 <xQueueGenericReset+0xb0>)
  405afa:	4798      	blx	r3
  405afc:	bf00      	nop
  405afe:	e7fd      	b.n	405afc <xQueueGenericReset+0x14>

	taskENTER_CRITICAL();
  405b00:	4b26      	ldr	r3, [pc, #152]	; (405b9c <xQueueGenericReset+0xb4>)
  405b02:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  405b04:	687b      	ldr	r3, [r7, #4]
  405b06:	681a      	ldr	r2, [r3, #0]
  405b08:	687b      	ldr	r3, [r7, #4]
  405b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  405b0c:	6879      	ldr	r1, [r7, #4]
  405b0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
  405b10:	fb01 f303 	mul.w	r3, r1, r3
  405b14:	441a      	add	r2, r3
  405b16:	687b      	ldr	r3, [r7, #4]
  405b18:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  405b1a:	687b      	ldr	r3, [r7, #4]
  405b1c:	2200      	movs	r2, #0
  405b1e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  405b20:	687b      	ldr	r3, [r7, #4]
  405b22:	681a      	ldr	r2, [r3, #0]
  405b24:	687b      	ldr	r3, [r7, #4]
  405b26:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
  405b28:	687b      	ldr	r3, [r7, #4]
  405b2a:	681a      	ldr	r2, [r3, #0]
  405b2c:	687b      	ldr	r3, [r7, #4]
  405b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  405b30:	3b01      	subs	r3, #1
  405b32:	6879      	ldr	r1, [r7, #4]
  405b34:	6c09      	ldr	r1, [r1, #64]	; 0x40
  405b36:	fb01 f303 	mul.w	r3, r1, r3
  405b3a:	441a      	add	r2, r3
  405b3c:	687b      	ldr	r3, [r7, #4]
  405b3e:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  405b40:	687b      	ldr	r3, [r7, #4]
  405b42:	f04f 32ff 	mov.w	r2, #4294967295
  405b46:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  405b48:	687b      	ldr	r3, [r7, #4]
  405b4a:	f04f 32ff 	mov.w	r2, #4294967295
  405b4e:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  405b50:	683b      	ldr	r3, [r7, #0]
  405b52:	2b00      	cmp	r3, #0
  405b54:	d10e      	bne.n	405b74 <xQueueGenericReset+0x8c>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  405b56:	687b      	ldr	r3, [r7, #4]
  405b58:	691b      	ldr	r3, [r3, #16]
  405b5a:	2b00      	cmp	r3, #0
  405b5c:	d014      	beq.n	405b88 <xQueueGenericReset+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  405b5e:	687b      	ldr	r3, [r7, #4]
  405b60:	3310      	adds	r3, #16
  405b62:	4618      	mov	r0, r3
  405b64:	4b0e      	ldr	r3, [pc, #56]	; (405ba0 <xQueueGenericReset+0xb8>)
  405b66:	4798      	blx	r3
  405b68:	4603      	mov	r3, r0
  405b6a:	2b01      	cmp	r3, #1
  405b6c:	d10c      	bne.n	405b88 <xQueueGenericReset+0xa0>
				{
					portYIELD_WITHIN_API();
  405b6e:	4b0d      	ldr	r3, [pc, #52]	; (405ba4 <xQueueGenericReset+0xbc>)
  405b70:	4798      	blx	r3
  405b72:	e009      	b.n	405b88 <xQueueGenericReset+0xa0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  405b74:	687b      	ldr	r3, [r7, #4]
  405b76:	3310      	adds	r3, #16
  405b78:	4618      	mov	r0, r3
  405b7a:	4b0b      	ldr	r3, [pc, #44]	; (405ba8 <xQueueGenericReset+0xc0>)
  405b7c:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  405b7e:	687b      	ldr	r3, [r7, #4]
  405b80:	3324      	adds	r3, #36	; 0x24
  405b82:	4618      	mov	r0, r3
  405b84:	4b08      	ldr	r3, [pc, #32]	; (405ba8 <xQueueGenericReset+0xc0>)
  405b86:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
  405b88:	4b08      	ldr	r3, [pc, #32]	; (405bac <xQueueGenericReset+0xc4>)
  405b8a:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
  405b8c:	2301      	movs	r3, #1
}
  405b8e:	4618      	mov	r0, r3
  405b90:	3708      	adds	r7, #8
  405b92:	46bd      	mov	sp, r7
  405b94:	bd80      	pop	{r7, pc}
  405b96:	bf00      	nop
  405b98:	00405789 	.word	0x00405789
  405b9c:	00405741 	.word	0x00405741
  405ba0:	004069f9 	.word	0x004069f9
  405ba4:	00405729 	.word	0x00405729
  405ba8:	0040544d 	.word	0x0040544d
  405bac:	00405761 	.word	0x00405761

00405bb0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
  405bb0:	b580      	push	{r7, lr}
  405bb2:	b088      	sub	sp, #32
  405bb4:	af00      	add	r7, sp, #0
  405bb6:	60f8      	str	r0, [r7, #12]
  405bb8:	60b9      	str	r1, [r7, #8]
  405bba:	4613      	mov	r3, r2
  405bbc:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
  405bbe:	2300      	movs	r3, #0
  405bc0:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  405bc2:	68fb      	ldr	r3, [r7, #12]
  405bc4:	2b00      	cmp	r3, #0
  405bc6:	d026      	beq.n	405c16 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  405bc8:	204c      	movs	r0, #76	; 0x4c
  405bca:	4b19      	ldr	r3, [pc, #100]	; (405c30 <xQueueGenericCreate+0x80>)
  405bcc:	4798      	blx	r3
  405bce:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
  405bd0:	69bb      	ldr	r3, [r7, #24]
  405bd2:	2b00      	cmp	r3, #0
  405bd4:	d01f      	beq.n	405c16 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  405bd6:	68fb      	ldr	r3, [r7, #12]
  405bd8:	68ba      	ldr	r2, [r7, #8]
  405bda:	fb02 f303 	mul.w	r3, r2, r3
  405bde:	3301      	adds	r3, #1
  405be0:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  405be2:	6978      	ldr	r0, [r7, #20]
  405be4:	4b12      	ldr	r3, [pc, #72]	; (405c30 <xQueueGenericCreate+0x80>)
  405be6:	4798      	blx	r3
  405be8:	4602      	mov	r2, r0
  405bea:	69bb      	ldr	r3, [r7, #24]
  405bec:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
  405bee:	69bb      	ldr	r3, [r7, #24]
  405bf0:	681b      	ldr	r3, [r3, #0]
  405bf2:	2b00      	cmp	r3, #0
  405bf4:	d00c      	beq.n	405c10 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
  405bf6:	69bb      	ldr	r3, [r7, #24]
  405bf8:	68fa      	ldr	r2, [r7, #12]
  405bfa:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  405bfc:	69bb      	ldr	r3, [r7, #24]
  405bfe:	68ba      	ldr	r2, [r7, #8]
  405c00:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
  405c02:	2101      	movs	r1, #1
  405c04:	69b8      	ldr	r0, [r7, #24]
  405c06:	4b0b      	ldr	r3, [pc, #44]	; (405c34 <xQueueGenericCreate+0x84>)
  405c08:	4798      	blx	r3
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
  405c0a:	69bb      	ldr	r3, [r7, #24]
  405c0c:	61fb      	str	r3, [r7, #28]
  405c0e:	e002      	b.n	405c16 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
  405c10:	69b8      	ldr	r0, [r7, #24]
  405c12:	4b09      	ldr	r3, [pc, #36]	; (405c38 <xQueueGenericCreate+0x88>)
  405c14:	4798      	blx	r3
			}
		}
	}

	configASSERT( xReturn );
  405c16:	69fb      	ldr	r3, [r7, #28]
  405c18:	2b00      	cmp	r3, #0
  405c1a:	d103      	bne.n	405c24 <xQueueGenericCreate+0x74>
  405c1c:	4b07      	ldr	r3, [pc, #28]	; (405c3c <xQueueGenericCreate+0x8c>)
  405c1e:	4798      	blx	r3
  405c20:	bf00      	nop
  405c22:	e7fd      	b.n	405c20 <xQueueGenericCreate+0x70>

	return xReturn;
  405c24:	69fb      	ldr	r3, [r7, #28]
}
  405c26:	4618      	mov	r0, r3
  405c28:	3720      	adds	r7, #32
  405c2a:	46bd      	mov	sp, r7
  405c2c:	bd80      	pop	{r7, pc}
  405c2e:	bf00      	nop
  405c30:	00405849 	.word	0x00405849
  405c34:	00405ae9 	.word	0x00405ae9
  405c38:	00405955 	.word	0x00405955
  405c3c:	00405789 	.word	0x00405789

00405c40 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  405c40:	b580      	push	{r7, lr}
  405c42:	b088      	sub	sp, #32
  405c44:	af00      	add	r7, sp, #0
  405c46:	60f8      	str	r0, [r7, #12]
  405c48:	60b9      	str	r1, [r7, #8]
  405c4a:	607a      	str	r2, [r7, #4]
  405c4c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  405c4e:	2300      	movs	r3, #0
  405c50:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
  405c52:	68fb      	ldr	r3, [r7, #12]
  405c54:	2b00      	cmp	r3, #0
  405c56:	d103      	bne.n	405c60 <xQueueGenericSend+0x20>
  405c58:	4b46      	ldr	r3, [pc, #280]	; (405d74 <xQueueGenericSend+0x134>)
  405c5a:	4798      	blx	r3
  405c5c:	bf00      	nop
  405c5e:	e7fd      	b.n	405c5c <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  405c60:	68bb      	ldr	r3, [r7, #8]
  405c62:	2b00      	cmp	r3, #0
  405c64:	d103      	bne.n	405c6e <xQueueGenericSend+0x2e>
  405c66:	68fb      	ldr	r3, [r7, #12]
  405c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405c6a:	2b00      	cmp	r3, #0
  405c6c:	d101      	bne.n	405c72 <xQueueGenericSend+0x32>
  405c6e:	2301      	movs	r3, #1
  405c70:	e000      	b.n	405c74 <xQueueGenericSend+0x34>
  405c72:	2300      	movs	r3, #0
  405c74:	2b00      	cmp	r3, #0
  405c76:	d103      	bne.n	405c80 <xQueueGenericSend+0x40>
  405c78:	4b3e      	ldr	r3, [pc, #248]	; (405d74 <xQueueGenericSend+0x134>)
  405c7a:	4798      	blx	r3
  405c7c:	bf00      	nop
  405c7e:	e7fd      	b.n	405c7c <xQueueGenericSend+0x3c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  405c80:	4b3d      	ldr	r3, [pc, #244]	; (405d78 <xQueueGenericSend+0x138>)
  405c82:	4798      	blx	r3
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  405c84:	68fb      	ldr	r3, [r7, #12]
  405c86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  405c88:	68fb      	ldr	r3, [r7, #12]
  405c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  405c8c:	429a      	cmp	r2, r3
  405c8e:	d216      	bcs.n	405cbe <xQueueGenericSend+0x7e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  405c90:	683a      	ldr	r2, [r7, #0]
  405c92:	68b9      	ldr	r1, [r7, #8]
  405c94:	68f8      	ldr	r0, [r7, #12]
  405c96:	4b39      	ldr	r3, [pc, #228]	; (405d7c <xQueueGenericSend+0x13c>)
  405c98:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  405c9a:	68fb      	ldr	r3, [r7, #12]
  405c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  405c9e:	2b00      	cmp	r3, #0
  405ca0:	d009      	beq.n	405cb6 <xQueueGenericSend+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  405ca2:	68fb      	ldr	r3, [r7, #12]
  405ca4:	3324      	adds	r3, #36	; 0x24
  405ca6:	4618      	mov	r0, r3
  405ca8:	4b35      	ldr	r3, [pc, #212]	; (405d80 <xQueueGenericSend+0x140>)
  405caa:	4798      	blx	r3
  405cac:	4603      	mov	r3, r0
  405cae:	2b01      	cmp	r3, #1
  405cb0:	d101      	bne.n	405cb6 <xQueueGenericSend+0x76>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  405cb2:	4b34      	ldr	r3, [pc, #208]	; (405d84 <xQueueGenericSend+0x144>)
  405cb4:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  405cb6:	4b34      	ldr	r3, [pc, #208]	; (405d88 <xQueueGenericSend+0x148>)
  405cb8:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  405cba:	2301      	movs	r3, #1
  405cbc:	e056      	b.n	405d6c <xQueueGenericSend+0x12c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  405cbe:	687b      	ldr	r3, [r7, #4]
  405cc0:	2b00      	cmp	r3, #0
  405cc2:	d103      	bne.n	405ccc <xQueueGenericSend+0x8c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  405cc4:	4b30      	ldr	r3, [pc, #192]	; (405d88 <xQueueGenericSend+0x148>)
  405cc6:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  405cc8:	2300      	movs	r3, #0
  405cca:	e04f      	b.n	405d6c <xQueueGenericSend+0x12c>
				}
				else if( xEntryTimeSet == pdFALSE )
  405ccc:	69fb      	ldr	r3, [r7, #28]
  405cce:	2b00      	cmp	r3, #0
  405cd0:	d106      	bne.n	405ce0 <xQueueGenericSend+0xa0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  405cd2:	f107 0314 	add.w	r3, r7, #20
  405cd6:	4618      	mov	r0, r3
  405cd8:	4b2c      	ldr	r3, [pc, #176]	; (405d8c <xQueueGenericSend+0x14c>)
  405cda:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  405cdc:	2301      	movs	r3, #1
  405cde:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  405ce0:	4b29      	ldr	r3, [pc, #164]	; (405d88 <xQueueGenericSend+0x148>)
  405ce2:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  405ce4:	4b2a      	ldr	r3, [pc, #168]	; (405d90 <xQueueGenericSend+0x150>)
  405ce6:	4798      	blx	r3
		prvLockQueue( pxQueue );
  405ce8:	4b23      	ldr	r3, [pc, #140]	; (405d78 <xQueueGenericSend+0x138>)
  405cea:	4798      	blx	r3
  405cec:	68fb      	ldr	r3, [r7, #12]
  405cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  405cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
  405cf4:	d102      	bne.n	405cfc <xQueueGenericSend+0xbc>
  405cf6:	68fb      	ldr	r3, [r7, #12]
  405cf8:	2200      	movs	r2, #0
  405cfa:	645a      	str	r2, [r3, #68]	; 0x44
  405cfc:	68fb      	ldr	r3, [r7, #12]
  405cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  405d00:	f1b3 3fff 	cmp.w	r3, #4294967295
  405d04:	d102      	bne.n	405d0c <xQueueGenericSend+0xcc>
  405d06:	68fb      	ldr	r3, [r7, #12]
  405d08:	2200      	movs	r2, #0
  405d0a:	649a      	str	r2, [r3, #72]	; 0x48
  405d0c:	4b1e      	ldr	r3, [pc, #120]	; (405d88 <xQueueGenericSend+0x148>)
  405d0e:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  405d10:	1d3a      	adds	r2, r7, #4
  405d12:	f107 0314 	add.w	r3, r7, #20
  405d16:	4611      	mov	r1, r2
  405d18:	4618      	mov	r0, r3
  405d1a:	4b1e      	ldr	r3, [pc, #120]	; (405d94 <xQueueGenericSend+0x154>)
  405d1c:	4798      	blx	r3
  405d1e:	4603      	mov	r3, r0
  405d20:	2b00      	cmp	r3, #0
  405d22:	d11d      	bne.n	405d60 <xQueueGenericSend+0x120>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  405d24:	68f8      	ldr	r0, [r7, #12]
  405d26:	4b1c      	ldr	r3, [pc, #112]	; (405d98 <xQueueGenericSend+0x158>)
  405d28:	4798      	blx	r3
  405d2a:	4603      	mov	r3, r0
  405d2c:	2b00      	cmp	r3, #0
  405d2e:	d011      	beq.n	405d54 <xQueueGenericSend+0x114>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  405d30:	68fb      	ldr	r3, [r7, #12]
  405d32:	3310      	adds	r3, #16
  405d34:	687a      	ldr	r2, [r7, #4]
  405d36:	4611      	mov	r1, r2
  405d38:	4618      	mov	r0, r3
  405d3a:	4b18      	ldr	r3, [pc, #96]	; (405d9c <xQueueGenericSend+0x15c>)
  405d3c:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  405d3e:	68f8      	ldr	r0, [r7, #12]
  405d40:	4b17      	ldr	r3, [pc, #92]	; (405da0 <xQueueGenericSend+0x160>)
  405d42:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  405d44:	4b17      	ldr	r3, [pc, #92]	; (405da4 <xQueueGenericSend+0x164>)
  405d46:	4798      	blx	r3
  405d48:	4603      	mov	r3, r0
  405d4a:	2b00      	cmp	r3, #0
  405d4c:	d198      	bne.n	405c80 <xQueueGenericSend+0x40>
				{
					portYIELD_WITHIN_API();
  405d4e:	4b0d      	ldr	r3, [pc, #52]	; (405d84 <xQueueGenericSend+0x144>)
  405d50:	4798      	blx	r3
  405d52:	e795      	b.n	405c80 <xQueueGenericSend+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  405d54:	68f8      	ldr	r0, [r7, #12]
  405d56:	4b12      	ldr	r3, [pc, #72]	; (405da0 <xQueueGenericSend+0x160>)
  405d58:	4798      	blx	r3
				( void ) xTaskResumeAll();
  405d5a:	4b12      	ldr	r3, [pc, #72]	; (405da4 <xQueueGenericSend+0x164>)
  405d5c:	4798      	blx	r3
  405d5e:	e78f      	b.n	405c80 <xQueueGenericSend+0x40>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  405d60:	68f8      	ldr	r0, [r7, #12]
  405d62:	4b0f      	ldr	r3, [pc, #60]	; (405da0 <xQueueGenericSend+0x160>)
  405d64:	4798      	blx	r3
			( void ) xTaskResumeAll();
  405d66:	4b0f      	ldr	r3, [pc, #60]	; (405da4 <xQueueGenericSend+0x164>)
  405d68:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  405d6a:	2300      	movs	r3, #0
		}
	}
}
  405d6c:	4618      	mov	r0, r3
  405d6e:	3720      	adds	r7, #32
  405d70:	46bd      	mov	sp, r7
  405d72:	bd80      	pop	{r7, pc}
  405d74:	00405789 	.word	0x00405789
  405d78:	00405741 	.word	0x00405741
  405d7c:	00406039 	.word	0x00406039
  405d80:	004069f9 	.word	0x004069f9
  405d84:	00405729 	.word	0x00405729
  405d88:	00405761 	.word	0x00405761
  405d8c:	00406ab5 	.word	0x00406ab5
  405d90:	00406561 	.word	0x00406561
  405d94:	00406af1 	.word	0x00406af1
  405d98:	00406225 	.word	0x00406225
  405d9c:	00406911 	.word	0x00406911
  405da0:	00406149 	.word	0x00406149
  405da4:	0040657d 	.word	0x0040657d

00405da8 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
  405da8:	b580      	push	{r7, lr}
  405daa:	b086      	sub	sp, #24
  405dac:	af00      	add	r7, sp, #0
  405dae:	60f8      	str	r0, [r7, #12]
  405db0:	60b9      	str	r1, [r7, #8]
  405db2:	607a      	str	r2, [r7, #4]
  405db4:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
  405db6:	68fb      	ldr	r3, [r7, #12]
  405db8:	2b00      	cmp	r3, #0
  405dba:	d103      	bne.n	405dc4 <xQueueGenericSendFromISR+0x1c>
  405dbc:	4b25      	ldr	r3, [pc, #148]	; (405e54 <xQueueGenericSendFromISR+0xac>)
  405dbe:	4798      	blx	r3
  405dc0:	bf00      	nop
  405dc2:	e7fd      	b.n	405dc0 <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  405dc4:	68bb      	ldr	r3, [r7, #8]
  405dc6:	2b00      	cmp	r3, #0
  405dc8:	d103      	bne.n	405dd2 <xQueueGenericSendFromISR+0x2a>
  405dca:	68fb      	ldr	r3, [r7, #12]
  405dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405dce:	2b00      	cmp	r3, #0
  405dd0:	d101      	bne.n	405dd6 <xQueueGenericSendFromISR+0x2e>
  405dd2:	2301      	movs	r3, #1
  405dd4:	e000      	b.n	405dd8 <xQueueGenericSendFromISR+0x30>
  405dd6:	2300      	movs	r3, #0
  405dd8:	2b00      	cmp	r3, #0
  405dda:	d103      	bne.n	405de4 <xQueueGenericSendFromISR+0x3c>
  405ddc:	4b1d      	ldr	r3, [pc, #116]	; (405e54 <xQueueGenericSendFromISR+0xac>)
  405dde:	4798      	blx	r3
  405de0:	bf00      	nop
  405de2:	e7fd      	b.n	405de0 <xQueueGenericSendFromISR+0x38>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  405de4:	4b1b      	ldr	r3, [pc, #108]	; (405e54 <xQueueGenericSendFromISR+0xac>)
  405de6:	4798      	blx	r3
  405de8:	6138      	str	r0, [r7, #16]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  405dea:	68fb      	ldr	r3, [r7, #12]
  405dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  405dee:	68fb      	ldr	r3, [r7, #12]
  405df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  405df2:	429a      	cmp	r2, r3
  405df4:	d224      	bcs.n	405e40 <xQueueGenericSendFromISR+0x98>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  405df6:	683a      	ldr	r2, [r7, #0]
  405df8:	68b9      	ldr	r1, [r7, #8]
  405dfa:	68f8      	ldr	r0, [r7, #12]
  405dfc:	4b16      	ldr	r3, [pc, #88]	; (405e58 <xQueueGenericSendFromISR+0xb0>)
  405dfe:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  405e00:	68fb      	ldr	r3, [r7, #12]
  405e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  405e04:	f1b3 3fff 	cmp.w	r3, #4294967295
  405e08:	d112      	bne.n	405e30 <xQueueGenericSendFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  405e0a:	68fb      	ldr	r3, [r7, #12]
  405e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  405e0e:	2b00      	cmp	r3, #0
  405e10:	d013      	beq.n	405e3a <xQueueGenericSendFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  405e12:	68fb      	ldr	r3, [r7, #12]
  405e14:	3324      	adds	r3, #36	; 0x24
  405e16:	4618      	mov	r0, r3
  405e18:	4b10      	ldr	r3, [pc, #64]	; (405e5c <xQueueGenericSendFromISR+0xb4>)
  405e1a:	4798      	blx	r3
  405e1c:	4603      	mov	r3, r0
  405e1e:	2b00      	cmp	r3, #0
  405e20:	d00b      	beq.n	405e3a <xQueueGenericSendFromISR+0x92>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
  405e22:	687b      	ldr	r3, [r7, #4]
  405e24:	2b00      	cmp	r3, #0
  405e26:	d008      	beq.n	405e3a <xQueueGenericSendFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
  405e28:	687b      	ldr	r3, [r7, #4]
  405e2a:	2201      	movs	r2, #1
  405e2c:	601a      	str	r2, [r3, #0]
  405e2e:	e004      	b.n	405e3a <xQueueGenericSendFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  405e30:	68fb      	ldr	r3, [r7, #12]
  405e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  405e34:	1c5a      	adds	r2, r3, #1
  405e36:	68fb      	ldr	r3, [r7, #12]
  405e38:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
  405e3a:	2301      	movs	r3, #1
  405e3c:	617b      	str	r3, [r7, #20]
  405e3e:	e001      	b.n	405e44 <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  405e40:	2300      	movs	r3, #0
  405e42:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  405e44:	6938      	ldr	r0, [r7, #16]
  405e46:	4b06      	ldr	r3, [pc, #24]	; (405e60 <xQueueGenericSendFromISR+0xb8>)
  405e48:	4798      	blx	r3

	return xReturn;
  405e4a:	697b      	ldr	r3, [r7, #20]
}
  405e4c:	4618      	mov	r0, r3
  405e4e:	3718      	adds	r7, #24
  405e50:	46bd      	mov	sp, r7
  405e52:	bd80      	pop	{r7, pc}
  405e54:	00405789 	.word	0x00405789
  405e58:	00406039 	.word	0x00406039
  405e5c:	004069f9 	.word	0x004069f9
  405e60:	0040579d 	.word	0x0040579d

00405e64 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  405e64:	b580      	push	{r7, lr}
  405e66:	b088      	sub	sp, #32
  405e68:	af00      	add	r7, sp, #0
  405e6a:	60f8      	str	r0, [r7, #12]
  405e6c:	60b9      	str	r1, [r7, #8]
  405e6e:	607a      	str	r2, [r7, #4]
  405e70:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  405e72:	2300      	movs	r3, #0
  405e74:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
  405e76:	68fb      	ldr	r3, [r7, #12]
  405e78:	2b00      	cmp	r3, #0
  405e7a:	d103      	bne.n	405e84 <xQueueGenericReceive+0x20>
  405e7c:	4b5f      	ldr	r3, [pc, #380]	; (405ffc <xQueueGenericReceive+0x198>)
  405e7e:	4798      	blx	r3
  405e80:	bf00      	nop
  405e82:	e7fd      	b.n	405e80 <xQueueGenericReceive+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  405e84:	68bb      	ldr	r3, [r7, #8]
  405e86:	2b00      	cmp	r3, #0
  405e88:	d103      	bne.n	405e92 <xQueueGenericReceive+0x2e>
  405e8a:	68fb      	ldr	r3, [r7, #12]
  405e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405e8e:	2b00      	cmp	r3, #0
  405e90:	d101      	bne.n	405e96 <xQueueGenericReceive+0x32>
  405e92:	2301      	movs	r3, #1
  405e94:	e000      	b.n	405e98 <xQueueGenericReceive+0x34>
  405e96:	2300      	movs	r3, #0
  405e98:	2b00      	cmp	r3, #0
  405e9a:	d103      	bne.n	405ea4 <xQueueGenericReceive+0x40>
  405e9c:	4b57      	ldr	r3, [pc, #348]	; (405ffc <xQueueGenericReceive+0x198>)
  405e9e:	4798      	blx	r3
  405ea0:	bf00      	nop
  405ea2:	e7fd      	b.n	405ea0 <xQueueGenericReceive+0x3c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  405ea4:	4b56      	ldr	r3, [pc, #344]	; (406000 <xQueueGenericReceive+0x19c>)
  405ea6:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  405ea8:	68fb      	ldr	r3, [r7, #12]
  405eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  405eac:	2b00      	cmp	r3, #0
  405eae:	d03b      	beq.n	405f28 <xQueueGenericReceive+0xc4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  405eb0:	68fb      	ldr	r3, [r7, #12]
  405eb2:	68db      	ldr	r3, [r3, #12]
  405eb4:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  405eb6:	68b9      	ldr	r1, [r7, #8]
  405eb8:	68f8      	ldr	r0, [r7, #12]
  405eba:	4b52      	ldr	r3, [pc, #328]	; (406004 <xQueueGenericReceive+0x1a0>)
  405ebc:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  405ebe:	683b      	ldr	r3, [r7, #0]
  405ec0:	2b00      	cmp	r3, #0
  405ec2:	d11c      	bne.n	405efe <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  405ec4:	68fb      	ldr	r3, [r7, #12]
  405ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  405ec8:	1e5a      	subs	r2, r3, #1
  405eca:	68fb      	ldr	r3, [r7, #12]
  405ecc:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  405ece:	68fb      	ldr	r3, [r7, #12]
  405ed0:	681b      	ldr	r3, [r3, #0]
  405ed2:	2b00      	cmp	r3, #0
  405ed4:	d104      	bne.n	405ee0 <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  405ed6:	4b4c      	ldr	r3, [pc, #304]	; (406008 <xQueueGenericReceive+0x1a4>)
  405ed8:	4798      	blx	r3
  405eda:	4602      	mov	r2, r0
  405edc:	68fb      	ldr	r3, [r7, #12]
  405ede:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  405ee0:	68fb      	ldr	r3, [r7, #12]
  405ee2:	691b      	ldr	r3, [r3, #16]
  405ee4:	2b00      	cmp	r3, #0
  405ee6:	d01b      	beq.n	405f20 <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  405ee8:	68fb      	ldr	r3, [r7, #12]
  405eea:	3310      	adds	r3, #16
  405eec:	4618      	mov	r0, r3
  405eee:	4b47      	ldr	r3, [pc, #284]	; (40600c <xQueueGenericReceive+0x1a8>)
  405ef0:	4798      	blx	r3
  405ef2:	4603      	mov	r3, r0
  405ef4:	2b01      	cmp	r3, #1
  405ef6:	d113      	bne.n	405f20 <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
  405ef8:	4b45      	ldr	r3, [pc, #276]	; (406010 <xQueueGenericReceive+0x1ac>)
  405efa:	4798      	blx	r3
  405efc:	e010      	b.n	405f20 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  405efe:	68fb      	ldr	r3, [r7, #12]
  405f00:	69ba      	ldr	r2, [r7, #24]
  405f02:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  405f04:	68fb      	ldr	r3, [r7, #12]
  405f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  405f08:	2b00      	cmp	r3, #0
  405f0a:	d009      	beq.n	405f20 <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  405f0c:	68fb      	ldr	r3, [r7, #12]
  405f0e:	3324      	adds	r3, #36	; 0x24
  405f10:	4618      	mov	r0, r3
  405f12:	4b3e      	ldr	r3, [pc, #248]	; (40600c <xQueueGenericReceive+0x1a8>)
  405f14:	4798      	blx	r3
  405f16:	4603      	mov	r3, r0
  405f18:	2b00      	cmp	r3, #0
  405f1a:	d001      	beq.n	405f20 <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  405f1c:	4b3c      	ldr	r3, [pc, #240]	; (406010 <xQueueGenericReceive+0x1ac>)
  405f1e:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
  405f20:	4b3c      	ldr	r3, [pc, #240]	; (406014 <xQueueGenericReceive+0x1b0>)
  405f22:	4798      	blx	r3
				return pdPASS;
  405f24:	2301      	movs	r3, #1
  405f26:	e064      	b.n	405ff2 <xQueueGenericReceive+0x18e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  405f28:	687b      	ldr	r3, [r7, #4]
  405f2a:	2b00      	cmp	r3, #0
  405f2c:	d103      	bne.n	405f36 <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  405f2e:	4b39      	ldr	r3, [pc, #228]	; (406014 <xQueueGenericReceive+0x1b0>)
  405f30:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  405f32:	2300      	movs	r3, #0
  405f34:	e05d      	b.n	405ff2 <xQueueGenericReceive+0x18e>
				}
				else if( xEntryTimeSet == pdFALSE )
  405f36:	69fb      	ldr	r3, [r7, #28]
  405f38:	2b00      	cmp	r3, #0
  405f3a:	d106      	bne.n	405f4a <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  405f3c:	f107 0310 	add.w	r3, r7, #16
  405f40:	4618      	mov	r0, r3
  405f42:	4b35      	ldr	r3, [pc, #212]	; (406018 <xQueueGenericReceive+0x1b4>)
  405f44:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  405f46:	2301      	movs	r3, #1
  405f48:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  405f4a:	4b32      	ldr	r3, [pc, #200]	; (406014 <xQueueGenericReceive+0x1b0>)
  405f4c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  405f4e:	4b33      	ldr	r3, [pc, #204]	; (40601c <xQueueGenericReceive+0x1b8>)
  405f50:	4798      	blx	r3
		prvLockQueue( pxQueue );
  405f52:	4b2b      	ldr	r3, [pc, #172]	; (406000 <xQueueGenericReceive+0x19c>)
  405f54:	4798      	blx	r3
  405f56:	68fb      	ldr	r3, [r7, #12]
  405f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  405f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
  405f5e:	d102      	bne.n	405f66 <xQueueGenericReceive+0x102>
  405f60:	68fb      	ldr	r3, [r7, #12]
  405f62:	2200      	movs	r2, #0
  405f64:	645a      	str	r2, [r3, #68]	; 0x44
  405f66:	68fb      	ldr	r3, [r7, #12]
  405f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  405f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
  405f6e:	d102      	bne.n	405f76 <xQueueGenericReceive+0x112>
  405f70:	68fb      	ldr	r3, [r7, #12]
  405f72:	2200      	movs	r2, #0
  405f74:	649a      	str	r2, [r3, #72]	; 0x48
  405f76:	4b27      	ldr	r3, [pc, #156]	; (406014 <xQueueGenericReceive+0x1b0>)
  405f78:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  405f7a:	1d3a      	adds	r2, r7, #4
  405f7c:	f107 0310 	add.w	r3, r7, #16
  405f80:	4611      	mov	r1, r2
  405f82:	4618      	mov	r0, r3
  405f84:	4b26      	ldr	r3, [pc, #152]	; (406020 <xQueueGenericReceive+0x1bc>)
  405f86:	4798      	blx	r3
  405f88:	4603      	mov	r3, r0
  405f8a:	2b00      	cmp	r3, #0
  405f8c:	d12b      	bne.n	405fe6 <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  405f8e:	68f8      	ldr	r0, [r7, #12]
  405f90:	4b24      	ldr	r3, [pc, #144]	; (406024 <xQueueGenericReceive+0x1c0>)
  405f92:	4798      	blx	r3
  405f94:	4603      	mov	r3, r0
  405f96:	2b00      	cmp	r3, #0
  405f98:	d01f      	beq.n	405fda <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  405f9a:	68fb      	ldr	r3, [r7, #12]
  405f9c:	681b      	ldr	r3, [r3, #0]
  405f9e:	2b00      	cmp	r3, #0
  405fa0:	d108      	bne.n	405fb4 <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
  405fa2:	4b17      	ldr	r3, [pc, #92]	; (406000 <xQueueGenericReceive+0x19c>)
  405fa4:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  405fa6:	68fb      	ldr	r3, [r7, #12]
  405fa8:	685b      	ldr	r3, [r3, #4]
  405faa:	4618      	mov	r0, r3
  405fac:	4b1e      	ldr	r3, [pc, #120]	; (406028 <xQueueGenericReceive+0x1c4>)
  405fae:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  405fb0:	4b18      	ldr	r3, [pc, #96]	; (406014 <xQueueGenericReceive+0x1b0>)
  405fb2:	4798      	blx	r3
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  405fb4:	68fb      	ldr	r3, [r7, #12]
  405fb6:	3324      	adds	r3, #36	; 0x24
  405fb8:	687a      	ldr	r2, [r7, #4]
  405fba:	4611      	mov	r1, r2
  405fbc:	4618      	mov	r0, r3
  405fbe:	4b1b      	ldr	r3, [pc, #108]	; (40602c <xQueueGenericReceive+0x1c8>)
  405fc0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  405fc2:	68f8      	ldr	r0, [r7, #12]
  405fc4:	4b1a      	ldr	r3, [pc, #104]	; (406030 <xQueueGenericReceive+0x1cc>)
  405fc6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  405fc8:	4b1a      	ldr	r3, [pc, #104]	; (406034 <xQueueGenericReceive+0x1d0>)
  405fca:	4798      	blx	r3
  405fcc:	4603      	mov	r3, r0
  405fce:	2b00      	cmp	r3, #0
  405fd0:	f47f af68 	bne.w	405ea4 <xQueueGenericReceive+0x40>
				{
					portYIELD_WITHIN_API();
  405fd4:	4b0e      	ldr	r3, [pc, #56]	; (406010 <xQueueGenericReceive+0x1ac>)
  405fd6:	4798      	blx	r3
  405fd8:	e764      	b.n	405ea4 <xQueueGenericReceive+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  405fda:	68f8      	ldr	r0, [r7, #12]
  405fdc:	4b14      	ldr	r3, [pc, #80]	; (406030 <xQueueGenericReceive+0x1cc>)
  405fde:	4798      	blx	r3
				( void ) xTaskResumeAll();
  405fe0:	4b14      	ldr	r3, [pc, #80]	; (406034 <xQueueGenericReceive+0x1d0>)
  405fe2:	4798      	blx	r3
  405fe4:	e75e      	b.n	405ea4 <xQueueGenericReceive+0x40>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  405fe6:	68f8      	ldr	r0, [r7, #12]
  405fe8:	4b11      	ldr	r3, [pc, #68]	; (406030 <xQueueGenericReceive+0x1cc>)
  405fea:	4798      	blx	r3
			( void ) xTaskResumeAll();
  405fec:	4b11      	ldr	r3, [pc, #68]	; (406034 <xQueueGenericReceive+0x1d0>)
  405fee:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  405ff0:	2300      	movs	r3, #0
		}
	}
}
  405ff2:	4618      	mov	r0, r3
  405ff4:	3720      	adds	r7, #32
  405ff6:	46bd      	mov	sp, r7
  405ff8:	bd80      	pop	{r7, pc}
  405ffa:	bf00      	nop
  405ffc:	00405789 	.word	0x00405789
  406000:	00405741 	.word	0x00405741
  406004:	004060f9 	.word	0x004060f9
  406008:	00406e5d 	.word	0x00406e5d
  40600c:	004069f9 	.word	0x004069f9
  406010:	00405729 	.word	0x00405729
  406014:	00405761 	.word	0x00405761
  406018:	00406ab5 	.word	0x00406ab5
  40601c:	00406561 	.word	0x00406561
  406020:	00406af1 	.word	0x00406af1
  406024:	004061f1 	.word	0x004061f1
  406028:	00406eb5 	.word	0x00406eb5
  40602c:	00406911 	.word	0x00406911
  406030:	00406149 	.word	0x00406149
  406034:	0040657d 	.word	0x0040657d

00406038 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  406038:	b580      	push	{r7, lr}
  40603a:	b084      	sub	sp, #16
  40603c:	af00      	add	r7, sp, #0
  40603e:	60f8      	str	r0, [r7, #12]
  406040:	60b9      	str	r1, [r7, #8]
  406042:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  406044:	68fb      	ldr	r3, [r7, #12]
  406046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406048:	2b00      	cmp	r3, #0
  40604a:	d10c      	bne.n	406066 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40604c:	68fb      	ldr	r3, [r7, #12]
  40604e:	681b      	ldr	r3, [r3, #0]
  406050:	2b00      	cmp	r3, #0
  406052:	d143      	bne.n	4060dc <prvCopyDataToQueue+0xa4>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  406054:	68fb      	ldr	r3, [r7, #12]
  406056:	685b      	ldr	r3, [r3, #4]
  406058:	4618      	mov	r0, r3
  40605a:	4b25      	ldr	r3, [pc, #148]	; (4060f0 <prvCopyDataToQueue+0xb8>)
  40605c:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  40605e:	68fb      	ldr	r3, [r7, #12]
  406060:	2200      	movs	r2, #0
  406062:	605a      	str	r2, [r3, #4]
  406064:	e03a      	b.n	4060dc <prvCopyDataToQueue+0xa4>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  406066:	687b      	ldr	r3, [r7, #4]
  406068:	2b00      	cmp	r3, #0
  40606a:	d119      	bne.n	4060a0 <prvCopyDataToQueue+0x68>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  40606c:	68fb      	ldr	r3, [r7, #12]
  40606e:	6898      	ldr	r0, [r3, #8]
  406070:	68fb      	ldr	r3, [r7, #12]
  406072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406074:	461a      	mov	r2, r3
  406076:	68b9      	ldr	r1, [r7, #8]
  406078:	4b1e      	ldr	r3, [pc, #120]	; (4060f4 <prvCopyDataToQueue+0xbc>)
  40607a:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40607c:	68fb      	ldr	r3, [r7, #12]
  40607e:	689a      	ldr	r2, [r3, #8]
  406080:	68fb      	ldr	r3, [r7, #12]
  406082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406084:	441a      	add	r2, r3
  406086:	68fb      	ldr	r3, [r7, #12]
  406088:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  40608a:	68fb      	ldr	r3, [r7, #12]
  40608c:	689a      	ldr	r2, [r3, #8]
  40608e:	68fb      	ldr	r3, [r7, #12]
  406090:	685b      	ldr	r3, [r3, #4]
  406092:	429a      	cmp	r2, r3
  406094:	d322      	bcc.n	4060dc <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  406096:	68fb      	ldr	r3, [r7, #12]
  406098:	681a      	ldr	r2, [r3, #0]
  40609a:	68fb      	ldr	r3, [r7, #12]
  40609c:	609a      	str	r2, [r3, #8]
  40609e:	e01d      	b.n	4060dc <prvCopyDataToQueue+0xa4>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  4060a0:	68fb      	ldr	r3, [r7, #12]
  4060a2:	68d8      	ldr	r0, [r3, #12]
  4060a4:	68fb      	ldr	r3, [r7, #12]
  4060a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4060a8:	461a      	mov	r2, r3
  4060aa:	68b9      	ldr	r1, [r7, #8]
  4060ac:	4b11      	ldr	r3, [pc, #68]	; (4060f4 <prvCopyDataToQueue+0xbc>)
  4060ae:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  4060b0:	68fb      	ldr	r3, [r7, #12]
  4060b2:	68da      	ldr	r2, [r3, #12]
  4060b4:	68fb      	ldr	r3, [r7, #12]
  4060b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4060b8:	425b      	negs	r3, r3
  4060ba:	441a      	add	r2, r3
  4060bc:	68fb      	ldr	r3, [r7, #12]
  4060be:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  4060c0:	68fb      	ldr	r3, [r7, #12]
  4060c2:	68da      	ldr	r2, [r3, #12]
  4060c4:	68fb      	ldr	r3, [r7, #12]
  4060c6:	681b      	ldr	r3, [r3, #0]
  4060c8:	429a      	cmp	r2, r3
  4060ca:	d207      	bcs.n	4060dc <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4060cc:	68fb      	ldr	r3, [r7, #12]
  4060ce:	685a      	ldr	r2, [r3, #4]
  4060d0:	68fb      	ldr	r3, [r7, #12]
  4060d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4060d4:	425b      	negs	r3, r3
  4060d6:	441a      	add	r2, r3
  4060d8:	68fb      	ldr	r3, [r7, #12]
  4060da:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4060dc:	68fb      	ldr	r3, [r7, #12]
  4060de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4060e0:	1c5a      	adds	r2, r3, #1
  4060e2:	68fb      	ldr	r3, [r7, #12]
  4060e4:	639a      	str	r2, [r3, #56]	; 0x38
}
  4060e6:	bf00      	nop
  4060e8:	3710      	adds	r7, #16
  4060ea:	46bd      	mov	sp, r7
  4060ec:	bd80      	pop	{r7, pc}
  4060ee:	bf00      	nop
  4060f0:	00406f69 	.word	0x00406f69
  4060f4:	0040b909 	.word	0x0040b909

004060f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  4060f8:	b580      	push	{r7, lr}
  4060fa:	b082      	sub	sp, #8
  4060fc:	af00      	add	r7, sp, #0
  4060fe:	6078      	str	r0, [r7, #4]
  406100:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  406102:	687b      	ldr	r3, [r7, #4]
  406104:	681b      	ldr	r3, [r3, #0]
  406106:	2b00      	cmp	r3, #0
  406108:	d018      	beq.n	40613c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  40610a:	687b      	ldr	r3, [r7, #4]
  40610c:	68da      	ldr	r2, [r3, #12]
  40610e:	687b      	ldr	r3, [r7, #4]
  406110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406112:	441a      	add	r2, r3
  406114:	687b      	ldr	r3, [r7, #4]
  406116:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  406118:	687b      	ldr	r3, [r7, #4]
  40611a:	68da      	ldr	r2, [r3, #12]
  40611c:	687b      	ldr	r3, [r7, #4]
  40611e:	685b      	ldr	r3, [r3, #4]
  406120:	429a      	cmp	r2, r3
  406122:	d303      	bcc.n	40612c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  406124:	687b      	ldr	r3, [r7, #4]
  406126:	681a      	ldr	r2, [r3, #0]
  406128:	687b      	ldr	r3, [r7, #4]
  40612a:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  40612c:	687b      	ldr	r3, [r7, #4]
  40612e:	68d9      	ldr	r1, [r3, #12]
  406130:	687b      	ldr	r3, [r7, #4]
  406132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406134:	461a      	mov	r2, r3
  406136:	6838      	ldr	r0, [r7, #0]
  406138:	4b02      	ldr	r3, [pc, #8]	; (406144 <prvCopyDataFromQueue+0x4c>)
  40613a:	4798      	blx	r3
	}
}
  40613c:	bf00      	nop
  40613e:	3708      	adds	r7, #8
  406140:	46bd      	mov	sp, r7
  406142:	bd80      	pop	{r7, pc}
  406144:	0040b909 	.word	0x0040b909

00406148 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  406148:	b580      	push	{r7, lr}
  40614a:	b082      	sub	sp, #8
  40614c:	af00      	add	r7, sp, #0
  40614e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  406150:	4b23      	ldr	r3, [pc, #140]	; (4061e0 <prvUnlockQueue+0x98>)
  406152:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  406154:	e012      	b.n	40617c <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  406156:	687b      	ldr	r3, [r7, #4]
  406158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40615a:	2b00      	cmp	r3, #0
  40615c:	d013      	beq.n	406186 <prvUnlockQueue+0x3e>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40615e:	687b      	ldr	r3, [r7, #4]
  406160:	3324      	adds	r3, #36	; 0x24
  406162:	4618      	mov	r0, r3
  406164:	4b1f      	ldr	r3, [pc, #124]	; (4061e4 <prvUnlockQueue+0x9c>)
  406166:	4798      	blx	r3
  406168:	4603      	mov	r3, r0
  40616a:	2b00      	cmp	r3, #0
  40616c:	d001      	beq.n	406172 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  40616e:	4b1e      	ldr	r3, [pc, #120]	; (4061e8 <prvUnlockQueue+0xa0>)
  406170:	4798      	blx	r3
				}

				--( pxQueue->xTxLock );
  406172:	687b      	ldr	r3, [r7, #4]
  406174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  406176:	1e5a      	subs	r2, r3, #1
  406178:	687b      	ldr	r3, [r7, #4]
  40617a:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40617c:	687b      	ldr	r3, [r7, #4]
  40617e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  406180:	2b00      	cmp	r3, #0
  406182:	dce8      	bgt.n	406156 <prvUnlockQueue+0xe>
  406184:	e000      	b.n	406188 <prvUnlockQueue+0x40>

				--( pxQueue->xTxLock );
			}
			else
			{
				break;
  406186:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  406188:	687b      	ldr	r3, [r7, #4]
  40618a:	f04f 32ff 	mov.w	r2, #4294967295
  40618e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  406190:	4b16      	ldr	r3, [pc, #88]	; (4061ec <prvUnlockQueue+0xa4>)
  406192:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  406194:	4b12      	ldr	r3, [pc, #72]	; (4061e0 <prvUnlockQueue+0x98>)
  406196:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  406198:	e012      	b.n	4061c0 <prvUnlockQueue+0x78>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40619a:	687b      	ldr	r3, [r7, #4]
  40619c:	691b      	ldr	r3, [r3, #16]
  40619e:	2b00      	cmp	r3, #0
  4061a0:	d013      	beq.n	4061ca <prvUnlockQueue+0x82>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4061a2:	687b      	ldr	r3, [r7, #4]
  4061a4:	3310      	adds	r3, #16
  4061a6:	4618      	mov	r0, r3
  4061a8:	4b0e      	ldr	r3, [pc, #56]	; (4061e4 <prvUnlockQueue+0x9c>)
  4061aa:	4798      	blx	r3
  4061ac:	4603      	mov	r3, r0
  4061ae:	2b00      	cmp	r3, #0
  4061b0:	d001      	beq.n	4061b6 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
  4061b2:	4b0d      	ldr	r3, [pc, #52]	; (4061e8 <prvUnlockQueue+0xa0>)
  4061b4:	4798      	blx	r3
				}

				--( pxQueue->xRxLock );
  4061b6:	687b      	ldr	r3, [r7, #4]
  4061b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  4061ba:	1e5a      	subs	r2, r3, #1
  4061bc:	687b      	ldr	r3, [r7, #4]
  4061be:	645a      	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4061c0:	687b      	ldr	r3, [r7, #4]
  4061c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  4061c4:	2b00      	cmp	r3, #0
  4061c6:	dce8      	bgt.n	40619a <prvUnlockQueue+0x52>
  4061c8:	e000      	b.n	4061cc <prvUnlockQueue+0x84>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
  4061ca:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  4061cc:	687b      	ldr	r3, [r7, #4]
  4061ce:	f04f 32ff 	mov.w	r2, #4294967295
  4061d2:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  4061d4:	4b05      	ldr	r3, [pc, #20]	; (4061ec <prvUnlockQueue+0xa4>)
  4061d6:	4798      	blx	r3
}
  4061d8:	bf00      	nop
  4061da:	3708      	adds	r7, #8
  4061dc:	46bd      	mov	sp, r7
  4061de:	bd80      	pop	{r7, pc}
  4061e0:	00405741 	.word	0x00405741
  4061e4:	004069f9 	.word	0x004069f9
  4061e8:	00406ba5 	.word	0x00406ba5
  4061ec:	00405761 	.word	0x00405761

004061f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
  4061f0:	b580      	push	{r7, lr}
  4061f2:	b084      	sub	sp, #16
  4061f4:	af00      	add	r7, sp, #0
  4061f6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  4061f8:	4b08      	ldr	r3, [pc, #32]	; (40621c <prvIsQueueEmpty+0x2c>)
  4061fa:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  4061fc:	687b      	ldr	r3, [r7, #4]
  4061fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  406200:	2b00      	cmp	r3, #0
  406202:	bf0c      	ite	eq
  406204:	2301      	moveq	r3, #1
  406206:	2300      	movne	r3, #0
  406208:	b2db      	uxtb	r3, r3
  40620a:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  40620c:	4b04      	ldr	r3, [pc, #16]	; (406220 <prvIsQueueEmpty+0x30>)
  40620e:	4798      	blx	r3

	return xReturn;
  406210:	68fb      	ldr	r3, [r7, #12]
}
  406212:	4618      	mov	r0, r3
  406214:	3710      	adds	r7, #16
  406216:	46bd      	mov	sp, r7
  406218:	bd80      	pop	{r7, pc}
  40621a:	bf00      	nop
  40621c:	00405741 	.word	0x00405741
  406220:	00405761 	.word	0x00405761

00406224 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
  406224:	b580      	push	{r7, lr}
  406226:	b084      	sub	sp, #16
  406228:	af00      	add	r7, sp, #0
  40622a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  40622c:	4b09      	ldr	r3, [pc, #36]	; (406254 <prvIsQueueFull+0x30>)
  40622e:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  406230:	687b      	ldr	r3, [r7, #4]
  406232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  406234:	687b      	ldr	r3, [r7, #4]
  406236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  406238:	429a      	cmp	r2, r3
  40623a:	bf0c      	ite	eq
  40623c:	2301      	moveq	r3, #1
  40623e:	2300      	movne	r3, #0
  406240:	b2db      	uxtb	r3, r3
  406242:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  406244:	4b04      	ldr	r3, [pc, #16]	; (406258 <prvIsQueueFull+0x34>)
  406246:	4798      	blx	r3

	return xReturn;
  406248:	68fb      	ldr	r3, [r7, #12]
}
  40624a:	4618      	mov	r0, r3
  40624c:	3710      	adds	r7, #16
  40624e:	46bd      	mov	sp, r7
  406250:	bd80      	pop	{r7, pc}
  406252:	bf00      	nop
  406254:	00405741 	.word	0x00405741
  406258:	00405761 	.word	0x00405761

0040625c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  40625c:	b580      	push	{r7, lr}
  40625e:	b082      	sub	sp, #8
  406260:	af00      	add	r7, sp, #0
  406262:	6078      	str	r0, [r7, #4]
  406264:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  406266:	4b12      	ldr	r3, [pc, #72]	; (4062b0 <vQueueWaitForMessageRestricted+0x54>)
  406268:	4798      	blx	r3
  40626a:	687b      	ldr	r3, [r7, #4]
  40626c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  40626e:	f1b3 3fff 	cmp.w	r3, #4294967295
  406272:	d102      	bne.n	40627a <vQueueWaitForMessageRestricted+0x1e>
  406274:	687b      	ldr	r3, [r7, #4]
  406276:	2200      	movs	r2, #0
  406278:	645a      	str	r2, [r3, #68]	; 0x44
  40627a:	687b      	ldr	r3, [r7, #4]
  40627c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40627e:	f1b3 3fff 	cmp.w	r3, #4294967295
  406282:	d102      	bne.n	40628a <vQueueWaitForMessageRestricted+0x2e>
  406284:	687b      	ldr	r3, [r7, #4]
  406286:	2200      	movs	r2, #0
  406288:	649a      	str	r2, [r3, #72]	; 0x48
  40628a:	4b0a      	ldr	r3, [pc, #40]	; (4062b4 <vQueueWaitForMessageRestricted+0x58>)
  40628c:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  40628e:	687b      	ldr	r3, [r7, #4]
  406290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  406292:	2b00      	cmp	r3, #0
  406294:	d105      	bne.n	4062a2 <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  406296:	687b      	ldr	r3, [r7, #4]
  406298:	3324      	adds	r3, #36	; 0x24
  40629a:	6839      	ldr	r1, [r7, #0]
  40629c:	4618      	mov	r0, r3
  40629e:	4b06      	ldr	r3, [pc, #24]	; (4062b8 <vQueueWaitForMessageRestricted+0x5c>)
  4062a0:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
  4062a2:	6878      	ldr	r0, [r7, #4]
  4062a4:	4b05      	ldr	r3, [pc, #20]	; (4062bc <vQueueWaitForMessageRestricted+0x60>)
  4062a6:	4798      	blx	r3
	}
  4062a8:	bf00      	nop
  4062aa:	3708      	adds	r7, #8
  4062ac:	46bd      	mov	sp, r7
  4062ae:	bd80      	pop	{r7, pc}
  4062b0:	00405741 	.word	0x00405741
  4062b4:	00405761 	.word	0x00405761
  4062b8:	00406995 	.word	0x00406995
  4062bc:	00406149 	.word	0x00406149

004062c0 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  4062c0:	b590      	push	{r4, r7, lr}
  4062c2:	b08b      	sub	sp, #44	; 0x2c
  4062c4:	af02      	add	r7, sp, #8
  4062c6:	60f8      	str	r0, [r7, #12]
  4062c8:	60b9      	str	r1, [r7, #8]
  4062ca:	603b      	str	r3, [r7, #0]
  4062cc:	4613      	mov	r3, r2
  4062ce:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
  4062d0:	68fb      	ldr	r3, [r7, #12]
  4062d2:	2b00      	cmp	r3, #0
  4062d4:	d103      	bne.n	4062de <xTaskGenericCreate+0x1e>
  4062d6:	4b58      	ldr	r3, [pc, #352]	; (406438 <xTaskGenericCreate+0x178>)
  4062d8:	4798      	blx	r3
  4062da:	bf00      	nop
  4062dc:	e7fd      	b.n	4062da <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
  4062de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4062e0:	2b04      	cmp	r3, #4
  4062e2:	d903      	bls.n	4062ec <xTaskGenericCreate+0x2c>
  4062e4:	4b54      	ldr	r3, [pc, #336]	; (406438 <xTaskGenericCreate+0x178>)
  4062e6:	4798      	blx	r3
  4062e8:	bf00      	nop
  4062ea:	e7fd      	b.n	4062e8 <xTaskGenericCreate+0x28>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
  4062ec:	88fb      	ldrh	r3, [r7, #6]
  4062ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  4062f0:	4618      	mov	r0, r3
  4062f2:	4b52      	ldr	r3, [pc, #328]	; (40643c <xTaskGenericCreate+0x17c>)
  4062f4:	4798      	blx	r3
  4062f6:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
  4062f8:	69bb      	ldr	r3, [r7, #24]
  4062fa:	2b00      	cmp	r3, #0
  4062fc:	f000 8084 	beq.w	406408 <xTaskGenericCreate+0x148>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
  406300:	69bb      	ldr	r3, [r7, #24]
  406302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  406304:	88fb      	ldrh	r3, [r7, #6]
  406306:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  40630a:	3b01      	subs	r3, #1
  40630c:	009b      	lsls	r3, r3, #2
  40630e:	4413      	add	r3, r2
  406310:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
  406312:	697b      	ldr	r3, [r7, #20]
  406314:	f023 0307 	bic.w	r3, r3, #7
  406318:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  40631a:	697b      	ldr	r3, [r7, #20]
  40631c:	f003 0307 	and.w	r3, r3, #7
  406320:	2b00      	cmp	r3, #0
  406322:	d003      	beq.n	40632c <xTaskGenericCreate+0x6c>
  406324:	4b44      	ldr	r3, [pc, #272]	; (406438 <xTaskGenericCreate+0x178>)
  406326:	4798      	blx	r3
  406328:	bf00      	nop
  40632a:	e7fd      	b.n	406328 <xTaskGenericCreate+0x68>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
  40632c:	88fb      	ldrh	r3, [r7, #6]
  40632e:	9300      	str	r3, [sp, #0]
  406330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  406332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  406334:	68b9      	ldr	r1, [r7, #8]
  406336:	69b8      	ldr	r0, [r7, #24]
  406338:	4c41      	ldr	r4, [pc, #260]	; (406440 <xTaskGenericCreate+0x180>)
  40633a:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  40633c:	683a      	ldr	r2, [r7, #0]
  40633e:	68f9      	ldr	r1, [r7, #12]
  406340:	6978      	ldr	r0, [r7, #20]
  406342:	4b40      	ldr	r3, [pc, #256]	; (406444 <xTaskGenericCreate+0x184>)
  406344:	4798      	blx	r3
  406346:	4602      	mov	r2, r0
  406348:	69bb      	ldr	r3, [r7, #24]
  40634a:	601a      	str	r2, [r3, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  40634c:	69bb      	ldr	r3, [r7, #24]
  40634e:	681b      	ldr	r3, [r3, #0]
  406350:	f003 0307 	and.w	r3, r3, #7
  406354:	2b00      	cmp	r3, #0
  406356:	d003      	beq.n	406360 <xTaskGenericCreate+0xa0>
  406358:	4b37      	ldr	r3, [pc, #220]	; (406438 <xTaskGenericCreate+0x178>)
  40635a:	4798      	blx	r3
  40635c:	bf00      	nop
  40635e:	e7fd      	b.n	40635c <xTaskGenericCreate+0x9c>

		if( ( void * ) pxCreatedTask != NULL )
  406360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  406362:	2b00      	cmp	r3, #0
  406364:	d002      	beq.n	40636c <xTaskGenericCreate+0xac>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  406366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  406368:	69ba      	ldr	r2, [r7, #24]
  40636a:	601a      	str	r2, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  40636c:	4b36      	ldr	r3, [pc, #216]	; (406448 <xTaskGenericCreate+0x188>)
  40636e:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  406370:	4b36      	ldr	r3, [pc, #216]	; (40644c <xTaskGenericCreate+0x18c>)
  406372:	681b      	ldr	r3, [r3, #0]
  406374:	3301      	adds	r3, #1
  406376:	4a35      	ldr	r2, [pc, #212]	; (40644c <xTaskGenericCreate+0x18c>)
  406378:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  40637a:	4b35      	ldr	r3, [pc, #212]	; (406450 <xTaskGenericCreate+0x190>)
  40637c:	681b      	ldr	r3, [r3, #0]
  40637e:	2b00      	cmp	r3, #0
  406380:	d109      	bne.n	406396 <xTaskGenericCreate+0xd6>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  406382:	4a33      	ldr	r2, [pc, #204]	; (406450 <xTaskGenericCreate+0x190>)
  406384:	69bb      	ldr	r3, [r7, #24]
  406386:	6013      	str	r3, [r2, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  406388:	4b30      	ldr	r3, [pc, #192]	; (40644c <xTaskGenericCreate+0x18c>)
  40638a:	681b      	ldr	r3, [r3, #0]
  40638c:	2b01      	cmp	r3, #1
  40638e:	d10f      	bne.n	4063b0 <xTaskGenericCreate+0xf0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
  406390:	4b30      	ldr	r3, [pc, #192]	; (406454 <xTaskGenericCreate+0x194>)
  406392:	4798      	blx	r3
  406394:	e00c      	b.n	4063b0 <xTaskGenericCreate+0xf0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  406396:	4b30      	ldr	r3, [pc, #192]	; (406458 <xTaskGenericCreate+0x198>)
  406398:	681b      	ldr	r3, [r3, #0]
  40639a:	2b00      	cmp	r3, #0
  40639c:	d108      	bne.n	4063b0 <xTaskGenericCreate+0xf0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  40639e:	4b2c      	ldr	r3, [pc, #176]	; (406450 <xTaskGenericCreate+0x190>)
  4063a0:	681b      	ldr	r3, [r3, #0]
  4063a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4063a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4063a6:	429a      	cmp	r2, r3
  4063a8:	d802      	bhi.n	4063b0 <xTaskGenericCreate+0xf0>
					{
						pxCurrentTCB = pxNewTCB;
  4063aa:	4a29      	ldr	r2, [pc, #164]	; (406450 <xTaskGenericCreate+0x190>)
  4063ac:	69bb      	ldr	r3, [r7, #24]
  4063ae:	6013      	str	r3, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  4063b0:	69bb      	ldr	r3, [r7, #24]
  4063b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4063b4:	4b29      	ldr	r3, [pc, #164]	; (40645c <xTaskGenericCreate+0x19c>)
  4063b6:	681b      	ldr	r3, [r3, #0]
  4063b8:	429a      	cmp	r2, r3
  4063ba:	d903      	bls.n	4063c4 <xTaskGenericCreate+0x104>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  4063bc:	69bb      	ldr	r3, [r7, #24]
  4063be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4063c0:	4a26      	ldr	r2, [pc, #152]	; (40645c <xTaskGenericCreate+0x19c>)
  4063c2:	6013      	str	r3, [r2, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
  4063c4:	4b26      	ldr	r3, [pc, #152]	; (406460 <xTaskGenericCreate+0x1a0>)
  4063c6:	681b      	ldr	r3, [r3, #0]
  4063c8:	3301      	adds	r3, #1
  4063ca:	4a25      	ldr	r2, [pc, #148]	; (406460 <xTaskGenericCreate+0x1a0>)
  4063cc:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  4063ce:	69bb      	ldr	r3, [r7, #24]
  4063d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4063d2:	4b24      	ldr	r3, [pc, #144]	; (406464 <xTaskGenericCreate+0x1a4>)
  4063d4:	681b      	ldr	r3, [r3, #0]
  4063d6:	429a      	cmp	r2, r3
  4063d8:	d903      	bls.n	4063e2 <xTaskGenericCreate+0x122>
  4063da:	69bb      	ldr	r3, [r7, #24]
  4063dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4063de:	4a21      	ldr	r2, [pc, #132]	; (406464 <xTaskGenericCreate+0x1a4>)
  4063e0:	6013      	str	r3, [r2, #0]
  4063e2:	69bb      	ldr	r3, [r7, #24]
  4063e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4063e6:	4613      	mov	r3, r2
  4063e8:	009b      	lsls	r3, r3, #2
  4063ea:	4413      	add	r3, r2
  4063ec:	009b      	lsls	r3, r3, #2
  4063ee:	4a1e      	ldr	r2, [pc, #120]	; (406468 <xTaskGenericCreate+0x1a8>)
  4063f0:	441a      	add	r2, r3
  4063f2:	69bb      	ldr	r3, [r7, #24]
  4063f4:	3304      	adds	r3, #4
  4063f6:	4619      	mov	r1, r3
  4063f8:	4610      	mov	r0, r2
  4063fa:	4b1c      	ldr	r3, [pc, #112]	; (40646c <xTaskGenericCreate+0x1ac>)
  4063fc:	4798      	blx	r3

			xReturn = pdPASS;
  4063fe:	2301      	movs	r3, #1
  406400:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  406402:	4b1b      	ldr	r3, [pc, #108]	; (406470 <xTaskGenericCreate+0x1b0>)
  406404:	4798      	blx	r3
  406406:	e002      	b.n	40640e <xTaskGenericCreate+0x14e>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  406408:	f04f 33ff 	mov.w	r3, #4294967295
  40640c:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
  40640e:	69fb      	ldr	r3, [r7, #28]
  406410:	2b01      	cmp	r3, #1
  406412:	d10b      	bne.n	40642c <xTaskGenericCreate+0x16c>
	{
		if( xSchedulerRunning != pdFALSE )
  406414:	4b10      	ldr	r3, [pc, #64]	; (406458 <xTaskGenericCreate+0x198>)
  406416:	681b      	ldr	r3, [r3, #0]
  406418:	2b00      	cmp	r3, #0
  40641a:	d007      	beq.n	40642c <xTaskGenericCreate+0x16c>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  40641c:	4b0c      	ldr	r3, [pc, #48]	; (406450 <xTaskGenericCreate+0x190>)
  40641e:	681b      	ldr	r3, [r3, #0]
  406420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  406424:	429a      	cmp	r2, r3
  406426:	d201      	bcs.n	40642c <xTaskGenericCreate+0x16c>
			{
				portYIELD_WITHIN_API();
  406428:	4b12      	ldr	r3, [pc, #72]	; (406474 <xTaskGenericCreate+0x1b4>)
  40642a:	4798      	blx	r3
			}
		}
	}

	return xReturn;
  40642c:	69fb      	ldr	r3, [r7, #28]
}
  40642e:	4618      	mov	r0, r3
  406430:	3724      	adds	r7, #36	; 0x24
  406432:	46bd      	mov	sp, r7
  406434:	bd90      	pop	{r4, r7, pc}
  406436:	bf00      	nop
  406438:	00405789 	.word	0x00405789
  40643c:	00406dc9 	.word	0x00406dc9
  406440:	00406bd1 	.word	0x00406bd1
  406444:	0040565d 	.word	0x0040565d
  406448:	00405741 	.word	0x00405741
  40644c:	20002df4 	.word	0x20002df4
  406450:	20002d1c 	.word	0x20002d1c
  406454:	00406c45 	.word	0x00406c45
  406458:	20002e04 	.word	0x20002e04
  40645c:	20002dfc 	.word	0x20002dfc
  406460:	20002e18 	.word	0x20002e18
  406464:	20002e00 	.word	0x20002e00
  406468:	20002d20 	.word	0x20002d20
  40646c:	004054a5 	.word	0x004054a5
  406470:	00405761 	.word	0x00405761
  406474:	00405729 	.word	0x00405729

00406478 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
  406478:	b580      	push	{r7, lr}
  40647a:	b084      	sub	sp, #16
  40647c:	af00      	add	r7, sp, #0
  40647e:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  406480:	2300      	movs	r3, #0
  406482:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
  406484:	687b      	ldr	r3, [r7, #4]
  406486:	2b00      	cmp	r3, #0
  406488:	d012      	beq.n	4064b0 <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
  40648a:	4b0e      	ldr	r3, [pc, #56]	; (4064c4 <vTaskDelay+0x4c>)
  40648c:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  40648e:	4b0e      	ldr	r3, [pc, #56]	; (4064c8 <vTaskDelay+0x50>)
  406490:	681a      	ldr	r2, [r3, #0]
  406492:	687b      	ldr	r3, [r7, #4]
  406494:	4413      	add	r3, r2
  406496:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  406498:	4b0c      	ldr	r3, [pc, #48]	; (4064cc <vTaskDelay+0x54>)
  40649a:	681b      	ldr	r3, [r3, #0]
  40649c:	3304      	adds	r3, #4
  40649e:	4618      	mov	r0, r3
  4064a0:	4b0b      	ldr	r3, [pc, #44]	; (4064d0 <vTaskDelay+0x58>)
  4064a2:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4064a4:	68b8      	ldr	r0, [r7, #8]
  4064a6:	4b0b      	ldr	r3, [pc, #44]	; (4064d4 <vTaskDelay+0x5c>)
  4064a8:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  4064aa:	4b0b      	ldr	r3, [pc, #44]	; (4064d8 <vTaskDelay+0x60>)
  4064ac:	4798      	blx	r3
  4064ae:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  4064b0:	68fb      	ldr	r3, [r7, #12]
  4064b2:	2b00      	cmp	r3, #0
  4064b4:	d101      	bne.n	4064ba <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
  4064b6:	4b09      	ldr	r3, [pc, #36]	; (4064dc <vTaskDelay+0x64>)
  4064b8:	4798      	blx	r3
		}
	}
  4064ba:	bf00      	nop
  4064bc:	3710      	adds	r7, #16
  4064be:	46bd      	mov	sp, r7
  4064c0:	bd80      	pop	{r7, pc}
  4064c2:	bf00      	nop
  4064c4:	00406561 	.word	0x00406561
  4064c8:	20002df8 	.word	0x20002df8
  4064cc:	20002d1c 	.word	0x20002d1c
  4064d0:	00405565 	.word	0x00405565
  4064d4:	00406d59 	.word	0x00406d59
  4064d8:	0040657d 	.word	0x0040657d
  4064dc:	00405729 	.word	0x00405729

004064e0 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  4064e0:	b590      	push	{r4, r7, lr}
  4064e2:	b087      	sub	sp, #28
  4064e4:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
  4064e6:	2300      	movs	r3, #0
  4064e8:	9303      	str	r3, [sp, #12]
  4064ea:	2300      	movs	r3, #0
  4064ec:	9302      	str	r3, [sp, #8]
  4064ee:	2300      	movs	r3, #0
  4064f0:	9301      	str	r3, [sp, #4]
  4064f2:	2300      	movs	r3, #0
  4064f4:	9300      	str	r3, [sp, #0]
  4064f6:	2300      	movs	r3, #0
  4064f8:	2264      	movs	r2, #100	; 0x64
  4064fa:	4911      	ldr	r1, [pc, #68]	; (406540 <vTaskStartScheduler+0x60>)
  4064fc:	4811      	ldr	r0, [pc, #68]	; (406544 <vTaskStartScheduler+0x64>)
  4064fe:	4c12      	ldr	r4, [pc, #72]	; (406548 <vTaskStartScheduler+0x68>)
  406500:	47a0      	blx	r4
  406502:	6078      	str	r0, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  406504:	687b      	ldr	r3, [r7, #4]
  406506:	2b01      	cmp	r3, #1
  406508:	d102      	bne.n	406510 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
  40650a:	4b10      	ldr	r3, [pc, #64]	; (40654c <vTaskStartScheduler+0x6c>)
  40650c:	4798      	blx	r3
  40650e:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
  406510:	687b      	ldr	r3, [r7, #4]
  406512:	2b01      	cmp	r3, #1
  406514:	d109      	bne.n	40652a <vTaskStartScheduler+0x4a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  406516:	4b0e      	ldr	r3, [pc, #56]	; (406550 <vTaskStartScheduler+0x70>)
  406518:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
  40651a:	4b0e      	ldr	r3, [pc, #56]	; (406554 <vTaskStartScheduler+0x74>)
  40651c:	2201      	movs	r2, #1
  40651e:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
  406520:	4b0d      	ldr	r3, [pc, #52]	; (406558 <vTaskStartScheduler+0x78>)
  406522:	2200      	movs	r2, #0
  406524:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  406526:	4b0d      	ldr	r3, [pc, #52]	; (40655c <vTaskStartScheduler+0x7c>)
  406528:	4798      	blx	r3
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
  40652a:	687b      	ldr	r3, [r7, #4]
  40652c:	2b00      	cmp	r3, #0
  40652e:	d103      	bne.n	406538 <vTaskStartScheduler+0x58>
  406530:	4b07      	ldr	r3, [pc, #28]	; (406550 <vTaskStartScheduler+0x70>)
  406532:	4798      	blx	r3
  406534:	bf00      	nop
  406536:	e7fd      	b.n	406534 <vTaskStartScheduler+0x54>
}
  406538:	bf00      	nop
  40653a:	370c      	adds	r7, #12
  40653c:	46bd      	mov	sp, r7
  40653e:	bd90      	pop	{r4, r7, pc}
  406540:	0040f910 	.word	0x0040f910
  406544:	00406bbd 	.word	0x00406bbd
  406548:	004062c1 	.word	0x004062c1
  40654c:	00406fed 	.word	0x00406fed
  406550:	00405789 	.word	0x00405789
  406554:	20002e04 	.word	0x20002e04
  406558:	20002df8 	.word	0x20002df8
  40655c:	004056e9 	.word	0x004056e9

00406560 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
  406560:	b480      	push	{r7}
  406562:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  406564:	4b04      	ldr	r3, [pc, #16]	; (406578 <vTaskSuspendAll+0x18>)
  406566:	681b      	ldr	r3, [r3, #0]
  406568:	3301      	adds	r3, #1
  40656a:	4a03      	ldr	r2, [pc, #12]	; (406578 <vTaskSuspendAll+0x18>)
  40656c:	6013      	str	r3, [r2, #0]
}
  40656e:	bf00      	nop
  406570:	46bd      	mov	sp, r7
  406572:	bc80      	pop	{r7}
  406574:	4770      	bx	lr
  406576:	bf00      	nop
  406578:	20002e08 	.word	0x20002e08

0040657c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  40657c:	b590      	push	{r4, r7, lr}
  40657e:	b083      	sub	sp, #12
  406580:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  406582:	2300      	movs	r3, #0
  406584:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  406586:	4b36      	ldr	r3, [pc, #216]	; (406660 <xTaskResumeAll+0xe4>)
  406588:	681b      	ldr	r3, [r3, #0]
  40658a:	2b00      	cmp	r3, #0
  40658c:	d103      	bne.n	406596 <xTaskResumeAll+0x1a>
  40658e:	4b35      	ldr	r3, [pc, #212]	; (406664 <xTaskResumeAll+0xe8>)
  406590:	4798      	blx	r3
  406592:	bf00      	nop
  406594:	e7fd      	b.n	406592 <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  406596:	4b34      	ldr	r3, [pc, #208]	; (406668 <xTaskResumeAll+0xec>)
  406598:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  40659a:	4b31      	ldr	r3, [pc, #196]	; (406660 <xTaskResumeAll+0xe4>)
  40659c:	681b      	ldr	r3, [r3, #0]
  40659e:	3b01      	subs	r3, #1
  4065a0:	4a2f      	ldr	r2, [pc, #188]	; (406660 <xTaskResumeAll+0xe4>)
  4065a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  4065a4:	4b2e      	ldr	r3, [pc, #184]	; (406660 <xTaskResumeAll+0xe4>)
  4065a6:	681b      	ldr	r3, [r3, #0]
  4065a8:	2b00      	cmp	r3, #0
  4065aa:	d152      	bne.n	406652 <xTaskResumeAll+0xd6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
  4065ac:	4b2f      	ldr	r3, [pc, #188]	; (40666c <xTaskResumeAll+0xf0>)
  4065ae:	681b      	ldr	r3, [r3, #0]
  4065b0:	2b00      	cmp	r3, #0
  4065b2:	d04e      	beq.n	406652 <xTaskResumeAll+0xd6>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
  4065b4:	2300      	movs	r3, #0
  4065b6:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  4065b8:	e027      	b.n	40660a <xTaskResumeAll+0x8e>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  4065ba:	4b2d      	ldr	r3, [pc, #180]	; (406670 <xTaskResumeAll+0xf4>)
  4065bc:	68db      	ldr	r3, [r3, #12]
  4065be:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
  4065c0:	f104 0318 	add.w	r3, r4, #24
  4065c4:	4618      	mov	r0, r3
  4065c6:	4b2b      	ldr	r3, [pc, #172]	; (406674 <xTaskResumeAll+0xf8>)
  4065c8:	4798      	blx	r3
					uxListRemove( &( pxTCB->xGenericListItem ) );
  4065ca:	1d23      	adds	r3, r4, #4
  4065cc:	4618      	mov	r0, r3
  4065ce:	4b29      	ldr	r3, [pc, #164]	; (406674 <xTaskResumeAll+0xf8>)
  4065d0:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
  4065d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4065d4:	4b28      	ldr	r3, [pc, #160]	; (406678 <xTaskResumeAll+0xfc>)
  4065d6:	681b      	ldr	r3, [r3, #0]
  4065d8:	429a      	cmp	r2, r3
  4065da:	d902      	bls.n	4065e2 <xTaskResumeAll+0x66>
  4065dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4065de:	4a26      	ldr	r2, [pc, #152]	; (406678 <xTaskResumeAll+0xfc>)
  4065e0:	6013      	str	r3, [r2, #0]
  4065e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4065e4:	4613      	mov	r3, r2
  4065e6:	009b      	lsls	r3, r3, #2
  4065e8:	4413      	add	r3, r2
  4065ea:	009b      	lsls	r3, r3, #2
  4065ec:	4a23      	ldr	r2, [pc, #140]	; (40667c <xTaskResumeAll+0x100>)
  4065ee:	4413      	add	r3, r2
  4065f0:	1d22      	adds	r2, r4, #4
  4065f2:	4611      	mov	r1, r2
  4065f4:	4618      	mov	r0, r3
  4065f6:	4b22      	ldr	r3, [pc, #136]	; (406680 <xTaskResumeAll+0x104>)
  4065f8:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4065fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4065fc:	4b21      	ldr	r3, [pc, #132]	; (406684 <xTaskResumeAll+0x108>)
  4065fe:	681b      	ldr	r3, [r3, #0]
  406600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406602:	429a      	cmp	r2, r3
  406604:	d301      	bcc.n	40660a <xTaskResumeAll+0x8e>
					{
						xYieldRequired = pdTRUE;
  406606:	2301      	movs	r3, #1
  406608:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  40660a:	4b19      	ldr	r3, [pc, #100]	; (406670 <xTaskResumeAll+0xf4>)
  40660c:	681b      	ldr	r3, [r3, #0]
  40660e:	2b00      	cmp	r3, #0
  406610:	d1d3      	bne.n	4065ba <xTaskResumeAll+0x3e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  406612:	4b1d      	ldr	r3, [pc, #116]	; (406688 <xTaskResumeAll+0x10c>)
  406614:	681b      	ldr	r3, [r3, #0]
  406616:	2b00      	cmp	r3, #0
  406618:	d00d      	beq.n	406636 <xTaskResumeAll+0xba>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  40661a:	e006      	b.n	40662a <xTaskResumeAll+0xae>
					{
						vTaskIncrementTick();
  40661c:	4b1b      	ldr	r3, [pc, #108]	; (40668c <xTaskResumeAll+0x110>)
  40661e:	4798      	blx	r3
						--uxMissedTicks;
  406620:	4b19      	ldr	r3, [pc, #100]	; (406688 <xTaskResumeAll+0x10c>)
  406622:	681b      	ldr	r3, [r3, #0]
  406624:	3b01      	subs	r3, #1
  406626:	4a18      	ldr	r2, [pc, #96]	; (406688 <xTaskResumeAll+0x10c>)
  406628:	6013      	str	r3, [r2, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  40662a:	4b17      	ldr	r3, [pc, #92]	; (406688 <xTaskResumeAll+0x10c>)
  40662c:	681b      	ldr	r3, [r3, #0]
  40662e:	2b00      	cmp	r3, #0
  406630:	d1f4      	bne.n	40661c <xTaskResumeAll+0xa0>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
  406632:	2301      	movs	r3, #1
  406634:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  406636:	683b      	ldr	r3, [r7, #0]
  406638:	2b01      	cmp	r3, #1
  40663a:	d003      	beq.n	406644 <xTaskResumeAll+0xc8>
  40663c:	4b14      	ldr	r3, [pc, #80]	; (406690 <xTaskResumeAll+0x114>)
  40663e:	681b      	ldr	r3, [r3, #0]
  406640:	2b01      	cmp	r3, #1
  406642:	d106      	bne.n	406652 <xTaskResumeAll+0xd6>
				{
					xAlreadyYielded = pdTRUE;
  406644:	2301      	movs	r3, #1
  406646:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
  406648:	4b11      	ldr	r3, [pc, #68]	; (406690 <xTaskResumeAll+0x114>)
  40664a:	2200      	movs	r2, #0
  40664c:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  40664e:	4b11      	ldr	r3, [pc, #68]	; (406694 <xTaskResumeAll+0x118>)
  406650:	4798      	blx	r3
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  406652:	4b11      	ldr	r3, [pc, #68]	; (406698 <xTaskResumeAll+0x11c>)
  406654:	4798      	blx	r3

	return xAlreadyYielded;
  406656:	687b      	ldr	r3, [r7, #4]
}
  406658:	4618      	mov	r0, r3
  40665a:	370c      	adds	r7, #12
  40665c:	46bd      	mov	sp, r7
  40665e:	bd90      	pop	{r4, r7, pc}
  406660:	20002e08 	.word	0x20002e08
  406664:	00405789 	.word	0x00405789
  406668:	00405741 	.word	0x00405741
  40666c:	20002df4 	.word	0x20002df4
  406670:	20002db4 	.word	0x20002db4
  406674:	00405565 	.word	0x00405565
  406678:	20002e00 	.word	0x20002e00
  40667c:	20002d20 	.word	0x20002d20
  406680:	004054a5 	.word	0x004054a5
  406684:	20002d1c 	.word	0x20002d1c
  406688:	20002e0c 	.word	0x20002e0c
  40668c:	004066c9 	.word	0x004066c9
  406690:	20002e10 	.word	0x20002e10
  406694:	00405729 	.word	0x00405729
  406698:	00405761 	.word	0x00405761

0040669c <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
  40669c:	b580      	push	{r7, lr}
  40669e:	b082      	sub	sp, #8
  4066a0:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
  4066a2:	4b06      	ldr	r3, [pc, #24]	; (4066bc <xTaskGetTickCount+0x20>)
  4066a4:	4798      	blx	r3
	{
		xTicks = xTickCount;
  4066a6:	4b06      	ldr	r3, [pc, #24]	; (4066c0 <xTaskGetTickCount+0x24>)
  4066a8:	681b      	ldr	r3, [r3, #0]
  4066aa:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
  4066ac:	4b05      	ldr	r3, [pc, #20]	; (4066c4 <xTaskGetTickCount+0x28>)
  4066ae:	4798      	blx	r3

	return xTicks;
  4066b0:	687b      	ldr	r3, [r7, #4]
}
  4066b2:	4618      	mov	r0, r3
  4066b4:	3708      	adds	r7, #8
  4066b6:	46bd      	mov	sp, r7
  4066b8:	bd80      	pop	{r7, pc}
  4066ba:	bf00      	nop
  4066bc:	00405741 	.word	0x00405741
  4066c0:	20002df8 	.word	0x20002df8
  4066c4:	00405761 	.word	0x00405761

004066c8 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
  4066c8:	b580      	push	{r7, lr}
  4066ca:	b084      	sub	sp, #16
  4066cc:	af00      	add	r7, sp, #0

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  4066ce:	4b45      	ldr	r3, [pc, #276]	; (4067e4 <vTaskIncrementTick+0x11c>)
  4066d0:	681b      	ldr	r3, [r3, #0]
  4066d2:	2b00      	cmp	r3, #0
  4066d4:	d17b      	bne.n	4067ce <vTaskIncrementTick+0x106>
	{
		++xTickCount;
  4066d6:	4b44      	ldr	r3, [pc, #272]	; (4067e8 <vTaskIncrementTick+0x120>)
  4066d8:	681b      	ldr	r3, [r3, #0]
  4066da:	3301      	adds	r3, #1
  4066dc:	4a42      	ldr	r2, [pc, #264]	; (4067e8 <vTaskIncrementTick+0x120>)
  4066de:	6013      	str	r3, [r2, #0]
		if( xTickCount == ( portTickType ) 0U )
  4066e0:	4b41      	ldr	r3, [pc, #260]	; (4067e8 <vTaskIncrementTick+0x120>)
  4066e2:	681b      	ldr	r3, [r3, #0]
  4066e4:	2b00      	cmp	r3, #0
  4066e6:	d12a      	bne.n	40673e <vTaskIncrementTick+0x76>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  4066e8:	4b40      	ldr	r3, [pc, #256]	; (4067ec <vTaskIncrementTick+0x124>)
  4066ea:	681b      	ldr	r3, [r3, #0]
  4066ec:	681b      	ldr	r3, [r3, #0]
  4066ee:	2b00      	cmp	r3, #0
  4066f0:	d003      	beq.n	4066fa <vTaskIncrementTick+0x32>
  4066f2:	4b3f      	ldr	r3, [pc, #252]	; (4067f0 <vTaskIncrementTick+0x128>)
  4066f4:	4798      	blx	r3
  4066f6:	bf00      	nop
  4066f8:	e7fd      	b.n	4066f6 <vTaskIncrementTick+0x2e>

			pxTemp = pxDelayedTaskList;
  4066fa:	4b3c      	ldr	r3, [pc, #240]	; (4067ec <vTaskIncrementTick+0x124>)
  4066fc:	681b      	ldr	r3, [r3, #0]
  4066fe:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  406700:	4b3c      	ldr	r3, [pc, #240]	; (4067f4 <vTaskIncrementTick+0x12c>)
  406702:	681b      	ldr	r3, [r3, #0]
  406704:	4a39      	ldr	r2, [pc, #228]	; (4067ec <vTaskIncrementTick+0x124>)
  406706:	6013      	str	r3, [r2, #0]
			pxOverflowDelayedTaskList = pxTemp;
  406708:	4a3a      	ldr	r2, [pc, #232]	; (4067f4 <vTaskIncrementTick+0x12c>)
  40670a:	68fb      	ldr	r3, [r7, #12]
  40670c:	6013      	str	r3, [r2, #0]
			xNumOfOverflows++;
  40670e:	4b3a      	ldr	r3, [pc, #232]	; (4067f8 <vTaskIncrementTick+0x130>)
  406710:	681b      	ldr	r3, [r3, #0]
  406712:	3301      	adds	r3, #1
  406714:	4a38      	ldr	r2, [pc, #224]	; (4067f8 <vTaskIncrementTick+0x130>)
  406716:	6013      	str	r3, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  406718:	4b34      	ldr	r3, [pc, #208]	; (4067ec <vTaskIncrementTick+0x124>)
  40671a:	681b      	ldr	r3, [r3, #0]
  40671c:	681b      	ldr	r3, [r3, #0]
  40671e:	2b00      	cmp	r3, #0
  406720:	d104      	bne.n	40672c <vTaskIncrementTick+0x64>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  406722:	4b36      	ldr	r3, [pc, #216]	; (4067fc <vTaskIncrementTick+0x134>)
  406724:	f04f 32ff 	mov.w	r2, #4294967295
  406728:	601a      	str	r2, [r3, #0]
  40672a:	e008      	b.n	40673e <vTaskIncrementTick+0x76>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  40672c:	4b2f      	ldr	r3, [pc, #188]	; (4067ec <vTaskIncrementTick+0x124>)
  40672e:	681b      	ldr	r3, [r3, #0]
  406730:	68db      	ldr	r3, [r3, #12]
  406732:	68db      	ldr	r3, [r3, #12]
  406734:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  406736:	68bb      	ldr	r3, [r7, #8]
  406738:	685b      	ldr	r3, [r3, #4]
  40673a:	4a30      	ldr	r2, [pc, #192]	; (4067fc <vTaskIncrementTick+0x134>)
  40673c:	6013      	str	r3, [r2, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  40673e:	4b2a      	ldr	r3, [pc, #168]	; (4067e8 <vTaskIncrementTick+0x120>)
  406740:	681a      	ldr	r2, [r3, #0]
  406742:	4b2e      	ldr	r3, [pc, #184]	; (4067fc <vTaskIncrementTick+0x134>)
  406744:	681b      	ldr	r3, [r3, #0]
  406746:	429a      	cmp	r2, r3
  406748:	d347      	bcc.n	4067da <vTaskIncrementTick+0x112>
  40674a:	4b28      	ldr	r3, [pc, #160]	; (4067ec <vTaskIncrementTick+0x124>)
  40674c:	681b      	ldr	r3, [r3, #0]
  40674e:	681b      	ldr	r3, [r3, #0]
  406750:	2b00      	cmp	r3, #0
  406752:	d104      	bne.n	40675e <vTaskIncrementTick+0x96>
  406754:	4b29      	ldr	r3, [pc, #164]	; (4067fc <vTaskIncrementTick+0x134>)
  406756:	f04f 32ff 	mov.w	r2, #4294967295
  40675a:	601a      	str	r2, [r3, #0]
  40675c:	e03d      	b.n	4067da <vTaskIncrementTick+0x112>
  40675e:	4b23      	ldr	r3, [pc, #140]	; (4067ec <vTaskIncrementTick+0x124>)
  406760:	681b      	ldr	r3, [r3, #0]
  406762:	68db      	ldr	r3, [r3, #12]
  406764:	68db      	ldr	r3, [r3, #12]
  406766:	60bb      	str	r3, [r7, #8]
  406768:	68bb      	ldr	r3, [r7, #8]
  40676a:	685b      	ldr	r3, [r3, #4]
  40676c:	607b      	str	r3, [r7, #4]
  40676e:	4b1e      	ldr	r3, [pc, #120]	; (4067e8 <vTaskIncrementTick+0x120>)
  406770:	681a      	ldr	r2, [r3, #0]
  406772:	687b      	ldr	r3, [r7, #4]
  406774:	429a      	cmp	r2, r3
  406776:	d203      	bcs.n	406780 <vTaskIncrementTick+0xb8>
  406778:	4a20      	ldr	r2, [pc, #128]	; (4067fc <vTaskIncrementTick+0x134>)
  40677a:	687b      	ldr	r3, [r7, #4]
  40677c:	6013      	str	r3, [r2, #0]
  40677e:	e02c      	b.n	4067da <vTaskIncrementTick+0x112>
  406780:	68bb      	ldr	r3, [r7, #8]
  406782:	3304      	adds	r3, #4
  406784:	4618      	mov	r0, r3
  406786:	4b1e      	ldr	r3, [pc, #120]	; (406800 <vTaskIncrementTick+0x138>)
  406788:	4798      	blx	r3
  40678a:	68bb      	ldr	r3, [r7, #8]
  40678c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40678e:	2b00      	cmp	r3, #0
  406790:	d004      	beq.n	40679c <vTaskIncrementTick+0xd4>
  406792:	68bb      	ldr	r3, [r7, #8]
  406794:	3318      	adds	r3, #24
  406796:	4618      	mov	r0, r3
  406798:	4b19      	ldr	r3, [pc, #100]	; (406800 <vTaskIncrementTick+0x138>)
  40679a:	4798      	blx	r3
  40679c:	68bb      	ldr	r3, [r7, #8]
  40679e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4067a0:	4b18      	ldr	r3, [pc, #96]	; (406804 <vTaskIncrementTick+0x13c>)
  4067a2:	681b      	ldr	r3, [r3, #0]
  4067a4:	429a      	cmp	r2, r3
  4067a6:	d903      	bls.n	4067b0 <vTaskIncrementTick+0xe8>
  4067a8:	68bb      	ldr	r3, [r7, #8]
  4067aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4067ac:	4a15      	ldr	r2, [pc, #84]	; (406804 <vTaskIncrementTick+0x13c>)
  4067ae:	6013      	str	r3, [r2, #0]
  4067b0:	68bb      	ldr	r3, [r7, #8]
  4067b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4067b4:	4613      	mov	r3, r2
  4067b6:	009b      	lsls	r3, r3, #2
  4067b8:	4413      	add	r3, r2
  4067ba:	009b      	lsls	r3, r3, #2
  4067bc:	4a12      	ldr	r2, [pc, #72]	; (406808 <vTaskIncrementTick+0x140>)
  4067be:	441a      	add	r2, r3
  4067c0:	68bb      	ldr	r3, [r7, #8]
  4067c2:	3304      	adds	r3, #4
  4067c4:	4619      	mov	r1, r3
  4067c6:	4610      	mov	r0, r2
  4067c8:	4b10      	ldr	r3, [pc, #64]	; (40680c <vTaskIncrementTick+0x144>)
  4067ca:	4798      	blx	r3
  4067cc:	e7bd      	b.n	40674a <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
  4067ce:	4b10      	ldr	r3, [pc, #64]	; (406810 <vTaskIncrementTick+0x148>)
  4067d0:	681b      	ldr	r3, [r3, #0]
  4067d2:	3301      	adds	r3, #1
  4067d4:	4a0e      	ldr	r2, [pc, #56]	; (406810 <vTaskIncrementTick+0x148>)
  4067d6:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
  4067d8:	e7ff      	b.n	4067da <vTaskIncrementTick+0x112>
  4067da:	bf00      	nop
  4067dc:	3710      	adds	r7, #16
  4067de:	46bd      	mov	sp, r7
  4067e0:	bd80      	pop	{r7, pc}
  4067e2:	bf00      	nop
  4067e4:	20002e08 	.word	0x20002e08
  4067e8:	20002df8 	.word	0x20002df8
  4067ec:	20002dac 	.word	0x20002dac
  4067f0:	00405789 	.word	0x00405789
  4067f4:	20002db0 	.word	0x20002db0
  4067f8:	20002e14 	.word	0x20002e14
  4067fc:	20000124 	.word	0x20000124
  406800:	00405565 	.word	0x00405565
  406804:	20002e00 	.word	0x20002e00
  406808:	20002d20 	.word	0x20002d20
  40680c:	004054a5 	.word	0x004054a5
  406810:	20002e0c 	.word	0x20002e0c

00406814 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  406814:	b580      	push	{r7, lr}
  406816:	b082      	sub	sp, #8
  406818:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  40681a:	4b34      	ldr	r3, [pc, #208]	; (4068ec <vTaskSwitchContext+0xd8>)
  40681c:	681b      	ldr	r3, [r3, #0]
  40681e:	2b00      	cmp	r3, #0
  406820:	d003      	beq.n	40682a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  406822:	4b33      	ldr	r3, [pc, #204]	; (4068f0 <vTaskSwitchContext+0xdc>)
  406824:	2201      	movs	r2, #1
  406826:	601a      	str	r2, [r3, #0]

		taskSELECT_HIGHEST_PRIORITY_TASK();

		traceTASK_SWITCHED_IN();
	}
}
  406828:	e05b      	b.n	4068e2 <vTaskSwitchContext+0xce>
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
				ulTaskSwitchedInTime = ulTempCounter;
		}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
  40682a:	4b32      	ldr	r3, [pc, #200]	; (4068f4 <vTaskSwitchContext+0xe0>)
  40682c:	681b      	ldr	r3, [r3, #0]
  40682e:	681a      	ldr	r2, [r3, #0]
  406830:	4b30      	ldr	r3, [pc, #192]	; (4068f4 <vTaskSwitchContext+0xe0>)
  406832:	681b      	ldr	r3, [r3, #0]
  406834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406836:	429a      	cmp	r2, r3
  406838:	d808      	bhi.n	40684c <vTaskSwitchContext+0x38>
  40683a:	4b2e      	ldr	r3, [pc, #184]	; (4068f4 <vTaskSwitchContext+0xe0>)
  40683c:	681a      	ldr	r2, [r3, #0]
  40683e:	4b2d      	ldr	r3, [pc, #180]	; (4068f4 <vTaskSwitchContext+0xe0>)
  406840:	681b      	ldr	r3, [r3, #0]
  406842:	3334      	adds	r3, #52	; 0x34
  406844:	4619      	mov	r1, r3
  406846:	4610      	mov	r0, r2
  406848:	4b2b      	ldr	r3, [pc, #172]	; (4068f8 <vTaskSwitchContext+0xe4>)
  40684a:	4798      	blx	r3
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
  40684c:	4b29      	ldr	r3, [pc, #164]	; (4068f4 <vTaskSwitchContext+0xe0>)
  40684e:	681b      	ldr	r3, [r3, #0]
  406850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406852:	2214      	movs	r2, #20
  406854:	4929      	ldr	r1, [pc, #164]	; (4068fc <vTaskSwitchContext+0xe8>)
  406856:	4618      	mov	r0, r3
  406858:	4b29      	ldr	r3, [pc, #164]	; (406900 <vTaskSwitchContext+0xec>)
  40685a:	4798      	blx	r3
  40685c:	4603      	mov	r3, r0
  40685e:	2b00      	cmp	r3, #0
  406860:	d016      	beq.n	406890 <vTaskSwitchContext+0x7c>
  406862:	4b24      	ldr	r3, [pc, #144]	; (4068f4 <vTaskSwitchContext+0xe0>)
  406864:	681a      	ldr	r2, [r3, #0]
  406866:	4b23      	ldr	r3, [pc, #140]	; (4068f4 <vTaskSwitchContext+0xe0>)
  406868:	681b      	ldr	r3, [r3, #0]
  40686a:	3334      	adds	r3, #52	; 0x34
  40686c:	4619      	mov	r1, r3
  40686e:	4610      	mov	r0, r2
  406870:	4b21      	ldr	r3, [pc, #132]	; (4068f8 <vTaskSwitchContext+0xe4>)
  406872:	4798      	blx	r3

		taskSELECT_HIGHEST_PRIORITY_TASK();
  406874:	e00c      	b.n	406890 <vTaskSwitchContext+0x7c>
  406876:	4b23      	ldr	r3, [pc, #140]	; (406904 <vTaskSwitchContext+0xf0>)
  406878:	681b      	ldr	r3, [r3, #0]
  40687a:	2b00      	cmp	r3, #0
  40687c:	d103      	bne.n	406886 <vTaskSwitchContext+0x72>
  40687e:	4b22      	ldr	r3, [pc, #136]	; (406908 <vTaskSwitchContext+0xf4>)
  406880:	4798      	blx	r3
  406882:	bf00      	nop
  406884:	e7fd      	b.n	406882 <vTaskSwitchContext+0x6e>
  406886:	4b1f      	ldr	r3, [pc, #124]	; (406904 <vTaskSwitchContext+0xf0>)
  406888:	681b      	ldr	r3, [r3, #0]
  40688a:	3b01      	subs	r3, #1
  40688c:	4a1d      	ldr	r2, [pc, #116]	; (406904 <vTaskSwitchContext+0xf0>)
  40688e:	6013      	str	r3, [r2, #0]
  406890:	4b1c      	ldr	r3, [pc, #112]	; (406904 <vTaskSwitchContext+0xf0>)
  406892:	681a      	ldr	r2, [r3, #0]
  406894:	491d      	ldr	r1, [pc, #116]	; (40690c <vTaskSwitchContext+0xf8>)
  406896:	4613      	mov	r3, r2
  406898:	009b      	lsls	r3, r3, #2
  40689a:	4413      	add	r3, r2
  40689c:	009b      	lsls	r3, r3, #2
  40689e:	440b      	add	r3, r1
  4068a0:	681b      	ldr	r3, [r3, #0]
  4068a2:	2b00      	cmp	r3, #0
  4068a4:	d0e7      	beq.n	406876 <vTaskSwitchContext+0x62>
  4068a6:	4b17      	ldr	r3, [pc, #92]	; (406904 <vTaskSwitchContext+0xf0>)
  4068a8:	681a      	ldr	r2, [r3, #0]
  4068aa:	4613      	mov	r3, r2
  4068ac:	009b      	lsls	r3, r3, #2
  4068ae:	4413      	add	r3, r2
  4068b0:	009b      	lsls	r3, r3, #2
  4068b2:	4a16      	ldr	r2, [pc, #88]	; (40690c <vTaskSwitchContext+0xf8>)
  4068b4:	4413      	add	r3, r2
  4068b6:	607b      	str	r3, [r7, #4]
  4068b8:	687b      	ldr	r3, [r7, #4]
  4068ba:	685b      	ldr	r3, [r3, #4]
  4068bc:	685a      	ldr	r2, [r3, #4]
  4068be:	687b      	ldr	r3, [r7, #4]
  4068c0:	605a      	str	r2, [r3, #4]
  4068c2:	687b      	ldr	r3, [r7, #4]
  4068c4:	685a      	ldr	r2, [r3, #4]
  4068c6:	687b      	ldr	r3, [r7, #4]
  4068c8:	3308      	adds	r3, #8
  4068ca:	429a      	cmp	r2, r3
  4068cc:	d104      	bne.n	4068d8 <vTaskSwitchContext+0xc4>
  4068ce:	687b      	ldr	r3, [r7, #4]
  4068d0:	685b      	ldr	r3, [r3, #4]
  4068d2:	685a      	ldr	r2, [r3, #4]
  4068d4:	687b      	ldr	r3, [r7, #4]
  4068d6:	605a      	str	r2, [r3, #4]
  4068d8:	687b      	ldr	r3, [r7, #4]
  4068da:	685b      	ldr	r3, [r3, #4]
  4068dc:	68db      	ldr	r3, [r3, #12]
  4068de:	4a05      	ldr	r2, [pc, #20]	; (4068f4 <vTaskSwitchContext+0xe0>)
  4068e0:	6013      	str	r3, [r2, #0]

		traceTASK_SWITCHED_IN();
	}
}
  4068e2:	bf00      	nop
  4068e4:	3708      	adds	r7, #8
  4068e6:	46bd      	mov	sp, r7
  4068e8:	bd80      	pop	{r7, pc}
  4068ea:	bf00      	nop
  4068ec:	20002e08 	.word	0x20002e08
  4068f0:	20002e10 	.word	0x20002e10
  4068f4:	20002d1c 	.word	0x20002d1c
  4068f8:	00407b35 	.word	0x00407b35
  4068fc:	0040f918 	.word	0x0040f918
  406900:	0040b8a5 	.word	0x0040b8a5
  406904:	20002e00 	.word	0x20002e00
  406908:	00405789 	.word	0x00405789
  40690c:	20002d20 	.word	0x20002d20

00406910 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  406910:	b580      	push	{r7, lr}
  406912:	b084      	sub	sp, #16
  406914:	af00      	add	r7, sp, #0
  406916:	6078      	str	r0, [r7, #4]
  406918:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
  40691a:	687b      	ldr	r3, [r7, #4]
  40691c:	2b00      	cmp	r3, #0
  40691e:	d103      	bne.n	406928 <vTaskPlaceOnEventList+0x18>
  406920:	4b14      	ldr	r3, [pc, #80]	; (406974 <vTaskPlaceOnEventList+0x64>)
  406922:	4798      	blx	r3
  406924:	bf00      	nop
  406926:	e7fd      	b.n	406924 <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  406928:	4b13      	ldr	r3, [pc, #76]	; (406978 <vTaskPlaceOnEventList+0x68>)
  40692a:	681b      	ldr	r3, [r3, #0]
  40692c:	3318      	adds	r3, #24
  40692e:	4619      	mov	r1, r3
  406930:	6878      	ldr	r0, [r7, #4]
  406932:	4b12      	ldr	r3, [pc, #72]	; (40697c <vTaskPlaceOnEventList+0x6c>)
  406934:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  406936:	4b10      	ldr	r3, [pc, #64]	; (406978 <vTaskPlaceOnEventList+0x68>)
  406938:	681b      	ldr	r3, [r3, #0]
  40693a:	3304      	adds	r3, #4
  40693c:	4618      	mov	r0, r3
  40693e:	4b10      	ldr	r3, [pc, #64]	; (406980 <vTaskPlaceOnEventList+0x70>)
  406940:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  406942:	683b      	ldr	r3, [r7, #0]
  406944:	f1b3 3fff 	cmp.w	r3, #4294967295
  406948:	d107      	bne.n	40695a <vTaskPlaceOnEventList+0x4a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  40694a:	4b0b      	ldr	r3, [pc, #44]	; (406978 <vTaskPlaceOnEventList+0x68>)
  40694c:	681b      	ldr	r3, [r3, #0]
  40694e:	3304      	adds	r3, #4
  406950:	4619      	mov	r1, r3
  406952:	480c      	ldr	r0, [pc, #48]	; (406984 <vTaskPlaceOnEventList+0x74>)
  406954:	4b0c      	ldr	r3, [pc, #48]	; (406988 <vTaskPlaceOnEventList+0x78>)
  406956:	4798      	blx	r3
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
  406958:	e007      	b.n	40696a <vTaskPlaceOnEventList+0x5a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
  40695a:	4b0c      	ldr	r3, [pc, #48]	; (40698c <vTaskPlaceOnEventList+0x7c>)
  40695c:	681a      	ldr	r2, [r3, #0]
  40695e:	683b      	ldr	r3, [r7, #0]
  406960:	4413      	add	r3, r2
  406962:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  406964:	68f8      	ldr	r0, [r7, #12]
  406966:	4b0a      	ldr	r3, [pc, #40]	; (406990 <vTaskPlaceOnEventList+0x80>)
  406968:	4798      	blx	r3
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
  40696a:	bf00      	nop
  40696c:	3710      	adds	r7, #16
  40696e:	46bd      	mov	sp, r7
  406970:	bd80      	pop	{r7, pc}
  406972:	bf00      	nop
  406974:	00405789 	.word	0x00405789
  406978:	20002d1c 	.word	0x20002d1c
  40697c:	004054f5 	.word	0x004054f5
  406980:	00405565 	.word	0x00405565
  406984:	20002de0 	.word	0x20002de0
  406988:	004054a5 	.word	0x004054a5
  40698c:	20002df8 	.word	0x20002df8
  406990:	00406d59 	.word	0x00406d59

00406994 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
  406994:	b580      	push	{r7, lr}
  406996:	b084      	sub	sp, #16
  406998:	af00      	add	r7, sp, #0
  40699a:	6078      	str	r0, [r7, #4]
  40699c:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
  40699e:	687b      	ldr	r3, [r7, #4]
  4069a0:	2b00      	cmp	r3, #0
  4069a2:	d103      	bne.n	4069ac <vTaskPlaceOnEventListRestricted+0x18>
  4069a4:	4b0e      	ldr	r3, [pc, #56]	; (4069e0 <vTaskPlaceOnEventListRestricted+0x4c>)
  4069a6:	4798      	blx	r3
  4069a8:	bf00      	nop
  4069aa:	e7fd      	b.n	4069a8 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  4069ac:	4b0d      	ldr	r3, [pc, #52]	; (4069e4 <vTaskPlaceOnEventListRestricted+0x50>)
  4069ae:	681b      	ldr	r3, [r3, #0]
  4069b0:	3318      	adds	r3, #24
  4069b2:	4619      	mov	r1, r3
  4069b4:	6878      	ldr	r0, [r7, #4]
  4069b6:	4b0c      	ldr	r3, [pc, #48]	; (4069e8 <vTaskPlaceOnEventListRestricted+0x54>)
  4069b8:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  4069ba:	4b0a      	ldr	r3, [pc, #40]	; (4069e4 <vTaskPlaceOnEventListRestricted+0x50>)
  4069bc:	681b      	ldr	r3, [r3, #0]
  4069be:	3304      	adds	r3, #4
  4069c0:	4618      	mov	r0, r3
  4069c2:	4b0a      	ldr	r3, [pc, #40]	; (4069ec <vTaskPlaceOnEventListRestricted+0x58>)
  4069c4:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
  4069c6:	4b0a      	ldr	r3, [pc, #40]	; (4069f0 <vTaskPlaceOnEventListRestricted+0x5c>)
  4069c8:	681a      	ldr	r2, [r3, #0]
  4069ca:	683b      	ldr	r3, [r7, #0]
  4069cc:	4413      	add	r3, r2
  4069ce:	60fb      	str	r3, [r7, #12]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  4069d0:	68f8      	ldr	r0, [r7, #12]
  4069d2:	4b08      	ldr	r3, [pc, #32]	; (4069f4 <vTaskPlaceOnEventListRestricted+0x60>)
  4069d4:	4798      	blx	r3
	}
  4069d6:	bf00      	nop
  4069d8:	3710      	adds	r7, #16
  4069da:	46bd      	mov	sp, r7
  4069dc:	bd80      	pop	{r7, pc}
  4069de:	bf00      	nop
  4069e0:	00405789 	.word	0x00405789
  4069e4:	20002d1c 	.word	0x20002d1c
  4069e8:	004054a5 	.word	0x004054a5
  4069ec:	00405565 	.word	0x00405565
  4069f0:	20002df8 	.word	0x20002df8
  4069f4:	00406d59 	.word	0x00406d59

004069f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  4069f8:	b580      	push	{r7, lr}
  4069fa:	b084      	sub	sp, #16
  4069fc:	af00      	add	r7, sp, #0
  4069fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  406a00:	687b      	ldr	r3, [r7, #4]
  406a02:	68db      	ldr	r3, [r3, #12]
  406a04:	68db      	ldr	r3, [r3, #12]
  406a06:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
  406a08:	68bb      	ldr	r3, [r7, #8]
  406a0a:	2b00      	cmp	r3, #0
  406a0c:	d103      	bne.n	406a16 <xTaskRemoveFromEventList+0x1e>
  406a0e:	4b21      	ldr	r3, [pc, #132]	; (406a94 <xTaskRemoveFromEventList+0x9c>)
  406a10:	4798      	blx	r3
  406a12:	bf00      	nop
  406a14:	e7fd      	b.n	406a12 <xTaskRemoveFromEventList+0x1a>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  406a16:	68bb      	ldr	r3, [r7, #8]
  406a18:	3318      	adds	r3, #24
  406a1a:	4618      	mov	r0, r3
  406a1c:	4b1e      	ldr	r3, [pc, #120]	; (406a98 <xTaskRemoveFromEventList+0xa0>)
  406a1e:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  406a20:	4b1e      	ldr	r3, [pc, #120]	; (406a9c <xTaskRemoveFromEventList+0xa4>)
  406a22:	681b      	ldr	r3, [r3, #0]
  406a24:	2b00      	cmp	r3, #0
  406a26:	d11d      	bne.n	406a64 <xTaskRemoveFromEventList+0x6c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  406a28:	68bb      	ldr	r3, [r7, #8]
  406a2a:	3304      	adds	r3, #4
  406a2c:	4618      	mov	r0, r3
  406a2e:	4b1a      	ldr	r3, [pc, #104]	; (406a98 <xTaskRemoveFromEventList+0xa0>)
  406a30:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  406a32:	68bb      	ldr	r3, [r7, #8]
  406a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406a36:	4b1a      	ldr	r3, [pc, #104]	; (406aa0 <xTaskRemoveFromEventList+0xa8>)
  406a38:	681b      	ldr	r3, [r3, #0]
  406a3a:	429a      	cmp	r2, r3
  406a3c:	d903      	bls.n	406a46 <xTaskRemoveFromEventList+0x4e>
  406a3e:	68bb      	ldr	r3, [r7, #8]
  406a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406a42:	4a17      	ldr	r2, [pc, #92]	; (406aa0 <xTaskRemoveFromEventList+0xa8>)
  406a44:	6013      	str	r3, [r2, #0]
  406a46:	68bb      	ldr	r3, [r7, #8]
  406a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406a4a:	4613      	mov	r3, r2
  406a4c:	009b      	lsls	r3, r3, #2
  406a4e:	4413      	add	r3, r2
  406a50:	009b      	lsls	r3, r3, #2
  406a52:	4a14      	ldr	r2, [pc, #80]	; (406aa4 <xTaskRemoveFromEventList+0xac>)
  406a54:	441a      	add	r2, r3
  406a56:	68bb      	ldr	r3, [r7, #8]
  406a58:	3304      	adds	r3, #4
  406a5a:	4619      	mov	r1, r3
  406a5c:	4610      	mov	r0, r2
  406a5e:	4b12      	ldr	r3, [pc, #72]	; (406aa8 <xTaskRemoveFromEventList+0xb0>)
  406a60:	4798      	blx	r3
  406a62:	e005      	b.n	406a70 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  406a64:	68bb      	ldr	r3, [r7, #8]
  406a66:	3318      	adds	r3, #24
  406a68:	4619      	mov	r1, r3
  406a6a:	4810      	ldr	r0, [pc, #64]	; (406aac <xTaskRemoveFromEventList+0xb4>)
  406a6c:	4b0e      	ldr	r3, [pc, #56]	; (406aa8 <xTaskRemoveFromEventList+0xb0>)
  406a6e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  406a70:	68bb      	ldr	r3, [r7, #8]
  406a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406a74:	4b0e      	ldr	r3, [pc, #56]	; (406ab0 <xTaskRemoveFromEventList+0xb8>)
  406a76:	681b      	ldr	r3, [r3, #0]
  406a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406a7a:	429a      	cmp	r2, r3
  406a7c:	d302      	bcc.n	406a84 <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
  406a7e:	2301      	movs	r3, #1
  406a80:	60fb      	str	r3, [r7, #12]
  406a82:	e001      	b.n	406a88 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
  406a84:	2300      	movs	r3, #0
  406a86:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
  406a88:	68fb      	ldr	r3, [r7, #12]
}
  406a8a:	4618      	mov	r0, r3
  406a8c:	3710      	adds	r7, #16
  406a8e:	46bd      	mov	sp, r7
  406a90:	bd80      	pop	{r7, pc}
  406a92:	bf00      	nop
  406a94:	00405789 	.word	0x00405789
  406a98:	00405565 	.word	0x00405565
  406a9c:	20002e08 	.word	0x20002e08
  406aa0:	20002e00 	.word	0x20002e00
  406aa4:	20002d20 	.word	0x20002d20
  406aa8:	004054a5 	.word	0x004054a5
  406aac:	20002db4 	.word	0x20002db4
  406ab0:	20002d1c 	.word	0x20002d1c

00406ab4 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  406ab4:	b580      	push	{r7, lr}
  406ab6:	b082      	sub	sp, #8
  406ab8:	af00      	add	r7, sp, #0
  406aba:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
  406abc:	687b      	ldr	r3, [r7, #4]
  406abe:	2b00      	cmp	r3, #0
  406ac0:	d103      	bne.n	406aca <vTaskSetTimeOutState+0x16>
  406ac2:	4b08      	ldr	r3, [pc, #32]	; (406ae4 <vTaskSetTimeOutState+0x30>)
  406ac4:	4798      	blx	r3
  406ac6:	bf00      	nop
  406ac8:	e7fd      	b.n	406ac6 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  406aca:	4b07      	ldr	r3, [pc, #28]	; (406ae8 <vTaskSetTimeOutState+0x34>)
  406acc:	681a      	ldr	r2, [r3, #0]
  406ace:	687b      	ldr	r3, [r7, #4]
  406ad0:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  406ad2:	4b06      	ldr	r3, [pc, #24]	; (406aec <vTaskSetTimeOutState+0x38>)
  406ad4:	681a      	ldr	r2, [r3, #0]
  406ad6:	687b      	ldr	r3, [r7, #4]
  406ad8:	605a      	str	r2, [r3, #4]
}
  406ada:	bf00      	nop
  406adc:	3708      	adds	r7, #8
  406ade:	46bd      	mov	sp, r7
  406ae0:	bd80      	pop	{r7, pc}
  406ae2:	bf00      	nop
  406ae4:	00405789 	.word	0x00405789
  406ae8:	20002e14 	.word	0x20002e14
  406aec:	20002df8 	.word	0x20002df8

00406af0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  406af0:	b580      	push	{r7, lr}
  406af2:	b084      	sub	sp, #16
  406af4:	af00      	add	r7, sp, #0
  406af6:	6078      	str	r0, [r7, #4]
  406af8:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
  406afa:	687b      	ldr	r3, [r7, #4]
  406afc:	2b00      	cmp	r3, #0
  406afe:	d103      	bne.n	406b08 <xTaskCheckForTimeOut+0x18>
  406b00:	4b22      	ldr	r3, [pc, #136]	; (406b8c <xTaskCheckForTimeOut+0x9c>)
  406b02:	4798      	blx	r3
  406b04:	bf00      	nop
  406b06:	e7fd      	b.n	406b04 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
  406b08:	683b      	ldr	r3, [r7, #0]
  406b0a:	2b00      	cmp	r3, #0
  406b0c:	d103      	bne.n	406b16 <xTaskCheckForTimeOut+0x26>
  406b0e:	4b1f      	ldr	r3, [pc, #124]	; (406b8c <xTaskCheckForTimeOut+0x9c>)
  406b10:	4798      	blx	r3
  406b12:	bf00      	nop
  406b14:	e7fd      	b.n	406b12 <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
  406b16:	4b1e      	ldr	r3, [pc, #120]	; (406b90 <xTaskCheckForTimeOut+0xa0>)
  406b18:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  406b1a:	683b      	ldr	r3, [r7, #0]
  406b1c:	681b      	ldr	r3, [r3, #0]
  406b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
  406b22:	d102      	bne.n	406b2a <xTaskCheckForTimeOut+0x3a>
			{
				xReturn = pdFALSE;
  406b24:	2300      	movs	r3, #0
  406b26:	60fb      	str	r3, [r7, #12]
  406b28:	e029      	b.n	406b7e <xTaskCheckForTimeOut+0x8e>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  406b2a:	687b      	ldr	r3, [r7, #4]
  406b2c:	681a      	ldr	r2, [r3, #0]
  406b2e:	4b19      	ldr	r3, [pc, #100]	; (406b94 <xTaskCheckForTimeOut+0xa4>)
  406b30:	681b      	ldr	r3, [r3, #0]
  406b32:	429a      	cmp	r2, r3
  406b34:	d008      	beq.n	406b48 <xTaskCheckForTimeOut+0x58>
  406b36:	687b      	ldr	r3, [r7, #4]
  406b38:	685a      	ldr	r2, [r3, #4]
  406b3a:	4b17      	ldr	r3, [pc, #92]	; (406b98 <xTaskCheckForTimeOut+0xa8>)
  406b3c:	681b      	ldr	r3, [r3, #0]
  406b3e:	429a      	cmp	r2, r3
  406b40:	d802      	bhi.n	406b48 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  406b42:	2301      	movs	r3, #1
  406b44:	60fb      	str	r3, [r7, #12]
  406b46:	e01a      	b.n	406b7e <xTaskCheckForTimeOut+0x8e>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  406b48:	4b13      	ldr	r3, [pc, #76]	; (406b98 <xTaskCheckForTimeOut+0xa8>)
  406b4a:	681a      	ldr	r2, [r3, #0]
  406b4c:	687b      	ldr	r3, [r7, #4]
  406b4e:	685b      	ldr	r3, [r3, #4]
  406b50:	1ad2      	subs	r2, r2, r3
  406b52:	683b      	ldr	r3, [r7, #0]
  406b54:	681b      	ldr	r3, [r3, #0]
  406b56:	429a      	cmp	r2, r3
  406b58:	d20f      	bcs.n	406b7a <xTaskCheckForTimeOut+0x8a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  406b5a:	4b0f      	ldr	r3, [pc, #60]	; (406b98 <xTaskCheckForTimeOut+0xa8>)
  406b5c:	681a      	ldr	r2, [r3, #0]
  406b5e:	687b      	ldr	r3, [r7, #4]
  406b60:	685b      	ldr	r3, [r3, #4]
  406b62:	1ad3      	subs	r3, r2, r3
  406b64:	683a      	ldr	r2, [r7, #0]
  406b66:	6812      	ldr	r2, [r2, #0]
  406b68:	1ad2      	subs	r2, r2, r3
  406b6a:	683b      	ldr	r3, [r7, #0]
  406b6c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
  406b6e:	6878      	ldr	r0, [r7, #4]
  406b70:	4b0a      	ldr	r3, [pc, #40]	; (406b9c <xTaskCheckForTimeOut+0xac>)
  406b72:	4798      	blx	r3
			xReturn = pdFALSE;
  406b74:	2300      	movs	r3, #0
  406b76:	60fb      	str	r3, [r7, #12]
  406b78:	e001      	b.n	406b7e <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			xReturn = pdTRUE;
  406b7a:	2301      	movs	r3, #1
  406b7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
  406b7e:	4b08      	ldr	r3, [pc, #32]	; (406ba0 <xTaskCheckForTimeOut+0xb0>)
  406b80:	4798      	blx	r3

	return xReturn;
  406b82:	68fb      	ldr	r3, [r7, #12]
}
  406b84:	4618      	mov	r0, r3
  406b86:	3710      	adds	r7, #16
  406b88:	46bd      	mov	sp, r7
  406b8a:	bd80      	pop	{r7, pc}
  406b8c:	00405789 	.word	0x00405789
  406b90:	00405741 	.word	0x00405741
  406b94:	20002e14 	.word	0x20002e14
  406b98:	20002df8 	.word	0x20002df8
  406b9c:	00406ab5 	.word	0x00406ab5
  406ba0:	00405761 	.word	0x00405761

00406ba4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
  406ba4:	b480      	push	{r7}
  406ba6:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
  406ba8:	4b03      	ldr	r3, [pc, #12]	; (406bb8 <vTaskMissedYield+0x14>)
  406baa:	2201      	movs	r2, #1
  406bac:	601a      	str	r2, [r3, #0]
}
  406bae:	bf00      	nop
  406bb0:	46bd      	mov	sp, r7
  406bb2:	bc80      	pop	{r7}
  406bb4:	4770      	bx	lr
  406bb6:	bf00      	nop
  406bb8:	20002e10 	.word	0x20002e10

00406bbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  406bbc:	b580      	push	{r7, lr}
  406bbe:	b082      	sub	sp, #8
  406bc0:	af00      	add	r7, sp, #0
  406bc2:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
  406bc4:	4b01      	ldr	r3, [pc, #4]	; (406bcc <prvIdleTask+0x10>)
  406bc6:	4798      	blx	r3
				}
				xTaskResumeAll();
			}
		}
		#endif
	}
  406bc8:	e7fc      	b.n	406bc4 <prvIdleTask+0x8>
  406bca:	bf00      	nop
  406bcc:	00406cc9 	.word	0x00406cc9

00406bd0 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
  406bd0:	b580      	push	{r7, lr}
  406bd2:	b084      	sub	sp, #16
  406bd4:	af00      	add	r7, sp, #0
  406bd6:	60f8      	str	r0, [r7, #12]
  406bd8:	60b9      	str	r1, [r7, #8]
  406bda:	607a      	str	r2, [r7, #4]
  406bdc:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  406bde:	68fb      	ldr	r3, [r7, #12]
  406be0:	3334      	adds	r3, #52	; 0x34
  406be2:	220c      	movs	r2, #12
  406be4:	68b9      	ldr	r1, [r7, #8]
  406be6:	4618      	mov	r0, r3
  406be8:	4b14      	ldr	r3, [pc, #80]	; (406c3c <prvInitialiseTCBVariables+0x6c>)
  406bea:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  406bec:	68fb      	ldr	r3, [r7, #12]
  406bee:	2200      	movs	r2, #0
  406bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
  406bf4:	687b      	ldr	r3, [r7, #4]
  406bf6:	2b04      	cmp	r3, #4
  406bf8:	d901      	bls.n	406bfe <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
  406bfa:	2304      	movs	r3, #4
  406bfc:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
  406bfe:	68fb      	ldr	r3, [r7, #12]
  406c00:	687a      	ldr	r2, [r7, #4]
  406c02:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  406c04:	68fb      	ldr	r3, [r7, #12]
  406c06:	687a      	ldr	r2, [r7, #4]
  406c08:	641a      	str	r2, [r3, #64]	; 0x40
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  406c0a:	68fb      	ldr	r3, [r7, #12]
  406c0c:	3304      	adds	r3, #4
  406c0e:	4618      	mov	r0, r3
  406c10:	4b0b      	ldr	r3, [pc, #44]	; (406c40 <prvInitialiseTCBVariables+0x70>)
  406c12:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  406c14:	68fb      	ldr	r3, [r7, #12]
  406c16:	3318      	adds	r3, #24
  406c18:	4618      	mov	r0, r3
  406c1a:	4b09      	ldr	r3, [pc, #36]	; (406c40 <prvInitialiseTCBVariables+0x70>)
  406c1c:	4798      	blx	r3

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  406c1e:	68fb      	ldr	r3, [r7, #12]
  406c20:	68fa      	ldr	r2, [r7, #12]
  406c22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  406c24:	687b      	ldr	r3, [r7, #4]
  406c26:	f1c3 0205 	rsb	r2, r3, #5
  406c2a:	68fb      	ldr	r3, [r7, #12]
  406c2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  406c2e:	68fb      	ldr	r3, [r7, #12]
  406c30:	68fa      	ldr	r2, [r7, #12]
  406c32:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
  406c34:	bf00      	nop
  406c36:	3710      	adds	r7, #16
  406c38:	46bd      	mov	sp, r7
  406c3a:	bd80      	pop	{r7, pc}
  406c3c:	0040bc1d 	.word	0x0040bc1d
  406c40:	0040548d 	.word	0x0040548d

00406c44 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
  406c44:	b580      	push	{r7, lr}
  406c46:	b082      	sub	sp, #8
  406c48:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  406c4a:	2300      	movs	r3, #0
  406c4c:	607b      	str	r3, [r7, #4]
  406c4e:	e00c      	b.n	406c6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  406c50:	687a      	ldr	r2, [r7, #4]
  406c52:	4613      	mov	r3, r2
  406c54:	009b      	lsls	r3, r3, #2
  406c56:	4413      	add	r3, r2
  406c58:	009b      	lsls	r3, r3, #2
  406c5a:	4a12      	ldr	r2, [pc, #72]	; (406ca4 <prvInitialiseTaskLists+0x60>)
  406c5c:	4413      	add	r3, r2
  406c5e:	4618      	mov	r0, r3
  406c60:	4b11      	ldr	r3, [pc, #68]	; (406ca8 <prvInitialiseTaskLists+0x64>)
  406c62:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  406c64:	687b      	ldr	r3, [r7, #4]
  406c66:	3301      	adds	r3, #1
  406c68:	607b      	str	r3, [r7, #4]
  406c6a:	687b      	ldr	r3, [r7, #4]
  406c6c:	2b04      	cmp	r3, #4
  406c6e:	d9ef      	bls.n	406c50 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  406c70:	480e      	ldr	r0, [pc, #56]	; (406cac <prvInitialiseTaskLists+0x68>)
  406c72:	4b0d      	ldr	r3, [pc, #52]	; (406ca8 <prvInitialiseTaskLists+0x64>)
  406c74:	4798      	blx	r3
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  406c76:	480e      	ldr	r0, [pc, #56]	; (406cb0 <prvInitialiseTaskLists+0x6c>)
  406c78:	4b0b      	ldr	r3, [pc, #44]	; (406ca8 <prvInitialiseTaskLists+0x64>)
  406c7a:	4798      	blx	r3
	vListInitialise( ( xList * ) &xPendingReadyList );
  406c7c:	480d      	ldr	r0, [pc, #52]	; (406cb4 <prvInitialiseTaskLists+0x70>)
  406c7e:	4b0a      	ldr	r3, [pc, #40]	; (406ca8 <prvInitialiseTaskLists+0x64>)
  406c80:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  406c82:	480d      	ldr	r0, [pc, #52]	; (406cb8 <prvInitialiseTaskLists+0x74>)
  406c84:	4b08      	ldr	r3, [pc, #32]	; (406ca8 <prvInitialiseTaskLists+0x64>)
  406c86:	4798      	blx	r3
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  406c88:	480c      	ldr	r0, [pc, #48]	; (406cbc <prvInitialiseTaskLists+0x78>)
  406c8a:	4b07      	ldr	r3, [pc, #28]	; (406ca8 <prvInitialiseTaskLists+0x64>)
  406c8c:	4798      	blx	r3
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  406c8e:	4b0c      	ldr	r3, [pc, #48]	; (406cc0 <prvInitialiseTaskLists+0x7c>)
  406c90:	4a06      	ldr	r2, [pc, #24]	; (406cac <prvInitialiseTaskLists+0x68>)
  406c92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  406c94:	4b0b      	ldr	r3, [pc, #44]	; (406cc4 <prvInitialiseTaskLists+0x80>)
  406c96:	4a06      	ldr	r2, [pc, #24]	; (406cb0 <prvInitialiseTaskLists+0x6c>)
  406c98:	601a      	str	r2, [r3, #0]
}
  406c9a:	bf00      	nop
  406c9c:	3708      	adds	r7, #8
  406c9e:	46bd      	mov	sp, r7
  406ca0:	bd80      	pop	{r7, pc}
  406ca2:	bf00      	nop
  406ca4:	20002d20 	.word	0x20002d20
  406ca8:	0040544d 	.word	0x0040544d
  406cac:	20002d84 	.word	0x20002d84
  406cb0:	20002d98 	.word	0x20002d98
  406cb4:	20002db4 	.word	0x20002db4
  406cb8:	20002dc8 	.word	0x20002dc8
  406cbc:	20002de0 	.word	0x20002de0
  406cc0:	20002dac 	.word	0x20002dac
  406cc4:	20002db0 	.word	0x20002db0

00406cc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
  406cc8:	b580      	push	{r7, lr}
  406cca:	b082      	sub	sp, #8
  406ccc:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  406cce:	e028      	b.n	406d22 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
  406cd0:	4b18      	ldr	r3, [pc, #96]	; (406d34 <prvCheckTasksWaitingTermination+0x6c>)
  406cd2:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  406cd4:	4b18      	ldr	r3, [pc, #96]	; (406d38 <prvCheckTasksWaitingTermination+0x70>)
  406cd6:	681b      	ldr	r3, [r3, #0]
  406cd8:	2b00      	cmp	r3, #0
  406cda:	bf0c      	ite	eq
  406cdc:	2301      	moveq	r3, #1
  406cde:	2300      	movne	r3, #0
  406ce0:	b2db      	uxtb	r3, r3
  406ce2:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
  406ce4:	4b15      	ldr	r3, [pc, #84]	; (406d3c <prvCheckTasksWaitingTermination+0x74>)
  406ce6:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
  406ce8:	687b      	ldr	r3, [r7, #4]
  406cea:	2b00      	cmp	r3, #0
  406cec:	d119      	bne.n	406d22 <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  406cee:	4b14      	ldr	r3, [pc, #80]	; (406d40 <prvCheckTasksWaitingTermination+0x78>)
  406cf0:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  406cf2:	4b11      	ldr	r3, [pc, #68]	; (406d38 <prvCheckTasksWaitingTermination+0x70>)
  406cf4:	68db      	ldr	r3, [r3, #12]
  406cf6:	68db      	ldr	r3, [r3, #12]
  406cf8:	603b      	str	r3, [r7, #0]
					uxListRemove( &( pxTCB->xGenericListItem ) );
  406cfa:	683b      	ldr	r3, [r7, #0]
  406cfc:	3304      	adds	r3, #4
  406cfe:	4618      	mov	r0, r3
  406d00:	4b10      	ldr	r3, [pc, #64]	; (406d44 <prvCheckTasksWaitingTermination+0x7c>)
  406d02:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  406d04:	4b10      	ldr	r3, [pc, #64]	; (406d48 <prvCheckTasksWaitingTermination+0x80>)
  406d06:	681b      	ldr	r3, [r3, #0]
  406d08:	3b01      	subs	r3, #1
  406d0a:	4a0f      	ldr	r2, [pc, #60]	; (406d48 <prvCheckTasksWaitingTermination+0x80>)
  406d0c:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  406d0e:	4b0f      	ldr	r3, [pc, #60]	; (406d4c <prvCheckTasksWaitingTermination+0x84>)
  406d10:	681b      	ldr	r3, [r3, #0]
  406d12:	3b01      	subs	r3, #1
  406d14:	4a0d      	ldr	r2, [pc, #52]	; (406d4c <prvCheckTasksWaitingTermination+0x84>)
  406d16:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
  406d18:	4b0d      	ldr	r3, [pc, #52]	; (406d50 <prvCheckTasksWaitingTermination+0x88>)
  406d1a:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
  406d1c:	6838      	ldr	r0, [r7, #0]
  406d1e:	4b0d      	ldr	r3, [pc, #52]	; (406d54 <prvCheckTasksWaitingTermination+0x8c>)
  406d20:	4798      	blx	r3
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  406d22:	4b0a      	ldr	r3, [pc, #40]	; (406d4c <prvCheckTasksWaitingTermination+0x84>)
  406d24:	681b      	ldr	r3, [r3, #0]
  406d26:	2b00      	cmp	r3, #0
  406d28:	d1d2      	bne.n	406cd0 <prvCheckTasksWaitingTermination+0x8>
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif
}
  406d2a:	bf00      	nop
  406d2c:	3708      	adds	r7, #8
  406d2e:	46bd      	mov	sp, r7
  406d30:	bd80      	pop	{r7, pc}
  406d32:	bf00      	nop
  406d34:	00406561 	.word	0x00406561
  406d38:	20002dc8 	.word	0x20002dc8
  406d3c:	0040657d 	.word	0x0040657d
  406d40:	00405741 	.word	0x00405741
  406d44:	00405565 	.word	0x00405565
  406d48:	20002df4 	.word	0x20002df4
  406d4c:	20002ddc 	.word	0x20002ddc
  406d50:	00405761 	.word	0x00405761
  406d54:	00406e39 	.word	0x00406e39

00406d58 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  406d58:	b580      	push	{r7, lr}
  406d5a:	b082      	sub	sp, #8
  406d5c:	af00      	add	r7, sp, #0
  406d5e:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  406d60:	4b13      	ldr	r3, [pc, #76]	; (406db0 <prvAddCurrentTaskToDelayedList+0x58>)
  406d62:	681b      	ldr	r3, [r3, #0]
  406d64:	687a      	ldr	r2, [r7, #4]
  406d66:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
  406d68:	4b12      	ldr	r3, [pc, #72]	; (406db4 <prvAddCurrentTaskToDelayedList+0x5c>)
  406d6a:	681b      	ldr	r3, [r3, #0]
  406d6c:	687a      	ldr	r2, [r7, #4]
  406d6e:	429a      	cmp	r2, r3
  406d70:	d209      	bcs.n	406d86 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  406d72:	4b11      	ldr	r3, [pc, #68]	; (406db8 <prvAddCurrentTaskToDelayedList+0x60>)
  406d74:	681a      	ldr	r2, [r3, #0]
  406d76:	4b0e      	ldr	r3, [pc, #56]	; (406db0 <prvAddCurrentTaskToDelayedList+0x58>)
  406d78:	681b      	ldr	r3, [r3, #0]
  406d7a:	3304      	adds	r3, #4
  406d7c:	4619      	mov	r1, r3
  406d7e:	4610      	mov	r0, r2
  406d80:	4b0e      	ldr	r3, [pc, #56]	; (406dbc <prvAddCurrentTaskToDelayedList+0x64>)
  406d82:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
  406d84:	e010      	b.n	406da8 <prvAddCurrentTaskToDelayedList+0x50>
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  406d86:	4b0e      	ldr	r3, [pc, #56]	; (406dc0 <prvAddCurrentTaskToDelayedList+0x68>)
  406d88:	681a      	ldr	r2, [r3, #0]
  406d8a:	4b09      	ldr	r3, [pc, #36]	; (406db0 <prvAddCurrentTaskToDelayedList+0x58>)
  406d8c:	681b      	ldr	r3, [r3, #0]
  406d8e:	3304      	adds	r3, #4
  406d90:	4619      	mov	r1, r3
  406d92:	4610      	mov	r0, r2
  406d94:	4b09      	ldr	r3, [pc, #36]	; (406dbc <prvAddCurrentTaskToDelayedList+0x64>)
  406d96:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  406d98:	4b0a      	ldr	r3, [pc, #40]	; (406dc4 <prvAddCurrentTaskToDelayedList+0x6c>)
  406d9a:	681b      	ldr	r3, [r3, #0]
  406d9c:	687a      	ldr	r2, [r7, #4]
  406d9e:	429a      	cmp	r2, r3
  406da0:	d202      	bcs.n	406da8 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
  406da2:	4a08      	ldr	r2, [pc, #32]	; (406dc4 <prvAddCurrentTaskToDelayedList+0x6c>)
  406da4:	687b      	ldr	r3, [r7, #4]
  406da6:	6013      	str	r3, [r2, #0]
		}
	}
}
  406da8:	bf00      	nop
  406daa:	3708      	adds	r7, #8
  406dac:	46bd      	mov	sp, r7
  406dae:	bd80      	pop	{r7, pc}
  406db0:	20002d1c 	.word	0x20002d1c
  406db4:	20002df8 	.word	0x20002df8
  406db8:	20002db0 	.word	0x20002db0
  406dbc:	004054f5 	.word	0x004054f5
  406dc0:	20002dac 	.word	0x20002dac
  406dc4:	20000124 	.word	0x20000124

00406dc8 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
  406dc8:	b580      	push	{r7, lr}
  406dca:	b084      	sub	sp, #16
  406dcc:	af00      	add	r7, sp, #0
  406dce:	4603      	mov	r3, r0
  406dd0:	6039      	str	r1, [r7, #0]
  406dd2:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  406dd4:	2044      	movs	r0, #68	; 0x44
  406dd6:	4b15      	ldr	r3, [pc, #84]	; (406e2c <prvAllocateTCBAndStack+0x64>)
  406dd8:	4798      	blx	r3
  406dda:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
  406ddc:	68fb      	ldr	r3, [r7, #12]
  406dde:	2b00      	cmp	r3, #0
  406de0:	d01e      	beq.n	406e20 <prvAllocateTCBAndStack+0x58>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  406de2:	683b      	ldr	r3, [r7, #0]
  406de4:	2b00      	cmp	r3, #0
  406de6:	d106      	bne.n	406df6 <prvAllocateTCBAndStack+0x2e>
  406de8:	88fb      	ldrh	r3, [r7, #6]
  406dea:	009b      	lsls	r3, r3, #2
  406dec:	4618      	mov	r0, r3
  406dee:	4b0f      	ldr	r3, [pc, #60]	; (406e2c <prvAllocateTCBAndStack+0x64>)
  406df0:	4798      	blx	r3
  406df2:	4603      	mov	r3, r0
  406df4:	e000      	b.n	406df8 <prvAllocateTCBAndStack+0x30>
  406df6:	683b      	ldr	r3, [r7, #0]
  406df8:	68fa      	ldr	r2, [r7, #12]
  406dfa:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  406dfc:	68fb      	ldr	r3, [r7, #12]
  406dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406e00:	2b00      	cmp	r3, #0
  406e02:	d105      	bne.n	406e10 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  406e04:	68f8      	ldr	r0, [r7, #12]
  406e06:	4b0a      	ldr	r3, [pc, #40]	; (406e30 <prvAllocateTCBAndStack+0x68>)
  406e08:	4798      	blx	r3
			pxNewTCB = NULL;
  406e0a:	2300      	movs	r3, #0
  406e0c:	60fb      	str	r3, [r7, #12]
  406e0e:	e007      	b.n	406e20 <prvAllocateTCBAndStack+0x58>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
  406e10:	68fb      	ldr	r3, [r7, #12]
  406e12:	6b18      	ldr	r0, [r3, #48]	; 0x30
  406e14:	88fb      	ldrh	r3, [r7, #6]
  406e16:	009b      	lsls	r3, r3, #2
  406e18:	461a      	mov	r2, r3
  406e1a:	21a5      	movs	r1, #165	; 0xa5
  406e1c:	4b05      	ldr	r3, [pc, #20]	; (406e34 <prvAllocateTCBAndStack+0x6c>)
  406e1e:	4798      	blx	r3
		}
	}

	return pxNewTCB;
  406e20:	68fb      	ldr	r3, [r7, #12]
}
  406e22:	4618      	mov	r0, r3
  406e24:	3710      	adds	r7, #16
  406e26:	46bd      	mov	sp, r7
  406e28:	bd80      	pop	{r7, pc}
  406e2a:	bf00      	nop
  406e2c:	00405849 	.word	0x00405849
  406e30:	00405955 	.word	0x00405955
  406e34:	0040ba3d 	.word	0x0040ba3d

00406e38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
  406e38:	b580      	push	{r7, lr}
  406e3a:	b082      	sub	sp, #8
  406e3c:	af00      	add	r7, sp, #0
  406e3e:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  406e40:	687b      	ldr	r3, [r7, #4]
  406e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406e44:	4618      	mov	r0, r3
  406e46:	4b04      	ldr	r3, [pc, #16]	; (406e58 <prvDeleteTCB+0x20>)
  406e48:	4798      	blx	r3
		vPortFree( pxTCB );
  406e4a:	6878      	ldr	r0, [r7, #4]
  406e4c:	4b02      	ldr	r3, [pc, #8]	; (406e58 <prvDeleteTCB+0x20>)
  406e4e:	4798      	blx	r3
	}
  406e50:	bf00      	nop
  406e52:	3708      	adds	r7, #8
  406e54:	46bd      	mov	sp, r7
  406e56:	bd80      	pop	{r7, pc}
  406e58:	00405955 	.word	0x00405955

00406e5c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
  406e5c:	b480      	push	{r7}
  406e5e:	b083      	sub	sp, #12
  406e60:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  406e62:	4b04      	ldr	r3, [pc, #16]	; (406e74 <xTaskGetCurrentTaskHandle+0x18>)
  406e64:	681b      	ldr	r3, [r3, #0]
  406e66:	607b      	str	r3, [r7, #4]

		return xReturn;
  406e68:	687b      	ldr	r3, [r7, #4]
	}
  406e6a:	4618      	mov	r0, r3
  406e6c:	370c      	adds	r7, #12
  406e6e:	46bd      	mov	sp, r7
  406e70:	bc80      	pop	{r7}
  406e72:	4770      	bx	lr
  406e74:	20002d1c 	.word	0x20002d1c

00406e78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
  406e78:	b480      	push	{r7}
  406e7a:	b083      	sub	sp, #12
  406e7c:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  406e7e:	4b0b      	ldr	r3, [pc, #44]	; (406eac <xTaskGetSchedulerState+0x34>)
  406e80:	681b      	ldr	r3, [r3, #0]
  406e82:	2b00      	cmp	r3, #0
  406e84:	d102      	bne.n	406e8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  406e86:	2300      	movs	r3, #0
  406e88:	607b      	str	r3, [r7, #4]
  406e8a:	e008      	b.n	406e9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  406e8c:	4b08      	ldr	r3, [pc, #32]	; (406eb0 <xTaskGetSchedulerState+0x38>)
  406e8e:	681b      	ldr	r3, [r3, #0]
  406e90:	2b00      	cmp	r3, #0
  406e92:	d102      	bne.n	406e9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
  406e94:	2301      	movs	r3, #1
  406e96:	607b      	str	r3, [r7, #4]
  406e98:	e001      	b.n	406e9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  406e9a:	2302      	movs	r3, #2
  406e9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
  406e9e:	687b      	ldr	r3, [r7, #4]
	}
  406ea0:	4618      	mov	r0, r3
  406ea2:	370c      	adds	r7, #12
  406ea4:	46bd      	mov	sp, r7
  406ea6:	bc80      	pop	{r7}
  406ea8:	4770      	bx	lr
  406eaa:	bf00      	nop
  406eac:	20002e04 	.word	0x20002e04
  406eb0:	20002e08 	.word	0x20002e08

00406eb4 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  406eb4:	b580      	push	{r7, lr}
  406eb6:	b084      	sub	sp, #16
  406eb8:	af00      	add	r7, sp, #0
  406eba:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  406ebc:	687b      	ldr	r3, [r7, #4]
  406ebe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  406ec0:	687b      	ldr	r3, [r7, #4]
  406ec2:	2b00      	cmp	r3, #0
  406ec4:	d041      	beq.n	406f4a <vTaskPriorityInherit+0x96>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  406ec6:	68fb      	ldr	r3, [r7, #12]
  406ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406eca:	4b22      	ldr	r3, [pc, #136]	; (406f54 <vTaskPriorityInherit+0xa0>)
  406ecc:	681b      	ldr	r3, [r3, #0]
  406ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406ed0:	429a      	cmp	r2, r3
  406ed2:	d23a      	bcs.n	406f4a <vTaskPriorityInherit+0x96>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  406ed4:	4b1f      	ldr	r3, [pc, #124]	; (406f54 <vTaskPriorityInherit+0xa0>)
  406ed6:	681b      	ldr	r3, [r3, #0]
  406ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406eda:	f1c3 0205 	rsb	r2, r3, #5
  406ede:	68fb      	ldr	r3, [r7, #12]
  406ee0:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  406ee2:	68fb      	ldr	r3, [r7, #12]
  406ee4:	6959      	ldr	r1, [r3, #20]
  406ee6:	68fb      	ldr	r3, [r7, #12]
  406ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406eea:	4613      	mov	r3, r2
  406eec:	009b      	lsls	r3, r3, #2
  406eee:	4413      	add	r3, r2
  406ef0:	009b      	lsls	r3, r3, #2
  406ef2:	4a19      	ldr	r2, [pc, #100]	; (406f58 <vTaskPriorityInherit+0xa4>)
  406ef4:	4413      	add	r3, r2
  406ef6:	4299      	cmp	r1, r3
  406ef8:	d122      	bne.n	406f40 <vTaskPriorityInherit+0x8c>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  406efa:	68fb      	ldr	r3, [r7, #12]
  406efc:	3304      	adds	r3, #4
  406efe:	4618      	mov	r0, r3
  406f00:	4b16      	ldr	r3, [pc, #88]	; (406f5c <vTaskPriorityInherit+0xa8>)
  406f02:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  406f04:	4b13      	ldr	r3, [pc, #76]	; (406f54 <vTaskPriorityInherit+0xa0>)
  406f06:	681b      	ldr	r3, [r3, #0]
  406f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406f0a:	68fb      	ldr	r3, [r7, #12]
  406f0c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
  406f0e:	68fb      	ldr	r3, [r7, #12]
  406f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406f12:	4b13      	ldr	r3, [pc, #76]	; (406f60 <vTaskPriorityInherit+0xac>)
  406f14:	681b      	ldr	r3, [r3, #0]
  406f16:	429a      	cmp	r2, r3
  406f18:	d903      	bls.n	406f22 <vTaskPriorityInherit+0x6e>
  406f1a:	68fb      	ldr	r3, [r7, #12]
  406f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406f1e:	4a10      	ldr	r2, [pc, #64]	; (406f60 <vTaskPriorityInherit+0xac>)
  406f20:	6013      	str	r3, [r2, #0]
  406f22:	68fb      	ldr	r3, [r7, #12]
  406f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406f26:	4613      	mov	r3, r2
  406f28:	009b      	lsls	r3, r3, #2
  406f2a:	4413      	add	r3, r2
  406f2c:	009b      	lsls	r3, r3, #2
  406f2e:	4a0a      	ldr	r2, [pc, #40]	; (406f58 <vTaskPriorityInherit+0xa4>)
  406f30:	441a      	add	r2, r3
  406f32:	68fb      	ldr	r3, [r7, #12]
  406f34:	3304      	adds	r3, #4
  406f36:	4619      	mov	r1, r3
  406f38:	4610      	mov	r0, r2
  406f3a:	4b0a      	ldr	r3, [pc, #40]	; (406f64 <vTaskPriorityInherit+0xb0>)
  406f3c:	4798      	blx	r3
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
  406f3e:	e004      	b.n	406f4a <vTaskPriorityInherit+0x96>
					prvAddTaskToReadyQueue( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  406f40:	4b04      	ldr	r3, [pc, #16]	; (406f54 <vTaskPriorityInherit+0xa0>)
  406f42:	681b      	ldr	r3, [r3, #0]
  406f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406f46:	68fb      	ldr	r3, [r7, #12]
  406f48:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
  406f4a:	bf00      	nop
  406f4c:	3710      	adds	r7, #16
  406f4e:	46bd      	mov	sp, r7
  406f50:	bd80      	pop	{r7, pc}
  406f52:	bf00      	nop
  406f54:	20002d1c 	.word	0x20002d1c
  406f58:	20002d20 	.word	0x20002d20
  406f5c:	00405565 	.word	0x00405565
  406f60:	20002e00 	.word	0x20002e00
  406f64:	004054a5 	.word	0x004054a5

00406f68 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  406f68:	b580      	push	{r7, lr}
  406f6a:	b084      	sub	sp, #16
  406f6c:	af00      	add	r7, sp, #0
  406f6e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  406f70:	687b      	ldr	r3, [r7, #4]
  406f72:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
  406f74:	687b      	ldr	r3, [r7, #4]
  406f76:	2b00      	cmp	r3, #0
  406f78:	d02c      	beq.n	406fd4 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  406f7a:	68fb      	ldr	r3, [r7, #12]
  406f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406f7e:	68fb      	ldr	r3, [r7, #12]
  406f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406f82:	429a      	cmp	r2, r3
  406f84:	d026      	beq.n	406fd4 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  406f86:	68fb      	ldr	r3, [r7, #12]
  406f88:	3304      	adds	r3, #4
  406f8a:	4618      	mov	r0, r3
  406f8c:	4b13      	ldr	r3, [pc, #76]	; (406fdc <vTaskPriorityDisinherit+0x74>)
  406f8e:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  406f90:	68fb      	ldr	r3, [r7, #12]
  406f92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  406f94:	68fb      	ldr	r3, [r7, #12]
  406f96:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  406f98:	68fb      	ldr	r3, [r7, #12]
  406f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406f9c:	f1c3 0205 	rsb	r2, r3, #5
  406fa0:	68fb      	ldr	r3, [r7, #12]
  406fa2:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
  406fa4:	68fb      	ldr	r3, [r7, #12]
  406fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406fa8:	4b0d      	ldr	r3, [pc, #52]	; (406fe0 <vTaskPriorityDisinherit+0x78>)
  406faa:	681b      	ldr	r3, [r3, #0]
  406fac:	429a      	cmp	r2, r3
  406fae:	d903      	bls.n	406fb8 <vTaskPriorityDisinherit+0x50>
  406fb0:	68fb      	ldr	r3, [r7, #12]
  406fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406fb4:	4a0a      	ldr	r2, [pc, #40]	; (406fe0 <vTaskPriorityDisinherit+0x78>)
  406fb6:	6013      	str	r3, [r2, #0]
  406fb8:	68fb      	ldr	r3, [r7, #12]
  406fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406fbc:	4613      	mov	r3, r2
  406fbe:	009b      	lsls	r3, r3, #2
  406fc0:	4413      	add	r3, r2
  406fc2:	009b      	lsls	r3, r3, #2
  406fc4:	4a07      	ldr	r2, [pc, #28]	; (406fe4 <vTaskPriorityDisinherit+0x7c>)
  406fc6:	441a      	add	r2, r3
  406fc8:	68fb      	ldr	r3, [r7, #12]
  406fca:	3304      	adds	r3, #4
  406fcc:	4619      	mov	r1, r3
  406fce:	4610      	mov	r0, r2
  406fd0:	4b05      	ldr	r3, [pc, #20]	; (406fe8 <vTaskPriorityDisinherit+0x80>)
  406fd2:	4798      	blx	r3
			}
		}
	}
  406fd4:	bf00      	nop
  406fd6:	3710      	adds	r7, #16
  406fd8:	46bd      	mov	sp, r7
  406fda:	bd80      	pop	{r7, pc}
  406fdc:	00405565 	.word	0x00405565
  406fe0:	20002e00 	.word	0x20002e00
  406fe4:	20002d20 	.word	0x20002d20
  406fe8:	004054a5 	.word	0x004054a5

00406fec <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
  406fec:	b590      	push	{r4, r7, lr}
  406fee:	b087      	sub	sp, #28
  406ff0:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
  406ff2:	2300      	movs	r3, #0
  406ff4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  406ff6:	4b10      	ldr	r3, [pc, #64]	; (407038 <xTimerCreateTimerTask+0x4c>)
  406ff8:	4798      	blx	r3

	if( xTimerQueue != NULL )
  406ffa:	4b10      	ldr	r3, [pc, #64]	; (40703c <xTimerCreateTimerTask+0x50>)
  406ffc:	681b      	ldr	r3, [r3, #0]
  406ffe:	2b00      	cmp	r3, #0
  407000:	d00e      	beq.n	407020 <xTimerCreateTimerTask+0x34>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  407002:	2300      	movs	r3, #0
  407004:	9303      	str	r3, [sp, #12]
  407006:	2300      	movs	r3, #0
  407008:	9302      	str	r3, [sp, #8]
  40700a:	2300      	movs	r3, #0
  40700c:	9301      	str	r3, [sp, #4]
  40700e:	2304      	movs	r3, #4
  407010:	9300      	str	r3, [sp, #0]
  407012:	2300      	movs	r3, #0
  407014:	22c8      	movs	r2, #200	; 0xc8
  407016:	490a      	ldr	r1, [pc, #40]	; (407040 <xTimerCreateTimerTask+0x54>)
  407018:	480a      	ldr	r0, [pc, #40]	; (407044 <xTimerCreateTimerTask+0x58>)
  40701a:	4c0b      	ldr	r4, [pc, #44]	; (407048 <xTimerCreateTimerTask+0x5c>)
  40701c:	47a0      	blx	r4
  40701e:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
  407020:	687b      	ldr	r3, [r7, #4]
  407022:	2b00      	cmp	r3, #0
  407024:	d103      	bne.n	40702e <xTimerCreateTimerTask+0x42>
  407026:	4b09      	ldr	r3, [pc, #36]	; (40704c <xTimerCreateTimerTask+0x60>)
  407028:	4798      	blx	r3
  40702a:	bf00      	nop
  40702c:	e7fd      	b.n	40702a <xTimerCreateTimerTask+0x3e>
	return xReturn;
  40702e:	687b      	ldr	r3, [r7, #4]
}
  407030:	4618      	mov	r0, r3
  407032:	370c      	adds	r7, #12
  407034:	46bd      	mov	sp, r7
  407036:	bd90      	pop	{r4, r7, pc}
  407038:	00407505 	.word	0x00407505
  40703c:	20002e4c 	.word	0x20002e4c
  407040:	0040f92c 	.word	0x0040f92c
  407044:	00407161 	.word	0x00407161
  407048:	004062c1 	.word	0x004062c1
  40704c:	00405789 	.word	0x00405789

00407050 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
  407050:	b590      	push	{r4, r7, lr}
  407052:	b089      	sub	sp, #36	; 0x24
  407054:	af00      	add	r7, sp, #0
  407056:	60f8      	str	r0, [r7, #12]
  407058:	60b9      	str	r1, [r7, #8]
  40705a:	607a      	str	r2, [r7, #4]
  40705c:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
  40705e:	2300      	movs	r3, #0
  407060:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  407062:	4b1a      	ldr	r3, [pc, #104]	; (4070cc <xTimerGenericCommand+0x7c>)
  407064:	681b      	ldr	r3, [r3, #0]
  407066:	2b00      	cmp	r3, #0
  407068:	d02a      	beq.n	4070c0 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  40706a:	68bb      	ldr	r3, [r7, #8]
  40706c:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
  40706e:	687b      	ldr	r3, [r7, #4]
  407070:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  407072:	68fb      	ldr	r3, [r7, #12]
  407074:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
  407076:	683b      	ldr	r3, [r7, #0]
  407078:	2b00      	cmp	r3, #0
  40707a:	d118      	bne.n	4070ae <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  40707c:	4b14      	ldr	r3, [pc, #80]	; (4070d0 <xTimerGenericCommand+0x80>)
  40707e:	4798      	blx	r3
  407080:	4603      	mov	r3, r0
  407082:	2b01      	cmp	r3, #1
  407084:	d109      	bne.n	40709a <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  407086:	4b11      	ldr	r3, [pc, #68]	; (4070cc <xTimerGenericCommand+0x7c>)
  407088:	6818      	ldr	r0, [r3, #0]
  40708a:	f107 0110 	add.w	r1, r7, #16
  40708e:	2300      	movs	r3, #0
  407090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  407092:	4c10      	ldr	r4, [pc, #64]	; (4070d4 <xTimerGenericCommand+0x84>)
  407094:	47a0      	blx	r4
  407096:	61f8      	str	r0, [r7, #28]
  407098:	e012      	b.n	4070c0 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  40709a:	4b0c      	ldr	r3, [pc, #48]	; (4070cc <xTimerGenericCommand+0x7c>)
  40709c:	6818      	ldr	r0, [r3, #0]
  40709e:	f107 0110 	add.w	r1, r7, #16
  4070a2:	2300      	movs	r3, #0
  4070a4:	2200      	movs	r2, #0
  4070a6:	4c0b      	ldr	r4, [pc, #44]	; (4070d4 <xTimerGenericCommand+0x84>)
  4070a8:	47a0      	blx	r4
  4070aa:	61f8      	str	r0, [r7, #28]
  4070ac:	e008      	b.n	4070c0 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4070ae:	4b07      	ldr	r3, [pc, #28]	; (4070cc <xTimerGenericCommand+0x7c>)
  4070b0:	6818      	ldr	r0, [r3, #0]
  4070b2:	f107 0110 	add.w	r1, r7, #16
  4070b6:	2300      	movs	r3, #0
  4070b8:	683a      	ldr	r2, [r7, #0]
  4070ba:	4c07      	ldr	r4, [pc, #28]	; (4070d8 <xTimerGenericCommand+0x88>)
  4070bc:	47a0      	blx	r4
  4070be:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
  4070c0:	69fb      	ldr	r3, [r7, #28]
}
  4070c2:	4618      	mov	r0, r3
  4070c4:	3724      	adds	r7, #36	; 0x24
  4070c6:	46bd      	mov	sp, r7
  4070c8:	bd90      	pop	{r4, r7, pc}
  4070ca:	bf00      	nop
  4070cc:	20002e4c 	.word	0x20002e4c
  4070d0:	00406e79 	.word	0x00406e79
  4070d4:	00405c41 	.word	0x00405c41
  4070d8:	00405da9 	.word	0x00405da9

004070dc <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
  4070dc:	b590      	push	{r4, r7, lr}
  4070de:	b087      	sub	sp, #28
  4070e0:	af02      	add	r7, sp, #8
  4070e2:	6078      	str	r0, [r7, #4]
  4070e4:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4070e6:	4b19      	ldr	r3, [pc, #100]	; (40714c <prvProcessExpiredTimer+0x70>)
  4070e8:	681b      	ldr	r3, [r3, #0]
  4070ea:	68db      	ldr	r3, [r3, #12]
  4070ec:	68db      	ldr	r3, [r3, #12]
  4070ee:	60fb      	str	r3, [r7, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
  4070f0:	68fb      	ldr	r3, [r7, #12]
  4070f2:	3304      	adds	r3, #4
  4070f4:	4618      	mov	r0, r3
  4070f6:	4b16      	ldr	r3, [pc, #88]	; (407150 <prvProcessExpiredTimer+0x74>)
  4070f8:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  4070fa:	68fb      	ldr	r3, [r7, #12]
  4070fc:	69db      	ldr	r3, [r3, #28]
  4070fe:	2b01      	cmp	r3, #1
  407100:	d11b      	bne.n	40713a <prvProcessExpiredTimer+0x5e>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  407102:	68fb      	ldr	r3, [r7, #12]
  407104:	699a      	ldr	r2, [r3, #24]
  407106:	687b      	ldr	r3, [r7, #4]
  407108:	18d1      	adds	r1, r2, r3
  40710a:	687b      	ldr	r3, [r7, #4]
  40710c:	683a      	ldr	r2, [r7, #0]
  40710e:	68f8      	ldr	r0, [r7, #12]
  407110:	4c10      	ldr	r4, [pc, #64]	; (407154 <prvProcessExpiredTimer+0x78>)
  407112:	47a0      	blx	r4
  407114:	4603      	mov	r3, r0
  407116:	2b01      	cmp	r3, #1
  407118:	d10f      	bne.n	40713a <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  40711a:	2300      	movs	r3, #0
  40711c:	9300      	str	r3, [sp, #0]
  40711e:	2300      	movs	r3, #0
  407120:	687a      	ldr	r2, [r7, #4]
  407122:	2100      	movs	r1, #0
  407124:	68f8      	ldr	r0, [r7, #12]
  407126:	4c0c      	ldr	r4, [pc, #48]	; (407158 <prvProcessExpiredTimer+0x7c>)
  407128:	47a0      	blx	r4
  40712a:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
  40712c:	68bb      	ldr	r3, [r7, #8]
  40712e:	2b00      	cmp	r3, #0
  407130:	d103      	bne.n	40713a <prvProcessExpiredTimer+0x5e>
  407132:	4b0a      	ldr	r3, [pc, #40]	; (40715c <prvProcessExpiredTimer+0x80>)
  407134:	4798      	blx	r3
  407136:	bf00      	nop
  407138:	e7fd      	b.n	407136 <prvProcessExpiredTimer+0x5a>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  40713a:	68fb      	ldr	r3, [r7, #12]
  40713c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40713e:	68f8      	ldr	r0, [r7, #12]
  407140:	4798      	blx	r3
}
  407142:	bf00      	nop
  407144:	3714      	adds	r7, #20
  407146:	46bd      	mov	sp, r7
  407148:	bd90      	pop	{r4, r7, pc}
  40714a:	bf00      	nop
  40714c:	20002e44 	.word	0x20002e44
  407150:	00405565 	.word	0x00405565
  407154:	004072a9 	.word	0x004072a9
  407158:	00407051 	.word	0x00407051
  40715c:	00405789 	.word	0x00405789

00407160 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  407160:	b580      	push	{r7, lr}
  407162:	b084      	sub	sp, #16
  407164:	af00      	add	r7, sp, #0
  407166:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  407168:	f107 0308 	add.w	r3, r7, #8
  40716c:	4618      	mov	r0, r3
  40716e:	4b05      	ldr	r3, [pc, #20]	; (407184 <prvTimerTask+0x24>)
  407170:	4798      	blx	r3
  407172:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  407174:	68bb      	ldr	r3, [r7, #8]
  407176:	4619      	mov	r1, r3
  407178:	68f8      	ldr	r0, [r7, #12]
  40717a:	4b03      	ldr	r3, [pc, #12]	; (407188 <prvTimerTask+0x28>)
  40717c:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
  40717e:	4b03      	ldr	r3, [pc, #12]	; (40718c <prvTimerTask+0x2c>)
  407180:	4798      	blx	r3
	}
  407182:	e7f1      	b.n	407168 <prvTimerTask+0x8>
  407184:	00407215 	.word	0x00407215
  407188:	00407191 	.word	0x00407191
  40718c:	00407331 	.word	0x00407331

00407190 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
  407190:	b580      	push	{r7, lr}
  407192:	b084      	sub	sp, #16
  407194:	af00      	add	r7, sp, #0
  407196:	6078      	str	r0, [r7, #4]
  407198:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  40719a:	4b17      	ldr	r3, [pc, #92]	; (4071f8 <prvProcessTimerOrBlockTask+0x68>)
  40719c:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40719e:	f107 0308 	add.w	r3, r7, #8
  4071a2:	4618      	mov	r0, r3
  4071a4:	4b15      	ldr	r3, [pc, #84]	; (4071fc <prvProcessTimerOrBlockTask+0x6c>)
  4071a6:	4798      	blx	r3
  4071a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
  4071aa:	68bb      	ldr	r3, [r7, #8]
  4071ac:	2b00      	cmp	r3, #0
  4071ae:	d11d      	bne.n	4071ec <prvProcessTimerOrBlockTask+0x5c>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4071b0:	683b      	ldr	r3, [r7, #0]
  4071b2:	2b00      	cmp	r3, #0
  4071b4:	d10a      	bne.n	4071cc <prvProcessTimerOrBlockTask+0x3c>
  4071b6:	687a      	ldr	r2, [r7, #4]
  4071b8:	68fb      	ldr	r3, [r7, #12]
  4071ba:	429a      	cmp	r2, r3
  4071bc:	d806      	bhi.n	4071cc <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
  4071be:	4b10      	ldr	r3, [pc, #64]	; (407200 <prvProcessTimerOrBlockTask+0x70>)
  4071c0:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  4071c2:	68f9      	ldr	r1, [r7, #12]
  4071c4:	6878      	ldr	r0, [r7, #4]
  4071c6:	4b0f      	ldr	r3, [pc, #60]	; (407204 <prvProcessTimerOrBlockTask+0x74>)
  4071c8:	4798      	blx	r3
		else
		{
			xTaskResumeAll();
		}
	}
}
  4071ca:	e011      	b.n	4071f0 <prvProcessTimerOrBlockTask+0x60>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  4071cc:	4b0e      	ldr	r3, [pc, #56]	; (407208 <prvProcessTimerOrBlockTask+0x78>)
  4071ce:	6818      	ldr	r0, [r3, #0]
  4071d0:	687a      	ldr	r2, [r7, #4]
  4071d2:	68fb      	ldr	r3, [r7, #12]
  4071d4:	1ad3      	subs	r3, r2, r3
  4071d6:	4619      	mov	r1, r3
  4071d8:	4b0c      	ldr	r3, [pc, #48]	; (40720c <prvProcessTimerOrBlockTask+0x7c>)
  4071da:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  4071dc:	4b08      	ldr	r3, [pc, #32]	; (407200 <prvProcessTimerOrBlockTask+0x70>)
  4071de:	4798      	blx	r3
  4071e0:	4603      	mov	r3, r0
  4071e2:	2b00      	cmp	r3, #0
  4071e4:	d104      	bne.n	4071f0 <prvProcessTimerOrBlockTask+0x60>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
  4071e6:	4b0a      	ldr	r3, [pc, #40]	; (407210 <prvProcessTimerOrBlockTask+0x80>)
  4071e8:	4798      	blx	r3
		else
		{
			xTaskResumeAll();
		}
	}
}
  4071ea:	e001      	b.n	4071f0 <prvProcessTimerOrBlockTask+0x60>
				}
			}
		}
		else
		{
			xTaskResumeAll();
  4071ec:	4b04      	ldr	r3, [pc, #16]	; (407200 <prvProcessTimerOrBlockTask+0x70>)
  4071ee:	4798      	blx	r3
		}
	}
}
  4071f0:	bf00      	nop
  4071f2:	3710      	adds	r7, #16
  4071f4:	46bd      	mov	sp, r7
  4071f6:	bd80      	pop	{r7, pc}
  4071f8:	00406561 	.word	0x00406561
  4071fc:	0040725d 	.word	0x0040725d
  407200:	0040657d 	.word	0x0040657d
  407204:	004070dd 	.word	0x004070dd
  407208:	20002e4c 	.word	0x20002e4c
  40720c:	0040625d 	.word	0x0040625d
  407210:	00405729 	.word	0x00405729

00407214 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
  407214:	b480      	push	{r7}
  407216:	b085      	sub	sp, #20
  407218:	af00      	add	r7, sp, #0
  40721a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40721c:	4b0e      	ldr	r3, [pc, #56]	; (407258 <prvGetNextExpireTime+0x44>)
  40721e:	681b      	ldr	r3, [r3, #0]
  407220:	681b      	ldr	r3, [r3, #0]
  407222:	2b00      	cmp	r3, #0
  407224:	bf0c      	ite	eq
  407226:	2301      	moveq	r3, #1
  407228:	2300      	movne	r3, #0
  40722a:	b2db      	uxtb	r3, r3
  40722c:	461a      	mov	r2, r3
  40722e:	687b      	ldr	r3, [r7, #4]
  407230:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  407232:	687b      	ldr	r3, [r7, #4]
  407234:	681b      	ldr	r3, [r3, #0]
  407236:	2b00      	cmp	r3, #0
  407238:	d105      	bne.n	407246 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40723a:	4b07      	ldr	r3, [pc, #28]	; (407258 <prvGetNextExpireTime+0x44>)
  40723c:	681b      	ldr	r3, [r3, #0]
  40723e:	68db      	ldr	r3, [r3, #12]
  407240:	681b      	ldr	r3, [r3, #0]
  407242:	60fb      	str	r3, [r7, #12]
  407244:	e001      	b.n	40724a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
  407246:	2300      	movs	r3, #0
  407248:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
  40724a:	68fb      	ldr	r3, [r7, #12]
}
  40724c:	4618      	mov	r0, r3
  40724e:	3714      	adds	r7, #20
  407250:	46bd      	mov	sp, r7
  407252:	bc80      	pop	{r7}
  407254:	4770      	bx	lr
  407256:	bf00      	nop
  407258:	20002e44 	.word	0x20002e44

0040725c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
  40725c:	b580      	push	{r7, lr}
  40725e:	b084      	sub	sp, #16
  407260:	af00      	add	r7, sp, #0
  407262:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
  407264:	4b0d      	ldr	r3, [pc, #52]	; (40729c <prvSampleTimeNow+0x40>)
  407266:	4798      	blx	r3
  407268:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
  40726a:	4b0d      	ldr	r3, [pc, #52]	; (4072a0 <prvSampleTimeNow+0x44>)
  40726c:	681b      	ldr	r3, [r3, #0]
  40726e:	68fa      	ldr	r2, [r7, #12]
  407270:	429a      	cmp	r2, r3
  407272:	d208      	bcs.n	407286 <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
  407274:	4b0a      	ldr	r3, [pc, #40]	; (4072a0 <prvSampleTimeNow+0x44>)
  407276:	681b      	ldr	r3, [r3, #0]
  407278:	4618      	mov	r0, r3
  40727a:	4b0a      	ldr	r3, [pc, #40]	; (4072a4 <prvSampleTimeNow+0x48>)
  40727c:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  40727e:	687b      	ldr	r3, [r7, #4]
  407280:	2201      	movs	r2, #1
  407282:	601a      	str	r2, [r3, #0]
  407284:	e002      	b.n	40728c <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  407286:	687b      	ldr	r3, [r7, #4]
  407288:	2200      	movs	r2, #0
  40728a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
  40728c:	4a04      	ldr	r2, [pc, #16]	; (4072a0 <prvSampleTimeNow+0x44>)
  40728e:	68fb      	ldr	r3, [r7, #12]
  407290:	6013      	str	r3, [r2, #0]

	return xTimeNow;
  407292:	68fb      	ldr	r3, [r7, #12]
}
  407294:	4618      	mov	r0, r3
  407296:	3710      	adds	r7, #16
  407298:	46bd      	mov	sp, r7
  40729a:	bd80      	pop	{r7, pc}
  40729c:	0040669d 	.word	0x0040669d
  4072a0:	20002e50 	.word	0x20002e50
  4072a4:	0040743d 	.word	0x0040743d

004072a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  4072a8:	b580      	push	{r7, lr}
  4072aa:	b086      	sub	sp, #24
  4072ac:	af00      	add	r7, sp, #0
  4072ae:	60f8      	str	r0, [r7, #12]
  4072b0:	60b9      	str	r1, [r7, #8]
  4072b2:	607a      	str	r2, [r7, #4]
  4072b4:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
  4072b6:	2300      	movs	r3, #0
  4072b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  4072ba:	68fb      	ldr	r3, [r7, #12]
  4072bc:	68ba      	ldr	r2, [r7, #8]
  4072be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4072c0:	68fb      	ldr	r3, [r7, #12]
  4072c2:	68fa      	ldr	r2, [r7, #12]
  4072c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
  4072c6:	68ba      	ldr	r2, [r7, #8]
  4072c8:	687b      	ldr	r3, [r7, #4]
  4072ca:	429a      	cmp	r2, r3
  4072cc:	d812      	bhi.n	4072f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  4072ce:	687a      	ldr	r2, [r7, #4]
  4072d0:	683b      	ldr	r3, [r7, #0]
  4072d2:	1ad2      	subs	r2, r2, r3
  4072d4:	68fb      	ldr	r3, [r7, #12]
  4072d6:	699b      	ldr	r3, [r3, #24]
  4072d8:	429a      	cmp	r2, r3
  4072da:	d302      	bcc.n	4072e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  4072dc:	2301      	movs	r3, #1
  4072de:	617b      	str	r3, [r7, #20]
  4072e0:	e01b      	b.n	40731a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  4072e2:	4b10      	ldr	r3, [pc, #64]	; (407324 <prvInsertTimerInActiveList+0x7c>)
  4072e4:	681a      	ldr	r2, [r3, #0]
  4072e6:	68fb      	ldr	r3, [r7, #12]
  4072e8:	3304      	adds	r3, #4
  4072ea:	4619      	mov	r1, r3
  4072ec:	4610      	mov	r0, r2
  4072ee:	4b0e      	ldr	r3, [pc, #56]	; (407328 <prvInsertTimerInActiveList+0x80>)
  4072f0:	4798      	blx	r3
  4072f2:	e012      	b.n	40731a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  4072f4:	687a      	ldr	r2, [r7, #4]
  4072f6:	683b      	ldr	r3, [r7, #0]
  4072f8:	429a      	cmp	r2, r3
  4072fa:	d206      	bcs.n	40730a <prvInsertTimerInActiveList+0x62>
  4072fc:	68ba      	ldr	r2, [r7, #8]
  4072fe:	683b      	ldr	r3, [r7, #0]
  407300:	429a      	cmp	r2, r3
  407302:	d302      	bcc.n	40730a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  407304:	2301      	movs	r3, #1
  407306:	617b      	str	r3, [r7, #20]
  407308:	e007      	b.n	40731a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40730a:	4b08      	ldr	r3, [pc, #32]	; (40732c <prvInsertTimerInActiveList+0x84>)
  40730c:	681a      	ldr	r2, [r3, #0]
  40730e:	68fb      	ldr	r3, [r7, #12]
  407310:	3304      	adds	r3, #4
  407312:	4619      	mov	r1, r3
  407314:	4610      	mov	r0, r2
  407316:	4b04      	ldr	r3, [pc, #16]	; (407328 <prvInsertTimerInActiveList+0x80>)
  407318:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
  40731a:	697b      	ldr	r3, [r7, #20]
}
  40731c:	4618      	mov	r0, r3
  40731e:	3718      	adds	r7, #24
  407320:	46bd      	mov	sp, r7
  407322:	bd80      	pop	{r7, pc}
  407324:	20002e48 	.word	0x20002e48
  407328:	004054f5 	.word	0x004054f5
  40732c:	20002e44 	.word	0x20002e44

00407330 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
  407330:	b590      	push	{r4, r7, lr}
  407332:	b08b      	sub	sp, #44	; 0x2c
  407334:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  407336:	1d3b      	adds	r3, r7, #4
  407338:	4618      	mov	r0, r3
  40733a:	4b38      	ldr	r3, [pc, #224]	; (40741c <prvProcessReceivedCommands+0xec>)
  40733c:	4798      	blx	r3
  40733e:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  407340:	e05d      	b.n	4073fe <prvProcessReceivedCommands+0xce>
	{
		pxTimer = xMessage.pxTimer;
  407342:	693b      	ldr	r3, [r7, #16]
  407344:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
  407346:	69bb      	ldr	r3, [r7, #24]
  407348:	2b00      	cmp	r3, #0
  40734a:	d008      	beq.n	40735e <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  40734c:	69bb      	ldr	r3, [r7, #24]
  40734e:	695b      	ldr	r3, [r3, #20]
  407350:	2b00      	cmp	r3, #0
  407352:	d004      	beq.n	40735e <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
  407354:	69bb      	ldr	r3, [r7, #24]
  407356:	3304      	adds	r3, #4
  407358:	4618      	mov	r0, r3
  40735a:	4b31      	ldr	r3, [pc, #196]	; (407420 <prvProcessReceivedCommands+0xf0>)
  40735c:	4798      	blx	r3
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
  40735e:	68bb      	ldr	r3, [r7, #8]
  407360:	2b03      	cmp	r3, #3
  407362:	d84b      	bhi.n	4073fc <prvProcessReceivedCommands+0xcc>
  407364:	a201      	add	r2, pc, #4	; (adr r2, 40736c <prvProcessReceivedCommands+0x3c>)
  407366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40736a:	bf00      	nop
  40736c:	0040737d 	.word	0x0040737d
  407370:	004073ff 	.word	0x004073ff
  407374:	004073cb 	.word	0x004073cb
  407378:	004073f5 	.word	0x004073f5
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  40737c:	68fa      	ldr	r2, [r7, #12]
  40737e:	69bb      	ldr	r3, [r7, #24]
  407380:	699b      	ldr	r3, [r3, #24]
  407382:	18d1      	adds	r1, r2, r3
  407384:	68fb      	ldr	r3, [r7, #12]
  407386:	69fa      	ldr	r2, [r7, #28]
  407388:	69b8      	ldr	r0, [r7, #24]
  40738a:	4c26      	ldr	r4, [pc, #152]	; (407424 <prvProcessReceivedCommands+0xf4>)
  40738c:	47a0      	blx	r4
  40738e:	4603      	mov	r3, r0
  407390:	2b01      	cmp	r3, #1
  407392:	d134      	bne.n	4073fe <prvProcessReceivedCommands+0xce>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  407394:	69bb      	ldr	r3, [r7, #24]
  407396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  407398:	69b8      	ldr	r0, [r7, #24]
  40739a:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  40739c:	69bb      	ldr	r3, [r7, #24]
  40739e:	69db      	ldr	r3, [r3, #28]
  4073a0:	2b01      	cmp	r3, #1
  4073a2:	d12c      	bne.n	4073fe <prvProcessReceivedCommands+0xce>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  4073a4:	68fa      	ldr	r2, [r7, #12]
  4073a6:	69bb      	ldr	r3, [r7, #24]
  4073a8:	699b      	ldr	r3, [r3, #24]
  4073aa:	441a      	add	r2, r3
  4073ac:	2300      	movs	r3, #0
  4073ae:	9300      	str	r3, [sp, #0]
  4073b0:	2300      	movs	r3, #0
  4073b2:	2100      	movs	r1, #0
  4073b4:	69b8      	ldr	r0, [r7, #24]
  4073b6:	4c1c      	ldr	r4, [pc, #112]	; (407428 <prvProcessReceivedCommands+0xf8>)
  4073b8:	47a0      	blx	r4
  4073ba:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
  4073bc:	697b      	ldr	r3, [r7, #20]
  4073be:	2b00      	cmp	r3, #0
  4073c0:	d11d      	bne.n	4073fe <prvProcessReceivedCommands+0xce>
  4073c2:	4b1a      	ldr	r3, [pc, #104]	; (40742c <prvProcessReceivedCommands+0xfc>)
  4073c4:	4798      	blx	r3
  4073c6:	bf00      	nop
  4073c8:	e7fd      	b.n	4073c6 <prvProcessReceivedCommands+0x96>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  4073ca:	68fa      	ldr	r2, [r7, #12]
  4073cc:	69bb      	ldr	r3, [r7, #24]
  4073ce:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4073d0:	69bb      	ldr	r3, [r7, #24]
  4073d2:	699b      	ldr	r3, [r3, #24]
  4073d4:	2b00      	cmp	r3, #0
  4073d6:	d103      	bne.n	4073e0 <prvProcessReceivedCommands+0xb0>
  4073d8:	4b14      	ldr	r3, [pc, #80]	; (40742c <prvProcessReceivedCommands+0xfc>)
  4073da:	4798      	blx	r3
  4073dc:	bf00      	nop
  4073de:	e7fd      	b.n	4073dc <prvProcessReceivedCommands+0xac>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4073e0:	69bb      	ldr	r3, [r7, #24]
  4073e2:	699a      	ldr	r2, [r3, #24]
  4073e4:	69fb      	ldr	r3, [r7, #28]
  4073e6:	18d1      	adds	r1, r2, r3
  4073e8:	69fb      	ldr	r3, [r7, #28]
  4073ea:	69fa      	ldr	r2, [r7, #28]
  4073ec:	69b8      	ldr	r0, [r7, #24]
  4073ee:	4c0d      	ldr	r4, [pc, #52]	; (407424 <prvProcessReceivedCommands+0xf4>)
  4073f0:	47a0      	blx	r4
				break;
  4073f2:	e004      	b.n	4073fe <prvProcessReceivedCommands+0xce>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
  4073f4:	69b8      	ldr	r0, [r7, #24]
  4073f6:	4b0e      	ldr	r3, [pc, #56]	; (407430 <prvProcessReceivedCommands+0x100>)
  4073f8:	4798      	blx	r3
				break;
  4073fa:	e000      	b.n	4073fe <prvProcessReceivedCommands+0xce>

			default	:
				/* Don't expect to get here. */
				break;
  4073fc:	bf00      	nop

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  4073fe:	4b0d      	ldr	r3, [pc, #52]	; (407434 <prvProcessReceivedCommands+0x104>)
  407400:	6818      	ldr	r0, [r3, #0]
  407402:	f107 0108 	add.w	r1, r7, #8
  407406:	2300      	movs	r3, #0
  407408:	2200      	movs	r2, #0
  40740a:	4c0b      	ldr	r4, [pc, #44]	; (407438 <prvProcessReceivedCommands+0x108>)
  40740c:	47a0      	blx	r4
  40740e:	4603      	mov	r3, r0
  407410:	2b00      	cmp	r3, #0
  407412:	d196      	bne.n	407342 <prvProcessReceivedCommands+0x12>
			default	:
				/* Don't expect to get here. */
				break;
		}
	}
}
  407414:	bf00      	nop
  407416:	3724      	adds	r7, #36	; 0x24
  407418:	46bd      	mov	sp, r7
  40741a:	bd90      	pop	{r4, r7, pc}
  40741c:	0040725d 	.word	0x0040725d
  407420:	00405565 	.word	0x00405565
  407424:	004072a9 	.word	0x004072a9
  407428:	00407051 	.word	0x00407051
  40742c:	00405789 	.word	0x00405789
  407430:	00405955 	.word	0x00405955
  407434:	20002e4c 	.word	0x20002e4c
  407438:	00405e65 	.word	0x00405e65

0040743c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
  40743c:	b590      	push	{r4, r7, lr}
  40743e:	b08b      	sub	sp, #44	; 0x2c
  407440:	af02      	add	r7, sp, #8
  407442:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  407444:	e03e      	b.n	4074c4 <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  407446:	4b29      	ldr	r3, [pc, #164]	; (4074ec <prvSwitchTimerLists+0xb0>)
  407448:	681b      	ldr	r3, [r3, #0]
  40744a:	68db      	ldr	r3, [r3, #12]
  40744c:	681b      	ldr	r3, [r3, #0]
  40744e:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  407450:	4b26      	ldr	r3, [pc, #152]	; (4074ec <prvSwitchTimerLists+0xb0>)
  407452:	681b      	ldr	r3, [r3, #0]
  407454:	68db      	ldr	r3, [r3, #12]
  407456:	68db      	ldr	r3, [r3, #12]
  407458:	61bb      	str	r3, [r7, #24]
		uxListRemove( &( pxTimer->xTimerListItem ) );
  40745a:	69bb      	ldr	r3, [r7, #24]
  40745c:	3304      	adds	r3, #4
  40745e:	4618      	mov	r0, r3
  407460:	4b23      	ldr	r3, [pc, #140]	; (4074f0 <prvSwitchTimerLists+0xb4>)
  407462:	4798      	blx	r3

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  407464:	69bb      	ldr	r3, [r7, #24]
  407466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  407468:	69b8      	ldr	r0, [r7, #24]
  40746a:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  40746c:	69bb      	ldr	r3, [r7, #24]
  40746e:	69db      	ldr	r3, [r3, #28]
  407470:	2b01      	cmp	r3, #1
  407472:	d127      	bne.n	4074c4 <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  407474:	69bb      	ldr	r3, [r7, #24]
  407476:	699a      	ldr	r2, [r3, #24]
  407478:	69fb      	ldr	r3, [r7, #28]
  40747a:	4413      	add	r3, r2
  40747c:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
  40747e:	697a      	ldr	r2, [r7, #20]
  407480:	69fb      	ldr	r3, [r7, #28]
  407482:	429a      	cmp	r2, r3
  407484:	d90e      	bls.n	4074a4 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  407486:	69bb      	ldr	r3, [r7, #24]
  407488:	697a      	ldr	r2, [r7, #20]
  40748a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40748c:	69bb      	ldr	r3, [r7, #24]
  40748e:	69ba      	ldr	r2, [r7, #24]
  407490:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  407492:	4b16      	ldr	r3, [pc, #88]	; (4074ec <prvSwitchTimerLists+0xb0>)
  407494:	681a      	ldr	r2, [r3, #0]
  407496:	69bb      	ldr	r3, [r7, #24]
  407498:	3304      	adds	r3, #4
  40749a:	4619      	mov	r1, r3
  40749c:	4610      	mov	r0, r2
  40749e:	4b15      	ldr	r3, [pc, #84]	; (4074f4 <prvSwitchTimerLists+0xb8>)
  4074a0:	4798      	blx	r3
  4074a2:	e00f      	b.n	4074c4 <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  4074a4:	2300      	movs	r3, #0
  4074a6:	9300      	str	r3, [sp, #0]
  4074a8:	2300      	movs	r3, #0
  4074aa:	69fa      	ldr	r2, [r7, #28]
  4074ac:	2100      	movs	r1, #0
  4074ae:	69b8      	ldr	r0, [r7, #24]
  4074b0:	4c11      	ldr	r4, [pc, #68]	; (4074f8 <prvSwitchTimerLists+0xbc>)
  4074b2:	47a0      	blx	r4
  4074b4:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
  4074b6:	693b      	ldr	r3, [r7, #16]
  4074b8:	2b00      	cmp	r3, #0
  4074ba:	d103      	bne.n	4074c4 <prvSwitchTimerLists+0x88>
  4074bc:	4b0f      	ldr	r3, [pc, #60]	; (4074fc <prvSwitchTimerLists+0xc0>)
  4074be:	4798      	blx	r3
  4074c0:	bf00      	nop
  4074c2:	e7fd      	b.n	4074c0 <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4074c4:	4b09      	ldr	r3, [pc, #36]	; (4074ec <prvSwitchTimerLists+0xb0>)
  4074c6:	681b      	ldr	r3, [r3, #0]
  4074c8:	681b      	ldr	r3, [r3, #0]
  4074ca:	2b00      	cmp	r3, #0
  4074cc:	d1bb      	bne.n	407446 <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
  4074ce:	4b07      	ldr	r3, [pc, #28]	; (4074ec <prvSwitchTimerLists+0xb0>)
  4074d0:	681b      	ldr	r3, [r3, #0]
  4074d2:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
  4074d4:	4b0a      	ldr	r3, [pc, #40]	; (407500 <prvSwitchTimerLists+0xc4>)
  4074d6:	681b      	ldr	r3, [r3, #0]
  4074d8:	4a04      	ldr	r2, [pc, #16]	; (4074ec <prvSwitchTimerLists+0xb0>)
  4074da:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
  4074dc:	4a08      	ldr	r2, [pc, #32]	; (407500 <prvSwitchTimerLists+0xc4>)
  4074de:	68fb      	ldr	r3, [r7, #12]
  4074e0:	6013      	str	r3, [r2, #0]
}
  4074e2:	bf00      	nop
  4074e4:	3724      	adds	r7, #36	; 0x24
  4074e6:	46bd      	mov	sp, r7
  4074e8:	bd90      	pop	{r4, r7, pc}
  4074ea:	bf00      	nop
  4074ec:	20002e44 	.word	0x20002e44
  4074f0:	00405565 	.word	0x00405565
  4074f4:	004054f5 	.word	0x004054f5
  4074f8:	00407051 	.word	0x00407051
  4074fc:	00405789 	.word	0x00405789
  407500:	20002e48 	.word	0x20002e48

00407504 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  407504:	b580      	push	{r7, lr}
  407506:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  407508:	4b0e      	ldr	r3, [pc, #56]	; (407544 <prvCheckForValidListAndQueue+0x40>)
  40750a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  40750c:	4b0e      	ldr	r3, [pc, #56]	; (407548 <prvCheckForValidListAndQueue+0x44>)
  40750e:	681b      	ldr	r3, [r3, #0]
  407510:	2b00      	cmp	r3, #0
  407512:	d113      	bne.n	40753c <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
  407514:	480d      	ldr	r0, [pc, #52]	; (40754c <prvCheckForValidListAndQueue+0x48>)
  407516:	4b0e      	ldr	r3, [pc, #56]	; (407550 <prvCheckForValidListAndQueue+0x4c>)
  407518:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
  40751a:	480e      	ldr	r0, [pc, #56]	; (407554 <prvCheckForValidListAndQueue+0x50>)
  40751c:	4b0c      	ldr	r3, [pc, #48]	; (407550 <prvCheckForValidListAndQueue+0x4c>)
  40751e:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
  407520:	4b0d      	ldr	r3, [pc, #52]	; (407558 <prvCheckForValidListAndQueue+0x54>)
  407522:	4a0a      	ldr	r2, [pc, #40]	; (40754c <prvCheckForValidListAndQueue+0x48>)
  407524:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  407526:	4b0d      	ldr	r3, [pc, #52]	; (40755c <prvCheckForValidListAndQueue+0x58>)
  407528:	4a0a      	ldr	r2, [pc, #40]	; (407554 <prvCheckForValidListAndQueue+0x50>)
  40752a:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  40752c:	2200      	movs	r2, #0
  40752e:	210c      	movs	r1, #12
  407530:	2005      	movs	r0, #5
  407532:	4b0b      	ldr	r3, [pc, #44]	; (407560 <prvCheckForValidListAndQueue+0x5c>)
  407534:	4798      	blx	r3
  407536:	4602      	mov	r2, r0
  407538:	4b03      	ldr	r3, [pc, #12]	; (407548 <prvCheckForValidListAndQueue+0x44>)
  40753a:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
  40753c:	4b09      	ldr	r3, [pc, #36]	; (407564 <prvCheckForValidListAndQueue+0x60>)
  40753e:	4798      	blx	r3
}
  407540:	bf00      	nop
  407542:	bd80      	pop	{r7, pc}
  407544:	00405741 	.word	0x00405741
  407548:	20002e4c 	.word	0x20002e4c
  40754c:	20002e1c 	.word	0x20002e1c
  407550:	0040544d 	.word	0x0040544d
  407554:	20002e30 	.word	0x20002e30
  407558:	20002e44 	.word	0x20002e44
  40755c:	20002e48 	.word	0x20002e48
  407560:	00405bb1 	.word	0x00405bb1
  407564:	00405761 	.word	0x00405761

00407568 <vCommTask>:

void WriteMbusRegs(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len);
void SendRespPkt(uint8_t *pkt, uint8_t len);

void vCommTask(void *pvParameters)
{
  407568:	b590      	push	{r4, r7, lr}
  40756a:	b0d3      	sub	sp, #332	; 0x14c
  40756c:	af02      	add	r7, sp, #8
  40756e:	1d3b      	adds	r3, r7, #4
  407570:	6018      	str	r0, [r3, #0]
    
	/* RS485 Rx buffer */
	uint8_t rs485RxBuffer[RS485_BUFFER_SIZE];
	/* RS485 Tx buffer */
    uint8_t respBuff[RS485_BUFFER_SIZE], respLen = 0;
  407572:	f107 030b 	add.w	r3, r7, #11
  407576:	2200      	movs	r2, #0
  407578:	701a      	strb	r2, [r3, #0]
    uint8_t commState = 0, recvdBytes = 0, prevRecvdBytes;
  40757a:	2300      	movs	r3, #0
  40757c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
  407580:	2300      	movs	r3, #0
  407582:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
    /* Init Mbus writeFunc() ptr */
    writeFunc = WriteMbusRegs;
  407586:	4b40      	ldr	r3, [pc, #256]	; (407688 <vCommTask+0x120>)
  407588:	4a40      	ldr	r2, [pc, #256]	; (40768c <vCommTask+0x124>)
  40758a:	601a      	str	r2, [r3, #0]
	
	/* Start Receiving Data */
	usart_disable_tx(RS485_USART);
  40758c:	4840      	ldr	r0, [pc, #256]	; (407690 <vCommTask+0x128>)
  40758e:	4b41      	ldr	r3, [pc, #260]	; (407694 <vCommTask+0x12c>)
  407590:	4798      	blx	r3
	usart_enable_rx(RS485_USART);
  407592:	483f      	ldr	r0, [pc, #252]	; (407690 <vCommTask+0x128>)
  407594:	4b40      	ldr	r3, [pc, #256]	; (407698 <vCommTask+0x130>)
  407596:	4798      	blx	r3
	Rs485PdcStartRx((uint32_t)rs485RxBuffer,RS485_BUFFER_SIZE);
  407598:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
  40759c:	2196      	movs	r1, #150	; 0x96
  40759e:	4618      	mov	r0, r3
  4075a0:	4b3e      	ldr	r3, [pc, #248]	; (40769c <vCommTask+0x134>)
  4075a2:	4798      	blx	r3

    while(1)
    {
        /* Sleep for some time and check if data recvd */
        //vTaskDelay(pdMS_TO_TICKS(40));
		vTaskDelay(40);
  4075a4:	2028      	movs	r0, #40	; 0x28
  4075a6:	4b3e      	ldr	r3, [pc, #248]	; (4076a0 <vCommTask+0x138>)
  4075a8:	4798      	blx	r3
        
		recvdBytes = Rs485PdcGetRxBytes();
  4075aa:	4b3e      	ldr	r3, [pc, #248]	; (4076a4 <vCommTask+0x13c>)
  4075ac:	4798      	blx	r3
  4075ae:	4603      	mov	r3, r0
  4075b0:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
		/* Check if data received on 485 */
		switch(commState)
  4075b4:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
  4075b8:	2b00      	cmp	r3, #0
  4075ba:	d002      	beq.n	4075c2 <vCommTask+0x5a>
  4075bc:	2b01      	cmp	r3, #1
  4075be:	d00c      	beq.n	4075da <vCommTask+0x72>
  4075c0:	e061      	b.n	407686 <vCommTask+0x11e>
		{
			case 0:
				if(recvdBytes!=0)
  4075c2:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
  4075c6:	2b00      	cmp	r3, #0
  4075c8:	d05c      	beq.n	407684 <vCommTask+0x11c>
				{
					commState = 1;
  4075ca:	2301      	movs	r3, #1
  4075cc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
					prevRecvdBytes = recvdBytes;
  4075d0:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
  4075d4:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
				}
				break;
  4075d8:	e054      	b.n	407684 <vCommTask+0x11c>
			case 1:
				if(prevRecvdBytes != recvdBytes)
  4075da:	f897 213e 	ldrb.w	r2, [r7, #318]	; 0x13e
  4075de:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
  4075e2:	429a      	cmp	r2, r3
  4075e4:	d004      	beq.n	4075f0 <vCommTask+0x88>
				{
					prevRecvdBytes = recvdBytes;
  4075e6:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
  4075ea:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
					
					usart_enable_rx(RS485_USART);
					pdc_enable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN);
					Rs485PdcStartRx((uint32_t)rs485RxBuffer,RS485_BUFFER_SIZE);
				}
				break;
  4075ee:	e04a      	b.n	407686 <vCommTask+0x11e>
					prevRecvdBytes = recvdBytes;
				}
				else
				{
					/* 1 Modbus Pkt received. Process it. */
					usart_disable_rx(RS485_USART);
  4075f0:	4827      	ldr	r0, [pc, #156]	; (407690 <vCommTask+0x128>)
  4075f2:	4b2d      	ldr	r3, [pc, #180]	; (4076a8 <vCommTask+0x140>)
  4075f4:	4798      	blx	r3
					pdc_disable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN);
  4075f6:	4b2d      	ldr	r3, [pc, #180]	; (4076ac <vCommTask+0x144>)
  4075f8:	681b      	ldr	r3, [r3, #0]
  4075fa:	2101      	movs	r1, #1
  4075fc:	4618      	mov	r0, r3
  4075fe:	4b2c      	ldr	r3, [pc, #176]	; (4076b0 <vCommTask+0x148>)
  407600:	4798      	blx	r3

					/* Parse Received MBUS Pkt, update actual variables */
					ParseMbusPkt(slaveAddr, rs485RxBuffer, recvdBytes, respBuff, &respLen);
  407602:	4b2c      	ldr	r3, [pc, #176]	; (4076b4 <vCommTask+0x14c>)
  407604:	7818      	ldrb	r0, [r3, #0]
  407606:	f107 040c 	add.w	r4, r7, #12
  40760a:	f897 213d 	ldrb.w	r2, [r7, #317]	; 0x13d
  40760e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
  407612:	f107 030b 	add.w	r3, r7, #11
  407616:	9300      	str	r3, [sp, #0]
  407618:	4623      	mov	r3, r4
  40761a:	4c27      	ldr	r4, [pc, #156]	; (4076b8 <vCommTask+0x150>)
  40761c:	47a0      	blx	r4
				
					/* Generate MBus Resp */
					if(respLen)
  40761e:	f107 030b 	add.w	r3, r7, #11
  407622:	781b      	ldrb	r3, [r3, #0]
  407624:	2b00      	cmp	r3, #0
  407626:	d008      	beq.n	40763a <vCommTask+0xd2>
					{
						SendRespPkt(respBuff, respLen);
  407628:	f107 030b 	add.w	r3, r7, #11
  40762c:	781a      	ldrb	r2, [r3, #0]
  40762e:	f107 030c 	add.w	r3, r7, #12
  407632:	4611      	mov	r1, r2
  407634:	4618      	mov	r0, r3
  407636:	4b21      	ldr	r3, [pc, #132]	; (4076bc <vCommTask+0x154>)
  407638:	4798      	blx	r3
					}
					
					memset((uint8_t *)rs485RxBuffer,0,sizeof(rs485RxBuffer));
  40763a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
  40763e:	2296      	movs	r2, #150	; 0x96
  407640:	2100      	movs	r1, #0
  407642:	4618      	mov	r0, r3
  407644:	4b1e      	ldr	r3, [pc, #120]	; (4076c0 <vCommTask+0x158>)
  407646:	4798      	blx	r3
					memset(respBuff,0,sizeof(respBuff));
  407648:	f107 030c 	add.w	r3, r7, #12
  40764c:	2296      	movs	r2, #150	; 0x96
  40764e:	2100      	movs	r1, #0
  407650:	4618      	mov	r0, r3
  407652:	4b1b      	ldr	r3, [pc, #108]	; (4076c0 <vCommTask+0x158>)
  407654:	4798      	blx	r3
					respLen = 0;
  407656:	f107 030b 	add.w	r3, r7, #11
  40765a:	2200      	movs	r2, #0
  40765c:	701a      	strb	r2, [r3, #0]
					commState = 0;
  40765e:	2300      	movs	r3, #0
  407660:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
					
					usart_enable_rx(RS485_USART);
  407664:	480a      	ldr	r0, [pc, #40]	; (407690 <vCommTask+0x128>)
  407666:	4b0c      	ldr	r3, [pc, #48]	; (407698 <vCommTask+0x130>)
  407668:	4798      	blx	r3
					pdc_enable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN);
  40766a:	4b10      	ldr	r3, [pc, #64]	; (4076ac <vCommTask+0x144>)
  40766c:	681b      	ldr	r3, [r3, #0]
  40766e:	2101      	movs	r1, #1
  407670:	4618      	mov	r0, r3
  407672:	4b14      	ldr	r3, [pc, #80]	; (4076c4 <vCommTask+0x15c>)
  407674:	4798      	blx	r3
					Rs485PdcStartRx((uint32_t)rs485RxBuffer,RS485_BUFFER_SIZE);
  407676:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
  40767a:	2196      	movs	r1, #150	; 0x96
  40767c:	4618      	mov	r0, r3
  40767e:	4b07      	ldr	r3, [pc, #28]	; (40769c <vCommTask+0x134>)
  407680:	4798      	blx	r3
				}
				break;
  407682:	e000      	b.n	407686 <vCommTask+0x11e>
				if(recvdBytes!=0)
				{
					commState = 1;
					prevRecvdBytes = recvdBytes;
				}
				break;
  407684:	bf00      	nop
					pdc_enable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN);
					Rs485PdcStartRx((uint32_t)rs485RxBuffer,RS485_BUFFER_SIZE);
				}
				break;
		}
    }
  407686:	e78d      	b.n	4075a4 <vCommTask+0x3c>
  407688:	20002e94 	.word	0x20002e94
  40768c:	004076d9 	.word	0x004076d9
  407690:	40028000 	.word	0x40028000
  407694:	00403e65 	.word	0x00403e65
  407698:	00403e95 	.word	0x00403e95
  40769c:	00402fd9 	.word	0x00402fd9
  4076a0:	00406479 	.word	0x00406479
  4076a4:	00403015 	.word	0x00403015
  4076a8:	00403ead 	.word	0x00403ead
  4076ac:	20002f14 	.word	0x20002f14
  4076b0:	00403759 	.word	0x00403759
  4076b4:	20000128 	.word	0x20000128
  4076b8:	00400d0d 	.word	0x00400d0d
  4076bc:	0040799d 	.word	0x0040799d
  4076c0:	0040ba3d 	.word	0x0040ba3d
  4076c4:	00403739 	.word	0x00403739

004076c8 <vCommInit>:
}

void vCommInit(void)
{
  4076c8:	b580      	push	{r7, lr}
  4076ca:	af00      	add	r7, sp, #0
    /* Init RS485 port with PDC support */
    InitRs485Pdc();
  4076cc:	4b01      	ldr	r3, [pc, #4]	; (4076d4 <vCommInit+0xc>)
  4076ce:	4798      	blx	r3
}
  4076d0:	bf00      	nop
  4076d2:	bd80      	pop	{r7, pc}
  4076d4:	00402f19 	.word	0x00402f19

004076d8 <WriteMbusRegs>:

void WriteMbusRegs(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len)
{
  4076d8:	b590      	push	{r4, r7, lr}
  4076da:	b085      	sub	sp, #20
  4076dc:	af00      	add	r7, sp, #0
  4076de:	6078      	str	r0, [r7, #4]
  4076e0:	460b      	mov	r3, r1
  4076e2:	70fb      	strb	r3, [r7, #3]
  4076e4:	4613      	mov	r3, r2
  4076e6:	70bb      	strb	r3, [r7, #2]
    uint16_t *ptr;
    
    while(len)
  4076e8:	e11f      	b.n	40792a <WriteMbusRegs+0x252>
    {
        switch(regAddr)
  4076ea:	78fb      	ldrb	r3, [r7, #3]
  4076ec:	2b23      	cmp	r3, #35	; 0x23
  4076ee:	f200 8115 	bhi.w	40791c <WriteMbusRegs+0x244>
  4076f2:	a201      	add	r2, pc, #4	; (adr r2, 4076f8 <WriteMbusRegs+0x20>)
  4076f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4076f8:	00407789 	.word	0x00407789
  4076fc:	0040779f 	.word	0x0040779f
  407700:	004077b5 	.word	0x004077b5
  407704:	004077cb 	.word	0x004077cb
  407708:	004077e1 	.word	0x004077e1
  40770c:	004077f7 	.word	0x004077f7
  407710:	0040780d 	.word	0x0040780d
  407714:	0040791d 	.word	0x0040791d
  407718:	0040791d 	.word	0x0040791d
  40771c:	00407823 	.word	0x00407823
  407720:	0040791d 	.word	0x0040791d
  407724:	00407847 	.word	0x00407847
  407728:	0040791d 	.word	0x0040791d
  40772c:	0040786b 	.word	0x0040786b
  407730:	0040791d 	.word	0x0040791d
  407734:	0040791d 	.word	0x0040791d
  407738:	0040791d 	.word	0x0040791d
  40773c:	0040791d 	.word	0x0040791d
  407740:	0040791d 	.word	0x0040791d
  407744:	0040788f 	.word	0x0040788f
  407748:	0040791d 	.word	0x0040791d
  40774c:	0040791d 	.word	0x0040791d
  407750:	0040791d 	.word	0x0040791d
  407754:	0040791d 	.word	0x0040791d
  407758:	00407903 	.word	0x00407903
  40775c:	0040791d 	.word	0x0040791d
  407760:	0040791d 	.word	0x0040791d
  407764:	0040791d 	.word	0x0040791d
  407768:	0040791d 	.word	0x0040791d
  40776c:	0040791d 	.word	0x0040791d
  407770:	0040791d 	.word	0x0040791d
  407774:	0040791d 	.word	0x0040791d
  407778:	0040791d 	.word	0x0040791d
  40777c:	004078b3 	.word	0x004078b3
  407780:	0040791d 	.word	0x0040791d
  407784:	004078db 	.word	0x004078db
        {
            case MBUS_REG_SEC:
				#ifndef DS3231_USE_RTOS_API
					DSSetSecs(BOARD_TWI, mbusBuff[regAddr]);
  407788:	78fb      	ldrb	r3, [r7, #3]
  40778a:	005b      	lsls	r3, r3, #1
  40778c:	687a      	ldr	r2, [r7, #4]
  40778e:	4413      	add	r3, r2
  407790:	881b      	ldrh	r3, [r3, #0]
  407792:	b2db      	uxtb	r3, r3
  407794:	4619      	mov	r1, r3
  407796:	4869      	ldr	r0, [pc, #420]	; (40793c <WriteMbusRegs+0x264>)
  407798:	4b69      	ldr	r3, [pc, #420]	; (407940 <WriteMbusRegs+0x268>)
  40779a:	4798      	blx	r3
				#else
					DSSetSecsTo(twiPort, mbusBuff[regAddr],50);
				#endif
                break;
  40779c:	e0bf      	b.n	40791e <WriteMbusRegs+0x246>
            case MBUS_REG_MIN:
				#ifndef DS3231_USE_RTOS_API
					DSSetMins(BOARD_TWI, mbusBuff[regAddr]);
  40779e:	78fb      	ldrb	r3, [r7, #3]
  4077a0:	005b      	lsls	r3, r3, #1
  4077a2:	687a      	ldr	r2, [r7, #4]
  4077a4:	4413      	add	r3, r2
  4077a6:	881b      	ldrh	r3, [r3, #0]
  4077a8:	b2db      	uxtb	r3, r3
  4077aa:	4619      	mov	r1, r3
  4077ac:	4863      	ldr	r0, [pc, #396]	; (40793c <WriteMbusRegs+0x264>)
  4077ae:	4b65      	ldr	r3, [pc, #404]	; (407944 <WriteMbusRegs+0x26c>)
  4077b0:	4798      	blx	r3
				#else
					DSSetMinsTo(twiPort, mbusBuff[regAddr],50);
				#endif
                break;
  4077b2:	e0b4      	b.n	40791e <WriteMbusRegs+0x246>
            case MBUS_REG_HRS:
				#ifndef DS3231_USE_RTOS_API
					DSSetHrs(BOARD_TWI, mbusBuff[regAddr]);
  4077b4:	78fb      	ldrb	r3, [r7, #3]
  4077b6:	005b      	lsls	r3, r3, #1
  4077b8:	687a      	ldr	r2, [r7, #4]
  4077ba:	4413      	add	r3, r2
  4077bc:	881b      	ldrh	r3, [r3, #0]
  4077be:	b2db      	uxtb	r3, r3
  4077c0:	4619      	mov	r1, r3
  4077c2:	485e      	ldr	r0, [pc, #376]	; (40793c <WriteMbusRegs+0x264>)
  4077c4:	4b60      	ldr	r3, [pc, #384]	; (407948 <WriteMbusRegs+0x270>)
  4077c6:	4798      	blx	r3
				#else
					DSSetHrsTo(twiPort, mbusBuff[regAddr],50);
				#endif
                break;
  4077c8:	e0a9      	b.n	40791e <WriteMbusRegs+0x246>
            case MBUS_REG_DAY:
				#ifndef DS3231_USE_RTOS_API
					DSSetDay(BOARD_TWI, mbusBuff[regAddr]);
  4077ca:	78fb      	ldrb	r3, [r7, #3]
  4077cc:	005b      	lsls	r3, r3, #1
  4077ce:	687a      	ldr	r2, [r7, #4]
  4077d0:	4413      	add	r3, r2
  4077d2:	881b      	ldrh	r3, [r3, #0]
  4077d4:	b2db      	uxtb	r3, r3
  4077d6:	4619      	mov	r1, r3
  4077d8:	4858      	ldr	r0, [pc, #352]	; (40793c <WriteMbusRegs+0x264>)
  4077da:	4b5c      	ldr	r3, [pc, #368]	; (40794c <WriteMbusRegs+0x274>)
  4077dc:	4798      	blx	r3
				#else
					DSSetDayTo(twiPort, mbusBuff[regAddr],50);
				#endif
                break;
  4077de:	e09e      	b.n	40791e <WriteMbusRegs+0x246>
            case MBUS_REG_DD:
				#ifndef DS3231_USE_RTOS_API
					DSSetDate(BOARD_TWI, mbusBuff[regAddr]);
  4077e0:	78fb      	ldrb	r3, [r7, #3]
  4077e2:	005b      	lsls	r3, r3, #1
  4077e4:	687a      	ldr	r2, [r7, #4]
  4077e6:	4413      	add	r3, r2
  4077e8:	881b      	ldrh	r3, [r3, #0]
  4077ea:	b2db      	uxtb	r3, r3
  4077ec:	4619      	mov	r1, r3
  4077ee:	4853      	ldr	r0, [pc, #332]	; (40793c <WriteMbusRegs+0x264>)
  4077f0:	4b57      	ldr	r3, [pc, #348]	; (407950 <WriteMbusRegs+0x278>)
  4077f2:	4798      	blx	r3
				#else
					DSSetDateTo(twiPort, mbusBuff[regAddr],50);
				#endif
                break;
  4077f4:	e093      	b.n	40791e <WriteMbusRegs+0x246>
            case MBUS_REG_MM:
				#ifndef DS3231_USE_RTOS_API
					DSSetMonth(BOARD_TWI, mbusBuff[regAddr]);
  4077f6:	78fb      	ldrb	r3, [r7, #3]
  4077f8:	005b      	lsls	r3, r3, #1
  4077fa:	687a      	ldr	r2, [r7, #4]
  4077fc:	4413      	add	r3, r2
  4077fe:	881b      	ldrh	r3, [r3, #0]
  407800:	b2db      	uxtb	r3, r3
  407802:	4619      	mov	r1, r3
  407804:	484d      	ldr	r0, [pc, #308]	; (40793c <WriteMbusRegs+0x264>)
  407806:	4b53      	ldr	r3, [pc, #332]	; (407954 <WriteMbusRegs+0x27c>)
  407808:	4798      	blx	r3
				#else
					DSSetMonthTo(twiPort, mbusBuff[regAddr],50);
				#endif
                break;
  40780a:	e088      	b.n	40791e <WriteMbusRegs+0x246>
            case MBUS_REG_YY:
				#ifndef DS3231_USE_RTOS_API
					DSSetYear(BOARD_TWI, mbusBuff[regAddr]);
  40780c:	78fb      	ldrb	r3, [r7, #3]
  40780e:	005b      	lsls	r3, r3, #1
  407810:	687a      	ldr	r2, [r7, #4]
  407812:	4413      	add	r3, r2
  407814:	881b      	ldrh	r3, [r3, #0]
  407816:	b2db      	uxtb	r3, r3
  407818:	4619      	mov	r1, r3
  40781a:	4848      	ldr	r0, [pc, #288]	; (40793c <WriteMbusRegs+0x264>)
  40781c:	4b4e      	ldr	r3, [pc, #312]	; (407958 <WriteMbusRegs+0x280>)
  40781e:	4798      	blx	r3
				#else
					DSSetYearTo(twiPort, mbusBuff[regAddr],50);
				#endif
                break;
  407820:	e07d      	b.n	40791e <WriteMbusRegs+0x246>
            case MBUS_REG_LATH:
                ptr = (uint16_t*)&lat;
  407822:	4b4e      	ldr	r3, [pc, #312]	; (40795c <WriteMbusRegs+0x284>)
  407824:	60fb      	str	r3, [r7, #12]
                ptr[1] = mBusRegs[MBUS_REG_LATH];
  407826:	68fb      	ldr	r3, [r7, #12]
  407828:	3302      	adds	r3, #2
  40782a:	4a4d      	ldr	r2, [pc, #308]	; (407960 <WriteMbusRegs+0x288>)
  40782c:	8a52      	ldrh	r2, [r2, #18]
  40782e:	801a      	strh	r2, [r3, #0]
                ptr[0] = mBusRegs[MBUS_REG_LATL];
  407830:	4b4b      	ldr	r3, [pc, #300]	; (407960 <WriteMbusRegs+0x288>)
  407832:	8a1a      	ldrh	r2, [r3, #16]
  407834:	68fb      	ldr	r3, [r7, #12]
  407836:	801a      	strh	r2, [r3, #0]
                //Write to EEPROM
//                 EEPROM0_WriteByte(mBusRegs[MBUS_REG_LATL], EE_REG_LAT0);
//                 EEPROM0_WriteByte((mBusRegs[MBUS_REG_LATL]>>8), EE_REG_LAT1);
//                 EEPROM0_WriteByte(mBusRegs[MBUS_REG_LATH], EE_REG_LAT2);
//                 EEPROM0_WriteByte((mBusRegs[MBUS_REG_LATH]>>8), EE_REG_LAT3);
				nvm_write(INT_FLASH, EE_REG_LAT0, (void *)&mBusRegs[MBUS_REG_LATL], 4);
  407838:	2304      	movs	r3, #4
  40783a:	4a4a      	ldr	r2, [pc, #296]	; (407964 <WriteMbusRegs+0x28c>)
  40783c:	2100      	movs	r1, #0
  40783e:	2000      	movs	r0, #0
  407840:	4c49      	ldr	r4, [pc, #292]	; (407968 <WriteMbusRegs+0x290>)
  407842:	47a0      	blx	r4

                break;
  407844:	e06b      	b.n	40791e <WriteMbusRegs+0x246>
            case MBUS_REG_LONH:
                ptr = (uint16_t*)&lon;
  407846:	4b49      	ldr	r3, [pc, #292]	; (40796c <WriteMbusRegs+0x294>)
  407848:	60fb      	str	r3, [r7, #12]
                ptr[1] = mBusRegs[MBUS_REG_LONH];
  40784a:	68fb      	ldr	r3, [r7, #12]
  40784c:	3302      	adds	r3, #2
  40784e:	4a44      	ldr	r2, [pc, #272]	; (407960 <WriteMbusRegs+0x288>)
  407850:	8ad2      	ldrh	r2, [r2, #22]
  407852:	801a      	strh	r2, [r3, #0]
                ptr[0] = mBusRegs[MBUS_REG_LONL];
  407854:	4b42      	ldr	r3, [pc, #264]	; (407960 <WriteMbusRegs+0x288>)
  407856:	8a9a      	ldrh	r2, [r3, #20]
  407858:	68fb      	ldr	r3, [r7, #12]
  40785a:	801a      	strh	r2, [r3, #0]
                //Write to EEPROM
//                 EEPROM0_WriteByte(mBusRegs[MBUS_REG_LONL], EE_REG_LON0);
//                 EEPROM0_WriteByte((mBusRegs[MBUS_REG_LONL]>>8), EE_REG_LON1);
//                 EEPROM0_WriteByte(mBusRegs[MBUS_REG_LONH], EE_REG_LON2);
//                 EEPROM0_WriteByte((mBusRegs[MBUS_REG_LONH]>>8), EE_REG_LON3);
				nvm_write(INT_FLASH, EE_REG_LON0, (void *)&mBusRegs[MBUS_REG_LONL], 4);
  40785c:	2304      	movs	r3, #4
  40785e:	4a44      	ldr	r2, [pc, #272]	; (407970 <WriteMbusRegs+0x298>)
  407860:	2104      	movs	r1, #4
  407862:	2000      	movs	r0, #0
  407864:	4c40      	ldr	r4, [pc, #256]	; (407968 <WriteMbusRegs+0x290>)
  407866:	47a0      	blx	r4
                break;
  407868:	e059      	b.n	40791e <WriteMbusRegs+0x246>
            case MBUS_REG_TZH:
                ptr = (uint16_t*)&timeZone;
  40786a:	4b42      	ldr	r3, [pc, #264]	; (407974 <WriteMbusRegs+0x29c>)
  40786c:	60fb      	str	r3, [r7, #12]
                ptr[1] = mBusRegs[MBUS_REG_TZH];
  40786e:	68fb      	ldr	r3, [r7, #12]
  407870:	3302      	adds	r3, #2
  407872:	4a3b      	ldr	r2, [pc, #236]	; (407960 <WriteMbusRegs+0x288>)
  407874:	8b52      	ldrh	r2, [r2, #26]
  407876:	801a      	strh	r2, [r3, #0]
                ptr[0] = mBusRegs[MBUS_REG_TZL];
  407878:	4b39      	ldr	r3, [pc, #228]	; (407960 <WriteMbusRegs+0x288>)
  40787a:	8b1a      	ldrh	r2, [r3, #24]
  40787c:	68fb      	ldr	r3, [r7, #12]
  40787e:	801a      	strh	r2, [r3, #0]
                //Write to EEPROM
//                 EEPROM0_WriteByte(mBusRegs[MBUS_REG_TZL], EE_REG_TZ0);
//                 EEPROM0_WriteByte((mBusRegs[MBUS_REG_TZL]>>8), EE_REG_TZ1);
//                 EEPROM0_WriteByte(mBusRegs[MBUS_REG_TZH], EE_REG_TZ2);
//                 EEPROM0_WriteByte((mBusRegs[MBUS_REG_TZH]>>8), EE_REG_TZ3);
				nvm_write(INT_FLASH, EE_REG_TZ0, (void *)&mBusRegs[MBUS_REG_TZL], 4);
  407880:	2304      	movs	r3, #4
  407882:	4a3d      	ldr	r2, [pc, #244]	; (407978 <WriteMbusRegs+0x2a0>)
  407884:	2108      	movs	r1, #8
  407886:	2000      	movs	r0, #0
  407888:	4c37      	ldr	r4, [pc, #220]	; (407968 <WriteMbusRegs+0x290>)
  40788a:	47a0      	blx	r4
                break;
  40788c:	e047      	b.n	40791e <WriteMbusRegs+0x246>
            case MBUS_REG_REFRH:
                break;
            case MBUS_REG_PNLRNGH:
                ptr = (uint16_t*)&pvAngleRng;
  40788e:	4b3b      	ldr	r3, [pc, #236]	; (40797c <WriteMbusRegs+0x2a4>)
  407890:	60fb      	str	r3, [r7, #12]
                ptr[1] = mBusRegs[MBUS_REG_PNLRNGH];
  407892:	68fb      	ldr	r3, [r7, #12]
  407894:	3302      	adds	r3, #2
  407896:	4a32      	ldr	r2, [pc, #200]	; (407960 <WriteMbusRegs+0x288>)
  407898:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
  40789a:	801a      	strh	r2, [r3, #0]
                ptr[0] = mBusRegs[MBUS_REG_PNLRNGL];
  40789c:	4b30      	ldr	r3, [pc, #192]	; (407960 <WriteMbusRegs+0x288>)
  40789e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
  4078a0:	68fb      	ldr	r3, [r7, #12]
  4078a2:	801a      	strh	r2, [r3, #0]
                //Write to EEPROM
//                 EEPROM0_WriteByte(mBusRegs[MBUS_REG_PNLRNGL], EE_REG_PNLRNG0);
//                 EEPROM0_WriteByte((mBusRegs[MBUS_REG_PNLRNGL]>>8), EE_REG_PNLRNG1);
//                 EEPROM0_WriteByte(mBusRegs[MBUS_REG_PNLRNGH], EE_REG_PNLRNG2);
//                 EEPROM0_WriteByte((mBusRegs[MBUS_REG_PNLRNGH]>>8), EE_REG_PNLRNG3);
				nvm_write(INT_FLASH, EE_REG_PNLRNG0, (void *)&mBusRegs[MBUS_REG_PNLRNGL], 4);
  4078a4:	2304      	movs	r3, #4
  4078a6:	4a36      	ldr	r2, [pc, #216]	; (407980 <WriteMbusRegs+0x2a8>)
  4078a8:	2114      	movs	r1, #20
  4078aa:	2000      	movs	r0, #0
  4078ac:	4c2e      	ldr	r4, [pc, #184]	; (407968 <WriteMbusRegs+0x290>)
  4078ae:	47a0      	blx	r4
                break;
  4078b0:	e035      	b.n	40791e <WriteMbusRegs+0x246>
            case MBUS_REG_DISTH:
                ptr = (uint16_t*)&dist;
  4078b2:	4b34      	ldr	r3, [pc, #208]	; (407984 <WriteMbusRegs+0x2ac>)
  4078b4:	60fb      	str	r3, [r7, #12]
                ptr[1] = mBusRegs[MBUS_REG_DISTH];
  4078b6:	68fb      	ldr	r3, [r7, #12]
  4078b8:	3302      	adds	r3, #2
  4078ba:	4a29      	ldr	r2, [pc, #164]	; (407960 <WriteMbusRegs+0x288>)
  4078bc:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
  4078c0:	801a      	strh	r2, [r3, #0]
                ptr[0] = mBusRegs[MBUS_REG_DISTL];
  4078c2:	4b27      	ldr	r3, [pc, #156]	; (407960 <WriteMbusRegs+0x288>)
  4078c4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
  4078c8:	68fb      	ldr	r3, [r7, #12]
  4078ca:	801a      	strh	r2, [r3, #0]
                //Write to EEPROM
//                 EEPROM0_WriteByte(mBusRegs[MBUS_REG_DISTL], EE_REG_DIST0);
//                 EEPROM0_WriteByte((mBusRegs[MBUS_REG_DISTL]>>8), EE_REG_DIST1);
//                 EEPROM0_WriteByte(mBusRegs[MBUS_REG_DISTH], EE_REG_DIST2);
//                 EEPROM0_WriteByte((mBusRegs[MBUS_REG_DISTH]>>8), EE_REG_DIST3);
				nvm_write(INT_FLASH, EE_REG_DIST0, (void *)&mBusRegs[MBUS_REG_DISTL], 4);
  4078cc:	2304      	movs	r3, #4
  4078ce:	4a2e      	ldr	r2, [pc, #184]	; (407988 <WriteMbusRegs+0x2b0>)
  4078d0:	210c      	movs	r1, #12
  4078d2:	2000      	movs	r0, #0
  4078d4:	4c24      	ldr	r4, [pc, #144]	; (407968 <WriteMbusRegs+0x290>)
  4078d6:	47a0      	blx	r4
                break;
  4078d8:	e021      	b.n	40791e <WriteMbusRegs+0x246>
            case MBUS_REG_WIDTHH:
                ptr = (uint16_t*)&width;
  4078da:	4b2c      	ldr	r3, [pc, #176]	; (40798c <WriteMbusRegs+0x2b4>)
  4078dc:	60fb      	str	r3, [r7, #12]
                ptr[1] = mBusRegs[MBUS_REG_WIDTHH];
  4078de:	68fb      	ldr	r3, [r7, #12]
  4078e0:	3302      	adds	r3, #2
  4078e2:	4a1f      	ldr	r2, [pc, #124]	; (407960 <WriteMbusRegs+0x288>)
  4078e4:	f8b2 2046 	ldrh.w	r2, [r2, #70]	; 0x46
  4078e8:	801a      	strh	r2, [r3, #0]
                ptr[0] = mBusRegs[MBUS_REG_WIDTHL];
  4078ea:	4b1d      	ldr	r3, [pc, #116]	; (407960 <WriteMbusRegs+0x288>)
  4078ec:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
  4078f0:	68fb      	ldr	r3, [r7, #12]
  4078f2:	801a      	strh	r2, [r3, #0]
                //Write to EEPROM
//                 EEPROM0_WriteByte(mBusRegs[MBUS_REG_WIDTHL], EE_REG_WIDTH0);
//                 EEPROM0_WriteByte((mBusRegs[MBUS_REG_WIDTHL]>>8), EE_REG_WIDTH1);
//                 EEPROM0_WriteByte(mBusRegs[MBUS_REG_WIDTHH], EE_REG_WIDTH2);
//                 EEPROM0_WriteByte((mBusRegs[MBUS_REG_WIDTHH]>>8), EE_REG_WIDTH3);
				nvm_write(INT_FLASH, EE_REG_WIDTH0, (void *)&mBusRegs[MBUS_REG_WIDTHL], 4);
  4078f4:	2304      	movs	r3, #4
  4078f6:	4a26      	ldr	r2, [pc, #152]	; (407990 <WriteMbusRegs+0x2b8>)
  4078f8:	2110      	movs	r1, #16
  4078fa:	2000      	movs	r0, #0
  4078fc:	4c1a      	ldr	r4, [pc, #104]	; (407968 <WriteMbusRegs+0x290>)
  4078fe:	47a0      	blx	r4
                break;
  407900:	e00d      	b.n	40791e <WriteMbusRegs+0x246>
            case MBUS_REG_OPMODE:
                mBusRegs[MBUS_REG_MOTON] = 0;
  407902:	4b17      	ldr	r3, [pc, #92]	; (407960 <WriteMbusRegs+0x288>)
  407904:	2200      	movs	r2, #0
  407906:	869a      	strh	r2, [r3, #52]	; 0x34
                minCtr = 0;
  407908:	4b22      	ldr	r3, [pc, #136]	; (407994 <WriteMbusRegs+0x2bc>)
  40790a:	2200      	movs	r2, #0
  40790c:	701a      	strb	r2, [r3, #0]
                //Turn Motor Off
				//gpio_set_pin_low(PIN_MOTOR_RST_IDX);
                gpio_set_pin_low(PIN_MOTOR_IN1_IDX);
  40790e:	2020      	movs	r0, #32
  407910:	4b21      	ldr	r3, [pc, #132]	; (407998 <WriteMbusRegs+0x2c0>)
  407912:	4798      	blx	r3
				gpio_set_pin_low(PIN_MOTOR_IN2_IDX);
  407914:	2021      	movs	r0, #33	; 0x21
  407916:	4b20      	ldr	r3, [pc, #128]	; (407998 <WriteMbusRegs+0x2c0>)
  407918:	4798      	blx	r3
                break;
  40791a:	e000      	b.n	40791e <WriteMbusRegs+0x246>
            default:
                break;
  40791c:	bf00      	nop
        }    
        regAddr++;
  40791e:	78fb      	ldrb	r3, [r7, #3]
  407920:	3301      	adds	r3, #1
  407922:	70fb      	strb	r3, [r7, #3]
        len--;
  407924:	78bb      	ldrb	r3, [r7, #2]
  407926:	3b01      	subs	r3, #1
  407928:	70bb      	strb	r3, [r7, #2]

void WriteMbusRegs(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len)
{
    uint16_t *ptr;
    
    while(len)
  40792a:	78bb      	ldrb	r3, [r7, #2]
  40792c:	2b00      	cmp	r3, #0
  40792e:	f47f aedc 	bne.w	4076ea <WriteMbusRegs+0x12>
                break;
        }    
        regAddr++;
        len--;
    }
}
  407932:	bf00      	nop
  407934:	3714      	adds	r7, #20
  407936:	46bd      	mov	sp, r7
  407938:	bd90      	pop	{r4, r7, pc}
  40793a:	bf00      	nop
  40793c:	40018000 	.word	0x40018000
  407940:	00400965 	.word	0x00400965
  407944:	00400989 	.word	0x00400989
  407948:	004009ad 	.word	0x004009ad
  40794c:	00400a31 	.word	0x00400a31
  407950:	00400a55 	.word	0x00400a55
  407954:	00400a79 	.word	0x00400a79
  407958:	00400a9d 	.word	0x00400a9d
  40795c:	200000fc 	.word	0x200000fc
  407960:	20000bc4 	.word	0x20000bc4
  407964:	20000bd4 	.word	0x20000bd4
  407968:	00400129 	.word	0x00400129
  40796c:	20000100 	.word	0x20000100
  407970:	20000bd8 	.word	0x20000bd8
  407974:	20000104 	.word	0x20000104
  407978:	20000bdc 	.word	0x20000bdc
  40797c:	20000110 	.word	0x20000110
  407980:	20000be8 	.word	0x20000be8
  407984:	20000108 	.word	0x20000108
  407988:	20000c04 	.word	0x20000c04
  40798c:	2000010c 	.word	0x2000010c
  407990:	20000c08 	.word	0x20000c08
  407994:	20000c15 	.word	0x20000c15
  407998:	004047e5 	.word	0x004047e5

0040799c <SendRespPkt>:

void SendRespPkt(uint8_t *pkt, uint8_t len)
{
  40799c:	b580      	push	{r7, lr}
  40799e:	b082      	sub	sp, #8
  4079a0:	af00      	add	r7, sp, #0
  4079a2:	6078      	str	r0, [r7, #4]
  4079a4:	460b      	mov	r3, r1
  4079a6:	70fb      	strb	r3, [r7, #3]
	usart_enable_tx(RS485_USART);
  4079a8:	480c      	ldr	r0, [pc, #48]	; (4079dc <SendRespPkt+0x40>)
  4079aa:	4b0d      	ldr	r3, [pc, #52]	; (4079e0 <SendRespPkt+0x44>)
  4079ac:	4798      	blx	r3
	/* 3.5 Char Wait Time */
	
	/* Start PDC Transfer */
	Rs485PdcStartTx((uint32_t)pkt, len);
  4079ae:	687b      	ldr	r3, [r7, #4]
  4079b0:	78fa      	ldrb	r2, [r7, #3]
  4079b2:	b292      	uxth	r2, r2
  4079b4:	4611      	mov	r1, r2
  4079b6:	4618      	mov	r0, r3
  4079b8:	4b0a      	ldr	r3, [pc, #40]	; (4079e4 <SendRespPkt+0x48>)
  4079ba:	4798      	blx	r3

	/* Wait till tx completes */
	while(!Rs485PdcGetTxStatus())
  4079bc:	e002      	b.n	4079c4 <SendRespPkt+0x28>
		vTaskDelay(10);
  4079be:	200a      	movs	r0, #10
  4079c0:	4b09      	ldr	r3, [pc, #36]	; (4079e8 <SendRespPkt+0x4c>)
  4079c2:	4798      	blx	r3
	
	/* Start PDC Transfer */
	Rs485PdcStartTx((uint32_t)pkt, len);

	/* Wait till tx completes */
	while(!Rs485PdcGetTxStatus())
  4079c4:	4b09      	ldr	r3, [pc, #36]	; (4079ec <SendRespPkt+0x50>)
  4079c6:	4798      	blx	r3
  4079c8:	4603      	mov	r3, r0
  4079ca:	2b00      	cmp	r3, #0
  4079cc:	d0f7      	beq.n	4079be <SendRespPkt+0x22>
		vTaskDelay(10);

	/* 3.5 Char Wait Time */

	usart_disable_tx(RS485_USART);
  4079ce:	4803      	ldr	r0, [pc, #12]	; (4079dc <SendRespPkt+0x40>)
  4079d0:	4b07      	ldr	r3, [pc, #28]	; (4079f0 <SendRespPkt+0x54>)
  4079d2:	4798      	blx	r3
}
  4079d4:	bf00      	nop
  4079d6:	3708      	adds	r7, #8
  4079d8:	46bd      	mov	sp, r7
  4079da:	bd80      	pop	{r7, pc}
  4079dc:	40028000 	.word	0x40028000
  4079e0:	00403e4d 	.word	0x00403e4d
  4079e4:	00402f9d 	.word	0x00402f9d
  4079e8:	00406479 	.word	0x00406479
  4079ec:	0040304d 	.word	0x0040304d
  4079f0:	00403e65 	.word	0x00403e65

004079f4 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4079f4:	b480      	push	{r7}
  4079f6:	b083      	sub	sp, #12
  4079f8:	af00      	add	r7, sp, #0
  4079fa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4079fc:	687b      	ldr	r3, [r7, #4]
  4079fe:	2b07      	cmp	r3, #7
  407a00:	d825      	bhi.n	407a4e <osc_get_rate+0x5a>
  407a02:	a201      	add	r2, pc, #4	; (adr r2, 407a08 <osc_get_rate+0x14>)
  407a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  407a08:	00407a29 	.word	0x00407a29
  407a0c:	00407a2f 	.word	0x00407a2f
  407a10:	00407a35 	.word	0x00407a35
  407a14:	00407a3b 	.word	0x00407a3b
  407a18:	00407a3f 	.word	0x00407a3f
  407a1c:	00407a43 	.word	0x00407a43
  407a20:	00407a47 	.word	0x00407a47
  407a24:	00407a4b 	.word	0x00407a4b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  407a28:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  407a2c:	e010      	b.n	407a50 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  407a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  407a32:	e00d      	b.n	407a50 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  407a34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  407a38:	e00a      	b.n	407a50 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  407a3a:	4b08      	ldr	r3, [pc, #32]	; (407a5c <osc_get_rate+0x68>)
  407a3c:	e008      	b.n	407a50 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  407a3e:	4b08      	ldr	r3, [pc, #32]	; (407a60 <osc_get_rate+0x6c>)
  407a40:	e006      	b.n	407a50 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  407a42:	4b08      	ldr	r3, [pc, #32]	; (407a64 <osc_get_rate+0x70>)
  407a44:	e004      	b.n	407a50 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  407a46:	4b07      	ldr	r3, [pc, #28]	; (407a64 <osc_get_rate+0x70>)
  407a48:	e002      	b.n	407a50 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  407a4a:	4b06      	ldr	r3, [pc, #24]	; (407a64 <osc_get_rate+0x70>)
  407a4c:	e000      	b.n	407a50 <osc_get_rate+0x5c>
	}

	return 0;
  407a4e:	2300      	movs	r3, #0
}
  407a50:	4618      	mov	r0, r3
  407a52:	370c      	adds	r7, #12
  407a54:	46bd      	mov	sp, r7
  407a56:	bc80      	pop	{r7}
  407a58:	4770      	bx	lr
  407a5a:	bf00      	nop
  407a5c:	003d0900 	.word	0x003d0900
  407a60:	007a1200 	.word	0x007a1200
  407a64:	00b71b00 	.word	0x00b71b00

00407a68 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  407a68:	b580      	push	{r7, lr}
  407a6a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  407a6c:	2006      	movs	r0, #6
  407a6e:	4b04      	ldr	r3, [pc, #16]	; (407a80 <sysclk_get_main_hz+0x18>)
  407a70:	4798      	blx	r3
  407a72:	4602      	mov	r2, r0
  407a74:	4613      	mov	r3, r2
  407a76:	009b      	lsls	r3, r3, #2
  407a78:	4413      	add	r3, r2
  407a7a:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  407a7c:	4618      	mov	r0, r3
  407a7e:	bd80      	pop	{r7, pc}
  407a80:	004079f5 	.word	0x004079f5

00407a84 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  407a84:	b580      	push	{r7, lr}
  407a86:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  407a88:	4b02      	ldr	r3, [pc, #8]	; (407a94 <sysclk_get_cpu_hz+0x10>)
  407a8a:	4798      	blx	r3
  407a8c:	4603      	mov	r3, r0
  407a8e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  407a90:	4618      	mov	r0, r3
  407a92:	bd80      	pop	{r7, pc}
  407a94:	00407a69 	.word	0x00407a69

00407a98 <main>:
	Code untested. 

*/

int main (void)
{
  407a98:	b590      	push	{r4, r7, lr}
  407a9a:	b085      	sub	sp, #20
  407a9c:	af04      	add	r7, sp, #16
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
  407a9e:	4b1a      	ldr	r3, [pc, #104]	; (407b08 <main+0x70>)
  407aa0:	4798      	blx	r3
	/* Initialize all peripherals */
	board_init();
  407aa2:	4b1a      	ldr	r3, [pc, #104]	; (407b0c <main+0x74>)
  407aa4:	4798      	blx	r3
	delay_init(sysclk_get_cpu_hz());
	
	vInitPeripherals();
  407aa6:	4b1a      	ldr	r3, [pc, #104]	; (407b10 <main+0x78>)
  407aa8:	4798      	blx	r3
	/* Enable global interrupts. */   
    
//     xTaskCreate(vCCTask, "Cc", 100, NULL, 2, NULL);
    xTaskCreate(vPvTrackerTask, (const signed char *)"Pv", 300, NULL, 1, NULL);
  407aaa:	2300      	movs	r3, #0
  407aac:	9303      	str	r3, [sp, #12]
  407aae:	2300      	movs	r3, #0
  407ab0:	9302      	str	r3, [sp, #8]
  407ab2:	2300      	movs	r3, #0
  407ab4:	9301      	str	r3, [sp, #4]
  407ab6:	2301      	movs	r3, #1
  407ab8:	9300      	str	r3, [sp, #0]
  407aba:	2300      	movs	r3, #0
  407abc:	f44f 7296 	mov.w	r2, #300	; 0x12c
  407ac0:	4914      	ldr	r1, [pc, #80]	; (407b14 <main+0x7c>)
  407ac2:	4815      	ldr	r0, [pc, #84]	; (407b18 <main+0x80>)
  407ac4:	4c15      	ldr	r4, [pc, #84]	; (407b1c <main+0x84>)
  407ac6:	47a0      	blx	r4
    xTaskCreate(vCommTask, (const signed char *)"Comm", 512, NULL, 1, NULL);
  407ac8:	2300      	movs	r3, #0
  407aca:	9303      	str	r3, [sp, #12]
  407acc:	2300      	movs	r3, #0
  407ace:	9302      	str	r3, [sp, #8]
  407ad0:	2300      	movs	r3, #0
  407ad2:	9301      	str	r3, [sp, #4]
  407ad4:	2301      	movs	r3, #1
  407ad6:	9300      	str	r3, [sp, #0]
  407ad8:	2300      	movs	r3, #0
  407ada:	f44f 7200 	mov.w	r2, #512	; 0x200
  407ade:	4910      	ldr	r1, [pc, #64]	; (407b20 <main+0x88>)
  407ae0:	4810      	ldr	r0, [pc, #64]	; (407b24 <main+0x8c>)
  407ae2:	4c0e      	ldr	r4, [pc, #56]	; (407b1c <main+0x84>)
  407ae4:	47a0      	blx	r4
	xTaskCreate(vBlinkTask, (const signed char *)"Blinky", 100, NULL, 1, NULL);
  407ae6:	2300      	movs	r3, #0
  407ae8:	9303      	str	r3, [sp, #12]
  407aea:	2300      	movs	r3, #0
  407aec:	9302      	str	r3, [sp, #8]
  407aee:	2300      	movs	r3, #0
  407af0:	9301      	str	r3, [sp, #4]
  407af2:	2301      	movs	r3, #1
  407af4:	9300      	str	r3, [sp, #0]
  407af6:	2300      	movs	r3, #0
  407af8:	2264      	movs	r2, #100	; 0x64
  407afa:	490b      	ldr	r1, [pc, #44]	; (407b28 <main+0x90>)
  407afc:	480b      	ldr	r0, [pc, #44]	; (407b2c <main+0x94>)
  407afe:	4c07      	ldr	r4, [pc, #28]	; (407b1c <main+0x84>)
  407b00:	47a0      	blx	r4
    
    /* Start Watchdog Timer */
        
    vTaskStartScheduler();
  407b02:	4b0b      	ldr	r3, [pc, #44]	; (407b30 <main+0x98>)
  407b04:	4798      	blx	r3
    
	for( ;; );
  407b06:	e7fe      	b.n	407b06 <main+0x6e>
  407b08:	00404451 	.word	0x00404451
  407b0c:	00404081 	.word	0x00404081
  407b10:	00407b59 	.word	0x00407b59
  407b14:	0040f934 	.word	0x0040f934
  407b18:	00401355 	.word	0x00401355
  407b1c:	004062c1 	.word	0x004062c1
  407b20:	0040f938 	.word	0x0040f938
  407b24:	00407569 	.word	0x00407569
  407b28:	0040f940 	.word	0x0040f940
  407b2c:	00407c9d 	.word	0x00407c9d
  407b30:	004064e1 	.word	0x004064e1

00407b34 <vApplicationStackOverflowHook>:
}

void vApplicationStackOverflowHook(xTaskHandle pxTask, char *pcTaskName )
{
  407b34:	b580      	push	{r7, lr}
  407b36:	b082      	sub	sp, #8
  407b38:	af00      	add	r7, sp, #0
  407b3a:	6078      	str	r0, [r7, #4]
  407b3c:	6039      	str	r1, [r7, #0]
	/* The stack space has been execeeded for a task, considering allocating more. */
	taskDISABLE_INTERRUPTS();
  407b3e:	4b01      	ldr	r3, [pc, #4]	; (407b44 <vApplicationStackOverflowHook+0x10>)
  407b40:	4798      	blx	r3
	for( ;; );
  407b42:	e7fe      	b.n	407b42 <vApplicationStackOverflowHook+0xe>
  407b44:	00405789 	.word	0x00405789

00407b48 <vApplicationMallocFailedHook>:
}

void vApplicationMallocFailedHook( void )
{
  407b48:	b580      	push	{r7, lr}
  407b4a:	af00      	add	r7, sp, #0
	/* The heap space has been execeeded. */
	taskDISABLE_INTERRUPTS();
  407b4c:	4b01      	ldr	r3, [pc, #4]	; (407b54 <vApplicationMallocFailedHook+0xc>)
  407b4e:	4798      	blx	r3
	for( ;; );
  407b50:	e7fe      	b.n	407b50 <vApplicationMallocFailedHook+0x8>
  407b52:	bf00      	nop
  407b54:	00405789 	.word	0x00405789

00407b58 <vInitPeripherals>:
}

void vInitPeripherals( void )
{
  407b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407b5c:	b087      	sub	sp, #28
  407b5e:	af00      	add	r7, sp, #0
	#if defined(DEBUG_EN) || defined(LOG_EN)
		ConsoleInit();
  407b60:	4b46      	ldr	r3, [pc, #280]	; (407c7c <vInitPeripherals+0x124>)
  407b62:	4798      	blx	r3
	#endif
	
	gpio_set_pin_low(PIN_LDOEN_IDX);
  407b64:	2001      	movs	r0, #1
  407b66:	4b46      	ldr	r3, [pc, #280]	; (407c80 <vInitPeripherals+0x128>)
  407b68:	4798      	blx	r3
	delay_ms(500);
  407b6a:	4b46      	ldr	r3, [pc, #280]	; (407c84 <vInitPeripherals+0x12c>)
  407b6c:	4798      	blx	r3
  407b6e:	4603      	mov	r3, r0
  407b70:	4619      	mov	r1, r3
  407b72:	f04f 0200 	mov.w	r2, #0
  407b76:	460b      	mov	r3, r1
  407b78:	4614      	mov	r4, r2
  407b7a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
  407b7e:	ea4b 7b93 	orr.w	fp, fp, r3, lsr #30
  407b82:	ea4f 0a83 	mov.w	sl, r3, lsl #2
  407b86:	4653      	mov	r3, sl
  407b88:	465c      	mov	r4, fp
  407b8a:	ea4f 1944 	mov.w	r9, r4, lsl #5
  407b8e:	ea49 69d3 	orr.w	r9, r9, r3, lsr #27
  407b92:	ea4f 1843 	mov.w	r8, r3, lsl #5
  407b96:	ebb8 0803 	subs.w	r8, r8, r3
  407b9a:	eb69 0904 	sbc.w	r9, r9, r4
  407b9e:	eb18 0801 	adds.w	r8, r8, r1
  407ba2:	eb49 0902 	adc.w	r9, r9, r2
  407ba6:	ea4f 0389 	mov.w	r3, r9, lsl #2
  407baa:	617b      	str	r3, [r7, #20]
  407bac:	697b      	ldr	r3, [r7, #20]
  407bae:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
  407bb2:	617b      	str	r3, [r7, #20]
  407bb4:	ea4f 0388 	mov.w	r3, r8, lsl #2
  407bb8:	613b      	str	r3, [r7, #16]
  407bba:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
  407bbe:	4641      	mov	r1, r8
  407bc0:	464a      	mov	r2, r9
  407bc2:	f243 63af 	movw	r3, #13999	; 0x36af
  407bc6:	f04f 0400 	mov.w	r4, #0
  407bca:	eb11 0803 	adds.w	r8, r1, r3
  407bce:	eb42 0904 	adc.w	r9, r2, r4
  407bd2:	4640      	mov	r0, r8
  407bd4:	4649      	mov	r1, r9
  407bd6:	4c2c      	ldr	r4, [pc, #176]	; (407c88 <vInitPeripherals+0x130>)
  407bd8:	f243 62b0 	movw	r2, #14000	; 0x36b0
  407bdc:	f04f 0300 	mov.w	r3, #0
  407be0:	47a0      	blx	r4
  407be2:	4603      	mov	r3, r0
  407be4:	460c      	mov	r4, r1
  407be6:	4618      	mov	r0, r3
  407be8:	4b28      	ldr	r3, [pc, #160]	; (407c8c <vInitPeripherals+0x134>)
  407bea:	4798      	blx	r3
	/* Enable LDO */
	gpio_set_pin_high(PIN_LDOEN_IDX);
  407bec:	2001      	movs	r0, #1
  407bee:	4b28      	ldr	r3, [pc, #160]	; (407c90 <vInitPeripherals+0x138>)
  407bf0:	4798      	blx	r3
	delay_ms(1000);
  407bf2:	4b24      	ldr	r3, [pc, #144]	; (407c84 <vInitPeripherals+0x12c>)
  407bf4:	4798      	blx	r3
  407bf6:	4603      	mov	r3, r0
  407bf8:	4619      	mov	r1, r3
  407bfa:	f04f 0200 	mov.w	r2, #0
  407bfe:	460b      	mov	r3, r1
  407c00:	4614      	mov	r4, r2
  407c02:	00a0      	lsls	r0, r4, #2
  407c04:	60f8      	str	r0, [r7, #12]
  407c06:	68f8      	ldr	r0, [r7, #12]
  407c08:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  407c0c:	60f8      	str	r0, [r7, #12]
  407c0e:	009b      	lsls	r3, r3, #2
  407c10:	60bb      	str	r3, [r7, #8]
  407c12:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  407c16:	0166      	lsls	r6, r4, #5
  407c18:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  407c1c:	015d      	lsls	r5, r3, #5
  407c1e:	1aed      	subs	r5, r5, r3
  407c20:	eb66 0604 	sbc.w	r6, r6, r4
  407c24:	186d      	adds	r5, r5, r1
  407c26:	eb46 0602 	adc.w	r6, r6, r2
  407c2a:	00f3      	lsls	r3, r6, #3
  407c2c:	607b      	str	r3, [r7, #4]
  407c2e:	687b      	ldr	r3, [r7, #4]
  407c30:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
  407c34:	607b      	str	r3, [r7, #4]
  407c36:	00eb      	lsls	r3, r5, #3
  407c38:	603b      	str	r3, [r7, #0]
  407c3a:	e9d7 5600 	ldrd	r5, r6, [r7]
  407c3e:	4629      	mov	r1, r5
  407c40:	4632      	mov	r2, r6
  407c42:	f243 63af 	movw	r3, #13999	; 0x36af
  407c46:	f04f 0400 	mov.w	r4, #0
  407c4a:	18cd      	adds	r5, r1, r3
  407c4c:	eb42 0604 	adc.w	r6, r2, r4
  407c50:	4628      	mov	r0, r5
  407c52:	4631      	mov	r1, r6
  407c54:	4c0c      	ldr	r4, [pc, #48]	; (407c88 <vInitPeripherals+0x130>)
  407c56:	f243 62b0 	movw	r2, #14000	; 0x36b0
  407c5a:	f04f 0300 	mov.w	r3, #0
  407c5e:	47a0      	blx	r4
  407c60:	4603      	mov	r3, r0
  407c62:	460c      	mov	r4, r1
  407c64:	4618      	mov	r0, r3
  407c66:	4b09      	ldr	r3, [pc, #36]	; (407c8c <vInitPeripherals+0x134>)
  407c68:	4798      	blx	r3

	/* Initialize all RTOS vars */
	//vCCInit();
	vPvTrackerInit();
  407c6a:	4b0a      	ldr	r3, [pc, #40]	; (407c94 <vInitPeripherals+0x13c>)
  407c6c:	4798      	blx	r3
	vCommInit();
  407c6e:	4b0a      	ldr	r3, [pc, #40]	; (407c98 <vInitPeripherals+0x140>)
  407c70:	4798      	blx	r3
}
  407c72:	bf00      	nop
  407c74:	371c      	adds	r7, #28
  407c76:	46bd      	mov	sp, r7
  407c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407c7c:	00400835 	.word	0x00400835
  407c80:	004047e5 	.word	0x004047e5
  407c84:	00407a85 	.word	0x00407a85
  407c88:	0040b531 	.word	0x0040b531
  407c8c:	200000f1 	.word	0x200000f1
  407c90:	004047b5 	.word	0x004047b5
  407c94:	0040143d 	.word	0x0040143d
  407c98:	004076c9 	.word	0x004076c9

00407c9c <vBlinkTask>:

void vBlinkTask( void *pvParameters )
{
  407c9c:	b580      	push	{r7, lr}
  407c9e:	b082      	sub	sp, #8
  407ca0:	af00      	add	r7, sp, #0
  407ca2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		gpio_set_pin_high(PIN_DEBUGLED_IDX);
  407ca4:	2010      	movs	r0, #16
  407ca6:	4b06      	ldr	r3, [pc, #24]	; (407cc0 <vBlinkTask+0x24>)
  407ca8:	4798      	blx	r3
		vTaskDelay(500 / portTICK_RATE_MS);
  407caa:	2064      	movs	r0, #100	; 0x64
  407cac:	4b05      	ldr	r3, [pc, #20]	; (407cc4 <vBlinkTask+0x28>)
  407cae:	4798      	blx	r3
		gpio_set_pin_low(PIN_DEBUGLED_IDX);
  407cb0:	2010      	movs	r0, #16
  407cb2:	4b05      	ldr	r3, [pc, #20]	; (407cc8 <vBlinkTask+0x2c>)
  407cb4:	4798      	blx	r3
		vTaskDelay(500 / portTICK_RATE_MS);
  407cb6:	2064      	movs	r0, #100	; 0x64
  407cb8:	4b02      	ldr	r3, [pc, #8]	; (407cc4 <vBlinkTask+0x28>)
  407cba:	4798      	blx	r3
	}
  407cbc:	e7f2      	b.n	407ca4 <vBlinkTask+0x8>
  407cbe:	bf00      	nop
  407cc0:	004047b5 	.word	0x004047b5
  407cc4:	00406479 	.word	0x00406479
  407cc8:	004047e5 	.word	0x004047e5

00407ccc <cos>:
  407ccc:	b530      	push	{r4, r5, lr}
  407cce:	4a22      	ldr	r2, [pc, #136]	; (407d58 <cos+0x8c>)
  407cd0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  407cd4:	4293      	cmp	r3, r2
  407cd6:	b087      	sub	sp, #28
  407cd8:	dd1b      	ble.n	407d12 <cos+0x46>
  407cda:	4a20      	ldr	r2, [pc, #128]	; (407d5c <cos+0x90>)
  407cdc:	4293      	cmp	r3, r2
  407cde:	dd05      	ble.n	407cec <cos+0x20>
  407ce0:	4602      	mov	r2, r0
  407ce2:	460b      	mov	r3, r1
  407ce4:	f002 fc4e 	bl	40a584 <__aeabi_dsub>
  407ce8:	b007      	add	sp, #28
  407cea:	bd30      	pop	{r4, r5, pc}
  407cec:	aa02      	add	r2, sp, #8
  407cee:	f000 ff07 	bl	408b00 <__ieee754_rem_pio2>
  407cf2:	f000 0303 	and.w	r3, r0, #3
  407cf6:	2b01      	cmp	r3, #1
  407cf8:	d01a      	beq.n	407d30 <cos+0x64>
  407cfa:	2b02      	cmp	r3, #2
  407cfc:	d00f      	beq.n	407d1e <cos+0x52>
  407cfe:	b31b      	cbz	r3, 407d48 <cos+0x7c>
  407d00:	2401      	movs	r4, #1
  407d02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  407d06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407d0a:	9400      	str	r4, [sp, #0]
  407d0c:	f001 fefc 	bl	409b08 <__kernel_sin>
  407d10:	e7ea      	b.n	407ce8 <cos+0x1c>
  407d12:	2200      	movs	r2, #0
  407d14:	2300      	movs	r3, #0
  407d16:	f001 f9d7 	bl	4090c8 <__kernel_cos>
  407d1a:	b007      	add	sp, #28
  407d1c:	bd30      	pop	{r4, r5, pc}
  407d1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  407d22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407d26:	f001 f9cf 	bl	4090c8 <__kernel_cos>
  407d2a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  407d2e:	e7db      	b.n	407ce8 <cos+0x1c>
  407d30:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  407d34:	9300      	str	r3, [sp, #0]
  407d36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407d3a:	4622      	mov	r2, r4
  407d3c:	462b      	mov	r3, r5
  407d3e:	f001 fee3 	bl	409b08 <__kernel_sin>
  407d42:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  407d46:	e7cf      	b.n	407ce8 <cos+0x1c>
  407d48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  407d4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407d50:	f001 f9ba 	bl	4090c8 <__kernel_cos>
  407d54:	e7c8      	b.n	407ce8 <cos+0x1c>
  407d56:	bf00      	nop
  407d58:	3fe921fb 	.word	0x3fe921fb
  407d5c:	7fefffff 	.word	0x7fefffff

00407d60 <sin>:
  407d60:	b530      	push	{r4, r5, lr}
  407d62:	4a1f      	ldr	r2, [pc, #124]	; (407de0 <sin+0x80>)
  407d64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  407d68:	4293      	cmp	r3, r2
  407d6a:	b087      	sub	sp, #28
  407d6c:	dd1b      	ble.n	407da6 <sin+0x46>
  407d6e:	4a1d      	ldr	r2, [pc, #116]	; (407de4 <sin+0x84>)
  407d70:	4293      	cmp	r3, r2
  407d72:	dd05      	ble.n	407d80 <sin+0x20>
  407d74:	4602      	mov	r2, r0
  407d76:	460b      	mov	r3, r1
  407d78:	f002 fc04 	bl	40a584 <__aeabi_dsub>
  407d7c:	b007      	add	sp, #28
  407d7e:	bd30      	pop	{r4, r5, pc}
  407d80:	aa02      	add	r2, sp, #8
  407d82:	f000 febd 	bl	408b00 <__ieee754_rem_pio2>
  407d86:	f000 0003 	and.w	r0, r0, #3
  407d8a:	2801      	cmp	r0, #1
  407d8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  407d90:	d01a      	beq.n	407dc8 <sin+0x68>
  407d92:	2802      	cmp	r0, #2
  407d94:	d00f      	beq.n	407db6 <sin+0x56>
  407d96:	b1e0      	cbz	r0, 407dd2 <sin+0x72>
  407d98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407d9c:	f001 f994 	bl	4090c8 <__kernel_cos>
  407da0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  407da4:	e7ea      	b.n	407d7c <sin+0x1c>
  407da6:	2300      	movs	r3, #0
  407da8:	9300      	str	r3, [sp, #0]
  407daa:	2200      	movs	r2, #0
  407dac:	2300      	movs	r3, #0
  407dae:	f001 feab 	bl	409b08 <__kernel_sin>
  407db2:	b007      	add	sp, #28
  407db4:	bd30      	pop	{r4, r5, pc}
  407db6:	2401      	movs	r4, #1
  407db8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407dbc:	9400      	str	r4, [sp, #0]
  407dbe:	f001 fea3 	bl	409b08 <__kernel_sin>
  407dc2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  407dc6:	e7d9      	b.n	407d7c <sin+0x1c>
  407dc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407dcc:	f001 f97c 	bl	4090c8 <__kernel_cos>
  407dd0:	e7d4      	b.n	407d7c <sin+0x1c>
  407dd2:	2401      	movs	r4, #1
  407dd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407dd8:	9400      	str	r4, [sp, #0]
  407dda:	f001 fe95 	bl	409b08 <__kernel_sin>
  407dde:	e7cd      	b.n	407d7c <sin+0x1c>
  407de0:	3fe921fb 	.word	0x3fe921fb
  407de4:	7fefffff 	.word	0x7fefffff

00407de8 <tan>:
  407de8:	b530      	push	{r4, r5, lr}
  407dea:	4a14      	ldr	r2, [pc, #80]	; (407e3c <tan+0x54>)
  407dec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  407df0:	4293      	cmp	r3, r2
  407df2:	b087      	sub	sp, #28
  407df4:	dd19      	ble.n	407e2a <tan+0x42>
  407df6:	4a12      	ldr	r2, [pc, #72]	; (407e40 <tan+0x58>)
  407df8:	4293      	cmp	r3, r2
  407dfa:	dd05      	ble.n	407e08 <tan+0x20>
  407dfc:	4602      	mov	r2, r0
  407dfe:	460b      	mov	r3, r1
  407e00:	f002 fbc0 	bl	40a584 <__aeabi_dsub>
  407e04:	b007      	add	sp, #28
  407e06:	bd30      	pop	{r4, r5, pc}
  407e08:	aa02      	add	r2, sp, #8
  407e0a:	f000 fe79 	bl	408b00 <__ieee754_rem_pio2>
  407e0e:	0044      	lsls	r4, r0, #1
  407e10:	f004 0402 	and.w	r4, r4, #2
  407e14:	f1c4 0401 	rsb	r4, r4, #1
  407e18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  407e1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407e20:	9400      	str	r4, [sp, #0]
  407e22:	f001 ff29 	bl	409c78 <__kernel_tan>
  407e26:	b007      	add	sp, #28
  407e28:	bd30      	pop	{r4, r5, pc}
  407e2a:	2301      	movs	r3, #1
  407e2c:	9300      	str	r3, [sp, #0]
  407e2e:	2200      	movs	r2, #0
  407e30:	2300      	movs	r3, #0
  407e32:	f001 ff21 	bl	409c78 <__kernel_tan>
  407e36:	b007      	add	sp, #28
  407e38:	bd30      	pop	{r4, r5, pc}
  407e3a:	bf00      	nop
  407e3c:	3fe921fb 	.word	0x3fe921fb
  407e40:	7fefffff 	.word	0x7fefffff

00407e44 <acos>:
  407e44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407e48:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 407ef0 <acos+0xac>
  407e4c:	b08b      	sub	sp, #44	; 0x2c
  407e4e:	4604      	mov	r4, r0
  407e50:	460d      	mov	r5, r1
  407e52:	f000 f905 	bl	408060 <__ieee754_acos>
  407e56:	f998 3000 	ldrsb.w	r3, [r8]
  407e5a:	3301      	adds	r3, #1
  407e5c:	4606      	mov	r6, r0
  407e5e:	460f      	mov	r7, r1
  407e60:	d02e      	beq.n	407ec0 <acos+0x7c>
  407e62:	4622      	mov	r2, r4
  407e64:	462b      	mov	r3, r5
  407e66:	4620      	mov	r0, r4
  407e68:	4629      	mov	r1, r5
  407e6a:	f002 ffd9 	bl	40ae20 <__aeabi_dcmpun>
  407e6e:	4681      	mov	r9, r0
  407e70:	bb30      	cbnz	r0, 407ec0 <acos+0x7c>
  407e72:	4620      	mov	r0, r4
  407e74:	4629      	mov	r1, r5
  407e76:	f002 fa65 	bl	40a344 <fabs>
  407e7a:	2200      	movs	r2, #0
  407e7c:	4b19      	ldr	r3, [pc, #100]	; (407ee4 <acos+0xa0>)
  407e7e:	f002 ffc5 	bl	40ae0c <__aeabi_dcmpgt>
  407e82:	b1e8      	cbz	r0, 407ec0 <acos+0x7c>
  407e84:	4b18      	ldr	r3, [pc, #96]	; (407ee8 <acos+0xa4>)
  407e86:	4819      	ldr	r0, [pc, #100]	; (407eec <acos+0xa8>)
  407e88:	f8cd 9020 	str.w	r9, [sp, #32]
  407e8c:	2201      	movs	r2, #1
  407e8e:	e88d 000c 	stmia.w	sp, {r2, r3}
  407e92:	e9cd 4504 	strd	r4, r5, [sp, #16]
  407e96:	e9cd 4502 	strd	r4, r5, [sp, #8]
  407e9a:	f002 fae3 	bl	40a464 <nan>
  407e9e:	f998 3000 	ldrsb.w	r3, [r8]
  407ea2:	2b02      	cmp	r3, #2
  407ea4:	e9cd 0106 	strd	r0, r1, [sp, #24]
  407ea8:	d00f      	beq.n	407eca <acos+0x86>
  407eaa:	4668      	mov	r0, sp
  407eac:	f002 fad8 	bl	40a460 <matherr>
  407eb0:	b158      	cbz	r0, 407eca <acos+0x86>
  407eb2:	9b08      	ldr	r3, [sp, #32]
  407eb4:	b983      	cbnz	r3, 407ed8 <acos+0x94>
  407eb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  407eba:	b00b      	add	sp, #44	; 0x2c
  407ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407ec0:	4630      	mov	r0, r6
  407ec2:	4639      	mov	r1, r7
  407ec4:	b00b      	add	sp, #44	; 0x2c
  407ec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407eca:	f003 fcbd 	bl	40b848 <__errno>
  407ece:	2321      	movs	r3, #33	; 0x21
  407ed0:	6003      	str	r3, [r0, #0]
  407ed2:	9b08      	ldr	r3, [sp, #32]
  407ed4:	2b00      	cmp	r3, #0
  407ed6:	d0ee      	beq.n	407eb6 <acos+0x72>
  407ed8:	f003 fcb6 	bl	40b848 <__errno>
  407edc:	9b08      	ldr	r3, [sp, #32]
  407ede:	6003      	str	r3, [r0, #0]
  407ee0:	e7e9      	b.n	407eb6 <acos+0x72>
  407ee2:	bf00      	nop
  407ee4:	3ff00000 	.word	0x3ff00000
  407ee8:	0040f948 	.word	0x0040f948
  407eec:	0040fbb0 	.word	0x0040fbb0
  407ef0:	20000129 	.word	0x20000129

00407ef4 <asin>:
  407ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407ef8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 407fa0 <asin+0xac>
  407efc:	b08b      	sub	sp, #44	; 0x2c
  407efe:	4604      	mov	r4, r0
  407f00:	460d      	mov	r5, r1
  407f02:	f000 fb01 	bl	408508 <__ieee754_asin>
  407f06:	f998 3000 	ldrsb.w	r3, [r8]
  407f0a:	3301      	adds	r3, #1
  407f0c:	4606      	mov	r6, r0
  407f0e:	460f      	mov	r7, r1
  407f10:	d02e      	beq.n	407f70 <asin+0x7c>
  407f12:	4622      	mov	r2, r4
  407f14:	462b      	mov	r3, r5
  407f16:	4620      	mov	r0, r4
  407f18:	4629      	mov	r1, r5
  407f1a:	f002 ff81 	bl	40ae20 <__aeabi_dcmpun>
  407f1e:	4681      	mov	r9, r0
  407f20:	bb30      	cbnz	r0, 407f70 <asin+0x7c>
  407f22:	4620      	mov	r0, r4
  407f24:	4629      	mov	r1, r5
  407f26:	f002 fa0d 	bl	40a344 <fabs>
  407f2a:	2200      	movs	r2, #0
  407f2c:	4b19      	ldr	r3, [pc, #100]	; (407f94 <asin+0xa0>)
  407f2e:	f002 ff6d 	bl	40ae0c <__aeabi_dcmpgt>
  407f32:	b1e8      	cbz	r0, 407f70 <asin+0x7c>
  407f34:	4b18      	ldr	r3, [pc, #96]	; (407f98 <asin+0xa4>)
  407f36:	4819      	ldr	r0, [pc, #100]	; (407f9c <asin+0xa8>)
  407f38:	f8cd 9020 	str.w	r9, [sp, #32]
  407f3c:	2201      	movs	r2, #1
  407f3e:	e88d 000c 	stmia.w	sp, {r2, r3}
  407f42:	e9cd 4504 	strd	r4, r5, [sp, #16]
  407f46:	e9cd 4502 	strd	r4, r5, [sp, #8]
  407f4a:	f002 fa8b 	bl	40a464 <nan>
  407f4e:	f998 3000 	ldrsb.w	r3, [r8]
  407f52:	2b02      	cmp	r3, #2
  407f54:	e9cd 0106 	strd	r0, r1, [sp, #24]
  407f58:	d00f      	beq.n	407f7a <asin+0x86>
  407f5a:	4668      	mov	r0, sp
  407f5c:	f002 fa80 	bl	40a460 <matherr>
  407f60:	b158      	cbz	r0, 407f7a <asin+0x86>
  407f62:	9b08      	ldr	r3, [sp, #32]
  407f64:	b983      	cbnz	r3, 407f88 <asin+0x94>
  407f66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  407f6a:	b00b      	add	sp, #44	; 0x2c
  407f6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407f70:	4630      	mov	r0, r6
  407f72:	4639      	mov	r1, r7
  407f74:	b00b      	add	sp, #44	; 0x2c
  407f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407f7a:	f003 fc65 	bl	40b848 <__errno>
  407f7e:	2321      	movs	r3, #33	; 0x21
  407f80:	6003      	str	r3, [r0, #0]
  407f82:	9b08      	ldr	r3, [sp, #32]
  407f84:	2b00      	cmp	r3, #0
  407f86:	d0ee      	beq.n	407f66 <asin+0x72>
  407f88:	f003 fc5e 	bl	40b848 <__errno>
  407f8c:	9b08      	ldr	r3, [sp, #32]
  407f8e:	6003      	str	r3, [r0, #0]
  407f90:	e7e9      	b.n	407f66 <asin+0x72>
  407f92:	bf00      	nop
  407f94:	3ff00000 	.word	0x3ff00000
  407f98:	0040f950 	.word	0x0040f950
  407f9c:	0040fbb0 	.word	0x0040fbb0
  407fa0:	20000129 	.word	0x20000129

00407fa4 <atan2>:
  407fa4:	f000 bce0 	b.w	408968 <__ieee754_atan2>

00407fa8 <sqrt>:
  407fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407fac:	b08b      	sub	sp, #44	; 0x2c
  407fae:	4604      	mov	r4, r0
  407fb0:	460d      	mov	r5, r1
  407fb2:	f000 ffc7 	bl	408f44 <__ieee754_sqrt>
  407fb6:	4b28      	ldr	r3, [pc, #160]	; (408058 <sqrt+0xb0>)
  407fb8:	f993 a000 	ldrsb.w	sl, [r3]
  407fbc:	f1ba 3fff 	cmp.w	sl, #4294967295
  407fc0:	4606      	mov	r6, r0
  407fc2:	460f      	mov	r7, r1
  407fc4:	d012      	beq.n	407fec <sqrt+0x44>
  407fc6:	4622      	mov	r2, r4
  407fc8:	462b      	mov	r3, r5
  407fca:	4620      	mov	r0, r4
  407fcc:	4629      	mov	r1, r5
  407fce:	f002 ff27 	bl	40ae20 <__aeabi_dcmpun>
  407fd2:	4683      	mov	fp, r0
  407fd4:	b950      	cbnz	r0, 407fec <sqrt+0x44>
  407fd6:	f04f 0800 	mov.w	r8, #0
  407fda:	f04f 0900 	mov.w	r9, #0
  407fde:	4642      	mov	r2, r8
  407fe0:	464b      	mov	r3, r9
  407fe2:	4620      	mov	r0, r4
  407fe4:	4629      	mov	r1, r5
  407fe6:	f002 fef3 	bl	40add0 <__aeabi_dcmplt>
  407fea:	b920      	cbnz	r0, 407ff6 <sqrt+0x4e>
  407fec:	4630      	mov	r0, r6
  407fee:	4639      	mov	r1, r7
  407ff0:	b00b      	add	sp, #44	; 0x2c
  407ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407ff6:	4b19      	ldr	r3, [pc, #100]	; (40805c <sqrt+0xb4>)
  407ff8:	f8cd b020 	str.w	fp, [sp, #32]
  407ffc:	2201      	movs	r2, #1
  407ffe:	e9cd 4504 	strd	r4, r5, [sp, #16]
  408002:	e9cd 4502 	strd	r4, r5, [sp, #8]
  408006:	e88d 000c 	stmia.w	sp, {r2, r3}
  40800a:	f1ba 0f00 	cmp.w	sl, #0
  40800e:	d015      	beq.n	40803c <sqrt+0x94>
  408010:	4642      	mov	r2, r8
  408012:	464b      	mov	r3, r9
  408014:	4640      	mov	r0, r8
  408016:	4649      	mov	r1, r9
  408018:	f002 fd92 	bl	40ab40 <__aeabi_ddiv>
  40801c:	f1ba 0f02 	cmp.w	sl, #2
  408020:	e9cd 0106 	strd	r0, r1, [sp, #24]
  408024:	d10c      	bne.n	408040 <sqrt+0x98>
  408026:	f003 fc0f 	bl	40b848 <__errno>
  40802a:	2321      	movs	r3, #33	; 0x21
  40802c:	6003      	str	r3, [r0, #0]
  40802e:	9b08      	ldr	r3, [sp, #32]
  408030:	b963      	cbnz	r3, 40804c <sqrt+0xa4>
  408032:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  408036:	b00b      	add	sp, #44	; 0x2c
  408038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40803c:	e9cd 8906 	strd	r8, r9, [sp, #24]
  408040:	4668      	mov	r0, sp
  408042:	f002 fa0d 	bl	40a460 <matherr>
  408046:	2800      	cmp	r0, #0
  408048:	d1f1      	bne.n	40802e <sqrt+0x86>
  40804a:	e7ec      	b.n	408026 <sqrt+0x7e>
  40804c:	f003 fbfc 	bl	40b848 <__errno>
  408050:	9b08      	ldr	r3, [sp, #32]
  408052:	6003      	str	r3, [r0, #0]
  408054:	e7ed      	b.n	408032 <sqrt+0x8a>
  408056:	bf00      	nop
  408058:	20000129 	.word	0x20000129
  40805c:	0040f958 	.word	0x0040f958

00408060 <__ieee754_acos>:
  408060:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408064:	4ec4      	ldr	r6, [pc, #784]	; (408378 <__ieee754_acos+0x318>)
  408066:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  40806a:	42b3      	cmp	r3, r6
  40806c:	460c      	mov	r4, r1
  40806e:	4605      	mov	r5, r0
  408070:	dd0d      	ble.n	40808e <__ieee754_acos+0x2e>
  408072:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
  408076:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
  40807a:	4303      	orrs	r3, r0
  40807c:	f040 80b9 	bne.w	4081f2 <__ieee754_acos+0x192>
  408080:	2900      	cmp	r1, #0
  408082:	f340 8140 	ble.w	408306 <__ieee754_acos+0x2a6>
  408086:	2000      	movs	r0, #0
  408088:	2100      	movs	r1, #0
  40808a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40808e:	4ebb      	ldr	r6, [pc, #748]	; (40837c <__ieee754_acos+0x31c>)
  408090:	42b3      	cmp	r3, r6
  408092:	f340 80a6 	ble.w	4081e2 <__ieee754_acos+0x182>
  408096:	2900      	cmp	r1, #0
  408098:	f2c0 8178 	blt.w	40838c <__ieee754_acos+0x32c>
  40809c:	4602      	mov	r2, r0
  40809e:	460b      	mov	r3, r1
  4080a0:	2000      	movs	r0, #0
  4080a2:	49b7      	ldr	r1, [pc, #732]	; (408380 <__ieee754_acos+0x320>)
  4080a4:	f002 fa6e 	bl	40a584 <__aeabi_dsub>
  4080a8:	2200      	movs	r2, #0
  4080aa:	4bb6      	ldr	r3, [pc, #728]	; (408384 <__ieee754_acos+0x324>)
  4080ac:	f002 fc1e 	bl	40a8ec <__aeabi_dmul>
  4080b0:	4604      	mov	r4, r0
  4080b2:	460d      	mov	r5, r1
  4080b4:	f000 ff46 	bl	408f44 <__ieee754_sqrt>
  4080b8:	a395      	add	r3, pc, #596	; (adr r3, 408310 <__ieee754_acos+0x2b0>)
  4080ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4080be:	4689      	mov	r9, r1
  4080c0:	4680      	mov	r8, r0
  4080c2:	4629      	mov	r1, r5
  4080c4:	4620      	mov	r0, r4
  4080c6:	f002 fc11 	bl	40a8ec <__aeabi_dmul>
  4080ca:	a393      	add	r3, pc, #588	; (adr r3, 408318 <__ieee754_acos+0x2b8>)
  4080cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4080d0:	f002 fa5a 	bl	40a588 <__adddf3>
  4080d4:	4622      	mov	r2, r4
  4080d6:	462b      	mov	r3, r5
  4080d8:	f002 fc08 	bl	40a8ec <__aeabi_dmul>
  4080dc:	a390      	add	r3, pc, #576	; (adr r3, 408320 <__ieee754_acos+0x2c0>)
  4080de:	e9d3 2300 	ldrd	r2, r3, [r3]
  4080e2:	f002 fa4f 	bl	40a584 <__aeabi_dsub>
  4080e6:	4622      	mov	r2, r4
  4080e8:	462b      	mov	r3, r5
  4080ea:	f002 fbff 	bl	40a8ec <__aeabi_dmul>
  4080ee:	a38e      	add	r3, pc, #568	; (adr r3, 408328 <__ieee754_acos+0x2c8>)
  4080f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4080f4:	f002 fa48 	bl	40a588 <__adddf3>
  4080f8:	4622      	mov	r2, r4
  4080fa:	462b      	mov	r3, r5
  4080fc:	f002 fbf6 	bl	40a8ec <__aeabi_dmul>
  408100:	a38b      	add	r3, pc, #556	; (adr r3, 408330 <__ieee754_acos+0x2d0>)
  408102:	e9d3 2300 	ldrd	r2, r3, [r3]
  408106:	f002 fa3d 	bl	40a584 <__aeabi_dsub>
  40810a:	4622      	mov	r2, r4
  40810c:	462b      	mov	r3, r5
  40810e:	f002 fbed 	bl	40a8ec <__aeabi_dmul>
  408112:	a389      	add	r3, pc, #548	; (adr r3, 408338 <__ieee754_acos+0x2d8>)
  408114:	e9d3 2300 	ldrd	r2, r3, [r3]
  408118:	f002 fa36 	bl	40a588 <__adddf3>
  40811c:	4622      	mov	r2, r4
  40811e:	462b      	mov	r3, r5
  408120:	f002 fbe4 	bl	40a8ec <__aeabi_dmul>
  408124:	a386      	add	r3, pc, #536	; (adr r3, 408340 <__ieee754_acos+0x2e0>)
  408126:	e9d3 2300 	ldrd	r2, r3, [r3]
  40812a:	4682      	mov	sl, r0
  40812c:	468b      	mov	fp, r1
  40812e:	4620      	mov	r0, r4
  408130:	4629      	mov	r1, r5
  408132:	f002 fbdb 	bl	40a8ec <__aeabi_dmul>
  408136:	a384      	add	r3, pc, #528	; (adr r3, 408348 <__ieee754_acos+0x2e8>)
  408138:	e9d3 2300 	ldrd	r2, r3, [r3]
  40813c:	f002 fa22 	bl	40a584 <__aeabi_dsub>
  408140:	4622      	mov	r2, r4
  408142:	462b      	mov	r3, r5
  408144:	f002 fbd2 	bl	40a8ec <__aeabi_dmul>
  408148:	a381      	add	r3, pc, #516	; (adr r3, 408350 <__ieee754_acos+0x2f0>)
  40814a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40814e:	f002 fa1b 	bl	40a588 <__adddf3>
  408152:	4622      	mov	r2, r4
  408154:	462b      	mov	r3, r5
  408156:	f002 fbc9 	bl	40a8ec <__aeabi_dmul>
  40815a:	a37f      	add	r3, pc, #508	; (adr r3, 408358 <__ieee754_acos+0x2f8>)
  40815c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408160:	f002 fa10 	bl	40a584 <__aeabi_dsub>
  408164:	4622      	mov	r2, r4
  408166:	462b      	mov	r3, r5
  408168:	f002 fbc0 	bl	40a8ec <__aeabi_dmul>
  40816c:	2200      	movs	r2, #0
  40816e:	4b84      	ldr	r3, [pc, #528]	; (408380 <__ieee754_acos+0x320>)
  408170:	f002 fa0a 	bl	40a588 <__adddf3>
  408174:	4602      	mov	r2, r0
  408176:	460b      	mov	r3, r1
  408178:	4650      	mov	r0, sl
  40817a:	4659      	mov	r1, fp
  40817c:	f002 fce0 	bl	40ab40 <__aeabi_ddiv>
  408180:	4642      	mov	r2, r8
  408182:	464b      	mov	r3, r9
  408184:	f002 fbb2 	bl	40a8ec <__aeabi_dmul>
  408188:	2600      	movs	r6, #0
  40818a:	4682      	mov	sl, r0
  40818c:	468b      	mov	fp, r1
  40818e:	4632      	mov	r2, r6
  408190:	464b      	mov	r3, r9
  408192:	4630      	mov	r0, r6
  408194:	4649      	mov	r1, r9
  408196:	f002 fba9 	bl	40a8ec <__aeabi_dmul>
  40819a:	4602      	mov	r2, r0
  40819c:	460b      	mov	r3, r1
  40819e:	4620      	mov	r0, r4
  4081a0:	4629      	mov	r1, r5
  4081a2:	f002 f9ef 	bl	40a584 <__aeabi_dsub>
  4081a6:	4632      	mov	r2, r6
  4081a8:	4604      	mov	r4, r0
  4081aa:	460d      	mov	r5, r1
  4081ac:	464b      	mov	r3, r9
  4081ae:	4640      	mov	r0, r8
  4081b0:	4649      	mov	r1, r9
  4081b2:	f002 f9e9 	bl	40a588 <__adddf3>
  4081b6:	4602      	mov	r2, r0
  4081b8:	460b      	mov	r3, r1
  4081ba:	4620      	mov	r0, r4
  4081bc:	4629      	mov	r1, r5
  4081be:	f002 fcbf 	bl	40ab40 <__aeabi_ddiv>
  4081c2:	4602      	mov	r2, r0
  4081c4:	460b      	mov	r3, r1
  4081c6:	4650      	mov	r0, sl
  4081c8:	4659      	mov	r1, fp
  4081ca:	f002 f9dd 	bl	40a588 <__adddf3>
  4081ce:	4632      	mov	r2, r6
  4081d0:	464b      	mov	r3, r9
  4081d2:	f002 f9d9 	bl	40a588 <__adddf3>
  4081d6:	4602      	mov	r2, r0
  4081d8:	460b      	mov	r3, r1
  4081da:	f002 f9d5 	bl	40a588 <__adddf3>
  4081de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4081e2:	4a69      	ldr	r2, [pc, #420]	; (408388 <__ieee754_acos+0x328>)
  4081e4:	4293      	cmp	r3, r2
  4081e6:	dc0e      	bgt.n	408206 <__ieee754_acos+0x1a6>
  4081e8:	a15d      	add	r1, pc, #372	; (adr r1, 408360 <__ieee754_acos+0x300>)
  4081ea:	e9d1 0100 	ldrd	r0, r1, [r1]
  4081ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4081f2:	4602      	mov	r2, r0
  4081f4:	460b      	mov	r3, r1
  4081f6:	f002 f9c5 	bl	40a584 <__aeabi_dsub>
  4081fa:	4602      	mov	r2, r0
  4081fc:	460b      	mov	r3, r1
  4081fe:	f002 fc9f 	bl	40ab40 <__aeabi_ddiv>
  408202:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408206:	4602      	mov	r2, r0
  408208:	460b      	mov	r3, r1
  40820a:	f002 fb6f 	bl	40a8ec <__aeabi_dmul>
  40820e:	a340      	add	r3, pc, #256	; (adr r3, 408310 <__ieee754_acos+0x2b0>)
  408210:	e9d3 2300 	ldrd	r2, r3, [r3]
  408214:	4606      	mov	r6, r0
  408216:	460f      	mov	r7, r1
  408218:	f002 fb68 	bl	40a8ec <__aeabi_dmul>
  40821c:	a33e      	add	r3, pc, #248	; (adr r3, 408318 <__ieee754_acos+0x2b8>)
  40821e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408222:	f002 f9b1 	bl	40a588 <__adddf3>
  408226:	4632      	mov	r2, r6
  408228:	463b      	mov	r3, r7
  40822a:	f002 fb5f 	bl	40a8ec <__aeabi_dmul>
  40822e:	a33c      	add	r3, pc, #240	; (adr r3, 408320 <__ieee754_acos+0x2c0>)
  408230:	e9d3 2300 	ldrd	r2, r3, [r3]
  408234:	f002 f9a6 	bl	40a584 <__aeabi_dsub>
  408238:	4632      	mov	r2, r6
  40823a:	463b      	mov	r3, r7
  40823c:	f002 fb56 	bl	40a8ec <__aeabi_dmul>
  408240:	a339      	add	r3, pc, #228	; (adr r3, 408328 <__ieee754_acos+0x2c8>)
  408242:	e9d3 2300 	ldrd	r2, r3, [r3]
  408246:	f002 f99f 	bl	40a588 <__adddf3>
  40824a:	4632      	mov	r2, r6
  40824c:	463b      	mov	r3, r7
  40824e:	f002 fb4d 	bl	40a8ec <__aeabi_dmul>
  408252:	a337      	add	r3, pc, #220	; (adr r3, 408330 <__ieee754_acos+0x2d0>)
  408254:	e9d3 2300 	ldrd	r2, r3, [r3]
  408258:	f002 f994 	bl	40a584 <__aeabi_dsub>
  40825c:	4632      	mov	r2, r6
  40825e:	463b      	mov	r3, r7
  408260:	f002 fb44 	bl	40a8ec <__aeabi_dmul>
  408264:	a334      	add	r3, pc, #208	; (adr r3, 408338 <__ieee754_acos+0x2d8>)
  408266:	e9d3 2300 	ldrd	r2, r3, [r3]
  40826a:	f002 f98d 	bl	40a588 <__adddf3>
  40826e:	4632      	mov	r2, r6
  408270:	463b      	mov	r3, r7
  408272:	f002 fb3b 	bl	40a8ec <__aeabi_dmul>
  408276:	a332      	add	r3, pc, #200	; (adr r3, 408340 <__ieee754_acos+0x2e0>)
  408278:	e9d3 2300 	ldrd	r2, r3, [r3]
  40827c:	4680      	mov	r8, r0
  40827e:	4689      	mov	r9, r1
  408280:	4630      	mov	r0, r6
  408282:	4639      	mov	r1, r7
  408284:	f002 fb32 	bl	40a8ec <__aeabi_dmul>
  408288:	a32f      	add	r3, pc, #188	; (adr r3, 408348 <__ieee754_acos+0x2e8>)
  40828a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40828e:	f002 f979 	bl	40a584 <__aeabi_dsub>
  408292:	4632      	mov	r2, r6
  408294:	463b      	mov	r3, r7
  408296:	f002 fb29 	bl	40a8ec <__aeabi_dmul>
  40829a:	a32d      	add	r3, pc, #180	; (adr r3, 408350 <__ieee754_acos+0x2f0>)
  40829c:	e9d3 2300 	ldrd	r2, r3, [r3]
  4082a0:	f002 f972 	bl	40a588 <__adddf3>
  4082a4:	4632      	mov	r2, r6
  4082a6:	463b      	mov	r3, r7
  4082a8:	f002 fb20 	bl	40a8ec <__aeabi_dmul>
  4082ac:	a32a      	add	r3, pc, #168	; (adr r3, 408358 <__ieee754_acos+0x2f8>)
  4082ae:	e9d3 2300 	ldrd	r2, r3, [r3]
  4082b2:	f002 f967 	bl	40a584 <__aeabi_dsub>
  4082b6:	4632      	mov	r2, r6
  4082b8:	463b      	mov	r3, r7
  4082ba:	f002 fb17 	bl	40a8ec <__aeabi_dmul>
  4082be:	2200      	movs	r2, #0
  4082c0:	4b2f      	ldr	r3, [pc, #188]	; (408380 <__ieee754_acos+0x320>)
  4082c2:	f002 f961 	bl	40a588 <__adddf3>
  4082c6:	4602      	mov	r2, r0
  4082c8:	460b      	mov	r3, r1
  4082ca:	4640      	mov	r0, r8
  4082cc:	4649      	mov	r1, r9
  4082ce:	f002 fc37 	bl	40ab40 <__aeabi_ddiv>
  4082d2:	462a      	mov	r2, r5
  4082d4:	4623      	mov	r3, r4
  4082d6:	f002 fb09 	bl	40a8ec <__aeabi_dmul>
  4082da:	4602      	mov	r2, r0
  4082dc:	460b      	mov	r3, r1
  4082de:	a122      	add	r1, pc, #136	; (adr r1, 408368 <__ieee754_acos+0x308>)
  4082e0:	e9d1 0100 	ldrd	r0, r1, [r1]
  4082e4:	f002 f94e 	bl	40a584 <__aeabi_dsub>
  4082e8:	4602      	mov	r2, r0
  4082ea:	460b      	mov	r3, r1
  4082ec:	4628      	mov	r0, r5
  4082ee:	4621      	mov	r1, r4
  4082f0:	f002 f948 	bl	40a584 <__aeabi_dsub>
  4082f4:	4602      	mov	r2, r0
  4082f6:	460b      	mov	r3, r1
  4082f8:	a119      	add	r1, pc, #100	; (adr r1, 408360 <__ieee754_acos+0x300>)
  4082fa:	e9d1 0100 	ldrd	r0, r1, [r1]
  4082fe:	f002 f941 	bl	40a584 <__aeabi_dsub>
  408302:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408306:	a11a      	add	r1, pc, #104	; (adr r1, 408370 <__ieee754_acos+0x310>)
  408308:	e9d1 0100 	ldrd	r0, r1, [r1]
  40830c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408310:	0dfdf709 	.word	0x0dfdf709
  408314:	3f023de1 	.word	0x3f023de1
  408318:	7501b288 	.word	0x7501b288
  40831c:	3f49efe0 	.word	0x3f49efe0
  408320:	b5688f3b 	.word	0xb5688f3b
  408324:	3fa48228 	.word	0x3fa48228
  408328:	0e884455 	.word	0x0e884455
  40832c:	3fc9c155 	.word	0x3fc9c155
  408330:	03eb6f7d 	.word	0x03eb6f7d
  408334:	3fd4d612 	.word	0x3fd4d612
  408338:	55555555 	.word	0x55555555
  40833c:	3fc55555 	.word	0x3fc55555
  408340:	b12e9282 	.word	0xb12e9282
  408344:	3fb3b8c5 	.word	0x3fb3b8c5
  408348:	1b8d0159 	.word	0x1b8d0159
  40834c:	3fe6066c 	.word	0x3fe6066c
  408350:	9c598ac8 	.word	0x9c598ac8
  408354:	40002ae5 	.word	0x40002ae5
  408358:	1c8a2d4b 	.word	0x1c8a2d4b
  40835c:	40033a27 	.word	0x40033a27
  408360:	54442d18 	.word	0x54442d18
  408364:	3ff921fb 	.word	0x3ff921fb
  408368:	33145c07 	.word	0x33145c07
  40836c:	3c91a626 	.word	0x3c91a626
  408370:	54442d18 	.word	0x54442d18
  408374:	400921fb 	.word	0x400921fb
  408378:	3fefffff 	.word	0x3fefffff
  40837c:	3fdfffff 	.word	0x3fdfffff
  408380:	3ff00000 	.word	0x3ff00000
  408384:	3fe00000 	.word	0x3fe00000
  408388:	3c600000 	.word	0x3c600000
  40838c:	2200      	movs	r2, #0
  40838e:	4b5c      	ldr	r3, [pc, #368]	; (408500 <__ieee754_acos+0x4a0>)
  408390:	f002 f8fa 	bl	40a588 <__adddf3>
  408394:	2200      	movs	r2, #0
  408396:	4b5b      	ldr	r3, [pc, #364]	; (408504 <__ieee754_acos+0x4a4>)
  408398:	f002 faa8 	bl	40a8ec <__aeabi_dmul>
  40839c:	a340      	add	r3, pc, #256	; (adr r3, 4084a0 <__ieee754_acos+0x440>)
  40839e:	e9d3 2300 	ldrd	r2, r3, [r3]
  4083a2:	4604      	mov	r4, r0
  4083a4:	460d      	mov	r5, r1
  4083a6:	f002 faa1 	bl	40a8ec <__aeabi_dmul>
  4083aa:	a33f      	add	r3, pc, #252	; (adr r3, 4084a8 <__ieee754_acos+0x448>)
  4083ac:	e9d3 2300 	ldrd	r2, r3, [r3]
  4083b0:	f002 f8ea 	bl	40a588 <__adddf3>
  4083b4:	4622      	mov	r2, r4
  4083b6:	462b      	mov	r3, r5
  4083b8:	f002 fa98 	bl	40a8ec <__aeabi_dmul>
  4083bc:	a33c      	add	r3, pc, #240	; (adr r3, 4084b0 <__ieee754_acos+0x450>)
  4083be:	e9d3 2300 	ldrd	r2, r3, [r3]
  4083c2:	f002 f8df 	bl	40a584 <__aeabi_dsub>
  4083c6:	4622      	mov	r2, r4
  4083c8:	462b      	mov	r3, r5
  4083ca:	f002 fa8f 	bl	40a8ec <__aeabi_dmul>
  4083ce:	a33a      	add	r3, pc, #232	; (adr r3, 4084b8 <__ieee754_acos+0x458>)
  4083d0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4083d4:	f002 f8d8 	bl	40a588 <__adddf3>
  4083d8:	4622      	mov	r2, r4
  4083da:	462b      	mov	r3, r5
  4083dc:	f002 fa86 	bl	40a8ec <__aeabi_dmul>
  4083e0:	a337      	add	r3, pc, #220	; (adr r3, 4084c0 <__ieee754_acos+0x460>)
  4083e2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4083e6:	f002 f8cd 	bl	40a584 <__aeabi_dsub>
  4083ea:	4622      	mov	r2, r4
  4083ec:	462b      	mov	r3, r5
  4083ee:	f002 fa7d 	bl	40a8ec <__aeabi_dmul>
  4083f2:	a335      	add	r3, pc, #212	; (adr r3, 4084c8 <__ieee754_acos+0x468>)
  4083f4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4083f8:	f002 f8c6 	bl	40a588 <__adddf3>
  4083fc:	4622      	mov	r2, r4
  4083fe:	462b      	mov	r3, r5
  408400:	f002 fa74 	bl	40a8ec <__aeabi_dmul>
  408404:	4680      	mov	r8, r0
  408406:	4689      	mov	r9, r1
  408408:	4620      	mov	r0, r4
  40840a:	4629      	mov	r1, r5
  40840c:	f000 fd9a 	bl	408f44 <__ieee754_sqrt>
  408410:	a32f      	add	r3, pc, #188	; (adr r3, 4084d0 <__ieee754_acos+0x470>)
  408412:	e9d3 2300 	ldrd	r2, r3, [r3]
  408416:	4606      	mov	r6, r0
  408418:	460f      	mov	r7, r1
  40841a:	4620      	mov	r0, r4
  40841c:	4629      	mov	r1, r5
  40841e:	f002 fa65 	bl	40a8ec <__aeabi_dmul>
  408422:	a32d      	add	r3, pc, #180	; (adr r3, 4084d8 <__ieee754_acos+0x478>)
  408424:	e9d3 2300 	ldrd	r2, r3, [r3]
  408428:	f002 f8ac 	bl	40a584 <__aeabi_dsub>
  40842c:	4622      	mov	r2, r4
  40842e:	462b      	mov	r3, r5
  408430:	f002 fa5c 	bl	40a8ec <__aeabi_dmul>
  408434:	a32a      	add	r3, pc, #168	; (adr r3, 4084e0 <__ieee754_acos+0x480>)
  408436:	e9d3 2300 	ldrd	r2, r3, [r3]
  40843a:	f002 f8a5 	bl	40a588 <__adddf3>
  40843e:	4622      	mov	r2, r4
  408440:	462b      	mov	r3, r5
  408442:	f002 fa53 	bl	40a8ec <__aeabi_dmul>
  408446:	a328      	add	r3, pc, #160	; (adr r3, 4084e8 <__ieee754_acos+0x488>)
  408448:	e9d3 2300 	ldrd	r2, r3, [r3]
  40844c:	f002 f89a 	bl	40a584 <__aeabi_dsub>
  408450:	4622      	mov	r2, r4
  408452:	462b      	mov	r3, r5
  408454:	f002 fa4a 	bl	40a8ec <__aeabi_dmul>
  408458:	2200      	movs	r2, #0
  40845a:	4b29      	ldr	r3, [pc, #164]	; (408500 <__ieee754_acos+0x4a0>)
  40845c:	f002 f894 	bl	40a588 <__adddf3>
  408460:	4602      	mov	r2, r0
  408462:	460b      	mov	r3, r1
  408464:	4640      	mov	r0, r8
  408466:	4649      	mov	r1, r9
  408468:	f002 fb6a 	bl	40ab40 <__aeabi_ddiv>
  40846c:	4632      	mov	r2, r6
  40846e:	463b      	mov	r3, r7
  408470:	f002 fa3c 	bl	40a8ec <__aeabi_dmul>
  408474:	a31e      	add	r3, pc, #120	; (adr r3, 4084f0 <__ieee754_acos+0x490>)
  408476:	e9d3 2300 	ldrd	r2, r3, [r3]
  40847a:	f002 f883 	bl	40a584 <__aeabi_dsub>
  40847e:	4632      	mov	r2, r6
  408480:	463b      	mov	r3, r7
  408482:	f002 f881 	bl	40a588 <__adddf3>
  408486:	4602      	mov	r2, r0
  408488:	460b      	mov	r3, r1
  40848a:	f002 f87d 	bl	40a588 <__adddf3>
  40848e:	4602      	mov	r2, r0
  408490:	460b      	mov	r3, r1
  408492:	a119      	add	r1, pc, #100	; (adr r1, 4084f8 <__ieee754_acos+0x498>)
  408494:	e9d1 0100 	ldrd	r0, r1, [r1]
  408498:	f002 f874 	bl	40a584 <__aeabi_dsub>
  40849c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4084a0:	0dfdf709 	.word	0x0dfdf709
  4084a4:	3f023de1 	.word	0x3f023de1
  4084a8:	7501b288 	.word	0x7501b288
  4084ac:	3f49efe0 	.word	0x3f49efe0
  4084b0:	b5688f3b 	.word	0xb5688f3b
  4084b4:	3fa48228 	.word	0x3fa48228
  4084b8:	0e884455 	.word	0x0e884455
  4084bc:	3fc9c155 	.word	0x3fc9c155
  4084c0:	03eb6f7d 	.word	0x03eb6f7d
  4084c4:	3fd4d612 	.word	0x3fd4d612
  4084c8:	55555555 	.word	0x55555555
  4084cc:	3fc55555 	.word	0x3fc55555
  4084d0:	b12e9282 	.word	0xb12e9282
  4084d4:	3fb3b8c5 	.word	0x3fb3b8c5
  4084d8:	1b8d0159 	.word	0x1b8d0159
  4084dc:	3fe6066c 	.word	0x3fe6066c
  4084e0:	9c598ac8 	.word	0x9c598ac8
  4084e4:	40002ae5 	.word	0x40002ae5
  4084e8:	1c8a2d4b 	.word	0x1c8a2d4b
  4084ec:	40033a27 	.word	0x40033a27
  4084f0:	33145c07 	.word	0x33145c07
  4084f4:	3c91a626 	.word	0x3c91a626
  4084f8:	54442d18 	.word	0x54442d18
  4084fc:	400921fb 	.word	0x400921fb
  408500:	3ff00000 	.word	0x3ff00000
  408504:	3fe00000 	.word	0x3fe00000

00408508 <__ieee754_asin>:
  408508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40850c:	4bc0      	ldr	r3, [pc, #768]	; (408810 <__ieee754_asin+0x308>)
  40850e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
  408512:	4598      	cmp	r8, r3
  408514:	b084      	sub	sp, #16
  408516:	460d      	mov	r5, r1
  408518:	4604      	mov	r4, r0
  40851a:	dd14      	ble.n	408546 <__ieee754_asin+0x3e>
  40851c:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
  408520:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
  408524:	4603      	mov	r3, r0
  408526:	ea58 0303 	orrs.w	r3, r8, r3
  40852a:	d023      	beq.n	408574 <__ieee754_asin+0x6c>
  40852c:	4602      	mov	r2, r0
  40852e:	460b      	mov	r3, r1
  408530:	f002 f828 	bl	40a584 <__aeabi_dsub>
  408534:	4602      	mov	r2, r0
  408536:	460b      	mov	r3, r1
  408538:	f002 fb02 	bl	40ab40 <__aeabi_ddiv>
  40853c:	4604      	mov	r4, r0
  40853e:	4620      	mov	r0, r4
  408540:	b004      	add	sp, #16
  408542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408546:	4bb3      	ldr	r3, [pc, #716]	; (408814 <__ieee754_asin+0x30c>)
  408548:	4598      	cmp	r8, r3
  40854a:	468a      	mov	sl, r1
  40854c:	dc2b      	bgt.n	4085a6 <__ieee754_asin+0x9e>
  40854e:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
  408552:	f280 8167 	bge.w	408824 <__ieee754_asin+0x31c>
  408556:	a392      	add	r3, pc, #584	; (adr r3, 4087a0 <__ieee754_asin+0x298>)
  408558:	e9d3 2300 	ldrd	r2, r3, [r3]
  40855c:	f002 f814 	bl	40a588 <__adddf3>
  408560:	2200      	movs	r2, #0
  408562:	4bad      	ldr	r3, [pc, #692]	; (408818 <__ieee754_asin+0x310>)
  408564:	f002 fc52 	bl	40ae0c <__aeabi_dcmpgt>
  408568:	b1e8      	cbz	r0, 4085a6 <__ieee754_asin+0x9e>
  40856a:	4629      	mov	r1, r5
  40856c:	4620      	mov	r0, r4
  40856e:	b004      	add	sp, #16
  408570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408574:	a38c      	add	r3, pc, #560	; (adr r3, 4087a8 <__ieee754_asin+0x2a0>)
  408576:	e9d3 2300 	ldrd	r2, r3, [r3]
  40857a:	f002 f9b7 	bl	40a8ec <__aeabi_dmul>
  40857e:	a38c      	add	r3, pc, #560	; (adr r3, 4087b0 <__ieee754_asin+0x2a8>)
  408580:	e9d3 2300 	ldrd	r2, r3, [r3]
  408584:	4606      	mov	r6, r0
  408586:	460f      	mov	r7, r1
  408588:	4620      	mov	r0, r4
  40858a:	4629      	mov	r1, r5
  40858c:	f002 f9ae 	bl	40a8ec <__aeabi_dmul>
  408590:	4602      	mov	r2, r0
  408592:	460b      	mov	r3, r1
  408594:	4630      	mov	r0, r6
  408596:	4639      	mov	r1, r7
  408598:	f001 fff6 	bl	40a588 <__adddf3>
  40859c:	4604      	mov	r4, r0
  40859e:	4620      	mov	r0, r4
  4085a0:	b004      	add	sp, #16
  4085a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4085a6:	4620      	mov	r0, r4
  4085a8:	4629      	mov	r1, r5
  4085aa:	f001 fecb 	bl	40a344 <fabs>
  4085ae:	4602      	mov	r2, r0
  4085b0:	460b      	mov	r3, r1
  4085b2:	2000      	movs	r0, #0
  4085b4:	4998      	ldr	r1, [pc, #608]	; (408818 <__ieee754_asin+0x310>)
  4085b6:	f001 ffe5 	bl	40a584 <__aeabi_dsub>
  4085ba:	2200      	movs	r2, #0
  4085bc:	4b97      	ldr	r3, [pc, #604]	; (40881c <__ieee754_asin+0x314>)
  4085be:	f002 f995 	bl	40a8ec <__aeabi_dmul>
  4085c2:	a37d      	add	r3, pc, #500	; (adr r3, 4087b8 <__ieee754_asin+0x2b0>)
  4085c4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085c8:	4604      	mov	r4, r0
  4085ca:	460d      	mov	r5, r1
  4085cc:	f002 f98e 	bl	40a8ec <__aeabi_dmul>
  4085d0:	a37b      	add	r3, pc, #492	; (adr r3, 4087c0 <__ieee754_asin+0x2b8>)
  4085d2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085d6:	f001 ffd7 	bl	40a588 <__adddf3>
  4085da:	4622      	mov	r2, r4
  4085dc:	462b      	mov	r3, r5
  4085de:	f002 f985 	bl	40a8ec <__aeabi_dmul>
  4085e2:	a379      	add	r3, pc, #484	; (adr r3, 4087c8 <__ieee754_asin+0x2c0>)
  4085e4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085e8:	f001 ffcc 	bl	40a584 <__aeabi_dsub>
  4085ec:	4622      	mov	r2, r4
  4085ee:	462b      	mov	r3, r5
  4085f0:	f002 f97c 	bl	40a8ec <__aeabi_dmul>
  4085f4:	a376      	add	r3, pc, #472	; (adr r3, 4087d0 <__ieee754_asin+0x2c8>)
  4085f6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085fa:	f001 ffc5 	bl	40a588 <__adddf3>
  4085fe:	4622      	mov	r2, r4
  408600:	462b      	mov	r3, r5
  408602:	f002 f973 	bl	40a8ec <__aeabi_dmul>
  408606:	a374      	add	r3, pc, #464	; (adr r3, 4087d8 <__ieee754_asin+0x2d0>)
  408608:	e9d3 2300 	ldrd	r2, r3, [r3]
  40860c:	f001 ffba 	bl	40a584 <__aeabi_dsub>
  408610:	4622      	mov	r2, r4
  408612:	462b      	mov	r3, r5
  408614:	f002 f96a 	bl	40a8ec <__aeabi_dmul>
  408618:	a371      	add	r3, pc, #452	; (adr r3, 4087e0 <__ieee754_asin+0x2d8>)
  40861a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40861e:	f001 ffb3 	bl	40a588 <__adddf3>
  408622:	4622      	mov	r2, r4
  408624:	462b      	mov	r3, r5
  408626:	f002 f961 	bl	40a8ec <__aeabi_dmul>
  40862a:	a36f      	add	r3, pc, #444	; (adr r3, 4087e8 <__ieee754_asin+0x2e0>)
  40862c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408630:	e9cd 0100 	strd	r0, r1, [sp]
  408634:	4620      	mov	r0, r4
  408636:	4629      	mov	r1, r5
  408638:	f002 f958 	bl	40a8ec <__aeabi_dmul>
  40863c:	a36c      	add	r3, pc, #432	; (adr r3, 4087f0 <__ieee754_asin+0x2e8>)
  40863e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408642:	f001 ff9f 	bl	40a584 <__aeabi_dsub>
  408646:	4622      	mov	r2, r4
  408648:	462b      	mov	r3, r5
  40864a:	f002 f94f 	bl	40a8ec <__aeabi_dmul>
  40864e:	a36a      	add	r3, pc, #424	; (adr r3, 4087f8 <__ieee754_asin+0x2f0>)
  408650:	e9d3 2300 	ldrd	r2, r3, [r3]
  408654:	f001 ff98 	bl	40a588 <__adddf3>
  408658:	4622      	mov	r2, r4
  40865a:	462b      	mov	r3, r5
  40865c:	f002 f946 	bl	40a8ec <__aeabi_dmul>
  408660:	a367      	add	r3, pc, #412	; (adr r3, 408800 <__ieee754_asin+0x2f8>)
  408662:	e9d3 2300 	ldrd	r2, r3, [r3]
  408666:	f001 ff8d 	bl	40a584 <__aeabi_dsub>
  40866a:	4622      	mov	r2, r4
  40866c:	462b      	mov	r3, r5
  40866e:	f002 f93d 	bl	40a8ec <__aeabi_dmul>
  408672:	4b69      	ldr	r3, [pc, #420]	; (408818 <__ieee754_asin+0x310>)
  408674:	2200      	movs	r2, #0
  408676:	f001 ff87 	bl	40a588 <__adddf3>
  40867a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40867e:	4620      	mov	r0, r4
  408680:	4629      	mov	r1, r5
  408682:	f000 fc5f 	bl	408f44 <__ieee754_sqrt>
  408686:	4b66      	ldr	r3, [pc, #408]	; (408820 <__ieee754_asin+0x318>)
  408688:	4598      	cmp	r8, r3
  40868a:	4606      	mov	r6, r0
  40868c:	460f      	mov	r7, r1
  40868e:	dc66      	bgt.n	40875e <__ieee754_asin+0x256>
  408690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408694:	e9dd 0100 	ldrd	r0, r1, [sp]
  408698:	f002 fa52 	bl	40ab40 <__aeabi_ddiv>
  40869c:	4632      	mov	r2, r6
  40869e:	e9cd 0100 	strd	r0, r1, [sp]
  4086a2:	463b      	mov	r3, r7
  4086a4:	4630      	mov	r0, r6
  4086a6:	4639      	mov	r1, r7
  4086a8:	f001 ff6e 	bl	40a588 <__adddf3>
  4086ac:	4602      	mov	r2, r0
  4086ae:	460b      	mov	r3, r1
  4086b0:	e9dd 0100 	ldrd	r0, r1, [sp]
  4086b4:	f002 f91a 	bl	40a8ec <__aeabi_dmul>
  4086b8:	f04f 0800 	mov.w	r8, #0
  4086bc:	e9cd 0100 	strd	r0, r1, [sp]
  4086c0:	4642      	mov	r2, r8
  4086c2:	463b      	mov	r3, r7
  4086c4:	4640      	mov	r0, r8
  4086c6:	4639      	mov	r1, r7
  4086c8:	f002 f910 	bl	40a8ec <__aeabi_dmul>
  4086cc:	4602      	mov	r2, r0
  4086ce:	460b      	mov	r3, r1
  4086d0:	4620      	mov	r0, r4
  4086d2:	4629      	mov	r1, r5
  4086d4:	f001 ff56 	bl	40a584 <__aeabi_dsub>
  4086d8:	4642      	mov	r2, r8
  4086da:	4604      	mov	r4, r0
  4086dc:	460d      	mov	r5, r1
  4086de:	463b      	mov	r3, r7
  4086e0:	4630      	mov	r0, r6
  4086e2:	4639      	mov	r1, r7
  4086e4:	f001 ff50 	bl	40a588 <__adddf3>
  4086e8:	4602      	mov	r2, r0
  4086ea:	460b      	mov	r3, r1
  4086ec:	4620      	mov	r0, r4
  4086ee:	4629      	mov	r1, r5
  4086f0:	f002 fa26 	bl	40ab40 <__aeabi_ddiv>
  4086f4:	4602      	mov	r2, r0
  4086f6:	460b      	mov	r3, r1
  4086f8:	f001 ff46 	bl	40a588 <__adddf3>
  4086fc:	4602      	mov	r2, r0
  4086fe:	460b      	mov	r3, r1
  408700:	a12b      	add	r1, pc, #172	; (adr r1, 4087b0 <__ieee754_asin+0x2a8>)
  408702:	e9d1 0100 	ldrd	r0, r1, [r1]
  408706:	f001 ff3d 	bl	40a584 <__aeabi_dsub>
  40870a:	4602      	mov	r2, r0
  40870c:	460b      	mov	r3, r1
  40870e:	e9dd 0100 	ldrd	r0, r1, [sp]
  408712:	f001 ff37 	bl	40a584 <__aeabi_dsub>
  408716:	4642      	mov	r2, r8
  408718:	4604      	mov	r4, r0
  40871a:	460d      	mov	r5, r1
  40871c:	463b      	mov	r3, r7
  40871e:	4640      	mov	r0, r8
  408720:	4639      	mov	r1, r7
  408722:	f001 ff31 	bl	40a588 <__adddf3>
  408726:	4602      	mov	r2, r0
  408728:	460b      	mov	r3, r1
  40872a:	a137      	add	r1, pc, #220	; (adr r1, 408808 <__ieee754_asin+0x300>)
  40872c:	e9d1 0100 	ldrd	r0, r1, [r1]
  408730:	f001 ff28 	bl	40a584 <__aeabi_dsub>
  408734:	4602      	mov	r2, r0
  408736:	460b      	mov	r3, r1
  408738:	4620      	mov	r0, r4
  40873a:	4629      	mov	r1, r5
  40873c:	f001 ff22 	bl	40a584 <__aeabi_dsub>
  408740:	4602      	mov	r2, r0
  408742:	460b      	mov	r3, r1
  408744:	a130      	add	r1, pc, #192	; (adr r1, 408808 <__ieee754_asin+0x300>)
  408746:	e9d1 0100 	ldrd	r0, r1, [r1]
  40874a:	f001 ff1b 	bl	40a584 <__aeabi_dsub>
  40874e:	4604      	mov	r4, r0
  408750:	f1ba 0f00 	cmp.w	sl, #0
  408754:	f73f aef3 	bgt.w	40853e <__ieee754_asin+0x36>
  408758:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  40875c:	e6ef      	b.n	40853e <__ieee754_asin+0x36>
  40875e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408762:	e9dd 0100 	ldrd	r0, r1, [sp]
  408766:	f002 f9eb 	bl	40ab40 <__aeabi_ddiv>
  40876a:	4632      	mov	r2, r6
  40876c:	463b      	mov	r3, r7
  40876e:	f002 f8bd 	bl	40a8ec <__aeabi_dmul>
  408772:	4632      	mov	r2, r6
  408774:	463b      	mov	r3, r7
  408776:	f001 ff07 	bl	40a588 <__adddf3>
  40877a:	4602      	mov	r2, r0
  40877c:	460b      	mov	r3, r1
  40877e:	f001 ff03 	bl	40a588 <__adddf3>
  408782:	a30b      	add	r3, pc, #44	; (adr r3, 4087b0 <__ieee754_asin+0x2a8>)
  408784:	e9d3 2300 	ldrd	r2, r3, [r3]
  408788:	f001 fefc 	bl	40a584 <__aeabi_dsub>
  40878c:	4602      	mov	r2, r0
  40878e:	460b      	mov	r3, r1
  408790:	a105      	add	r1, pc, #20	; (adr r1, 4087a8 <__ieee754_asin+0x2a0>)
  408792:	e9d1 0100 	ldrd	r0, r1, [r1]
  408796:	f001 fef5 	bl	40a584 <__aeabi_dsub>
  40879a:	4604      	mov	r4, r0
  40879c:	e7d8      	b.n	408750 <__ieee754_asin+0x248>
  40879e:	bf00      	nop
  4087a0:	8800759c 	.word	0x8800759c
  4087a4:	7e37e43c 	.word	0x7e37e43c
  4087a8:	54442d18 	.word	0x54442d18
  4087ac:	3ff921fb 	.word	0x3ff921fb
  4087b0:	33145c07 	.word	0x33145c07
  4087b4:	3c91a626 	.word	0x3c91a626
  4087b8:	0dfdf709 	.word	0x0dfdf709
  4087bc:	3f023de1 	.word	0x3f023de1
  4087c0:	7501b288 	.word	0x7501b288
  4087c4:	3f49efe0 	.word	0x3f49efe0
  4087c8:	b5688f3b 	.word	0xb5688f3b
  4087cc:	3fa48228 	.word	0x3fa48228
  4087d0:	0e884455 	.word	0x0e884455
  4087d4:	3fc9c155 	.word	0x3fc9c155
  4087d8:	03eb6f7d 	.word	0x03eb6f7d
  4087dc:	3fd4d612 	.word	0x3fd4d612
  4087e0:	55555555 	.word	0x55555555
  4087e4:	3fc55555 	.word	0x3fc55555
  4087e8:	b12e9282 	.word	0xb12e9282
  4087ec:	3fb3b8c5 	.word	0x3fb3b8c5
  4087f0:	1b8d0159 	.word	0x1b8d0159
  4087f4:	3fe6066c 	.word	0x3fe6066c
  4087f8:	9c598ac8 	.word	0x9c598ac8
  4087fc:	40002ae5 	.word	0x40002ae5
  408800:	1c8a2d4b 	.word	0x1c8a2d4b
  408804:	40033a27 	.word	0x40033a27
  408808:	54442d18 	.word	0x54442d18
  40880c:	3fe921fb 	.word	0x3fe921fb
  408810:	3fefffff 	.word	0x3fefffff
  408814:	3fdfffff 	.word	0x3fdfffff
  408818:	3ff00000 	.word	0x3ff00000
  40881c:	3fe00000 	.word	0x3fe00000
  408820:	3fef3332 	.word	0x3fef3332
  408824:	4602      	mov	r2, r0
  408826:	460b      	mov	r3, r1
  408828:	f002 f860 	bl	40a8ec <__aeabi_dmul>
  40882c:	a338      	add	r3, pc, #224	; (adr r3, 408910 <__ieee754_asin+0x408>)
  40882e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408832:	4606      	mov	r6, r0
  408834:	460f      	mov	r7, r1
  408836:	f002 f859 	bl	40a8ec <__aeabi_dmul>
  40883a:	a337      	add	r3, pc, #220	; (adr r3, 408918 <__ieee754_asin+0x410>)
  40883c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408840:	f001 fea2 	bl	40a588 <__adddf3>
  408844:	4632      	mov	r2, r6
  408846:	463b      	mov	r3, r7
  408848:	f002 f850 	bl	40a8ec <__aeabi_dmul>
  40884c:	a334      	add	r3, pc, #208	; (adr r3, 408920 <__ieee754_asin+0x418>)
  40884e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408852:	f001 fe97 	bl	40a584 <__aeabi_dsub>
  408856:	4632      	mov	r2, r6
  408858:	463b      	mov	r3, r7
  40885a:	f002 f847 	bl	40a8ec <__aeabi_dmul>
  40885e:	a332      	add	r3, pc, #200	; (adr r3, 408928 <__ieee754_asin+0x420>)
  408860:	e9d3 2300 	ldrd	r2, r3, [r3]
  408864:	f001 fe90 	bl	40a588 <__adddf3>
  408868:	4632      	mov	r2, r6
  40886a:	463b      	mov	r3, r7
  40886c:	f002 f83e 	bl	40a8ec <__aeabi_dmul>
  408870:	a32f      	add	r3, pc, #188	; (adr r3, 408930 <__ieee754_asin+0x428>)
  408872:	e9d3 2300 	ldrd	r2, r3, [r3]
  408876:	f001 fe85 	bl	40a584 <__aeabi_dsub>
  40887a:	4632      	mov	r2, r6
  40887c:	463b      	mov	r3, r7
  40887e:	f002 f835 	bl	40a8ec <__aeabi_dmul>
  408882:	a32d      	add	r3, pc, #180	; (adr r3, 408938 <__ieee754_asin+0x430>)
  408884:	e9d3 2300 	ldrd	r2, r3, [r3]
  408888:	f001 fe7e 	bl	40a588 <__adddf3>
  40888c:	4632      	mov	r2, r6
  40888e:	463b      	mov	r3, r7
  408890:	f002 f82c 	bl	40a8ec <__aeabi_dmul>
  408894:	a32a      	add	r3, pc, #168	; (adr r3, 408940 <__ieee754_asin+0x438>)
  408896:	e9d3 2300 	ldrd	r2, r3, [r3]
  40889a:	4680      	mov	r8, r0
  40889c:	4689      	mov	r9, r1
  40889e:	4630      	mov	r0, r6
  4088a0:	4639      	mov	r1, r7
  4088a2:	f002 f823 	bl	40a8ec <__aeabi_dmul>
  4088a6:	a328      	add	r3, pc, #160	; (adr r3, 408948 <__ieee754_asin+0x440>)
  4088a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4088ac:	f001 fe6a 	bl	40a584 <__aeabi_dsub>
  4088b0:	4632      	mov	r2, r6
  4088b2:	463b      	mov	r3, r7
  4088b4:	f002 f81a 	bl	40a8ec <__aeabi_dmul>
  4088b8:	a325      	add	r3, pc, #148	; (adr r3, 408950 <__ieee754_asin+0x448>)
  4088ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4088be:	f001 fe63 	bl	40a588 <__adddf3>
  4088c2:	4632      	mov	r2, r6
  4088c4:	463b      	mov	r3, r7
  4088c6:	f002 f811 	bl	40a8ec <__aeabi_dmul>
  4088ca:	a323      	add	r3, pc, #140	; (adr r3, 408958 <__ieee754_asin+0x450>)
  4088cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4088d0:	f001 fe58 	bl	40a584 <__aeabi_dsub>
  4088d4:	4632      	mov	r2, r6
  4088d6:	463b      	mov	r3, r7
  4088d8:	f002 f808 	bl	40a8ec <__aeabi_dmul>
  4088dc:	2200      	movs	r2, #0
  4088de:	4b20      	ldr	r3, [pc, #128]	; (408960 <__ieee754_asin+0x458>)
  4088e0:	f001 fe52 	bl	40a588 <__adddf3>
  4088e4:	4602      	mov	r2, r0
  4088e6:	460b      	mov	r3, r1
  4088e8:	4640      	mov	r0, r8
  4088ea:	4649      	mov	r1, r9
  4088ec:	f002 f928 	bl	40ab40 <__aeabi_ddiv>
  4088f0:	4622      	mov	r2, r4
  4088f2:	462b      	mov	r3, r5
  4088f4:	f001 fffa 	bl	40a8ec <__aeabi_dmul>
  4088f8:	4622      	mov	r2, r4
  4088fa:	462b      	mov	r3, r5
  4088fc:	f001 fe44 	bl	40a588 <__adddf3>
  408900:	4604      	mov	r4, r0
  408902:	4620      	mov	r0, r4
  408904:	b004      	add	sp, #16
  408906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40890a:	bf00      	nop
  40890c:	f3af 8000 	nop.w
  408910:	0dfdf709 	.word	0x0dfdf709
  408914:	3f023de1 	.word	0x3f023de1
  408918:	7501b288 	.word	0x7501b288
  40891c:	3f49efe0 	.word	0x3f49efe0
  408920:	b5688f3b 	.word	0xb5688f3b
  408924:	3fa48228 	.word	0x3fa48228
  408928:	0e884455 	.word	0x0e884455
  40892c:	3fc9c155 	.word	0x3fc9c155
  408930:	03eb6f7d 	.word	0x03eb6f7d
  408934:	3fd4d612 	.word	0x3fd4d612
  408938:	55555555 	.word	0x55555555
  40893c:	3fc55555 	.word	0x3fc55555
  408940:	b12e9282 	.word	0xb12e9282
  408944:	3fb3b8c5 	.word	0x3fb3b8c5
  408948:	1b8d0159 	.word	0x1b8d0159
  40894c:	3fe6066c 	.word	0x3fe6066c
  408950:	9c598ac8 	.word	0x9c598ac8
  408954:	40002ae5 	.word	0x40002ae5
  408958:	1c8a2d4b 	.word	0x1c8a2d4b
  40895c:	40033a27 	.word	0x40033a27
  408960:	3ff00000 	.word	0x3ff00000
  408964:	00000000 	.word	0x00000000

00408968 <__ieee754_atan2>:
  408968:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40896c:	4254      	negs	r4, r2
  40896e:	4314      	orrs	r4, r2
  408970:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
  408974:	f8df e180 	ldr.w	lr, [pc, #384]	; 408af8 <__ieee754_atan2+0x190>
  408978:	ea49 74d4 	orr.w	r4, r9, r4, lsr #31
  40897c:	4574      	cmp	r4, lr
  40897e:	4606      	mov	r6, r0
  408980:	460d      	mov	r5, r1
  408982:	d83e      	bhi.n	408a02 <__ieee754_atan2+0x9a>
  408984:	4244      	negs	r4, r0
  408986:	4304      	orrs	r4, r0
  408988:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
  40898c:	ea4b 74d4 	orr.w	r4, fp, r4, lsr #31
  408990:	4574      	cmp	r4, lr
  408992:	468a      	mov	sl, r1
  408994:	d835      	bhi.n	408a02 <__ieee754_atan2+0x9a>
  408996:	f103 4440 	add.w	r4, r3, #3221225472	; 0xc0000000
  40899a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
  40899e:	4314      	orrs	r4, r2
  4089a0:	d044      	beq.n	408a2c <__ieee754_atan2+0xc4>
  4089a2:	179c      	asrs	r4, r3, #30
  4089a4:	f004 0402 	and.w	r4, r4, #2
  4089a8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
  4089ac:	ea50 010b 	orrs.w	r1, r0, fp
  4089b0:	d02f      	beq.n	408a12 <__ieee754_atan2+0xaa>
  4089b2:	ea52 0109 	orrs.w	r1, r2, r9
  4089b6:	d033      	beq.n	408a20 <__ieee754_atan2+0xb8>
  4089b8:	45f1      	cmp	r9, lr
  4089ba:	d046      	beq.n	408a4a <__ieee754_atan2+0xe2>
  4089bc:	45f3      	cmp	fp, lr
  4089be:	d02f      	beq.n	408a20 <__ieee754_atan2+0xb8>
  4089c0:	ebc9 090b 	rsb	r9, r9, fp
  4089c4:	ea4f 5929 	mov.w	r9, r9, asr #20
  4089c8:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
  4089cc:	dc34      	bgt.n	408a38 <__ieee754_atan2+0xd0>
  4089ce:	2b00      	cmp	r3, #0
  4089d0:	db57      	blt.n	408a82 <__ieee754_atan2+0x11a>
  4089d2:	4630      	mov	r0, r6
  4089d4:	4629      	mov	r1, r5
  4089d6:	f002 f8b3 	bl	40ab40 <__aeabi_ddiv>
  4089da:	f001 fcb3 	bl	40a344 <fabs>
  4089de:	f001 fb13 	bl	40a008 <atan>
  4089e2:	2c01      	cmp	r4, #1
  4089e4:	d04a      	beq.n	408a7c <__ieee754_atan2+0x114>
  4089e6:	2c02      	cmp	r4, #2
  4089e8:	d03b      	beq.n	408a62 <__ieee754_atan2+0xfa>
  4089ea:	b184      	cbz	r4, 408a0e <__ieee754_atan2+0xa6>
  4089ec:	a332      	add	r3, pc, #200	; (adr r3, 408ab8 <__ieee754_atan2+0x150>)
  4089ee:	e9d3 2300 	ldrd	r2, r3, [r3]
  4089f2:	f001 fdc7 	bl	40a584 <__aeabi_dsub>
  4089f6:	a332      	add	r3, pc, #200	; (adr r3, 408ac0 <__ieee754_atan2+0x158>)
  4089f8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4089fc:	f001 fdc2 	bl	40a584 <__aeabi_dsub>
  408a00:	e005      	b.n	408a0e <__ieee754_atan2+0xa6>
  408a02:	4610      	mov	r0, r2
  408a04:	4619      	mov	r1, r3
  408a06:	4632      	mov	r2, r6
  408a08:	462b      	mov	r3, r5
  408a0a:	f001 fdbd 	bl	40a588 <__adddf3>
  408a0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408a12:	2c02      	cmp	r4, #2
  408a14:	d014      	beq.n	408a40 <__ieee754_atan2+0xd8>
  408a16:	2c03      	cmp	r4, #3
  408a18:	d10c      	bne.n	408a34 <__ieee754_atan2+0xcc>
  408a1a:	482d      	ldr	r0, [pc, #180]	; (408ad0 <__ieee754_atan2+0x168>)
  408a1c:	492d      	ldr	r1, [pc, #180]	; (408ad4 <__ieee754_atan2+0x16c>)
  408a1e:	e7f6      	b.n	408a0e <__ieee754_atan2+0xa6>
  408a20:	f1ba 0f00 	cmp.w	sl, #0
  408a24:	482a      	ldr	r0, [pc, #168]	; (408ad0 <__ieee754_atan2+0x168>)
  408a26:	db0e      	blt.n	408a46 <__ieee754_atan2+0xde>
  408a28:	492b      	ldr	r1, [pc, #172]	; (408ad8 <__ieee754_atan2+0x170>)
  408a2a:	e7f0      	b.n	408a0e <__ieee754_atan2+0xa6>
  408a2c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408a30:	f001 baea 	b.w	40a008 <atan>
  408a34:	4629      	mov	r1, r5
  408a36:	e7ea      	b.n	408a0e <__ieee754_atan2+0xa6>
  408a38:	a123      	add	r1, pc, #140	; (adr r1, 408ac8 <__ieee754_atan2+0x160>)
  408a3a:	e9d1 0100 	ldrd	r0, r1, [r1]
  408a3e:	e7d0      	b.n	4089e2 <__ieee754_atan2+0x7a>
  408a40:	4823      	ldr	r0, [pc, #140]	; (408ad0 <__ieee754_atan2+0x168>)
  408a42:	4926      	ldr	r1, [pc, #152]	; (408adc <__ieee754_atan2+0x174>)
  408a44:	e7e3      	b.n	408a0e <__ieee754_atan2+0xa6>
  408a46:	4926      	ldr	r1, [pc, #152]	; (408ae0 <__ieee754_atan2+0x178>)
  408a48:	e7e1      	b.n	408a0e <__ieee754_atan2+0xa6>
  408a4a:	45cb      	cmp	fp, r9
  408a4c:	d01f      	beq.n	408a8e <__ieee754_atan2+0x126>
  408a4e:	2c02      	cmp	r4, #2
  408a50:	d0f6      	beq.n	408a40 <__ieee754_atan2+0xd8>
  408a52:	2c03      	cmp	r4, #3
  408a54:	d0e1      	beq.n	408a1a <__ieee754_atan2+0xb2>
  408a56:	2c01      	cmp	r4, #1
  408a58:	f04f 0000 	mov.w	r0, #0
  408a5c:	d020      	beq.n	408aa0 <__ieee754_atan2+0x138>
  408a5e:	4601      	mov	r1, r0
  408a60:	e7d5      	b.n	408a0e <__ieee754_atan2+0xa6>
  408a62:	a315      	add	r3, pc, #84	; (adr r3, 408ab8 <__ieee754_atan2+0x150>)
  408a64:	e9d3 2300 	ldrd	r2, r3, [r3]
  408a68:	f001 fd8c 	bl	40a584 <__aeabi_dsub>
  408a6c:	4602      	mov	r2, r0
  408a6e:	460b      	mov	r3, r1
  408a70:	a113      	add	r1, pc, #76	; (adr r1, 408ac0 <__ieee754_atan2+0x158>)
  408a72:	e9d1 0100 	ldrd	r0, r1, [r1]
  408a76:	f001 fd85 	bl	40a584 <__aeabi_dsub>
  408a7a:	e7c8      	b.n	408a0e <__ieee754_atan2+0xa6>
  408a7c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  408a80:	e7c5      	b.n	408a0e <__ieee754_atan2+0xa6>
  408a82:	f119 0f3c 	cmn.w	r9, #60	; 0x3c
  408a86:	daa4      	bge.n	4089d2 <__ieee754_atan2+0x6a>
  408a88:	2000      	movs	r0, #0
  408a8a:	2100      	movs	r1, #0
  408a8c:	e7a9      	b.n	4089e2 <__ieee754_atan2+0x7a>
  408a8e:	2c02      	cmp	r4, #2
  408a90:	d00e      	beq.n	408ab0 <__ieee754_atan2+0x148>
  408a92:	2c03      	cmp	r4, #3
  408a94:	d009      	beq.n	408aaa <__ieee754_atan2+0x142>
  408a96:	2c01      	cmp	r4, #1
  408a98:	480d      	ldr	r0, [pc, #52]	; (408ad0 <__ieee754_atan2+0x168>)
  408a9a:	d004      	beq.n	408aa6 <__ieee754_atan2+0x13e>
  408a9c:	4911      	ldr	r1, [pc, #68]	; (408ae4 <__ieee754_atan2+0x17c>)
  408a9e:	e7b6      	b.n	408a0e <__ieee754_atan2+0xa6>
  408aa0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  408aa4:	e7b3      	b.n	408a0e <__ieee754_atan2+0xa6>
  408aa6:	4910      	ldr	r1, [pc, #64]	; (408ae8 <__ieee754_atan2+0x180>)
  408aa8:	e7b1      	b.n	408a0e <__ieee754_atan2+0xa6>
  408aaa:	4810      	ldr	r0, [pc, #64]	; (408aec <__ieee754_atan2+0x184>)
  408aac:	4910      	ldr	r1, [pc, #64]	; (408af0 <__ieee754_atan2+0x188>)
  408aae:	e7ae      	b.n	408a0e <__ieee754_atan2+0xa6>
  408ab0:	480e      	ldr	r0, [pc, #56]	; (408aec <__ieee754_atan2+0x184>)
  408ab2:	4910      	ldr	r1, [pc, #64]	; (408af4 <__ieee754_atan2+0x18c>)
  408ab4:	e7ab      	b.n	408a0e <__ieee754_atan2+0xa6>
  408ab6:	bf00      	nop
  408ab8:	33145c07 	.word	0x33145c07
  408abc:	3ca1a626 	.word	0x3ca1a626
  408ac0:	54442d18 	.word	0x54442d18
  408ac4:	400921fb 	.word	0x400921fb
  408ac8:	54442d18 	.word	0x54442d18
  408acc:	3ff921fb 	.word	0x3ff921fb
  408ad0:	54442d18 	.word	0x54442d18
  408ad4:	c00921fb 	.word	0xc00921fb
  408ad8:	3ff921fb 	.word	0x3ff921fb
  408adc:	400921fb 	.word	0x400921fb
  408ae0:	bff921fb 	.word	0xbff921fb
  408ae4:	3fe921fb 	.word	0x3fe921fb
  408ae8:	bfe921fb 	.word	0xbfe921fb
  408aec:	7f3321d2 	.word	0x7f3321d2
  408af0:	c002d97c 	.word	0xc002d97c
  408af4:	4002d97c 	.word	0x4002d97c
  408af8:	7ff00000 	.word	0x7ff00000
  408afc:	00000000 	.word	0x00000000

00408b00 <__ieee754_rem_pio2>:
  408b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408b04:	4e94      	ldr	r6, [pc, #592]	; (408d58 <__ieee754_rem_pio2+0x258>)
  408b06:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  408b0a:	42b7      	cmp	r7, r6
  408b0c:	b091      	sub	sp, #68	; 0x44
  408b0e:	f340 8082 	ble.w	408c16 <__ieee754_rem_pio2+0x116>
  408b12:	4692      	mov	sl, r2
  408b14:	4a91      	ldr	r2, [pc, #580]	; (408d5c <__ieee754_rem_pio2+0x25c>)
  408b16:	4297      	cmp	r7, r2
  408b18:	460c      	mov	r4, r1
  408b1a:	dc26      	bgt.n	408b6a <__ieee754_rem_pio2+0x6a>
  408b1c:	2900      	cmp	r1, #0
  408b1e:	a384      	add	r3, pc, #528	; (adr r3, 408d30 <__ieee754_rem_pio2+0x230>)
  408b20:	e9d3 2300 	ldrd	r2, r3, [r3]
  408b24:	f340 81a8 	ble.w	408e78 <__ieee754_rem_pio2+0x378>
  408b28:	f001 fd2c 	bl	40a584 <__aeabi_dsub>
  408b2c:	4b8c      	ldr	r3, [pc, #560]	; (408d60 <__ieee754_rem_pio2+0x260>)
  408b2e:	429f      	cmp	r7, r3
  408b30:	4604      	mov	r4, r0
  408b32:	460d      	mov	r5, r1
  408b34:	f000 8084 	beq.w	408c40 <__ieee754_rem_pio2+0x140>
  408b38:	a37f      	add	r3, pc, #508	; (adr r3, 408d38 <__ieee754_rem_pio2+0x238>)
  408b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
  408b3e:	f001 fd21 	bl	40a584 <__aeabi_dsub>
  408b42:	4602      	mov	r2, r0
  408b44:	460b      	mov	r3, r1
  408b46:	e9ca 2300 	strd	r2, r3, [sl]
  408b4a:	4620      	mov	r0, r4
  408b4c:	4629      	mov	r1, r5
  408b4e:	f001 fd19 	bl	40a584 <__aeabi_dsub>
  408b52:	a379      	add	r3, pc, #484	; (adr r3, 408d38 <__ieee754_rem_pio2+0x238>)
  408b54:	e9d3 2300 	ldrd	r2, r3, [r3]
  408b58:	f001 fd14 	bl	40a584 <__aeabi_dsub>
  408b5c:	2501      	movs	r5, #1
  408b5e:	e9ca 0102 	strd	r0, r1, [sl, #8]
  408b62:	4628      	mov	r0, r5
  408b64:	b011      	add	sp, #68	; 0x44
  408b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408b6a:	4a7e      	ldr	r2, [pc, #504]	; (408d64 <__ieee754_rem_pio2+0x264>)
  408b6c:	4297      	cmp	r7, r2
  408b6e:	f340 8084 	ble.w	408c7a <__ieee754_rem_pio2+0x17a>
  408b72:	4a7d      	ldr	r2, [pc, #500]	; (408d68 <__ieee754_rem_pio2+0x268>)
  408b74:	4297      	cmp	r7, r2
  408b76:	dc59      	bgt.n	408c2c <__ieee754_rem_pio2+0x12c>
  408b78:	153d      	asrs	r5, r7, #20
  408b7a:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
  408b7e:	eba7 5305 	sub.w	r3, r7, r5, lsl #20
  408b82:	4619      	mov	r1, r3
  408b84:	461f      	mov	r7, r3
  408b86:	4606      	mov	r6, r0
  408b88:	f002 f960 	bl	40ae4c <__aeabi_d2iz>
  408b8c:	f001 fe48 	bl	40a820 <__aeabi_i2d>
  408b90:	4680      	mov	r8, r0
  408b92:	4689      	mov	r9, r1
  408b94:	4602      	mov	r2, r0
  408b96:	460b      	mov	r3, r1
  408b98:	4630      	mov	r0, r6
  408b9a:	4639      	mov	r1, r7
  408b9c:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  408ba0:	f001 fcf0 	bl	40a584 <__aeabi_dsub>
  408ba4:	2200      	movs	r2, #0
  408ba6:	4b71      	ldr	r3, [pc, #452]	; (408d6c <__ieee754_rem_pio2+0x26c>)
  408ba8:	f001 fea0 	bl	40a8ec <__aeabi_dmul>
  408bac:	4689      	mov	r9, r1
  408bae:	4680      	mov	r8, r0
  408bb0:	f002 f94c 	bl	40ae4c <__aeabi_d2iz>
  408bb4:	f001 fe34 	bl	40a820 <__aeabi_i2d>
  408bb8:	4602      	mov	r2, r0
  408bba:	460b      	mov	r3, r1
  408bbc:	4606      	mov	r6, r0
  408bbe:	460f      	mov	r7, r1
  408bc0:	4640      	mov	r0, r8
  408bc2:	4649      	mov	r1, r9
  408bc4:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  408bc8:	f001 fcdc 	bl	40a584 <__aeabi_dsub>
  408bcc:	2200      	movs	r2, #0
  408bce:	4b67      	ldr	r3, [pc, #412]	; (408d6c <__ieee754_rem_pio2+0x26c>)
  408bd0:	f001 fe8c 	bl	40a8ec <__aeabi_dmul>
  408bd4:	2200      	movs	r2, #0
  408bd6:	2300      	movs	r3, #0
  408bd8:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  408bdc:	f002 f8ee 	bl	40adbc <__aeabi_dcmpeq>
  408be0:	2800      	cmp	r0, #0
  408be2:	f000 8175 	beq.w	408ed0 <__ieee754_rem_pio2+0x3d0>
  408be6:	2300      	movs	r3, #0
  408be8:	4630      	mov	r0, r6
  408bea:	4639      	mov	r1, r7
  408bec:	2200      	movs	r2, #0
  408bee:	f002 f8e5 	bl	40adbc <__aeabi_dcmpeq>
  408bf2:	2800      	cmp	r0, #0
  408bf4:	bf14      	ite	ne
  408bf6:	2301      	movne	r3, #1
  408bf8:	2302      	moveq	r3, #2
  408bfa:	4a5d      	ldr	r2, [pc, #372]	; (408d70 <__ieee754_rem_pio2+0x270>)
  408bfc:	9201      	str	r2, [sp, #4]
  408bfe:	2102      	movs	r1, #2
  408c00:	9100      	str	r1, [sp, #0]
  408c02:	462a      	mov	r2, r5
  408c04:	4651      	mov	r1, sl
  408c06:	a80a      	add	r0, sp, #40	; 0x28
  408c08:	f000 fb82 	bl	409310 <__kernel_rem_pio2>
  408c0c:	2c00      	cmp	r4, #0
  408c0e:	f2c0 8151 	blt.w	408eb4 <__ieee754_rem_pio2+0x3b4>
  408c12:	4605      	mov	r5, r0
  408c14:	e006      	b.n	408c24 <__ieee754_rem_pio2+0x124>
  408c16:	e9c2 0100 	strd	r0, r1, [r2]
  408c1a:	2500      	movs	r5, #0
  408c1c:	2400      	movs	r4, #0
  408c1e:	e9c2 4502 	strd	r4, r5, [r2, #8]
  408c22:	2500      	movs	r5, #0
  408c24:	4628      	mov	r0, r5
  408c26:	b011      	add	sp, #68	; 0x44
  408c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408c2c:	4602      	mov	r2, r0
  408c2e:	460b      	mov	r3, r1
  408c30:	f001 fca8 	bl	40a584 <__aeabi_dsub>
  408c34:	2500      	movs	r5, #0
  408c36:	e9ca 0102 	strd	r0, r1, [sl, #8]
  408c3a:	e9ca 0100 	strd	r0, r1, [sl]
  408c3e:	e7f1      	b.n	408c24 <__ieee754_rem_pio2+0x124>
  408c40:	a33f      	add	r3, pc, #252	; (adr r3, 408d40 <__ieee754_rem_pio2+0x240>)
  408c42:	e9d3 2300 	ldrd	r2, r3, [r3]
  408c46:	f001 fc9d 	bl	40a584 <__aeabi_dsub>
  408c4a:	a33f      	add	r3, pc, #252	; (adr r3, 408d48 <__ieee754_rem_pio2+0x248>)
  408c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408c50:	460d      	mov	r5, r1
  408c52:	4604      	mov	r4, r0
  408c54:	f001 fc96 	bl	40a584 <__aeabi_dsub>
  408c58:	4602      	mov	r2, r0
  408c5a:	460b      	mov	r3, r1
  408c5c:	e9ca 2300 	strd	r2, r3, [sl]
  408c60:	4629      	mov	r1, r5
  408c62:	4620      	mov	r0, r4
  408c64:	f001 fc8e 	bl	40a584 <__aeabi_dsub>
  408c68:	a337      	add	r3, pc, #220	; (adr r3, 408d48 <__ieee754_rem_pio2+0x248>)
  408c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
  408c6e:	f001 fc89 	bl	40a584 <__aeabi_dsub>
  408c72:	2501      	movs	r5, #1
  408c74:	e9ca 0102 	strd	r0, r1, [sl, #8]
  408c78:	e7d4      	b.n	408c24 <__ieee754_rem_pio2+0x124>
  408c7a:	f001 fb63 	bl	40a344 <fabs>
  408c7e:	a334      	add	r3, pc, #208	; (adr r3, 408d50 <__ieee754_rem_pio2+0x250>)
  408c80:	e9d3 2300 	ldrd	r2, r3, [r3]
  408c84:	4680      	mov	r8, r0
  408c86:	4689      	mov	r9, r1
  408c88:	f001 fe30 	bl	40a8ec <__aeabi_dmul>
  408c8c:	2200      	movs	r2, #0
  408c8e:	4b39      	ldr	r3, [pc, #228]	; (408d74 <__ieee754_rem_pio2+0x274>)
  408c90:	f001 fc7a 	bl	40a588 <__adddf3>
  408c94:	f002 f8da 	bl	40ae4c <__aeabi_d2iz>
  408c98:	4605      	mov	r5, r0
  408c9a:	f001 fdc1 	bl	40a820 <__aeabi_i2d>
  408c9e:	a324      	add	r3, pc, #144	; (adr r3, 408d30 <__ieee754_rem_pio2+0x230>)
  408ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
  408ca4:	e9cd 0104 	strd	r0, r1, [sp, #16]
  408ca8:	f001 fe20 	bl	40a8ec <__aeabi_dmul>
  408cac:	4602      	mov	r2, r0
  408cae:	460b      	mov	r3, r1
  408cb0:	4640      	mov	r0, r8
  408cb2:	4649      	mov	r1, r9
  408cb4:	f001 fc66 	bl	40a584 <__aeabi_dsub>
  408cb8:	a31f      	add	r3, pc, #124	; (adr r3, 408d38 <__ieee754_rem_pio2+0x238>)
  408cba:	e9d3 2300 	ldrd	r2, r3, [r3]
  408cbe:	4680      	mov	r8, r0
  408cc0:	4689      	mov	r9, r1
  408cc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  408cc6:	f001 fe11 	bl	40a8ec <__aeabi_dmul>
  408cca:	2d1f      	cmp	r5, #31
  408ccc:	e9cd 0102 	strd	r0, r1, [sp, #8]
  408cd0:	dc54      	bgt.n	408d7c <__ieee754_rem_pio2+0x27c>
  408cd2:	4b29      	ldr	r3, [pc, #164]	; (408d78 <__ieee754_rem_pio2+0x278>)
  408cd4:	1e6a      	subs	r2, r5, #1
  408cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408cda:	429f      	cmp	r7, r3
  408cdc:	d04e      	beq.n	408d7c <__ieee754_rem_pio2+0x27c>
  408cde:	4602      	mov	r2, r0
  408ce0:	460b      	mov	r3, r1
  408ce2:	4640      	mov	r0, r8
  408ce4:	4649      	mov	r1, r9
  408ce6:	f001 fc4d 	bl	40a584 <__aeabi_dsub>
  408cea:	4602      	mov	r2, r0
  408cec:	460b      	mov	r3, r1
  408cee:	e9ca 2300 	strd	r2, r3, [sl]
  408cf2:	4683      	mov	fp, r0
  408cf4:	460e      	mov	r6, r1
  408cf6:	465a      	mov	r2, fp
  408cf8:	4633      	mov	r3, r6
  408cfa:	4640      	mov	r0, r8
  408cfc:	4649      	mov	r1, r9
  408cfe:	f001 fc41 	bl	40a584 <__aeabi_dsub>
  408d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408d06:	f001 fc3d 	bl	40a584 <__aeabi_dsub>
  408d0a:	2c00      	cmp	r4, #0
  408d0c:	4602      	mov	r2, r0
  408d0e:	460b      	mov	r3, r1
  408d10:	e9ca 2302 	strd	r2, r3, [sl, #8]
  408d14:	da86      	bge.n	408c24 <__ieee754_rem_pio2+0x124>
  408d16:	465b      	mov	r3, fp
  408d18:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  408d1c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  408d20:	e88a 0048 	stmia.w	sl, {r3, r6}
  408d24:	f8ca 100c 	str.w	r1, [sl, #12]
  408d28:	f8ca 0008 	str.w	r0, [sl, #8]
  408d2c:	426d      	negs	r5, r5
  408d2e:	e779      	b.n	408c24 <__ieee754_rem_pio2+0x124>
  408d30:	54400000 	.word	0x54400000
  408d34:	3ff921fb 	.word	0x3ff921fb
  408d38:	1a626331 	.word	0x1a626331
  408d3c:	3dd0b461 	.word	0x3dd0b461
  408d40:	1a600000 	.word	0x1a600000
  408d44:	3dd0b461 	.word	0x3dd0b461
  408d48:	2e037073 	.word	0x2e037073
  408d4c:	3ba3198a 	.word	0x3ba3198a
  408d50:	6dc9c883 	.word	0x6dc9c883
  408d54:	3fe45f30 	.word	0x3fe45f30
  408d58:	3fe921fb 	.word	0x3fe921fb
  408d5c:	4002d97b 	.word	0x4002d97b
  408d60:	3ff921fb 	.word	0x3ff921fb
  408d64:	413921fb 	.word	0x413921fb
  408d68:	7fefffff 	.word	0x7fefffff
  408d6c:	41700000 	.word	0x41700000
  408d70:	0040f9e0 	.word	0x0040f9e0
  408d74:	3fe00000 	.word	0x3fe00000
  408d78:	0040f960 	.word	0x0040f960
  408d7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408d80:	4640      	mov	r0, r8
  408d82:	4649      	mov	r1, r9
  408d84:	f001 fbfe 	bl	40a584 <__aeabi_dsub>
  408d88:	153a      	asrs	r2, r7, #20
  408d8a:	f3c1 530a 	ubfx	r3, r1, #20, #11
  408d8e:	1ad3      	subs	r3, r2, r3
  408d90:	2b10      	cmp	r3, #16
  408d92:	4683      	mov	fp, r0
  408d94:	460e      	mov	r6, r1
  408d96:	9209      	str	r2, [sp, #36]	; 0x24
  408d98:	e9ca 0100 	strd	r0, r1, [sl]
  408d9c:	ddab      	ble.n	408cf6 <__ieee754_rem_pio2+0x1f6>
  408d9e:	a35e      	add	r3, pc, #376	; (adr r3, 408f18 <__ieee754_rem_pio2+0x418>)
  408da0:	e9d3 2300 	ldrd	r2, r3, [r3]
  408da4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  408da8:	f001 fda0 	bl	40a8ec <__aeabi_dmul>
  408dac:	4606      	mov	r6, r0
  408dae:	460f      	mov	r7, r1
  408db0:	4602      	mov	r2, r0
  408db2:	460b      	mov	r3, r1
  408db4:	4640      	mov	r0, r8
  408db6:	4649      	mov	r1, r9
  408db8:	f001 fbe4 	bl	40a584 <__aeabi_dsub>
  408dbc:	e9cd 0106 	strd	r0, r1, [sp, #24]
  408dc0:	4602      	mov	r2, r0
  408dc2:	460b      	mov	r3, r1
  408dc4:	4640      	mov	r0, r8
  408dc6:	4649      	mov	r1, r9
  408dc8:	f001 fbdc 	bl	40a584 <__aeabi_dsub>
  408dcc:	4632      	mov	r2, r6
  408dce:	463b      	mov	r3, r7
  408dd0:	f001 fbd8 	bl	40a584 <__aeabi_dsub>
  408dd4:	a352      	add	r3, pc, #328	; (adr r3, 408f20 <__ieee754_rem_pio2+0x420>)
  408dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
  408dda:	4606      	mov	r6, r0
  408ddc:	460f      	mov	r7, r1
  408dde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  408de2:	f001 fd83 	bl	40a8ec <__aeabi_dmul>
  408de6:	4632      	mov	r2, r6
  408de8:	463b      	mov	r3, r7
  408dea:	f001 fbcb 	bl	40a584 <__aeabi_dsub>
  408dee:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  408df2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  408df6:	4602      	mov	r2, r0
  408df8:	460b      	mov	r3, r1
  408dfa:	4640      	mov	r0, r8
  408dfc:	4649      	mov	r1, r9
  408dfe:	f001 fbc1 	bl	40a584 <__aeabi_dsub>
  408e02:	460b      	mov	r3, r1
  408e04:	f3c1 570a 	ubfx	r7, r1, #20, #11
  408e08:	460e      	mov	r6, r1
  408e0a:	9909      	ldr	r1, [sp, #36]	; 0x24
  408e0c:	1bcf      	subs	r7, r1, r7
  408e0e:	4602      	mov	r2, r0
  408e10:	2f31      	cmp	r7, #49	; 0x31
  408e12:	4683      	mov	fp, r0
  408e14:	e9ca 2300 	strd	r2, r3, [sl]
  408e18:	dd7a      	ble.n	408f10 <__ieee754_rem_pio2+0x410>
  408e1a:	a343      	add	r3, pc, #268	; (adr r3, 408f28 <__ieee754_rem_pio2+0x428>)
  408e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408e20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  408e24:	f001 fd62 	bl	40a8ec <__aeabi_dmul>
  408e28:	4606      	mov	r6, r0
  408e2a:	460f      	mov	r7, r1
  408e2c:	4602      	mov	r2, r0
  408e2e:	460b      	mov	r3, r1
  408e30:	4640      	mov	r0, r8
  408e32:	4649      	mov	r1, r9
  408e34:	e9cd 8906 	strd	r8, r9, [sp, #24]
  408e38:	f001 fba4 	bl	40a584 <__aeabi_dsub>
  408e3c:	4602      	mov	r2, r0
  408e3e:	460b      	mov	r3, r1
  408e40:	4680      	mov	r8, r0
  408e42:	4689      	mov	r9, r1
  408e44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  408e48:	f001 fb9c 	bl	40a584 <__aeabi_dsub>
  408e4c:	4632      	mov	r2, r6
  408e4e:	463b      	mov	r3, r7
  408e50:	f001 fb98 	bl	40a584 <__aeabi_dsub>
  408e54:	a336      	add	r3, pc, #216	; (adr r3, 408f30 <__ieee754_rem_pio2+0x430>)
  408e56:	e9d3 2300 	ldrd	r2, r3, [r3]
  408e5a:	4606      	mov	r6, r0
  408e5c:	460f      	mov	r7, r1
  408e5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  408e62:	f001 fd43 	bl	40a8ec <__aeabi_dmul>
  408e66:	4632      	mov	r2, r6
  408e68:	463b      	mov	r3, r7
  408e6a:	f001 fb8b 	bl	40a584 <__aeabi_dsub>
  408e6e:	4602      	mov	r2, r0
  408e70:	460b      	mov	r3, r1
  408e72:	e9cd 2302 	strd	r2, r3, [sp, #8]
  408e76:	e734      	b.n	408ce2 <__ieee754_rem_pio2+0x1e2>
  408e78:	f001 fb86 	bl	40a588 <__adddf3>
  408e7c:	4b30      	ldr	r3, [pc, #192]	; (408f40 <__ieee754_rem_pio2+0x440>)
  408e7e:	429f      	cmp	r7, r3
  408e80:	4604      	mov	r4, r0
  408e82:	460d      	mov	r5, r1
  408e84:	d026      	beq.n	408ed4 <__ieee754_rem_pio2+0x3d4>
  408e86:	a32c      	add	r3, pc, #176	; (adr r3, 408f38 <__ieee754_rem_pio2+0x438>)
  408e88:	e9d3 2300 	ldrd	r2, r3, [r3]
  408e8c:	f001 fb7c 	bl	40a588 <__adddf3>
  408e90:	4602      	mov	r2, r0
  408e92:	460b      	mov	r3, r1
  408e94:	e9ca 2300 	strd	r2, r3, [sl]
  408e98:	4629      	mov	r1, r5
  408e9a:	4620      	mov	r0, r4
  408e9c:	f001 fb72 	bl	40a584 <__aeabi_dsub>
  408ea0:	a325      	add	r3, pc, #148	; (adr r3, 408f38 <__ieee754_rem_pio2+0x438>)
  408ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
  408ea6:	f001 fb6f 	bl	40a588 <__adddf3>
  408eaa:	f04f 35ff 	mov.w	r5, #4294967295
  408eae:	e9ca 0102 	strd	r0, r1, [sl, #8]
  408eb2:	e6b7      	b.n	408c24 <__ieee754_rem_pio2+0x124>
  408eb4:	f8da 2004 	ldr.w	r2, [sl, #4]
  408eb8:	f8da 300c 	ldr.w	r3, [sl, #12]
  408ebc:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  408ec0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  408ec4:	4245      	negs	r5, r0
  408ec6:	f8ca 2004 	str.w	r2, [sl, #4]
  408eca:	f8ca 300c 	str.w	r3, [sl, #12]
  408ece:	e6a9      	b.n	408c24 <__ieee754_rem_pio2+0x124>
  408ed0:	2303      	movs	r3, #3
  408ed2:	e692      	b.n	408bfa <__ieee754_rem_pio2+0xfa>
  408ed4:	a310      	add	r3, pc, #64	; (adr r3, 408f18 <__ieee754_rem_pio2+0x418>)
  408ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
  408eda:	f001 fb55 	bl	40a588 <__adddf3>
  408ede:	a310      	add	r3, pc, #64	; (adr r3, 408f20 <__ieee754_rem_pio2+0x420>)
  408ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
  408ee4:	460d      	mov	r5, r1
  408ee6:	4604      	mov	r4, r0
  408ee8:	f001 fb4e 	bl	40a588 <__adddf3>
  408eec:	4602      	mov	r2, r0
  408eee:	460b      	mov	r3, r1
  408ef0:	e9ca 2300 	strd	r2, r3, [sl]
  408ef4:	4629      	mov	r1, r5
  408ef6:	4620      	mov	r0, r4
  408ef8:	f001 fb44 	bl	40a584 <__aeabi_dsub>
  408efc:	a308      	add	r3, pc, #32	; (adr r3, 408f20 <__ieee754_rem_pio2+0x420>)
  408efe:	e9d3 2300 	ldrd	r2, r3, [r3]
  408f02:	f001 fb41 	bl	40a588 <__adddf3>
  408f06:	f04f 35ff 	mov.w	r5, #4294967295
  408f0a:	e9ca 0102 	strd	r0, r1, [sl, #8]
  408f0e:	e689      	b.n	408c24 <__ieee754_rem_pio2+0x124>
  408f10:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  408f14:	e6ef      	b.n	408cf6 <__ieee754_rem_pio2+0x1f6>
  408f16:	bf00      	nop
  408f18:	1a600000 	.word	0x1a600000
  408f1c:	3dd0b461 	.word	0x3dd0b461
  408f20:	2e037073 	.word	0x2e037073
  408f24:	3ba3198a 	.word	0x3ba3198a
  408f28:	2e000000 	.word	0x2e000000
  408f2c:	3ba3198a 	.word	0x3ba3198a
  408f30:	252049c1 	.word	0x252049c1
  408f34:	397b839a 	.word	0x397b839a
  408f38:	1a626331 	.word	0x1a626331
  408f3c:	3dd0b461 	.word	0x3dd0b461
  408f40:	3ff921fb 	.word	0x3ff921fb

00408f44 <__ieee754_sqrt>:
  408f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408f48:	4e5d      	ldr	r6, [pc, #372]	; (4090c0 <__ieee754_sqrt+0x17c>)
  408f4a:	46b6      	mov	lr, r6
  408f4c:	400e      	ands	r6, r1
  408f4e:	4576      	cmp	r6, lr
  408f50:	460c      	mov	r4, r1
  408f52:	4605      	mov	r5, r0
  408f54:	f000 8095 	beq.w	409082 <__ieee754_sqrt+0x13e>
  408f58:	2900      	cmp	r1, #0
  408f5a:	460b      	mov	r3, r1
  408f5c:	4602      	mov	r2, r0
  408f5e:	dd73      	ble.n	409048 <__ieee754_sqrt+0x104>
  408f60:	150f      	asrs	r7, r1, #20
  408f62:	d07e      	beq.n	409062 <__ieee754_sqrt+0x11e>
  408f64:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  408f68:	f3c3 0313 	ubfx	r3, r3, #0, #20
  408f6c:	07f8      	lsls	r0, r7, #31
  408f6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  408f72:	d464      	bmi.n	40903e <__ieee754_sqrt+0xfa>
  408f74:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  408f78:	2600      	movs	r6, #0
  408f7a:	440b      	add	r3, r1
  408f7c:	107f      	asrs	r7, r7, #1
  408f7e:	0052      	lsls	r2, r2, #1
  408f80:	46b6      	mov	lr, r6
  408f82:	2016      	movs	r0, #22
  408f84:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  408f88:	eb0e 0401 	add.w	r4, lr, r1
  408f8c:	429c      	cmp	r4, r3
  408f8e:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  408f92:	ea4f 0242 	mov.w	r2, r2, lsl #1
  408f96:	dc03      	bgt.n	408fa0 <__ieee754_sqrt+0x5c>
  408f98:	1b1b      	subs	r3, r3, r4
  408f9a:	eb04 0e01 	add.w	lr, r4, r1
  408f9e:	440e      	add	r6, r1
  408fa0:	3801      	subs	r0, #1
  408fa2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  408fa6:	ea4f 0151 	mov.w	r1, r1, lsr #1
  408faa:	d1ed      	bne.n	408f88 <__ieee754_sqrt+0x44>
  408fac:	4684      	mov	ip, r0
  408fae:	2420      	movs	r4, #32
  408fb0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  408fb4:	e009      	b.n	408fca <__ieee754_sqrt+0x86>
  408fb6:	d020      	beq.n	408ffa <__ieee754_sqrt+0xb6>
  408fb8:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  408fbc:	3c01      	subs	r4, #1
  408fbe:	ea4f 0151 	mov.w	r1, r1, lsr #1
  408fc2:	442b      	add	r3, r5
  408fc4:	ea4f 0242 	mov.w	r2, r2, lsl #1
  408fc8:	d020      	beq.n	40900c <__ieee754_sqrt+0xc8>
  408fca:	459e      	cmp	lr, r3
  408fcc:	eb01 050c 	add.w	r5, r1, ip
  408fd0:	daf1      	bge.n	408fb6 <__ieee754_sqrt+0x72>
  408fd2:	2d00      	cmp	r5, #0
  408fd4:	eb05 0c01 	add.w	ip, r5, r1
  408fd8:	db09      	blt.n	408fee <__ieee754_sqrt+0xaa>
  408fda:	46f0      	mov	r8, lr
  408fdc:	4295      	cmp	r5, r2
  408fde:	ebce 0303 	rsb	r3, lr, r3
  408fe2:	d900      	bls.n	408fe6 <__ieee754_sqrt+0xa2>
  408fe4:	3b01      	subs	r3, #1
  408fe6:	1b52      	subs	r2, r2, r5
  408fe8:	4408      	add	r0, r1
  408fea:	46c6      	mov	lr, r8
  408fec:	e7e4      	b.n	408fb8 <__ieee754_sqrt+0x74>
  408fee:	f1bc 0f00 	cmp.w	ip, #0
  408ff2:	dbf2      	blt.n	408fda <__ieee754_sqrt+0x96>
  408ff4:	f10e 0801 	add.w	r8, lr, #1
  408ff8:	e7f0      	b.n	408fdc <__ieee754_sqrt+0x98>
  408ffa:	4295      	cmp	r5, r2
  408ffc:	d817      	bhi.n	40902e <__ieee754_sqrt+0xea>
  408ffe:	2d00      	cmp	r5, #0
  409000:	eb05 0c01 	add.w	ip, r5, r1
  409004:	db47      	blt.n	409096 <__ieee754_sqrt+0x152>
  409006:	4698      	mov	r8, r3
  409008:	2300      	movs	r3, #0
  40900a:	e7ec      	b.n	408fe6 <__ieee754_sqrt+0xa2>
  40900c:	4313      	orrs	r3, r2
  40900e:	d110      	bne.n	409032 <__ieee754_sqrt+0xee>
  409010:	0840      	lsrs	r0, r0, #1
  409012:	1073      	asrs	r3, r6, #1
  409014:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  409018:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40901c:	07f2      	lsls	r2, r6, #31
  40901e:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  409022:	bf48      	it	mi
  409024:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  409028:	4649      	mov	r1, r9
  40902a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40902e:	4673      	mov	r3, lr
  409030:	e7c2      	b.n	408fb8 <__ieee754_sqrt+0x74>
  409032:	1c41      	adds	r1, r0, #1
  409034:	d033      	beq.n	40909e <__ieee754_sqrt+0x15a>
  409036:	f000 0301 	and.w	r3, r0, #1
  40903a:	4418      	add	r0, r3
  40903c:	e7e8      	b.n	409010 <__ieee754_sqrt+0xcc>
  40903e:	005b      	lsls	r3, r3, #1
  409040:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  409044:	0052      	lsls	r2, r2, #1
  409046:	e795      	b.n	408f74 <__ieee754_sqrt+0x30>
  409048:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  40904c:	4306      	orrs	r6, r0
  40904e:	d0ec      	beq.n	40902a <__ieee754_sqrt+0xe6>
  409050:	bb69      	cbnz	r1, 4090ae <__ieee754_sqrt+0x16a>
  409052:	460f      	mov	r7, r1
  409054:	0ad3      	lsrs	r3, r2, #11
  409056:	3f15      	subs	r7, #21
  409058:	0552      	lsls	r2, r2, #21
  40905a:	2b00      	cmp	r3, #0
  40905c:	d0fa      	beq.n	409054 <__ieee754_sqrt+0x110>
  40905e:	02dd      	lsls	r5, r3, #11
  409060:	d420      	bmi.n	4090a4 <__ieee754_sqrt+0x160>
  409062:	2100      	movs	r1, #0
  409064:	e000      	b.n	409068 <__ieee754_sqrt+0x124>
  409066:	4601      	mov	r1, r0
  409068:	005b      	lsls	r3, r3, #1
  40906a:	02dc      	lsls	r4, r3, #11
  40906c:	f101 0001 	add.w	r0, r1, #1
  409070:	d5f9      	bpl.n	409066 <__ieee754_sqrt+0x122>
  409072:	f1c0 0420 	rsb	r4, r0, #32
  409076:	fa22 f404 	lsr.w	r4, r2, r4
  40907a:	4323      	orrs	r3, r4
  40907c:	1a7f      	subs	r7, r7, r1
  40907e:	4082      	lsls	r2, r0
  409080:	e770      	b.n	408f64 <__ieee754_sqrt+0x20>
  409082:	4602      	mov	r2, r0
  409084:	460b      	mov	r3, r1
  409086:	f001 fc31 	bl	40a8ec <__aeabi_dmul>
  40908a:	462a      	mov	r2, r5
  40908c:	4623      	mov	r3, r4
  40908e:	f001 fa7b 	bl	40a588 <__adddf3>
  409092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409096:	f1bc 0f00 	cmp.w	ip, #0
  40909a:	daab      	bge.n	408ff4 <__ieee754_sqrt+0xb0>
  40909c:	e7b3      	b.n	409006 <__ieee754_sqrt+0xc2>
  40909e:	3601      	adds	r6, #1
  4090a0:	4620      	mov	r0, r4
  4090a2:	e7b6      	b.n	409012 <__ieee754_sqrt+0xce>
  4090a4:	2420      	movs	r4, #32
  4090a6:	f04f 31ff 	mov.w	r1, #4294967295
  4090aa:	2000      	movs	r0, #0
  4090ac:	e7e3      	b.n	409076 <__ieee754_sqrt+0x132>
  4090ae:	4602      	mov	r2, r0
  4090b0:	460b      	mov	r3, r1
  4090b2:	f001 fa67 	bl	40a584 <__aeabi_dsub>
  4090b6:	4602      	mov	r2, r0
  4090b8:	460b      	mov	r3, r1
  4090ba:	f001 fd41 	bl	40ab40 <__aeabi_ddiv>
  4090be:	e7b4      	b.n	40902a <__ieee754_sqrt+0xe6>
  4090c0:	7ff00000 	.word	0x7ff00000
  4090c4:	00000000 	.word	0x00000000

004090c8 <__kernel_cos>:
  4090c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4090cc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  4090d0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  4090d4:	b085      	sub	sp, #20
  4090d6:	460c      	mov	r4, r1
  4090d8:	4692      	mov	sl, r2
  4090da:	469b      	mov	fp, r3
  4090dc:	4605      	mov	r5, r0
  4090de:	da6b      	bge.n	4091b8 <__kernel_cos+0xf0>
  4090e0:	f001 feb4 	bl	40ae4c <__aeabi_d2iz>
  4090e4:	2800      	cmp	r0, #0
  4090e6:	f000 80e8 	beq.w	4092ba <__kernel_cos+0x1f2>
  4090ea:	462a      	mov	r2, r5
  4090ec:	4623      	mov	r3, r4
  4090ee:	4628      	mov	r0, r5
  4090f0:	4621      	mov	r1, r4
  4090f2:	f001 fbfb 	bl	40a8ec <__aeabi_dmul>
  4090f6:	a374      	add	r3, pc, #464	; (adr r3, 4092c8 <__kernel_cos+0x200>)
  4090f8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4090fc:	4680      	mov	r8, r0
  4090fe:	4689      	mov	r9, r1
  409100:	f001 fbf4 	bl	40a8ec <__aeabi_dmul>
  409104:	a372      	add	r3, pc, #456	; (adr r3, 4092d0 <__kernel_cos+0x208>)
  409106:	e9d3 2300 	ldrd	r2, r3, [r3]
  40910a:	f001 fa3d 	bl	40a588 <__adddf3>
  40910e:	4642      	mov	r2, r8
  409110:	464b      	mov	r3, r9
  409112:	f001 fbeb 	bl	40a8ec <__aeabi_dmul>
  409116:	a370      	add	r3, pc, #448	; (adr r3, 4092d8 <__kernel_cos+0x210>)
  409118:	e9d3 2300 	ldrd	r2, r3, [r3]
  40911c:	f001 fa32 	bl	40a584 <__aeabi_dsub>
  409120:	4642      	mov	r2, r8
  409122:	464b      	mov	r3, r9
  409124:	f001 fbe2 	bl	40a8ec <__aeabi_dmul>
  409128:	a36d      	add	r3, pc, #436	; (adr r3, 4092e0 <__kernel_cos+0x218>)
  40912a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40912e:	f001 fa2b 	bl	40a588 <__adddf3>
  409132:	4642      	mov	r2, r8
  409134:	464b      	mov	r3, r9
  409136:	f001 fbd9 	bl	40a8ec <__aeabi_dmul>
  40913a:	a36b      	add	r3, pc, #428	; (adr r3, 4092e8 <__kernel_cos+0x220>)
  40913c:	e9d3 2300 	ldrd	r2, r3, [r3]
  409140:	f001 fa20 	bl	40a584 <__aeabi_dsub>
  409144:	4642      	mov	r2, r8
  409146:	464b      	mov	r3, r9
  409148:	f001 fbd0 	bl	40a8ec <__aeabi_dmul>
  40914c:	a368      	add	r3, pc, #416	; (adr r3, 4092f0 <__kernel_cos+0x228>)
  40914e:	e9d3 2300 	ldrd	r2, r3, [r3]
  409152:	f001 fa19 	bl	40a588 <__adddf3>
  409156:	4642      	mov	r2, r8
  409158:	464b      	mov	r3, r9
  40915a:	f001 fbc7 	bl	40a8ec <__aeabi_dmul>
  40915e:	e9cd 0100 	strd	r0, r1, [sp]
  409162:	2200      	movs	r2, #0
  409164:	4b64      	ldr	r3, [pc, #400]	; (4092f8 <__kernel_cos+0x230>)
  409166:	4640      	mov	r0, r8
  409168:	4649      	mov	r1, r9
  40916a:	f001 fbbf 	bl	40a8ec <__aeabi_dmul>
  40916e:	e9dd 2300 	ldrd	r2, r3, [sp]
  409172:	4606      	mov	r6, r0
  409174:	460f      	mov	r7, r1
  409176:	4640      	mov	r0, r8
  409178:	4649      	mov	r1, r9
  40917a:	f001 fbb7 	bl	40a8ec <__aeabi_dmul>
  40917e:	4652      	mov	r2, sl
  409180:	4680      	mov	r8, r0
  409182:	4689      	mov	r9, r1
  409184:	465b      	mov	r3, fp
  409186:	4628      	mov	r0, r5
  409188:	4621      	mov	r1, r4
  40918a:	f001 fbaf 	bl	40a8ec <__aeabi_dmul>
  40918e:	4602      	mov	r2, r0
  409190:	460b      	mov	r3, r1
  409192:	4640      	mov	r0, r8
  409194:	4649      	mov	r1, r9
  409196:	f001 f9f5 	bl	40a584 <__aeabi_dsub>
  40919a:	4602      	mov	r2, r0
  40919c:	460b      	mov	r3, r1
  40919e:	4630      	mov	r0, r6
  4091a0:	4639      	mov	r1, r7
  4091a2:	f001 f9ef 	bl	40a584 <__aeabi_dsub>
  4091a6:	4602      	mov	r2, r0
  4091a8:	460b      	mov	r3, r1
  4091aa:	2000      	movs	r0, #0
  4091ac:	4953      	ldr	r1, [pc, #332]	; (4092fc <__kernel_cos+0x234>)
  4091ae:	f001 f9e9 	bl	40a584 <__aeabi_dsub>
  4091b2:	b005      	add	sp, #20
  4091b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4091b8:	4602      	mov	r2, r0
  4091ba:	460b      	mov	r3, r1
  4091bc:	f001 fb96 	bl	40a8ec <__aeabi_dmul>
  4091c0:	a341      	add	r3, pc, #260	; (adr r3, 4092c8 <__kernel_cos+0x200>)
  4091c2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4091c6:	4680      	mov	r8, r0
  4091c8:	4689      	mov	r9, r1
  4091ca:	f001 fb8f 	bl	40a8ec <__aeabi_dmul>
  4091ce:	a340      	add	r3, pc, #256	; (adr r3, 4092d0 <__kernel_cos+0x208>)
  4091d0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4091d4:	f001 f9d8 	bl	40a588 <__adddf3>
  4091d8:	4642      	mov	r2, r8
  4091da:	464b      	mov	r3, r9
  4091dc:	f001 fb86 	bl	40a8ec <__aeabi_dmul>
  4091e0:	a33d      	add	r3, pc, #244	; (adr r3, 4092d8 <__kernel_cos+0x210>)
  4091e2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4091e6:	f001 f9cd 	bl	40a584 <__aeabi_dsub>
  4091ea:	4642      	mov	r2, r8
  4091ec:	464b      	mov	r3, r9
  4091ee:	f001 fb7d 	bl	40a8ec <__aeabi_dmul>
  4091f2:	a33b      	add	r3, pc, #236	; (adr r3, 4092e0 <__kernel_cos+0x218>)
  4091f4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4091f8:	f001 f9c6 	bl	40a588 <__adddf3>
  4091fc:	4642      	mov	r2, r8
  4091fe:	464b      	mov	r3, r9
  409200:	f001 fb74 	bl	40a8ec <__aeabi_dmul>
  409204:	a338      	add	r3, pc, #224	; (adr r3, 4092e8 <__kernel_cos+0x220>)
  409206:	e9d3 2300 	ldrd	r2, r3, [r3]
  40920a:	f001 f9bb 	bl	40a584 <__aeabi_dsub>
  40920e:	4642      	mov	r2, r8
  409210:	464b      	mov	r3, r9
  409212:	f001 fb6b 	bl	40a8ec <__aeabi_dmul>
  409216:	a336      	add	r3, pc, #216	; (adr r3, 4092f0 <__kernel_cos+0x228>)
  409218:	e9d3 2300 	ldrd	r2, r3, [r3]
  40921c:	f001 f9b4 	bl	40a588 <__adddf3>
  409220:	464b      	mov	r3, r9
  409222:	4642      	mov	r2, r8
  409224:	f001 fb62 	bl	40a8ec <__aeabi_dmul>
  409228:	4b35      	ldr	r3, [pc, #212]	; (409300 <__kernel_cos+0x238>)
  40922a:	429e      	cmp	r6, r3
  40922c:	e9cd 0100 	strd	r0, r1, [sp]
  409230:	dd97      	ble.n	409162 <__kernel_cos+0x9a>
  409232:	4b34      	ldr	r3, [pc, #208]	; (409304 <__kernel_cos+0x23c>)
  409234:	429e      	cmp	r6, r3
  409236:	f04f 0200 	mov.w	r2, #0
  40923a:	dc38      	bgt.n	4092ae <__kernel_cos+0x1e6>
  40923c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
  409240:	2000      	movs	r0, #0
  409242:	492e      	ldr	r1, [pc, #184]	; (4092fc <__kernel_cos+0x234>)
  409244:	4616      	mov	r6, r2
  409246:	461f      	mov	r7, r3
  409248:	f001 f99c 	bl	40a584 <__aeabi_dsub>
  40924c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409250:	2200      	movs	r2, #0
  409252:	4b29      	ldr	r3, [pc, #164]	; (4092f8 <__kernel_cos+0x230>)
  409254:	4640      	mov	r0, r8
  409256:	4649      	mov	r1, r9
  409258:	f001 fb48 	bl	40a8ec <__aeabi_dmul>
  40925c:	4632      	mov	r2, r6
  40925e:	463b      	mov	r3, r7
  409260:	f001 f990 	bl	40a584 <__aeabi_dsub>
  409264:	e9dd 2300 	ldrd	r2, r3, [sp]
  409268:	4606      	mov	r6, r0
  40926a:	460f      	mov	r7, r1
  40926c:	4640      	mov	r0, r8
  40926e:	4649      	mov	r1, r9
  409270:	f001 fb3c 	bl	40a8ec <__aeabi_dmul>
  409274:	4652      	mov	r2, sl
  409276:	4680      	mov	r8, r0
  409278:	4689      	mov	r9, r1
  40927a:	465b      	mov	r3, fp
  40927c:	4628      	mov	r0, r5
  40927e:	4621      	mov	r1, r4
  409280:	f001 fb34 	bl	40a8ec <__aeabi_dmul>
  409284:	4602      	mov	r2, r0
  409286:	460b      	mov	r3, r1
  409288:	4640      	mov	r0, r8
  40928a:	4649      	mov	r1, r9
  40928c:	f001 f97a 	bl	40a584 <__aeabi_dsub>
  409290:	4602      	mov	r2, r0
  409292:	460b      	mov	r3, r1
  409294:	4630      	mov	r0, r6
  409296:	4639      	mov	r1, r7
  409298:	f001 f974 	bl	40a584 <__aeabi_dsub>
  40929c:	4602      	mov	r2, r0
  40929e:	460b      	mov	r3, r1
  4092a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4092a4:	f001 f96e 	bl	40a584 <__aeabi_dsub>
  4092a8:	b005      	add	sp, #20
  4092aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4092ae:	4b16      	ldr	r3, [pc, #88]	; (409308 <__kernel_cos+0x240>)
  4092b0:	4f16      	ldr	r7, [pc, #88]	; (40930c <__kernel_cos+0x244>)
  4092b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4092b6:	2600      	movs	r6, #0
  4092b8:	e7ca      	b.n	409250 <__kernel_cos+0x188>
  4092ba:	4910      	ldr	r1, [pc, #64]	; (4092fc <__kernel_cos+0x234>)
  4092bc:	2000      	movs	r0, #0
  4092be:	b005      	add	sp, #20
  4092c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4092c4:	f3af 8000 	nop.w
  4092c8:	be8838d4 	.word	0xbe8838d4
  4092cc:	bda8fae9 	.word	0xbda8fae9
  4092d0:	bdb4b1c4 	.word	0xbdb4b1c4
  4092d4:	3e21ee9e 	.word	0x3e21ee9e
  4092d8:	809c52ad 	.word	0x809c52ad
  4092dc:	3e927e4f 	.word	0x3e927e4f
  4092e0:	19cb1590 	.word	0x19cb1590
  4092e4:	3efa01a0 	.word	0x3efa01a0
  4092e8:	16c15177 	.word	0x16c15177
  4092ec:	3f56c16c 	.word	0x3f56c16c
  4092f0:	5555554c 	.word	0x5555554c
  4092f4:	3fa55555 	.word	0x3fa55555
  4092f8:	3fe00000 	.word	0x3fe00000
  4092fc:	3ff00000 	.word	0x3ff00000
  409300:	3fd33332 	.word	0x3fd33332
  409304:	3fe90000 	.word	0x3fe90000
  409308:	3fe70000 	.word	0x3fe70000
  40930c:	3fd20000 	.word	0x3fd20000

00409310 <__kernel_rem_pio2>:
  409310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409314:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
  409318:	4c79      	ldr	r4, [pc, #484]	; (409500 <__kernel_rem_pio2+0x1f0>)
  40931a:	9ea6      	ldr	r6, [sp, #664]	; 0x298
  40931c:	4d79      	ldr	r5, [pc, #484]	; (409504 <__kernel_rem_pio2+0x1f4>)
  40931e:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
  409322:	9409      	str	r4, [sp, #36]	; 0x24
  409324:	4626      	mov	r6, r4
  409326:	1ed4      	subs	r4, r2, #3
  409328:	fb85 7504 	smull	r7, r5, r5, r4
  40932c:	17e4      	asrs	r4, r4, #31
  40932e:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
  409332:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  409336:	461d      	mov	r5, r3
  409338:	930c      	str	r3, [sp, #48]	; 0x30
  40933a:	1c63      	adds	r3, r4, #1
  40933c:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
  409340:	3d01      	subs	r5, #1
  409342:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  409346:	9308      	str	r3, [sp, #32]
  409348:	462b      	mov	r3, r5
  40934a:	940d      	str	r4, [sp, #52]	; 0x34
  40934c:	9502      	str	r5, [sp, #8]
  40934e:	1b65      	subs	r5, r4, r5
  409350:	18f4      	adds	r4, r6, r3
  409352:	9004      	str	r0, [sp, #16]
  409354:	910a      	str	r1, [sp, #40]	; 0x28
  409356:	d416      	bmi.n	409386 <__kernel_rem_pio2+0x76>
  409358:	442c      	add	r4, r5
  40935a:	3401      	adds	r4, #1
  40935c:	ae22      	add	r6, sp, #136	; 0x88
  40935e:	9fa7      	ldr	r7, [sp, #668]	; 0x29c
  409360:	e008      	b.n	409374 <__kernel_rem_pio2+0x64>
  409362:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
  409366:	f001 fa5b 	bl	40a820 <__aeabi_i2d>
  40936a:	3501      	adds	r5, #1
  40936c:	42a5      	cmp	r5, r4
  40936e:	e9e6 0102 	strd	r0, r1, [r6, #8]!
  409372:	d008      	beq.n	409386 <__kernel_rem_pio2+0x76>
  409374:	2d00      	cmp	r5, #0
  409376:	daf4      	bge.n	409362 <__kernel_rem_pio2+0x52>
  409378:	3501      	adds	r5, #1
  40937a:	2000      	movs	r0, #0
  40937c:	2100      	movs	r1, #0
  40937e:	42a5      	cmp	r5, r4
  409380:	e9e6 0102 	strd	r0, r1, [r6, #8]!
  409384:	d1f6      	bne.n	409374 <__kernel_rem_pio2+0x64>
  409386:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409388:	2b00      	cmp	r3, #0
  40938a:	db31      	blt.n	4093f0 <__kernel_rem_pio2+0xe0>
  40938c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40938e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409390:	a974      	add	r1, sp, #464	; 0x1d0
  409392:	eb01 0bc2 	add.w	fp, r1, r2, lsl #3
  409396:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
  40939a:	9a02      	ldr	r2, [sp, #8]
  40939c:	a924      	add	r1, sp, #144	; 0x90
  40939e:	00db      	lsls	r3, r3, #3
  4093a0:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
  4093a4:	9301      	str	r3, [sp, #4]
  4093a6:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
  4093aa:	9b02      	ldr	r3, [sp, #8]
  4093ac:	2b00      	cmp	r3, #0
  4093ae:	f2c0 8190 	blt.w	4096d2 <__kernel_rem_pio2+0x3c2>
  4093b2:	9b04      	ldr	r3, [sp, #16]
  4093b4:	f1a3 0508 	sub.w	r5, r3, #8
  4093b8:	9b01      	ldr	r3, [sp, #4]
  4093ba:	464c      	mov	r4, r9
  4093bc:	eb09 0803 	add.w	r8, r9, r3
  4093c0:	2600      	movs	r6, #0
  4093c2:	2700      	movs	r7, #0
  4093c4:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
  4093c8:	e874 0102 	ldrd	r0, r1, [r4], #-8
  4093cc:	f001 fa8e 	bl	40a8ec <__aeabi_dmul>
  4093d0:	4602      	mov	r2, r0
  4093d2:	460b      	mov	r3, r1
  4093d4:	4630      	mov	r0, r6
  4093d6:	4639      	mov	r1, r7
  4093d8:	f001 f8d6 	bl	40a588 <__adddf3>
  4093dc:	4544      	cmp	r4, r8
  4093de:	4606      	mov	r6, r0
  4093e0:	460f      	mov	r7, r1
  4093e2:	d1ef      	bne.n	4093c4 <__kernel_rem_pio2+0xb4>
  4093e4:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  4093e8:	45da      	cmp	sl, fp
  4093ea:	f109 0908 	add.w	r9, r9, #8
  4093ee:	d1dc      	bne.n	4093aa <__kernel_rem_pio2+0x9a>
  4093f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4093f2:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
  4093f6:	3b02      	subs	r3, #2
  4093f8:	009b      	lsls	r3, r3, #2
  4093fa:	1d1a      	adds	r2, r3, #4
  4093fc:	a910      	add	r1, sp, #64	; 0x40
  4093fe:	440a      	add	r2, r1
  409400:	440b      	add	r3, r1
  409402:	920f      	str	r2, [sp, #60]	; 0x3c
  409404:	930e      	str	r3, [sp, #56]	; 0x38
  409406:	ab9c      	add	r3, sp, #624	; 0x270
  409408:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40940c:	2d00      	cmp	r5, #0
  40940e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
  409412:	dd2b      	ble.n	40946c <__kernel_rem_pio2+0x15c>
  409414:	ab9c      	add	r3, sp, #624	; 0x270
  409416:	eb03 04c5 	add.w	r4, r3, r5, lsl #3
  40941a:	3ca8      	subs	r4, #168	; 0xa8
  40941c:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
  409420:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
  409424:	2200      	movs	r2, #0
  409426:	4b38      	ldr	r3, [pc, #224]	; (409508 <__kernel_rem_pio2+0x1f8>)
  409428:	4630      	mov	r0, r6
  40942a:	4639      	mov	r1, r7
  40942c:	f001 fa5e 	bl	40a8ec <__aeabi_dmul>
  409430:	f001 fd0c 	bl	40ae4c <__aeabi_d2iz>
  409434:	f001 f9f4 	bl	40a820 <__aeabi_i2d>
  409438:	2200      	movs	r2, #0
  40943a:	4b34      	ldr	r3, [pc, #208]	; (40950c <__kernel_rem_pio2+0x1fc>)
  40943c:	4680      	mov	r8, r0
  40943e:	4689      	mov	r9, r1
  409440:	f001 fa54 	bl	40a8ec <__aeabi_dmul>
  409444:	4602      	mov	r2, r0
  409446:	460b      	mov	r3, r1
  409448:	4630      	mov	r0, r6
  40944a:	4639      	mov	r1, r7
  40944c:	f001 f89a 	bl	40a584 <__aeabi_dsub>
  409450:	f001 fcfc 	bl	40ae4c <__aeabi_d2iz>
  409454:	e874 2302 	ldrd	r2, r3, [r4], #-8
  409458:	f84a 0f04 	str.w	r0, [sl, #4]!
  40945c:	4649      	mov	r1, r9
  40945e:	4640      	mov	r0, r8
  409460:	f001 f892 	bl	40a588 <__adddf3>
  409464:	455c      	cmp	r4, fp
  409466:	4606      	mov	r6, r0
  409468:	460f      	mov	r7, r1
  40946a:	d1db      	bne.n	409424 <__kernel_rem_pio2+0x114>
  40946c:	9c08      	ldr	r4, [sp, #32]
  40946e:	4630      	mov	r0, r6
  409470:	4639      	mov	r1, r7
  409472:	4622      	mov	r2, r4
  409474:	f000 fffc 	bl	40a470 <scalbn>
  409478:	2200      	movs	r2, #0
  40947a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  40947e:	4606      	mov	r6, r0
  409480:	460f      	mov	r7, r1
  409482:	f001 fa33 	bl	40a8ec <__aeabi_dmul>
  409486:	f000 ff63 	bl	40a350 <floor>
  40948a:	2200      	movs	r2, #0
  40948c:	4b20      	ldr	r3, [pc, #128]	; (409510 <__kernel_rem_pio2+0x200>)
  40948e:	f001 fa2d 	bl	40a8ec <__aeabi_dmul>
  409492:	4602      	mov	r2, r0
  409494:	460b      	mov	r3, r1
  409496:	4630      	mov	r0, r6
  409498:	4639      	mov	r1, r7
  40949a:	f001 f873 	bl	40a584 <__aeabi_dsub>
  40949e:	460f      	mov	r7, r1
  4094a0:	4606      	mov	r6, r0
  4094a2:	f001 fcd3 	bl	40ae4c <__aeabi_d2iz>
  4094a6:	4681      	mov	r9, r0
  4094a8:	f001 f9ba 	bl	40a820 <__aeabi_i2d>
  4094ac:	4602      	mov	r2, r0
  4094ae:	460b      	mov	r3, r1
  4094b0:	4630      	mov	r0, r6
  4094b2:	4639      	mov	r1, r7
  4094b4:	f001 f866 	bl	40a584 <__aeabi_dsub>
  4094b8:	2c00      	cmp	r4, #0
  4094ba:	4606      	mov	r6, r0
  4094bc:	460f      	mov	r7, r1
  4094be:	f340 80ef 	ble.w	4096a0 <__kernel_rem_pio2+0x390>
  4094c2:	1e69      	subs	r1, r5, #1
  4094c4:	aa10      	add	r2, sp, #64	; 0x40
  4094c6:	f1c4 0318 	rsb	r3, r4, #24
  4094ca:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4094ce:	fa42 f003 	asr.w	r0, r2, r3
  4094d2:	fa00 f303 	lsl.w	r3, r0, r3
  4094d6:	1ad3      	subs	r3, r2, r3
  4094d8:	aa10      	add	r2, sp, #64	; 0x40
  4094da:	f1c4 0817 	rsb	r8, r4, #23
  4094de:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  4094e2:	4481      	add	r9, r0
  4094e4:	fa43 f808 	asr.w	r8, r3, r8
  4094e8:	f1b8 0f00 	cmp.w	r8, #0
  4094ec:	dd3d      	ble.n	40956a <__kernel_rem_pio2+0x25a>
  4094ee:	2d00      	cmp	r5, #0
  4094f0:	f109 0901 	add.w	r9, r9, #1
  4094f4:	f340 82d6 	ble.w	409aa4 <__kernel_rem_pio2+0x794>
  4094f8:	2200      	movs	r2, #0
  4094fa:	4614      	mov	r4, r2
  4094fc:	a90f      	add	r1, sp, #60	; 0x3c
  4094fe:	e011      	b.n	409524 <__kernel_rem_pio2+0x214>
  409500:	0040fae8 	.word	0x0040fae8
  409504:	2aaaaaab 	.word	0x2aaaaaab
  409508:	3e700000 	.word	0x3e700000
  40950c:	41700000 	.word	0x41700000
  409510:	40200000 	.word	0x40200000
  409514:	f1c3 7080 	rsb	r0, r3, #16777216	; 0x1000000
  409518:	b10b      	cbz	r3, 40951e <__kernel_rem_pio2+0x20e>
  40951a:	6008      	str	r0, [r1, #0]
  40951c:	2401      	movs	r4, #1
  40951e:	3201      	adds	r2, #1
  409520:	4295      	cmp	r5, r2
  409522:	dd0d      	ble.n	409540 <__kernel_rem_pio2+0x230>
  409524:	f851 3f04 	ldr.w	r3, [r1, #4]!
  409528:	2c00      	cmp	r4, #0
  40952a:	d0f3      	beq.n	409514 <__kernel_rem_pio2+0x204>
  40952c:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
  409530:	3201      	adds	r2, #1
  409532:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
  409536:	4295      	cmp	r5, r2
  409538:	600b      	str	r3, [r1, #0]
  40953a:	f04f 0401 	mov.w	r4, #1
  40953e:	dcf1      	bgt.n	409524 <__kernel_rem_pio2+0x214>
  409540:	9b08      	ldr	r3, [sp, #32]
  409542:	2b00      	cmp	r3, #0
  409544:	dd0d      	ble.n	409562 <__kernel_rem_pio2+0x252>
  409546:	2b01      	cmp	r3, #1
  409548:	f000 80b2 	beq.w	4096b0 <__kernel_rem_pio2+0x3a0>
  40954c:	2b02      	cmp	r3, #2
  40954e:	d108      	bne.n	409562 <__kernel_rem_pio2+0x252>
  409550:	1e6a      	subs	r2, r5, #1
  409552:	ab10      	add	r3, sp, #64	; 0x40
  409554:	a910      	add	r1, sp, #64	; 0x40
  409556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40955a:	f3c3 0315 	ubfx	r3, r3, #0, #22
  40955e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  409562:	f1b8 0f02 	cmp.w	r8, #2
  409566:	f000 8082 	beq.w	40966e <__kernel_rem_pio2+0x35e>
  40956a:	2200      	movs	r2, #0
  40956c:	2300      	movs	r3, #0
  40956e:	4630      	mov	r0, r6
  409570:	4639      	mov	r1, r7
  409572:	f001 fc23 	bl	40adbc <__aeabi_dcmpeq>
  409576:	2800      	cmp	r0, #0
  409578:	f000 825e 	beq.w	409a38 <__kernel_rem_pio2+0x728>
  40957c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40957e:	f105 3bff 	add.w	fp, r5, #4294967295
  409582:	455b      	cmp	r3, fp
  409584:	dc10      	bgt.n	4095a8 <__kernel_rem_pio2+0x298>
  409586:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
  40958a:	aa10      	add	r2, sp, #64	; 0x40
  40958c:	3b01      	subs	r3, #1
  40958e:	980f      	ldr	r0, [sp, #60]	; 0x3c
  409590:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  409594:	2200      	movs	r2, #0
  409596:	f853 1904 	ldr.w	r1, [r3], #-4
  40959a:	4283      	cmp	r3, r0
  40959c:	ea42 0201 	orr.w	r2, r2, r1
  4095a0:	d1f9      	bne.n	409596 <__kernel_rem_pio2+0x286>
  4095a2:	2a00      	cmp	r2, #0
  4095a4:	f040 80b2 	bne.w	40970c <__kernel_rem_pio2+0x3fc>
  4095a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4095aa:	aa10      	add	r2, sp, #64	; 0x40
  4095ac:	3b01      	subs	r3, #1
  4095ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4095b2:	2b00      	cmp	r3, #0
  4095b4:	f040 8274 	bne.w	409aa0 <__kernel_rem_pio2+0x790>
  4095b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4095ba:	2301      	movs	r3, #1
  4095bc:	f852 1904 	ldr.w	r1, [r2], #-4
  4095c0:	3301      	adds	r3, #1
  4095c2:	2900      	cmp	r1, #0
  4095c4:	d0fa      	beq.n	4095bc <__kernel_rem_pio2+0x2ac>
  4095c6:	18e9      	adds	r1, r5, r3
  4095c8:	1c6a      	adds	r2, r5, #1
  4095ca:	428a      	cmp	r2, r1
  4095cc:	910b      	str	r1, [sp, #44]	; 0x2c
  4095ce:	dc49      	bgt.n	409664 <__kernel_rem_pio2+0x354>
  4095d0:	990d      	ldr	r1, [sp, #52]	; 0x34
  4095d2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4095d4:	1851      	adds	r1, r2, r1
  4095d6:	00db      	lsls	r3, r3, #3
  4095d8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
  4095dc:	9305      	str	r3, [sp, #20]
  4095de:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
  4095e0:	4405      	add	r5, r0
  4095e2:	3901      	subs	r1, #1
  4095e4:	00e8      	lsls	r0, r5, #3
  4095e6:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
  4095ea:	ab24      	add	r3, sp, #144	; 0x90
  4095ec:	00d2      	lsls	r2, r2, #3
  4095ee:	eb03 0b00 	add.w	fp, r3, r0
  4095f2:	ab74      	add	r3, sp, #464	; 0x1d0
  4095f4:	4413      	add	r3, r2
  4095f6:	9301      	str	r3, [sp, #4]
  4095f8:	f1a2 0308 	sub.w	r3, r2, #8
  4095fc:	9006      	str	r0, [sp, #24]
  4095fe:	9307      	str	r3, [sp, #28]
  409600:	f04f 0900 	mov.w	r9, #0
  409604:	f85a 0f04 	ldr.w	r0, [sl, #4]!
  409608:	f001 f90a 	bl	40a820 <__aeabi_i2d>
  40960c:	9b02      	ldr	r3, [sp, #8]
  40960e:	2b00      	cmp	r3, #0
  409610:	e8eb 0102 	strd	r0, r1, [fp], #8
  409614:	db28      	blt.n	409668 <__kernel_rem_pio2+0x358>
  409616:	9b06      	ldr	r3, [sp, #24]
  409618:	eb03 0409 	add.w	r4, r3, r9
  40961c:	9b07      	ldr	r3, [sp, #28]
  40961e:	eb09 0803 	add.w	r8, r9, r3
  409622:	ab24      	add	r3, sp, #144	; 0x90
  409624:	441c      	add	r4, r3
  409626:	4498      	add	r8, r3
  409628:	9b04      	ldr	r3, [sp, #16]
  40962a:	2600      	movs	r6, #0
  40962c:	f1a3 0508 	sub.w	r5, r3, #8
  409630:	2700      	movs	r7, #0
  409632:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
  409636:	e874 0102 	ldrd	r0, r1, [r4], #-8
  40963a:	f001 f957 	bl	40a8ec <__aeabi_dmul>
  40963e:	4602      	mov	r2, r0
  409640:	460b      	mov	r3, r1
  409642:	4630      	mov	r0, r6
  409644:	4639      	mov	r1, r7
  409646:	f000 ff9f 	bl	40a588 <__adddf3>
  40964a:	4544      	cmp	r4, r8
  40964c:	4606      	mov	r6, r0
  40964e:	460f      	mov	r7, r1
  409650:	d1ef      	bne.n	409632 <__kernel_rem_pio2+0x322>
  409652:	9b01      	ldr	r3, [sp, #4]
  409654:	e8e3 6702 	strd	r6, r7, [r3], #8
  409658:	9301      	str	r3, [sp, #4]
  40965a:	9b05      	ldr	r3, [sp, #20]
  40965c:	f109 0908 	add.w	r9, r9, #8
  409660:	4599      	cmp	r9, r3
  409662:	d1cf      	bne.n	409604 <__kernel_rem_pio2+0x2f4>
  409664:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  409666:	e6ce      	b.n	409406 <__kernel_rem_pio2+0xf6>
  409668:	2600      	movs	r6, #0
  40966a:	2700      	movs	r7, #0
  40966c:	e7f1      	b.n	409652 <__kernel_rem_pio2+0x342>
  40966e:	4632      	mov	r2, r6
  409670:	463b      	mov	r3, r7
  409672:	2000      	movs	r0, #0
  409674:	49b0      	ldr	r1, [pc, #704]	; (409938 <__kernel_rem_pio2+0x628>)
  409676:	f000 ff85 	bl	40a584 <__aeabi_dsub>
  40967a:	4606      	mov	r6, r0
  40967c:	460f      	mov	r7, r1
  40967e:	2c00      	cmp	r4, #0
  409680:	f43f af73 	beq.w	40956a <__kernel_rem_pio2+0x25a>
  409684:	9a08      	ldr	r2, [sp, #32]
  409686:	49ac      	ldr	r1, [pc, #688]	; (409938 <__kernel_rem_pio2+0x628>)
  409688:	2000      	movs	r0, #0
  40968a:	f000 fef1 	bl	40a470 <scalbn>
  40968e:	4602      	mov	r2, r0
  409690:	460b      	mov	r3, r1
  409692:	4630      	mov	r0, r6
  409694:	4639      	mov	r1, r7
  409696:	f000 ff75 	bl	40a584 <__aeabi_dsub>
  40969a:	4606      	mov	r6, r0
  40969c:	460f      	mov	r7, r1
  40969e:	e764      	b.n	40956a <__kernel_rem_pio2+0x25a>
  4096a0:	d110      	bne.n	4096c4 <__kernel_rem_pio2+0x3b4>
  4096a2:	1e6b      	subs	r3, r5, #1
  4096a4:	aa10      	add	r2, sp, #64	; 0x40
  4096a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4096aa:	ea4f 58e3 	mov.w	r8, r3, asr #23
  4096ae:	e71b      	b.n	4094e8 <__kernel_rem_pio2+0x1d8>
  4096b0:	1e6a      	subs	r2, r5, #1
  4096b2:	ab10      	add	r3, sp, #64	; 0x40
  4096b4:	a910      	add	r1, sp, #64	; 0x40
  4096b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4096ba:	f3c3 0316 	ubfx	r3, r3, #0, #23
  4096be:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  4096c2:	e74e      	b.n	409562 <__kernel_rem_pio2+0x252>
  4096c4:	2200      	movs	r2, #0
  4096c6:	4b9d      	ldr	r3, [pc, #628]	; (40993c <__kernel_rem_pio2+0x62c>)
  4096c8:	f001 fb96 	bl	40adf8 <__aeabi_dcmpge>
  4096cc:	b958      	cbnz	r0, 4096e6 <__kernel_rem_pio2+0x3d6>
  4096ce:	4680      	mov	r8, r0
  4096d0:	e74b      	b.n	40956a <__kernel_rem_pio2+0x25a>
  4096d2:	2600      	movs	r6, #0
  4096d4:	2700      	movs	r7, #0
  4096d6:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  4096da:	45da      	cmp	sl, fp
  4096dc:	f109 0908 	add.w	r9, r9, #8
  4096e0:	f47f ae63 	bne.w	4093aa <__kernel_rem_pio2+0x9a>
  4096e4:	e684      	b.n	4093f0 <__kernel_rem_pio2+0xe0>
  4096e6:	2d00      	cmp	r5, #0
  4096e8:	f109 0901 	add.w	r9, r9, #1
  4096ec:	bfc8      	it	gt
  4096ee:	f04f 0802 	movgt.w	r8, #2
  4096f2:	f73f af01 	bgt.w	4094f8 <__kernel_rem_pio2+0x1e8>
  4096f6:	4632      	mov	r2, r6
  4096f8:	463b      	mov	r3, r7
  4096fa:	2000      	movs	r0, #0
  4096fc:	498e      	ldr	r1, [pc, #568]	; (409938 <__kernel_rem_pio2+0x628>)
  4096fe:	f000 ff41 	bl	40a584 <__aeabi_dsub>
  409702:	f04f 0802 	mov.w	r8, #2
  409706:	4606      	mov	r6, r0
  409708:	460f      	mov	r7, r1
  40970a:	e72e      	b.n	40956a <__kernel_rem_pio2+0x25a>
  40970c:	ab10      	add	r3, sp, #64	; 0x40
  40970e:	9a08      	ldr	r2, [sp, #32]
  409710:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
  409714:	f8cd 9014 	str.w	r9, [sp, #20]
  409718:	3a18      	subs	r2, #24
  40971a:	f8cd 8004 	str.w	r8, [sp, #4]
  40971e:	9208      	str	r2, [sp, #32]
  409720:	b96b      	cbnz	r3, 40973e <__kernel_rem_pio2+0x42e>
  409722:	f10b 4380 	add.w	r3, fp, #1073741824	; 0x40000000
  409726:	3b01      	subs	r3, #1
  409728:	a910      	add	r1, sp, #64	; 0x40
  40972a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  40972e:	f853 1904 	ldr.w	r1, [r3], #-4
  409732:	f10b 3bff 	add.w	fp, fp, #4294967295
  409736:	3a18      	subs	r2, #24
  409738:	2900      	cmp	r1, #0
  40973a:	d0f8      	beq.n	40972e <__kernel_rem_pio2+0x41e>
  40973c:	9208      	str	r2, [sp, #32]
  40973e:	9a08      	ldr	r2, [sp, #32]
  409740:	497d      	ldr	r1, [pc, #500]	; (409938 <__kernel_rem_pio2+0x628>)
  409742:	2000      	movs	r0, #0
  409744:	f000 fe94 	bl	40a470 <scalbn>
  409748:	f1bb 0f00 	cmp.w	fp, #0
  40974c:	4604      	mov	r4, r0
  40974e:	460d      	mov	r5, r1
  409750:	f2c0 81b8 	blt.w	409ac4 <__kernel_rem_pio2+0x7b4>
  409754:	ea4f 03cb 	mov.w	r3, fp, lsl #3
  409758:	f50d 78e8 	add.w	r8, sp, #464	; 0x1d0
  40975c:	aa10      	add	r2, sp, #64	; 0x40
  40975e:	eb02 068b 	add.w	r6, r2, fp, lsl #2
  409762:	eb08 0903 	add.w	r9, r8, r3
  409766:	9304      	str	r3, [sp, #16]
  409768:	3604      	adds	r6, #4
  40976a:	f109 0708 	add.w	r7, r9, #8
  40976e:	f856 0d04 	ldr.w	r0, [r6, #-4]!
  409772:	f001 f855 	bl	40a820 <__aeabi_i2d>
  409776:	4622      	mov	r2, r4
  409778:	462b      	mov	r3, r5
  40977a:	f001 f8b7 	bl	40a8ec <__aeabi_dmul>
  40977e:	2200      	movs	r2, #0
  409780:	e967 0102 	strd	r0, r1, [r7, #-8]!
  409784:	4b6e      	ldr	r3, [pc, #440]	; (409940 <__kernel_rem_pio2+0x630>)
  409786:	4620      	mov	r0, r4
  409788:	4629      	mov	r1, r5
  40978a:	f001 f8af 	bl	40a8ec <__aeabi_dmul>
  40978e:	45b8      	cmp	r8, r7
  409790:	4604      	mov	r4, r0
  409792:	460d      	mov	r5, r1
  409794:	d1eb      	bne.n	40976e <__kernel_rem_pio2+0x45e>
  409796:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
  40979a:	464b      	mov	r3, r9
  40979c:	f8cd a008 	str.w	sl, [sp, #8]
  4097a0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  4097a4:	f8cd b018 	str.w	fp, [sp, #24]
  4097a8:	f04f 0900 	mov.w	r9, #0
  4097ac:	469b      	mov	fp, r3
  4097ae:	f1ba 0f00 	cmp.w	sl, #0
  4097b2:	f2c0 812a 	blt.w	409a0a <__kernel_rem_pio2+0x6fa>
  4097b6:	f8df 818c 	ldr.w	r8, [pc, #396]	; 409944 <__kernel_rem_pio2+0x634>
  4097ba:	465d      	mov	r5, fp
  4097bc:	a35c      	add	r3, pc, #368	; (adr r3, 409930 <__kernel_rem_pio2+0x620>)
  4097be:	e9d3 2300 	ldrd	r2, r3, [r3]
  4097c2:	2600      	movs	r6, #0
  4097c4:	2700      	movs	r7, #0
  4097c6:	2400      	movs	r4, #0
  4097c8:	e003      	b.n	4097d2 <__kernel_rem_pio2+0x4c2>
  4097ca:	45a1      	cmp	r9, r4
  4097cc:	db10      	blt.n	4097f0 <__kernel_rem_pio2+0x4e0>
  4097ce:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
  4097d2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
  4097d6:	f001 f889 	bl	40a8ec <__aeabi_dmul>
  4097da:	4602      	mov	r2, r0
  4097dc:	460b      	mov	r3, r1
  4097de:	4630      	mov	r0, r6
  4097e0:	4639      	mov	r1, r7
  4097e2:	f000 fed1 	bl	40a588 <__adddf3>
  4097e6:	3401      	adds	r4, #1
  4097e8:	45a2      	cmp	sl, r4
  4097ea:	4606      	mov	r6, r0
  4097ec:	460f      	mov	r7, r1
  4097ee:	daec      	bge.n	4097ca <__kernel_rem_pio2+0x4ba>
  4097f0:	9b02      	ldr	r3, [sp, #8]
  4097f2:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  4097f6:	f1ab 0b08 	sub.w	fp, fp, #8
  4097fa:	e9c3 6700 	strd	r6, r7, [r3]
  4097fe:	ab72      	add	r3, sp, #456	; 0x1c8
  409800:	455b      	cmp	r3, fp
  409802:	f109 0901 	add.w	r9, r9, #1
  409806:	d1d2      	bne.n	4097ae <__kernel_rem_pio2+0x49e>
  409808:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  40980a:	f8dd b018 	ldr.w	fp, [sp, #24]
  40980e:	f8dd a008 	ldr.w	sl, [sp, #8]
  409812:	2b03      	cmp	r3, #3
  409814:	f200 8083 	bhi.w	40991e <__kernel_rem_pio2+0x60e>
  409818:	e8df f013 	tbh	[pc, r3, lsl #1]
  40981c:	009600d5 	.word	0x009600d5
  409820:	00040096 	.word	0x00040096
  409824:	f1bb 0f00 	cmp.w	fp, #0
  409828:	f340 8156 	ble.w	409ad8 <__kernel_rem_pio2+0x7c8>
  40982c:	9b04      	ldr	r3, [sp, #16]
  40982e:	f8cd b008 	str.w	fp, [sp, #8]
  409832:	eb0a 0803 	add.w	r8, sl, r3
  409836:	e9d8 6700 	ldrd	r6, r7, [r8]
  40983a:	46d3      	mov	fp, sl
  40983c:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
  409840:	4632      	mov	r2, r6
  409842:	463b      	mov	r3, r7
  409844:	4648      	mov	r0, r9
  409846:	4651      	mov	r1, sl
  409848:	f000 fe9e 	bl	40a588 <__adddf3>
  40984c:	4604      	mov	r4, r0
  40984e:	460d      	mov	r5, r1
  409850:	4602      	mov	r2, r0
  409852:	460b      	mov	r3, r1
  409854:	4648      	mov	r0, r9
  409856:	4651      	mov	r1, sl
  409858:	f000 fe94 	bl	40a584 <__aeabi_dsub>
  40985c:	4632      	mov	r2, r6
  40985e:	463b      	mov	r3, r7
  409860:	f000 fe92 	bl	40a588 <__adddf3>
  409864:	e9c8 0100 	strd	r0, r1, [r8]
  409868:	e968 4502 	strd	r4, r5, [r8, #-8]!
  40986c:	45c3      	cmp	fp, r8
  40986e:	4626      	mov	r6, r4
  409870:	462f      	mov	r7, r5
  409872:	d1e3      	bne.n	40983c <__kernel_rem_pio2+0x52c>
  409874:	46da      	mov	sl, fp
  409876:	f8dd b008 	ldr.w	fp, [sp, #8]
  40987a:	f1bb 0f01 	cmp.w	fp, #1
  40987e:	f340 812b 	ble.w	409ad8 <__kernel_rem_pio2+0x7c8>
  409882:	9b04      	ldr	r3, [sp, #16]
  409884:	4453      	add	r3, sl
  409886:	e9d3 6700 	ldrd	r6, r7, [r3]
  40988a:	4698      	mov	r8, r3
  40988c:	4699      	mov	r9, r3
  40988e:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
  409892:	e959 3402 	ldrd	r3, r4, [r9, #-8]
  409896:	4630      	mov	r0, r6
  409898:	e9cd 3402 	strd	r3, r4, [sp, #8]
  40989c:	461a      	mov	r2, r3
  40989e:	4639      	mov	r1, r7
  4098a0:	4623      	mov	r3, r4
  4098a2:	f000 fe71 	bl	40a588 <__adddf3>
  4098a6:	4604      	mov	r4, r0
  4098a8:	460d      	mov	r5, r1
  4098aa:	4602      	mov	r2, r0
  4098ac:	460b      	mov	r3, r1
  4098ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4098b2:	f000 fe67 	bl	40a584 <__aeabi_dsub>
  4098b6:	4632      	mov	r2, r6
  4098b8:	463b      	mov	r3, r7
  4098ba:	f000 fe65 	bl	40a588 <__adddf3>
  4098be:	e9c9 0100 	strd	r0, r1, [r9]
  4098c2:	e969 4502 	strd	r4, r5, [r9, #-8]!
  4098c6:	45cb      	cmp	fp, r9
  4098c8:	4626      	mov	r6, r4
  4098ca:	462f      	mov	r7, r5
  4098cc:	d1e1      	bne.n	409892 <__kernel_rem_pio2+0x582>
  4098ce:	2300      	movs	r3, #0
  4098d0:	f108 0808 	add.w	r8, r8, #8
  4098d4:	461d      	mov	r5, r3
  4098d6:	ac50      	add	r4, sp, #320	; 0x140
  4098d8:	4618      	mov	r0, r3
  4098da:	4629      	mov	r1, r5
  4098dc:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
  4098e0:	f000 fe52 	bl	40a588 <__adddf3>
  4098e4:	4544      	cmp	r4, r8
  4098e6:	4603      	mov	r3, r0
  4098e8:	460d      	mov	r5, r1
  4098ea:	d1f5      	bne.n	4098d8 <__kernel_rem_pio2+0x5c8>
  4098ec:	9a01      	ldr	r2, [sp, #4]
  4098ee:	2a00      	cmp	r2, #0
  4098f0:	f000 80da 	beq.w	409aa8 <__kernel_rem_pio2+0x798>
  4098f4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4098f6:	f8da 4004 	ldr.w	r4, [sl, #4]
  4098fa:	f8da 200c 	ldr.w	r2, [sl, #12]
  4098fe:	f8da 1000 	ldr.w	r1, [sl]
  409902:	f8da 0008 	ldr.w	r0, [sl, #8]
  409906:	613b      	str	r3, [r7, #16]
  409908:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
  40990c:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
  409910:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
  409914:	617d      	str	r5, [r7, #20]
  409916:	607c      	str	r4, [r7, #4]
  409918:	60fb      	str	r3, [r7, #12]
  40991a:	6039      	str	r1, [r7, #0]
  40991c:	60b8      	str	r0, [r7, #8]
  40991e:	9b05      	ldr	r3, [sp, #20]
  409920:	f003 0007 	and.w	r0, r3, #7
  409924:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  409928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40992c:	f3af 8000 	nop.w
  409930:	40000000 	.word	0x40000000
  409934:	3ff921fb 	.word	0x3ff921fb
  409938:	3ff00000 	.word	0x3ff00000
  40993c:	3fe00000 	.word	0x3fe00000
  409940:	3e700000 	.word	0x3e700000
  409944:	0040faf8 	.word	0x0040faf8
  409948:	9c04      	ldr	r4, [sp, #16]
  40994a:	2600      	movs	r6, #0
  40994c:	3408      	adds	r4, #8
  40994e:	4454      	add	r4, sl
  409950:	4633      	mov	r3, r6
  409952:	4630      	mov	r0, r6
  409954:	4619      	mov	r1, r3
  409956:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  40995a:	f000 fe15 	bl	40a588 <__adddf3>
  40995e:	4554      	cmp	r4, sl
  409960:	4606      	mov	r6, r0
  409962:	460b      	mov	r3, r1
  409964:	d1f5      	bne.n	409952 <__kernel_rem_pio2+0x642>
  409966:	9a01      	ldr	r2, [sp, #4]
  409968:	4630      	mov	r0, r6
  40996a:	4619      	mov	r1, r3
  40996c:	2a00      	cmp	r2, #0
  40996e:	d04f      	beq.n	409a10 <__kernel_rem_pio2+0x700>
  409970:	980a      	ldr	r0, [sp, #40]	; 0x28
  409972:	f103 4400 	add.w	r4, r3, #2147483648	; 0x80000000
  409976:	4632      	mov	r2, r6
  409978:	6044      	str	r4, [r0, #4]
  40997a:	6006      	str	r6, [r0, #0]
  40997c:	e9da 0100 	ldrd	r0, r1, [sl]
  409980:	f000 fe00 	bl	40a584 <__aeabi_dsub>
  409984:	f1bb 0f00 	cmp.w	fp, #0
  409988:	4602      	mov	r2, r0
  40998a:	460b      	mov	r3, r1
  40998c:	dd0d      	ble.n	4099aa <__kernel_rem_pio2+0x69a>
  40998e:	2401      	movs	r4, #1
  409990:	4610      	mov	r0, r2
  409992:	4619      	mov	r1, r3
  409994:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
  409998:	f000 fdf6 	bl	40a588 <__adddf3>
  40999c:	3401      	adds	r4, #1
  40999e:	45a3      	cmp	fp, r4
  4099a0:	4602      	mov	r2, r0
  4099a2:	460b      	mov	r3, r1
  4099a4:	daf4      	bge.n	409990 <__kernel_rem_pio2+0x680>
  4099a6:	9901      	ldr	r1, [sp, #4]
  4099a8:	b109      	cbz	r1, 4099ae <__kernel_rem_pio2+0x69e>
  4099aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  4099ae:	4619      	mov	r1, r3
  4099b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4099b2:	4610      	mov	r0, r2
  4099b4:	e9c3 0102 	strd	r0, r1, [r3, #8]
  4099b8:	9b05      	ldr	r3, [sp, #20]
  4099ba:	f003 0007 	and.w	r0, r3, #7
  4099be:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  4099c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4099c6:	9b04      	ldr	r3, [sp, #16]
  4099c8:	2200      	movs	r2, #0
  4099ca:	3308      	adds	r3, #8
  4099cc:	449a      	add	sl, r3
  4099ce:	4613      	mov	r3, r2
  4099d0:	4610      	mov	r0, r2
  4099d2:	4619      	mov	r1, r3
  4099d4:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
  4099d8:	f000 fdd6 	bl	40a588 <__adddf3>
  4099dc:	f10b 3bff 	add.w	fp, fp, #4294967295
  4099e0:	f1bb 3fff 	cmp.w	fp, #4294967295
  4099e4:	4602      	mov	r2, r0
  4099e6:	460b      	mov	r3, r1
  4099e8:	d1f2      	bne.n	4099d0 <__kernel_rem_pio2+0x6c0>
  4099ea:	9901      	ldr	r1, [sp, #4]
  4099ec:	b109      	cbz	r1, 4099f2 <__kernel_rem_pio2+0x6e2>
  4099ee:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  4099f2:	4619      	mov	r1, r3
  4099f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4099f6:	4610      	mov	r0, r2
  4099f8:	e9c3 0100 	strd	r0, r1, [r3]
  4099fc:	9b05      	ldr	r3, [sp, #20]
  4099fe:	f003 0007 	and.w	r0, r3, #7
  409a02:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  409a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409a0a:	2600      	movs	r6, #0
  409a0c:	2700      	movs	r7, #0
  409a0e:	e6ef      	b.n	4097f0 <__kernel_rem_pio2+0x4e0>
  409a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409a12:	4632      	mov	r2, r6
  409a14:	e9c3 0100 	strd	r0, r1, [r3]
  409a18:	460b      	mov	r3, r1
  409a1a:	e9da 0100 	ldrd	r0, r1, [sl]
  409a1e:	f000 fdb1 	bl	40a584 <__aeabi_dsub>
  409a22:	f1bb 0f00 	cmp.w	fp, #0
  409a26:	4602      	mov	r2, r0
  409a28:	460b      	mov	r3, r1
  409a2a:	dcb0      	bgt.n	40998e <__kernel_rem_pio2+0x67e>
  409a2c:	4619      	mov	r1, r3
  409a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409a30:	4610      	mov	r0, r2
  409a32:	e9c3 0102 	strd	r0, r1, [r3, #8]
  409a36:	e7bf      	b.n	4099b8 <__kernel_rem_pio2+0x6a8>
  409a38:	9b08      	ldr	r3, [sp, #32]
  409a3a:	f8cd 9014 	str.w	r9, [sp, #20]
  409a3e:	425a      	negs	r2, r3
  409a40:	4630      	mov	r0, r6
  409a42:	4639      	mov	r1, r7
  409a44:	f8cd 8004 	str.w	r8, [sp, #4]
  409a48:	f000 fd12 	bl	40a470 <scalbn>
  409a4c:	2200      	movs	r2, #0
  409a4e:	4b2c      	ldr	r3, [pc, #176]	; (409b00 <__kernel_rem_pio2+0x7f0>)
  409a50:	4606      	mov	r6, r0
  409a52:	460f      	mov	r7, r1
  409a54:	f001 f9d0 	bl	40adf8 <__aeabi_dcmpge>
  409a58:	2800      	cmp	r0, #0
  409a5a:	d040      	beq.n	409ade <__kernel_rem_pio2+0x7ce>
  409a5c:	2200      	movs	r2, #0
  409a5e:	4b29      	ldr	r3, [pc, #164]	; (409b04 <__kernel_rem_pio2+0x7f4>)
  409a60:	4630      	mov	r0, r6
  409a62:	4639      	mov	r1, r7
  409a64:	f000 ff42 	bl	40a8ec <__aeabi_dmul>
  409a68:	f001 f9f0 	bl	40ae4c <__aeabi_d2iz>
  409a6c:	4604      	mov	r4, r0
  409a6e:	f000 fed7 	bl	40a820 <__aeabi_i2d>
  409a72:	2200      	movs	r2, #0
  409a74:	4b22      	ldr	r3, [pc, #136]	; (409b00 <__kernel_rem_pio2+0x7f0>)
  409a76:	f000 ff39 	bl	40a8ec <__aeabi_dmul>
  409a7a:	460b      	mov	r3, r1
  409a7c:	4602      	mov	r2, r0
  409a7e:	4639      	mov	r1, r7
  409a80:	4630      	mov	r0, r6
  409a82:	f000 fd7f 	bl	40a584 <__aeabi_dsub>
  409a86:	f001 f9e1 	bl	40ae4c <__aeabi_d2iz>
  409a8a:	9b08      	ldr	r3, [sp, #32]
  409a8c:	3318      	adds	r3, #24
  409a8e:	f105 0b01 	add.w	fp, r5, #1
  409a92:	9308      	str	r3, [sp, #32]
  409a94:	ab10      	add	r3, sp, #64	; 0x40
  409a96:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
  409a9a:	f843 402b 	str.w	r4, [r3, fp, lsl #2]
  409a9e:	e64e      	b.n	40973e <__kernel_rem_pio2+0x42e>
  409aa0:	2301      	movs	r3, #1
  409aa2:	e590      	b.n	4095c6 <__kernel_rem_pio2+0x2b6>
  409aa4:	2400      	movs	r4, #0
  409aa6:	e54b      	b.n	409540 <__kernel_rem_pio2+0x230>
  409aa8:	4618      	mov	r0, r3
  409aaa:	4629      	mov	r1, r5
  409aac:	e9da 2300 	ldrd	r2, r3, [sl]
  409ab0:	e9da 4502 	ldrd	r4, r5, [sl, #8]
  409ab4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  409ab6:	e9c7 0104 	strd	r0, r1, [r7, #16]
  409aba:	e9c7 2300 	strd	r2, r3, [r7]
  409abe:	e9c7 4502 	strd	r4, r5, [r7, #8]
  409ac2:	e72c      	b.n	40991e <__kernel_rem_pio2+0x60e>
  409ac4:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  409ac6:	2b03      	cmp	r3, #3
  409ac8:	f63f af29 	bhi.w	40991e <__kernel_rem_pio2+0x60e>
  409acc:	e8df f003 	tbb	[pc, r3]
  409ad0:	02101015 	.word	0x02101015
  409ad4:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
  409ad8:	2300      	movs	r3, #0
  409ada:	461d      	mov	r5, r3
  409adc:	e706      	b.n	4098ec <__kernel_rem_pio2+0x5dc>
  409ade:	4630      	mov	r0, r6
  409ae0:	4639      	mov	r1, r7
  409ae2:	f001 f9b3 	bl	40ae4c <__aeabi_d2iz>
  409ae6:	ab10      	add	r3, sp, #64	; 0x40
  409ae8:	46ab      	mov	fp, r5
  409aea:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
  409aee:	e626      	b.n	40973e <__kernel_rem_pio2+0x42e>
  409af0:	2600      	movs	r6, #0
  409af2:	4633      	mov	r3, r6
  409af4:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
  409af8:	e735      	b.n	409966 <__kernel_rem_pio2+0x656>
  409afa:	2200      	movs	r2, #0
  409afc:	4613      	mov	r3, r2
  409afe:	e774      	b.n	4099ea <__kernel_rem_pio2+0x6da>
  409b00:	41700000 	.word	0x41700000
  409b04:	3e700000 	.word	0x3e700000

00409b08 <__kernel_sin>:
  409b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409b0c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  409b10:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  409b14:	b085      	sub	sp, #20
  409b16:	460c      	mov	r4, r1
  409b18:	4690      	mov	r8, r2
  409b1a:	4699      	mov	r9, r3
  409b1c:	4605      	mov	r5, r0
  409b1e:	da04      	bge.n	409b2a <__kernel_sin+0x22>
  409b20:	f001 f994 	bl	40ae4c <__aeabi_d2iz>
  409b24:	2800      	cmp	r0, #0
  409b26:	f000 8085 	beq.w	409c34 <__kernel_sin+0x12c>
  409b2a:	462a      	mov	r2, r5
  409b2c:	4623      	mov	r3, r4
  409b2e:	4628      	mov	r0, r5
  409b30:	4621      	mov	r1, r4
  409b32:	f000 fedb 	bl	40a8ec <__aeabi_dmul>
  409b36:	4606      	mov	r6, r0
  409b38:	460f      	mov	r7, r1
  409b3a:	4602      	mov	r2, r0
  409b3c:	460b      	mov	r3, r1
  409b3e:	4628      	mov	r0, r5
  409b40:	4621      	mov	r1, r4
  409b42:	f000 fed3 	bl	40a8ec <__aeabi_dmul>
  409b46:	a33e      	add	r3, pc, #248	; (adr r3, 409c40 <__kernel_sin+0x138>)
  409b48:	e9d3 2300 	ldrd	r2, r3, [r3]
  409b4c:	4682      	mov	sl, r0
  409b4e:	468b      	mov	fp, r1
  409b50:	4630      	mov	r0, r6
  409b52:	4639      	mov	r1, r7
  409b54:	f000 feca 	bl	40a8ec <__aeabi_dmul>
  409b58:	a33b      	add	r3, pc, #236	; (adr r3, 409c48 <__kernel_sin+0x140>)
  409b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
  409b5e:	f000 fd11 	bl	40a584 <__aeabi_dsub>
  409b62:	4632      	mov	r2, r6
  409b64:	463b      	mov	r3, r7
  409b66:	f000 fec1 	bl	40a8ec <__aeabi_dmul>
  409b6a:	a339      	add	r3, pc, #228	; (adr r3, 409c50 <__kernel_sin+0x148>)
  409b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
  409b70:	f000 fd0a 	bl	40a588 <__adddf3>
  409b74:	4632      	mov	r2, r6
  409b76:	463b      	mov	r3, r7
  409b78:	f000 feb8 	bl	40a8ec <__aeabi_dmul>
  409b7c:	a336      	add	r3, pc, #216	; (adr r3, 409c58 <__kernel_sin+0x150>)
  409b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
  409b82:	f000 fcff 	bl	40a584 <__aeabi_dsub>
  409b86:	4632      	mov	r2, r6
  409b88:	463b      	mov	r3, r7
  409b8a:	f000 feaf 	bl	40a8ec <__aeabi_dmul>
  409b8e:	a334      	add	r3, pc, #208	; (adr r3, 409c60 <__kernel_sin+0x158>)
  409b90:	e9d3 2300 	ldrd	r2, r3, [r3]
  409b94:	f000 fcf8 	bl	40a588 <__adddf3>
  409b98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409b9a:	e9cd 0100 	strd	r0, r1, [sp]
  409b9e:	b39b      	cbz	r3, 409c08 <__kernel_sin+0x100>
  409ba0:	2200      	movs	r2, #0
  409ba2:	4b33      	ldr	r3, [pc, #204]	; (409c70 <__kernel_sin+0x168>)
  409ba4:	4640      	mov	r0, r8
  409ba6:	4649      	mov	r1, r9
  409ba8:	f000 fea0 	bl	40a8ec <__aeabi_dmul>
  409bac:	e9dd 2300 	ldrd	r2, r3, [sp]
  409bb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409bb4:	4650      	mov	r0, sl
  409bb6:	4659      	mov	r1, fp
  409bb8:	f000 fe98 	bl	40a8ec <__aeabi_dmul>
  409bbc:	4602      	mov	r2, r0
  409bbe:	460b      	mov	r3, r1
  409bc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409bc4:	f000 fcde 	bl	40a584 <__aeabi_dsub>
  409bc8:	4632      	mov	r2, r6
  409bca:	463b      	mov	r3, r7
  409bcc:	f000 fe8e 	bl	40a8ec <__aeabi_dmul>
  409bd0:	4642      	mov	r2, r8
  409bd2:	464b      	mov	r3, r9
  409bd4:	f000 fcd6 	bl	40a584 <__aeabi_dsub>
  409bd8:	a323      	add	r3, pc, #140	; (adr r3, 409c68 <__kernel_sin+0x160>)
  409bda:	e9d3 2300 	ldrd	r2, r3, [r3]
  409bde:	4606      	mov	r6, r0
  409be0:	460f      	mov	r7, r1
  409be2:	4650      	mov	r0, sl
  409be4:	4659      	mov	r1, fp
  409be6:	f000 fe81 	bl	40a8ec <__aeabi_dmul>
  409bea:	4602      	mov	r2, r0
  409bec:	460b      	mov	r3, r1
  409bee:	4630      	mov	r0, r6
  409bf0:	4639      	mov	r1, r7
  409bf2:	f000 fcc9 	bl	40a588 <__adddf3>
  409bf6:	4602      	mov	r2, r0
  409bf8:	460b      	mov	r3, r1
  409bfa:	4628      	mov	r0, r5
  409bfc:	4621      	mov	r1, r4
  409bfe:	f000 fcc1 	bl	40a584 <__aeabi_dsub>
  409c02:	b005      	add	sp, #20
  409c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409c08:	4602      	mov	r2, r0
  409c0a:	460b      	mov	r3, r1
  409c0c:	4630      	mov	r0, r6
  409c0e:	4639      	mov	r1, r7
  409c10:	f000 fe6c 	bl	40a8ec <__aeabi_dmul>
  409c14:	a314      	add	r3, pc, #80	; (adr r3, 409c68 <__kernel_sin+0x160>)
  409c16:	e9d3 2300 	ldrd	r2, r3, [r3]
  409c1a:	f000 fcb3 	bl	40a584 <__aeabi_dsub>
  409c1e:	4652      	mov	r2, sl
  409c20:	465b      	mov	r3, fp
  409c22:	f000 fe63 	bl	40a8ec <__aeabi_dmul>
  409c26:	462a      	mov	r2, r5
  409c28:	4623      	mov	r3, r4
  409c2a:	f000 fcad 	bl	40a588 <__adddf3>
  409c2e:	b005      	add	sp, #20
  409c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409c34:	4628      	mov	r0, r5
  409c36:	4621      	mov	r1, r4
  409c38:	b005      	add	sp, #20
  409c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409c3e:	bf00      	nop
  409c40:	5acfd57c 	.word	0x5acfd57c
  409c44:	3de5d93a 	.word	0x3de5d93a
  409c48:	8a2b9ceb 	.word	0x8a2b9ceb
  409c4c:	3e5ae5e6 	.word	0x3e5ae5e6
  409c50:	57b1fe7d 	.word	0x57b1fe7d
  409c54:	3ec71de3 	.word	0x3ec71de3
  409c58:	19c161d5 	.word	0x19c161d5
  409c5c:	3f2a01a0 	.word	0x3f2a01a0
  409c60:	1110f8a6 	.word	0x1110f8a6
  409c64:	3f811111 	.word	0x3f811111
  409c68:	55555549 	.word	0x55555549
  409c6c:	3fc55555 	.word	0x3fc55555
  409c70:	3fe00000 	.word	0x3fe00000
  409c74:	00000000 	.word	0x00000000

00409c78 <__kernel_tan>:
  409c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409c7c:	4cd8      	ldr	r4, [pc, #864]	; (409fe0 <__kernel_tan+0x368>)
  409c7e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  409c82:	42a6      	cmp	r6, r4
  409c84:	b087      	sub	sp, #28
  409c86:	468a      	mov	sl, r1
  409c88:	4689      	mov	r9, r1
  409c8a:	4617      	mov	r7, r2
  409c8c:	4698      	mov	r8, r3
  409c8e:	4683      	mov	fp, r0
  409c90:	dc16      	bgt.n	409cc0 <__kernel_tan+0x48>
  409c92:	f001 f8db 	bl	40ae4c <__aeabi_d2iz>
  409c96:	bb88      	cbnz	r0, 409cfc <__kernel_tan+0x84>
  409c98:	465b      	mov	r3, fp
  409c9a:	431e      	orrs	r6, r3
  409c9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  409c9e:	3301      	adds	r3, #1
  409ca0:	4333      	orrs	r3, r6
  409ca2:	f000 8156 	beq.w	409f52 <__kernel_tan+0x2da>
  409ca6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  409ca8:	2b01      	cmp	r3, #1
  409caa:	f000 81a8 	beq.w	409ffe <__kernel_tan+0x386>
  409cae:	465a      	mov	r2, fp
  409cb0:	4653      	mov	r3, sl
  409cb2:	2000      	movs	r0, #0
  409cb4:	49cb      	ldr	r1, [pc, #812]	; (409fe4 <__kernel_tan+0x36c>)
  409cb6:	f000 ff43 	bl	40ab40 <__aeabi_ddiv>
  409cba:	b007      	add	sp, #28
  409cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409cc0:	4bc9      	ldr	r3, [pc, #804]	; (409fe8 <__kernel_tan+0x370>)
  409cc2:	429e      	cmp	r6, r3
  409cc4:	dd1a      	ble.n	409cfc <__kernel_tan+0x84>
  409cc6:	2900      	cmp	r1, #0
  409cc8:	f2c0 8192 	blt.w	409ff0 <__kernel_tan+0x378>
  409ccc:	465a      	mov	r2, fp
  409cce:	4653      	mov	r3, sl
  409cd0:	a1a5      	add	r1, pc, #660	; (adr r1, 409f68 <__kernel_tan+0x2f0>)
  409cd2:	e9d1 0100 	ldrd	r0, r1, [r1]
  409cd6:	f000 fc55 	bl	40a584 <__aeabi_dsub>
  409cda:	463a      	mov	r2, r7
  409cdc:	4643      	mov	r3, r8
  409cde:	4604      	mov	r4, r0
  409ce0:	460d      	mov	r5, r1
  409ce2:	a1a3      	add	r1, pc, #652	; (adr r1, 409f70 <__kernel_tan+0x2f8>)
  409ce4:	e9d1 0100 	ldrd	r0, r1, [r1]
  409ce8:	f000 fc4c 	bl	40a584 <__aeabi_dsub>
  409cec:	4622      	mov	r2, r4
  409cee:	462b      	mov	r3, r5
  409cf0:	f000 fc4a 	bl	40a588 <__adddf3>
  409cf4:	2700      	movs	r7, #0
  409cf6:	4683      	mov	fp, r0
  409cf8:	468a      	mov	sl, r1
  409cfa:	46b8      	mov	r8, r7
  409cfc:	465a      	mov	r2, fp
  409cfe:	4653      	mov	r3, sl
  409d00:	4658      	mov	r0, fp
  409d02:	4651      	mov	r1, sl
  409d04:	f000 fdf2 	bl	40a8ec <__aeabi_dmul>
  409d08:	4603      	mov	r3, r0
  409d0a:	460c      	mov	r4, r1
  409d0c:	e9cd 3400 	strd	r3, r4, [sp]
  409d10:	4602      	mov	r2, r0
  409d12:	460b      	mov	r3, r1
  409d14:	f000 fdea 	bl	40a8ec <__aeabi_dmul>
  409d18:	e9dd 2300 	ldrd	r2, r3, [sp]
  409d1c:	4604      	mov	r4, r0
  409d1e:	460d      	mov	r5, r1
  409d20:	4658      	mov	r0, fp
  409d22:	4651      	mov	r1, sl
  409d24:	f000 fde2 	bl	40a8ec <__aeabi_dmul>
  409d28:	a393      	add	r3, pc, #588	; (adr r3, 409f78 <__kernel_tan+0x300>)
  409d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
  409d2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409d32:	4620      	mov	r0, r4
  409d34:	4629      	mov	r1, r5
  409d36:	f000 fdd9 	bl	40a8ec <__aeabi_dmul>
  409d3a:	a391      	add	r3, pc, #580	; (adr r3, 409f80 <__kernel_tan+0x308>)
  409d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
  409d40:	f000 fc22 	bl	40a588 <__adddf3>
  409d44:	4622      	mov	r2, r4
  409d46:	462b      	mov	r3, r5
  409d48:	f000 fdd0 	bl	40a8ec <__aeabi_dmul>
  409d4c:	a38e      	add	r3, pc, #568	; (adr r3, 409f88 <__kernel_tan+0x310>)
  409d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
  409d52:	f000 fc19 	bl	40a588 <__adddf3>
  409d56:	4622      	mov	r2, r4
  409d58:	462b      	mov	r3, r5
  409d5a:	f000 fdc7 	bl	40a8ec <__aeabi_dmul>
  409d5e:	a38c      	add	r3, pc, #560	; (adr r3, 409f90 <__kernel_tan+0x318>)
  409d60:	e9d3 2300 	ldrd	r2, r3, [r3]
  409d64:	f000 fc10 	bl	40a588 <__adddf3>
  409d68:	4622      	mov	r2, r4
  409d6a:	462b      	mov	r3, r5
  409d6c:	f000 fdbe 	bl	40a8ec <__aeabi_dmul>
  409d70:	a389      	add	r3, pc, #548	; (adr r3, 409f98 <__kernel_tan+0x320>)
  409d72:	e9d3 2300 	ldrd	r2, r3, [r3]
  409d76:	f000 fc07 	bl	40a588 <__adddf3>
  409d7a:	4622      	mov	r2, r4
  409d7c:	462b      	mov	r3, r5
  409d7e:	f000 fdb5 	bl	40a8ec <__aeabi_dmul>
  409d82:	a387      	add	r3, pc, #540	; (adr r3, 409fa0 <__kernel_tan+0x328>)
  409d84:	e9d3 2300 	ldrd	r2, r3, [r3]
  409d88:	f000 fbfe 	bl	40a588 <__adddf3>
  409d8c:	e9dd 2300 	ldrd	r2, r3, [sp]
  409d90:	f000 fdac 	bl	40a8ec <__aeabi_dmul>
  409d94:	a384      	add	r3, pc, #528	; (adr r3, 409fa8 <__kernel_tan+0x330>)
  409d96:	e9d3 2300 	ldrd	r2, r3, [r3]
  409d9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
  409d9e:	4620      	mov	r0, r4
  409da0:	4629      	mov	r1, r5
  409da2:	f000 fda3 	bl	40a8ec <__aeabi_dmul>
  409da6:	a382      	add	r3, pc, #520	; (adr r3, 409fb0 <__kernel_tan+0x338>)
  409da8:	e9d3 2300 	ldrd	r2, r3, [r3]
  409dac:	f000 fbec 	bl	40a588 <__adddf3>
  409db0:	4622      	mov	r2, r4
  409db2:	462b      	mov	r3, r5
  409db4:	f000 fd9a 	bl	40a8ec <__aeabi_dmul>
  409db8:	a37f      	add	r3, pc, #508	; (adr r3, 409fb8 <__kernel_tan+0x340>)
  409dba:	e9d3 2300 	ldrd	r2, r3, [r3]
  409dbe:	f000 fbe3 	bl	40a588 <__adddf3>
  409dc2:	4622      	mov	r2, r4
  409dc4:	462b      	mov	r3, r5
  409dc6:	f000 fd91 	bl	40a8ec <__aeabi_dmul>
  409dca:	a37d      	add	r3, pc, #500	; (adr r3, 409fc0 <__kernel_tan+0x348>)
  409dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
  409dd0:	f000 fbda 	bl	40a588 <__adddf3>
  409dd4:	4622      	mov	r2, r4
  409dd6:	462b      	mov	r3, r5
  409dd8:	f000 fd88 	bl	40a8ec <__aeabi_dmul>
  409ddc:	a37a      	add	r3, pc, #488	; (adr r3, 409fc8 <__kernel_tan+0x350>)
  409dde:	e9d3 2300 	ldrd	r2, r3, [r3]
  409de2:	f000 fbd1 	bl	40a588 <__adddf3>
  409de6:	4622      	mov	r2, r4
  409de8:	462b      	mov	r3, r5
  409dea:	f000 fd7f 	bl	40a8ec <__aeabi_dmul>
  409dee:	a378      	add	r3, pc, #480	; (adr r3, 409fd0 <__kernel_tan+0x358>)
  409df0:	e9d3 2300 	ldrd	r2, r3, [r3]
  409df4:	f000 fbc8 	bl	40a588 <__adddf3>
  409df8:	4602      	mov	r2, r0
  409dfa:	460b      	mov	r3, r1
  409dfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  409e00:	f000 fbc2 	bl	40a588 <__adddf3>
  409e04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409e08:	f000 fd70 	bl	40a8ec <__aeabi_dmul>
  409e0c:	463a      	mov	r2, r7
  409e0e:	4643      	mov	r3, r8
  409e10:	f000 fbba 	bl	40a588 <__adddf3>
  409e14:	e9dd 2300 	ldrd	r2, r3, [sp]
  409e18:	f000 fd68 	bl	40a8ec <__aeabi_dmul>
  409e1c:	4602      	mov	r2, r0
  409e1e:	460b      	mov	r3, r1
  409e20:	4638      	mov	r0, r7
  409e22:	4641      	mov	r1, r8
  409e24:	f000 fbb0 	bl	40a588 <__adddf3>
  409e28:	a36b      	add	r3, pc, #428	; (adr r3, 409fd8 <__kernel_tan+0x360>)
  409e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
  409e2e:	4604      	mov	r4, r0
  409e30:	460d      	mov	r5, r1
  409e32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409e36:	f000 fd59 	bl	40a8ec <__aeabi_dmul>
  409e3a:	4622      	mov	r2, r4
  409e3c:	462b      	mov	r3, r5
  409e3e:	f000 fba3 	bl	40a588 <__adddf3>
  409e42:	460b      	mov	r3, r1
  409e44:	4602      	mov	r2, r0
  409e46:	4651      	mov	r1, sl
  409e48:	4658      	mov	r0, fp
  409e4a:	e9cd 2300 	strd	r2, r3, [sp]
  409e4e:	f000 fb9b 	bl	40a588 <__adddf3>
  409e52:	4b65      	ldr	r3, [pc, #404]	; (409fe8 <__kernel_tan+0x370>)
  409e54:	429e      	cmp	r6, r3
  409e56:	4604      	mov	r4, r0
  409e58:	460d      	mov	r5, r1
  409e5a:	dc3a      	bgt.n	409ed2 <__kernel_tan+0x25a>
  409e5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  409e5e:	2b01      	cmp	r3, #1
  409e60:	d034      	beq.n	409ecc <__kernel_tan+0x254>
  409e62:	4602      	mov	r2, r0
  409e64:	460b      	mov	r3, r1
  409e66:	2000      	movs	r0, #0
  409e68:	495e      	ldr	r1, [pc, #376]	; (409fe4 <__kernel_tan+0x36c>)
  409e6a:	f000 fe69 	bl	40ab40 <__aeabi_ddiv>
  409e6e:	2400      	movs	r4, #0
  409e70:	460f      	mov	r7, r1
  409e72:	4606      	mov	r6, r0
  409e74:	465a      	mov	r2, fp
  409e76:	4653      	mov	r3, sl
  409e78:	4620      	mov	r0, r4
  409e7a:	4629      	mov	r1, r5
  409e7c:	f000 fb82 	bl	40a584 <__aeabi_dsub>
  409e80:	46a0      	mov	r8, r4
  409e82:	4602      	mov	r2, r0
  409e84:	460b      	mov	r3, r1
  409e86:	e9dd 0100 	ldrd	r0, r1, [sp]
  409e8a:	f000 fb7b 	bl	40a584 <__aeabi_dsub>
  409e8e:	4642      	mov	r2, r8
  409e90:	463b      	mov	r3, r7
  409e92:	f000 fd2b 	bl	40a8ec <__aeabi_dmul>
  409e96:	46a9      	mov	r9, r5
  409e98:	4604      	mov	r4, r0
  409e9a:	460d      	mov	r5, r1
  409e9c:	4642      	mov	r2, r8
  409e9e:	463b      	mov	r3, r7
  409ea0:	4640      	mov	r0, r8
  409ea2:	4649      	mov	r1, r9
  409ea4:	f000 fd22 	bl	40a8ec <__aeabi_dmul>
  409ea8:	2200      	movs	r2, #0
  409eaa:	4b50      	ldr	r3, [pc, #320]	; (409fec <__kernel_tan+0x374>)
  409eac:	f000 fb6c 	bl	40a588 <__adddf3>
  409eb0:	4602      	mov	r2, r0
  409eb2:	460b      	mov	r3, r1
  409eb4:	4620      	mov	r0, r4
  409eb6:	4629      	mov	r1, r5
  409eb8:	f000 fb66 	bl	40a588 <__adddf3>
  409ebc:	4632      	mov	r2, r6
  409ebe:	463b      	mov	r3, r7
  409ec0:	f000 fd14 	bl	40a8ec <__aeabi_dmul>
  409ec4:	4642      	mov	r2, r8
  409ec6:	463b      	mov	r3, r7
  409ec8:	f000 fb5e 	bl	40a588 <__adddf3>
  409ecc:	b007      	add	sp, #28
  409ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409ed2:	9810      	ldr	r0, [sp, #64]	; 0x40
  409ed4:	f000 fca4 	bl	40a820 <__aeabi_i2d>
  409ed8:	4622      	mov	r2, r4
  409eda:	4606      	mov	r6, r0
  409edc:	460f      	mov	r7, r1
  409ede:	462b      	mov	r3, r5
  409ee0:	4620      	mov	r0, r4
  409ee2:	4629      	mov	r1, r5
  409ee4:	f000 fd02 	bl	40a8ec <__aeabi_dmul>
  409ee8:	4632      	mov	r2, r6
  409eea:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409eee:	463b      	mov	r3, r7
  409ef0:	4620      	mov	r0, r4
  409ef2:	4629      	mov	r1, r5
  409ef4:	f000 fb48 	bl	40a588 <__adddf3>
  409ef8:	4602      	mov	r2, r0
  409efa:	460b      	mov	r3, r1
  409efc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409f00:	f000 fe1e 	bl	40ab40 <__aeabi_ddiv>
  409f04:	e9dd 2300 	ldrd	r2, r3, [sp]
  409f08:	f000 fb3c 	bl	40a584 <__aeabi_dsub>
  409f0c:	4602      	mov	r2, r0
  409f0e:	460b      	mov	r3, r1
  409f10:	4658      	mov	r0, fp
  409f12:	4651      	mov	r1, sl
  409f14:	f000 fb36 	bl	40a584 <__aeabi_dsub>
  409f18:	4602      	mov	r2, r0
  409f1a:	460b      	mov	r3, r1
  409f1c:	f000 fb34 	bl	40a588 <__adddf3>
  409f20:	4602      	mov	r2, r0
  409f22:	460b      	mov	r3, r1
  409f24:	4630      	mov	r0, r6
  409f26:	4639      	mov	r1, r7
  409f28:	f000 fb2c 	bl	40a584 <__aeabi_dsub>
  409f2c:	4604      	mov	r4, r0
  409f2e:	ea4f 70a9 	mov.w	r0, r9, asr #30
  409f32:	f000 0002 	and.w	r0, r0, #2
  409f36:	f1c0 0001 	rsb	r0, r0, #1
  409f3a:	460d      	mov	r5, r1
  409f3c:	f000 fc70 	bl	40a820 <__aeabi_i2d>
  409f40:	4602      	mov	r2, r0
  409f42:	460b      	mov	r3, r1
  409f44:	4620      	mov	r0, r4
  409f46:	4629      	mov	r1, r5
  409f48:	f000 fcd0 	bl	40a8ec <__aeabi_dmul>
  409f4c:	b007      	add	sp, #28
  409f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409f52:	4658      	mov	r0, fp
  409f54:	4651      	mov	r1, sl
  409f56:	f000 f9f5 	bl	40a344 <fabs>
  409f5a:	4602      	mov	r2, r0
  409f5c:	460b      	mov	r3, r1
  409f5e:	2000      	movs	r0, #0
  409f60:	4922      	ldr	r1, [pc, #136]	; (409fec <__kernel_tan+0x374>)
  409f62:	f000 fded 	bl	40ab40 <__aeabi_ddiv>
  409f66:	e7b1      	b.n	409ecc <__kernel_tan+0x254>
  409f68:	54442d18 	.word	0x54442d18
  409f6c:	3fe921fb 	.word	0x3fe921fb
  409f70:	33145c07 	.word	0x33145c07
  409f74:	3c81a626 	.word	0x3c81a626
  409f78:	74bf7ad4 	.word	0x74bf7ad4
  409f7c:	3efb2a70 	.word	0x3efb2a70
  409f80:	32f0a7e9 	.word	0x32f0a7e9
  409f84:	3f12b80f 	.word	0x3f12b80f
  409f88:	1a8d1068 	.word	0x1a8d1068
  409f8c:	3f3026f7 	.word	0x3f3026f7
  409f90:	fee08315 	.word	0xfee08315
  409f94:	3f57dbc8 	.word	0x3f57dbc8
  409f98:	e96e8493 	.word	0xe96e8493
  409f9c:	3f8226e3 	.word	0x3f8226e3
  409fa0:	1bb341fe 	.word	0x1bb341fe
  409fa4:	3faba1ba 	.word	0x3faba1ba
  409fa8:	db605373 	.word	0xdb605373
  409fac:	bef375cb 	.word	0xbef375cb
  409fb0:	a03792a6 	.word	0xa03792a6
  409fb4:	3f147e88 	.word	0x3f147e88
  409fb8:	f2f26501 	.word	0xf2f26501
  409fbc:	3f4344d8 	.word	0x3f4344d8
  409fc0:	c9560328 	.word	0xc9560328
  409fc4:	3f6d6d22 	.word	0x3f6d6d22
  409fc8:	8406d637 	.word	0x8406d637
  409fcc:	3f9664f4 	.word	0x3f9664f4
  409fd0:	1110fe7a 	.word	0x1110fe7a
  409fd4:	3fc11111 	.word	0x3fc11111
  409fd8:	55555563 	.word	0x55555563
  409fdc:	3fd55555 	.word	0x3fd55555
  409fe0:	3e2fffff 	.word	0x3e2fffff
  409fe4:	bff00000 	.word	0xbff00000
  409fe8:	3fe59427 	.word	0x3fe59427
  409fec:	3ff00000 	.word	0x3ff00000
  409ff0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  409ff4:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
  409ff8:	4683      	mov	fp, r0
  409ffa:	469a      	mov	sl, r3
  409ffc:	e666      	b.n	409ccc <__kernel_tan+0x54>
  409ffe:	4658      	mov	r0, fp
  40a000:	4651      	mov	r1, sl
  40a002:	e763      	b.n	409ecc <__kernel_tan+0x254>
  40a004:	0000      	movs	r0, r0
	...

0040a008 <atan>:
  40a008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a00c:	4bc0      	ldr	r3, [pc, #768]	; (40a310 <atan+0x308>)
  40a00e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  40a012:	429e      	cmp	r6, r3
  40a014:	460d      	mov	r5, r1
  40a016:	468a      	mov	sl, r1
  40a018:	4604      	mov	r4, r0
  40a01a:	dd0f      	ble.n	40a03c <atan+0x34>
  40a01c:	4bbd      	ldr	r3, [pc, #756]	; (40a314 <atan+0x30c>)
  40a01e:	429e      	cmp	r6, r3
  40a020:	f300 80b2 	bgt.w	40a188 <atan+0x180>
  40a024:	f000 80ad 	beq.w	40a182 <atan+0x17a>
  40a028:	4bbb      	ldr	r3, [pc, #748]	; (40a318 <atan+0x310>)
  40a02a:	49bc      	ldr	r1, [pc, #752]	; (40a31c <atan+0x314>)
  40a02c:	4cbc      	ldr	r4, [pc, #752]	; (40a320 <atan+0x318>)
  40a02e:	f1ba 0f00 	cmp.w	sl, #0
  40a032:	bfc8      	it	gt
  40a034:	4619      	movgt	r1, r3
  40a036:	4620      	mov	r0, r4
  40a038:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a03c:	4bb9      	ldr	r3, [pc, #740]	; (40a324 <atan+0x31c>)
  40a03e:	429e      	cmp	r6, r3
  40a040:	f300 80bc 	bgt.w	40a1bc <atan+0x1b4>
  40a044:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
  40a048:	429e      	cmp	r6, r3
  40a04a:	f340 80a7 	ble.w	40a19c <atan+0x194>
  40a04e:	f04f 3bff 	mov.w	fp, #4294967295
  40a052:	4622      	mov	r2, r4
  40a054:	462b      	mov	r3, r5
  40a056:	4620      	mov	r0, r4
  40a058:	4629      	mov	r1, r5
  40a05a:	f000 fc47 	bl	40a8ec <__aeabi_dmul>
  40a05e:	4602      	mov	r2, r0
  40a060:	460b      	mov	r3, r1
  40a062:	4680      	mov	r8, r0
  40a064:	4689      	mov	r9, r1
  40a066:	f000 fc41 	bl	40a8ec <__aeabi_dmul>
  40a06a:	a391      	add	r3, pc, #580	; (adr r3, 40a2b0 <atan+0x2a8>)
  40a06c:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a070:	4606      	mov	r6, r0
  40a072:	460f      	mov	r7, r1
  40a074:	f000 fc3a 	bl	40a8ec <__aeabi_dmul>
  40a078:	a38f      	add	r3, pc, #572	; (adr r3, 40a2b8 <atan+0x2b0>)
  40a07a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a07e:	f000 fa83 	bl	40a588 <__adddf3>
  40a082:	4632      	mov	r2, r6
  40a084:	463b      	mov	r3, r7
  40a086:	f000 fc31 	bl	40a8ec <__aeabi_dmul>
  40a08a:	a38d      	add	r3, pc, #564	; (adr r3, 40a2c0 <atan+0x2b8>)
  40a08c:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a090:	f000 fa7a 	bl	40a588 <__adddf3>
  40a094:	4632      	mov	r2, r6
  40a096:	463b      	mov	r3, r7
  40a098:	f000 fc28 	bl	40a8ec <__aeabi_dmul>
  40a09c:	a38a      	add	r3, pc, #552	; (adr r3, 40a2c8 <atan+0x2c0>)
  40a09e:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a0a2:	f000 fa71 	bl	40a588 <__adddf3>
  40a0a6:	4632      	mov	r2, r6
  40a0a8:	463b      	mov	r3, r7
  40a0aa:	f000 fc1f 	bl	40a8ec <__aeabi_dmul>
  40a0ae:	a388      	add	r3, pc, #544	; (adr r3, 40a2d0 <atan+0x2c8>)
  40a0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a0b4:	f000 fa68 	bl	40a588 <__adddf3>
  40a0b8:	4632      	mov	r2, r6
  40a0ba:	463b      	mov	r3, r7
  40a0bc:	f000 fc16 	bl	40a8ec <__aeabi_dmul>
  40a0c0:	a385      	add	r3, pc, #532	; (adr r3, 40a2d8 <atan+0x2d0>)
  40a0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a0c6:	f000 fa5f 	bl	40a588 <__adddf3>
  40a0ca:	4642      	mov	r2, r8
  40a0cc:	464b      	mov	r3, r9
  40a0ce:	f000 fc0d 	bl	40a8ec <__aeabi_dmul>
  40a0d2:	a383      	add	r3, pc, #524	; (adr r3, 40a2e0 <atan+0x2d8>)
  40a0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a0d8:	4680      	mov	r8, r0
  40a0da:	4689      	mov	r9, r1
  40a0dc:	4630      	mov	r0, r6
  40a0de:	4639      	mov	r1, r7
  40a0e0:	f000 fc04 	bl	40a8ec <__aeabi_dmul>
  40a0e4:	a380      	add	r3, pc, #512	; (adr r3, 40a2e8 <atan+0x2e0>)
  40a0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a0ea:	f000 fa4b 	bl	40a584 <__aeabi_dsub>
  40a0ee:	4632      	mov	r2, r6
  40a0f0:	463b      	mov	r3, r7
  40a0f2:	f000 fbfb 	bl	40a8ec <__aeabi_dmul>
  40a0f6:	a37e      	add	r3, pc, #504	; (adr r3, 40a2f0 <atan+0x2e8>)
  40a0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a0fc:	f000 fa42 	bl	40a584 <__aeabi_dsub>
  40a100:	4632      	mov	r2, r6
  40a102:	463b      	mov	r3, r7
  40a104:	f000 fbf2 	bl	40a8ec <__aeabi_dmul>
  40a108:	a37b      	add	r3, pc, #492	; (adr r3, 40a2f8 <atan+0x2f0>)
  40a10a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a10e:	f000 fa39 	bl	40a584 <__aeabi_dsub>
  40a112:	4632      	mov	r2, r6
  40a114:	463b      	mov	r3, r7
  40a116:	f000 fbe9 	bl	40a8ec <__aeabi_dmul>
  40a11a:	a379      	add	r3, pc, #484	; (adr r3, 40a300 <atan+0x2f8>)
  40a11c:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a120:	f000 fa30 	bl	40a584 <__aeabi_dsub>
  40a124:	4632      	mov	r2, r6
  40a126:	463b      	mov	r3, r7
  40a128:	f000 fbe0 	bl	40a8ec <__aeabi_dmul>
  40a12c:	f1bb 3fff 	cmp.w	fp, #4294967295
  40a130:	4602      	mov	r2, r0
  40a132:	460b      	mov	r3, r1
  40a134:	d069      	beq.n	40a20a <atan+0x202>
  40a136:	4640      	mov	r0, r8
  40a138:	4649      	mov	r1, r9
  40a13a:	f000 fa25 	bl	40a588 <__adddf3>
  40a13e:	4622      	mov	r2, r4
  40a140:	462b      	mov	r3, r5
  40a142:	f000 fbd3 	bl	40a8ec <__aeabi_dmul>
  40a146:	4e78      	ldr	r6, [pc, #480]	; (40a328 <atan+0x320>)
  40a148:	4b78      	ldr	r3, [pc, #480]	; (40a32c <atan+0x324>)
  40a14a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
  40a14e:	445e      	add	r6, fp
  40a150:	449b      	add	fp, r3
  40a152:	e9db 2300 	ldrd	r2, r3, [fp]
  40a156:	f000 fa15 	bl	40a584 <__aeabi_dsub>
  40a15a:	4622      	mov	r2, r4
  40a15c:	462b      	mov	r3, r5
  40a15e:	f000 fa11 	bl	40a584 <__aeabi_dsub>
  40a162:	4602      	mov	r2, r0
  40a164:	460b      	mov	r3, r1
  40a166:	e9d6 0100 	ldrd	r0, r1, [r6]
  40a16a:	f000 fa0b 	bl	40a584 <__aeabi_dsub>
  40a16e:	f1ba 0f00 	cmp.w	sl, #0
  40a172:	4604      	mov	r4, r0
  40a174:	f6bf af5f 	bge.w	40a036 <atan+0x2e>
  40a178:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  40a17c:	4620      	mov	r0, r4
  40a17e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a182:	2800      	cmp	r0, #0
  40a184:	f43f af50 	beq.w	40a028 <atan+0x20>
  40a188:	4622      	mov	r2, r4
  40a18a:	4620      	mov	r0, r4
  40a18c:	462b      	mov	r3, r5
  40a18e:	4629      	mov	r1, r5
  40a190:	f000 f9fa 	bl	40a588 <__adddf3>
  40a194:	4604      	mov	r4, r0
  40a196:	4620      	mov	r0, r4
  40a198:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a19c:	a35a      	add	r3, pc, #360	; (adr r3, 40a308 <atan+0x300>)
  40a19e:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a1a2:	f000 f9f1 	bl	40a588 <__adddf3>
  40a1a6:	2200      	movs	r2, #0
  40a1a8:	4b61      	ldr	r3, [pc, #388]	; (40a330 <atan+0x328>)
  40a1aa:	f000 fe2f 	bl	40ae0c <__aeabi_dcmpgt>
  40a1ae:	2800      	cmp	r0, #0
  40a1b0:	f43f af4d 	beq.w	40a04e <atan+0x46>
  40a1b4:	4629      	mov	r1, r5
  40a1b6:	4620      	mov	r0, r4
  40a1b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a1bc:	f000 f8c2 	bl	40a344 <fabs>
  40a1c0:	4b5c      	ldr	r3, [pc, #368]	; (40a334 <atan+0x32c>)
  40a1c2:	429e      	cmp	r6, r3
  40a1c4:	4604      	mov	r4, r0
  40a1c6:	460d      	mov	r5, r1
  40a1c8:	dc2f      	bgt.n	40a22a <atan+0x222>
  40a1ca:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
  40a1ce:	429e      	cmp	r6, r3
  40a1d0:	dc54      	bgt.n	40a27c <atan+0x274>
  40a1d2:	4602      	mov	r2, r0
  40a1d4:	460b      	mov	r3, r1
  40a1d6:	f000 f9d7 	bl	40a588 <__adddf3>
  40a1da:	2200      	movs	r2, #0
  40a1dc:	4b54      	ldr	r3, [pc, #336]	; (40a330 <atan+0x328>)
  40a1de:	f000 f9d1 	bl	40a584 <__aeabi_dsub>
  40a1e2:	2200      	movs	r2, #0
  40a1e4:	4606      	mov	r6, r0
  40a1e6:	460f      	mov	r7, r1
  40a1e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40a1ec:	4620      	mov	r0, r4
  40a1ee:	4629      	mov	r1, r5
  40a1f0:	f000 f9ca 	bl	40a588 <__adddf3>
  40a1f4:	4602      	mov	r2, r0
  40a1f6:	460b      	mov	r3, r1
  40a1f8:	4630      	mov	r0, r6
  40a1fa:	4639      	mov	r1, r7
  40a1fc:	f000 fca0 	bl	40ab40 <__aeabi_ddiv>
  40a200:	f04f 0b00 	mov.w	fp, #0
  40a204:	4604      	mov	r4, r0
  40a206:	460d      	mov	r5, r1
  40a208:	e723      	b.n	40a052 <atan+0x4a>
  40a20a:	4640      	mov	r0, r8
  40a20c:	4649      	mov	r1, r9
  40a20e:	f000 f9bb 	bl	40a588 <__adddf3>
  40a212:	4622      	mov	r2, r4
  40a214:	462b      	mov	r3, r5
  40a216:	f000 fb69 	bl	40a8ec <__aeabi_dmul>
  40a21a:	4602      	mov	r2, r0
  40a21c:	460b      	mov	r3, r1
  40a21e:	4620      	mov	r0, r4
  40a220:	4629      	mov	r1, r5
  40a222:	f000 f9af 	bl	40a584 <__aeabi_dsub>
  40a226:	4604      	mov	r4, r0
  40a228:	e705      	b.n	40a036 <atan+0x2e>
  40a22a:	4b43      	ldr	r3, [pc, #268]	; (40a338 <atan+0x330>)
  40a22c:	429e      	cmp	r6, r3
  40a22e:	dc1a      	bgt.n	40a266 <atan+0x25e>
  40a230:	2200      	movs	r2, #0
  40a232:	4b42      	ldr	r3, [pc, #264]	; (40a33c <atan+0x334>)
  40a234:	f000 f9a6 	bl	40a584 <__aeabi_dsub>
  40a238:	2200      	movs	r2, #0
  40a23a:	4606      	mov	r6, r0
  40a23c:	460f      	mov	r7, r1
  40a23e:	4b3f      	ldr	r3, [pc, #252]	; (40a33c <atan+0x334>)
  40a240:	4620      	mov	r0, r4
  40a242:	4629      	mov	r1, r5
  40a244:	f000 fb52 	bl	40a8ec <__aeabi_dmul>
  40a248:	2200      	movs	r2, #0
  40a24a:	4b39      	ldr	r3, [pc, #228]	; (40a330 <atan+0x328>)
  40a24c:	f000 f99c 	bl	40a588 <__adddf3>
  40a250:	4602      	mov	r2, r0
  40a252:	460b      	mov	r3, r1
  40a254:	4630      	mov	r0, r6
  40a256:	4639      	mov	r1, r7
  40a258:	f000 fc72 	bl	40ab40 <__aeabi_ddiv>
  40a25c:	f04f 0b02 	mov.w	fp, #2
  40a260:	4604      	mov	r4, r0
  40a262:	460d      	mov	r5, r1
  40a264:	e6f5      	b.n	40a052 <atan+0x4a>
  40a266:	4602      	mov	r2, r0
  40a268:	460b      	mov	r3, r1
  40a26a:	2000      	movs	r0, #0
  40a26c:	4934      	ldr	r1, [pc, #208]	; (40a340 <atan+0x338>)
  40a26e:	f000 fc67 	bl	40ab40 <__aeabi_ddiv>
  40a272:	f04f 0b03 	mov.w	fp, #3
  40a276:	4604      	mov	r4, r0
  40a278:	460d      	mov	r5, r1
  40a27a:	e6ea      	b.n	40a052 <atan+0x4a>
  40a27c:	2200      	movs	r2, #0
  40a27e:	4b2c      	ldr	r3, [pc, #176]	; (40a330 <atan+0x328>)
  40a280:	f000 f980 	bl	40a584 <__aeabi_dsub>
  40a284:	2200      	movs	r2, #0
  40a286:	4606      	mov	r6, r0
  40a288:	460f      	mov	r7, r1
  40a28a:	4b29      	ldr	r3, [pc, #164]	; (40a330 <atan+0x328>)
  40a28c:	4620      	mov	r0, r4
  40a28e:	4629      	mov	r1, r5
  40a290:	f000 f97a 	bl	40a588 <__adddf3>
  40a294:	4602      	mov	r2, r0
  40a296:	460b      	mov	r3, r1
  40a298:	4630      	mov	r0, r6
  40a29a:	4639      	mov	r1, r7
  40a29c:	f000 fc50 	bl	40ab40 <__aeabi_ddiv>
  40a2a0:	f04f 0b01 	mov.w	fp, #1
  40a2a4:	4604      	mov	r4, r0
  40a2a6:	460d      	mov	r5, r1
  40a2a8:	e6d3      	b.n	40a052 <atan+0x4a>
  40a2aa:	bf00      	nop
  40a2ac:	f3af 8000 	nop.w
  40a2b0:	e322da11 	.word	0xe322da11
  40a2b4:	3f90ad3a 	.word	0x3f90ad3a
  40a2b8:	24760deb 	.word	0x24760deb
  40a2bc:	3fa97b4b 	.word	0x3fa97b4b
  40a2c0:	a0d03d51 	.word	0xa0d03d51
  40a2c4:	3fb10d66 	.word	0x3fb10d66
  40a2c8:	c54c206e 	.word	0xc54c206e
  40a2cc:	3fb745cd 	.word	0x3fb745cd
  40a2d0:	920083ff 	.word	0x920083ff
  40a2d4:	3fc24924 	.word	0x3fc24924
  40a2d8:	5555550d 	.word	0x5555550d
  40a2dc:	3fd55555 	.word	0x3fd55555
  40a2e0:	2c6a6c2f 	.word	0x2c6a6c2f
  40a2e4:	bfa2b444 	.word	0xbfa2b444
  40a2e8:	52defd9a 	.word	0x52defd9a
  40a2ec:	3fadde2d 	.word	0x3fadde2d
  40a2f0:	af749a6d 	.word	0xaf749a6d
  40a2f4:	3fb3b0f2 	.word	0x3fb3b0f2
  40a2f8:	fe231671 	.word	0xfe231671
  40a2fc:	3fbc71c6 	.word	0x3fbc71c6
  40a300:	9998ebc4 	.word	0x9998ebc4
  40a304:	3fc99999 	.word	0x3fc99999
  40a308:	8800759c 	.word	0x8800759c
  40a30c:	7e37e43c 	.word	0x7e37e43c
  40a310:	440fffff 	.word	0x440fffff
  40a314:	7ff00000 	.word	0x7ff00000
  40a318:	3ff921fb 	.word	0x3ff921fb
  40a31c:	bff921fb 	.word	0xbff921fb
  40a320:	54442d18 	.word	0x54442d18
  40a324:	3fdbffff 	.word	0x3fdbffff
  40a328:	0040fb58 	.word	0x0040fb58
  40a32c:	0040fb38 	.word	0x0040fb38
  40a330:	3ff00000 	.word	0x3ff00000
  40a334:	3ff2ffff 	.word	0x3ff2ffff
  40a338:	40037fff 	.word	0x40037fff
  40a33c:	3ff80000 	.word	0x3ff80000
  40a340:	bff00000 	.word	0xbff00000

0040a344 <fabs>:
  40a344:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a348:	4770      	bx	lr
  40a34a:	bf00      	nop
  40a34c:	0000      	movs	r0, r0
	...

0040a350 <floor>:
  40a350:	f3c1 520a 	ubfx	r2, r1, #20, #11
  40a354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a358:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
  40a35c:	2e13      	cmp	r6, #19
  40a35e:	460b      	mov	r3, r1
  40a360:	460d      	mov	r5, r1
  40a362:	4604      	mov	r4, r0
  40a364:	4688      	mov	r8, r1
  40a366:	4607      	mov	r7, r0
  40a368:	dc1c      	bgt.n	40a3a4 <floor+0x54>
  40a36a:	2e00      	cmp	r6, #0
  40a36c:	db3f      	blt.n	40a3ee <floor+0x9e>
  40a36e:	4a3a      	ldr	r2, [pc, #232]	; (40a458 <floor+0x108>)
  40a370:	fa42 f906 	asr.w	r9, r2, r6
  40a374:	ea01 0209 	and.w	r2, r1, r9
  40a378:	4302      	orrs	r2, r0
  40a37a:	4686      	mov	lr, r0
  40a37c:	d017      	beq.n	40a3ae <floor+0x5e>
  40a37e:	a334      	add	r3, pc, #208	; (adr r3, 40a450 <floor+0x100>)
  40a380:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a384:	f000 f900 	bl	40a588 <__adddf3>
  40a388:	2200      	movs	r2, #0
  40a38a:	2300      	movs	r3, #0
  40a38c:	f000 fd3e 	bl	40ae0c <__aeabi_dcmpgt>
  40a390:	b120      	cbz	r0, 40a39c <floor+0x4c>
  40a392:	2d00      	cmp	r5, #0
  40a394:	db40      	blt.n	40a418 <floor+0xc8>
  40a396:	ea28 0509 	bic.w	r5, r8, r9
  40a39a:	2700      	movs	r7, #0
  40a39c:	4638      	mov	r0, r7
  40a39e:	4629      	mov	r1, r5
  40a3a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a3a4:	2e33      	cmp	r6, #51	; 0x33
  40a3a6:	dd06      	ble.n	40a3b6 <floor+0x66>
  40a3a8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  40a3ac:	d02f      	beq.n	40a40e <floor+0xbe>
  40a3ae:	4620      	mov	r0, r4
  40a3b0:	4619      	mov	r1, r3
  40a3b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a3b6:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
  40a3ba:	f04f 39ff 	mov.w	r9, #4294967295
  40a3be:	fa29 f902 	lsr.w	r9, r9, r2
  40a3c2:	ea10 0f09 	tst.w	r0, r9
  40a3c6:	d0f2      	beq.n	40a3ae <floor+0x5e>
  40a3c8:	a321      	add	r3, pc, #132	; (adr r3, 40a450 <floor+0x100>)
  40a3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a3ce:	f000 f8db 	bl	40a588 <__adddf3>
  40a3d2:	2200      	movs	r2, #0
  40a3d4:	2300      	movs	r3, #0
  40a3d6:	f000 fd19 	bl	40ae0c <__aeabi_dcmpgt>
  40a3da:	2800      	cmp	r0, #0
  40a3dc:	d0de      	beq.n	40a39c <floor+0x4c>
  40a3de:	2d00      	cmp	r5, #0
  40a3e0:	db20      	blt.n	40a424 <floor+0xd4>
  40a3e2:	4645      	mov	r5, r8
  40a3e4:	ea27 0709 	bic.w	r7, r7, r9
  40a3e8:	4638      	mov	r0, r7
  40a3ea:	4629      	mov	r1, r5
  40a3ec:	e7d8      	b.n	40a3a0 <floor+0x50>
  40a3ee:	a318      	add	r3, pc, #96	; (adr r3, 40a450 <floor+0x100>)
  40a3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a3f4:	f000 f8c8 	bl	40a588 <__adddf3>
  40a3f8:	2200      	movs	r2, #0
  40a3fa:	2300      	movs	r3, #0
  40a3fc:	f000 fd06 	bl	40ae0c <__aeabi_dcmpgt>
  40a400:	2800      	cmp	r0, #0
  40a402:	d0cb      	beq.n	40a39c <floor+0x4c>
  40a404:	2d00      	cmp	r5, #0
  40a406:	db18      	blt.n	40a43a <floor+0xea>
  40a408:	2700      	movs	r7, #0
  40a40a:	463d      	mov	r5, r7
  40a40c:	e7c6      	b.n	40a39c <floor+0x4c>
  40a40e:	4602      	mov	r2, r0
  40a410:	460b      	mov	r3, r1
  40a412:	f000 f8b9 	bl	40a588 <__adddf3>
  40a416:	e7cc      	b.n	40a3b2 <floor+0x62>
  40a418:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  40a41c:	fa43 f606 	asr.w	r6, r3, r6
  40a420:	44b0      	add	r8, r6
  40a422:	e7b8      	b.n	40a396 <floor+0x46>
  40a424:	2e14      	cmp	r6, #20
  40a426:	d010      	beq.n	40a44a <floor+0xfa>
  40a428:	2301      	movs	r3, #1
  40a42a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
  40a42e:	fa03 f606 	lsl.w	r6, r3, r6
  40a432:	1937      	adds	r7, r6, r4
  40a434:	bf28      	it	cs
  40a436:	4498      	addcs	r8, r3
  40a438:	e7d3      	b.n	40a3e2 <floor+0x92>
  40a43a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
  40a43e:	4b07      	ldr	r3, [pc, #28]	; (40a45c <floor+0x10c>)
  40a440:	4322      	orrs	r2, r4
  40a442:	bf18      	it	ne
  40a444:	461d      	movne	r5, r3
  40a446:	2700      	movs	r7, #0
  40a448:	e7a8      	b.n	40a39c <floor+0x4c>
  40a44a:	f105 0801 	add.w	r8, r5, #1
  40a44e:	e7c8      	b.n	40a3e2 <floor+0x92>
  40a450:	8800759c 	.word	0x8800759c
  40a454:	7e37e43c 	.word	0x7e37e43c
  40a458:	000fffff 	.word	0x000fffff
  40a45c:	bff00000 	.word	0xbff00000

0040a460 <matherr>:
  40a460:	2000      	movs	r0, #0
  40a462:	4770      	bx	lr

0040a464 <nan>:
  40a464:	2000      	movs	r0, #0
  40a466:	4901      	ldr	r1, [pc, #4]	; (40a46c <nan+0x8>)
  40a468:	4770      	bx	lr
  40a46a:	bf00      	nop
  40a46c:	7ff80000 	.word	0x7ff80000

0040a470 <scalbn>:
  40a470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a472:	f3c1 560a 	ubfx	r6, r1, #20, #11
  40a476:	4604      	mov	r4, r0
  40a478:	460d      	mov	r5, r1
  40a47a:	460b      	mov	r3, r1
  40a47c:	4617      	mov	r7, r2
  40a47e:	bb06      	cbnz	r6, 40a4c2 <scalbn+0x52>
  40a480:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  40a484:	4303      	orrs	r3, r0
  40a486:	d025      	beq.n	40a4d4 <scalbn+0x64>
  40a488:	2200      	movs	r2, #0
  40a48a:	4b35      	ldr	r3, [pc, #212]	; (40a560 <scalbn+0xf0>)
  40a48c:	f000 fa2e 	bl	40a8ec <__aeabi_dmul>
  40a490:	4a34      	ldr	r2, [pc, #208]	; (40a564 <scalbn+0xf4>)
  40a492:	4297      	cmp	r7, r2
  40a494:	4604      	mov	r4, r0
  40a496:	460d      	mov	r5, r1
  40a498:	460b      	mov	r3, r1
  40a49a:	db2a      	blt.n	40a4f2 <scalbn+0x82>
  40a49c:	f3c1 560a 	ubfx	r6, r1, #20, #11
  40a4a0:	3e36      	subs	r6, #54	; 0x36
  40a4a2:	443e      	add	r6, r7
  40a4a4:	f240 72fe 	movw	r2, #2046	; 0x7fe
  40a4a8:	4296      	cmp	r6, r2
  40a4aa:	dc28      	bgt.n	40a4fe <scalbn+0x8e>
  40a4ac:	2e00      	cmp	r6, #0
  40a4ae:	dd12      	ble.n	40a4d6 <scalbn+0x66>
  40a4b0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  40a4b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  40a4b8:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  40a4bc:	4620      	mov	r0, r4
  40a4be:	4629      	mov	r1, r5
  40a4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a4c2:	f240 72ff 	movw	r2, #2047	; 0x7ff
  40a4c6:	4296      	cmp	r6, r2
  40a4c8:	d1eb      	bne.n	40a4a2 <scalbn+0x32>
  40a4ca:	4602      	mov	r2, r0
  40a4cc:	460b      	mov	r3, r1
  40a4ce:	f000 f85b 	bl	40a588 <__adddf3>
  40a4d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a4d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a4d6:	f116 0f35 	cmn.w	r6, #53	; 0x35
  40a4da:	da1d      	bge.n	40a518 <scalbn+0xa8>
  40a4dc:	f24c 3350 	movw	r3, #50000	; 0xc350
  40a4e0:	429f      	cmp	r7, r3
  40a4e2:	4622      	mov	r2, r4
  40a4e4:	462b      	mov	r3, r5
  40a4e6:	dc25      	bgt.n	40a534 <scalbn+0xc4>
  40a4e8:	a119      	add	r1, pc, #100	; (adr r1, 40a550 <scalbn+0xe0>)
  40a4ea:	e9d1 0100 	ldrd	r0, r1, [r1]
  40a4ee:	f000 f83d 	bl	40a56c <copysign>
  40a4f2:	a317      	add	r3, pc, #92	; (adr r3, 40a550 <scalbn+0xe0>)
  40a4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a4f8:	f000 f9f8 	bl	40a8ec <__aeabi_dmul>
  40a4fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a4fe:	4622      	mov	r2, r4
  40a500:	462b      	mov	r3, r5
  40a502:	a115      	add	r1, pc, #84	; (adr r1, 40a558 <scalbn+0xe8>)
  40a504:	e9d1 0100 	ldrd	r0, r1, [r1]
  40a508:	f000 f830 	bl	40a56c <copysign>
  40a50c:	a312      	add	r3, pc, #72	; (adr r3, 40a558 <scalbn+0xe8>)
  40a50e:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a512:	f000 f9eb 	bl	40a8ec <__aeabi_dmul>
  40a516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a518:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  40a51c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  40a520:	3636      	adds	r6, #54	; 0x36
  40a522:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  40a526:	4620      	mov	r0, r4
  40a528:	4629      	mov	r1, r5
  40a52a:	2200      	movs	r2, #0
  40a52c:	4b0e      	ldr	r3, [pc, #56]	; (40a568 <scalbn+0xf8>)
  40a52e:	f000 f9dd 	bl	40a8ec <__aeabi_dmul>
  40a532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a534:	a108      	add	r1, pc, #32	; (adr r1, 40a558 <scalbn+0xe8>)
  40a536:	e9d1 0100 	ldrd	r0, r1, [r1]
  40a53a:	f000 f817 	bl	40a56c <copysign>
  40a53e:	a306      	add	r3, pc, #24	; (adr r3, 40a558 <scalbn+0xe8>)
  40a540:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a544:	f000 f9d2 	bl	40a8ec <__aeabi_dmul>
  40a548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a54a:	bf00      	nop
  40a54c:	f3af 8000 	nop.w
  40a550:	c2f8f359 	.word	0xc2f8f359
  40a554:	01a56e1f 	.word	0x01a56e1f
  40a558:	8800759c 	.word	0x8800759c
  40a55c:	7e37e43c 	.word	0x7e37e43c
  40a560:	43500000 	.word	0x43500000
  40a564:	ffff3cb0 	.word	0xffff3cb0
  40a568:	3c900000 	.word	0x3c900000

0040a56c <copysign>:
  40a56c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  40a570:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
  40a574:	ea42 0103 	orr.w	r1, r2, r3
  40a578:	4770      	bx	lr
  40a57a:	bf00      	nop

0040a57c <__aeabi_drsub>:
  40a57c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40a580:	e002      	b.n	40a588 <__adddf3>
  40a582:	bf00      	nop

0040a584 <__aeabi_dsub>:
  40a584:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040a588 <__adddf3>:
  40a588:	b530      	push	{r4, r5, lr}
  40a58a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40a58e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40a592:	ea94 0f05 	teq	r4, r5
  40a596:	bf08      	it	eq
  40a598:	ea90 0f02 	teqeq	r0, r2
  40a59c:	bf1f      	itttt	ne
  40a59e:	ea54 0c00 	orrsne.w	ip, r4, r0
  40a5a2:	ea55 0c02 	orrsne.w	ip, r5, r2
  40a5a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40a5aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a5ae:	f000 80e2 	beq.w	40a776 <__adddf3+0x1ee>
  40a5b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40a5b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40a5ba:	bfb8      	it	lt
  40a5bc:	426d      	neglt	r5, r5
  40a5be:	dd0c      	ble.n	40a5da <__adddf3+0x52>
  40a5c0:	442c      	add	r4, r5
  40a5c2:	ea80 0202 	eor.w	r2, r0, r2
  40a5c6:	ea81 0303 	eor.w	r3, r1, r3
  40a5ca:	ea82 0000 	eor.w	r0, r2, r0
  40a5ce:	ea83 0101 	eor.w	r1, r3, r1
  40a5d2:	ea80 0202 	eor.w	r2, r0, r2
  40a5d6:	ea81 0303 	eor.w	r3, r1, r3
  40a5da:	2d36      	cmp	r5, #54	; 0x36
  40a5dc:	bf88      	it	hi
  40a5de:	bd30      	pophi	{r4, r5, pc}
  40a5e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40a5e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40a5e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40a5ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40a5f0:	d002      	beq.n	40a5f8 <__adddf3+0x70>
  40a5f2:	4240      	negs	r0, r0
  40a5f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a5f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40a5fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40a600:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40a604:	d002      	beq.n	40a60c <__adddf3+0x84>
  40a606:	4252      	negs	r2, r2
  40a608:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40a60c:	ea94 0f05 	teq	r4, r5
  40a610:	f000 80a7 	beq.w	40a762 <__adddf3+0x1da>
  40a614:	f1a4 0401 	sub.w	r4, r4, #1
  40a618:	f1d5 0e20 	rsbs	lr, r5, #32
  40a61c:	db0d      	blt.n	40a63a <__adddf3+0xb2>
  40a61e:	fa02 fc0e 	lsl.w	ip, r2, lr
  40a622:	fa22 f205 	lsr.w	r2, r2, r5
  40a626:	1880      	adds	r0, r0, r2
  40a628:	f141 0100 	adc.w	r1, r1, #0
  40a62c:	fa03 f20e 	lsl.w	r2, r3, lr
  40a630:	1880      	adds	r0, r0, r2
  40a632:	fa43 f305 	asr.w	r3, r3, r5
  40a636:	4159      	adcs	r1, r3
  40a638:	e00e      	b.n	40a658 <__adddf3+0xd0>
  40a63a:	f1a5 0520 	sub.w	r5, r5, #32
  40a63e:	f10e 0e20 	add.w	lr, lr, #32
  40a642:	2a01      	cmp	r2, #1
  40a644:	fa03 fc0e 	lsl.w	ip, r3, lr
  40a648:	bf28      	it	cs
  40a64a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40a64e:	fa43 f305 	asr.w	r3, r3, r5
  40a652:	18c0      	adds	r0, r0, r3
  40a654:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40a658:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a65c:	d507      	bpl.n	40a66e <__adddf3+0xe6>
  40a65e:	f04f 0e00 	mov.w	lr, #0
  40a662:	f1dc 0c00 	rsbs	ip, ip, #0
  40a666:	eb7e 0000 	sbcs.w	r0, lr, r0
  40a66a:	eb6e 0101 	sbc.w	r1, lr, r1
  40a66e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40a672:	d31b      	bcc.n	40a6ac <__adddf3+0x124>
  40a674:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40a678:	d30c      	bcc.n	40a694 <__adddf3+0x10c>
  40a67a:	0849      	lsrs	r1, r1, #1
  40a67c:	ea5f 0030 	movs.w	r0, r0, rrx
  40a680:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40a684:	f104 0401 	add.w	r4, r4, #1
  40a688:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40a68c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40a690:	f080 809a 	bcs.w	40a7c8 <__adddf3+0x240>
  40a694:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40a698:	bf08      	it	eq
  40a69a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40a69e:	f150 0000 	adcs.w	r0, r0, #0
  40a6a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a6a6:	ea41 0105 	orr.w	r1, r1, r5
  40a6aa:	bd30      	pop	{r4, r5, pc}
  40a6ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40a6b0:	4140      	adcs	r0, r0
  40a6b2:	eb41 0101 	adc.w	r1, r1, r1
  40a6b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a6ba:	f1a4 0401 	sub.w	r4, r4, #1
  40a6be:	d1e9      	bne.n	40a694 <__adddf3+0x10c>
  40a6c0:	f091 0f00 	teq	r1, #0
  40a6c4:	bf04      	itt	eq
  40a6c6:	4601      	moveq	r1, r0
  40a6c8:	2000      	moveq	r0, #0
  40a6ca:	fab1 f381 	clz	r3, r1
  40a6ce:	bf08      	it	eq
  40a6d0:	3320      	addeq	r3, #32
  40a6d2:	f1a3 030b 	sub.w	r3, r3, #11
  40a6d6:	f1b3 0220 	subs.w	r2, r3, #32
  40a6da:	da0c      	bge.n	40a6f6 <__adddf3+0x16e>
  40a6dc:	320c      	adds	r2, #12
  40a6de:	dd08      	ble.n	40a6f2 <__adddf3+0x16a>
  40a6e0:	f102 0c14 	add.w	ip, r2, #20
  40a6e4:	f1c2 020c 	rsb	r2, r2, #12
  40a6e8:	fa01 f00c 	lsl.w	r0, r1, ip
  40a6ec:	fa21 f102 	lsr.w	r1, r1, r2
  40a6f0:	e00c      	b.n	40a70c <__adddf3+0x184>
  40a6f2:	f102 0214 	add.w	r2, r2, #20
  40a6f6:	bfd8      	it	le
  40a6f8:	f1c2 0c20 	rsble	ip, r2, #32
  40a6fc:	fa01 f102 	lsl.w	r1, r1, r2
  40a700:	fa20 fc0c 	lsr.w	ip, r0, ip
  40a704:	bfdc      	itt	le
  40a706:	ea41 010c 	orrle.w	r1, r1, ip
  40a70a:	4090      	lslle	r0, r2
  40a70c:	1ae4      	subs	r4, r4, r3
  40a70e:	bfa2      	ittt	ge
  40a710:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40a714:	4329      	orrge	r1, r5
  40a716:	bd30      	popge	{r4, r5, pc}
  40a718:	ea6f 0404 	mvn.w	r4, r4
  40a71c:	3c1f      	subs	r4, #31
  40a71e:	da1c      	bge.n	40a75a <__adddf3+0x1d2>
  40a720:	340c      	adds	r4, #12
  40a722:	dc0e      	bgt.n	40a742 <__adddf3+0x1ba>
  40a724:	f104 0414 	add.w	r4, r4, #20
  40a728:	f1c4 0220 	rsb	r2, r4, #32
  40a72c:	fa20 f004 	lsr.w	r0, r0, r4
  40a730:	fa01 f302 	lsl.w	r3, r1, r2
  40a734:	ea40 0003 	orr.w	r0, r0, r3
  40a738:	fa21 f304 	lsr.w	r3, r1, r4
  40a73c:	ea45 0103 	orr.w	r1, r5, r3
  40a740:	bd30      	pop	{r4, r5, pc}
  40a742:	f1c4 040c 	rsb	r4, r4, #12
  40a746:	f1c4 0220 	rsb	r2, r4, #32
  40a74a:	fa20 f002 	lsr.w	r0, r0, r2
  40a74e:	fa01 f304 	lsl.w	r3, r1, r4
  40a752:	ea40 0003 	orr.w	r0, r0, r3
  40a756:	4629      	mov	r1, r5
  40a758:	bd30      	pop	{r4, r5, pc}
  40a75a:	fa21 f004 	lsr.w	r0, r1, r4
  40a75e:	4629      	mov	r1, r5
  40a760:	bd30      	pop	{r4, r5, pc}
  40a762:	f094 0f00 	teq	r4, #0
  40a766:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40a76a:	bf06      	itte	eq
  40a76c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40a770:	3401      	addeq	r4, #1
  40a772:	3d01      	subne	r5, #1
  40a774:	e74e      	b.n	40a614 <__adddf3+0x8c>
  40a776:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a77a:	bf18      	it	ne
  40a77c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a780:	d029      	beq.n	40a7d6 <__adddf3+0x24e>
  40a782:	ea94 0f05 	teq	r4, r5
  40a786:	bf08      	it	eq
  40a788:	ea90 0f02 	teqeq	r0, r2
  40a78c:	d005      	beq.n	40a79a <__adddf3+0x212>
  40a78e:	ea54 0c00 	orrs.w	ip, r4, r0
  40a792:	bf04      	itt	eq
  40a794:	4619      	moveq	r1, r3
  40a796:	4610      	moveq	r0, r2
  40a798:	bd30      	pop	{r4, r5, pc}
  40a79a:	ea91 0f03 	teq	r1, r3
  40a79e:	bf1e      	ittt	ne
  40a7a0:	2100      	movne	r1, #0
  40a7a2:	2000      	movne	r0, #0
  40a7a4:	bd30      	popne	{r4, r5, pc}
  40a7a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40a7aa:	d105      	bne.n	40a7b8 <__adddf3+0x230>
  40a7ac:	0040      	lsls	r0, r0, #1
  40a7ae:	4149      	adcs	r1, r1
  40a7b0:	bf28      	it	cs
  40a7b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40a7b6:	bd30      	pop	{r4, r5, pc}
  40a7b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40a7bc:	bf3c      	itt	cc
  40a7be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40a7c2:	bd30      	popcc	{r4, r5, pc}
  40a7c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a7c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40a7cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40a7d0:	f04f 0000 	mov.w	r0, #0
  40a7d4:	bd30      	pop	{r4, r5, pc}
  40a7d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a7da:	bf1a      	itte	ne
  40a7dc:	4619      	movne	r1, r3
  40a7de:	4610      	movne	r0, r2
  40a7e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40a7e4:	bf1c      	itt	ne
  40a7e6:	460b      	movne	r3, r1
  40a7e8:	4602      	movne	r2, r0
  40a7ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40a7ee:	bf06      	itte	eq
  40a7f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40a7f4:	ea91 0f03 	teqeq	r1, r3
  40a7f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40a7fc:	bd30      	pop	{r4, r5, pc}
  40a7fe:	bf00      	nop

0040a800 <__aeabi_ui2d>:
  40a800:	f090 0f00 	teq	r0, #0
  40a804:	bf04      	itt	eq
  40a806:	2100      	moveq	r1, #0
  40a808:	4770      	bxeq	lr
  40a80a:	b530      	push	{r4, r5, lr}
  40a80c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a810:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a814:	f04f 0500 	mov.w	r5, #0
  40a818:	f04f 0100 	mov.w	r1, #0
  40a81c:	e750      	b.n	40a6c0 <__adddf3+0x138>
  40a81e:	bf00      	nop

0040a820 <__aeabi_i2d>:
  40a820:	f090 0f00 	teq	r0, #0
  40a824:	bf04      	itt	eq
  40a826:	2100      	moveq	r1, #0
  40a828:	4770      	bxeq	lr
  40a82a:	b530      	push	{r4, r5, lr}
  40a82c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a830:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a834:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40a838:	bf48      	it	mi
  40a83a:	4240      	negmi	r0, r0
  40a83c:	f04f 0100 	mov.w	r1, #0
  40a840:	e73e      	b.n	40a6c0 <__adddf3+0x138>
  40a842:	bf00      	nop

0040a844 <__aeabi_f2d>:
  40a844:	0042      	lsls	r2, r0, #1
  40a846:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40a84a:	ea4f 0131 	mov.w	r1, r1, rrx
  40a84e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40a852:	bf1f      	itttt	ne
  40a854:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40a858:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a85c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40a860:	4770      	bxne	lr
  40a862:	f092 0f00 	teq	r2, #0
  40a866:	bf14      	ite	ne
  40a868:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a86c:	4770      	bxeq	lr
  40a86e:	b530      	push	{r4, r5, lr}
  40a870:	f44f 7460 	mov.w	r4, #896	; 0x380
  40a874:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a878:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a87c:	e720      	b.n	40a6c0 <__adddf3+0x138>
  40a87e:	bf00      	nop

0040a880 <__aeabi_ul2d>:
  40a880:	ea50 0201 	orrs.w	r2, r0, r1
  40a884:	bf08      	it	eq
  40a886:	4770      	bxeq	lr
  40a888:	b530      	push	{r4, r5, lr}
  40a88a:	f04f 0500 	mov.w	r5, #0
  40a88e:	e00a      	b.n	40a8a6 <__aeabi_l2d+0x16>

0040a890 <__aeabi_l2d>:
  40a890:	ea50 0201 	orrs.w	r2, r0, r1
  40a894:	bf08      	it	eq
  40a896:	4770      	bxeq	lr
  40a898:	b530      	push	{r4, r5, lr}
  40a89a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40a89e:	d502      	bpl.n	40a8a6 <__aeabi_l2d+0x16>
  40a8a0:	4240      	negs	r0, r0
  40a8a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a8a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a8aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a8ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40a8b2:	f43f aedc 	beq.w	40a66e <__adddf3+0xe6>
  40a8b6:	f04f 0203 	mov.w	r2, #3
  40a8ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a8be:	bf18      	it	ne
  40a8c0:	3203      	addne	r2, #3
  40a8c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a8c6:	bf18      	it	ne
  40a8c8:	3203      	addne	r2, #3
  40a8ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40a8ce:	f1c2 0320 	rsb	r3, r2, #32
  40a8d2:	fa00 fc03 	lsl.w	ip, r0, r3
  40a8d6:	fa20 f002 	lsr.w	r0, r0, r2
  40a8da:	fa01 fe03 	lsl.w	lr, r1, r3
  40a8de:	ea40 000e 	orr.w	r0, r0, lr
  40a8e2:	fa21 f102 	lsr.w	r1, r1, r2
  40a8e6:	4414      	add	r4, r2
  40a8e8:	e6c1      	b.n	40a66e <__adddf3+0xe6>
  40a8ea:	bf00      	nop

0040a8ec <__aeabi_dmul>:
  40a8ec:	b570      	push	{r4, r5, r6, lr}
  40a8ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40a8f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40a8f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40a8fa:	bf1d      	ittte	ne
  40a8fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40a900:	ea94 0f0c 	teqne	r4, ip
  40a904:	ea95 0f0c 	teqne	r5, ip
  40a908:	f000 f8de 	bleq	40aac8 <__aeabi_dmul+0x1dc>
  40a90c:	442c      	add	r4, r5
  40a90e:	ea81 0603 	eor.w	r6, r1, r3
  40a912:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40a916:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40a91a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40a91e:	bf18      	it	ne
  40a920:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40a924:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a928:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40a92c:	d038      	beq.n	40a9a0 <__aeabi_dmul+0xb4>
  40a92e:	fba0 ce02 	umull	ip, lr, r0, r2
  40a932:	f04f 0500 	mov.w	r5, #0
  40a936:	fbe1 e502 	umlal	lr, r5, r1, r2
  40a93a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40a93e:	fbe0 e503 	umlal	lr, r5, r0, r3
  40a942:	f04f 0600 	mov.w	r6, #0
  40a946:	fbe1 5603 	umlal	r5, r6, r1, r3
  40a94a:	f09c 0f00 	teq	ip, #0
  40a94e:	bf18      	it	ne
  40a950:	f04e 0e01 	orrne.w	lr, lr, #1
  40a954:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40a958:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40a95c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40a960:	d204      	bcs.n	40a96c <__aeabi_dmul+0x80>
  40a962:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40a966:	416d      	adcs	r5, r5
  40a968:	eb46 0606 	adc.w	r6, r6, r6
  40a96c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40a970:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40a974:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40a978:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40a97c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40a980:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40a984:	bf88      	it	hi
  40a986:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40a98a:	d81e      	bhi.n	40a9ca <__aeabi_dmul+0xde>
  40a98c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40a990:	bf08      	it	eq
  40a992:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40a996:	f150 0000 	adcs.w	r0, r0, #0
  40a99a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a99e:	bd70      	pop	{r4, r5, r6, pc}
  40a9a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40a9a4:	ea46 0101 	orr.w	r1, r6, r1
  40a9a8:	ea40 0002 	orr.w	r0, r0, r2
  40a9ac:	ea81 0103 	eor.w	r1, r1, r3
  40a9b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40a9b4:	bfc2      	ittt	gt
  40a9b6:	ebd4 050c 	rsbsgt	r5, r4, ip
  40a9ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40a9be:	bd70      	popgt	{r4, r5, r6, pc}
  40a9c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a9c4:	f04f 0e00 	mov.w	lr, #0
  40a9c8:	3c01      	subs	r4, #1
  40a9ca:	f300 80ab 	bgt.w	40ab24 <__aeabi_dmul+0x238>
  40a9ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40a9d2:	bfde      	ittt	le
  40a9d4:	2000      	movle	r0, #0
  40a9d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40a9da:	bd70      	pople	{r4, r5, r6, pc}
  40a9dc:	f1c4 0400 	rsb	r4, r4, #0
  40a9e0:	3c20      	subs	r4, #32
  40a9e2:	da35      	bge.n	40aa50 <__aeabi_dmul+0x164>
  40a9e4:	340c      	adds	r4, #12
  40a9e6:	dc1b      	bgt.n	40aa20 <__aeabi_dmul+0x134>
  40a9e8:	f104 0414 	add.w	r4, r4, #20
  40a9ec:	f1c4 0520 	rsb	r5, r4, #32
  40a9f0:	fa00 f305 	lsl.w	r3, r0, r5
  40a9f4:	fa20 f004 	lsr.w	r0, r0, r4
  40a9f8:	fa01 f205 	lsl.w	r2, r1, r5
  40a9fc:	ea40 0002 	orr.w	r0, r0, r2
  40aa00:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40aa04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40aa08:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40aa0c:	fa21 f604 	lsr.w	r6, r1, r4
  40aa10:	eb42 0106 	adc.w	r1, r2, r6
  40aa14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40aa18:	bf08      	it	eq
  40aa1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40aa1e:	bd70      	pop	{r4, r5, r6, pc}
  40aa20:	f1c4 040c 	rsb	r4, r4, #12
  40aa24:	f1c4 0520 	rsb	r5, r4, #32
  40aa28:	fa00 f304 	lsl.w	r3, r0, r4
  40aa2c:	fa20 f005 	lsr.w	r0, r0, r5
  40aa30:	fa01 f204 	lsl.w	r2, r1, r4
  40aa34:	ea40 0002 	orr.w	r0, r0, r2
  40aa38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40aa3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40aa40:	f141 0100 	adc.w	r1, r1, #0
  40aa44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40aa48:	bf08      	it	eq
  40aa4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40aa4e:	bd70      	pop	{r4, r5, r6, pc}
  40aa50:	f1c4 0520 	rsb	r5, r4, #32
  40aa54:	fa00 f205 	lsl.w	r2, r0, r5
  40aa58:	ea4e 0e02 	orr.w	lr, lr, r2
  40aa5c:	fa20 f304 	lsr.w	r3, r0, r4
  40aa60:	fa01 f205 	lsl.w	r2, r1, r5
  40aa64:	ea43 0302 	orr.w	r3, r3, r2
  40aa68:	fa21 f004 	lsr.w	r0, r1, r4
  40aa6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40aa70:	fa21 f204 	lsr.w	r2, r1, r4
  40aa74:	ea20 0002 	bic.w	r0, r0, r2
  40aa78:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40aa7c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40aa80:	bf08      	it	eq
  40aa82:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40aa86:	bd70      	pop	{r4, r5, r6, pc}
  40aa88:	f094 0f00 	teq	r4, #0
  40aa8c:	d10f      	bne.n	40aaae <__aeabi_dmul+0x1c2>
  40aa8e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40aa92:	0040      	lsls	r0, r0, #1
  40aa94:	eb41 0101 	adc.w	r1, r1, r1
  40aa98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40aa9c:	bf08      	it	eq
  40aa9e:	3c01      	subeq	r4, #1
  40aaa0:	d0f7      	beq.n	40aa92 <__aeabi_dmul+0x1a6>
  40aaa2:	ea41 0106 	orr.w	r1, r1, r6
  40aaa6:	f095 0f00 	teq	r5, #0
  40aaaa:	bf18      	it	ne
  40aaac:	4770      	bxne	lr
  40aaae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40aab2:	0052      	lsls	r2, r2, #1
  40aab4:	eb43 0303 	adc.w	r3, r3, r3
  40aab8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40aabc:	bf08      	it	eq
  40aabe:	3d01      	subeq	r5, #1
  40aac0:	d0f7      	beq.n	40aab2 <__aeabi_dmul+0x1c6>
  40aac2:	ea43 0306 	orr.w	r3, r3, r6
  40aac6:	4770      	bx	lr
  40aac8:	ea94 0f0c 	teq	r4, ip
  40aacc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40aad0:	bf18      	it	ne
  40aad2:	ea95 0f0c 	teqne	r5, ip
  40aad6:	d00c      	beq.n	40aaf2 <__aeabi_dmul+0x206>
  40aad8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40aadc:	bf18      	it	ne
  40aade:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40aae2:	d1d1      	bne.n	40aa88 <__aeabi_dmul+0x19c>
  40aae4:	ea81 0103 	eor.w	r1, r1, r3
  40aae8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40aaec:	f04f 0000 	mov.w	r0, #0
  40aaf0:	bd70      	pop	{r4, r5, r6, pc}
  40aaf2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40aaf6:	bf06      	itte	eq
  40aaf8:	4610      	moveq	r0, r2
  40aafa:	4619      	moveq	r1, r3
  40aafc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40ab00:	d019      	beq.n	40ab36 <__aeabi_dmul+0x24a>
  40ab02:	ea94 0f0c 	teq	r4, ip
  40ab06:	d102      	bne.n	40ab0e <__aeabi_dmul+0x222>
  40ab08:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40ab0c:	d113      	bne.n	40ab36 <__aeabi_dmul+0x24a>
  40ab0e:	ea95 0f0c 	teq	r5, ip
  40ab12:	d105      	bne.n	40ab20 <__aeabi_dmul+0x234>
  40ab14:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40ab18:	bf1c      	itt	ne
  40ab1a:	4610      	movne	r0, r2
  40ab1c:	4619      	movne	r1, r3
  40ab1e:	d10a      	bne.n	40ab36 <__aeabi_dmul+0x24a>
  40ab20:	ea81 0103 	eor.w	r1, r1, r3
  40ab24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40ab28:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40ab2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40ab30:	f04f 0000 	mov.w	r0, #0
  40ab34:	bd70      	pop	{r4, r5, r6, pc}
  40ab36:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40ab3a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40ab3e:	bd70      	pop	{r4, r5, r6, pc}

0040ab40 <__aeabi_ddiv>:
  40ab40:	b570      	push	{r4, r5, r6, lr}
  40ab42:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40ab46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40ab4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40ab4e:	bf1d      	ittte	ne
  40ab50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40ab54:	ea94 0f0c 	teqne	r4, ip
  40ab58:	ea95 0f0c 	teqne	r5, ip
  40ab5c:	f000 f8a7 	bleq	40acae <__aeabi_ddiv+0x16e>
  40ab60:	eba4 0405 	sub.w	r4, r4, r5
  40ab64:	ea81 0e03 	eor.w	lr, r1, r3
  40ab68:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40ab6c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40ab70:	f000 8088 	beq.w	40ac84 <__aeabi_ddiv+0x144>
  40ab74:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40ab78:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40ab7c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40ab80:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40ab84:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40ab88:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40ab8c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40ab90:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40ab94:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40ab98:	429d      	cmp	r5, r3
  40ab9a:	bf08      	it	eq
  40ab9c:	4296      	cmpeq	r6, r2
  40ab9e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40aba2:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40aba6:	d202      	bcs.n	40abae <__aeabi_ddiv+0x6e>
  40aba8:	085b      	lsrs	r3, r3, #1
  40abaa:	ea4f 0232 	mov.w	r2, r2, rrx
  40abae:	1ab6      	subs	r6, r6, r2
  40abb0:	eb65 0503 	sbc.w	r5, r5, r3
  40abb4:	085b      	lsrs	r3, r3, #1
  40abb6:	ea4f 0232 	mov.w	r2, r2, rrx
  40abba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40abbe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40abc2:	ebb6 0e02 	subs.w	lr, r6, r2
  40abc6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40abca:	bf22      	ittt	cs
  40abcc:	1ab6      	subcs	r6, r6, r2
  40abce:	4675      	movcs	r5, lr
  40abd0:	ea40 000c 	orrcs.w	r0, r0, ip
  40abd4:	085b      	lsrs	r3, r3, #1
  40abd6:	ea4f 0232 	mov.w	r2, r2, rrx
  40abda:	ebb6 0e02 	subs.w	lr, r6, r2
  40abde:	eb75 0e03 	sbcs.w	lr, r5, r3
  40abe2:	bf22      	ittt	cs
  40abe4:	1ab6      	subcs	r6, r6, r2
  40abe6:	4675      	movcs	r5, lr
  40abe8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40abec:	085b      	lsrs	r3, r3, #1
  40abee:	ea4f 0232 	mov.w	r2, r2, rrx
  40abf2:	ebb6 0e02 	subs.w	lr, r6, r2
  40abf6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40abfa:	bf22      	ittt	cs
  40abfc:	1ab6      	subcs	r6, r6, r2
  40abfe:	4675      	movcs	r5, lr
  40ac00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40ac04:	085b      	lsrs	r3, r3, #1
  40ac06:	ea4f 0232 	mov.w	r2, r2, rrx
  40ac0a:	ebb6 0e02 	subs.w	lr, r6, r2
  40ac0e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40ac12:	bf22      	ittt	cs
  40ac14:	1ab6      	subcs	r6, r6, r2
  40ac16:	4675      	movcs	r5, lr
  40ac18:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40ac1c:	ea55 0e06 	orrs.w	lr, r5, r6
  40ac20:	d018      	beq.n	40ac54 <__aeabi_ddiv+0x114>
  40ac22:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40ac26:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40ac2a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40ac2e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40ac32:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40ac36:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40ac3a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40ac3e:	d1c0      	bne.n	40abc2 <__aeabi_ddiv+0x82>
  40ac40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40ac44:	d10b      	bne.n	40ac5e <__aeabi_ddiv+0x11e>
  40ac46:	ea41 0100 	orr.w	r1, r1, r0
  40ac4a:	f04f 0000 	mov.w	r0, #0
  40ac4e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40ac52:	e7b6      	b.n	40abc2 <__aeabi_ddiv+0x82>
  40ac54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40ac58:	bf04      	itt	eq
  40ac5a:	4301      	orreq	r1, r0
  40ac5c:	2000      	moveq	r0, #0
  40ac5e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40ac62:	bf88      	it	hi
  40ac64:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40ac68:	f63f aeaf 	bhi.w	40a9ca <__aeabi_dmul+0xde>
  40ac6c:	ebb5 0c03 	subs.w	ip, r5, r3
  40ac70:	bf04      	itt	eq
  40ac72:	ebb6 0c02 	subseq.w	ip, r6, r2
  40ac76:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40ac7a:	f150 0000 	adcs.w	r0, r0, #0
  40ac7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40ac82:	bd70      	pop	{r4, r5, r6, pc}
  40ac84:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40ac88:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40ac8c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40ac90:	bfc2      	ittt	gt
  40ac92:	ebd4 050c 	rsbsgt	r5, r4, ip
  40ac96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40ac9a:	bd70      	popgt	{r4, r5, r6, pc}
  40ac9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40aca0:	f04f 0e00 	mov.w	lr, #0
  40aca4:	3c01      	subs	r4, #1
  40aca6:	e690      	b.n	40a9ca <__aeabi_dmul+0xde>
  40aca8:	ea45 0e06 	orr.w	lr, r5, r6
  40acac:	e68d      	b.n	40a9ca <__aeabi_dmul+0xde>
  40acae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40acb2:	ea94 0f0c 	teq	r4, ip
  40acb6:	bf08      	it	eq
  40acb8:	ea95 0f0c 	teqeq	r5, ip
  40acbc:	f43f af3b 	beq.w	40ab36 <__aeabi_dmul+0x24a>
  40acc0:	ea94 0f0c 	teq	r4, ip
  40acc4:	d10a      	bne.n	40acdc <__aeabi_ddiv+0x19c>
  40acc6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40acca:	f47f af34 	bne.w	40ab36 <__aeabi_dmul+0x24a>
  40acce:	ea95 0f0c 	teq	r5, ip
  40acd2:	f47f af25 	bne.w	40ab20 <__aeabi_dmul+0x234>
  40acd6:	4610      	mov	r0, r2
  40acd8:	4619      	mov	r1, r3
  40acda:	e72c      	b.n	40ab36 <__aeabi_dmul+0x24a>
  40acdc:	ea95 0f0c 	teq	r5, ip
  40ace0:	d106      	bne.n	40acf0 <__aeabi_ddiv+0x1b0>
  40ace2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40ace6:	f43f aefd 	beq.w	40aae4 <__aeabi_dmul+0x1f8>
  40acea:	4610      	mov	r0, r2
  40acec:	4619      	mov	r1, r3
  40acee:	e722      	b.n	40ab36 <__aeabi_dmul+0x24a>
  40acf0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40acf4:	bf18      	it	ne
  40acf6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40acfa:	f47f aec5 	bne.w	40aa88 <__aeabi_dmul+0x19c>
  40acfe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40ad02:	f47f af0d 	bne.w	40ab20 <__aeabi_dmul+0x234>
  40ad06:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40ad0a:	f47f aeeb 	bne.w	40aae4 <__aeabi_dmul+0x1f8>
  40ad0e:	e712      	b.n	40ab36 <__aeabi_dmul+0x24a>

0040ad10 <__gedf2>:
  40ad10:	f04f 3cff 	mov.w	ip, #4294967295
  40ad14:	e006      	b.n	40ad24 <__cmpdf2+0x4>
  40ad16:	bf00      	nop

0040ad18 <__ledf2>:
  40ad18:	f04f 0c01 	mov.w	ip, #1
  40ad1c:	e002      	b.n	40ad24 <__cmpdf2+0x4>
  40ad1e:	bf00      	nop

0040ad20 <__cmpdf2>:
  40ad20:	f04f 0c01 	mov.w	ip, #1
  40ad24:	f84d cd04 	str.w	ip, [sp, #-4]!
  40ad28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40ad2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ad30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40ad34:	bf18      	it	ne
  40ad36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40ad3a:	d01b      	beq.n	40ad74 <__cmpdf2+0x54>
  40ad3c:	b001      	add	sp, #4
  40ad3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40ad42:	bf0c      	ite	eq
  40ad44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40ad48:	ea91 0f03 	teqne	r1, r3
  40ad4c:	bf02      	ittt	eq
  40ad4e:	ea90 0f02 	teqeq	r0, r2
  40ad52:	2000      	moveq	r0, #0
  40ad54:	4770      	bxeq	lr
  40ad56:	f110 0f00 	cmn.w	r0, #0
  40ad5a:	ea91 0f03 	teq	r1, r3
  40ad5e:	bf58      	it	pl
  40ad60:	4299      	cmppl	r1, r3
  40ad62:	bf08      	it	eq
  40ad64:	4290      	cmpeq	r0, r2
  40ad66:	bf2c      	ite	cs
  40ad68:	17d8      	asrcs	r0, r3, #31
  40ad6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40ad6e:	f040 0001 	orr.w	r0, r0, #1
  40ad72:	4770      	bx	lr
  40ad74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40ad78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ad7c:	d102      	bne.n	40ad84 <__cmpdf2+0x64>
  40ad7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40ad82:	d107      	bne.n	40ad94 <__cmpdf2+0x74>
  40ad84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40ad88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ad8c:	d1d6      	bne.n	40ad3c <__cmpdf2+0x1c>
  40ad8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40ad92:	d0d3      	beq.n	40ad3c <__cmpdf2+0x1c>
  40ad94:	f85d 0b04 	ldr.w	r0, [sp], #4
  40ad98:	4770      	bx	lr
  40ad9a:	bf00      	nop

0040ad9c <__aeabi_cdrcmple>:
  40ad9c:	4684      	mov	ip, r0
  40ad9e:	4610      	mov	r0, r2
  40ada0:	4662      	mov	r2, ip
  40ada2:	468c      	mov	ip, r1
  40ada4:	4619      	mov	r1, r3
  40ada6:	4663      	mov	r3, ip
  40ada8:	e000      	b.n	40adac <__aeabi_cdcmpeq>
  40adaa:	bf00      	nop

0040adac <__aeabi_cdcmpeq>:
  40adac:	b501      	push	{r0, lr}
  40adae:	f7ff ffb7 	bl	40ad20 <__cmpdf2>
  40adb2:	2800      	cmp	r0, #0
  40adb4:	bf48      	it	mi
  40adb6:	f110 0f00 	cmnmi.w	r0, #0
  40adba:	bd01      	pop	{r0, pc}

0040adbc <__aeabi_dcmpeq>:
  40adbc:	f84d ed08 	str.w	lr, [sp, #-8]!
  40adc0:	f7ff fff4 	bl	40adac <__aeabi_cdcmpeq>
  40adc4:	bf0c      	ite	eq
  40adc6:	2001      	moveq	r0, #1
  40adc8:	2000      	movne	r0, #0
  40adca:	f85d fb08 	ldr.w	pc, [sp], #8
  40adce:	bf00      	nop

0040add0 <__aeabi_dcmplt>:
  40add0:	f84d ed08 	str.w	lr, [sp, #-8]!
  40add4:	f7ff ffea 	bl	40adac <__aeabi_cdcmpeq>
  40add8:	bf34      	ite	cc
  40adda:	2001      	movcc	r0, #1
  40addc:	2000      	movcs	r0, #0
  40adde:	f85d fb08 	ldr.w	pc, [sp], #8
  40ade2:	bf00      	nop

0040ade4 <__aeabi_dcmple>:
  40ade4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ade8:	f7ff ffe0 	bl	40adac <__aeabi_cdcmpeq>
  40adec:	bf94      	ite	ls
  40adee:	2001      	movls	r0, #1
  40adf0:	2000      	movhi	r0, #0
  40adf2:	f85d fb08 	ldr.w	pc, [sp], #8
  40adf6:	bf00      	nop

0040adf8 <__aeabi_dcmpge>:
  40adf8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40adfc:	f7ff ffce 	bl	40ad9c <__aeabi_cdrcmple>
  40ae00:	bf94      	ite	ls
  40ae02:	2001      	movls	r0, #1
  40ae04:	2000      	movhi	r0, #0
  40ae06:	f85d fb08 	ldr.w	pc, [sp], #8
  40ae0a:	bf00      	nop

0040ae0c <__aeabi_dcmpgt>:
  40ae0c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ae10:	f7ff ffc4 	bl	40ad9c <__aeabi_cdrcmple>
  40ae14:	bf34      	ite	cc
  40ae16:	2001      	movcc	r0, #1
  40ae18:	2000      	movcs	r0, #0
  40ae1a:	f85d fb08 	ldr.w	pc, [sp], #8
  40ae1e:	bf00      	nop

0040ae20 <__aeabi_dcmpun>:
  40ae20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40ae24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ae28:	d102      	bne.n	40ae30 <__aeabi_dcmpun+0x10>
  40ae2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40ae2e:	d10a      	bne.n	40ae46 <__aeabi_dcmpun+0x26>
  40ae30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40ae34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ae38:	d102      	bne.n	40ae40 <__aeabi_dcmpun+0x20>
  40ae3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40ae3e:	d102      	bne.n	40ae46 <__aeabi_dcmpun+0x26>
  40ae40:	f04f 0000 	mov.w	r0, #0
  40ae44:	4770      	bx	lr
  40ae46:	f04f 0001 	mov.w	r0, #1
  40ae4a:	4770      	bx	lr

0040ae4c <__aeabi_d2iz>:
  40ae4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40ae50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40ae54:	d215      	bcs.n	40ae82 <__aeabi_d2iz+0x36>
  40ae56:	d511      	bpl.n	40ae7c <__aeabi_d2iz+0x30>
  40ae58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40ae5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40ae60:	d912      	bls.n	40ae88 <__aeabi_d2iz+0x3c>
  40ae62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40ae66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40ae6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40ae6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40ae72:	fa23 f002 	lsr.w	r0, r3, r2
  40ae76:	bf18      	it	ne
  40ae78:	4240      	negne	r0, r0
  40ae7a:	4770      	bx	lr
  40ae7c:	f04f 0000 	mov.w	r0, #0
  40ae80:	4770      	bx	lr
  40ae82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40ae86:	d105      	bne.n	40ae94 <__aeabi_d2iz+0x48>
  40ae88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40ae8c:	bf08      	it	eq
  40ae8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40ae92:	4770      	bx	lr
  40ae94:	f04f 0000 	mov.w	r0, #0
  40ae98:	4770      	bx	lr
  40ae9a:	bf00      	nop

0040ae9c <__aeabi_d2f>:
  40ae9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40aea0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  40aea4:	bf24      	itt	cs
  40aea6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40aeaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40aeae:	d90d      	bls.n	40aecc <__aeabi_d2f+0x30>
  40aeb0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40aeb4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  40aeb8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  40aebc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  40aec0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  40aec4:	bf08      	it	eq
  40aec6:	f020 0001 	biceq.w	r0, r0, #1
  40aeca:	4770      	bx	lr
  40aecc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  40aed0:	d121      	bne.n	40af16 <__aeabi_d2f+0x7a>
  40aed2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40aed6:	bfbc      	itt	lt
  40aed8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  40aedc:	4770      	bxlt	lr
  40aede:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40aee2:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40aee6:	f1c2 0218 	rsb	r2, r2, #24
  40aeea:	f1c2 0c20 	rsb	ip, r2, #32
  40aeee:	fa10 f30c 	lsls.w	r3, r0, ip
  40aef2:	fa20 f002 	lsr.w	r0, r0, r2
  40aef6:	bf18      	it	ne
  40aef8:	f040 0001 	orrne.w	r0, r0, #1
  40aefc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40af00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  40af04:	fa03 fc0c 	lsl.w	ip, r3, ip
  40af08:	ea40 000c 	orr.w	r0, r0, ip
  40af0c:	fa23 f302 	lsr.w	r3, r3, r2
  40af10:	ea4f 0343 	mov.w	r3, r3, lsl #1
  40af14:	e7cc      	b.n	40aeb0 <__aeabi_d2f+0x14>
  40af16:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40af1a:	d107      	bne.n	40af2c <__aeabi_d2f+0x90>
  40af1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  40af20:	bf1e      	ittt	ne
  40af22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40af26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40af2a:	4770      	bxne	lr
  40af2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  40af30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40af34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40af38:	4770      	bx	lr
  40af3a:	bf00      	nop

0040af3c <__aeabi_frsub>:
  40af3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  40af40:	e002      	b.n	40af48 <__addsf3>
  40af42:	bf00      	nop

0040af44 <__aeabi_fsub>:
  40af44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0040af48 <__addsf3>:
  40af48:	0042      	lsls	r2, r0, #1
  40af4a:	bf1f      	itttt	ne
  40af4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  40af50:	ea92 0f03 	teqne	r2, r3
  40af54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  40af58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40af5c:	d06a      	beq.n	40b034 <__addsf3+0xec>
  40af5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40af62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  40af66:	bfc1      	itttt	gt
  40af68:	18d2      	addgt	r2, r2, r3
  40af6a:	4041      	eorgt	r1, r0
  40af6c:	4048      	eorgt	r0, r1
  40af6e:	4041      	eorgt	r1, r0
  40af70:	bfb8      	it	lt
  40af72:	425b      	neglt	r3, r3
  40af74:	2b19      	cmp	r3, #25
  40af76:	bf88      	it	hi
  40af78:	4770      	bxhi	lr
  40af7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  40af7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40af82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  40af86:	bf18      	it	ne
  40af88:	4240      	negne	r0, r0
  40af8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40af8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  40af92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  40af96:	bf18      	it	ne
  40af98:	4249      	negne	r1, r1
  40af9a:	ea92 0f03 	teq	r2, r3
  40af9e:	d03f      	beq.n	40b020 <__addsf3+0xd8>
  40afa0:	f1a2 0201 	sub.w	r2, r2, #1
  40afa4:	fa41 fc03 	asr.w	ip, r1, r3
  40afa8:	eb10 000c 	adds.w	r0, r0, ip
  40afac:	f1c3 0320 	rsb	r3, r3, #32
  40afb0:	fa01 f103 	lsl.w	r1, r1, r3
  40afb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40afb8:	d502      	bpl.n	40afc0 <__addsf3+0x78>
  40afba:	4249      	negs	r1, r1
  40afbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  40afc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  40afc4:	d313      	bcc.n	40afee <__addsf3+0xa6>
  40afc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  40afca:	d306      	bcc.n	40afda <__addsf3+0x92>
  40afcc:	0840      	lsrs	r0, r0, #1
  40afce:	ea4f 0131 	mov.w	r1, r1, rrx
  40afd2:	f102 0201 	add.w	r2, r2, #1
  40afd6:	2afe      	cmp	r2, #254	; 0xfe
  40afd8:	d251      	bcs.n	40b07e <__addsf3+0x136>
  40afda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  40afde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40afe2:	bf08      	it	eq
  40afe4:	f020 0001 	biceq.w	r0, r0, #1
  40afe8:	ea40 0003 	orr.w	r0, r0, r3
  40afec:	4770      	bx	lr
  40afee:	0049      	lsls	r1, r1, #1
  40aff0:	eb40 0000 	adc.w	r0, r0, r0
  40aff4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  40aff8:	f1a2 0201 	sub.w	r2, r2, #1
  40affc:	d1ed      	bne.n	40afda <__addsf3+0x92>
  40affe:	fab0 fc80 	clz	ip, r0
  40b002:	f1ac 0c08 	sub.w	ip, ip, #8
  40b006:	ebb2 020c 	subs.w	r2, r2, ip
  40b00a:	fa00 f00c 	lsl.w	r0, r0, ip
  40b00e:	bfaa      	itet	ge
  40b010:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  40b014:	4252      	neglt	r2, r2
  40b016:	4318      	orrge	r0, r3
  40b018:	bfbc      	itt	lt
  40b01a:	40d0      	lsrlt	r0, r2
  40b01c:	4318      	orrlt	r0, r3
  40b01e:	4770      	bx	lr
  40b020:	f092 0f00 	teq	r2, #0
  40b024:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  40b028:	bf06      	itte	eq
  40b02a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  40b02e:	3201      	addeq	r2, #1
  40b030:	3b01      	subne	r3, #1
  40b032:	e7b5      	b.n	40afa0 <__addsf3+0x58>
  40b034:	ea4f 0341 	mov.w	r3, r1, lsl #1
  40b038:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  40b03c:	bf18      	it	ne
  40b03e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40b042:	d021      	beq.n	40b088 <__addsf3+0x140>
  40b044:	ea92 0f03 	teq	r2, r3
  40b048:	d004      	beq.n	40b054 <__addsf3+0x10c>
  40b04a:	f092 0f00 	teq	r2, #0
  40b04e:	bf08      	it	eq
  40b050:	4608      	moveq	r0, r1
  40b052:	4770      	bx	lr
  40b054:	ea90 0f01 	teq	r0, r1
  40b058:	bf1c      	itt	ne
  40b05a:	2000      	movne	r0, #0
  40b05c:	4770      	bxne	lr
  40b05e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  40b062:	d104      	bne.n	40b06e <__addsf3+0x126>
  40b064:	0040      	lsls	r0, r0, #1
  40b066:	bf28      	it	cs
  40b068:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  40b06c:	4770      	bx	lr
  40b06e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  40b072:	bf3c      	itt	cc
  40b074:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  40b078:	4770      	bxcc	lr
  40b07a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40b07e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  40b082:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40b086:	4770      	bx	lr
  40b088:	ea7f 6222 	mvns.w	r2, r2, asr #24
  40b08c:	bf16      	itet	ne
  40b08e:	4608      	movne	r0, r1
  40b090:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  40b094:	4601      	movne	r1, r0
  40b096:	0242      	lsls	r2, r0, #9
  40b098:	bf06      	itte	eq
  40b09a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  40b09e:	ea90 0f01 	teqeq	r0, r1
  40b0a2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  40b0a6:	4770      	bx	lr

0040b0a8 <__aeabi_ui2f>:
  40b0a8:	f04f 0300 	mov.w	r3, #0
  40b0ac:	e004      	b.n	40b0b8 <__aeabi_i2f+0x8>
  40b0ae:	bf00      	nop

0040b0b0 <__aeabi_i2f>:
  40b0b0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  40b0b4:	bf48      	it	mi
  40b0b6:	4240      	negmi	r0, r0
  40b0b8:	ea5f 0c00 	movs.w	ip, r0
  40b0bc:	bf08      	it	eq
  40b0be:	4770      	bxeq	lr
  40b0c0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  40b0c4:	4601      	mov	r1, r0
  40b0c6:	f04f 0000 	mov.w	r0, #0
  40b0ca:	e01c      	b.n	40b106 <__aeabi_l2f+0x2a>

0040b0cc <__aeabi_ul2f>:
  40b0cc:	ea50 0201 	orrs.w	r2, r0, r1
  40b0d0:	bf08      	it	eq
  40b0d2:	4770      	bxeq	lr
  40b0d4:	f04f 0300 	mov.w	r3, #0
  40b0d8:	e00a      	b.n	40b0f0 <__aeabi_l2f+0x14>
  40b0da:	bf00      	nop

0040b0dc <__aeabi_l2f>:
  40b0dc:	ea50 0201 	orrs.w	r2, r0, r1
  40b0e0:	bf08      	it	eq
  40b0e2:	4770      	bxeq	lr
  40b0e4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  40b0e8:	d502      	bpl.n	40b0f0 <__aeabi_l2f+0x14>
  40b0ea:	4240      	negs	r0, r0
  40b0ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40b0f0:	ea5f 0c01 	movs.w	ip, r1
  40b0f4:	bf02      	ittt	eq
  40b0f6:	4684      	moveq	ip, r0
  40b0f8:	4601      	moveq	r1, r0
  40b0fa:	2000      	moveq	r0, #0
  40b0fc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  40b100:	bf08      	it	eq
  40b102:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  40b106:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  40b10a:	fabc f28c 	clz	r2, ip
  40b10e:	3a08      	subs	r2, #8
  40b110:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  40b114:	db10      	blt.n	40b138 <__aeabi_l2f+0x5c>
  40b116:	fa01 fc02 	lsl.w	ip, r1, r2
  40b11a:	4463      	add	r3, ip
  40b11c:	fa00 fc02 	lsl.w	ip, r0, r2
  40b120:	f1c2 0220 	rsb	r2, r2, #32
  40b124:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40b128:	fa20 f202 	lsr.w	r2, r0, r2
  40b12c:	eb43 0002 	adc.w	r0, r3, r2
  40b130:	bf08      	it	eq
  40b132:	f020 0001 	biceq.w	r0, r0, #1
  40b136:	4770      	bx	lr
  40b138:	f102 0220 	add.w	r2, r2, #32
  40b13c:	fa01 fc02 	lsl.w	ip, r1, r2
  40b140:	f1c2 0220 	rsb	r2, r2, #32
  40b144:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  40b148:	fa21 f202 	lsr.w	r2, r1, r2
  40b14c:	eb43 0002 	adc.w	r0, r3, r2
  40b150:	bf08      	it	eq
  40b152:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  40b156:	4770      	bx	lr

0040b158 <__aeabi_fmul>:
  40b158:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40b15c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  40b160:	bf1e      	ittt	ne
  40b162:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40b166:	ea92 0f0c 	teqne	r2, ip
  40b16a:	ea93 0f0c 	teqne	r3, ip
  40b16e:	d06f      	beq.n	40b250 <__aeabi_fmul+0xf8>
  40b170:	441a      	add	r2, r3
  40b172:	ea80 0c01 	eor.w	ip, r0, r1
  40b176:	0240      	lsls	r0, r0, #9
  40b178:	bf18      	it	ne
  40b17a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  40b17e:	d01e      	beq.n	40b1be <__aeabi_fmul+0x66>
  40b180:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  40b184:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  40b188:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  40b18c:	fba0 3101 	umull	r3, r1, r0, r1
  40b190:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  40b194:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  40b198:	bf3e      	ittt	cc
  40b19a:	0049      	lslcc	r1, r1, #1
  40b19c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  40b1a0:	005b      	lslcc	r3, r3, #1
  40b1a2:	ea40 0001 	orr.w	r0, r0, r1
  40b1a6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  40b1aa:	2afd      	cmp	r2, #253	; 0xfd
  40b1ac:	d81d      	bhi.n	40b1ea <__aeabi_fmul+0x92>
  40b1ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  40b1b2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40b1b6:	bf08      	it	eq
  40b1b8:	f020 0001 	biceq.w	r0, r0, #1
  40b1bc:	4770      	bx	lr
  40b1be:	f090 0f00 	teq	r0, #0
  40b1c2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  40b1c6:	bf08      	it	eq
  40b1c8:	0249      	lsleq	r1, r1, #9
  40b1ca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  40b1ce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  40b1d2:	3a7f      	subs	r2, #127	; 0x7f
  40b1d4:	bfc2      	ittt	gt
  40b1d6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40b1da:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  40b1de:	4770      	bxgt	lr
  40b1e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40b1e4:	f04f 0300 	mov.w	r3, #0
  40b1e8:	3a01      	subs	r2, #1
  40b1ea:	dc5d      	bgt.n	40b2a8 <__aeabi_fmul+0x150>
  40b1ec:	f112 0f19 	cmn.w	r2, #25
  40b1f0:	bfdc      	itt	le
  40b1f2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  40b1f6:	4770      	bxle	lr
  40b1f8:	f1c2 0200 	rsb	r2, r2, #0
  40b1fc:	0041      	lsls	r1, r0, #1
  40b1fe:	fa21 f102 	lsr.w	r1, r1, r2
  40b202:	f1c2 0220 	rsb	r2, r2, #32
  40b206:	fa00 fc02 	lsl.w	ip, r0, r2
  40b20a:	ea5f 0031 	movs.w	r0, r1, rrx
  40b20e:	f140 0000 	adc.w	r0, r0, #0
  40b212:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  40b216:	bf08      	it	eq
  40b218:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  40b21c:	4770      	bx	lr
  40b21e:	f092 0f00 	teq	r2, #0
  40b222:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  40b226:	bf02      	ittt	eq
  40b228:	0040      	lsleq	r0, r0, #1
  40b22a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  40b22e:	3a01      	subeq	r2, #1
  40b230:	d0f9      	beq.n	40b226 <__aeabi_fmul+0xce>
  40b232:	ea40 000c 	orr.w	r0, r0, ip
  40b236:	f093 0f00 	teq	r3, #0
  40b23a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40b23e:	bf02      	ittt	eq
  40b240:	0049      	lsleq	r1, r1, #1
  40b242:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  40b246:	3b01      	subeq	r3, #1
  40b248:	d0f9      	beq.n	40b23e <__aeabi_fmul+0xe6>
  40b24a:	ea41 010c 	orr.w	r1, r1, ip
  40b24e:	e78f      	b.n	40b170 <__aeabi_fmul+0x18>
  40b250:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  40b254:	ea92 0f0c 	teq	r2, ip
  40b258:	bf18      	it	ne
  40b25a:	ea93 0f0c 	teqne	r3, ip
  40b25e:	d00a      	beq.n	40b276 <__aeabi_fmul+0x11e>
  40b260:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  40b264:	bf18      	it	ne
  40b266:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  40b26a:	d1d8      	bne.n	40b21e <__aeabi_fmul+0xc6>
  40b26c:	ea80 0001 	eor.w	r0, r0, r1
  40b270:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  40b274:	4770      	bx	lr
  40b276:	f090 0f00 	teq	r0, #0
  40b27a:	bf17      	itett	ne
  40b27c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  40b280:	4608      	moveq	r0, r1
  40b282:	f091 0f00 	teqne	r1, #0
  40b286:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  40b28a:	d014      	beq.n	40b2b6 <__aeabi_fmul+0x15e>
  40b28c:	ea92 0f0c 	teq	r2, ip
  40b290:	d101      	bne.n	40b296 <__aeabi_fmul+0x13e>
  40b292:	0242      	lsls	r2, r0, #9
  40b294:	d10f      	bne.n	40b2b6 <__aeabi_fmul+0x15e>
  40b296:	ea93 0f0c 	teq	r3, ip
  40b29a:	d103      	bne.n	40b2a4 <__aeabi_fmul+0x14c>
  40b29c:	024b      	lsls	r3, r1, #9
  40b29e:	bf18      	it	ne
  40b2a0:	4608      	movne	r0, r1
  40b2a2:	d108      	bne.n	40b2b6 <__aeabi_fmul+0x15e>
  40b2a4:	ea80 0001 	eor.w	r0, r0, r1
  40b2a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  40b2ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40b2b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40b2b4:	4770      	bx	lr
  40b2b6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40b2ba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  40b2be:	4770      	bx	lr

0040b2c0 <__aeabi_fdiv>:
  40b2c0:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40b2c4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  40b2c8:	bf1e      	ittt	ne
  40b2ca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40b2ce:	ea92 0f0c 	teqne	r2, ip
  40b2d2:	ea93 0f0c 	teqne	r3, ip
  40b2d6:	d069      	beq.n	40b3ac <__aeabi_fdiv+0xec>
  40b2d8:	eba2 0203 	sub.w	r2, r2, r3
  40b2dc:	ea80 0c01 	eor.w	ip, r0, r1
  40b2e0:	0249      	lsls	r1, r1, #9
  40b2e2:	ea4f 2040 	mov.w	r0, r0, lsl #9
  40b2e6:	d037      	beq.n	40b358 <__aeabi_fdiv+0x98>
  40b2e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40b2ec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  40b2f0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  40b2f4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  40b2f8:	428b      	cmp	r3, r1
  40b2fa:	bf38      	it	cc
  40b2fc:	005b      	lslcc	r3, r3, #1
  40b2fe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  40b302:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  40b306:	428b      	cmp	r3, r1
  40b308:	bf24      	itt	cs
  40b30a:	1a5b      	subcs	r3, r3, r1
  40b30c:	ea40 000c 	orrcs.w	r0, r0, ip
  40b310:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  40b314:	bf24      	itt	cs
  40b316:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  40b31a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40b31e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  40b322:	bf24      	itt	cs
  40b324:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  40b328:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40b32c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  40b330:	bf24      	itt	cs
  40b332:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  40b336:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40b33a:	011b      	lsls	r3, r3, #4
  40b33c:	bf18      	it	ne
  40b33e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  40b342:	d1e0      	bne.n	40b306 <__aeabi_fdiv+0x46>
  40b344:	2afd      	cmp	r2, #253	; 0xfd
  40b346:	f63f af50 	bhi.w	40b1ea <__aeabi_fmul+0x92>
  40b34a:	428b      	cmp	r3, r1
  40b34c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40b350:	bf08      	it	eq
  40b352:	f020 0001 	biceq.w	r0, r0, #1
  40b356:	4770      	bx	lr
  40b358:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  40b35c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  40b360:	327f      	adds	r2, #127	; 0x7f
  40b362:	bfc2      	ittt	gt
  40b364:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40b368:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  40b36c:	4770      	bxgt	lr
  40b36e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40b372:	f04f 0300 	mov.w	r3, #0
  40b376:	3a01      	subs	r2, #1
  40b378:	e737      	b.n	40b1ea <__aeabi_fmul+0x92>
  40b37a:	f092 0f00 	teq	r2, #0
  40b37e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  40b382:	bf02      	ittt	eq
  40b384:	0040      	lsleq	r0, r0, #1
  40b386:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  40b38a:	3a01      	subeq	r2, #1
  40b38c:	d0f9      	beq.n	40b382 <__aeabi_fdiv+0xc2>
  40b38e:	ea40 000c 	orr.w	r0, r0, ip
  40b392:	f093 0f00 	teq	r3, #0
  40b396:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40b39a:	bf02      	ittt	eq
  40b39c:	0049      	lsleq	r1, r1, #1
  40b39e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  40b3a2:	3b01      	subeq	r3, #1
  40b3a4:	d0f9      	beq.n	40b39a <__aeabi_fdiv+0xda>
  40b3a6:	ea41 010c 	orr.w	r1, r1, ip
  40b3aa:	e795      	b.n	40b2d8 <__aeabi_fdiv+0x18>
  40b3ac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  40b3b0:	ea92 0f0c 	teq	r2, ip
  40b3b4:	d108      	bne.n	40b3c8 <__aeabi_fdiv+0x108>
  40b3b6:	0242      	lsls	r2, r0, #9
  40b3b8:	f47f af7d 	bne.w	40b2b6 <__aeabi_fmul+0x15e>
  40b3bc:	ea93 0f0c 	teq	r3, ip
  40b3c0:	f47f af70 	bne.w	40b2a4 <__aeabi_fmul+0x14c>
  40b3c4:	4608      	mov	r0, r1
  40b3c6:	e776      	b.n	40b2b6 <__aeabi_fmul+0x15e>
  40b3c8:	ea93 0f0c 	teq	r3, ip
  40b3cc:	d104      	bne.n	40b3d8 <__aeabi_fdiv+0x118>
  40b3ce:	024b      	lsls	r3, r1, #9
  40b3d0:	f43f af4c 	beq.w	40b26c <__aeabi_fmul+0x114>
  40b3d4:	4608      	mov	r0, r1
  40b3d6:	e76e      	b.n	40b2b6 <__aeabi_fmul+0x15e>
  40b3d8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  40b3dc:	bf18      	it	ne
  40b3de:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  40b3e2:	d1ca      	bne.n	40b37a <__aeabi_fdiv+0xba>
  40b3e4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  40b3e8:	f47f af5c 	bne.w	40b2a4 <__aeabi_fmul+0x14c>
  40b3ec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  40b3f0:	f47f af3c 	bne.w	40b26c <__aeabi_fmul+0x114>
  40b3f4:	e75f      	b.n	40b2b6 <__aeabi_fmul+0x15e>
  40b3f6:	bf00      	nop

0040b3f8 <__gesf2>:
  40b3f8:	f04f 3cff 	mov.w	ip, #4294967295
  40b3fc:	e006      	b.n	40b40c <__cmpsf2+0x4>
  40b3fe:	bf00      	nop

0040b400 <__lesf2>:
  40b400:	f04f 0c01 	mov.w	ip, #1
  40b404:	e002      	b.n	40b40c <__cmpsf2+0x4>
  40b406:	bf00      	nop

0040b408 <__cmpsf2>:
  40b408:	f04f 0c01 	mov.w	ip, #1
  40b40c:	f84d cd04 	str.w	ip, [sp, #-4]!
  40b410:	ea4f 0240 	mov.w	r2, r0, lsl #1
  40b414:	ea4f 0341 	mov.w	r3, r1, lsl #1
  40b418:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  40b41c:	bf18      	it	ne
  40b41e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40b422:	d011      	beq.n	40b448 <__cmpsf2+0x40>
  40b424:	b001      	add	sp, #4
  40b426:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  40b42a:	bf18      	it	ne
  40b42c:	ea90 0f01 	teqne	r0, r1
  40b430:	bf58      	it	pl
  40b432:	ebb2 0003 	subspl.w	r0, r2, r3
  40b436:	bf88      	it	hi
  40b438:	17c8      	asrhi	r0, r1, #31
  40b43a:	bf38      	it	cc
  40b43c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  40b440:	bf18      	it	ne
  40b442:	f040 0001 	orrne.w	r0, r0, #1
  40b446:	4770      	bx	lr
  40b448:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  40b44c:	d102      	bne.n	40b454 <__cmpsf2+0x4c>
  40b44e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  40b452:	d105      	bne.n	40b460 <__cmpsf2+0x58>
  40b454:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  40b458:	d1e4      	bne.n	40b424 <__cmpsf2+0x1c>
  40b45a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  40b45e:	d0e1      	beq.n	40b424 <__cmpsf2+0x1c>
  40b460:	f85d 0b04 	ldr.w	r0, [sp], #4
  40b464:	4770      	bx	lr
  40b466:	bf00      	nop

0040b468 <__aeabi_cfrcmple>:
  40b468:	4684      	mov	ip, r0
  40b46a:	4608      	mov	r0, r1
  40b46c:	4661      	mov	r1, ip
  40b46e:	e7ff      	b.n	40b470 <__aeabi_cfcmpeq>

0040b470 <__aeabi_cfcmpeq>:
  40b470:	b50f      	push	{r0, r1, r2, r3, lr}
  40b472:	f7ff ffc9 	bl	40b408 <__cmpsf2>
  40b476:	2800      	cmp	r0, #0
  40b478:	bf48      	it	mi
  40b47a:	f110 0f00 	cmnmi.w	r0, #0
  40b47e:	bd0f      	pop	{r0, r1, r2, r3, pc}

0040b480 <__aeabi_fcmpeq>:
  40b480:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b484:	f7ff fff4 	bl	40b470 <__aeabi_cfcmpeq>
  40b488:	bf0c      	ite	eq
  40b48a:	2001      	moveq	r0, #1
  40b48c:	2000      	movne	r0, #0
  40b48e:	f85d fb08 	ldr.w	pc, [sp], #8
  40b492:	bf00      	nop

0040b494 <__aeabi_fcmplt>:
  40b494:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b498:	f7ff ffea 	bl	40b470 <__aeabi_cfcmpeq>
  40b49c:	bf34      	ite	cc
  40b49e:	2001      	movcc	r0, #1
  40b4a0:	2000      	movcs	r0, #0
  40b4a2:	f85d fb08 	ldr.w	pc, [sp], #8
  40b4a6:	bf00      	nop

0040b4a8 <__aeabi_fcmple>:
  40b4a8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b4ac:	f7ff ffe0 	bl	40b470 <__aeabi_cfcmpeq>
  40b4b0:	bf94      	ite	ls
  40b4b2:	2001      	movls	r0, #1
  40b4b4:	2000      	movhi	r0, #0
  40b4b6:	f85d fb08 	ldr.w	pc, [sp], #8
  40b4ba:	bf00      	nop

0040b4bc <__aeabi_fcmpge>:
  40b4bc:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b4c0:	f7ff ffd2 	bl	40b468 <__aeabi_cfrcmple>
  40b4c4:	bf94      	ite	ls
  40b4c6:	2001      	movls	r0, #1
  40b4c8:	2000      	movhi	r0, #0
  40b4ca:	f85d fb08 	ldr.w	pc, [sp], #8
  40b4ce:	bf00      	nop

0040b4d0 <__aeabi_fcmpgt>:
  40b4d0:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b4d4:	f7ff ffc8 	bl	40b468 <__aeabi_cfrcmple>
  40b4d8:	bf34      	ite	cc
  40b4da:	2001      	movcc	r0, #1
  40b4dc:	2000      	movcs	r0, #0
  40b4de:	f85d fb08 	ldr.w	pc, [sp], #8
  40b4e2:	bf00      	nop

0040b4e4 <__aeabi_f2iz>:
  40b4e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
  40b4e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  40b4ec:	d30f      	bcc.n	40b50e <__aeabi_f2iz+0x2a>
  40b4ee:	f04f 039e 	mov.w	r3, #158	; 0x9e
  40b4f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  40b4f6:	d90d      	bls.n	40b514 <__aeabi_f2iz+0x30>
  40b4f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
  40b4fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40b500:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  40b504:	fa23 f002 	lsr.w	r0, r3, r2
  40b508:	bf18      	it	ne
  40b50a:	4240      	negne	r0, r0
  40b50c:	4770      	bx	lr
  40b50e:	f04f 0000 	mov.w	r0, #0
  40b512:	4770      	bx	lr
  40b514:	f112 0f61 	cmn.w	r2, #97	; 0x61
  40b518:	d101      	bne.n	40b51e <__aeabi_f2iz+0x3a>
  40b51a:	0242      	lsls	r2, r0, #9
  40b51c:	d105      	bne.n	40b52a <__aeabi_f2iz+0x46>
  40b51e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  40b522:	bf08      	it	eq
  40b524:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40b528:	4770      	bx	lr
  40b52a:	f04f 0000 	mov.w	r0, #0
  40b52e:	4770      	bx	lr

0040b530 <__aeabi_uldivmod>:
  40b530:	b953      	cbnz	r3, 40b548 <__aeabi_uldivmod+0x18>
  40b532:	b94a      	cbnz	r2, 40b548 <__aeabi_uldivmod+0x18>
  40b534:	2900      	cmp	r1, #0
  40b536:	bf08      	it	eq
  40b538:	2800      	cmpeq	r0, #0
  40b53a:	bf1c      	itt	ne
  40b53c:	f04f 31ff 	movne.w	r1, #4294967295
  40b540:	f04f 30ff 	movne.w	r0, #4294967295
  40b544:	f000 b97e 	b.w	40b844 <__aeabi_idiv0>
  40b548:	f1ad 0c08 	sub.w	ip, sp, #8
  40b54c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40b550:	f000 f806 	bl	40b560 <__udivmoddi4>
  40b554:	f8dd e004 	ldr.w	lr, [sp, #4]
  40b558:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40b55c:	b004      	add	sp, #16
  40b55e:	4770      	bx	lr

0040b560 <__udivmoddi4>:
  40b560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40b564:	468c      	mov	ip, r1
  40b566:	460e      	mov	r6, r1
  40b568:	4604      	mov	r4, r0
  40b56a:	9d08      	ldr	r5, [sp, #32]
  40b56c:	2b00      	cmp	r3, #0
  40b56e:	d150      	bne.n	40b612 <__udivmoddi4+0xb2>
  40b570:	428a      	cmp	r2, r1
  40b572:	4617      	mov	r7, r2
  40b574:	d96c      	bls.n	40b650 <__udivmoddi4+0xf0>
  40b576:	fab2 fe82 	clz	lr, r2
  40b57a:	f1be 0f00 	cmp.w	lr, #0
  40b57e:	d00b      	beq.n	40b598 <__udivmoddi4+0x38>
  40b580:	f1ce 0420 	rsb	r4, lr, #32
  40b584:	fa20 f404 	lsr.w	r4, r0, r4
  40b588:	fa01 f60e 	lsl.w	r6, r1, lr
  40b58c:	ea44 0c06 	orr.w	ip, r4, r6
  40b590:	fa02 f70e 	lsl.w	r7, r2, lr
  40b594:	fa00 f40e 	lsl.w	r4, r0, lr
  40b598:	ea4f 4917 	mov.w	r9, r7, lsr #16
  40b59c:	0c22      	lsrs	r2, r4, #16
  40b59e:	fbbc f0f9 	udiv	r0, ip, r9
  40b5a2:	fa1f f887 	uxth.w	r8, r7
  40b5a6:	fb09 c610 	mls	r6, r9, r0, ip
  40b5aa:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  40b5ae:	fb00 f308 	mul.w	r3, r0, r8
  40b5b2:	42b3      	cmp	r3, r6
  40b5b4:	d909      	bls.n	40b5ca <__udivmoddi4+0x6a>
  40b5b6:	19f6      	adds	r6, r6, r7
  40b5b8:	f100 32ff 	add.w	r2, r0, #4294967295
  40b5bc:	f080 8122 	bcs.w	40b804 <__udivmoddi4+0x2a4>
  40b5c0:	42b3      	cmp	r3, r6
  40b5c2:	f240 811f 	bls.w	40b804 <__udivmoddi4+0x2a4>
  40b5c6:	3802      	subs	r0, #2
  40b5c8:	443e      	add	r6, r7
  40b5ca:	1af6      	subs	r6, r6, r3
  40b5cc:	b2a2      	uxth	r2, r4
  40b5ce:	fbb6 f3f9 	udiv	r3, r6, r9
  40b5d2:	fb09 6613 	mls	r6, r9, r3, r6
  40b5d6:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40b5da:	fb03 f808 	mul.w	r8, r3, r8
  40b5de:	45a0      	cmp	r8, r4
  40b5e0:	d909      	bls.n	40b5f6 <__udivmoddi4+0x96>
  40b5e2:	19e4      	adds	r4, r4, r7
  40b5e4:	f103 32ff 	add.w	r2, r3, #4294967295
  40b5e8:	f080 810a 	bcs.w	40b800 <__udivmoddi4+0x2a0>
  40b5ec:	45a0      	cmp	r8, r4
  40b5ee:	f240 8107 	bls.w	40b800 <__udivmoddi4+0x2a0>
  40b5f2:	3b02      	subs	r3, #2
  40b5f4:	443c      	add	r4, r7
  40b5f6:	ebc8 0404 	rsb	r4, r8, r4
  40b5fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40b5fe:	2100      	movs	r1, #0
  40b600:	2d00      	cmp	r5, #0
  40b602:	d062      	beq.n	40b6ca <__udivmoddi4+0x16a>
  40b604:	fa24 f40e 	lsr.w	r4, r4, lr
  40b608:	2300      	movs	r3, #0
  40b60a:	602c      	str	r4, [r5, #0]
  40b60c:	606b      	str	r3, [r5, #4]
  40b60e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b612:	428b      	cmp	r3, r1
  40b614:	d907      	bls.n	40b626 <__udivmoddi4+0xc6>
  40b616:	2d00      	cmp	r5, #0
  40b618:	d055      	beq.n	40b6c6 <__udivmoddi4+0x166>
  40b61a:	2100      	movs	r1, #0
  40b61c:	e885 0041 	stmia.w	r5, {r0, r6}
  40b620:	4608      	mov	r0, r1
  40b622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b626:	fab3 f183 	clz	r1, r3
  40b62a:	2900      	cmp	r1, #0
  40b62c:	f040 8090 	bne.w	40b750 <__udivmoddi4+0x1f0>
  40b630:	42b3      	cmp	r3, r6
  40b632:	d302      	bcc.n	40b63a <__udivmoddi4+0xda>
  40b634:	4282      	cmp	r2, r0
  40b636:	f200 80f8 	bhi.w	40b82a <__udivmoddi4+0x2ca>
  40b63a:	1a84      	subs	r4, r0, r2
  40b63c:	eb66 0603 	sbc.w	r6, r6, r3
  40b640:	2001      	movs	r0, #1
  40b642:	46b4      	mov	ip, r6
  40b644:	2d00      	cmp	r5, #0
  40b646:	d040      	beq.n	40b6ca <__udivmoddi4+0x16a>
  40b648:	e885 1010 	stmia.w	r5, {r4, ip}
  40b64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b650:	b912      	cbnz	r2, 40b658 <__udivmoddi4+0xf8>
  40b652:	2701      	movs	r7, #1
  40b654:	fbb7 f7f2 	udiv	r7, r7, r2
  40b658:	fab7 fe87 	clz	lr, r7
  40b65c:	f1be 0f00 	cmp.w	lr, #0
  40b660:	d135      	bne.n	40b6ce <__udivmoddi4+0x16e>
  40b662:	1bf3      	subs	r3, r6, r7
  40b664:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40b668:	fa1f fc87 	uxth.w	ip, r7
  40b66c:	2101      	movs	r1, #1
  40b66e:	fbb3 f0f8 	udiv	r0, r3, r8
  40b672:	0c22      	lsrs	r2, r4, #16
  40b674:	fb08 3610 	mls	r6, r8, r0, r3
  40b678:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  40b67c:	fb0c f300 	mul.w	r3, ip, r0
  40b680:	42b3      	cmp	r3, r6
  40b682:	d907      	bls.n	40b694 <__udivmoddi4+0x134>
  40b684:	19f6      	adds	r6, r6, r7
  40b686:	f100 32ff 	add.w	r2, r0, #4294967295
  40b68a:	d202      	bcs.n	40b692 <__udivmoddi4+0x132>
  40b68c:	42b3      	cmp	r3, r6
  40b68e:	f200 80ce 	bhi.w	40b82e <__udivmoddi4+0x2ce>
  40b692:	4610      	mov	r0, r2
  40b694:	1af6      	subs	r6, r6, r3
  40b696:	b2a2      	uxth	r2, r4
  40b698:	fbb6 f3f8 	udiv	r3, r6, r8
  40b69c:	fb08 6613 	mls	r6, r8, r3, r6
  40b6a0:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40b6a4:	fb0c fc03 	mul.w	ip, ip, r3
  40b6a8:	45a4      	cmp	ip, r4
  40b6aa:	d907      	bls.n	40b6bc <__udivmoddi4+0x15c>
  40b6ac:	19e4      	adds	r4, r4, r7
  40b6ae:	f103 32ff 	add.w	r2, r3, #4294967295
  40b6b2:	d202      	bcs.n	40b6ba <__udivmoddi4+0x15a>
  40b6b4:	45a4      	cmp	ip, r4
  40b6b6:	f200 80b5 	bhi.w	40b824 <__udivmoddi4+0x2c4>
  40b6ba:	4613      	mov	r3, r2
  40b6bc:	ebcc 0404 	rsb	r4, ip, r4
  40b6c0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40b6c4:	e79c      	b.n	40b600 <__udivmoddi4+0xa0>
  40b6c6:	4629      	mov	r1, r5
  40b6c8:	4628      	mov	r0, r5
  40b6ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b6ce:	f1ce 0120 	rsb	r1, lr, #32
  40b6d2:	fa06 f30e 	lsl.w	r3, r6, lr
  40b6d6:	fa07 f70e 	lsl.w	r7, r7, lr
  40b6da:	fa20 f901 	lsr.w	r9, r0, r1
  40b6de:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40b6e2:	40ce      	lsrs	r6, r1
  40b6e4:	ea49 0903 	orr.w	r9, r9, r3
  40b6e8:	fbb6 faf8 	udiv	sl, r6, r8
  40b6ec:	ea4f 4419 	mov.w	r4, r9, lsr #16
  40b6f0:	fb08 661a 	mls	r6, r8, sl, r6
  40b6f4:	fa1f fc87 	uxth.w	ip, r7
  40b6f8:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  40b6fc:	fb0a f20c 	mul.w	r2, sl, ip
  40b700:	429a      	cmp	r2, r3
  40b702:	fa00 f40e 	lsl.w	r4, r0, lr
  40b706:	d90a      	bls.n	40b71e <__udivmoddi4+0x1be>
  40b708:	19db      	adds	r3, r3, r7
  40b70a:	f10a 31ff 	add.w	r1, sl, #4294967295
  40b70e:	f080 8087 	bcs.w	40b820 <__udivmoddi4+0x2c0>
  40b712:	429a      	cmp	r2, r3
  40b714:	f240 8084 	bls.w	40b820 <__udivmoddi4+0x2c0>
  40b718:	f1aa 0a02 	sub.w	sl, sl, #2
  40b71c:	443b      	add	r3, r7
  40b71e:	1a9b      	subs	r3, r3, r2
  40b720:	fa1f f989 	uxth.w	r9, r9
  40b724:	fbb3 f1f8 	udiv	r1, r3, r8
  40b728:	fb08 3311 	mls	r3, r8, r1, r3
  40b72c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  40b730:	fb01 f60c 	mul.w	r6, r1, ip
  40b734:	429e      	cmp	r6, r3
  40b736:	d907      	bls.n	40b748 <__udivmoddi4+0x1e8>
  40b738:	19db      	adds	r3, r3, r7
  40b73a:	f101 32ff 	add.w	r2, r1, #4294967295
  40b73e:	d26b      	bcs.n	40b818 <__udivmoddi4+0x2b8>
  40b740:	429e      	cmp	r6, r3
  40b742:	d969      	bls.n	40b818 <__udivmoddi4+0x2b8>
  40b744:	3902      	subs	r1, #2
  40b746:	443b      	add	r3, r7
  40b748:	1b9b      	subs	r3, r3, r6
  40b74a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  40b74e:	e78e      	b.n	40b66e <__udivmoddi4+0x10e>
  40b750:	f1c1 0e20 	rsb	lr, r1, #32
  40b754:	fa22 f40e 	lsr.w	r4, r2, lr
  40b758:	408b      	lsls	r3, r1
  40b75a:	4323      	orrs	r3, r4
  40b75c:	fa20 f70e 	lsr.w	r7, r0, lr
  40b760:	fa06 f401 	lsl.w	r4, r6, r1
  40b764:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40b768:	fa26 f60e 	lsr.w	r6, r6, lr
  40b76c:	433c      	orrs	r4, r7
  40b76e:	fbb6 f9fc 	udiv	r9, r6, ip
  40b772:	0c27      	lsrs	r7, r4, #16
  40b774:	fb0c 6619 	mls	r6, ip, r9, r6
  40b778:	fa1f f883 	uxth.w	r8, r3
  40b77c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  40b780:	fb09 f708 	mul.w	r7, r9, r8
  40b784:	42b7      	cmp	r7, r6
  40b786:	fa02 f201 	lsl.w	r2, r2, r1
  40b78a:	fa00 fa01 	lsl.w	sl, r0, r1
  40b78e:	d908      	bls.n	40b7a2 <__udivmoddi4+0x242>
  40b790:	18f6      	adds	r6, r6, r3
  40b792:	f109 30ff 	add.w	r0, r9, #4294967295
  40b796:	d241      	bcs.n	40b81c <__udivmoddi4+0x2bc>
  40b798:	42b7      	cmp	r7, r6
  40b79a:	d93f      	bls.n	40b81c <__udivmoddi4+0x2bc>
  40b79c:	f1a9 0902 	sub.w	r9, r9, #2
  40b7a0:	441e      	add	r6, r3
  40b7a2:	1bf6      	subs	r6, r6, r7
  40b7a4:	b2a0      	uxth	r0, r4
  40b7a6:	fbb6 f4fc 	udiv	r4, r6, ip
  40b7aa:	fb0c 6614 	mls	r6, ip, r4, r6
  40b7ae:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  40b7b2:	fb04 f808 	mul.w	r8, r4, r8
  40b7b6:	45b8      	cmp	r8, r7
  40b7b8:	d907      	bls.n	40b7ca <__udivmoddi4+0x26a>
  40b7ba:	18ff      	adds	r7, r7, r3
  40b7bc:	f104 30ff 	add.w	r0, r4, #4294967295
  40b7c0:	d228      	bcs.n	40b814 <__udivmoddi4+0x2b4>
  40b7c2:	45b8      	cmp	r8, r7
  40b7c4:	d926      	bls.n	40b814 <__udivmoddi4+0x2b4>
  40b7c6:	3c02      	subs	r4, #2
  40b7c8:	441f      	add	r7, r3
  40b7ca:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  40b7ce:	ebc8 0707 	rsb	r7, r8, r7
  40b7d2:	fba0 8902 	umull	r8, r9, r0, r2
  40b7d6:	454f      	cmp	r7, r9
  40b7d8:	4644      	mov	r4, r8
  40b7da:	464e      	mov	r6, r9
  40b7dc:	d314      	bcc.n	40b808 <__udivmoddi4+0x2a8>
  40b7de:	d029      	beq.n	40b834 <__udivmoddi4+0x2d4>
  40b7e0:	b365      	cbz	r5, 40b83c <__udivmoddi4+0x2dc>
  40b7e2:	ebba 0304 	subs.w	r3, sl, r4
  40b7e6:	eb67 0706 	sbc.w	r7, r7, r6
  40b7ea:	fa07 fe0e 	lsl.w	lr, r7, lr
  40b7ee:	40cb      	lsrs	r3, r1
  40b7f0:	40cf      	lsrs	r7, r1
  40b7f2:	ea4e 0303 	orr.w	r3, lr, r3
  40b7f6:	e885 0088 	stmia.w	r5, {r3, r7}
  40b7fa:	2100      	movs	r1, #0
  40b7fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b800:	4613      	mov	r3, r2
  40b802:	e6f8      	b.n	40b5f6 <__udivmoddi4+0x96>
  40b804:	4610      	mov	r0, r2
  40b806:	e6e0      	b.n	40b5ca <__udivmoddi4+0x6a>
  40b808:	ebb8 0402 	subs.w	r4, r8, r2
  40b80c:	eb69 0603 	sbc.w	r6, r9, r3
  40b810:	3801      	subs	r0, #1
  40b812:	e7e5      	b.n	40b7e0 <__udivmoddi4+0x280>
  40b814:	4604      	mov	r4, r0
  40b816:	e7d8      	b.n	40b7ca <__udivmoddi4+0x26a>
  40b818:	4611      	mov	r1, r2
  40b81a:	e795      	b.n	40b748 <__udivmoddi4+0x1e8>
  40b81c:	4681      	mov	r9, r0
  40b81e:	e7c0      	b.n	40b7a2 <__udivmoddi4+0x242>
  40b820:	468a      	mov	sl, r1
  40b822:	e77c      	b.n	40b71e <__udivmoddi4+0x1be>
  40b824:	3b02      	subs	r3, #2
  40b826:	443c      	add	r4, r7
  40b828:	e748      	b.n	40b6bc <__udivmoddi4+0x15c>
  40b82a:	4608      	mov	r0, r1
  40b82c:	e70a      	b.n	40b644 <__udivmoddi4+0xe4>
  40b82e:	3802      	subs	r0, #2
  40b830:	443e      	add	r6, r7
  40b832:	e72f      	b.n	40b694 <__udivmoddi4+0x134>
  40b834:	45c2      	cmp	sl, r8
  40b836:	d3e7      	bcc.n	40b808 <__udivmoddi4+0x2a8>
  40b838:	463e      	mov	r6, r7
  40b83a:	e7d1      	b.n	40b7e0 <__udivmoddi4+0x280>
  40b83c:	4629      	mov	r1, r5
  40b83e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b842:	bf00      	nop

0040b844 <__aeabi_idiv0>:
  40b844:	4770      	bx	lr
  40b846:	bf00      	nop

0040b848 <__errno>:
  40b848:	4b01      	ldr	r3, [pc, #4]	; (40b850 <__errno+0x8>)
  40b84a:	6818      	ldr	r0, [r3, #0]
  40b84c:	4770      	bx	lr
  40b84e:	bf00      	nop
  40b850:	20000558 	.word	0x20000558

0040b854 <__libc_init_array>:
  40b854:	b570      	push	{r4, r5, r6, lr}
  40b856:	4e0f      	ldr	r6, [pc, #60]	; (40b894 <__libc_init_array+0x40>)
  40b858:	4d0f      	ldr	r5, [pc, #60]	; (40b898 <__libc_init_array+0x44>)
  40b85a:	1b76      	subs	r6, r6, r5
  40b85c:	10b6      	asrs	r6, r6, #2
  40b85e:	bf18      	it	ne
  40b860:	2400      	movne	r4, #0
  40b862:	d005      	beq.n	40b870 <__libc_init_array+0x1c>
  40b864:	3401      	adds	r4, #1
  40b866:	f855 3b04 	ldr.w	r3, [r5], #4
  40b86a:	4798      	blx	r3
  40b86c:	42a6      	cmp	r6, r4
  40b86e:	d1f9      	bne.n	40b864 <__libc_init_array+0x10>
  40b870:	4e0a      	ldr	r6, [pc, #40]	; (40b89c <__libc_init_array+0x48>)
  40b872:	4d0b      	ldr	r5, [pc, #44]	; (40b8a0 <__libc_init_array+0x4c>)
  40b874:	1b76      	subs	r6, r6, r5
  40b876:	f004 fa41 	bl	40fcfc <_init>
  40b87a:	10b6      	asrs	r6, r6, #2
  40b87c:	bf18      	it	ne
  40b87e:	2400      	movne	r4, #0
  40b880:	d006      	beq.n	40b890 <__libc_init_array+0x3c>
  40b882:	3401      	adds	r4, #1
  40b884:	f855 3b04 	ldr.w	r3, [r5], #4
  40b888:	4798      	blx	r3
  40b88a:	42a6      	cmp	r6, r4
  40b88c:	d1f9      	bne.n	40b882 <__libc_init_array+0x2e>
  40b88e:	bd70      	pop	{r4, r5, r6, pc}
  40b890:	bd70      	pop	{r4, r5, r6, pc}
  40b892:	bf00      	nop
  40b894:	0040fd08 	.word	0x0040fd08
  40b898:	0040fd08 	.word	0x0040fd08
  40b89c:	0040fd10 	.word	0x0040fd10
  40b8a0:	0040fd08 	.word	0x0040fd08

0040b8a4 <memcmp>:
  40b8a4:	2a03      	cmp	r2, #3
  40b8a6:	b470      	push	{r4, r5, r6}
  40b8a8:	d926      	bls.n	40b8f8 <memcmp+0x54>
  40b8aa:	ea40 0301 	orr.w	r3, r0, r1
  40b8ae:	079b      	lsls	r3, r3, #30
  40b8b0:	d011      	beq.n	40b8d6 <memcmp+0x32>
  40b8b2:	7804      	ldrb	r4, [r0, #0]
  40b8b4:	780d      	ldrb	r5, [r1, #0]
  40b8b6:	42ac      	cmp	r4, r5
  40b8b8:	d122      	bne.n	40b900 <memcmp+0x5c>
  40b8ba:	4402      	add	r2, r0
  40b8bc:	1c43      	adds	r3, r0, #1
  40b8be:	e005      	b.n	40b8cc <memcmp+0x28>
  40b8c0:	f813 4b01 	ldrb.w	r4, [r3], #1
  40b8c4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  40b8c8:	42ac      	cmp	r4, r5
  40b8ca:	d119      	bne.n	40b900 <memcmp+0x5c>
  40b8cc:	4293      	cmp	r3, r2
  40b8ce:	d1f7      	bne.n	40b8c0 <memcmp+0x1c>
  40b8d0:	2000      	movs	r0, #0
  40b8d2:	bc70      	pop	{r4, r5, r6}
  40b8d4:	4770      	bx	lr
  40b8d6:	460c      	mov	r4, r1
  40b8d8:	4603      	mov	r3, r0
  40b8da:	681e      	ldr	r6, [r3, #0]
  40b8dc:	6825      	ldr	r5, [r4, #0]
  40b8de:	42ae      	cmp	r6, r5
  40b8e0:	4618      	mov	r0, r3
  40b8e2:	4621      	mov	r1, r4
  40b8e4:	f103 0304 	add.w	r3, r3, #4
  40b8e8:	f104 0404 	add.w	r4, r4, #4
  40b8ec:	d1e1      	bne.n	40b8b2 <memcmp+0xe>
  40b8ee:	3a04      	subs	r2, #4
  40b8f0:	2a03      	cmp	r2, #3
  40b8f2:	4618      	mov	r0, r3
  40b8f4:	4621      	mov	r1, r4
  40b8f6:	d8f0      	bhi.n	40b8da <memcmp+0x36>
  40b8f8:	2a00      	cmp	r2, #0
  40b8fa:	d1da      	bne.n	40b8b2 <memcmp+0xe>
  40b8fc:	4610      	mov	r0, r2
  40b8fe:	e7e8      	b.n	40b8d2 <memcmp+0x2e>
  40b900:	1b60      	subs	r0, r4, r5
  40b902:	bc70      	pop	{r4, r5, r6}
  40b904:	4770      	bx	lr
  40b906:	bf00      	nop

0040b908 <memcpy>:
  40b908:	4684      	mov	ip, r0
  40b90a:	ea41 0300 	orr.w	r3, r1, r0
  40b90e:	f013 0303 	ands.w	r3, r3, #3
  40b912:	d16d      	bne.n	40b9f0 <memcpy+0xe8>
  40b914:	3a40      	subs	r2, #64	; 0x40
  40b916:	d341      	bcc.n	40b99c <memcpy+0x94>
  40b918:	f851 3b04 	ldr.w	r3, [r1], #4
  40b91c:	f840 3b04 	str.w	r3, [r0], #4
  40b920:	f851 3b04 	ldr.w	r3, [r1], #4
  40b924:	f840 3b04 	str.w	r3, [r0], #4
  40b928:	f851 3b04 	ldr.w	r3, [r1], #4
  40b92c:	f840 3b04 	str.w	r3, [r0], #4
  40b930:	f851 3b04 	ldr.w	r3, [r1], #4
  40b934:	f840 3b04 	str.w	r3, [r0], #4
  40b938:	f851 3b04 	ldr.w	r3, [r1], #4
  40b93c:	f840 3b04 	str.w	r3, [r0], #4
  40b940:	f851 3b04 	ldr.w	r3, [r1], #4
  40b944:	f840 3b04 	str.w	r3, [r0], #4
  40b948:	f851 3b04 	ldr.w	r3, [r1], #4
  40b94c:	f840 3b04 	str.w	r3, [r0], #4
  40b950:	f851 3b04 	ldr.w	r3, [r1], #4
  40b954:	f840 3b04 	str.w	r3, [r0], #4
  40b958:	f851 3b04 	ldr.w	r3, [r1], #4
  40b95c:	f840 3b04 	str.w	r3, [r0], #4
  40b960:	f851 3b04 	ldr.w	r3, [r1], #4
  40b964:	f840 3b04 	str.w	r3, [r0], #4
  40b968:	f851 3b04 	ldr.w	r3, [r1], #4
  40b96c:	f840 3b04 	str.w	r3, [r0], #4
  40b970:	f851 3b04 	ldr.w	r3, [r1], #4
  40b974:	f840 3b04 	str.w	r3, [r0], #4
  40b978:	f851 3b04 	ldr.w	r3, [r1], #4
  40b97c:	f840 3b04 	str.w	r3, [r0], #4
  40b980:	f851 3b04 	ldr.w	r3, [r1], #4
  40b984:	f840 3b04 	str.w	r3, [r0], #4
  40b988:	f851 3b04 	ldr.w	r3, [r1], #4
  40b98c:	f840 3b04 	str.w	r3, [r0], #4
  40b990:	f851 3b04 	ldr.w	r3, [r1], #4
  40b994:	f840 3b04 	str.w	r3, [r0], #4
  40b998:	3a40      	subs	r2, #64	; 0x40
  40b99a:	d2bd      	bcs.n	40b918 <memcpy+0x10>
  40b99c:	3230      	adds	r2, #48	; 0x30
  40b99e:	d311      	bcc.n	40b9c4 <memcpy+0xbc>
  40b9a0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9a4:	f840 3b04 	str.w	r3, [r0], #4
  40b9a8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9ac:	f840 3b04 	str.w	r3, [r0], #4
  40b9b0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9b4:	f840 3b04 	str.w	r3, [r0], #4
  40b9b8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9bc:	f840 3b04 	str.w	r3, [r0], #4
  40b9c0:	3a10      	subs	r2, #16
  40b9c2:	d2ed      	bcs.n	40b9a0 <memcpy+0x98>
  40b9c4:	320c      	adds	r2, #12
  40b9c6:	d305      	bcc.n	40b9d4 <memcpy+0xcc>
  40b9c8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9cc:	f840 3b04 	str.w	r3, [r0], #4
  40b9d0:	3a04      	subs	r2, #4
  40b9d2:	d2f9      	bcs.n	40b9c8 <memcpy+0xc0>
  40b9d4:	3204      	adds	r2, #4
  40b9d6:	d008      	beq.n	40b9ea <memcpy+0xe2>
  40b9d8:	07d2      	lsls	r2, r2, #31
  40b9da:	bf1c      	itt	ne
  40b9dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40b9e0:	f800 3b01 	strbne.w	r3, [r0], #1
  40b9e4:	d301      	bcc.n	40b9ea <memcpy+0xe2>
  40b9e6:	880b      	ldrh	r3, [r1, #0]
  40b9e8:	8003      	strh	r3, [r0, #0]
  40b9ea:	4660      	mov	r0, ip
  40b9ec:	4770      	bx	lr
  40b9ee:	bf00      	nop
  40b9f0:	2a08      	cmp	r2, #8
  40b9f2:	d313      	bcc.n	40ba1c <memcpy+0x114>
  40b9f4:	078b      	lsls	r3, r1, #30
  40b9f6:	d08d      	beq.n	40b914 <memcpy+0xc>
  40b9f8:	f010 0303 	ands.w	r3, r0, #3
  40b9fc:	d08a      	beq.n	40b914 <memcpy+0xc>
  40b9fe:	f1c3 0304 	rsb	r3, r3, #4
  40ba02:	1ad2      	subs	r2, r2, r3
  40ba04:	07db      	lsls	r3, r3, #31
  40ba06:	bf1c      	itt	ne
  40ba08:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40ba0c:	f800 3b01 	strbne.w	r3, [r0], #1
  40ba10:	d380      	bcc.n	40b914 <memcpy+0xc>
  40ba12:	f831 3b02 	ldrh.w	r3, [r1], #2
  40ba16:	f820 3b02 	strh.w	r3, [r0], #2
  40ba1a:	e77b      	b.n	40b914 <memcpy+0xc>
  40ba1c:	3a04      	subs	r2, #4
  40ba1e:	d3d9      	bcc.n	40b9d4 <memcpy+0xcc>
  40ba20:	3a01      	subs	r2, #1
  40ba22:	f811 3b01 	ldrb.w	r3, [r1], #1
  40ba26:	f800 3b01 	strb.w	r3, [r0], #1
  40ba2a:	d2f9      	bcs.n	40ba20 <memcpy+0x118>
  40ba2c:	780b      	ldrb	r3, [r1, #0]
  40ba2e:	7003      	strb	r3, [r0, #0]
  40ba30:	784b      	ldrb	r3, [r1, #1]
  40ba32:	7043      	strb	r3, [r0, #1]
  40ba34:	788b      	ldrb	r3, [r1, #2]
  40ba36:	7083      	strb	r3, [r0, #2]
  40ba38:	4660      	mov	r0, ip
  40ba3a:	4770      	bx	lr

0040ba3c <memset>:
  40ba3c:	b470      	push	{r4, r5, r6}
  40ba3e:	0784      	lsls	r4, r0, #30
  40ba40:	d046      	beq.n	40bad0 <memset+0x94>
  40ba42:	1e54      	subs	r4, r2, #1
  40ba44:	2a00      	cmp	r2, #0
  40ba46:	d041      	beq.n	40bacc <memset+0x90>
  40ba48:	b2cd      	uxtb	r5, r1
  40ba4a:	4603      	mov	r3, r0
  40ba4c:	e002      	b.n	40ba54 <memset+0x18>
  40ba4e:	1e62      	subs	r2, r4, #1
  40ba50:	b3e4      	cbz	r4, 40bacc <memset+0x90>
  40ba52:	4614      	mov	r4, r2
  40ba54:	f803 5b01 	strb.w	r5, [r3], #1
  40ba58:	079a      	lsls	r2, r3, #30
  40ba5a:	d1f8      	bne.n	40ba4e <memset+0x12>
  40ba5c:	2c03      	cmp	r4, #3
  40ba5e:	d92e      	bls.n	40babe <memset+0x82>
  40ba60:	b2cd      	uxtb	r5, r1
  40ba62:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40ba66:	2c0f      	cmp	r4, #15
  40ba68:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40ba6c:	d919      	bls.n	40baa2 <memset+0x66>
  40ba6e:	f103 0210 	add.w	r2, r3, #16
  40ba72:	4626      	mov	r6, r4
  40ba74:	3e10      	subs	r6, #16
  40ba76:	2e0f      	cmp	r6, #15
  40ba78:	f842 5c10 	str.w	r5, [r2, #-16]
  40ba7c:	f842 5c0c 	str.w	r5, [r2, #-12]
  40ba80:	f842 5c08 	str.w	r5, [r2, #-8]
  40ba84:	f842 5c04 	str.w	r5, [r2, #-4]
  40ba88:	f102 0210 	add.w	r2, r2, #16
  40ba8c:	d8f2      	bhi.n	40ba74 <memset+0x38>
  40ba8e:	f1a4 0210 	sub.w	r2, r4, #16
  40ba92:	f022 020f 	bic.w	r2, r2, #15
  40ba96:	f004 040f 	and.w	r4, r4, #15
  40ba9a:	3210      	adds	r2, #16
  40ba9c:	2c03      	cmp	r4, #3
  40ba9e:	4413      	add	r3, r2
  40baa0:	d90d      	bls.n	40babe <memset+0x82>
  40baa2:	461e      	mov	r6, r3
  40baa4:	4622      	mov	r2, r4
  40baa6:	3a04      	subs	r2, #4
  40baa8:	2a03      	cmp	r2, #3
  40baaa:	f846 5b04 	str.w	r5, [r6], #4
  40baae:	d8fa      	bhi.n	40baa6 <memset+0x6a>
  40bab0:	1f22      	subs	r2, r4, #4
  40bab2:	f022 0203 	bic.w	r2, r2, #3
  40bab6:	3204      	adds	r2, #4
  40bab8:	4413      	add	r3, r2
  40baba:	f004 0403 	and.w	r4, r4, #3
  40babe:	b12c      	cbz	r4, 40bacc <memset+0x90>
  40bac0:	b2c9      	uxtb	r1, r1
  40bac2:	441c      	add	r4, r3
  40bac4:	f803 1b01 	strb.w	r1, [r3], #1
  40bac8:	42a3      	cmp	r3, r4
  40baca:	d1fb      	bne.n	40bac4 <memset+0x88>
  40bacc:	bc70      	pop	{r4, r5, r6}
  40bace:	4770      	bx	lr
  40bad0:	4614      	mov	r4, r2
  40bad2:	4603      	mov	r3, r0
  40bad4:	e7c2      	b.n	40ba5c <memset+0x20>
  40bad6:	bf00      	nop

0040bad8 <sprintf>:
  40bad8:	b40e      	push	{r1, r2, r3}
  40bada:	b5f0      	push	{r4, r5, r6, r7, lr}
  40badc:	b09c      	sub	sp, #112	; 0x70
  40bade:	ab21      	add	r3, sp, #132	; 0x84
  40bae0:	490f      	ldr	r1, [pc, #60]	; (40bb20 <sprintf+0x48>)
  40bae2:	f853 2b04 	ldr.w	r2, [r3], #4
  40bae6:	9301      	str	r3, [sp, #4]
  40bae8:	4605      	mov	r5, r0
  40baea:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40baee:	6808      	ldr	r0, [r1, #0]
  40baf0:	9502      	str	r5, [sp, #8]
  40baf2:	f44f 7702 	mov.w	r7, #520	; 0x208
  40baf6:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40bafa:	a902      	add	r1, sp, #8
  40bafc:	9506      	str	r5, [sp, #24]
  40bafe:	f8ad 7014 	strh.w	r7, [sp, #20]
  40bb02:	9404      	str	r4, [sp, #16]
  40bb04:	9407      	str	r4, [sp, #28]
  40bb06:	f8ad 6016 	strh.w	r6, [sp, #22]
  40bb0a:	f000 f8bb 	bl	40bc84 <_svfprintf_r>
  40bb0e:	9b02      	ldr	r3, [sp, #8]
  40bb10:	2200      	movs	r2, #0
  40bb12:	701a      	strb	r2, [r3, #0]
  40bb14:	b01c      	add	sp, #112	; 0x70
  40bb16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40bb1a:	b003      	add	sp, #12
  40bb1c:	4770      	bx	lr
  40bb1e:	bf00      	nop
  40bb20:	20000558 	.word	0x20000558
	...

0040bb40 <strlen>:
  40bb40:	f890 f000 	pld	[r0]
  40bb44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  40bb48:	f020 0107 	bic.w	r1, r0, #7
  40bb4c:	f06f 0c00 	mvn.w	ip, #0
  40bb50:	f010 0407 	ands.w	r4, r0, #7
  40bb54:	f891 f020 	pld	[r1, #32]
  40bb58:	f040 8049 	bne.w	40bbee <strlen+0xae>
  40bb5c:	f04f 0400 	mov.w	r4, #0
  40bb60:	f06f 0007 	mvn.w	r0, #7
  40bb64:	e9d1 2300 	ldrd	r2, r3, [r1]
  40bb68:	f891 f040 	pld	[r1, #64]	; 0x40
  40bb6c:	f100 0008 	add.w	r0, r0, #8
  40bb70:	fa82 f24c 	uadd8	r2, r2, ip
  40bb74:	faa4 f28c 	sel	r2, r4, ip
  40bb78:	fa83 f34c 	uadd8	r3, r3, ip
  40bb7c:	faa2 f38c 	sel	r3, r2, ip
  40bb80:	bb4b      	cbnz	r3, 40bbd6 <strlen+0x96>
  40bb82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  40bb86:	fa82 f24c 	uadd8	r2, r2, ip
  40bb8a:	f100 0008 	add.w	r0, r0, #8
  40bb8e:	faa4 f28c 	sel	r2, r4, ip
  40bb92:	fa83 f34c 	uadd8	r3, r3, ip
  40bb96:	faa2 f38c 	sel	r3, r2, ip
  40bb9a:	b9e3      	cbnz	r3, 40bbd6 <strlen+0x96>
  40bb9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  40bba0:	fa82 f24c 	uadd8	r2, r2, ip
  40bba4:	f100 0008 	add.w	r0, r0, #8
  40bba8:	faa4 f28c 	sel	r2, r4, ip
  40bbac:	fa83 f34c 	uadd8	r3, r3, ip
  40bbb0:	faa2 f38c 	sel	r3, r2, ip
  40bbb4:	b97b      	cbnz	r3, 40bbd6 <strlen+0x96>
  40bbb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40bbba:	f101 0120 	add.w	r1, r1, #32
  40bbbe:	fa82 f24c 	uadd8	r2, r2, ip
  40bbc2:	f100 0008 	add.w	r0, r0, #8
  40bbc6:	faa4 f28c 	sel	r2, r4, ip
  40bbca:	fa83 f34c 	uadd8	r3, r3, ip
  40bbce:	faa2 f38c 	sel	r3, r2, ip
  40bbd2:	2b00      	cmp	r3, #0
  40bbd4:	d0c6      	beq.n	40bb64 <strlen+0x24>
  40bbd6:	2a00      	cmp	r2, #0
  40bbd8:	bf04      	itt	eq
  40bbda:	3004      	addeq	r0, #4
  40bbdc:	461a      	moveq	r2, r3
  40bbde:	ba12      	rev	r2, r2
  40bbe0:	fab2 f282 	clz	r2, r2
  40bbe4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  40bbe8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40bbec:	4770      	bx	lr
  40bbee:	e9d1 2300 	ldrd	r2, r3, [r1]
  40bbf2:	f004 0503 	and.w	r5, r4, #3
  40bbf6:	f1c4 0000 	rsb	r0, r4, #0
  40bbfa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40bbfe:	f014 0f04 	tst.w	r4, #4
  40bc02:	f891 f040 	pld	[r1, #64]	; 0x40
  40bc06:	fa0c f505 	lsl.w	r5, ip, r5
  40bc0a:	ea62 0205 	orn	r2, r2, r5
  40bc0e:	bf1c      	itt	ne
  40bc10:	ea63 0305 	ornne	r3, r3, r5
  40bc14:	4662      	movne	r2, ip
  40bc16:	f04f 0400 	mov.w	r4, #0
  40bc1a:	e7a9      	b.n	40bb70 <strlen+0x30>

0040bc1c <strncpy>:
  40bc1c:	ea40 0301 	orr.w	r3, r0, r1
  40bc20:	079b      	lsls	r3, r3, #30
  40bc22:	b470      	push	{r4, r5, r6}
  40bc24:	d12b      	bne.n	40bc7e <strncpy+0x62>
  40bc26:	2a03      	cmp	r2, #3
  40bc28:	d929      	bls.n	40bc7e <strncpy+0x62>
  40bc2a:	460c      	mov	r4, r1
  40bc2c:	4603      	mov	r3, r0
  40bc2e:	4621      	mov	r1, r4
  40bc30:	f854 6b04 	ldr.w	r6, [r4], #4
  40bc34:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
  40bc38:	ea25 0506 	bic.w	r5, r5, r6
  40bc3c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
  40bc40:	d106      	bne.n	40bc50 <strncpy+0x34>
  40bc42:	3a04      	subs	r2, #4
  40bc44:	2a03      	cmp	r2, #3
  40bc46:	f843 6b04 	str.w	r6, [r3], #4
  40bc4a:	4621      	mov	r1, r4
  40bc4c:	d8ef      	bhi.n	40bc2e <strncpy+0x12>
  40bc4e:	b1a2      	cbz	r2, 40bc7a <strncpy+0x5e>
  40bc50:	780c      	ldrb	r4, [r1, #0]
  40bc52:	701c      	strb	r4, [r3, #0]
  40bc54:	3a01      	subs	r2, #1
  40bc56:	3301      	adds	r3, #1
  40bc58:	3101      	adds	r1, #1
  40bc5a:	b13c      	cbz	r4, 40bc6c <strncpy+0x50>
  40bc5c:	b16a      	cbz	r2, 40bc7a <strncpy+0x5e>
  40bc5e:	f811 4b01 	ldrb.w	r4, [r1], #1
  40bc62:	f803 4b01 	strb.w	r4, [r3], #1
  40bc66:	3a01      	subs	r2, #1
  40bc68:	2c00      	cmp	r4, #0
  40bc6a:	d1f7      	bne.n	40bc5c <strncpy+0x40>
  40bc6c:	b12a      	cbz	r2, 40bc7a <strncpy+0x5e>
  40bc6e:	441a      	add	r2, r3
  40bc70:	2100      	movs	r1, #0
  40bc72:	f803 1b01 	strb.w	r1, [r3], #1
  40bc76:	429a      	cmp	r2, r3
  40bc78:	d1fb      	bne.n	40bc72 <strncpy+0x56>
  40bc7a:	bc70      	pop	{r4, r5, r6}
  40bc7c:	4770      	bx	lr
  40bc7e:	4603      	mov	r3, r0
  40bc80:	e7e5      	b.n	40bc4e <strncpy+0x32>
  40bc82:	bf00      	nop

0040bc84 <_svfprintf_r>:
  40bc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bc88:	b0c1      	sub	sp, #260	; 0x104
  40bc8a:	460c      	mov	r4, r1
  40bc8c:	9109      	str	r1, [sp, #36]	; 0x24
  40bc8e:	4615      	mov	r5, r2
  40bc90:	930e      	str	r3, [sp, #56]	; 0x38
  40bc92:	900a      	str	r0, [sp, #40]	; 0x28
  40bc94:	f002 fb28 	bl	40e2e8 <_localeconv_r>
  40bc98:	6803      	ldr	r3, [r0, #0]
  40bc9a:	9317      	str	r3, [sp, #92]	; 0x5c
  40bc9c:	4618      	mov	r0, r3
  40bc9e:	f7ff ff4f 	bl	40bb40 <strlen>
  40bca2:	89a3      	ldrh	r3, [r4, #12]
  40bca4:	9016      	str	r0, [sp, #88]	; 0x58
  40bca6:	061e      	lsls	r6, r3, #24
  40bca8:	d503      	bpl.n	40bcb2 <_svfprintf_r+0x2e>
  40bcaa:	6923      	ldr	r3, [r4, #16]
  40bcac:	2b00      	cmp	r3, #0
  40bcae:	f001 8119 	beq.w	40cee4 <_svfprintf_r+0x1260>
  40bcb2:	2300      	movs	r3, #0
  40bcb4:	461a      	mov	r2, r3
  40bcb6:	9312      	str	r3, [sp, #72]	; 0x48
  40bcb8:	9325      	str	r3, [sp, #148]	; 0x94
  40bcba:	9324      	str	r3, [sp, #144]	; 0x90
  40bcbc:	9319      	str	r3, [sp, #100]	; 0x64
  40bcbe:	930b      	str	r3, [sp, #44]	; 0x2c
  40bcc0:	f8df a464 	ldr.w	sl, [pc, #1124]	; 40c128 <_svfprintf_r+0x4a4>
  40bcc4:	9214      	str	r2, [sp, #80]	; 0x50
  40bcc6:	ab30      	add	r3, sp, #192	; 0xc0
  40bcc8:	9323      	str	r3, [sp, #140]	; 0x8c
  40bcca:	4699      	mov	r9, r3
  40bccc:	9215      	str	r2, [sp, #84]	; 0x54
  40bcce:	46a8      	mov	r8, r5
  40bcd0:	f898 3000 	ldrb.w	r3, [r8]
  40bcd4:	4644      	mov	r4, r8
  40bcd6:	b1eb      	cbz	r3, 40bd14 <_svfprintf_r+0x90>
  40bcd8:	2b25      	cmp	r3, #37	; 0x25
  40bcda:	d102      	bne.n	40bce2 <_svfprintf_r+0x5e>
  40bcdc:	e01a      	b.n	40bd14 <_svfprintf_r+0x90>
  40bcde:	2b25      	cmp	r3, #37	; 0x25
  40bce0:	d003      	beq.n	40bcea <_svfprintf_r+0x66>
  40bce2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40bce6:	2b00      	cmp	r3, #0
  40bce8:	d1f9      	bne.n	40bcde <_svfprintf_r+0x5a>
  40bcea:	ebc8 0504 	rsb	r5, r8, r4
  40bcee:	b18d      	cbz	r5, 40bd14 <_svfprintf_r+0x90>
  40bcf0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40bcf2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40bcf4:	f8c9 8000 	str.w	r8, [r9]
  40bcf8:	3301      	adds	r3, #1
  40bcfa:	442a      	add	r2, r5
  40bcfc:	2b07      	cmp	r3, #7
  40bcfe:	f8c9 5004 	str.w	r5, [r9, #4]
  40bd02:	9225      	str	r2, [sp, #148]	; 0x94
  40bd04:	9324      	str	r3, [sp, #144]	; 0x90
  40bd06:	f300 80a6 	bgt.w	40be56 <_svfprintf_r+0x1d2>
  40bd0a:	f109 0908 	add.w	r9, r9, #8
  40bd0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40bd10:	442b      	add	r3, r5
  40bd12:	930b      	str	r3, [sp, #44]	; 0x2c
  40bd14:	7823      	ldrb	r3, [r4, #0]
  40bd16:	2b00      	cmp	r3, #0
  40bd18:	f000 80a6 	beq.w	40be68 <_svfprintf_r+0x1e4>
  40bd1c:	2300      	movs	r3, #0
  40bd1e:	461a      	mov	r2, r3
  40bd20:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40bd24:	4619      	mov	r1, r3
  40bd26:	930c      	str	r3, [sp, #48]	; 0x30
  40bd28:	9307      	str	r3, [sp, #28]
  40bd2a:	f04f 3bff 	mov.w	fp, #4294967295
  40bd2e:	7863      	ldrb	r3, [r4, #1]
  40bd30:	f104 0801 	add.w	r8, r4, #1
  40bd34:	465d      	mov	r5, fp
  40bd36:	f108 0801 	add.w	r8, r8, #1
  40bd3a:	f1a3 0020 	sub.w	r0, r3, #32
  40bd3e:	2858      	cmp	r0, #88	; 0x58
  40bd40:	f200 8425 	bhi.w	40c58e <_svfprintf_r+0x90a>
  40bd44:	e8df f010 	tbh	[pc, r0, lsl #1]
  40bd48:	04230388 	.word	0x04230388
  40bd4c:	03900423 	.word	0x03900423
  40bd50:	04230423 	.word	0x04230423
  40bd54:	04230423 	.word	0x04230423
  40bd58:	04230423 	.word	0x04230423
  40bd5c:	03a50397 	.word	0x03a50397
  40bd60:	005d0423 	.word	0x005d0423
  40bd64:	042300e2 	.word	0x042300e2
  40bd68:	010500fe 	.word	0x010500fe
  40bd6c:	01050105 	.word	0x01050105
  40bd70:	01050105 	.word	0x01050105
  40bd74:	01050105 	.word	0x01050105
  40bd78:	01050105 	.word	0x01050105
  40bd7c:	04230423 	.word	0x04230423
  40bd80:	04230423 	.word	0x04230423
  40bd84:	04230423 	.word	0x04230423
  40bd88:	04230423 	.word	0x04230423
  40bd8c:	04230423 	.word	0x04230423
  40bd90:	02810115 	.word	0x02810115
  40bd94:	02810423 	.word	0x02810423
  40bd98:	04230423 	.word	0x04230423
  40bd9c:	04230423 	.word	0x04230423
  40bda0:	042302c6 	.word	0x042302c6
  40bda4:	02cd0423 	.word	0x02cd0423
  40bda8:	04230423 	.word	0x04230423
  40bdac:	04230423 	.word	0x04230423
  40bdb0:	02f70423 	.word	0x02f70423
  40bdb4:	04230423 	.word	0x04230423
  40bdb8:	04230325 	.word	0x04230325
  40bdbc:	04230423 	.word	0x04230423
  40bdc0:	04230423 	.word	0x04230423
  40bdc4:	04230423 	.word	0x04230423
  40bdc8:	04230423 	.word	0x04230423
  40bdcc:	03660423 	.word	0x03660423
  40bdd0:	02810379 	.word	0x02810379
  40bdd4:	02810281 	.word	0x02810281
  40bdd8:	03790381 	.word	0x03790381
  40bddc:	04230423 	.word	0x04230423
  40bde0:	042303d1 	.word	0x042303d1
  40bde4:	00a303db 	.word	0x00a303db
  40bde8:	03ee0064 	.word	0x03ee0064
  40bdec:	03f50423 	.word	0x03f50423
  40bdf0:	03aa0423 	.word	0x03aa0423
  40bdf4:	04230423 	.word	0x04230423
  40bdf8:	03bc      	.short	0x03bc
  40bdfa:	980c      	ldr	r0, [sp, #48]	; 0x30
  40bdfc:	930e      	str	r3, [sp, #56]	; 0x38
  40bdfe:	4240      	negs	r0, r0
  40be00:	900c      	str	r0, [sp, #48]	; 0x30
  40be02:	9b07      	ldr	r3, [sp, #28]
  40be04:	f043 0304 	orr.w	r3, r3, #4
  40be08:	9307      	str	r3, [sp, #28]
  40be0a:	f898 3000 	ldrb.w	r3, [r8]
  40be0e:	e792      	b.n	40bd36 <_svfprintf_r+0xb2>
  40be10:	980e      	ldr	r0, [sp, #56]	; 0x38
  40be12:	46ab      	mov	fp, r5
  40be14:	2100      	movs	r1, #0
  40be16:	6804      	ldr	r4, [r0, #0]
  40be18:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40be1c:	1d07      	adds	r7, r0, #4
  40be1e:	9807      	ldr	r0, [sp, #28]
  40be20:	2330      	movs	r3, #48	; 0x30
  40be22:	2278      	movs	r2, #120	; 0x78
  40be24:	458b      	cmp	fp, r1
  40be26:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  40be2a:	f04f 0500 	mov.w	r5, #0
  40be2e:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  40be32:	f040 0302 	orr.w	r3, r0, #2
  40be36:	f2c0 83c7 	blt.w	40c5c8 <_svfprintf_r+0x944>
  40be3a:	f020 0380 	bic.w	r3, r0, #128	; 0x80
  40be3e:	f043 0302 	orr.w	r3, r3, #2
  40be42:	9307      	str	r3, [sp, #28]
  40be44:	ea54 0305 	orrs.w	r3, r4, r5
  40be48:	970e      	str	r7, [sp, #56]	; 0x38
  40be4a:	f000 8393 	beq.w	40c574 <_svfprintf_r+0x8f0>
  40be4e:	460f      	mov	r7, r1
  40be50:	9211      	str	r2, [sp, #68]	; 0x44
  40be52:	48b3      	ldr	r0, [pc, #716]	; (40c120 <_svfprintf_r+0x49c>)
  40be54:	e2ce      	b.n	40c3f4 <_svfprintf_r+0x770>
  40be56:	aa23      	add	r2, sp, #140	; 0x8c
  40be58:	9909      	ldr	r1, [sp, #36]	; 0x24
  40be5a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40be5c:	f003 f874 	bl	40ef48 <__ssprint_r>
  40be60:	b948      	cbnz	r0, 40be76 <_svfprintf_r+0x1f2>
  40be62:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40be66:	e752      	b.n	40bd0e <_svfprintf_r+0x8a>
  40be68:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40be6a:	b123      	cbz	r3, 40be76 <_svfprintf_r+0x1f2>
  40be6c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40be6e:	9909      	ldr	r1, [sp, #36]	; 0x24
  40be70:	aa23      	add	r2, sp, #140	; 0x8c
  40be72:	f003 f869 	bl	40ef48 <__ssprint_r>
  40be76:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40be78:	899b      	ldrh	r3, [r3, #12]
  40be7a:	f013 0f40 	tst.w	r3, #64	; 0x40
  40be7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40be80:	bf18      	it	ne
  40be82:	f04f 33ff 	movne.w	r3, #4294967295
  40be86:	4618      	mov	r0, r3
  40be88:	b041      	add	sp, #260	; 0x104
  40be8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40be8e:	9311      	str	r3, [sp, #68]	; 0x44
  40be90:	46ab      	mov	fp, r5
  40be92:	2a00      	cmp	r2, #0
  40be94:	f041 8223 	bne.w	40d2de <_svfprintf_r+0x165a>
  40be98:	9a07      	ldr	r2, [sp, #28]
  40be9a:	f012 0320 	ands.w	r3, r2, #32
  40be9e:	f000 822e 	beq.w	40c2fe <_svfprintf_r+0x67a>
  40bea2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40bea4:	3707      	adds	r7, #7
  40bea6:	f027 0307 	bic.w	r3, r7, #7
  40beaa:	2700      	movs	r7, #0
  40beac:	f103 0108 	add.w	r1, r3, #8
  40beb0:	45bb      	cmp	fp, r7
  40beb2:	910e      	str	r1, [sp, #56]	; 0x38
  40beb4:	e9d3 4500 	ldrd	r4, r5, [r3]
  40beb8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40bebc:	f2c0 8752 	blt.w	40cd64 <_svfprintf_r+0x10e0>
  40bec0:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  40bec4:	9307      	str	r3, [sp, #28]
  40bec6:	ea54 0305 	orrs.w	r3, r4, r5
  40beca:	f000 8375 	beq.w	40c5b8 <_svfprintf_r+0x934>
  40bece:	ae30      	add	r6, sp, #192	; 0xc0
  40bed0:	08e2      	lsrs	r2, r4, #3
  40bed2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40bed6:	08e9      	lsrs	r1, r5, #3
  40bed8:	f004 0307 	and.w	r3, r4, #7
  40bedc:	460d      	mov	r5, r1
  40bede:	4614      	mov	r4, r2
  40bee0:	3330      	adds	r3, #48	; 0x30
  40bee2:	ea54 0205 	orrs.w	r2, r4, r5
  40bee6:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40beea:	d1f1      	bne.n	40bed0 <_svfprintf_r+0x24c>
  40beec:	9a07      	ldr	r2, [sp, #28]
  40beee:	07d1      	lsls	r1, r2, #31
  40bef0:	f140 8084 	bpl.w	40bffc <_svfprintf_r+0x378>
  40bef4:	2b30      	cmp	r3, #48	; 0x30
  40bef6:	f000 8081 	beq.w	40bffc <_svfprintf_r+0x378>
  40befa:	2230      	movs	r2, #48	; 0x30
  40befc:	1e73      	subs	r3, r6, #1
  40befe:	f806 2c01 	strb.w	r2, [r6, #-1]
  40bf02:	aa30      	add	r2, sp, #192	; 0xc0
  40bf04:	1ad2      	subs	r2, r2, r3
  40bf06:	920d      	str	r2, [sp, #52]	; 0x34
  40bf08:	461e      	mov	r6, r3
  40bf0a:	e07a      	b.n	40c002 <_svfprintf_r+0x37e>
  40bf0c:	f898 3000 	ldrb.w	r3, [r8]
  40bf10:	2b2a      	cmp	r3, #42	; 0x2a
  40bf12:	f108 0401 	add.w	r4, r8, #1
  40bf16:	f001 81b1 	beq.w	40d27c <_svfprintf_r+0x15f8>
  40bf1a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40bf1e:	2809      	cmp	r0, #9
  40bf20:	bf98      	it	ls
  40bf22:	2500      	movls	r5, #0
  40bf24:	f201 8164 	bhi.w	40d1f0 <_svfprintf_r+0x156c>
  40bf28:	f814 3b01 	ldrb.w	r3, [r4], #1
  40bf2c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40bf30:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  40bf34:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40bf38:	2809      	cmp	r0, #9
  40bf3a:	d9f5      	bls.n	40bf28 <_svfprintf_r+0x2a4>
  40bf3c:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  40bf40:	46a0      	mov	r8, r4
  40bf42:	e6fa      	b.n	40bd3a <_svfprintf_r+0xb6>
  40bf44:	9b07      	ldr	r3, [sp, #28]
  40bf46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40bf4a:	9307      	str	r3, [sp, #28]
  40bf4c:	f898 3000 	ldrb.w	r3, [r8]
  40bf50:	e6f1      	b.n	40bd36 <_svfprintf_r+0xb2>
  40bf52:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40bf56:	2300      	movs	r3, #0
  40bf58:	461c      	mov	r4, r3
  40bf5a:	f818 3b01 	ldrb.w	r3, [r8], #1
  40bf5e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40bf62:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40bf66:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40bf6a:	2809      	cmp	r0, #9
  40bf6c:	d9f5      	bls.n	40bf5a <_svfprintf_r+0x2d6>
  40bf6e:	940c      	str	r4, [sp, #48]	; 0x30
  40bf70:	e6e3      	b.n	40bd3a <_svfprintf_r+0xb6>
  40bf72:	9311      	str	r3, [sp, #68]	; 0x44
  40bf74:	46ab      	mov	fp, r5
  40bf76:	2a00      	cmp	r2, #0
  40bf78:	f041 81c9 	bne.w	40d30e <_svfprintf_r+0x168a>
  40bf7c:	9b07      	ldr	r3, [sp, #28]
  40bf7e:	f043 0310 	orr.w	r3, r3, #16
  40bf82:	9307      	str	r3, [sp, #28]
  40bf84:	9b07      	ldr	r3, [sp, #28]
  40bf86:	0698      	lsls	r0, r3, #26
  40bf88:	f140 8530 	bpl.w	40c9ec <_svfprintf_r+0xd68>
  40bf8c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40bf8e:	3707      	adds	r7, #7
  40bf90:	f027 0707 	bic.w	r7, r7, #7
  40bf94:	e9d7 2300 	ldrd	r2, r3, [r7]
  40bf98:	f107 0108 	add.w	r1, r7, #8
  40bf9c:	910e      	str	r1, [sp, #56]	; 0x38
  40bf9e:	4614      	mov	r4, r2
  40bfa0:	461d      	mov	r5, r3
  40bfa2:	2a00      	cmp	r2, #0
  40bfa4:	f173 0300 	sbcs.w	r3, r3, #0
  40bfa8:	f2c0 855b 	blt.w	40ca62 <_svfprintf_r+0xdde>
  40bfac:	f1bb 0f00 	cmp.w	fp, #0
  40bfb0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40bfb4:	f2c0 8538 	blt.w	40ca28 <_svfprintf_r+0xda4>
  40bfb8:	9b07      	ldr	r3, [sp, #28]
  40bfba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40bfbe:	9307      	str	r3, [sp, #28]
  40bfc0:	ea54 0305 	orrs.w	r3, r4, r5
  40bfc4:	f000 81db 	beq.w	40c37e <_svfprintf_r+0x6fa>
  40bfc8:	2d00      	cmp	r5, #0
  40bfca:	bf08      	it	eq
  40bfcc:	2c0a      	cmpeq	r4, #10
  40bfce:	f0c0 81db 	bcc.w	40c388 <_svfprintf_r+0x704>
  40bfd2:	ae30      	add	r6, sp, #192	; 0xc0
  40bfd4:	4620      	mov	r0, r4
  40bfd6:	4629      	mov	r1, r5
  40bfd8:	220a      	movs	r2, #10
  40bfda:	2300      	movs	r3, #0
  40bfdc:	f7ff faa8 	bl	40b530 <__aeabi_uldivmod>
  40bfe0:	3230      	adds	r2, #48	; 0x30
  40bfe2:	f806 2d01 	strb.w	r2, [r6, #-1]!
  40bfe6:	4620      	mov	r0, r4
  40bfe8:	4629      	mov	r1, r5
  40bfea:	2300      	movs	r3, #0
  40bfec:	220a      	movs	r2, #10
  40bfee:	f7ff fa9f 	bl	40b530 <__aeabi_uldivmod>
  40bff2:	4604      	mov	r4, r0
  40bff4:	460d      	mov	r5, r1
  40bff6:	ea54 0305 	orrs.w	r3, r4, r5
  40bffa:	d1eb      	bne.n	40bfd4 <_svfprintf_r+0x350>
  40bffc:	ab30      	add	r3, sp, #192	; 0xc0
  40bffe:	1b9b      	subs	r3, r3, r6
  40c000:	930d      	str	r3, [sp, #52]	; 0x34
  40c002:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c004:	455b      	cmp	r3, fp
  40c006:	bfb8      	it	lt
  40c008:	465b      	movlt	r3, fp
  40c00a:	9308      	str	r3, [sp, #32]
  40c00c:	2300      	movs	r3, #0
  40c00e:	9313      	str	r3, [sp, #76]	; 0x4c
  40c010:	b117      	cbz	r7, 40c018 <_svfprintf_r+0x394>
  40c012:	9b08      	ldr	r3, [sp, #32]
  40c014:	3301      	adds	r3, #1
  40c016:	9308      	str	r3, [sp, #32]
  40c018:	9b07      	ldr	r3, [sp, #28]
  40c01a:	f013 0302 	ands.w	r3, r3, #2
  40c01e:	930f      	str	r3, [sp, #60]	; 0x3c
  40c020:	d002      	beq.n	40c028 <_svfprintf_r+0x3a4>
  40c022:	9b08      	ldr	r3, [sp, #32]
  40c024:	3302      	adds	r3, #2
  40c026:	9308      	str	r3, [sp, #32]
  40c028:	9b07      	ldr	r3, [sp, #28]
  40c02a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40c02e:	9310      	str	r3, [sp, #64]	; 0x40
  40c030:	f040 82d7 	bne.w	40c5e2 <_svfprintf_r+0x95e>
  40c034:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40c036:	9a08      	ldr	r2, [sp, #32]
  40c038:	1a9d      	subs	r5, r3, r2
  40c03a:	2d00      	cmp	r5, #0
  40c03c:	f340 82d1 	ble.w	40c5e2 <_svfprintf_r+0x95e>
  40c040:	2d10      	cmp	r5, #16
  40c042:	9925      	ldr	r1, [sp, #148]	; 0x94
  40c044:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40c046:	4f37      	ldr	r7, [pc, #220]	; (40c124 <_svfprintf_r+0x4a0>)
  40c048:	dd27      	ble.n	40c09a <_svfprintf_r+0x416>
  40c04a:	9618      	str	r6, [sp, #96]	; 0x60
  40c04c:	4648      	mov	r0, r9
  40c04e:	2410      	movs	r4, #16
  40c050:	46b9      	mov	r9, r7
  40c052:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40c054:	462f      	mov	r7, r5
  40c056:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40c058:	e004      	b.n	40c064 <_svfprintf_r+0x3e0>
  40c05a:	3f10      	subs	r7, #16
  40c05c:	2f10      	cmp	r7, #16
  40c05e:	f100 0008 	add.w	r0, r0, #8
  40c062:	dd16      	ble.n	40c092 <_svfprintf_r+0x40e>
  40c064:	3201      	adds	r2, #1
  40c066:	4b2f      	ldr	r3, [pc, #188]	; (40c124 <_svfprintf_r+0x4a0>)
  40c068:	9224      	str	r2, [sp, #144]	; 0x90
  40c06a:	3110      	adds	r1, #16
  40c06c:	2a07      	cmp	r2, #7
  40c06e:	9125      	str	r1, [sp, #148]	; 0x94
  40c070:	e880 0018 	stmia.w	r0, {r3, r4}
  40c074:	ddf1      	ble.n	40c05a <_svfprintf_r+0x3d6>
  40c076:	aa23      	add	r2, sp, #140	; 0x8c
  40c078:	4631      	mov	r1, r6
  40c07a:	4628      	mov	r0, r5
  40c07c:	f002 ff64 	bl	40ef48 <__ssprint_r>
  40c080:	2800      	cmp	r0, #0
  40c082:	f47f aef8 	bne.w	40be76 <_svfprintf_r+0x1f2>
  40c086:	3f10      	subs	r7, #16
  40c088:	2f10      	cmp	r7, #16
  40c08a:	9925      	ldr	r1, [sp, #148]	; 0x94
  40c08c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40c08e:	a830      	add	r0, sp, #192	; 0xc0
  40c090:	dce8      	bgt.n	40c064 <_svfprintf_r+0x3e0>
  40c092:	9e18      	ldr	r6, [sp, #96]	; 0x60
  40c094:	463d      	mov	r5, r7
  40c096:	464f      	mov	r7, r9
  40c098:	4681      	mov	r9, r0
  40c09a:	3201      	adds	r2, #1
  40c09c:	186c      	adds	r4, r5, r1
  40c09e:	2a07      	cmp	r2, #7
  40c0a0:	9425      	str	r4, [sp, #148]	; 0x94
  40c0a2:	9224      	str	r2, [sp, #144]	; 0x90
  40c0a4:	f8c9 7000 	str.w	r7, [r9]
  40c0a8:	f8c9 5004 	str.w	r5, [r9, #4]
  40c0ac:	f300 8428 	bgt.w	40c900 <_svfprintf_r+0xc7c>
  40c0b0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40c0b4:	f109 0908 	add.w	r9, r9, #8
  40c0b8:	b177      	cbz	r7, 40c0d8 <_svfprintf_r+0x454>
  40c0ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40c0bc:	3301      	adds	r3, #1
  40c0be:	3401      	adds	r4, #1
  40c0c0:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  40c0c4:	2201      	movs	r2, #1
  40c0c6:	2b07      	cmp	r3, #7
  40c0c8:	9425      	str	r4, [sp, #148]	; 0x94
  40c0ca:	9324      	str	r3, [sp, #144]	; 0x90
  40c0cc:	e889 0006 	stmia.w	r9, {r1, r2}
  40c0d0:	f300 83a0 	bgt.w	40c814 <_svfprintf_r+0xb90>
  40c0d4:	f109 0908 	add.w	r9, r9, #8
  40c0d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40c0da:	b16b      	cbz	r3, 40c0f8 <_svfprintf_r+0x474>
  40c0dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40c0de:	3301      	adds	r3, #1
  40c0e0:	3402      	adds	r4, #2
  40c0e2:	a91c      	add	r1, sp, #112	; 0x70
  40c0e4:	2202      	movs	r2, #2
  40c0e6:	2b07      	cmp	r3, #7
  40c0e8:	9425      	str	r4, [sp, #148]	; 0x94
  40c0ea:	9324      	str	r3, [sp, #144]	; 0x90
  40c0ec:	e889 0006 	stmia.w	r9, {r1, r2}
  40c0f0:	f300 839c 	bgt.w	40c82c <_svfprintf_r+0xba8>
  40c0f4:	f109 0908 	add.w	r9, r9, #8
  40c0f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40c0fa:	2b80      	cmp	r3, #128	; 0x80
  40c0fc:	f000 82d5 	beq.w	40c6aa <_svfprintf_r+0xa26>
  40c100:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c102:	ebc3 070b 	rsb	r7, r3, fp
  40c106:	2f00      	cmp	r7, #0
  40c108:	dd39      	ble.n	40c17e <_svfprintf_r+0x4fa>
  40c10a:	4a07      	ldr	r2, [pc, #28]	; (40c128 <_svfprintf_r+0x4a4>)
  40c10c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40c10e:	920f      	str	r2, [sp, #60]	; 0x3c
  40c110:	2f10      	cmp	r7, #16
  40c112:	dd28      	ble.n	40c166 <_svfprintf_r+0x4e2>
  40c114:	4622      	mov	r2, r4
  40c116:	f04f 0b10 	mov.w	fp, #16
  40c11a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40c11c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40c11e:	e00a      	b.n	40c136 <_svfprintf_r+0x4b2>
  40c120:	0040fbb4 	.word	0x0040fbb4
  40c124:	0040fbd4 	.word	0x0040fbd4
  40c128:	0040fb80 	.word	0x0040fb80
  40c12c:	3f10      	subs	r7, #16
  40c12e:	2f10      	cmp	r7, #16
  40c130:	f109 0908 	add.w	r9, r9, #8
  40c134:	dd16      	ble.n	40c164 <_svfprintf_r+0x4e0>
  40c136:	3301      	adds	r3, #1
  40c138:	3210      	adds	r2, #16
  40c13a:	2b07      	cmp	r3, #7
  40c13c:	9225      	str	r2, [sp, #148]	; 0x94
  40c13e:	9324      	str	r3, [sp, #144]	; 0x90
  40c140:	e889 0c00 	stmia.w	r9, {sl, fp}
  40c144:	ddf2      	ble.n	40c12c <_svfprintf_r+0x4a8>
  40c146:	aa23      	add	r2, sp, #140	; 0x8c
  40c148:	4621      	mov	r1, r4
  40c14a:	4628      	mov	r0, r5
  40c14c:	f002 fefc 	bl	40ef48 <__ssprint_r>
  40c150:	2800      	cmp	r0, #0
  40c152:	f47f ae90 	bne.w	40be76 <_svfprintf_r+0x1f2>
  40c156:	3f10      	subs	r7, #16
  40c158:	2f10      	cmp	r7, #16
  40c15a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40c15c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40c15e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40c162:	dce8      	bgt.n	40c136 <_svfprintf_r+0x4b2>
  40c164:	4614      	mov	r4, r2
  40c166:	3301      	adds	r3, #1
  40c168:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40c16a:	9324      	str	r3, [sp, #144]	; 0x90
  40c16c:	443c      	add	r4, r7
  40c16e:	2b07      	cmp	r3, #7
  40c170:	9425      	str	r4, [sp, #148]	; 0x94
  40c172:	e889 0084 	stmia.w	r9, {r2, r7}
  40c176:	f300 8341 	bgt.w	40c7fc <_svfprintf_r+0xb78>
  40c17a:	f109 0908 	add.w	r9, r9, #8
  40c17e:	9b07      	ldr	r3, [sp, #28]
  40c180:	05da      	lsls	r2, r3, #23
  40c182:	f100 8230 	bmi.w	40c5e6 <_svfprintf_r+0x962>
  40c186:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40c188:	990d      	ldr	r1, [sp, #52]	; 0x34
  40c18a:	f8c9 6000 	str.w	r6, [r9]
  40c18e:	3301      	adds	r3, #1
  40c190:	440c      	add	r4, r1
  40c192:	2b07      	cmp	r3, #7
  40c194:	9425      	str	r4, [sp, #148]	; 0x94
  40c196:	f8c9 1004 	str.w	r1, [r9, #4]
  40c19a:	9324      	str	r3, [sp, #144]	; 0x90
  40c19c:	f300 8318 	bgt.w	40c7d0 <_svfprintf_r+0xb4c>
  40c1a0:	f109 0908 	add.w	r9, r9, #8
  40c1a4:	9b07      	ldr	r3, [sp, #28]
  40c1a6:	0759      	lsls	r1, r3, #29
  40c1a8:	d53f      	bpl.n	40c22a <_svfprintf_r+0x5a6>
  40c1aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40c1ac:	9a08      	ldr	r2, [sp, #32]
  40c1ae:	1a9d      	subs	r5, r3, r2
  40c1b0:	2d00      	cmp	r5, #0
  40c1b2:	dd3a      	ble.n	40c22a <_svfprintf_r+0x5a6>
  40c1b4:	2d10      	cmp	r5, #16
  40c1b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40c1b8:	4fbc      	ldr	r7, [pc, #752]	; (40c4ac <_svfprintf_r+0x828>)
  40c1ba:	dd23      	ble.n	40c204 <_svfprintf_r+0x580>
  40c1bc:	4622      	mov	r2, r4
  40c1be:	2610      	movs	r6, #16
  40c1c0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40c1c4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40c1c6:	e004      	b.n	40c1d2 <_svfprintf_r+0x54e>
  40c1c8:	3d10      	subs	r5, #16
  40c1ca:	2d10      	cmp	r5, #16
  40c1cc:	f109 0908 	add.w	r9, r9, #8
  40c1d0:	dd17      	ble.n	40c202 <_svfprintf_r+0x57e>
  40c1d2:	3301      	adds	r3, #1
  40c1d4:	49b5      	ldr	r1, [pc, #724]	; (40c4ac <_svfprintf_r+0x828>)
  40c1d6:	9324      	str	r3, [sp, #144]	; 0x90
  40c1d8:	3210      	adds	r2, #16
  40c1da:	2b07      	cmp	r3, #7
  40c1dc:	9225      	str	r2, [sp, #148]	; 0x94
  40c1de:	e889 0042 	stmia.w	r9, {r1, r6}
  40c1e2:	ddf1      	ble.n	40c1c8 <_svfprintf_r+0x544>
  40c1e4:	aa23      	add	r2, sp, #140	; 0x8c
  40c1e6:	4621      	mov	r1, r4
  40c1e8:	4658      	mov	r0, fp
  40c1ea:	f002 fead 	bl	40ef48 <__ssprint_r>
  40c1ee:	2800      	cmp	r0, #0
  40c1f0:	f47f ae41 	bne.w	40be76 <_svfprintf_r+0x1f2>
  40c1f4:	3d10      	subs	r5, #16
  40c1f6:	2d10      	cmp	r5, #16
  40c1f8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40c1fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40c1fc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40c200:	dce7      	bgt.n	40c1d2 <_svfprintf_r+0x54e>
  40c202:	4614      	mov	r4, r2
  40c204:	3301      	adds	r3, #1
  40c206:	442c      	add	r4, r5
  40c208:	2b07      	cmp	r3, #7
  40c20a:	9425      	str	r4, [sp, #148]	; 0x94
  40c20c:	9324      	str	r3, [sp, #144]	; 0x90
  40c20e:	f8c9 7000 	str.w	r7, [r9]
  40c212:	f8c9 5004 	str.w	r5, [r9, #4]
  40c216:	dd08      	ble.n	40c22a <_svfprintf_r+0x5a6>
  40c218:	aa23      	add	r2, sp, #140	; 0x8c
  40c21a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40c21c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c21e:	f002 fe93 	bl	40ef48 <__ssprint_r>
  40c222:	2800      	cmp	r0, #0
  40c224:	f47f ae27 	bne.w	40be76 <_svfprintf_r+0x1f2>
  40c228:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40c22a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40c22c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40c22e:	9908      	ldr	r1, [sp, #32]
  40c230:	428a      	cmp	r2, r1
  40c232:	bfac      	ite	ge
  40c234:	189b      	addge	r3, r3, r2
  40c236:	185b      	addlt	r3, r3, r1
  40c238:	930b      	str	r3, [sp, #44]	; 0x2c
  40c23a:	2c00      	cmp	r4, #0
  40c23c:	f040 82d4 	bne.w	40c7e8 <_svfprintf_r+0xb64>
  40c240:	2300      	movs	r3, #0
  40c242:	9324      	str	r3, [sp, #144]	; 0x90
  40c244:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40c248:	e542      	b.n	40bcd0 <_svfprintf_r+0x4c>
  40c24a:	9311      	str	r3, [sp, #68]	; 0x44
  40c24c:	46ab      	mov	fp, r5
  40c24e:	2a00      	cmp	r2, #0
  40c250:	f041 8059 	bne.w	40d306 <_svfprintf_r+0x1682>
  40c254:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40c256:	3707      	adds	r7, #7
  40c258:	f027 0307 	bic.w	r3, r7, #7
  40c25c:	f103 0208 	add.w	r2, r3, #8
  40c260:	920e      	str	r2, [sp, #56]	; 0x38
  40c262:	681a      	ldr	r2, [r3, #0]
  40c264:	9214      	str	r2, [sp, #80]	; 0x50
  40c266:	685b      	ldr	r3, [r3, #4]
  40c268:	9315      	str	r3, [sp, #84]	; 0x54
  40c26a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40c26c:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40c26e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40c272:	4628      	mov	r0, r5
  40c274:	4621      	mov	r1, r4
  40c276:	f04f 32ff 	mov.w	r2, #4294967295
  40c27a:	4b8d      	ldr	r3, [pc, #564]	; (40c4b0 <_svfprintf_r+0x82c>)
  40c27c:	f7fe fdd0 	bl	40ae20 <__aeabi_dcmpun>
  40c280:	2800      	cmp	r0, #0
  40c282:	f040 84c1 	bne.w	40cc08 <_svfprintf_r+0xf84>
  40c286:	4628      	mov	r0, r5
  40c288:	4621      	mov	r1, r4
  40c28a:	f04f 32ff 	mov.w	r2, #4294967295
  40c28e:	4b88      	ldr	r3, [pc, #544]	; (40c4b0 <_svfprintf_r+0x82c>)
  40c290:	f7fe fda8 	bl	40ade4 <__aeabi_dcmple>
  40c294:	2800      	cmp	r0, #0
  40c296:	f040 84b7 	bne.w	40cc08 <_svfprintf_r+0xf84>
  40c29a:	9814      	ldr	r0, [sp, #80]	; 0x50
  40c29c:	9915      	ldr	r1, [sp, #84]	; 0x54
  40c29e:	2200      	movs	r2, #0
  40c2a0:	2300      	movs	r3, #0
  40c2a2:	f7fe fd95 	bl	40add0 <__aeabi_dcmplt>
  40c2a6:	2800      	cmp	r0, #0
  40c2a8:	f040 874b 	bne.w	40d142 <_svfprintf_r+0x14be>
  40c2ac:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40c2b0:	4e80      	ldr	r6, [pc, #512]	; (40c4b4 <_svfprintf_r+0x830>)
  40c2b2:	4b81      	ldr	r3, [pc, #516]	; (40c4b8 <_svfprintf_r+0x834>)
  40c2b4:	9907      	ldr	r1, [sp, #28]
  40c2b6:	f021 0180 	bic.w	r1, r1, #128	; 0x80
  40c2ba:	9107      	str	r1, [sp, #28]
  40c2bc:	9911      	ldr	r1, [sp, #68]	; 0x44
  40c2be:	2203      	movs	r2, #3
  40c2c0:	f04f 0b00 	mov.w	fp, #0
  40c2c4:	9208      	str	r2, [sp, #32]
  40c2c6:	2947      	cmp	r1, #71	; 0x47
  40c2c8:	bfd8      	it	le
  40c2ca:	461e      	movle	r6, r3
  40c2cc:	920d      	str	r2, [sp, #52]	; 0x34
  40c2ce:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  40c2d2:	e69d      	b.n	40c010 <_svfprintf_r+0x38c>
  40c2d4:	9b07      	ldr	r3, [sp, #28]
  40c2d6:	f043 0308 	orr.w	r3, r3, #8
  40c2da:	9307      	str	r3, [sp, #28]
  40c2dc:	f898 3000 	ldrb.w	r3, [r8]
  40c2e0:	e529      	b.n	40bd36 <_svfprintf_r+0xb2>
  40c2e2:	9311      	str	r3, [sp, #68]	; 0x44
  40c2e4:	46ab      	mov	fp, r5
  40c2e6:	2a00      	cmp	r2, #0
  40c2e8:	f041 8009 	bne.w	40d2fe <_svfprintf_r+0x167a>
  40c2ec:	9b07      	ldr	r3, [sp, #28]
  40c2ee:	f043 0310 	orr.w	r3, r3, #16
  40c2f2:	9307      	str	r3, [sp, #28]
  40c2f4:	9a07      	ldr	r2, [sp, #28]
  40c2f6:	f012 0320 	ands.w	r3, r2, #32
  40c2fa:	f47f add2 	bne.w	40bea2 <_svfprintf_r+0x21e>
  40c2fe:	9907      	ldr	r1, [sp, #28]
  40c300:	f011 0210 	ands.w	r2, r1, #16
  40c304:	f000 8507 	beq.w	40cd16 <_svfprintf_r+0x1092>
  40c308:	980e      	ldr	r0, [sp, #56]	; 0x38
  40c30a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40c30e:	f1bb 0f00 	cmp.w	fp, #0
  40c312:	6804      	ldr	r4, [r0, #0]
  40c314:	f100 0704 	add.w	r7, r0, #4
  40c318:	f04f 0500 	mov.w	r5, #0
  40c31c:	f2c0 8521 	blt.w	40cd62 <_svfprintf_r+0x10de>
  40c320:	460a      	mov	r2, r1
  40c322:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  40c326:	9207      	str	r2, [sp, #28]
  40c328:	ea54 0205 	orrs.w	r2, r4, r5
  40c32c:	970e      	str	r7, [sp, #56]	; 0x38
  40c32e:	f000 8143 	beq.w	40c5b8 <_svfprintf_r+0x934>
  40c332:	461f      	mov	r7, r3
  40c334:	e5cb      	b.n	40bece <_svfprintf_r+0x24a>
  40c336:	9311      	str	r3, [sp, #68]	; 0x44
  40c338:	46ab      	mov	fp, r5
  40c33a:	2a00      	cmp	r2, #0
  40c33c:	f040 87d7 	bne.w	40d2ee <_svfprintf_r+0x166a>
  40c340:	9b07      	ldr	r3, [sp, #28]
  40c342:	f043 0310 	orr.w	r3, r3, #16
  40c346:	9307      	str	r3, [sp, #28]
  40c348:	9a07      	ldr	r2, [sp, #28]
  40c34a:	f012 0320 	ands.w	r3, r2, #32
  40c34e:	f000 8332 	beq.w	40c9b6 <_svfprintf_r+0xd32>
  40c352:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40c354:	3707      	adds	r7, #7
  40c356:	f027 0307 	bic.w	r3, r7, #7
  40c35a:	2700      	movs	r7, #0
  40c35c:	f103 0108 	add.w	r1, r3, #8
  40c360:	45bb      	cmp	fp, r7
  40c362:	910e      	str	r1, [sp, #56]	; 0x38
  40c364:	e9d3 4500 	ldrd	r4, r5, [r3]
  40c368:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40c36c:	f2c0 835c 	blt.w	40ca28 <_svfprintf_r+0xda4>
  40c370:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  40c374:	9307      	str	r3, [sp, #28]
  40c376:	ea54 0305 	orrs.w	r3, r4, r5
  40c37a:	f47f ae25 	bne.w	40bfc8 <_svfprintf_r+0x344>
  40c37e:	f1bb 0f00 	cmp.w	fp, #0
  40c382:	f000 80fe 	beq.w	40c582 <_svfprintf_r+0x8fe>
  40c386:	2400      	movs	r4, #0
  40c388:	ae40      	add	r6, sp, #256	; 0x100
  40c38a:	3430      	adds	r4, #48	; 0x30
  40c38c:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40c390:	e634      	b.n	40bffc <_svfprintf_r+0x378>
  40c392:	9311      	str	r3, [sp, #68]	; 0x44
  40c394:	46ab      	mov	fp, r5
  40c396:	2a00      	cmp	r2, #0
  40c398:	f040 87a5 	bne.w	40d2e6 <_svfprintf_r+0x1662>
  40c39c:	9b07      	ldr	r3, [sp, #28]
  40c39e:	4847      	ldr	r0, [pc, #284]	; (40c4bc <_svfprintf_r+0x838>)
  40c3a0:	069d      	lsls	r5, r3, #26
  40c3a2:	f140 8097 	bpl.w	40c4d4 <_svfprintf_r+0x850>
  40c3a6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40c3a8:	3707      	adds	r7, #7
  40c3aa:	f027 0307 	bic.w	r3, r7, #7
  40c3ae:	e9d3 4500 	ldrd	r4, r5, [r3]
  40c3b2:	f103 0208 	add.w	r2, r3, #8
  40c3b6:	920e      	str	r2, [sp, #56]	; 0x38
  40c3b8:	9a07      	ldr	r2, [sp, #28]
  40c3ba:	f012 0701 	ands.w	r7, r2, #1
  40c3be:	f000 8241 	beq.w	40c844 <_svfprintf_r+0xbc0>
  40c3c2:	ea54 0305 	orrs.w	r3, r4, r5
  40c3c6:	f000 84f5 	beq.w	40cdb4 <_svfprintf_r+0x1130>
  40c3ca:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40c3ce:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  40c3d2:	2700      	movs	r7, #0
  40c3d4:	9a07      	ldr	r2, [sp, #28]
  40c3d6:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40c3da:	2330      	movs	r3, #48	; 0x30
  40c3dc:	45bb      	cmp	fp, r7
  40c3de:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  40c3e2:	f042 0302 	orr.w	r3, r2, #2
  40c3e6:	f2c0 86a9 	blt.w	40d13c <_svfprintf_r+0x14b8>
  40c3ea:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  40c3ee:	f043 0302 	orr.w	r3, r3, #2
  40c3f2:	9307      	str	r3, [sp, #28]
  40c3f4:	ae30      	add	r6, sp, #192	; 0xc0
  40c3f6:	0923      	lsrs	r3, r4, #4
  40c3f8:	f004 010f 	and.w	r1, r4, #15
  40c3fc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  40c400:	092a      	lsrs	r2, r5, #4
  40c402:	461c      	mov	r4, r3
  40c404:	4615      	mov	r5, r2
  40c406:	5c43      	ldrb	r3, [r0, r1]
  40c408:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40c40c:	ea54 0305 	orrs.w	r3, r4, r5
  40c410:	d1f1      	bne.n	40c3f6 <_svfprintf_r+0x772>
  40c412:	e5f3      	b.n	40bffc <_svfprintf_r+0x378>
  40c414:	990e      	ldr	r1, [sp, #56]	; 0x38
  40c416:	9311      	str	r3, [sp, #68]	; 0x44
  40c418:	680a      	ldr	r2, [r1, #0]
  40c41a:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  40c41e:	2300      	movs	r3, #0
  40c420:	460a      	mov	r2, r1
  40c422:	461f      	mov	r7, r3
  40c424:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40c428:	3204      	adds	r2, #4
  40c42a:	2301      	movs	r3, #1
  40c42c:	9308      	str	r3, [sp, #32]
  40c42e:	46bb      	mov	fp, r7
  40c430:	9713      	str	r7, [sp, #76]	; 0x4c
  40c432:	920e      	str	r2, [sp, #56]	; 0x38
  40c434:	930d      	str	r3, [sp, #52]	; 0x34
  40c436:	ae26      	add	r6, sp, #152	; 0x98
  40c438:	e5ee      	b.n	40c018 <_svfprintf_r+0x394>
  40c43a:	9311      	str	r3, [sp, #68]	; 0x44
  40c43c:	46ab      	mov	fp, r5
  40c43e:	2a00      	cmp	r2, #0
  40c440:	f43f ada0 	beq.w	40bf84 <_svfprintf_r+0x300>
  40c444:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40c448:	e59c      	b.n	40bf84 <_svfprintf_r+0x300>
  40c44a:	9b07      	ldr	r3, [sp, #28]
  40c44c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40c450:	9307      	str	r3, [sp, #28]
  40c452:	f898 3000 	ldrb.w	r3, [r8]
  40c456:	e46e      	b.n	40bd36 <_svfprintf_r+0xb2>
  40c458:	f898 3000 	ldrb.w	r3, [r8]
  40c45c:	2900      	cmp	r1, #0
  40c45e:	f47f ac6a 	bne.w	40bd36 <_svfprintf_r+0xb2>
  40c462:	2201      	movs	r2, #1
  40c464:	2120      	movs	r1, #32
  40c466:	e466      	b.n	40bd36 <_svfprintf_r+0xb2>
  40c468:	9b07      	ldr	r3, [sp, #28]
  40c46a:	f043 0301 	orr.w	r3, r3, #1
  40c46e:	9307      	str	r3, [sp, #28]
  40c470:	f898 3000 	ldrb.w	r3, [r8]
  40c474:	e45f      	b.n	40bd36 <_svfprintf_r+0xb2>
  40c476:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40c478:	6823      	ldr	r3, [r4, #0]
  40c47a:	930c      	str	r3, [sp, #48]	; 0x30
  40c47c:	4618      	mov	r0, r3
  40c47e:	2800      	cmp	r0, #0
  40c480:	4623      	mov	r3, r4
  40c482:	f103 0304 	add.w	r3, r3, #4
  40c486:	f6ff acb8 	blt.w	40bdfa <_svfprintf_r+0x176>
  40c48a:	930e      	str	r3, [sp, #56]	; 0x38
  40c48c:	f898 3000 	ldrb.w	r3, [r8]
  40c490:	e451      	b.n	40bd36 <_svfprintf_r+0xb2>
  40c492:	f898 3000 	ldrb.w	r3, [r8]
  40c496:	2201      	movs	r2, #1
  40c498:	212b      	movs	r1, #43	; 0x2b
  40c49a:	e44c      	b.n	40bd36 <_svfprintf_r+0xb2>
  40c49c:	9311      	str	r3, [sp, #68]	; 0x44
  40c49e:	46ab      	mov	fp, r5
  40c4a0:	2a00      	cmp	r2, #0
  40c4a2:	f43f af51 	beq.w	40c348 <_svfprintf_r+0x6c4>
  40c4a6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40c4aa:	e74d      	b.n	40c348 <_svfprintf_r+0x6c4>
  40c4ac:	0040fbd4 	.word	0x0040fbd4
  40c4b0:	7fefffff 	.word	0x7fefffff
  40c4b4:	0040fb94 	.word	0x0040fb94
  40c4b8:	0040fb90 	.word	0x0040fb90
  40c4bc:	0040fba0 	.word	0x0040fba0
  40c4c0:	9311      	str	r3, [sp, #68]	; 0x44
  40c4c2:	46ab      	mov	fp, r5
  40c4c4:	2a00      	cmp	r2, #0
  40c4c6:	f040 8703 	bne.w	40d2d0 <_svfprintf_r+0x164c>
  40c4ca:	9b07      	ldr	r3, [sp, #28]
  40c4cc:	4899      	ldr	r0, [pc, #612]	; (40c734 <_svfprintf_r+0xab0>)
  40c4ce:	069d      	lsls	r5, r3, #26
  40c4d0:	f53f af69 	bmi.w	40c3a6 <_svfprintf_r+0x722>
  40c4d4:	9b07      	ldr	r3, [sp, #28]
  40c4d6:	06dc      	lsls	r4, r3, #27
  40c4d8:	f140 845e 	bpl.w	40cd98 <_svfprintf_r+0x1114>
  40c4dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40c4de:	4613      	mov	r3, r2
  40c4e0:	3304      	adds	r3, #4
  40c4e2:	6814      	ldr	r4, [r2, #0]
  40c4e4:	930e      	str	r3, [sp, #56]	; 0x38
  40c4e6:	2500      	movs	r5, #0
  40c4e8:	e766      	b.n	40c3b8 <_svfprintf_r+0x734>
  40c4ea:	f898 3000 	ldrb.w	r3, [r8]
  40c4ee:	2b6c      	cmp	r3, #108	; 0x6c
  40c4f0:	f000 84e1 	beq.w	40ceb6 <_svfprintf_r+0x1232>
  40c4f4:	9807      	ldr	r0, [sp, #28]
  40c4f6:	f040 0010 	orr.w	r0, r0, #16
  40c4fa:	9007      	str	r0, [sp, #28]
  40c4fc:	e41b      	b.n	40bd36 <_svfprintf_r+0xb2>
  40c4fe:	2a00      	cmp	r2, #0
  40c500:	f040 86db 	bne.w	40d2ba <_svfprintf_r+0x1636>
  40c504:	9b07      	ldr	r3, [sp, #28]
  40c506:	069b      	lsls	r3, r3, #26
  40c508:	f140 842f 	bpl.w	40cd6a <_svfprintf_r+0x10e6>
  40c50c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40c50e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40c510:	6813      	ldr	r3, [r2, #0]
  40c512:	17cd      	asrs	r5, r1, #31
  40c514:	4608      	mov	r0, r1
  40c516:	3204      	adds	r2, #4
  40c518:	4629      	mov	r1, r5
  40c51a:	920e      	str	r2, [sp, #56]	; 0x38
  40c51c:	e9c3 0100 	strd	r0, r1, [r3]
  40c520:	f7ff bbd6 	b.w	40bcd0 <_svfprintf_r+0x4c>
  40c524:	9b07      	ldr	r3, [sp, #28]
  40c526:	f043 0320 	orr.w	r3, r3, #32
  40c52a:	9307      	str	r3, [sp, #28]
  40c52c:	f898 3000 	ldrb.w	r3, [r8]
  40c530:	e401      	b.n	40bd36 <_svfprintf_r+0xb2>
  40c532:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40c534:	9311      	str	r3, [sp, #68]	; 0x44
  40c536:	6816      	ldr	r6, [r2, #0]
  40c538:	2400      	movs	r4, #0
  40c53a:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  40c53e:	1d17      	adds	r7, r2, #4
  40c540:	2e00      	cmp	r6, #0
  40c542:	f000 85bd 	beq.w	40d0c0 <_svfprintf_r+0x143c>
  40c546:	2d00      	cmp	r5, #0
  40c548:	f2c0 850f 	blt.w	40cf6a <_svfprintf_r+0x12e6>
  40c54c:	462a      	mov	r2, r5
  40c54e:	4621      	mov	r1, r4
  40c550:	4630      	mov	r0, r6
  40c552:	f002 f985 	bl	40e860 <memchr>
  40c556:	2800      	cmp	r0, #0
  40c558:	f000 8604 	beq.w	40d164 <_svfprintf_r+0x14e0>
  40c55c:	1b83      	subs	r3, r0, r6
  40c55e:	930d      	str	r3, [sp, #52]	; 0x34
  40c560:	46a3      	mov	fp, r4
  40c562:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40c566:	970e      	str	r7, [sp, #56]	; 0x38
  40c568:	9308      	str	r3, [sp, #32]
  40c56a:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  40c56e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40c572:	e54d      	b.n	40c010 <_svfprintf_r+0x38c>
  40c574:	486f      	ldr	r0, [pc, #444]	; (40c734 <_svfprintf_r+0xab0>)
  40c576:	9211      	str	r2, [sp, #68]	; 0x44
  40c578:	f1bb 0f00 	cmp.w	fp, #0
  40c57c:	f040 8173 	bne.w	40c866 <_svfprintf_r+0xbe2>
  40c580:	465f      	mov	r7, fp
  40c582:	f04f 0b00 	mov.w	fp, #0
  40c586:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  40c58a:	ae30      	add	r6, sp, #192	; 0xc0
  40c58c:	e539      	b.n	40c002 <_svfprintf_r+0x37e>
  40c58e:	9311      	str	r3, [sp, #68]	; 0x44
  40c590:	2a00      	cmp	r2, #0
  40c592:	f040 86b0 	bne.w	40d2f6 <_svfprintf_r+0x1672>
  40c596:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c598:	2a00      	cmp	r2, #0
  40c59a:	f43f ac65 	beq.w	40be68 <_svfprintf_r+0x1e4>
  40c59e:	2300      	movs	r3, #0
  40c5a0:	2101      	movs	r1, #1
  40c5a2:	461f      	mov	r7, r3
  40c5a4:	9108      	str	r1, [sp, #32]
  40c5a6:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  40c5aa:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40c5ae:	469b      	mov	fp, r3
  40c5b0:	9313      	str	r3, [sp, #76]	; 0x4c
  40c5b2:	910d      	str	r1, [sp, #52]	; 0x34
  40c5b4:	ae26      	add	r6, sp, #152	; 0x98
  40c5b6:	e52f      	b.n	40c018 <_svfprintf_r+0x394>
  40c5b8:	f1bb 0f00 	cmp.w	fp, #0
  40c5bc:	f000 85dd 	beq.w	40d17a <_svfprintf_r+0x14f6>
  40c5c0:	2700      	movs	r7, #0
  40c5c2:	2400      	movs	r4, #0
  40c5c4:	2500      	movs	r5, #0
  40c5c6:	e482      	b.n	40bece <_svfprintf_r+0x24a>
  40c5c8:	485a      	ldr	r0, [pc, #360]	; (40c734 <_svfprintf_r+0xab0>)
  40c5ca:	9307      	str	r3, [sp, #28]
  40c5cc:	9211      	str	r2, [sp, #68]	; 0x44
  40c5ce:	ea54 0305 	orrs.w	r3, r4, r5
  40c5d2:	970e      	str	r7, [sp, #56]	; 0x38
  40c5d4:	f04f 0700 	mov.w	r7, #0
  40c5d8:	f47f af0c 	bne.w	40c3f4 <_svfprintf_r+0x770>
  40c5dc:	2400      	movs	r4, #0
  40c5de:	2500      	movs	r5, #0
  40c5e0:	e708      	b.n	40c3f4 <_svfprintf_r+0x770>
  40c5e2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40c5e4:	e568      	b.n	40c0b8 <_svfprintf_r+0x434>
  40c5e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40c5e8:	2b65      	cmp	r3, #101	; 0x65
  40c5ea:	f340 80a9 	ble.w	40c740 <_svfprintf_r+0xabc>
  40c5ee:	9814      	ldr	r0, [sp, #80]	; 0x50
  40c5f0:	9915      	ldr	r1, [sp, #84]	; 0x54
  40c5f2:	2200      	movs	r2, #0
  40c5f4:	2300      	movs	r3, #0
  40c5f6:	f7fe fbe1 	bl	40adbc <__aeabi_dcmpeq>
  40c5fa:	2800      	cmp	r0, #0
  40c5fc:	f000 8135 	beq.w	40c86a <_svfprintf_r+0xbe6>
  40c600:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40c602:	4a4d      	ldr	r2, [pc, #308]	; (40c738 <_svfprintf_r+0xab4>)
  40c604:	f8c9 2000 	str.w	r2, [r9]
  40c608:	3301      	adds	r3, #1
  40c60a:	3401      	adds	r4, #1
  40c60c:	2201      	movs	r2, #1
  40c60e:	2b07      	cmp	r3, #7
  40c610:	9425      	str	r4, [sp, #148]	; 0x94
  40c612:	9324      	str	r3, [sp, #144]	; 0x90
  40c614:	f8c9 2004 	str.w	r2, [r9, #4]
  40c618:	f300 83e6 	bgt.w	40cde8 <_svfprintf_r+0x1164>
  40c61c:	f109 0908 	add.w	r9, r9, #8
  40c620:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40c622:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40c624:	4293      	cmp	r3, r2
  40c626:	db03      	blt.n	40c630 <_svfprintf_r+0x9ac>
  40c628:	9b07      	ldr	r3, [sp, #28]
  40c62a:	07db      	lsls	r3, r3, #31
  40c62c:	f57f adba 	bpl.w	40c1a4 <_svfprintf_r+0x520>
  40c630:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40c632:	9916      	ldr	r1, [sp, #88]	; 0x58
  40c634:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40c636:	f8c9 2000 	str.w	r2, [r9]
  40c63a:	3301      	adds	r3, #1
  40c63c:	440c      	add	r4, r1
  40c63e:	2b07      	cmp	r3, #7
  40c640:	9425      	str	r4, [sp, #148]	; 0x94
  40c642:	f8c9 1004 	str.w	r1, [r9, #4]
  40c646:	9324      	str	r3, [sp, #144]	; 0x90
  40c648:	f300 843f 	bgt.w	40ceca <_svfprintf_r+0x1246>
  40c64c:	f109 0908 	add.w	r9, r9, #8
  40c650:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40c652:	1e5d      	subs	r5, r3, #1
  40c654:	2d00      	cmp	r5, #0
  40c656:	f77f ada5 	ble.w	40c1a4 <_svfprintf_r+0x520>
  40c65a:	4a38      	ldr	r2, [pc, #224]	; (40c73c <_svfprintf_r+0xab8>)
  40c65c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40c65e:	920f      	str	r2, [sp, #60]	; 0x3c
  40c660:	2d10      	cmp	r5, #16
  40c662:	f340 81e6 	ble.w	40ca32 <_svfprintf_r+0xdae>
  40c666:	2610      	movs	r6, #16
  40c668:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40c66a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40c66e:	e005      	b.n	40c67c <_svfprintf_r+0x9f8>
  40c670:	f109 0908 	add.w	r9, r9, #8
  40c674:	3d10      	subs	r5, #16
  40c676:	2d10      	cmp	r5, #16
  40c678:	f340 81db 	ble.w	40ca32 <_svfprintf_r+0xdae>
  40c67c:	3301      	adds	r3, #1
  40c67e:	3410      	adds	r4, #16
  40c680:	2b07      	cmp	r3, #7
  40c682:	9425      	str	r4, [sp, #148]	; 0x94
  40c684:	9324      	str	r3, [sp, #144]	; 0x90
  40c686:	f8c9 a000 	str.w	sl, [r9]
  40c68a:	f8c9 6004 	str.w	r6, [r9, #4]
  40c68e:	ddef      	ble.n	40c670 <_svfprintf_r+0x9ec>
  40c690:	aa23      	add	r2, sp, #140	; 0x8c
  40c692:	4659      	mov	r1, fp
  40c694:	4638      	mov	r0, r7
  40c696:	f002 fc57 	bl	40ef48 <__ssprint_r>
  40c69a:	2800      	cmp	r0, #0
  40c69c:	f47f abeb 	bne.w	40be76 <_svfprintf_r+0x1f2>
  40c6a0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40c6a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40c6a4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40c6a8:	e7e4      	b.n	40c674 <_svfprintf_r+0x9f0>
  40c6aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40c6ac:	9a08      	ldr	r2, [sp, #32]
  40c6ae:	1a9f      	subs	r7, r3, r2
  40c6b0:	2f00      	cmp	r7, #0
  40c6b2:	f77f ad25 	ble.w	40c100 <_svfprintf_r+0x47c>
  40c6b6:	4a21      	ldr	r2, [pc, #132]	; (40c73c <_svfprintf_r+0xab8>)
  40c6b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40c6ba:	920f      	str	r2, [sp, #60]	; 0x3c
  40c6bc:	2f10      	cmp	r7, #16
  40c6be:	dd2b      	ble.n	40c718 <_svfprintf_r+0xa94>
  40c6c0:	464a      	mov	r2, r9
  40c6c2:	4621      	mov	r1, r4
  40c6c4:	46b9      	mov	r9, r7
  40c6c6:	2510      	movs	r5, #16
  40c6c8:	4637      	mov	r7, r6
  40c6ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40c6cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40c6ce:	e006      	b.n	40c6de <_svfprintf_r+0xa5a>
  40c6d0:	f1a9 0910 	sub.w	r9, r9, #16
  40c6d4:	f1b9 0f10 	cmp.w	r9, #16
  40c6d8:	f102 0208 	add.w	r2, r2, #8
  40c6dc:	dd18      	ble.n	40c710 <_svfprintf_r+0xa8c>
  40c6de:	3301      	adds	r3, #1
  40c6e0:	3110      	adds	r1, #16
  40c6e2:	2b07      	cmp	r3, #7
  40c6e4:	9125      	str	r1, [sp, #148]	; 0x94
  40c6e6:	9324      	str	r3, [sp, #144]	; 0x90
  40c6e8:	f8c2 a000 	str.w	sl, [r2]
  40c6ec:	6055      	str	r5, [r2, #4]
  40c6ee:	ddef      	ble.n	40c6d0 <_svfprintf_r+0xa4c>
  40c6f0:	aa23      	add	r2, sp, #140	; 0x8c
  40c6f2:	4631      	mov	r1, r6
  40c6f4:	4620      	mov	r0, r4
  40c6f6:	f002 fc27 	bl	40ef48 <__ssprint_r>
  40c6fa:	2800      	cmp	r0, #0
  40c6fc:	f47f abbb 	bne.w	40be76 <_svfprintf_r+0x1f2>
  40c700:	f1a9 0910 	sub.w	r9, r9, #16
  40c704:	f1b9 0f10 	cmp.w	r9, #16
  40c708:	9925      	ldr	r1, [sp, #148]	; 0x94
  40c70a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40c70c:	aa30      	add	r2, sp, #192	; 0xc0
  40c70e:	dce6      	bgt.n	40c6de <_svfprintf_r+0xa5a>
  40c710:	463e      	mov	r6, r7
  40c712:	460c      	mov	r4, r1
  40c714:	464f      	mov	r7, r9
  40c716:	4691      	mov	r9, r2
  40c718:	3301      	adds	r3, #1
  40c71a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40c71c:	9324      	str	r3, [sp, #144]	; 0x90
  40c71e:	443c      	add	r4, r7
  40c720:	2b07      	cmp	r3, #7
  40c722:	9425      	str	r4, [sp, #148]	; 0x94
  40c724:	e889 0084 	stmia.w	r9, {r2, r7}
  40c728:	f300 8245 	bgt.w	40cbb6 <_svfprintf_r+0xf32>
  40c72c:	f109 0908 	add.w	r9, r9, #8
  40c730:	e4e6      	b.n	40c100 <_svfprintf_r+0x47c>
  40c732:	bf00      	nop
  40c734:	0040fbb4 	.word	0x0040fbb4
  40c738:	0040fbd0 	.word	0x0040fbd0
  40c73c:	0040fb80 	.word	0x0040fb80
  40c740:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40c742:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40c744:	2b01      	cmp	r3, #1
  40c746:	f340 8208 	ble.w	40cb5a <_svfprintf_r+0xed6>
  40c74a:	3501      	adds	r5, #1
  40c74c:	3401      	adds	r4, #1
  40c74e:	2301      	movs	r3, #1
  40c750:	2d07      	cmp	r5, #7
  40c752:	9425      	str	r4, [sp, #148]	; 0x94
  40c754:	9524      	str	r5, [sp, #144]	; 0x90
  40c756:	f8c9 6000 	str.w	r6, [r9]
  40c75a:	f8c9 3004 	str.w	r3, [r9, #4]
  40c75e:	f300 820d 	bgt.w	40cb7c <_svfprintf_r+0xef8>
  40c762:	f109 0908 	add.w	r9, r9, #8
  40c766:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40c768:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40c76a:	f8c9 3000 	str.w	r3, [r9]
  40c76e:	3501      	adds	r5, #1
  40c770:	4414      	add	r4, r2
  40c772:	2d07      	cmp	r5, #7
  40c774:	9425      	str	r4, [sp, #148]	; 0x94
  40c776:	9524      	str	r5, [sp, #144]	; 0x90
  40c778:	f8c9 2004 	str.w	r2, [r9, #4]
  40c77c:	f300 820e 	bgt.w	40cb9c <_svfprintf_r+0xf18>
  40c780:	f109 0908 	add.w	r9, r9, #8
  40c784:	2300      	movs	r3, #0
  40c786:	9814      	ldr	r0, [sp, #80]	; 0x50
  40c788:	9915      	ldr	r1, [sp, #84]	; 0x54
  40c78a:	2200      	movs	r2, #0
  40c78c:	f7fe fb16 	bl	40adbc <__aeabi_dcmpeq>
  40c790:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40c792:	2800      	cmp	r0, #0
  40c794:	f040 80c3 	bne.w	40c91e <_svfprintf_r+0xc9a>
  40c798:	3b01      	subs	r3, #1
  40c79a:	3501      	adds	r5, #1
  40c79c:	3601      	adds	r6, #1
  40c79e:	441c      	add	r4, r3
  40c7a0:	2d07      	cmp	r5, #7
  40c7a2:	9524      	str	r5, [sp, #144]	; 0x90
  40c7a4:	9425      	str	r4, [sp, #148]	; 0x94
  40c7a6:	f8c9 6000 	str.w	r6, [r9]
  40c7aa:	f8c9 3004 	str.w	r3, [r9, #4]
  40c7ae:	f300 80f5 	bgt.w	40c99c <_svfprintf_r+0xd18>
  40c7b2:	f109 0908 	add.w	r9, r9, #8
  40c7b6:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40c7b8:	f8c9 2004 	str.w	r2, [r9, #4]
  40c7bc:	3501      	adds	r5, #1
  40c7be:	4414      	add	r4, r2
  40c7c0:	ab1f      	add	r3, sp, #124	; 0x7c
  40c7c2:	2d07      	cmp	r5, #7
  40c7c4:	9425      	str	r4, [sp, #148]	; 0x94
  40c7c6:	9524      	str	r5, [sp, #144]	; 0x90
  40c7c8:	f8c9 3000 	str.w	r3, [r9]
  40c7cc:	f77f ace8 	ble.w	40c1a0 <_svfprintf_r+0x51c>
  40c7d0:	aa23      	add	r2, sp, #140	; 0x8c
  40c7d2:	9909      	ldr	r1, [sp, #36]	; 0x24
  40c7d4:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c7d6:	f002 fbb7 	bl	40ef48 <__ssprint_r>
  40c7da:	2800      	cmp	r0, #0
  40c7dc:	f47f ab4b 	bne.w	40be76 <_svfprintf_r+0x1f2>
  40c7e0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40c7e2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40c7e6:	e4dd      	b.n	40c1a4 <_svfprintf_r+0x520>
  40c7e8:	aa23      	add	r2, sp, #140	; 0x8c
  40c7ea:	9909      	ldr	r1, [sp, #36]	; 0x24
  40c7ec:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c7ee:	f002 fbab 	bl	40ef48 <__ssprint_r>
  40c7f2:	2800      	cmp	r0, #0
  40c7f4:	f43f ad24 	beq.w	40c240 <_svfprintf_r+0x5bc>
  40c7f8:	f7ff bb3d 	b.w	40be76 <_svfprintf_r+0x1f2>
  40c7fc:	aa23      	add	r2, sp, #140	; 0x8c
  40c7fe:	9909      	ldr	r1, [sp, #36]	; 0x24
  40c800:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c802:	f002 fba1 	bl	40ef48 <__ssprint_r>
  40c806:	2800      	cmp	r0, #0
  40c808:	f47f ab35 	bne.w	40be76 <_svfprintf_r+0x1f2>
  40c80c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40c80e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40c812:	e4b4      	b.n	40c17e <_svfprintf_r+0x4fa>
  40c814:	aa23      	add	r2, sp, #140	; 0x8c
  40c816:	9909      	ldr	r1, [sp, #36]	; 0x24
  40c818:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c81a:	f002 fb95 	bl	40ef48 <__ssprint_r>
  40c81e:	2800      	cmp	r0, #0
  40c820:	f47f ab29 	bne.w	40be76 <_svfprintf_r+0x1f2>
  40c824:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40c826:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40c82a:	e455      	b.n	40c0d8 <_svfprintf_r+0x454>
  40c82c:	aa23      	add	r2, sp, #140	; 0x8c
  40c82e:	9909      	ldr	r1, [sp, #36]	; 0x24
  40c830:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c832:	f002 fb89 	bl	40ef48 <__ssprint_r>
  40c836:	2800      	cmp	r0, #0
  40c838:	f47f ab1d 	bne.w	40be76 <_svfprintf_r+0x1f2>
  40c83c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40c83e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40c842:	e459      	b.n	40c0f8 <_svfprintf_r+0x474>
  40c844:	f1bb 0f00 	cmp.w	fp, #0
  40c848:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40c84c:	f2c0 82d8 	blt.w	40ce00 <_svfprintf_r+0x117c>
  40c850:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  40c854:	9307      	str	r3, [sp, #28]
  40c856:	ea54 0305 	orrs.w	r3, r4, r5
  40c85a:	f47f adcb 	bne.w	40c3f4 <_svfprintf_r+0x770>
  40c85e:	f1bb 0f00 	cmp.w	fp, #0
  40c862:	f43f ae8d 	beq.w	40c580 <_svfprintf_r+0x8fc>
  40c866:	2700      	movs	r7, #0
  40c868:	e6b8      	b.n	40c5dc <_svfprintf_r+0x958>
  40c86a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40c86c:	2d00      	cmp	r5, #0
  40c86e:	f340 82ca 	ble.w	40ce06 <_svfprintf_r+0x1182>
  40c872:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40c874:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40c876:	4293      	cmp	r3, r2
  40c878:	bfa8      	it	ge
  40c87a:	4613      	movge	r3, r2
  40c87c:	2b00      	cmp	r3, #0
  40c87e:	461d      	mov	r5, r3
  40c880:	dd0d      	ble.n	40c89e <_svfprintf_r+0xc1a>
  40c882:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40c884:	f8c9 6000 	str.w	r6, [r9]
  40c888:	3301      	adds	r3, #1
  40c88a:	442c      	add	r4, r5
  40c88c:	2b07      	cmp	r3, #7
  40c88e:	9425      	str	r4, [sp, #148]	; 0x94
  40c890:	f8c9 5004 	str.w	r5, [r9, #4]
  40c894:	9324      	str	r3, [sp, #144]	; 0x90
  40c896:	f300 839c 	bgt.w	40cfd2 <_svfprintf_r+0x134e>
  40c89a:	f109 0908 	add.w	r9, r9, #8
  40c89e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40c8a0:	2d00      	cmp	r5, #0
  40c8a2:	bfa8      	it	ge
  40c8a4:	1b5b      	subge	r3, r3, r5
  40c8a6:	2b00      	cmp	r3, #0
  40c8a8:	461d      	mov	r5, r3
  40c8aa:	f340 80f6 	ble.w	40ca9a <_svfprintf_r+0xe16>
  40c8ae:	4aba      	ldr	r2, [pc, #744]	; (40cb98 <_svfprintf_r+0xf14>)
  40c8b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40c8b2:	920f      	str	r2, [sp, #60]	; 0x3c
  40c8b4:	2d10      	cmp	r5, #16
  40c8b6:	f340 828a 	ble.w	40cdce <_svfprintf_r+0x114a>
  40c8ba:	4622      	mov	r2, r4
  40c8bc:	2710      	movs	r7, #16
  40c8be:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40c8c2:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40c8c4:	e005      	b.n	40c8d2 <_svfprintf_r+0xc4e>
  40c8c6:	f109 0908 	add.w	r9, r9, #8
  40c8ca:	3d10      	subs	r5, #16
  40c8cc:	2d10      	cmp	r5, #16
  40c8ce:	f340 827d 	ble.w	40cdcc <_svfprintf_r+0x1148>
  40c8d2:	3301      	adds	r3, #1
  40c8d4:	3210      	adds	r2, #16
  40c8d6:	2b07      	cmp	r3, #7
  40c8d8:	9225      	str	r2, [sp, #148]	; 0x94
  40c8da:	9324      	str	r3, [sp, #144]	; 0x90
  40c8dc:	f8c9 a000 	str.w	sl, [r9]
  40c8e0:	f8c9 7004 	str.w	r7, [r9, #4]
  40c8e4:	ddef      	ble.n	40c8c6 <_svfprintf_r+0xc42>
  40c8e6:	aa23      	add	r2, sp, #140	; 0x8c
  40c8e8:	4621      	mov	r1, r4
  40c8ea:	4658      	mov	r0, fp
  40c8ec:	f002 fb2c 	bl	40ef48 <__ssprint_r>
  40c8f0:	2800      	cmp	r0, #0
  40c8f2:	f47f aac0 	bne.w	40be76 <_svfprintf_r+0x1f2>
  40c8f6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40c8f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40c8fa:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40c8fe:	e7e4      	b.n	40c8ca <_svfprintf_r+0xc46>
  40c900:	aa23      	add	r2, sp, #140	; 0x8c
  40c902:	9909      	ldr	r1, [sp, #36]	; 0x24
  40c904:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c906:	f002 fb1f 	bl	40ef48 <__ssprint_r>
  40c90a:	2800      	cmp	r0, #0
  40c90c:	f47f aab3 	bne.w	40be76 <_svfprintf_r+0x1f2>
  40c910:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40c914:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40c916:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40c91a:	f7ff bbcd 	b.w	40c0b8 <_svfprintf_r+0x434>
  40c91e:	1e5e      	subs	r6, r3, #1
  40c920:	2e00      	cmp	r6, #0
  40c922:	f77f af48 	ble.w	40c7b6 <_svfprintf_r+0xb32>
  40c926:	4b9c      	ldr	r3, [pc, #624]	; (40cb98 <_svfprintf_r+0xf14>)
  40c928:	930f      	str	r3, [sp, #60]	; 0x3c
  40c92a:	2e10      	cmp	r6, #16
  40c92c:	dd2c      	ble.n	40c988 <_svfprintf_r+0xd04>
  40c92e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  40c932:	2710      	movs	r7, #16
  40c934:	46b0      	mov	r8, r6
  40c936:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40c93a:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40c93c:	e006      	b.n	40c94c <_svfprintf_r+0xcc8>
  40c93e:	f1a8 0810 	sub.w	r8, r8, #16
  40c942:	f1b8 0f10 	cmp.w	r8, #16
  40c946:	f109 0908 	add.w	r9, r9, #8
  40c94a:	dd1a      	ble.n	40c982 <_svfprintf_r+0xcfe>
  40c94c:	3501      	adds	r5, #1
  40c94e:	3410      	adds	r4, #16
  40c950:	2d07      	cmp	r5, #7
  40c952:	9425      	str	r4, [sp, #148]	; 0x94
  40c954:	9524      	str	r5, [sp, #144]	; 0x90
  40c956:	f8c9 a000 	str.w	sl, [r9]
  40c95a:	f8c9 7004 	str.w	r7, [r9, #4]
  40c95e:	ddee      	ble.n	40c93e <_svfprintf_r+0xcba>
  40c960:	aa23      	add	r2, sp, #140	; 0x8c
  40c962:	4631      	mov	r1, r6
  40c964:	4658      	mov	r0, fp
  40c966:	f002 faef 	bl	40ef48 <__ssprint_r>
  40c96a:	2800      	cmp	r0, #0
  40c96c:	f47f aa83 	bne.w	40be76 <_svfprintf_r+0x1f2>
  40c970:	f1a8 0810 	sub.w	r8, r8, #16
  40c974:	f1b8 0f10 	cmp.w	r8, #16
  40c978:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40c97a:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40c97c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40c980:	dce4      	bgt.n	40c94c <_svfprintf_r+0xcc8>
  40c982:	4646      	mov	r6, r8
  40c984:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40c988:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40c98a:	3501      	adds	r5, #1
  40c98c:	4434      	add	r4, r6
  40c98e:	2d07      	cmp	r5, #7
  40c990:	9425      	str	r4, [sp, #148]	; 0x94
  40c992:	9524      	str	r5, [sp, #144]	; 0x90
  40c994:	e889 0048 	stmia.w	r9, {r3, r6}
  40c998:	f77f af0b 	ble.w	40c7b2 <_svfprintf_r+0xb2e>
  40c99c:	aa23      	add	r2, sp, #140	; 0x8c
  40c99e:	9909      	ldr	r1, [sp, #36]	; 0x24
  40c9a0:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c9a2:	f002 fad1 	bl	40ef48 <__ssprint_r>
  40c9a6:	2800      	cmp	r0, #0
  40c9a8:	f47f aa65 	bne.w	40be76 <_svfprintf_r+0x1f2>
  40c9ac:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40c9ae:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40c9b0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40c9b4:	e6ff      	b.n	40c7b6 <_svfprintf_r+0xb32>
  40c9b6:	9907      	ldr	r1, [sp, #28]
  40c9b8:	f011 0210 	ands.w	r2, r1, #16
  40c9bc:	f000 8108 	beq.w	40cbd0 <_svfprintf_r+0xf4c>
  40c9c0:	980e      	ldr	r0, [sp, #56]	; 0x38
  40c9c2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40c9c6:	f1bb 0f00 	cmp.w	fp, #0
  40c9ca:	6804      	ldr	r4, [r0, #0]
  40c9cc:	f100 0704 	add.w	r7, r0, #4
  40c9d0:	f04f 0500 	mov.w	r5, #0
  40c9d4:	db26      	blt.n	40ca24 <_svfprintf_r+0xda0>
  40c9d6:	460a      	mov	r2, r1
  40c9d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  40c9dc:	9207      	str	r2, [sp, #28]
  40c9de:	ea54 0205 	orrs.w	r2, r4, r5
  40c9e2:	970e      	str	r7, [sp, #56]	; 0x38
  40c9e4:	461f      	mov	r7, r3
  40c9e6:	f47f aaef 	bne.w	40bfc8 <_svfprintf_r+0x344>
  40c9ea:	e4c8      	b.n	40c37e <_svfprintf_r+0x6fa>
  40c9ec:	9b07      	ldr	r3, [sp, #28]
  40c9ee:	06d9      	lsls	r1, r3, #27
  40c9f0:	d42a      	bmi.n	40ca48 <_svfprintf_r+0xdc4>
  40c9f2:	9b07      	ldr	r3, [sp, #28]
  40c9f4:	065a      	lsls	r2, r3, #25
  40c9f6:	d527      	bpl.n	40ca48 <_svfprintf_r+0xdc4>
  40c9f8:	990e      	ldr	r1, [sp, #56]	; 0x38
  40c9fa:	f9b1 4000 	ldrsh.w	r4, [r1]
  40c9fe:	3104      	adds	r1, #4
  40ca00:	17e5      	asrs	r5, r4, #31
  40ca02:	4622      	mov	r2, r4
  40ca04:	462b      	mov	r3, r5
  40ca06:	910e      	str	r1, [sp, #56]	; 0x38
  40ca08:	f7ff bacb 	b.w	40bfa2 <_svfprintf_r+0x31e>
  40ca0c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40ca0e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40ca12:	f1bb 0f00 	cmp.w	fp, #0
  40ca16:	680c      	ldr	r4, [r1, #0]
  40ca18:	f101 0704 	add.w	r7, r1, #4
  40ca1c:	f04f 0500 	mov.w	r5, #0
  40ca20:	f280 8247 	bge.w	40ceb2 <_svfprintf_r+0x122e>
  40ca24:	970e      	str	r7, [sp, #56]	; 0x38
  40ca26:	461f      	mov	r7, r3
  40ca28:	ea54 0305 	orrs.w	r3, r4, r5
  40ca2c:	f47f aacc 	bne.w	40bfc8 <_svfprintf_r+0x344>
  40ca30:	e4aa      	b.n	40c388 <_svfprintf_r+0x704>
  40ca32:	3301      	adds	r3, #1
  40ca34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40ca36:	9324      	str	r3, [sp, #144]	; 0x90
  40ca38:	442c      	add	r4, r5
  40ca3a:	2b07      	cmp	r3, #7
  40ca3c:	9425      	str	r4, [sp, #148]	; 0x94
  40ca3e:	e889 0024 	stmia.w	r9, {r2, r5}
  40ca42:	f77f abad 	ble.w	40c1a0 <_svfprintf_r+0x51c>
  40ca46:	e6c3      	b.n	40c7d0 <_svfprintf_r+0xb4c>
  40ca48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40ca4a:	6814      	ldr	r4, [r2, #0]
  40ca4c:	4613      	mov	r3, r2
  40ca4e:	3304      	adds	r3, #4
  40ca50:	17e5      	asrs	r5, r4, #31
  40ca52:	4622      	mov	r2, r4
  40ca54:	930e      	str	r3, [sp, #56]	; 0x38
  40ca56:	2a00      	cmp	r2, #0
  40ca58:	462b      	mov	r3, r5
  40ca5a:	f173 0300 	sbcs.w	r3, r3, #0
  40ca5e:	f6bf aaa5 	bge.w	40bfac <_svfprintf_r+0x328>
  40ca62:	4264      	negs	r4, r4
  40ca64:	f04f 072d 	mov.w	r7, #45	; 0x2d
  40ca68:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40ca6c:	f1bb 0f00 	cmp.w	fp, #0
  40ca70:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40ca74:	f6ff aaa8 	blt.w	40bfc8 <_svfprintf_r+0x344>
  40ca78:	9b07      	ldr	r3, [sp, #28]
  40ca7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40ca7e:	9307      	str	r3, [sp, #28]
  40ca80:	f7ff baa2 	b.w	40bfc8 <_svfprintf_r+0x344>
  40ca84:	aa23      	add	r2, sp, #140	; 0x8c
  40ca86:	9909      	ldr	r1, [sp, #36]	; 0x24
  40ca88:	980a      	ldr	r0, [sp, #40]	; 0x28
  40ca8a:	f002 fa5d 	bl	40ef48 <__ssprint_r>
  40ca8e:	2800      	cmp	r0, #0
  40ca90:	f47f a9f1 	bne.w	40be76 <_svfprintf_r+0x1f2>
  40ca94:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40ca96:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40ca9a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40ca9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40ca9e:	4432      	add	r2, r6
  40caa0:	4617      	mov	r7, r2
  40caa2:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40caa4:	4293      	cmp	r3, r2
  40caa6:	db47      	blt.n	40cb38 <_svfprintf_r+0xeb4>
  40caa8:	9a07      	ldr	r2, [sp, #28]
  40caaa:	07d5      	lsls	r5, r2, #31
  40caac:	d444      	bmi.n	40cb38 <_svfprintf_r+0xeb4>
  40caae:	9912      	ldr	r1, [sp, #72]	; 0x48
  40cab0:	440e      	add	r6, r1
  40cab2:	1bf5      	subs	r5, r6, r7
  40cab4:	1acb      	subs	r3, r1, r3
  40cab6:	429d      	cmp	r5, r3
  40cab8:	bfa8      	it	ge
  40caba:	461d      	movge	r5, r3
  40cabc:	2d00      	cmp	r5, #0
  40cabe:	462e      	mov	r6, r5
  40cac0:	dd0d      	ble.n	40cade <_svfprintf_r+0xe5a>
  40cac2:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40cac4:	f8c9 7000 	str.w	r7, [r9]
  40cac8:	3201      	adds	r2, #1
  40caca:	442c      	add	r4, r5
  40cacc:	2a07      	cmp	r2, #7
  40cace:	9425      	str	r4, [sp, #148]	; 0x94
  40cad0:	f8c9 5004 	str.w	r5, [r9, #4]
  40cad4:	9224      	str	r2, [sp, #144]	; 0x90
  40cad6:	f300 830b 	bgt.w	40d0f0 <_svfprintf_r+0x146c>
  40cada:	f109 0908 	add.w	r9, r9, #8
  40cade:	2e00      	cmp	r6, #0
  40cae0:	bfac      	ite	ge
  40cae2:	1b9d      	subge	r5, r3, r6
  40cae4:	461d      	movlt	r5, r3
  40cae6:	2d00      	cmp	r5, #0
  40cae8:	f77f ab5c 	ble.w	40c1a4 <_svfprintf_r+0x520>
  40caec:	4a2a      	ldr	r2, [pc, #168]	; (40cb98 <_svfprintf_r+0xf14>)
  40caee:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40caf0:	920f      	str	r2, [sp, #60]	; 0x3c
  40caf2:	2d10      	cmp	r5, #16
  40caf4:	dd9d      	ble.n	40ca32 <_svfprintf_r+0xdae>
  40caf6:	2610      	movs	r6, #16
  40caf8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40cafa:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40cafe:	e004      	b.n	40cb0a <_svfprintf_r+0xe86>
  40cb00:	f109 0908 	add.w	r9, r9, #8
  40cb04:	3d10      	subs	r5, #16
  40cb06:	2d10      	cmp	r5, #16
  40cb08:	dd93      	ble.n	40ca32 <_svfprintf_r+0xdae>
  40cb0a:	3301      	adds	r3, #1
  40cb0c:	3410      	adds	r4, #16
  40cb0e:	2b07      	cmp	r3, #7
  40cb10:	9425      	str	r4, [sp, #148]	; 0x94
  40cb12:	9324      	str	r3, [sp, #144]	; 0x90
  40cb14:	f8c9 a000 	str.w	sl, [r9]
  40cb18:	f8c9 6004 	str.w	r6, [r9, #4]
  40cb1c:	ddf0      	ble.n	40cb00 <_svfprintf_r+0xe7c>
  40cb1e:	aa23      	add	r2, sp, #140	; 0x8c
  40cb20:	4659      	mov	r1, fp
  40cb22:	4638      	mov	r0, r7
  40cb24:	f002 fa10 	bl	40ef48 <__ssprint_r>
  40cb28:	2800      	cmp	r0, #0
  40cb2a:	f47f a9a4 	bne.w	40be76 <_svfprintf_r+0x1f2>
  40cb2e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40cb30:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40cb32:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40cb36:	e7e5      	b.n	40cb04 <_svfprintf_r+0xe80>
  40cb38:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40cb3a:	9816      	ldr	r0, [sp, #88]	; 0x58
  40cb3c:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40cb3e:	f8c9 1000 	str.w	r1, [r9]
  40cb42:	3201      	adds	r2, #1
  40cb44:	4404      	add	r4, r0
  40cb46:	2a07      	cmp	r2, #7
  40cb48:	9425      	str	r4, [sp, #148]	; 0x94
  40cb4a:	f8c9 0004 	str.w	r0, [r9, #4]
  40cb4e:	9224      	str	r2, [sp, #144]	; 0x90
  40cb50:	f300 82a9 	bgt.w	40d0a6 <_svfprintf_r+0x1422>
  40cb54:	f109 0908 	add.w	r9, r9, #8
  40cb58:	e7a9      	b.n	40caae <_svfprintf_r+0xe2a>
  40cb5a:	9b07      	ldr	r3, [sp, #28]
  40cb5c:	07d8      	lsls	r0, r3, #31
  40cb5e:	f53f adf4 	bmi.w	40c74a <_svfprintf_r+0xac6>
  40cb62:	3501      	adds	r5, #1
  40cb64:	3401      	adds	r4, #1
  40cb66:	2301      	movs	r3, #1
  40cb68:	2d07      	cmp	r5, #7
  40cb6a:	9425      	str	r4, [sp, #148]	; 0x94
  40cb6c:	9524      	str	r5, [sp, #144]	; 0x90
  40cb6e:	f8c9 6000 	str.w	r6, [r9]
  40cb72:	f8c9 3004 	str.w	r3, [r9, #4]
  40cb76:	f77f ae1c 	ble.w	40c7b2 <_svfprintf_r+0xb2e>
  40cb7a:	e70f      	b.n	40c99c <_svfprintf_r+0xd18>
  40cb7c:	aa23      	add	r2, sp, #140	; 0x8c
  40cb7e:	9909      	ldr	r1, [sp, #36]	; 0x24
  40cb80:	980a      	ldr	r0, [sp, #40]	; 0x28
  40cb82:	f002 f9e1 	bl	40ef48 <__ssprint_r>
  40cb86:	2800      	cmp	r0, #0
  40cb88:	f47f a975 	bne.w	40be76 <_svfprintf_r+0x1f2>
  40cb8c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40cb8e:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40cb90:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40cb94:	e5e7      	b.n	40c766 <_svfprintf_r+0xae2>
  40cb96:	bf00      	nop
  40cb98:	0040fb80 	.word	0x0040fb80
  40cb9c:	aa23      	add	r2, sp, #140	; 0x8c
  40cb9e:	9909      	ldr	r1, [sp, #36]	; 0x24
  40cba0:	980a      	ldr	r0, [sp, #40]	; 0x28
  40cba2:	f002 f9d1 	bl	40ef48 <__ssprint_r>
  40cba6:	2800      	cmp	r0, #0
  40cba8:	f47f a965 	bne.w	40be76 <_svfprintf_r+0x1f2>
  40cbac:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40cbae:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40cbb0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40cbb4:	e5e6      	b.n	40c784 <_svfprintf_r+0xb00>
  40cbb6:	aa23      	add	r2, sp, #140	; 0x8c
  40cbb8:	9909      	ldr	r1, [sp, #36]	; 0x24
  40cbba:	980a      	ldr	r0, [sp, #40]	; 0x28
  40cbbc:	f002 f9c4 	bl	40ef48 <__ssprint_r>
  40cbc0:	2800      	cmp	r0, #0
  40cbc2:	f47f a958 	bne.w	40be76 <_svfprintf_r+0x1f2>
  40cbc6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40cbc8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40cbcc:	f7ff ba98 	b.w	40c100 <_svfprintf_r+0x47c>
  40cbd0:	9907      	ldr	r1, [sp, #28]
  40cbd2:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  40cbd6:	f43f af19 	beq.w	40ca0c <_svfprintf_r+0xd88>
  40cbda:	980e      	ldr	r0, [sp, #56]	; 0x38
  40cbdc:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40cbe0:	f1bb 0f00 	cmp.w	fp, #0
  40cbe4:	8804      	ldrh	r4, [r0, #0]
  40cbe6:	f100 0704 	add.w	r7, r0, #4
  40cbea:	f04f 0500 	mov.w	r5, #0
  40cbee:	f2c0 81b9 	blt.w	40cf64 <_svfprintf_r+0x12e0>
  40cbf2:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  40cbf6:	9307      	str	r3, [sp, #28]
  40cbf8:	ea54 0305 	orrs.w	r3, r4, r5
  40cbfc:	970e      	str	r7, [sp, #56]	; 0x38
  40cbfe:	4617      	mov	r7, r2
  40cc00:	f47f a9e2 	bne.w	40bfc8 <_svfprintf_r+0x344>
  40cc04:	f7ff bbbb 	b.w	40c37e <_svfprintf_r+0x6fa>
  40cc08:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40cc0a:	4622      	mov	r2, r4
  40cc0c:	4620      	mov	r0, r4
  40cc0e:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40cc10:	4623      	mov	r3, r4
  40cc12:	4621      	mov	r1, r4
  40cc14:	f7fe f904 	bl	40ae20 <__aeabi_dcmpun>
  40cc18:	2800      	cmp	r0, #0
  40cc1a:	f040 8317 	bne.w	40d24c <_svfprintf_r+0x15c8>
  40cc1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40cc20:	f1bb 3fff 	cmp.w	fp, #4294967295
  40cc24:	f023 0320 	bic.w	r3, r3, #32
  40cc28:	930d      	str	r3, [sp, #52]	; 0x34
  40cc2a:	f000 8270 	beq.w	40d10e <_svfprintf_r+0x148a>
  40cc2e:	2b47      	cmp	r3, #71	; 0x47
  40cc30:	f000 8192 	beq.w	40cf58 <_svfprintf_r+0x12d4>
  40cc34:	9b07      	ldr	r3, [sp, #28]
  40cc36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40cc3a:	9310      	str	r3, [sp, #64]	; 0x40
  40cc3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40cc3e:	1e1f      	subs	r7, r3, #0
  40cc40:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40cc42:	9308      	str	r3, [sp, #32]
  40cc44:	bfbb      	ittet	lt
  40cc46:	463b      	movlt	r3, r7
  40cc48:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40cc4c:	2300      	movge	r3, #0
  40cc4e:	232d      	movlt	r3, #45	; 0x2d
  40cc50:	930f      	str	r3, [sp, #60]	; 0x3c
  40cc52:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40cc54:	2b66      	cmp	r3, #102	; 0x66
  40cc56:	f000 825d 	beq.w	40d114 <_svfprintf_r+0x1490>
  40cc5a:	2b46      	cmp	r3, #70	; 0x46
  40cc5c:	f000 8151 	beq.w	40cf02 <_svfprintf_r+0x127e>
  40cc60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40cc62:	9a08      	ldr	r2, [sp, #32]
  40cc64:	2b45      	cmp	r3, #69	; 0x45
  40cc66:	a821      	add	r0, sp, #132	; 0x84
  40cc68:	a91e      	add	r1, sp, #120	; 0x78
  40cc6a:	bf0c      	ite	eq
  40cc6c:	f10b 0501 	addeq.w	r5, fp, #1
  40cc70:	465d      	movne	r5, fp
  40cc72:	9004      	str	r0, [sp, #16]
  40cc74:	9103      	str	r1, [sp, #12]
  40cc76:	a81d      	add	r0, sp, #116	; 0x74
  40cc78:	2102      	movs	r1, #2
  40cc7a:	463b      	mov	r3, r7
  40cc7c:	9002      	str	r0, [sp, #8]
  40cc7e:	9501      	str	r5, [sp, #4]
  40cc80:	9100      	str	r1, [sp, #0]
  40cc82:	980a      	ldr	r0, [sp, #40]	; 0x28
  40cc84:	f000 fbf0 	bl	40d468 <_dtoa_r>
  40cc88:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40cc8a:	2b67      	cmp	r3, #103	; 0x67
  40cc8c:	4606      	mov	r6, r0
  40cc8e:	f040 8290 	bne.w	40d1b2 <_svfprintf_r+0x152e>
  40cc92:	9b07      	ldr	r3, [sp, #28]
  40cc94:	07da      	lsls	r2, r3, #31
  40cc96:	f140 82af 	bpl.w	40d1f8 <_svfprintf_r+0x1574>
  40cc9a:	1974      	adds	r4, r6, r5
  40cc9c:	9808      	ldr	r0, [sp, #32]
  40cc9e:	4639      	mov	r1, r7
  40cca0:	2200      	movs	r2, #0
  40cca2:	2300      	movs	r3, #0
  40cca4:	f7fe f88a 	bl	40adbc <__aeabi_dcmpeq>
  40cca8:	2800      	cmp	r0, #0
  40ccaa:	f040 8190 	bne.w	40cfce <_svfprintf_r+0x134a>
  40ccae:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40ccb0:	429c      	cmp	r4, r3
  40ccb2:	d906      	bls.n	40ccc2 <_svfprintf_r+0x103e>
  40ccb4:	2130      	movs	r1, #48	; 0x30
  40ccb6:	1c5a      	adds	r2, r3, #1
  40ccb8:	9221      	str	r2, [sp, #132]	; 0x84
  40ccba:	7019      	strb	r1, [r3, #0]
  40ccbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40ccbe:	429c      	cmp	r4, r3
  40ccc0:	d8f9      	bhi.n	40ccb6 <_svfprintf_r+0x1032>
  40ccc2:	1b9b      	subs	r3, r3, r6
  40ccc4:	9312      	str	r3, [sp, #72]	; 0x48
  40ccc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40ccc8:	2b47      	cmp	r3, #71	; 0x47
  40ccca:	f000 8179 	beq.w	40cfc0 <_svfprintf_r+0x133c>
  40ccce:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40ccd0:	2b65      	cmp	r3, #101	; 0x65
  40ccd2:	f340 827d 	ble.w	40d1d0 <_svfprintf_r+0x154c>
  40ccd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40ccd8:	2b66      	cmp	r3, #102	; 0x66
  40ccda:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40ccdc:	9313      	str	r3, [sp, #76]	; 0x4c
  40ccde:	f000 825b 	beq.w	40d198 <_svfprintf_r+0x1514>
  40cce2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40cce4:	9912      	ldr	r1, [sp, #72]	; 0x48
  40cce6:	428a      	cmp	r2, r1
  40cce8:	f2c0 8230 	blt.w	40d14c <_svfprintf_r+0x14c8>
  40ccec:	9b07      	ldr	r3, [sp, #28]
  40ccee:	07d9      	lsls	r1, r3, #31
  40ccf0:	f100 8284 	bmi.w	40d1fc <_svfprintf_r+0x1578>
  40ccf4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40ccf8:	920d      	str	r2, [sp, #52]	; 0x34
  40ccfa:	2267      	movs	r2, #103	; 0x67
  40ccfc:	9211      	str	r2, [sp, #68]	; 0x44
  40ccfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40cd00:	2a00      	cmp	r2, #0
  40cd02:	f040 8153 	bne.w	40cfac <_svfprintf_r+0x1328>
  40cd06:	9308      	str	r3, [sp, #32]
  40cd08:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40cd0a:	9307      	str	r3, [sp, #28]
  40cd0c:	4693      	mov	fp, r2
  40cd0e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40cd12:	f7ff b97d 	b.w	40c010 <_svfprintf_r+0x38c>
  40cd16:	9907      	ldr	r1, [sp, #28]
  40cd18:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  40cd1c:	d015      	beq.n	40cd4a <_svfprintf_r+0x10c6>
  40cd1e:	980e      	ldr	r0, [sp, #56]	; 0x38
  40cd20:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40cd24:	f1bb 0f00 	cmp.w	fp, #0
  40cd28:	8804      	ldrh	r4, [r0, #0]
  40cd2a:	f100 0704 	add.w	r7, r0, #4
  40cd2e:	f04f 0500 	mov.w	r5, #0
  40cd32:	db16      	blt.n	40cd62 <_svfprintf_r+0x10de>
  40cd34:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  40cd38:	9307      	str	r3, [sp, #28]
  40cd3a:	ea54 0305 	orrs.w	r3, r4, r5
  40cd3e:	970e      	str	r7, [sp, #56]	; 0x38
  40cd40:	f43f ac3a 	beq.w	40c5b8 <_svfprintf_r+0x934>
  40cd44:	4617      	mov	r7, r2
  40cd46:	f7ff b8c2 	b.w	40bece <_svfprintf_r+0x24a>
  40cd4a:	990e      	ldr	r1, [sp, #56]	; 0x38
  40cd4c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40cd50:	f1bb 0f00 	cmp.w	fp, #0
  40cd54:	680c      	ldr	r4, [r1, #0]
  40cd56:	f101 0704 	add.w	r7, r1, #4
  40cd5a:	f04f 0500 	mov.w	r5, #0
  40cd5e:	f280 80a5 	bge.w	40ceac <_svfprintf_r+0x1228>
  40cd62:	970e      	str	r7, [sp, #56]	; 0x38
  40cd64:	2700      	movs	r7, #0
  40cd66:	f7ff b8b2 	b.w	40bece <_svfprintf_r+0x24a>
  40cd6a:	9b07      	ldr	r3, [sp, #28]
  40cd6c:	06df      	lsls	r7, r3, #27
  40cd6e:	d40b      	bmi.n	40cd88 <_svfprintf_r+0x1104>
  40cd70:	9b07      	ldr	r3, [sp, #28]
  40cd72:	065e      	lsls	r6, r3, #25
  40cd74:	d508      	bpl.n	40cd88 <_svfprintf_r+0x1104>
  40cd76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40cd78:	6813      	ldr	r3, [r2, #0]
  40cd7a:	3204      	adds	r2, #4
  40cd7c:	920e      	str	r2, [sp, #56]	; 0x38
  40cd7e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  40cd82:	801a      	strh	r2, [r3, #0]
  40cd84:	f7fe bfa4 	b.w	40bcd0 <_svfprintf_r+0x4c>
  40cd88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40cd8a:	6813      	ldr	r3, [r2, #0]
  40cd8c:	3204      	adds	r2, #4
  40cd8e:	920e      	str	r2, [sp, #56]	; 0x38
  40cd90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40cd92:	601a      	str	r2, [r3, #0]
  40cd94:	f7fe bf9c 	b.w	40bcd0 <_svfprintf_r+0x4c>
  40cd98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40cd9a:	9b07      	ldr	r3, [sp, #28]
  40cd9c:	f013 0f40 	tst.w	r3, #64	; 0x40
  40cda0:	4613      	mov	r3, r2
  40cda2:	f103 0304 	add.w	r3, r3, #4
  40cda6:	bf0c      	ite	eq
  40cda8:	6814      	ldreq	r4, [r2, #0]
  40cdaa:	8814      	ldrhne	r4, [r2, #0]
  40cdac:	930e      	str	r3, [sp, #56]	; 0x38
  40cdae:	2500      	movs	r5, #0
  40cdb0:	f7ff bb02 	b.w	40c3b8 <_svfprintf_r+0x734>
  40cdb4:	2700      	movs	r7, #0
  40cdb6:	45bb      	cmp	fp, r7
  40cdb8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40cdbc:	f6ff ac0e 	blt.w	40c5dc <_svfprintf_r+0x958>
  40cdc0:	9b07      	ldr	r3, [sp, #28]
  40cdc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40cdc6:	9307      	str	r3, [sp, #28]
  40cdc8:	f7ff bbd6 	b.w	40c578 <_svfprintf_r+0x8f4>
  40cdcc:	4614      	mov	r4, r2
  40cdce:	3301      	adds	r3, #1
  40cdd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40cdd2:	9324      	str	r3, [sp, #144]	; 0x90
  40cdd4:	442c      	add	r4, r5
  40cdd6:	2b07      	cmp	r3, #7
  40cdd8:	9425      	str	r4, [sp, #148]	; 0x94
  40cdda:	e889 0024 	stmia.w	r9, {r2, r5}
  40cdde:	f73f ae51 	bgt.w	40ca84 <_svfprintf_r+0xe00>
  40cde2:	f109 0908 	add.w	r9, r9, #8
  40cde6:	e658      	b.n	40ca9a <_svfprintf_r+0xe16>
  40cde8:	aa23      	add	r2, sp, #140	; 0x8c
  40cdea:	9909      	ldr	r1, [sp, #36]	; 0x24
  40cdec:	980a      	ldr	r0, [sp, #40]	; 0x28
  40cdee:	f002 f8ab 	bl	40ef48 <__ssprint_r>
  40cdf2:	2800      	cmp	r0, #0
  40cdf4:	f47f a83f 	bne.w	40be76 <_svfprintf_r+0x1f2>
  40cdf8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40cdfa:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40cdfe:	e40f      	b.n	40c620 <_svfprintf_r+0x99c>
  40ce00:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40ce02:	f7ff bbe4 	b.w	40c5ce <_svfprintf_r+0x94a>
  40ce06:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40ce08:	4ab5      	ldr	r2, [pc, #724]	; (40d0e0 <_svfprintf_r+0x145c>)
  40ce0a:	f8c9 2000 	str.w	r2, [r9]
  40ce0e:	3301      	adds	r3, #1
  40ce10:	3401      	adds	r4, #1
  40ce12:	2201      	movs	r2, #1
  40ce14:	2b07      	cmp	r3, #7
  40ce16:	9425      	str	r4, [sp, #148]	; 0x94
  40ce18:	9324      	str	r3, [sp, #144]	; 0x90
  40ce1a:	f8c9 2004 	str.w	r2, [r9, #4]
  40ce1e:	f300 808e 	bgt.w	40cf3e <_svfprintf_r+0x12ba>
  40ce22:	f109 0908 	add.w	r9, r9, #8
  40ce26:	b92d      	cbnz	r5, 40ce34 <_svfprintf_r+0x11b0>
  40ce28:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40ce2a:	b91b      	cbnz	r3, 40ce34 <_svfprintf_r+0x11b0>
  40ce2c:	9b07      	ldr	r3, [sp, #28]
  40ce2e:	07df      	lsls	r7, r3, #31
  40ce30:	f57f a9b8 	bpl.w	40c1a4 <_svfprintf_r+0x520>
  40ce34:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40ce36:	9916      	ldr	r1, [sp, #88]	; 0x58
  40ce38:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40ce3a:	f8c9 2000 	str.w	r2, [r9]
  40ce3e:	3301      	adds	r3, #1
  40ce40:	440c      	add	r4, r1
  40ce42:	2b07      	cmp	r3, #7
  40ce44:	9425      	str	r4, [sp, #148]	; 0x94
  40ce46:	f8c9 1004 	str.w	r1, [r9, #4]
  40ce4a:	9324      	str	r3, [sp, #144]	; 0x90
  40ce4c:	f300 81c2 	bgt.w	40d1d4 <_svfprintf_r+0x1550>
  40ce50:	f109 0908 	add.w	r9, r9, #8
  40ce54:	426d      	negs	r5, r5
  40ce56:	2d00      	cmp	r5, #0
  40ce58:	f340 809b 	ble.w	40cf92 <_svfprintf_r+0x130e>
  40ce5c:	4aa1      	ldr	r2, [pc, #644]	; (40d0e4 <_svfprintf_r+0x1460>)
  40ce5e:	920f      	str	r2, [sp, #60]	; 0x3c
  40ce60:	2d10      	cmp	r5, #16
  40ce62:	f340 80c3 	ble.w	40cfec <_svfprintf_r+0x1368>
  40ce66:	4622      	mov	r2, r4
  40ce68:	2710      	movs	r7, #16
  40ce6a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40ce6e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40ce70:	e005      	b.n	40ce7e <_svfprintf_r+0x11fa>
  40ce72:	f109 0908 	add.w	r9, r9, #8
  40ce76:	3d10      	subs	r5, #16
  40ce78:	2d10      	cmp	r5, #16
  40ce7a:	f340 80b6 	ble.w	40cfea <_svfprintf_r+0x1366>
  40ce7e:	3301      	adds	r3, #1
  40ce80:	3210      	adds	r2, #16
  40ce82:	2b07      	cmp	r3, #7
  40ce84:	9225      	str	r2, [sp, #148]	; 0x94
  40ce86:	9324      	str	r3, [sp, #144]	; 0x90
  40ce88:	f8c9 a000 	str.w	sl, [r9]
  40ce8c:	f8c9 7004 	str.w	r7, [r9, #4]
  40ce90:	ddef      	ble.n	40ce72 <_svfprintf_r+0x11ee>
  40ce92:	aa23      	add	r2, sp, #140	; 0x8c
  40ce94:	4621      	mov	r1, r4
  40ce96:	4658      	mov	r0, fp
  40ce98:	f002 f856 	bl	40ef48 <__ssprint_r>
  40ce9c:	2800      	cmp	r0, #0
  40ce9e:	f47e afea 	bne.w	40be76 <_svfprintf_r+0x1f2>
  40cea2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40cea4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40cea6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40ceaa:	e7e4      	b.n	40ce76 <_svfprintf_r+0x11f2>
  40ceac:	9a07      	ldr	r2, [sp, #28]
  40ceae:	f7ff ba38 	b.w	40c322 <_svfprintf_r+0x69e>
  40ceb2:	9a07      	ldr	r2, [sp, #28]
  40ceb4:	e590      	b.n	40c9d8 <_svfprintf_r+0xd54>
  40ceb6:	9b07      	ldr	r3, [sp, #28]
  40ceb8:	f043 0320 	orr.w	r3, r3, #32
  40cebc:	9307      	str	r3, [sp, #28]
  40cebe:	f108 0801 	add.w	r8, r8, #1
  40cec2:	f898 3000 	ldrb.w	r3, [r8]
  40cec6:	f7fe bf36 	b.w	40bd36 <_svfprintf_r+0xb2>
  40ceca:	aa23      	add	r2, sp, #140	; 0x8c
  40cecc:	9909      	ldr	r1, [sp, #36]	; 0x24
  40cece:	980a      	ldr	r0, [sp, #40]	; 0x28
  40ced0:	f002 f83a 	bl	40ef48 <__ssprint_r>
  40ced4:	2800      	cmp	r0, #0
  40ced6:	f47e afce 	bne.w	40be76 <_svfprintf_r+0x1f2>
  40ceda:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40cedc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40cee0:	f7ff bbb6 	b.w	40c650 <_svfprintf_r+0x9cc>
  40cee4:	2140      	movs	r1, #64	; 0x40
  40cee6:	980a      	ldr	r0, [sp, #40]	; 0x28
  40cee8:	f001 fa02 	bl	40e2f0 <_malloc_r>
  40ceec:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40ceee:	6010      	str	r0, [r2, #0]
  40cef0:	6110      	str	r0, [r2, #16]
  40cef2:	2800      	cmp	r0, #0
  40cef4:	f000 81e5 	beq.w	40d2c2 <_svfprintf_r+0x163e>
  40cef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40cefa:	2340      	movs	r3, #64	; 0x40
  40cefc:	6153      	str	r3, [r2, #20]
  40cefe:	f7fe bed8 	b.w	40bcb2 <_svfprintf_r+0x2e>
  40cf02:	a821      	add	r0, sp, #132	; 0x84
  40cf04:	a91e      	add	r1, sp, #120	; 0x78
  40cf06:	9004      	str	r0, [sp, #16]
  40cf08:	9103      	str	r1, [sp, #12]
  40cf0a:	a81d      	add	r0, sp, #116	; 0x74
  40cf0c:	2103      	movs	r1, #3
  40cf0e:	9002      	str	r0, [sp, #8]
  40cf10:	9a08      	ldr	r2, [sp, #32]
  40cf12:	f8cd b004 	str.w	fp, [sp, #4]
  40cf16:	463b      	mov	r3, r7
  40cf18:	9100      	str	r1, [sp, #0]
  40cf1a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40cf1c:	f000 faa4 	bl	40d468 <_dtoa_r>
  40cf20:	465d      	mov	r5, fp
  40cf22:	4606      	mov	r6, r0
  40cf24:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40cf26:	2b46      	cmp	r3, #70	; 0x46
  40cf28:	eb06 0405 	add.w	r4, r6, r5
  40cf2c:	f47f aeb6 	bne.w	40cc9c <_svfprintf_r+0x1018>
  40cf30:	7833      	ldrb	r3, [r6, #0]
  40cf32:	2b30      	cmp	r3, #48	; 0x30
  40cf34:	f000 817c 	beq.w	40d230 <_svfprintf_r+0x15ac>
  40cf38:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40cf3a:	442c      	add	r4, r5
  40cf3c:	e6ae      	b.n	40cc9c <_svfprintf_r+0x1018>
  40cf3e:	aa23      	add	r2, sp, #140	; 0x8c
  40cf40:	9909      	ldr	r1, [sp, #36]	; 0x24
  40cf42:	980a      	ldr	r0, [sp, #40]	; 0x28
  40cf44:	f002 f800 	bl	40ef48 <__ssprint_r>
  40cf48:	2800      	cmp	r0, #0
  40cf4a:	f47e af94 	bne.w	40be76 <_svfprintf_r+0x1f2>
  40cf4e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40cf50:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40cf52:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40cf56:	e766      	b.n	40ce26 <_svfprintf_r+0x11a2>
  40cf58:	f1bb 0f00 	cmp.w	fp, #0
  40cf5c:	bf08      	it	eq
  40cf5e:	f04f 0b01 	moveq.w	fp, #1
  40cf62:	e667      	b.n	40cc34 <_svfprintf_r+0xfb0>
  40cf64:	970e      	str	r7, [sp, #56]	; 0x38
  40cf66:	4617      	mov	r7, r2
  40cf68:	e55e      	b.n	40ca28 <_svfprintf_r+0xda4>
  40cf6a:	4630      	mov	r0, r6
  40cf6c:	f7fe fde8 	bl	40bb40 <strlen>
  40cf70:	46a3      	mov	fp, r4
  40cf72:	4603      	mov	r3, r0
  40cf74:	900d      	str	r0, [sp, #52]	; 0x34
  40cf76:	f7ff baf4 	b.w	40c562 <_svfprintf_r+0x8de>
  40cf7a:	aa23      	add	r2, sp, #140	; 0x8c
  40cf7c:	9909      	ldr	r1, [sp, #36]	; 0x24
  40cf7e:	980a      	ldr	r0, [sp, #40]	; 0x28
  40cf80:	f001 ffe2 	bl	40ef48 <__ssprint_r>
  40cf84:	2800      	cmp	r0, #0
  40cf86:	f47e af76 	bne.w	40be76 <_svfprintf_r+0x1f2>
  40cf8a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40cf8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40cf8e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40cf92:	9912      	ldr	r1, [sp, #72]	; 0x48
  40cf94:	f8c9 6000 	str.w	r6, [r9]
  40cf98:	3301      	adds	r3, #1
  40cf9a:	440c      	add	r4, r1
  40cf9c:	2b07      	cmp	r3, #7
  40cf9e:	9425      	str	r4, [sp, #148]	; 0x94
  40cfa0:	9324      	str	r3, [sp, #144]	; 0x90
  40cfa2:	f8c9 1004 	str.w	r1, [r9, #4]
  40cfa6:	f77f a8fb 	ble.w	40c1a0 <_svfprintf_r+0x51c>
  40cfaa:	e411      	b.n	40c7d0 <_svfprintf_r+0xb4c>
  40cfac:	272d      	movs	r7, #45	; 0x2d
  40cfae:	9308      	str	r3, [sp, #32]
  40cfb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40cfb2:	9307      	str	r3, [sp, #28]
  40cfb4:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40cfb8:	f04f 0b00 	mov.w	fp, #0
  40cfbc:	f7ff b829 	b.w	40c012 <_svfprintf_r+0x38e>
  40cfc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40cfc2:	1cdd      	adds	r5, r3, #3
  40cfc4:	db1e      	blt.n	40d004 <_svfprintf_r+0x1380>
  40cfc6:	459b      	cmp	fp, r3
  40cfc8:	db1c      	blt.n	40d004 <_svfprintf_r+0x1380>
  40cfca:	9313      	str	r3, [sp, #76]	; 0x4c
  40cfcc:	e689      	b.n	40cce2 <_svfprintf_r+0x105e>
  40cfce:	4623      	mov	r3, r4
  40cfd0:	e677      	b.n	40ccc2 <_svfprintf_r+0x103e>
  40cfd2:	aa23      	add	r2, sp, #140	; 0x8c
  40cfd4:	9909      	ldr	r1, [sp, #36]	; 0x24
  40cfd6:	980a      	ldr	r0, [sp, #40]	; 0x28
  40cfd8:	f001 ffb6 	bl	40ef48 <__ssprint_r>
  40cfdc:	2800      	cmp	r0, #0
  40cfde:	f47e af4a 	bne.w	40be76 <_svfprintf_r+0x1f2>
  40cfe2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40cfe4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40cfe8:	e459      	b.n	40c89e <_svfprintf_r+0xc1a>
  40cfea:	4614      	mov	r4, r2
  40cfec:	3301      	adds	r3, #1
  40cfee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40cff0:	9324      	str	r3, [sp, #144]	; 0x90
  40cff2:	442c      	add	r4, r5
  40cff4:	2b07      	cmp	r3, #7
  40cff6:	9425      	str	r4, [sp, #148]	; 0x94
  40cff8:	e889 0024 	stmia.w	r9, {r2, r5}
  40cffc:	dcbd      	bgt.n	40cf7a <_svfprintf_r+0x12f6>
  40cffe:	f109 0908 	add.w	r9, r9, #8
  40d002:	e7c6      	b.n	40cf92 <_svfprintf_r+0x130e>
  40d004:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d006:	3a02      	subs	r2, #2
  40d008:	9211      	str	r2, [sp, #68]	; 0x44
  40d00a:	3b01      	subs	r3, #1
  40d00c:	2b00      	cmp	r3, #0
  40d00e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40d012:	931d      	str	r3, [sp, #116]	; 0x74
  40d014:	bfb8      	it	lt
  40d016:	425b      	neglt	r3, r3
  40d018:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
  40d01c:	bfb4      	ite	lt
  40d01e:	222d      	movlt	r2, #45	; 0x2d
  40d020:	222b      	movge	r2, #43	; 0x2b
  40d022:	2b09      	cmp	r3, #9
  40d024:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  40d028:	f340 80f1 	ble.w	40d20e <_svfprintf_r+0x158a>
  40d02c:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  40d030:	4604      	mov	r4, r0
  40d032:	4a2d      	ldr	r2, [pc, #180]	; (40d0e8 <_svfprintf_r+0x1464>)
  40d034:	fb82 2103 	smull	r2, r1, r2, r3
  40d038:	17da      	asrs	r2, r3, #31
  40d03a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  40d03e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  40d042:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  40d046:	f103 0130 	add.w	r1, r3, #48	; 0x30
  40d04a:	2a09      	cmp	r2, #9
  40d04c:	4613      	mov	r3, r2
  40d04e:	f804 1d01 	strb.w	r1, [r4, #-1]!
  40d052:	dcee      	bgt.n	40d032 <_svfprintf_r+0x13ae>
  40d054:	4621      	mov	r1, r4
  40d056:	3330      	adds	r3, #48	; 0x30
  40d058:	b2da      	uxtb	r2, r3
  40d05a:	f801 2d01 	strb.w	r2, [r1, #-1]!
  40d05e:	4288      	cmp	r0, r1
  40d060:	f240 813a 	bls.w	40d2d8 <_svfprintf_r+0x1654>
  40d064:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
  40d068:	4623      	mov	r3, r4
  40d06a:	e001      	b.n	40d070 <_svfprintf_r+0x13ec>
  40d06c:	f813 2b01 	ldrb.w	r2, [r3], #1
  40d070:	f801 2b01 	strb.w	r2, [r1], #1
  40d074:	4298      	cmp	r0, r3
  40d076:	d1f9      	bne.n	40d06c <_svfprintf_r+0x13e8>
  40d078:	1c43      	adds	r3, r0, #1
  40d07a:	1b1b      	subs	r3, r3, r4
  40d07c:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  40d080:	4413      	add	r3, r2
  40d082:	aa1f      	add	r2, sp, #124	; 0x7c
  40d084:	1a9b      	subs	r3, r3, r2
  40d086:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40d088:	9319      	str	r3, [sp, #100]	; 0x64
  40d08a:	2a01      	cmp	r2, #1
  40d08c:	4413      	add	r3, r2
  40d08e:	930d      	str	r3, [sp, #52]	; 0x34
  40d090:	f340 80ea 	ble.w	40d268 <_svfprintf_r+0x15e4>
  40d094:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d096:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40d098:	4413      	add	r3, r2
  40d09a:	2200      	movs	r2, #0
  40d09c:	930d      	str	r3, [sp, #52]	; 0x34
  40d09e:	9213      	str	r2, [sp, #76]	; 0x4c
  40d0a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40d0a4:	e62b      	b.n	40ccfe <_svfprintf_r+0x107a>
  40d0a6:	aa23      	add	r2, sp, #140	; 0x8c
  40d0a8:	9909      	ldr	r1, [sp, #36]	; 0x24
  40d0aa:	980a      	ldr	r0, [sp, #40]	; 0x28
  40d0ac:	f001 ff4c 	bl	40ef48 <__ssprint_r>
  40d0b0:	2800      	cmp	r0, #0
  40d0b2:	f47e aee0 	bne.w	40be76 <_svfprintf_r+0x1f2>
  40d0b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40d0b8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40d0ba:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40d0be:	e4f6      	b.n	40caae <_svfprintf_r+0xe2a>
  40d0c0:	2d06      	cmp	r5, #6
  40d0c2:	462b      	mov	r3, r5
  40d0c4:	bf28      	it	cs
  40d0c6:	2306      	movcs	r3, #6
  40d0c8:	930d      	str	r3, [sp, #52]	; 0x34
  40d0ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40d0ce:	46b3      	mov	fp, r6
  40d0d0:	970e      	str	r7, [sp, #56]	; 0x38
  40d0d2:	9613      	str	r6, [sp, #76]	; 0x4c
  40d0d4:	4637      	mov	r7, r6
  40d0d6:	9308      	str	r3, [sp, #32]
  40d0d8:	4e04      	ldr	r6, [pc, #16]	; (40d0ec <_svfprintf_r+0x1468>)
  40d0da:	f7fe bf99 	b.w	40c010 <_svfprintf_r+0x38c>
  40d0de:	bf00      	nop
  40d0e0:	0040fbd0 	.word	0x0040fbd0
  40d0e4:	0040fb80 	.word	0x0040fb80
  40d0e8:	66666667 	.word	0x66666667
  40d0ec:	0040fbc8 	.word	0x0040fbc8
  40d0f0:	aa23      	add	r2, sp, #140	; 0x8c
  40d0f2:	9909      	ldr	r1, [sp, #36]	; 0x24
  40d0f4:	980a      	ldr	r0, [sp, #40]	; 0x28
  40d0f6:	f001 ff27 	bl	40ef48 <__ssprint_r>
  40d0fa:	2800      	cmp	r0, #0
  40d0fc:	f47e aebb 	bne.w	40be76 <_svfprintf_r+0x1f2>
  40d100:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40d102:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40d104:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40d106:	1ad3      	subs	r3, r2, r3
  40d108:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40d10c:	e4e7      	b.n	40cade <_svfprintf_r+0xe5a>
  40d10e:	f04f 0b06 	mov.w	fp, #6
  40d112:	e58f      	b.n	40cc34 <_svfprintf_r+0xfb0>
  40d114:	a821      	add	r0, sp, #132	; 0x84
  40d116:	a91e      	add	r1, sp, #120	; 0x78
  40d118:	9004      	str	r0, [sp, #16]
  40d11a:	9103      	str	r1, [sp, #12]
  40d11c:	a81d      	add	r0, sp, #116	; 0x74
  40d11e:	2103      	movs	r1, #3
  40d120:	9002      	str	r0, [sp, #8]
  40d122:	9a08      	ldr	r2, [sp, #32]
  40d124:	f8cd b004 	str.w	fp, [sp, #4]
  40d128:	463b      	mov	r3, r7
  40d12a:	9100      	str	r1, [sp, #0]
  40d12c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40d12e:	f000 f99b 	bl	40d468 <_dtoa_r>
  40d132:	465d      	mov	r5, fp
  40d134:	4606      	mov	r6, r0
  40d136:	eb00 040b 	add.w	r4, r0, fp
  40d13a:	e6f9      	b.n	40cf30 <_svfprintf_r+0x12ac>
  40d13c:	9307      	str	r3, [sp, #28]
  40d13e:	f7ff b959 	b.w	40c3f4 <_svfprintf_r+0x770>
  40d142:	272d      	movs	r7, #45	; 0x2d
  40d144:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40d148:	f7ff b8b2 	b.w	40c2b0 <_svfprintf_r+0x62c>
  40d14c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40d14e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40d150:	4413      	add	r3, r2
  40d152:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40d154:	930d      	str	r3, [sp, #52]	; 0x34
  40d156:	2a00      	cmp	r2, #0
  40d158:	dd7e      	ble.n	40d258 <_svfprintf_r+0x15d4>
  40d15a:	2267      	movs	r2, #103	; 0x67
  40d15c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40d160:	9211      	str	r2, [sp, #68]	; 0x44
  40d162:	e5cc      	b.n	40ccfe <_svfprintf_r+0x107a>
  40d164:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  40d168:	970e      	str	r7, [sp, #56]	; 0x38
  40d16a:	9308      	str	r3, [sp, #32]
  40d16c:	950d      	str	r5, [sp, #52]	; 0x34
  40d16e:	4683      	mov	fp, r0
  40d170:	9013      	str	r0, [sp, #76]	; 0x4c
  40d172:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40d176:	f7fe bf4b 	b.w	40c010 <_svfprintf_r+0x38c>
  40d17a:	9b07      	ldr	r3, [sp, #28]
  40d17c:	07db      	lsls	r3, r3, #31
  40d17e:	465f      	mov	r7, fp
  40d180:	d505      	bpl.n	40d18e <_svfprintf_r+0x150a>
  40d182:	ae40      	add	r6, sp, #256	; 0x100
  40d184:	2330      	movs	r3, #48	; 0x30
  40d186:	f806 3d41 	strb.w	r3, [r6, #-65]!
  40d18a:	f7fe bf37 	b.w	40bffc <_svfprintf_r+0x378>
  40d18e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  40d192:	ae30      	add	r6, sp, #192	; 0xc0
  40d194:	f7fe bf35 	b.w	40c002 <_svfprintf_r+0x37e>
  40d198:	2b00      	cmp	r3, #0
  40d19a:	dd7d      	ble.n	40d298 <_svfprintf_r+0x1614>
  40d19c:	f1bb 0f00 	cmp.w	fp, #0
  40d1a0:	d13d      	bne.n	40d21e <_svfprintf_r+0x159a>
  40d1a2:	9a07      	ldr	r2, [sp, #28]
  40d1a4:	07d4      	lsls	r4, r2, #31
  40d1a6:	d43a      	bmi.n	40d21e <_svfprintf_r+0x159a>
  40d1a8:	461a      	mov	r2, r3
  40d1aa:	920d      	str	r2, [sp, #52]	; 0x34
  40d1ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40d1b0:	e5a5      	b.n	40ccfe <_svfprintf_r+0x107a>
  40d1b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40d1b4:	2b47      	cmp	r3, #71	; 0x47
  40d1b6:	f47f ad70 	bne.w	40cc9a <_svfprintf_r+0x1016>
  40d1ba:	9b07      	ldr	r3, [sp, #28]
  40d1bc:	07db      	lsls	r3, r3, #31
  40d1be:	f53f aeb1 	bmi.w	40cf24 <_svfprintf_r+0x12a0>
  40d1c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40d1c4:	1b9b      	subs	r3, r3, r6
  40d1c6:	9312      	str	r3, [sp, #72]	; 0x48
  40d1c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d1ca:	2b47      	cmp	r3, #71	; 0x47
  40d1cc:	f43f aef8 	beq.w	40cfc0 <_svfprintf_r+0x133c>
  40d1d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40d1d2:	e71a      	b.n	40d00a <_svfprintf_r+0x1386>
  40d1d4:	aa23      	add	r2, sp, #140	; 0x8c
  40d1d6:	9909      	ldr	r1, [sp, #36]	; 0x24
  40d1d8:	980a      	ldr	r0, [sp, #40]	; 0x28
  40d1da:	f001 feb5 	bl	40ef48 <__ssprint_r>
  40d1de:	2800      	cmp	r0, #0
  40d1e0:	f47e ae49 	bne.w	40be76 <_svfprintf_r+0x1f2>
  40d1e4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40d1e6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40d1e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d1ea:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40d1ee:	e631      	b.n	40ce54 <_svfprintf_r+0x11d0>
  40d1f0:	46a0      	mov	r8, r4
  40d1f2:	2500      	movs	r5, #0
  40d1f4:	f7fe bda1 	b.w	40bd3a <_svfprintf_r+0xb6>
  40d1f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40d1fa:	e562      	b.n	40ccc2 <_svfprintf_r+0x103e>
  40d1fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40d1fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40d200:	4413      	add	r3, r2
  40d202:	2267      	movs	r2, #103	; 0x67
  40d204:	930d      	str	r3, [sp, #52]	; 0x34
  40d206:	9211      	str	r2, [sp, #68]	; 0x44
  40d208:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40d20c:	e577      	b.n	40ccfe <_svfprintf_r+0x107a>
  40d20e:	3330      	adds	r3, #48	; 0x30
  40d210:	2230      	movs	r2, #48	; 0x30
  40d212:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  40d216:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  40d21a:	ab20      	add	r3, sp, #128	; 0x80
  40d21c:	e731      	b.n	40d082 <_svfprintf_r+0x13fe>
  40d21e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40d220:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40d222:	189d      	adds	r5, r3, r2
  40d224:	eb05 030b 	add.w	r3, r5, fp
  40d228:	930d      	str	r3, [sp, #52]	; 0x34
  40d22a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40d22e:	e566      	b.n	40ccfe <_svfprintf_r+0x107a>
  40d230:	9808      	ldr	r0, [sp, #32]
  40d232:	4639      	mov	r1, r7
  40d234:	2200      	movs	r2, #0
  40d236:	2300      	movs	r3, #0
  40d238:	f7fd fdc0 	bl	40adbc <__aeabi_dcmpeq>
  40d23c:	2800      	cmp	r0, #0
  40d23e:	f47f ae7b 	bne.w	40cf38 <_svfprintf_r+0x12b4>
  40d242:	f1c5 0501 	rsb	r5, r5, #1
  40d246:	951d      	str	r5, [sp, #116]	; 0x74
  40d248:	442c      	add	r4, r5
  40d24a:	e527      	b.n	40cc9c <_svfprintf_r+0x1018>
  40d24c:	4e32      	ldr	r6, [pc, #200]	; (40d318 <_svfprintf_r+0x1694>)
  40d24e:	4b33      	ldr	r3, [pc, #204]	; (40d31c <_svfprintf_r+0x1698>)
  40d250:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40d254:	f7ff b82e 	b.w	40c2b4 <_svfprintf_r+0x630>
  40d258:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40d25a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40d25c:	f1c3 0301 	rsb	r3, r3, #1
  40d260:	441a      	add	r2, r3
  40d262:	4613      	mov	r3, r2
  40d264:	920d      	str	r2, [sp, #52]	; 0x34
  40d266:	e778      	b.n	40d15a <_svfprintf_r+0x14d6>
  40d268:	9b07      	ldr	r3, [sp, #28]
  40d26a:	f013 0301 	ands.w	r3, r3, #1
  40d26e:	f47f af11 	bne.w	40d094 <_svfprintf_r+0x1410>
  40d272:	9313      	str	r3, [sp, #76]	; 0x4c
  40d274:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d276:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40d27a:	e540      	b.n	40ccfe <_svfprintf_r+0x107a>
  40d27c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40d27e:	f898 3001 	ldrb.w	r3, [r8, #1]
  40d282:	6805      	ldr	r5, [r0, #0]
  40d284:	3004      	adds	r0, #4
  40d286:	2d00      	cmp	r5, #0
  40d288:	900e      	str	r0, [sp, #56]	; 0x38
  40d28a:	46a0      	mov	r8, r4
  40d28c:	f6be ad53 	bge.w	40bd36 <_svfprintf_r+0xb2>
  40d290:	f04f 35ff 	mov.w	r5, #4294967295
  40d294:	f7fe bd4f 	b.w	40bd36 <_svfprintf_r+0xb2>
  40d298:	f1bb 0f00 	cmp.w	fp, #0
  40d29c:	d102      	bne.n	40d2a4 <_svfprintf_r+0x1620>
  40d29e:	9b07      	ldr	r3, [sp, #28]
  40d2a0:	07d8      	lsls	r0, r3, #31
  40d2a2:	d507      	bpl.n	40d2b4 <_svfprintf_r+0x1630>
  40d2a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40d2a6:	1c5d      	adds	r5, r3, #1
  40d2a8:	eb05 030b 	add.w	r3, r5, fp
  40d2ac:	930d      	str	r3, [sp, #52]	; 0x34
  40d2ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40d2b2:	e524      	b.n	40ccfe <_svfprintf_r+0x107a>
  40d2b4:	2301      	movs	r3, #1
  40d2b6:	930d      	str	r3, [sp, #52]	; 0x34
  40d2b8:	e521      	b.n	40ccfe <_svfprintf_r+0x107a>
  40d2ba:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40d2be:	f7ff b921 	b.w	40c504 <_svfprintf_r+0x880>
  40d2c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40d2c4:	230c      	movs	r3, #12
  40d2c6:	6013      	str	r3, [r2, #0]
  40d2c8:	f04f 30ff 	mov.w	r0, #4294967295
  40d2cc:	f7fe bddc 	b.w	40be88 <_svfprintf_r+0x204>
  40d2d0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40d2d4:	f7ff b8f9 	b.w	40c4ca <_svfprintf_r+0x846>
  40d2d8:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  40d2dc:	e6d1      	b.n	40d082 <_svfprintf_r+0x13fe>
  40d2de:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40d2e2:	f7fe bdd9 	b.w	40be98 <_svfprintf_r+0x214>
  40d2e6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40d2ea:	f7ff b857 	b.w	40c39c <_svfprintf_r+0x718>
  40d2ee:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40d2f2:	f7ff b825 	b.w	40c340 <_svfprintf_r+0x6bc>
  40d2f6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40d2fa:	f7ff b94c 	b.w	40c596 <_svfprintf_r+0x912>
  40d2fe:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40d302:	f7fe bff3 	b.w	40c2ec <_svfprintf_r+0x668>
  40d306:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40d30a:	f7fe bfa3 	b.w	40c254 <_svfprintf_r+0x5d0>
  40d30e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40d312:	f7fe be33 	b.w	40bf7c <_svfprintf_r+0x2f8>
  40d316:	bf00      	nop
  40d318:	0040fb9c 	.word	0x0040fb9c
  40d31c:	0040fb98 	.word	0x0040fb98

0040d320 <register_fini>:
  40d320:	4b02      	ldr	r3, [pc, #8]	; (40d32c <register_fini+0xc>)
  40d322:	b113      	cbz	r3, 40d32a <register_fini+0xa>
  40d324:	4802      	ldr	r0, [pc, #8]	; (40d330 <register_fini+0x10>)
  40d326:	f000 b805 	b.w	40d334 <atexit>
  40d32a:	4770      	bx	lr
  40d32c:	00000000 	.word	0x00000000
  40d330:	0040e2c1 	.word	0x0040e2c1

0040d334 <atexit>:
  40d334:	2300      	movs	r3, #0
  40d336:	4601      	mov	r1, r0
  40d338:	461a      	mov	r2, r3
  40d33a:	4618      	mov	r0, r3
  40d33c:	f001 be84 	b.w	40f048 <__register_exitproc>

0040d340 <quorem>:
  40d340:	6902      	ldr	r2, [r0, #16]
  40d342:	690b      	ldr	r3, [r1, #16]
  40d344:	4293      	cmp	r3, r2
  40d346:	f300 808d 	bgt.w	40d464 <quorem+0x124>
  40d34a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d34e:	f103 38ff 	add.w	r8, r3, #4294967295
  40d352:	f101 0714 	add.w	r7, r1, #20
  40d356:	f100 0b14 	add.w	fp, r0, #20
  40d35a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40d35e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40d362:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40d366:	b083      	sub	sp, #12
  40d368:	3201      	adds	r2, #1
  40d36a:	fbb3 f9f2 	udiv	r9, r3, r2
  40d36e:	eb0b 0304 	add.w	r3, fp, r4
  40d372:	9400      	str	r4, [sp, #0]
  40d374:	eb07 0a04 	add.w	sl, r7, r4
  40d378:	9301      	str	r3, [sp, #4]
  40d37a:	f1b9 0f00 	cmp.w	r9, #0
  40d37e:	d039      	beq.n	40d3f4 <quorem+0xb4>
  40d380:	2500      	movs	r5, #0
  40d382:	46bc      	mov	ip, r7
  40d384:	46de      	mov	lr, fp
  40d386:	462b      	mov	r3, r5
  40d388:	f85c 6b04 	ldr.w	r6, [ip], #4
  40d38c:	f8de 2000 	ldr.w	r2, [lr]
  40d390:	b2b4      	uxth	r4, r6
  40d392:	fb09 5504 	mla	r5, r9, r4, r5
  40d396:	0c36      	lsrs	r6, r6, #16
  40d398:	0c2c      	lsrs	r4, r5, #16
  40d39a:	fb09 4406 	mla	r4, r9, r6, r4
  40d39e:	b2ad      	uxth	r5, r5
  40d3a0:	1b5b      	subs	r3, r3, r5
  40d3a2:	b2a6      	uxth	r6, r4
  40d3a4:	fa13 f382 	uxtah	r3, r3, r2
  40d3a8:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
  40d3ac:	eb06 4623 	add.w	r6, r6, r3, asr #16
  40d3b0:	b29b      	uxth	r3, r3
  40d3b2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40d3b6:	45e2      	cmp	sl, ip
  40d3b8:	f84e 3b04 	str.w	r3, [lr], #4
  40d3bc:	ea4f 4514 	mov.w	r5, r4, lsr #16
  40d3c0:	ea4f 4326 	mov.w	r3, r6, asr #16
  40d3c4:	d2e0      	bcs.n	40d388 <quorem+0x48>
  40d3c6:	9b00      	ldr	r3, [sp, #0]
  40d3c8:	f85b 3003 	ldr.w	r3, [fp, r3]
  40d3cc:	b993      	cbnz	r3, 40d3f4 <quorem+0xb4>
  40d3ce:	9c01      	ldr	r4, [sp, #4]
  40d3d0:	1f23      	subs	r3, r4, #4
  40d3d2:	459b      	cmp	fp, r3
  40d3d4:	d20c      	bcs.n	40d3f0 <quorem+0xb0>
  40d3d6:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40d3da:	b94b      	cbnz	r3, 40d3f0 <quorem+0xb0>
  40d3dc:	f1a4 0308 	sub.w	r3, r4, #8
  40d3e0:	e002      	b.n	40d3e8 <quorem+0xa8>
  40d3e2:	681a      	ldr	r2, [r3, #0]
  40d3e4:	3b04      	subs	r3, #4
  40d3e6:	b91a      	cbnz	r2, 40d3f0 <quorem+0xb0>
  40d3e8:	459b      	cmp	fp, r3
  40d3ea:	f108 38ff 	add.w	r8, r8, #4294967295
  40d3ee:	d3f8      	bcc.n	40d3e2 <quorem+0xa2>
  40d3f0:	f8c0 8010 	str.w	r8, [r0, #16]
  40d3f4:	4604      	mov	r4, r0
  40d3f6:	f001 fc8f 	bl	40ed18 <__mcmp>
  40d3fa:	2800      	cmp	r0, #0
  40d3fc:	db2e      	blt.n	40d45c <quorem+0x11c>
  40d3fe:	f109 0901 	add.w	r9, r9, #1
  40d402:	465d      	mov	r5, fp
  40d404:	2300      	movs	r3, #0
  40d406:	f857 1b04 	ldr.w	r1, [r7], #4
  40d40a:	6828      	ldr	r0, [r5, #0]
  40d40c:	b28a      	uxth	r2, r1
  40d40e:	1a9a      	subs	r2, r3, r2
  40d410:	0c09      	lsrs	r1, r1, #16
  40d412:	fa12 f280 	uxtah	r2, r2, r0
  40d416:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
  40d41a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40d41e:	b291      	uxth	r1, r2
  40d420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  40d424:	45ba      	cmp	sl, r7
  40d426:	f845 1b04 	str.w	r1, [r5], #4
  40d42a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40d42e:	d2ea      	bcs.n	40d406 <quorem+0xc6>
  40d430:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40d434:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40d438:	b982      	cbnz	r2, 40d45c <quorem+0x11c>
  40d43a:	1f1a      	subs	r2, r3, #4
  40d43c:	4593      	cmp	fp, r2
  40d43e:	d20b      	bcs.n	40d458 <quorem+0x118>
  40d440:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40d444:	b942      	cbnz	r2, 40d458 <quorem+0x118>
  40d446:	3b08      	subs	r3, #8
  40d448:	e002      	b.n	40d450 <quorem+0x110>
  40d44a:	681a      	ldr	r2, [r3, #0]
  40d44c:	3b04      	subs	r3, #4
  40d44e:	b91a      	cbnz	r2, 40d458 <quorem+0x118>
  40d450:	459b      	cmp	fp, r3
  40d452:	f108 38ff 	add.w	r8, r8, #4294967295
  40d456:	d3f8      	bcc.n	40d44a <quorem+0x10a>
  40d458:	f8c4 8010 	str.w	r8, [r4, #16]
  40d45c:	4648      	mov	r0, r9
  40d45e:	b003      	add	sp, #12
  40d460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d464:	2000      	movs	r0, #0
  40d466:	4770      	bx	lr

0040d468 <_dtoa_r>:
  40d468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d46c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40d46e:	b097      	sub	sp, #92	; 0x5c
  40d470:	4681      	mov	r9, r0
  40d472:	9c23      	ldr	r4, [sp, #140]	; 0x8c
  40d474:	4692      	mov	sl, r2
  40d476:	469b      	mov	fp, r3
  40d478:	b149      	cbz	r1, 40d48e <_dtoa_r+0x26>
  40d47a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40d47c:	604a      	str	r2, [r1, #4]
  40d47e:	2301      	movs	r3, #1
  40d480:	4093      	lsls	r3, r2
  40d482:	608b      	str	r3, [r1, #8]
  40d484:	f001 fa66 	bl	40e954 <_Bfree>
  40d488:	2300      	movs	r3, #0
  40d48a:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
  40d48e:	f1bb 0f00 	cmp.w	fp, #0
  40d492:	46d8      	mov	r8, fp
  40d494:	db33      	blt.n	40d4fe <_dtoa_r+0x96>
  40d496:	2300      	movs	r3, #0
  40d498:	6023      	str	r3, [r4, #0]
  40d49a:	4ba5      	ldr	r3, [pc, #660]	; (40d730 <_dtoa_r+0x2c8>)
  40d49c:	461a      	mov	r2, r3
  40d49e:	ea08 0303 	and.w	r3, r8, r3
  40d4a2:	4293      	cmp	r3, r2
  40d4a4:	d014      	beq.n	40d4d0 <_dtoa_r+0x68>
  40d4a6:	4650      	mov	r0, sl
  40d4a8:	4659      	mov	r1, fp
  40d4aa:	2200      	movs	r2, #0
  40d4ac:	2300      	movs	r3, #0
  40d4ae:	f7fd fc85 	bl	40adbc <__aeabi_dcmpeq>
  40d4b2:	4605      	mov	r5, r0
  40d4b4:	b348      	cbz	r0, 40d50a <_dtoa_r+0xa2>
  40d4b6:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40d4b8:	2301      	movs	r3, #1
  40d4ba:	6013      	str	r3, [r2, #0]
  40d4bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d4be:	2b00      	cmp	r3, #0
  40d4c0:	f000 80c5 	beq.w	40d64e <_dtoa_r+0x1e6>
  40d4c4:	489b      	ldr	r0, [pc, #620]	; (40d734 <_dtoa_r+0x2cc>)
  40d4c6:	6018      	str	r0, [r3, #0]
  40d4c8:	3801      	subs	r0, #1
  40d4ca:	b017      	add	sp, #92	; 0x5c
  40d4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d4d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40d4d2:	f242 730f 	movw	r3, #9999	; 0x270f
  40d4d6:	6013      	str	r3, [r2, #0]
  40d4d8:	f1ba 0f00 	cmp.w	sl, #0
  40d4dc:	f000 80a2 	beq.w	40d624 <_dtoa_r+0x1bc>
  40d4e0:	4895      	ldr	r0, [pc, #596]	; (40d738 <_dtoa_r+0x2d0>)
  40d4e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d4e4:	2b00      	cmp	r3, #0
  40d4e6:	d0f0      	beq.n	40d4ca <_dtoa_r+0x62>
  40d4e8:	78c3      	ldrb	r3, [r0, #3]
  40d4ea:	2b00      	cmp	r3, #0
  40d4ec:	f000 80b1 	beq.w	40d652 <_dtoa_r+0x1ea>
  40d4f0:	f100 0308 	add.w	r3, r0, #8
  40d4f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40d4f6:	6013      	str	r3, [r2, #0]
  40d4f8:	b017      	add	sp, #92	; 0x5c
  40d4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d4fe:	2301      	movs	r3, #1
  40d500:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
  40d504:	6023      	str	r3, [r4, #0]
  40d506:	46c3      	mov	fp, r8
  40d508:	e7c7      	b.n	40d49a <_dtoa_r+0x32>
  40d50a:	aa14      	add	r2, sp, #80	; 0x50
  40d50c:	ab15      	add	r3, sp, #84	; 0x54
  40d50e:	9201      	str	r2, [sp, #4]
  40d510:	9300      	str	r3, [sp, #0]
  40d512:	4652      	mov	r2, sl
  40d514:	465b      	mov	r3, fp
  40d516:	4648      	mov	r0, r9
  40d518:	f001 fca8 	bl	40ee6c <__d2b>
  40d51c:	ea5f 5418 	movs.w	r4, r8, lsr #20
  40d520:	9008      	str	r0, [sp, #32]
  40d522:	f040 8088 	bne.w	40d636 <_dtoa_r+0x1ce>
  40d526:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40d528:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40d52a:	442c      	add	r4, r5
  40d52c:	f204 4332 	addw	r3, r4, #1074	; 0x432
  40d530:	2b20      	cmp	r3, #32
  40d532:	f340 8291 	ble.w	40da58 <_dtoa_r+0x5f0>
  40d536:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40d53a:	f204 4012 	addw	r0, r4, #1042	; 0x412
  40d53e:	fa08 f803 	lsl.w	r8, r8, r3
  40d542:	fa2a f000 	lsr.w	r0, sl, r0
  40d546:	ea40 0008 	orr.w	r0, r0, r8
  40d54a:	f7fd f959 	bl	40a800 <__aeabi_ui2d>
  40d54e:	2301      	movs	r3, #1
  40d550:	3c01      	subs	r4, #1
  40d552:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40d556:	9310      	str	r3, [sp, #64]	; 0x40
  40d558:	2200      	movs	r2, #0
  40d55a:	4b78      	ldr	r3, [pc, #480]	; (40d73c <_dtoa_r+0x2d4>)
  40d55c:	f7fd f812 	bl	40a584 <__aeabi_dsub>
  40d560:	a36d      	add	r3, pc, #436	; (adr r3, 40d718 <_dtoa_r+0x2b0>)
  40d562:	e9d3 2300 	ldrd	r2, r3, [r3]
  40d566:	f7fd f9c1 	bl	40a8ec <__aeabi_dmul>
  40d56a:	a36d      	add	r3, pc, #436	; (adr r3, 40d720 <_dtoa_r+0x2b8>)
  40d56c:	e9d3 2300 	ldrd	r2, r3, [r3]
  40d570:	f7fd f80a 	bl	40a588 <__adddf3>
  40d574:	4606      	mov	r6, r0
  40d576:	4620      	mov	r0, r4
  40d578:	460f      	mov	r7, r1
  40d57a:	f7fd f951 	bl	40a820 <__aeabi_i2d>
  40d57e:	a36a      	add	r3, pc, #424	; (adr r3, 40d728 <_dtoa_r+0x2c0>)
  40d580:	e9d3 2300 	ldrd	r2, r3, [r3]
  40d584:	f7fd f9b2 	bl	40a8ec <__aeabi_dmul>
  40d588:	4602      	mov	r2, r0
  40d58a:	460b      	mov	r3, r1
  40d58c:	4630      	mov	r0, r6
  40d58e:	4639      	mov	r1, r7
  40d590:	f7fc fffa 	bl	40a588 <__adddf3>
  40d594:	4606      	mov	r6, r0
  40d596:	460f      	mov	r7, r1
  40d598:	f7fd fc58 	bl	40ae4c <__aeabi_d2iz>
  40d59c:	2200      	movs	r2, #0
  40d59e:	9004      	str	r0, [sp, #16]
  40d5a0:	2300      	movs	r3, #0
  40d5a2:	4630      	mov	r0, r6
  40d5a4:	4639      	mov	r1, r7
  40d5a6:	f7fd fc13 	bl	40add0 <__aeabi_dcmplt>
  40d5aa:	2800      	cmp	r0, #0
  40d5ac:	f040 8230 	bne.w	40da10 <_dtoa_r+0x5a8>
  40d5b0:	9e04      	ldr	r6, [sp, #16]
  40d5b2:	2e16      	cmp	r6, #22
  40d5b4:	f200 8229 	bhi.w	40da0a <_dtoa_r+0x5a2>
  40d5b8:	4b61      	ldr	r3, [pc, #388]	; (40d740 <_dtoa_r+0x2d8>)
  40d5ba:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  40d5be:	e9d3 0100 	ldrd	r0, r1, [r3]
  40d5c2:	4652      	mov	r2, sl
  40d5c4:	465b      	mov	r3, fp
  40d5c6:	f7fd fc21 	bl	40ae0c <__aeabi_dcmpgt>
  40d5ca:	2800      	cmp	r0, #0
  40d5cc:	f000 8249 	beq.w	40da62 <_dtoa_r+0x5fa>
  40d5d0:	1e73      	subs	r3, r6, #1
  40d5d2:	9304      	str	r3, [sp, #16]
  40d5d4:	2300      	movs	r3, #0
  40d5d6:	930c      	str	r3, [sp, #48]	; 0x30
  40d5d8:	1b2c      	subs	r4, r5, r4
  40d5da:	1e63      	subs	r3, r4, #1
  40d5dc:	9302      	str	r3, [sp, #8]
  40d5de:	f100 8232 	bmi.w	40da46 <_dtoa_r+0x5de>
  40d5e2:	2300      	movs	r3, #0
  40d5e4:	9305      	str	r3, [sp, #20]
  40d5e6:	9b04      	ldr	r3, [sp, #16]
  40d5e8:	2b00      	cmp	r3, #0
  40d5ea:	f2c0 8223 	blt.w	40da34 <_dtoa_r+0x5cc>
  40d5ee:	9a02      	ldr	r2, [sp, #8]
  40d5f0:	930b      	str	r3, [sp, #44]	; 0x2c
  40d5f2:	4611      	mov	r1, r2
  40d5f4:	4419      	add	r1, r3
  40d5f6:	2300      	movs	r3, #0
  40d5f8:	9102      	str	r1, [sp, #8]
  40d5fa:	930a      	str	r3, [sp, #40]	; 0x28
  40d5fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40d5fe:	2b09      	cmp	r3, #9
  40d600:	d829      	bhi.n	40d656 <_dtoa_r+0x1ee>
  40d602:	2b05      	cmp	r3, #5
  40d604:	f340 8658 	ble.w	40e2b8 <_dtoa_r+0xe50>
  40d608:	3b04      	subs	r3, #4
  40d60a:	9320      	str	r3, [sp, #128]	; 0x80
  40d60c:	2500      	movs	r5, #0
  40d60e:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40d610:	3b02      	subs	r3, #2
  40d612:	2b03      	cmp	r3, #3
  40d614:	f200 8635 	bhi.w	40e282 <_dtoa_r+0xe1a>
  40d618:	e8df f013 	tbh	[pc, r3, lsl #1]
  40d61c:	0228032c 	.word	0x0228032c
  40d620:	04590337 	.word	0x04590337
  40d624:	4b44      	ldr	r3, [pc, #272]	; (40d738 <_dtoa_r+0x2d0>)
  40d626:	4a47      	ldr	r2, [pc, #284]	; (40d744 <_dtoa_r+0x2dc>)
  40d628:	f3c8 0013 	ubfx	r0, r8, #0, #20
  40d62c:	2800      	cmp	r0, #0
  40d62e:	bf14      	ite	ne
  40d630:	4618      	movne	r0, r3
  40d632:	4610      	moveq	r0, r2
  40d634:	e755      	b.n	40d4e2 <_dtoa_r+0x7a>
  40d636:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40d63a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  40d63e:	9510      	str	r5, [sp, #64]	; 0x40
  40d640:	4650      	mov	r0, sl
  40d642:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  40d646:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40d64a:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40d64c:	e784      	b.n	40d558 <_dtoa_r+0xf0>
  40d64e:	483e      	ldr	r0, [pc, #248]	; (40d748 <_dtoa_r+0x2e0>)
  40d650:	e73b      	b.n	40d4ca <_dtoa_r+0x62>
  40d652:	1cc3      	adds	r3, r0, #3
  40d654:	e74e      	b.n	40d4f4 <_dtoa_r+0x8c>
  40d656:	2100      	movs	r1, #0
  40d658:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40d65c:	4648      	mov	r0, r9
  40d65e:	9120      	str	r1, [sp, #128]	; 0x80
  40d660:	f001 f952 	bl	40e908 <_Balloc>
  40d664:	f04f 33ff 	mov.w	r3, #4294967295
  40d668:	9306      	str	r3, [sp, #24]
  40d66a:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40d66c:	930d      	str	r3, [sp, #52]	; 0x34
  40d66e:	2301      	movs	r3, #1
  40d670:	9007      	str	r0, [sp, #28]
  40d672:	9221      	str	r2, [sp, #132]	; 0x84
  40d674:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  40d678:	9309      	str	r3, [sp, #36]	; 0x24
  40d67a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40d67c:	2b00      	cmp	r3, #0
  40d67e:	f2c0 80d1 	blt.w	40d824 <_dtoa_r+0x3bc>
  40d682:	9a04      	ldr	r2, [sp, #16]
  40d684:	2a0e      	cmp	r2, #14
  40d686:	f300 80cd 	bgt.w	40d824 <_dtoa_r+0x3bc>
  40d68a:	4b2d      	ldr	r3, [pc, #180]	; (40d740 <_dtoa_r+0x2d8>)
  40d68c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40d690:	e9d3 3400 	ldrd	r3, r4, [r3]
  40d694:	e9cd 3402 	strd	r3, r4, [sp, #8]
  40d698:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40d69a:	2b00      	cmp	r3, #0
  40d69c:	f2c0 8300 	blt.w	40dca0 <_dtoa_r+0x838>
  40d6a0:	4656      	mov	r6, sl
  40d6a2:	465f      	mov	r7, fp
  40d6a4:	4650      	mov	r0, sl
  40d6a6:	4659      	mov	r1, fp
  40d6a8:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  40d6ac:	4652      	mov	r2, sl
  40d6ae:	465b      	mov	r3, fp
  40d6b0:	f7fd fa46 	bl	40ab40 <__aeabi_ddiv>
  40d6b4:	f7fd fbca 	bl	40ae4c <__aeabi_d2iz>
  40d6b8:	4604      	mov	r4, r0
  40d6ba:	f7fd f8b1 	bl	40a820 <__aeabi_i2d>
  40d6be:	4652      	mov	r2, sl
  40d6c0:	465b      	mov	r3, fp
  40d6c2:	f7fd f913 	bl	40a8ec <__aeabi_dmul>
  40d6c6:	460b      	mov	r3, r1
  40d6c8:	4602      	mov	r2, r0
  40d6ca:	4639      	mov	r1, r7
  40d6cc:	4630      	mov	r0, r6
  40d6ce:	f7fc ff59 	bl	40a584 <__aeabi_dsub>
  40d6d2:	9d07      	ldr	r5, [sp, #28]
  40d6d4:	f104 0330 	add.w	r3, r4, #48	; 0x30
  40d6d8:	702b      	strb	r3, [r5, #0]
  40d6da:	9b06      	ldr	r3, [sp, #24]
  40d6dc:	2b01      	cmp	r3, #1
  40d6de:	4606      	mov	r6, r0
  40d6e0:	460f      	mov	r7, r1
  40d6e2:	f105 0501 	add.w	r5, r5, #1
  40d6e6:	d062      	beq.n	40d7ae <_dtoa_r+0x346>
  40d6e8:	2200      	movs	r2, #0
  40d6ea:	4b18      	ldr	r3, [pc, #96]	; (40d74c <_dtoa_r+0x2e4>)
  40d6ec:	f7fd f8fe 	bl	40a8ec <__aeabi_dmul>
  40d6f0:	2200      	movs	r2, #0
  40d6f2:	2300      	movs	r3, #0
  40d6f4:	4606      	mov	r6, r0
  40d6f6:	460f      	mov	r7, r1
  40d6f8:	f7fd fb60 	bl	40adbc <__aeabi_dcmpeq>
  40d6fc:	2800      	cmp	r0, #0
  40d6fe:	d17e      	bne.n	40d7fe <_dtoa_r+0x396>
  40d700:	f8cd 9014 	str.w	r9, [sp, #20]
  40d704:	f8dd a018 	ldr.w	sl, [sp, #24]
  40d708:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40d70c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  40d710:	e029      	b.n	40d766 <_dtoa_r+0x2fe>
  40d712:	bf00      	nop
  40d714:	f3af 8000 	nop.w
  40d718:	636f4361 	.word	0x636f4361
  40d71c:	3fd287a7 	.word	0x3fd287a7
  40d720:	8b60c8b3 	.word	0x8b60c8b3
  40d724:	3fc68a28 	.word	0x3fc68a28
  40d728:	509f79fb 	.word	0x509f79fb
  40d72c:	3fd34413 	.word	0x3fd34413
  40d730:	7ff00000 	.word	0x7ff00000
  40d734:	0040fbd1 	.word	0x0040fbd1
  40d738:	0040fbf0 	.word	0x0040fbf0
  40d73c:	3ff80000 	.word	0x3ff80000
  40d740:	0040fc00 	.word	0x0040fc00
  40d744:	0040fbe4 	.word	0x0040fbe4
  40d748:	0040fbd0 	.word	0x0040fbd0
  40d74c:	40240000 	.word	0x40240000
  40d750:	f7fd f8cc 	bl	40a8ec <__aeabi_dmul>
  40d754:	2200      	movs	r2, #0
  40d756:	2300      	movs	r3, #0
  40d758:	4606      	mov	r6, r0
  40d75a:	460f      	mov	r7, r1
  40d75c:	f7fd fb2e 	bl	40adbc <__aeabi_dcmpeq>
  40d760:	2800      	cmp	r0, #0
  40d762:	f040 83b7 	bne.w	40ded4 <_dtoa_r+0xa6c>
  40d766:	4642      	mov	r2, r8
  40d768:	464b      	mov	r3, r9
  40d76a:	4630      	mov	r0, r6
  40d76c:	4639      	mov	r1, r7
  40d76e:	f7fd f9e7 	bl	40ab40 <__aeabi_ddiv>
  40d772:	f7fd fb6b 	bl	40ae4c <__aeabi_d2iz>
  40d776:	4604      	mov	r4, r0
  40d778:	f7fd f852 	bl	40a820 <__aeabi_i2d>
  40d77c:	4642      	mov	r2, r8
  40d77e:	464b      	mov	r3, r9
  40d780:	f7fd f8b4 	bl	40a8ec <__aeabi_dmul>
  40d784:	4602      	mov	r2, r0
  40d786:	460b      	mov	r3, r1
  40d788:	4630      	mov	r0, r6
  40d78a:	4639      	mov	r1, r7
  40d78c:	f7fc fefa 	bl	40a584 <__aeabi_dsub>
  40d790:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40d794:	f805 eb01 	strb.w	lr, [r5], #1
  40d798:	ebcb 0e05 	rsb	lr, fp, r5
  40d79c:	45d6      	cmp	lr, sl
  40d79e:	4606      	mov	r6, r0
  40d7a0:	460f      	mov	r7, r1
  40d7a2:	f04f 0200 	mov.w	r2, #0
  40d7a6:	4bb0      	ldr	r3, [pc, #704]	; (40da68 <_dtoa_r+0x600>)
  40d7a8:	d1d2      	bne.n	40d750 <_dtoa_r+0x2e8>
  40d7aa:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40d7ae:	4632      	mov	r2, r6
  40d7b0:	463b      	mov	r3, r7
  40d7b2:	4630      	mov	r0, r6
  40d7b4:	4639      	mov	r1, r7
  40d7b6:	f7fc fee7 	bl	40a588 <__adddf3>
  40d7ba:	4606      	mov	r6, r0
  40d7bc:	460f      	mov	r7, r1
  40d7be:	4602      	mov	r2, r0
  40d7c0:	460b      	mov	r3, r1
  40d7c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40d7c6:	f7fd fb03 	bl	40add0 <__aeabi_dcmplt>
  40d7ca:	b940      	cbnz	r0, 40d7de <_dtoa_r+0x376>
  40d7cc:	4632      	mov	r2, r6
  40d7ce:	463b      	mov	r3, r7
  40d7d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40d7d4:	f7fd faf2 	bl	40adbc <__aeabi_dcmpeq>
  40d7d8:	b188      	cbz	r0, 40d7fe <_dtoa_r+0x396>
  40d7da:	07e3      	lsls	r3, r4, #31
  40d7dc:	d50f      	bpl.n	40d7fe <_dtoa_r+0x396>
  40d7de:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  40d7e2:	9a07      	ldr	r2, [sp, #28]
  40d7e4:	1e6b      	subs	r3, r5, #1
  40d7e6:	e004      	b.n	40d7f2 <_dtoa_r+0x38a>
  40d7e8:	429a      	cmp	r2, r3
  40d7ea:	f000 842c 	beq.w	40e046 <_dtoa_r+0xbde>
  40d7ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40d7f2:	2c39      	cmp	r4, #57	; 0x39
  40d7f4:	f103 0501 	add.w	r5, r3, #1
  40d7f8:	d0f6      	beq.n	40d7e8 <_dtoa_r+0x380>
  40d7fa:	3401      	adds	r4, #1
  40d7fc:	701c      	strb	r4, [r3, #0]
  40d7fe:	9908      	ldr	r1, [sp, #32]
  40d800:	4648      	mov	r0, r9
  40d802:	f001 f8a7 	bl	40e954 <_Bfree>
  40d806:	2200      	movs	r2, #0
  40d808:	9b04      	ldr	r3, [sp, #16]
  40d80a:	702a      	strb	r2, [r5, #0]
  40d80c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40d80e:	3301      	adds	r3, #1
  40d810:	6013      	str	r3, [r2, #0]
  40d812:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d814:	2b00      	cmp	r3, #0
  40d816:	f000 83a7 	beq.w	40df68 <_dtoa_r+0xb00>
  40d81a:	9807      	ldr	r0, [sp, #28]
  40d81c:	601d      	str	r5, [r3, #0]
  40d81e:	b017      	add	sp, #92	; 0x5c
  40d820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d824:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40d826:	2a00      	cmp	r2, #0
  40d828:	f000 8112 	beq.w	40da50 <_dtoa_r+0x5e8>
  40d82c:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40d82e:	2a01      	cmp	r2, #1
  40d830:	f340 8258 	ble.w	40dce4 <_dtoa_r+0x87c>
  40d834:	9b06      	ldr	r3, [sp, #24]
  40d836:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40d838:	1e5f      	subs	r7, r3, #1
  40d83a:	42ba      	cmp	r2, r7
  40d83c:	f2c0 8397 	blt.w	40df6e <_dtoa_r+0xb06>
  40d840:	1bd7      	subs	r7, r2, r7
  40d842:	9b06      	ldr	r3, [sp, #24]
  40d844:	2b00      	cmp	r3, #0
  40d846:	f2c0 848a 	blt.w	40e15e <_dtoa_r+0xcf6>
  40d84a:	9d05      	ldr	r5, [sp, #20]
  40d84c:	9b06      	ldr	r3, [sp, #24]
  40d84e:	9a05      	ldr	r2, [sp, #20]
  40d850:	441a      	add	r2, r3
  40d852:	9205      	str	r2, [sp, #20]
  40d854:	9a02      	ldr	r2, [sp, #8]
  40d856:	2101      	movs	r1, #1
  40d858:	441a      	add	r2, r3
  40d85a:	4648      	mov	r0, r9
  40d85c:	9202      	str	r2, [sp, #8]
  40d85e:	f001 f911 	bl	40ea84 <__i2b>
  40d862:	4606      	mov	r6, r0
  40d864:	b165      	cbz	r5, 40d880 <_dtoa_r+0x418>
  40d866:	9902      	ldr	r1, [sp, #8]
  40d868:	2900      	cmp	r1, #0
  40d86a:	460b      	mov	r3, r1
  40d86c:	dd08      	ble.n	40d880 <_dtoa_r+0x418>
  40d86e:	42a9      	cmp	r1, r5
  40d870:	9a05      	ldr	r2, [sp, #20]
  40d872:	bfa8      	it	ge
  40d874:	462b      	movge	r3, r5
  40d876:	1ad2      	subs	r2, r2, r3
  40d878:	1aed      	subs	r5, r5, r3
  40d87a:	1acb      	subs	r3, r1, r3
  40d87c:	9205      	str	r2, [sp, #20]
  40d87e:	9302      	str	r3, [sp, #8]
  40d880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d882:	2b00      	cmp	r3, #0
  40d884:	f340 82fc 	ble.w	40de80 <_dtoa_r+0xa18>
  40d888:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40d88a:	2a00      	cmp	r2, #0
  40d88c:	f000 8201 	beq.w	40dc92 <_dtoa_r+0x82a>
  40d890:	2f00      	cmp	r7, #0
  40d892:	f000 81fe 	beq.w	40dc92 <_dtoa_r+0x82a>
  40d896:	4631      	mov	r1, r6
  40d898:	463a      	mov	r2, r7
  40d89a:	4648      	mov	r0, r9
  40d89c:	f001 f994 	bl	40ebc8 <__pow5mult>
  40d8a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  40d8a4:	4601      	mov	r1, r0
  40d8a6:	4642      	mov	r2, r8
  40d8a8:	4606      	mov	r6, r0
  40d8aa:	4648      	mov	r0, r9
  40d8ac:	f001 f8f4 	bl	40ea98 <__multiply>
  40d8b0:	4641      	mov	r1, r8
  40d8b2:	4604      	mov	r4, r0
  40d8b4:	4648      	mov	r0, r9
  40d8b6:	f001 f84d 	bl	40e954 <_Bfree>
  40d8ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d8bc:	1bdb      	subs	r3, r3, r7
  40d8be:	930a      	str	r3, [sp, #40]	; 0x28
  40d8c0:	f040 81e6 	bne.w	40dc90 <_dtoa_r+0x828>
  40d8c4:	2101      	movs	r1, #1
  40d8c6:	4648      	mov	r0, r9
  40d8c8:	f001 f8dc 	bl	40ea84 <__i2b>
  40d8cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40d8ce:	4680      	mov	r8, r0
  40d8d0:	2b00      	cmp	r3, #0
  40d8d2:	f000 8219 	beq.w	40dd08 <_dtoa_r+0x8a0>
  40d8d6:	4601      	mov	r1, r0
  40d8d8:	461a      	mov	r2, r3
  40d8da:	4648      	mov	r0, r9
  40d8dc:	f001 f974 	bl	40ebc8 <__pow5mult>
  40d8e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40d8e2:	2b01      	cmp	r3, #1
  40d8e4:	4680      	mov	r8, r0
  40d8e6:	f340 82f8 	ble.w	40deda <_dtoa_r+0xa72>
  40d8ea:	2700      	movs	r7, #0
  40d8ec:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40d8f0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  40d8f4:	6918      	ldr	r0, [r3, #16]
  40d8f6:	f001 f877 	bl	40e9e8 <__hi0bits>
  40d8fa:	f1c0 0020 	rsb	r0, r0, #32
  40d8fe:	9a02      	ldr	r2, [sp, #8]
  40d900:	4410      	add	r0, r2
  40d902:	f010 001f 	ands.w	r0, r0, #31
  40d906:	f000 81f6 	beq.w	40dcf6 <_dtoa_r+0x88e>
  40d90a:	f1c0 0320 	rsb	r3, r0, #32
  40d90e:	2b04      	cmp	r3, #4
  40d910:	f340 84ca 	ble.w	40e2a8 <_dtoa_r+0xe40>
  40d914:	9b05      	ldr	r3, [sp, #20]
  40d916:	f1c0 001c 	rsb	r0, r0, #28
  40d91a:	4403      	add	r3, r0
  40d91c:	9305      	str	r3, [sp, #20]
  40d91e:	4613      	mov	r3, r2
  40d920:	4403      	add	r3, r0
  40d922:	4405      	add	r5, r0
  40d924:	9302      	str	r3, [sp, #8]
  40d926:	9b05      	ldr	r3, [sp, #20]
  40d928:	2b00      	cmp	r3, #0
  40d92a:	dd05      	ble.n	40d938 <_dtoa_r+0x4d0>
  40d92c:	4621      	mov	r1, r4
  40d92e:	461a      	mov	r2, r3
  40d930:	4648      	mov	r0, r9
  40d932:	f001 f999 	bl	40ec68 <__lshift>
  40d936:	4604      	mov	r4, r0
  40d938:	9b02      	ldr	r3, [sp, #8]
  40d93a:	2b00      	cmp	r3, #0
  40d93c:	dd05      	ble.n	40d94a <_dtoa_r+0x4e2>
  40d93e:	4641      	mov	r1, r8
  40d940:	461a      	mov	r2, r3
  40d942:	4648      	mov	r0, r9
  40d944:	f001 f990 	bl	40ec68 <__lshift>
  40d948:	4680      	mov	r8, r0
  40d94a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d94c:	2b00      	cmp	r3, #0
  40d94e:	f040 827c 	bne.w	40de4a <_dtoa_r+0x9e2>
  40d952:	9b06      	ldr	r3, [sp, #24]
  40d954:	2b00      	cmp	r3, #0
  40d956:	f340 8295 	ble.w	40de84 <_dtoa_r+0xa1c>
  40d95a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d95c:	2b00      	cmp	r3, #0
  40d95e:	f040 81f5 	bne.w	40dd4c <_dtoa_r+0x8e4>
  40d962:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40d966:	9f06      	ldr	r7, [sp, #24]
  40d968:	465d      	mov	r5, fp
  40d96a:	e002      	b.n	40d972 <_dtoa_r+0x50a>
  40d96c:	f000 fffc 	bl	40e968 <__multadd>
  40d970:	4604      	mov	r4, r0
  40d972:	4641      	mov	r1, r8
  40d974:	4620      	mov	r0, r4
  40d976:	f7ff fce3 	bl	40d340 <quorem>
  40d97a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40d97e:	f805 ab01 	strb.w	sl, [r5], #1
  40d982:	ebcb 0305 	rsb	r3, fp, r5
  40d986:	42bb      	cmp	r3, r7
  40d988:	f04f 020a 	mov.w	r2, #10
  40d98c:	f04f 0300 	mov.w	r3, #0
  40d990:	4621      	mov	r1, r4
  40d992:	4648      	mov	r0, r9
  40d994:	dbea      	blt.n	40d96c <_dtoa_r+0x504>
  40d996:	9b07      	ldr	r3, [sp, #28]
  40d998:	9a06      	ldr	r2, [sp, #24]
  40d99a:	2a01      	cmp	r2, #1
  40d99c:	bfac      	ite	ge
  40d99e:	189b      	addge	r3, r3, r2
  40d9a0:	3301      	addlt	r3, #1
  40d9a2:	461d      	mov	r5, r3
  40d9a4:	f04f 0b00 	mov.w	fp, #0
  40d9a8:	4621      	mov	r1, r4
  40d9aa:	2201      	movs	r2, #1
  40d9ac:	4648      	mov	r0, r9
  40d9ae:	f001 f95b 	bl	40ec68 <__lshift>
  40d9b2:	4641      	mov	r1, r8
  40d9b4:	9008      	str	r0, [sp, #32]
  40d9b6:	f001 f9af 	bl	40ed18 <__mcmp>
  40d9ba:	2800      	cmp	r0, #0
  40d9bc:	f340 830d 	ble.w	40dfda <_dtoa_r+0xb72>
  40d9c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40d9c4:	9907      	ldr	r1, [sp, #28]
  40d9c6:	1e6b      	subs	r3, r5, #1
  40d9c8:	e004      	b.n	40d9d4 <_dtoa_r+0x56c>
  40d9ca:	428b      	cmp	r3, r1
  40d9cc:	f000 8278 	beq.w	40dec0 <_dtoa_r+0xa58>
  40d9d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40d9d4:	2a39      	cmp	r2, #57	; 0x39
  40d9d6:	f103 0501 	add.w	r5, r3, #1
  40d9da:	d0f6      	beq.n	40d9ca <_dtoa_r+0x562>
  40d9dc:	3201      	adds	r2, #1
  40d9de:	701a      	strb	r2, [r3, #0]
  40d9e0:	4641      	mov	r1, r8
  40d9e2:	4648      	mov	r0, r9
  40d9e4:	f000 ffb6 	bl	40e954 <_Bfree>
  40d9e8:	2e00      	cmp	r6, #0
  40d9ea:	f43f af08 	beq.w	40d7fe <_dtoa_r+0x396>
  40d9ee:	f1bb 0f00 	cmp.w	fp, #0
  40d9f2:	d005      	beq.n	40da00 <_dtoa_r+0x598>
  40d9f4:	45b3      	cmp	fp, r6
  40d9f6:	d003      	beq.n	40da00 <_dtoa_r+0x598>
  40d9f8:	4659      	mov	r1, fp
  40d9fa:	4648      	mov	r0, r9
  40d9fc:	f000 ffaa 	bl	40e954 <_Bfree>
  40da00:	4631      	mov	r1, r6
  40da02:	4648      	mov	r0, r9
  40da04:	f000 ffa6 	bl	40e954 <_Bfree>
  40da08:	e6f9      	b.n	40d7fe <_dtoa_r+0x396>
  40da0a:	2301      	movs	r3, #1
  40da0c:	930c      	str	r3, [sp, #48]	; 0x30
  40da0e:	e5e3      	b.n	40d5d8 <_dtoa_r+0x170>
  40da10:	f8dd 8010 	ldr.w	r8, [sp, #16]
  40da14:	4640      	mov	r0, r8
  40da16:	f7fc ff03 	bl	40a820 <__aeabi_i2d>
  40da1a:	4602      	mov	r2, r0
  40da1c:	460b      	mov	r3, r1
  40da1e:	4630      	mov	r0, r6
  40da20:	4639      	mov	r1, r7
  40da22:	f7fd f9cb 	bl	40adbc <__aeabi_dcmpeq>
  40da26:	2800      	cmp	r0, #0
  40da28:	f47f adc2 	bne.w	40d5b0 <_dtoa_r+0x148>
  40da2c:	f108 33ff 	add.w	r3, r8, #4294967295
  40da30:	9304      	str	r3, [sp, #16]
  40da32:	e5bd      	b.n	40d5b0 <_dtoa_r+0x148>
  40da34:	9a05      	ldr	r2, [sp, #20]
  40da36:	9b04      	ldr	r3, [sp, #16]
  40da38:	1ad2      	subs	r2, r2, r3
  40da3a:	425b      	negs	r3, r3
  40da3c:	930a      	str	r3, [sp, #40]	; 0x28
  40da3e:	2300      	movs	r3, #0
  40da40:	9205      	str	r2, [sp, #20]
  40da42:	930b      	str	r3, [sp, #44]	; 0x2c
  40da44:	e5da      	b.n	40d5fc <_dtoa_r+0x194>
  40da46:	425b      	negs	r3, r3
  40da48:	9305      	str	r3, [sp, #20]
  40da4a:	2300      	movs	r3, #0
  40da4c:	9302      	str	r3, [sp, #8]
  40da4e:	e5ca      	b.n	40d5e6 <_dtoa_r+0x17e>
  40da50:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40da52:	9d05      	ldr	r5, [sp, #20]
  40da54:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40da56:	e705      	b.n	40d864 <_dtoa_r+0x3fc>
  40da58:	f1c3 0820 	rsb	r8, r3, #32
  40da5c:	fa0a f008 	lsl.w	r0, sl, r8
  40da60:	e573      	b.n	40d54a <_dtoa_r+0xe2>
  40da62:	900c      	str	r0, [sp, #48]	; 0x30
  40da64:	e5b8      	b.n	40d5d8 <_dtoa_r+0x170>
  40da66:	bf00      	nop
  40da68:	40240000 	.word	0x40240000
  40da6c:	2300      	movs	r3, #0
  40da6e:	9309      	str	r3, [sp, #36]	; 0x24
  40da70:	9b04      	ldr	r3, [sp, #16]
  40da72:	9a21      	ldr	r2, [sp, #132]	; 0x84
  40da74:	4413      	add	r3, r2
  40da76:	930d      	str	r3, [sp, #52]	; 0x34
  40da78:	3301      	adds	r3, #1
  40da7a:	2b00      	cmp	r3, #0
  40da7c:	9306      	str	r3, [sp, #24]
  40da7e:	f340 8283 	ble.w	40df88 <_dtoa_r+0xb20>
  40da82:	9c06      	ldr	r4, [sp, #24]
  40da84:	4626      	mov	r6, r4
  40da86:	2100      	movs	r1, #0
  40da88:	2e17      	cmp	r6, #23
  40da8a:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40da8e:	d90b      	bls.n	40daa8 <_dtoa_r+0x640>
  40da90:	2201      	movs	r2, #1
  40da92:	2304      	movs	r3, #4
  40da94:	005b      	lsls	r3, r3, #1
  40da96:	f103 0014 	add.w	r0, r3, #20
  40da9a:	42b0      	cmp	r0, r6
  40da9c:	4611      	mov	r1, r2
  40da9e:	f102 0201 	add.w	r2, r2, #1
  40daa2:	d9f7      	bls.n	40da94 <_dtoa_r+0x62c>
  40daa4:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40daa8:	4648      	mov	r0, r9
  40daaa:	f000 ff2d 	bl	40e908 <_Balloc>
  40daae:	2c0e      	cmp	r4, #14
  40dab0:	9007      	str	r0, [sp, #28]
  40dab2:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  40dab6:	f63f ade0 	bhi.w	40d67a <_dtoa_r+0x212>
  40daba:	2d00      	cmp	r5, #0
  40dabc:	f43f addd 	beq.w	40d67a <_dtoa_r+0x212>
  40dac0:	9904      	ldr	r1, [sp, #16]
  40dac2:	4657      	mov	r7, sl
  40dac4:	46d8      	mov	r8, fp
  40dac6:	2900      	cmp	r1, #0
  40dac8:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
  40dacc:	f340 8292 	ble.w	40dff4 <_dtoa_r+0xb8c>
  40dad0:	4b91      	ldr	r3, [pc, #580]	; (40dd18 <_dtoa_r+0x8b0>)
  40dad2:	f001 020f 	and.w	r2, r1, #15
  40dad6:	110e      	asrs	r6, r1, #4
  40dad8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40dadc:	06f0      	lsls	r0, r6, #27
  40dade:	e9d3 4500 	ldrd	r4, r5, [r3]
  40dae2:	f140 824c 	bpl.w	40df7e <_dtoa_r+0xb16>
  40dae6:	4b8d      	ldr	r3, [pc, #564]	; (40dd1c <_dtoa_r+0x8b4>)
  40dae8:	4650      	mov	r0, sl
  40daea:	4659      	mov	r1, fp
  40daec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40daf0:	f7fd f826 	bl	40ab40 <__aeabi_ddiv>
  40daf4:	f006 060f 	and.w	r6, r6, #15
  40daf8:	4682      	mov	sl, r0
  40dafa:	468b      	mov	fp, r1
  40dafc:	f04f 0803 	mov.w	r8, #3
  40db00:	b186      	cbz	r6, 40db24 <_dtoa_r+0x6bc>
  40db02:	4f86      	ldr	r7, [pc, #536]	; (40dd1c <_dtoa_r+0x8b4>)
  40db04:	07f1      	lsls	r1, r6, #31
  40db06:	d509      	bpl.n	40db1c <_dtoa_r+0x6b4>
  40db08:	4620      	mov	r0, r4
  40db0a:	4629      	mov	r1, r5
  40db0c:	e9d7 2300 	ldrd	r2, r3, [r7]
  40db10:	f7fc feec 	bl	40a8ec <__aeabi_dmul>
  40db14:	f108 0801 	add.w	r8, r8, #1
  40db18:	4604      	mov	r4, r0
  40db1a:	460d      	mov	r5, r1
  40db1c:	1076      	asrs	r6, r6, #1
  40db1e:	f107 0708 	add.w	r7, r7, #8
  40db22:	d1ef      	bne.n	40db04 <_dtoa_r+0x69c>
  40db24:	4622      	mov	r2, r4
  40db26:	462b      	mov	r3, r5
  40db28:	4650      	mov	r0, sl
  40db2a:	4659      	mov	r1, fp
  40db2c:	f7fd f808 	bl	40ab40 <__aeabi_ddiv>
  40db30:	4606      	mov	r6, r0
  40db32:	460f      	mov	r7, r1
  40db34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40db36:	b143      	cbz	r3, 40db4a <_dtoa_r+0x6e2>
  40db38:	2200      	movs	r2, #0
  40db3a:	4b79      	ldr	r3, [pc, #484]	; (40dd20 <_dtoa_r+0x8b8>)
  40db3c:	4630      	mov	r0, r6
  40db3e:	4639      	mov	r1, r7
  40db40:	f7fd f946 	bl	40add0 <__aeabi_dcmplt>
  40db44:	2800      	cmp	r0, #0
  40db46:	f040 8320 	bne.w	40e18a <_dtoa_r+0xd22>
  40db4a:	4640      	mov	r0, r8
  40db4c:	f7fc fe68 	bl	40a820 <__aeabi_i2d>
  40db50:	4632      	mov	r2, r6
  40db52:	463b      	mov	r3, r7
  40db54:	f7fc feca 	bl	40a8ec <__aeabi_dmul>
  40db58:	4b72      	ldr	r3, [pc, #456]	; (40dd24 <_dtoa_r+0x8bc>)
  40db5a:	2200      	movs	r2, #0
  40db5c:	f7fc fd14 	bl	40a588 <__adddf3>
  40db60:	9b06      	ldr	r3, [sp, #24]
  40db62:	4604      	mov	r4, r0
  40db64:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  40db68:	2b00      	cmp	r3, #0
  40db6a:	f000 81df 	beq.w	40df2c <_dtoa_r+0xac4>
  40db6e:	9b04      	ldr	r3, [sp, #16]
  40db70:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40db74:	9311      	str	r3, [sp, #68]	; 0x44
  40db76:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40db78:	2b00      	cmp	r3, #0
  40db7a:	f000 8297 	beq.w	40e0ac <_dtoa_r+0xc44>
  40db7e:	4b66      	ldr	r3, [pc, #408]	; (40dd18 <_dtoa_r+0x8b0>)
  40db80:	4969      	ldr	r1, [pc, #420]	; (40dd28 <_dtoa_r+0x8c0>)
  40db82:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  40db86:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40db8a:	2000      	movs	r0, #0
  40db8c:	f7fc ffd8 	bl	40ab40 <__aeabi_ddiv>
  40db90:	4622      	mov	r2, r4
  40db92:	462b      	mov	r3, r5
  40db94:	f7fc fcf6 	bl	40a584 <__aeabi_dsub>
  40db98:	4682      	mov	sl, r0
  40db9a:	468b      	mov	fp, r1
  40db9c:	4630      	mov	r0, r6
  40db9e:	4639      	mov	r1, r7
  40dba0:	f7fd f954 	bl	40ae4c <__aeabi_d2iz>
  40dba4:	4604      	mov	r4, r0
  40dba6:	f7fc fe3b 	bl	40a820 <__aeabi_i2d>
  40dbaa:	4602      	mov	r2, r0
  40dbac:	460b      	mov	r3, r1
  40dbae:	4630      	mov	r0, r6
  40dbb0:	4639      	mov	r1, r7
  40dbb2:	f7fc fce7 	bl	40a584 <__aeabi_dsub>
  40dbb6:	3430      	adds	r4, #48	; 0x30
  40dbb8:	9d07      	ldr	r5, [sp, #28]
  40dbba:	b2e4      	uxtb	r4, r4
  40dbbc:	4606      	mov	r6, r0
  40dbbe:	460f      	mov	r7, r1
  40dbc0:	702c      	strb	r4, [r5, #0]
  40dbc2:	4602      	mov	r2, r0
  40dbc4:	460b      	mov	r3, r1
  40dbc6:	4650      	mov	r0, sl
  40dbc8:	4659      	mov	r1, fp
  40dbca:	3501      	adds	r5, #1
  40dbcc:	f7fd f91e 	bl	40ae0c <__aeabi_dcmpgt>
  40dbd0:	2800      	cmp	r0, #0
  40dbd2:	d14c      	bne.n	40dc6e <_dtoa_r+0x806>
  40dbd4:	4632      	mov	r2, r6
  40dbd6:	463b      	mov	r3, r7
  40dbd8:	2000      	movs	r0, #0
  40dbda:	4951      	ldr	r1, [pc, #324]	; (40dd20 <_dtoa_r+0x8b8>)
  40dbdc:	f7fc fcd2 	bl	40a584 <__aeabi_dsub>
  40dbe0:	4602      	mov	r2, r0
  40dbe2:	460b      	mov	r3, r1
  40dbe4:	4650      	mov	r0, sl
  40dbe6:	4659      	mov	r1, fp
  40dbe8:	f7fd f910 	bl	40ae0c <__aeabi_dcmpgt>
  40dbec:	2800      	cmp	r0, #0
  40dbee:	f040 830d 	bne.w	40e20c <_dtoa_r+0xda4>
  40dbf2:	f1b8 0f01 	cmp.w	r8, #1
  40dbf6:	f340 81b3 	ble.w	40df60 <_dtoa_r+0xaf8>
  40dbfa:	9b07      	ldr	r3, [sp, #28]
  40dbfc:	4498      	add	r8, r3
  40dbfe:	e00d      	b.n	40dc1c <_dtoa_r+0x7b4>
  40dc00:	2000      	movs	r0, #0
  40dc02:	4947      	ldr	r1, [pc, #284]	; (40dd20 <_dtoa_r+0x8b8>)
  40dc04:	f7fc fcbe 	bl	40a584 <__aeabi_dsub>
  40dc08:	4652      	mov	r2, sl
  40dc0a:	465b      	mov	r3, fp
  40dc0c:	f7fd f8e0 	bl	40add0 <__aeabi_dcmplt>
  40dc10:	2800      	cmp	r0, #0
  40dc12:	f040 82fb 	bne.w	40e20c <_dtoa_r+0xda4>
  40dc16:	4545      	cmp	r5, r8
  40dc18:	f000 81a2 	beq.w	40df60 <_dtoa_r+0xaf8>
  40dc1c:	4650      	mov	r0, sl
  40dc1e:	4659      	mov	r1, fp
  40dc20:	2200      	movs	r2, #0
  40dc22:	4b42      	ldr	r3, [pc, #264]	; (40dd2c <_dtoa_r+0x8c4>)
  40dc24:	f7fc fe62 	bl	40a8ec <__aeabi_dmul>
  40dc28:	2200      	movs	r2, #0
  40dc2a:	4b40      	ldr	r3, [pc, #256]	; (40dd2c <_dtoa_r+0x8c4>)
  40dc2c:	4682      	mov	sl, r0
  40dc2e:	468b      	mov	fp, r1
  40dc30:	4630      	mov	r0, r6
  40dc32:	4639      	mov	r1, r7
  40dc34:	f7fc fe5a 	bl	40a8ec <__aeabi_dmul>
  40dc38:	460f      	mov	r7, r1
  40dc3a:	4606      	mov	r6, r0
  40dc3c:	f7fd f906 	bl	40ae4c <__aeabi_d2iz>
  40dc40:	4604      	mov	r4, r0
  40dc42:	f7fc fded 	bl	40a820 <__aeabi_i2d>
  40dc46:	4602      	mov	r2, r0
  40dc48:	460b      	mov	r3, r1
  40dc4a:	4630      	mov	r0, r6
  40dc4c:	4639      	mov	r1, r7
  40dc4e:	f7fc fc99 	bl	40a584 <__aeabi_dsub>
  40dc52:	3430      	adds	r4, #48	; 0x30
  40dc54:	b2e4      	uxtb	r4, r4
  40dc56:	4652      	mov	r2, sl
  40dc58:	465b      	mov	r3, fp
  40dc5a:	f805 4b01 	strb.w	r4, [r5], #1
  40dc5e:	4606      	mov	r6, r0
  40dc60:	460f      	mov	r7, r1
  40dc62:	f7fd f8b5 	bl	40add0 <__aeabi_dcmplt>
  40dc66:	4632      	mov	r2, r6
  40dc68:	463b      	mov	r3, r7
  40dc6a:	2800      	cmp	r0, #0
  40dc6c:	d0c8      	beq.n	40dc00 <_dtoa_r+0x798>
  40dc6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40dc70:	9304      	str	r3, [sp, #16]
  40dc72:	e5c4      	b.n	40d7fe <_dtoa_r+0x396>
  40dc74:	2300      	movs	r3, #0
  40dc76:	9309      	str	r3, [sp, #36]	; 0x24
  40dc78:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40dc7a:	2b00      	cmp	r3, #0
  40dc7c:	f340 8189 	ble.w	40df92 <_dtoa_r+0xb2a>
  40dc80:	461e      	mov	r6, r3
  40dc82:	461c      	mov	r4, r3
  40dc84:	930d      	str	r3, [sp, #52]	; 0x34
  40dc86:	9306      	str	r3, [sp, #24]
  40dc88:	e6fd      	b.n	40da86 <_dtoa_r+0x61e>
  40dc8a:	2301      	movs	r3, #1
  40dc8c:	9309      	str	r3, [sp, #36]	; 0x24
  40dc8e:	e7f3      	b.n	40dc78 <_dtoa_r+0x810>
  40dc90:	9408      	str	r4, [sp, #32]
  40dc92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40dc94:	9908      	ldr	r1, [sp, #32]
  40dc96:	4648      	mov	r0, r9
  40dc98:	f000 ff96 	bl	40ebc8 <__pow5mult>
  40dc9c:	4604      	mov	r4, r0
  40dc9e:	e611      	b.n	40d8c4 <_dtoa_r+0x45c>
  40dca0:	9b06      	ldr	r3, [sp, #24]
  40dca2:	2b00      	cmp	r3, #0
  40dca4:	f73f acfc 	bgt.w	40d6a0 <_dtoa_r+0x238>
  40dca8:	f040 82da 	bne.w	40e260 <_dtoa_r+0xdf8>
  40dcac:	2200      	movs	r2, #0
  40dcae:	4b20      	ldr	r3, [pc, #128]	; (40dd30 <_dtoa_r+0x8c8>)
  40dcb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40dcb4:	f7fc fe1a 	bl	40a8ec <__aeabi_dmul>
  40dcb8:	4652      	mov	r2, sl
  40dcba:	465b      	mov	r3, fp
  40dcbc:	f7fd f89c 	bl	40adf8 <__aeabi_dcmpge>
  40dcc0:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40dcc4:	4646      	mov	r6, r8
  40dcc6:	2800      	cmp	r0, #0
  40dcc8:	f000 80f2 	beq.w	40deb0 <_dtoa_r+0xa48>
  40dccc:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40dcce:	9d07      	ldr	r5, [sp, #28]
  40dcd0:	43db      	mvns	r3, r3
  40dcd2:	9304      	str	r3, [sp, #16]
  40dcd4:	4641      	mov	r1, r8
  40dcd6:	4648      	mov	r0, r9
  40dcd8:	f000 fe3c 	bl	40e954 <_Bfree>
  40dcdc:	2e00      	cmp	r6, #0
  40dcde:	f43f ad8e 	beq.w	40d7fe <_dtoa_r+0x396>
  40dce2:	e68d      	b.n	40da00 <_dtoa_r+0x598>
  40dce4:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40dce6:	2a00      	cmp	r2, #0
  40dce8:	f000 8241 	beq.w	40e16e <_dtoa_r+0xd06>
  40dcec:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40dcf0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40dcf2:	9d05      	ldr	r5, [sp, #20]
  40dcf4:	e5ab      	b.n	40d84e <_dtoa_r+0x3e6>
  40dcf6:	201c      	movs	r0, #28
  40dcf8:	9b05      	ldr	r3, [sp, #20]
  40dcfa:	4403      	add	r3, r0
  40dcfc:	9305      	str	r3, [sp, #20]
  40dcfe:	9b02      	ldr	r3, [sp, #8]
  40dd00:	4403      	add	r3, r0
  40dd02:	4405      	add	r5, r0
  40dd04:	9302      	str	r3, [sp, #8]
  40dd06:	e60e      	b.n	40d926 <_dtoa_r+0x4be>
  40dd08:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40dd0a:	2b01      	cmp	r3, #1
  40dd0c:	f340 8282 	ble.w	40e214 <_dtoa_r+0xdac>
  40dd10:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  40dd12:	2001      	movs	r0, #1
  40dd14:	e5f3      	b.n	40d8fe <_dtoa_r+0x496>
  40dd16:	bf00      	nop
  40dd18:	0040fc00 	.word	0x0040fc00
  40dd1c:	0040fcc8 	.word	0x0040fcc8
  40dd20:	3ff00000 	.word	0x3ff00000
  40dd24:	401c0000 	.word	0x401c0000
  40dd28:	3fe00000 	.word	0x3fe00000
  40dd2c:	40240000 	.word	0x40240000
  40dd30:	40140000 	.word	0x40140000
  40dd34:	4631      	mov	r1, r6
  40dd36:	2300      	movs	r3, #0
  40dd38:	220a      	movs	r2, #10
  40dd3a:	4648      	mov	r0, r9
  40dd3c:	f000 fe14 	bl	40e968 <__multadd>
  40dd40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40dd42:	2b00      	cmp	r3, #0
  40dd44:	4606      	mov	r6, r0
  40dd46:	f340 8297 	ble.w	40e278 <_dtoa_r+0xe10>
  40dd4a:	9306      	str	r3, [sp, #24]
  40dd4c:	2d00      	cmp	r5, #0
  40dd4e:	dd05      	ble.n	40dd5c <_dtoa_r+0x8f4>
  40dd50:	4631      	mov	r1, r6
  40dd52:	462a      	mov	r2, r5
  40dd54:	4648      	mov	r0, r9
  40dd56:	f000 ff87 	bl	40ec68 <__lshift>
  40dd5a:	4606      	mov	r6, r0
  40dd5c:	2f00      	cmp	r7, #0
  40dd5e:	f040 817c 	bne.w	40e05a <_dtoa_r+0xbf2>
  40dd62:	9605      	str	r6, [sp, #20]
  40dd64:	9b06      	ldr	r3, [sp, #24]
  40dd66:	9a07      	ldr	r2, [sp, #28]
  40dd68:	f8dd b014 	ldr.w	fp, [sp, #20]
  40dd6c:	3b01      	subs	r3, #1
  40dd6e:	18d3      	adds	r3, r2, r3
  40dd70:	9308      	str	r3, [sp, #32]
  40dd72:	f00a 0301 	and.w	r3, sl, #1
  40dd76:	9309      	str	r3, [sp, #36]	; 0x24
  40dd78:	4617      	mov	r7, r2
  40dd7a:	46c2      	mov	sl, r8
  40dd7c:	4651      	mov	r1, sl
  40dd7e:	4620      	mov	r0, r4
  40dd80:	f7ff fade 	bl	40d340 <quorem>
  40dd84:	4631      	mov	r1, r6
  40dd86:	4605      	mov	r5, r0
  40dd88:	4620      	mov	r0, r4
  40dd8a:	f000 ffc5 	bl	40ed18 <__mcmp>
  40dd8e:	465a      	mov	r2, fp
  40dd90:	9002      	str	r0, [sp, #8]
  40dd92:	4651      	mov	r1, sl
  40dd94:	4648      	mov	r0, r9
  40dd96:	f000 ffdf 	bl	40ed58 <__mdiff>
  40dd9a:	68c2      	ldr	r2, [r0, #12]
  40dd9c:	4680      	mov	r8, r0
  40dd9e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40dda2:	2a00      	cmp	r2, #0
  40dda4:	d149      	bne.n	40de3a <_dtoa_r+0x9d2>
  40dda6:	4601      	mov	r1, r0
  40dda8:	4620      	mov	r0, r4
  40ddaa:	9306      	str	r3, [sp, #24]
  40ddac:	f000 ffb4 	bl	40ed18 <__mcmp>
  40ddb0:	4641      	mov	r1, r8
  40ddb2:	9005      	str	r0, [sp, #20]
  40ddb4:	4648      	mov	r0, r9
  40ddb6:	f000 fdcd 	bl	40e954 <_Bfree>
  40ddba:	9a05      	ldr	r2, [sp, #20]
  40ddbc:	9b06      	ldr	r3, [sp, #24]
  40ddbe:	b92a      	cbnz	r2, 40ddcc <_dtoa_r+0x964>
  40ddc0:	9920      	ldr	r1, [sp, #128]	; 0x80
  40ddc2:	b919      	cbnz	r1, 40ddcc <_dtoa_r+0x964>
  40ddc4:	9909      	ldr	r1, [sp, #36]	; 0x24
  40ddc6:	2900      	cmp	r1, #0
  40ddc8:	f000 8236 	beq.w	40e238 <_dtoa_r+0xdd0>
  40ddcc:	9902      	ldr	r1, [sp, #8]
  40ddce:	2900      	cmp	r1, #0
  40ddd0:	f2c0 80e4 	blt.w	40df9c <_dtoa_r+0xb34>
  40ddd4:	d105      	bne.n	40dde2 <_dtoa_r+0x97a>
  40ddd6:	9920      	ldr	r1, [sp, #128]	; 0x80
  40ddd8:	b919      	cbnz	r1, 40dde2 <_dtoa_r+0x97a>
  40ddda:	9909      	ldr	r1, [sp, #36]	; 0x24
  40dddc:	2900      	cmp	r1, #0
  40ddde:	f000 80dd 	beq.w	40df9c <_dtoa_r+0xb34>
  40dde2:	2a00      	cmp	r2, #0
  40dde4:	f300 814d 	bgt.w	40e082 <_dtoa_r+0xc1a>
  40dde8:	9a08      	ldr	r2, [sp, #32]
  40ddea:	703b      	strb	r3, [r7, #0]
  40ddec:	f107 0801 	add.w	r8, r7, #1
  40ddf0:	4297      	cmp	r7, r2
  40ddf2:	4645      	mov	r5, r8
  40ddf4:	f000 8154 	beq.w	40e0a0 <_dtoa_r+0xc38>
  40ddf8:	4621      	mov	r1, r4
  40ddfa:	2300      	movs	r3, #0
  40ddfc:	220a      	movs	r2, #10
  40ddfe:	4648      	mov	r0, r9
  40de00:	f000 fdb2 	bl	40e968 <__multadd>
  40de04:	455e      	cmp	r6, fp
  40de06:	4604      	mov	r4, r0
  40de08:	4631      	mov	r1, r6
  40de0a:	f04f 0300 	mov.w	r3, #0
  40de0e:	f04f 020a 	mov.w	r2, #10
  40de12:	4648      	mov	r0, r9
  40de14:	d00b      	beq.n	40de2e <_dtoa_r+0x9c6>
  40de16:	f000 fda7 	bl	40e968 <__multadd>
  40de1a:	4659      	mov	r1, fp
  40de1c:	4606      	mov	r6, r0
  40de1e:	2300      	movs	r3, #0
  40de20:	220a      	movs	r2, #10
  40de22:	4648      	mov	r0, r9
  40de24:	f000 fda0 	bl	40e968 <__multadd>
  40de28:	4647      	mov	r7, r8
  40de2a:	4683      	mov	fp, r0
  40de2c:	e7a6      	b.n	40dd7c <_dtoa_r+0x914>
  40de2e:	f000 fd9b 	bl	40e968 <__multadd>
  40de32:	4647      	mov	r7, r8
  40de34:	4606      	mov	r6, r0
  40de36:	4683      	mov	fp, r0
  40de38:	e7a0      	b.n	40dd7c <_dtoa_r+0x914>
  40de3a:	4601      	mov	r1, r0
  40de3c:	4648      	mov	r0, r9
  40de3e:	9305      	str	r3, [sp, #20]
  40de40:	f000 fd88 	bl	40e954 <_Bfree>
  40de44:	2201      	movs	r2, #1
  40de46:	9b05      	ldr	r3, [sp, #20]
  40de48:	e7c0      	b.n	40ddcc <_dtoa_r+0x964>
  40de4a:	4641      	mov	r1, r8
  40de4c:	4620      	mov	r0, r4
  40de4e:	f000 ff63 	bl	40ed18 <__mcmp>
  40de52:	2800      	cmp	r0, #0
  40de54:	f6bf ad7d 	bge.w	40d952 <_dtoa_r+0x4ea>
  40de58:	4621      	mov	r1, r4
  40de5a:	9c04      	ldr	r4, [sp, #16]
  40de5c:	2300      	movs	r3, #0
  40de5e:	3c01      	subs	r4, #1
  40de60:	220a      	movs	r2, #10
  40de62:	4648      	mov	r0, r9
  40de64:	9404      	str	r4, [sp, #16]
  40de66:	f000 fd7f 	bl	40e968 <__multadd>
  40de6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40de6c:	4604      	mov	r4, r0
  40de6e:	2b00      	cmp	r3, #0
  40de70:	f47f af60 	bne.w	40dd34 <_dtoa_r+0x8cc>
  40de74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40de76:	2b00      	cmp	r3, #0
  40de78:	f340 81f6 	ble.w	40e268 <_dtoa_r+0xe00>
  40de7c:	9306      	str	r3, [sp, #24]
  40de7e:	e570      	b.n	40d962 <_dtoa_r+0x4fa>
  40de80:	9c08      	ldr	r4, [sp, #32]
  40de82:	e51f      	b.n	40d8c4 <_dtoa_r+0x45c>
  40de84:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40de86:	2b02      	cmp	r3, #2
  40de88:	f77f ad67 	ble.w	40d95a <_dtoa_r+0x4f2>
  40de8c:	9b06      	ldr	r3, [sp, #24]
  40de8e:	2b00      	cmp	r3, #0
  40de90:	f040 8179 	bne.w	40e186 <_dtoa_r+0xd1e>
  40de94:	4641      	mov	r1, r8
  40de96:	2205      	movs	r2, #5
  40de98:	4648      	mov	r0, r9
  40de9a:	f000 fd65 	bl	40e968 <__multadd>
  40de9e:	4601      	mov	r1, r0
  40dea0:	4680      	mov	r8, r0
  40dea2:	4620      	mov	r0, r4
  40dea4:	f000 ff38 	bl	40ed18 <__mcmp>
  40dea8:	2800      	cmp	r0, #0
  40deaa:	9408      	str	r4, [sp, #32]
  40deac:	f77f af0e 	ble.w	40dccc <_dtoa_r+0x864>
  40deb0:	9a04      	ldr	r2, [sp, #16]
  40deb2:	9907      	ldr	r1, [sp, #28]
  40deb4:	2331      	movs	r3, #49	; 0x31
  40deb6:	3201      	adds	r2, #1
  40deb8:	9204      	str	r2, [sp, #16]
  40deba:	700b      	strb	r3, [r1, #0]
  40debc:	1c4d      	adds	r5, r1, #1
  40debe:	e709      	b.n	40dcd4 <_dtoa_r+0x86c>
  40dec0:	9a04      	ldr	r2, [sp, #16]
  40dec2:	3201      	adds	r2, #1
  40dec4:	9204      	str	r2, [sp, #16]
  40dec6:	9a07      	ldr	r2, [sp, #28]
  40dec8:	2331      	movs	r3, #49	; 0x31
  40deca:	7013      	strb	r3, [r2, #0]
  40decc:	e588      	b.n	40d9e0 <_dtoa_r+0x578>
  40dece:	2301      	movs	r3, #1
  40ded0:	9309      	str	r3, [sp, #36]	; 0x24
  40ded2:	e5cd      	b.n	40da70 <_dtoa_r+0x608>
  40ded4:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40ded8:	e491      	b.n	40d7fe <_dtoa_r+0x396>
  40deda:	f1ba 0f00 	cmp.w	sl, #0
  40dede:	f47f ad04 	bne.w	40d8ea <_dtoa_r+0x482>
  40dee2:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40dee6:	2b00      	cmp	r3, #0
  40dee8:	f040 813f 	bne.w	40e16a <_dtoa_r+0xd02>
  40deec:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40def0:	0d3f      	lsrs	r7, r7, #20
  40def2:	053f      	lsls	r7, r7, #20
  40def4:	b137      	cbz	r7, 40df04 <_dtoa_r+0xa9c>
  40def6:	9b05      	ldr	r3, [sp, #20]
  40def8:	3301      	adds	r3, #1
  40defa:	9305      	str	r3, [sp, #20]
  40defc:	9b02      	ldr	r3, [sp, #8]
  40defe:	3301      	adds	r3, #1
  40df00:	9302      	str	r3, [sp, #8]
  40df02:	2701      	movs	r7, #1
  40df04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40df06:	2001      	movs	r0, #1
  40df08:	2b00      	cmp	r3, #0
  40df0a:	f43f acf8 	beq.w	40d8fe <_dtoa_r+0x496>
  40df0e:	e4ed      	b.n	40d8ec <_dtoa_r+0x484>
  40df10:	4640      	mov	r0, r8
  40df12:	f7fc fc85 	bl	40a820 <__aeabi_i2d>
  40df16:	4632      	mov	r2, r6
  40df18:	463b      	mov	r3, r7
  40df1a:	f7fc fce7 	bl	40a8ec <__aeabi_dmul>
  40df1e:	2200      	movs	r2, #0
  40df20:	4bbf      	ldr	r3, [pc, #764]	; (40e220 <_dtoa_r+0xdb8>)
  40df22:	f7fc fb31 	bl	40a588 <__adddf3>
  40df26:	4604      	mov	r4, r0
  40df28:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  40df2c:	4630      	mov	r0, r6
  40df2e:	4639      	mov	r1, r7
  40df30:	2200      	movs	r2, #0
  40df32:	4bbc      	ldr	r3, [pc, #752]	; (40e224 <_dtoa_r+0xdbc>)
  40df34:	f7fc fb26 	bl	40a584 <__aeabi_dsub>
  40df38:	4622      	mov	r2, r4
  40df3a:	462b      	mov	r3, r5
  40df3c:	4606      	mov	r6, r0
  40df3e:	460f      	mov	r7, r1
  40df40:	f7fc ff64 	bl	40ae0c <__aeabi_dcmpgt>
  40df44:	4680      	mov	r8, r0
  40df46:	2800      	cmp	r0, #0
  40df48:	f040 8105 	bne.w	40e156 <_dtoa_r+0xcee>
  40df4c:	4622      	mov	r2, r4
  40df4e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  40df52:	4630      	mov	r0, r6
  40df54:	4639      	mov	r1, r7
  40df56:	f7fc ff3b 	bl	40add0 <__aeabi_dcmplt>
  40df5a:	b108      	cbz	r0, 40df60 <_dtoa_r+0xaf8>
  40df5c:	4646      	mov	r6, r8
  40df5e:	e6b5      	b.n	40dccc <_dtoa_r+0x864>
  40df60:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40df64:	f7ff bb89 	b.w	40d67a <_dtoa_r+0x212>
  40df68:	9807      	ldr	r0, [sp, #28]
  40df6a:	f7ff baae 	b.w	40d4ca <_dtoa_r+0x62>
  40df6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40df70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40df72:	970a      	str	r7, [sp, #40]	; 0x28
  40df74:	1afb      	subs	r3, r7, r3
  40df76:	441a      	add	r2, r3
  40df78:	920b      	str	r2, [sp, #44]	; 0x2c
  40df7a:	2700      	movs	r7, #0
  40df7c:	e461      	b.n	40d842 <_dtoa_r+0x3da>
  40df7e:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40df82:	f04f 0802 	mov.w	r8, #2
  40df86:	e5bb      	b.n	40db00 <_dtoa_r+0x698>
  40df88:	461c      	mov	r4, r3
  40df8a:	2100      	movs	r1, #0
  40df8c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40df90:	e58a      	b.n	40daa8 <_dtoa_r+0x640>
  40df92:	2401      	movs	r4, #1
  40df94:	9421      	str	r4, [sp, #132]	; 0x84
  40df96:	940d      	str	r4, [sp, #52]	; 0x34
  40df98:	9406      	str	r4, [sp, #24]
  40df9a:	e7f6      	b.n	40df8a <_dtoa_r+0xb22>
  40df9c:	2a00      	cmp	r2, #0
  40df9e:	46d0      	mov	r8, sl
  40dfa0:	f8cd b014 	str.w	fp, [sp, #20]
  40dfa4:	469a      	mov	sl, r3
  40dfa6:	dd11      	ble.n	40dfcc <_dtoa_r+0xb64>
  40dfa8:	4621      	mov	r1, r4
  40dfaa:	2201      	movs	r2, #1
  40dfac:	4648      	mov	r0, r9
  40dfae:	f000 fe5b 	bl	40ec68 <__lshift>
  40dfb2:	4641      	mov	r1, r8
  40dfb4:	4604      	mov	r4, r0
  40dfb6:	f000 feaf 	bl	40ed18 <__mcmp>
  40dfba:	2800      	cmp	r0, #0
  40dfbc:	f340 8149 	ble.w	40e252 <_dtoa_r+0xdea>
  40dfc0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40dfc4:	f000 8106 	beq.w	40e1d4 <_dtoa_r+0xd6c>
  40dfc8:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40dfcc:	46b3      	mov	fp, r6
  40dfce:	f887 a000 	strb.w	sl, [r7]
  40dfd2:	1c7d      	adds	r5, r7, #1
  40dfd4:	9e05      	ldr	r6, [sp, #20]
  40dfd6:	9408      	str	r4, [sp, #32]
  40dfd8:	e502      	b.n	40d9e0 <_dtoa_r+0x578>
  40dfda:	d104      	bne.n	40dfe6 <_dtoa_r+0xb7e>
  40dfdc:	f01a 0f01 	tst.w	sl, #1
  40dfe0:	d001      	beq.n	40dfe6 <_dtoa_r+0xb7e>
  40dfe2:	e4ed      	b.n	40d9c0 <_dtoa_r+0x558>
  40dfe4:	4615      	mov	r5, r2
  40dfe6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40dfea:	2b30      	cmp	r3, #48	; 0x30
  40dfec:	f105 32ff 	add.w	r2, r5, #4294967295
  40dff0:	d0f8      	beq.n	40dfe4 <_dtoa_r+0xb7c>
  40dff2:	e4f5      	b.n	40d9e0 <_dtoa_r+0x578>
  40dff4:	9b04      	ldr	r3, [sp, #16]
  40dff6:	425c      	negs	r4, r3
  40dff8:	2c00      	cmp	r4, #0
  40dffa:	f000 80bf 	beq.w	40e17c <_dtoa_r+0xd14>
  40dffe:	4b8a      	ldr	r3, [pc, #552]	; (40e228 <_dtoa_r+0xdc0>)
  40e000:	f004 020f 	and.w	r2, r4, #15
  40e004:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40e008:	e9d3 2300 	ldrd	r2, r3, [r3]
  40e00c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40e010:	f7fc fc6c 	bl	40a8ec <__aeabi_dmul>
  40e014:	1124      	asrs	r4, r4, #4
  40e016:	4606      	mov	r6, r0
  40e018:	460f      	mov	r7, r1
  40e01a:	f000 812a 	beq.w	40e272 <_dtoa_r+0xe0a>
  40e01e:	4d83      	ldr	r5, [pc, #524]	; (40e22c <_dtoa_r+0xdc4>)
  40e020:	f04f 0802 	mov.w	r8, #2
  40e024:	07e2      	lsls	r2, r4, #31
  40e026:	d509      	bpl.n	40e03c <_dtoa_r+0xbd4>
  40e028:	4630      	mov	r0, r6
  40e02a:	4639      	mov	r1, r7
  40e02c:	e9d5 2300 	ldrd	r2, r3, [r5]
  40e030:	f7fc fc5c 	bl	40a8ec <__aeabi_dmul>
  40e034:	f108 0801 	add.w	r8, r8, #1
  40e038:	4606      	mov	r6, r0
  40e03a:	460f      	mov	r7, r1
  40e03c:	1064      	asrs	r4, r4, #1
  40e03e:	f105 0508 	add.w	r5, r5, #8
  40e042:	d1ef      	bne.n	40e024 <_dtoa_r+0xbbc>
  40e044:	e576      	b.n	40db34 <_dtoa_r+0x6cc>
  40e046:	9907      	ldr	r1, [sp, #28]
  40e048:	2230      	movs	r2, #48	; 0x30
  40e04a:	700a      	strb	r2, [r1, #0]
  40e04c:	9a04      	ldr	r2, [sp, #16]
  40e04e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  40e052:	3201      	adds	r2, #1
  40e054:	9204      	str	r2, [sp, #16]
  40e056:	f7ff bbd0 	b.w	40d7fa <_dtoa_r+0x392>
  40e05a:	6871      	ldr	r1, [r6, #4]
  40e05c:	4648      	mov	r0, r9
  40e05e:	f000 fc53 	bl	40e908 <_Balloc>
  40e062:	6933      	ldr	r3, [r6, #16]
  40e064:	1c9a      	adds	r2, r3, #2
  40e066:	4605      	mov	r5, r0
  40e068:	0092      	lsls	r2, r2, #2
  40e06a:	f106 010c 	add.w	r1, r6, #12
  40e06e:	300c      	adds	r0, #12
  40e070:	f7fd fc4a 	bl	40b908 <memcpy>
  40e074:	4629      	mov	r1, r5
  40e076:	2201      	movs	r2, #1
  40e078:	4648      	mov	r0, r9
  40e07a:	f000 fdf5 	bl	40ec68 <__lshift>
  40e07e:	9005      	str	r0, [sp, #20]
  40e080:	e670      	b.n	40dd64 <_dtoa_r+0x8fc>
  40e082:	2b39      	cmp	r3, #57	; 0x39
  40e084:	f8cd b014 	str.w	fp, [sp, #20]
  40e088:	46d0      	mov	r8, sl
  40e08a:	f000 80a3 	beq.w	40e1d4 <_dtoa_r+0xd6c>
  40e08e:	f103 0a01 	add.w	sl, r3, #1
  40e092:	46b3      	mov	fp, r6
  40e094:	f887 a000 	strb.w	sl, [r7]
  40e098:	1c7d      	adds	r5, r7, #1
  40e09a:	9e05      	ldr	r6, [sp, #20]
  40e09c:	9408      	str	r4, [sp, #32]
  40e09e:	e49f      	b.n	40d9e0 <_dtoa_r+0x578>
  40e0a0:	465a      	mov	r2, fp
  40e0a2:	46d0      	mov	r8, sl
  40e0a4:	46b3      	mov	fp, r6
  40e0a6:	469a      	mov	sl, r3
  40e0a8:	4616      	mov	r6, r2
  40e0aa:	e47d      	b.n	40d9a8 <_dtoa_r+0x540>
  40e0ac:	495e      	ldr	r1, [pc, #376]	; (40e228 <_dtoa_r+0xdc0>)
  40e0ae:	f108 3aff 	add.w	sl, r8, #4294967295
  40e0b2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
  40e0b6:	4622      	mov	r2, r4
  40e0b8:	462b      	mov	r3, r5
  40e0ba:	e9d1 0100 	ldrd	r0, r1, [r1]
  40e0be:	f7fc fc15 	bl	40a8ec <__aeabi_dmul>
  40e0c2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40e0c6:	4639      	mov	r1, r7
  40e0c8:	4630      	mov	r0, r6
  40e0ca:	f7fc febf 	bl	40ae4c <__aeabi_d2iz>
  40e0ce:	4604      	mov	r4, r0
  40e0d0:	f7fc fba6 	bl	40a820 <__aeabi_i2d>
  40e0d4:	4602      	mov	r2, r0
  40e0d6:	460b      	mov	r3, r1
  40e0d8:	4630      	mov	r0, r6
  40e0da:	4639      	mov	r1, r7
  40e0dc:	f7fc fa52 	bl	40a584 <__aeabi_dsub>
  40e0e0:	9a07      	ldr	r2, [sp, #28]
  40e0e2:	3430      	adds	r4, #48	; 0x30
  40e0e4:	f1b8 0f01 	cmp.w	r8, #1
  40e0e8:	4606      	mov	r6, r0
  40e0ea:	460f      	mov	r7, r1
  40e0ec:	7014      	strb	r4, [r2, #0]
  40e0ee:	f102 0501 	add.w	r5, r2, #1
  40e0f2:	d01e      	beq.n	40e132 <_dtoa_r+0xcca>
  40e0f4:	9b07      	ldr	r3, [sp, #28]
  40e0f6:	eb03 0b08 	add.w	fp, r3, r8
  40e0fa:	46a8      	mov	r8, r5
  40e0fc:	2200      	movs	r2, #0
  40e0fe:	4b4c      	ldr	r3, [pc, #304]	; (40e230 <_dtoa_r+0xdc8>)
  40e100:	4630      	mov	r0, r6
  40e102:	4639      	mov	r1, r7
  40e104:	f7fc fbf2 	bl	40a8ec <__aeabi_dmul>
  40e108:	460f      	mov	r7, r1
  40e10a:	4606      	mov	r6, r0
  40e10c:	f7fc fe9e 	bl	40ae4c <__aeabi_d2iz>
  40e110:	4604      	mov	r4, r0
  40e112:	f7fc fb85 	bl	40a820 <__aeabi_i2d>
  40e116:	3430      	adds	r4, #48	; 0x30
  40e118:	4602      	mov	r2, r0
  40e11a:	460b      	mov	r3, r1
  40e11c:	4630      	mov	r0, r6
  40e11e:	4639      	mov	r1, r7
  40e120:	f7fc fa30 	bl	40a584 <__aeabi_dsub>
  40e124:	f808 4b01 	strb.w	r4, [r8], #1
  40e128:	45c3      	cmp	fp, r8
  40e12a:	4606      	mov	r6, r0
  40e12c:	460f      	mov	r7, r1
  40e12e:	d1e5      	bne.n	40e0fc <_dtoa_r+0xc94>
  40e130:	4455      	add	r5, sl
  40e132:	2200      	movs	r2, #0
  40e134:	4b3f      	ldr	r3, [pc, #252]	; (40e234 <_dtoa_r+0xdcc>)
  40e136:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40e13a:	f7fc fa25 	bl	40a588 <__adddf3>
  40e13e:	4632      	mov	r2, r6
  40e140:	463b      	mov	r3, r7
  40e142:	f7fc fe45 	bl	40add0 <__aeabi_dcmplt>
  40e146:	2800      	cmp	r0, #0
  40e148:	d04c      	beq.n	40e1e4 <_dtoa_r+0xd7c>
  40e14a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40e14c:	9304      	str	r3, [sp, #16]
  40e14e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  40e152:	f7ff bb46 	b.w	40d7e2 <_dtoa_r+0x37a>
  40e156:	f04f 0800 	mov.w	r8, #0
  40e15a:	4646      	mov	r6, r8
  40e15c:	e6a8      	b.n	40deb0 <_dtoa_r+0xa48>
  40e15e:	9b05      	ldr	r3, [sp, #20]
  40e160:	9a06      	ldr	r2, [sp, #24]
  40e162:	1a9d      	subs	r5, r3, r2
  40e164:	2300      	movs	r3, #0
  40e166:	f7ff bb72 	b.w	40d84e <_dtoa_r+0x3e6>
  40e16a:	2700      	movs	r7, #0
  40e16c:	e6ca      	b.n	40df04 <_dtoa_r+0xa9c>
  40e16e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40e170:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40e172:	9d05      	ldr	r5, [sp, #20]
  40e174:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40e178:	f7ff bb69 	b.w	40d84e <_dtoa_r+0x3e6>
  40e17c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
  40e180:	f04f 0802 	mov.w	r8, #2
  40e184:	e4d6      	b.n	40db34 <_dtoa_r+0x6cc>
  40e186:	9408      	str	r4, [sp, #32]
  40e188:	e5a0      	b.n	40dccc <_dtoa_r+0x864>
  40e18a:	9b06      	ldr	r3, [sp, #24]
  40e18c:	2b00      	cmp	r3, #0
  40e18e:	f43f aebf 	beq.w	40df10 <_dtoa_r+0xaa8>
  40e192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40e194:	2b00      	cmp	r3, #0
  40e196:	f77f aee3 	ble.w	40df60 <_dtoa_r+0xaf8>
  40e19a:	2200      	movs	r2, #0
  40e19c:	4b24      	ldr	r3, [pc, #144]	; (40e230 <_dtoa_r+0xdc8>)
  40e19e:	4630      	mov	r0, r6
  40e1a0:	4639      	mov	r1, r7
  40e1a2:	f7fc fba3 	bl	40a8ec <__aeabi_dmul>
  40e1a6:	4606      	mov	r6, r0
  40e1a8:	460f      	mov	r7, r1
  40e1aa:	f108 0001 	add.w	r0, r8, #1
  40e1ae:	f7fc fb37 	bl	40a820 <__aeabi_i2d>
  40e1b2:	4632      	mov	r2, r6
  40e1b4:	463b      	mov	r3, r7
  40e1b6:	f7fc fb99 	bl	40a8ec <__aeabi_dmul>
  40e1ba:	2200      	movs	r2, #0
  40e1bc:	4b18      	ldr	r3, [pc, #96]	; (40e220 <_dtoa_r+0xdb8>)
  40e1be:	f7fc f9e3 	bl	40a588 <__adddf3>
  40e1c2:	9a04      	ldr	r2, [sp, #16]
  40e1c4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40e1c8:	3a01      	subs	r2, #1
  40e1ca:	4604      	mov	r4, r0
  40e1cc:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  40e1d0:	9211      	str	r2, [sp, #68]	; 0x44
  40e1d2:	e4d0      	b.n	40db76 <_dtoa_r+0x70e>
  40e1d4:	2239      	movs	r2, #57	; 0x39
  40e1d6:	46b3      	mov	fp, r6
  40e1d8:	9408      	str	r4, [sp, #32]
  40e1da:	9e05      	ldr	r6, [sp, #20]
  40e1dc:	703a      	strb	r2, [r7, #0]
  40e1de:	1c7d      	adds	r5, r7, #1
  40e1e0:	f7ff bbf0 	b.w	40d9c4 <_dtoa_r+0x55c>
  40e1e4:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  40e1e8:	2000      	movs	r0, #0
  40e1ea:	4912      	ldr	r1, [pc, #72]	; (40e234 <_dtoa_r+0xdcc>)
  40e1ec:	f7fc f9ca 	bl	40a584 <__aeabi_dsub>
  40e1f0:	4632      	mov	r2, r6
  40e1f2:	463b      	mov	r3, r7
  40e1f4:	f7fc fe0a 	bl	40ae0c <__aeabi_dcmpgt>
  40e1f8:	b908      	cbnz	r0, 40e1fe <_dtoa_r+0xd96>
  40e1fa:	e6b1      	b.n	40df60 <_dtoa_r+0xaf8>
  40e1fc:	4615      	mov	r5, r2
  40e1fe:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40e202:	2b30      	cmp	r3, #48	; 0x30
  40e204:	f105 32ff 	add.w	r2, r5, #4294967295
  40e208:	d0f8      	beq.n	40e1fc <_dtoa_r+0xd94>
  40e20a:	e530      	b.n	40dc6e <_dtoa_r+0x806>
  40e20c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40e20e:	9304      	str	r3, [sp, #16]
  40e210:	f7ff bae7 	b.w	40d7e2 <_dtoa_r+0x37a>
  40e214:	f1ba 0f00 	cmp.w	sl, #0
  40e218:	f47f ad7a 	bne.w	40dd10 <_dtoa_r+0x8a8>
  40e21c:	e661      	b.n	40dee2 <_dtoa_r+0xa7a>
  40e21e:	bf00      	nop
  40e220:	401c0000 	.word	0x401c0000
  40e224:	40140000 	.word	0x40140000
  40e228:	0040fc00 	.word	0x0040fc00
  40e22c:	0040fcc8 	.word	0x0040fcc8
  40e230:	40240000 	.word	0x40240000
  40e234:	3fe00000 	.word	0x3fe00000
  40e238:	2b39      	cmp	r3, #57	; 0x39
  40e23a:	f8cd b014 	str.w	fp, [sp, #20]
  40e23e:	46d0      	mov	r8, sl
  40e240:	f8dd b008 	ldr.w	fp, [sp, #8]
  40e244:	469a      	mov	sl, r3
  40e246:	d0c5      	beq.n	40e1d4 <_dtoa_r+0xd6c>
  40e248:	f1bb 0f00 	cmp.w	fp, #0
  40e24c:	f73f aebc 	bgt.w	40dfc8 <_dtoa_r+0xb60>
  40e250:	e6bc      	b.n	40dfcc <_dtoa_r+0xb64>
  40e252:	f47f aebb 	bne.w	40dfcc <_dtoa_r+0xb64>
  40e256:	f01a 0f01 	tst.w	sl, #1
  40e25a:	f43f aeb7 	beq.w	40dfcc <_dtoa_r+0xb64>
  40e25e:	e6af      	b.n	40dfc0 <_dtoa_r+0xb58>
  40e260:	f04f 0800 	mov.w	r8, #0
  40e264:	4646      	mov	r6, r8
  40e266:	e531      	b.n	40dccc <_dtoa_r+0x864>
  40e268:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40e26a:	2b02      	cmp	r3, #2
  40e26c:	dc21      	bgt.n	40e2b2 <_dtoa_r+0xe4a>
  40e26e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40e270:	e604      	b.n	40de7c <_dtoa_r+0xa14>
  40e272:	f04f 0802 	mov.w	r8, #2
  40e276:	e45d      	b.n	40db34 <_dtoa_r+0x6cc>
  40e278:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40e27a:	2b02      	cmp	r3, #2
  40e27c:	dc19      	bgt.n	40e2b2 <_dtoa_r+0xe4a>
  40e27e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40e280:	e563      	b.n	40dd4a <_dtoa_r+0x8e2>
  40e282:	2400      	movs	r4, #0
  40e284:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
  40e288:	4621      	mov	r1, r4
  40e28a:	4648      	mov	r0, r9
  40e28c:	f000 fb3c 	bl	40e908 <_Balloc>
  40e290:	f04f 33ff 	mov.w	r3, #4294967295
  40e294:	9306      	str	r3, [sp, #24]
  40e296:	930d      	str	r3, [sp, #52]	; 0x34
  40e298:	2301      	movs	r3, #1
  40e29a:	9007      	str	r0, [sp, #28]
  40e29c:	9421      	str	r4, [sp, #132]	; 0x84
  40e29e:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  40e2a2:	9309      	str	r3, [sp, #36]	; 0x24
  40e2a4:	f7ff b9e9 	b.w	40d67a <_dtoa_r+0x212>
  40e2a8:	f43f ab3d 	beq.w	40d926 <_dtoa_r+0x4be>
  40e2ac:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40e2b0:	e522      	b.n	40dcf8 <_dtoa_r+0x890>
  40e2b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40e2b4:	9306      	str	r3, [sp, #24]
  40e2b6:	e5e9      	b.n	40de8c <_dtoa_r+0xa24>
  40e2b8:	2501      	movs	r5, #1
  40e2ba:	f7ff b9a8 	b.w	40d60e <_dtoa_r+0x1a6>
  40e2be:	bf00      	nop

0040e2c0 <__libc_fini_array>:
  40e2c0:	b538      	push	{r3, r4, r5, lr}
  40e2c2:	4d07      	ldr	r5, [pc, #28]	; (40e2e0 <__libc_fini_array+0x20>)
  40e2c4:	4c07      	ldr	r4, [pc, #28]	; (40e2e4 <__libc_fini_array+0x24>)
  40e2c6:	1b2c      	subs	r4, r5, r4
  40e2c8:	10a4      	asrs	r4, r4, #2
  40e2ca:	d005      	beq.n	40e2d8 <__libc_fini_array+0x18>
  40e2cc:	3c01      	subs	r4, #1
  40e2ce:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40e2d2:	4798      	blx	r3
  40e2d4:	2c00      	cmp	r4, #0
  40e2d6:	d1f9      	bne.n	40e2cc <__libc_fini_array+0xc>
  40e2d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40e2dc:	f001 bd18 	b.w	40fd10 <_fini>
  40e2e0:	0040fd20 	.word	0x0040fd20
  40e2e4:	0040fd1c 	.word	0x0040fd1c

0040e2e8 <_localeconv_r>:
  40e2e8:	4800      	ldr	r0, [pc, #0]	; (40e2ec <_localeconv_r+0x4>)
  40e2ea:	4770      	bx	lr
  40e2ec:	2000055c 	.word	0x2000055c

0040e2f0 <_malloc_r>:
  40e2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e2f4:	f101 050b 	add.w	r5, r1, #11
  40e2f8:	2d16      	cmp	r5, #22
  40e2fa:	b083      	sub	sp, #12
  40e2fc:	4606      	mov	r6, r0
  40e2fe:	f240 809f 	bls.w	40e440 <_malloc_r+0x150>
  40e302:	f035 0507 	bics.w	r5, r5, #7
  40e306:	f100 80bf 	bmi.w	40e488 <_malloc_r+0x198>
  40e30a:	42a9      	cmp	r1, r5
  40e30c:	f200 80bc 	bhi.w	40e488 <_malloc_r+0x198>
  40e310:	f000 faf6 	bl	40e900 <__malloc_lock>
  40e314:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  40e318:	f0c0 829c 	bcc.w	40e854 <_malloc_r+0x564>
  40e31c:	0a6b      	lsrs	r3, r5, #9
  40e31e:	f000 80ba 	beq.w	40e496 <_malloc_r+0x1a6>
  40e322:	2b04      	cmp	r3, #4
  40e324:	f200 8183 	bhi.w	40e62e <_malloc_r+0x33e>
  40e328:	09a8      	lsrs	r0, r5, #6
  40e32a:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  40e32e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40e332:	3038      	adds	r0, #56	; 0x38
  40e334:	4fc4      	ldr	r7, [pc, #784]	; (40e648 <_malloc_r+0x358>)
  40e336:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  40e33a:	f1a3 0108 	sub.w	r1, r3, #8
  40e33e:	685c      	ldr	r4, [r3, #4]
  40e340:	42a1      	cmp	r1, r4
  40e342:	d107      	bne.n	40e354 <_malloc_r+0x64>
  40e344:	e0ac      	b.n	40e4a0 <_malloc_r+0x1b0>
  40e346:	2a00      	cmp	r2, #0
  40e348:	f280 80ac 	bge.w	40e4a4 <_malloc_r+0x1b4>
  40e34c:	68e4      	ldr	r4, [r4, #12]
  40e34e:	42a1      	cmp	r1, r4
  40e350:	f000 80a6 	beq.w	40e4a0 <_malloc_r+0x1b0>
  40e354:	6863      	ldr	r3, [r4, #4]
  40e356:	f023 0303 	bic.w	r3, r3, #3
  40e35a:	1b5a      	subs	r2, r3, r5
  40e35c:	2a0f      	cmp	r2, #15
  40e35e:	ddf2      	ble.n	40e346 <_malloc_r+0x56>
  40e360:	49b9      	ldr	r1, [pc, #740]	; (40e648 <_malloc_r+0x358>)
  40e362:	693c      	ldr	r4, [r7, #16]
  40e364:	f101 0e08 	add.w	lr, r1, #8
  40e368:	4574      	cmp	r4, lr
  40e36a:	f000 81b3 	beq.w	40e6d4 <_malloc_r+0x3e4>
  40e36e:	6863      	ldr	r3, [r4, #4]
  40e370:	f023 0303 	bic.w	r3, r3, #3
  40e374:	1b5a      	subs	r2, r3, r5
  40e376:	2a0f      	cmp	r2, #15
  40e378:	f300 8199 	bgt.w	40e6ae <_malloc_r+0x3be>
  40e37c:	2a00      	cmp	r2, #0
  40e37e:	f8c1 e014 	str.w	lr, [r1, #20]
  40e382:	f8c1 e010 	str.w	lr, [r1, #16]
  40e386:	f280 809e 	bge.w	40e4c6 <_malloc_r+0x1d6>
  40e38a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40e38e:	f080 8167 	bcs.w	40e660 <_malloc_r+0x370>
  40e392:	08db      	lsrs	r3, r3, #3
  40e394:	f103 0c01 	add.w	ip, r3, #1
  40e398:	2201      	movs	r2, #1
  40e39a:	109b      	asrs	r3, r3, #2
  40e39c:	fa02 f303 	lsl.w	r3, r2, r3
  40e3a0:	684a      	ldr	r2, [r1, #4]
  40e3a2:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  40e3a6:	f8c4 8008 	str.w	r8, [r4, #8]
  40e3aa:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  40e3ae:	431a      	orrs	r2, r3
  40e3b0:	f1a9 0308 	sub.w	r3, r9, #8
  40e3b4:	60e3      	str	r3, [r4, #12]
  40e3b6:	604a      	str	r2, [r1, #4]
  40e3b8:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  40e3bc:	f8c8 400c 	str.w	r4, [r8, #12]
  40e3c0:	1083      	asrs	r3, r0, #2
  40e3c2:	2401      	movs	r4, #1
  40e3c4:	409c      	lsls	r4, r3
  40e3c6:	4294      	cmp	r4, r2
  40e3c8:	f200 808a 	bhi.w	40e4e0 <_malloc_r+0x1f0>
  40e3cc:	4214      	tst	r4, r2
  40e3ce:	d106      	bne.n	40e3de <_malloc_r+0xee>
  40e3d0:	f020 0003 	bic.w	r0, r0, #3
  40e3d4:	0064      	lsls	r4, r4, #1
  40e3d6:	4214      	tst	r4, r2
  40e3d8:	f100 0004 	add.w	r0, r0, #4
  40e3dc:	d0fa      	beq.n	40e3d4 <_malloc_r+0xe4>
  40e3de:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40e3e2:	46cc      	mov	ip, r9
  40e3e4:	4680      	mov	r8, r0
  40e3e6:	f8dc 100c 	ldr.w	r1, [ip, #12]
  40e3ea:	458c      	cmp	ip, r1
  40e3ec:	d107      	bne.n	40e3fe <_malloc_r+0x10e>
  40e3ee:	e173      	b.n	40e6d8 <_malloc_r+0x3e8>
  40e3f0:	2a00      	cmp	r2, #0
  40e3f2:	f280 8181 	bge.w	40e6f8 <_malloc_r+0x408>
  40e3f6:	68c9      	ldr	r1, [r1, #12]
  40e3f8:	458c      	cmp	ip, r1
  40e3fa:	f000 816d 	beq.w	40e6d8 <_malloc_r+0x3e8>
  40e3fe:	684b      	ldr	r3, [r1, #4]
  40e400:	f023 0303 	bic.w	r3, r3, #3
  40e404:	1b5a      	subs	r2, r3, r5
  40e406:	2a0f      	cmp	r2, #15
  40e408:	ddf2      	ble.n	40e3f0 <_malloc_r+0x100>
  40e40a:	460c      	mov	r4, r1
  40e40c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40e410:	f854 8f08 	ldr.w	r8, [r4, #8]!
  40e414:	194b      	adds	r3, r1, r5
  40e416:	f045 0501 	orr.w	r5, r5, #1
  40e41a:	604d      	str	r5, [r1, #4]
  40e41c:	f042 0101 	orr.w	r1, r2, #1
  40e420:	f8c8 c00c 	str.w	ip, [r8, #12]
  40e424:	4630      	mov	r0, r6
  40e426:	f8cc 8008 	str.w	r8, [ip, #8]
  40e42a:	617b      	str	r3, [r7, #20]
  40e42c:	613b      	str	r3, [r7, #16]
  40e42e:	f8c3 e00c 	str.w	lr, [r3, #12]
  40e432:	f8c3 e008 	str.w	lr, [r3, #8]
  40e436:	6059      	str	r1, [r3, #4]
  40e438:	509a      	str	r2, [r3, r2]
  40e43a:	f000 fa63 	bl	40e904 <__malloc_unlock>
  40e43e:	e01f      	b.n	40e480 <_malloc_r+0x190>
  40e440:	2910      	cmp	r1, #16
  40e442:	d821      	bhi.n	40e488 <_malloc_r+0x198>
  40e444:	f000 fa5c 	bl	40e900 <__malloc_lock>
  40e448:	2510      	movs	r5, #16
  40e44a:	2306      	movs	r3, #6
  40e44c:	2002      	movs	r0, #2
  40e44e:	4f7e      	ldr	r7, [pc, #504]	; (40e648 <_malloc_r+0x358>)
  40e450:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  40e454:	f1a3 0208 	sub.w	r2, r3, #8
  40e458:	685c      	ldr	r4, [r3, #4]
  40e45a:	4294      	cmp	r4, r2
  40e45c:	f000 8145 	beq.w	40e6ea <_malloc_r+0x3fa>
  40e460:	6863      	ldr	r3, [r4, #4]
  40e462:	68e1      	ldr	r1, [r4, #12]
  40e464:	68a5      	ldr	r5, [r4, #8]
  40e466:	f023 0303 	bic.w	r3, r3, #3
  40e46a:	4423      	add	r3, r4
  40e46c:	4630      	mov	r0, r6
  40e46e:	685a      	ldr	r2, [r3, #4]
  40e470:	60e9      	str	r1, [r5, #12]
  40e472:	f042 0201 	orr.w	r2, r2, #1
  40e476:	608d      	str	r5, [r1, #8]
  40e478:	605a      	str	r2, [r3, #4]
  40e47a:	f000 fa43 	bl	40e904 <__malloc_unlock>
  40e47e:	3408      	adds	r4, #8
  40e480:	4620      	mov	r0, r4
  40e482:	b003      	add	sp, #12
  40e484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e488:	2400      	movs	r4, #0
  40e48a:	230c      	movs	r3, #12
  40e48c:	4620      	mov	r0, r4
  40e48e:	6033      	str	r3, [r6, #0]
  40e490:	b003      	add	sp, #12
  40e492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e496:	2380      	movs	r3, #128	; 0x80
  40e498:	f04f 0e40 	mov.w	lr, #64	; 0x40
  40e49c:	203f      	movs	r0, #63	; 0x3f
  40e49e:	e749      	b.n	40e334 <_malloc_r+0x44>
  40e4a0:	4670      	mov	r0, lr
  40e4a2:	e75d      	b.n	40e360 <_malloc_r+0x70>
  40e4a4:	4423      	add	r3, r4
  40e4a6:	68e1      	ldr	r1, [r4, #12]
  40e4a8:	685a      	ldr	r2, [r3, #4]
  40e4aa:	68a5      	ldr	r5, [r4, #8]
  40e4ac:	f042 0201 	orr.w	r2, r2, #1
  40e4b0:	60e9      	str	r1, [r5, #12]
  40e4b2:	4630      	mov	r0, r6
  40e4b4:	608d      	str	r5, [r1, #8]
  40e4b6:	605a      	str	r2, [r3, #4]
  40e4b8:	f000 fa24 	bl	40e904 <__malloc_unlock>
  40e4bc:	3408      	adds	r4, #8
  40e4be:	4620      	mov	r0, r4
  40e4c0:	b003      	add	sp, #12
  40e4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e4c6:	4423      	add	r3, r4
  40e4c8:	4630      	mov	r0, r6
  40e4ca:	685a      	ldr	r2, [r3, #4]
  40e4cc:	f042 0201 	orr.w	r2, r2, #1
  40e4d0:	605a      	str	r2, [r3, #4]
  40e4d2:	f000 fa17 	bl	40e904 <__malloc_unlock>
  40e4d6:	3408      	adds	r4, #8
  40e4d8:	4620      	mov	r0, r4
  40e4da:	b003      	add	sp, #12
  40e4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e4e0:	68bc      	ldr	r4, [r7, #8]
  40e4e2:	6863      	ldr	r3, [r4, #4]
  40e4e4:	f023 0803 	bic.w	r8, r3, #3
  40e4e8:	45a8      	cmp	r8, r5
  40e4ea:	d304      	bcc.n	40e4f6 <_malloc_r+0x206>
  40e4ec:	ebc5 0308 	rsb	r3, r5, r8
  40e4f0:	2b0f      	cmp	r3, #15
  40e4f2:	f300 808c 	bgt.w	40e60e <_malloc_r+0x31e>
  40e4f6:	4b55      	ldr	r3, [pc, #340]	; (40e64c <_malloc_r+0x35c>)
  40e4f8:	f8df 9160 	ldr.w	r9, [pc, #352]	; 40e65c <_malloc_r+0x36c>
  40e4fc:	681a      	ldr	r2, [r3, #0]
  40e4fe:	f8d9 3000 	ldr.w	r3, [r9]
  40e502:	3301      	adds	r3, #1
  40e504:	442a      	add	r2, r5
  40e506:	eb04 0a08 	add.w	sl, r4, r8
  40e50a:	f000 8160 	beq.w	40e7ce <_malloc_r+0x4de>
  40e50e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  40e512:	320f      	adds	r2, #15
  40e514:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  40e518:	f022 020f 	bic.w	r2, r2, #15
  40e51c:	4611      	mov	r1, r2
  40e51e:	4630      	mov	r0, r6
  40e520:	9201      	str	r2, [sp, #4]
  40e522:	f000 fcff 	bl	40ef24 <_sbrk_r>
  40e526:	f1b0 3fff 	cmp.w	r0, #4294967295
  40e52a:	4683      	mov	fp, r0
  40e52c:	9a01      	ldr	r2, [sp, #4]
  40e52e:	f000 8158 	beq.w	40e7e2 <_malloc_r+0x4f2>
  40e532:	4582      	cmp	sl, r0
  40e534:	f200 80fc 	bhi.w	40e730 <_malloc_r+0x440>
  40e538:	4b45      	ldr	r3, [pc, #276]	; (40e650 <_malloc_r+0x360>)
  40e53a:	6819      	ldr	r1, [r3, #0]
  40e53c:	45da      	cmp	sl, fp
  40e53e:	4411      	add	r1, r2
  40e540:	6019      	str	r1, [r3, #0]
  40e542:	f000 8153 	beq.w	40e7ec <_malloc_r+0x4fc>
  40e546:	f8d9 0000 	ldr.w	r0, [r9]
  40e54a:	f8df e110 	ldr.w	lr, [pc, #272]	; 40e65c <_malloc_r+0x36c>
  40e54e:	3001      	adds	r0, #1
  40e550:	bf1b      	ittet	ne
  40e552:	ebca 0a0b 	rsbne	sl, sl, fp
  40e556:	4451      	addne	r1, sl
  40e558:	f8ce b000 	streq.w	fp, [lr]
  40e55c:	6019      	strne	r1, [r3, #0]
  40e55e:	f01b 0107 	ands.w	r1, fp, #7
  40e562:	f000 8117 	beq.w	40e794 <_malloc_r+0x4a4>
  40e566:	f1c1 0008 	rsb	r0, r1, #8
  40e56a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40e56e:	4483      	add	fp, r0
  40e570:	3108      	adds	r1, #8
  40e572:	445a      	add	r2, fp
  40e574:	f3c2 020b 	ubfx	r2, r2, #0, #12
  40e578:	ebc2 0901 	rsb	r9, r2, r1
  40e57c:	4649      	mov	r1, r9
  40e57e:	4630      	mov	r0, r6
  40e580:	9301      	str	r3, [sp, #4]
  40e582:	f000 fccf 	bl	40ef24 <_sbrk_r>
  40e586:	1c43      	adds	r3, r0, #1
  40e588:	9b01      	ldr	r3, [sp, #4]
  40e58a:	f000 813f 	beq.w	40e80c <_malloc_r+0x51c>
  40e58e:	ebcb 0200 	rsb	r2, fp, r0
  40e592:	444a      	add	r2, r9
  40e594:	f042 0201 	orr.w	r2, r2, #1
  40e598:	6819      	ldr	r1, [r3, #0]
  40e59a:	f8c7 b008 	str.w	fp, [r7, #8]
  40e59e:	4449      	add	r1, r9
  40e5a0:	42bc      	cmp	r4, r7
  40e5a2:	f8cb 2004 	str.w	r2, [fp, #4]
  40e5a6:	6019      	str	r1, [r3, #0]
  40e5a8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40e650 <_malloc_r+0x360>
  40e5ac:	d016      	beq.n	40e5dc <_malloc_r+0x2ec>
  40e5ae:	f1b8 0f0f 	cmp.w	r8, #15
  40e5b2:	f240 80fd 	bls.w	40e7b0 <_malloc_r+0x4c0>
  40e5b6:	6862      	ldr	r2, [r4, #4]
  40e5b8:	f1a8 030c 	sub.w	r3, r8, #12
  40e5bc:	f023 0307 	bic.w	r3, r3, #7
  40e5c0:	18e0      	adds	r0, r4, r3
  40e5c2:	f002 0201 	and.w	r2, r2, #1
  40e5c6:	f04f 0e05 	mov.w	lr, #5
  40e5ca:	431a      	orrs	r2, r3
  40e5cc:	2b0f      	cmp	r3, #15
  40e5ce:	6062      	str	r2, [r4, #4]
  40e5d0:	f8c0 e004 	str.w	lr, [r0, #4]
  40e5d4:	f8c0 e008 	str.w	lr, [r0, #8]
  40e5d8:	f200 811c 	bhi.w	40e814 <_malloc_r+0x524>
  40e5dc:	4b1d      	ldr	r3, [pc, #116]	; (40e654 <_malloc_r+0x364>)
  40e5de:	68bc      	ldr	r4, [r7, #8]
  40e5e0:	681a      	ldr	r2, [r3, #0]
  40e5e2:	4291      	cmp	r1, r2
  40e5e4:	bf88      	it	hi
  40e5e6:	6019      	strhi	r1, [r3, #0]
  40e5e8:	4b1b      	ldr	r3, [pc, #108]	; (40e658 <_malloc_r+0x368>)
  40e5ea:	681a      	ldr	r2, [r3, #0]
  40e5ec:	4291      	cmp	r1, r2
  40e5ee:	6862      	ldr	r2, [r4, #4]
  40e5f0:	bf88      	it	hi
  40e5f2:	6019      	strhi	r1, [r3, #0]
  40e5f4:	f022 0203 	bic.w	r2, r2, #3
  40e5f8:	4295      	cmp	r5, r2
  40e5fa:	eba2 0305 	sub.w	r3, r2, r5
  40e5fe:	d801      	bhi.n	40e604 <_malloc_r+0x314>
  40e600:	2b0f      	cmp	r3, #15
  40e602:	dc04      	bgt.n	40e60e <_malloc_r+0x31e>
  40e604:	4630      	mov	r0, r6
  40e606:	f000 f97d 	bl	40e904 <__malloc_unlock>
  40e60a:	2400      	movs	r4, #0
  40e60c:	e738      	b.n	40e480 <_malloc_r+0x190>
  40e60e:	1962      	adds	r2, r4, r5
  40e610:	f043 0301 	orr.w	r3, r3, #1
  40e614:	f045 0501 	orr.w	r5, r5, #1
  40e618:	6065      	str	r5, [r4, #4]
  40e61a:	4630      	mov	r0, r6
  40e61c:	60ba      	str	r2, [r7, #8]
  40e61e:	6053      	str	r3, [r2, #4]
  40e620:	f000 f970 	bl	40e904 <__malloc_unlock>
  40e624:	3408      	adds	r4, #8
  40e626:	4620      	mov	r0, r4
  40e628:	b003      	add	sp, #12
  40e62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e62e:	2b14      	cmp	r3, #20
  40e630:	d971      	bls.n	40e716 <_malloc_r+0x426>
  40e632:	2b54      	cmp	r3, #84	; 0x54
  40e634:	f200 80a4 	bhi.w	40e780 <_malloc_r+0x490>
  40e638:	0b28      	lsrs	r0, r5, #12
  40e63a:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  40e63e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40e642:	306e      	adds	r0, #110	; 0x6e
  40e644:	e676      	b.n	40e334 <_malloc_r+0x44>
  40e646:	bf00      	nop
  40e648:	20000594 	.word	0x20000594
  40e64c:	20002e5c 	.word	0x20002e5c
  40e650:	20002e60 	.word	0x20002e60
  40e654:	20002e58 	.word	0x20002e58
  40e658:	20002e54 	.word	0x20002e54
  40e65c:	200009a0 	.word	0x200009a0
  40e660:	0a5a      	lsrs	r2, r3, #9
  40e662:	2a04      	cmp	r2, #4
  40e664:	d95e      	bls.n	40e724 <_malloc_r+0x434>
  40e666:	2a14      	cmp	r2, #20
  40e668:	f200 80b3 	bhi.w	40e7d2 <_malloc_r+0x4e2>
  40e66c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40e670:	0049      	lsls	r1, r1, #1
  40e672:	325b      	adds	r2, #91	; 0x5b
  40e674:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  40e678:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  40e67c:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 40e85c <_malloc_r+0x56c>
  40e680:	f1ac 0c08 	sub.w	ip, ip, #8
  40e684:	458c      	cmp	ip, r1
  40e686:	f000 8088 	beq.w	40e79a <_malloc_r+0x4aa>
  40e68a:	684a      	ldr	r2, [r1, #4]
  40e68c:	f022 0203 	bic.w	r2, r2, #3
  40e690:	4293      	cmp	r3, r2
  40e692:	d202      	bcs.n	40e69a <_malloc_r+0x3aa>
  40e694:	6889      	ldr	r1, [r1, #8]
  40e696:	458c      	cmp	ip, r1
  40e698:	d1f7      	bne.n	40e68a <_malloc_r+0x39a>
  40e69a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40e69e:	687a      	ldr	r2, [r7, #4]
  40e6a0:	f8c4 c00c 	str.w	ip, [r4, #12]
  40e6a4:	60a1      	str	r1, [r4, #8]
  40e6a6:	f8cc 4008 	str.w	r4, [ip, #8]
  40e6aa:	60cc      	str	r4, [r1, #12]
  40e6ac:	e688      	b.n	40e3c0 <_malloc_r+0xd0>
  40e6ae:	1963      	adds	r3, r4, r5
  40e6b0:	f042 0701 	orr.w	r7, r2, #1
  40e6b4:	f045 0501 	orr.w	r5, r5, #1
  40e6b8:	6065      	str	r5, [r4, #4]
  40e6ba:	4630      	mov	r0, r6
  40e6bc:	614b      	str	r3, [r1, #20]
  40e6be:	610b      	str	r3, [r1, #16]
  40e6c0:	f8c3 e00c 	str.w	lr, [r3, #12]
  40e6c4:	f8c3 e008 	str.w	lr, [r3, #8]
  40e6c8:	605f      	str	r7, [r3, #4]
  40e6ca:	509a      	str	r2, [r3, r2]
  40e6cc:	3408      	adds	r4, #8
  40e6ce:	f000 f919 	bl	40e904 <__malloc_unlock>
  40e6d2:	e6d5      	b.n	40e480 <_malloc_r+0x190>
  40e6d4:	684a      	ldr	r2, [r1, #4]
  40e6d6:	e673      	b.n	40e3c0 <_malloc_r+0xd0>
  40e6d8:	f108 0801 	add.w	r8, r8, #1
  40e6dc:	f018 0f03 	tst.w	r8, #3
  40e6e0:	f10c 0c08 	add.w	ip, ip, #8
  40e6e4:	f47f ae7f 	bne.w	40e3e6 <_malloc_r+0xf6>
  40e6e8:	e030      	b.n	40e74c <_malloc_r+0x45c>
  40e6ea:	68dc      	ldr	r4, [r3, #12]
  40e6ec:	42a3      	cmp	r3, r4
  40e6ee:	bf08      	it	eq
  40e6f0:	3002      	addeq	r0, #2
  40e6f2:	f43f ae35 	beq.w	40e360 <_malloc_r+0x70>
  40e6f6:	e6b3      	b.n	40e460 <_malloc_r+0x170>
  40e6f8:	440b      	add	r3, r1
  40e6fa:	460c      	mov	r4, r1
  40e6fc:	685a      	ldr	r2, [r3, #4]
  40e6fe:	68c9      	ldr	r1, [r1, #12]
  40e700:	f854 5f08 	ldr.w	r5, [r4, #8]!
  40e704:	f042 0201 	orr.w	r2, r2, #1
  40e708:	605a      	str	r2, [r3, #4]
  40e70a:	4630      	mov	r0, r6
  40e70c:	60e9      	str	r1, [r5, #12]
  40e70e:	608d      	str	r5, [r1, #8]
  40e710:	f000 f8f8 	bl	40e904 <__malloc_unlock>
  40e714:	e6b4      	b.n	40e480 <_malloc_r+0x190>
  40e716:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  40e71a:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  40e71e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40e722:	e607      	b.n	40e334 <_malloc_r+0x44>
  40e724:	099a      	lsrs	r2, r3, #6
  40e726:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40e72a:	0049      	lsls	r1, r1, #1
  40e72c:	3238      	adds	r2, #56	; 0x38
  40e72e:	e7a1      	b.n	40e674 <_malloc_r+0x384>
  40e730:	42bc      	cmp	r4, r7
  40e732:	4b4a      	ldr	r3, [pc, #296]	; (40e85c <_malloc_r+0x56c>)
  40e734:	f43f af00 	beq.w	40e538 <_malloc_r+0x248>
  40e738:	689c      	ldr	r4, [r3, #8]
  40e73a:	6862      	ldr	r2, [r4, #4]
  40e73c:	f022 0203 	bic.w	r2, r2, #3
  40e740:	e75a      	b.n	40e5f8 <_malloc_r+0x308>
  40e742:	f859 3908 	ldr.w	r3, [r9], #-8
  40e746:	4599      	cmp	r9, r3
  40e748:	f040 8082 	bne.w	40e850 <_malloc_r+0x560>
  40e74c:	f010 0f03 	tst.w	r0, #3
  40e750:	f100 30ff 	add.w	r0, r0, #4294967295
  40e754:	d1f5      	bne.n	40e742 <_malloc_r+0x452>
  40e756:	687b      	ldr	r3, [r7, #4]
  40e758:	ea23 0304 	bic.w	r3, r3, r4
  40e75c:	607b      	str	r3, [r7, #4]
  40e75e:	0064      	lsls	r4, r4, #1
  40e760:	429c      	cmp	r4, r3
  40e762:	f63f aebd 	bhi.w	40e4e0 <_malloc_r+0x1f0>
  40e766:	2c00      	cmp	r4, #0
  40e768:	f43f aeba 	beq.w	40e4e0 <_malloc_r+0x1f0>
  40e76c:	421c      	tst	r4, r3
  40e76e:	4640      	mov	r0, r8
  40e770:	f47f ae35 	bne.w	40e3de <_malloc_r+0xee>
  40e774:	0064      	lsls	r4, r4, #1
  40e776:	421c      	tst	r4, r3
  40e778:	f100 0004 	add.w	r0, r0, #4
  40e77c:	d0fa      	beq.n	40e774 <_malloc_r+0x484>
  40e77e:	e62e      	b.n	40e3de <_malloc_r+0xee>
  40e780:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40e784:	d818      	bhi.n	40e7b8 <_malloc_r+0x4c8>
  40e786:	0be8      	lsrs	r0, r5, #15
  40e788:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  40e78c:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40e790:	3077      	adds	r0, #119	; 0x77
  40e792:	e5cf      	b.n	40e334 <_malloc_r+0x44>
  40e794:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40e798:	e6eb      	b.n	40e572 <_malloc_r+0x282>
  40e79a:	2101      	movs	r1, #1
  40e79c:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40e7a0:	1092      	asrs	r2, r2, #2
  40e7a2:	fa01 f202 	lsl.w	r2, r1, r2
  40e7a6:	431a      	orrs	r2, r3
  40e7a8:	f8c8 2004 	str.w	r2, [r8, #4]
  40e7ac:	4661      	mov	r1, ip
  40e7ae:	e777      	b.n	40e6a0 <_malloc_r+0x3b0>
  40e7b0:	2301      	movs	r3, #1
  40e7b2:	f8cb 3004 	str.w	r3, [fp, #4]
  40e7b6:	e725      	b.n	40e604 <_malloc_r+0x314>
  40e7b8:	f240 5254 	movw	r2, #1364	; 0x554
  40e7bc:	4293      	cmp	r3, r2
  40e7be:	d820      	bhi.n	40e802 <_malloc_r+0x512>
  40e7c0:	0ca8      	lsrs	r0, r5, #18
  40e7c2:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  40e7c6:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40e7ca:	307c      	adds	r0, #124	; 0x7c
  40e7cc:	e5b2      	b.n	40e334 <_malloc_r+0x44>
  40e7ce:	3210      	adds	r2, #16
  40e7d0:	e6a4      	b.n	40e51c <_malloc_r+0x22c>
  40e7d2:	2a54      	cmp	r2, #84	; 0x54
  40e7d4:	d826      	bhi.n	40e824 <_malloc_r+0x534>
  40e7d6:	0b1a      	lsrs	r2, r3, #12
  40e7d8:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40e7dc:	0049      	lsls	r1, r1, #1
  40e7de:	326e      	adds	r2, #110	; 0x6e
  40e7e0:	e748      	b.n	40e674 <_malloc_r+0x384>
  40e7e2:	68bc      	ldr	r4, [r7, #8]
  40e7e4:	6862      	ldr	r2, [r4, #4]
  40e7e6:	f022 0203 	bic.w	r2, r2, #3
  40e7ea:	e705      	b.n	40e5f8 <_malloc_r+0x308>
  40e7ec:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40e7f0:	2800      	cmp	r0, #0
  40e7f2:	f47f aea8 	bne.w	40e546 <_malloc_r+0x256>
  40e7f6:	4442      	add	r2, r8
  40e7f8:	68bb      	ldr	r3, [r7, #8]
  40e7fa:	f042 0201 	orr.w	r2, r2, #1
  40e7fe:	605a      	str	r2, [r3, #4]
  40e800:	e6ec      	b.n	40e5dc <_malloc_r+0x2ec>
  40e802:	23fe      	movs	r3, #254	; 0xfe
  40e804:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  40e808:	207e      	movs	r0, #126	; 0x7e
  40e80a:	e593      	b.n	40e334 <_malloc_r+0x44>
  40e80c:	2201      	movs	r2, #1
  40e80e:	f04f 0900 	mov.w	r9, #0
  40e812:	e6c1      	b.n	40e598 <_malloc_r+0x2a8>
  40e814:	f104 0108 	add.w	r1, r4, #8
  40e818:	4630      	mov	r0, r6
  40e81a:	f000 fce5 	bl	40f1e8 <_free_r>
  40e81e:	f8d9 1000 	ldr.w	r1, [r9]
  40e822:	e6db      	b.n	40e5dc <_malloc_r+0x2ec>
  40e824:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40e828:	d805      	bhi.n	40e836 <_malloc_r+0x546>
  40e82a:	0bda      	lsrs	r2, r3, #15
  40e82c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40e830:	0049      	lsls	r1, r1, #1
  40e832:	3277      	adds	r2, #119	; 0x77
  40e834:	e71e      	b.n	40e674 <_malloc_r+0x384>
  40e836:	f240 5154 	movw	r1, #1364	; 0x554
  40e83a:	428a      	cmp	r2, r1
  40e83c:	d805      	bhi.n	40e84a <_malloc_r+0x55a>
  40e83e:	0c9a      	lsrs	r2, r3, #18
  40e840:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40e844:	0049      	lsls	r1, r1, #1
  40e846:	327c      	adds	r2, #124	; 0x7c
  40e848:	e714      	b.n	40e674 <_malloc_r+0x384>
  40e84a:	21fe      	movs	r1, #254	; 0xfe
  40e84c:	227e      	movs	r2, #126	; 0x7e
  40e84e:	e711      	b.n	40e674 <_malloc_r+0x384>
  40e850:	687b      	ldr	r3, [r7, #4]
  40e852:	e784      	b.n	40e75e <_malloc_r+0x46e>
  40e854:	08e8      	lsrs	r0, r5, #3
  40e856:	1c43      	adds	r3, r0, #1
  40e858:	005b      	lsls	r3, r3, #1
  40e85a:	e5f8      	b.n	40e44e <_malloc_r+0x15e>
  40e85c:	20000594 	.word	0x20000594

0040e860 <memchr>:
  40e860:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40e864:	2a10      	cmp	r2, #16
  40e866:	db2b      	blt.n	40e8c0 <memchr+0x60>
  40e868:	f010 0f07 	tst.w	r0, #7
  40e86c:	d008      	beq.n	40e880 <memchr+0x20>
  40e86e:	f810 3b01 	ldrb.w	r3, [r0], #1
  40e872:	3a01      	subs	r2, #1
  40e874:	428b      	cmp	r3, r1
  40e876:	d02d      	beq.n	40e8d4 <memchr+0x74>
  40e878:	f010 0f07 	tst.w	r0, #7
  40e87c:	b342      	cbz	r2, 40e8d0 <memchr+0x70>
  40e87e:	d1f6      	bne.n	40e86e <memchr+0xe>
  40e880:	b4f0      	push	{r4, r5, r6, r7}
  40e882:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40e886:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40e88a:	f022 0407 	bic.w	r4, r2, #7
  40e88e:	f07f 0700 	mvns.w	r7, #0
  40e892:	2300      	movs	r3, #0
  40e894:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40e898:	3c08      	subs	r4, #8
  40e89a:	ea85 0501 	eor.w	r5, r5, r1
  40e89e:	ea86 0601 	eor.w	r6, r6, r1
  40e8a2:	fa85 f547 	uadd8	r5, r5, r7
  40e8a6:	faa3 f587 	sel	r5, r3, r7
  40e8aa:	fa86 f647 	uadd8	r6, r6, r7
  40e8ae:	faa5 f687 	sel	r6, r5, r7
  40e8b2:	b98e      	cbnz	r6, 40e8d8 <memchr+0x78>
  40e8b4:	d1ee      	bne.n	40e894 <memchr+0x34>
  40e8b6:	bcf0      	pop	{r4, r5, r6, r7}
  40e8b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40e8bc:	f002 0207 	and.w	r2, r2, #7
  40e8c0:	b132      	cbz	r2, 40e8d0 <memchr+0x70>
  40e8c2:	f810 3b01 	ldrb.w	r3, [r0], #1
  40e8c6:	3a01      	subs	r2, #1
  40e8c8:	ea83 0301 	eor.w	r3, r3, r1
  40e8cc:	b113      	cbz	r3, 40e8d4 <memchr+0x74>
  40e8ce:	d1f8      	bne.n	40e8c2 <memchr+0x62>
  40e8d0:	2000      	movs	r0, #0
  40e8d2:	4770      	bx	lr
  40e8d4:	3801      	subs	r0, #1
  40e8d6:	4770      	bx	lr
  40e8d8:	2d00      	cmp	r5, #0
  40e8da:	bf06      	itte	eq
  40e8dc:	4635      	moveq	r5, r6
  40e8de:	3803      	subeq	r0, #3
  40e8e0:	3807      	subne	r0, #7
  40e8e2:	f015 0f01 	tst.w	r5, #1
  40e8e6:	d107      	bne.n	40e8f8 <memchr+0x98>
  40e8e8:	3001      	adds	r0, #1
  40e8ea:	f415 7f80 	tst.w	r5, #256	; 0x100
  40e8ee:	bf02      	ittt	eq
  40e8f0:	3001      	addeq	r0, #1
  40e8f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40e8f6:	3001      	addeq	r0, #1
  40e8f8:	bcf0      	pop	{r4, r5, r6, r7}
  40e8fa:	3801      	subs	r0, #1
  40e8fc:	4770      	bx	lr
  40e8fe:	bf00      	nop

0040e900 <__malloc_lock>:
  40e900:	4770      	bx	lr
  40e902:	bf00      	nop

0040e904 <__malloc_unlock>:
  40e904:	4770      	bx	lr
  40e906:	bf00      	nop

0040e908 <_Balloc>:
  40e908:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40e90a:	b570      	push	{r4, r5, r6, lr}
  40e90c:	4605      	mov	r5, r0
  40e90e:	460c      	mov	r4, r1
  40e910:	b14b      	cbz	r3, 40e926 <_Balloc+0x1e>
  40e912:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40e916:	b180      	cbz	r0, 40e93a <_Balloc+0x32>
  40e918:	6802      	ldr	r2, [r0, #0]
  40e91a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40e91e:	2300      	movs	r3, #0
  40e920:	6103      	str	r3, [r0, #16]
  40e922:	60c3      	str	r3, [r0, #12]
  40e924:	bd70      	pop	{r4, r5, r6, pc}
  40e926:	2221      	movs	r2, #33	; 0x21
  40e928:	2104      	movs	r1, #4
  40e92a:	f000 fbdf 	bl	40f0ec <_calloc_r>
  40e92e:	64e8      	str	r0, [r5, #76]	; 0x4c
  40e930:	4603      	mov	r3, r0
  40e932:	2800      	cmp	r0, #0
  40e934:	d1ed      	bne.n	40e912 <_Balloc+0xa>
  40e936:	2000      	movs	r0, #0
  40e938:	bd70      	pop	{r4, r5, r6, pc}
  40e93a:	2101      	movs	r1, #1
  40e93c:	fa01 f604 	lsl.w	r6, r1, r4
  40e940:	1d72      	adds	r2, r6, #5
  40e942:	4628      	mov	r0, r5
  40e944:	0092      	lsls	r2, r2, #2
  40e946:	f000 fbd1 	bl	40f0ec <_calloc_r>
  40e94a:	2800      	cmp	r0, #0
  40e94c:	d0f3      	beq.n	40e936 <_Balloc+0x2e>
  40e94e:	6044      	str	r4, [r0, #4]
  40e950:	6086      	str	r6, [r0, #8]
  40e952:	e7e4      	b.n	40e91e <_Balloc+0x16>

0040e954 <_Bfree>:
  40e954:	b131      	cbz	r1, 40e964 <_Bfree+0x10>
  40e956:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40e958:	684a      	ldr	r2, [r1, #4]
  40e95a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40e95e:	6008      	str	r0, [r1, #0]
  40e960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40e964:	4770      	bx	lr
  40e966:	bf00      	nop

0040e968 <__multadd>:
  40e968:	b5f0      	push	{r4, r5, r6, r7, lr}
  40e96a:	690c      	ldr	r4, [r1, #16]
  40e96c:	b083      	sub	sp, #12
  40e96e:	460d      	mov	r5, r1
  40e970:	4606      	mov	r6, r0
  40e972:	f101 0e14 	add.w	lr, r1, #20
  40e976:	2700      	movs	r7, #0
  40e978:	f8de 0000 	ldr.w	r0, [lr]
  40e97c:	b281      	uxth	r1, r0
  40e97e:	fb02 3101 	mla	r1, r2, r1, r3
  40e982:	0c0b      	lsrs	r3, r1, #16
  40e984:	0c00      	lsrs	r0, r0, #16
  40e986:	fb02 3300 	mla	r3, r2, r0, r3
  40e98a:	b289      	uxth	r1, r1
  40e98c:	3701      	adds	r7, #1
  40e98e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
  40e992:	42bc      	cmp	r4, r7
  40e994:	f84e 1b04 	str.w	r1, [lr], #4
  40e998:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40e99c:	dcec      	bgt.n	40e978 <__multadd+0x10>
  40e99e:	b13b      	cbz	r3, 40e9b0 <__multadd+0x48>
  40e9a0:	68aa      	ldr	r2, [r5, #8]
  40e9a2:	4294      	cmp	r4, r2
  40e9a4:	da07      	bge.n	40e9b6 <__multadd+0x4e>
  40e9a6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40e9aa:	3401      	adds	r4, #1
  40e9ac:	6153      	str	r3, [r2, #20]
  40e9ae:	612c      	str	r4, [r5, #16]
  40e9b0:	4628      	mov	r0, r5
  40e9b2:	b003      	add	sp, #12
  40e9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40e9b6:	6869      	ldr	r1, [r5, #4]
  40e9b8:	9301      	str	r3, [sp, #4]
  40e9ba:	3101      	adds	r1, #1
  40e9bc:	4630      	mov	r0, r6
  40e9be:	f7ff ffa3 	bl	40e908 <_Balloc>
  40e9c2:	692a      	ldr	r2, [r5, #16]
  40e9c4:	3202      	adds	r2, #2
  40e9c6:	f105 010c 	add.w	r1, r5, #12
  40e9ca:	4607      	mov	r7, r0
  40e9cc:	0092      	lsls	r2, r2, #2
  40e9ce:	300c      	adds	r0, #12
  40e9d0:	f7fc ff9a 	bl	40b908 <memcpy>
  40e9d4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40e9d6:	6869      	ldr	r1, [r5, #4]
  40e9d8:	9b01      	ldr	r3, [sp, #4]
  40e9da:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40e9de:	6028      	str	r0, [r5, #0]
  40e9e0:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40e9e4:	463d      	mov	r5, r7
  40e9e6:	e7de      	b.n	40e9a6 <__multadd+0x3e>

0040e9e8 <__hi0bits>:
  40e9e8:	0c03      	lsrs	r3, r0, #16
  40e9ea:	041b      	lsls	r3, r3, #16
  40e9ec:	b9b3      	cbnz	r3, 40ea1c <__hi0bits+0x34>
  40e9ee:	0400      	lsls	r0, r0, #16
  40e9f0:	2310      	movs	r3, #16
  40e9f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40e9f6:	bf04      	itt	eq
  40e9f8:	0200      	lsleq	r0, r0, #8
  40e9fa:	3308      	addeq	r3, #8
  40e9fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  40ea00:	bf04      	itt	eq
  40ea02:	0100      	lsleq	r0, r0, #4
  40ea04:	3304      	addeq	r3, #4
  40ea06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40ea0a:	bf04      	itt	eq
  40ea0c:	0080      	lsleq	r0, r0, #2
  40ea0e:	3302      	addeq	r3, #2
  40ea10:	2800      	cmp	r0, #0
  40ea12:	db07      	blt.n	40ea24 <__hi0bits+0x3c>
  40ea14:	0042      	lsls	r2, r0, #1
  40ea16:	d403      	bmi.n	40ea20 <__hi0bits+0x38>
  40ea18:	2020      	movs	r0, #32
  40ea1a:	4770      	bx	lr
  40ea1c:	2300      	movs	r3, #0
  40ea1e:	e7e8      	b.n	40e9f2 <__hi0bits+0xa>
  40ea20:	1c58      	adds	r0, r3, #1
  40ea22:	4770      	bx	lr
  40ea24:	4618      	mov	r0, r3
  40ea26:	4770      	bx	lr

0040ea28 <__lo0bits>:
  40ea28:	6803      	ldr	r3, [r0, #0]
  40ea2a:	f013 0207 	ands.w	r2, r3, #7
  40ea2e:	d007      	beq.n	40ea40 <__lo0bits+0x18>
  40ea30:	07d9      	lsls	r1, r3, #31
  40ea32:	d420      	bmi.n	40ea76 <__lo0bits+0x4e>
  40ea34:	079a      	lsls	r2, r3, #30
  40ea36:	d420      	bmi.n	40ea7a <__lo0bits+0x52>
  40ea38:	089b      	lsrs	r3, r3, #2
  40ea3a:	6003      	str	r3, [r0, #0]
  40ea3c:	2002      	movs	r0, #2
  40ea3e:	4770      	bx	lr
  40ea40:	b299      	uxth	r1, r3
  40ea42:	b909      	cbnz	r1, 40ea48 <__lo0bits+0x20>
  40ea44:	0c1b      	lsrs	r3, r3, #16
  40ea46:	2210      	movs	r2, #16
  40ea48:	f013 0fff 	tst.w	r3, #255	; 0xff
  40ea4c:	bf04      	itt	eq
  40ea4e:	0a1b      	lsreq	r3, r3, #8
  40ea50:	3208      	addeq	r2, #8
  40ea52:	0719      	lsls	r1, r3, #28
  40ea54:	bf04      	itt	eq
  40ea56:	091b      	lsreq	r3, r3, #4
  40ea58:	3204      	addeq	r2, #4
  40ea5a:	0799      	lsls	r1, r3, #30
  40ea5c:	bf04      	itt	eq
  40ea5e:	089b      	lsreq	r3, r3, #2
  40ea60:	3202      	addeq	r2, #2
  40ea62:	07d9      	lsls	r1, r3, #31
  40ea64:	d404      	bmi.n	40ea70 <__lo0bits+0x48>
  40ea66:	085b      	lsrs	r3, r3, #1
  40ea68:	d101      	bne.n	40ea6e <__lo0bits+0x46>
  40ea6a:	2020      	movs	r0, #32
  40ea6c:	4770      	bx	lr
  40ea6e:	3201      	adds	r2, #1
  40ea70:	6003      	str	r3, [r0, #0]
  40ea72:	4610      	mov	r0, r2
  40ea74:	4770      	bx	lr
  40ea76:	2000      	movs	r0, #0
  40ea78:	4770      	bx	lr
  40ea7a:	085b      	lsrs	r3, r3, #1
  40ea7c:	6003      	str	r3, [r0, #0]
  40ea7e:	2001      	movs	r0, #1
  40ea80:	4770      	bx	lr
  40ea82:	bf00      	nop

0040ea84 <__i2b>:
  40ea84:	b510      	push	{r4, lr}
  40ea86:	460c      	mov	r4, r1
  40ea88:	2101      	movs	r1, #1
  40ea8a:	f7ff ff3d 	bl	40e908 <_Balloc>
  40ea8e:	2201      	movs	r2, #1
  40ea90:	6144      	str	r4, [r0, #20]
  40ea92:	6102      	str	r2, [r0, #16]
  40ea94:	bd10      	pop	{r4, pc}
  40ea96:	bf00      	nop

0040ea98 <__multiply>:
  40ea98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ea9c:	690d      	ldr	r5, [r1, #16]
  40ea9e:	6917      	ldr	r7, [r2, #16]
  40eaa0:	42bd      	cmp	r5, r7
  40eaa2:	b083      	sub	sp, #12
  40eaa4:	460c      	mov	r4, r1
  40eaa6:	4616      	mov	r6, r2
  40eaa8:	da04      	bge.n	40eab4 <__multiply+0x1c>
  40eaaa:	462a      	mov	r2, r5
  40eaac:	4634      	mov	r4, r6
  40eaae:	463d      	mov	r5, r7
  40eab0:	460e      	mov	r6, r1
  40eab2:	4617      	mov	r7, r2
  40eab4:	68a3      	ldr	r3, [r4, #8]
  40eab6:	6861      	ldr	r1, [r4, #4]
  40eab8:	eb05 0807 	add.w	r8, r5, r7
  40eabc:	4598      	cmp	r8, r3
  40eabe:	bfc8      	it	gt
  40eac0:	3101      	addgt	r1, #1
  40eac2:	f7ff ff21 	bl	40e908 <_Balloc>
  40eac6:	f100 0c14 	add.w	ip, r0, #20
  40eaca:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
  40eace:	45cc      	cmp	ip, r9
  40ead0:	9000      	str	r0, [sp, #0]
  40ead2:	d205      	bcs.n	40eae0 <__multiply+0x48>
  40ead4:	4663      	mov	r3, ip
  40ead6:	2100      	movs	r1, #0
  40ead8:	f843 1b04 	str.w	r1, [r3], #4
  40eadc:	4599      	cmp	r9, r3
  40eade:	d8fb      	bhi.n	40ead8 <__multiply+0x40>
  40eae0:	f106 0214 	add.w	r2, r6, #20
  40eae4:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
  40eae8:	f104 0314 	add.w	r3, r4, #20
  40eaec:	4552      	cmp	r2, sl
  40eaee:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
  40eaf2:	d254      	bcs.n	40eb9e <__multiply+0x106>
  40eaf4:	f8cd 9004 	str.w	r9, [sp, #4]
  40eaf8:	4699      	mov	r9, r3
  40eafa:	f852 3b04 	ldr.w	r3, [r2], #4
  40eafe:	fa1f fb83 	uxth.w	fp, r3
  40eb02:	f1bb 0f00 	cmp.w	fp, #0
  40eb06:	d020      	beq.n	40eb4a <__multiply+0xb2>
  40eb08:	2000      	movs	r0, #0
  40eb0a:	464f      	mov	r7, r9
  40eb0c:	4666      	mov	r6, ip
  40eb0e:	4605      	mov	r5, r0
  40eb10:	e000      	b.n	40eb14 <__multiply+0x7c>
  40eb12:	461e      	mov	r6, r3
  40eb14:	f857 4b04 	ldr.w	r4, [r7], #4
  40eb18:	6830      	ldr	r0, [r6, #0]
  40eb1a:	b2a1      	uxth	r1, r4
  40eb1c:	b283      	uxth	r3, r0
  40eb1e:	fb0b 3101 	mla	r1, fp, r1, r3
  40eb22:	0c24      	lsrs	r4, r4, #16
  40eb24:	0c00      	lsrs	r0, r0, #16
  40eb26:	194b      	adds	r3, r1, r5
  40eb28:	fb0b 0004 	mla	r0, fp, r4, r0
  40eb2c:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  40eb30:	b299      	uxth	r1, r3
  40eb32:	4633      	mov	r3, r6
  40eb34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  40eb38:	45be      	cmp	lr, r7
  40eb3a:	ea4f 4510 	mov.w	r5, r0, lsr #16
  40eb3e:	f843 1b04 	str.w	r1, [r3], #4
  40eb42:	d8e6      	bhi.n	40eb12 <__multiply+0x7a>
  40eb44:	6075      	str	r5, [r6, #4]
  40eb46:	f852 3c04 	ldr.w	r3, [r2, #-4]
  40eb4a:	ea5f 4b13 	movs.w	fp, r3, lsr #16
  40eb4e:	d020      	beq.n	40eb92 <__multiply+0xfa>
  40eb50:	f8dc 3000 	ldr.w	r3, [ip]
  40eb54:	4667      	mov	r7, ip
  40eb56:	4618      	mov	r0, r3
  40eb58:	464d      	mov	r5, r9
  40eb5a:	2100      	movs	r1, #0
  40eb5c:	e000      	b.n	40eb60 <__multiply+0xc8>
  40eb5e:	4637      	mov	r7, r6
  40eb60:	882c      	ldrh	r4, [r5, #0]
  40eb62:	0c00      	lsrs	r0, r0, #16
  40eb64:	fb0b 0004 	mla	r0, fp, r4, r0
  40eb68:	4401      	add	r1, r0
  40eb6a:	b29c      	uxth	r4, r3
  40eb6c:	463e      	mov	r6, r7
  40eb6e:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
  40eb72:	f846 3b04 	str.w	r3, [r6], #4
  40eb76:	6878      	ldr	r0, [r7, #4]
  40eb78:	f855 4b04 	ldr.w	r4, [r5], #4
  40eb7c:	b283      	uxth	r3, r0
  40eb7e:	0c24      	lsrs	r4, r4, #16
  40eb80:	fb0b 3404 	mla	r4, fp, r4, r3
  40eb84:	eb04 4311 	add.w	r3, r4, r1, lsr #16
  40eb88:	45ae      	cmp	lr, r5
  40eb8a:	ea4f 4113 	mov.w	r1, r3, lsr #16
  40eb8e:	d8e6      	bhi.n	40eb5e <__multiply+0xc6>
  40eb90:	607b      	str	r3, [r7, #4]
  40eb92:	4592      	cmp	sl, r2
  40eb94:	f10c 0c04 	add.w	ip, ip, #4
  40eb98:	d8af      	bhi.n	40eafa <__multiply+0x62>
  40eb9a:	f8dd 9004 	ldr.w	r9, [sp, #4]
  40eb9e:	f1b8 0f00 	cmp.w	r8, #0
  40eba2:	dd0b      	ble.n	40ebbc <__multiply+0x124>
  40eba4:	f859 3c04 	ldr.w	r3, [r9, #-4]
  40eba8:	f1a9 0904 	sub.w	r9, r9, #4
  40ebac:	b11b      	cbz	r3, 40ebb6 <__multiply+0x11e>
  40ebae:	e005      	b.n	40ebbc <__multiply+0x124>
  40ebb0:	f859 3d04 	ldr.w	r3, [r9, #-4]!
  40ebb4:	b913      	cbnz	r3, 40ebbc <__multiply+0x124>
  40ebb6:	f1b8 0801 	subs.w	r8, r8, #1
  40ebba:	d1f9      	bne.n	40ebb0 <__multiply+0x118>
  40ebbc:	9800      	ldr	r0, [sp, #0]
  40ebbe:	f8c0 8010 	str.w	r8, [r0, #16]
  40ebc2:	b003      	add	sp, #12
  40ebc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040ebc8 <__pow5mult>:
  40ebc8:	f012 0303 	ands.w	r3, r2, #3
  40ebcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ebd0:	4614      	mov	r4, r2
  40ebd2:	4607      	mov	r7, r0
  40ebd4:	d12e      	bne.n	40ec34 <__pow5mult+0x6c>
  40ebd6:	460e      	mov	r6, r1
  40ebd8:	10a4      	asrs	r4, r4, #2
  40ebda:	d01c      	beq.n	40ec16 <__pow5mult+0x4e>
  40ebdc:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  40ebde:	b395      	cbz	r5, 40ec46 <__pow5mult+0x7e>
  40ebe0:	07e3      	lsls	r3, r4, #31
  40ebe2:	f04f 0800 	mov.w	r8, #0
  40ebe6:	d406      	bmi.n	40ebf6 <__pow5mult+0x2e>
  40ebe8:	1064      	asrs	r4, r4, #1
  40ebea:	d014      	beq.n	40ec16 <__pow5mult+0x4e>
  40ebec:	6828      	ldr	r0, [r5, #0]
  40ebee:	b1a8      	cbz	r0, 40ec1c <__pow5mult+0x54>
  40ebf0:	4605      	mov	r5, r0
  40ebf2:	07e3      	lsls	r3, r4, #31
  40ebf4:	d5f8      	bpl.n	40ebe8 <__pow5mult+0x20>
  40ebf6:	462a      	mov	r2, r5
  40ebf8:	4631      	mov	r1, r6
  40ebfa:	4638      	mov	r0, r7
  40ebfc:	f7ff ff4c 	bl	40ea98 <__multiply>
  40ec00:	b1b6      	cbz	r6, 40ec30 <__pow5mult+0x68>
  40ec02:	6872      	ldr	r2, [r6, #4]
  40ec04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40ec06:	1064      	asrs	r4, r4, #1
  40ec08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40ec0c:	6031      	str	r1, [r6, #0]
  40ec0e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40ec12:	4606      	mov	r6, r0
  40ec14:	d1ea      	bne.n	40ebec <__pow5mult+0x24>
  40ec16:	4630      	mov	r0, r6
  40ec18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ec1c:	462a      	mov	r2, r5
  40ec1e:	4629      	mov	r1, r5
  40ec20:	4638      	mov	r0, r7
  40ec22:	f7ff ff39 	bl	40ea98 <__multiply>
  40ec26:	6028      	str	r0, [r5, #0]
  40ec28:	f8c0 8000 	str.w	r8, [r0]
  40ec2c:	4605      	mov	r5, r0
  40ec2e:	e7e0      	b.n	40ebf2 <__pow5mult+0x2a>
  40ec30:	4606      	mov	r6, r0
  40ec32:	e7d9      	b.n	40ebe8 <__pow5mult+0x20>
  40ec34:	1e5a      	subs	r2, r3, #1
  40ec36:	4d0b      	ldr	r5, [pc, #44]	; (40ec64 <__pow5mult+0x9c>)
  40ec38:	2300      	movs	r3, #0
  40ec3a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40ec3e:	f7ff fe93 	bl	40e968 <__multadd>
  40ec42:	4606      	mov	r6, r0
  40ec44:	e7c8      	b.n	40ebd8 <__pow5mult+0x10>
  40ec46:	2101      	movs	r1, #1
  40ec48:	4638      	mov	r0, r7
  40ec4a:	f7ff fe5d 	bl	40e908 <_Balloc>
  40ec4e:	f240 2171 	movw	r1, #625	; 0x271
  40ec52:	2201      	movs	r2, #1
  40ec54:	2300      	movs	r3, #0
  40ec56:	6141      	str	r1, [r0, #20]
  40ec58:	6102      	str	r2, [r0, #16]
  40ec5a:	4605      	mov	r5, r0
  40ec5c:	64b8      	str	r0, [r7, #72]	; 0x48
  40ec5e:	6003      	str	r3, [r0, #0]
  40ec60:	e7be      	b.n	40ebe0 <__pow5mult+0x18>
  40ec62:	bf00      	nop
  40ec64:	0040fcf0 	.word	0x0040fcf0

0040ec68 <__lshift>:
  40ec68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40ec6c:	4691      	mov	r9, r2
  40ec6e:	690a      	ldr	r2, [r1, #16]
  40ec70:	688b      	ldr	r3, [r1, #8]
  40ec72:	ea4f 1469 	mov.w	r4, r9, asr #5
  40ec76:	eb04 0802 	add.w	r8, r4, r2
  40ec7a:	f108 0501 	add.w	r5, r8, #1
  40ec7e:	429d      	cmp	r5, r3
  40ec80:	460e      	mov	r6, r1
  40ec82:	4682      	mov	sl, r0
  40ec84:	6849      	ldr	r1, [r1, #4]
  40ec86:	dd04      	ble.n	40ec92 <__lshift+0x2a>
  40ec88:	005b      	lsls	r3, r3, #1
  40ec8a:	429d      	cmp	r5, r3
  40ec8c:	f101 0101 	add.w	r1, r1, #1
  40ec90:	dcfa      	bgt.n	40ec88 <__lshift+0x20>
  40ec92:	4650      	mov	r0, sl
  40ec94:	f7ff fe38 	bl	40e908 <_Balloc>
  40ec98:	2c00      	cmp	r4, #0
  40ec9a:	f100 0214 	add.w	r2, r0, #20
  40ec9e:	dd38      	ble.n	40ed12 <__lshift+0xaa>
  40eca0:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  40eca4:	2100      	movs	r1, #0
  40eca6:	f842 1b04 	str.w	r1, [r2], #4
  40ecaa:	4293      	cmp	r3, r2
  40ecac:	d1fb      	bne.n	40eca6 <__lshift+0x3e>
  40ecae:	6934      	ldr	r4, [r6, #16]
  40ecb0:	f106 0114 	add.w	r1, r6, #20
  40ecb4:	f019 091f 	ands.w	r9, r9, #31
  40ecb8:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40ecbc:	d021      	beq.n	40ed02 <__lshift+0x9a>
  40ecbe:	f1c9 0220 	rsb	r2, r9, #32
  40ecc2:	2400      	movs	r4, #0
  40ecc4:	680f      	ldr	r7, [r1, #0]
  40ecc6:	fa07 fc09 	lsl.w	ip, r7, r9
  40ecca:	ea4c 0404 	orr.w	r4, ip, r4
  40ecce:	469c      	mov	ip, r3
  40ecd0:	f843 4b04 	str.w	r4, [r3], #4
  40ecd4:	f851 4b04 	ldr.w	r4, [r1], #4
  40ecd8:	458e      	cmp	lr, r1
  40ecda:	fa24 f402 	lsr.w	r4, r4, r2
  40ecde:	d8f1      	bhi.n	40ecc4 <__lshift+0x5c>
  40ece0:	f8cc 4004 	str.w	r4, [ip, #4]
  40ece4:	b10c      	cbz	r4, 40ecea <__lshift+0x82>
  40ece6:	f108 0502 	add.w	r5, r8, #2
  40ecea:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
  40ecee:	6872      	ldr	r2, [r6, #4]
  40ecf0:	3d01      	subs	r5, #1
  40ecf2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40ecf6:	6105      	str	r5, [r0, #16]
  40ecf8:	6031      	str	r1, [r6, #0]
  40ecfa:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40ecfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ed02:	3b04      	subs	r3, #4
  40ed04:	f851 2b04 	ldr.w	r2, [r1], #4
  40ed08:	f843 2f04 	str.w	r2, [r3, #4]!
  40ed0c:	458e      	cmp	lr, r1
  40ed0e:	d8f9      	bhi.n	40ed04 <__lshift+0x9c>
  40ed10:	e7eb      	b.n	40ecea <__lshift+0x82>
  40ed12:	4613      	mov	r3, r2
  40ed14:	e7cb      	b.n	40ecae <__lshift+0x46>
  40ed16:	bf00      	nop

0040ed18 <__mcmp>:
  40ed18:	6902      	ldr	r2, [r0, #16]
  40ed1a:	690b      	ldr	r3, [r1, #16]
  40ed1c:	1ad2      	subs	r2, r2, r3
  40ed1e:	d112      	bne.n	40ed46 <__mcmp+0x2e>
  40ed20:	009b      	lsls	r3, r3, #2
  40ed22:	3014      	adds	r0, #20
  40ed24:	3114      	adds	r1, #20
  40ed26:	4419      	add	r1, r3
  40ed28:	b410      	push	{r4}
  40ed2a:	4403      	add	r3, r0
  40ed2c:	e001      	b.n	40ed32 <__mcmp+0x1a>
  40ed2e:	4298      	cmp	r0, r3
  40ed30:	d20b      	bcs.n	40ed4a <__mcmp+0x32>
  40ed32:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40ed36:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40ed3a:	4294      	cmp	r4, r2
  40ed3c:	d0f7      	beq.n	40ed2e <__mcmp+0x16>
  40ed3e:	d307      	bcc.n	40ed50 <__mcmp+0x38>
  40ed40:	2001      	movs	r0, #1
  40ed42:	bc10      	pop	{r4}
  40ed44:	4770      	bx	lr
  40ed46:	4610      	mov	r0, r2
  40ed48:	4770      	bx	lr
  40ed4a:	2000      	movs	r0, #0
  40ed4c:	bc10      	pop	{r4}
  40ed4e:	4770      	bx	lr
  40ed50:	f04f 30ff 	mov.w	r0, #4294967295
  40ed54:	e7f5      	b.n	40ed42 <__mcmp+0x2a>
  40ed56:	bf00      	nop

0040ed58 <__mdiff>:
  40ed58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40ed5c:	690b      	ldr	r3, [r1, #16]
  40ed5e:	460f      	mov	r7, r1
  40ed60:	6911      	ldr	r1, [r2, #16]
  40ed62:	1a5b      	subs	r3, r3, r1
  40ed64:	2b00      	cmp	r3, #0
  40ed66:	4690      	mov	r8, r2
  40ed68:	d117      	bne.n	40ed9a <__mdiff+0x42>
  40ed6a:	0089      	lsls	r1, r1, #2
  40ed6c:	f107 0214 	add.w	r2, r7, #20
  40ed70:	f108 0514 	add.w	r5, r8, #20
  40ed74:	1853      	adds	r3, r2, r1
  40ed76:	4429      	add	r1, r5
  40ed78:	e001      	b.n	40ed7e <__mdiff+0x26>
  40ed7a:	429a      	cmp	r2, r3
  40ed7c:	d25e      	bcs.n	40ee3c <__mdiff+0xe4>
  40ed7e:	f853 6d04 	ldr.w	r6, [r3, #-4]!
  40ed82:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40ed86:	42a6      	cmp	r6, r4
  40ed88:	d0f7      	beq.n	40ed7a <__mdiff+0x22>
  40ed8a:	d260      	bcs.n	40ee4e <__mdiff+0xf6>
  40ed8c:	463b      	mov	r3, r7
  40ed8e:	4614      	mov	r4, r2
  40ed90:	4647      	mov	r7, r8
  40ed92:	f04f 0901 	mov.w	r9, #1
  40ed96:	4698      	mov	r8, r3
  40ed98:	e006      	b.n	40eda8 <__mdiff+0x50>
  40ed9a:	db5d      	blt.n	40ee58 <__mdiff+0x100>
  40ed9c:	f107 0514 	add.w	r5, r7, #20
  40eda0:	f102 0414 	add.w	r4, r2, #20
  40eda4:	f04f 0900 	mov.w	r9, #0
  40eda8:	6879      	ldr	r1, [r7, #4]
  40edaa:	f7ff fdad 	bl	40e908 <_Balloc>
  40edae:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40edb2:	693e      	ldr	r6, [r7, #16]
  40edb4:	f8c0 900c 	str.w	r9, [r0, #12]
  40edb8:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40edbc:	46a6      	mov	lr, r4
  40edbe:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40edc2:	f100 0414 	add.w	r4, r0, #20
  40edc6:	2300      	movs	r3, #0
  40edc8:	f85e 1b04 	ldr.w	r1, [lr], #4
  40edcc:	f855 8b04 	ldr.w	r8, [r5], #4
  40edd0:	b28a      	uxth	r2, r1
  40edd2:	fa13 f388 	uxtah	r3, r3, r8
  40edd6:	0c09      	lsrs	r1, r1, #16
  40edd8:	1a9a      	subs	r2, r3, r2
  40edda:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40edde:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40ede2:	b292      	uxth	r2, r2
  40ede4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40ede8:	45f4      	cmp	ip, lr
  40edea:	f844 2b04 	str.w	r2, [r4], #4
  40edee:	ea4f 4323 	mov.w	r3, r3, asr #16
  40edf2:	d8e9      	bhi.n	40edc8 <__mdiff+0x70>
  40edf4:	42af      	cmp	r7, r5
  40edf6:	d917      	bls.n	40ee28 <__mdiff+0xd0>
  40edf8:	46a4      	mov	ip, r4
  40edfa:	4629      	mov	r1, r5
  40edfc:	f851 eb04 	ldr.w	lr, [r1], #4
  40ee00:	fa13 f28e 	uxtah	r2, r3, lr
  40ee04:	1413      	asrs	r3, r2, #16
  40ee06:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  40ee0a:	b292      	uxth	r2, r2
  40ee0c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40ee10:	428f      	cmp	r7, r1
  40ee12:	f84c 2b04 	str.w	r2, [ip], #4
  40ee16:	ea4f 4323 	mov.w	r3, r3, asr #16
  40ee1a:	d8ef      	bhi.n	40edfc <__mdiff+0xa4>
  40ee1c:	43ed      	mvns	r5, r5
  40ee1e:	443d      	add	r5, r7
  40ee20:	f025 0503 	bic.w	r5, r5, #3
  40ee24:	3504      	adds	r5, #4
  40ee26:	442c      	add	r4, r5
  40ee28:	3c04      	subs	r4, #4
  40ee2a:	b922      	cbnz	r2, 40ee36 <__mdiff+0xde>
  40ee2c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40ee30:	3e01      	subs	r6, #1
  40ee32:	2b00      	cmp	r3, #0
  40ee34:	d0fa      	beq.n	40ee2c <__mdiff+0xd4>
  40ee36:	6106      	str	r6, [r0, #16]
  40ee38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40ee3c:	2100      	movs	r1, #0
  40ee3e:	f7ff fd63 	bl	40e908 <_Balloc>
  40ee42:	2201      	movs	r2, #1
  40ee44:	2300      	movs	r3, #0
  40ee46:	6102      	str	r2, [r0, #16]
  40ee48:	6143      	str	r3, [r0, #20]
  40ee4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40ee4e:	462c      	mov	r4, r5
  40ee50:	f04f 0900 	mov.w	r9, #0
  40ee54:	4615      	mov	r5, r2
  40ee56:	e7a7      	b.n	40eda8 <__mdiff+0x50>
  40ee58:	463b      	mov	r3, r7
  40ee5a:	f107 0414 	add.w	r4, r7, #20
  40ee5e:	f108 0514 	add.w	r5, r8, #20
  40ee62:	4647      	mov	r7, r8
  40ee64:	f04f 0901 	mov.w	r9, #1
  40ee68:	4698      	mov	r8, r3
  40ee6a:	e79d      	b.n	40eda8 <__mdiff+0x50>

0040ee6c <__d2b>:
  40ee6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ee70:	b082      	sub	sp, #8
  40ee72:	2101      	movs	r1, #1
  40ee74:	461c      	mov	r4, r3
  40ee76:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40ee7a:	4615      	mov	r5, r2
  40ee7c:	9e08      	ldr	r6, [sp, #32]
  40ee7e:	f7ff fd43 	bl	40e908 <_Balloc>
  40ee82:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40ee86:	4680      	mov	r8, r0
  40ee88:	b10f      	cbz	r7, 40ee8e <__d2b+0x22>
  40ee8a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40ee8e:	9401      	str	r4, [sp, #4]
  40ee90:	b31d      	cbz	r5, 40eeda <__d2b+0x6e>
  40ee92:	a802      	add	r0, sp, #8
  40ee94:	f840 5d08 	str.w	r5, [r0, #-8]!
  40ee98:	f7ff fdc6 	bl	40ea28 <__lo0bits>
  40ee9c:	2800      	cmp	r0, #0
  40ee9e:	d134      	bne.n	40ef0a <__d2b+0x9e>
  40eea0:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40eea4:	f8c8 2014 	str.w	r2, [r8, #20]
  40eea8:	2b00      	cmp	r3, #0
  40eeaa:	bf0c      	ite	eq
  40eeac:	2101      	moveq	r1, #1
  40eeae:	2102      	movne	r1, #2
  40eeb0:	f8c8 3018 	str.w	r3, [r8, #24]
  40eeb4:	f8c8 1010 	str.w	r1, [r8, #16]
  40eeb8:	b9df      	cbnz	r7, 40eef2 <__d2b+0x86>
  40eeba:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40eebe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40eec2:	6030      	str	r0, [r6, #0]
  40eec4:	6918      	ldr	r0, [r3, #16]
  40eec6:	f7ff fd8f 	bl	40e9e8 <__hi0bits>
  40eeca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40eecc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40eed0:	6018      	str	r0, [r3, #0]
  40eed2:	4640      	mov	r0, r8
  40eed4:	b002      	add	sp, #8
  40eed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40eeda:	a801      	add	r0, sp, #4
  40eedc:	f7ff fda4 	bl	40ea28 <__lo0bits>
  40eee0:	9b01      	ldr	r3, [sp, #4]
  40eee2:	f8c8 3014 	str.w	r3, [r8, #20]
  40eee6:	2101      	movs	r1, #1
  40eee8:	3020      	adds	r0, #32
  40eeea:	f8c8 1010 	str.w	r1, [r8, #16]
  40eeee:	2f00      	cmp	r7, #0
  40eef0:	d0e3      	beq.n	40eeba <__d2b+0x4e>
  40eef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40eef4:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40eef8:	4407      	add	r7, r0
  40eefa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40eefe:	6037      	str	r7, [r6, #0]
  40ef00:	6018      	str	r0, [r3, #0]
  40ef02:	4640      	mov	r0, r8
  40ef04:	b002      	add	sp, #8
  40ef06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ef0a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40ef0e:	f1c0 0120 	rsb	r1, r0, #32
  40ef12:	fa03 f101 	lsl.w	r1, r3, r1
  40ef16:	430a      	orrs	r2, r1
  40ef18:	40c3      	lsrs	r3, r0
  40ef1a:	9301      	str	r3, [sp, #4]
  40ef1c:	f8c8 2014 	str.w	r2, [r8, #20]
  40ef20:	e7c2      	b.n	40eea8 <__d2b+0x3c>
  40ef22:	bf00      	nop

0040ef24 <_sbrk_r>:
  40ef24:	b538      	push	{r3, r4, r5, lr}
  40ef26:	4c07      	ldr	r4, [pc, #28]	; (40ef44 <_sbrk_r+0x20>)
  40ef28:	2300      	movs	r3, #0
  40ef2a:	4605      	mov	r5, r0
  40ef2c:	4608      	mov	r0, r1
  40ef2e:	6023      	str	r3, [r4, #0]
  40ef30:	f7f6 fa60 	bl	4053f4 <_sbrk>
  40ef34:	1c43      	adds	r3, r0, #1
  40ef36:	d000      	beq.n	40ef3a <_sbrk_r+0x16>
  40ef38:	bd38      	pop	{r3, r4, r5, pc}
  40ef3a:	6823      	ldr	r3, [r4, #0]
  40ef3c:	2b00      	cmp	r3, #0
  40ef3e:	d0fb      	beq.n	40ef38 <_sbrk_r+0x14>
  40ef40:	602b      	str	r3, [r5, #0]
  40ef42:	bd38      	pop	{r3, r4, r5, pc}
  40ef44:	20002f24 	.word	0x20002f24

0040ef48 <__ssprint_r>:
  40ef48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ef4c:	6893      	ldr	r3, [r2, #8]
  40ef4e:	b083      	sub	sp, #12
  40ef50:	4690      	mov	r8, r2
  40ef52:	2b00      	cmp	r3, #0
  40ef54:	d072      	beq.n	40f03c <__ssprint_r+0xf4>
  40ef56:	4683      	mov	fp, r0
  40ef58:	f04f 0900 	mov.w	r9, #0
  40ef5c:	6816      	ldr	r6, [r2, #0]
  40ef5e:	6808      	ldr	r0, [r1, #0]
  40ef60:	688b      	ldr	r3, [r1, #8]
  40ef62:	460d      	mov	r5, r1
  40ef64:	464c      	mov	r4, r9
  40ef66:	2c00      	cmp	r4, #0
  40ef68:	d045      	beq.n	40eff6 <__ssprint_r+0xae>
  40ef6a:	429c      	cmp	r4, r3
  40ef6c:	461f      	mov	r7, r3
  40ef6e:	469a      	mov	sl, r3
  40ef70:	d346      	bcc.n	40f000 <__ssprint_r+0xb8>
  40ef72:	89ab      	ldrh	r3, [r5, #12]
  40ef74:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40ef78:	d02d      	beq.n	40efd6 <__ssprint_r+0x8e>
  40ef7a:	696f      	ldr	r7, [r5, #20]
  40ef7c:	6929      	ldr	r1, [r5, #16]
  40ef7e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  40ef82:	ebc1 0a00 	rsb	sl, r1, r0
  40ef86:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  40ef8a:	1c60      	adds	r0, r4, #1
  40ef8c:	107f      	asrs	r7, r7, #1
  40ef8e:	4450      	add	r0, sl
  40ef90:	42b8      	cmp	r0, r7
  40ef92:	463a      	mov	r2, r7
  40ef94:	bf84      	itt	hi
  40ef96:	4607      	movhi	r7, r0
  40ef98:	463a      	movhi	r2, r7
  40ef9a:	055b      	lsls	r3, r3, #21
  40ef9c:	d533      	bpl.n	40f006 <__ssprint_r+0xbe>
  40ef9e:	4611      	mov	r1, r2
  40efa0:	4658      	mov	r0, fp
  40efa2:	f7ff f9a5 	bl	40e2f0 <_malloc_r>
  40efa6:	2800      	cmp	r0, #0
  40efa8:	d037      	beq.n	40f01a <__ssprint_r+0xd2>
  40efaa:	4652      	mov	r2, sl
  40efac:	6929      	ldr	r1, [r5, #16]
  40efae:	9001      	str	r0, [sp, #4]
  40efb0:	f7fc fcaa 	bl	40b908 <memcpy>
  40efb4:	89aa      	ldrh	r2, [r5, #12]
  40efb6:	9b01      	ldr	r3, [sp, #4]
  40efb8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40efbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40efc0:	81aa      	strh	r2, [r5, #12]
  40efc2:	ebca 0207 	rsb	r2, sl, r7
  40efc6:	eb03 000a 	add.w	r0, r3, sl
  40efca:	616f      	str	r7, [r5, #20]
  40efcc:	612b      	str	r3, [r5, #16]
  40efce:	6028      	str	r0, [r5, #0]
  40efd0:	60aa      	str	r2, [r5, #8]
  40efd2:	4627      	mov	r7, r4
  40efd4:	46a2      	mov	sl, r4
  40efd6:	4652      	mov	r2, sl
  40efd8:	4649      	mov	r1, r9
  40efda:	f000 f9ed 	bl	40f3b8 <memmove>
  40efde:	f8d8 2008 	ldr.w	r2, [r8, #8]
  40efe2:	68ab      	ldr	r3, [r5, #8]
  40efe4:	6828      	ldr	r0, [r5, #0]
  40efe6:	1bdb      	subs	r3, r3, r7
  40efe8:	4450      	add	r0, sl
  40efea:	1b14      	subs	r4, r2, r4
  40efec:	60ab      	str	r3, [r5, #8]
  40efee:	6028      	str	r0, [r5, #0]
  40eff0:	f8c8 4008 	str.w	r4, [r8, #8]
  40eff4:	b314      	cbz	r4, 40f03c <__ssprint_r+0xf4>
  40eff6:	f8d6 9000 	ldr.w	r9, [r6]
  40effa:	6874      	ldr	r4, [r6, #4]
  40effc:	3608      	adds	r6, #8
  40effe:	e7b2      	b.n	40ef66 <__ssprint_r+0x1e>
  40f000:	4627      	mov	r7, r4
  40f002:	46a2      	mov	sl, r4
  40f004:	e7e7      	b.n	40efd6 <__ssprint_r+0x8e>
  40f006:	4658      	mov	r0, fp
  40f008:	f000 fa3a 	bl	40f480 <_realloc_r>
  40f00c:	4603      	mov	r3, r0
  40f00e:	2800      	cmp	r0, #0
  40f010:	d1d7      	bne.n	40efc2 <__ssprint_r+0x7a>
  40f012:	6929      	ldr	r1, [r5, #16]
  40f014:	4658      	mov	r0, fp
  40f016:	f000 f8e7 	bl	40f1e8 <_free_r>
  40f01a:	230c      	movs	r3, #12
  40f01c:	f8cb 3000 	str.w	r3, [fp]
  40f020:	89ab      	ldrh	r3, [r5, #12]
  40f022:	2200      	movs	r2, #0
  40f024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40f028:	f04f 30ff 	mov.w	r0, #4294967295
  40f02c:	81ab      	strh	r3, [r5, #12]
  40f02e:	f8c8 2008 	str.w	r2, [r8, #8]
  40f032:	f8c8 2004 	str.w	r2, [r8, #4]
  40f036:	b003      	add	sp, #12
  40f038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f03c:	2000      	movs	r0, #0
  40f03e:	f8c8 0004 	str.w	r0, [r8, #4]
  40f042:	b003      	add	sp, #12
  40f044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040f048 <__register_exitproc>:
  40f048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40f04c:	4c25      	ldr	r4, [pc, #148]	; (40f0e4 <__register_exitproc+0x9c>)
  40f04e:	6825      	ldr	r5, [r4, #0]
  40f050:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40f054:	4606      	mov	r6, r0
  40f056:	4688      	mov	r8, r1
  40f058:	4692      	mov	sl, r2
  40f05a:	4699      	mov	r9, r3
  40f05c:	b3c4      	cbz	r4, 40f0d0 <__register_exitproc+0x88>
  40f05e:	6860      	ldr	r0, [r4, #4]
  40f060:	281f      	cmp	r0, #31
  40f062:	dc17      	bgt.n	40f094 <__register_exitproc+0x4c>
  40f064:	1c43      	adds	r3, r0, #1
  40f066:	b176      	cbz	r6, 40f086 <__register_exitproc+0x3e>
  40f068:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40f06c:	2201      	movs	r2, #1
  40f06e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40f072:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40f076:	4082      	lsls	r2, r0
  40f078:	4311      	orrs	r1, r2
  40f07a:	2e02      	cmp	r6, #2
  40f07c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40f080:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  40f084:	d01e      	beq.n	40f0c4 <__register_exitproc+0x7c>
  40f086:	3002      	adds	r0, #2
  40f088:	6063      	str	r3, [r4, #4]
  40f08a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40f08e:	2000      	movs	r0, #0
  40f090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40f094:	4b14      	ldr	r3, [pc, #80]	; (40f0e8 <__register_exitproc+0xa0>)
  40f096:	b303      	cbz	r3, 40f0da <__register_exitproc+0x92>
  40f098:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40f09c:	f3af 8000 	nop.w
  40f0a0:	4604      	mov	r4, r0
  40f0a2:	b1d0      	cbz	r0, 40f0da <__register_exitproc+0x92>
  40f0a4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40f0a8:	2700      	movs	r7, #0
  40f0aa:	e880 0088 	stmia.w	r0, {r3, r7}
  40f0ae:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40f0b2:	4638      	mov	r0, r7
  40f0b4:	2301      	movs	r3, #1
  40f0b6:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40f0ba:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40f0be:	2e00      	cmp	r6, #0
  40f0c0:	d0e1      	beq.n	40f086 <__register_exitproc+0x3e>
  40f0c2:	e7d1      	b.n	40f068 <__register_exitproc+0x20>
  40f0c4:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  40f0c8:	430a      	orrs	r2, r1
  40f0ca:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40f0ce:	e7da      	b.n	40f086 <__register_exitproc+0x3e>
  40f0d0:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40f0d4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40f0d8:	e7c1      	b.n	40f05e <__register_exitproc+0x16>
  40f0da:	f04f 30ff 	mov.w	r0, #4294967295
  40f0de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40f0e2:	bf00      	nop
  40f0e4:	0040fb7c 	.word	0x0040fb7c
  40f0e8:	00000000 	.word	0x00000000

0040f0ec <_calloc_r>:
  40f0ec:	b510      	push	{r4, lr}
  40f0ee:	fb02 f101 	mul.w	r1, r2, r1
  40f0f2:	f7ff f8fd 	bl	40e2f0 <_malloc_r>
  40f0f6:	4604      	mov	r4, r0
  40f0f8:	b1d8      	cbz	r0, 40f132 <_calloc_r+0x46>
  40f0fa:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40f0fe:	f022 0203 	bic.w	r2, r2, #3
  40f102:	3a04      	subs	r2, #4
  40f104:	2a24      	cmp	r2, #36	; 0x24
  40f106:	d818      	bhi.n	40f13a <_calloc_r+0x4e>
  40f108:	2a13      	cmp	r2, #19
  40f10a:	d914      	bls.n	40f136 <_calloc_r+0x4a>
  40f10c:	2300      	movs	r3, #0
  40f10e:	2a1b      	cmp	r2, #27
  40f110:	6003      	str	r3, [r0, #0]
  40f112:	6043      	str	r3, [r0, #4]
  40f114:	d916      	bls.n	40f144 <_calloc_r+0x58>
  40f116:	2a24      	cmp	r2, #36	; 0x24
  40f118:	6083      	str	r3, [r0, #8]
  40f11a:	60c3      	str	r3, [r0, #12]
  40f11c:	bf11      	iteee	ne
  40f11e:	f100 0210 	addne.w	r2, r0, #16
  40f122:	6103      	streq	r3, [r0, #16]
  40f124:	6143      	streq	r3, [r0, #20]
  40f126:	f100 0218 	addeq.w	r2, r0, #24
  40f12a:	2300      	movs	r3, #0
  40f12c:	6013      	str	r3, [r2, #0]
  40f12e:	6053      	str	r3, [r2, #4]
  40f130:	6093      	str	r3, [r2, #8]
  40f132:	4620      	mov	r0, r4
  40f134:	bd10      	pop	{r4, pc}
  40f136:	4602      	mov	r2, r0
  40f138:	e7f7      	b.n	40f12a <_calloc_r+0x3e>
  40f13a:	2100      	movs	r1, #0
  40f13c:	f7fc fc7e 	bl	40ba3c <memset>
  40f140:	4620      	mov	r0, r4
  40f142:	bd10      	pop	{r4, pc}
  40f144:	f100 0208 	add.w	r2, r0, #8
  40f148:	e7ef      	b.n	40f12a <_calloc_r+0x3e>
  40f14a:	bf00      	nop

0040f14c <_malloc_trim_r>:
  40f14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40f14e:	4f23      	ldr	r7, [pc, #140]	; (40f1dc <_malloc_trim_r+0x90>)
  40f150:	460c      	mov	r4, r1
  40f152:	4606      	mov	r6, r0
  40f154:	f7ff fbd4 	bl	40e900 <__malloc_lock>
  40f158:	68bb      	ldr	r3, [r7, #8]
  40f15a:	685d      	ldr	r5, [r3, #4]
  40f15c:	f025 0503 	bic.w	r5, r5, #3
  40f160:	1b29      	subs	r1, r5, r4
  40f162:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  40f166:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40f16a:	f021 010f 	bic.w	r1, r1, #15
  40f16e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40f172:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40f176:	db07      	blt.n	40f188 <_malloc_trim_r+0x3c>
  40f178:	2100      	movs	r1, #0
  40f17a:	4630      	mov	r0, r6
  40f17c:	f7ff fed2 	bl	40ef24 <_sbrk_r>
  40f180:	68bb      	ldr	r3, [r7, #8]
  40f182:	442b      	add	r3, r5
  40f184:	4298      	cmp	r0, r3
  40f186:	d004      	beq.n	40f192 <_malloc_trim_r+0x46>
  40f188:	4630      	mov	r0, r6
  40f18a:	f7ff fbbb 	bl	40e904 <__malloc_unlock>
  40f18e:	2000      	movs	r0, #0
  40f190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40f192:	4261      	negs	r1, r4
  40f194:	4630      	mov	r0, r6
  40f196:	f7ff fec5 	bl	40ef24 <_sbrk_r>
  40f19a:	3001      	adds	r0, #1
  40f19c:	d00d      	beq.n	40f1ba <_malloc_trim_r+0x6e>
  40f19e:	4b10      	ldr	r3, [pc, #64]	; (40f1e0 <_malloc_trim_r+0x94>)
  40f1a0:	68ba      	ldr	r2, [r7, #8]
  40f1a2:	6819      	ldr	r1, [r3, #0]
  40f1a4:	1b2d      	subs	r5, r5, r4
  40f1a6:	f045 0501 	orr.w	r5, r5, #1
  40f1aa:	4630      	mov	r0, r6
  40f1ac:	1b09      	subs	r1, r1, r4
  40f1ae:	6055      	str	r5, [r2, #4]
  40f1b0:	6019      	str	r1, [r3, #0]
  40f1b2:	f7ff fba7 	bl	40e904 <__malloc_unlock>
  40f1b6:	2001      	movs	r0, #1
  40f1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40f1ba:	2100      	movs	r1, #0
  40f1bc:	4630      	mov	r0, r6
  40f1be:	f7ff feb1 	bl	40ef24 <_sbrk_r>
  40f1c2:	68ba      	ldr	r2, [r7, #8]
  40f1c4:	1a83      	subs	r3, r0, r2
  40f1c6:	2b0f      	cmp	r3, #15
  40f1c8:	ddde      	ble.n	40f188 <_malloc_trim_r+0x3c>
  40f1ca:	4c06      	ldr	r4, [pc, #24]	; (40f1e4 <_malloc_trim_r+0x98>)
  40f1cc:	4904      	ldr	r1, [pc, #16]	; (40f1e0 <_malloc_trim_r+0x94>)
  40f1ce:	6824      	ldr	r4, [r4, #0]
  40f1d0:	f043 0301 	orr.w	r3, r3, #1
  40f1d4:	1b00      	subs	r0, r0, r4
  40f1d6:	6053      	str	r3, [r2, #4]
  40f1d8:	6008      	str	r0, [r1, #0]
  40f1da:	e7d5      	b.n	40f188 <_malloc_trim_r+0x3c>
  40f1dc:	20000594 	.word	0x20000594
  40f1e0:	20002e60 	.word	0x20002e60
  40f1e4:	200009a0 	.word	0x200009a0

0040f1e8 <_free_r>:
  40f1e8:	2900      	cmp	r1, #0
  40f1ea:	d045      	beq.n	40f278 <_free_r+0x90>
  40f1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40f1f0:	460d      	mov	r5, r1
  40f1f2:	4680      	mov	r8, r0
  40f1f4:	f7ff fb84 	bl	40e900 <__malloc_lock>
  40f1f8:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40f1fc:	496a      	ldr	r1, [pc, #424]	; (40f3a8 <_free_r+0x1c0>)
  40f1fe:	f027 0301 	bic.w	r3, r7, #1
  40f202:	f1a5 0408 	sub.w	r4, r5, #8
  40f206:	18e2      	adds	r2, r4, r3
  40f208:	688e      	ldr	r6, [r1, #8]
  40f20a:	6850      	ldr	r0, [r2, #4]
  40f20c:	42b2      	cmp	r2, r6
  40f20e:	f020 0003 	bic.w	r0, r0, #3
  40f212:	d062      	beq.n	40f2da <_free_r+0xf2>
  40f214:	07fe      	lsls	r6, r7, #31
  40f216:	6050      	str	r0, [r2, #4]
  40f218:	d40b      	bmi.n	40f232 <_free_r+0x4a>
  40f21a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40f21e:	1be4      	subs	r4, r4, r7
  40f220:	f101 0e08 	add.w	lr, r1, #8
  40f224:	68a5      	ldr	r5, [r4, #8]
  40f226:	4575      	cmp	r5, lr
  40f228:	443b      	add	r3, r7
  40f22a:	d06f      	beq.n	40f30c <_free_r+0x124>
  40f22c:	68e7      	ldr	r7, [r4, #12]
  40f22e:	60ef      	str	r7, [r5, #12]
  40f230:	60bd      	str	r5, [r7, #8]
  40f232:	1815      	adds	r5, r2, r0
  40f234:	686d      	ldr	r5, [r5, #4]
  40f236:	07ed      	lsls	r5, r5, #31
  40f238:	d542      	bpl.n	40f2c0 <_free_r+0xd8>
  40f23a:	f043 0201 	orr.w	r2, r3, #1
  40f23e:	6062      	str	r2, [r4, #4]
  40f240:	50e3      	str	r3, [r4, r3]
  40f242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40f246:	d218      	bcs.n	40f27a <_free_r+0x92>
  40f248:	08db      	lsrs	r3, r3, #3
  40f24a:	1c5a      	adds	r2, r3, #1
  40f24c:	684d      	ldr	r5, [r1, #4]
  40f24e:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  40f252:	60a7      	str	r7, [r4, #8]
  40f254:	2001      	movs	r0, #1
  40f256:	109b      	asrs	r3, r3, #2
  40f258:	fa00 f303 	lsl.w	r3, r0, r3
  40f25c:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  40f260:	431d      	orrs	r5, r3
  40f262:	3808      	subs	r0, #8
  40f264:	60e0      	str	r0, [r4, #12]
  40f266:	604d      	str	r5, [r1, #4]
  40f268:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  40f26c:	60fc      	str	r4, [r7, #12]
  40f26e:	4640      	mov	r0, r8
  40f270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40f274:	f7ff bb46 	b.w	40e904 <__malloc_unlock>
  40f278:	4770      	bx	lr
  40f27a:	0a5a      	lsrs	r2, r3, #9
  40f27c:	2a04      	cmp	r2, #4
  40f27e:	d853      	bhi.n	40f328 <_free_r+0x140>
  40f280:	099a      	lsrs	r2, r3, #6
  40f282:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40f286:	007f      	lsls	r7, r7, #1
  40f288:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40f28c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  40f290:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  40f294:	4944      	ldr	r1, [pc, #272]	; (40f3a8 <_free_r+0x1c0>)
  40f296:	3808      	subs	r0, #8
  40f298:	4290      	cmp	r0, r2
  40f29a:	d04d      	beq.n	40f338 <_free_r+0x150>
  40f29c:	6851      	ldr	r1, [r2, #4]
  40f29e:	f021 0103 	bic.w	r1, r1, #3
  40f2a2:	428b      	cmp	r3, r1
  40f2a4:	d202      	bcs.n	40f2ac <_free_r+0xc4>
  40f2a6:	6892      	ldr	r2, [r2, #8]
  40f2a8:	4290      	cmp	r0, r2
  40f2aa:	d1f7      	bne.n	40f29c <_free_r+0xb4>
  40f2ac:	68d0      	ldr	r0, [r2, #12]
  40f2ae:	60e0      	str	r0, [r4, #12]
  40f2b0:	60a2      	str	r2, [r4, #8]
  40f2b2:	6084      	str	r4, [r0, #8]
  40f2b4:	60d4      	str	r4, [r2, #12]
  40f2b6:	4640      	mov	r0, r8
  40f2b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40f2bc:	f7ff bb22 	b.w	40e904 <__malloc_unlock>
  40f2c0:	6895      	ldr	r5, [r2, #8]
  40f2c2:	4f3a      	ldr	r7, [pc, #232]	; (40f3ac <_free_r+0x1c4>)
  40f2c4:	42bd      	cmp	r5, r7
  40f2c6:	4403      	add	r3, r0
  40f2c8:	d03f      	beq.n	40f34a <_free_r+0x162>
  40f2ca:	68d0      	ldr	r0, [r2, #12]
  40f2cc:	60e8      	str	r0, [r5, #12]
  40f2ce:	f043 0201 	orr.w	r2, r3, #1
  40f2d2:	6085      	str	r5, [r0, #8]
  40f2d4:	6062      	str	r2, [r4, #4]
  40f2d6:	50e3      	str	r3, [r4, r3]
  40f2d8:	e7b3      	b.n	40f242 <_free_r+0x5a>
  40f2da:	07ff      	lsls	r7, r7, #31
  40f2dc:	4403      	add	r3, r0
  40f2de:	d407      	bmi.n	40f2f0 <_free_r+0x108>
  40f2e0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40f2e4:	1aa4      	subs	r4, r4, r2
  40f2e6:	4413      	add	r3, r2
  40f2e8:	68a0      	ldr	r0, [r4, #8]
  40f2ea:	68e2      	ldr	r2, [r4, #12]
  40f2ec:	60c2      	str	r2, [r0, #12]
  40f2ee:	6090      	str	r0, [r2, #8]
  40f2f0:	4a2f      	ldr	r2, [pc, #188]	; (40f3b0 <_free_r+0x1c8>)
  40f2f2:	6812      	ldr	r2, [r2, #0]
  40f2f4:	f043 0001 	orr.w	r0, r3, #1
  40f2f8:	4293      	cmp	r3, r2
  40f2fa:	6060      	str	r0, [r4, #4]
  40f2fc:	608c      	str	r4, [r1, #8]
  40f2fe:	d3b6      	bcc.n	40f26e <_free_r+0x86>
  40f300:	4b2c      	ldr	r3, [pc, #176]	; (40f3b4 <_free_r+0x1cc>)
  40f302:	4640      	mov	r0, r8
  40f304:	6819      	ldr	r1, [r3, #0]
  40f306:	f7ff ff21 	bl	40f14c <_malloc_trim_r>
  40f30a:	e7b0      	b.n	40f26e <_free_r+0x86>
  40f30c:	1811      	adds	r1, r2, r0
  40f30e:	6849      	ldr	r1, [r1, #4]
  40f310:	07c9      	lsls	r1, r1, #31
  40f312:	d444      	bmi.n	40f39e <_free_r+0x1b6>
  40f314:	6891      	ldr	r1, [r2, #8]
  40f316:	68d2      	ldr	r2, [r2, #12]
  40f318:	60ca      	str	r2, [r1, #12]
  40f31a:	4403      	add	r3, r0
  40f31c:	f043 0001 	orr.w	r0, r3, #1
  40f320:	6091      	str	r1, [r2, #8]
  40f322:	6060      	str	r0, [r4, #4]
  40f324:	50e3      	str	r3, [r4, r3]
  40f326:	e7a2      	b.n	40f26e <_free_r+0x86>
  40f328:	2a14      	cmp	r2, #20
  40f32a:	d817      	bhi.n	40f35c <_free_r+0x174>
  40f32c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40f330:	007f      	lsls	r7, r7, #1
  40f332:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40f336:	e7a9      	b.n	40f28c <_free_r+0xa4>
  40f338:	10aa      	asrs	r2, r5, #2
  40f33a:	684b      	ldr	r3, [r1, #4]
  40f33c:	2501      	movs	r5, #1
  40f33e:	fa05 f202 	lsl.w	r2, r5, r2
  40f342:	4313      	orrs	r3, r2
  40f344:	604b      	str	r3, [r1, #4]
  40f346:	4602      	mov	r2, r0
  40f348:	e7b1      	b.n	40f2ae <_free_r+0xc6>
  40f34a:	f043 0201 	orr.w	r2, r3, #1
  40f34e:	614c      	str	r4, [r1, #20]
  40f350:	610c      	str	r4, [r1, #16]
  40f352:	60e5      	str	r5, [r4, #12]
  40f354:	60a5      	str	r5, [r4, #8]
  40f356:	6062      	str	r2, [r4, #4]
  40f358:	50e3      	str	r3, [r4, r3]
  40f35a:	e788      	b.n	40f26e <_free_r+0x86>
  40f35c:	2a54      	cmp	r2, #84	; 0x54
  40f35e:	d806      	bhi.n	40f36e <_free_r+0x186>
  40f360:	0b1a      	lsrs	r2, r3, #12
  40f362:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40f366:	007f      	lsls	r7, r7, #1
  40f368:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40f36c:	e78e      	b.n	40f28c <_free_r+0xa4>
  40f36e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40f372:	d806      	bhi.n	40f382 <_free_r+0x19a>
  40f374:	0bda      	lsrs	r2, r3, #15
  40f376:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40f37a:	007f      	lsls	r7, r7, #1
  40f37c:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40f380:	e784      	b.n	40f28c <_free_r+0xa4>
  40f382:	f240 5054 	movw	r0, #1364	; 0x554
  40f386:	4282      	cmp	r2, r0
  40f388:	d806      	bhi.n	40f398 <_free_r+0x1b0>
  40f38a:	0c9a      	lsrs	r2, r3, #18
  40f38c:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40f390:	007f      	lsls	r7, r7, #1
  40f392:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40f396:	e779      	b.n	40f28c <_free_r+0xa4>
  40f398:	27fe      	movs	r7, #254	; 0xfe
  40f39a:	257e      	movs	r5, #126	; 0x7e
  40f39c:	e776      	b.n	40f28c <_free_r+0xa4>
  40f39e:	f043 0201 	orr.w	r2, r3, #1
  40f3a2:	6062      	str	r2, [r4, #4]
  40f3a4:	50e3      	str	r3, [r4, r3]
  40f3a6:	e762      	b.n	40f26e <_free_r+0x86>
  40f3a8:	20000594 	.word	0x20000594
  40f3ac:	2000059c 	.word	0x2000059c
  40f3b0:	2000099c 	.word	0x2000099c
  40f3b4:	20002e5c 	.word	0x20002e5c

0040f3b8 <memmove>:
  40f3b8:	4288      	cmp	r0, r1
  40f3ba:	b5f0      	push	{r4, r5, r6, r7, lr}
  40f3bc:	d90d      	bls.n	40f3da <memmove+0x22>
  40f3be:	188b      	adds	r3, r1, r2
  40f3c0:	4298      	cmp	r0, r3
  40f3c2:	d20a      	bcs.n	40f3da <memmove+0x22>
  40f3c4:	1881      	adds	r1, r0, r2
  40f3c6:	2a00      	cmp	r2, #0
  40f3c8:	d051      	beq.n	40f46e <memmove+0xb6>
  40f3ca:	1a9a      	subs	r2, r3, r2
  40f3cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40f3d0:	f801 4d01 	strb.w	r4, [r1, #-1]!
  40f3d4:	4293      	cmp	r3, r2
  40f3d6:	d1f9      	bne.n	40f3cc <memmove+0x14>
  40f3d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40f3da:	2a0f      	cmp	r2, #15
  40f3dc:	d948      	bls.n	40f470 <memmove+0xb8>
  40f3de:	ea41 0300 	orr.w	r3, r1, r0
  40f3e2:	079b      	lsls	r3, r3, #30
  40f3e4:	d146      	bne.n	40f474 <memmove+0xbc>
  40f3e6:	f100 0410 	add.w	r4, r0, #16
  40f3ea:	f101 0310 	add.w	r3, r1, #16
  40f3ee:	4615      	mov	r5, r2
  40f3f0:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40f3f4:	f844 6c10 	str.w	r6, [r4, #-16]
  40f3f8:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40f3fc:	f844 6c0c 	str.w	r6, [r4, #-12]
  40f400:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40f404:	f844 6c08 	str.w	r6, [r4, #-8]
  40f408:	3d10      	subs	r5, #16
  40f40a:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40f40e:	f844 6c04 	str.w	r6, [r4, #-4]
  40f412:	2d0f      	cmp	r5, #15
  40f414:	f103 0310 	add.w	r3, r3, #16
  40f418:	f104 0410 	add.w	r4, r4, #16
  40f41c:	d8e8      	bhi.n	40f3f0 <memmove+0x38>
  40f41e:	f1a2 0310 	sub.w	r3, r2, #16
  40f422:	f023 030f 	bic.w	r3, r3, #15
  40f426:	f002 0e0f 	and.w	lr, r2, #15
  40f42a:	3310      	adds	r3, #16
  40f42c:	f1be 0f03 	cmp.w	lr, #3
  40f430:	4419      	add	r1, r3
  40f432:	4403      	add	r3, r0
  40f434:	d921      	bls.n	40f47a <memmove+0xc2>
  40f436:	1f1e      	subs	r6, r3, #4
  40f438:	460d      	mov	r5, r1
  40f43a:	4674      	mov	r4, lr
  40f43c:	3c04      	subs	r4, #4
  40f43e:	f855 7b04 	ldr.w	r7, [r5], #4
  40f442:	f846 7f04 	str.w	r7, [r6, #4]!
  40f446:	2c03      	cmp	r4, #3
  40f448:	d8f8      	bhi.n	40f43c <memmove+0x84>
  40f44a:	f1ae 0404 	sub.w	r4, lr, #4
  40f44e:	f024 0403 	bic.w	r4, r4, #3
  40f452:	3404      	adds	r4, #4
  40f454:	4423      	add	r3, r4
  40f456:	4421      	add	r1, r4
  40f458:	f002 0203 	and.w	r2, r2, #3
  40f45c:	b162      	cbz	r2, 40f478 <memmove+0xc0>
  40f45e:	3b01      	subs	r3, #1
  40f460:	440a      	add	r2, r1
  40f462:	f811 4b01 	ldrb.w	r4, [r1], #1
  40f466:	f803 4f01 	strb.w	r4, [r3, #1]!
  40f46a:	428a      	cmp	r2, r1
  40f46c:	d1f9      	bne.n	40f462 <memmove+0xaa>
  40f46e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40f470:	4603      	mov	r3, r0
  40f472:	e7f3      	b.n	40f45c <memmove+0xa4>
  40f474:	4603      	mov	r3, r0
  40f476:	e7f2      	b.n	40f45e <memmove+0xa6>
  40f478:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40f47a:	4672      	mov	r2, lr
  40f47c:	e7ee      	b.n	40f45c <memmove+0xa4>
  40f47e:	bf00      	nop

0040f480 <_realloc_r>:
  40f480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f484:	4617      	mov	r7, r2
  40f486:	b083      	sub	sp, #12
  40f488:	2900      	cmp	r1, #0
  40f48a:	f000 80c1 	beq.w	40f610 <_realloc_r+0x190>
  40f48e:	460e      	mov	r6, r1
  40f490:	4681      	mov	r9, r0
  40f492:	f107 050b 	add.w	r5, r7, #11
  40f496:	f7ff fa33 	bl	40e900 <__malloc_lock>
  40f49a:	f856 ec04 	ldr.w	lr, [r6, #-4]
  40f49e:	2d16      	cmp	r5, #22
  40f4a0:	f02e 0403 	bic.w	r4, lr, #3
  40f4a4:	f1a6 0808 	sub.w	r8, r6, #8
  40f4a8:	d840      	bhi.n	40f52c <_realloc_r+0xac>
  40f4aa:	2210      	movs	r2, #16
  40f4ac:	4615      	mov	r5, r2
  40f4ae:	42af      	cmp	r7, r5
  40f4b0:	d841      	bhi.n	40f536 <_realloc_r+0xb6>
  40f4b2:	4294      	cmp	r4, r2
  40f4b4:	da75      	bge.n	40f5a2 <_realloc_r+0x122>
  40f4b6:	4bc9      	ldr	r3, [pc, #804]	; (40f7dc <_realloc_r+0x35c>)
  40f4b8:	6899      	ldr	r1, [r3, #8]
  40f4ba:	eb08 0004 	add.w	r0, r8, r4
  40f4be:	4288      	cmp	r0, r1
  40f4c0:	6841      	ldr	r1, [r0, #4]
  40f4c2:	f000 80d9 	beq.w	40f678 <_realloc_r+0x1f8>
  40f4c6:	f021 0301 	bic.w	r3, r1, #1
  40f4ca:	4403      	add	r3, r0
  40f4cc:	685b      	ldr	r3, [r3, #4]
  40f4ce:	07db      	lsls	r3, r3, #31
  40f4d0:	d57d      	bpl.n	40f5ce <_realloc_r+0x14e>
  40f4d2:	f01e 0f01 	tst.w	lr, #1
  40f4d6:	d035      	beq.n	40f544 <_realloc_r+0xc4>
  40f4d8:	4639      	mov	r1, r7
  40f4da:	4648      	mov	r0, r9
  40f4dc:	f7fe ff08 	bl	40e2f0 <_malloc_r>
  40f4e0:	4607      	mov	r7, r0
  40f4e2:	b1e0      	cbz	r0, 40f51e <_realloc_r+0x9e>
  40f4e4:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40f4e8:	f023 0301 	bic.w	r3, r3, #1
  40f4ec:	4443      	add	r3, r8
  40f4ee:	f1a0 0208 	sub.w	r2, r0, #8
  40f4f2:	429a      	cmp	r2, r3
  40f4f4:	f000 8144 	beq.w	40f780 <_realloc_r+0x300>
  40f4f8:	1f22      	subs	r2, r4, #4
  40f4fa:	2a24      	cmp	r2, #36	; 0x24
  40f4fc:	f200 8131 	bhi.w	40f762 <_realloc_r+0x2e2>
  40f500:	2a13      	cmp	r2, #19
  40f502:	f200 8104 	bhi.w	40f70e <_realloc_r+0x28e>
  40f506:	4603      	mov	r3, r0
  40f508:	4632      	mov	r2, r6
  40f50a:	6811      	ldr	r1, [r2, #0]
  40f50c:	6019      	str	r1, [r3, #0]
  40f50e:	6851      	ldr	r1, [r2, #4]
  40f510:	6059      	str	r1, [r3, #4]
  40f512:	6892      	ldr	r2, [r2, #8]
  40f514:	609a      	str	r2, [r3, #8]
  40f516:	4631      	mov	r1, r6
  40f518:	4648      	mov	r0, r9
  40f51a:	f7ff fe65 	bl	40f1e8 <_free_r>
  40f51e:	4648      	mov	r0, r9
  40f520:	f7ff f9f0 	bl	40e904 <__malloc_unlock>
  40f524:	4638      	mov	r0, r7
  40f526:	b003      	add	sp, #12
  40f528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f52c:	f025 0507 	bic.w	r5, r5, #7
  40f530:	2d00      	cmp	r5, #0
  40f532:	462a      	mov	r2, r5
  40f534:	dabb      	bge.n	40f4ae <_realloc_r+0x2e>
  40f536:	230c      	movs	r3, #12
  40f538:	2000      	movs	r0, #0
  40f53a:	f8c9 3000 	str.w	r3, [r9]
  40f53e:	b003      	add	sp, #12
  40f540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f544:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40f548:	ebc3 0a08 	rsb	sl, r3, r8
  40f54c:	f8da 3004 	ldr.w	r3, [sl, #4]
  40f550:	f023 0c03 	bic.w	ip, r3, #3
  40f554:	eb04 030c 	add.w	r3, r4, ip
  40f558:	4293      	cmp	r3, r2
  40f55a:	dbbd      	blt.n	40f4d8 <_realloc_r+0x58>
  40f55c:	4657      	mov	r7, sl
  40f55e:	f8da 100c 	ldr.w	r1, [sl, #12]
  40f562:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40f566:	1f22      	subs	r2, r4, #4
  40f568:	2a24      	cmp	r2, #36	; 0x24
  40f56a:	60c1      	str	r1, [r0, #12]
  40f56c:	6088      	str	r0, [r1, #8]
  40f56e:	f200 8117 	bhi.w	40f7a0 <_realloc_r+0x320>
  40f572:	2a13      	cmp	r2, #19
  40f574:	f240 8112 	bls.w	40f79c <_realloc_r+0x31c>
  40f578:	6831      	ldr	r1, [r6, #0]
  40f57a:	f8ca 1008 	str.w	r1, [sl, #8]
  40f57e:	6871      	ldr	r1, [r6, #4]
  40f580:	f8ca 100c 	str.w	r1, [sl, #12]
  40f584:	2a1b      	cmp	r2, #27
  40f586:	f200 812b 	bhi.w	40f7e0 <_realloc_r+0x360>
  40f58a:	3608      	adds	r6, #8
  40f58c:	f10a 0210 	add.w	r2, sl, #16
  40f590:	6831      	ldr	r1, [r6, #0]
  40f592:	6011      	str	r1, [r2, #0]
  40f594:	6871      	ldr	r1, [r6, #4]
  40f596:	6051      	str	r1, [r2, #4]
  40f598:	68b1      	ldr	r1, [r6, #8]
  40f59a:	6091      	str	r1, [r2, #8]
  40f59c:	463e      	mov	r6, r7
  40f59e:	461c      	mov	r4, r3
  40f5a0:	46d0      	mov	r8, sl
  40f5a2:	1b63      	subs	r3, r4, r5
  40f5a4:	2b0f      	cmp	r3, #15
  40f5a6:	d81d      	bhi.n	40f5e4 <_realloc_r+0x164>
  40f5a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40f5ac:	f003 0301 	and.w	r3, r3, #1
  40f5b0:	4323      	orrs	r3, r4
  40f5b2:	4444      	add	r4, r8
  40f5b4:	f8c8 3004 	str.w	r3, [r8, #4]
  40f5b8:	6863      	ldr	r3, [r4, #4]
  40f5ba:	f043 0301 	orr.w	r3, r3, #1
  40f5be:	6063      	str	r3, [r4, #4]
  40f5c0:	4648      	mov	r0, r9
  40f5c2:	f7ff f99f 	bl	40e904 <__malloc_unlock>
  40f5c6:	4630      	mov	r0, r6
  40f5c8:	b003      	add	sp, #12
  40f5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f5ce:	f021 0103 	bic.w	r1, r1, #3
  40f5d2:	4421      	add	r1, r4
  40f5d4:	4291      	cmp	r1, r2
  40f5d6:	db21      	blt.n	40f61c <_realloc_r+0x19c>
  40f5d8:	68c3      	ldr	r3, [r0, #12]
  40f5da:	6882      	ldr	r2, [r0, #8]
  40f5dc:	460c      	mov	r4, r1
  40f5de:	60d3      	str	r3, [r2, #12]
  40f5e0:	609a      	str	r2, [r3, #8]
  40f5e2:	e7de      	b.n	40f5a2 <_realloc_r+0x122>
  40f5e4:	f8d8 2004 	ldr.w	r2, [r8, #4]
  40f5e8:	eb08 0105 	add.w	r1, r8, r5
  40f5ec:	f002 0201 	and.w	r2, r2, #1
  40f5f0:	4315      	orrs	r5, r2
  40f5f2:	f043 0201 	orr.w	r2, r3, #1
  40f5f6:	440b      	add	r3, r1
  40f5f8:	f8c8 5004 	str.w	r5, [r8, #4]
  40f5fc:	604a      	str	r2, [r1, #4]
  40f5fe:	685a      	ldr	r2, [r3, #4]
  40f600:	f042 0201 	orr.w	r2, r2, #1
  40f604:	3108      	adds	r1, #8
  40f606:	605a      	str	r2, [r3, #4]
  40f608:	4648      	mov	r0, r9
  40f60a:	f7ff fded 	bl	40f1e8 <_free_r>
  40f60e:	e7d7      	b.n	40f5c0 <_realloc_r+0x140>
  40f610:	4611      	mov	r1, r2
  40f612:	b003      	add	sp, #12
  40f614:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f618:	f7fe be6a 	b.w	40e2f0 <_malloc_r>
  40f61c:	f01e 0f01 	tst.w	lr, #1
  40f620:	f47f af5a 	bne.w	40f4d8 <_realloc_r+0x58>
  40f624:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40f628:	ebc3 0a08 	rsb	sl, r3, r8
  40f62c:	f8da 3004 	ldr.w	r3, [sl, #4]
  40f630:	f023 0c03 	bic.w	ip, r3, #3
  40f634:	eb01 0e0c 	add.w	lr, r1, ip
  40f638:	4596      	cmp	lr, r2
  40f63a:	db8b      	blt.n	40f554 <_realloc_r+0xd4>
  40f63c:	68c3      	ldr	r3, [r0, #12]
  40f63e:	6882      	ldr	r2, [r0, #8]
  40f640:	4657      	mov	r7, sl
  40f642:	60d3      	str	r3, [r2, #12]
  40f644:	609a      	str	r2, [r3, #8]
  40f646:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40f64a:	f8da 300c 	ldr.w	r3, [sl, #12]
  40f64e:	60cb      	str	r3, [r1, #12]
  40f650:	1f22      	subs	r2, r4, #4
  40f652:	2a24      	cmp	r2, #36	; 0x24
  40f654:	6099      	str	r1, [r3, #8]
  40f656:	f200 8099 	bhi.w	40f78c <_realloc_r+0x30c>
  40f65a:	2a13      	cmp	r2, #19
  40f65c:	d962      	bls.n	40f724 <_realloc_r+0x2a4>
  40f65e:	6833      	ldr	r3, [r6, #0]
  40f660:	f8ca 3008 	str.w	r3, [sl, #8]
  40f664:	6873      	ldr	r3, [r6, #4]
  40f666:	f8ca 300c 	str.w	r3, [sl, #12]
  40f66a:	2a1b      	cmp	r2, #27
  40f66c:	f200 80a0 	bhi.w	40f7b0 <_realloc_r+0x330>
  40f670:	3608      	adds	r6, #8
  40f672:	f10a 0310 	add.w	r3, sl, #16
  40f676:	e056      	b.n	40f726 <_realloc_r+0x2a6>
  40f678:	f021 0b03 	bic.w	fp, r1, #3
  40f67c:	44a3      	add	fp, r4
  40f67e:	f105 0010 	add.w	r0, r5, #16
  40f682:	4583      	cmp	fp, r0
  40f684:	da59      	bge.n	40f73a <_realloc_r+0x2ba>
  40f686:	f01e 0f01 	tst.w	lr, #1
  40f68a:	f47f af25 	bne.w	40f4d8 <_realloc_r+0x58>
  40f68e:	f856 1c08 	ldr.w	r1, [r6, #-8]
  40f692:	ebc1 0a08 	rsb	sl, r1, r8
  40f696:	f8da 1004 	ldr.w	r1, [sl, #4]
  40f69a:	f021 0c03 	bic.w	ip, r1, #3
  40f69e:	44e3      	add	fp, ip
  40f6a0:	4558      	cmp	r0, fp
  40f6a2:	f73f af57 	bgt.w	40f554 <_realloc_r+0xd4>
  40f6a6:	4657      	mov	r7, sl
  40f6a8:	f8da 100c 	ldr.w	r1, [sl, #12]
  40f6ac:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40f6b0:	1f22      	subs	r2, r4, #4
  40f6b2:	2a24      	cmp	r2, #36	; 0x24
  40f6b4:	60c1      	str	r1, [r0, #12]
  40f6b6:	6088      	str	r0, [r1, #8]
  40f6b8:	f200 80b4 	bhi.w	40f824 <_realloc_r+0x3a4>
  40f6bc:	2a13      	cmp	r2, #19
  40f6be:	f240 80a5 	bls.w	40f80c <_realloc_r+0x38c>
  40f6c2:	6831      	ldr	r1, [r6, #0]
  40f6c4:	f8ca 1008 	str.w	r1, [sl, #8]
  40f6c8:	6871      	ldr	r1, [r6, #4]
  40f6ca:	f8ca 100c 	str.w	r1, [sl, #12]
  40f6ce:	2a1b      	cmp	r2, #27
  40f6d0:	f200 80af 	bhi.w	40f832 <_realloc_r+0x3b2>
  40f6d4:	3608      	adds	r6, #8
  40f6d6:	f10a 0210 	add.w	r2, sl, #16
  40f6da:	6831      	ldr	r1, [r6, #0]
  40f6dc:	6011      	str	r1, [r2, #0]
  40f6de:	6871      	ldr	r1, [r6, #4]
  40f6e0:	6051      	str	r1, [r2, #4]
  40f6e2:	68b1      	ldr	r1, [r6, #8]
  40f6e4:	6091      	str	r1, [r2, #8]
  40f6e6:	eb0a 0105 	add.w	r1, sl, r5
  40f6ea:	ebc5 020b 	rsb	r2, r5, fp
  40f6ee:	f042 0201 	orr.w	r2, r2, #1
  40f6f2:	6099      	str	r1, [r3, #8]
  40f6f4:	604a      	str	r2, [r1, #4]
  40f6f6:	f8da 3004 	ldr.w	r3, [sl, #4]
  40f6fa:	f003 0301 	and.w	r3, r3, #1
  40f6fe:	431d      	orrs	r5, r3
  40f700:	4648      	mov	r0, r9
  40f702:	f8ca 5004 	str.w	r5, [sl, #4]
  40f706:	f7ff f8fd 	bl	40e904 <__malloc_unlock>
  40f70a:	4638      	mov	r0, r7
  40f70c:	e75c      	b.n	40f5c8 <_realloc_r+0x148>
  40f70e:	6833      	ldr	r3, [r6, #0]
  40f710:	6003      	str	r3, [r0, #0]
  40f712:	6873      	ldr	r3, [r6, #4]
  40f714:	6043      	str	r3, [r0, #4]
  40f716:	2a1b      	cmp	r2, #27
  40f718:	d827      	bhi.n	40f76a <_realloc_r+0x2ea>
  40f71a:	f100 0308 	add.w	r3, r0, #8
  40f71e:	f106 0208 	add.w	r2, r6, #8
  40f722:	e6f2      	b.n	40f50a <_realloc_r+0x8a>
  40f724:	463b      	mov	r3, r7
  40f726:	6832      	ldr	r2, [r6, #0]
  40f728:	601a      	str	r2, [r3, #0]
  40f72a:	6872      	ldr	r2, [r6, #4]
  40f72c:	605a      	str	r2, [r3, #4]
  40f72e:	68b2      	ldr	r2, [r6, #8]
  40f730:	609a      	str	r2, [r3, #8]
  40f732:	463e      	mov	r6, r7
  40f734:	4674      	mov	r4, lr
  40f736:	46d0      	mov	r8, sl
  40f738:	e733      	b.n	40f5a2 <_realloc_r+0x122>
  40f73a:	eb08 0105 	add.w	r1, r8, r5
  40f73e:	ebc5 0b0b 	rsb	fp, r5, fp
  40f742:	f04b 0201 	orr.w	r2, fp, #1
  40f746:	6099      	str	r1, [r3, #8]
  40f748:	604a      	str	r2, [r1, #4]
  40f74a:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40f74e:	f003 0301 	and.w	r3, r3, #1
  40f752:	431d      	orrs	r5, r3
  40f754:	4648      	mov	r0, r9
  40f756:	f846 5c04 	str.w	r5, [r6, #-4]
  40f75a:	f7ff f8d3 	bl	40e904 <__malloc_unlock>
  40f75e:	4630      	mov	r0, r6
  40f760:	e732      	b.n	40f5c8 <_realloc_r+0x148>
  40f762:	4631      	mov	r1, r6
  40f764:	f7ff fe28 	bl	40f3b8 <memmove>
  40f768:	e6d5      	b.n	40f516 <_realloc_r+0x96>
  40f76a:	68b3      	ldr	r3, [r6, #8]
  40f76c:	6083      	str	r3, [r0, #8]
  40f76e:	68f3      	ldr	r3, [r6, #12]
  40f770:	60c3      	str	r3, [r0, #12]
  40f772:	2a24      	cmp	r2, #36	; 0x24
  40f774:	d028      	beq.n	40f7c8 <_realloc_r+0x348>
  40f776:	f100 0310 	add.w	r3, r0, #16
  40f77a:	f106 0210 	add.w	r2, r6, #16
  40f77e:	e6c4      	b.n	40f50a <_realloc_r+0x8a>
  40f780:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40f784:	f023 0303 	bic.w	r3, r3, #3
  40f788:	441c      	add	r4, r3
  40f78a:	e70a      	b.n	40f5a2 <_realloc_r+0x122>
  40f78c:	4631      	mov	r1, r6
  40f78e:	4638      	mov	r0, r7
  40f790:	4674      	mov	r4, lr
  40f792:	46d0      	mov	r8, sl
  40f794:	f7ff fe10 	bl	40f3b8 <memmove>
  40f798:	463e      	mov	r6, r7
  40f79a:	e702      	b.n	40f5a2 <_realloc_r+0x122>
  40f79c:	463a      	mov	r2, r7
  40f79e:	e6f7      	b.n	40f590 <_realloc_r+0x110>
  40f7a0:	4631      	mov	r1, r6
  40f7a2:	4638      	mov	r0, r7
  40f7a4:	461c      	mov	r4, r3
  40f7a6:	46d0      	mov	r8, sl
  40f7a8:	f7ff fe06 	bl	40f3b8 <memmove>
  40f7ac:	463e      	mov	r6, r7
  40f7ae:	e6f8      	b.n	40f5a2 <_realloc_r+0x122>
  40f7b0:	68b3      	ldr	r3, [r6, #8]
  40f7b2:	f8ca 3010 	str.w	r3, [sl, #16]
  40f7b6:	68f3      	ldr	r3, [r6, #12]
  40f7b8:	f8ca 3014 	str.w	r3, [sl, #20]
  40f7bc:	2a24      	cmp	r2, #36	; 0x24
  40f7be:	d01b      	beq.n	40f7f8 <_realloc_r+0x378>
  40f7c0:	3610      	adds	r6, #16
  40f7c2:	f10a 0318 	add.w	r3, sl, #24
  40f7c6:	e7ae      	b.n	40f726 <_realloc_r+0x2a6>
  40f7c8:	6933      	ldr	r3, [r6, #16]
  40f7ca:	6103      	str	r3, [r0, #16]
  40f7cc:	6973      	ldr	r3, [r6, #20]
  40f7ce:	6143      	str	r3, [r0, #20]
  40f7d0:	f106 0218 	add.w	r2, r6, #24
  40f7d4:	f100 0318 	add.w	r3, r0, #24
  40f7d8:	e697      	b.n	40f50a <_realloc_r+0x8a>
  40f7da:	bf00      	nop
  40f7dc:	20000594 	.word	0x20000594
  40f7e0:	68b1      	ldr	r1, [r6, #8]
  40f7e2:	f8ca 1010 	str.w	r1, [sl, #16]
  40f7e6:	68f1      	ldr	r1, [r6, #12]
  40f7e8:	f8ca 1014 	str.w	r1, [sl, #20]
  40f7ec:	2a24      	cmp	r2, #36	; 0x24
  40f7ee:	d00f      	beq.n	40f810 <_realloc_r+0x390>
  40f7f0:	3610      	adds	r6, #16
  40f7f2:	f10a 0218 	add.w	r2, sl, #24
  40f7f6:	e6cb      	b.n	40f590 <_realloc_r+0x110>
  40f7f8:	6933      	ldr	r3, [r6, #16]
  40f7fa:	f8ca 3018 	str.w	r3, [sl, #24]
  40f7fe:	6973      	ldr	r3, [r6, #20]
  40f800:	f8ca 301c 	str.w	r3, [sl, #28]
  40f804:	3618      	adds	r6, #24
  40f806:	f10a 0320 	add.w	r3, sl, #32
  40f80a:	e78c      	b.n	40f726 <_realloc_r+0x2a6>
  40f80c:	463a      	mov	r2, r7
  40f80e:	e764      	b.n	40f6da <_realloc_r+0x25a>
  40f810:	6932      	ldr	r2, [r6, #16]
  40f812:	f8ca 2018 	str.w	r2, [sl, #24]
  40f816:	6972      	ldr	r2, [r6, #20]
  40f818:	f8ca 201c 	str.w	r2, [sl, #28]
  40f81c:	3618      	adds	r6, #24
  40f81e:	f10a 0220 	add.w	r2, sl, #32
  40f822:	e6b5      	b.n	40f590 <_realloc_r+0x110>
  40f824:	4631      	mov	r1, r6
  40f826:	4638      	mov	r0, r7
  40f828:	9301      	str	r3, [sp, #4]
  40f82a:	f7ff fdc5 	bl	40f3b8 <memmove>
  40f82e:	9b01      	ldr	r3, [sp, #4]
  40f830:	e759      	b.n	40f6e6 <_realloc_r+0x266>
  40f832:	68b1      	ldr	r1, [r6, #8]
  40f834:	f8ca 1010 	str.w	r1, [sl, #16]
  40f838:	68f1      	ldr	r1, [r6, #12]
  40f83a:	f8ca 1014 	str.w	r1, [sl, #20]
  40f83e:	2a24      	cmp	r2, #36	; 0x24
  40f840:	d003      	beq.n	40f84a <_realloc_r+0x3ca>
  40f842:	3610      	adds	r6, #16
  40f844:	f10a 0218 	add.w	r2, sl, #24
  40f848:	e747      	b.n	40f6da <_realloc_r+0x25a>
  40f84a:	6932      	ldr	r2, [r6, #16]
  40f84c:	f8ca 2018 	str.w	r2, [sl, #24]
  40f850:	6972      	ldr	r2, [r6, #20]
  40f852:	f8ca 201c 	str.w	r2, [sl, #28]
  40f856:	3618      	adds	r6, #24
  40f858:	f10a 0220 	add.w	r2, sl, #32
  40f85c:	e73d      	b.n	40f6da <_realloc_r+0x25a>
  40f85e:	bf00      	nop
  40f860:	2c737248 	.word	0x2c737248
  40f864:	736e694d 	.word	0x736e694d
  40f868:	6365532c 	.word	0x6365532c
  40f86c:	72542c73 	.word	0x72542c73
  40f870:	696b6361 	.word	0x696b6361
  40f874:	4d20676e 	.word	0x4d20676e
  40f878:	2c65646f 	.word	0x2c65646f
  40f87c:	6e417650 	.word	0x6e417650
  40f880:	2c656c67 	.word	0x2c656c67
  40f884:	6e416b42 	.word	0x6e416b42
  40f888:	0d656c67 	.word	0x0d656c67
  40f88c:	0000000a 	.word	0x0000000a
  40f890:	002c6425 	.word	0x002c6425
  40f894:	0a0d414e 	.word	0x0a0d414e
  40f898:	00000000 	.word	0x00000000
  40f89c:	252e6425 	.word	0x252e6425
  40f8a0:	00000064 	.word	0x00000064
  40f8a4:	2e64252d 	.word	0x2e64252d
  40f8a8:	00006425 	.word	0x00006425
  40f8ac:	252c6425 	.word	0x252c6425
  40f8b0:	64252c64 	.word	0x64252c64
  40f8b4:	0000002c 	.word	0x0000002c
  40f8b8:	00002580 	.word	0x00002580
  40f8bc:	000000c0 	.word	0x000000c0
  40f8c0:	00000800 	.word	0x00000800
	...

0040f8d0 <all_twi_definitions>:
  40f8d0:	40018000 40018100 00000013 00000013     ...@...@........
  40f8e0:	4001c000 4001c100 00000014 00000014     ...@...@........

0040f8f0 <all_usart_definitions>:
  40f8f0:	40024000 40024100 0000000e 0000000e     .@.@.A.@........
  40f900:	40028000 40028100 0000000f 0000000f     ...@...@........
  40f910:	454c4449 00000000                       IDLE....

0040f918 <ucExpectedStackBytes.6087>:
  40f918:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
  40f928:	a5a5a5a5 20726d54 00637653 00007650     ....Tmr Svc.Pv..
  40f938:	6d6d6f43 00000000 6e696c42 0000796b     Comm....Blinky..
  40f948:	736f6361 00000000 6e697361 00000000     acos....asin....
  40f958:	74727173 00000000                       sqrt....

0040f960 <npio2_hw>:
  40f960:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
  40f970:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
  40f980:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
  40f990:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
  40f9a0:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
  40f9b0:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
  40f9c0:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
  40f9d0:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

0040f9e0 <two_over_pi>:
  40f9e0:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
  40f9f0:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
  40fa00:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
  40fa10:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
  40fa20:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
  40fa30:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
  40fa40:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
  40fa50:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
  40fa60:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
  40fa70:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
  40fa80:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
  40fa90:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
  40faa0:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
  40fab0:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
  40fac0:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
  40fad0:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
  40fae0:	0060e27b 00c08c6b                       {.`.k...

0040fae8 <init_jk>:
  40fae8:	00000002 00000003 00000004 00000006     ................

0040faf8 <PIo2>:
  40faf8:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
  40fb08:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
  40fb18:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
  40fb28:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

0040fb38 <atanlo>:
  40fb38:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
  40fb48:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

0040fb58 <atanhi>:
  40fb58:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
  40fb68:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
  40fb78:	00000043                                C...

0040fb7c <_global_impure_ptr>:
  40fb7c:	20000130                                0.. 

0040fb80 <zeroes.7035>:
  40fb80:	30303030 30303030 30303030 30303030     0000000000000000
  40fb90:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  40fba0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  40fbb0:	00000000 33323130 37363534 62613938     ....0123456789ab
  40fbc0:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
  40fbd0:	00000030                                0...

0040fbd4 <blanks.7034>:
  40fbd4:	20202020 20202020 20202020 20202020                     
  40fbe4:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  40fbf4:	49534f50 00000058 0000002e              POSIX.......

0040fc00 <__mprec_tens>:
  40fc00:	00000000 3ff00000 00000000 40240000     .......?......$@
  40fc10:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40fc20:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40fc30:	00000000 412e8480 00000000 416312d0     .......A......cA
  40fc40:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40fc50:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40fc60:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40fc70:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40fc80:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40fc90:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40fca0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40fcb0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40fcc0:	79d99db4 44ea7843                       ...yCx.D

0040fcc8 <__mprec_bigtens>:
  40fcc8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40fcd8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40fce8:	7f73bf3c 75154fdd                       <.s..O.u

0040fcf0 <p05.5373>:
  40fcf0:	00000005 00000019 0000007d              ........}...

0040fcfc <_init>:
  40fcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40fcfe:	bf00      	nop
  40fd00:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40fd02:	bc08      	pop	{r3}
  40fd04:	469e      	mov	lr, r3
  40fd06:	4770      	bx	lr

0040fd08 <__init_array_start>:
  40fd08:	0040d321 	.word	0x0040d321

0040fd0c <__frame_dummy_init_array_entry>:
  40fd0c:	004000f1                                ..@.

0040fd10 <_fini>:
  40fd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40fd12:	bf00      	nop
  40fd14:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40fd16:	bc08      	pop	{r3}
  40fd18:	469e      	mov	lr, r3
  40fd1a:	4770      	bx	lr

0040fd1c <__fini_array_start>:
  40fd1c:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b480      	push	{r7}
20000002:	b089      	sub	sp, #36	; 0x24
20000004:	af00      	add	r7, sp, #0
20000006:	60f8      	str	r0, [r7, #12]
20000008:	60b9      	str	r1, [r7, #8]
2000000a:	607a      	str	r2, [r7, #4]
2000000c:	603b      	str	r3, [r7, #0]
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
			READ_BUFF_ADDR0 : READ_BUFF_ADDR1);
#elif (SAM3S || SAM4S || SAM3N || SAM3U || SAM4E || SAM4N || SAM4C || SAMG || \
	   SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAMS70 || SAME70)
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
2000000e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
20000012:	61bb      	str	r3, [r7, #24]
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000014:	683b      	ldr	r3, [r7, #0]
20000016:	2b00      	cmp	r3, #0
20000018:	d101      	bne.n	2000001e <efc_perform_read_sequence+0x1e>
		return EFC_RC_INVALID;
2000001a:	2302      	movs	r3, #2
2000001c:	e03c      	b.n	20000098 <efc_perform_read_sequence+0x98>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000001e:	68fb      	ldr	r3, [r7, #12]
20000020:	681b      	ldr	r3, [r3, #0]
20000022:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000026:	68fb      	ldr	r3, [r7, #12]
20000028:	601a      	str	r2, [r3, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000002a:	68bb      	ldr	r3, [r7, #8]
2000002c:	b2db      	uxtb	r3, r3
2000002e:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FMR |= (0x1u << 16);

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
20000032:	68fb      	ldr	r3, [r7, #12]
20000034:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000036:	68fb      	ldr	r3, [r7, #12]
20000038:	689b      	ldr	r3, [r3, #8]
2000003a:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000003c:	697b      	ldr	r3, [r7, #20]
2000003e:	f003 0301 	and.w	r3, r3, #1
20000042:	2b00      	cmp	r3, #0
20000044:	d1f7      	bne.n	20000036 <efc_perform_read_sequence+0x36>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000046:	2300      	movs	r3, #0
20000048:	61fb      	str	r3, [r7, #28]
2000004a:	e00c      	b.n	20000066 <efc_perform_read_sequence+0x66>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000004c:	69fb      	ldr	r3, [r7, #28]
2000004e:	009b      	lsls	r3, r3, #2
20000050:	683a      	ldr	r2, [r7, #0]
20000052:	4413      	add	r3, r2
20000054:	69fa      	ldr	r2, [r7, #28]
20000056:	0092      	lsls	r2, r2, #2
20000058:	69b9      	ldr	r1, [r7, #24]
2000005a:	440a      	add	r2, r1
2000005c:	6812      	ldr	r2, [r2, #0]
2000005e:	601a      	str	r2, [r3, #0]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000060:	69fb      	ldr	r3, [r7, #28]
20000062:	3301      	adds	r3, #1
20000064:	61fb      	str	r3, [r7, #28]
20000066:	69fa      	ldr	r2, [r7, #28]
20000068:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000006a:	429a      	cmp	r2, r3
2000006c:	d3ee      	bcc.n	2000004c <efc_perform_read_sequence+0x4c>
	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	b2db      	uxtb	r3, r3

	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
20000072:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
	}

	/* To stop the read mode */
	p_efc->EEFC_FCR =
20000076:	68fb      	ldr	r3, [r7, #12]
20000078:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000007a:	68fb      	ldr	r3, [r7, #12]
2000007c:	689b      	ldr	r3, [r3, #8]
2000007e:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000080:	697b      	ldr	r3, [r7, #20]
20000082:	f003 0301 	and.w	r3, r3, #1
20000086:	2b00      	cmp	r3, #0
20000088:	d0f7      	beq.n	2000007a <efc_perform_read_sequence+0x7a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	681b      	ldr	r3, [r3, #0]
2000008e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
20000092:	68fb      	ldr	r3, [r7, #12]
20000094:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
20000096:	2300      	movs	r3, #0
}
20000098:	4618      	mov	r0, r3
2000009a:	3724      	adds	r7, #36	; 0x24
2000009c:	46bd      	mov	sp, r7
2000009e:	bc80      	pop	{r7}
200000a0:	4770      	bx	lr
200000a2:	bf00      	nop

200000a4 <efc_write_fmr>:
 * \param ul_fmr Value of mode register
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200000a4:	b480      	push	{r7}
200000a6:	b083      	sub	sp, #12
200000a8:	af00      	add	r7, sp, #0
200000aa:	6078      	str	r0, [r7, #4]
200000ac:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200000ae:	687b      	ldr	r3, [r7, #4]
200000b0:	683a      	ldr	r2, [r7, #0]
200000b2:	601a      	str	r2, [r3, #0]
}
200000b4:	bf00      	nop
200000b6:	370c      	adds	r7, #12
200000b8:	46bd      	mov	sp, r7
200000ba:	bc80      	pop	{r7}
200000bc:	4770      	bx	lr
200000be:	bf00      	nop

200000c0 <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200000c0:	b480      	push	{r7}
200000c2:	b085      	sub	sp, #20
200000c4:	af00      	add	r7, sp, #0
200000c6:	6078      	str	r0, [r7, #4]
200000c8:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200000ca:	687b      	ldr	r3, [r7, #4]
200000cc:	683a      	ldr	r2, [r7, #0]
200000ce:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200000d0:	687b      	ldr	r3, [r7, #4]
200000d2:	689b      	ldr	r3, [r3, #8]
200000d4:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200000d6:	68fb      	ldr	r3, [r7, #12]
200000d8:	f003 0301 	and.w	r3, r3, #1
200000dc:	2b00      	cmp	r3, #0
200000de:	d0f7      	beq.n	200000d0 <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200000e0:	68fb      	ldr	r3, [r7, #12]
200000e2:	f003 030e 	and.w	r3, r3, #14
}
200000e6:	4618      	mov	r0, r3
200000e8:	3714      	adds	r7, #20
200000ea:	46bd      	mov	sp, r7
200000ec:	bc80      	pop	{r7}
200000ee:	4770      	bx	lr

200000f0 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
200000f0:	f3bf 8f5f 	dmb	sy
200000f4:	3801      	subs	r0, #1
200000f6:	d1fb      	bne.n	200000f0 <portable_delay_cycles>
200000f8:	4770      	bx	lr
200000fa:	bf00      	nop

200000fc <lat>:
200000fc:	ba88 418b                                   ...A

20000100 <lon>:
20000100:	e153 429c                                   S..B

20000104 <timeZone>:
20000104:	0000 40b0                                   ...@

20000108 <dist>:
20000108:	0000 40a0                                   ...@

2000010c <width>:
2000010c:	0000 4000                                   ...@

20000110 <pvAngleRng>:
20000110:	0000 422c                                   ..,B

20000114 <g_interrupt_enabled>:
20000114:	0001 0000                                   ....

20000118 <SystemCoreClock>:
20000118:	0900 003d                                   ..=.

2000011c <uxCriticalNesting>:
2000011c:	aaaa aaaa                                   ....

20000120 <xFreeBytesRemaining>:
20000120:	2000 0000                                   . ..

20000124 <xNextTaskUnblockTime>:
20000124:	ffff ffff                                   ....

20000128 <slaveAddr>:
20000128:	0101                                             .

20000129 <__fdlib_version>:
20000129:	0001 0000 0000 0000                              .......

20000130 <impure_data>:
20000130:	0000 0000 041c 2000 0484 2000 04ec 2000     ....... ... ... 
	...
20000164:	fb78 0040 0000 0000 0000 0000 0000 0000     x.@.............
	...
200001d8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200001e8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000558 <_impure_ptr>:
20000558:	0130 2000                                   0.. 

2000055c <lconv>:
2000055c:	fbfc 0040 fbb0 0040 fbb0 0040 fbb0 0040     ..@...@...@...@.
2000056c:	fbb0 0040 fbb0 0040 fbb0 0040 fbb0 0040     ..@...@...@...@.
2000057c:	fbb0 0040 fbb0 0040 ffff ffff ffff ffff     ..@...@.........
2000058c:	ffff ffff ffff 0000                         ........

20000594 <__malloc_av_>:
	...
2000059c:	0594 2000 0594 2000 059c 2000 059c 2000     ... ... ... ... 
200005ac:	05a4 2000 05a4 2000 05ac 2000 05ac 2000     ... ... ... ... 
200005bc:	05b4 2000 05b4 2000 05bc 2000 05bc 2000     ... ... ... ... 
200005cc:	05c4 2000 05c4 2000 05cc 2000 05cc 2000     ... ... ... ... 
200005dc:	05d4 2000 05d4 2000 05dc 2000 05dc 2000     ... ... ... ... 
200005ec:	05e4 2000 05e4 2000 05ec 2000 05ec 2000     ... ... ... ... 
200005fc:	05f4 2000 05f4 2000 05fc 2000 05fc 2000     ... ... ... ... 
2000060c:	0604 2000 0604 2000 060c 2000 060c 2000     ... ... ... ... 
2000061c:	0614 2000 0614 2000 061c 2000 061c 2000     ... ... ... ... 
2000062c:	0624 2000 0624 2000 062c 2000 062c 2000     $.. $.. ,.. ,.. 
2000063c:	0634 2000 0634 2000 063c 2000 063c 2000     4.. 4.. <.. <.. 
2000064c:	0644 2000 0644 2000 064c 2000 064c 2000     D.. D.. L.. L.. 
2000065c:	0654 2000 0654 2000 065c 2000 065c 2000     T.. T.. \.. \.. 
2000066c:	0664 2000 0664 2000 066c 2000 066c 2000     d.. d.. l.. l.. 
2000067c:	0674 2000 0674 2000 067c 2000 067c 2000     t.. t.. |.. |.. 
2000068c:	0684 2000 0684 2000 068c 2000 068c 2000     ... ... ... ... 
2000069c:	0694 2000 0694 2000 069c 2000 069c 2000     ... ... ... ... 
200006ac:	06a4 2000 06a4 2000 06ac 2000 06ac 2000     ... ... ... ... 
200006bc:	06b4 2000 06b4 2000 06bc 2000 06bc 2000     ... ... ... ... 
200006cc:	06c4 2000 06c4 2000 06cc 2000 06cc 2000     ... ... ... ... 
200006dc:	06d4 2000 06d4 2000 06dc 2000 06dc 2000     ... ... ... ... 
200006ec:	06e4 2000 06e4 2000 06ec 2000 06ec 2000     ... ... ... ... 
200006fc:	06f4 2000 06f4 2000 06fc 2000 06fc 2000     ... ... ... ... 
2000070c:	0704 2000 0704 2000 070c 2000 070c 2000     ... ... ... ... 
2000071c:	0714 2000 0714 2000 071c 2000 071c 2000     ... ... ... ... 
2000072c:	0724 2000 0724 2000 072c 2000 072c 2000     $.. $.. ,.. ,.. 
2000073c:	0734 2000 0734 2000 073c 2000 073c 2000     4.. 4.. <.. <.. 
2000074c:	0744 2000 0744 2000 074c 2000 074c 2000     D.. D.. L.. L.. 
2000075c:	0754 2000 0754 2000 075c 2000 075c 2000     T.. T.. \.. \.. 
2000076c:	0764 2000 0764 2000 076c 2000 076c 2000     d.. d.. l.. l.. 
2000077c:	0774 2000 0774 2000 077c 2000 077c 2000     t.. t.. |.. |.. 
2000078c:	0784 2000 0784 2000 078c 2000 078c 2000     ... ... ... ... 
2000079c:	0794 2000 0794 2000 079c 2000 079c 2000     ... ... ... ... 
200007ac:	07a4 2000 07a4 2000 07ac 2000 07ac 2000     ... ... ... ... 
200007bc:	07b4 2000 07b4 2000 07bc 2000 07bc 2000     ... ... ... ... 
200007cc:	07c4 2000 07c4 2000 07cc 2000 07cc 2000     ... ... ... ... 
200007dc:	07d4 2000 07d4 2000 07dc 2000 07dc 2000     ... ... ... ... 
200007ec:	07e4 2000 07e4 2000 07ec 2000 07ec 2000     ... ... ... ... 
200007fc:	07f4 2000 07f4 2000 07fc 2000 07fc 2000     ... ... ... ... 
2000080c:	0804 2000 0804 2000 080c 2000 080c 2000     ... ... ... ... 
2000081c:	0814 2000 0814 2000 081c 2000 081c 2000     ... ... ... ... 
2000082c:	0824 2000 0824 2000 082c 2000 082c 2000     $.. $.. ,.. ,.. 
2000083c:	0834 2000 0834 2000 083c 2000 083c 2000     4.. 4.. <.. <.. 
2000084c:	0844 2000 0844 2000 084c 2000 084c 2000     D.. D.. L.. L.. 
2000085c:	0854 2000 0854 2000 085c 2000 085c 2000     T.. T.. \.. \.. 
2000086c:	0864 2000 0864 2000 086c 2000 086c 2000     d.. d.. l.. l.. 
2000087c:	0874 2000 0874 2000 087c 2000 087c 2000     t.. t.. |.. |.. 
2000088c:	0884 2000 0884 2000 088c 2000 088c 2000     ... ... ... ... 
2000089c:	0894 2000 0894 2000 089c 2000 089c 2000     ... ... ... ... 
200008ac:	08a4 2000 08a4 2000 08ac 2000 08ac 2000     ... ... ... ... 
200008bc:	08b4 2000 08b4 2000 08bc 2000 08bc 2000     ... ... ... ... 
200008cc:	08c4 2000 08c4 2000 08cc 2000 08cc 2000     ... ... ... ... 
200008dc:	08d4 2000 08d4 2000 08dc 2000 08dc 2000     ... ... ... ... 
200008ec:	08e4 2000 08e4 2000 08ec 2000 08ec 2000     ... ... ... ... 
200008fc:	08f4 2000 08f4 2000 08fc 2000 08fc 2000     ... ... ... ... 
2000090c:	0904 2000 0904 2000 090c 2000 090c 2000     ... ... ... ... 
2000091c:	0914 2000 0914 2000 091c 2000 091c 2000     ... ... ... ... 
2000092c:	0924 2000 0924 2000 092c 2000 092c 2000     $.. $.. ,.. ,.. 
2000093c:	0934 2000 0934 2000 093c 2000 093c 2000     4.. 4.. <.. <.. 
2000094c:	0944 2000 0944 2000 094c 2000 094c 2000     D.. D.. L.. L.. 
2000095c:	0954 2000 0954 2000 095c 2000 095c 2000     T.. T.. \.. \.. 
2000096c:	0964 2000 0964 2000 096c 2000 096c 2000     d.. d.. l.. l.. 
2000097c:	0974 2000 0974 2000 097c 2000 097c 2000     t.. t.. |.. |.. 
2000098c:	0984 2000 0984 2000 098c 2000 098c 2000     ... ... ... ... 

2000099c <__malloc_trim_threshold>:
2000099c:	0000 0002                                   ....

200009a0 <__malloc_sbrk_base>:
200009a0:	ffff ffff                                   ....
