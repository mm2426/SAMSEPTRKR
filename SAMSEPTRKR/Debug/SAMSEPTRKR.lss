
SAMSEPTRKR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000bf84  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040bf84  0040bf84  0001bf84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000474  20000000  0040bf8c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000022cc  20000478  0040c408  00020478  2**3
                  ALLOC
  4 .stack        00003004  20002744  0040e6d4  00020478  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002049e  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000e7d3  00000000  00000000  000204f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002a75  00000000  00000000  0002ecca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00008d47  00000000  00000000  0003173f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000010a8  00000000  00000000  0003a486  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ef8  00000000  00000000  0003b52e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000a18d  00000000  00000000  0003c426  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000162b4  00000000  00000000  000465b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00053c4b  00000000  00000000  0005c867  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004a40  00000000  00000000  000b04b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20005748 	.word	0x20005748
  400004:	00405019 	.word	0x00405019
  400008:	004050e1 	.word	0x004050e1
  40000c:	004050e1 	.word	0x004050e1
  400010:	004050e1 	.word	0x004050e1
  400014:	004050e1 	.word	0x004050e1
  400018:	004050e1 	.word	0x004050e1
	...
  40002c:	00405579 	.word	0x00405579
  400030:	004050e1 	.word	0x004050e1
  400034:	00000000 	.word	0x00000000
  400038:	00405671 	.word	0x00405671
  40003c:	004056b1 	.word	0x004056b1
  400040:	004050e1 	.word	0x004050e1
  400044:	004050e1 	.word	0x004050e1
  400048:	004050e1 	.word	0x004050e1
  40004c:	004050e1 	.word	0x004050e1
  400050:	004050e1 	.word	0x004050e1
  400054:	004050e1 	.word	0x004050e1
  400058:	004050e1 	.word	0x004050e1
  40005c:	00000000 	.word	0x00000000
  400060:	004050e1 	.word	0x004050e1
  400064:	004050e1 	.word	0x004050e1
  400068:	00000000 	.word	0x00000000
  40006c:	00404c99 	.word	0x00404c99
  400070:	00404cb1 	.word	0x00404cb1
  400074:	00000000 	.word	0x00000000
  400078:	00403691 	.word	0x00403691
  40007c:	004036a5 	.word	0x004036a5
	...
  400088:	004050e1 	.word	0x004050e1
  40008c:	0040338d 	.word	0x0040338d
  400090:	004033a1 	.word	0x004033a1
  400094:	004050e1 	.word	0x004050e1
  400098:	004050e1 	.word	0x004050e1
  40009c:	004050e1 	.word	0x004050e1
  4000a0:	004050e1 	.word	0x004050e1
  4000a4:	004050e1 	.word	0x004050e1
	...
  4000b4:	004050e1 	.word	0x004050e1
  4000b8:	004050e1 	.word	0x004050e1
  4000bc:	004050e1 	.word	0x004050e1
  4000c0:	004050e1 	.word	0x004050e1
  4000c4:	004050e1 	.word	0x004050e1
  4000c8:	004050e1 	.word	0x004050e1

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000478 	.word	0x20000478
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040bf8c 	.word	0x0040bf8c

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	2000047c 	.word	0x2000047c
  40011c:	0040bf8c 	.word	0x0040bf8c
  400120:	0040bf8c 	.word	0x0040bf8c
  400124:	00000000 	.word	0x00000000

00400128 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400128:	b480      	push	{r7}
  40012a:	b083      	sub	sp, #12
  40012c:	af00      	add	r7, sp, #0
  40012e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400130:	687b      	ldr	r3, [r7, #4]
  400132:	2b07      	cmp	r3, #7
  400134:	d825      	bhi.n	400182 <osc_get_rate+0x5a>
  400136:	a201      	add	r2, pc, #4	; (adr r2, 40013c <osc_get_rate+0x14>)
  400138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40013c:	0040015d 	.word	0x0040015d
  400140:	00400163 	.word	0x00400163
  400144:	00400169 	.word	0x00400169
  400148:	0040016f 	.word	0x0040016f
  40014c:	00400173 	.word	0x00400173
  400150:	00400177 	.word	0x00400177
  400154:	0040017b 	.word	0x0040017b
  400158:	0040017f 	.word	0x0040017f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40015c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400160:	e010      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400166:	e00d      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400168:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40016c:	e00a      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40016e:	4b08      	ldr	r3, [pc, #32]	; (400190 <osc_get_rate+0x68>)
  400170:	e008      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400172:	4b08      	ldr	r3, [pc, #32]	; (400194 <osc_get_rate+0x6c>)
  400174:	e006      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400176:	4b08      	ldr	r3, [pc, #32]	; (400198 <osc_get_rate+0x70>)
  400178:	e004      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <osc_get_rate+0x70>)
  40017c:	e002      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40017e:	4b06      	ldr	r3, [pc, #24]	; (400198 <osc_get_rate+0x70>)
  400180:	e000      	b.n	400184 <osc_get_rate+0x5c>
	}

	return 0;
  400182:	2300      	movs	r3, #0
}
  400184:	4618      	mov	r0, r3
  400186:	370c      	adds	r7, #12
  400188:	46bd      	mov	sp, r7
  40018a:	bc80      	pop	{r7}
  40018c:	4770      	bx	lr
  40018e:	bf00      	nop
  400190:	003d0900 	.word	0x003d0900
  400194:	007a1200 	.word	0x007a1200
  400198:	00b71b00 	.word	0x00b71b00

0040019c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40019c:	b580      	push	{r7, lr}
  40019e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4001a0:	2006      	movs	r0, #6
  4001a2:	4b04      	ldr	r3, [pc, #16]	; (4001b4 <sysclk_get_main_hz+0x18>)
  4001a4:	4798      	blx	r3
  4001a6:	4602      	mov	r2, r0
  4001a8:	4613      	mov	r3, r2
  4001aa:	009b      	lsls	r3, r3, #2
  4001ac:	4413      	add	r3, r2
  4001ae:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4001b0:	4618      	mov	r0, r3
  4001b2:	bd80      	pop	{r7, pc}
  4001b4:	00400129 	.word	0x00400129

004001b8 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4001b8:	b580      	push	{r7, lr}
  4001ba:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4001bc:	4b02      	ldr	r3, [pc, #8]	; (4001c8 <sysclk_get_cpu_hz+0x10>)
  4001be:	4798      	blx	r3
  4001c0:	4603      	mov	r3, r0
  4001c2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4001c4:	4618      	mov	r0, r3
  4001c6:	bd80      	pop	{r7, pc}
  4001c8:	0040019d 	.word	0x0040019d

004001cc <WriteEEPROM>:
	 /*
	  * 2 LSBs of chipAddr (A1,A0) are the memory addresses (A9, A8).
	  * Write operation takes place in pages of 16Bytes only. Any data more than that is wrapped around.
	  */
	 void WriteEEPROM(Twi * Port, uint8_t chipAddr, uint16_t memAddr, uint8_t *dPkt, uint8_t dLen)
	 {
  4001cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4001ce:	b08b      	sub	sp, #44	; 0x2c
  4001d0:	af00      	add	r7, sp, #0
  4001d2:	60f8      	str	r0, [r7, #12]
  4001d4:	607b      	str	r3, [r7, #4]
  4001d6:	460b      	mov	r3, r1
  4001d8:	72fb      	strb	r3, [r7, #11]
  4001da:	4613      	mov	r3, r2
  4001dc:	813b      	strh	r3, [r7, #8]
		 twi_packet_t pkt;
		 /* Set Device Address */
		 pkt.chip = (chipAddr&0xFC);
  4001de:	7afb      	ldrb	r3, [r7, #11]
  4001e0:	f023 0303 	bic.w	r3, r3, #3
  4001e4:	b2db      	uxtb	r3, r3
  4001e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		 pkt.chip |= ((memAddr>>8)&0x03);
  4001ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
  4001ee:	b25a      	sxtb	r2, r3
  4001f0:	893b      	ldrh	r3, [r7, #8]
  4001f2:	0a1b      	lsrs	r3, r3, #8
  4001f4:	b29b      	uxth	r3, r3
  4001f6:	b25b      	sxtb	r3, r3
  4001f8:	f003 0303 	and.w	r3, r3, #3
  4001fc:	b25b      	sxtb	r3, r3
  4001fe:	4313      	orrs	r3, r2
  400200:	b25b      	sxtb	r3, r3
  400202:	b2db      	uxtb	r3, r3
  400204:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		 /* Page Number */
		 pkt.addr[0] = memAddr;
  400208:	893b      	ldrh	r3, [r7, #8]
  40020a:	b2db      	uxtb	r3, r3
  40020c:	753b      	strb	r3, [r7, #20]
		 /* No Address Bytes to be clocked */
		 pkt.addr_length = 1;
  40020e:	2301      	movs	r3, #1
  400210:	61bb      	str	r3, [r7, #24]
		 /* Address of buffer where recvd data is to be stored */
		 pkt.buffer = dPkt;
  400212:	687b      	ldr	r3, [r7, #4]
  400214:	61fb      	str	r3, [r7, #28]
		 /* No of bytes to read */
		 pkt.length = dLen;
  400216:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
  40021a:	623b      	str	r3, [r7, #32]
		 twi_master_write(Port, &pkt);
  40021c:	f107 0314 	add.w	r3, r7, #20
  400220:	4619      	mov	r1, r3
  400222:	68f8      	ldr	r0, [r7, #12]
  400224:	4b15      	ldr	r3, [pc, #84]	; (40027c <WriteEEPROM+0xb0>)
  400226:	4798      	blx	r3
		 delay_ms(5);
  400228:	4b15      	ldr	r3, [pc, #84]	; (400280 <WriteEEPROM+0xb4>)
  40022a:	4798      	blx	r3
  40022c:	4603      	mov	r3, r0
  40022e:	4619      	mov	r1, r3
  400230:	f04f 0200 	mov.w	r2, #0
  400234:	460b      	mov	r3, r1
  400236:	4614      	mov	r4, r2
  400238:	00a6      	lsls	r6, r4, #2
  40023a:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  40023e:	009d      	lsls	r5, r3, #2
  400240:	462b      	mov	r3, r5
  400242:	4634      	mov	r4, r6
  400244:	185b      	adds	r3, r3, r1
  400246:	eb44 0402 	adc.w	r4, r4, r2
  40024a:	f243 61af 	movw	r1, #13999	; 0x36af
  40024e:	f04f 0200 	mov.w	r2, #0
  400252:	185d      	adds	r5, r3, r1
  400254:	eb44 0602 	adc.w	r6, r4, r2
  400258:	4628      	mov	r0, r5
  40025a:	4631      	mov	r1, r6
  40025c:	4c09      	ldr	r4, [pc, #36]	; (400284 <WriteEEPROM+0xb8>)
  40025e:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400262:	f04f 0300 	mov.w	r3, #0
  400266:	47a0      	blx	r4
  400268:	4603      	mov	r3, r0
  40026a:	460c      	mov	r4, r1
  40026c:	4618      	mov	r0, r3
  40026e:	4b06      	ldr	r3, [pc, #24]	; (400288 <WriteEEPROM+0xbc>)
  400270:	4798      	blx	r3
	 }
  400272:	bf00      	nop
  400274:	372c      	adds	r7, #44	; 0x2c
  400276:	46bd      	mov	sp, r7
  400278:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40027a:	bf00      	nop
  40027c:	00403a7d 	.word	0x00403a7d
  400280:	004001b9 	.word	0x004001b9
  400284:	0040b5b1 	.word	0x0040b5b1
  400288:	20000001 	.word	0x20000001

0040028c <ReadEEPROM>:
	 /*
	  * 2 LSBs of chipAddr (A1,A0) are the memory addresses (A9, A8).
	  * Read operation does not wrap around on page boundaries.
	  */
	 void ReadEEPROM(Twi * Port, uint8_t chipAddr, uint16_t memAddr, uint8_t *dPkt, uint16_t dLen)
	 {
  40028c:	b580      	push	{r7, lr}
  40028e:	b08a      	sub	sp, #40	; 0x28
  400290:	af00      	add	r7, sp, #0
  400292:	60f8      	str	r0, [r7, #12]
  400294:	607b      	str	r3, [r7, #4]
  400296:	460b      	mov	r3, r1
  400298:	72fb      	strb	r3, [r7, #11]
  40029a:	4613      	mov	r3, r2
  40029c:	813b      	strh	r3, [r7, #8]
		 twi_packet_t pkt;
		 /* Set Device Address */
		 pkt.chip = (chipAddr&0xFC);
  40029e:	7afb      	ldrb	r3, [r7, #11]
  4002a0:	f023 0303 	bic.w	r3, r3, #3
  4002a4:	b2db      	uxtb	r3, r3
  4002a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		 pkt.chip |= ((memAddr>>8)&0x03);
  4002aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
  4002ae:	b25a      	sxtb	r2, r3
  4002b0:	893b      	ldrh	r3, [r7, #8]
  4002b2:	0a1b      	lsrs	r3, r3, #8
  4002b4:	b29b      	uxth	r3, r3
  4002b6:	b25b      	sxtb	r3, r3
  4002b8:	f003 0303 	and.w	r3, r3, #3
  4002bc:	b25b      	sxtb	r3, r3
  4002be:	4313      	orrs	r3, r2
  4002c0:	b25b      	sxtb	r3, r3
  4002c2:	b2db      	uxtb	r3, r3
  4002c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		 /* Page Number */
		 pkt.addr[0] = memAddr;
  4002c8:	893b      	ldrh	r3, [r7, #8]
  4002ca:	b2db      	uxtb	r3, r3
  4002cc:	753b      	strb	r3, [r7, #20]
		 /* No Address Bytes to be clocked */
		 pkt.addr_length = 1;
  4002ce:	2301      	movs	r3, #1
  4002d0:	61bb      	str	r3, [r7, #24]
		 /* Address of buffer where recvd data is to be stored */
		 pkt.buffer = dPkt;
  4002d2:	687b      	ldr	r3, [r7, #4]
  4002d4:	61fb      	str	r3, [r7, #28]
		 /* No of bytes to read */
		 pkt.length = dLen;
  4002d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
  4002d8:	623b      	str	r3, [r7, #32]
		 twi_master_read(Port, &pkt);
  4002da:	f107 0314 	add.w	r3, r7, #20
  4002de:	4619      	mov	r1, r3
  4002e0:	68f8      	ldr	r0, [r7, #12]
  4002e2:	4b03      	ldr	r3, [pc, #12]	; (4002f0 <ReadEEPROM+0x64>)
  4002e4:	4798      	blx	r3
	 }
  4002e6:	bf00      	nop
  4002e8:	3728      	adds	r7, #40	; 0x28
  4002ea:	46bd      	mov	sp, r7
  4002ec:	bd80      	pop	{r7, pc}
  4002ee:	bf00      	nop
  4002f0:	00403971 	.word	0x00403971

004002f4 <DSGetTime>:

#include "DS3231.h"

#ifndef DS3231_USE_RTOS_API
	void DSGetTime(Twi *port, uint16_t *recvTime)
	{
  4002f4:	b580      	push	{r7, lr}
  4002f6:	b088      	sub	sp, #32
  4002f8:	af00      	add	r7, sp, #0
  4002fa:	6078      	str	r0, [r7, #4]
  4002fc:	6039      	str	r1, [r7, #0]
		uint8_t buff[3];
		twi_packet_t pkt;
	
		pkt.chip = DS_ADDR;
  4002fe:	2368      	movs	r3, #104	; 0x68
  400300:	763b      	strb	r3, [r7, #24]
		pkt.addr[0] = DS_REG_SEC;
  400302:	2300      	movs	r3, #0
  400304:	723b      	strb	r3, [r7, #8]
		pkt.addr_length = 1;
  400306:	2301      	movs	r3, #1
  400308:	60fb      	str	r3, [r7, #12]
		pkt.buffer = buff;
  40030a:	f107 031c 	add.w	r3, r7, #28
  40030e:	613b      	str	r3, [r7, #16]
		pkt.length = 3;
  400310:	2303      	movs	r3, #3
  400312:	617b      	str	r3, [r7, #20]
		twi_master_read(port, &pkt);
  400314:	f107 0308 	add.w	r3, r7, #8
  400318:	4619      	mov	r1, r3
  40031a:	6878      	ldr	r0, [r7, #4]
  40031c:	4b09      	ldr	r3, [pc, #36]	; (400344 <DSGetTime+0x50>)
  40031e:	4798      	blx	r3

		//SS
		recvTime[0] = buff[0];
  400320:	7f3b      	ldrb	r3, [r7, #28]
  400322:	b29a      	uxth	r2, r3
  400324:	683b      	ldr	r3, [r7, #0]
  400326:	801a      	strh	r2, [r3, #0]
		//MM
		recvTime[1] = buff[1];
  400328:	683b      	ldr	r3, [r7, #0]
  40032a:	3302      	adds	r3, #2
  40032c:	7f7a      	ldrb	r2, [r7, #29]
  40032e:	b292      	uxth	r2, r2
  400330:	801a      	strh	r2, [r3, #0]
		//HH
		recvTime[2] = buff[2];
  400332:	683b      	ldr	r3, [r7, #0]
  400334:	3304      	adds	r3, #4
  400336:	7fba      	ldrb	r2, [r7, #30]
  400338:	b292      	uxth	r2, r2
  40033a:	801a      	strh	r2, [r3, #0]
	}
  40033c:	bf00      	nop
  40033e:	3720      	adds	r7, #32
  400340:	46bd      	mov	sp, r7
  400342:	bd80      	pop	{r7, pc}
  400344:	00403971 	.word	0x00403971

00400348 <DSSetSecs>:
	{
		DSReadByte(port, DS_REG_SEC, (uint8_t *)ss);
	}

	void DSSetSecs(Twi *port, uint8_t ss)
	{
  400348:	b580      	push	{r7, lr}
  40034a:	b082      	sub	sp, #8
  40034c:	af00      	add	r7, sp, #0
  40034e:	6078      	str	r0, [r7, #4]
  400350:	460b      	mov	r3, r1
  400352:	70fb      	strb	r3, [r7, #3]
		DSWriteByte(port, DS_REG_SEC, ss);
  400354:	78fb      	ldrb	r3, [r7, #3]
  400356:	461a      	mov	r2, r3
  400358:	2100      	movs	r1, #0
  40035a:	6878      	ldr	r0, [r7, #4]
  40035c:	4b02      	ldr	r3, [pc, #8]	; (400368 <DSSetSecs+0x20>)
  40035e:	4798      	blx	r3
	}
  400360:	bf00      	nop
  400362:	3708      	adds	r7, #8
  400364:	46bd      	mov	sp, r7
  400366:	bd80      	pop	{r7, pc}
  400368:	00400515 	.word	0x00400515

0040036c <DSSetMins>:
	{
		DSReadByte(port, DS_REG_MIN, (uint8_t *)mm);
	}

	void DSSetMins(Twi *port, uint8_t mm)
	{
  40036c:	b580      	push	{r7, lr}
  40036e:	b082      	sub	sp, #8
  400370:	af00      	add	r7, sp, #0
  400372:	6078      	str	r0, [r7, #4]
  400374:	460b      	mov	r3, r1
  400376:	70fb      	strb	r3, [r7, #3]
		DSWriteByte(port, DS_REG_MIN, mm);
  400378:	78fb      	ldrb	r3, [r7, #3]
  40037a:	461a      	mov	r2, r3
  40037c:	2101      	movs	r1, #1
  40037e:	6878      	ldr	r0, [r7, #4]
  400380:	4b02      	ldr	r3, [pc, #8]	; (40038c <DSSetMins+0x20>)
  400382:	4798      	blx	r3
	}
  400384:	bf00      	nop
  400386:	3708      	adds	r7, #8
  400388:	46bd      	mov	sp, r7
  40038a:	bd80      	pop	{r7, pc}
  40038c:	00400515 	.word	0x00400515

00400390 <DSSetHrs>:
	{
		DSReadByte(port, DS_REG_HRS, (uint8_t *)hh);
	}

	void DSSetHrs(Twi *port, uint8_t hh)
	{
  400390:	b580      	push	{r7, lr}
  400392:	b082      	sub	sp, #8
  400394:	af00      	add	r7, sp, #0
  400396:	6078      	str	r0, [r7, #4]
  400398:	460b      	mov	r3, r1
  40039a:	70fb      	strb	r3, [r7, #3]
		DSWriteByte(port, DS_REG_HRS, hh);
  40039c:	78fb      	ldrb	r3, [r7, #3]
  40039e:	461a      	mov	r2, r3
  4003a0:	2102      	movs	r1, #2
  4003a2:	6878      	ldr	r0, [r7, #4]
  4003a4:	4b02      	ldr	r3, [pc, #8]	; (4003b0 <DSSetHrs+0x20>)
  4003a6:	4798      	blx	r3
	}
  4003a8:	bf00      	nop
  4003aa:	3708      	adds	r7, #8
  4003ac:	46bd      	mov	sp, r7
  4003ae:	bd80      	pop	{r7, pc}
  4003b0:	00400515 	.word	0x00400515

004003b4 <DSGetFullDate>:

	void DSGetFullDate(Twi *port, uint16_t *recvDate)
	{
  4003b4:	b580      	push	{r7, lr}
  4003b6:	b088      	sub	sp, #32
  4003b8:	af00      	add	r7, sp, #0
  4003ba:	6078      	str	r0, [r7, #4]
  4003bc:	6039      	str	r1, [r7, #0]
		uint8_t buff[4];
		twi_packet_t pkt;
    
		pkt.chip = DS_ADDR;
  4003be:	2368      	movs	r3, #104	; 0x68
  4003c0:	763b      	strb	r3, [r7, #24]
		pkt.addr[0] = DS_REG_DAY;
  4003c2:	2303      	movs	r3, #3
  4003c4:	723b      	strb	r3, [r7, #8]
		pkt.addr_length = 1;
  4003c6:	2301      	movs	r3, #1
  4003c8:	60fb      	str	r3, [r7, #12]
		pkt.buffer = buff;
  4003ca:	f107 031c 	add.w	r3, r7, #28
  4003ce:	613b      	str	r3, [r7, #16]
		pkt.length = 4;
  4003d0:	2304      	movs	r3, #4
  4003d2:	617b      	str	r3, [r7, #20]
		twi_master_read(port, &pkt);
  4003d4:	f107 0308 	add.w	r3, r7, #8
  4003d8:	4619      	mov	r1, r3
  4003da:	6878      	ldr	r0, [r7, #4]
  4003dc:	4b0c      	ldr	r3, [pc, #48]	; (400410 <DSGetFullDate+0x5c>)
  4003de:	4798      	blx	r3
		//DAY
		recvDate[0] = buff[0];
  4003e0:	7f3b      	ldrb	r3, [r7, #28]
  4003e2:	b29a      	uxth	r2, r3
  4003e4:	683b      	ldr	r3, [r7, #0]
  4003e6:	801a      	strh	r2, [r3, #0]
		//DD
		recvDate[1] = buff[1];
  4003e8:	683b      	ldr	r3, [r7, #0]
  4003ea:	3302      	adds	r3, #2
  4003ec:	7f7a      	ldrb	r2, [r7, #29]
  4003ee:	b292      	uxth	r2, r2
  4003f0:	801a      	strh	r2, [r3, #0]
		//MM
		recvDate[2] = buff[2];
  4003f2:	683b      	ldr	r3, [r7, #0]
  4003f4:	3304      	adds	r3, #4
  4003f6:	7fba      	ldrb	r2, [r7, #30]
  4003f8:	b292      	uxth	r2, r2
  4003fa:	801a      	strh	r2, [r3, #0]
		//YY
		recvDate[3] = buff[3];
  4003fc:	683b      	ldr	r3, [r7, #0]
  4003fe:	3306      	adds	r3, #6
  400400:	7ffa      	ldrb	r2, [r7, #31]
  400402:	b292      	uxth	r2, r2
  400404:	801a      	strh	r2, [r3, #0]
	}
  400406:	bf00      	nop
  400408:	3720      	adds	r7, #32
  40040a:	46bd      	mov	sp, r7
  40040c:	bd80      	pop	{r7, pc}
  40040e:	bf00      	nop
  400410:	00403971 	.word	0x00403971

00400414 <DSSetDay>:
	{
		DSReadByte(port, DS_REG_DAY, (uint8_t *)d);
	}

	void DSSetDay(Twi *port, uint8_t d)
	{
  400414:	b580      	push	{r7, lr}
  400416:	b082      	sub	sp, #8
  400418:	af00      	add	r7, sp, #0
  40041a:	6078      	str	r0, [r7, #4]
  40041c:	460b      	mov	r3, r1
  40041e:	70fb      	strb	r3, [r7, #3]
		DSWriteByte(port, DS_REG_DAY, d);
  400420:	78fb      	ldrb	r3, [r7, #3]
  400422:	461a      	mov	r2, r3
  400424:	2103      	movs	r1, #3
  400426:	6878      	ldr	r0, [r7, #4]
  400428:	4b02      	ldr	r3, [pc, #8]	; (400434 <DSSetDay+0x20>)
  40042a:	4798      	blx	r3
	}
  40042c:	bf00      	nop
  40042e:	3708      	adds	r7, #8
  400430:	46bd      	mov	sp, r7
  400432:	bd80      	pop	{r7, pc}
  400434:	00400515 	.word	0x00400515

00400438 <DSSetDate>:
	{
		DSReadByte(port, DS_REG_DAT, (uint8_t *)dd);
	}

	void DSSetDate(Twi *port, uint8_t dd)
	{
  400438:	b580      	push	{r7, lr}
  40043a:	b082      	sub	sp, #8
  40043c:	af00      	add	r7, sp, #0
  40043e:	6078      	str	r0, [r7, #4]
  400440:	460b      	mov	r3, r1
  400442:	70fb      	strb	r3, [r7, #3]
		DSWriteByte(port, DS_REG_DAT, dd);
  400444:	78fb      	ldrb	r3, [r7, #3]
  400446:	461a      	mov	r2, r3
  400448:	2104      	movs	r1, #4
  40044a:	6878      	ldr	r0, [r7, #4]
  40044c:	4b02      	ldr	r3, [pc, #8]	; (400458 <DSSetDate+0x20>)
  40044e:	4798      	blx	r3
	}
  400450:	bf00      	nop
  400452:	3708      	adds	r7, #8
  400454:	46bd      	mov	sp, r7
  400456:	bd80      	pop	{r7, pc}
  400458:	00400515 	.word	0x00400515

0040045c <DSSetMonth>:
	{
		DSReadByte(port, DS_REG_MON, (uint8_t *)mm);
	}

	void DSSetMonth(Twi *port, uint8_t mm)
	{
  40045c:	b580      	push	{r7, lr}
  40045e:	b082      	sub	sp, #8
  400460:	af00      	add	r7, sp, #0
  400462:	6078      	str	r0, [r7, #4]
  400464:	460b      	mov	r3, r1
  400466:	70fb      	strb	r3, [r7, #3]
		DSWriteByte(port, DS_REG_MON, mm);
  400468:	78fb      	ldrb	r3, [r7, #3]
  40046a:	461a      	mov	r2, r3
  40046c:	2105      	movs	r1, #5
  40046e:	6878      	ldr	r0, [r7, #4]
  400470:	4b02      	ldr	r3, [pc, #8]	; (40047c <DSSetMonth+0x20>)
  400472:	4798      	blx	r3
	}
  400474:	bf00      	nop
  400476:	3708      	adds	r7, #8
  400478:	46bd      	mov	sp, r7
  40047a:	bd80      	pop	{r7, pc}
  40047c:	00400515 	.word	0x00400515

00400480 <DSSetYear>:
	{
		DSReadByte(port, DS_REG_YRS, (uint8_t *)yy);
	}

	void DSSetYear(Twi *port, uint8_t yy)
	{
  400480:	b580      	push	{r7, lr}
  400482:	b082      	sub	sp, #8
  400484:	af00      	add	r7, sp, #0
  400486:	6078      	str	r0, [r7, #4]
  400488:	460b      	mov	r3, r1
  40048a:	70fb      	strb	r3, [r7, #3]
		DSWriteByte(port, DS_REG_YRS, yy);
  40048c:	78fb      	ldrb	r3, [r7, #3]
  40048e:	461a      	mov	r2, r3
  400490:	2106      	movs	r1, #6
  400492:	6878      	ldr	r0, [r7, #4]
  400494:	4b02      	ldr	r3, [pc, #8]	; (4004a0 <DSSetYear+0x20>)
  400496:	4798      	blx	r3
	}
  400498:	bf00      	nop
  40049a:	3708      	adds	r7, #8
  40049c:	46bd      	mov	sp, r7
  40049e:	bd80      	pop	{r7, pc}
  4004a0:	00400515 	.word	0x00400515

004004a4 <DSEnAL2>:
			DSWriteByte(port, DS_REG_CTRL, 0x04);
		}
	}

	void DSEnAL2(Twi *port, uint8_t en)
	{
  4004a4:	b580      	push	{r7, lr}
  4004a6:	b088      	sub	sp, #32
  4004a8:	af00      	add	r7, sp, #0
  4004aa:	6078      	str	r0, [r7, #4]
  4004ac:	460b      	mov	r3, r1
  4004ae:	70fb      	strb	r3, [r7, #3]
		uint8_t buff[3];
		twi_packet_t pkt;

		if(en)
  4004b0:	78fb      	ldrb	r3, [r7, #3]
  4004b2:	2b00      	cmp	r3, #0
  4004b4:	d021      	beq.n	4004fa <DSEnAL2+0x56>
		{
			pkt.chip = DS_ADDR;
  4004b6:	2368      	movs	r3, #104	; 0x68
  4004b8:	763b      	strb	r3, [r7, #24]
			pkt.addr[0] = DS_REG_AL2M;
  4004ba:	230b      	movs	r3, #11
  4004bc:	723b      	strb	r3, [r7, #8]
			pkt.addr_length = 1;
  4004be:	2301      	movs	r3, #1
  4004c0:	60fb      	str	r3, [r7, #12]
			pkt.buffer = buff;
  4004c2:	f107 031c 	add.w	r3, r7, #28
  4004c6:	613b      	str	r3, [r7, #16]
			pkt.length = 3;
  4004c8:	2303      	movs	r3, #3
  4004ca:	617b      	str	r3, [r7, #20]

			buff[0] = 0x80;
  4004cc:	2380      	movs	r3, #128	; 0x80
  4004ce:	773b      	strb	r3, [r7, #28]
			buff[1] = 0x80;
  4004d0:	2380      	movs	r3, #128	; 0x80
  4004d2:	777b      	strb	r3, [r7, #29]
			buff[2] = 0x80;
  4004d4:	2380      	movs	r3, #128	; 0x80
  4004d6:	77bb      	strb	r3, [r7, #30]

			//Set Alarm 2 for 1 min interrupt
			twi_master_write(port, &pkt);
  4004d8:	f107 0308 	add.w	r3, r7, #8
  4004dc:	4619      	mov	r1, r3
  4004de:	6878      	ldr	r0, [r7, #4]
  4004e0:	4b0a      	ldr	r3, [pc, #40]	; (40050c <DSEnAL2+0x68>)
  4004e2:	4798      	blx	r3
			//Write Enable Alarm Register
			DSWriteByte(port, DS_REG_CTRL, 0x06);
  4004e4:	2206      	movs	r2, #6
  4004e6:	210e      	movs	r1, #14
  4004e8:	6878      	ldr	r0, [r7, #4]
  4004ea:	4b09      	ldr	r3, [pc, #36]	; (400510 <DSEnAL2+0x6c>)
  4004ec:	4798      	blx	r3
			//Clear Status Reg
			DSWriteByte(port, DS_REG_STAT, 0x80);
  4004ee:	2280      	movs	r2, #128	; 0x80
  4004f0:	210f      	movs	r1, #15
  4004f2:	6878      	ldr	r0, [r7, #4]
  4004f4:	4b06      	ldr	r3, [pc, #24]	; (400510 <DSEnAL2+0x6c>)
  4004f6:	4798      	blx	r3
		else
		{
			//Write Disable Alarm Register
			DSWriteByte(port, DS_REG_CTRL, 0x04);
		}
	}
  4004f8:	e004      	b.n	400504 <DSEnAL2+0x60>
			DSWriteByte(port, DS_REG_STAT, 0x80);
		}
		else
		{
			//Write Disable Alarm Register
			DSWriteByte(port, DS_REG_CTRL, 0x04);
  4004fa:	2204      	movs	r2, #4
  4004fc:	210e      	movs	r1, #14
  4004fe:	6878      	ldr	r0, [r7, #4]
  400500:	4b03      	ldr	r3, [pc, #12]	; (400510 <DSEnAL2+0x6c>)
  400502:	4798      	blx	r3
		}
	}
  400504:	bf00      	nop
  400506:	3720      	adds	r7, #32
  400508:	46bd      	mov	sp, r7
  40050a:	bd80      	pop	{r7, pc}
  40050c:	00403a7d 	.word	0x00403a7d
  400510:	00400515 	.word	0x00400515

00400514 <DSWriteByte>:
		twi_master_read(port, &pkt);
		*temp = (((uint16_t)buff[0])<<8) | buff[1];
	}

	void DSWriteByte(Twi *port, uint8_t reg, uint8_t data)
	{
  400514:	b580      	push	{r7, lr}
  400516:	b088      	sub	sp, #32
  400518:	af00      	add	r7, sp, #0
  40051a:	6078      	str	r0, [r7, #4]
  40051c:	460b      	mov	r3, r1
  40051e:	70fb      	strb	r3, [r7, #3]
  400520:	4613      	mov	r3, r2
  400522:	70bb      	strb	r3, [r7, #2]
		twi_packet_t pkt;
    
		pkt.chip = DS_ADDR;
  400524:	2368      	movs	r3, #104	; 0x68
  400526:	773b      	strb	r3, [r7, #28]
		pkt.addr[0] = reg;
  400528:	78fb      	ldrb	r3, [r7, #3]
  40052a:	733b      	strb	r3, [r7, #12]
		pkt.addr_length = 1;
  40052c:	2301      	movs	r3, #1
  40052e:	613b      	str	r3, [r7, #16]
		pkt.buffer = &data;
  400530:	1cbb      	adds	r3, r7, #2
  400532:	617b      	str	r3, [r7, #20]
		pkt.length = 1;
  400534:	2301      	movs	r3, #1
  400536:	61bb      	str	r3, [r7, #24]
	
		twi_master_write(port, &pkt);
  400538:	f107 030c 	add.w	r3, r7, #12
  40053c:	4619      	mov	r1, r3
  40053e:	6878      	ldr	r0, [r7, #4]
  400540:	4b02      	ldr	r3, [pc, #8]	; (40054c <DSWriteByte+0x38>)
  400542:	4798      	blx	r3
	}
  400544:	bf00      	nop
  400546:	3720      	adds	r7, #32
  400548:	46bd      	mov	sp, r7
  40054a:	bd80      	pop	{r7, pc}
  40054c:	00403a7d 	.word	0x00403a7d

00400550 <DSReadByte>:

	void DSReadByte(Twi *port, uint8_t reg, uint8_t *recvData)
	{
  400550:	b580      	push	{r7, lr}
  400552:	b08a      	sub	sp, #40	; 0x28
  400554:	af00      	add	r7, sp, #0
  400556:	60f8      	str	r0, [r7, #12]
  400558:	460b      	mov	r3, r1
  40055a:	607a      	str	r2, [r7, #4]
  40055c:	72fb      	strb	r3, [r7, #11]
		twi_packet_t pkt;
    
		pkt.chip = DS_ADDR;
  40055e:	2368      	movs	r3, #104	; 0x68
  400560:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		pkt.addr[0] = reg;
  400564:	7afb      	ldrb	r3, [r7, #11]
  400566:	753b      	strb	r3, [r7, #20]
		pkt.addr_length = 1;
  400568:	2301      	movs	r3, #1
  40056a:	61bb      	str	r3, [r7, #24]
		pkt.buffer = recvData;
  40056c:	687b      	ldr	r3, [r7, #4]
  40056e:	61fb      	str	r3, [r7, #28]
		pkt.length = 1;
  400570:	2301      	movs	r3, #1
  400572:	623b      	str	r3, [r7, #32]
    
		twi_master_read(port, &pkt);
  400574:	f107 0314 	add.w	r3, r7, #20
  400578:	4619      	mov	r1, r3
  40057a:	68f8      	ldr	r0, [r7, #12]
  40057c:	4b02      	ldr	r3, [pc, #8]	; (400588 <DSReadByte+0x38>)
  40057e:	4798      	blx	r3
	}
  400580:	bf00      	nop
  400582:	3728      	adds	r7, #40	; 0x28
  400584:	46bd      	mov	sp, r7
  400586:	bd80      	pop	{r7, pc}
  400588:	00403971 	.word	0x00403971

0040058c <ICMInitialize>:

#include "ICM20648.h"

#ifndef ICM20648_USE_RTOS_API
	void ICMInitialize(Twi *port, uint8_t sla)
	{
  40058c:	b590      	push	{r4, r7, lr}
  40058e:	b083      	sub	sp, #12
  400590:	af00      	add	r7, sp, #0
  400592:	6078      	str	r0, [r7, #4]
  400594:	460b      	mov	r3, r1
  400596:	70fb      	strb	r3, [r7, #3]
		//Select USER Bank 0
		ICMWriteByte(port, sla,ICM_REG_BANK_SEL,0x00);
  400598:	78f9      	ldrb	r1, [r7, #3]
  40059a:	2300      	movs	r3, #0
  40059c:	227f      	movs	r2, #127	; 0x7f
  40059e:	6878      	ldr	r0, [r7, #4]
  4005a0:	4c11      	ldr	r4, [pc, #68]	; (4005e8 <ICMInitialize+0x5c>)
  4005a2:	47a0      	blx	r4
    
		//Auto Select Best Clock Source
		ICMWriteByte(port, sla,ICM_REG_PWR_MGMT1,0x01);
  4005a4:	78f9      	ldrb	r1, [r7, #3]
  4005a6:	2301      	movs	r3, #1
  4005a8:	2206      	movs	r2, #6
  4005aa:	6878      	ldr	r0, [r7, #4]
  4005ac:	4c0e      	ldr	r4, [pc, #56]	; (4005e8 <ICMInitialize+0x5c>)
  4005ae:	47a0      	blx	r4
    
		//Select USER Bank 2
		ICMWriteByte(port, sla,ICM_REG_BANK_SEL,0x20);
  4005b0:	78f9      	ldrb	r1, [r7, #3]
  4005b2:	2320      	movs	r3, #32
  4005b4:	227f      	movs	r2, #127	; 0x7f
  4005b6:	6878      	ldr	r0, [r7, #4]
  4005b8:	4c0b      	ldr	r4, [pc, #44]	; (4005e8 <ICMInitialize+0x5c>)
  4005ba:	47a0      	blx	r4
    
		//Accel Full Scale set to 2G
		//ICMWriteByte(sla,ICM_REG_ACC_CONFIG,0x00);
		//Full Scale = 2G, Enable DLP, Cutoff = 23Hz
		ICMWriteByte(port, sla,ICM_REG_ACC_CONFIG,0x31);
  4005bc:	78f9      	ldrb	r1, [r7, #3]
  4005be:	2331      	movs	r3, #49	; 0x31
  4005c0:	2214      	movs	r2, #20
  4005c2:	6878      	ldr	r0, [r7, #4]
  4005c4:	4c08      	ldr	r4, [pc, #32]	; (4005e8 <ICMInitialize+0x5c>)
  4005c6:	47a0      	blx	r4
    
		//Output Data Rate Set to 17.xx Hz
		ICMWriteByte(port, sla,ICM_REG_ACC_SMPLRT_DIV1,0x00);
  4005c8:	78f9      	ldrb	r1, [r7, #3]
  4005ca:	2300      	movs	r3, #0
  4005cc:	2210      	movs	r2, #16
  4005ce:	6878      	ldr	r0, [r7, #4]
  4005d0:	4c05      	ldr	r4, [pc, #20]	; (4005e8 <ICMInitialize+0x5c>)
  4005d2:	47a0      	blx	r4
		ICMWriteByte(port, sla,ICM_REG_ACC_SMPLRT_DIV2,0x3F);
  4005d4:	78f9      	ldrb	r1, [r7, #3]
  4005d6:	233f      	movs	r3, #63	; 0x3f
  4005d8:	2211      	movs	r2, #17
  4005da:	6878      	ldr	r0, [r7, #4]
  4005dc:	4c02      	ldr	r4, [pc, #8]	; (4005e8 <ICMInitialize+0x5c>)
  4005de:	47a0      	blx	r4
    
	}
  4005e0:	bf00      	nop
  4005e2:	370c      	adds	r7, #12
  4005e4:	46bd      	mov	sp, r7
  4005e6:	bd90      	pop	{r4, r7, pc}
  4005e8:	00400669 	.word	0x00400669

004005ec <ICMReadAccDataAll>:
		ICMReadByte(port, sla, ICM_REG_ACC_ZOUTH, &((uint8_t *)recvData)[1]);
		ICMReadByte(port, sla, ICM_REG_ACC_ZOUTL, &((uint8_t *)recvData)[0]);
	}

	void ICMReadAccDataAll(Twi *port, uint8_t sla, uint16_t *recvData)
	{
  4005ec:	b590      	push	{r4, r7, lr}
  4005ee:	b085      	sub	sp, #20
  4005f0:	af00      	add	r7, sp, #0
  4005f2:	60f8      	str	r0, [r7, #12]
  4005f4:	460b      	mov	r3, r1
  4005f6:	607a      	str	r2, [r7, #4]
  4005f8:	72fb      	strb	r3, [r7, #11]
		//Select USER Bank 0
		ICMWriteByte(port, sla,ICM_REG_BANK_SEL,0x00);
  4005fa:	7af9      	ldrb	r1, [r7, #11]
  4005fc:	2300      	movs	r3, #0
  4005fe:	227f      	movs	r2, #127	; 0x7f
  400600:	68f8      	ldr	r0, [r7, #12]
  400602:	4c17      	ldr	r4, [pc, #92]	; (400660 <ICMReadAccDataAll+0x74>)
  400604:	47a0      	blx	r4
    
		//Read ACC data
		ICMReadByte(port, sla, ICM_REG_ACC_XOUTH, &((uint8_t *)recvData)[1]);
  400606:	687b      	ldr	r3, [r7, #4]
  400608:	3301      	adds	r3, #1
  40060a:	7af9      	ldrb	r1, [r7, #11]
  40060c:	222d      	movs	r2, #45	; 0x2d
  40060e:	68f8      	ldr	r0, [r7, #12]
  400610:	4c14      	ldr	r4, [pc, #80]	; (400664 <ICMReadAccDataAll+0x78>)
  400612:	47a0      	blx	r4
		ICMReadByte(port, sla, ICM_REG_ACC_XOUTL, &((uint8_t *)recvData)[0]);
  400614:	7af9      	ldrb	r1, [r7, #11]
  400616:	687b      	ldr	r3, [r7, #4]
  400618:	222e      	movs	r2, #46	; 0x2e
  40061a:	68f8      	ldr	r0, [r7, #12]
  40061c:	4c11      	ldr	r4, [pc, #68]	; (400664 <ICMReadAccDataAll+0x78>)
  40061e:	47a0      	blx	r4
		ICMReadByte(port, sla, ICM_REG_ACC_YOUTH, &((uint8_t *)recvData)[3]);
  400620:	687b      	ldr	r3, [r7, #4]
  400622:	3303      	adds	r3, #3
  400624:	7af9      	ldrb	r1, [r7, #11]
  400626:	222f      	movs	r2, #47	; 0x2f
  400628:	68f8      	ldr	r0, [r7, #12]
  40062a:	4c0e      	ldr	r4, [pc, #56]	; (400664 <ICMReadAccDataAll+0x78>)
  40062c:	47a0      	blx	r4
		ICMReadByte(port, sla, ICM_REG_ACC_YOUTL, &((uint8_t *)recvData)[2]);
  40062e:	687b      	ldr	r3, [r7, #4]
  400630:	3302      	adds	r3, #2
  400632:	7af9      	ldrb	r1, [r7, #11]
  400634:	2230      	movs	r2, #48	; 0x30
  400636:	68f8      	ldr	r0, [r7, #12]
  400638:	4c0a      	ldr	r4, [pc, #40]	; (400664 <ICMReadAccDataAll+0x78>)
  40063a:	47a0      	blx	r4
		ICMReadByte(port, sla, ICM_REG_ACC_ZOUTH, &((uint8_t *)recvData)[5]);
  40063c:	687b      	ldr	r3, [r7, #4]
  40063e:	3305      	adds	r3, #5
  400640:	7af9      	ldrb	r1, [r7, #11]
  400642:	2231      	movs	r2, #49	; 0x31
  400644:	68f8      	ldr	r0, [r7, #12]
  400646:	4c07      	ldr	r4, [pc, #28]	; (400664 <ICMReadAccDataAll+0x78>)
  400648:	47a0      	blx	r4
		ICMReadByte(port, sla, ICM_REG_ACC_ZOUTL, &((uint8_t *)recvData)[4]);
  40064a:	687b      	ldr	r3, [r7, #4]
  40064c:	3304      	adds	r3, #4
  40064e:	7af9      	ldrb	r1, [r7, #11]
  400650:	2232      	movs	r2, #50	; 0x32
  400652:	68f8      	ldr	r0, [r7, #12]
  400654:	4c03      	ldr	r4, [pc, #12]	; (400664 <ICMReadAccDataAll+0x78>)
  400656:	47a0      	blx	r4
	}
  400658:	bf00      	nop
  40065a:	3714      	adds	r7, #20
  40065c:	46bd      	mov	sp, r7
  40065e:	bd90      	pop	{r4, r7, pc}
  400660:	00400669 	.word	0x00400669
  400664:	004006b1 	.word	0x004006b1

00400668 <ICMWriteByte>:

	void ICMWriteByte(Twi *port, uint8_t sla, uint8_t reg, uint8_t data)
	{
  400668:	b580      	push	{r7, lr}
  40066a:	b088      	sub	sp, #32
  40066c:	af00      	add	r7, sp, #0
  40066e:	6078      	str	r0, [r7, #4]
  400670:	4608      	mov	r0, r1
  400672:	4611      	mov	r1, r2
  400674:	461a      	mov	r2, r3
  400676:	4603      	mov	r3, r0
  400678:	70fb      	strb	r3, [r7, #3]
  40067a:	460b      	mov	r3, r1
  40067c:	70bb      	strb	r3, [r7, #2]
  40067e:	4613      	mov	r3, r2
  400680:	707b      	strb	r3, [r7, #1]
		twi_packet_t pkt;
    
		pkt.chip = sla;
  400682:	78fb      	ldrb	r3, [r7, #3]
  400684:	773b      	strb	r3, [r7, #28]
		pkt.addr[0] = reg;
  400686:	78bb      	ldrb	r3, [r7, #2]
  400688:	733b      	strb	r3, [r7, #12]
		pkt.addr_length = 1;
  40068a:	2301      	movs	r3, #1
  40068c:	613b      	str	r3, [r7, #16]
		pkt.buffer = &data;
  40068e:	1c7b      	adds	r3, r7, #1
  400690:	617b      	str	r3, [r7, #20]
		pkt.length = 1;
  400692:	2301      	movs	r3, #1
  400694:	61bb      	str	r3, [r7, #24]
    
		twi_master_write(port, &pkt);
  400696:	f107 030c 	add.w	r3, r7, #12
  40069a:	4619      	mov	r1, r3
  40069c:	6878      	ldr	r0, [r7, #4]
  40069e:	4b03      	ldr	r3, [pc, #12]	; (4006ac <ICMWriteByte+0x44>)
  4006a0:	4798      	blx	r3
	}
  4006a2:	bf00      	nop
  4006a4:	3720      	adds	r7, #32
  4006a6:	46bd      	mov	sp, r7
  4006a8:	bd80      	pop	{r7, pc}
  4006aa:	bf00      	nop
  4006ac:	00403a7d 	.word	0x00403a7d

004006b0 <ICMReadByte>:

	void ICMReadByte(Twi *port, uint8_t sla, uint8_t reg, uint8_t *recvData)
	{
  4006b0:	b580      	push	{r7, lr}
  4006b2:	b08a      	sub	sp, #40	; 0x28
  4006b4:	af00      	add	r7, sp, #0
  4006b6:	60f8      	str	r0, [r7, #12]
  4006b8:	607b      	str	r3, [r7, #4]
  4006ba:	460b      	mov	r3, r1
  4006bc:	72fb      	strb	r3, [r7, #11]
  4006be:	4613      	mov	r3, r2
  4006c0:	72bb      	strb	r3, [r7, #10]
		twi_packet_t pkt;
    
		pkt.chip = sla;
  4006c2:	7afb      	ldrb	r3, [r7, #11]
  4006c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		pkt.addr[0] = reg;
  4006c8:	7abb      	ldrb	r3, [r7, #10]
  4006ca:	753b      	strb	r3, [r7, #20]
		pkt.addr_length = 1;
  4006cc:	2301      	movs	r3, #1
  4006ce:	61bb      	str	r3, [r7, #24]
		pkt.buffer = recvData;
  4006d0:	687b      	ldr	r3, [r7, #4]
  4006d2:	61fb      	str	r3, [r7, #28]
		pkt.length = 1;
  4006d4:	2301      	movs	r3, #1
  4006d6:	623b      	str	r3, [r7, #32]
    
		twi_master_read(port, &pkt);
  4006d8:	f107 0314 	add.w	r3, r7, #20
  4006dc:	4619      	mov	r1, r3
  4006de:	68f8      	ldr	r0, [r7, #12]
  4006e0:	4b02      	ldr	r3, [pc, #8]	; (4006ec <ICMReadByte+0x3c>)
  4006e2:	4798      	blx	r3
	}
  4006e4:	bf00      	nop
  4006e6:	3728      	adds	r7, #40	; 0x28
  4006e8:	46bd      	mov	sp, r7
  4006ea:	bd80      	pop	{r7, pc}
  4006ec:	00403971 	.word	0x00403971

004006f0 <ParseMbusPkt>:
//Write function pointer
void (*writeFunc)(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len);

/* Modbus stack parser function */
void ParseMbusPkt(uint8_t slaveAddr, uint8_t *buff, uint8_t len, uint8_t *respBuff, uint8_t *respLen)
{
  4006f0:	b580      	push	{r7, lr}
  4006f2:	b08a      	sub	sp, #40	; 0x28
  4006f4:	af00      	add	r7, sp, #0
  4006f6:	60b9      	str	r1, [r7, #8]
  4006f8:	607b      	str	r3, [r7, #4]
  4006fa:	4603      	mov	r3, r0
  4006fc:	73fb      	strb	r3, [r7, #15]
  4006fe:	4613      	mov	r3, r2
  400700:	73bb      	strb	r3, [r7, #14]
	 uint16_t crc = 0, recvCrc = 0;
  400702:	2300      	movs	r3, #0
  400704:	83fb      	strh	r3, [r7, #30]
  400706:	2300      	movs	r3, #0
  400708:	83bb      	strh	r3, [r7, #28]
	 uint16_t regAddr = 0, numReg = 0;
  40070a:	2300      	movs	r3, #0
  40070c:	837b      	strh	r3, [r7, #26]
  40070e:	2300      	movs	r3, #0
  400710:	833b      	strh	r3, [r7, #24]
	 uint16_t regVal = 0;
  400712:	2300      	movs	r3, #0
  400714:	84fb      	strh	r3, [r7, #38]	; 0x26
	 uint8_t fCode = 0, genErrRsp = 0;
  400716:	2300      	movs	r3, #0
  400718:	75fb      	strb	r3, [r7, #23]
  40071a:	2300      	movs	r3, #0
  40071c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	 uint8_t expFuncCode = 0, expCode = 0;
  400720:	2300      	movs	r3, #0
  400722:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  400726:	2300      	movs	r3, #0
  400728:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	 uint8_t i = 0, ind = 0;
  40072c:	2300      	movs	r3, #0
  40072e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  400732:	2300      	movs	r3, #0
  400734:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	 
	 /* Self Addr recvd or Broadcast Addr = 0 recvd */
	 if(buff[0]==slaveAddr||buff[0]==0)
  400738:	68bb      	ldr	r3, [r7, #8]
  40073a:	781b      	ldrb	r3, [r3, #0]
  40073c:	7bfa      	ldrb	r2, [r7, #15]
  40073e:	429a      	cmp	r2, r3
  400740:	d004      	beq.n	40074c <ParseMbusPkt+0x5c>
  400742:	68bb      	ldr	r3, [r7, #8]
  400744:	781b      	ldrb	r3, [r3, #0]
  400746:	2b00      	cmp	r3, #0
  400748:	f040 81fb 	bne.w	400b42 <ParseMbusPkt+0x452>
	 {
		 /* Calc CRC */
		 recvCrc = (((uint16_t)buff[len-1])<<8)|buff[len-2];
  40074c:	7bbb      	ldrb	r3, [r7, #14]
  40074e:	3b01      	subs	r3, #1
  400750:	68ba      	ldr	r2, [r7, #8]
  400752:	4413      	add	r3, r2
  400754:	781b      	ldrb	r3, [r3, #0]
  400756:	021b      	lsls	r3, r3, #8
  400758:	b21a      	sxth	r2, r3
  40075a:	7bbb      	ldrb	r3, [r7, #14]
  40075c:	3b02      	subs	r3, #2
  40075e:	68b9      	ldr	r1, [r7, #8]
  400760:	440b      	add	r3, r1
  400762:	781b      	ldrb	r3, [r3, #0]
  400764:	b21b      	sxth	r3, r3
  400766:	4313      	orrs	r3, r2
  400768:	b21b      	sxth	r3, r3
  40076a:	83bb      	strh	r3, [r7, #28]
		 crc = calcCRC(buff,len-2);
  40076c:	7bbb      	ldrb	r3, [r7, #14]
  40076e:	3b02      	subs	r3, #2
  400770:	b2db      	uxtb	r3, r3
  400772:	4619      	mov	r1, r3
  400774:	68b8      	ldr	r0, [r7, #8]
  400776:	4b90      	ldr	r3, [pc, #576]	; (4009b8 <ParseMbusPkt+0x2c8>)
  400778:	4798      	blx	r3
  40077a:	4603      	mov	r3, r0
  40077c:	83fb      	strh	r3, [r7, #30]
		 /* If CRC Matched */
		 if(crc==recvCrc)
  40077e:	8bfa      	ldrh	r2, [r7, #30]
  400780:	8bbb      	ldrh	r3, [r7, #28]
  400782:	429a      	cmp	r2, r3
  400784:	f040 81e0 	bne.w	400b48 <ParseMbusPkt+0x458>
		 {
			 /* Function Code Extraction */
			 fCode = buff[1];
  400788:	68bb      	ldr	r3, [r7, #8]
  40078a:	785b      	ldrb	r3, [r3, #1]
  40078c:	75fb      	strb	r3, [r7, #23]
			 switch(fCode)
  40078e:	7dfb      	ldrb	r3, [r7, #23]
  400790:	2b06      	cmp	r3, #6
  400792:	f000 80a9 	beq.w	4008e8 <ParseMbusPkt+0x1f8>
  400796:	2b10      	cmp	r3, #16
  400798:	f000 8114 	beq.w	4009c4 <ParseMbusPkt+0x2d4>
  40079c:	2b03      	cmp	r3, #3
  40079e:	f040 81c2 	bne.w	400b26 <ParseMbusPkt+0x436>
			 {
				 /* Read Analog Reg Func Code Recvd */
				 case 0x03:
				 numReg = (((uint16_t)buff[4])<<8)|buff[5];
  4007a2:	68bb      	ldr	r3, [r7, #8]
  4007a4:	3304      	adds	r3, #4
  4007a6:	781b      	ldrb	r3, [r3, #0]
  4007a8:	021b      	lsls	r3, r3, #8
  4007aa:	b21a      	sxth	r2, r3
  4007ac:	68bb      	ldr	r3, [r7, #8]
  4007ae:	3305      	adds	r3, #5
  4007b0:	781b      	ldrb	r3, [r3, #0]
  4007b2:	b21b      	sxth	r3, r3
  4007b4:	4313      	orrs	r3, r2
  4007b6:	b21b      	sxth	r3, r3
  4007b8:	833b      	strh	r3, [r7, #24]
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
  4007ba:	8b3b      	ldrh	r3, [r7, #24]
  4007bc:	2b00      	cmp	r3, #0
  4007be:	f000 8088 	beq.w	4008d2 <ParseMbusPkt+0x1e2>
  4007c2:	8b3b      	ldrh	r3, [r7, #24]
  4007c4:	2b7d      	cmp	r3, #125	; 0x7d
  4007c6:	f200 8084 	bhi.w	4008d2 <ParseMbusPkt+0x1e2>
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
  4007ca:	68bb      	ldr	r3, [r7, #8]
  4007cc:	3302      	adds	r3, #2
  4007ce:	781b      	ldrb	r3, [r3, #0]
  4007d0:	021b      	lsls	r3, r3, #8
  4007d2:	b21a      	sxth	r2, r3
  4007d4:	68bb      	ldr	r3, [r7, #8]
  4007d6:	3303      	adds	r3, #3
  4007d8:	781b      	ldrb	r3, [r3, #0]
  4007da:	b21b      	sxth	r3, r3
  4007dc:	4313      	orrs	r3, r2
  4007de:	b21b      	sxth	r3, r3
  4007e0:	837b      	strh	r3, [r7, #26]
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  4007e2:	8b7a      	ldrh	r2, [r7, #26]
  4007e4:	8b3b      	ldrh	r3, [r7, #24]
  4007e6:	4413      	add	r3, r2
  4007e8:	2b2a      	cmp	r3, #42	; 0x2a
  4007ea:	dc68      	bgt.n	4008be <ParseMbusPkt+0x1ce>
					 {
						 /* Process Read Reg Req */
						 /* Gen Valid Resp */
						 respBuff[0] = slaveAddr;
  4007ec:	687b      	ldr	r3, [r7, #4]
  4007ee:	7bfa      	ldrb	r2, [r7, #15]
  4007f0:	701a      	strb	r2, [r3, #0]
						 respBuff[1] = 0x03;
  4007f2:	687b      	ldr	r3, [r7, #4]
  4007f4:	3301      	adds	r3, #1
  4007f6:	2203      	movs	r2, #3
  4007f8:	701a      	strb	r2, [r3, #0]
						 respBuff[2] = (numReg *2); //No of Data Bytes
  4007fa:	687b      	ldr	r3, [r7, #4]
  4007fc:	3302      	adds	r3, #2
  4007fe:	8b3a      	ldrh	r2, [r7, #24]
  400800:	b2d2      	uxtb	r2, r2
  400802:	0052      	lsls	r2, r2, #1
  400804:	b2d2      	uxtb	r2, r2
  400806:	701a      	strb	r2, [r3, #0]
						 
						 i = 3;
  400808:	2303      	movs	r3, #3
  40080a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
						 for(ind = 0; ind < numReg; ind++)
  40080e:	2300      	movs	r3, #0
  400810:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  400814:	e028      	b.n	400868 <ParseMbusPkt+0x178>
						 {
							 respBuff[i++] = (mBusRegs[regAddr+ind]>>8);
  400816:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  40081a:	1c5a      	adds	r2, r3, #1
  40081c:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
  400820:	461a      	mov	r2, r3
  400822:	687b      	ldr	r3, [r7, #4]
  400824:	4413      	add	r3, r2
  400826:	8b79      	ldrh	r1, [r7, #26]
  400828:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
  40082c:	440a      	add	r2, r1
  40082e:	4963      	ldr	r1, [pc, #396]	; (4009bc <ParseMbusPkt+0x2cc>)
  400830:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
  400834:	0a12      	lsrs	r2, r2, #8
  400836:	b292      	uxth	r2, r2
  400838:	b2d2      	uxtb	r2, r2
  40083a:	701a      	strb	r2, [r3, #0]
							 respBuff[i++] = (mBusRegs[regAddr+ind]&0x00FF);
  40083c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400840:	1c5a      	adds	r2, r3, #1
  400842:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
  400846:	461a      	mov	r2, r3
  400848:	687b      	ldr	r3, [r7, #4]
  40084a:	4413      	add	r3, r2
  40084c:	8b79      	ldrh	r1, [r7, #26]
  40084e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
  400852:	440a      	add	r2, r1
  400854:	4959      	ldr	r1, [pc, #356]	; (4009bc <ParseMbusPkt+0x2cc>)
  400856:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
  40085a:	b2d2      	uxtb	r2, r2
  40085c:	701a      	strb	r2, [r3, #0]
						 respBuff[0] = slaveAddr;
						 respBuff[1] = 0x03;
						 respBuff[2] = (numReg *2); //No of Data Bytes
						 
						 i = 3;
						 for(ind = 0; ind < numReg; ind++)
  40085e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  400862:	3301      	adds	r3, #1
  400864:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  400868:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  40086c:	b29b      	uxth	r3, r3
  40086e:	8b3a      	ldrh	r2, [r7, #24]
  400870:	429a      	cmp	r2, r3
  400872:	d8d0      	bhi.n	400816 <ParseMbusPkt+0x126>
						 {
							 respBuff[i++] = (mBusRegs[regAddr+ind]>>8);
							 respBuff[i++] = (mBusRegs[regAddr+ind]&0x00FF);
						 }
						 crc = calcCRC(respBuff, i);
  400874:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400878:	4619      	mov	r1, r3
  40087a:	6878      	ldr	r0, [r7, #4]
  40087c:	4b4e      	ldr	r3, [pc, #312]	; (4009b8 <ParseMbusPkt+0x2c8>)
  40087e:	4798      	blx	r3
  400880:	4603      	mov	r3, r0
  400882:	83fb      	strh	r3, [r7, #30]
						 respBuff[i++] = (crc&0x00FF);
  400884:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400888:	1c5a      	adds	r2, r3, #1
  40088a:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
  40088e:	461a      	mov	r2, r3
  400890:	687b      	ldr	r3, [r7, #4]
  400892:	4413      	add	r3, r2
  400894:	8bfa      	ldrh	r2, [r7, #30]
  400896:	b2d2      	uxtb	r2, r2
  400898:	701a      	strb	r2, [r3, #0]
						 respBuff[i++] = (crc>>8);
  40089a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  40089e:	1c5a      	adds	r2, r3, #1
  4008a0:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
  4008a4:	461a      	mov	r2, r3
  4008a6:	687b      	ldr	r3, [r7, #4]
  4008a8:	4413      	add	r3, r2
  4008aa:	8bfa      	ldrh	r2, [r7, #30]
  4008ac:	0a12      	lsrs	r2, r2, #8
  4008ae:	b292      	uxth	r2, r2
  4008b0:	b2d2      	uxtb	r2, r2
  4008b2:	701a      	strb	r2, [r3, #0]
						 *respLen = i;
  4008b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4008b6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
  4008ba:	701a      	strb	r2, [r3, #0]
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  4008bc:	e013      	b.n	4008e6 <ParseMbusPkt+0x1f6>
						 *respLen = i;
					 }
					 else
					 {
						 /* Error code = 0x02 */
						 genErrRsp = 1;
  4008be:	2301      	movs	r3, #1
  4008c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						 expFuncCode = 0x83;
  4008c4:	2383      	movs	r3, #131	; 0x83
  4008c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						 expCode = 0x02;
  4008ca:	2302      	movs	r3, #2
  4008cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  4008d0:	e009      	b.n	4008e6 <ParseMbusPkt+0x1f6>
					 }
				 }
				 else
				 {
					 /* Error Code 0x03 */
					 genErrRsp = 1;
  4008d2:	2301      	movs	r3, #1
  4008d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					 expFuncCode = 0x83;
  4008d8:	2383      	movs	r3, #131	; 0x83
  4008da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					 expCode = 0x03;
  4008de:	2303      	movs	r3, #3
  4008e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 }
				 break;
  4008e4:	e12c      	b.n	400b40 <ParseMbusPkt+0x450>
  4008e6:	e12b      	b.n	400b40 <ParseMbusPkt+0x450>
				 /* Write Single Analog Reg */
				 case 0x06:
				 /* Output Value = 0x0000 or 0xFF00 */
				 regVal = (((uint16_t)buff[4])<<8)|(buff[5]);
  4008e8:	68bb      	ldr	r3, [r7, #8]
  4008ea:	3304      	adds	r3, #4
  4008ec:	781b      	ldrb	r3, [r3, #0]
  4008ee:	021b      	lsls	r3, r3, #8
  4008f0:	b21a      	sxth	r2, r3
  4008f2:	68bb      	ldr	r3, [r7, #8]
  4008f4:	3305      	adds	r3, #5
  4008f6:	781b      	ldrb	r3, [r3, #0]
  4008f8:	b21b      	sxth	r3, r3
  4008fa:	4313      	orrs	r3, r2
  4008fc:	b21b      	sxth	r3, r3
  4008fe:	84fb      	strh	r3, [r7, #38]	; 0x26
				 if(1)
				 {
					 /* Output Address = OK */
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
  400900:	68bb      	ldr	r3, [r7, #8]
  400902:	3302      	adds	r3, #2
  400904:	781b      	ldrb	r3, [r3, #0]
  400906:	021b      	lsls	r3, r3, #8
  400908:	b21a      	sxth	r2, r3
  40090a:	68bb      	ldr	r3, [r7, #8]
  40090c:	3303      	adds	r3, #3
  40090e:	781b      	ldrb	r3, [r3, #0]
  400910:	b21b      	sxth	r3, r3
  400912:	4313      	orrs	r3, r2
  400914:	b21b      	sxth	r3, r3
  400916:	837b      	strh	r3, [r7, #26]
					 if(regAddr <= MBUS_MAX_REGS)
  400918:	8b7b      	ldrh	r3, [r7, #26]
  40091a:	2b2a      	cmp	r3, #42	; 0x2a
  40091c:	d841      	bhi.n	4009a2 <ParseMbusPkt+0x2b2>
					 {
						 /* Gen Valid Mbus Resp */
						 mBusRegs[regAddr] = regVal;
  40091e:	8b7b      	ldrh	r3, [r7, #26]
  400920:	4926      	ldr	r1, [pc, #152]	; (4009bc <ParseMbusPkt+0x2cc>)
  400922:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  400924:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						 /* Success Error Code */
						 respBuff[0] = slaveAddr;
  400928:	687b      	ldr	r3, [r7, #4]
  40092a:	7bfa      	ldrb	r2, [r7, #15]
  40092c:	701a      	strb	r2, [r3, #0]
						 respBuff[1] = 0x06;
  40092e:	687b      	ldr	r3, [r7, #4]
  400930:	3301      	adds	r3, #1
  400932:	2206      	movs	r2, #6
  400934:	701a      	strb	r2, [r3, #0]
						 respBuff[2] = buff[2];
  400936:	687b      	ldr	r3, [r7, #4]
  400938:	3302      	adds	r3, #2
  40093a:	68ba      	ldr	r2, [r7, #8]
  40093c:	7892      	ldrb	r2, [r2, #2]
  40093e:	701a      	strb	r2, [r3, #0]
						 respBuff[3] = buff[3];
  400940:	687b      	ldr	r3, [r7, #4]
  400942:	3303      	adds	r3, #3
  400944:	68ba      	ldr	r2, [r7, #8]
  400946:	78d2      	ldrb	r2, [r2, #3]
  400948:	701a      	strb	r2, [r3, #0]
						 respBuff[4] = buff[4];
  40094a:	687b      	ldr	r3, [r7, #4]
  40094c:	3304      	adds	r3, #4
  40094e:	68ba      	ldr	r2, [r7, #8]
  400950:	7912      	ldrb	r2, [r2, #4]
  400952:	701a      	strb	r2, [r3, #0]
						 respBuff[5] = buff[5];
  400954:	687b      	ldr	r3, [r7, #4]
  400956:	3305      	adds	r3, #5
  400958:	68ba      	ldr	r2, [r7, #8]
  40095a:	7952      	ldrb	r2, [r2, #5]
  40095c:	701a      	strb	r2, [r3, #0]
						 crc = calcCRC(respBuff, 6);
  40095e:	2106      	movs	r1, #6
  400960:	6878      	ldr	r0, [r7, #4]
  400962:	4b15      	ldr	r3, [pc, #84]	; (4009b8 <ParseMbusPkt+0x2c8>)
  400964:	4798      	blx	r3
  400966:	4603      	mov	r3, r0
  400968:	83fb      	strh	r3, [r7, #30]
						 respBuff[6] = (crc&0x00FF);
  40096a:	687b      	ldr	r3, [r7, #4]
  40096c:	3306      	adds	r3, #6
  40096e:	8bfa      	ldrh	r2, [r7, #30]
  400970:	b2d2      	uxtb	r2, r2
  400972:	701a      	strb	r2, [r3, #0]
						 respBuff[7] = (crc>>8);
  400974:	687b      	ldr	r3, [r7, #4]
  400976:	3307      	adds	r3, #7
  400978:	8bfa      	ldrh	r2, [r7, #30]
  40097a:	0a12      	lsrs	r2, r2, #8
  40097c:	b292      	uxth	r2, r2
  40097e:	b2d2      	uxtb	r2, r2
  400980:	701a      	strb	r2, [r3, #0]
						 *respLen = 8;
  400982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400984:	2208      	movs	r2, #8
  400986:	701a      	strb	r2, [r3, #0]
						 
						 /* Process Write Reg Req */
						 if(writeFunc!=NULL)
  400988:	4b0d      	ldr	r3, [pc, #52]	; (4009c0 <ParseMbusPkt+0x2d0>)
  40098a:	681b      	ldr	r3, [r3, #0]
  40098c:	2b00      	cmp	r3, #0
  40098e:	f000 80d6 	beq.w	400b3e <ParseMbusPkt+0x44e>
							writeFunc(mBusRegs,regAddr,1);
  400992:	4b0b      	ldr	r3, [pc, #44]	; (4009c0 <ParseMbusPkt+0x2d0>)
  400994:	681b      	ldr	r3, [r3, #0]
  400996:	8b7a      	ldrh	r2, [r7, #26]
  400998:	b2d1      	uxtb	r1, r2
  40099a:	2201      	movs	r2, #1
  40099c:	4807      	ldr	r0, [pc, #28]	; (4009bc <ParseMbusPkt+0x2cc>)
  40099e:	4798      	blx	r3
					 /* Illegal Data Value Error */
					 genErrRsp = 1;
					 expFuncCode = 0x86;
					 expCode = 0x03;
				 }
				 break;
  4009a0:	e0cd      	b.n	400b3e <ParseMbusPkt+0x44e>
							writeFunc(mBusRegs,regAddr,1);
					 }
					 else
					 {
						 /* Illegal Data Address Error */
						 genErrRsp = 1;
  4009a2:	2301      	movs	r3, #1
  4009a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						 expFuncCode = 0x86;
  4009a8:	2386      	movs	r3, #134	; 0x86
  4009aa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						 expCode = 0x02;
  4009ae:	2302      	movs	r3, #2
  4009b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					 /* Illegal Data Value Error */
					 genErrRsp = 1;
					 expFuncCode = 0x86;
					 expCode = 0x03;
				 }
				 break;
  4009b4:	e0c3      	b.n	400b3e <ParseMbusPkt+0x44e>
  4009b6:	bf00      	nop
  4009b8:	00400ba9 	.word	0x00400ba9
  4009bc:	20000494 	.word	0x20000494
  4009c0:	20002730 	.word	0x20002730
				 case 0x10: /* Write Mul Register */
				 numReg = (((uint16_t)buff[4])<<8)|buff[5];
  4009c4:	68bb      	ldr	r3, [r7, #8]
  4009c6:	3304      	adds	r3, #4
  4009c8:	781b      	ldrb	r3, [r3, #0]
  4009ca:	021b      	lsls	r3, r3, #8
  4009cc:	b21a      	sxth	r2, r3
  4009ce:	68bb      	ldr	r3, [r7, #8]
  4009d0:	3305      	adds	r3, #5
  4009d2:	781b      	ldrb	r3, [r3, #0]
  4009d4:	b21b      	sxth	r3, r3
  4009d6:	4313      	orrs	r3, r2
  4009d8:	b21b      	sxth	r3, r3
  4009da:	833b      	strh	r3, [r7, #24]
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
  4009dc:	8b3b      	ldrh	r3, [r7, #24]
  4009de:	2b00      	cmp	r3, #0
  4009e0:	f000 8096 	beq.w	400b10 <ParseMbusPkt+0x420>
  4009e4:	8b3b      	ldrh	r3, [r7, #24]
  4009e6:	2b7d      	cmp	r3, #125	; 0x7d
  4009e8:	f200 8092 	bhi.w	400b10 <ParseMbusPkt+0x420>
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
  4009ec:	68bb      	ldr	r3, [r7, #8]
  4009ee:	3302      	adds	r3, #2
  4009f0:	781b      	ldrb	r3, [r3, #0]
  4009f2:	021b      	lsls	r3, r3, #8
  4009f4:	b21a      	sxth	r2, r3
  4009f6:	68bb      	ldr	r3, [r7, #8]
  4009f8:	3303      	adds	r3, #3
  4009fa:	781b      	ldrb	r3, [r3, #0]
  4009fc:	b21b      	sxth	r3, r3
  4009fe:	4313      	orrs	r3, r2
  400a00:	b21b      	sxth	r3, r3
  400a02:	837b      	strh	r3, [r7, #26]
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  400a04:	8b7a      	ldrh	r2, [r7, #26]
  400a06:	8b3b      	ldrh	r3, [r7, #24]
  400a08:	4413      	add	r3, r2
  400a0a:	2b2a      	cmp	r3, #42	; 0x2a
  400a0c:	dc76      	bgt.n	400afc <ParseMbusPkt+0x40c>
					 {
						 /* Gen Valid Resp */
						 respBuff[0] = slaveAddr;
  400a0e:	687b      	ldr	r3, [r7, #4]
  400a10:	7bfa      	ldrb	r2, [r7, #15]
  400a12:	701a      	strb	r2, [r3, #0]
						 respBuff[1] = 0x10;
  400a14:	687b      	ldr	r3, [r7, #4]
  400a16:	3301      	adds	r3, #1
  400a18:	2210      	movs	r2, #16
  400a1a:	701a      	strb	r2, [r3, #0]
						 respBuff[2] = buff[2];
  400a1c:	687b      	ldr	r3, [r7, #4]
  400a1e:	3302      	adds	r3, #2
  400a20:	68ba      	ldr	r2, [r7, #8]
  400a22:	7892      	ldrb	r2, [r2, #2]
  400a24:	701a      	strb	r2, [r3, #0]
						 respBuff[3] = buff[3];
  400a26:	687b      	ldr	r3, [r7, #4]
  400a28:	3303      	adds	r3, #3
  400a2a:	68ba      	ldr	r2, [r7, #8]
  400a2c:	78d2      	ldrb	r2, [r2, #3]
  400a2e:	701a      	strb	r2, [r3, #0]
						 respBuff[4] = buff[4];
  400a30:	687b      	ldr	r3, [r7, #4]
  400a32:	3304      	adds	r3, #4
  400a34:	68ba      	ldr	r2, [r7, #8]
  400a36:	7912      	ldrb	r2, [r2, #4]
  400a38:	701a      	strb	r2, [r3, #0]
						 respBuff[5] = buff[5];
  400a3a:	687b      	ldr	r3, [r7, #4]
  400a3c:	3305      	adds	r3, #5
  400a3e:	68ba      	ldr	r2, [r7, #8]
  400a40:	7952      	ldrb	r2, [r2, #5]
  400a42:	701a      	strb	r2, [r3, #0]
						 crc = calcCRC(respBuff, 6);
  400a44:	2106      	movs	r1, #6
  400a46:	6878      	ldr	r0, [r7, #4]
  400a48:	4b54      	ldr	r3, [pc, #336]	; (400b9c <ParseMbusPkt+0x4ac>)
  400a4a:	4798      	blx	r3
  400a4c:	4603      	mov	r3, r0
  400a4e:	83fb      	strh	r3, [r7, #30]
						 respBuff[6] = (crc&0x00FF);
  400a50:	687b      	ldr	r3, [r7, #4]
  400a52:	3306      	adds	r3, #6
  400a54:	8bfa      	ldrh	r2, [r7, #30]
  400a56:	b2d2      	uxtb	r2, r2
  400a58:	701a      	strb	r2, [r3, #0]
						 respBuff[7] = (crc>>8);
  400a5a:	687b      	ldr	r3, [r7, #4]
  400a5c:	3307      	adds	r3, #7
  400a5e:	8bfa      	ldrh	r2, [r7, #30]
  400a60:	0a12      	lsrs	r2, r2, #8
  400a62:	b292      	uxth	r2, r2
  400a64:	b2d2      	uxtb	r2, r2
  400a66:	701a      	strb	r2, [r3, #0]
						 *respLen = 8;
  400a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400a6a:	2208      	movs	r2, #8
  400a6c:	701a      	strb	r2, [r3, #0]
						 
						 /* Byte count */
						 numReg = 7 + buff[6];
  400a6e:	68bb      	ldr	r3, [r7, #8]
  400a70:	3306      	adds	r3, #6
  400a72:	781b      	ldrb	r3, [r3, #0]
  400a74:	b29b      	uxth	r3, r3
  400a76:	3307      	adds	r3, #7
  400a78:	833b      	strh	r3, [r7, #24]
						 ind = 0;
  400a7a:	2300      	movs	r3, #0
  400a7c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
						 for(i = 7; i < numReg; i++)
  400a80:	2307      	movs	r3, #7
  400a82:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  400a86:	e02a      	b.n	400ade <ParseMbusPkt+0x3ee>
						 {
							 if(i%2==1)
  400a88:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400a8c:	f003 0301 	and.w	r3, r3, #1
  400a90:	b2db      	uxtb	r3, r3
  400a92:	2b00      	cmp	r3, #0
  400a94:	d008      	beq.n	400aa8 <ParseMbusPkt+0x3b8>
							 {
								 regVal = ((uint16_t)buff[i])<<8;
  400a96:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400a9a:	68ba      	ldr	r2, [r7, #8]
  400a9c:	4413      	add	r3, r2
  400a9e:	781b      	ldrb	r3, [r3, #0]
  400aa0:	b29b      	uxth	r3, r3
  400aa2:	021b      	lsls	r3, r3, #8
  400aa4:	84fb      	strh	r3, [r7, #38]	; 0x26
  400aa6:	e015      	b.n	400ad4 <ParseMbusPkt+0x3e4>
							 }
							 else
							 {
								 regVal |= buff[i];
  400aa8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400aac:	68ba      	ldr	r2, [r7, #8]
  400aae:	4413      	add	r3, r2
  400ab0:	781b      	ldrb	r3, [r3, #0]
  400ab2:	b29a      	uxth	r2, r3
  400ab4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  400ab6:	4313      	orrs	r3, r2
  400ab8:	84fb      	strh	r3, [r7, #38]	; 0x26
								 mBusRegs[regAddr+ind] = regVal;
  400aba:	8b7a      	ldrh	r2, [r7, #26]
  400abc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  400ac0:	4413      	add	r3, r2
  400ac2:	4937      	ldr	r1, [pc, #220]	; (400ba0 <ParseMbusPkt+0x4b0>)
  400ac4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  400ac6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								 ind ++;
  400aca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  400ace:	3301      	adds	r3, #1
  400ad0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
						 *respLen = 8;
						 
						 /* Byte count */
						 numReg = 7 + buff[6];
						 ind = 0;
						 for(i = 7; i < numReg; i++)
  400ad4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400ad8:	3301      	adds	r3, #1
  400ada:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  400ade:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400ae2:	b29b      	uxth	r3, r3
  400ae4:	8b3a      	ldrh	r2, [r7, #24]
  400ae6:	429a      	cmp	r2, r3
  400ae8:	d8ce      	bhi.n	400a88 <ParseMbusPkt+0x398>
								 mBusRegs[regAddr+ind] = regVal;
								 ind ++;
							 }
						 }
						 /* Process Write Reg Req */
						 writeFunc(mBusRegs,regAddr,ind);
  400aea:	4b2e      	ldr	r3, [pc, #184]	; (400ba4 <ParseMbusPkt+0x4b4>)
  400aec:	681b      	ldr	r3, [r3, #0]
  400aee:	8b7a      	ldrh	r2, [r7, #26]
  400af0:	b2d1      	uxtb	r1, r2
  400af2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
  400af6:	482a      	ldr	r0, [pc, #168]	; (400ba0 <ParseMbusPkt+0x4b0>)
  400af8:	4798      	blx	r3
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  400afa:	e013      	b.n	400b24 <ParseMbusPkt+0x434>
						 writeFunc(mBusRegs,regAddr,ind);
					 }
					 else
					 {
						 /* Error code = 0x02 */
						 genErrRsp = 1;
  400afc:	2301      	movs	r3, #1
  400afe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						 expFuncCode = 0x90;
  400b02:	2390      	movs	r3, #144	; 0x90
  400b04:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						 expCode = 0x02;
  400b08:	2302      	movs	r3, #2
  400b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  400b0e:	e009      	b.n	400b24 <ParseMbusPkt+0x434>
					 }
				 }
				 else
				 {
					 /* Error Code 0x03 */
					 genErrRsp = 1;
  400b10:	2301      	movs	r3, #1
  400b12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					 expFuncCode = 0x90;
  400b16:	2390      	movs	r3, #144	; 0x90
  400b18:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					 expCode = 0x03;
  400b1c:	2303      	movs	r3, #3
  400b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 }
				 break;
  400b22:	e00d      	b.n	400b40 <ParseMbusPkt+0x450>
  400b24:	e00c      	b.n	400b40 <ParseMbusPkt+0x450>
				 default:
				 /* Illegal Function Code Error */
				 /* Set MSB of recvd Function code */
				 /* Error Code 0x01 */
				 expFuncCode = fCode|(1<<7);
  400b26:	7dfb      	ldrb	r3, [r7, #23]
  400b28:	f063 037f 	orn	r3, r3, #127	; 0x7f
  400b2c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				 expCode = 0x01;
  400b30:	2301      	movs	r3, #1
  400b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 genErrRsp = 1;
  400b36:	2301      	movs	r3, #1
  400b38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				 break;
  400b3c:	e000      	b.n	400b40 <ParseMbusPkt+0x450>
					 /* Illegal Data Value Error */
					 genErrRsp = 1;
					 expFuncCode = 0x86;
					 expCode = 0x03;
				 }
				 break;
  400b3e:	bf00      	nop
	 {
		 /* Calc CRC */
		 recvCrc = (((uint16_t)buff[len-1])<<8)|buff[len-2];
		 crc = calcCRC(buff,len-2);
		 /* If CRC Matched */
		 if(crc==recvCrc)
  400b40:	e002      	b.n	400b48 <ParseMbusPkt+0x458>
			 }
		 }
	 }
	 else
	 {
		 *respLen = 0;
  400b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400b44:	2200      	movs	r2, #0
  400b46:	701a      	strb	r2, [r3, #0]
	 }
	 
	 if(genErrRsp)
  400b48:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
  400b4c:	2b00      	cmp	r3, #0
  400b4e:	d021      	beq.n	400b94 <ParseMbusPkt+0x4a4>
	 {
		 respBuff[0] = slaveAddr;
  400b50:	687b      	ldr	r3, [r7, #4]
  400b52:	7bfa      	ldrb	r2, [r7, #15]
  400b54:	701a      	strb	r2, [r3, #0]
		 respBuff[1] = expFuncCode;
  400b56:	687b      	ldr	r3, [r7, #4]
  400b58:	3301      	adds	r3, #1
  400b5a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
  400b5e:	701a      	strb	r2, [r3, #0]
		 respBuff[2] = expCode;
  400b60:	687b      	ldr	r3, [r7, #4]
  400b62:	3302      	adds	r3, #2
  400b64:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
  400b68:	701a      	strb	r2, [r3, #0]
		 crc = calcCRC(respBuff, 3);
  400b6a:	2103      	movs	r1, #3
  400b6c:	6878      	ldr	r0, [r7, #4]
  400b6e:	4b0b      	ldr	r3, [pc, #44]	; (400b9c <ParseMbusPkt+0x4ac>)
  400b70:	4798      	blx	r3
  400b72:	4603      	mov	r3, r0
  400b74:	83fb      	strh	r3, [r7, #30]
		 respBuff[3] = (crc&0x00FF);
  400b76:	687b      	ldr	r3, [r7, #4]
  400b78:	3303      	adds	r3, #3
  400b7a:	8bfa      	ldrh	r2, [r7, #30]
  400b7c:	b2d2      	uxtb	r2, r2
  400b7e:	701a      	strb	r2, [r3, #0]
		 respBuff[4] = (crc>>8);
  400b80:	687b      	ldr	r3, [r7, #4]
  400b82:	3304      	adds	r3, #4
  400b84:	8bfa      	ldrh	r2, [r7, #30]
  400b86:	0a12      	lsrs	r2, r2, #8
  400b88:	b292      	uxth	r2, r2
  400b8a:	b2d2      	uxtb	r2, r2
  400b8c:	701a      	strb	r2, [r3, #0]
		 *respLen = 5;
  400b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400b90:	2205      	movs	r2, #5
  400b92:	701a      	strb	r2, [r3, #0]
	 }
 }
  400b94:	bf00      	nop
  400b96:	3728      	adds	r7, #40	; 0x28
  400b98:	46bd      	mov	sp, r7
  400b9a:	bd80      	pop	{r7, pc}
  400b9c:	00400ba9 	.word	0x00400ba9
  400ba0:	20000494 	.word	0x20000494
  400ba4:	20002730 	.word	0x20002730

00400ba8 <calcCRC>:

 uint16_t calcCRC(uint8_t *buff, uint8_t len)
 {
  400ba8:	b480      	push	{r7}
  400baa:	b085      	sub	sp, #20
  400bac:	af00      	add	r7, sp, #0
  400bae:	6078      	str	r0, [r7, #4]
  400bb0:	460b      	mov	r3, r1
  400bb2:	70fb      	strb	r3, [r7, #3]
	 uint16_t crcReg = 0xFFFF;
  400bb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400bb8:	81fb      	strh	r3, [r7, #14]
	 uint8_t i = 0, j=0;
  400bba:	2300      	movs	r3, #0
  400bbc:	737b      	strb	r3, [r7, #13]
  400bbe:	2300      	movs	r3, #0
  400bc0:	733b      	strb	r3, [r7, #12]

	 for(i=0;i<len;i++)
  400bc2:	2300      	movs	r3, #0
  400bc4:	737b      	strb	r3, [r7, #13]
  400bc6:	e026      	b.n	400c16 <calcCRC+0x6e>
	 {
		 crcReg = crcReg ^ buff[i];
  400bc8:	7b7b      	ldrb	r3, [r7, #13]
  400bca:	687a      	ldr	r2, [r7, #4]
  400bcc:	4413      	add	r3, r2
  400bce:	781b      	ldrb	r3, [r3, #0]
  400bd0:	b29a      	uxth	r2, r3
  400bd2:	89fb      	ldrh	r3, [r7, #14]
  400bd4:	4053      	eors	r3, r2
  400bd6:	81fb      	strh	r3, [r7, #14]
		 for(j=0;j<8;j++)
  400bd8:	2300      	movs	r3, #0
  400bda:	733b      	strb	r3, [r7, #12]
  400bdc:	e015      	b.n	400c0a <calcCRC+0x62>
		 {

			 if(bitIsSet(crcReg,0))
  400bde:	89fb      	ldrh	r3, [r7, #14]
  400be0:	f003 0301 	and.w	r3, r3, #1
  400be4:	2b00      	cmp	r3, #0
  400be6:	d00a      	beq.n	400bfe <calcCRC+0x56>
			 {
				 crcReg = crcReg >> 1;
  400be8:	89fb      	ldrh	r3, [r7, #14]
  400bea:	085b      	lsrs	r3, r3, #1
  400bec:	81fb      	strh	r3, [r7, #14]
				 crcReg = crcReg ^ MBUS_CRC_POLY;
  400bee:	89fb      	ldrh	r3, [r7, #14]
  400bf0:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
  400bf4:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
  400bf8:	43db      	mvns	r3, r3
  400bfa:	81fb      	strh	r3, [r7, #14]
  400bfc:	e002      	b.n	400c04 <calcCRC+0x5c>
			 }
			 else
			 {
				 crcReg = crcReg >> 1;
  400bfe:	89fb      	ldrh	r3, [r7, #14]
  400c00:	085b      	lsrs	r3, r3, #1
  400c02:	81fb      	strh	r3, [r7, #14]
	 uint8_t i = 0, j=0;

	 for(i=0;i<len;i++)
	 {
		 crcReg = crcReg ^ buff[i];
		 for(j=0;j<8;j++)
  400c04:	7b3b      	ldrb	r3, [r7, #12]
  400c06:	3301      	adds	r3, #1
  400c08:	733b      	strb	r3, [r7, #12]
  400c0a:	7b3b      	ldrb	r3, [r7, #12]
  400c0c:	2b07      	cmp	r3, #7
  400c0e:	d9e6      	bls.n	400bde <calcCRC+0x36>
 uint16_t calcCRC(uint8_t *buff, uint8_t len)
 {
	 uint16_t crcReg = 0xFFFF;
	 uint8_t i = 0, j=0;

	 for(i=0;i<len;i++)
  400c10:	7b7b      	ldrb	r3, [r7, #13]
  400c12:	3301      	adds	r3, #1
  400c14:	737b      	strb	r3, [r7, #13]
  400c16:	7b7a      	ldrb	r2, [r7, #13]
  400c18:	78fb      	ldrb	r3, [r7, #3]
  400c1a:	429a      	cmp	r2, r3
  400c1c:	d3d4      	bcc.n	400bc8 <calcCRC+0x20>
			 {
				 crcReg = crcReg >> 1;
			 }
		 }
	 }
	 return crcReg;
  400c1e:	89fb      	ldrh	r3, [r7, #14]
 }
  400c20:	4618      	mov	r0, r3
  400c22:	3714      	adds	r7, #20
  400c24:	46bd      	mov	sp, r7
  400c26:	bc80      	pop	{r7}
  400c28:	4770      	bx	lr
  400c2a:	bf00      	nop

00400c2c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400c2c:	b480      	push	{r7}
  400c2e:	b083      	sub	sp, #12
  400c30:	af00      	add	r7, sp, #0
  400c32:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400c34:	687b      	ldr	r3, [r7, #4]
  400c36:	2b07      	cmp	r3, #7
  400c38:	d825      	bhi.n	400c86 <osc_get_rate+0x5a>
  400c3a:	a201      	add	r2, pc, #4	; (adr r2, 400c40 <osc_get_rate+0x14>)
  400c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400c40:	00400c61 	.word	0x00400c61
  400c44:	00400c67 	.word	0x00400c67
  400c48:	00400c6d 	.word	0x00400c6d
  400c4c:	00400c73 	.word	0x00400c73
  400c50:	00400c77 	.word	0x00400c77
  400c54:	00400c7b 	.word	0x00400c7b
  400c58:	00400c7f 	.word	0x00400c7f
  400c5c:	00400c83 	.word	0x00400c83
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400c60:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400c64:	e010      	b.n	400c88 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400c6a:	e00d      	b.n	400c88 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400c6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400c70:	e00a      	b.n	400c88 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400c72:	4b08      	ldr	r3, [pc, #32]	; (400c94 <osc_get_rate+0x68>)
  400c74:	e008      	b.n	400c88 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400c76:	4b08      	ldr	r3, [pc, #32]	; (400c98 <osc_get_rate+0x6c>)
  400c78:	e006      	b.n	400c88 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400c7a:	4b08      	ldr	r3, [pc, #32]	; (400c9c <osc_get_rate+0x70>)
  400c7c:	e004      	b.n	400c88 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400c7e:	4b07      	ldr	r3, [pc, #28]	; (400c9c <osc_get_rate+0x70>)
  400c80:	e002      	b.n	400c88 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400c82:	4b06      	ldr	r3, [pc, #24]	; (400c9c <osc_get_rate+0x70>)
  400c84:	e000      	b.n	400c88 <osc_get_rate+0x5c>
	}

	return 0;
  400c86:	2300      	movs	r3, #0
}
  400c88:	4618      	mov	r0, r3
  400c8a:	370c      	adds	r7, #12
  400c8c:	46bd      	mov	sp, r7
  400c8e:	bc80      	pop	{r7}
  400c90:	4770      	bx	lr
  400c92:	bf00      	nop
  400c94:	003d0900 	.word	0x003d0900
  400c98:	007a1200 	.word	0x007a1200
  400c9c:	00b71b00 	.word	0x00b71b00

00400ca0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400ca0:	b580      	push	{r7, lr}
  400ca2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400ca4:	2006      	movs	r0, #6
  400ca6:	4b04      	ldr	r3, [pc, #16]	; (400cb8 <sysclk_get_main_hz+0x18>)
  400ca8:	4798      	blx	r3
  400caa:	4602      	mov	r2, r0
  400cac:	4613      	mov	r3, r2
  400cae:	009b      	lsls	r3, r3, #2
  400cb0:	4413      	add	r3, r2
  400cb2:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400cb4:	4618      	mov	r0, r3
  400cb6:	bd80      	pop	{r7, pc}
  400cb8:	00400c2d 	.word	0x00400c2d

00400cbc <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400cbc:	b580      	push	{r7, lr}
  400cbe:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400cc0:	4b02      	ldr	r3, [pc, #8]	; (400ccc <sysclk_get_cpu_hz+0x10>)
  400cc2:	4798      	blx	r3
  400cc4:	4603      	mov	r3, r0
  400cc6:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400cc8:	4618      	mov	r0, r3
  400cca:	bd80      	pop	{r7, pc}
  400ccc:	00400ca1 	.word	0x00400ca1

00400cd0 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  400cd0:	b580      	push	{r7, lr}
  400cd2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400cd4:	4b02      	ldr	r3, [pc, #8]	; (400ce0 <sysclk_get_peripheral_hz+0x10>)
  400cd6:	4798      	blx	r3
  400cd8:	4603      	mov	r3, r0
  400cda:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400cdc:	4618      	mov	r0, r3
  400cde:	bd80      	pop	{r7, pc}
  400ce0:	00400ca1 	.word	0x00400ca1

00400ce4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400ce4:	b580      	push	{r7, lr}
  400ce6:	b082      	sub	sp, #8
  400ce8:	af00      	add	r7, sp, #0
  400cea:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400cec:	6878      	ldr	r0, [r7, #4]
  400cee:	4b03      	ldr	r3, [pc, #12]	; (400cfc <sysclk_enable_peripheral_clock+0x18>)
  400cf0:	4798      	blx	r3
}
  400cf2:	bf00      	nop
  400cf4:	3708      	adds	r7, #8
  400cf6:	46bd      	mov	sp, r7
  400cf8:	bd80      	pop	{r7, pc}
  400cfa:	bf00      	nop
  400cfc:	00404f99 	.word	0x00404f99

00400d00 <RTCIntHandler>:

static void InitTWI(void);

/* RTC 1 Min ISR */
void RTCIntHandler(uint32_t ul_id, uint32_t ul_mask)
{
  400d00:	b480      	push	{r7}
  400d02:	b083      	sub	sp, #12
  400d04:	af00      	add	r7, sp, #0
  400d06:	6078      	str	r0, [r7, #4]
  400d08:	6039      	str	r1, [r7, #0]
    if (PIN_RTC_INT_PIO_ID != ul_id || PIN_RTC_INT_MASK != ul_mask)
  400d0a:	687b      	ldr	r3, [r7, #4]
  400d0c:	2b0b      	cmp	r3, #11
  400d0e:	d113      	bne.n	400d38 <RTCIntHandler+0x38>
  400d10:	683b      	ldr	r3, [r7, #0]
  400d12:	2b01      	cmp	r3, #1
  400d14:	d110      	bne.n	400d38 <RTCIntHandler+0x38>
		return;
	
    /* If Auto Mode */
    if(!mBusRegs[MBUS_REG_OPMODE])
  400d16:	4b0b      	ldr	r3, [pc, #44]	; (400d44 <RTCIntHandler+0x44>)
  400d18:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
  400d1a:	2b00      	cmp	r3, #0
  400d1c:	d10d      	bne.n	400d3a <RTCIntHandler+0x3a>
    {
        /* Increment Time Var */
        if(minCtr < TRACKING_INTERVAL)
  400d1e:	4b0a      	ldr	r3, [pc, #40]	; (400d48 <RTCIntHandler+0x48>)
  400d20:	781b      	ldrb	r3, [r3, #0]
  400d22:	b2db      	uxtb	r3, r3
  400d24:	2b02      	cmp	r3, #2
  400d26:	d808      	bhi.n	400d3a <RTCIntHandler+0x3a>
            minCtr++;
  400d28:	4b07      	ldr	r3, [pc, #28]	; (400d48 <RTCIntHandler+0x48>)
  400d2a:	781b      	ldrb	r3, [r3, #0]
  400d2c:	b2db      	uxtb	r3, r3
  400d2e:	3301      	adds	r3, #1
  400d30:	b2da      	uxtb	r2, r3
  400d32:	4b05      	ldr	r3, [pc, #20]	; (400d48 <RTCIntHandler+0x48>)
  400d34:	701a      	strb	r2, [r3, #0]
  400d36:	e000      	b.n	400d3a <RTCIntHandler+0x3a>

/* RTC 1 Min ISR */
void RTCIntHandler(uint32_t ul_id, uint32_t ul_mask)
{
    if (PIN_RTC_INT_PIO_ID != ul_id || PIN_RTC_INT_MASK != ul_mask)
		return;
  400d38:	bf00      	nop
    {
        /* Increment Time Var */
        if(minCtr < TRACKING_INTERVAL)
            minCtr++;
    }
}
  400d3a:	370c      	adds	r7, #12
  400d3c:	46bd      	mov	sp, r7
  400d3e:	bc80      	pop	{r7}
  400d40:	4770      	bx	lr
  400d42:	bf00      	nop
  400d44:	20000494 	.word	0x20000494
  400d48:	200004ea 	.word	0x200004ea

00400d4c <vPvTrackerTask>:

void vPvTrackerTask(void *pvParameters)
{
  400d4c:	b580      	push	{r7, lr}
  400d4e:	b084      	sub	sp, #16
  400d50:	af00      	add	r7, sp, #0
  400d52:	6078      	str	r0, [r7, #4]
    uint8_t status = 0;
  400d54:	2300      	movs	r3, #0
  400d56:	73fb      	strb	r3, [r7, #15]
    #endif
	
	/* These Init routines are shifted here because they should only be called after the scheduler has started */
	/* Init Accelerometer */
	#ifndef ICM20648_USE_RTOS_API
		ICMInitialize(BOARD_TWI, ICM_ADDR);
  400d58:	2169      	movs	r1, #105	; 0x69
  400d5a:	4816      	ldr	r0, [pc, #88]	; (400db4 <vPvTrackerTask+0x68>)
  400d5c:	4b16      	ldr	r3, [pc, #88]	; (400db8 <vPvTrackerTask+0x6c>)
  400d5e:	4798      	blx	r3
		DSSetFullDate(BOARD_TWI, (uint16_t *)&mBusRegs[MBUS_REG_DAY]);
	#endif

	/* Init RTC 1 min Alarm */
	#ifndef DS3231_USE_RTOS_API
		DSEnAL2(BOARD_TWI, 1);
  400d60:	2101      	movs	r1, #1
  400d62:	4814      	ldr	r0, [pc, #80]	; (400db4 <vPvTrackerTask+0x68>)
  400d64:	4b15      	ldr	r3, [pc, #84]	; (400dbc <vPvTrackerTask+0x70>)
  400d66:	4798      	blx	r3

	while(1)
    {
		/* Clear RTC interrupt flag */
		#ifndef DS3231_USE_RTOS_API
			DSReadByte(BOARD_TWI, DS_REG_STAT,&status);
  400d68:	f107 030f 	add.w	r3, r7, #15
  400d6c:	461a      	mov	r2, r3
  400d6e:	210f      	movs	r1, #15
  400d70:	4810      	ldr	r0, [pc, #64]	; (400db4 <vPvTrackerTask+0x68>)
  400d72:	4b13      	ldr	r3, [pc, #76]	; (400dc0 <vPvTrackerTask+0x74>)
  400d74:	4798      	blx	r3
		#else
			DSReadByteTo(twiPort, DS_REG_STAT,&status,50);
		#endif
        if(status&0x02)
  400d76:	7bfb      	ldrb	r3, [r7, #15]
  400d78:	f003 0302 	and.w	r3, r3, #2
  400d7c:	2b00      	cmp	r3, #0
  400d7e:	d004      	beq.n	400d8a <vPvTrackerTask+0x3e>
        {
            /* Clear Status Reg */
			#ifndef DS3231_USE_RTOS_API
				DSWriteByte(BOARD_TWI, DS_REG_STAT, 0x00);
  400d80:	2200      	movs	r2, #0
  400d82:	210f      	movs	r1, #15
  400d84:	480b      	ldr	r0, [pc, #44]	; (400db4 <vPvTrackerTask+0x68>)
  400d86:	4b0f      	ldr	r3, [pc, #60]	; (400dc4 <vPvTrackerTask+0x78>)
  400d88:	4798      	blx	r3
				DSWriteByteTo(twiPort, DS_REG_STAT, 0x00, 50);
			#endif
        }
        
        /* In Tracking i.e. Auto Mode */
        if(!mBusRegs[MBUS_REG_OPMODE])
  400d8a:	4b0f      	ldr	r3, [pc, #60]	; (400dc8 <vPvTrackerTask+0x7c>)
  400d8c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
  400d8e:	2b00      	cmp	r3, #0
  400d90:	d10a      	bne.n	400da8 <vPvTrackerTask+0x5c>
        {
			/* If Tracking Time Expired */
            if(minCtr >= TRACKING_INTERVAL)
  400d92:	4b0e      	ldr	r3, [pc, #56]	; (400dcc <vPvTrackerTask+0x80>)
  400d94:	781b      	ldrb	r3, [r3, #0]
  400d96:	b2db      	uxtb	r3, r3
  400d98:	2b02      	cmp	r3, #2
  400d9a:	d907      	bls.n	400dac <vPvTrackerTask+0x60>
            {
                PVTrack();
  400d9c:	4b0c      	ldr	r3, [pc, #48]	; (400dd0 <vPvTrackerTask+0x84>)
  400d9e:	4798      	blx	r3
                minCtr = 0;
  400da0:	4b0a      	ldr	r3, [pc, #40]	; (400dcc <vPvTrackerTask+0x80>)
  400da2:	2200      	movs	r2, #0
  400da4:	701a      	strb	r2, [r3, #0]
  400da6:	e001      	b.n	400dac <vPvTrackerTask+0x60>
            /* LED1 Heart Beat Status (No Block) */
        }
        else //if(mBusRegs[MBUS_REG_OPMODE] == 1)
        {
            /* In Manual / Windspeed / Cleaning Mode */
            TestCode();
  400da8:	4b0a      	ldr	r3, [pc, #40]	; (400dd4 <vPvTrackerTask+0x88>)
  400daa:	4798      	blx	r3
// 		}
// 		else if(mBusRegs[MBUS_REG_OPMODE] == 3)
// 		{
// 			/* Cleaning Mode */
// 		}
		vTaskDelay(200 / portTICK_RATE_MS);
  400dac:	2028      	movs	r0, #40	; 0x28
  400dae:	4b0a      	ldr	r3, [pc, #40]	; (400dd8 <vPvTrackerTask+0x8c>)
  400db0:	4798      	blx	r3
    }
  400db2:	e7d9      	b.n	400d68 <vPvTrackerTask+0x1c>
  400db4:	40018000 	.word	0x40018000
  400db8:	0040058d 	.word	0x0040058d
  400dbc:	004004a5 	.word	0x004004a5
  400dc0:	00400551 	.word	0x00400551
  400dc4:	00400515 	.word	0x00400515
  400dc8:	20000494 	.word	0x20000494
  400dcc:	200004ea 	.word	0x200004ea
  400dd0:	004013ed 	.word	0x004013ed
  400dd4:	00401819 	.word	0x00401819
  400dd8:	00406345 	.word	0x00406345

00400ddc <vPvTrackerInit>:
}

void vPvTrackerInit(void)
{
  400ddc:	b580      	push	{r7, lr}
  400dde:	af00      	add	r7, sp, #0
    /* Initialize all peripherals */
    /* Initialize TWI Port */
    //InitTwiRTOS();
	InitTWI();
  400de0:	4b04      	ldr	r3, [pc, #16]	; (400df4 <vPvTrackerInit+0x18>)
  400de2:	4798      	blx	r3
	/* Init TWI ADC */

	/* Initialize Variables from EEPROM */
    InitVars(); 
  400de4:	4b04      	ldr	r3, [pc, #16]	; (400df8 <vPvTrackerInit+0x1c>)
  400de6:	4798      	blx	r3
    
    /* Init Motor Controller */
	#ifndef MOTOR_CTRL_A4955
	#else
		/* Put driver in sleep mode */
		gpio_set_pin_low(PIN_MOTOR_SLP_IDX);
  400de8:	2022      	movs	r0, #34	; 0x22
  400dea:	4b04      	ldr	r3, [pc, #16]	; (400dfc <vPvTrackerInit+0x20>)
  400dec:	4798      	blx	r3
	#endif
}
  400dee:	bf00      	nop
  400df0:	bd80      	pop	{r7, pc}
  400df2:	bf00      	nop
  400df4:	0040139d 	.word	0x0040139d
  400df8:	00400e01 	.word	0x00400e01
  400dfc:	00404709 	.word	0x00404709

00400e00 <InitVars>:

/* Initializes RAM variables from Ext. EERPOM */
void InitVars(void)
{
  400e00:	b590      	push	{r4, r7, lr}
  400e02:	b08f      	sub	sp, #60	; 0x3c
  400e04:	af02      	add	r7, sp, #8
    uint16_t *ptr;
	uint8_t *ptr8;

	uint8_t memBuff[(EE_REG_DEFCONFIG - EE_REG_BASE) + 1];
    /* Read vars from Memory */
	ReadEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_BASE, memBuff, (EE_REG_DEFCONFIG - EE_REG_BASE) + 1);
  400e06:	463a      	mov	r2, r7
  400e08:	2325      	movs	r3, #37	; 0x25
  400e0a:	9300      	str	r3, [sp, #0]
  400e0c:	4613      	mov	r3, r2
  400e0e:	2200      	movs	r2, #0
  400e10:	2150      	movs	r1, #80	; 0x50
  400e12:	4896      	ldr	r0, [pc, #600]	; (40106c <InitVars+0x26c>)
  400e14:	4c96      	ldr	r4, [pc, #600]	; (401070 <InitVars+0x270>)
  400e16:	47a0      	blx	r4
	
	#ifndef FORCE_WRITE_DEF_VALS
		/* Check for known value in default config register */
		if(memBuff[(EE_REG_DEFCONFIG - EE_REG_BASE)] == 0xAB)
  400e18:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
  400e1c:	2bab      	cmp	r3, #171	; 0xab
  400e1e:	f040 8193 	bne.w	401148 <InitVars+0x348>
		{
			/* Configuration already exists, load values from EEPROM */
		
			/* Update LATL and LATH Regs */
			mBusRegs[MBUS_REG_LATL] = memBuff[EE_REG_LAT1 - EE_REG_BASE];
  400e22:	787b      	ldrb	r3, [r7, #1]
  400e24:	b29a      	uxth	r2, r3
  400e26:	4b93      	ldr	r3, [pc, #588]	; (401074 <InitVars+0x274>)
  400e28:	821a      	strh	r2, [r3, #16]
			mBusRegs[MBUS_REG_LATL] = (mBusRegs[MBUS_REG_LATL]<<8) | memBuff[EE_REG_LAT0 - EE_REG_BASE];
  400e2a:	4b92      	ldr	r3, [pc, #584]	; (401074 <InitVars+0x274>)
  400e2c:	8a1b      	ldrh	r3, [r3, #16]
  400e2e:	021b      	lsls	r3, r3, #8
  400e30:	b21a      	sxth	r2, r3
  400e32:	783b      	ldrb	r3, [r7, #0]
  400e34:	b21b      	sxth	r3, r3
  400e36:	4313      	orrs	r3, r2
  400e38:	b21b      	sxth	r3, r3
  400e3a:	b29a      	uxth	r2, r3
  400e3c:	4b8d      	ldr	r3, [pc, #564]	; (401074 <InitVars+0x274>)
  400e3e:	821a      	strh	r2, [r3, #16]
			mBusRegs[MBUS_REG_LATH] = memBuff[EE_REG_LAT3 - EE_REG_BASE];
  400e40:	78fb      	ldrb	r3, [r7, #3]
  400e42:	b29a      	uxth	r2, r3
  400e44:	4b8b      	ldr	r3, [pc, #556]	; (401074 <InitVars+0x274>)
  400e46:	825a      	strh	r2, [r3, #18]
			mBusRegs[MBUS_REG_LATH] = (mBusRegs[MBUS_REG_LATH]<<8) | memBuff[EE_REG_LAT2 - EE_REG_BASE];
  400e48:	4b8a      	ldr	r3, [pc, #552]	; (401074 <InitVars+0x274>)
  400e4a:	8a5b      	ldrh	r3, [r3, #18]
  400e4c:	021b      	lsls	r3, r3, #8
  400e4e:	b21a      	sxth	r2, r3
  400e50:	78bb      	ldrb	r3, [r7, #2]
  400e52:	b21b      	sxth	r3, r3
  400e54:	4313      	orrs	r3, r2
  400e56:	b21b      	sxth	r3, r3
  400e58:	b29a      	uxth	r2, r3
  400e5a:	4b86      	ldr	r3, [pc, #536]	; (401074 <InitVars+0x274>)
  400e5c:	825a      	strh	r2, [r3, #18]
		
			/* Update LONL and LONH Regs */
			mBusRegs[MBUS_REG_LONL] = memBuff[EE_REG_LON1 - EE_REG_BASE];
  400e5e:	797b      	ldrb	r3, [r7, #5]
  400e60:	b29a      	uxth	r2, r3
  400e62:	4b84      	ldr	r3, [pc, #528]	; (401074 <InitVars+0x274>)
  400e64:	829a      	strh	r2, [r3, #20]
			mBusRegs[MBUS_REG_LONL] = (mBusRegs[MBUS_REG_LONL]<<8) | memBuff[EE_REG_LON0 - EE_REG_BASE];
  400e66:	4b83      	ldr	r3, [pc, #524]	; (401074 <InitVars+0x274>)
  400e68:	8a9b      	ldrh	r3, [r3, #20]
  400e6a:	021b      	lsls	r3, r3, #8
  400e6c:	b21a      	sxth	r2, r3
  400e6e:	793b      	ldrb	r3, [r7, #4]
  400e70:	b21b      	sxth	r3, r3
  400e72:	4313      	orrs	r3, r2
  400e74:	b21b      	sxth	r3, r3
  400e76:	b29a      	uxth	r2, r3
  400e78:	4b7e      	ldr	r3, [pc, #504]	; (401074 <InitVars+0x274>)
  400e7a:	829a      	strh	r2, [r3, #20]
			mBusRegs[MBUS_REG_LONH] = memBuff[EE_REG_LON3 - EE_REG_BASE];
  400e7c:	79fb      	ldrb	r3, [r7, #7]
  400e7e:	b29a      	uxth	r2, r3
  400e80:	4b7c      	ldr	r3, [pc, #496]	; (401074 <InitVars+0x274>)
  400e82:	82da      	strh	r2, [r3, #22]
			mBusRegs[MBUS_REG_LONH] = (mBusRegs[MBUS_REG_LONH]<<8) | memBuff[EE_REG_LON2 - EE_REG_BASE];
  400e84:	4b7b      	ldr	r3, [pc, #492]	; (401074 <InitVars+0x274>)
  400e86:	8adb      	ldrh	r3, [r3, #22]
  400e88:	021b      	lsls	r3, r3, #8
  400e8a:	b21a      	sxth	r2, r3
  400e8c:	79bb      	ldrb	r3, [r7, #6]
  400e8e:	b21b      	sxth	r3, r3
  400e90:	4313      	orrs	r3, r2
  400e92:	b21b      	sxth	r3, r3
  400e94:	b29a      	uxth	r2, r3
  400e96:	4b77      	ldr	r3, [pc, #476]	; (401074 <InitVars+0x274>)
  400e98:	82da      	strh	r2, [r3, #22]
		
			/* Update TZL and TZH Regs */
			mBusRegs[MBUS_REG_TZL] = memBuff[EE_REG_TZ1 - EE_REG_BASE];
  400e9a:	7a7b      	ldrb	r3, [r7, #9]
  400e9c:	b29a      	uxth	r2, r3
  400e9e:	4b75      	ldr	r3, [pc, #468]	; (401074 <InitVars+0x274>)
  400ea0:	831a      	strh	r2, [r3, #24]
			mBusRegs[MBUS_REG_TZL] = (mBusRegs[MBUS_REG_TZL]<<8) | memBuff[EE_REG_TZ0 - EE_REG_BASE];
  400ea2:	4b74      	ldr	r3, [pc, #464]	; (401074 <InitVars+0x274>)
  400ea4:	8b1b      	ldrh	r3, [r3, #24]
  400ea6:	021b      	lsls	r3, r3, #8
  400ea8:	b21a      	sxth	r2, r3
  400eaa:	7a3b      	ldrb	r3, [r7, #8]
  400eac:	b21b      	sxth	r3, r3
  400eae:	4313      	orrs	r3, r2
  400eb0:	b21b      	sxth	r3, r3
  400eb2:	b29a      	uxth	r2, r3
  400eb4:	4b6f      	ldr	r3, [pc, #444]	; (401074 <InitVars+0x274>)
  400eb6:	831a      	strh	r2, [r3, #24]
			mBusRegs[MBUS_REG_TZH] = memBuff[EE_REG_TZ3 - EE_REG_BASE];
  400eb8:	7afb      	ldrb	r3, [r7, #11]
  400eba:	b29a      	uxth	r2, r3
  400ebc:	4b6d      	ldr	r3, [pc, #436]	; (401074 <InitVars+0x274>)
  400ebe:	835a      	strh	r2, [r3, #26]
			mBusRegs[MBUS_REG_TZH] = (mBusRegs[MBUS_REG_TZH]<<8) | memBuff[EE_REG_TZ2 - EE_REG_BASE];
  400ec0:	4b6c      	ldr	r3, [pc, #432]	; (401074 <InitVars+0x274>)
  400ec2:	8b5b      	ldrh	r3, [r3, #26]
  400ec4:	021b      	lsls	r3, r3, #8
  400ec6:	b21a      	sxth	r2, r3
  400ec8:	7abb      	ldrb	r3, [r7, #10]
  400eca:	b21b      	sxth	r3, r3
  400ecc:	4313      	orrs	r3, r2
  400ece:	b21b      	sxth	r3, r3
  400ed0:	b29a      	uxth	r2, r3
  400ed2:	4b68      	ldr	r3, [pc, #416]	; (401074 <InitVars+0x274>)
  400ed4:	835a      	strh	r2, [r3, #26]
		
			/* Update DISTL and DISTH Regs */
			mBusRegs[MBUS_REG_DISTL] = memBuff[EE_REG_DIST1 - EE_REG_BASE];
  400ed6:	7b7b      	ldrb	r3, [r7, #13]
  400ed8:	b29a      	uxth	r2, r3
  400eda:	4b66      	ldr	r3, [pc, #408]	; (401074 <InitVars+0x274>)
  400edc:	879a      	strh	r2, [r3, #60]	; 0x3c
			mBusRegs[MBUS_REG_DISTL] = (mBusRegs[MBUS_REG_DISTL]<<8) | memBuff[EE_REG_DIST0 - EE_REG_BASE];
  400ede:	4b65      	ldr	r3, [pc, #404]	; (401074 <InitVars+0x274>)
  400ee0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
  400ee2:	021b      	lsls	r3, r3, #8
  400ee4:	b21a      	sxth	r2, r3
  400ee6:	7b3b      	ldrb	r3, [r7, #12]
  400ee8:	b21b      	sxth	r3, r3
  400eea:	4313      	orrs	r3, r2
  400eec:	b21b      	sxth	r3, r3
  400eee:	b29a      	uxth	r2, r3
  400ef0:	4b60      	ldr	r3, [pc, #384]	; (401074 <InitVars+0x274>)
  400ef2:	879a      	strh	r2, [r3, #60]	; 0x3c
			mBusRegs[MBUS_REG_DISTH] = memBuff[EE_REG_DIST3 - EE_REG_BASE];
  400ef4:	7bfb      	ldrb	r3, [r7, #15]
  400ef6:	b29a      	uxth	r2, r3
  400ef8:	4b5e      	ldr	r3, [pc, #376]	; (401074 <InitVars+0x274>)
  400efa:	87da      	strh	r2, [r3, #62]	; 0x3e
			mBusRegs[MBUS_REG_DISTH] = (mBusRegs[MBUS_REG_DISTH]<<8) | memBuff[EE_REG_DIST2 - EE_REG_BASE];
  400efc:	4b5d      	ldr	r3, [pc, #372]	; (401074 <InitVars+0x274>)
  400efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
  400f00:	021b      	lsls	r3, r3, #8
  400f02:	b21a      	sxth	r2, r3
  400f04:	7bbb      	ldrb	r3, [r7, #14]
  400f06:	b21b      	sxth	r3, r3
  400f08:	4313      	orrs	r3, r2
  400f0a:	b21b      	sxth	r3, r3
  400f0c:	b29a      	uxth	r2, r3
  400f0e:	4b59      	ldr	r3, [pc, #356]	; (401074 <InitVars+0x274>)
  400f10:	87da      	strh	r2, [r3, #62]	; 0x3e

			/* Update WIDTHL and WIDTH Regs */
			mBusRegs[MBUS_REG_WIDTHL] = memBuff[EE_REG_WIDTH1 - EE_REG_BASE];
  400f12:	7c7b      	ldrb	r3, [r7, #17]
  400f14:	b29a      	uxth	r2, r3
  400f16:	4b57      	ldr	r3, [pc, #348]	; (401074 <InitVars+0x274>)
  400f18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			mBusRegs[MBUS_REG_WIDTHL] = (mBusRegs[MBUS_REG_WIDTHL]<<8) | memBuff[EE_REG_WIDTH0 - EE_REG_BASE];
  400f1c:	4b55      	ldr	r3, [pc, #340]	; (401074 <InitVars+0x274>)
  400f1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
  400f22:	021b      	lsls	r3, r3, #8
  400f24:	b21a      	sxth	r2, r3
  400f26:	7c3b      	ldrb	r3, [r7, #16]
  400f28:	b21b      	sxth	r3, r3
  400f2a:	4313      	orrs	r3, r2
  400f2c:	b21b      	sxth	r3, r3
  400f2e:	b29a      	uxth	r2, r3
  400f30:	4b50      	ldr	r3, [pc, #320]	; (401074 <InitVars+0x274>)
  400f32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			mBusRegs[MBUS_REG_WIDTHH] = memBuff[EE_REG_WIDTH3 - EE_REG_BASE];
  400f36:	7cfb      	ldrb	r3, [r7, #19]
  400f38:	b29a      	uxth	r2, r3
  400f3a:	4b4e      	ldr	r3, [pc, #312]	; (401074 <InitVars+0x274>)
  400f3c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			mBusRegs[MBUS_REG_WIDTHH] = (mBusRegs[MBUS_REG_WIDTHH]<<8) | memBuff[EE_REG_WIDTH2 - EE_REG_BASE];
  400f40:	4b4c      	ldr	r3, [pc, #304]	; (401074 <InitVars+0x274>)
  400f42:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
  400f46:	021b      	lsls	r3, r3, #8
  400f48:	b21a      	sxth	r2, r3
  400f4a:	7cbb      	ldrb	r3, [r7, #18]
  400f4c:	b21b      	sxth	r3, r3
  400f4e:	4313      	orrs	r3, r2
  400f50:	b21b      	sxth	r3, r3
  400f52:	b29a      	uxth	r2, r3
  400f54:	4b47      	ldr	r3, [pc, #284]	; (401074 <InitVars+0x274>)
  400f56:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

			/* Update PNLRNGL and PNLRNGH Regs */
			mBusRegs[MBUS_REG_PNLRNGL] = memBuff[EE_REG_PNLRNG1 - EE_REG_BASE];
  400f5a:	7d7b      	ldrb	r3, [r7, #21]
  400f5c:	b29a      	uxth	r2, r3
  400f5e:	4b45      	ldr	r3, [pc, #276]	; (401074 <InitVars+0x274>)
  400f60:	849a      	strh	r2, [r3, #36]	; 0x24
			mBusRegs[MBUS_REG_PNLRNGL] = (mBusRegs[MBUS_REG_PNLRNGL]<<8) | memBuff[EE_REG_PNLRNG0 - EE_REG_BASE];
  400f62:	4b44      	ldr	r3, [pc, #272]	; (401074 <InitVars+0x274>)
  400f64:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  400f66:	021b      	lsls	r3, r3, #8
  400f68:	b21a      	sxth	r2, r3
  400f6a:	7d3b      	ldrb	r3, [r7, #20]
  400f6c:	b21b      	sxth	r3, r3
  400f6e:	4313      	orrs	r3, r2
  400f70:	b21b      	sxth	r3, r3
  400f72:	b29a      	uxth	r2, r3
  400f74:	4b3f      	ldr	r3, [pc, #252]	; (401074 <InitVars+0x274>)
  400f76:	849a      	strh	r2, [r3, #36]	; 0x24
			mBusRegs[MBUS_REG_PNLRNGH] = memBuff[EE_REG_PNLRNG3 - EE_REG_BASE];
  400f78:	7dfb      	ldrb	r3, [r7, #23]
  400f7a:	b29a      	uxth	r2, r3
  400f7c:	4b3d      	ldr	r3, [pc, #244]	; (401074 <InitVars+0x274>)
  400f7e:	84da      	strh	r2, [r3, #38]	; 0x26
			mBusRegs[MBUS_REG_PNLRNGH] = (mBusRegs[MBUS_REG_PNLRNGH]<<8) | memBuff[EE_REG_PNLRNG2 - EE_REG_BASE];
  400f80:	4b3c      	ldr	r3, [pc, #240]	; (401074 <InitVars+0x274>)
  400f82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
  400f84:	021b      	lsls	r3, r3, #8
  400f86:	b21a      	sxth	r2, r3
  400f88:	7dbb      	ldrb	r3, [r7, #22]
  400f8a:	b21b      	sxth	r3, r3
  400f8c:	4313      	orrs	r3, r2
  400f8e:	b21b      	sxth	r3, r3
  400f90:	b29a      	uxth	r2, r3
  400f92:	4b38      	ldr	r3, [pc, #224]	; (401074 <InitVars+0x274>)
  400f94:	84da      	strh	r2, [r3, #38]	; 0x26

			/* Update BKPARAM1L and BKPARAM1H Regs */
			mBusRegs[MBUS_REG_BKPARAM1L] = memBuff[EE_REG_BKPARAM11 - EE_REG_BASE];
  400f96:	7e7b      	ldrb	r3, [r7, #25]
  400f98:	b29a      	uxth	r2, r3
  400f9a:	4b36      	ldr	r3, [pc, #216]	; (401074 <InitVars+0x274>)
  400f9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			mBusRegs[MBUS_REG_BKPARAM1L] = (mBusRegs[MBUS_REG_BKPARAM1L]<<8) | memBuff[EE_REG_BKPARAM10 - EE_REG_BASE];
  400fa0:	4b34      	ldr	r3, [pc, #208]	; (401074 <InitVars+0x274>)
  400fa2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
  400fa6:	021b      	lsls	r3, r3, #8
  400fa8:	b21a      	sxth	r2, r3
  400faa:	7e3b      	ldrb	r3, [r7, #24]
  400fac:	b21b      	sxth	r3, r3
  400fae:	4313      	orrs	r3, r2
  400fb0:	b21b      	sxth	r3, r3
  400fb2:	b29a      	uxth	r2, r3
  400fb4:	4b2f      	ldr	r3, [pc, #188]	; (401074 <InitVars+0x274>)
  400fb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			mBusRegs[MBUS_REG_BKPARAM1H] = memBuff[EE_REG_BKPARAM13 - EE_REG_BASE];
  400fba:	7efb      	ldrb	r3, [r7, #27]
  400fbc:	b29a      	uxth	r2, r3
  400fbe:	4b2d      	ldr	r3, [pc, #180]	; (401074 <InitVars+0x274>)
  400fc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			mBusRegs[MBUS_REG_BKPARAM1H] = (mBusRegs[MBUS_REG_BKPARAM1H]<<8) | memBuff[EE_REG_BKPARAM12 - EE_REG_BASE];
  400fc4:	4b2b      	ldr	r3, [pc, #172]	; (401074 <InitVars+0x274>)
  400fc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
  400fca:	021b      	lsls	r3, r3, #8
  400fcc:	b21a      	sxth	r2, r3
  400fce:	7ebb      	ldrb	r3, [r7, #26]
  400fd0:	b21b      	sxth	r3, r3
  400fd2:	4313      	orrs	r3, r2
  400fd4:	b21b      	sxth	r3, r3
  400fd6:	b29a      	uxth	r2, r3
  400fd8:	4b26      	ldr	r3, [pc, #152]	; (401074 <InitVars+0x274>)
  400fda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			/* Update BKPARAM2L and BKPARAM2H Regs */
			mBusRegs[MBUS_REG_BKPARAM2L] = memBuff[EE_REG_BKPARAM21 - EE_REG_BASE];
  400fde:	7f7b      	ldrb	r3, [r7, #29]
  400fe0:	b29a      	uxth	r2, r3
  400fe2:	4b24      	ldr	r3, [pc, #144]	; (401074 <InitVars+0x274>)
  400fe4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			mBusRegs[MBUS_REG_BKPARAM2L] = (mBusRegs[MBUS_REG_BKPARAM2L]<<8) | memBuff[EE_REG_BKPARAM20 - EE_REG_BASE];
  400fe8:	4b22      	ldr	r3, [pc, #136]	; (401074 <InitVars+0x274>)
  400fea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
  400fee:	021b      	lsls	r3, r3, #8
  400ff0:	b21a      	sxth	r2, r3
  400ff2:	7f3b      	ldrb	r3, [r7, #28]
  400ff4:	b21b      	sxth	r3, r3
  400ff6:	4313      	orrs	r3, r2
  400ff8:	b21b      	sxth	r3, r3
  400ffa:	b29a      	uxth	r2, r3
  400ffc:	4b1d      	ldr	r3, [pc, #116]	; (401074 <InitVars+0x274>)
  400ffe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			mBusRegs[MBUS_REG_BKPARAM2H] = memBuff[EE_REG_BKPARAM23 - EE_REG_BASE];
  401002:	7ffb      	ldrb	r3, [r7, #31]
  401004:	b29a      	uxth	r2, r3
  401006:	4b1b      	ldr	r3, [pc, #108]	; (401074 <InitVars+0x274>)
  401008:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			mBusRegs[MBUS_REG_BKPARAM2H] = (mBusRegs[MBUS_REG_BKPARAM2H]<<8) | memBuff[EE_REG_BKPARAM22 - EE_REG_BASE];
  40100c:	4b19      	ldr	r3, [pc, #100]	; (401074 <InitVars+0x274>)
  40100e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
  401012:	021b      	lsls	r3, r3, #8
  401014:	b21a      	sxth	r2, r3
  401016:	7fbb      	ldrb	r3, [r7, #30]
  401018:	b21b      	sxth	r3, r3
  40101a:	4313      	orrs	r3, r2
  40101c:	b21b      	sxth	r3, r3
  40101e:	b29a      	uxth	r2, r3
  401020:	4b14      	ldr	r3, [pc, #80]	; (401074 <InitVars+0x274>)
  401022:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			/* Cleaning Mode Direction Reg */
			mBusRegs[MBUS_REG_CLMODEDIR] = memBuff[EE_REG_CLMODEDIR - EE_REG_BASE];
  401026:	f897 3020 	ldrb.w	r3, [r7, #32]
  40102a:	b29a      	uxth	r2, r3
  40102c:	4b11      	ldr	r3, [pc, #68]	; (401074 <InitVars+0x274>)
  40102e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			
			/* MODBUS Slave Address Register */
			mBusRegs[MBUS_REG_SLA] = memBuff[EE_REG_SLA - EE_REG_BASE];
  401032:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  401036:	b29a      	uxth	r2, r3
  401038:	4b0e      	ldr	r3, [pc, #56]	; (401074 <InitVars+0x274>)
  40103a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			/* MODBUS Baudrate Register */
			mBusRegs[MBUS_REG_BAUDRATE] = memBuff[EE_REG_BAUDRATE - EE_REG_BASE];
  40103e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  401042:	b29a      	uxth	r2, r3
  401044:	4b0b      	ldr	r3, [pc, #44]	; (401074 <InitVars+0x274>)
  401046:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			/* MODBUS Parity Register */
			mBusRegs[MBUS_REG_PARITY] = memBuff[EE_REG_PARITY - EE_REG_BASE];
  40104a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40104e:	b29a      	uxth	r2, r3
  401050:	4b08      	ldr	r3, [pc, #32]	; (401074 <InitVars+0x274>)
  401052:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

			/* Init local vars */
			ptr = (uint16_t*)&lat;
  401056:	4b08      	ldr	r3, [pc, #32]	; (401078 <InitVars+0x278>)
  401058:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_LATH];
  40105a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40105c:	3302      	adds	r3, #2
  40105e:	4a05      	ldr	r2, [pc, #20]	; (401074 <InitVars+0x274>)
  401060:	8a52      	ldrh	r2, [r2, #18]
  401062:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_LATL];
  401064:	4b03      	ldr	r3, [pc, #12]	; (401074 <InitVars+0x274>)
  401066:	8a1a      	ldrh	r2, [r3, #16]
  401068:	e008      	b.n	40107c <InitVars+0x27c>
  40106a:	bf00      	nop
  40106c:	40018000 	.word	0x40018000
  401070:	0040028d 	.word	0x0040028d
  401074:	20000494 	.word	0x20000494
  401078:	2000000c 	.word	0x2000000c
  40107c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40107e:	801a      	strh	r2, [r3, #0]
			ptr = (uint16_t*)&lon;
  401080:	4b29      	ldr	r3, [pc, #164]	; (401128 <InitVars+0x328>)
  401082:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_LONH];
  401084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401086:	3302      	adds	r3, #2
  401088:	4a28      	ldr	r2, [pc, #160]	; (40112c <InitVars+0x32c>)
  40108a:	8ad2      	ldrh	r2, [r2, #22]
  40108c:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_LONL];
  40108e:	4b27      	ldr	r3, [pc, #156]	; (40112c <InitVars+0x32c>)
  401090:	8a9a      	ldrh	r2, [r3, #20]
  401092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401094:	801a      	strh	r2, [r3, #0]
			ptr = (uint16_t*)&timeZone;
  401096:	4b26      	ldr	r3, [pc, #152]	; (401130 <InitVars+0x330>)
  401098:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_TZH];
  40109a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40109c:	3302      	adds	r3, #2
  40109e:	4a23      	ldr	r2, [pc, #140]	; (40112c <InitVars+0x32c>)
  4010a0:	8b52      	ldrh	r2, [r2, #26]
  4010a2:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_TZL];
  4010a4:	4b21      	ldr	r3, [pc, #132]	; (40112c <InitVars+0x32c>)
  4010a6:	8b1a      	ldrh	r2, [r3, #24]
  4010a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4010aa:	801a      	strh	r2, [r3, #0]
			ptr = (uint16_t*)&width;
  4010ac:	4b21      	ldr	r3, [pc, #132]	; (401134 <InitVars+0x334>)
  4010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_WIDTHH];
  4010b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4010b2:	3302      	adds	r3, #2
  4010b4:	4a1d      	ldr	r2, [pc, #116]	; (40112c <InitVars+0x32c>)
  4010b6:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
  4010ba:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_WIDTHL];
  4010bc:	4b1b      	ldr	r3, [pc, #108]	; (40112c <InitVars+0x32c>)
  4010be:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
  4010c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4010c4:	801a      	strh	r2, [r3, #0]
			ptr = (uint16_t*)&dist;
  4010c6:	4b1c      	ldr	r3, [pc, #112]	; (401138 <InitVars+0x338>)
  4010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_DISTH];
  4010ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4010cc:	3302      	adds	r3, #2
  4010ce:	4a17      	ldr	r2, [pc, #92]	; (40112c <InitVars+0x32c>)
  4010d0:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
  4010d2:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_DISTL];
  4010d4:	4b15      	ldr	r3, [pc, #84]	; (40112c <InitVars+0x32c>)
  4010d6:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
  4010d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4010da:	801a      	strh	r2, [r3, #0]
			ptr = (uint16_t*)&pvAngleRng;
  4010dc:	4b17      	ldr	r3, [pc, #92]	; (40113c <InitVars+0x33c>)
  4010de:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_PNLRNGH];
  4010e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4010e2:	3302      	adds	r3, #2
  4010e4:	4a11      	ldr	r2, [pc, #68]	; (40112c <InitVars+0x32c>)
  4010e6:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
  4010e8:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_PNLRNGL];
  4010ea:	4b10      	ldr	r3, [pc, #64]	; (40112c <InitVars+0x32c>)
  4010ec:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
  4010ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4010f0:	801a      	strh	r2, [r3, #0]
			ptr = (uint16_t*)&bkTrkParam1;
  4010f2:	4b13      	ldr	r3, [pc, #76]	; (401140 <InitVars+0x340>)
  4010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_BKPARAM1H];
  4010f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4010f8:	3302      	adds	r3, #2
  4010fa:	4a0c      	ldr	r2, [pc, #48]	; (40112c <InitVars+0x32c>)
  4010fc:	f8b2 2046 	ldrh.w	r2, [r2, #70]	; 0x46
  401100:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_BKPARAM1L];
  401102:	4b0a      	ldr	r3, [pc, #40]	; (40112c <InitVars+0x32c>)
  401104:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
  401108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40110a:	801a      	strh	r2, [r3, #0]
			ptr = (uint16_t*)&bkTrkParam2;
  40110c:	4b0d      	ldr	r3, [pc, #52]	; (401144 <InitVars+0x344>)
  40110e:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_BKPARAM2H];
  401110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401112:	3302      	adds	r3, #2
  401114:	4a05      	ldr	r2, [pc, #20]	; (40112c <InitVars+0x32c>)
  401116:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
  40111a:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_BKPARAM2L];
  40111c:	4b03      	ldr	r3, [pc, #12]	; (40112c <InitVars+0x32c>)
  40111e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
  401122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401124:	801a      	strh	r2, [r3, #0]
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_PARITY, (uint8_t*)&mBusRegs[MBUS_REG_PARITY], 1);

			memBuff[0] = 0xAB;
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_DEFCONFIG, memBuff, 1);
		}
}
  401126:	e109      	b.n	40133c <InitVars+0x53c>
  401128:	20000010 	.word	0x20000010
  40112c:	20000494 	.word	0x20000494
  401130:	20000014 	.word	0x20000014
  401134:	2000001c 	.word	0x2000001c
  401138:	20000018 	.word	0x20000018
  40113c:	20000020 	.word	0x20000020
  401140:	20000024 	.word	0x20000024
  401144:	20000028 	.word	0x20000028
		}
		else
	#endif
		{
			/* First time programming, write default configuration to EEPROM */
			lat = 17.46608f; 
  401148:	4b7e      	ldr	r3, [pc, #504]	; (401344 <InitVars+0x544>)
  40114a:	4a7f      	ldr	r2, [pc, #508]	; (401348 <InitVars+0x548>)
  40114c:	601a      	str	r2, [r3, #0]
			lon = 78.44009f;
  40114e:	4b7f      	ldr	r3, [pc, #508]	; (40134c <InitVars+0x54c>)
  401150:	4a7f      	ldr	r2, [pc, #508]	; (401350 <InitVars+0x550>)
  401152:	601a      	str	r2, [r3, #0]
			timeZone = 5.5f;
  401154:	4b7f      	ldr	r3, [pc, #508]	; (401354 <InitVars+0x554>)
  401156:	4a80      	ldr	r2, [pc, #512]	; (401358 <InitVars+0x558>)
  401158:	601a      	str	r2, [r3, #0]
			dist = 5.0f;
  40115a:	4b80      	ldr	r3, [pc, #512]	; (40135c <InitVars+0x55c>)
  40115c:	4a80      	ldr	r2, [pc, #512]	; (401360 <InitVars+0x560>)
  40115e:	601a      	str	r2, [r3, #0]
			width = 2.0f;
  401160:	4b80      	ldr	r3, [pc, #512]	; (401364 <InitVars+0x564>)
  401162:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401166:	601a      	str	r2, [r3, #0]
			/* Panels will track +/-pvAngleRng degrees. */
			pvAngleRng = 43;
  401168:	4b7f      	ldr	r3, [pc, #508]	; (401368 <InitVars+0x568>)
  40116a:	4a80      	ldr	r2, [pc, #512]	; (40136c <InitVars+0x56c>)
  40116c:	601a      	str	r2, [r3, #0]
			//#warning "Backtracking Parameters uninitialized"
			/* Backtracking parameters */
			bkTrkParam1 = 0.028989f;
  40116e:	4b80      	ldr	r3, [pc, #512]	; (401370 <InitVars+0x570>)
  401170:	4a80      	ldr	r2, [pc, #512]	; (401374 <InitVars+0x574>)
  401172:	601a      	str	r2, [r3, #0]
			bkTrkParam2 = 1.575f;
  401174:	4b80      	ldr	r3, [pc, #512]	; (401378 <InitVars+0x578>)
  401176:	4a81      	ldr	r2, [pc, #516]	; (40137c <InitVars+0x57c>)
  401178:	601a      	str	r2, [r3, #0]
			/* Init MODBUS Regs */
			ptr = (uint16_t*)&lat;
  40117a:	4b72      	ldr	r3, [pc, #456]	; (401344 <InitVars+0x544>)
  40117c:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_LATH] = ptr[1];
  40117e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401180:	885a      	ldrh	r2, [r3, #2]
  401182:	4b7f      	ldr	r3, [pc, #508]	; (401380 <InitVars+0x580>)
  401184:	825a      	strh	r2, [r3, #18]
			mBusRegs[MBUS_REG_LATL] = ptr[0];
  401186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401188:	881a      	ldrh	r2, [r3, #0]
  40118a:	4b7d      	ldr	r3, [pc, #500]	; (401380 <InitVars+0x580>)
  40118c:	821a      	strh	r2, [r3, #16]
		
			ptr = (uint16_t*)&lon;
  40118e:	4b6f      	ldr	r3, [pc, #444]	; (40134c <InitVars+0x54c>)
  401190:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_LONH] = ptr[1];
  401192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401194:	885a      	ldrh	r2, [r3, #2]
  401196:	4b7a      	ldr	r3, [pc, #488]	; (401380 <InitVars+0x580>)
  401198:	82da      	strh	r2, [r3, #22]
			mBusRegs[MBUS_REG_LONL] = ptr[0];
  40119a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40119c:	881a      	ldrh	r2, [r3, #0]
  40119e:	4b78      	ldr	r3, [pc, #480]	; (401380 <InitVars+0x580>)
  4011a0:	829a      	strh	r2, [r3, #20]

			ptr = (uint16_t*)&timeZone;
  4011a2:	4b6c      	ldr	r3, [pc, #432]	; (401354 <InitVars+0x554>)
  4011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_TZH] = ptr[1];
  4011a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4011a8:	885a      	ldrh	r2, [r3, #2]
  4011aa:	4b75      	ldr	r3, [pc, #468]	; (401380 <InitVars+0x580>)
  4011ac:	835a      	strh	r2, [r3, #26]
			mBusRegs[MBUS_REG_TZL] = ptr[0];
  4011ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4011b0:	881a      	ldrh	r2, [r3, #0]
  4011b2:	4b73      	ldr	r3, [pc, #460]	; (401380 <InitVars+0x580>)
  4011b4:	831a      	strh	r2, [r3, #24]

			ptr = (uint16_t*)&width;
  4011b6:	4b6b      	ldr	r3, [pc, #428]	; (401364 <InitVars+0x564>)
  4011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_WIDTHH] = ptr[1];
  4011ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4011bc:	885a      	ldrh	r2, [r3, #2]
  4011be:	4b70      	ldr	r3, [pc, #448]	; (401380 <InitVars+0x580>)
  4011c0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			mBusRegs[MBUS_REG_WIDTHL] = ptr[0];
  4011c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4011c6:	881a      	ldrh	r2, [r3, #0]
  4011c8:	4b6d      	ldr	r3, [pc, #436]	; (401380 <InitVars+0x580>)
  4011ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			ptr = (uint16_t*)&dist;
  4011ce:	4b63      	ldr	r3, [pc, #396]	; (40135c <InitVars+0x55c>)
  4011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_DISTH] = ptr[1];
  4011d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4011d4:	885a      	ldrh	r2, [r3, #2]
  4011d6:	4b6a      	ldr	r3, [pc, #424]	; (401380 <InitVars+0x580>)
  4011d8:	87da      	strh	r2, [r3, #62]	; 0x3e
			mBusRegs[MBUS_REG_DISTL] = ptr[0];
  4011da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4011dc:	881a      	ldrh	r2, [r3, #0]
  4011de:	4b68      	ldr	r3, [pc, #416]	; (401380 <InitVars+0x580>)
  4011e0:	879a      	strh	r2, [r3, #60]	; 0x3c

			ptr = (uint16_t*)&pvAngleRng;
  4011e2:	4b61      	ldr	r3, [pc, #388]	; (401368 <InitVars+0x568>)
  4011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_PNLRNGH] = ptr[1];
  4011e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4011e8:	885a      	ldrh	r2, [r3, #2]
  4011ea:	4b65      	ldr	r3, [pc, #404]	; (401380 <InitVars+0x580>)
  4011ec:	84da      	strh	r2, [r3, #38]	; 0x26
			mBusRegs[MBUS_REG_PNLRNGL] = ptr[0];
  4011ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4011f0:	881a      	ldrh	r2, [r3, #0]
  4011f2:	4b63      	ldr	r3, [pc, #396]	; (401380 <InitVars+0x580>)
  4011f4:	849a      	strh	r2, [r3, #36]	; 0x24

			ptr = (uint16_t*)&bkTrkParam1;
  4011f6:	4b5e      	ldr	r3, [pc, #376]	; (401370 <InitVars+0x570>)
  4011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_BKPARAM1H] = ptr[1];
  4011fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4011fc:	885a      	ldrh	r2, [r3, #2]
  4011fe:	4b60      	ldr	r3, [pc, #384]	; (401380 <InitVars+0x580>)
  401200:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			mBusRegs[MBUS_REG_BKPARAM1L] = ptr[0];
  401204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401206:	881a      	ldrh	r2, [r3, #0]
  401208:	4b5d      	ldr	r3, [pc, #372]	; (401380 <InitVars+0x580>)
  40120a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

			ptr = (uint16_t*)&bkTrkParam2;
  40120e:	4b5a      	ldr	r3, [pc, #360]	; (401378 <InitVars+0x578>)
  401210:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_BKPARAM2H] = ptr[1];
  401212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401214:	885a      	ldrh	r2, [r3, #2]
  401216:	4b5a      	ldr	r3, [pc, #360]	; (401380 <InitVars+0x580>)
  401218:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			mBusRegs[MBUS_REG_BKPARAM2L] = ptr[0];
  40121c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40121e:	881a      	ldrh	r2, [r3, #0]
  401220:	4b57      	ldr	r3, [pc, #348]	; (401380 <InitVars+0x580>)
  401222:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			/* Cleaning Mode Direction Reg */
			mBusRegs[MBUS_REG_CLMODEDIR] = 0;
  401226:	4b56      	ldr	r3, [pc, #344]	; (401380 <InitVars+0x580>)
  401228:	2200      	movs	r2, #0
  40122a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			/* MODBUS Slave Address Register */
			mBusRegs[MBUS_REG_SLA] = 1;
  40122e:	4b54      	ldr	r3, [pc, #336]	; (401380 <InitVars+0x580>)
  401230:	2201      	movs	r2, #1
  401232:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			/* MODBUS Baudrate Register */
			mBusRegs[MBUS_REG_BAUDRATE] = 2;
  401236:	4b52      	ldr	r3, [pc, #328]	; (401380 <InitVars+0x580>)
  401238:	2202      	movs	r2, #2
  40123a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			/* MODBUS Parity Register */
			mBusRegs[MBUS_REG_PARITY] = 0;
  40123e:	4b50      	ldr	r3, [pc, #320]	; (401380 <InitVars+0x580>)
  401240:	2200      	movs	r2, #0
  401242:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

			/* Update EEPROM */
			ptr8 = (uint8_t *)&lat;
  401246:	4b3f      	ldr	r3, [pc, #252]	; (401344 <InitVars+0x544>)
  401248:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_LAT0, ptr8, 4);
  40124a:	2304      	movs	r3, #4
  40124c:	9300      	str	r3, [sp, #0]
  40124e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401250:	2200      	movs	r2, #0
  401252:	2150      	movs	r1, #80	; 0x50
  401254:	484b      	ldr	r0, [pc, #300]	; (401384 <InitVars+0x584>)
  401256:	4c4c      	ldr	r4, [pc, #304]	; (401388 <InitVars+0x588>)
  401258:	47a0      	blx	r4

			ptr8 = (uint8_t *)&lon;
  40125a:	4b3c      	ldr	r3, [pc, #240]	; (40134c <InitVars+0x54c>)
  40125c:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_LON0, ptr8, 4);
  40125e:	2304      	movs	r3, #4
  401260:	9300      	str	r3, [sp, #0]
  401262:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401264:	2204      	movs	r2, #4
  401266:	2150      	movs	r1, #80	; 0x50
  401268:	4846      	ldr	r0, [pc, #280]	; (401384 <InitVars+0x584>)
  40126a:	4c47      	ldr	r4, [pc, #284]	; (401388 <InitVars+0x588>)
  40126c:	47a0      	blx	r4

			ptr8 = (uint8_t *)&timeZone;
  40126e:	4b39      	ldr	r3, [pc, #228]	; (401354 <InitVars+0x554>)
  401270:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_TZ0, ptr8, 4);
  401272:	2304      	movs	r3, #4
  401274:	9300      	str	r3, [sp, #0]
  401276:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401278:	2208      	movs	r2, #8
  40127a:	2150      	movs	r1, #80	; 0x50
  40127c:	4841      	ldr	r0, [pc, #260]	; (401384 <InitVars+0x584>)
  40127e:	4c42      	ldr	r4, [pc, #264]	; (401388 <InitVars+0x588>)
  401280:	47a0      	blx	r4

			ptr8 = (uint8_t *)&width;
  401282:	4b38      	ldr	r3, [pc, #224]	; (401364 <InitVars+0x564>)
  401284:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_WIDTH0, ptr8, 4);
  401286:	2304      	movs	r3, #4
  401288:	9300      	str	r3, [sp, #0]
  40128a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40128c:	2210      	movs	r2, #16
  40128e:	2150      	movs	r1, #80	; 0x50
  401290:	483c      	ldr	r0, [pc, #240]	; (401384 <InitVars+0x584>)
  401292:	4c3d      	ldr	r4, [pc, #244]	; (401388 <InitVars+0x588>)
  401294:	47a0      	blx	r4

			ptr8 = (uint8_t *)&dist;
  401296:	4b31      	ldr	r3, [pc, #196]	; (40135c <InitVars+0x55c>)
  401298:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_DIST0, ptr8, 4);
  40129a:	2304      	movs	r3, #4
  40129c:	9300      	str	r3, [sp, #0]
  40129e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4012a0:	220c      	movs	r2, #12
  4012a2:	2150      	movs	r1, #80	; 0x50
  4012a4:	4837      	ldr	r0, [pc, #220]	; (401384 <InitVars+0x584>)
  4012a6:	4c38      	ldr	r4, [pc, #224]	; (401388 <InitVars+0x588>)
  4012a8:	47a0      	blx	r4

			ptr8 = (uint8_t *)&pvAngleRng;
  4012aa:	4b2f      	ldr	r3, [pc, #188]	; (401368 <InitVars+0x568>)
  4012ac:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_PNLRNG0, ptr8, 4);
  4012ae:	2304      	movs	r3, #4
  4012b0:	9300      	str	r3, [sp, #0]
  4012b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4012b4:	2214      	movs	r2, #20
  4012b6:	2150      	movs	r1, #80	; 0x50
  4012b8:	4832      	ldr	r0, [pc, #200]	; (401384 <InitVars+0x584>)
  4012ba:	4c33      	ldr	r4, [pc, #204]	; (401388 <InitVars+0x588>)
  4012bc:	47a0      	blx	r4

			ptr8 = (uint8_t *)&bkTrkParam1;
  4012be:	4b2c      	ldr	r3, [pc, #176]	; (401370 <InitVars+0x570>)
  4012c0:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_BKPARAM10, ptr8, 4);
  4012c2:	2304      	movs	r3, #4
  4012c4:	9300      	str	r3, [sp, #0]
  4012c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4012c8:	2218      	movs	r2, #24
  4012ca:	2150      	movs	r1, #80	; 0x50
  4012cc:	482d      	ldr	r0, [pc, #180]	; (401384 <InitVars+0x584>)
  4012ce:	4c2e      	ldr	r4, [pc, #184]	; (401388 <InitVars+0x588>)
  4012d0:	47a0      	blx	r4

			ptr8 = (uint8_t *)&bkTrkParam2;
  4012d2:	4b29      	ldr	r3, [pc, #164]	; (401378 <InitVars+0x578>)
  4012d4:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_BKPARAM20, ptr8, 4);
  4012d6:	2304      	movs	r3, #4
  4012d8:	9300      	str	r3, [sp, #0]
  4012da:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4012dc:	221c      	movs	r2, #28
  4012de:	2150      	movs	r1, #80	; 0x50
  4012e0:	4828      	ldr	r0, [pc, #160]	; (401384 <InitVars+0x584>)
  4012e2:	4c29      	ldr	r4, [pc, #164]	; (401388 <InitVars+0x588>)
  4012e4:	47a0      	blx	r4

			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_CLMODEDIR, (uint8_t*)&mBusRegs[MBUS_REG_CLMODEDIR], 1);
  4012e6:	2301      	movs	r3, #1
  4012e8:	9300      	str	r3, [sp, #0]
  4012ea:	4b28      	ldr	r3, [pc, #160]	; (40138c <InitVars+0x58c>)
  4012ec:	2220      	movs	r2, #32
  4012ee:	2150      	movs	r1, #80	; 0x50
  4012f0:	4824      	ldr	r0, [pc, #144]	; (401384 <InitVars+0x584>)
  4012f2:	4c25      	ldr	r4, [pc, #148]	; (401388 <InitVars+0x588>)
  4012f4:	47a0      	blx	r4
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_SLA, (uint8_t*)&mBusRegs[MBUS_REG_SLA], 1);
  4012f6:	2301      	movs	r3, #1
  4012f8:	9300      	str	r3, [sp, #0]
  4012fa:	4b25      	ldr	r3, [pc, #148]	; (401390 <InitVars+0x590>)
  4012fc:	2221      	movs	r2, #33	; 0x21
  4012fe:	2150      	movs	r1, #80	; 0x50
  401300:	4820      	ldr	r0, [pc, #128]	; (401384 <InitVars+0x584>)
  401302:	4c21      	ldr	r4, [pc, #132]	; (401388 <InitVars+0x588>)
  401304:	47a0      	blx	r4
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_BAUDRATE, (uint8_t*)&mBusRegs[MBUS_REG_BAUDRATE], 1);
  401306:	2301      	movs	r3, #1
  401308:	9300      	str	r3, [sp, #0]
  40130a:	4b22      	ldr	r3, [pc, #136]	; (401394 <InitVars+0x594>)
  40130c:	2222      	movs	r2, #34	; 0x22
  40130e:	2150      	movs	r1, #80	; 0x50
  401310:	481c      	ldr	r0, [pc, #112]	; (401384 <InitVars+0x584>)
  401312:	4c1d      	ldr	r4, [pc, #116]	; (401388 <InitVars+0x588>)
  401314:	47a0      	blx	r4
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_PARITY, (uint8_t*)&mBusRegs[MBUS_REG_PARITY], 1);
  401316:	2301      	movs	r3, #1
  401318:	9300      	str	r3, [sp, #0]
  40131a:	4b1f      	ldr	r3, [pc, #124]	; (401398 <InitVars+0x598>)
  40131c:	2223      	movs	r2, #35	; 0x23
  40131e:	2150      	movs	r1, #80	; 0x50
  401320:	4818      	ldr	r0, [pc, #96]	; (401384 <InitVars+0x584>)
  401322:	4c19      	ldr	r4, [pc, #100]	; (401388 <InitVars+0x588>)
  401324:	47a0      	blx	r4

			memBuff[0] = 0xAB;
  401326:	23ab      	movs	r3, #171	; 0xab
  401328:	703b      	strb	r3, [r7, #0]
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_DEFCONFIG, memBuff, 1);
  40132a:	463a      	mov	r2, r7
  40132c:	2301      	movs	r3, #1
  40132e:	9300      	str	r3, [sp, #0]
  401330:	4613      	mov	r3, r2
  401332:	2224      	movs	r2, #36	; 0x24
  401334:	2150      	movs	r1, #80	; 0x50
  401336:	4813      	ldr	r0, [pc, #76]	; (401384 <InitVars+0x584>)
  401338:	4c13      	ldr	r4, [pc, #76]	; (401388 <InitVars+0x588>)
  40133a:	47a0      	blx	r4
		}
}
  40133c:	bf00      	nop
  40133e:	3734      	adds	r7, #52	; 0x34
  401340:	46bd      	mov	sp, r7
  401342:	bd90      	pop	{r4, r7, pc}
  401344:	2000000c 	.word	0x2000000c
  401348:	418bba88 	.word	0x418bba88
  40134c:	20000010 	.word	0x20000010
  401350:	429ce153 	.word	0x429ce153
  401354:	20000014 	.word	0x20000014
  401358:	40b00000 	.word	0x40b00000
  40135c:	20000018 	.word	0x20000018
  401360:	40a00000 	.word	0x40a00000
  401364:	2000001c 	.word	0x2000001c
  401368:	20000020 	.word	0x20000020
  40136c:	422c0000 	.word	0x422c0000
  401370:	20000024 	.word	0x20000024
  401374:	3ced7a57 	.word	0x3ced7a57
  401378:	20000028 	.word	0x20000028
  40137c:	3fc9999a 	.word	0x3fc9999a
  401380:	20000494 	.word	0x20000494
  401384:	40018000 	.word	0x40018000
  401388:	004001cd 	.word	0x004001cd
  40138c:	200004e0 	.word	0x200004e0
  401390:	200004e2 	.word	0x200004e2
  401394:	200004e4 	.word	0x200004e4
  401398:	200004e6 	.word	0x200004e6

0040139c <InitTWI>:

static void InitTWI(void)
{
  40139c:	b580      	push	{r7, lr}
  40139e:	b084      	sub	sp, #16
  4013a0:	af00      	add	r7, sp, #0
	twi_options_t twiSettings = {
		sysclk_get_peripheral_hz(),
  4013a2:	4b0c      	ldr	r3, [pc, #48]	; (4013d4 <InitTWI+0x38>)
  4013a4:	4798      	blx	r3
  4013a6:	4603      	mov	r3, r0
		}
}

static void InitTWI(void)
{
	twi_options_t twiSettings = {
  4013a8:	607b      	str	r3, [r7, #4]
  4013aa:	4b0b      	ldr	r3, [pc, #44]	; (4013d8 <InitTWI+0x3c>)
  4013ac:	60bb      	str	r3, [r7, #8]
  4013ae:	2300      	movs	r3, #0
  4013b0:	733b      	strb	r3, [r7, #12]
  4013b2:	2300      	movs	r3, #0
  4013b4:	737b      	strb	r3, [r7, #13]
		400000,
		0,
		0
	};
	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_TWI_ID);
  4013b6:	2013      	movs	r0, #19
  4013b8:	4b08      	ldr	r3, [pc, #32]	; (4013dc <InitTWI+0x40>)
  4013ba:	4798      	blx	r3

	/* Enable TWI master mode */
	twi_enable_master_mode(BOARD_TWI);
  4013bc:	4808      	ldr	r0, [pc, #32]	; (4013e0 <InitTWI+0x44>)
  4013be:	4b09      	ldr	r3, [pc, #36]	; (4013e4 <InitTWI+0x48>)
  4013c0:	4798      	blx	r3

	/* Initialize TWI peripheral */
	twi_master_init(BOARD_TWI, &twiSettings);
  4013c2:	1d3b      	adds	r3, r7, #4
  4013c4:	4619      	mov	r1, r3
  4013c6:	4806      	ldr	r0, [pc, #24]	; (4013e0 <InitTWI+0x44>)
  4013c8:	4b07      	ldr	r3, [pc, #28]	; (4013e8 <InitTWI+0x4c>)
  4013ca:	4798      	blx	r3
}
  4013cc:	bf00      	nop
  4013ce:	3710      	adds	r7, #16
  4013d0:	46bd      	mov	sp, r7
  4013d2:	bd80      	pop	{r7, pc}
  4013d4:	00400cd1 	.word	0x00400cd1
  4013d8:	00061a80 	.word	0x00061a80
  4013dc:	00400ce5 	.word	0x00400ce5
  4013e0:	40018000 	.word	0x40018000
  4013e4:	00403799 	.word	0x00403799
  4013e8:	004037bd 	.word	0x004037bd

004013ec <PVTrack>:
// 	//InitTWI();
// 	twiPort = freertos_twi_master_init(BOARD_TWI, &settings);
// }

void PVTrack(void)
{
  4013ec:	b580      	push	{r7, lr}
  4013ee:	b084      	sub	sp, #16
  4013f0:	af00      	add	r7, sp, #0
//     while(ccStatus)
//     {
//         vTaskDelay(pdMS_TO_TICKS(10));
//     }
    
    taskENTER_CRITICAL();
  4013f2:	4b53      	ldr	r3, [pc, #332]	; (401540 <PVTrack+0x154>)
  4013f4:	4798      	blx	r3
    
    /* Read RTC */
	#ifndef DS3231_USE_RTOS_API
		DSGetTime(BOARD_TWI, (uint16_t *)&mBusRegs[MBUS_REG_SEC]);
  4013f6:	4953      	ldr	r1, [pc, #332]	; (401544 <PVTrack+0x158>)
  4013f8:	4853      	ldr	r0, [pc, #332]	; (401548 <PVTrack+0x15c>)
  4013fa:	4b54      	ldr	r3, [pc, #336]	; (40154c <PVTrack+0x160>)
  4013fc:	4798      	blx	r3
		DSGetFullDate(BOARD_TWI, (uint16_t *)&mBusRegs[MBUS_REG_DAY]);
  4013fe:	4954      	ldr	r1, [pc, #336]	; (401550 <PVTrack+0x164>)
  401400:	4851      	ldr	r0, [pc, #324]	; (401548 <PVTrack+0x15c>)
  401402:	4b54      	ldr	r3, [pc, #336]	; (401554 <PVTrack+0x168>)
  401404:	4798      	blx	r3
		DSGetTimeTo(twiPort, (uint16_t *)&mBusRegs[MBUS_REG_SEC], 50);
		DSGetFullDateTo(twiPort, (uint16_t *)&mBusRegs[MBUS_REG_DAY], 50);
	#endif
    
    /* Calculate PV Angle from time */
    pvAngle = GetPvAngle();
  401406:	4b54      	ldr	r3, [pc, #336]	; (401558 <PVTrack+0x16c>)
  401408:	4798      	blx	r3
  40140a:	60f8      	str	r0, [r7, #12]
		LogBuff[0] = ',';
		ConsoleWrite((uint8_t *)LogBuff, 1);
    #endif
    
    /* If not backtracking */
    if(!bkTrkFlg)
  40140c:	4b53      	ldr	r3, [pc, #332]	; (40155c <PVTrack+0x170>)
  40140e:	781b      	ldrb	r3, [r3, #0]
  401410:	2b00      	cmp	r3, #0
  401412:	d120      	bne.n	401456 <PVTrack+0x6a>
        #ifdef LOG_EN
            sprintf(LogBuff,"NA,");
			ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
        #endif
        /* If Angle between +/- pvAngleRng deg */
        if(pvAngle>= -pvAngleRng && pvAngle <= pvAngleRng)
  401414:	4b52      	ldr	r3, [pc, #328]	; (401560 <PVTrack+0x174>)
  401416:	681b      	ldr	r3, [r3, #0]
  401418:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
  40141c:	4b51      	ldr	r3, [pc, #324]	; (401564 <PVTrack+0x178>)
  40141e:	68f9      	ldr	r1, [r7, #12]
  401420:	4610      	mov	r0, r2
  401422:	4798      	blx	r3
  401424:	4603      	mov	r3, r0
  401426:	2b00      	cmp	r3, #0
  401428:	d00f      	beq.n	40144a <PVTrack+0x5e>
  40142a:	4b4d      	ldr	r3, [pc, #308]	; (401560 <PVTrack+0x174>)
  40142c:	681a      	ldr	r2, [r3, #0]
  40142e:	4b4d      	ldr	r3, [pc, #308]	; (401564 <PVTrack+0x178>)
  401430:	4611      	mov	r1, r2
  401432:	68f8      	ldr	r0, [r7, #12]
  401434:	4798      	blx	r3
  401436:	4603      	mov	r3, r0
  401438:	2b00      	cmp	r3, #0
  40143a:	d006      	beq.n	40144a <PVTrack+0x5e>
        {
            /* Rotate Motor */
            #ifndef LOG_EN
                GotoAngle(pvAngle);
  40143c:	68f8      	ldr	r0, [r7, #12]
  40143e:	4b4a      	ldr	r3, [pc, #296]	; (401568 <PVTrack+0x17c>)
  401440:	4798      	blx	r3
            #endif
			dispAngle = pvAngle;
  401442:	4a4a      	ldr	r2, [pc, #296]	; (40156c <PVTrack+0x180>)
  401444:	68fb      	ldr	r3, [r7, #12]
  401446:	6013      	str	r3, [r2, #0]
  401448:	e066      	b.n	401518 <PVTrack+0x12c>
			/*dispAdjustFlag  = 1;*/
        }
        else
        {
            bkTrkFlg = 1;
  40144a:	4b44      	ldr	r3, [pc, #272]	; (40155c <PVTrack+0x170>)
  40144c:	2201      	movs	r2, #1
  40144e:	701a      	strb	r2, [r3, #0]
			/*if(!dispAdjustFlag)*/
			{
				/* Adjust disp angle to -/+43 or 0 degs. */
				AdjustDispAngle();
  401450:	4b47      	ldr	r3, [pc, #284]	; (401570 <PVTrack+0x184>)
  401452:	4798      	blx	r3
  401454:	e060      	b.n	401518 <PVTrack+0x12c>
			}
        }
    }
    else
    {
        if(pvAngle>= -90 && pvAngle <= 90)
  401456:	4b47      	ldr	r3, [pc, #284]	; (401574 <PVTrack+0x188>)
  401458:	4947      	ldr	r1, [pc, #284]	; (401578 <PVTrack+0x18c>)
  40145a:	68f8      	ldr	r0, [r7, #12]
  40145c:	4798      	blx	r3
  40145e:	4603      	mov	r3, r0
  401460:	2b00      	cmp	r3, #0
  401462:	d037      	beq.n	4014d4 <PVTrack+0xe8>
  401464:	4b3f      	ldr	r3, [pc, #252]	; (401564 <PVTrack+0x178>)
  401466:	4945      	ldr	r1, [pc, #276]	; (40157c <PVTrack+0x190>)
  401468:	68f8      	ldr	r0, [r7, #12]
  40146a:	4798      	blx	r3
  40146c:	4603      	mov	r3, r0
  40146e:	2b00      	cmp	r3, #0
  401470:	d030      	beq.n	4014d4 <PVTrack+0xe8>
        {
            bkTrkAngle = GetPvBackTrackAngle(pvAngle);
  401472:	68f8      	ldr	r0, [r7, #12]
  401474:	4b42      	ldr	r3, [pc, #264]	; (401580 <PVTrack+0x194>)
  401476:	4798      	blx	r3
  401478:	60b8      	str	r0, [r7, #8]
            
            /* If bkTrkAngle is within +/- given range */ 
            if(bkTrkAngle>= -pvAngleRng && bkTrkAngle <= pvAngleRng)
  40147a:	4b39      	ldr	r3, [pc, #228]	; (401560 <PVTrack+0x174>)
  40147c:	681b      	ldr	r3, [r3, #0]
  40147e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
  401482:	4b38      	ldr	r3, [pc, #224]	; (401564 <PVTrack+0x178>)
  401484:	68b9      	ldr	r1, [r7, #8]
  401486:	4610      	mov	r0, r2
  401488:	4798      	blx	r3
  40148a:	4603      	mov	r3, r0
  40148c:	2b00      	cmp	r3, #0
  40148e:	d016      	beq.n	4014be <PVTrack+0xd2>
  401490:	4b33      	ldr	r3, [pc, #204]	; (401560 <PVTrack+0x174>)
  401492:	681a      	ldr	r2, [r3, #0]
  401494:	4b33      	ldr	r3, [pc, #204]	; (401564 <PVTrack+0x178>)
  401496:	4611      	mov	r1, r2
  401498:	68b8      	ldr	r0, [r7, #8]
  40149a:	4798      	blx	r3
  40149c:	4603      	mov	r3, r0
  40149e:	2b00      	cmp	r3, #0
  4014a0:	d00d      	beq.n	4014be <PVTrack+0xd2>
                #ifdef LOG_EN
                    PrintFlt(bkTrkAngle);
					LogBuff[0] = ',';
					ConsoleWrite((uint8_t *)LogBuff, 1);
                #endif
				dispAngle = bkTrkAngle;
  4014a2:	4a32      	ldr	r2, [pc, #200]	; (40156c <PVTrack+0x180>)
  4014a4:	68bb      	ldr	r3, [r7, #8]
  4014a6:	6013      	str	r3, [r2, #0]
                
                /* Rotate Motor */
                #ifndef LOG_EN
                    GotoAngle(bkTrkAngle);
  4014a8:	68b8      	ldr	r0, [r7, #8]
  4014aa:	4b2f      	ldr	r3, [pc, #188]	; (401568 <PVTrack+0x17c>)
  4014ac:	4798      	blx	r3
                #endif
				if(!bkAdjustFlag)
  4014ae:	4b35      	ldr	r3, [pc, #212]	; (401584 <PVTrack+0x198>)
  4014b0:	781b      	ldrb	r3, [r3, #0]
  4014b2:	2b00      	cmp	r3, #0
  4014b4:	d10d      	bne.n	4014d2 <PVTrack+0xe6>
				{
					bkAdjustFlag = 1;
  4014b6:	4b33      	ldr	r3, [pc, #204]	; (401584 <PVTrack+0x198>)
  4014b8:	2201      	movs	r2, #1
  4014ba:	701a      	strb	r2, [r3, #0]
                
                /* Rotate Motor */
                #ifndef LOG_EN
                    GotoAngle(bkTrkAngle);
                #endif
				if(!bkAdjustFlag)
  4014bc:	e009      	b.n	4014d2 <PVTrack+0xe6>
					bkAdjustFlag = 1;
				}
            }
            else
            {
                if(bkAdjustFlag)
  4014be:	4b31      	ldr	r3, [pc, #196]	; (401584 <PVTrack+0x198>)
  4014c0:	781b      	ldrb	r3, [r3, #0]
  4014c2:	2b00      	cmp	r3, #0
  4014c4:	d010      	beq.n	4014e8 <PVTrack+0xfc>
				{
					AdjustBktrkAngle();
  4014c6:	4b30      	ldr	r3, [pc, #192]	; (401588 <PVTrack+0x19c>)
  4014c8:	4798      	blx	r3
					bkAdjustFlag = 0;
  4014ca:	4b2e      	ldr	r3, [pc, #184]	; (401584 <PVTrack+0x198>)
  4014cc:	2200      	movs	r2, #0
  4014ce:	701a      	strb	r2, [r3, #0]
        if(pvAngle>= -90 && pvAngle <= 90)
        {
            bkTrkAngle = GetPvBackTrackAngle(pvAngle);
            
            /* If bkTrkAngle is within +/- given range */ 
            if(bkTrkAngle>= -pvAngleRng && bkTrkAngle <= pvAngleRng)
  4014d0:	e00a      	b.n	4014e8 <PVTrack+0xfc>
  4014d2:	e009      	b.n	4014e8 <PVTrack+0xfc>
				#endif
            }
        }
		else
		{
			if(bkAdjustFlag)
  4014d4:	4b2b      	ldr	r3, [pc, #172]	; (401584 <PVTrack+0x198>)
  4014d6:	781b      	ldrb	r3, [r3, #0]
  4014d8:	2b00      	cmp	r3, #0
  4014da:	d006      	beq.n	4014ea <PVTrack+0xfe>
			{
				AdjustBktrkAngle();
  4014dc:	4b2a      	ldr	r3, [pc, #168]	; (401588 <PVTrack+0x19c>)
  4014de:	4798      	blx	r3
				bkAdjustFlag = 0;
  4014e0:	4b28      	ldr	r3, [pc, #160]	; (401584 <PVTrack+0x198>)
  4014e2:	2200      	movs	r2, #0
  4014e4:	701a      	strb	r2, [r3, #0]
  4014e6:	e000      	b.n	4014ea <PVTrack+0xfe>
        if(pvAngle>= -90 && pvAngle <= 90)
        {
            bkTrkAngle = GetPvBackTrackAngle(pvAngle);
            
            /* If bkTrkAngle is within +/- given range */ 
            if(bkTrkAngle>= -pvAngleRng && bkTrkAngle <= pvAngleRng)
  4014e8:	bf00      	nop
				sprintf(LogBuff,"NA,");
				ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
			#endif
		}
		
        if(pvAngle>= -pvAngleRng && pvAngle <= pvAngleRng)
  4014ea:	4b1d      	ldr	r3, [pc, #116]	; (401560 <PVTrack+0x174>)
  4014ec:	681b      	ldr	r3, [r3, #0]
  4014ee:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
  4014f2:	4b1c      	ldr	r3, [pc, #112]	; (401564 <PVTrack+0x178>)
  4014f4:	68f9      	ldr	r1, [r7, #12]
  4014f6:	4610      	mov	r0, r2
  4014f8:	4798      	blx	r3
  4014fa:	4603      	mov	r3, r0
  4014fc:	2b00      	cmp	r3, #0
  4014fe:	d00b      	beq.n	401518 <PVTrack+0x12c>
  401500:	4b17      	ldr	r3, [pc, #92]	; (401560 <PVTrack+0x174>)
  401502:	681a      	ldr	r2, [r3, #0]
  401504:	4b17      	ldr	r3, [pc, #92]	; (401564 <PVTrack+0x178>)
  401506:	4611      	mov	r1, r2
  401508:	68f8      	ldr	r0, [r7, #12]
  40150a:	4798      	blx	r3
  40150c:	4603      	mov	r3, r0
  40150e:	2b00      	cmp	r3, #0
  401510:	d002      	beq.n	401518 <PVTrack+0x12c>
        {
            bkTrkFlg = 0;
  401512:	4b12      	ldr	r3, [pc, #72]	; (40155c <PVTrack+0x170>)
  401514:	2200      	movs	r2, #0
  401516:	701a      	strb	r2, [r3, #0]
        }
    }
    
    ptr = (uint16_t*)&dispAngle;
  401518:	4b14      	ldr	r3, [pc, #80]	; (40156c <PVTrack+0x180>)
  40151a:	607b      	str	r3, [r7, #4]
    mBusRegs[MBUS_REG_PVANGLEH] = ptr[1];
  40151c:	687b      	ldr	r3, [r7, #4]
  40151e:	885a      	ldrh	r2, [r3, #2]
  401520:	4b08      	ldr	r3, [pc, #32]	; (401544 <PVTrack+0x158>)
  401522:	845a      	strh	r2, [r3, #34]	; 0x22
    mBusRegs[MBUS_REG_PVANGLEL] = ptr[0];
  401524:	687b      	ldr	r3, [r7, #4]
  401526:	881a      	ldrh	r2, [r3, #0]
  401528:	4b06      	ldr	r3, [pc, #24]	; (401544 <PVTrack+0x158>)
  40152a:	841a      	strh	r2, [r3, #32]
		LogBuff[1] = '\n';
		ConsoleWrite((uint8_t *)LogBuff, 2);
	#endif
	      
    /* Clear any required flags */
    minCtr = 0;
  40152c:	4b17      	ldr	r3, [pc, #92]	; (40158c <PVTrack+0x1a0>)
  40152e:	2200      	movs	r2, #0
  401530:	701a      	strb	r2, [r3, #0]
    taskEXIT_CRITICAL();
  401532:	4b17      	ldr	r3, [pc, #92]	; (401590 <PVTrack+0x1a4>)
  401534:	4798      	blx	r3
    
    /* Enable Charge Ctrlr */
    //ccEn = 1;
} 
  401536:	bf00      	nop
  401538:	3710      	adds	r7, #16
  40153a:	46bd      	mov	sp, r7
  40153c:	bd80      	pop	{r7, pc}
  40153e:	bf00      	nop
  401540:	0040560d 	.word	0x0040560d
  401544:	20000494 	.word	0x20000494
  401548:	40018000 	.word	0x40018000
  40154c:	004002f5 	.word	0x004002f5
  401550:	2000049a 	.word	0x2000049a
  401554:	004003b5 	.word	0x004003b5
  401558:	00401ab9 	.word	0x00401ab9
  40155c:	200004e8 	.word	0x200004e8
  401560:	20000020 	.word	0x20000020
  401564:	0040b529 	.word	0x0040b529
  401568:	00401595 	.word	0x00401595
  40156c:	200004ec 	.word	0x200004ec
  401570:	00402db1 	.word	0x00402db1
  401574:	0040b53d 	.word	0x0040b53d
  401578:	c2b40000 	.word	0xc2b40000
  40157c:	42b40000 	.word	0x42b40000
  401580:	004027dd 	.word	0x004027dd
  401584:	200004e9 	.word	0x200004e9
  401588:	00402d3d 	.word	0x00402d3d
  40158c:	200004ea 	.word	0x200004ea
  401590:	0040562d 	.word	0x0040562d

00401594 <GotoAngle>:

void GotoAngle(float pvAngle)
{
  401594:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  401598:	b08c      	sub	sp, #48	; 0x30
  40159a:	af00      	add	r7, sp, #0
  40159c:	6078      	str	r0, [r7, #4]
    uint16_t *ptr;
    int16_t accVals[3] = {};
  40159e:	f107 0314 	add.w	r3, r7, #20
  4015a2:	2200      	movs	r2, #0
  4015a4:	601a      	str	r2, [r3, #0]
  4015a6:	809a      	strh	r2, [r3, #4]
    float oriVals[3], error = 0;
  4015a8:	f04f 0300 	mov.w	r3, #0
  4015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t p = 0;
  4015ae:	2300      	movs	r3, #0
  4015b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    float oriX, prevOri = 0;
  4015b4:	f04f 0300 	mov.w	r3, #0
  4015b8:	623b      	str	r3, [r7, #32]
    
	#ifndef ICM20648_USE_RTOS_API
		ICMReadAccDataAll(BOARD_TWI, ICM_ADDR,(uint16_t*)accVals);
  4015ba:	f107 0314 	add.w	r3, r7, #20
  4015be:	461a      	mov	r2, r3
  4015c0:	2169      	movs	r1, #105	; 0x69
  4015c2:	4885      	ldr	r0, [pc, #532]	; (4017d8 <GotoAngle+0x244>)
  4015c4:	4b85      	ldr	r3, [pc, #532]	; (4017dc <GotoAngle+0x248>)
  4015c6:	4798      	blx	r3
	#else
		ICMReadAccDataAllTo(twiPort, ICM_ADDR,(uint16_t*)accVals, 50);
	#endif

    GetOrientation(accVals, oriVals);
  4015c8:	f107 0208 	add.w	r2, r7, #8
  4015cc:	f107 0314 	add.w	r3, r7, #20
  4015d0:	4611      	mov	r1, r2
  4015d2:	4618      	mov	r0, r3
  4015d4:	4b82      	ldr	r3, [pc, #520]	; (4017e0 <GotoAngle+0x24c>)
  4015d6:	4798      	blx	r3
        PrintFlt(oriVals[0]);
        sprintf(LogBuff,"\r\n");
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
    #endif
    
    error = pvAngle - oriVals[0];
  4015d8:	68ba      	ldr	r2, [r7, #8]
  4015da:	4b82      	ldr	r3, [pc, #520]	; (4017e4 <GotoAngle+0x250>)
  4015dc:	4611      	mov	r1, r2
  4015de:	6878      	ldr	r0, [r7, #4]
  4015e0:	4798      	blx	r3
  4015e2:	4603      	mov	r3, r0
  4015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
        PrintFlt(error);
        sprintf(LogBuff,"\r\n");
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
    #endif
    if(error > 0)
  4015e6:	4b80      	ldr	r3, [pc, #512]	; (4017e8 <GotoAngle+0x254>)
  4015e8:	f04f 0100 	mov.w	r1, #0
  4015ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  4015ee:	4798      	blx	r3
  4015f0:	4603      	mov	r3, r0
  4015f2:	2b00      	cmp	r3, #0
  4015f4:	d006      	beq.n	401604 <GotoAngle+0x70>
        //Set Anti Clockwise Direction
        #ifdef DEBUG_EN
            sprintf(LogBuff,"ACLK\r\n");
			ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
        #endif
        gpio_set_pin_low(PIN_MOTOR_IN1_IDX);
  4015f6:	2020      	movs	r0, #32
  4015f8:	4b7c      	ldr	r3, [pc, #496]	; (4017ec <GotoAngle+0x258>)
  4015fa:	4798      	blx	r3
		gpio_set_pin_high(PIN_MOTOR_IN2_IDX);
  4015fc:	2021      	movs	r0, #33	; 0x21
  4015fe:	4b7c      	ldr	r3, [pc, #496]	; (4017f0 <GotoAngle+0x25c>)
  401600:	4798      	blx	r3
  401602:	e005      	b.n	401610 <GotoAngle+0x7c>
        //Set Clockwise Direction
        #ifdef DEBUG_EN
            sprintf(LogBuff,"CLK\r\n");
			ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
        #endif
        gpio_set_pin_high(PIN_MOTOR_IN1_IDX);
  401604:	2020      	movs	r0, #32
  401606:	4b7a      	ldr	r3, [pc, #488]	; (4017f0 <GotoAngle+0x25c>)
  401608:	4798      	blx	r3
        gpio_set_pin_low(PIN_MOTOR_IN2_IDX);
  40160a:	2021      	movs	r0, #33	; 0x21
  40160c:	4b77      	ldr	r3, [pc, #476]	; (4017ec <GotoAngle+0x258>)
  40160e:	4798      	blx	r3
    }
    
    //If error greater than +/- 1.0f
    if(!((error >=-INCLINATION_ERROR)&&(error<INCLINATION_ERROR)))
  401610:	2301      	movs	r3, #1
  401612:	461c      	mov	r4, r3
  401614:	4b77      	ldr	r3, [pc, #476]	; (4017f4 <GotoAngle+0x260>)
  401616:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
  40161a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  40161c:	4798      	blx	r3
  40161e:	4603      	mov	r3, r0
  401620:	2b00      	cmp	r3, #0
  401622:	d101      	bne.n	401628 <GotoAngle+0x94>
  401624:	2300      	movs	r3, #0
  401626:	461c      	mov	r4, r3
  401628:	b2e3      	uxtb	r3, r4
  40162a:	f083 0301 	eor.w	r3, r3, #1
  40162e:	b2db      	uxtb	r3, r3
  401630:	2b00      	cmp	r3, #0
  401632:	d112      	bne.n	40165a <GotoAngle+0xc6>
  401634:	2301      	movs	r3, #1
  401636:	461c      	mov	r4, r3
  401638:	4b6f      	ldr	r3, [pc, #444]	; (4017f8 <GotoAngle+0x264>)
  40163a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  40163e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  401640:	4798      	blx	r3
  401642:	4603      	mov	r3, r0
  401644:	2b00      	cmp	r3, #0
  401646:	d101      	bne.n	40164c <GotoAngle+0xb8>
  401648:	2300      	movs	r3, #0
  40164a:	461c      	mov	r4, r3
  40164c:	b2e3      	uxtb	r3, r4
  40164e:	f083 0301 	eor.w	r3, r3, #1
  401652:	b2db      	uxtb	r3, r3
  401654:	2b00      	cmp	r3, #0
  401656:	f000 8086 	beq.w	401766 <GotoAngle+0x1d2>
    {
        /* Turn Motor On */
        #ifndef MOTOR_CTRL_A4955
			gpio_set_pin_high(PIN_MOTOR_RST_IDX);
		#else
			gpio_set_pin_high(PIN_MOTOR_SLP_IDX);
  40165a:	2022      	movs	r0, #34	; 0x22
  40165c:	4b64      	ldr	r3, [pc, #400]	; (4017f0 <GotoAngle+0x25c>)
  40165e:	4798      	blx	r3
            sprintf(LogBuff,"ON\r\n");
			ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));    
        #endif
    }
    
    while(!((error >=-INCLINATION_ERROR)&&(error<INCLINATION_ERROR)))
  401660:	e081      	b.n	401766 <GotoAngle+0x1d2>
    {
        prevOri = 0;
  401662:	f04f 0300 	mov.w	r3, #0
  401666:	623b      	str	r3, [r7, #32]
        for(p = 0; p < 8; p++)
  401668:	2300      	movs	r3, #0
  40166a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40166e:	e058      	b.n	401722 <GotoAngle+0x18e>
        {
            #ifndef ICM20648_USE_RTOS_API
				ICMReadAccDataAll(BOARD_TWI, ICM_ADDR,(uint16_t*)accVals);
  401670:	f107 0314 	add.w	r3, r7, #20
  401674:	461a      	mov	r2, r3
  401676:	2169      	movs	r1, #105	; 0x69
  401678:	4857      	ldr	r0, [pc, #348]	; (4017d8 <GotoAngle+0x244>)
  40167a:	4b58      	ldr	r3, [pc, #352]	; (4017dc <GotoAngle+0x248>)
  40167c:	4798      	blx	r3
			#else
				ICMReadAccDataAllTo(twiPort, ICM_ADDR,(uint16_t*)accVals, 50);
			#endif
            GetOrientation(accVals, oriVals);
  40167e:	f107 0208 	add.w	r2, r7, #8
  401682:	f107 0314 	add.w	r3, r7, #20
  401686:	4611      	mov	r1, r2
  401688:	4618      	mov	r0, r3
  40168a:	4b55      	ldr	r3, [pc, #340]	; (4017e0 <GotoAngle+0x24c>)
  40168c:	4798      	blx	r3
            oriX = prevOri + ((oriVals[0] - prevOri)/((float)(p+1)));
  40168e:	68ba      	ldr	r2, [r7, #8]
  401690:	4b54      	ldr	r3, [pc, #336]	; (4017e4 <GotoAngle+0x250>)
  401692:	6a39      	ldr	r1, [r7, #32]
  401694:	4610      	mov	r0, r2
  401696:	4798      	blx	r3
  401698:	4603      	mov	r3, r0
  40169a:	461c      	mov	r4, r3
  40169c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4016a0:	1c5a      	adds	r2, r3, #1
  4016a2:	4b56      	ldr	r3, [pc, #344]	; (4017fc <GotoAngle+0x268>)
  4016a4:	4610      	mov	r0, r2
  4016a6:	4798      	blx	r3
  4016a8:	4602      	mov	r2, r0
  4016aa:	4b55      	ldr	r3, [pc, #340]	; (401800 <GotoAngle+0x26c>)
  4016ac:	4611      	mov	r1, r2
  4016ae:	4620      	mov	r0, r4
  4016b0:	4798      	blx	r3
  4016b2:	4603      	mov	r3, r0
  4016b4:	461a      	mov	r2, r3
  4016b6:	4b53      	ldr	r3, [pc, #332]	; (401804 <GotoAngle+0x270>)
  4016b8:	6a39      	ldr	r1, [r7, #32]
  4016ba:	4610      	mov	r0, r2
  4016bc:	4798      	blx	r3
  4016be:	4603      	mov	r3, r0
  4016c0:	627b      	str	r3, [r7, #36]	; 0x24
        	prevOri = oriX;
  4016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4016c4:	623b      	str	r3, [r7, #32]
            delay_ms(40);
  4016c6:	4b50      	ldr	r3, [pc, #320]	; (401808 <GotoAngle+0x274>)
  4016c8:	4798      	blx	r3
  4016ca:	4603      	mov	r3, r0
  4016cc:	f04f 0400 	mov.w	r4, #0
  4016d0:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  4016d4:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  4016d8:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  4016dc:	4643      	mov	r3, r8
  4016de:	464c      	mov	r4, r9
  4016e0:	00a6      	lsls	r6, r4, #2
  4016e2:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  4016e6:	009d      	lsls	r5, r3, #2
  4016e8:	195b      	adds	r3, r3, r5
  4016ea:	eb44 0406 	adc.w	r4, r4, r6
  4016ee:	f243 61af 	movw	r1, #13999	; 0x36af
  4016f2:	f04f 0200 	mov.w	r2, #0
  4016f6:	eb13 0b01 	adds.w	fp, r3, r1
  4016fa:	eb44 0c02 	adc.w	ip, r4, r2
  4016fe:	4658      	mov	r0, fp
  401700:	4661      	mov	r1, ip
  401702:	4c42      	ldr	r4, [pc, #264]	; (40180c <GotoAngle+0x278>)
  401704:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401708:	f04f 0300 	mov.w	r3, #0
  40170c:	47a0      	blx	r4
  40170e:	4603      	mov	r3, r0
  401710:	460c      	mov	r4, r1
  401712:	4618      	mov	r0, r3
  401714:	4b3e      	ldr	r3, [pc, #248]	; (401810 <GotoAngle+0x27c>)
  401716:	4798      	blx	r3
    }
    
    while(!((error >=-INCLINATION_ERROR)&&(error<INCLINATION_ERROR)))
    {
        prevOri = 0;
        for(p = 0; p < 8; p++)
  401718:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40171c:	3301      	adds	r3, #1
  40171e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401722:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401726:	2b07      	cmp	r3, #7
  401728:	d9a2      	bls.n	401670 <GotoAngle+0xdc>
            GetOrientation(accVals, oriVals);
            oriX = prevOri + ((oriVals[0] - prevOri)/((float)(p+1)));
        	prevOri = oriX;
            delay_ms(40);
        }
        oriVals[0] = oriX;
  40172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40172c:	60bb      	str	r3, [r7, #8]
			LogBuff[0] = '\r';
			LogBuff[1] = '\n';
			ConsoleWrite((uint8_t *)LogBuff, 2);
        #endif
        
        error = pvAngle - oriVals[0];
  40172e:	68ba      	ldr	r2, [r7, #8]
  401730:	4b2c      	ldr	r3, [pc, #176]	; (4017e4 <GotoAngle+0x250>)
  401732:	4611      	mov	r1, r2
  401734:	6878      	ldr	r0, [r7, #4]
  401736:	4798      	blx	r3
  401738:	4603      	mov	r3, r0
  40173a:	62fb      	str	r3, [r7, #44]	; 0x2c
        
        if(error > 0)
  40173c:	4b2a      	ldr	r3, [pc, #168]	; (4017e8 <GotoAngle+0x254>)
  40173e:	f04f 0100 	mov.w	r1, #0
  401742:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  401744:	4798      	blx	r3
  401746:	4603      	mov	r3, r0
  401748:	2b00      	cmp	r3, #0
  40174a:	d006      	beq.n	40175a <GotoAngle+0x1c6>
                sprintf(LogBuff,"ACLK\r\n");
				ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
            #endif
			#ifndef MOTOR_CTRL_A4955
			#else
				gpio_set_pin_low(PIN_MOTOR_IN1_IDX);
  40174c:	2020      	movs	r0, #32
  40174e:	4b27      	ldr	r3, [pc, #156]	; (4017ec <GotoAngle+0x258>)
  401750:	4798      	blx	r3
				gpio_set_pin_high(PIN_MOTOR_IN2_IDX);
  401752:	2021      	movs	r0, #33	; 0x21
  401754:	4b26      	ldr	r3, [pc, #152]	; (4017f0 <GotoAngle+0x25c>)
  401756:	4798      	blx	r3
  401758:	e005      	b.n	401766 <GotoAngle+0x1d2>
                sprintf(LogBuff,"CLK\r\n");
				ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
            #endif
			#ifndef MOTOR_CTRL_A4955
			#else
				gpio_set_pin_high(PIN_MOTOR_IN1_IDX);
  40175a:	2020      	movs	r0, #32
  40175c:	4b24      	ldr	r3, [pc, #144]	; (4017f0 <GotoAngle+0x25c>)
  40175e:	4798      	blx	r3
				gpio_set_pin_low(PIN_MOTOR_IN2_IDX);
  401760:	2021      	movs	r0, #33	; 0x21
  401762:	4b22      	ldr	r3, [pc, #136]	; (4017ec <GotoAngle+0x258>)
  401764:	4798      	blx	r3
            sprintf(LogBuff,"ON\r\n");
			ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));    
        #endif
    }
    
    while(!((error >=-INCLINATION_ERROR)&&(error<INCLINATION_ERROR)))
  401766:	2301      	movs	r3, #1
  401768:	461c      	mov	r4, r3
  40176a:	4b22      	ldr	r3, [pc, #136]	; (4017f4 <GotoAngle+0x260>)
  40176c:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
  401770:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  401772:	4798      	blx	r3
  401774:	4603      	mov	r3, r0
  401776:	2b00      	cmp	r3, #0
  401778:	d101      	bne.n	40177e <GotoAngle+0x1ea>
  40177a:	2300      	movs	r3, #0
  40177c:	461c      	mov	r4, r3
  40177e:	b2e3      	uxtb	r3, r4
  401780:	f083 0301 	eor.w	r3, r3, #1
  401784:	b2db      	uxtb	r3, r3
  401786:	2b00      	cmp	r3, #0
  401788:	f47f af6b 	bne.w	401662 <GotoAngle+0xce>
  40178c:	2301      	movs	r3, #1
  40178e:	461c      	mov	r4, r3
  401790:	4b19      	ldr	r3, [pc, #100]	; (4017f8 <GotoAngle+0x264>)
  401792:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  401796:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  401798:	4798      	blx	r3
  40179a:	4603      	mov	r3, r0
  40179c:	2b00      	cmp	r3, #0
  40179e:	d101      	bne.n	4017a4 <GotoAngle+0x210>
  4017a0:	2300      	movs	r3, #0
  4017a2:	461c      	mov	r4, r3
  4017a4:	b2e3      	uxtb	r3, r4
  4017a6:	f083 0301 	eor.w	r3, r3, #1
  4017aa:	b2db      	uxtb	r3, r3
  4017ac:	2b00      	cmp	r3, #0
  4017ae:	f47f af58 	bne.w	401662 <GotoAngle+0xce>

    /* Turn Motor Off */
	#ifndef MOTOR_CTRL_A4955
		gpio_set_pin_low(PIN_MOTOR_RST_IDX);
	#else
		gpio_set_pin_low(PIN_MOTOR_SLP_IDX);
  4017b2:	2022      	movs	r0, #34	; 0x22
  4017b4:	4b0d      	ldr	r3, [pc, #52]	; (4017ec <GotoAngle+0x258>)
  4017b6:	4798      	blx	r3
    #ifdef DEBUG_EN
        sprintf(LogBuff,"OFF\r\n");
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
    #endif
    
    ptr = (uint16_t*)&oriVals[0];
  4017b8:	f107 0308 	add.w	r3, r7, #8
  4017bc:	61fb      	str	r3, [r7, #28]
    mBusRegs[MBUS_REG_ANXH] = ptr[1];
  4017be:	69fb      	ldr	r3, [r7, #28]
  4017c0:	885a      	ldrh	r2, [r3, #2]
  4017c2:	4b14      	ldr	r3, [pc, #80]	; (401814 <GotoAngle+0x280>)
  4017c4:	83da      	strh	r2, [r3, #30]
    mBusRegs[MBUS_REG_ANXL] = ptr[0];
  4017c6:	69fb      	ldr	r3, [r7, #28]
  4017c8:	881a      	ldrh	r2, [r3, #0]
  4017ca:	4b12      	ldr	r3, [pc, #72]	; (401814 <GotoAngle+0x280>)
  4017cc:	839a      	strh	r2, [r3, #28]
}
  4017ce:	bf00      	nop
  4017d0:	3730      	adds	r7, #48	; 0x30
  4017d2:	46bd      	mov	sp, r7
  4017d4:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
  4017d8:	40018000 	.word	0x40018000
  4017dc:	004005ed 	.word	0x004005ed
  4017e0:	00401925 	.word	0x00401925
  4017e4:	0040afc5 	.word	0x0040afc5
  4017e8:	0040b551 	.word	0x0040b551
  4017ec:	00404709 	.word	0x00404709
  4017f0:	004046d9 	.word	0x004046d9
  4017f4:	0040b53d 	.word	0x0040b53d
  4017f8:	0040b515 	.word	0x0040b515
  4017fc:	0040b131 	.word	0x0040b131
  401800:	0040b341 	.word	0x0040b341
  401804:	0040afc9 	.word	0x0040afc9
  401808:	00400cbd 	.word	0x00400cbd
  40180c:	0040b5b1 	.word	0x0040b5b1
  401810:	20000001 	.word	0x20000001
  401814:	20000494 	.word	0x20000494

00401818 <TestCode>:

void TestCode(void)
{
  401818:	b580      	push	{r7, lr}
  40181a:	b088      	sub	sp, #32
  40181c:	af00      	add	r7, sp, #0
    int16_t accVals[3] = {0, 0, 0};
  40181e:	2300      	movs	r3, #0
  401820:	82bb      	strh	r3, [r7, #20]
  401822:	2300      	movs	r3, #0
  401824:	82fb      	strh	r3, [r7, #22]
  401826:	2300      	movs	r3, #0
  401828:	833b      	strh	r3, [r7, #24]
    float oriVals[3], pvAngle=0;
  40182a:	f04f 0300 	mov.w	r3, #0
  40182e:	607b      	str	r3, [r7, #4]
    uint16_t *ptr;
    #ifndef DS3231_USE_RTOS_API
		DSGetTime(BOARD_TWI, (uint16_t *)&mBusRegs[MBUS_REG_SEC]);
  401830:	4930      	ldr	r1, [pc, #192]	; (4018f4 <TestCode+0xdc>)
  401832:	4831      	ldr	r0, [pc, #196]	; (4018f8 <TestCode+0xe0>)
  401834:	4b31      	ldr	r3, [pc, #196]	; (4018fc <TestCode+0xe4>)
  401836:	4798      	blx	r3
		DSGetFullDate(BOARD_TWI, (uint16_t *)&mBusRegs[MBUS_REG_DAY]);
  401838:	4931      	ldr	r1, [pc, #196]	; (401900 <TestCode+0xe8>)
  40183a:	482f      	ldr	r0, [pc, #188]	; (4018f8 <TestCode+0xe0>)
  40183c:	4b31      	ldr	r3, [pc, #196]	; (401904 <TestCode+0xec>)
  40183e:	4798      	blx	r3
		(((mBusRegs[MBUS_REG_SEC]>>4)*10) + (mBusRegs[MBUS_REG_SEC]&0x000F)));
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
    #endif

	#ifndef ICM20648_USE_RTOS_API
		ICMReadAccDataAll(BOARD_TWI, ICM_ADDR,(uint16_t*)accVals);
  401840:	f107 0314 	add.w	r3, r7, #20
  401844:	461a      	mov	r2, r3
  401846:	2169      	movs	r1, #105	; 0x69
  401848:	482b      	ldr	r0, [pc, #172]	; (4018f8 <TestCode+0xe0>)
  40184a:	4b2f      	ldr	r3, [pc, #188]	; (401908 <TestCode+0xf0>)
  40184c:	4798      	blx	r3
	#else
		ICMReadAccDataAllTo(twiPort, ICM_ADDR,(uint16_t*)accVals, 50);
	#endif
    GetOrientation(accVals, oriVals);
  40184e:	f107 0208 	add.w	r2, r7, #8
  401852:	f107 0314 	add.w	r3, r7, #20
  401856:	4611      	mov	r1, r2
  401858:	4618      	mov	r0, r3
  40185a:	4b2c      	ldr	r3, [pc, #176]	; (40190c <TestCode+0xf4>)
  40185c:	4798      	blx	r3
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
        PrintFlt(oriVals[0]);
        sprintf(LogBuff,"\r\n");
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
    #endif
    ptr = (uint16_t*)&oriVals[0];
  40185e:	f107 0308 	add.w	r3, r7, #8
  401862:	61fb      	str	r3, [r7, #28]
    mBusRegs[MBUS_REG_ANXH] = ptr[1];
  401864:	69fb      	ldr	r3, [r7, #28]
  401866:	885a      	ldrh	r2, [r3, #2]
  401868:	4b22      	ldr	r3, [pc, #136]	; (4018f4 <TestCode+0xdc>)
  40186a:	83da      	strh	r2, [r3, #30]
    mBusRegs[MBUS_REG_ANXL] = ptr[0];
  40186c:	69fb      	ldr	r3, [r7, #28]
  40186e:	881a      	ldrh	r2, [r3, #0]
  401870:	4b20      	ldr	r3, [pc, #128]	; (4018f4 <TestCode+0xdc>)
  401872:	839a      	strh	r2, [r3, #28]
    pvAngle = GetPvAngle();
  401874:	4b26      	ldr	r3, [pc, #152]	; (401910 <TestCode+0xf8>)
  401876:	4798      	blx	r3
  401878:	4603      	mov	r3, r0
  40187a:	607b      	str	r3, [r7, #4]
    ptr = (uint16_t*)&pvAngle;
  40187c:	1d3b      	adds	r3, r7, #4
  40187e:	61fb      	str	r3, [r7, #28]
    mBusRegs[MBUS_REG_PVANGLEH] = ptr[1];
  401880:	69fb      	ldr	r3, [r7, #28]
  401882:	885a      	ldrh	r2, [r3, #2]
  401884:	4b1b      	ldr	r3, [pc, #108]	; (4018f4 <TestCode+0xdc>)
  401886:	845a      	strh	r2, [r3, #34]	; 0x22
    mBusRegs[MBUS_REG_PVANGLEL] = ptr[0];
  401888:	69fb      	ldr	r3, [r7, #28]
  40188a:	881a      	ldrh	r2, [r3, #0]
  40188c:	4b19      	ldr	r3, [pc, #100]	; (4018f4 <TestCode+0xdc>)
  40188e:	841a      	strh	r2, [r3, #32]
    
	/* Manual Motor Control Mode */
	if(mBusRegs[MBUS_REG_OPMODE] == TRKR_OPMODE_MAN)
  401890:	4b18      	ldr	r3, [pc, #96]	; (4018f4 <TestCode+0xdc>)
  401892:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
  401894:	2b01      	cmp	r3, #1
  401896:	d11c      	bne.n	4018d2 <TestCode+0xba>
	{
		/* Set Motor Direction */
		if(mBusRegs[MBUS_REG_MOTDR])
  401898:	4b16      	ldr	r3, [pc, #88]	; (4018f4 <TestCode+0xdc>)
  40189a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
  40189c:	2b00      	cmp	r3, #0
  40189e:	d006      	beq.n	4018ae <TestCode+0x96>
		{
			gpio_set_pin_low(PIN_MOTOR_IN1_IDX);
  4018a0:	2020      	movs	r0, #32
  4018a2:	4b1c      	ldr	r3, [pc, #112]	; (401914 <TestCode+0xfc>)
  4018a4:	4798      	blx	r3
			gpio_set_pin_high(PIN_MOTOR_IN2_IDX);
  4018a6:	2021      	movs	r0, #33	; 0x21
  4018a8:	4b1b      	ldr	r3, [pc, #108]	; (401918 <TestCode+0x100>)
  4018aa:	4798      	blx	r3
  4018ac:	e005      	b.n	4018ba <TestCode+0xa2>
		}
		else
		{
			gpio_set_pin_high(PIN_MOTOR_IN1_IDX);
  4018ae:	2020      	movs	r0, #32
  4018b0:	4b19      	ldr	r3, [pc, #100]	; (401918 <TestCode+0x100>)
  4018b2:	4798      	blx	r3
			gpio_set_pin_low(PIN_MOTOR_IN2_IDX);
  4018b4:	2021      	movs	r0, #33	; 0x21
  4018b6:	4b17      	ldr	r3, [pc, #92]	; (401914 <TestCode+0xfc>)
  4018b8:	4798      	blx	r3
		}

		/* Turn Motor On / Off */
		if(mBusRegs[MBUS_REG_MOTON])
  4018ba:	4b0e      	ldr	r3, [pc, #56]	; (4018f4 <TestCode+0xdc>)
  4018bc:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
  4018be:	2b00      	cmp	r3, #0
  4018c0:	d003      	beq.n	4018ca <TestCode+0xb2>
			//Disable Charge Ctrlr
			//ccEn = 0;
			/* Turn Motor On */
			#ifndef MOTOR_CTRL_A4955
			#else
				gpio_set_pin_high(PIN_MOTOR_SLP_IDX);
  4018c2:	2022      	movs	r0, #34	; 0x22
  4018c4:	4b14      	ldr	r3, [pc, #80]	; (401918 <TestCode+0x100>)
  4018c6:	4798      	blx	r3
    /* Cleaning Motor Control Mode */
    else if(mBusRegs[MBUS_REG_OPMODE] == TRKR_OPMODE_CLEAN)
    {
		CleaningMode();
    }
}
  4018c8:	e010      	b.n	4018ec <TestCode+0xd4>
			//Enable Charge Ctrlr
			//ccEn = 1;
			/* Turn Motor Off */
			#ifndef MOTOR_CTRL_A4955
			#else
				gpio_set_pin_low(PIN_MOTOR_SLP_IDX);
  4018ca:	2022      	movs	r0, #34	; 0x22
  4018cc:	4b11      	ldr	r3, [pc, #68]	; (401914 <TestCode+0xfc>)
  4018ce:	4798      	blx	r3
    /* Cleaning Motor Control Mode */
    else if(mBusRegs[MBUS_REG_OPMODE] == TRKR_OPMODE_CLEAN)
    {
		CleaningMode();
    }
}
  4018d0:	e00c      	b.n	4018ec <TestCode+0xd4>
				gpio_set_pin_low(PIN_MOTOR_SLP_IDX);
			#endif
		}
	}
	/* Wind Speed Motor Control Mode */
	else if(mBusRegs[MBUS_REG_OPMODE] == TRKR_OPMODE_WINDSPD)
  4018d2:	4b08      	ldr	r3, [pc, #32]	; (4018f4 <TestCode+0xdc>)
  4018d4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
  4018d6:	2b02      	cmp	r3, #2
  4018d8:	d102      	bne.n	4018e0 <TestCode+0xc8>
	{
		WindSpeedMode();
  4018da:	4b10      	ldr	r3, [pc, #64]	; (40191c <TestCode+0x104>)
  4018dc:	4798      	blx	r3
    /* Cleaning Motor Control Mode */
    else if(mBusRegs[MBUS_REG_OPMODE] == TRKR_OPMODE_CLEAN)
    {
		CleaningMode();
    }
}
  4018de:	e005      	b.n	4018ec <TestCode+0xd4>
	else if(mBusRegs[MBUS_REG_OPMODE] == TRKR_OPMODE_WINDSPD)
	{
		WindSpeedMode();
	}
    /* Cleaning Motor Control Mode */
    else if(mBusRegs[MBUS_REG_OPMODE] == TRKR_OPMODE_CLEAN)
  4018e0:	4b04      	ldr	r3, [pc, #16]	; (4018f4 <TestCode+0xdc>)
  4018e2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
  4018e4:	2b03      	cmp	r3, #3
  4018e6:	d101      	bne.n	4018ec <TestCode+0xd4>
    {
		CleaningMode();
  4018e8:	4b0d      	ldr	r3, [pc, #52]	; (401920 <TestCode+0x108>)
  4018ea:	4798      	blx	r3
    }
}
  4018ec:	bf00      	nop
  4018ee:	3720      	adds	r7, #32
  4018f0:	46bd      	mov	sp, r7
  4018f2:	bd80      	pop	{r7, pc}
  4018f4:	20000494 	.word	0x20000494
  4018f8:	40018000 	.word	0x40018000
  4018fc:	004002f5 	.word	0x004002f5
  401900:	2000049a 	.word	0x2000049a
  401904:	004003b5 	.word	0x004003b5
  401908:	004005ed 	.word	0x004005ed
  40190c:	00401925 	.word	0x00401925
  401910:	00401ab9 	.word	0x00401ab9
  401914:	00404709 	.word	0x00404709
  401918:	004046d9 	.word	0x004046d9
  40191c:	004029c1 	.word	0x004029c1
  401920:	00402b59 	.word	0x00402b59

00401924 <GetOrientation>:
        ConsoleWrite((uint8_t *)buff2, strlen(buff2));
    }
#endif

void GetOrientation(int16_t *acc, float *orientation)
{
  401924:	b5f0      	push	{r4, r5, r6, r7, lr}
  401926:	b087      	sub	sp, #28
  401928:	af00      	add	r7, sp, #0
  40192a:	6078      	str	r0, [r7, #4]
  40192c:	6039      	str	r1, [r7, #0]
    float accFlt[3];
    accFlt[0] = ((float)acc[0])/32768.0f;
  40192e:	687b      	ldr	r3, [r7, #4]
  401930:	f9b3 2000 	ldrsh.w	r2, [r3]
  401934:	4b55      	ldr	r3, [pc, #340]	; (401a8c <GetOrientation+0x168>)
  401936:	4610      	mov	r0, r2
  401938:	4798      	blx	r3
  40193a:	4602      	mov	r2, r0
  40193c:	4b54      	ldr	r3, [pc, #336]	; (401a90 <GetOrientation+0x16c>)
  40193e:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
  401942:	4610      	mov	r0, r2
  401944:	4798      	blx	r3
  401946:	4603      	mov	r3, r0
  401948:	60fb      	str	r3, [r7, #12]
    accFlt[1] = ((float)acc[1])/32768.0f;
  40194a:	687b      	ldr	r3, [r7, #4]
  40194c:	3302      	adds	r3, #2
  40194e:	f9b3 2000 	ldrsh.w	r2, [r3]
  401952:	4b4e      	ldr	r3, [pc, #312]	; (401a8c <GetOrientation+0x168>)
  401954:	4610      	mov	r0, r2
  401956:	4798      	blx	r3
  401958:	4602      	mov	r2, r0
  40195a:	4b4d      	ldr	r3, [pc, #308]	; (401a90 <GetOrientation+0x16c>)
  40195c:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
  401960:	4610      	mov	r0, r2
  401962:	4798      	blx	r3
  401964:	4603      	mov	r3, r0
  401966:	613b      	str	r3, [r7, #16]
    accFlt[2] = ((float)acc[2])/32768.0f;
  401968:	687b      	ldr	r3, [r7, #4]
  40196a:	3304      	adds	r3, #4
  40196c:	f9b3 2000 	ldrsh.w	r2, [r3]
  401970:	4b46      	ldr	r3, [pc, #280]	; (401a8c <GetOrientation+0x168>)
  401972:	4610      	mov	r0, r2
  401974:	4798      	blx	r3
  401976:	4602      	mov	r2, r0
  401978:	4b45      	ldr	r3, [pc, #276]	; (401a90 <GetOrientation+0x16c>)
  40197a:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
  40197e:	4610      	mov	r0, r2
  401980:	4798      	blx	r3
  401982:	4603      	mov	r3, r0
  401984:	617b      	str	r3, [r7, #20]
    
    //Equation 25 (Rotate Across X Axis)
    orientation[0] = atan2(accFlt[1], accFlt[2]);
  401986:	693a      	ldr	r2, [r7, #16]
  401988:	4b42      	ldr	r3, [pc, #264]	; (401a94 <GetOrientation+0x170>)
  40198a:	4610      	mov	r0, r2
  40198c:	4798      	blx	r3
  40198e:	4604      	mov	r4, r0
  401990:	460d      	mov	r5, r1
  401992:	697a      	ldr	r2, [r7, #20]
  401994:	4b3f      	ldr	r3, [pc, #252]	; (401a94 <GetOrientation+0x170>)
  401996:	4610      	mov	r0, r2
  401998:	4798      	blx	r3
  40199a:	4602      	mov	r2, r0
  40199c:	460b      	mov	r3, r1
  40199e:	4620      	mov	r0, r4
  4019a0:	4629      	mov	r1, r5
  4019a2:	4c3d      	ldr	r4, [pc, #244]	; (401a98 <GetOrientation+0x174>)
  4019a4:	47a0      	blx	r4
  4019a6:	460a      	mov	r2, r1
  4019a8:	4601      	mov	r1, r0
  4019aa:	4b3c      	ldr	r3, [pc, #240]	; (401a9c <GetOrientation+0x178>)
  4019ac:	4608      	mov	r0, r1
  4019ae:	4611      	mov	r1, r2
  4019b0:	4798      	blx	r3
  4019b2:	4602      	mov	r2, r0
  4019b4:	683b      	ldr	r3, [r7, #0]
  4019b6:	601a      	str	r2, [r3, #0]
    //Radian to degrees conversion
    orientation[0] = (180.0f * orientation[0])/(float)M_PI;
  4019b8:	683b      	ldr	r3, [r7, #0]
  4019ba:	681a      	ldr	r2, [r3, #0]
  4019bc:	4b38      	ldr	r3, [pc, #224]	; (401aa0 <GetOrientation+0x17c>)
  4019be:	4939      	ldr	r1, [pc, #228]	; (401aa4 <GetOrientation+0x180>)
  4019c0:	4610      	mov	r0, r2
  4019c2:	4798      	blx	r3
  4019c4:	4603      	mov	r3, r0
  4019c6:	461a      	mov	r2, r3
  4019c8:	4b31      	ldr	r3, [pc, #196]	; (401a90 <GetOrientation+0x16c>)
  4019ca:	4937      	ldr	r1, [pc, #220]	; (401aa8 <GetOrientation+0x184>)
  4019cc:	4610      	mov	r0, r2
  4019ce:	4798      	blx	r3
  4019d0:	4603      	mov	r3, r0
  4019d2:	461a      	mov	r2, r3
  4019d4:	683b      	ldr	r3, [r7, #0]
  4019d6:	601a      	str	r2, [r3, #0]
    
    //Equation 26 (Rotate Across Y Axis)
    orientation[1] = sqrt(accFlt[1]*accFlt[1] + accFlt[2]*accFlt[2]);
  4019d8:	683b      	ldr	r3, [r7, #0]
  4019da:	1d1c      	adds	r4, r3, #4
  4019dc:	693a      	ldr	r2, [r7, #16]
  4019de:	6939      	ldr	r1, [r7, #16]
  4019e0:	4b2f      	ldr	r3, [pc, #188]	; (401aa0 <GetOrientation+0x17c>)
  4019e2:	4610      	mov	r0, r2
  4019e4:	4798      	blx	r3
  4019e6:	4603      	mov	r3, r0
  4019e8:	461d      	mov	r5, r3
  4019ea:	697a      	ldr	r2, [r7, #20]
  4019ec:	6979      	ldr	r1, [r7, #20]
  4019ee:	4b2c      	ldr	r3, [pc, #176]	; (401aa0 <GetOrientation+0x17c>)
  4019f0:	4610      	mov	r0, r2
  4019f2:	4798      	blx	r3
  4019f4:	4603      	mov	r3, r0
  4019f6:	461a      	mov	r2, r3
  4019f8:	4b2c      	ldr	r3, [pc, #176]	; (401aac <GetOrientation+0x188>)
  4019fa:	4611      	mov	r1, r2
  4019fc:	4628      	mov	r0, r5
  4019fe:	4798      	blx	r3
  401a00:	4603      	mov	r3, r0
  401a02:	461a      	mov	r2, r3
  401a04:	4b23      	ldr	r3, [pc, #140]	; (401a94 <GetOrientation+0x170>)
  401a06:	4610      	mov	r0, r2
  401a08:	4798      	blx	r3
  401a0a:	4602      	mov	r2, r0
  401a0c:	460b      	mov	r3, r1
  401a0e:	4610      	mov	r0, r2
  401a10:	4619      	mov	r1, r3
  401a12:	4b27      	ldr	r3, [pc, #156]	; (401ab0 <GetOrientation+0x18c>)
  401a14:	4798      	blx	r3
  401a16:	460a      	mov	r2, r1
  401a18:	4601      	mov	r1, r0
  401a1a:	4b20      	ldr	r3, [pc, #128]	; (401a9c <GetOrientation+0x178>)
  401a1c:	4608      	mov	r0, r1
  401a1e:	4611      	mov	r1, r2
  401a20:	4798      	blx	r3
  401a22:	4603      	mov	r3, r0
  401a24:	6023      	str	r3, [r4, #0]
    orientation[1] = atan2(-accFlt[0], orientation[1]); 
  401a26:	683b      	ldr	r3, [r7, #0]
  401a28:	1d1c      	adds	r4, r3, #4
  401a2a:	68fb      	ldr	r3, [r7, #12]
  401a2c:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
  401a30:	4b18      	ldr	r3, [pc, #96]	; (401a94 <GetOrientation+0x170>)
  401a32:	4610      	mov	r0, r2
  401a34:	4798      	blx	r3
  401a36:	4605      	mov	r5, r0
  401a38:	460e      	mov	r6, r1
  401a3a:	683b      	ldr	r3, [r7, #0]
  401a3c:	3304      	adds	r3, #4
  401a3e:	681a      	ldr	r2, [r3, #0]
  401a40:	4b14      	ldr	r3, [pc, #80]	; (401a94 <GetOrientation+0x170>)
  401a42:	4610      	mov	r0, r2
  401a44:	4798      	blx	r3
  401a46:	4602      	mov	r2, r0
  401a48:	460b      	mov	r3, r1
  401a4a:	4628      	mov	r0, r5
  401a4c:	4631      	mov	r1, r6
  401a4e:	4d12      	ldr	r5, [pc, #72]	; (401a98 <GetOrientation+0x174>)
  401a50:	47a8      	blx	r5
  401a52:	460a      	mov	r2, r1
  401a54:	4601      	mov	r1, r0
  401a56:	4b11      	ldr	r3, [pc, #68]	; (401a9c <GetOrientation+0x178>)
  401a58:	4608      	mov	r0, r1
  401a5a:	4611      	mov	r1, r2
  401a5c:	4798      	blx	r3
  401a5e:	4603      	mov	r3, r0
  401a60:	6023      	str	r3, [r4, #0]
    //Radian to degrees conversion
    orientation[1] = (180.0f * orientation[1])/(float)M_PI;
  401a62:	683b      	ldr	r3, [r7, #0]
  401a64:	1d1c      	adds	r4, r3, #4
  401a66:	683b      	ldr	r3, [r7, #0]
  401a68:	3304      	adds	r3, #4
  401a6a:	681a      	ldr	r2, [r3, #0]
  401a6c:	4b0c      	ldr	r3, [pc, #48]	; (401aa0 <GetOrientation+0x17c>)
  401a6e:	490d      	ldr	r1, [pc, #52]	; (401aa4 <GetOrientation+0x180>)
  401a70:	4610      	mov	r0, r2
  401a72:	4798      	blx	r3
  401a74:	4603      	mov	r3, r0
  401a76:	461a      	mov	r2, r3
  401a78:	4b05      	ldr	r3, [pc, #20]	; (401a90 <GetOrientation+0x16c>)
  401a7a:	490b      	ldr	r1, [pc, #44]	; (401aa8 <GetOrientation+0x184>)
  401a7c:	4610      	mov	r0, r2
  401a7e:	4798      	blx	r3
  401a80:	4603      	mov	r3, r0
  401a82:	6023      	str	r3, [r4, #0]
}
  401a84:	bf00      	nop
  401a86:	371c      	adds	r7, #28
  401a88:	46bd      	mov	sp, r7
  401a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401a8c:	0040b131 	.word	0x0040b131
  401a90:	0040b341 	.word	0x0040b341
  401a94:	0040a8c5 	.word	0x0040a8c5
  401a98:	00408025 	.word	0x00408025
  401a9c:	0040af1d 	.word	0x0040af1d
  401aa0:	0040b1d9 	.word	0x0040b1d9
  401aa4:	43340000 	.word	0x43340000
  401aa8:	40490fdb 	.word	0x40490fdb
  401aac:	0040afc9 	.word	0x0040afc9
  401ab0:	00408029 	.word	0x00408029
  401ab4:	00000000 	.word	0x00000000

00401ab8 <GetPvAngle>:

float GetPvAngle(void)
{
  401ab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401abc:	b0af      	sub	sp, #188	; 0xbc
  401abe:	af00      	add	r7, sp, #0
	float e, f, g, h, i, j, k, l, m, n, o, p;
	float q, r, s, t;
	float timeInSecs;
    
    //BCD to Int Conversion
    date = ((mBusRegs[MBUS_REG_DD]>>4)*10) + (mBusRegs[MBUS_REG_DD]&0x000F); 
  401ac0:	4b4a      	ldr	r3, [pc, #296]	; (401bec <GetPvAngle+0x134>)
  401ac2:	891b      	ldrh	r3, [r3, #8]
  401ac4:	091b      	lsrs	r3, r3, #4
  401ac6:	b29b      	uxth	r3, r3
  401ac8:	461a      	mov	r2, r3
  401aca:	0092      	lsls	r2, r2, #2
  401acc:	4413      	add	r3, r2
  401ace:	005b      	lsls	r3, r3, #1
  401ad0:	b29a      	uxth	r2, r3
  401ad2:	4b46      	ldr	r3, [pc, #280]	; (401bec <GetPvAngle+0x134>)
  401ad4:	891b      	ldrh	r3, [r3, #8]
  401ad6:	f003 030f 	and.w	r3, r3, #15
  401ada:	b29b      	uxth	r3, r3
  401adc:	4413      	add	r3, r2
  401ade:	b29b      	uxth	r3, r3
  401ae0:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
    mon = ((mBusRegs[MBUS_REG_MM]>>4)*10) + (mBusRegs[MBUS_REG_MM]&0x000F); 
  401ae4:	4b41      	ldr	r3, [pc, #260]	; (401bec <GetPvAngle+0x134>)
  401ae6:	895b      	ldrh	r3, [r3, #10]
  401ae8:	091b      	lsrs	r3, r3, #4
  401aea:	b29b      	uxth	r3, r3
  401aec:	461a      	mov	r2, r3
  401aee:	0092      	lsls	r2, r2, #2
  401af0:	4413      	add	r3, r2
  401af2:	005b      	lsls	r3, r3, #1
  401af4:	b29a      	uxth	r2, r3
  401af6:	4b3d      	ldr	r3, [pc, #244]	; (401bec <GetPvAngle+0x134>)
  401af8:	895b      	ldrh	r3, [r3, #10]
  401afa:	f003 030f 	and.w	r3, r3, #15
  401afe:	b29b      	uxth	r3, r3
  401b00:	4413      	add	r3, r2
  401b02:	b29b      	uxth	r3, r3
  401b04:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
    year = ((mBusRegs[MBUS_REG_YY]>>4)*10) + (mBusRegs[MBUS_REG_YY]&0x000F); 
  401b08:	4b38      	ldr	r3, [pc, #224]	; (401bec <GetPvAngle+0x134>)
  401b0a:	899b      	ldrh	r3, [r3, #12]
  401b0c:	091b      	lsrs	r3, r3, #4
  401b0e:	b29b      	uxth	r3, r3
  401b10:	461a      	mov	r2, r3
  401b12:	0092      	lsls	r2, r2, #2
  401b14:	4413      	add	r3, r2
  401b16:	005b      	lsls	r3, r3, #1
  401b18:	b29a      	uxth	r2, r3
  401b1a:	4b34      	ldr	r3, [pc, #208]	; (401bec <GetPvAngle+0x134>)
  401b1c:	899b      	ldrh	r3, [r3, #12]
  401b1e:	f003 030f 	and.w	r3, r3, #15
  401b22:	b29b      	uxth	r3, r3
  401b24:	4413      	add	r3, r2
  401b26:	b29b      	uxth	r3, r3
  401b28:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
    year += 2000;
  401b2c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
  401b30:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
  401b34:	b29b      	uxth	r3, r3
  401b36:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
    hrs = ((mBusRegs[MBUS_REG_HRS]>>4)*10) + (mBusRegs[MBUS_REG_HRS]&0x000F); 
  401b3a:	4b2c      	ldr	r3, [pc, #176]	; (401bec <GetPvAngle+0x134>)
  401b3c:	889b      	ldrh	r3, [r3, #4]
  401b3e:	091b      	lsrs	r3, r3, #4
  401b40:	b29b      	uxth	r3, r3
  401b42:	461a      	mov	r2, r3
  401b44:	0092      	lsls	r2, r2, #2
  401b46:	4413      	add	r3, r2
  401b48:	005b      	lsls	r3, r3, #1
  401b4a:	b29a      	uxth	r2, r3
  401b4c:	4b27      	ldr	r3, [pc, #156]	; (401bec <GetPvAngle+0x134>)
  401b4e:	889b      	ldrh	r3, [r3, #4]
  401b50:	f003 030f 	and.w	r3, r3, #15
  401b54:	b29b      	uxth	r3, r3
  401b56:	4413      	add	r3, r2
  401b58:	b29b      	uxth	r3, r3
  401b5a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
    min = ((mBusRegs[MBUS_REG_MIN]>>4)*10) + (mBusRegs[MBUS_REG_MIN]&0x000F); 
  401b5e:	4b23      	ldr	r3, [pc, #140]	; (401bec <GetPvAngle+0x134>)
  401b60:	885b      	ldrh	r3, [r3, #2]
  401b62:	091b      	lsrs	r3, r3, #4
  401b64:	b29b      	uxth	r3, r3
  401b66:	461a      	mov	r2, r3
  401b68:	0092      	lsls	r2, r2, #2
  401b6a:	4413      	add	r3, r2
  401b6c:	005b      	lsls	r3, r3, #1
  401b6e:	b29a      	uxth	r2, r3
  401b70:	4b1e      	ldr	r3, [pc, #120]	; (401bec <GetPvAngle+0x134>)
  401b72:	885b      	ldrh	r3, [r3, #2]
  401b74:	f003 030f 	and.w	r3, r3, #15
  401b78:	b29b      	uxth	r3, r3
  401b7a:	4413      	add	r3, r2
  401b7c:	b29b      	uxth	r3, r3
  401b7e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    sec = ((mBusRegs[MBUS_REG_SEC]>>4)*10) + (mBusRegs[MBUS_REG_SEC]&0x000F); 
  401b82:	4b1a      	ldr	r3, [pc, #104]	; (401bec <GetPvAngle+0x134>)
  401b84:	881b      	ldrh	r3, [r3, #0]
  401b86:	091b      	lsrs	r3, r3, #4
  401b88:	b29b      	uxth	r3, r3
  401b8a:	461a      	mov	r2, r3
  401b8c:	0092      	lsls	r2, r2, #2
  401b8e:	4413      	add	r3, r2
  401b90:	005b      	lsls	r3, r3, #1
  401b92:	b29a      	uxth	r2, r3
  401b94:	4b15      	ldr	r3, [pc, #84]	; (401bec <GetPvAngle+0x134>)
  401b96:	881b      	ldrh	r3, [r3, #0]
  401b98:	f003 030f 	and.w	r3, r3, #15
  401b9c:	b29b      	uxth	r3, r3
  401b9e:	4413      	add	r3, r2
  401ba0:	b29b      	uxth	r3, r3
  401ba2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
    #ifdef LOG_EN
        sprintf(LogBuff,"%d,%d,%d,", hrs, min, sec);
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
    #endif
    
    timeInSecs = (hrs*3600 + min*60 + sec)/86400.0f;
  401ba6:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	; 0xa8
  401baa:	f44f 6261 	mov.w	r2, #3600	; 0xe10
  401bae:	fb02 f103 	mul.w	r1, r2, r3
  401bb2:	f9b7 20a6 	ldrsh.w	r2, [r7, #166]	; 0xa6
  401bb6:	4613      	mov	r3, r2
  401bb8:	011b      	lsls	r3, r3, #4
  401bba:	1a9b      	subs	r3, r3, r2
  401bbc:	009b      	lsls	r3, r3, #2
  401bbe:	18ca      	adds	r2, r1, r3
  401bc0:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
  401bc4:	441a      	add	r2, r3
  401bc6:	4b0a      	ldr	r3, [pc, #40]	; (401bf0 <GetPvAngle+0x138>)
  401bc8:	4610      	mov	r0, r2
  401bca:	4798      	blx	r3
  401bcc:	4602      	mov	r2, r0
  401bce:	4b09      	ldr	r3, [pc, #36]	; (401bf4 <GetPvAngle+0x13c>)
  401bd0:	4909      	ldr	r1, [pc, #36]	; (401bf8 <GetPvAngle+0x140>)
  401bd2:	4610      	mov	r0, r2
  401bd4:	4798      	blx	r3
  401bd6:	4603      	mov	r3, r0
  401bd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    //Angle Calcualation Algorithm
	if (mon <= 2)
  401bdc:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
  401be0:	2b02      	cmp	r3, #2
  401be2:	dc0b      	bgt.n	401bfc <GetPvAngle+0x144>
	{
		x1 = 1;
  401be4:	2301      	movs	r3, #1
  401be6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  401bea:	e00a      	b.n	401c02 <GetPvAngle+0x14a>
  401bec:	20000494 	.word	0x20000494
  401bf0:	0040b131 	.word	0x0040b131
  401bf4:	0040b341 	.word	0x0040b341
  401bf8:	47a8c000 	.word	0x47a8c000
	}
	else
	{
		x1 = 0;
  401bfc:	2300      	movs	r3, #0
  401bfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	}
	x2 = 12 * x1;
  401c02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
  401c06:	4613      	mov	r3, r2
  401c08:	005b      	lsls	r3, r3, #1
  401c0a:	4413      	add	r3, r2
  401c0c:	009b      	lsls	r3, r3, #2
  401c0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	x3 = x2 - 3;
  401c12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
  401c16:	3b03      	subs	r3, #3
  401c18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	x4 = mon + x3;
  401c1c:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	; 0xac
  401c20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
  401c24:	4413      	add	r3, r2
  401c26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	x5 = 4800 - x1;
  401c2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
  401c2e:	f5c3 5396 	rsb	r3, r3, #4800	; 0x12c0
  401c32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	x7 = x5 + year;
  401c36:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
  401c3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
  401c3e:	4413      	add	r3, r2
  401c40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	y0 = 153*x4;
  401c44:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
  401c48:	4613      	mov	r3, r2
  401c4a:	00db      	lsls	r3, r3, #3
  401c4c:	4413      	add	r3, r2
  401c4e:	011a      	lsls	r2, r3, #4
  401c50:	4413      	add	r3, r2
  401c52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	y1 = y0 + 2;
  401c56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
  401c5a:	3302      	adds	r3, #2
  401c5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	y2 = y1 / 5.0f;
  401c60:	4b8a      	ldr	r3, [pc, #552]	; (401e8c <GetPvAngle+0x3d4>)
  401c62:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
  401c66:	4798      	blx	r3
  401c68:	4602      	mov	r2, r0
  401c6a:	4b89      	ldr	r3, [pc, #548]	; (401e90 <GetPvAngle+0x3d8>)
  401c6c:	4989      	ldr	r1, [pc, #548]	; (401e94 <GetPvAngle+0x3dc>)
  401c6e:	4610      	mov	r0, r2
  401c70:	4798      	blx	r3
  401c72:	4603      	mov	r3, r0
  401c74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	y3 = date + y2;
  401c78:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
  401c7c:	4b83      	ldr	r3, [pc, #524]	; (401e8c <GetPvAngle+0x3d4>)
  401c7e:	4610      	mov	r0, r2
  401c80:	4798      	blx	r3
  401c82:	4602      	mov	r2, r0
  401c84:	4b84      	ldr	r3, [pc, #528]	; (401e98 <GetPvAngle+0x3e0>)
  401c86:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
  401c8a:	4610      	mov	r0, r2
  401c8c:	4798      	blx	r3
  401c8e:	4603      	mov	r3, r0
  401c90:	67fb      	str	r3, [r7, #124]	; 0x7c
	y4 = 365 * x7;
  401c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
  401c96:	f240 126d 	movw	r2, #365	; 0x16d
  401c9a:	fb02 f303 	mul.w	r3, r2, r3
  401c9e:	67bb      	str	r3, [r7, #120]	; 0x78
	y5 = y3 + y4;
  401ca0:	4b7a      	ldr	r3, [pc, #488]	; (401e8c <GetPvAngle+0x3d4>)
  401ca2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
  401ca4:	4798      	blx	r3
  401ca6:	4602      	mov	r2, r0
  401ca8:	4b7b      	ldr	r3, [pc, #492]	; (401e98 <GetPvAngle+0x3e0>)
  401caa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
  401cac:	4610      	mov	r0, r2
  401cae:	4798      	blx	r3
  401cb0:	4603      	mov	r3, r0
  401cb2:	677b      	str	r3, [r7, #116]	; 0x74
	y6 = x7 / 4.0f;
  401cb4:	4b75      	ldr	r3, [pc, #468]	; (401e8c <GetPvAngle+0x3d4>)
  401cb6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
  401cba:	4798      	blx	r3
  401cbc:	4602      	mov	r2, r0
  401cbe:	4b74      	ldr	r3, [pc, #464]	; (401e90 <GetPvAngle+0x3d8>)
  401cc0:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  401cc4:	4610      	mov	r0, r2
  401cc6:	4798      	blx	r3
  401cc8:	4603      	mov	r3, r0
  401cca:	673b      	str	r3, [r7, #112]	; 0x70
	y7 = y5 + y6;
  401ccc:	4b72      	ldr	r3, [pc, #456]	; (401e98 <GetPvAngle+0x3e0>)
  401cce:	6f39      	ldr	r1, [r7, #112]	; 0x70
  401cd0:	6f78      	ldr	r0, [r7, #116]	; 0x74
  401cd2:	4798      	blx	r3
  401cd4:	4603      	mov	r3, r0
  401cd6:	66fb      	str	r3, [r7, #108]	; 0x6c
	y8 = x7 / 100.0f;
  401cd8:	4b6c      	ldr	r3, [pc, #432]	; (401e8c <GetPvAngle+0x3d4>)
  401cda:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
  401cde:	4798      	blx	r3
  401ce0:	4602      	mov	r2, r0
  401ce2:	4b6b      	ldr	r3, [pc, #428]	; (401e90 <GetPvAngle+0x3d8>)
  401ce4:	496d      	ldr	r1, [pc, #436]	; (401e9c <GetPvAngle+0x3e4>)
  401ce6:	4610      	mov	r0, r2
  401ce8:	4798      	blx	r3
  401cea:	4603      	mov	r3, r0
  401cec:	66bb      	str	r3, [r7, #104]	; 0x68
	y9 = y7 - y8;
  401cee:	4b6c      	ldr	r3, [pc, #432]	; (401ea0 <GetPvAngle+0x3e8>)
  401cf0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
  401cf2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
  401cf4:	4798      	blx	r3
  401cf6:	4603      	mov	r3, r0
  401cf8:	667b      	str	r3, [r7, #100]	; 0x64
	y10 = x7 / 400.0f;
  401cfa:	4b64      	ldr	r3, [pc, #400]	; (401e8c <GetPvAngle+0x3d4>)
  401cfc:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
  401d00:	4798      	blx	r3
  401d02:	4602      	mov	r2, r0
  401d04:	4b62      	ldr	r3, [pc, #392]	; (401e90 <GetPvAngle+0x3d8>)
  401d06:	4967      	ldr	r1, [pc, #412]	; (401ea4 <GetPvAngle+0x3ec>)
  401d08:	4610      	mov	r0, r2
  401d0a:	4798      	blx	r3
  401d0c:	4603      	mov	r3, r0
  401d0e:	663b      	str	r3, [r7, #96]	; 0x60
	y11 = y9 + y10;
  401d10:	4b61      	ldr	r3, [pc, #388]	; (401e98 <GetPvAngle+0x3e0>)
  401d12:	6e39      	ldr	r1, [r7, #96]	; 0x60
  401d14:	6e78      	ldr	r0, [r7, #100]	; 0x64
  401d16:	4798      	blx	r3
  401d18:	4603      	mov	r3, r0
  401d1a:	65fb      	str	r3, [r7, #92]	; 0x5c

	x9 = y11 - 32045;
  401d1c:	4b60      	ldr	r3, [pc, #384]	; (401ea0 <GetPvAngle+0x3e8>)
  401d1e:	4962      	ldr	r1, [pc, #392]	; (401ea8 <GetPvAngle+0x3f0>)
  401d20:	6df8      	ldr	r0, [r7, #92]	; 0x5c
  401d22:	4798      	blx	r3
  401d24:	4603      	mov	r3, r0
  401d26:	65bb      	str	r3, [r7, #88]	; 0x58
	y12 = hrs - 12;
  401d28:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	; 0xa8
  401d2c:	3b0c      	subs	r3, #12
  401d2e:	657b      	str	r3, [r7, #84]	; 0x54
	y13 = y12 / 24.0f;
  401d30:	4b56      	ldr	r3, [pc, #344]	; (401e8c <GetPvAngle+0x3d4>)
  401d32:	6d78      	ldr	r0, [r7, #84]	; 0x54
  401d34:	4798      	blx	r3
  401d36:	4602      	mov	r2, r0
  401d38:	4b55      	ldr	r3, [pc, #340]	; (401e90 <GetPvAngle+0x3d8>)
  401d3a:	495c      	ldr	r1, [pc, #368]	; (401eac <GetPvAngle+0x3f4>)
  401d3c:	4610      	mov	r0, r2
  401d3e:	4798      	blx	r3
  401d40:	4603      	mov	r3, r0
  401d42:	653b      	str	r3, [r7, #80]	; 0x50
	y14 = min / 1440.0f;
  401d44:	f9b7 20a6 	ldrsh.w	r2, [r7, #166]	; 0xa6
  401d48:	4b50      	ldr	r3, [pc, #320]	; (401e8c <GetPvAngle+0x3d4>)
  401d4a:	4610      	mov	r0, r2
  401d4c:	4798      	blx	r3
  401d4e:	4602      	mov	r2, r0
  401d50:	4b4f      	ldr	r3, [pc, #316]	; (401e90 <GetPvAngle+0x3d8>)
  401d52:	4957      	ldr	r1, [pc, #348]	; (401eb0 <GetPvAngle+0x3f8>)
  401d54:	4610      	mov	r0, r2
  401d56:	4798      	blx	r3
  401d58:	4603      	mov	r3, r0
  401d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
	y15 = y13 + y14;
  401d5c:	4b4e      	ldr	r3, [pc, #312]	; (401e98 <GetPvAngle+0x3e0>)
  401d5e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
  401d60:	6d38      	ldr	r0, [r7, #80]	; 0x50
  401d62:	4798      	blx	r3
  401d64:	4603      	mov	r3, r0
  401d66:	64bb      	str	r3, [r7, #72]	; 0x48
	y16 = sec / 86400.0f;
  401d68:	f9b7 20a4 	ldrsh.w	r2, [r7, #164]	; 0xa4
  401d6c:	4b47      	ldr	r3, [pc, #284]	; (401e8c <GetPvAngle+0x3d4>)
  401d6e:	4610      	mov	r0, r2
  401d70:	4798      	blx	r3
  401d72:	4602      	mov	r2, r0
  401d74:	4b46      	ldr	r3, [pc, #280]	; (401e90 <GetPvAngle+0x3d8>)
  401d76:	494f      	ldr	r1, [pc, #316]	; (401eb4 <GetPvAngle+0x3fc>)
  401d78:	4610      	mov	r0, r2
  401d7a:	4798      	blx	r3
  401d7c:	4603      	mov	r3, r0
  401d7e:	647b      	str	r3, [r7, #68]	; 0x44
	x13 = y15 + y16;
  401d80:	4b45      	ldr	r3, [pc, #276]	; (401e98 <GetPvAngle+0x3e0>)
  401d82:	6c79      	ldr	r1, [r7, #68]	; 0x44
  401d84:	6cb8      	ldr	r0, [r7, #72]	; 0x48
  401d86:	4798      	blx	r3
  401d88:	4603      	mov	r3, r0
  401d8a:	643b      	str	r3, [r7, #64]	; 0x40

	e = x9 + x13;
  401d8c:	4b42      	ldr	r3, [pc, #264]	; (401e98 <GetPvAngle+0x3e0>)
  401d8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
  401d90:	6db8      	ldr	r0, [r7, #88]	; 0x58
  401d92:	4798      	blx	r3
  401d94:	4603      	mov	r3, r0
  401d96:	63fb      	str	r3, [r7, #60]	; 0x3c
	f = (e - 2451545.0f) / 36525.0f;
  401d98:	4b41      	ldr	r3, [pc, #260]	; (401ea0 <GetPvAngle+0x3e8>)
  401d9a:	4947      	ldr	r1, [pc, #284]	; (401eb8 <GetPvAngle+0x400>)
  401d9c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
  401d9e:	4798      	blx	r3
  401da0:	4603      	mov	r3, r0
  401da2:	461a      	mov	r2, r3
  401da4:	4b3a      	ldr	r3, [pc, #232]	; (401e90 <GetPvAngle+0x3d8>)
  401da6:	4945      	ldr	r1, [pc, #276]	; (401ebc <GetPvAngle+0x404>)
  401da8:	4610      	mov	r0, r2
  401daa:	4798      	blx	r3
  401dac:	4603      	mov	r3, r0
  401dae:	63bb      	str	r3, [r7, #56]	; 0x38
	g = ((int)(280.46646f + f*(36000.76983f + f*0.0003032f))) % 360; //mod
  401db0:	4b43      	ldr	r3, [pc, #268]	; (401ec0 <GetPvAngle+0x408>)
  401db2:	4944      	ldr	r1, [pc, #272]	; (401ec4 <GetPvAngle+0x40c>)
  401db4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  401db6:	4798      	blx	r3
  401db8:	4603      	mov	r3, r0
  401dba:	461a      	mov	r2, r3
  401dbc:	4b36      	ldr	r3, [pc, #216]	; (401e98 <GetPvAngle+0x3e0>)
  401dbe:	4942      	ldr	r1, [pc, #264]	; (401ec8 <GetPvAngle+0x410>)
  401dc0:	4610      	mov	r0, r2
  401dc2:	4798      	blx	r3
  401dc4:	4603      	mov	r3, r0
  401dc6:	461a      	mov	r2, r3
  401dc8:	4b3d      	ldr	r3, [pc, #244]	; (401ec0 <GetPvAngle+0x408>)
  401dca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  401dcc:	4610      	mov	r0, r2
  401dce:	4798      	blx	r3
  401dd0:	4603      	mov	r3, r0
  401dd2:	461a      	mov	r2, r3
  401dd4:	4b30      	ldr	r3, [pc, #192]	; (401e98 <GetPvAngle+0x3e0>)
  401dd6:	493d      	ldr	r1, [pc, #244]	; (401ecc <GetPvAngle+0x414>)
  401dd8:	4610      	mov	r0, r2
  401dda:	4798      	blx	r3
  401ddc:	4603      	mov	r3, r0
  401dde:	461a      	mov	r2, r3
  401de0:	4b3b      	ldr	r3, [pc, #236]	; (401ed0 <GetPvAngle+0x418>)
  401de2:	4610      	mov	r0, r2
  401de4:	4798      	blx	r3
  401de6:	4603      	mov	r3, r0
  401de8:	4a3a      	ldr	r2, [pc, #232]	; (401ed4 <GetPvAngle+0x41c>)
  401dea:	fb83 1202 	smull	r1, r2, r3, r2
  401dee:	441a      	add	r2, r3
  401df0:	1211      	asrs	r1, r2, #8
  401df2:	17da      	asrs	r2, r3, #31
  401df4:	1a8a      	subs	r2, r1, r2
  401df6:	f44f 71b4 	mov.w	r1, #360	; 0x168
  401dfa:	fb01 f202 	mul.w	r2, r1, r2
  401dfe:	1a9a      	subs	r2, r3, r2
  401e00:	4b22      	ldr	r3, [pc, #136]	; (401e8c <GetPvAngle+0x3d4>)
  401e02:	4610      	mov	r0, r2
  401e04:	4798      	blx	r3
  401e06:	4603      	mov	r3, r0
  401e08:	637b      	str	r3, [r7, #52]	; 0x34
	h = 357.52911f + f*(35999.05029f - 0.0001537f*f);
  401e0a:	4b2d      	ldr	r3, [pc, #180]	; (401ec0 <GetPvAngle+0x408>)
  401e0c:	4932      	ldr	r1, [pc, #200]	; (401ed8 <GetPvAngle+0x420>)
  401e0e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  401e10:	4798      	blx	r3
  401e12:	4603      	mov	r3, r0
  401e14:	461a      	mov	r2, r3
  401e16:	4b22      	ldr	r3, [pc, #136]	; (401ea0 <GetPvAngle+0x3e8>)
  401e18:	4611      	mov	r1, r2
  401e1a:	4830      	ldr	r0, [pc, #192]	; (401edc <GetPvAngle+0x424>)
  401e1c:	4798      	blx	r3
  401e1e:	4603      	mov	r3, r0
  401e20:	461a      	mov	r2, r3
  401e22:	4b27      	ldr	r3, [pc, #156]	; (401ec0 <GetPvAngle+0x408>)
  401e24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  401e26:	4610      	mov	r0, r2
  401e28:	4798      	blx	r3
  401e2a:	4603      	mov	r3, r0
  401e2c:	461a      	mov	r2, r3
  401e2e:	4b1a      	ldr	r3, [pc, #104]	; (401e98 <GetPvAngle+0x3e0>)
  401e30:	492b      	ldr	r1, [pc, #172]	; (401ee0 <GetPvAngle+0x428>)
  401e32:	4610      	mov	r0, r2
  401e34:	4798      	blx	r3
  401e36:	4603      	mov	r3, r0
  401e38:	633b      	str	r3, [r7, #48]	; 0x30
	i = 0.016708634f - f*(0.000042037f + 0.0000001267f*f);
  401e3a:	4b21      	ldr	r3, [pc, #132]	; (401ec0 <GetPvAngle+0x408>)
  401e3c:	4929      	ldr	r1, [pc, #164]	; (401ee4 <GetPvAngle+0x42c>)
  401e3e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  401e40:	4798      	blx	r3
  401e42:	4603      	mov	r3, r0
  401e44:	461a      	mov	r2, r3
  401e46:	4b14      	ldr	r3, [pc, #80]	; (401e98 <GetPvAngle+0x3e0>)
  401e48:	4927      	ldr	r1, [pc, #156]	; (401ee8 <GetPvAngle+0x430>)
  401e4a:	4610      	mov	r0, r2
  401e4c:	4798      	blx	r3
  401e4e:	4603      	mov	r3, r0
  401e50:	461a      	mov	r2, r3
  401e52:	4b1b      	ldr	r3, [pc, #108]	; (401ec0 <GetPvAngle+0x408>)
  401e54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  401e56:	4610      	mov	r0, r2
  401e58:	4798      	blx	r3
  401e5a:	4603      	mov	r3, r0
  401e5c:	461a      	mov	r2, r3
  401e5e:	4b10      	ldr	r3, [pc, #64]	; (401ea0 <GetPvAngle+0x3e8>)
  401e60:	4611      	mov	r1, r2
  401e62:	4822      	ldr	r0, [pc, #136]	; (401eec <GetPvAngle+0x434>)
  401e64:	4798      	blx	r3
  401e66:	4603      	mov	r3, r0
  401e68:	62fb      	str	r3, [r7, #44]	; 0x2c
	j = sin(Rad(h))*(1.914602f - f*(0.004817f + 0.000014f*f));
  401e6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
  401e6c:	4b20      	ldr	r3, [pc, #128]	; (401ef0 <GetPvAngle+0x438>)
  401e6e:	4798      	blx	r3
  401e70:	4602      	mov	r2, r0
  401e72:	4b20      	ldr	r3, [pc, #128]	; (401ef4 <GetPvAngle+0x43c>)
  401e74:	4610      	mov	r0, r2
  401e76:	4798      	blx	r3
  401e78:	4603      	mov	r3, r0
  401e7a:	460c      	mov	r4, r1
  401e7c:	4618      	mov	r0, r3
  401e7e:	4621      	mov	r1, r4
  401e80:	4b1d      	ldr	r3, [pc, #116]	; (401ef8 <GetPvAngle+0x440>)
  401e82:	4798      	blx	r3
  401e84:	4605      	mov	r5, r0
  401e86:	460e      	mov	r6, r1
  401e88:	4b0d      	ldr	r3, [pc, #52]	; (401ec0 <GetPvAngle+0x408>)
  401e8a:	e037      	b.n	401efc <GetPvAngle+0x444>
  401e8c:	0040b131 	.word	0x0040b131
  401e90:	0040b341 	.word	0x0040b341
  401e94:	40a00000 	.word	0x40a00000
  401e98:	0040afc9 	.word	0x0040afc9
  401e9c:	42c80000 	.word	0x42c80000
  401ea0:	0040afc5 	.word	0x0040afc5
  401ea4:	43c80000 	.word	0x43c80000
  401ea8:	46fa5a00 	.word	0x46fa5a00
  401eac:	41c00000 	.word	0x41c00000
  401eb0:	44b40000 	.word	0x44b40000
  401eb4:	47a8c000 	.word	0x47a8c000
  401eb8:	4a15a164 	.word	0x4a15a164
  401ebc:	470ead00 	.word	0x470ead00
  401ec0:	0040b1d9 	.word	0x0040b1d9
  401ec4:	399ef6d1 	.word	0x399ef6d1
  401ec8:	470ca0c5 	.word	0x470ca0c5
  401ecc:	438c3bb5 	.word	0x438c3bb5
  401ed0:	0040b565 	.word	0x0040b565
  401ed4:	b60b60b7 	.word	0xb60b60b7
  401ed8:	39212a88 	.word	0x39212a88
  401edc:	470c9f0d 	.word	0x470c9f0d
  401ee0:	43b2c3ba 	.word	0x43b2c3ba
  401ee4:	34080b08 	.word	0x34080b08
  401ee8:	383050e3 	.word	0x383050e3
  401eec:	3c88e08c 	.word	0x3c88e08c
  401ef0:	00402951 	.word	0x00402951
  401ef4:	0040a8c5 	.word	0x0040a8c5
  401ef8:	00407de1 	.word	0x00407de1
  401efc:	4994      	ldr	r1, [pc, #592]	; (402150 <GetPvAngle+0x698>)
  401efe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  401f00:	4798      	blx	r3
  401f02:	4603      	mov	r3, r0
  401f04:	461a      	mov	r2, r3
  401f06:	4b93      	ldr	r3, [pc, #588]	; (402154 <GetPvAngle+0x69c>)
  401f08:	4993      	ldr	r1, [pc, #588]	; (402158 <GetPvAngle+0x6a0>)
  401f0a:	4610      	mov	r0, r2
  401f0c:	4798      	blx	r3
  401f0e:	4603      	mov	r3, r0
  401f10:	461a      	mov	r2, r3
  401f12:	4b92      	ldr	r3, [pc, #584]	; (40215c <GetPvAngle+0x6a4>)
  401f14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  401f16:	4610      	mov	r0, r2
  401f18:	4798      	blx	r3
  401f1a:	4603      	mov	r3, r0
  401f1c:	461a      	mov	r2, r3
  401f1e:	4b90      	ldr	r3, [pc, #576]	; (402160 <GetPvAngle+0x6a8>)
  401f20:	4611      	mov	r1, r2
  401f22:	4890      	ldr	r0, [pc, #576]	; (402164 <GetPvAngle+0x6ac>)
  401f24:	4798      	blx	r3
  401f26:	4603      	mov	r3, r0
  401f28:	461a      	mov	r2, r3
  401f2a:	4b8f      	ldr	r3, [pc, #572]	; (402168 <GetPvAngle+0x6b0>)
  401f2c:	4610      	mov	r0, r2
  401f2e:	4798      	blx	r3
  401f30:	4602      	mov	r2, r0
  401f32:	460b      	mov	r3, r1
  401f34:	4c8d      	ldr	r4, [pc, #564]	; (40216c <GetPvAngle+0x6b4>)
  401f36:	4628      	mov	r0, r5
  401f38:	4631      	mov	r1, r6
  401f3a:	47a0      	blx	r4
  401f3c:	4603      	mov	r3, r0
  401f3e:	460c      	mov	r4, r1
  401f40:	4619      	mov	r1, r3
  401f42:	4622      	mov	r2, r4
  401f44:	4b8a      	ldr	r3, [pc, #552]	; (402170 <GetPvAngle+0x6b8>)
  401f46:	4608      	mov	r0, r1
  401f48:	4611      	mov	r1, r2
  401f4a:	4798      	blx	r3
  401f4c:	4603      	mov	r3, r0
  401f4e:	62bb      	str	r3, [r7, #40]	; 0x28
	j = j + sin(Rad(2 * h))*(0.019993f - 0.000101f*f);
  401f50:	4b85      	ldr	r3, [pc, #532]	; (402168 <GetPvAngle+0x6b0>)
  401f52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  401f54:	4798      	blx	r3
  401f56:	4605      	mov	r5, r0
  401f58:	460e      	mov	r6, r1
  401f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  401f5c:	4b7d      	ldr	r3, [pc, #500]	; (402154 <GetPvAngle+0x69c>)
  401f5e:	4611      	mov	r1, r2
  401f60:	4610      	mov	r0, r2
  401f62:	4798      	blx	r3
  401f64:	4603      	mov	r3, r0
  401f66:	4618      	mov	r0, r3
  401f68:	4b82      	ldr	r3, [pc, #520]	; (402174 <GetPvAngle+0x6bc>)
  401f6a:	4798      	blx	r3
  401f6c:	4602      	mov	r2, r0
  401f6e:	4b7e      	ldr	r3, [pc, #504]	; (402168 <GetPvAngle+0x6b0>)
  401f70:	4610      	mov	r0, r2
  401f72:	4798      	blx	r3
  401f74:	4603      	mov	r3, r0
  401f76:	460c      	mov	r4, r1
  401f78:	4618      	mov	r0, r3
  401f7a:	4621      	mov	r1, r4
  401f7c:	4b7e      	ldr	r3, [pc, #504]	; (402178 <GetPvAngle+0x6c0>)
  401f7e:	4798      	blx	r3
  401f80:	4680      	mov	r8, r0
  401f82:	4689      	mov	r9, r1
  401f84:	4b75      	ldr	r3, [pc, #468]	; (40215c <GetPvAngle+0x6a4>)
  401f86:	497d      	ldr	r1, [pc, #500]	; (40217c <GetPvAngle+0x6c4>)
  401f88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  401f8a:	4798      	blx	r3
  401f8c:	4603      	mov	r3, r0
  401f8e:	461a      	mov	r2, r3
  401f90:	4b73      	ldr	r3, [pc, #460]	; (402160 <GetPvAngle+0x6a8>)
  401f92:	4611      	mov	r1, r2
  401f94:	487a      	ldr	r0, [pc, #488]	; (402180 <GetPvAngle+0x6c8>)
  401f96:	4798      	blx	r3
  401f98:	4603      	mov	r3, r0
  401f9a:	461a      	mov	r2, r3
  401f9c:	4b72      	ldr	r3, [pc, #456]	; (402168 <GetPvAngle+0x6b0>)
  401f9e:	4610      	mov	r0, r2
  401fa0:	4798      	blx	r3
  401fa2:	4602      	mov	r2, r0
  401fa4:	460b      	mov	r3, r1
  401fa6:	4c71      	ldr	r4, [pc, #452]	; (40216c <GetPvAngle+0x6b4>)
  401fa8:	4640      	mov	r0, r8
  401faa:	4649      	mov	r1, r9
  401fac:	47a0      	blx	r4
  401fae:	4603      	mov	r3, r0
  401fb0:	460c      	mov	r4, r1
  401fb2:	461a      	mov	r2, r3
  401fb4:	4623      	mov	r3, r4
  401fb6:	4c73      	ldr	r4, [pc, #460]	; (402184 <GetPvAngle+0x6cc>)
  401fb8:	4628      	mov	r0, r5
  401fba:	4631      	mov	r1, r6
  401fbc:	47a0      	blx	r4
  401fbe:	4603      	mov	r3, r0
  401fc0:	460c      	mov	r4, r1
  401fc2:	4619      	mov	r1, r3
  401fc4:	4622      	mov	r2, r4
  401fc6:	4b6a      	ldr	r3, [pc, #424]	; (402170 <GetPvAngle+0x6b8>)
  401fc8:	4608      	mov	r0, r1
  401fca:	4611      	mov	r1, r2
  401fcc:	4798      	blx	r3
  401fce:	4603      	mov	r3, r0
  401fd0:	62bb      	str	r3, [r7, #40]	; 0x28
	j = j + sin(Rad(3 * h))*0.000289f;
  401fd2:	4b65      	ldr	r3, [pc, #404]	; (402168 <GetPvAngle+0x6b0>)
  401fd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  401fd6:	4798      	blx	r3
  401fd8:	4605      	mov	r5, r0
  401fda:	460e      	mov	r6, r1
  401fdc:	4b5f      	ldr	r3, [pc, #380]	; (40215c <GetPvAngle+0x6a4>)
  401fde:	496a      	ldr	r1, [pc, #424]	; (402188 <GetPvAngle+0x6d0>)
  401fe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
  401fe2:	4798      	blx	r3
  401fe4:	4603      	mov	r3, r0
  401fe6:	4618      	mov	r0, r3
  401fe8:	4b62      	ldr	r3, [pc, #392]	; (402174 <GetPvAngle+0x6bc>)
  401fea:	4798      	blx	r3
  401fec:	4602      	mov	r2, r0
  401fee:	4b5e      	ldr	r3, [pc, #376]	; (402168 <GetPvAngle+0x6b0>)
  401ff0:	4610      	mov	r0, r2
  401ff2:	4798      	blx	r3
  401ff4:	4603      	mov	r3, r0
  401ff6:	460c      	mov	r4, r1
  401ff8:	4618      	mov	r0, r3
  401ffa:	4621      	mov	r1, r4
  401ffc:	4b5e      	ldr	r3, [pc, #376]	; (402178 <GetPvAngle+0x6c0>)
  401ffe:	4798      	blx	r3
  402000:	4c5a      	ldr	r4, [pc, #360]	; (40216c <GetPvAngle+0x6b4>)
  402002:	a34f      	add	r3, pc, #316	; (adr r3, 402140 <GetPvAngle+0x688>)
  402004:	e9d3 2300 	ldrd	r2, r3, [r3]
  402008:	47a0      	blx	r4
  40200a:	4603      	mov	r3, r0
  40200c:	460c      	mov	r4, r1
  40200e:	461a      	mov	r2, r3
  402010:	4623      	mov	r3, r4
  402012:	4c5c      	ldr	r4, [pc, #368]	; (402184 <GetPvAngle+0x6cc>)
  402014:	4628      	mov	r0, r5
  402016:	4631      	mov	r1, r6
  402018:	47a0      	blx	r4
  40201a:	4603      	mov	r3, r0
  40201c:	460c      	mov	r4, r1
  40201e:	4619      	mov	r1, r3
  402020:	4622      	mov	r2, r4
  402022:	4b53      	ldr	r3, [pc, #332]	; (402170 <GetPvAngle+0x6b8>)
  402024:	4608      	mov	r0, r1
  402026:	4611      	mov	r1, r2
  402028:	4798      	blx	r3
  40202a:	4603      	mov	r3, r0
  40202c:	62bb      	str	r3, [r7, #40]	; 0x28
	k = g + j;
  40202e:	4b49      	ldr	r3, [pc, #292]	; (402154 <GetPvAngle+0x69c>)
  402030:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  402032:	6b78      	ldr	r0, [r7, #52]	; 0x34
  402034:	4798      	blx	r3
  402036:	4603      	mov	r3, r0
  402038:	627b      	str	r3, [r7, #36]	; 0x24
	l = k - 0.00569f - 0.00478f*sin(Rad(125.04f - 1934.136f*f));
  40203a:	4b49      	ldr	r3, [pc, #292]	; (402160 <GetPvAngle+0x6a8>)
  40203c:	4953      	ldr	r1, [pc, #332]	; (40218c <GetPvAngle+0x6d4>)
  40203e:	6a78      	ldr	r0, [r7, #36]	; 0x24
  402040:	4798      	blx	r3
  402042:	4603      	mov	r3, r0
  402044:	461a      	mov	r2, r3
  402046:	4b48      	ldr	r3, [pc, #288]	; (402168 <GetPvAngle+0x6b0>)
  402048:	4610      	mov	r0, r2
  40204a:	4798      	blx	r3
  40204c:	4605      	mov	r5, r0
  40204e:	460e      	mov	r6, r1
  402050:	4b42      	ldr	r3, [pc, #264]	; (40215c <GetPvAngle+0x6a4>)
  402052:	494f      	ldr	r1, [pc, #316]	; (402190 <GetPvAngle+0x6d8>)
  402054:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  402056:	4798      	blx	r3
  402058:	4603      	mov	r3, r0
  40205a:	461a      	mov	r2, r3
  40205c:	4b40      	ldr	r3, [pc, #256]	; (402160 <GetPvAngle+0x6a8>)
  40205e:	4611      	mov	r1, r2
  402060:	484c      	ldr	r0, [pc, #304]	; (402194 <GetPvAngle+0x6dc>)
  402062:	4798      	blx	r3
  402064:	4603      	mov	r3, r0
  402066:	4618      	mov	r0, r3
  402068:	4b42      	ldr	r3, [pc, #264]	; (402174 <GetPvAngle+0x6bc>)
  40206a:	4798      	blx	r3
  40206c:	4602      	mov	r2, r0
  40206e:	4b3e      	ldr	r3, [pc, #248]	; (402168 <GetPvAngle+0x6b0>)
  402070:	4610      	mov	r0, r2
  402072:	4798      	blx	r3
  402074:	4603      	mov	r3, r0
  402076:	460c      	mov	r4, r1
  402078:	4618      	mov	r0, r3
  40207a:	4621      	mov	r1, r4
  40207c:	4b3e      	ldr	r3, [pc, #248]	; (402178 <GetPvAngle+0x6c0>)
  40207e:	4798      	blx	r3
  402080:	4c3a      	ldr	r4, [pc, #232]	; (40216c <GetPvAngle+0x6b4>)
  402082:	a331      	add	r3, pc, #196	; (adr r3, 402148 <GetPvAngle+0x690>)
  402084:	e9d3 2300 	ldrd	r2, r3, [r3]
  402088:	47a0      	blx	r4
  40208a:	4603      	mov	r3, r0
  40208c:	460c      	mov	r4, r1
  40208e:	461a      	mov	r2, r3
  402090:	4623      	mov	r3, r4
  402092:	4c41      	ldr	r4, [pc, #260]	; (402198 <GetPvAngle+0x6e0>)
  402094:	4628      	mov	r0, r5
  402096:	4631      	mov	r1, r6
  402098:	47a0      	blx	r4
  40209a:	4603      	mov	r3, r0
  40209c:	460c      	mov	r4, r1
  40209e:	4619      	mov	r1, r3
  4020a0:	4622      	mov	r2, r4
  4020a2:	4b33      	ldr	r3, [pc, #204]	; (402170 <GetPvAngle+0x6b8>)
  4020a4:	4608      	mov	r0, r1
  4020a6:	4611      	mov	r1, r2
  4020a8:	4798      	blx	r3
  4020aa:	4603      	mov	r3, r0
  4020ac:	623b      	str	r3, [r7, #32]
	m = 23 + (26 + ((21.448f - f*(46.815f + f*(0.00059f - f*0.001813f)))) / 60.0f) / 60.0f;
  4020ae:	4b2b      	ldr	r3, [pc, #172]	; (40215c <GetPvAngle+0x6a4>)
  4020b0:	493a      	ldr	r1, [pc, #232]	; (40219c <GetPvAngle+0x6e4>)
  4020b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  4020b4:	4798      	blx	r3
  4020b6:	4603      	mov	r3, r0
  4020b8:	461a      	mov	r2, r3
  4020ba:	4b29      	ldr	r3, [pc, #164]	; (402160 <GetPvAngle+0x6a8>)
  4020bc:	4611      	mov	r1, r2
  4020be:	4838      	ldr	r0, [pc, #224]	; (4021a0 <GetPvAngle+0x6e8>)
  4020c0:	4798      	blx	r3
  4020c2:	4603      	mov	r3, r0
  4020c4:	461a      	mov	r2, r3
  4020c6:	4b25      	ldr	r3, [pc, #148]	; (40215c <GetPvAngle+0x6a4>)
  4020c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  4020ca:	4610      	mov	r0, r2
  4020cc:	4798      	blx	r3
  4020ce:	4603      	mov	r3, r0
  4020d0:	461a      	mov	r2, r3
  4020d2:	4b20      	ldr	r3, [pc, #128]	; (402154 <GetPvAngle+0x69c>)
  4020d4:	4933      	ldr	r1, [pc, #204]	; (4021a4 <GetPvAngle+0x6ec>)
  4020d6:	4610      	mov	r0, r2
  4020d8:	4798      	blx	r3
  4020da:	4603      	mov	r3, r0
  4020dc:	461a      	mov	r2, r3
  4020de:	4b1f      	ldr	r3, [pc, #124]	; (40215c <GetPvAngle+0x6a4>)
  4020e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  4020e2:	4610      	mov	r0, r2
  4020e4:	4798      	blx	r3
  4020e6:	4603      	mov	r3, r0
  4020e8:	461a      	mov	r2, r3
  4020ea:	4b1d      	ldr	r3, [pc, #116]	; (402160 <GetPvAngle+0x6a8>)
  4020ec:	4611      	mov	r1, r2
  4020ee:	482e      	ldr	r0, [pc, #184]	; (4021a8 <GetPvAngle+0x6f0>)
  4020f0:	4798      	blx	r3
  4020f2:	4603      	mov	r3, r0
  4020f4:	461a      	mov	r2, r3
  4020f6:	4b2d      	ldr	r3, [pc, #180]	; (4021ac <GetPvAngle+0x6f4>)
  4020f8:	492d      	ldr	r1, [pc, #180]	; (4021b0 <GetPvAngle+0x6f8>)
  4020fa:	4610      	mov	r0, r2
  4020fc:	4798      	blx	r3
  4020fe:	4603      	mov	r3, r0
  402100:	461a      	mov	r2, r3
  402102:	4b14      	ldr	r3, [pc, #80]	; (402154 <GetPvAngle+0x69c>)
  402104:	492b      	ldr	r1, [pc, #172]	; (4021b4 <GetPvAngle+0x6fc>)
  402106:	4610      	mov	r0, r2
  402108:	4798      	blx	r3
  40210a:	4603      	mov	r3, r0
  40210c:	461a      	mov	r2, r3
  40210e:	4b27      	ldr	r3, [pc, #156]	; (4021ac <GetPvAngle+0x6f4>)
  402110:	4927      	ldr	r1, [pc, #156]	; (4021b0 <GetPvAngle+0x6f8>)
  402112:	4610      	mov	r0, r2
  402114:	4798      	blx	r3
  402116:	4603      	mov	r3, r0
  402118:	461a      	mov	r2, r3
  40211a:	4b0e      	ldr	r3, [pc, #56]	; (402154 <GetPvAngle+0x69c>)
  40211c:	4926      	ldr	r1, [pc, #152]	; (4021b8 <GetPvAngle+0x700>)
  40211e:	4610      	mov	r0, r2
  402120:	4798      	blx	r3
  402122:	4603      	mov	r3, r0
  402124:	61fb      	str	r3, [r7, #28]
	n = m + 0.00256f*cos(Rad(125.04f - 1934.136f*f));
  402126:	4b10      	ldr	r3, [pc, #64]	; (402168 <GetPvAngle+0x6b0>)
  402128:	69f8      	ldr	r0, [r7, #28]
  40212a:	4798      	blx	r3
  40212c:	4605      	mov	r5, r0
  40212e:	460e      	mov	r6, r1
  402130:	4b0a      	ldr	r3, [pc, #40]	; (40215c <GetPvAngle+0x6a4>)
  402132:	4917      	ldr	r1, [pc, #92]	; (402190 <GetPvAngle+0x6d8>)
  402134:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  402136:	4798      	blx	r3
  402138:	4603      	mov	r3, r0
  40213a:	e03f      	b.n	4021bc <GetPvAngle+0x704>
  40213c:	f3af 8000 	nop.w
  402140:	80000000 	.word	0x80000000
  402144:	3f32f09d 	.word	0x3f32f09d
  402148:	80000000 	.word	0x80000000
  40214c:	3f739431 	.word	0x3f739431
  402150:	376ae18b 	.word	0x376ae18b
  402154:	0040afc9 	.word	0x0040afc9
  402158:	3b9dd7ed 	.word	0x3b9dd7ed
  40215c:	0040b1d9 	.word	0x0040b1d9
  402160:	0040afc5 	.word	0x0040afc5
  402164:	3ff511ae 	.word	0x3ff511ae
  402168:	0040a8c5 	.word	0x0040a8c5
  40216c:	0040a96d 	.word	0x0040a96d
  402170:	0040af1d 	.word	0x0040af1d
  402174:	00402951 	.word	0x00402951
  402178:	00407de1 	.word	0x00407de1
  40217c:	38d3cff6 	.word	0x38d3cff6
  402180:	3ca3c85c 	.word	0x3ca3c85c
  402184:	0040a609 	.word	0x0040a609
  402188:	40400000 	.word	0x40400000
  40218c:	3bba732e 	.word	0x3bba732e
  402190:	44f1c45a 	.word	0x44f1c45a
  402194:	42fa147b 	.word	0x42fa147b
  402198:	0040a605 	.word	0x0040a605
  40219c:	3aeda22f 	.word	0x3aeda22f
  4021a0:	3a1aaa3b 	.word	0x3a1aaa3b
  4021a4:	423b428f 	.word	0x423b428f
  4021a8:	41ab9581 	.word	0x41ab9581
  4021ac:	0040b341 	.word	0x0040b341
  4021b0:	42700000 	.word	0x42700000
  4021b4:	41d00000 	.word	0x41d00000
  4021b8:	41b80000 	.word	0x41b80000
  4021bc:	461a      	mov	r2, r3
  4021be:	4ba2      	ldr	r3, [pc, #648]	; (402448 <GetPvAngle+0x990>)
  4021c0:	4611      	mov	r1, r2
  4021c2:	48a2      	ldr	r0, [pc, #648]	; (40244c <GetPvAngle+0x994>)
  4021c4:	4798      	blx	r3
  4021c6:	4603      	mov	r3, r0
  4021c8:	4618      	mov	r0, r3
  4021ca:	4ba1      	ldr	r3, [pc, #644]	; (402450 <GetPvAngle+0x998>)
  4021cc:	4798      	blx	r3
  4021ce:	4602      	mov	r2, r0
  4021d0:	4ba0      	ldr	r3, [pc, #640]	; (402454 <GetPvAngle+0x99c>)
  4021d2:	4610      	mov	r0, r2
  4021d4:	4798      	blx	r3
  4021d6:	4603      	mov	r3, r0
  4021d8:	460c      	mov	r4, r1
  4021da:	4618      	mov	r0, r3
  4021dc:	4621      	mov	r1, r4
  4021de:	4b9e      	ldr	r3, [pc, #632]	; (402458 <GetPvAngle+0x9a0>)
  4021e0:	4798      	blx	r3
  4021e2:	4c9e      	ldr	r4, [pc, #632]	; (40245c <GetPvAngle+0x9a4>)
  4021e4:	a396      	add	r3, pc, #600	; (adr r3, 402440 <GetPvAngle+0x988>)
  4021e6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4021ea:	47a0      	blx	r4
  4021ec:	4603      	mov	r3, r0
  4021ee:	460c      	mov	r4, r1
  4021f0:	461a      	mov	r2, r3
  4021f2:	4623      	mov	r3, r4
  4021f4:	4c9a      	ldr	r4, [pc, #616]	; (402460 <GetPvAngle+0x9a8>)
  4021f6:	4628      	mov	r0, r5
  4021f8:	4631      	mov	r1, r6
  4021fa:	47a0      	blx	r4
  4021fc:	4603      	mov	r3, r0
  4021fe:	460c      	mov	r4, r1
  402200:	4619      	mov	r1, r3
  402202:	4622      	mov	r2, r4
  402204:	4b97      	ldr	r3, [pc, #604]	; (402464 <GetPvAngle+0x9ac>)
  402206:	4608      	mov	r0, r1
  402208:	4611      	mov	r1, r2
  40220a:	4798      	blx	r3
  40220c:	4603      	mov	r3, r0
  40220e:	61bb      	str	r3, [r7, #24]
	o = Deg(asin(sin(Rad(n))*sin(Rad(l))));
  402210:	69b8      	ldr	r0, [r7, #24]
  402212:	4b8f      	ldr	r3, [pc, #572]	; (402450 <GetPvAngle+0x998>)
  402214:	4798      	blx	r3
  402216:	4602      	mov	r2, r0
  402218:	4b8e      	ldr	r3, [pc, #568]	; (402454 <GetPvAngle+0x99c>)
  40221a:	4610      	mov	r0, r2
  40221c:	4798      	blx	r3
  40221e:	4603      	mov	r3, r0
  402220:	460c      	mov	r4, r1
  402222:	4618      	mov	r0, r3
  402224:	4621      	mov	r1, r4
  402226:	4b90      	ldr	r3, [pc, #576]	; (402468 <GetPvAngle+0x9b0>)
  402228:	4798      	blx	r3
  40222a:	4605      	mov	r5, r0
  40222c:	460e      	mov	r6, r1
  40222e:	6a38      	ldr	r0, [r7, #32]
  402230:	4b87      	ldr	r3, [pc, #540]	; (402450 <GetPvAngle+0x998>)
  402232:	4798      	blx	r3
  402234:	4602      	mov	r2, r0
  402236:	4b87      	ldr	r3, [pc, #540]	; (402454 <GetPvAngle+0x99c>)
  402238:	4610      	mov	r0, r2
  40223a:	4798      	blx	r3
  40223c:	4603      	mov	r3, r0
  40223e:	460c      	mov	r4, r1
  402240:	4618      	mov	r0, r3
  402242:	4621      	mov	r1, r4
  402244:	4b88      	ldr	r3, [pc, #544]	; (402468 <GetPvAngle+0x9b0>)
  402246:	4798      	blx	r3
  402248:	4602      	mov	r2, r0
  40224a:	460b      	mov	r3, r1
  40224c:	4c83      	ldr	r4, [pc, #524]	; (40245c <GetPvAngle+0x9a4>)
  40224e:	4628      	mov	r0, r5
  402250:	4631      	mov	r1, r6
  402252:	47a0      	blx	r4
  402254:	4603      	mov	r3, r0
  402256:	460c      	mov	r4, r1
  402258:	4618      	mov	r0, r3
  40225a:	4621      	mov	r1, r4
  40225c:	4b83      	ldr	r3, [pc, #524]	; (40246c <GetPvAngle+0x9b4>)
  40225e:	4798      	blx	r3
  402260:	460a      	mov	r2, r1
  402262:	4601      	mov	r1, r0
  402264:	4b7f      	ldr	r3, [pc, #508]	; (402464 <GetPvAngle+0x9ac>)
  402266:	4608      	mov	r0, r1
  402268:	4611      	mov	r1, r2
  40226a:	4798      	blx	r3
  40226c:	4603      	mov	r3, r0
  40226e:	4618      	mov	r0, r3
  402270:	4b7f      	ldr	r3, [pc, #508]	; (402470 <GetPvAngle+0x9b8>)
  402272:	4798      	blx	r3
  402274:	6178      	str	r0, [r7, #20]
	p = tan(Rad(n / 2))*tan(Rad(n / 2));
  402276:	4b7f      	ldr	r3, [pc, #508]	; (402474 <GetPvAngle+0x9bc>)
  402278:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40227c:	69b8      	ldr	r0, [r7, #24]
  40227e:	4798      	blx	r3
  402280:	4603      	mov	r3, r0
  402282:	4618      	mov	r0, r3
  402284:	4b72      	ldr	r3, [pc, #456]	; (402450 <GetPvAngle+0x998>)
  402286:	4798      	blx	r3
  402288:	4602      	mov	r2, r0
  40228a:	4b72      	ldr	r3, [pc, #456]	; (402454 <GetPvAngle+0x99c>)
  40228c:	4610      	mov	r0, r2
  40228e:	4798      	blx	r3
  402290:	4603      	mov	r3, r0
  402292:	460c      	mov	r4, r1
  402294:	4618      	mov	r0, r3
  402296:	4621      	mov	r1, r4
  402298:	4b77      	ldr	r3, [pc, #476]	; (402478 <GetPvAngle+0x9c0>)
  40229a:	4798      	blx	r3
  40229c:	4605      	mov	r5, r0
  40229e:	460e      	mov	r6, r1
  4022a0:	4b74      	ldr	r3, [pc, #464]	; (402474 <GetPvAngle+0x9bc>)
  4022a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4022a6:	69b8      	ldr	r0, [r7, #24]
  4022a8:	4798      	blx	r3
  4022aa:	4603      	mov	r3, r0
  4022ac:	4618      	mov	r0, r3
  4022ae:	4b68      	ldr	r3, [pc, #416]	; (402450 <GetPvAngle+0x998>)
  4022b0:	4798      	blx	r3
  4022b2:	4602      	mov	r2, r0
  4022b4:	4b67      	ldr	r3, [pc, #412]	; (402454 <GetPvAngle+0x99c>)
  4022b6:	4610      	mov	r0, r2
  4022b8:	4798      	blx	r3
  4022ba:	4603      	mov	r3, r0
  4022bc:	460c      	mov	r4, r1
  4022be:	4618      	mov	r0, r3
  4022c0:	4621      	mov	r1, r4
  4022c2:	4b6d      	ldr	r3, [pc, #436]	; (402478 <GetPvAngle+0x9c0>)
  4022c4:	4798      	blx	r3
  4022c6:	4602      	mov	r2, r0
  4022c8:	460b      	mov	r3, r1
  4022ca:	4c64      	ldr	r4, [pc, #400]	; (40245c <GetPvAngle+0x9a4>)
  4022cc:	4628      	mov	r0, r5
  4022ce:	4631      	mov	r1, r6
  4022d0:	47a0      	blx	r4
  4022d2:	4603      	mov	r3, r0
  4022d4:	460c      	mov	r4, r1
  4022d6:	4619      	mov	r1, r3
  4022d8:	4622      	mov	r2, r4
  4022da:	4b62      	ldr	r3, [pc, #392]	; (402464 <GetPvAngle+0x9ac>)
  4022dc:	4608      	mov	r0, r1
  4022de:	4611      	mov	r1, r2
  4022e0:	4798      	blx	r3
  4022e2:	4603      	mov	r3, r0
  4022e4:	613b      	str	r3, [r7, #16]
	q = 4.0f * Deg(p*sin(2.0f * Rad(g)) - 2.0f * i*sin(Rad(h)) + 4.0f * i*p*sin(Rad(h))*cos(2.0f * Rad(g)) - 0.5f*p*p*sin(4.0f * Rad(g)) - 1.25f*i*i*sin(2.0f * Rad(h)));
  4022e6:	4b5b      	ldr	r3, [pc, #364]	; (402454 <GetPvAngle+0x99c>)
  4022e8:	6938      	ldr	r0, [r7, #16]
  4022ea:	4798      	blx	r3
  4022ec:	4605      	mov	r5, r0
  4022ee:	460e      	mov	r6, r1
  4022f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
  4022f2:	4b57      	ldr	r3, [pc, #348]	; (402450 <GetPvAngle+0x998>)
  4022f4:	4798      	blx	r3
  4022f6:	4602      	mov	r2, r0
  4022f8:	4b60      	ldr	r3, [pc, #384]	; (40247c <GetPvAngle+0x9c4>)
  4022fa:	4611      	mov	r1, r2
  4022fc:	4610      	mov	r0, r2
  4022fe:	4798      	blx	r3
  402300:	4603      	mov	r3, r0
  402302:	461a      	mov	r2, r3
  402304:	4b53      	ldr	r3, [pc, #332]	; (402454 <GetPvAngle+0x99c>)
  402306:	4610      	mov	r0, r2
  402308:	4798      	blx	r3
  40230a:	4603      	mov	r3, r0
  40230c:	460c      	mov	r4, r1
  40230e:	4618      	mov	r0, r3
  402310:	4621      	mov	r1, r4
  402312:	4b55      	ldr	r3, [pc, #340]	; (402468 <GetPvAngle+0x9b0>)
  402314:	4798      	blx	r3
  402316:	4602      	mov	r2, r0
  402318:	460b      	mov	r3, r1
  40231a:	4c50      	ldr	r4, [pc, #320]	; (40245c <GetPvAngle+0x9a4>)
  40231c:	4628      	mov	r0, r5
  40231e:	4631      	mov	r1, r6
  402320:	47a0      	blx	r4
  402322:	4603      	mov	r3, r0
  402324:	460c      	mov	r4, r1
  402326:	461d      	mov	r5, r3
  402328:	4626      	mov	r6, r4
  40232a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  40232c:	4b53      	ldr	r3, [pc, #332]	; (40247c <GetPvAngle+0x9c4>)
  40232e:	4611      	mov	r1, r2
  402330:	4610      	mov	r0, r2
  402332:	4798      	blx	r3
  402334:	4603      	mov	r3, r0
  402336:	461a      	mov	r2, r3
  402338:	4b46      	ldr	r3, [pc, #280]	; (402454 <GetPvAngle+0x99c>)
  40233a:	4610      	mov	r0, r2
  40233c:	4798      	blx	r3
  40233e:	4680      	mov	r8, r0
  402340:	4689      	mov	r9, r1
  402342:	6b38      	ldr	r0, [r7, #48]	; 0x30
  402344:	4b42      	ldr	r3, [pc, #264]	; (402450 <GetPvAngle+0x998>)
  402346:	4798      	blx	r3
  402348:	4602      	mov	r2, r0
  40234a:	4b42      	ldr	r3, [pc, #264]	; (402454 <GetPvAngle+0x99c>)
  40234c:	4610      	mov	r0, r2
  40234e:	4798      	blx	r3
  402350:	4603      	mov	r3, r0
  402352:	460c      	mov	r4, r1
  402354:	4618      	mov	r0, r3
  402356:	4621      	mov	r1, r4
  402358:	4b43      	ldr	r3, [pc, #268]	; (402468 <GetPvAngle+0x9b0>)
  40235a:	4798      	blx	r3
  40235c:	4602      	mov	r2, r0
  40235e:	460b      	mov	r3, r1
  402360:	4c3e      	ldr	r4, [pc, #248]	; (40245c <GetPvAngle+0x9a4>)
  402362:	4640      	mov	r0, r8
  402364:	4649      	mov	r1, r9
  402366:	47a0      	blx	r4
  402368:	4603      	mov	r3, r0
  40236a:	460c      	mov	r4, r1
  40236c:	461a      	mov	r2, r3
  40236e:	4623      	mov	r3, r4
  402370:	4c43      	ldr	r4, [pc, #268]	; (402480 <GetPvAngle+0x9c8>)
  402372:	4628      	mov	r0, r5
  402374:	4631      	mov	r1, r6
  402376:	47a0      	blx	r4
  402378:	4603      	mov	r3, r0
  40237a:	460c      	mov	r4, r1
  40237c:	461d      	mov	r5, r3
  40237e:	4626      	mov	r6, r4
  402380:	4b40      	ldr	r3, [pc, #256]	; (402484 <GetPvAngle+0x9cc>)
  402382:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  402386:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  402388:	4798      	blx	r3
  40238a:	4603      	mov	r3, r0
  40238c:	461a      	mov	r2, r3
  40238e:	4b3d      	ldr	r3, [pc, #244]	; (402484 <GetPvAngle+0x9cc>)
  402390:	6939      	ldr	r1, [r7, #16]
  402392:	4610      	mov	r0, r2
  402394:	4798      	blx	r3
  402396:	4603      	mov	r3, r0
  402398:	461a      	mov	r2, r3
  40239a:	4b2e      	ldr	r3, [pc, #184]	; (402454 <GetPvAngle+0x99c>)
  40239c:	4610      	mov	r0, r2
  40239e:	4798      	blx	r3
  4023a0:	4680      	mov	r8, r0
  4023a2:	4689      	mov	r9, r1
  4023a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
  4023a6:	4b2a      	ldr	r3, [pc, #168]	; (402450 <GetPvAngle+0x998>)
  4023a8:	4798      	blx	r3
  4023aa:	4602      	mov	r2, r0
  4023ac:	4b29      	ldr	r3, [pc, #164]	; (402454 <GetPvAngle+0x99c>)
  4023ae:	4610      	mov	r0, r2
  4023b0:	4798      	blx	r3
  4023b2:	4603      	mov	r3, r0
  4023b4:	460c      	mov	r4, r1
  4023b6:	4618      	mov	r0, r3
  4023b8:	4621      	mov	r1, r4
  4023ba:	4b2b      	ldr	r3, [pc, #172]	; (402468 <GetPvAngle+0x9b0>)
  4023bc:	4798      	blx	r3
  4023be:	4602      	mov	r2, r0
  4023c0:	460b      	mov	r3, r1
  4023c2:	4c26      	ldr	r4, [pc, #152]	; (40245c <GetPvAngle+0x9a4>)
  4023c4:	4640      	mov	r0, r8
  4023c6:	4649      	mov	r1, r9
  4023c8:	47a0      	blx	r4
  4023ca:	4603      	mov	r3, r0
  4023cc:	460c      	mov	r4, r1
  4023ce:	4698      	mov	r8, r3
  4023d0:	46a1      	mov	r9, r4
  4023d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
  4023d4:	4b1e      	ldr	r3, [pc, #120]	; (402450 <GetPvAngle+0x998>)
  4023d6:	4798      	blx	r3
  4023d8:	4602      	mov	r2, r0
  4023da:	4b28      	ldr	r3, [pc, #160]	; (40247c <GetPvAngle+0x9c4>)
  4023dc:	4611      	mov	r1, r2
  4023de:	4610      	mov	r0, r2
  4023e0:	4798      	blx	r3
  4023e2:	4603      	mov	r3, r0
  4023e4:	461a      	mov	r2, r3
  4023e6:	4b1b      	ldr	r3, [pc, #108]	; (402454 <GetPvAngle+0x99c>)
  4023e8:	4610      	mov	r0, r2
  4023ea:	4798      	blx	r3
  4023ec:	4603      	mov	r3, r0
  4023ee:	460c      	mov	r4, r1
  4023f0:	4618      	mov	r0, r3
  4023f2:	4621      	mov	r1, r4
  4023f4:	4b18      	ldr	r3, [pc, #96]	; (402458 <GetPvAngle+0x9a0>)
  4023f6:	4798      	blx	r3
  4023f8:	4602      	mov	r2, r0
  4023fa:	460b      	mov	r3, r1
  4023fc:	4c17      	ldr	r4, [pc, #92]	; (40245c <GetPvAngle+0x9a4>)
  4023fe:	4640      	mov	r0, r8
  402400:	4649      	mov	r1, r9
  402402:	47a0      	blx	r4
  402404:	4603      	mov	r3, r0
  402406:	460c      	mov	r4, r1
  402408:	461a      	mov	r2, r3
  40240a:	4623      	mov	r3, r4
  40240c:	4c14      	ldr	r4, [pc, #80]	; (402460 <GetPvAngle+0x9a8>)
  40240e:	4628      	mov	r0, r5
  402410:	4631      	mov	r1, r6
  402412:	47a0      	blx	r4
  402414:	4603      	mov	r3, r0
  402416:	460c      	mov	r4, r1
  402418:	461d      	mov	r5, r3
  40241a:	4626      	mov	r6, r4
  40241c:	4b19      	ldr	r3, [pc, #100]	; (402484 <GetPvAngle+0x9cc>)
  40241e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  402422:	6938      	ldr	r0, [r7, #16]
  402424:	4798      	blx	r3
  402426:	4603      	mov	r3, r0
  402428:	461a      	mov	r2, r3
  40242a:	4b16      	ldr	r3, [pc, #88]	; (402484 <GetPvAngle+0x9cc>)
  40242c:	6939      	ldr	r1, [r7, #16]
  40242e:	4610      	mov	r0, r2
  402430:	4798      	blx	r3
  402432:	4603      	mov	r3, r0
  402434:	461a      	mov	r2, r3
  402436:	4b07      	ldr	r3, [pc, #28]	; (402454 <GetPvAngle+0x99c>)
  402438:	4610      	mov	r0, r2
  40243a:	e025      	b.n	402488 <GetPvAngle+0x9d0>
  40243c:	f3af 8000 	nop.w
  402440:	80000000 	.word	0x80000000
  402444:	3f64f8b5 	.word	0x3f64f8b5
  402448:	0040afc5 	.word	0x0040afc5
  40244c:	42fa147b 	.word	0x42fa147b
  402450:	00402951 	.word	0x00402951
  402454:	0040a8c5 	.word	0x0040a8c5
  402458:	00407d4d 	.word	0x00407d4d
  40245c:	0040a96d 	.word	0x0040a96d
  402460:	0040a609 	.word	0x0040a609
  402464:	0040af1d 	.word	0x0040af1d
  402468:	00407de1 	.word	0x00407de1
  40246c:	00407f75 	.word	0x00407f75
  402470:	00402989 	.word	0x00402989
  402474:	0040b341 	.word	0x0040b341
  402478:	00407e69 	.word	0x00407e69
  40247c:	0040afc9 	.word	0x0040afc9
  402480:	0040a605 	.word	0x0040a605
  402484:	0040b1d9 	.word	0x0040b1d9
  402488:	4798      	blx	r3
  40248a:	4680      	mov	r8, r0
  40248c:	4689      	mov	r9, r1
  40248e:	6b78      	ldr	r0, [r7, #52]	; 0x34
  402490:	4b9e      	ldr	r3, [pc, #632]	; (40270c <GetPvAngle+0xc54>)
  402492:	4798      	blx	r3
  402494:	4602      	mov	r2, r0
  402496:	4b9e      	ldr	r3, [pc, #632]	; (402710 <GetPvAngle+0xc58>)
  402498:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  40249c:	4610      	mov	r0, r2
  40249e:	4798      	blx	r3
  4024a0:	4603      	mov	r3, r0
  4024a2:	461a      	mov	r2, r3
  4024a4:	4b9b      	ldr	r3, [pc, #620]	; (402714 <GetPvAngle+0xc5c>)
  4024a6:	4610      	mov	r0, r2
  4024a8:	4798      	blx	r3
  4024aa:	4603      	mov	r3, r0
  4024ac:	460c      	mov	r4, r1
  4024ae:	4618      	mov	r0, r3
  4024b0:	4621      	mov	r1, r4
  4024b2:	4b99      	ldr	r3, [pc, #612]	; (402718 <GetPvAngle+0xc60>)
  4024b4:	4798      	blx	r3
  4024b6:	4602      	mov	r2, r0
  4024b8:	460b      	mov	r3, r1
  4024ba:	4c98      	ldr	r4, [pc, #608]	; (40271c <GetPvAngle+0xc64>)
  4024bc:	4640      	mov	r0, r8
  4024be:	4649      	mov	r1, r9
  4024c0:	47a0      	blx	r4
  4024c2:	4603      	mov	r3, r0
  4024c4:	460c      	mov	r4, r1
  4024c6:	461a      	mov	r2, r3
  4024c8:	4623      	mov	r3, r4
  4024ca:	4c95      	ldr	r4, [pc, #596]	; (402720 <GetPvAngle+0xc68>)
  4024cc:	4628      	mov	r0, r5
  4024ce:	4631      	mov	r1, r6
  4024d0:	47a0      	blx	r4
  4024d2:	4603      	mov	r3, r0
  4024d4:	460c      	mov	r4, r1
  4024d6:	461d      	mov	r5, r3
  4024d8:	4626      	mov	r6, r4
  4024da:	4b8d      	ldr	r3, [pc, #564]	; (402710 <GetPvAngle+0xc58>)
  4024dc:	4991      	ldr	r1, [pc, #580]	; (402724 <GetPvAngle+0xc6c>)
  4024de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  4024e0:	4798      	blx	r3
  4024e2:	4603      	mov	r3, r0
  4024e4:	461a      	mov	r2, r3
  4024e6:	4b8a      	ldr	r3, [pc, #552]	; (402710 <GetPvAngle+0xc58>)
  4024e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
  4024ea:	4610      	mov	r0, r2
  4024ec:	4798      	blx	r3
  4024ee:	4603      	mov	r3, r0
  4024f0:	461a      	mov	r2, r3
  4024f2:	4b88      	ldr	r3, [pc, #544]	; (402714 <GetPvAngle+0xc5c>)
  4024f4:	4610      	mov	r0, r2
  4024f6:	4798      	blx	r3
  4024f8:	4680      	mov	r8, r0
  4024fa:	4689      	mov	r9, r1
  4024fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
  4024fe:	4b83      	ldr	r3, [pc, #524]	; (40270c <GetPvAngle+0xc54>)
  402500:	4798      	blx	r3
  402502:	4602      	mov	r2, r0
  402504:	4b88      	ldr	r3, [pc, #544]	; (402728 <GetPvAngle+0xc70>)
  402506:	4611      	mov	r1, r2
  402508:	4610      	mov	r0, r2
  40250a:	4798      	blx	r3
  40250c:	4603      	mov	r3, r0
  40250e:	461a      	mov	r2, r3
  402510:	4b80      	ldr	r3, [pc, #512]	; (402714 <GetPvAngle+0xc5c>)
  402512:	4610      	mov	r0, r2
  402514:	4798      	blx	r3
  402516:	4603      	mov	r3, r0
  402518:	460c      	mov	r4, r1
  40251a:	4618      	mov	r0, r3
  40251c:	4621      	mov	r1, r4
  40251e:	4b7e      	ldr	r3, [pc, #504]	; (402718 <GetPvAngle+0xc60>)
  402520:	4798      	blx	r3
  402522:	4602      	mov	r2, r0
  402524:	460b      	mov	r3, r1
  402526:	4c7d      	ldr	r4, [pc, #500]	; (40271c <GetPvAngle+0xc64>)
  402528:	4640      	mov	r0, r8
  40252a:	4649      	mov	r1, r9
  40252c:	47a0      	blx	r4
  40252e:	4603      	mov	r3, r0
  402530:	460c      	mov	r4, r1
  402532:	461a      	mov	r2, r3
  402534:	4623      	mov	r3, r4
  402536:	4c7a      	ldr	r4, [pc, #488]	; (402720 <GetPvAngle+0xc68>)
  402538:	4628      	mov	r0, r5
  40253a:	4631      	mov	r1, r6
  40253c:	47a0      	blx	r4
  40253e:	4603      	mov	r3, r0
  402540:	460c      	mov	r4, r1
  402542:	4619      	mov	r1, r3
  402544:	4622      	mov	r2, r4
  402546:	4b79      	ldr	r3, [pc, #484]	; (40272c <GetPvAngle+0xc74>)
  402548:	4608      	mov	r0, r1
  40254a:	4611      	mov	r1, r2
  40254c:	4798      	blx	r3
  40254e:	4603      	mov	r3, r0
  402550:	4618      	mov	r0, r3
  402552:	4b77      	ldr	r3, [pc, #476]	; (402730 <GetPvAngle+0xc78>)
  402554:	4798      	blx	r3
  402556:	4602      	mov	r2, r0
  402558:	4b6d      	ldr	r3, [pc, #436]	; (402710 <GetPvAngle+0xc58>)
  40255a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  40255e:	4610      	mov	r0, r2
  402560:	4798      	blx	r3
  402562:	4603      	mov	r3, r0
  402564:	60fb      	str	r3, [r7, #12]
	r = Deg(acos(cos(Rad(90.833f)) / (cos(Rad(lat))*cos(Rad(o))) - tan(Rad(lat))*tan(Rad(o))));
  402566:	4873      	ldr	r0, [pc, #460]	; (402734 <GetPvAngle+0xc7c>)
  402568:	4b68      	ldr	r3, [pc, #416]	; (40270c <GetPvAngle+0xc54>)
  40256a:	4798      	blx	r3
  40256c:	4602      	mov	r2, r0
  40256e:	4b69      	ldr	r3, [pc, #420]	; (402714 <GetPvAngle+0xc5c>)
  402570:	4610      	mov	r0, r2
  402572:	4798      	blx	r3
  402574:	4603      	mov	r3, r0
  402576:	460c      	mov	r4, r1
  402578:	4618      	mov	r0, r3
  40257a:	4621      	mov	r1, r4
  40257c:	4b6e      	ldr	r3, [pc, #440]	; (402738 <GetPvAngle+0xc80>)
  40257e:	4798      	blx	r3
  402580:	4605      	mov	r5, r0
  402582:	460e      	mov	r6, r1
  402584:	4b6d      	ldr	r3, [pc, #436]	; (40273c <GetPvAngle+0xc84>)
  402586:	681b      	ldr	r3, [r3, #0]
  402588:	4618      	mov	r0, r3
  40258a:	4b60      	ldr	r3, [pc, #384]	; (40270c <GetPvAngle+0xc54>)
  40258c:	4798      	blx	r3
  40258e:	4602      	mov	r2, r0
  402590:	4b60      	ldr	r3, [pc, #384]	; (402714 <GetPvAngle+0xc5c>)
  402592:	4610      	mov	r0, r2
  402594:	4798      	blx	r3
  402596:	4603      	mov	r3, r0
  402598:	460c      	mov	r4, r1
  40259a:	4618      	mov	r0, r3
  40259c:	4621      	mov	r1, r4
  40259e:	4b66      	ldr	r3, [pc, #408]	; (402738 <GetPvAngle+0xc80>)
  4025a0:	4798      	blx	r3
  4025a2:	4680      	mov	r8, r0
  4025a4:	4689      	mov	r9, r1
  4025a6:	6978      	ldr	r0, [r7, #20]
  4025a8:	4b58      	ldr	r3, [pc, #352]	; (40270c <GetPvAngle+0xc54>)
  4025aa:	4798      	blx	r3
  4025ac:	4602      	mov	r2, r0
  4025ae:	4b59      	ldr	r3, [pc, #356]	; (402714 <GetPvAngle+0xc5c>)
  4025b0:	4610      	mov	r0, r2
  4025b2:	4798      	blx	r3
  4025b4:	4603      	mov	r3, r0
  4025b6:	460c      	mov	r4, r1
  4025b8:	4618      	mov	r0, r3
  4025ba:	4621      	mov	r1, r4
  4025bc:	4b5e      	ldr	r3, [pc, #376]	; (402738 <GetPvAngle+0xc80>)
  4025be:	4798      	blx	r3
  4025c0:	4602      	mov	r2, r0
  4025c2:	460b      	mov	r3, r1
  4025c4:	4c55      	ldr	r4, [pc, #340]	; (40271c <GetPvAngle+0xc64>)
  4025c6:	4640      	mov	r0, r8
  4025c8:	4649      	mov	r1, r9
  4025ca:	47a0      	blx	r4
  4025cc:	4603      	mov	r3, r0
  4025ce:	460c      	mov	r4, r1
  4025d0:	461a      	mov	r2, r3
  4025d2:	4623      	mov	r3, r4
  4025d4:	4c5a      	ldr	r4, [pc, #360]	; (402740 <GetPvAngle+0xc88>)
  4025d6:	4628      	mov	r0, r5
  4025d8:	4631      	mov	r1, r6
  4025da:	47a0      	blx	r4
  4025dc:	4603      	mov	r3, r0
  4025de:	460c      	mov	r4, r1
  4025e0:	461d      	mov	r5, r3
  4025e2:	4626      	mov	r6, r4
  4025e4:	4b55      	ldr	r3, [pc, #340]	; (40273c <GetPvAngle+0xc84>)
  4025e6:	681b      	ldr	r3, [r3, #0]
  4025e8:	4618      	mov	r0, r3
  4025ea:	4b48      	ldr	r3, [pc, #288]	; (40270c <GetPvAngle+0xc54>)
  4025ec:	4798      	blx	r3
  4025ee:	4602      	mov	r2, r0
  4025f0:	4b48      	ldr	r3, [pc, #288]	; (402714 <GetPvAngle+0xc5c>)
  4025f2:	4610      	mov	r0, r2
  4025f4:	4798      	blx	r3
  4025f6:	4603      	mov	r3, r0
  4025f8:	460c      	mov	r4, r1
  4025fa:	4618      	mov	r0, r3
  4025fc:	4621      	mov	r1, r4
  4025fe:	4b51      	ldr	r3, [pc, #324]	; (402744 <GetPvAngle+0xc8c>)
  402600:	4798      	blx	r3
  402602:	4680      	mov	r8, r0
  402604:	4689      	mov	r9, r1
  402606:	6978      	ldr	r0, [r7, #20]
  402608:	4b40      	ldr	r3, [pc, #256]	; (40270c <GetPvAngle+0xc54>)
  40260a:	4798      	blx	r3
  40260c:	4602      	mov	r2, r0
  40260e:	4b41      	ldr	r3, [pc, #260]	; (402714 <GetPvAngle+0xc5c>)
  402610:	4610      	mov	r0, r2
  402612:	4798      	blx	r3
  402614:	4603      	mov	r3, r0
  402616:	460c      	mov	r4, r1
  402618:	4618      	mov	r0, r3
  40261a:	4621      	mov	r1, r4
  40261c:	4b49      	ldr	r3, [pc, #292]	; (402744 <GetPvAngle+0xc8c>)
  40261e:	4798      	blx	r3
  402620:	4602      	mov	r2, r0
  402622:	460b      	mov	r3, r1
  402624:	4c3d      	ldr	r4, [pc, #244]	; (40271c <GetPvAngle+0xc64>)
  402626:	4640      	mov	r0, r8
  402628:	4649      	mov	r1, r9
  40262a:	47a0      	blx	r4
  40262c:	4603      	mov	r3, r0
  40262e:	460c      	mov	r4, r1
  402630:	461a      	mov	r2, r3
  402632:	4623      	mov	r3, r4
  402634:	4c3a      	ldr	r4, [pc, #232]	; (402720 <GetPvAngle+0xc68>)
  402636:	4628      	mov	r0, r5
  402638:	4631      	mov	r1, r6
  40263a:	47a0      	blx	r4
  40263c:	4603      	mov	r3, r0
  40263e:	460c      	mov	r4, r1
  402640:	4618      	mov	r0, r3
  402642:	4621      	mov	r1, r4
  402644:	4b40      	ldr	r3, [pc, #256]	; (402748 <GetPvAngle+0xc90>)
  402646:	4798      	blx	r3
  402648:	460a      	mov	r2, r1
  40264a:	4601      	mov	r1, r0
  40264c:	4b37      	ldr	r3, [pc, #220]	; (40272c <GetPvAngle+0xc74>)
  40264e:	4608      	mov	r0, r1
  402650:	4611      	mov	r1, r2
  402652:	4798      	blx	r3
  402654:	4603      	mov	r3, r0
  402656:	4618      	mov	r0, r3
  402658:	4b35      	ldr	r3, [pc, #212]	; (402730 <GetPvAngle+0xc78>)
  40265a:	4798      	blx	r3
  40265c:	60b8      	str	r0, [r7, #8]
	s = ((int)(timeInSecs * 1440 + q + 4 * lon - 60 * timeZone)) % 1440;
  40265e:	4b2c      	ldr	r3, [pc, #176]	; (402710 <GetPvAngle+0xc58>)
  402660:	493a      	ldr	r1, [pc, #232]	; (40274c <GetPvAngle+0xc94>)
  402662:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
  402666:	4798      	blx	r3
  402668:	4603      	mov	r3, r0
  40266a:	461a      	mov	r2, r3
  40266c:	4b2e      	ldr	r3, [pc, #184]	; (402728 <GetPvAngle+0xc70>)
  40266e:	68f9      	ldr	r1, [r7, #12]
  402670:	4610      	mov	r0, r2
  402672:	4798      	blx	r3
  402674:	4603      	mov	r3, r0
  402676:	461c      	mov	r4, r3
  402678:	4b35      	ldr	r3, [pc, #212]	; (402750 <GetPvAngle+0xc98>)
  40267a:	681a      	ldr	r2, [r3, #0]
  40267c:	4b24      	ldr	r3, [pc, #144]	; (402710 <GetPvAngle+0xc58>)
  40267e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  402682:	4610      	mov	r0, r2
  402684:	4798      	blx	r3
  402686:	4603      	mov	r3, r0
  402688:	461a      	mov	r2, r3
  40268a:	4b27      	ldr	r3, [pc, #156]	; (402728 <GetPvAngle+0xc70>)
  40268c:	4611      	mov	r1, r2
  40268e:	4620      	mov	r0, r4
  402690:	4798      	blx	r3
  402692:	4603      	mov	r3, r0
  402694:	461c      	mov	r4, r3
  402696:	4b2f      	ldr	r3, [pc, #188]	; (402754 <GetPvAngle+0xc9c>)
  402698:	681a      	ldr	r2, [r3, #0]
  40269a:	4b1d      	ldr	r3, [pc, #116]	; (402710 <GetPvAngle+0xc58>)
  40269c:	492e      	ldr	r1, [pc, #184]	; (402758 <GetPvAngle+0xca0>)
  40269e:	4610      	mov	r0, r2
  4026a0:	4798      	blx	r3
  4026a2:	4603      	mov	r3, r0
  4026a4:	461a      	mov	r2, r3
  4026a6:	4b2d      	ldr	r3, [pc, #180]	; (40275c <GetPvAngle+0xca4>)
  4026a8:	4611      	mov	r1, r2
  4026aa:	4620      	mov	r0, r4
  4026ac:	4798      	blx	r3
  4026ae:	4603      	mov	r3, r0
  4026b0:	461a      	mov	r2, r3
  4026b2:	4b2b      	ldr	r3, [pc, #172]	; (402760 <GetPvAngle+0xca8>)
  4026b4:	4610      	mov	r0, r2
  4026b6:	4798      	blx	r3
  4026b8:	4603      	mov	r3, r0
  4026ba:	4a2a      	ldr	r2, [pc, #168]	; (402764 <GetPvAngle+0xcac>)
  4026bc:	fb83 1202 	smull	r1, r2, r3, r2
  4026c0:	441a      	add	r2, r3
  4026c2:	1291      	asrs	r1, r2, #10
  4026c4:	17da      	asrs	r2, r3, #31
  4026c6:	1a8a      	subs	r2, r1, r2
  4026c8:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
  4026cc:	fb01 f202 	mul.w	r2, r1, r2
  4026d0:	1a9a      	subs	r2, r3, r2
  4026d2:	4b25      	ldr	r3, [pc, #148]	; (402768 <GetPvAngle+0xcb0>)
  4026d4:	4610      	mov	r0, r2
  4026d6:	4798      	blx	r3
  4026d8:	4603      	mov	r3, r0
  4026da:	607b      	str	r3, [r7, #4]
	if ((s / 4.0f) < 0)
  4026dc:	4b23      	ldr	r3, [pc, #140]	; (40276c <GetPvAngle+0xcb4>)
  4026de:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  4026e2:	6878      	ldr	r0, [r7, #4]
  4026e4:	4798      	blx	r3
  4026e6:	4603      	mov	r3, r0
  4026e8:	461a      	mov	r2, r3
  4026ea:	4b21      	ldr	r3, [pc, #132]	; (402770 <GetPvAngle+0xcb8>)
  4026ec:	f04f 0100 	mov.w	r1, #0
  4026f0:	4610      	mov	r0, r2
  4026f2:	4798      	blx	r3
  4026f4:	4603      	mov	r3, r0
  4026f6:	2b00      	cmp	r3, #0
  4026f8:	d044      	beq.n	402784 <GetPvAngle+0xccc>
	{
		t = (s / 4.0f) + 180.0f;
  4026fa:	4b1c      	ldr	r3, [pc, #112]	; (40276c <GetPvAngle+0xcb4>)
  4026fc:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  402700:	6878      	ldr	r0, [r7, #4]
  402702:	4798      	blx	r3
  402704:	4603      	mov	r3, r0
  402706:	461a      	mov	r2, r3
  402708:	e034      	b.n	402774 <GetPvAngle+0xcbc>
  40270a:	bf00      	nop
  40270c:	00402951 	.word	0x00402951
  402710:	0040b1d9 	.word	0x0040b1d9
  402714:	0040a8c5 	.word	0x0040a8c5
  402718:	00407de1 	.word	0x00407de1
  40271c:	0040a96d 	.word	0x0040a96d
  402720:	0040a605 	.word	0x0040a605
  402724:	3fa00000 	.word	0x3fa00000
  402728:	0040afc9 	.word	0x0040afc9
  40272c:	0040af1d 	.word	0x0040af1d
  402730:	00402989 	.word	0x00402989
  402734:	42b5aa7f 	.word	0x42b5aa7f
  402738:	00407d4d 	.word	0x00407d4d
  40273c:	2000000c 	.word	0x2000000c
  402740:	0040abc1 	.word	0x0040abc1
  402744:	00407e69 	.word	0x00407e69
  402748:	00407ec5 	.word	0x00407ec5
  40274c:	44b40000 	.word	0x44b40000
  402750:	20000010 	.word	0x20000010
  402754:	20000014 	.word	0x20000014
  402758:	42700000 	.word	0x42700000
  40275c:	0040afc5 	.word	0x0040afc5
  402760:	0040b565 	.word	0x0040b565
  402764:	b60b60b7 	.word	0xb60b60b7
  402768:	0040b131 	.word	0x0040b131
  40276c:	0040b341 	.word	0x0040b341
  402770:	0040b515 	.word	0x0040b515
  402774:	4b13      	ldr	r3, [pc, #76]	; (4027c4 <GetPvAngle+0xd0c>)
  402776:	4914      	ldr	r1, [pc, #80]	; (4027c8 <GetPvAngle+0xd10>)
  402778:	4610      	mov	r0, r2
  40277a:	4798      	blx	r3
  40277c:	4603      	mov	r3, r0
  40277e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  402782:	e00d      	b.n	4027a0 <GetPvAngle+0xce8>
	}
	else
	{
		t = (s / 4.0f) - 180.0f;
  402784:	4b11      	ldr	r3, [pc, #68]	; (4027cc <GetPvAngle+0xd14>)
  402786:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  40278a:	6878      	ldr	r0, [r7, #4]
  40278c:	4798      	blx	r3
  40278e:	4603      	mov	r3, r0
  402790:	461a      	mov	r2, r3
  402792:	4b0f      	ldr	r3, [pc, #60]	; (4027d0 <GetPvAngle+0xd18>)
  402794:	490c      	ldr	r1, [pc, #48]	; (4027c8 <GetPvAngle+0xd10>)
  402796:	4610      	mov	r0, r2
  402798:	4798      	blx	r3
  40279a:	4603      	mov	r3, r0
  40279c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	}
	return (90.0f / r*t);
  4027a0:	4b0a      	ldr	r3, [pc, #40]	; (4027cc <GetPvAngle+0xd14>)
  4027a2:	68b9      	ldr	r1, [r7, #8]
  4027a4:	480b      	ldr	r0, [pc, #44]	; (4027d4 <GetPvAngle+0xd1c>)
  4027a6:	4798      	blx	r3
  4027a8:	4603      	mov	r3, r0
  4027aa:	461a      	mov	r2, r3
  4027ac:	4b0a      	ldr	r3, [pc, #40]	; (4027d8 <GetPvAngle+0xd20>)
  4027ae:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
  4027b2:	4610      	mov	r0, r2
  4027b4:	4798      	blx	r3
  4027b6:	4603      	mov	r3, r0
}
  4027b8:	4618      	mov	r0, r3
  4027ba:	37bc      	adds	r7, #188	; 0xbc
  4027bc:	46bd      	mov	sp, r7
  4027be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4027c2:	bf00      	nop
  4027c4:	0040afc9 	.word	0x0040afc9
  4027c8:	43340000 	.word	0x43340000
  4027cc:	0040b341 	.word	0x0040b341
  4027d0:	0040afc5 	.word	0x0040afc5
  4027d4:	42b40000 	.word	0x42b40000
  4027d8:	0040b1d9 	.word	0x0040b1d9

004027dc <GetPvBackTrackAngle>:

float GetPvBackTrackAngle(float pvAngle)
{
  4027dc:	b590      	push	{r4, r7, lr}
  4027de:	b085      	sub	sp, #20
  4027e0:	af00      	add	r7, sp, #0
  4027e2:	6078      	str	r0, [r7, #4]
	float a0;
	
	a0 = pvAngle*0.0174603f;
  4027e4:	4b46      	ldr	r3, [pc, #280]	; (402900 <GetPvBackTrackAngle+0x124>)
  4027e6:	4947      	ldr	r1, [pc, #284]	; (402904 <GetPvBackTrackAngle+0x128>)
  4027e8:	6878      	ldr	r0, [r7, #4]
  4027ea:	4798      	blx	r3
  4027ec:	4603      	mov	r3, r0
  4027ee:	60fb      	str	r3, [r7, #12]
	//a0 += 1.575f;
	a0 += bkTrkParam2;
  4027f0:	4b45      	ldr	r3, [pc, #276]	; (402908 <GetPvBackTrackAngle+0x12c>)
  4027f2:	681a      	ldr	r2, [r3, #0]
  4027f4:	4b45      	ldr	r3, [pc, #276]	; (40290c <GetPvBackTrackAngle+0x130>)
  4027f6:	4611      	mov	r1, r2
  4027f8:	68f8      	ldr	r0, [r7, #12]
  4027fa:	4798      	blx	r3
  4027fc:	4603      	mov	r3, r0
  4027fe:	60fb      	str	r3, [r7, #12]
	//a0 -= 0.028989f;
	a0 -= bkTrkParam1;
  402800:	4b43      	ldr	r3, [pc, #268]	; (402910 <GetPvBackTrackAngle+0x134>)
  402802:	681a      	ldr	r2, [r3, #0]
  402804:	4b43      	ldr	r3, [pc, #268]	; (402914 <GetPvBackTrackAngle+0x138>)
  402806:	4611      	mov	r1, r2
  402808:	68f8      	ldr	r0, [r7, #12]
  40280a:	4798      	blx	r3
  40280c:	4603      	mov	r3, r0
  40280e:	60fb      	str	r3, [r7, #12]
	a0 = sin(a0);
  402810:	4b41      	ldr	r3, [pc, #260]	; (402918 <GetPvBackTrackAngle+0x13c>)
  402812:	68f8      	ldr	r0, [r7, #12]
  402814:	4798      	blx	r3
  402816:	4603      	mov	r3, r0
  402818:	460c      	mov	r4, r1
  40281a:	4618      	mov	r0, r3
  40281c:	4621      	mov	r1, r4
  40281e:	4b3f      	ldr	r3, [pc, #252]	; (40291c <GetPvBackTrackAngle+0x140>)
  402820:	4798      	blx	r3
  402822:	460a      	mov	r2, r1
  402824:	4601      	mov	r1, r0
  402826:	4b3e      	ldr	r3, [pc, #248]	; (402920 <GetPvBackTrackAngle+0x144>)
  402828:	4608      	mov	r0, r1
  40282a:	4611      	mov	r1, r2
  40282c:	4798      	blx	r3
  40282e:	4603      	mov	r3, r0
  402830:	60fb      	str	r3, [r7, #12]
	a0 = a0 * dist;
  402832:	4b3c      	ldr	r3, [pc, #240]	; (402924 <GetPvBackTrackAngle+0x148>)
  402834:	681a      	ldr	r2, [r3, #0]
  402836:	4b32      	ldr	r3, [pc, #200]	; (402900 <GetPvBackTrackAngle+0x124>)
  402838:	4611      	mov	r1, r2
  40283a:	68f8      	ldr	r0, [r7, #12]
  40283c:	4798      	blx	r3
  40283e:	4603      	mov	r3, r0
  402840:	60fb      	str	r3, [r7, #12]
	a0 = a0 / width;
  402842:	4b39      	ldr	r3, [pc, #228]	; (402928 <GetPvBackTrackAngle+0x14c>)
  402844:	681a      	ldr	r2, [r3, #0]
  402846:	4b39      	ldr	r3, [pc, #228]	; (40292c <GetPvBackTrackAngle+0x150>)
  402848:	4611      	mov	r1, r2
  40284a:	68f8      	ldr	r0, [r7, #12]
  40284c:	4798      	blx	r3
  40284e:	4603      	mov	r3, r0
  402850:	60fb      	str	r3, [r7, #12]
	/* If this val is < 1 enter back track calculation */
	/* Otherwise exit backtracking mode */
	if (a0 < 1)
  402852:	4b37      	ldr	r3, [pc, #220]	; (402930 <GetPvBackTrackAngle+0x154>)
  402854:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  402858:	68f8      	ldr	r0, [r7, #12]
  40285a:	4798      	blx	r3
  40285c:	4603      	mov	r3, r0
  40285e:	2b00      	cmp	r3, #0
  402860:	d048      	beq.n	4028f4 <GetPvBackTrackAngle+0x118>
	{
		a0 = asin(a0);
  402862:	4b2d      	ldr	r3, [pc, #180]	; (402918 <GetPvBackTrackAngle+0x13c>)
  402864:	68f8      	ldr	r0, [r7, #12]
  402866:	4798      	blx	r3
  402868:	4603      	mov	r3, r0
  40286a:	460c      	mov	r4, r1
  40286c:	4618      	mov	r0, r3
  40286e:	4621      	mov	r1, r4
  402870:	4b30      	ldr	r3, [pc, #192]	; (402934 <GetPvBackTrackAngle+0x158>)
  402872:	4798      	blx	r3
  402874:	460a      	mov	r2, r1
  402876:	4601      	mov	r1, r0
  402878:	4b29      	ldr	r3, [pc, #164]	; (402920 <GetPvBackTrackAngle+0x144>)
  40287a:	4608      	mov	r0, r1
  40287c:	4611      	mov	r1, r2
  40287e:	4798      	blx	r3
  402880:	4603      	mov	r3, r0
  402882:	60fb      	str	r3, [r7, #12]
		a0 = a0 * 57.2958f;
  402884:	4b1e      	ldr	r3, [pc, #120]	; (402900 <GetPvBackTrackAngle+0x124>)
  402886:	492c      	ldr	r1, [pc, #176]	; (402938 <GetPvBackTrackAngle+0x15c>)
  402888:	68f8      	ldr	r0, [r7, #12]
  40288a:	4798      	blx	r3
  40288c:	4603      	mov	r3, r0
  40288e:	60fb      	str	r3, [r7, #12]
		if ((pvAngle >= -90) && (pvAngle < 0))
  402890:	4b2a      	ldr	r3, [pc, #168]	; (40293c <GetPvBackTrackAngle+0x160>)
  402892:	492b      	ldr	r1, [pc, #172]	; (402940 <GetPvBackTrackAngle+0x164>)
  402894:	6878      	ldr	r0, [r7, #4]
  402896:	4798      	blx	r3
  402898:	4603      	mov	r3, r0
  40289a:	2b00      	cmp	r3, #0
  40289c:	d012      	beq.n	4028c4 <GetPvBackTrackAngle+0xe8>
  40289e:	4b24      	ldr	r3, [pc, #144]	; (402930 <GetPvBackTrackAngle+0x154>)
  4028a0:	f04f 0100 	mov.w	r1, #0
  4028a4:	6878      	ldr	r0, [r7, #4]
  4028a6:	4798      	blx	r3
  4028a8:	4603      	mov	r3, r0
  4028aa:	2b00      	cmp	r3, #0
  4028ac:	d00a      	beq.n	4028c4 <GetPvBackTrackAngle+0xe8>
		{
			a0 = -a0 / 2.0;
  4028ae:	68fb      	ldr	r3, [r7, #12]
  4028b0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
  4028b4:	4b1d      	ldr	r3, [pc, #116]	; (40292c <GetPvBackTrackAngle+0x150>)
  4028b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4028ba:	4610      	mov	r0, r2
  4028bc:	4798      	blx	r3
  4028be:	4603      	mov	r3, r0
  4028c0:	60fb      	str	r3, [r7, #12]
  4028c2:	e015      	b.n	4028f0 <GetPvBackTrackAngle+0x114>
		}
		else if ((pvAngle >= 0) && (pvAngle <= 90))
  4028c4:	4b1d      	ldr	r3, [pc, #116]	; (40293c <GetPvBackTrackAngle+0x160>)
  4028c6:	f04f 0100 	mov.w	r1, #0
  4028ca:	6878      	ldr	r0, [r7, #4]
  4028cc:	4798      	blx	r3
  4028ce:	4603      	mov	r3, r0
  4028d0:	2b00      	cmp	r3, #0
  4028d2:	d00d      	beq.n	4028f0 <GetPvBackTrackAngle+0x114>
  4028d4:	4b1b      	ldr	r3, [pc, #108]	; (402944 <GetPvBackTrackAngle+0x168>)
  4028d6:	491c      	ldr	r1, [pc, #112]	; (402948 <GetPvBackTrackAngle+0x16c>)
  4028d8:	6878      	ldr	r0, [r7, #4]
  4028da:	4798      	blx	r3
  4028dc:	4603      	mov	r3, r0
  4028de:	2b00      	cmp	r3, #0
  4028e0:	d006      	beq.n	4028f0 <GetPvBackTrackAngle+0x114>
		{
			a0 = a0 / 2.0;
  4028e2:	4b12      	ldr	r3, [pc, #72]	; (40292c <GetPvBackTrackAngle+0x150>)
  4028e4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4028e8:	68f8      	ldr	r0, [r7, #12]
  4028ea:	4798      	blx	r3
  4028ec:	4603      	mov	r3, r0
  4028ee:	60fb      	str	r3, [r7, #12]
		}
		return a0;
  4028f0:	68fb      	ldr	r3, [r7, #12]
  4028f2:	e000      	b.n	4028f6 <GetPvBackTrackAngle+0x11a>
	}
	else
		return NAN;
  4028f4:	4b15      	ldr	r3, [pc, #84]	; (40294c <GetPvBackTrackAngle+0x170>)
}
  4028f6:	4618      	mov	r0, r3
  4028f8:	3714      	adds	r7, #20
  4028fa:	46bd      	mov	sp, r7
  4028fc:	bd90      	pop	{r4, r7, pc}
  4028fe:	bf00      	nop
  402900:	0040b1d9 	.word	0x0040b1d9
  402904:	3c8f08e7 	.word	0x3c8f08e7
  402908:	20000028 	.word	0x20000028
  40290c:	0040afc9 	.word	0x0040afc9
  402910:	20000024 	.word	0x20000024
  402914:	0040afc5 	.word	0x0040afc5
  402918:	0040a8c5 	.word	0x0040a8c5
  40291c:	00407de1 	.word	0x00407de1
  402920:	0040af1d 	.word	0x0040af1d
  402924:	20000018 	.word	0x20000018
  402928:	2000001c 	.word	0x2000001c
  40292c:	0040b341 	.word	0x0040b341
  402930:	0040b515 	.word	0x0040b515
  402934:	00407f75 	.word	0x00407f75
  402938:	42652ee6 	.word	0x42652ee6
  40293c:	0040b53d 	.word	0x0040b53d
  402940:	c2b40000 	.word	0xc2b40000
  402944:	0040b529 	.word	0x0040b529
  402948:	42b40000 	.word	0x42b40000
  40294c:	7fc00000 	.word	0x7fc00000

00402950 <Rad>:

float Rad(float deg)
{
  402950:	b580      	push	{r7, lr}
  402952:	b082      	sub	sp, #8
  402954:	af00      	add	r7, sp, #0
  402956:	6078      	str	r0, [r7, #4]
	return ((float)M_PI*deg)/180.0f;
  402958:	4b07      	ldr	r3, [pc, #28]	; (402978 <Rad+0x28>)
  40295a:	4908      	ldr	r1, [pc, #32]	; (40297c <Rad+0x2c>)
  40295c:	6878      	ldr	r0, [r7, #4]
  40295e:	4798      	blx	r3
  402960:	4603      	mov	r3, r0
  402962:	461a      	mov	r2, r3
  402964:	4b06      	ldr	r3, [pc, #24]	; (402980 <Rad+0x30>)
  402966:	4907      	ldr	r1, [pc, #28]	; (402984 <Rad+0x34>)
  402968:	4610      	mov	r0, r2
  40296a:	4798      	blx	r3
  40296c:	4603      	mov	r3, r0
}
  40296e:	4618      	mov	r0, r3
  402970:	3708      	adds	r7, #8
  402972:	46bd      	mov	sp, r7
  402974:	bd80      	pop	{r7, pc}
  402976:	bf00      	nop
  402978:	0040b1d9 	.word	0x0040b1d9
  40297c:	40490fdb 	.word	0x40490fdb
  402980:	0040b341 	.word	0x0040b341
  402984:	43340000 	.word	0x43340000

00402988 <Deg>:

float Deg(float rad)
{
  402988:	b580      	push	{r7, lr}
  40298a:	b082      	sub	sp, #8
  40298c:	af00      	add	r7, sp, #0
  40298e:	6078      	str	r0, [r7, #4]
	return (180.0f *rad) / (float)M_PI;
  402990:	4b07      	ldr	r3, [pc, #28]	; (4029b0 <Deg+0x28>)
  402992:	4908      	ldr	r1, [pc, #32]	; (4029b4 <Deg+0x2c>)
  402994:	6878      	ldr	r0, [r7, #4]
  402996:	4798      	blx	r3
  402998:	4603      	mov	r3, r0
  40299a:	461a      	mov	r2, r3
  40299c:	4b06      	ldr	r3, [pc, #24]	; (4029b8 <Deg+0x30>)
  40299e:	4907      	ldr	r1, [pc, #28]	; (4029bc <Deg+0x34>)
  4029a0:	4610      	mov	r0, r2
  4029a2:	4798      	blx	r3
  4029a4:	4603      	mov	r3, r0
}
  4029a6:	4618      	mov	r0, r3
  4029a8:	3708      	adds	r7, #8
  4029aa:	46bd      	mov	sp, r7
  4029ac:	bd80      	pop	{r7, pc}
  4029ae:	bf00      	nop
  4029b0:	0040b1d9 	.word	0x0040b1d9
  4029b4:	43340000 	.word	0x43340000
  4029b8:	0040b341 	.word	0x0040b341
  4029bc:	40490fdb 	.word	0x40490fdb

004029c0 <WindSpeedMode>:

void WindSpeedMode(void)
{
  4029c0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  4029c4:	b08a      	sub	sp, #40	; 0x28
  4029c6:	af00      	add	r7, sp, #0
	int16_t accVals[3] = {};
  4029c8:	f107 0310 	add.w	r3, r7, #16
  4029cc:	2200      	movs	r2, #0
  4029ce:	601a      	str	r2, [r3, #0]
  4029d0:	809a      	strh	r2, [r3, #4]
	float oriVals[3], error = 0;
  4029d2:	f04f 0300 	mov.w	r3, #0
  4029d6:	61bb      	str	r3, [r7, #24]
	uint8_t p = 0;
  4029d8:	2300      	movs	r3, #0
  4029da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	float oriX = 0, prevOri = 0;
  4029de:	f04f 0300 	mov.w	r3, #0
  4029e2:	623b      	str	r3, [r7, #32]
  4029e4:	f04f 0300 	mov.w	r3, #0
  4029e8:	61fb      	str	r3, [r7, #28]

	for(p = 0; p < 8; p++)
  4029ea:	2300      	movs	r3, #0
  4029ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  4029f0:	e057      	b.n	402aa2 <WindSpeedMode+0xe2>
	{
		#ifndef ICM20648_USE_RTOS_API
			ICMReadAccDataAll(BOARD_TWI, ICM_ADDR,(uint16_t*)accVals);
  4029f2:	f107 0310 	add.w	r3, r7, #16
  4029f6:	461a      	mov	r2, r3
  4029f8:	2169      	movs	r1, #105	; 0x69
  4029fa:	4847      	ldr	r0, [pc, #284]	; (402b18 <WindSpeedMode+0x158>)
  4029fc:	4b47      	ldr	r3, [pc, #284]	; (402b1c <WindSpeedMode+0x15c>)
  4029fe:	4798      	blx	r3
		#else
			ICMReadAccDataAllTo(twiPort, ICM_ADDR,(uint16_t*)accVals, 50);
		#endif
		GetOrientation(accVals, oriVals);
  402a00:	1d3a      	adds	r2, r7, #4
  402a02:	f107 0310 	add.w	r3, r7, #16
  402a06:	4611      	mov	r1, r2
  402a08:	4618      	mov	r0, r3
  402a0a:	4b45      	ldr	r3, [pc, #276]	; (402b20 <WindSpeedMode+0x160>)
  402a0c:	4798      	blx	r3
		oriX = prevOri + ((oriVals[0] - prevOri)/((float)(p+1)));
  402a0e:	687a      	ldr	r2, [r7, #4]
  402a10:	4b44      	ldr	r3, [pc, #272]	; (402b24 <WindSpeedMode+0x164>)
  402a12:	69f9      	ldr	r1, [r7, #28]
  402a14:	4610      	mov	r0, r2
  402a16:	4798      	blx	r3
  402a18:	4603      	mov	r3, r0
  402a1a:	461c      	mov	r4, r3
  402a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  402a20:	1c5a      	adds	r2, r3, #1
  402a22:	4b41      	ldr	r3, [pc, #260]	; (402b28 <WindSpeedMode+0x168>)
  402a24:	4610      	mov	r0, r2
  402a26:	4798      	blx	r3
  402a28:	4602      	mov	r2, r0
  402a2a:	4b40      	ldr	r3, [pc, #256]	; (402b2c <WindSpeedMode+0x16c>)
  402a2c:	4611      	mov	r1, r2
  402a2e:	4620      	mov	r0, r4
  402a30:	4798      	blx	r3
  402a32:	4603      	mov	r3, r0
  402a34:	461a      	mov	r2, r3
  402a36:	4b3e      	ldr	r3, [pc, #248]	; (402b30 <WindSpeedMode+0x170>)
  402a38:	69f9      	ldr	r1, [r7, #28]
  402a3a:	4610      	mov	r0, r2
  402a3c:	4798      	blx	r3
  402a3e:	4603      	mov	r3, r0
  402a40:	623b      	str	r3, [r7, #32]
		prevOri = oriX;
  402a42:	6a3b      	ldr	r3, [r7, #32]
  402a44:	61fb      	str	r3, [r7, #28]
		delay_ms(40);
  402a46:	4b3b      	ldr	r3, [pc, #236]	; (402b34 <WindSpeedMode+0x174>)
  402a48:	4798      	blx	r3
  402a4a:	4603      	mov	r3, r0
  402a4c:	f04f 0400 	mov.w	r4, #0
  402a50:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  402a54:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  402a58:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  402a5c:	4643      	mov	r3, r8
  402a5e:	464c      	mov	r4, r9
  402a60:	00a6      	lsls	r6, r4, #2
  402a62:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  402a66:	009d      	lsls	r5, r3, #2
  402a68:	195b      	adds	r3, r3, r5
  402a6a:	eb44 0406 	adc.w	r4, r4, r6
  402a6e:	f243 61af 	movw	r1, #13999	; 0x36af
  402a72:	f04f 0200 	mov.w	r2, #0
  402a76:	eb13 0b01 	adds.w	fp, r3, r1
  402a7a:	eb44 0c02 	adc.w	ip, r4, r2
  402a7e:	4658      	mov	r0, fp
  402a80:	4661      	mov	r1, ip
  402a82:	4c2d      	ldr	r4, [pc, #180]	; (402b38 <WindSpeedMode+0x178>)
  402a84:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402a88:	f04f 0300 	mov.w	r3, #0
  402a8c:	47a0      	blx	r4
  402a8e:	4603      	mov	r3, r0
  402a90:	460c      	mov	r4, r1
  402a92:	4618      	mov	r0, r3
  402a94:	4b29      	ldr	r3, [pc, #164]	; (402b3c <WindSpeedMode+0x17c>)
  402a96:	4798      	blx	r3
	int16_t accVals[3] = {};
	float oriVals[3], error = 0;
	uint8_t p = 0;
	float oriX = 0, prevOri = 0;

	for(p = 0; p < 8; p++)
  402a98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  402a9c:	3301      	adds	r3, #1
  402a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  402aa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  402aa6:	2b07      	cmp	r3, #7
  402aa8:	d9a3      	bls.n	4029f2 <WindSpeedMode+0x32>
		GetOrientation(accVals, oriVals);
		oriX = prevOri + ((oriVals[0] - prevOri)/((float)(p+1)));
		prevOri = oriX;
		delay_ms(40);
	}
	oriVals[0] = oriX;
  402aaa:	6a3b      	ldr	r3, [r7, #32]
  402aac:	607b      	str	r3, [r7, #4]

	/* Wind Speed Target Angle is 0 degrees */
	error = -oriVals[0];
  402aae:	687b      	ldr	r3, [r7, #4]
  402ab0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
  402ab4:	61bb      	str	r3, [r7, #24]

	/* If error is greater than the tolerance, move motor */
	if(!((error >=-1)&&(error<1)))
  402ab6:	2301      	movs	r3, #1
  402ab8:	461c      	mov	r4, r3
  402aba:	4b21      	ldr	r3, [pc, #132]	; (402b40 <WindSpeedMode+0x180>)
  402abc:	4921      	ldr	r1, [pc, #132]	; (402b44 <WindSpeedMode+0x184>)
  402abe:	69b8      	ldr	r0, [r7, #24]
  402ac0:	4798      	blx	r3
  402ac2:	4603      	mov	r3, r0
  402ac4:	2b00      	cmp	r3, #0
  402ac6:	d101      	bne.n	402acc <WindSpeedMode+0x10c>
  402ac8:	2300      	movs	r3, #0
  402aca:	461c      	mov	r4, r3
  402acc:	b2e3      	uxtb	r3, r4
  402ace:	f083 0301 	eor.w	r3, r3, #1
  402ad2:	b2db      	uxtb	r3, r3
  402ad4:	2b00      	cmp	r3, #0
  402ad6:	d111      	bne.n	402afc <WindSpeedMode+0x13c>
  402ad8:	2301      	movs	r3, #1
  402ada:	461c      	mov	r4, r3
  402adc:	4b1a      	ldr	r3, [pc, #104]	; (402b48 <WindSpeedMode+0x188>)
  402ade:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  402ae2:	69b8      	ldr	r0, [r7, #24]
  402ae4:	4798      	blx	r3
  402ae6:	4603      	mov	r3, r0
  402ae8:	2b00      	cmp	r3, #0
  402aea:	d101      	bne.n	402af0 <WindSpeedMode+0x130>
  402aec:	2300      	movs	r3, #0
  402aee:	461c      	mov	r4, r3
  402af0:	b2e3      	uxtb	r3, r4
  402af2:	f083 0301 	eor.w	r3, r3, #1
  402af6:	b2db      	uxtb	r3, r3
  402af8:	2b00      	cmp	r3, #0
  402afa:	d007      	beq.n	402b0c <WindSpeedMode+0x14c>
	{
		taskENTER_CRITICAL();
  402afc:	4b13      	ldr	r3, [pc, #76]	; (402b4c <WindSpeedMode+0x18c>)
  402afe:	4798      	blx	r3
		GotoAngle(0.0f);
  402b00:	f04f 0000 	mov.w	r0, #0
  402b04:	4b12      	ldr	r3, [pc, #72]	; (402b50 <WindSpeedMode+0x190>)
  402b06:	4798      	blx	r3
		taskEXIT_CRITICAL();
  402b08:	4b12      	ldr	r3, [pc, #72]	; (402b54 <WindSpeedMode+0x194>)
  402b0a:	4798      	blx	r3
	}
}
  402b0c:	bf00      	nop
  402b0e:	3728      	adds	r7, #40	; 0x28
  402b10:	46bd      	mov	sp, r7
  402b12:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
  402b16:	bf00      	nop
  402b18:	40018000 	.word	0x40018000
  402b1c:	004005ed 	.word	0x004005ed
  402b20:	00401925 	.word	0x00401925
  402b24:	0040afc5 	.word	0x0040afc5
  402b28:	0040b131 	.word	0x0040b131
  402b2c:	0040b341 	.word	0x0040b341
  402b30:	0040afc9 	.word	0x0040afc9
  402b34:	00400cbd 	.word	0x00400cbd
  402b38:	0040b5b1 	.word	0x0040b5b1
  402b3c:	20000001 	.word	0x20000001
  402b40:	0040b53d 	.word	0x0040b53d
  402b44:	bf800000 	.word	0xbf800000
  402b48:	0040b515 	.word	0x0040b515
  402b4c:	0040560d 	.word	0x0040560d
  402b50:	00401595 	.word	0x00401595
  402b54:	0040562d 	.word	0x0040562d

00402b58 <CleaningMode>:

void CleaningMode(void)
{
  402b58:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  402b5c:	b08a      	sub	sp, #40	; 0x28
  402b5e:	af00      	add	r7, sp, #0
	int16_t accVals[3] = {};
  402b60:	f107 0310 	add.w	r3, r7, #16
  402b64:	2200      	movs	r2, #0
  402b66:	601a      	str	r2, [r3, #0]
  402b68:	809a      	strh	r2, [r3, #4]
	float oriVals[3], error = 0;
  402b6a:	f04f 0300 	mov.w	r3, #0
  402b6e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t p = 0;
  402b70:	2300      	movs	r3, #0
  402b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	float oriX = 0, prevOri = 0;
  402b76:	f04f 0300 	mov.w	r3, #0
  402b7a:	61fb      	str	r3, [r7, #28]
  402b7c:	f04f 0300 	mov.w	r3, #0
  402b80:	61bb      	str	r3, [r7, #24]

	taskENTER_CRITICAL();
  402b82:	4b5c      	ldr	r3, [pc, #368]	; (402cf4 <CleaningMode+0x19c>)
  402b84:	4798      	blx	r3

	for(p = 0; p < 8; p++)
  402b86:	2300      	movs	r3, #0
  402b88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402b8c:	e057      	b.n	402c3e <CleaningMode+0xe6>
	{
		#ifndef ICM20648_USE_RTOS_API
			ICMReadAccDataAll(BOARD_TWI, ICM_ADDR,(uint16_t*)accVals);
  402b8e:	f107 0310 	add.w	r3, r7, #16
  402b92:	461a      	mov	r2, r3
  402b94:	2169      	movs	r1, #105	; 0x69
  402b96:	4858      	ldr	r0, [pc, #352]	; (402cf8 <CleaningMode+0x1a0>)
  402b98:	4b58      	ldr	r3, [pc, #352]	; (402cfc <CleaningMode+0x1a4>)
  402b9a:	4798      	blx	r3
		#else
			ICMReadAccDataAllTo(twiPort, ICM_ADDR,(uint16_t*)accVals, 50);
		#endif
		GetOrientation(accVals, oriVals);
  402b9c:	1d3a      	adds	r2, r7, #4
  402b9e:	f107 0310 	add.w	r3, r7, #16
  402ba2:	4611      	mov	r1, r2
  402ba4:	4618      	mov	r0, r3
  402ba6:	4b56      	ldr	r3, [pc, #344]	; (402d00 <CleaningMode+0x1a8>)
  402ba8:	4798      	blx	r3
		oriX = prevOri + ((oriVals[0] - prevOri)/((float)(p+1)));
  402baa:	687a      	ldr	r2, [r7, #4]
  402bac:	4b55      	ldr	r3, [pc, #340]	; (402d04 <CleaningMode+0x1ac>)
  402bae:	69b9      	ldr	r1, [r7, #24]
  402bb0:	4610      	mov	r0, r2
  402bb2:	4798      	blx	r3
  402bb4:	4603      	mov	r3, r0
  402bb6:	461c      	mov	r4, r3
  402bb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402bbc:	1c5a      	adds	r2, r3, #1
  402bbe:	4b52      	ldr	r3, [pc, #328]	; (402d08 <CleaningMode+0x1b0>)
  402bc0:	4610      	mov	r0, r2
  402bc2:	4798      	blx	r3
  402bc4:	4602      	mov	r2, r0
  402bc6:	4b51      	ldr	r3, [pc, #324]	; (402d0c <CleaningMode+0x1b4>)
  402bc8:	4611      	mov	r1, r2
  402bca:	4620      	mov	r0, r4
  402bcc:	4798      	blx	r3
  402bce:	4603      	mov	r3, r0
  402bd0:	461a      	mov	r2, r3
  402bd2:	4b4f      	ldr	r3, [pc, #316]	; (402d10 <CleaningMode+0x1b8>)
  402bd4:	69b9      	ldr	r1, [r7, #24]
  402bd6:	4610      	mov	r0, r2
  402bd8:	4798      	blx	r3
  402bda:	4603      	mov	r3, r0
  402bdc:	61fb      	str	r3, [r7, #28]
		prevOri = oriX;
  402bde:	69fb      	ldr	r3, [r7, #28]
  402be0:	61bb      	str	r3, [r7, #24]
		delay_ms(40);
  402be2:	4b4c      	ldr	r3, [pc, #304]	; (402d14 <CleaningMode+0x1bc>)
  402be4:	4798      	blx	r3
  402be6:	4603      	mov	r3, r0
  402be8:	f04f 0400 	mov.w	r4, #0
  402bec:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  402bf0:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  402bf4:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  402bf8:	4643      	mov	r3, r8
  402bfa:	464c      	mov	r4, r9
  402bfc:	00a6      	lsls	r6, r4, #2
  402bfe:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  402c02:	009d      	lsls	r5, r3, #2
  402c04:	195b      	adds	r3, r3, r5
  402c06:	eb44 0406 	adc.w	r4, r4, r6
  402c0a:	f243 61af 	movw	r1, #13999	; 0x36af
  402c0e:	f04f 0200 	mov.w	r2, #0
  402c12:	eb13 0b01 	adds.w	fp, r3, r1
  402c16:	eb44 0c02 	adc.w	ip, r4, r2
  402c1a:	4658      	mov	r0, fp
  402c1c:	4661      	mov	r1, ip
  402c1e:	4c3e      	ldr	r4, [pc, #248]	; (402d18 <CleaningMode+0x1c0>)
  402c20:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402c24:	f04f 0300 	mov.w	r3, #0
  402c28:	47a0      	blx	r4
  402c2a:	4603      	mov	r3, r0
  402c2c:	460c      	mov	r4, r1
  402c2e:	4618      	mov	r0, r3
  402c30:	4b3a      	ldr	r3, [pc, #232]	; (402d1c <CleaningMode+0x1c4>)
  402c32:	4798      	blx	r3
	uint8_t p = 0;
	float oriX = 0, prevOri = 0;

	taskENTER_CRITICAL();

	for(p = 0; p < 8; p++)
  402c34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402c38:	3301      	adds	r3, #1
  402c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402c3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402c42:	2b07      	cmp	r3, #7
  402c44:	d9a3      	bls.n	402b8e <CleaningMode+0x36>
		GetOrientation(accVals, oriVals);
		oriX = prevOri + ((oriVals[0] - prevOri)/((float)(p+1)));
		prevOri = oriX;
		delay_ms(40);
	}
	oriVals[0] = oriX;
  402c46:	69fb      	ldr	r3, [r7, #28]
  402c48:	607b      	str	r3, [r7, #4]

	if(mBusRegs[MBUS_REG_CLMODEDIR])
  402c4a:	4b35      	ldr	r3, [pc, #212]	; (402d20 <CleaningMode+0x1c8>)
  402c4c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  402c50:	2b00      	cmp	r3, #0
  402c52:	d00a      	beq.n	402c6a <CleaningMode+0x112>
	{
		error = -pvAngleRng - oriVals[0];
  402c54:	4b33      	ldr	r3, [pc, #204]	; (402d24 <CleaningMode+0x1cc>)
  402c56:	681b      	ldr	r3, [r3, #0]
  402c58:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
  402c5c:	6879      	ldr	r1, [r7, #4]
  402c5e:	4b29      	ldr	r3, [pc, #164]	; (402d04 <CleaningMode+0x1ac>)
  402c60:	4610      	mov	r0, r2
  402c62:	4798      	blx	r3
  402c64:	4603      	mov	r3, r0
  402c66:	627b      	str	r3, [r7, #36]	; 0x24
  402c68:	e007      	b.n	402c7a <CleaningMode+0x122>
	}
	else
	{
		error = pvAngleRng - oriVals[0];
  402c6a:	4b2e      	ldr	r3, [pc, #184]	; (402d24 <CleaningMode+0x1cc>)
  402c6c:	681a      	ldr	r2, [r3, #0]
  402c6e:	6879      	ldr	r1, [r7, #4]
  402c70:	4b24      	ldr	r3, [pc, #144]	; (402d04 <CleaningMode+0x1ac>)
  402c72:	4610      	mov	r0, r2
  402c74:	4798      	blx	r3
  402c76:	4603      	mov	r3, r0
  402c78:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* If error is greater than the tolerance, move motor */
	if(!((error >=-1)&&(error<1)))
  402c7a:	2301      	movs	r3, #1
  402c7c:	461c      	mov	r4, r3
  402c7e:	4b2a      	ldr	r3, [pc, #168]	; (402d28 <CleaningMode+0x1d0>)
  402c80:	492a      	ldr	r1, [pc, #168]	; (402d2c <CleaningMode+0x1d4>)
  402c82:	6a78      	ldr	r0, [r7, #36]	; 0x24
  402c84:	4798      	blx	r3
  402c86:	4603      	mov	r3, r0
  402c88:	2b00      	cmp	r3, #0
  402c8a:	d101      	bne.n	402c90 <CleaningMode+0x138>
  402c8c:	2300      	movs	r3, #0
  402c8e:	461c      	mov	r4, r3
  402c90:	b2e3      	uxtb	r3, r4
  402c92:	f083 0301 	eor.w	r3, r3, #1
  402c96:	b2db      	uxtb	r3, r3
  402c98:	2b00      	cmp	r3, #0
  402c9a:	d111      	bne.n	402cc0 <CleaningMode+0x168>
  402c9c:	2301      	movs	r3, #1
  402c9e:	461c      	mov	r4, r3
  402ca0:	4b23      	ldr	r3, [pc, #140]	; (402d30 <CleaningMode+0x1d8>)
  402ca2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  402ca6:	6a78      	ldr	r0, [r7, #36]	; 0x24
  402ca8:	4798      	blx	r3
  402caa:	4603      	mov	r3, r0
  402cac:	2b00      	cmp	r3, #0
  402cae:	d101      	bne.n	402cb4 <CleaningMode+0x15c>
  402cb0:	2300      	movs	r3, #0
  402cb2:	461c      	mov	r4, r3
  402cb4:	b2e3      	uxtb	r3, r4
  402cb6:	f083 0301 	eor.w	r3, r3, #1
  402cba:	b2db      	uxtb	r3, r3
  402cbc:	2b00      	cmp	r3, #0
  402cbe:	d011      	beq.n	402ce4 <CleaningMode+0x18c>
	{
		/* Cleaning Mode Motor Direction */
		if(mBusRegs[MBUS_REG_CLMODEDIR])
  402cc0:	4b17      	ldr	r3, [pc, #92]	; (402d20 <CleaningMode+0x1c8>)
  402cc2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  402cc6:	2b00      	cmp	r3, #0
  402cc8:	d007      	beq.n	402cda <CleaningMode+0x182>
		{
			/* Anticlockwise */
			GotoAngle(-pvAngleRng);
  402cca:	4b16      	ldr	r3, [pc, #88]	; (402d24 <CleaningMode+0x1cc>)
  402ccc:	681b      	ldr	r3, [r3, #0]
  402cce:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
  402cd2:	4618      	mov	r0, r3
  402cd4:	4b17      	ldr	r3, [pc, #92]	; (402d34 <CleaningMode+0x1dc>)
  402cd6:	4798      	blx	r3
  402cd8:	e004      	b.n	402ce4 <CleaningMode+0x18c>
		}
		else
		{
			/* Clockwise */
			GotoAngle(pvAngleRng);
  402cda:	4b12      	ldr	r3, [pc, #72]	; (402d24 <CleaningMode+0x1cc>)
  402cdc:	681b      	ldr	r3, [r3, #0]
  402cde:	4618      	mov	r0, r3
  402ce0:	4b14      	ldr	r3, [pc, #80]	; (402d34 <CleaningMode+0x1dc>)
  402ce2:	4798      	blx	r3
		}
	}
	
	taskEXIT_CRITICAL();
  402ce4:	4b14      	ldr	r3, [pc, #80]	; (402d38 <CleaningMode+0x1e0>)
  402ce6:	4798      	blx	r3
}
  402ce8:	bf00      	nop
  402cea:	3728      	adds	r7, #40	; 0x28
  402cec:	46bd      	mov	sp, r7
  402cee:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
  402cf2:	bf00      	nop
  402cf4:	0040560d 	.word	0x0040560d
  402cf8:	40018000 	.word	0x40018000
  402cfc:	004005ed 	.word	0x004005ed
  402d00:	00401925 	.word	0x00401925
  402d04:	0040afc5 	.word	0x0040afc5
  402d08:	0040b131 	.word	0x0040b131
  402d0c:	0040b341 	.word	0x0040b341
  402d10:	0040afc9 	.word	0x0040afc9
  402d14:	00400cbd 	.word	0x00400cbd
  402d18:	0040b5b1 	.word	0x0040b5b1
  402d1c:	20000001 	.word	0x20000001
  402d20:	20000494 	.word	0x20000494
  402d24:	20000020 	.word	0x20000020
  402d28:	0040b53d 	.word	0x0040b53d
  402d2c:	bf800000 	.word	0xbf800000
  402d30:	0040b515 	.word	0x0040b515
  402d34:	00401595 	.word	0x00401595
  402d38:	0040562d 	.word	0x0040562d

00402d3c <AdjustBktrkAngle>:

void AdjustBktrkAngle(void)
{
  402d3c:	b580      	push	{r7, lr}
  402d3e:	af00      	add	r7, sp, #0
	taskENTER_CRITICAL();
  402d40:	4b15      	ldr	r3, [pc, #84]	; (402d98 <AdjustBktrkAngle+0x5c>)
  402d42:	4798      	blx	r3

	if((mBusRegs[MBUS_REG_HRS] >= 0x05) && (mBusRegs[MBUS_REG_HRS] <= 0x09))
  402d44:	4b15      	ldr	r3, [pc, #84]	; (402d9c <AdjustBktrkAngle+0x60>)
  402d46:	889b      	ldrh	r3, [r3, #4]
  402d48:	2b04      	cmp	r3, #4
  402d4a:	d911      	bls.n	402d70 <AdjustBktrkAngle+0x34>
  402d4c:	4b13      	ldr	r3, [pc, #76]	; (402d9c <AdjustBktrkAngle+0x60>)
  402d4e:	889b      	ldrh	r3, [r3, #4]
  402d50:	2b09      	cmp	r3, #9
  402d52:	d80d      	bhi.n	402d70 <AdjustBktrkAngle+0x34>
	{
		/* Adjust Angle to -MAXRANGE */
		dispAngle = -pvAngleRng;
  402d54:	4b12      	ldr	r3, [pc, #72]	; (402da0 <AdjustBktrkAngle+0x64>)
  402d56:	681b      	ldr	r3, [r3, #0]
  402d58:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
  402d5c:	4a11      	ldr	r2, [pc, #68]	; (402da4 <AdjustBktrkAngle+0x68>)
  402d5e:	6013      	str	r3, [r2, #0]
		#ifndef LOG_EN
			GotoAngle(-pvAngleRng);
  402d60:	4b0f      	ldr	r3, [pc, #60]	; (402da0 <AdjustBktrkAngle+0x64>)
  402d62:	681b      	ldr	r3, [r3, #0]
  402d64:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
  402d68:	4618      	mov	r0, r3
  402d6a:	4b0f      	ldr	r3, [pc, #60]	; (402da8 <AdjustBktrkAngle+0x6c>)
  402d6c:	4798      	blx	r3
  402d6e:	e00f      	b.n	402d90 <AdjustBktrkAngle+0x54>
		#endif
	}
	else if((mBusRegs[MBUS_REG_HRS] >= 0x16) && (mBusRegs[MBUS_REG_HRS] <= 0x20))
  402d70:	4b0a      	ldr	r3, [pc, #40]	; (402d9c <AdjustBktrkAngle+0x60>)
  402d72:	889b      	ldrh	r3, [r3, #4]
  402d74:	2b15      	cmp	r3, #21
  402d76:	d90b      	bls.n	402d90 <AdjustBktrkAngle+0x54>
  402d78:	4b08      	ldr	r3, [pc, #32]	; (402d9c <AdjustBktrkAngle+0x60>)
  402d7a:	889b      	ldrh	r3, [r3, #4]
  402d7c:	2b20      	cmp	r3, #32
  402d7e:	d807      	bhi.n	402d90 <AdjustBktrkAngle+0x54>
	{
		/* Adjust angle to 0 */
		dispAngle = 0;
  402d80:	4b08      	ldr	r3, [pc, #32]	; (402da4 <AdjustBktrkAngle+0x68>)
  402d82:	f04f 0200 	mov.w	r2, #0
  402d86:	601a      	str	r2, [r3, #0]
		#ifndef LOG_EN
			GotoAngle(0);
  402d88:	f04f 0000 	mov.w	r0, #0
  402d8c:	4b06      	ldr	r3, [pc, #24]	; (402da8 <AdjustBktrkAngle+0x6c>)
  402d8e:	4798      	blx	r3
		#endif
	}
	
	taskEXIT_CRITICAL();
  402d90:	4b06      	ldr	r3, [pc, #24]	; (402dac <AdjustBktrkAngle+0x70>)
  402d92:	4798      	blx	r3
}
  402d94:	bf00      	nop
  402d96:	bd80      	pop	{r7, pc}
  402d98:	0040560d 	.word	0x0040560d
  402d9c:	20000494 	.word	0x20000494
  402da0:	20000020 	.word	0x20000020
  402da4:	200004ec 	.word	0x200004ec
  402da8:	00401595 	.word	0x00401595
  402dac:	0040562d 	.word	0x0040562d

00402db0 <AdjustDispAngle>:

void AdjustDispAngle(void)
{
  402db0:	b580      	push	{r7, lr}
  402db2:	af00      	add	r7, sp, #0
	taskENTER_CRITICAL();
  402db4:	4b20      	ldr	r3, [pc, #128]	; (402e38 <AdjustDispAngle+0x88>)
  402db6:	4798      	blx	r3

	if(((mBusRegs[MBUS_REG_HRS] >= 0x18) && (mBusRegs[MBUS_REG_HRS] <= 0x23)) || ((mBusRegs[MBUS_REG_HRS] >= 0x00) && (mBusRegs[MBUS_REG_HRS] <= 0x06))) 
  402db8:	4b20      	ldr	r3, [pc, #128]	; (402e3c <AdjustDispAngle+0x8c>)
  402dba:	889b      	ldrh	r3, [r3, #4]
  402dbc:	2b17      	cmp	r3, #23
  402dbe:	d903      	bls.n	402dc8 <AdjustDispAngle+0x18>
  402dc0:	4b1e      	ldr	r3, [pc, #120]	; (402e3c <AdjustDispAngle+0x8c>)
  402dc2:	889b      	ldrh	r3, [r3, #4]
  402dc4:	2b23      	cmp	r3, #35	; 0x23
  402dc6:	d903      	bls.n	402dd0 <AdjustDispAngle+0x20>
  402dc8:	4b1c      	ldr	r3, [pc, #112]	; (402e3c <AdjustDispAngle+0x8c>)
  402dca:	889b      	ldrh	r3, [r3, #4]
  402dcc:	2b06      	cmp	r3, #6
  402dce:	d808      	bhi.n	402de2 <AdjustDispAngle+0x32>
	{
		/* Adjust angle to 0 */
		dispAngle = 0;
  402dd0:	4b1b      	ldr	r3, [pc, #108]	; (402e40 <AdjustDispAngle+0x90>)
  402dd2:	f04f 0200 	mov.w	r2, #0
  402dd6:	601a      	str	r2, [r3, #0]
		#ifndef LOG_EN
			GotoAngle(0);
  402dd8:	f04f 0000 	mov.w	r0, #0
  402ddc:	4b19      	ldr	r3, [pc, #100]	; (402e44 <AdjustDispAngle+0x94>)
  402dde:	4798      	blx	r3
  402de0:	e026      	b.n	402e30 <AdjustDispAngle+0x80>
		#endif
	}
	else if((mBusRegs[MBUS_REG_HRS] >= 0x07) && (mBusRegs[MBUS_REG_HRS] <= 0x09)) 
  402de2:	4b16      	ldr	r3, [pc, #88]	; (402e3c <AdjustDispAngle+0x8c>)
  402de4:	889b      	ldrh	r3, [r3, #4]
  402de6:	2b06      	cmp	r3, #6
  402de8:	d911      	bls.n	402e0e <AdjustDispAngle+0x5e>
  402dea:	4b14      	ldr	r3, [pc, #80]	; (402e3c <AdjustDispAngle+0x8c>)
  402dec:	889b      	ldrh	r3, [r3, #4]
  402dee:	2b09      	cmp	r3, #9
  402df0:	d80d      	bhi.n	402e0e <AdjustDispAngle+0x5e>
	{
		/* Adjust Angle to -MAXRANGE */
		dispAngle = -pvAngleRng;
  402df2:	4b15      	ldr	r3, [pc, #84]	; (402e48 <AdjustDispAngle+0x98>)
  402df4:	681b      	ldr	r3, [r3, #0]
  402df6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
  402dfa:	4a11      	ldr	r2, [pc, #68]	; (402e40 <AdjustDispAngle+0x90>)
  402dfc:	6013      	str	r3, [r2, #0]
		#ifndef LOG_EN
			GotoAngle(-pvAngleRng);
  402dfe:	4b12      	ldr	r3, [pc, #72]	; (402e48 <AdjustDispAngle+0x98>)
  402e00:	681b      	ldr	r3, [r3, #0]
  402e02:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
  402e06:	4618      	mov	r0, r3
  402e08:	4b0e      	ldr	r3, [pc, #56]	; (402e44 <AdjustDispAngle+0x94>)
  402e0a:	4798      	blx	r3
  402e0c:	e010      	b.n	402e30 <AdjustDispAngle+0x80>
		#endif
	}
	else if((mBusRegs[MBUS_REG_HRS] >= 0x15) && (mBusRegs[MBUS_REG_HRS] <= 0x17))
  402e0e:	4b0b      	ldr	r3, [pc, #44]	; (402e3c <AdjustDispAngle+0x8c>)
  402e10:	889b      	ldrh	r3, [r3, #4]
  402e12:	2b14      	cmp	r3, #20
  402e14:	d90c      	bls.n	402e30 <AdjustDispAngle+0x80>
  402e16:	4b09      	ldr	r3, [pc, #36]	; (402e3c <AdjustDispAngle+0x8c>)
  402e18:	889b      	ldrh	r3, [r3, #4]
  402e1a:	2b17      	cmp	r3, #23
  402e1c:	d808      	bhi.n	402e30 <AdjustDispAngle+0x80>
	{
		/* Adjust Angle to MAXRANGE */
		dispAngle = pvAngleRng;
  402e1e:	4b0a      	ldr	r3, [pc, #40]	; (402e48 <AdjustDispAngle+0x98>)
  402e20:	681b      	ldr	r3, [r3, #0]
  402e22:	4a07      	ldr	r2, [pc, #28]	; (402e40 <AdjustDispAngle+0x90>)
  402e24:	6013      	str	r3, [r2, #0]
		#ifndef LOG_EN
			GotoAngle(pvAngleRng);
  402e26:	4b08      	ldr	r3, [pc, #32]	; (402e48 <AdjustDispAngle+0x98>)
  402e28:	681b      	ldr	r3, [r3, #0]
  402e2a:	4618      	mov	r0, r3
  402e2c:	4b05      	ldr	r3, [pc, #20]	; (402e44 <AdjustDispAngle+0x94>)
  402e2e:	4798      	blx	r3
		#endif
	}

	taskEXIT_CRITICAL();
  402e30:	4b06      	ldr	r3, [pc, #24]	; (402e4c <AdjustDispAngle+0x9c>)
  402e32:	4798      	blx	r3
}
  402e34:	bf00      	nop
  402e36:	bd80      	pop	{r7, pc}
  402e38:	0040560d 	.word	0x0040560d
  402e3c:	20000494 	.word	0x20000494
  402e40:	200004ec 	.word	0x200004ec
  402e44:	00401595 	.word	0x00401595
  402e48:	20000020 	.word	0x20000020
  402e4c:	0040562d 	.word	0x0040562d

00402e50 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  402e50:	b480      	push	{r7}
  402e52:	b083      	sub	sp, #12
  402e54:	af00      	add	r7, sp, #0
  402e56:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402e58:	687b      	ldr	r3, [r7, #4]
  402e5a:	2b07      	cmp	r3, #7
  402e5c:	d825      	bhi.n	402eaa <osc_get_rate+0x5a>
  402e5e:	a201      	add	r2, pc, #4	; (adr r2, 402e64 <osc_get_rate+0x14>)
  402e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402e64:	00402e85 	.word	0x00402e85
  402e68:	00402e8b 	.word	0x00402e8b
  402e6c:	00402e91 	.word	0x00402e91
  402e70:	00402e97 	.word	0x00402e97
  402e74:	00402e9b 	.word	0x00402e9b
  402e78:	00402e9f 	.word	0x00402e9f
  402e7c:	00402ea3 	.word	0x00402ea3
  402e80:	00402ea7 	.word	0x00402ea7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  402e84:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402e88:	e010      	b.n	402eac <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  402e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402e8e:	e00d      	b.n	402eac <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  402e90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402e94:	e00a      	b.n	402eac <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  402e96:	4b08      	ldr	r3, [pc, #32]	; (402eb8 <osc_get_rate+0x68>)
  402e98:	e008      	b.n	402eac <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  402e9a:	4b08      	ldr	r3, [pc, #32]	; (402ebc <osc_get_rate+0x6c>)
  402e9c:	e006      	b.n	402eac <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  402e9e:	4b08      	ldr	r3, [pc, #32]	; (402ec0 <osc_get_rate+0x70>)
  402ea0:	e004      	b.n	402eac <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  402ea2:	4b07      	ldr	r3, [pc, #28]	; (402ec0 <osc_get_rate+0x70>)
  402ea4:	e002      	b.n	402eac <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  402ea6:	4b06      	ldr	r3, [pc, #24]	; (402ec0 <osc_get_rate+0x70>)
  402ea8:	e000      	b.n	402eac <osc_get_rate+0x5c>
	}

	return 0;
  402eaa:	2300      	movs	r3, #0
}
  402eac:	4618      	mov	r0, r3
  402eae:	370c      	adds	r7, #12
  402eb0:	46bd      	mov	sp, r7
  402eb2:	bc80      	pop	{r7}
  402eb4:	4770      	bx	lr
  402eb6:	bf00      	nop
  402eb8:	003d0900 	.word	0x003d0900
  402ebc:	007a1200 	.word	0x007a1200
  402ec0:	00b71b00 	.word	0x00b71b00

00402ec4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  402ec4:	b580      	push	{r7, lr}
  402ec6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  402ec8:	2006      	movs	r0, #6
  402eca:	4b04      	ldr	r3, [pc, #16]	; (402edc <sysclk_get_main_hz+0x18>)
  402ecc:	4798      	blx	r3
  402ece:	4602      	mov	r2, r0
  402ed0:	4613      	mov	r3, r2
  402ed2:	009b      	lsls	r3, r3, #2
  402ed4:	4413      	add	r3, r2
  402ed6:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  402ed8:	4618      	mov	r0, r3
  402eda:	bd80      	pop	{r7, pc}
  402edc:	00402e51 	.word	0x00402e51

00402ee0 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  402ee0:	b580      	push	{r7, lr}
  402ee2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  402ee4:	4b02      	ldr	r3, [pc, #8]	; (402ef0 <sysclk_get_peripheral_hz+0x10>)
  402ee6:	4798      	blx	r3
  402ee8:	4603      	mov	r3, r0
  402eea:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  402eec:	4618      	mov	r0, r3
  402eee:	bd80      	pop	{r7, pc}
  402ef0:	00402ec5 	.word	0x00402ec5

00402ef4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  402ef4:	b580      	push	{r7, lr}
  402ef6:	b082      	sub	sp, #8
  402ef8:	af00      	add	r7, sp, #0
  402efa:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  402efc:	6878      	ldr	r0, [r7, #4]
  402efe:	4b03      	ldr	r3, [pc, #12]	; (402f0c <sysclk_enable_peripheral_clock+0x18>)
  402f00:	4798      	blx	r3
}
  402f02:	bf00      	nop
  402f04:	3708      	adds	r7, #8
  402f06:	46bd      	mov	sp, r7
  402f08:	bd80      	pop	{r7, pc}
  402f0a:	bf00      	nop
  402f0c:	00404f99 	.word	0x00404f99

00402f10 <InitRs485Pdc>:
 /* This variable is modified in other files to match the required parity */
 uint32_t rs485Parity = US_MR_PAR_NO;
 

 void InitRs485Pdc(void)
 {
  402f10:	b580      	push	{r7, lr}
  402f12:	b086      	sub	sp, #24
  402f14:	af00      	add	r7, sp, #0
	 sam_usart_opt_t usart_console_settings = {
  402f16:	4b18      	ldr	r3, [pc, #96]	; (402f78 <InitRs485Pdc+0x68>)
  402f18:	681b      	ldr	r3, [r3, #0]
  402f1a:	603b      	str	r3, [r7, #0]
  402f1c:	23c0      	movs	r3, #192	; 0xc0
  402f1e:	607b      	str	r3, [r7, #4]
  402f20:	4b16      	ldr	r3, [pc, #88]	; (402f7c <InitRs485Pdc+0x6c>)
  402f22:	681b      	ldr	r3, [r3, #0]
  402f24:	60bb      	str	r3, [r7, #8]
  402f26:	2300      	movs	r3, #0
  402f28:	60fb      	str	r3, [r7, #12]
  402f2a:	2300      	movs	r3, #0
  402f2c:	613b      	str	r3, [r7, #16]
  402f2e:	2300      	movs	r3, #0
  402f30:	617b      	str	r3, [r7, #20]
		 /* This field is only used in IrDA mode. */
		 0
	 };

	 /* Enable the peripheral clock in the PMC. */
	 sysclk_enable_peripheral_clock(RS485_USART_ID);
  402f32:	200f      	movs	r0, #15
  402f34:	4b12      	ldr	r3, [pc, #72]	; (402f80 <InitRs485Pdc+0x70>)
  402f36:	4798      	blx	r3

	 /* Configure USART in RS485 mode. */
	 usart_init_rs485(RS485_USART, &usart_console_settings,
  402f38:	4b12      	ldr	r3, [pc, #72]	; (402f84 <InitRs485Pdc+0x74>)
  402f3a:	4798      	blx	r3
  402f3c:	4602      	mov	r2, r0
  402f3e:	463b      	mov	r3, r7
  402f40:	4619      	mov	r1, r3
  402f42:	4811      	ldr	r0, [pc, #68]	; (402f88 <InitRs485Pdc+0x78>)
  402f44:	4b11      	ldr	r3, [pc, #68]	; (402f8c <InitRs485Pdc+0x7c>)
  402f46:	4798      	blx	r3
	 sysclk_get_peripheral_hz());


	 /* Enable TX & RX function. */
	 usart_enable_tx(RS485_USART);
  402f48:	480f      	ldr	r0, [pc, #60]	; (402f88 <InitRs485Pdc+0x78>)
  402f4a:	4b11      	ldr	r3, [pc, #68]	; (402f90 <InitRs485Pdc+0x80>)
  402f4c:	4798      	blx	r3
	 usart_enable_rx(RS485_USART);
  402f4e:	480e      	ldr	r0, [pc, #56]	; (402f88 <InitRs485Pdc+0x78>)
  402f50:	4b10      	ldr	r3, [pc, #64]	; (402f94 <InitRs485Pdc+0x84>)
  402f52:	4798      	blx	r3
 	 
	 /* Get board USART PDC base address and enable receiver and transmitter. */
	 rs485PdcBase = usart_get_pdc_base(RS485_USART);
  402f54:	480c      	ldr	r0, [pc, #48]	; (402f88 <InitRs485Pdc+0x78>)
  402f56:	4b10      	ldr	r3, [pc, #64]	; (402f98 <InitRs485Pdc+0x88>)
  402f58:	4798      	blx	r3
  402f5a:	4602      	mov	r2, r0
  402f5c:	4b0f      	ldr	r3, [pc, #60]	; (402f9c <InitRs485Pdc+0x8c>)
  402f5e:	601a      	str	r2, [r3, #0]
	 pdc_enable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  402f60:	4b0e      	ldr	r3, [pc, #56]	; (402f9c <InitRs485Pdc+0x8c>)
  402f62:	681b      	ldr	r3, [r3, #0]
  402f64:	f240 1101 	movw	r1, #257	; 0x101
  402f68:	4618      	mov	r0, r3
  402f6a:	4b0d      	ldr	r3, [pc, #52]	; (402fa0 <InitRs485Pdc+0x90>)
  402f6c:	4798      	blx	r3

 }
  402f6e:	bf00      	nop
  402f70:	3718      	adds	r7, #24
  402f72:	46bd      	mov	sp, r7
  402f74:	bd80      	pop	{r7, pc}
  402f76:	bf00      	nop
  402f78:	2000002c 	.word	0x2000002c
  402f7c:	20000030 	.word	0x20000030
  402f80:	00402ef5 	.word	0x00402ef5
  402f84:	00402ee1 	.word	0x00402ee1
  402f88:	40028000 	.word	0x40028000
  402f8c:	00403d31 	.word	0x00403d31
  402f90:	00403d71 	.word	0x00403d71
  402f94:	00403db9 	.word	0x00403db9
  402f98:	00403ed9 	.word	0x00403ed9
  402f9c:	20002734 	.word	0x20002734
  402fa0:	00403741 	.word	0x00403741

00402fa4 <Rs485PdcStartTx>:

 /* Set pointers and start transmitting */
 void Rs485PdcStartTx(uint32_t buff, uint16_t nBytes)
 {
  402fa4:	b580      	push	{r7, lr}
  402fa6:	b082      	sub	sp, #8
  402fa8:	af00      	add	r7, sp, #0
  402faa:	6078      	str	r0, [r7, #4]
  402fac:	460b      	mov	r3, r1
  402fae:	807b      	strh	r3, [r7, #2]
	rs485PdcPkt.ul_addr = buff;
  402fb0:	4a08      	ldr	r2, [pc, #32]	; (402fd4 <Rs485PdcStartTx+0x30>)
  402fb2:	687b      	ldr	r3, [r7, #4]
  402fb4:	6013      	str	r3, [r2, #0]
	rs485PdcPkt.ul_size = nBytes;
  402fb6:	887b      	ldrh	r3, [r7, #2]
  402fb8:	4a06      	ldr	r2, [pc, #24]	; (402fd4 <Rs485PdcStartTx+0x30>)
  402fba:	6053      	str	r3, [r2, #4]
	pdc_tx_init(rs485PdcBase, &rs485PdcPkt, NULL);
  402fbc:	4b06      	ldr	r3, [pc, #24]	; (402fd8 <Rs485PdcStartTx+0x34>)
  402fbe:	681b      	ldr	r3, [r3, #0]
  402fc0:	2200      	movs	r2, #0
  402fc2:	4904      	ldr	r1, [pc, #16]	; (402fd4 <Rs485PdcStartTx+0x30>)
  402fc4:	4618      	mov	r0, r3
  402fc6:	4b05      	ldr	r3, [pc, #20]	; (402fdc <Rs485PdcStartTx+0x38>)
  402fc8:	4798      	blx	r3
 }
  402fca:	bf00      	nop
  402fcc:	3708      	adds	r7, #8
  402fce:	46bd      	mov	sp, r7
  402fd0:	bd80      	pop	{r7, pc}
  402fd2:	bf00      	nop
  402fd4:	20002738 	.word	0x20002738
  402fd8:	20002734 	.word	0x20002734
  402fdc:	004036b9 	.word	0x004036b9

00402fe0 <Rs485PdcStartRx>:

 /* Set pointers and start receiving */
 void Rs485PdcStartRx(uint32_t buff, uint16_t nBytes)
 {
  402fe0:	b580      	push	{r7, lr}
  402fe2:	b082      	sub	sp, #8
  402fe4:	af00      	add	r7, sp, #0
  402fe6:	6078      	str	r0, [r7, #4]
  402fe8:	460b      	mov	r3, r1
  402fea:	807b      	strh	r3, [r7, #2]
	rs485PdcPkt.ul_addr = buff;
  402fec:	4a08      	ldr	r2, [pc, #32]	; (403010 <Rs485PdcStartRx+0x30>)
  402fee:	687b      	ldr	r3, [r7, #4]
  402ff0:	6013      	str	r3, [r2, #0]
	rs485PdcPkt.ul_size = nBytes;
  402ff2:	887b      	ldrh	r3, [r7, #2]
  402ff4:	4a06      	ldr	r2, [pc, #24]	; (403010 <Rs485PdcStartRx+0x30>)
  402ff6:	6053      	str	r3, [r2, #4]
	pdc_rx_init(rs485PdcBase, &rs485PdcPkt, NULL);
  402ff8:	4b06      	ldr	r3, [pc, #24]	; (403014 <Rs485PdcStartRx+0x34>)
  402ffa:	681b      	ldr	r3, [r3, #0]
  402ffc:	2200      	movs	r2, #0
  402ffe:	4904      	ldr	r1, [pc, #16]	; (403010 <Rs485PdcStartRx+0x30>)
  403000:	4618      	mov	r0, r3
  403002:	4b05      	ldr	r3, [pc, #20]	; (403018 <Rs485PdcStartRx+0x38>)
  403004:	4798      	blx	r3
 }
  403006:	bf00      	nop
  403008:	3708      	adds	r7, #8
  40300a:	46bd      	mov	sp, r7
  40300c:	bd80      	pop	{r7, pc}
  40300e:	bf00      	nop
  403010:	20002738 	.word	0x20002738
  403014:	20002734 	.word	0x20002734
  403018:	004036fd 	.word	0x004036fd

0040301c <Rs485PdcGetRxBytes>:
 
 /* Returns number of bytes in Rx buffer */
 uint32_t Rs485PdcGetRxBytes(void)
 {
  40301c:	b580      	push	{r7, lr}
  40301e:	b082      	sub	sp, #8
  403020:	af00      	add	r7, sp, #0
	uint32_t recvdBytes = RS485_BUFFER_SIZE;
  403022:	2396      	movs	r3, #150	; 0x96
  403024:	607b      	str	r3, [r7, #4]
	recvdBytes -= pdc_read_rx_counter(rs485PdcBase);
  403026:	4b09      	ldr	r3, [pc, #36]	; (40304c <Rs485PdcGetRxBytes+0x30>)
  403028:	681b      	ldr	r3, [r3, #0]
  40302a:	4618      	mov	r0, r3
  40302c:	4b08      	ldr	r3, [pc, #32]	; (403050 <Rs485PdcGetRxBytes+0x34>)
  40302e:	4798      	blx	r3
  403030:	4602      	mov	r2, r0
  403032:	687b      	ldr	r3, [r7, #4]
  403034:	1a9b      	subs	r3, r3, r2
  403036:	607b      	str	r3, [r7, #4]
	if(recvdBytes>RS485_BUFFER_SIZE)//If overflow occurred. 
  403038:	687b      	ldr	r3, [r7, #4]
  40303a:	2b96      	cmp	r3, #150	; 0x96
  40303c:	d901      	bls.n	403042 <Rs485PdcGetRxBytes+0x26>
	{
		recvdBytes = 0;
  40303e:	2300      	movs	r3, #0
  403040:	607b      	str	r3, [r7, #4]
	}
	return recvdBytes;
  403042:	687b      	ldr	r3, [r7, #4]
 }
  403044:	4618      	mov	r0, r3
  403046:	3708      	adds	r7, #8
  403048:	46bd      	mov	sp, r7
  40304a:	bd80      	pop	{r7, pc}
  40304c:	20002734 	.word	0x20002734
  403050:	00403781 	.word	0x00403781

00403054 <Rs485PdcGetTxStatus>:
	return (usart_get_status(RS485_USART)&US_CSR_ENDRX);
 }

 /* Returns 1 if Tx Buffer is empty else 0 */
 uint32_t Rs485PdcGetTxStatus(void)
 {
  403054:	b580      	push	{r7, lr}
  403056:	af00      	add	r7, sp, #0
	return (usart_get_status(RS485_USART)&US_CSR_ENDTX);
  403058:	4803      	ldr	r0, [pc, #12]	; (403068 <Rs485PdcGetTxStatus+0x14>)
  40305a:	4b04      	ldr	r3, [pc, #16]	; (40306c <Rs485PdcGetTxStatus+0x18>)
  40305c:	4798      	blx	r3
  40305e:	4603      	mov	r3, r0
  403060:	f003 0310 	and.w	r3, r3, #16
 }
  403064:	4618      	mov	r0, r3
  403066:	bd80      	pop	{r7, pc}
  403068:	40028000 	.word	0x40028000
  40306c:	00403e51 	.word	0x00403e51

00403070 <local_twi_handler>:
/*
 * For internal use only.
 * A common TWI interrupt handler that is called for all TWI peripherals.
 */
static void local_twi_handler(const portBASE_TYPE twi_index)
{
  403070:	b590      	push	{r4, r7, lr}
  403072:	b08b      	sub	sp, #44	; 0x2c
  403074:	af00      	add	r7, sp, #0
  403076:	6078      	str	r0, [r7, #4]
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
  403078:	2300      	movs	r3, #0
  40307a:	60bb      	str	r3, [r7, #8]
	uint32_t twi_status;
	Twi *twi_port;
	bool transfer_timeout = false;
  40307c:	2300      	movs	r3, #0
  40307e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	twi_port = all_twi_definitions[twi_index].peripheral_base_address;
  403082:	4a7f      	ldr	r2, [pc, #508]	; (403280 <local_twi_handler+0x210>)
  403084:	687b      	ldr	r3, [r7, #4]
  403086:	011b      	lsls	r3, r3, #4
  403088:	4413      	add	r3, r2
  40308a:	681b      	ldr	r3, [r3, #0]
  40308c:	61bb      	str	r3, [r7, #24]

	twi_status = twi_get_interrupt_status(twi_port);
  40308e:	69b8      	ldr	r0, [r7, #24]
  403090:	4b7c      	ldr	r3, [pc, #496]	; (403284 <local_twi_handler+0x214>)
  403092:	4798      	blx	r3
  403094:	6178      	str	r0, [r7, #20]
	twi_status &= twi_get_interrupt_mask(twi_port);
  403096:	69b8      	ldr	r0, [r7, #24]
  403098:	4b7b      	ldr	r3, [pc, #492]	; (403288 <local_twi_handler+0x218>)
  40309a:	4798      	blx	r3
  40309c:	4602      	mov	r2, r0
  40309e:	697b      	ldr	r3, [r7, #20]
  4030a0:	4013      	ands	r3, r2
  4030a2:	617b      	str	r3, [r7, #20]

	/* Has the PDC completed a transmission? */
	if ((twi_status & TWI_SR_ENDTX) != 0UL) {
  4030a4:	697b      	ldr	r3, [r7, #20]
  4030a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  4030aa:	2b00      	cmp	r3, #0
  4030ac:	d071      	beq.n	403192 <local_twi_handler+0x122>
		/* Disable PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_TXTDIS);
  4030ae:	4a74      	ldr	r2, [pc, #464]	; (403280 <local_twi_handler+0x210>)
  4030b0:	687b      	ldr	r3, [r7, #4]
  4030b2:	011b      	lsls	r3, r3, #4
  4030b4:	4413      	add	r3, r2
  4030b6:	3304      	adds	r3, #4
  4030b8:	681b      	ldr	r3, [r3, #0]
  4030ba:	f44f 7100 	mov.w	r1, #512	; 0x200
  4030be:	4618      	mov	r0, r3
  4030c0:	4b72      	ldr	r3, [pc, #456]	; (40328c <local_twi_handler+0x21c>)
  4030c2:	4798      	blx	r3
		twi_disable_interrupt(twi_port, TWI_IDR_ENDTX);
  4030c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4030c8:	69b8      	ldr	r0, [r7, #24]
  4030ca:	4b71      	ldr	r3, [pc, #452]	; (403290 <local_twi_handler+0x220>)
  4030cc:	4798      	blx	r3

		uint8_t status;
		uint32_t timeout_counter = 0;
  4030ce:	2300      	movs	r3, #0
  4030d0:	623b      	str	r3, [r7, #32]

		/* Wait for TX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  4030d2:	69bb      	ldr	r3, [r7, #24]
  4030d4:	6a1b      	ldr	r3, [r3, #32]
  4030d6:	74fb      	strb	r3, [r7, #19]
			if (status & TWI_SR_TXRDY) {
  4030d8:	7cfb      	ldrb	r3, [r7, #19]
  4030da:	f003 0304 	and.w	r3, r3, #4
  4030de:	2b00      	cmp	r3, #0
  4030e0:	d10a      	bne.n	4030f8 <local_twi_handler+0x88>
				break;
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  4030e2:	6a3b      	ldr	r3, [r7, #32]
  4030e4:	3301      	adds	r3, #1
  4030e6:	623b      	str	r3, [r7, #32]
  4030e8:	6a3b      	ldr	r3, [r7, #32]
  4030ea:	f1b3 3fff 	cmp.w	r3, #4294967295
  4030ee:	d1f0      	bne.n	4030d2 <local_twi_handler+0x62>
				transfer_timeout = true;
  4030f0:	2301      	movs	r3, #1
  4030f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
  4030f6:	e000      	b.n	4030fa <local_twi_handler+0x8a>

		/* Wait for TX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
			if (status & TWI_SR_TXRDY) {
				break;
  4030f8:	bf00      	nop
				transfer_timeout = true;
				break;
			}
		}
		/* Complete the transfer - stop and last byte */
		twi_port->TWI_CR = TWI_CR_STOP;
  4030fa:	69bb      	ldr	r3, [r7, #24]
  4030fc:	2202      	movs	r2, #2
  4030fe:	601a      	str	r2, [r3, #0]
		twi_port->TWI_THR = twis[twi_index].buffer[twis[twi_index].length-1];
  403100:	4a64      	ldr	r2, [pc, #400]	; (403294 <local_twi_handler+0x224>)
  403102:	687b      	ldr	r3, [r7, #4]
  403104:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  403108:	4962      	ldr	r1, [pc, #392]	; (403294 <local_twi_handler+0x224>)
  40310a:	687b      	ldr	r3, [r7, #4]
  40310c:	00db      	lsls	r3, r3, #3
  40310e:	440b      	add	r3, r1
  403110:	685b      	ldr	r3, [r3, #4]
  403112:	3b01      	subs	r3, #1
  403114:	4413      	add	r3, r2
  403116:	781b      	ldrb	r3, [r3, #0]
  403118:	461a      	mov	r2, r3
  40311a:	69bb      	ldr	r3, [r7, #24]
  40311c:	635a      	str	r2, [r3, #52]	; 0x34

		/* Wait for TX complete flag */
		while (1) {
			status = twi_port->TWI_SR;
  40311e:	69bb      	ldr	r3, [r7, #24]
  403120:	6a1b      	ldr	r3, [r3, #32]
  403122:	74fb      	strb	r3, [r7, #19]
			if (status & TWI_SR_TXCOMP) {
  403124:	7cfb      	ldrb	r3, [r7, #19]
  403126:	f003 0301 	and.w	r3, r3, #1
  40312a:	2b00      	cmp	r3, #0
  40312c:	d10a      	bne.n	403144 <local_twi_handler+0xd4>
				break;
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  40312e:	6a3b      	ldr	r3, [r7, #32]
  403130:	3301      	adds	r3, #1
  403132:	623b      	str	r3, [r7, #32]
  403134:	6a3b      	ldr	r3, [r7, #32]
  403136:	f1b3 3fff 	cmp.w	r3, #4294967295
  40313a:	d1f0      	bne.n	40311e <local_twi_handler+0xae>
				transfer_timeout = true;
  40313c:	2301      	movs	r3, #1
  40313e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
  403142:	e000      	b.n	403146 <local_twi_handler+0xd6>

		/* Wait for TX complete flag */
		while (1) {
			status = twi_port->TWI_SR;
			if (status & TWI_SR_TXCOMP) {
				break;
  403144:	bf00      	nop
				break;
			}
		}
		/* If the driver is supporting multi-threading, then return the access
		mutex. */
		if (tx_dma_control[twi_index].peripheral_access_sem != NULL) {
  403146:	4a54      	ldr	r2, [pc, #336]	; (403298 <local_twi_handler+0x228>)
  403148:	687b      	ldr	r3, [r7, #4]
  40314a:	00db      	lsls	r3, r3, #3
  40314c:	4413      	add	r3, r2
  40314e:	685b      	ldr	r3, [r3, #4]
  403150:	2b00      	cmp	r3, #0
  403152:	d00a      	beq.n	40316a <local_twi_handler+0xfa>
			xSemaphoreGiveFromISR(
  403154:	4a50      	ldr	r2, [pc, #320]	; (403298 <local_twi_handler+0x228>)
  403156:	687b      	ldr	r3, [r7, #4]
  403158:	00db      	lsls	r3, r3, #3
  40315a:	4413      	add	r3, r2
  40315c:	6858      	ldr	r0, [r3, #4]
  40315e:	f107 0208 	add.w	r2, r7, #8
  403162:	2300      	movs	r3, #0
  403164:	2100      	movs	r1, #0
  403166:	4c4d      	ldr	r4, [pc, #308]	; (40329c <local_twi_handler+0x22c>)
  403168:	47a0      	blx	r4
					&higher_priority_task_woken);
		}

		/* if the sending task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  40316a:	6a3b      	ldr	r3, [r7, #32]
  40316c:	f1b3 3fff 	cmp.w	r3, #4294967295
  403170:	d00f      	beq.n	403192 <local_twi_handler+0x122>
			if (tx_dma_control[twi_index]. transaction_complete_notification_semaphore != NULL) {
  403172:	4a49      	ldr	r2, [pc, #292]	; (403298 <local_twi_handler+0x228>)
  403174:	687b      	ldr	r3, [r7, #4]
  403176:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  40317a:	2b00      	cmp	r3, #0
  40317c:	d009      	beq.n	403192 <local_twi_handler+0x122>
				xSemaphoreGiveFromISR(
  40317e:	4a46      	ldr	r2, [pc, #280]	; (403298 <local_twi_handler+0x228>)
  403180:	687b      	ldr	r3, [r7, #4]
  403182:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
  403186:	f107 0208 	add.w	r2, r7, #8
  40318a:	2300      	movs	r3, #0
  40318c:	2100      	movs	r1, #0
  40318e:	4c43      	ldr	r4, [pc, #268]	; (40329c <local_twi_handler+0x22c>)
  403190:	47a0      	blx	r4
			}
		}
	}

	/* Has the PDC completed a reception? */
	if ((twi_status & TWI_SR_ENDRX) != 0UL) {
  403192:	697b      	ldr	r3, [r7, #20]
  403194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  403198:	2b00      	cmp	r3, #0
  40319a:	f000 80a8 	beq.w	4032ee <local_twi_handler+0x27e>
		uint32_t timeout_counter = 0;
  40319e:	2300      	movs	r3, #0
  4031a0:	61fb      	str	r3, [r7, #28]
		uint32_t status;
		/* Must handle the two last bytes */
		/* Disable PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_RXTDIS);
  4031a2:	4a37      	ldr	r2, [pc, #220]	; (403280 <local_twi_handler+0x210>)
  4031a4:	687b      	ldr	r3, [r7, #4]
  4031a6:	011b      	lsls	r3, r3, #4
  4031a8:	4413      	add	r3, r2
  4031aa:	3304      	adds	r3, #4
  4031ac:	681b      	ldr	r3, [r3, #0]
  4031ae:	2102      	movs	r1, #2
  4031b0:	4618      	mov	r0, r3
  4031b2:	4b36      	ldr	r3, [pc, #216]	; (40328c <local_twi_handler+0x21c>)
  4031b4:	4798      	blx	r3

		twi_disable_interrupt(twi_port, TWI_IDR_ENDRX);
  4031b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4031ba:	69b8      	ldr	r0, [r7, #24]
  4031bc:	4b34      	ldr	r3, [pc, #208]	; (403290 <local_twi_handler+0x220>)
  4031be:	4798      	blx	r3

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  4031c0:	69bb      	ldr	r3, [r7, #24]
  4031c2:	6a1b      	ldr	r3, [r3, #32]
  4031c4:	60fb      	str	r3, [r7, #12]
			if (status & TWI_SR_RXRDY) {
  4031c6:	68fb      	ldr	r3, [r7, #12]
  4031c8:	f003 0302 	and.w	r3, r3, #2
  4031cc:	2b00      	cmp	r3, #0
  4031ce:	d107      	bne.n	4031e0 <local_twi_handler+0x170>
				break;
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  4031d0:	69fb      	ldr	r3, [r7, #28]
  4031d2:	3301      	adds	r3, #1
  4031d4:	61fb      	str	r3, [r7, #28]
  4031d6:	69fb      	ldr	r3, [r7, #28]
  4031d8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4031dc:	d002      	beq.n	4031e4 <local_twi_handler+0x174>
				break;
			}
		}
  4031de:	e7ef      	b.n	4031c0 <local_twi_handler+0x150>

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
			if (status & TWI_SR_RXRDY) {
				break;
  4031e0:	bf00      	nop
  4031e2:	e000      	b.n	4031e6 <local_twi_handler+0x176>
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
				break;
  4031e4:	bf00      	nop
			}
		}
		/* Complete the transfer. */
		twi_port->TWI_CR = TWI_CR_STOP;
  4031e6:	69bb      	ldr	r3, [r7, #24]
  4031e8:	2202      	movs	r2, #2
  4031ea:	601a      	str	r2, [r3, #0]
		/* Read second last data */
		twis[twi_index].buffer[(twis[twi_index].length)-2] = twi_port->TWI_RHR;
  4031ec:	4a29      	ldr	r2, [pc, #164]	; (403294 <local_twi_handler+0x224>)
  4031ee:	687b      	ldr	r3, [r7, #4]
  4031f0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  4031f4:	4927      	ldr	r1, [pc, #156]	; (403294 <local_twi_handler+0x224>)
  4031f6:	687b      	ldr	r3, [r7, #4]
  4031f8:	00db      	lsls	r3, r3, #3
  4031fa:	440b      	add	r3, r1
  4031fc:	685b      	ldr	r3, [r3, #4]
  4031fe:	3b02      	subs	r3, #2
  403200:	4413      	add	r3, r2
  403202:	69ba      	ldr	r2, [r7, #24]
  403204:	6b12      	ldr	r2, [r2, #48]	; 0x30
  403206:	b2d2      	uxtb	r2, r2
  403208:	701a      	strb	r2, [r3, #0]

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  40320a:	69bb      	ldr	r3, [r7, #24]
  40320c:	6a1b      	ldr	r3, [r3, #32]
  40320e:	60fb      	str	r3, [r7, #12]
			if (status & TWI_SR_RXRDY) {
  403210:	68fb      	ldr	r3, [r7, #12]
  403212:	f003 0302 	and.w	r3, r3, #2
  403216:	2b00      	cmp	r3, #0
  403218:	d107      	bne.n	40322a <local_twi_handler+0x1ba>
				break;
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  40321a:	69fb      	ldr	r3, [r7, #28]
  40321c:	3301      	adds	r3, #1
  40321e:	61fb      	str	r3, [r7, #28]
  403220:	69fb      	ldr	r3, [r7, #28]
  403222:	f1b3 3fff 	cmp.w	r3, #4294967295
  403226:	d002      	beq.n	40322e <local_twi_handler+0x1be>
				break;
			}
		}
  403228:	e7ef      	b.n	40320a <local_twi_handler+0x19a>

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
			if (status & TWI_SR_RXRDY) {
				break;
  40322a:	bf00      	nop
  40322c:	e000      	b.n	403230 <local_twi_handler+0x1c0>
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
				break;
  40322e:	bf00      	nop
			}
		}

		if (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  403230:	69fb      	ldr	r3, [r7, #28]
  403232:	f1b3 3fff 	cmp.w	r3, #4294967295
  403236:	d034      	beq.n	4032a2 <local_twi_handler+0x232>
			/* Read last data */
			twis[twi_index].buffer[(twis[twi_index].length)-1] = twi_port->TWI_RHR;
  403238:	4a16      	ldr	r2, [pc, #88]	; (403294 <local_twi_handler+0x224>)
  40323a:	687b      	ldr	r3, [r7, #4]
  40323c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  403240:	4914      	ldr	r1, [pc, #80]	; (403294 <local_twi_handler+0x224>)
  403242:	687b      	ldr	r3, [r7, #4]
  403244:	00db      	lsls	r3, r3, #3
  403246:	440b      	add	r3, r1
  403248:	685b      	ldr	r3, [r3, #4]
  40324a:	3b01      	subs	r3, #1
  40324c:	4413      	add	r3, r2
  40324e:	69ba      	ldr	r2, [r7, #24]
  403250:	6b12      	ldr	r2, [r2, #48]	; 0x30
  403252:	b2d2      	uxtb	r2, r2
  403254:	701a      	strb	r2, [r3, #0]
			timeout_counter = 0;
  403256:	2300      	movs	r3, #0
  403258:	61fb      	str	r3, [r7, #28]
			/* Wait for TX complete flag before releasing semaphore */
			while (1) {
				status = twi_port->TWI_SR;
  40325a:	69bb      	ldr	r3, [r7, #24]
  40325c:	6a1b      	ldr	r3, [r3, #32]
  40325e:	60fb      	str	r3, [r7, #12]
				if (status & TWI_SR_TXCOMP) {
  403260:	68fb      	ldr	r3, [r7, #12]
  403262:	f003 0301 	and.w	r3, r3, #1
  403266:	2b00      	cmp	r3, #0
  403268:	d11a      	bne.n	4032a0 <local_twi_handler+0x230>
					break;
				}
				/* Check timeout condition. */
				if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  40326a:	69fb      	ldr	r3, [r7, #28]
  40326c:	3301      	adds	r3, #1
  40326e:	61fb      	str	r3, [r7, #28]
  403270:	69fb      	ldr	r3, [r7, #28]
  403272:	f1b3 3fff 	cmp.w	r3, #4294967295
  403276:	d1f0      	bne.n	40325a <local_twi_handler+0x1ea>
					transfer_timeout = true;
  403278:	2301      	movs	r3, #1
  40327a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
  40327e:	e010      	b.n	4032a2 <local_twi_handler+0x232>
  403280:	0040bcac 	.word	0x0040bcac
  403284:	00403b79 	.word	0x00403b79
  403288:	00403b91 	.word	0x00403b91
  40328c:	00403761 	.word	0x00403761
  403290:	00403b59 	.word	0x00403b59
  403294:	20000510 	.word	0x20000510
  403298:	200004f0 	.word	0x200004f0
  40329c:	00405c75 	.word	0x00405c75
			timeout_counter = 0;
			/* Wait for TX complete flag before releasing semaphore */
			while (1) {
				status = twi_port->TWI_SR;
				if (status & TWI_SR_TXCOMP) {
					break;
  4032a0:	bf00      	nop
		}

		/* If the driver is supporting multi-threading, then return the access
		mutex.  NOTE: As the peripheral is half duplex there is only one
		access mutex, and the reception uses the tx access muted. */
		if (tx_dma_control[twi_index].peripheral_access_sem != NULL) {
  4032a2:	4a33      	ldr	r2, [pc, #204]	; (403370 <local_twi_handler+0x300>)
  4032a4:	687b      	ldr	r3, [r7, #4]
  4032a6:	00db      	lsls	r3, r3, #3
  4032a8:	4413      	add	r3, r2
  4032aa:	685b      	ldr	r3, [r3, #4]
  4032ac:	2b00      	cmp	r3, #0
  4032ae:	d00a      	beq.n	4032c6 <local_twi_handler+0x256>
			xSemaphoreGiveFromISR(
  4032b0:	4a2f      	ldr	r2, [pc, #188]	; (403370 <local_twi_handler+0x300>)
  4032b2:	687b      	ldr	r3, [r7, #4]
  4032b4:	00db      	lsls	r3, r3, #3
  4032b6:	4413      	add	r3, r2
  4032b8:	6858      	ldr	r0, [r3, #4]
  4032ba:	f107 0208 	add.w	r2, r7, #8
  4032be:	2300      	movs	r3, #0
  4032c0:	2100      	movs	r1, #0
  4032c2:	4c2c      	ldr	r4, [pc, #176]	; (403374 <local_twi_handler+0x304>)
  4032c4:	47a0      	blx	r4
					&higher_priority_task_woken);
		}

		/* if the receiving task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if  (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  4032c6:	69fb      	ldr	r3, [r7, #28]
  4032c8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4032cc:	d00f      	beq.n	4032ee <local_twi_handler+0x27e>
			if (rx_dma_control[twi_index].transaction_complete_notification_semaphore != NULL) {
  4032ce:	4a2a      	ldr	r2, [pc, #168]	; (403378 <local_twi_handler+0x308>)
  4032d0:	687b      	ldr	r3, [r7, #4]
  4032d2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  4032d6:	2b00      	cmp	r3, #0
  4032d8:	d009      	beq.n	4032ee <local_twi_handler+0x27e>
				xSemaphoreGiveFromISR(
  4032da:	4a27      	ldr	r2, [pc, #156]	; (403378 <local_twi_handler+0x308>)
  4032dc:	687b      	ldr	r3, [r7, #4]
  4032de:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
  4032e2:	f107 0208 	add.w	r2, r7, #8
  4032e6:	2300      	movs	r3, #0
  4032e8:	2100      	movs	r1, #0
  4032ea:	4c22      	ldr	r4, [pc, #136]	; (403374 <local_twi_handler+0x304>)
  4032ec:	47a0      	blx	r4
						&higher_priority_task_woken);
			}
		}
	}

	if (((twi_status & SR_ERROR_INTERRUPTS) != 0) || (transfer_timeout == true)) {
  4032ee:	697b      	ldr	r3, [r7, #20]
  4032f0:	f403 7350 	and.w	r3, r3, #832	; 0x340
  4032f4:	2b00      	cmp	r3, #0
  4032f6:	d103      	bne.n	403300 <local_twi_handler+0x290>
  4032f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4032fc:	2b00      	cmp	r3, #0
  4032fe:	d02e      	beq.n	40335e <local_twi_handler+0x2ee>
		Stop the transmission, disable interrupts used by the peripheral, and
		ensure the peripheral access mutex is made available to tasks.  As this
		peripheral is half duplex, only the Tx peripheral access mutex exits.*/

		/* Stop the PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
  403300:	4a1e      	ldr	r2, [pc, #120]	; (40337c <local_twi_handler+0x30c>)
  403302:	687b      	ldr	r3, [r7, #4]
  403304:	011b      	lsls	r3, r3, #4
  403306:	4413      	add	r3, r2
  403308:	3304      	adds	r3, #4
  40330a:	681b      	ldr	r3, [r3, #0]
  40330c:	f240 2102 	movw	r1, #514	; 0x202
  403310:	4618      	mov	r0, r3
  403312:	4b1b      	ldr	r3, [pc, #108]	; (403380 <local_twi_handler+0x310>)
  403314:	4798      	blx	r3

		if (!(twi_status & TWI_SR_NACK)) {
  403316:	697b      	ldr	r3, [r7, #20]
  403318:	f403 7380 	and.w	r3, r3, #256	; 0x100
  40331c:	2b00      	cmp	r3, #0
  40331e:	d102      	bne.n	403326 <local_twi_handler+0x2b6>
			/* Do not send stop if NACK received. Handled by hardware */
			twi_port->TWI_CR = TWI_CR_STOP;
  403320:	69bb      	ldr	r3, [r7, #24]
  403322:	2202      	movs	r2, #2
  403324:	601a      	str	r2, [r3, #0]
		}
		twi_disable_interrupt(twi_port, TWI_IDR_ENDTX);
  403326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  40332a:	69b8      	ldr	r0, [r7, #24]
  40332c:	4b15      	ldr	r3, [pc, #84]	; (403384 <local_twi_handler+0x314>)
  40332e:	4798      	blx	r3
		twi_disable_interrupt(twi_port, TWI_IDR_ENDRX);
  403330:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403334:	69b8      	ldr	r0, [r7, #24]
  403336:	4b13      	ldr	r3, [pc, #76]	; (403384 <local_twi_handler+0x314>)
  403338:	4798      	blx	r3

		if (tx_dma_control[twi_index].peripheral_access_sem != NULL) {
  40333a:	4a0d      	ldr	r2, [pc, #52]	; (403370 <local_twi_handler+0x300>)
  40333c:	687b      	ldr	r3, [r7, #4]
  40333e:	00db      	lsls	r3, r3, #3
  403340:	4413      	add	r3, r2
  403342:	685b      	ldr	r3, [r3, #4]
  403344:	2b00      	cmp	r3, #0
  403346:	d00a      	beq.n	40335e <local_twi_handler+0x2ee>
			xSemaphoreGiveFromISR(
  403348:	4a09      	ldr	r2, [pc, #36]	; (403370 <local_twi_handler+0x300>)
  40334a:	687b      	ldr	r3, [r7, #4]
  40334c:	00db      	lsls	r3, r3, #3
  40334e:	4413      	add	r3, r2
  403350:	6858      	ldr	r0, [r3, #4]
  403352:	f107 0208 	add.w	r2, r7, #8
  403356:	2300      	movs	r3, #0
  403358:	2100      	movs	r1, #0
  40335a:	4c06      	ldr	r4, [pc, #24]	; (403374 <local_twi_handler+0x304>)
  40335c:	47a0      	blx	r4
	has a priority equal to or higher than the currently running task (the task
	this ISR interrupted), then higher_priority_task_woken will have
	automatically been set to pdTRUE within the semaphore function.
	portEND_SWITCHING_ISR() will then ensure that this ISR returns directly to
	the higher priority unblocked task. */
	portEND_SWITCHING_ISR(higher_priority_task_woken);
  40335e:	68bb      	ldr	r3, [r7, #8]
  403360:	2b00      	cmp	r3, #0
  403362:	d001      	beq.n	403368 <local_twi_handler+0x2f8>
  403364:	4b08      	ldr	r3, [pc, #32]	; (403388 <local_twi_handler+0x318>)
  403366:	4798      	blx	r3
}
  403368:	bf00      	nop
  40336a:	372c      	adds	r7, #44	; 0x2c
  40336c:	46bd      	mov	sp, r7
  40336e:	bd90      	pop	{r4, r7, pc}
  403370:	200004f0 	.word	0x200004f0
  403374:	00405c75 	.word	0x00405c75
  403378:	20000500 	.word	0x20000500
  40337c:	0040bcac 	.word	0x0040bcac
  403380:	00403761 	.word	0x00403761
  403384:	00403b59 	.word	0x00403b59
  403388:	004055f5 	.word	0x004055f5

0040338c <TWI0_Handler>:
#endif /* TWI */

#ifdef TWI0

void TWI0_Handler(void)
{
  40338c:	b580      	push	{r7, lr}
  40338e:	af00      	add	r7, sp, #0
	local_twi_handler(0);
  403390:	2000      	movs	r0, #0
  403392:	4b02      	ldr	r3, [pc, #8]	; (40339c <TWI0_Handler+0x10>)
  403394:	4798      	blx	r3
}
  403396:	bf00      	nop
  403398:	bd80      	pop	{r7, pc}
  40339a:	bf00      	nop
  40339c:	00403071 	.word	0x00403071

004033a0 <TWI1_Handler>:
#endif

#ifdef TWI1

void TWI1_Handler(void)
{
  4033a0:	b580      	push	{r7, lr}
  4033a2:	af00      	add	r7, sp, #0
	local_twi_handler(1);
  4033a4:	2001      	movs	r0, #1
  4033a6:	4b02      	ldr	r3, [pc, #8]	; (4033b0 <TWI1_Handler+0x10>)
  4033a8:	4798      	blx	r3
}
  4033aa:	bf00      	nop
  4033ac:	bd80      	pop	{r7, pc}
  4033ae:	bf00      	nop
  4033b0:	00403071 	.word	0x00403071

004033b4 <configure_rx_dma>:
 * For internal use only.
 * Configures the Rx DMA to receive data into free space within the Rx buffer.
 */
static void configure_rx_dma(uint32_t usart_index,
		enum buffer_operations operation_performed)
{
  4033b4:	b580      	push	{r7, lr}
  4033b6:	b084      	sub	sp, #16
  4033b8:	af00      	add	r7, sp, #0
  4033ba:	6078      	str	r0, [r7, #4]
  4033bc:	460b      	mov	r3, r1
  4033be:	70fb      	strb	r3, [r7, #3]
	freertos_pdc_rx_control_t *rx_buffer_definition;

	rx_buffer_definition = &(rx_buffer_definitions[usart_index]);
  4033c0:	687a      	ldr	r2, [r7, #4]
  4033c2:	4613      	mov	r3, r2
  4033c4:	00db      	lsls	r3, r3, #3
  4033c6:	1a9b      	subs	r3, r3, r2
  4033c8:	009b      	lsls	r3, r3, #2
  4033ca:	4a38      	ldr	r2, [pc, #224]	; (4034ac <configure_rx_dma+0xf8>)
  4033cc:	4413      	add	r3, r2
  4033ce:	60fb      	str	r3, [r7, #12]

	/* How much space is there between the start of the DMA buffer and the
	current read pointer?  */

	if (((uint32_t)rx_buffer_definition->next_byte_to_read) ==
  4033d0:	68fb      	ldr	r3, [r7, #12]
  4033d2:	699b      	ldr	r3, [r3, #24]
  4033d4:	461a      	mov	r2, r3
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
  4033d6:	68fb      	ldr	r3, [r7, #12]
  4033d8:	689b      	ldr	r3, [r3, #8]
	rx_buffer_definition = &(rx_buffer_definitions[usart_index]);

	/* How much space is there between the start of the DMA buffer and the
	current read pointer?  */

	if (((uint32_t)rx_buffer_definition->next_byte_to_read) ==
  4033da:	429a      	cmp	r2, r3
  4033dc:	d10e      	bne.n	4033fc <configure_rx_dma+0x48>
		/* The read pointer and the write pointer are equal.  If this function
		was called because data was added to the buffer, then there is no free
		space in the buffer remaining.  If this function was called because data
		was removed from the buffer, then the space remaining is from the write
		pointer up to the end of the buffer. */
		if (operation_performed == data_added) {
  4033de:	78fb      	ldrb	r3, [r7, #3]
  4033e0:	2b00      	cmp	r3, #0
  4033e2:	d103      	bne.n	4033ec <configure_rx_dma+0x38>
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
  4033e4:	68fb      	ldr	r3, [r7, #12]
  4033e6:	2200      	movs	r2, #0
  4033e8:	60da      	str	r2, [r3, #12]
  4033ea:	e01e      	b.n	40342a <configure_rx_dma+0x76>
		} else {
			rx_buffer_definition->rx_pdc_parameters.ul_size =
				rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
  4033ec:	68fb      	ldr	r3, [r7, #12]
  4033ee:	685a      	ldr	r2, [r3, #4]
  4033f0:	68fb      	ldr	r3, [r7, #12]
  4033f2:	689b      	ldr	r3, [r3, #8]
  4033f4:	1ad2      	subs	r2, r2, r3
		was removed from the buffer, then the space remaining is from the write
		pointer up to the end of the buffer. */
		if (operation_performed == data_added) {
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
		} else {
			rx_buffer_definition->rx_pdc_parameters.ul_size =
  4033f6:	68fb      	ldr	r3, [r7, #12]
  4033f8:	60da      	str	r2, [r3, #12]
  4033fa:	e016      	b.n	40342a <configure_rx_dma+0x76>
				rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
		}
	} else if (((uint32_t)rx_buffer_definition->next_byte_to_read) >
  4033fc:	68fb      	ldr	r3, [r7, #12]
  4033fe:	699b      	ldr	r3, [r3, #24]
  403400:	461a      	mov	r2, r3
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
  403402:	68fb      	ldr	r3, [r7, #12]
  403404:	689b      	ldr	r3, [r3, #8]
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
		} else {
			rx_buffer_definition->rx_pdc_parameters.ul_size =
				rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
		}
	} else if (((uint32_t)rx_buffer_definition->next_byte_to_read) >
  403406:	429a      	cmp	r2, r3
  403408:	d908      	bls.n	40341c <configure_rx_dma+0x68>
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
		/* The read pointer is ahead of the write pointer.  The space available
		is up to the write pointer to ensure unread data is not overwritten. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
			((uint32_t) rx_buffer_definition->next_byte_to_read) - rx_buffer_definition->rx_pdc_parameters.ul_addr;
  40340a:	68fb      	ldr	r3, [r7, #12]
  40340c:	699b      	ldr	r3, [r3, #24]
  40340e:	461a      	mov	r2, r3
  403410:	68fb      	ldr	r3, [r7, #12]
  403412:	689b      	ldr	r3, [r3, #8]
  403414:	1ad2      	subs	r2, r2, r3
		}
	} else if (((uint32_t)rx_buffer_definition->next_byte_to_read) >
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
		/* The read pointer is ahead of the write pointer.  The space available
		is up to the write pointer to ensure unread data is not overwritten. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
  403416:	68fb      	ldr	r3, [r7, #12]
  403418:	60da      	str	r2, [r3, #12]
  40341a:	e006      	b.n	40342a <configure_rx_dma+0x76>
			((uint32_t) rx_buffer_definition->next_byte_to_read) - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	} else {
		/* The write pointer is ahead of the read pointer so the space
		available is up to the end of the buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
			rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
  40341c:	68fb      	ldr	r3, [r7, #12]
  40341e:	685a      	ldr	r2, [r3, #4]
  403420:	68fb      	ldr	r3, [r7, #12]
  403422:	689b      	ldr	r3, [r3, #8]
  403424:	1ad2      	subs	r2, r2, r3
		rx_buffer_definition->rx_pdc_parameters.ul_size =
			((uint32_t) rx_buffer_definition->next_byte_to_read) - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	} else {
		/* The write pointer is ahead of the read pointer so the space
		available is up to the end of the buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
  403426:	68fb      	ldr	r3, [r7, #12]
  403428:	60da      	str	r2, [r3, #12]
			rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	}

	configASSERT((rx_buffer_definition->rx_pdc_parameters.ul_addr +
  40342a:	68fb      	ldr	r3, [r7, #12]
  40342c:	689a      	ldr	r2, [r3, #8]
  40342e:	68fb      	ldr	r3, [r7, #12]
  403430:	68db      	ldr	r3, [r3, #12]
  403432:	441a      	add	r2, r3
  403434:	68fb      	ldr	r3, [r7, #12]
  403436:	685b      	ldr	r3, [r3, #4]
  403438:	429a      	cmp	r2, r3
  40343a:	d903      	bls.n	403444 <configure_rx_dma+0x90>
  40343c:	4b1c      	ldr	r3, [pc, #112]	; (4034b0 <configure_rx_dma+0xfc>)
  40343e:	4798      	blx	r3
  403440:	bf00      	nop
  403442:	e7fd      	b.n	403440 <configure_rx_dma+0x8c>
			rx_buffer_definition->rx_pdc_parameters.ul_size) <=
			rx_buffer_definition->past_rx_buffer_end_address);

	if (rx_buffer_definition->rx_pdc_parameters.ul_size > 0) {
  403444:	68fb      	ldr	r3, [r7, #12]
  403446:	68db      	ldr	r3, [r3, #12]
  403448:	2b00      	cmp	r3, #0
  40344a:	d020      	beq.n	40348e <configure_rx_dma+0xda>
		/* Restart the DMA to receive into whichever space was calculated
		as remaining.  First clear any characters that might already be in the
		registers. */
		pdc_rx_init(
  40344c:	4a19      	ldr	r2, [pc, #100]	; (4034b4 <configure_rx_dma+0x100>)
  40344e:	687b      	ldr	r3, [r7, #4]
  403450:	011b      	lsls	r3, r3, #4
  403452:	4413      	add	r3, r2
  403454:	3304      	adds	r3, #4
  403456:	6818      	ldr	r0, [r3, #0]
  403458:	68fb      	ldr	r3, [r7, #12]
  40345a:	3308      	adds	r3, #8
  40345c:	2200      	movs	r2, #0
  40345e:	4619      	mov	r1, r3
  403460:	4b15      	ldr	r3, [pc, #84]	; (4034b8 <configure_rx_dma+0x104>)
  403462:	4798      	blx	r3
				all_usart_definitions[usart_index].pdc_base_address, &rx_buffer_definition->rx_pdc_parameters,
				NULL);
		pdc_enable_transfer(
  403464:	4a13      	ldr	r2, [pc, #76]	; (4034b4 <configure_rx_dma+0x100>)
  403466:	687b      	ldr	r3, [r7, #4]
  403468:	011b      	lsls	r3, r3, #4
  40346a:	4413      	add	r3, r2
  40346c:	3304      	adds	r3, #4
  40346e:	681b      	ldr	r3, [r3, #0]
  403470:	2101      	movs	r1, #1
  403472:	4618      	mov	r0, r3
  403474:	4b11      	ldr	r3, [pc, #68]	; (4034bc <configure_rx_dma+0x108>)
  403476:	4798      	blx	r3
				all_usart_definitions[usart_index].pdc_base_address,
				PERIPH_PTCR_RXTEN);
		usart_enable_interrupt(
				all_usart_definitions[usart_index].peripheral_base_address, US_IER_ENDRX |
  403478:	4a0e      	ldr	r2, [pc, #56]	; (4034b4 <configure_rx_dma+0x100>)
  40347a:	687b      	ldr	r3, [r7, #4]
  40347c:	011b      	lsls	r3, r3, #4
  40347e:	4413      	add	r3, r2
  403480:	681b      	ldr	r3, [r3, #0]
				all_usart_definitions[usart_index].pdc_base_address, &rx_buffer_definition->rx_pdc_parameters,
				NULL);
		pdc_enable_transfer(
				all_usart_definitions[usart_index].pdc_base_address,
				PERIPH_PTCR_RXTEN);
		usart_enable_interrupt(
  403482:	f44f 7184 	mov.w	r1, #264	; 0x108
  403486:	4618      	mov	r0, r3
  403488:	4b0d      	ldr	r3, [pc, #52]	; (4034c0 <configure_rx_dma+0x10c>)
  40348a:	4798      	blx	r3
		space. */
		usart_disable_interrupt(
				all_usart_definitions[usart_index].peripheral_base_address, US_IER_ENDRX |
				US_IER_TIMEOUT);
	}
}
  40348c:	e009      	b.n	4034a2 <configure_rx_dma+0xee>
	} else {
		/* The write pointer has reached the read pointer.  There is no
		more room so the DMA is not re-enabled until a read has created
		space. */
		usart_disable_interrupt(
				all_usart_definitions[usart_index].peripheral_base_address, US_IER_ENDRX |
  40348e:	4a09      	ldr	r2, [pc, #36]	; (4034b4 <configure_rx_dma+0x100>)
  403490:	687b      	ldr	r3, [r7, #4]
  403492:	011b      	lsls	r3, r3, #4
  403494:	4413      	add	r3, r2
  403496:	681b      	ldr	r3, [r3, #0]
				US_IER_TIMEOUT);
	} else {
		/* The write pointer has reached the read pointer.  There is no
		more room so the DMA is not re-enabled until a read has created
		space. */
		usart_disable_interrupt(
  403498:	f44f 7184 	mov.w	r1, #264	; 0x108
  40349c:	4618      	mov	r0, r3
  40349e:	4b09      	ldr	r3, [pc, #36]	; (4034c4 <configure_rx_dma+0x110>)
  4034a0:	4798      	blx	r3
				all_usart_definitions[usart_index].peripheral_base_address, US_IER_ENDRX |
				US_IER_TIMEOUT);
	}
}
  4034a2:	bf00      	nop
  4034a4:	3710      	adds	r7, #16
  4034a6:	46bd      	mov	sp, r7
  4034a8:	bd80      	pop	{r7, pc}
  4034aa:	bf00      	nop
  4034ac:	20000520 	.word	0x20000520
  4034b0:	00405655 	.word	0x00405655
  4034b4:	0040bccc 	.word	0x0040bccc
  4034b8:	004036fd 	.word	0x004036fd
  4034bc:	00403741 	.word	0x00403741
  4034c0:	00403e01 	.word	0x00403e01
  4034c4:	00403e1d 	.word	0x00403e1d

004034c8 <local_usart_handler>:
/*
 * For internal use only.
 * A common USART interrupt handler that is called for all USART peripherals.
 */
static void local_usart_handler(const portBASE_TYPE usart_index)
{
  4034c8:	b590      	push	{r4, r7, lr}
  4034ca:	b087      	sub	sp, #28
  4034cc:	af00      	add	r7, sp, #0
  4034ce:	6078      	str	r0, [r7, #4]
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
  4034d0:	2300      	movs	r3, #0
  4034d2:	60fb      	str	r3, [r7, #12]
	uint32_t usart_status;
	freertos_pdc_rx_control_t *rx_buffer_definition;

	usart_status = usart_get_status(
			all_usart_definitions[usart_index].peripheral_base_address);
  4034d4:	4a62      	ldr	r2, [pc, #392]	; (403660 <local_usart_handler+0x198>)
  4034d6:	687b      	ldr	r3, [r7, #4]
  4034d8:	011b      	lsls	r3, r3, #4
  4034da:	4413      	add	r3, r2
  4034dc:	681b      	ldr	r3, [r3, #0]
{
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
	uint32_t usart_status;
	freertos_pdc_rx_control_t *rx_buffer_definition;

	usart_status = usart_get_status(
  4034de:	4618      	mov	r0, r3
  4034e0:	4b60      	ldr	r3, [pc, #384]	; (403664 <local_usart_handler+0x19c>)
  4034e2:	4798      	blx	r3
  4034e4:	6178      	str	r0, [r7, #20]
			all_usart_definitions[usart_index].peripheral_base_address);
	usart_status &= usart_get_interrupt_mask(
			all_usart_definitions[usart_index].peripheral_base_address);
  4034e6:	4a5e      	ldr	r2, [pc, #376]	; (403660 <local_usart_handler+0x198>)
  4034e8:	687b      	ldr	r3, [r7, #4]
  4034ea:	011b      	lsls	r3, r3, #4
  4034ec:	4413      	add	r3, r2
  4034ee:	681b      	ldr	r3, [r3, #0]
	uint32_t usart_status;
	freertos_pdc_rx_control_t *rx_buffer_definition;

	usart_status = usart_get_status(
			all_usart_definitions[usart_index].peripheral_base_address);
	usart_status &= usart_get_interrupt_mask(
  4034f0:	4618      	mov	r0, r3
  4034f2:	4b5d      	ldr	r3, [pc, #372]	; (403668 <local_usart_handler+0x1a0>)
  4034f4:	4798      	blx	r3
  4034f6:	4602      	mov	r2, r0
  4034f8:	697b      	ldr	r3, [r7, #20]
  4034fa:	4013      	ands	r3, r2
  4034fc:	617b      	str	r3, [r7, #20]
			all_usart_definitions[usart_index].peripheral_base_address);

	rx_buffer_definition = &(rx_buffer_definitions[usart_index]);
  4034fe:	687a      	ldr	r2, [r7, #4]
  403500:	4613      	mov	r3, r2
  403502:	00db      	lsls	r3, r3, #3
  403504:	1a9b      	subs	r3, r3, r2
  403506:	009b      	lsls	r3, r3, #2
  403508:	4a58      	ldr	r2, [pc, #352]	; (40366c <local_usart_handler+0x1a4>)
  40350a:	4413      	add	r3, r2
  40350c:	613b      	str	r3, [r7, #16]

	/* Has the PDC completed a transmission? */
	if ((usart_status & US_CSR_ENDTX) != 0UL) {
  40350e:	697b      	ldr	r3, [r7, #20]
  403510:	f003 0310 	and.w	r3, r3, #16
  403514:	2b00      	cmp	r3, #0
  403516:	d02a      	beq.n	40356e <local_usart_handler+0xa6>
		usart_disable_interrupt(
				all_usart_definitions[usart_index].peripheral_base_address,
  403518:	4a51      	ldr	r2, [pc, #324]	; (403660 <local_usart_handler+0x198>)
  40351a:	687b      	ldr	r3, [r7, #4]
  40351c:	011b      	lsls	r3, r3, #4
  40351e:	4413      	add	r3, r2
  403520:	681b      	ldr	r3, [r3, #0]

	rx_buffer_definition = &(rx_buffer_definitions[usart_index]);

	/* Has the PDC completed a transmission? */
	if ((usart_status & US_CSR_ENDTX) != 0UL) {
		usart_disable_interrupt(
  403522:	2110      	movs	r1, #16
  403524:	4618      	mov	r0, r3
  403526:	4b52      	ldr	r3, [pc, #328]	; (403670 <local_usart_handler+0x1a8>)
  403528:	4798      	blx	r3
				all_usart_definitions[usart_index].peripheral_base_address,
				US_IER_ENDTX);

		/* If the driver is supporting multi-threading, then return the access
		mutex. */
		if (tx_dma_control[usart_index].peripheral_access_sem != NULL) {
  40352a:	4a52      	ldr	r2, [pc, #328]	; (403674 <local_usart_handler+0x1ac>)
  40352c:	687b      	ldr	r3, [r7, #4]
  40352e:	00db      	lsls	r3, r3, #3
  403530:	4413      	add	r3, r2
  403532:	685b      	ldr	r3, [r3, #4]
  403534:	2b00      	cmp	r3, #0
  403536:	d00a      	beq.n	40354e <local_usart_handler+0x86>
			xSemaphoreGiveFromISR(
  403538:	4a4e      	ldr	r2, [pc, #312]	; (403674 <local_usart_handler+0x1ac>)
  40353a:	687b      	ldr	r3, [r7, #4]
  40353c:	00db      	lsls	r3, r3, #3
  40353e:	4413      	add	r3, r2
  403540:	6858      	ldr	r0, [r3, #4]
  403542:	f107 020c 	add.w	r2, r7, #12
  403546:	2300      	movs	r3, #0
  403548:	2100      	movs	r1, #0
  40354a:	4c4b      	ldr	r4, [pc, #300]	; (403678 <local_usart_handler+0x1b0>)
  40354c:	47a0      	blx	r4
					&higher_priority_task_woken);
		}

		/* if the sending task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if (tx_dma_control[usart_index].transaction_complete_notification_semaphore != NULL) {
  40354e:	4a49      	ldr	r2, [pc, #292]	; (403674 <local_usart_handler+0x1ac>)
  403550:	687b      	ldr	r3, [r7, #4]
  403552:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  403556:	2b00      	cmp	r3, #0
  403558:	d009      	beq.n	40356e <local_usart_handler+0xa6>
			xSemaphoreGiveFromISR(
  40355a:	4a46      	ldr	r2, [pc, #280]	; (403674 <local_usart_handler+0x1ac>)
  40355c:	687b      	ldr	r3, [r7, #4]
  40355e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
  403562:	f107 020c 	add.w	r2, r7, #12
  403566:	2300      	movs	r3, #0
  403568:	2100      	movs	r1, #0
  40356a:	4c43      	ldr	r4, [pc, #268]	; (403678 <local_usart_handler+0x1b0>)
  40356c:	47a0      	blx	r4
					tx_dma_control[usart_index].transaction_complete_notification_semaphore,
					&higher_priority_task_woken);
		}
	}

	if ((usart_status & US_CSR_ENDRX) != 0UL) {
  40356e:	697b      	ldr	r3, [r7, #20]
  403570:	f003 0308 	and.w	r3, r3, #8
  403574:	2b00      	cmp	r3, #0
  403576:	d031      	beq.n	4035dc <local_usart_handler+0x114>
		/* It is possible to initialise the peripheral to only use Tx and not Rx.
		Check that Rx has been initialised. */
		configASSERT(rx_buffer_definition->next_byte_to_read);
  403578:	693b      	ldr	r3, [r7, #16]
  40357a:	699b      	ldr	r3, [r3, #24]
  40357c:	2b00      	cmp	r3, #0
  40357e:	d103      	bne.n	403588 <local_usart_handler+0xc0>
  403580:	4b3e      	ldr	r3, [pc, #248]	; (40367c <local_usart_handler+0x1b4>)
  403582:	4798      	blx	r3
  403584:	bf00      	nop
  403586:	e7fd      	b.n	403584 <local_usart_handler+0xbc>
		configASSERT(rx_buffer_definition->next_byte_to_read !=
  403588:	693b      	ldr	r3, [r7, #16]
  40358a:	699b      	ldr	r3, [r3, #24]
  40358c:	2b01      	cmp	r3, #1
  40358e:	d103      	bne.n	403598 <local_usart_handler+0xd0>
  403590:	4b3a      	ldr	r3, [pc, #232]	; (40367c <local_usart_handler+0x1b4>)
  403592:	4798      	blx	r3
  403594:	bf00      	nop
  403596:	e7fd      	b.n	403594 <local_usart_handler+0xcc>
				RX_NOT_USED);

		/* Out of DMA buffer, configure the next buffer.  Start by moving
		the DMA buffer start address up to the end of the previously defined
		buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_addr +=
  403598:	693b      	ldr	r3, [r7, #16]
  40359a:	689a      	ldr	r2, [r3, #8]
				rx_buffer_definition->rx_pdc_parameters.ul_size;
  40359c:	693b      	ldr	r3, [r7, #16]
  40359e:	68db      	ldr	r3, [r3, #12]
				RX_NOT_USED);

		/* Out of DMA buffer, configure the next buffer.  Start by moving
		the DMA buffer start address up to the end of the previously defined
		buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_addr +=
  4035a0:	441a      	add	r2, r3
  4035a2:	693b      	ldr	r3, [r7, #16]
  4035a4:	609a      	str	r2, [r3, #8]
				rx_buffer_definition->rx_pdc_parameters.ul_size;

		/* If the end of the buffer has been reached, wrap back to the start. */
		if (rx_buffer_definition->rx_pdc_parameters.ul_addr >=
  4035a6:	693b      	ldr	r3, [r7, #16]
  4035a8:	689a      	ldr	r2, [r3, #8]
				rx_buffer_definition->past_rx_buffer_end_address)
  4035aa:	693b      	ldr	r3, [r7, #16]
  4035ac:	685b      	ldr	r3, [r3, #4]
		buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_addr +=
				rx_buffer_definition->rx_pdc_parameters.ul_size;

		/* If the end of the buffer has been reached, wrap back to the start. */
		if (rx_buffer_definition->rx_pdc_parameters.ul_addr >=
  4035ae:	429a      	cmp	r2, r3
  4035b0:	d303      	bcc.n	4035ba <local_usart_handler+0xf2>
				rx_buffer_definition->past_rx_buffer_end_address)
		{
			rx_buffer_definition->rx_pdc_parameters.ul_addr =
					rx_buffer_definition->rx_buffer_start_address;
  4035b2:	693b      	ldr	r3, [r7, #16]
  4035b4:	681a      	ldr	r2, [r3, #0]

		/* If the end of the buffer has been reached, wrap back to the start. */
		if (rx_buffer_definition->rx_pdc_parameters.ul_addr >=
				rx_buffer_definition->past_rx_buffer_end_address)
		{
			rx_buffer_definition->rx_pdc_parameters.ul_addr =
  4035b6:	693b      	ldr	r3, [r7, #16]
  4035b8:	609a      	str	r2, [r3, #8]
					rx_buffer_definition->rx_buffer_start_address;
		}

		/* Reset the Rx DMA to receive data into whatever free space remains in
		the Rx buffer. */
		configure_rx_dma(usart_index, data_added);
  4035ba:	687b      	ldr	r3, [r7, #4]
  4035bc:	2100      	movs	r1, #0
  4035be:	4618      	mov	r0, r3
  4035c0:	4b2f      	ldr	r3, [pc, #188]	; (403680 <local_usart_handler+0x1b8>)
  4035c2:	4798      	blx	r3

		if (rx_buffer_definition->rx_event_semaphore != NULL) {
  4035c4:	693b      	ldr	r3, [r7, #16]
  4035c6:	691b      	ldr	r3, [r3, #16]
  4035c8:	2b00      	cmp	r3, #0
  4035ca:	d007      	beq.n	4035dc <local_usart_handler+0x114>
			/* Notify that new data is available. */
			xSemaphoreGiveFromISR(
  4035cc:	693b      	ldr	r3, [r7, #16]
  4035ce:	6918      	ldr	r0, [r3, #16]
  4035d0:	f107 020c 	add.w	r2, r7, #12
  4035d4:	2300      	movs	r3, #0
  4035d6:	2100      	movs	r1, #0
  4035d8:	4c27      	ldr	r4, [pc, #156]	; (403678 <local_usart_handler+0x1b0>)
  4035da:	47a0      	blx	r4
					rx_buffer_definition->rx_event_semaphore,
					&higher_priority_task_woken);
		}
	}

	if ((usart_status & US_IER_TIMEOUT) != 0UL) {
  4035dc:	697b      	ldr	r3, [r7, #20]
  4035de:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4035e2:	2b00      	cmp	r3, #0
  4035e4:	d013      	beq.n	40360e <local_usart_handler+0x146>
		/* More characters have been placed into the Rx buffer.

		Restart the timeout after more data has been received. */
		usart_start_rx_timeout(all_usart_definitions[usart_index].peripheral_base_address);
  4035e6:	4a1e      	ldr	r2, [pc, #120]	; (403660 <local_usart_handler+0x198>)
  4035e8:	687b      	ldr	r3, [r7, #4]
  4035ea:	011b      	lsls	r3, r3, #4
  4035ec:	4413      	add	r3, r2
  4035ee:	681b      	ldr	r3, [r3, #0]
  4035f0:	4618      	mov	r0, r3
  4035f2:	4b24      	ldr	r3, [pc, #144]	; (403684 <local_usart_handler+0x1bc>)
  4035f4:	4798      	blx	r3

		if (rx_buffer_definition->rx_event_semaphore != NULL) {
  4035f6:	693b      	ldr	r3, [r7, #16]
  4035f8:	691b      	ldr	r3, [r3, #16]
  4035fa:	2b00      	cmp	r3, #0
  4035fc:	d007      	beq.n	40360e <local_usart_handler+0x146>
			/* Notify that new data is available. */
			xSemaphoreGiveFromISR(
  4035fe:	693b      	ldr	r3, [r7, #16]
  403600:	6918      	ldr	r0, [r3, #16]
  403602:	f107 020c 	add.w	r2, r7, #12
  403606:	2300      	movs	r3, #0
  403608:	2100      	movs	r1, #0
  40360a:	4c1b      	ldr	r4, [pc, #108]	; (403678 <local_usart_handler+0x1b0>)
  40360c:	47a0      	blx	r4
					rx_buffer_definition->rx_event_semaphore,
					&higher_priority_task_woken);
		}
	}

	if ((usart_status & SR_ERROR_INTERRUPTS) != 0) {
  40360e:	697b      	ldr	r3, [r7, #20]
  403610:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
  403614:	2b00      	cmp	r3, #0
  403616:	d019      	beq.n	40364c <local_usart_handler+0x184>
		/* An error occurred in either a transmission or reception.  Abort, and
		ensure the peripheral access mutex is made available to tasks. */
		usart_reset_status(
				all_usart_definitions[usart_index].peripheral_base_address);
  403618:	4a11      	ldr	r2, [pc, #68]	; (403660 <local_usart_handler+0x198>)
  40361a:	687b      	ldr	r3, [r7, #4]
  40361c:	011b      	lsls	r3, r3, #4
  40361e:	4413      	add	r3, r2
  403620:	681b      	ldr	r3, [r3, #0]
	}

	if ((usart_status & SR_ERROR_INTERRUPTS) != 0) {
		/* An error occurred in either a transmission or reception.  Abort, and
		ensure the peripheral access mutex is made available to tasks. */
		usart_reset_status(
  403622:	4618      	mov	r0, r3
  403624:	4b18      	ldr	r3, [pc, #96]	; (403688 <local_usart_handler+0x1c0>)
  403626:	4798      	blx	r3
				all_usart_definitions[usart_index].peripheral_base_address);
		if (tx_dma_control[usart_index].peripheral_access_sem != NULL) {
  403628:	4a12      	ldr	r2, [pc, #72]	; (403674 <local_usart_handler+0x1ac>)
  40362a:	687b      	ldr	r3, [r7, #4]
  40362c:	00db      	lsls	r3, r3, #3
  40362e:	4413      	add	r3, r2
  403630:	685b      	ldr	r3, [r3, #4]
  403632:	2b00      	cmp	r3, #0
  403634:	d00a      	beq.n	40364c <local_usart_handler+0x184>
			xSemaphoreGiveFromISR(
  403636:	4a0f      	ldr	r2, [pc, #60]	; (403674 <local_usart_handler+0x1ac>)
  403638:	687b      	ldr	r3, [r7, #4]
  40363a:	00db      	lsls	r3, r3, #3
  40363c:	4413      	add	r3, r2
  40363e:	6858      	ldr	r0, [r3, #4]
  403640:	f107 020c 	add.w	r2, r7, #12
  403644:	2300      	movs	r3, #0
  403646:	2100      	movs	r1, #0
  403648:	4c0b      	ldr	r4, [pc, #44]	; (403678 <local_usart_handler+0x1b0>)
  40364a:	47a0      	blx	r4
	has a priority equal to or higher than the currently running task (the task
	this ISR interrupted), then higher_priority_task_woken will have
	automatically been set to pdTRUE within the semaphore function.
	portEND_SWITCHING_ISR() will then ensure that this ISR returns directly to
	the higher priority unblocked task. */
	portEND_SWITCHING_ISR(higher_priority_task_woken);
  40364c:	68fb      	ldr	r3, [r7, #12]
  40364e:	2b00      	cmp	r3, #0
  403650:	d001      	beq.n	403656 <local_usart_handler+0x18e>
  403652:	4b0e      	ldr	r3, [pc, #56]	; (40368c <local_usart_handler+0x1c4>)
  403654:	4798      	blx	r3
}
  403656:	bf00      	nop
  403658:	371c      	adds	r7, #28
  40365a:	46bd      	mov	sp, r7
  40365c:	bd90      	pop	{r4, r7, pc}
  40365e:	bf00      	nop
  403660:	0040bccc 	.word	0x0040bccc
  403664:	00403e51 	.word	0x00403e51
  403668:	00403e39 	.word	0x00403e39
  40366c:	20000520 	.word	0x20000520
  403670:	00403e1d 	.word	0x00403e1d
  403674:	20000558 	.word	0x20000558
  403678:	00405c75 	.word	0x00405c75
  40367c:	00405655 	.word	0x00405655
  403680:	004033b5 	.word	0x004033b5
  403684:	00403e85 	.word	0x00403e85
  403688:	00403e69 	.word	0x00403e69
  40368c:	004055f5 	.word	0x004055f5

00403690 <USART0_Handler>:
#endif /* USART */

#ifdef USART0

void USART0_Handler(void)
{
  403690:	b580      	push	{r7, lr}
  403692:	af00      	add	r7, sp, #0
	local_usart_handler(0);
  403694:	2000      	movs	r0, #0
  403696:	4b02      	ldr	r3, [pc, #8]	; (4036a0 <USART0_Handler+0x10>)
  403698:	4798      	blx	r3
}
  40369a:	bf00      	nop
  40369c:	bd80      	pop	{r7, pc}
  40369e:	bf00      	nop
  4036a0:	004034c9 	.word	0x004034c9

004036a4 <USART1_Handler>:
#endif /* USART0 */

#ifdef USART1

void USART1_Handler(void)
{
  4036a4:	b580      	push	{r7, lr}
  4036a6:	af00      	add	r7, sp, #0
	local_usart_handler(1);
  4036a8:	2001      	movs	r0, #1
  4036aa:	4b02      	ldr	r3, [pc, #8]	; (4036b4 <USART1_Handler+0x10>)
  4036ac:	4798      	blx	r3
}
  4036ae:	bf00      	nop
  4036b0:	bd80      	pop	{r7, pc}
  4036b2:	bf00      	nop
  4036b4:	004034c9 	.word	0x004034c9

004036b8 <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  4036b8:	b480      	push	{r7}
  4036ba:	b085      	sub	sp, #20
  4036bc:	af00      	add	r7, sp, #0
  4036be:	60f8      	str	r0, [r7, #12]
  4036c0:	60b9      	str	r1, [r7, #8]
  4036c2:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  4036c4:	68bb      	ldr	r3, [r7, #8]
  4036c6:	2b00      	cmp	r3, #0
  4036c8:	d007      	beq.n	4036da <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
  4036ca:	68bb      	ldr	r3, [r7, #8]
  4036cc:	681a      	ldr	r2, [r3, #0]
  4036ce:	68fb      	ldr	r3, [r7, #12]
  4036d0:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  4036d2:	68bb      	ldr	r3, [r7, #8]
  4036d4:	685a      	ldr	r2, [r3, #4]
  4036d6:	68fb      	ldr	r3, [r7, #12]
  4036d8:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
  4036da:	687b      	ldr	r3, [r7, #4]
  4036dc:	2b00      	cmp	r3, #0
  4036de:	d007      	beq.n	4036f0 <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  4036e0:	687b      	ldr	r3, [r7, #4]
  4036e2:	681a      	ldr	r2, [r3, #0]
  4036e4:	68fb      	ldr	r3, [r7, #12]
  4036e6:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  4036e8:	687b      	ldr	r3, [r7, #4]
  4036ea:	685a      	ldr	r2, [r3, #4]
  4036ec:	68fb      	ldr	r3, [r7, #12]
  4036ee:	61da      	str	r2, [r3, #28]
	}
}
  4036f0:	bf00      	nop
  4036f2:	3714      	adds	r7, #20
  4036f4:	46bd      	mov	sp, r7
  4036f6:	bc80      	pop	{r7}
  4036f8:	4770      	bx	lr
  4036fa:	bf00      	nop

004036fc <pdc_rx_init>:
 */
void pdc_rx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  4036fc:	b480      	push	{r7}
  4036fe:	b085      	sub	sp, #20
  403700:	af00      	add	r7, sp, #0
  403702:	60f8      	str	r0, [r7, #12]
  403704:	60b9      	str	r1, [r7, #8]
  403706:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  403708:	68bb      	ldr	r3, [r7, #8]
  40370a:	2b00      	cmp	r3, #0
  40370c:	d007      	beq.n	40371e <pdc_rx_init+0x22>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  40370e:	68bb      	ldr	r3, [r7, #8]
  403710:	681a      	ldr	r2, [r3, #0]
  403712:	68fb      	ldr	r3, [r7, #12]
  403714:	601a      	str	r2, [r3, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  403716:	68bb      	ldr	r3, [r7, #8]
  403718:	685a      	ldr	r2, [r3, #4]
  40371a:	68fb      	ldr	r3, [r7, #12]
  40371c:	605a      	str	r2, [r3, #4]
	}
	if (p_next_packet) {
  40371e:	687b      	ldr	r3, [r7, #4]
  403720:	2b00      	cmp	r3, #0
  403722:	d007      	beq.n	403734 <pdc_rx_init+0x38>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  403724:	687b      	ldr	r3, [r7, #4]
  403726:	681a      	ldr	r2, [r3, #0]
  403728:	68fb      	ldr	r3, [r7, #12]
  40372a:	611a      	str	r2, [r3, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  40372c:	687b      	ldr	r3, [r7, #4]
  40372e:	685a      	ldr	r2, [r3, #4]
  403730:	68fb      	ldr	r3, [r7, #12]
  403732:	615a      	str	r2, [r3, #20]
	}
}
  403734:	bf00      	nop
  403736:	3714      	adds	r7, #20
  403738:	46bd      	mov	sp, r7
  40373a:	bc80      	pop	{r7}
  40373c:	4770      	bx	lr
  40373e:	bf00      	nop

00403740 <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  403740:	b480      	push	{r7}
  403742:	b083      	sub	sp, #12
  403744:	af00      	add	r7, sp, #0
  403746:	6078      	str	r0, [r7, #4]
  403748:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  40374a:	683a      	ldr	r2, [r7, #0]
  40374c:	f240 1301 	movw	r3, #257	; 0x101
  403750:	4013      	ands	r3, r2
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  403752:	687a      	ldr	r2, [r7, #4]
  403754:	6213      	str	r3, [r2, #32]
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
}
  403756:	bf00      	nop
  403758:	370c      	adds	r7, #12
  40375a:	46bd      	mov	sp, r7
  40375c:	bc80      	pop	{r7}
  40375e:	4770      	bx	lr

00403760 <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  403760:	b480      	push	{r7}
  403762:	b083      	sub	sp, #12
  403764:	af00      	add	r7, sp, #0
  403766:	6078      	str	r0, [r7, #4]
  403768:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  40376a:	683a      	ldr	r2, [r7, #0]
  40376c:	f240 2302 	movw	r3, #514	; 0x202
  403770:	4013      	ands	r3, r2
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  403772:	687a      	ldr	r2, [r7, #4]
  403774:	6213      	str	r3, [r2, #32]
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
}
  403776:	bf00      	nop
  403778:	370c      	adds	r7, #12
  40377a:	46bd      	mov	sp, r7
  40377c:	bc80      	pop	{r7}
  40377e:	4770      	bx	lr

00403780 <pdc_read_rx_counter>:
 *
 * \return Receive Counter Register value.
 */
uint32_t pdc_read_rx_counter(
		Pdc *p_pdc)
{
  403780:	b480      	push	{r7}
  403782:	b083      	sub	sp, #12
  403784:	af00      	add	r7, sp, #0
  403786:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	return p_pdc->PERIPH_RCR;
  403788:	687b      	ldr	r3, [r7, #4]
  40378a:	685b      	ldr	r3, [r3, #4]
}
  40378c:	4618      	mov	r0, r3
  40378e:	370c      	adds	r7, #12
  403790:	46bd      	mov	sp, r7
  403792:	bc80      	pop	{r7}
  403794:	4770      	bx	lr
  403796:	bf00      	nop

00403798 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  403798:	b480      	push	{r7}
  40379a:	b083      	sub	sp, #12
  40379c:	af00      	add	r7, sp, #0
  40379e:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  4037a0:	687b      	ldr	r3, [r7, #4]
  4037a2:	2208      	movs	r2, #8
  4037a4:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  4037a6:	687b      	ldr	r3, [r7, #4]
  4037a8:	2220      	movs	r2, #32
  4037aa:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  4037ac:	687b      	ldr	r3, [r7, #4]
  4037ae:	2204      	movs	r2, #4
  4037b0:	601a      	str	r2, [r3, #0]
}
  4037b2:	bf00      	nop
  4037b4:	370c      	adds	r7, #12
  4037b6:	46bd      	mov	sp, r7
  4037b8:	bc80      	pop	{r7}
  4037ba:	4770      	bx	lr

004037bc <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  4037bc:	b580      	push	{r7, lr}
  4037be:	b084      	sub	sp, #16
  4037c0:	af00      	add	r7, sp, #0
  4037c2:	6078      	str	r0, [r7, #4]
  4037c4:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
  4037c6:	2300      	movs	r3, #0
  4037c8:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  4037ca:	687b      	ldr	r3, [r7, #4]
  4037cc:	f04f 32ff 	mov.w	r2, #4294967295
  4037d0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  4037d2:	687b      	ldr	r3, [r7, #4]
  4037d4:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  4037d6:	6878      	ldr	r0, [r7, #4]
  4037d8:	4b0e      	ldr	r3, [pc, #56]	; (403814 <twi_master_init+0x58>)
  4037da:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  4037dc:	6878      	ldr	r0, [r7, #4]
  4037de:	4b0e      	ldr	r3, [pc, #56]	; (403818 <twi_master_init+0x5c>)
  4037e0:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  4037e2:	683b      	ldr	r3, [r7, #0]
  4037e4:	6859      	ldr	r1, [r3, #4]
  4037e6:	683b      	ldr	r3, [r7, #0]
  4037e8:	681b      	ldr	r3, [r3, #0]
  4037ea:	461a      	mov	r2, r3
  4037ec:	6878      	ldr	r0, [r7, #4]
  4037ee:	4b0b      	ldr	r3, [pc, #44]	; (40381c <twi_master_init+0x60>)
  4037f0:	4798      	blx	r3
  4037f2:	4603      	mov	r3, r0
  4037f4:	2b01      	cmp	r3, #1
  4037f6:	d101      	bne.n	4037fc <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  4037f8:	2301      	movs	r3, #1
  4037fa:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  4037fc:	683b      	ldr	r3, [r7, #0]
  4037fe:	7a5b      	ldrb	r3, [r3, #9]
  403800:	2b01      	cmp	r3, #1
  403802:	d102      	bne.n	40380a <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
  403804:	687b      	ldr	r3, [r7, #4]
  403806:	2240      	movs	r2, #64	; 0x40
  403808:	601a      	str	r2, [r3, #0]
	}

	return status;
  40380a:	68fb      	ldr	r3, [r7, #12]
}
  40380c:	4618      	mov	r0, r3
  40380e:	3710      	adds	r7, #16
  403810:	46bd      	mov	sp, r7
  403812:	bd80      	pop	{r7, pc}
  403814:	00403ba9 	.word	0x00403ba9
  403818:	00403799 	.word	0x00403799
  40381c:	00403821 	.word	0x00403821

00403820 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  403820:	b480      	push	{r7}
  403822:	b089      	sub	sp, #36	; 0x24
  403824:	af00      	add	r7, sp, #0
  403826:	60f8      	str	r0, [r7, #12]
  403828:	60b9      	str	r1, [r7, #8]
  40382a:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  40382c:	2300      	movs	r3, #0
  40382e:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  403830:	68bb      	ldr	r3, [r7, #8]
  403832:	4a34      	ldr	r2, [pc, #208]	; (403904 <twi_set_speed+0xe4>)
  403834:	4293      	cmp	r3, r2
  403836:	d901      	bls.n	40383c <twi_set_speed+0x1c>
		return FAIL;
  403838:	2301      	movs	r3, #1
  40383a:	e05d      	b.n	4038f8 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  40383c:	68bb      	ldr	r3, [r7, #8]
  40383e:	4a32      	ldr	r2, [pc, #200]	; (403908 <twi_set_speed+0xe8>)
  403840:	4293      	cmp	r3, r2
  403842:	d937      	bls.n	4038b4 <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  403844:	687b      	ldr	r3, [r7, #4]
  403846:	4a31      	ldr	r2, [pc, #196]	; (40390c <twi_set_speed+0xec>)
  403848:	fba2 2303 	umull	r2, r3, r2, r3
  40384c:	0b9b      	lsrs	r3, r3, #14
  40384e:	3b04      	subs	r3, #4
  403850:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  403852:	68ba      	ldr	r2, [r7, #8]
  403854:	4b2e      	ldr	r3, [pc, #184]	; (403910 <twi_set_speed+0xf0>)
  403856:	4413      	add	r3, r2
  403858:	009b      	lsls	r3, r3, #2
  40385a:	687a      	ldr	r2, [r7, #4]
  40385c:	fbb2 f3f3 	udiv	r3, r2, r3
  403860:	3b04      	subs	r3, #4
  403862:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  403864:	e005      	b.n	403872 <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
  403866:	69fb      	ldr	r3, [r7, #28]
  403868:	3301      	adds	r3, #1
  40386a:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  40386c:	697b      	ldr	r3, [r7, #20]
  40386e:	085b      	lsrs	r3, r3, #1
  403870:	617b      	str	r3, [r7, #20]
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  403872:	697b      	ldr	r3, [r7, #20]
  403874:	2bff      	cmp	r3, #255	; 0xff
  403876:	d909      	bls.n	40388c <twi_set_speed+0x6c>
  403878:	69fb      	ldr	r3, [r7, #28]
  40387a:	2b06      	cmp	r3, #6
  40387c:	d9f3      	bls.n	403866 <twi_set_speed+0x46>
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40387e:	e005      	b.n	40388c <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
  403880:	69fb      	ldr	r3, [r7, #28]
  403882:	3301      	adds	r3, #1
  403884:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  403886:	693b      	ldr	r3, [r7, #16]
  403888:	085b      	lsrs	r3, r3, #1
  40388a:	613b      	str	r3, [r7, #16]
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40388c:	693b      	ldr	r3, [r7, #16]
  40388e:	2bff      	cmp	r3, #255	; 0xff
  403890:	d902      	bls.n	403898 <twi_set_speed+0x78>
  403892:	69fb      	ldr	r3, [r7, #28]
  403894:	2b06      	cmp	r3, #6
  403896:	d9f3      	bls.n	403880 <twi_set_speed+0x60>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  403898:	697b      	ldr	r3, [r7, #20]
  40389a:	b2da      	uxtb	r2, r3
  40389c:	693b      	ldr	r3, [r7, #16]
  40389e:	021b      	lsls	r3, r3, #8
  4038a0:	b29b      	uxth	r3, r3
  4038a2:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
  4038a4:	69fb      	ldr	r3, [r7, #28]
  4038a6:	041b      	lsls	r3, r3, #16
  4038a8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4038ac:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  4038ae:	68fb      	ldr	r3, [r7, #12]
  4038b0:	611a      	str	r2, [r3, #16]
  4038b2:	e020      	b.n	4038f6 <twi_set_speed+0xd6>
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4038b4:	68bb      	ldr	r3, [r7, #8]
  4038b6:	005b      	lsls	r3, r3, #1
  4038b8:	687a      	ldr	r2, [r7, #4]
  4038ba:	fbb2 f3f3 	udiv	r3, r2, r3
  4038be:	3b04      	subs	r3, #4
  4038c0:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4038c2:	e005      	b.n	4038d0 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
  4038c4:	69fb      	ldr	r3, [r7, #28]
  4038c6:	3301      	adds	r3, #1
  4038c8:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  4038ca:	69bb      	ldr	r3, [r7, #24]
  4038cc:	085b      	lsrs	r3, r3, #1
  4038ce:	61bb      	str	r3, [r7, #24]
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4038d0:	69bb      	ldr	r3, [r7, #24]
  4038d2:	2bff      	cmp	r3, #255	; 0xff
  4038d4:	d902      	bls.n	4038dc <twi_set_speed+0xbc>
  4038d6:	69fb      	ldr	r3, [r7, #28]
  4038d8:	2b06      	cmp	r3, #6
  4038da:	d9f3      	bls.n	4038c4 <twi_set_speed+0xa4>
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  4038dc:	69bb      	ldr	r3, [r7, #24]
  4038de:	b2da      	uxtb	r2, r3
  4038e0:	69bb      	ldr	r3, [r7, #24]
  4038e2:	021b      	lsls	r3, r3, #8
  4038e4:	b29b      	uxth	r3, r3
  4038e6:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
  4038e8:	69fb      	ldr	r3, [r7, #28]
  4038ea:	041b      	lsls	r3, r3, #16
  4038ec:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  4038f0:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  4038f2:	68fb      	ldr	r3, [r7, #12]
  4038f4:	611a      	str	r2, [r3, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  4038f6:	2300      	movs	r3, #0
}
  4038f8:	4618      	mov	r0, r3
  4038fa:	3724      	adds	r7, #36	; 0x24
  4038fc:	46bd      	mov	sp, r7
  4038fe:	bc80      	pop	{r7}
  403900:	4770      	bx	lr
  403902:	bf00      	nop
  403904:	00061a80 	.word	0x00061a80
  403908:	0005dc00 	.word	0x0005dc00
  40390c:	057619f1 	.word	0x057619f1
  403910:	3ffd1200 	.word	0x3ffd1200

00403914 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
  403914:	b480      	push	{r7}
  403916:	b085      	sub	sp, #20
  403918:	af00      	add	r7, sp, #0
  40391a:	6078      	str	r0, [r7, #4]
  40391c:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  40391e:	683b      	ldr	r3, [r7, #0]
  403920:	2b00      	cmp	r3, #0
  403922:	d101      	bne.n	403928 <twi_mk_addr+0x14>
		return 0;
  403924:	2300      	movs	r3, #0
  403926:	e01d      	b.n	403964 <twi_mk_addr+0x50>

	val = addr[0];
  403928:	687b      	ldr	r3, [r7, #4]
  40392a:	781b      	ldrb	r3, [r3, #0]
  40392c:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  40392e:	683b      	ldr	r3, [r7, #0]
  403930:	2b01      	cmp	r3, #1
  403932:	dd09      	ble.n	403948 <twi_mk_addr+0x34>
		val <<= 8;
  403934:	68fb      	ldr	r3, [r7, #12]
  403936:	021b      	lsls	r3, r3, #8
  403938:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  40393a:	687b      	ldr	r3, [r7, #4]
  40393c:	3301      	adds	r3, #1
  40393e:	781b      	ldrb	r3, [r3, #0]
  403940:	461a      	mov	r2, r3
  403942:	68fb      	ldr	r3, [r7, #12]
  403944:	4313      	orrs	r3, r2
  403946:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  403948:	683b      	ldr	r3, [r7, #0]
  40394a:	2b02      	cmp	r3, #2
  40394c:	dd09      	ble.n	403962 <twi_mk_addr+0x4e>
		val <<= 8;
  40394e:	68fb      	ldr	r3, [r7, #12]
  403950:	021b      	lsls	r3, r3, #8
  403952:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  403954:	687b      	ldr	r3, [r7, #4]
  403956:	3302      	adds	r3, #2
  403958:	781b      	ldrb	r3, [r3, #0]
  40395a:	461a      	mov	r2, r3
  40395c:	68fb      	ldr	r3, [r7, #12]
  40395e:	4313      	orrs	r3, r2
  403960:	60fb      	str	r3, [r7, #12]
	}
	return val;
  403962:	68fb      	ldr	r3, [r7, #12]
}
  403964:	4618      	mov	r0, r3
  403966:	3714      	adds	r7, #20
  403968:	46bd      	mov	sp, r7
  40396a:	bc80      	pop	{r7}
  40396c:	4770      	bx	lr
  40396e:	bf00      	nop

00403970 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  403970:	b580      	push	{r7, lr}
  403972:	b088      	sub	sp, #32
  403974:	af00      	add	r7, sp, #0
  403976:	6078      	str	r0, [r7, #4]
  403978:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  40397a:	683b      	ldr	r3, [r7, #0]
  40397c:	68db      	ldr	r3, [r3, #12]
  40397e:	61fb      	str	r3, [r7, #28]
	uint8_t *buffer = p_packet->buffer;
  403980:	683b      	ldr	r3, [r7, #0]
  403982:	689b      	ldr	r3, [r3, #8]
  403984:	61bb      	str	r3, [r7, #24]
	uint8_t stop_sent = 0;
  403986:	2300      	movs	r3, #0
  403988:	75fb      	strb	r3, [r7, #23]
	uint32_t timeout = TWI_TIMEOUT;;
  40398a:	f247 5330 	movw	r3, #30000	; 0x7530
  40398e:	613b      	str	r3, [r7, #16]
	
	/* Check argument */
	if (cnt == 0) {
  403990:	69fb      	ldr	r3, [r7, #28]
  403992:	2b00      	cmp	r3, #0
  403994:	d101      	bne.n	40399a <twi_master_read+0x2a>
		return TWI_INVALID_ARGUMENT;
  403996:	2301      	movs	r3, #1
  403998:	e069      	b.n	403a6e <twi_master_read+0xfe>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  40399a:	687b      	ldr	r3, [r7, #4]
  40399c:	2200      	movs	r2, #0
  40399e:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  4039a0:	683b      	ldr	r3, [r7, #0]
  4039a2:	7c1b      	ldrb	r3, [r3, #16]
  4039a4:	041b      	lsls	r3, r3, #16
  4039a6:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  4039aa:	683b      	ldr	r3, [r7, #0]
  4039ac:	685b      	ldr	r3, [r3, #4]
  4039ae:	021b      	lsls	r3, r3, #8
  4039b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  4039b4:	4313      	orrs	r3, r2
  4039b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  4039ba:	687b      	ldr	r3, [r7, #4]
  4039bc:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  4039be:	687b      	ldr	r3, [r7, #4]
  4039c0:	2200      	movs	r2, #0
  4039c2:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4039c4:	683a      	ldr	r2, [r7, #0]
  4039c6:	683b      	ldr	r3, [r7, #0]
  4039c8:	685b      	ldr	r3, [r3, #4]
  4039ca:	4619      	mov	r1, r3
  4039cc:	4610      	mov	r0, r2
  4039ce:	4b2a      	ldr	r3, [pc, #168]	; (403a78 <twi_master_read+0x108>)
  4039d0:	4798      	blx	r3
  4039d2:	4602      	mov	r2, r0
  4039d4:	687b      	ldr	r3, [r7, #4]
  4039d6:	60da      	str	r2, [r3, #12]

	/* Send a START condition */
	if (cnt == 1) {
  4039d8:	69fb      	ldr	r3, [r7, #28]
  4039da:	2b01      	cmp	r3, #1
  4039dc:	d105      	bne.n	4039ea <twi_master_read+0x7a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  4039de:	687b      	ldr	r3, [r7, #4]
  4039e0:	2203      	movs	r2, #3
  4039e2:	601a      	str	r2, [r3, #0]
		stop_sent = 1;
  4039e4:	2301      	movs	r3, #1
  4039e6:	75fb      	strb	r3, [r7, #23]
  4039e8:	e034      	b.n	403a54 <twi_master_read+0xe4>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  4039ea:	687b      	ldr	r3, [r7, #4]
  4039ec:	2201      	movs	r2, #1
  4039ee:	601a      	str	r2, [r3, #0]
		stop_sent = 0;
  4039f0:	2300      	movs	r3, #0
  4039f2:	75fb      	strb	r3, [r7, #23]
	}

	while (cnt > 0) {
  4039f4:	e02e      	b.n	403a54 <twi_master_read+0xe4>
		status = p_twi->TWI_SR;
  4039f6:	687b      	ldr	r3, [r7, #4]
  4039f8:	6a1b      	ldr	r3, [r3, #32]
  4039fa:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  4039fc:	68fb      	ldr	r3, [r7, #12]
  4039fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
  403a02:	2b00      	cmp	r3, #0
  403a04:	d001      	beq.n	403a0a <twi_master_read+0x9a>
			return TWI_RECEIVE_NACK;
  403a06:	2305      	movs	r3, #5
  403a08:	e031      	b.n	403a6e <twi_master_read+0xfe>
		}

		if (!timeout--) {
  403a0a:	693b      	ldr	r3, [r7, #16]
  403a0c:	1e5a      	subs	r2, r3, #1
  403a0e:	613a      	str	r2, [r7, #16]
  403a10:	2b00      	cmp	r3, #0
  403a12:	d101      	bne.n	403a18 <twi_master_read+0xa8>
			return TWI_ERROR_TIMEOUT;
  403a14:	2309      	movs	r3, #9
  403a16:	e02a      	b.n	403a6e <twi_master_read+0xfe>
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  403a18:	69fb      	ldr	r3, [r7, #28]
  403a1a:	2b01      	cmp	r3, #1
  403a1c:	d107      	bne.n	403a2e <twi_master_read+0xbe>
  403a1e:	7dfb      	ldrb	r3, [r7, #23]
  403a20:	2b00      	cmp	r3, #0
  403a22:	d104      	bne.n	403a2e <twi_master_read+0xbe>
			p_twi->TWI_CR = TWI_CR_STOP;
  403a24:	687b      	ldr	r3, [r7, #4]
  403a26:	2202      	movs	r2, #2
  403a28:	601a      	str	r2, [r3, #0]
			stop_sent = 1;
  403a2a:	2301      	movs	r3, #1
  403a2c:	75fb      	strb	r3, [r7, #23]
		}

		if (!(status & TWI_SR_RXRDY)) {
  403a2e:	68fb      	ldr	r3, [r7, #12]
  403a30:	f003 0302 	and.w	r3, r3, #2
  403a34:	2b00      	cmp	r3, #0
  403a36:	d100      	bne.n	403a3a <twi_master_read+0xca>
			continue;
  403a38:	e00c      	b.n	403a54 <twi_master_read+0xe4>
		}
		*buffer++ = p_twi->TWI_RHR;
  403a3a:	69bb      	ldr	r3, [r7, #24]
  403a3c:	1c5a      	adds	r2, r3, #1
  403a3e:	61ba      	str	r2, [r7, #24]
  403a40:	687a      	ldr	r2, [r7, #4]
  403a42:	6b12      	ldr	r2, [r2, #48]	; 0x30
  403a44:	b2d2      	uxtb	r2, r2
  403a46:	701a      	strb	r2, [r3, #0]

		cnt--;
  403a48:	69fb      	ldr	r3, [r7, #28]
  403a4a:	3b01      	subs	r3, #1
  403a4c:	61fb      	str	r3, [r7, #28]
		timeout = TWI_TIMEOUT;
  403a4e:	f247 5330 	movw	r3, #30000	; 0x7530
  403a52:	613b      	str	r3, [r7, #16]
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  403a54:	69fb      	ldr	r3, [r7, #28]
  403a56:	2b00      	cmp	r3, #0
  403a58:	d1cd      	bne.n	4039f6 <twi_master_read+0x86>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  403a5a:	bf00      	nop
  403a5c:	687b      	ldr	r3, [r7, #4]
  403a5e:	6a1b      	ldr	r3, [r3, #32]
  403a60:	f003 0301 	and.w	r3, r3, #1
  403a64:	2b00      	cmp	r3, #0
  403a66:	d0f9      	beq.n	403a5c <twi_master_read+0xec>
	}

	p_twi->TWI_SR;
  403a68:	687b      	ldr	r3, [r7, #4]
  403a6a:	6a1b      	ldr	r3, [r3, #32]

	return TWI_SUCCESS;
  403a6c:	2300      	movs	r3, #0
}
  403a6e:	4618      	mov	r0, r3
  403a70:	3720      	adds	r7, #32
  403a72:	46bd      	mov	sp, r7
  403a74:	bd80      	pop	{r7, pc}
  403a76:	bf00      	nop
  403a78:	00403915 	.word	0x00403915

00403a7c <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  403a7c:	b580      	push	{r7, lr}
  403a7e:	b086      	sub	sp, #24
  403a80:	af00      	add	r7, sp, #0
  403a82:	6078      	str	r0, [r7, #4]
  403a84:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  403a86:	683b      	ldr	r3, [r7, #0]
  403a88:	68db      	ldr	r3, [r3, #12]
  403a8a:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  403a8c:	683b      	ldr	r3, [r7, #0]
  403a8e:	689b      	ldr	r3, [r3, #8]
  403a90:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  403a92:	697b      	ldr	r3, [r7, #20]
  403a94:	2b00      	cmp	r3, #0
  403a96:	d101      	bne.n	403a9c <twi_master_write+0x20>
		return TWI_INVALID_ARGUMENT;
  403a98:	2301      	movs	r3, #1
  403a9a:	e056      	b.n	403b4a <twi_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  403a9c:	687b      	ldr	r3, [r7, #4]
  403a9e:	2200      	movs	r2, #0
  403aa0:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  403aa2:	683b      	ldr	r3, [r7, #0]
  403aa4:	7c1b      	ldrb	r3, [r3, #16]
  403aa6:	041b      	lsls	r3, r3, #16
  403aa8:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  403aac:	683b      	ldr	r3, [r7, #0]
  403aae:	685b      	ldr	r3, [r3, #4]
  403ab0:	021b      	lsls	r3, r3, #8
  403ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  403ab6:	431a      	orrs	r2, r3
  403ab8:	687b      	ldr	r3, [r7, #4]
  403aba:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  403abc:	687b      	ldr	r3, [r7, #4]
  403abe:	2200      	movs	r2, #0
  403ac0:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  403ac2:	683a      	ldr	r2, [r7, #0]
  403ac4:	683b      	ldr	r3, [r7, #0]
  403ac6:	685b      	ldr	r3, [r3, #4]
  403ac8:	4619      	mov	r1, r3
  403aca:	4610      	mov	r0, r2
  403acc:	4b21      	ldr	r3, [pc, #132]	; (403b54 <twi_master_write+0xd8>)
  403ace:	4798      	blx	r3
  403ad0:	4602      	mov	r2, r0
  403ad2:	687b      	ldr	r3, [r7, #4]
  403ad4:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  403ad6:	e019      	b.n	403b0c <twi_master_write+0x90>
		status = p_twi->TWI_SR;
  403ad8:	687b      	ldr	r3, [r7, #4]
  403ada:	6a1b      	ldr	r3, [r3, #32]
  403adc:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  403ade:	68fb      	ldr	r3, [r7, #12]
  403ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  403ae4:	2b00      	cmp	r3, #0
  403ae6:	d001      	beq.n	403aec <twi_master_write+0x70>
			return TWI_RECEIVE_NACK;
  403ae8:	2305      	movs	r3, #5
  403aea:	e02e      	b.n	403b4a <twi_master_write+0xce>
		}

		if (!(status & TWI_SR_TXRDY)) {
  403aec:	68fb      	ldr	r3, [r7, #12]
  403aee:	f003 0304 	and.w	r3, r3, #4
  403af2:	2b00      	cmp	r3, #0
  403af4:	d100      	bne.n	403af8 <twi_master_write+0x7c>
			continue;
  403af6:	e009      	b.n	403b0c <twi_master_write+0x90>
		}
		p_twi->TWI_THR = *buffer++;
  403af8:	693b      	ldr	r3, [r7, #16]
  403afa:	1c5a      	adds	r2, r3, #1
  403afc:	613a      	str	r2, [r7, #16]
  403afe:	781b      	ldrb	r3, [r3, #0]
  403b00:	461a      	mov	r2, r3
  403b02:	687b      	ldr	r3, [r7, #4]
  403b04:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  403b06:	697b      	ldr	r3, [r7, #20]
  403b08:	3b01      	subs	r3, #1
  403b0a:	617b      	str	r3, [r7, #20]
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  403b0c:	697b      	ldr	r3, [r7, #20]
  403b0e:	2b00      	cmp	r3, #0
  403b10:	d1e2      	bne.n	403ad8 <twi_master_write+0x5c>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  403b12:	687b      	ldr	r3, [r7, #4]
  403b14:	6a1b      	ldr	r3, [r3, #32]
  403b16:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  403b18:	68fb      	ldr	r3, [r7, #12]
  403b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  403b1e:	2b00      	cmp	r3, #0
  403b20:	d001      	beq.n	403b26 <twi_master_write+0xaa>
			return TWI_RECEIVE_NACK;
  403b22:	2305      	movs	r3, #5
  403b24:	e011      	b.n	403b4a <twi_master_write+0xce>
		}

		if (status & TWI_SR_TXRDY) {
  403b26:	68fb      	ldr	r3, [r7, #12]
  403b28:	f003 0304 	and.w	r3, r3, #4
  403b2c:	2b00      	cmp	r3, #0
  403b2e:	d100      	bne.n	403b32 <twi_master_write+0xb6>
			break;
		}
	}
  403b30:	e7ef      	b.n	403b12 <twi_master_write+0x96>
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
			break;
  403b32:	bf00      	nop
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  403b34:	687b      	ldr	r3, [r7, #4]
  403b36:	2202      	movs	r2, #2
  403b38:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  403b3a:	bf00      	nop
  403b3c:	687b      	ldr	r3, [r7, #4]
  403b3e:	6a1b      	ldr	r3, [r3, #32]
  403b40:	f003 0301 	and.w	r3, r3, #1
  403b44:	2b00      	cmp	r3, #0
  403b46:	d0f9      	beq.n	403b3c <twi_master_write+0xc0>
	}

	return TWI_SUCCESS;
  403b48:	2300      	movs	r3, #0
}
  403b4a:	4618      	mov	r0, r3
  403b4c:	3718      	adds	r7, #24
  403b4e:	46bd      	mov	sp, r7
  403b50:	bd80      	pop	{r7, pc}
  403b52:	bf00      	nop
  403b54:	00403915 	.word	0x00403915

00403b58 <twi_disable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be disabled.
 */
void twi_disable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
  403b58:	b480      	push	{r7}
  403b5a:	b083      	sub	sp, #12
  403b5c:	af00      	add	r7, sp, #0
  403b5e:	6078      	str	r0, [r7, #4]
  403b60:	6039      	str	r1, [r7, #0]
	/* Disable the specified interrupts */
	p_twi->TWI_IDR = ul_sources;
  403b62:	687b      	ldr	r3, [r7, #4]
  403b64:	683a      	ldr	r2, [r7, #0]
  403b66:	629a      	str	r2, [r3, #40]	; 0x28
	/* Dummy read */
	p_twi->TWI_SR;
  403b68:	687b      	ldr	r3, [r7, #4]
  403b6a:	6a1b      	ldr	r3, [r3, #32]
}
  403b6c:	bf00      	nop
  403b6e:	370c      	adds	r7, #12
  403b70:	46bd      	mov	sp, r7
  403b72:	bc80      	pop	{r7}
  403b74:	4770      	bx	lr
  403b76:	bf00      	nop

00403b78 <twi_get_interrupt_status>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \retval TWI interrupt status.
 */
uint32_t twi_get_interrupt_status(Twi *p_twi)
{
  403b78:	b480      	push	{r7}
  403b7a:	b083      	sub	sp, #12
  403b7c:	af00      	add	r7, sp, #0
  403b7e:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_SR;
  403b80:	687b      	ldr	r3, [r7, #4]
  403b82:	6a1b      	ldr	r3, [r3, #32]
}
  403b84:	4618      	mov	r0, r3
  403b86:	370c      	adds	r7, #12
  403b88:	46bd      	mov	sp, r7
  403b8a:	bc80      	pop	{r7}
  403b8c:	4770      	bx	lr
  403b8e:	bf00      	nop

00403b90 <twi_get_interrupt_mask>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The interrupt mask value.
 */
uint32_t twi_get_interrupt_mask(Twi *p_twi)
{
  403b90:	b480      	push	{r7}
  403b92:	b083      	sub	sp, #12
  403b94:	af00      	add	r7, sp, #0
  403b96:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_IMR;
  403b98:	687b      	ldr	r3, [r7, #4]
  403b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
  403b9c:	4618      	mov	r0, r3
  403b9e:	370c      	adds	r7, #12
  403ba0:	46bd      	mov	sp, r7
  403ba2:	bc80      	pop	{r7}
  403ba4:	4770      	bx	lr
  403ba6:	bf00      	nop

00403ba8 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  403ba8:	b480      	push	{r7}
  403baa:	b083      	sub	sp, #12
  403bac:	af00      	add	r7, sp, #0
  403bae:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  403bb0:	687b      	ldr	r3, [r7, #4]
  403bb2:	2280      	movs	r2, #128	; 0x80
  403bb4:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  403bb6:	687b      	ldr	r3, [r7, #4]
  403bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  403bba:	bf00      	nop
  403bbc:	370c      	adds	r7, #12
  403bbe:	46bd      	mov	sp, r7
  403bc0:	bc80      	pop	{r7}
  403bc2:	4770      	bx	lr

00403bc4 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  403bc4:	b480      	push	{r7}
  403bc6:	b089      	sub	sp, #36	; 0x24
  403bc8:	af00      	add	r7, sp, #0
  403bca:	60f8      	str	r0, [r7, #12]
  403bcc:	60b9      	str	r1, [r7, #8]
  403bce:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  403bd0:	68bb      	ldr	r3, [r7, #8]
  403bd2:	011a      	lsls	r2, r3, #4
  403bd4:	687b      	ldr	r3, [r7, #4]
  403bd6:	429a      	cmp	r2, r3
  403bd8:	d802      	bhi.n	403be0 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  403bda:	2310      	movs	r3, #16
  403bdc:	61fb      	str	r3, [r7, #28]
  403bde:	e001      	b.n	403be4 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  403be0:	2308      	movs	r3, #8
  403be2:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  403be4:	687b      	ldr	r3, [r7, #4]
  403be6:	00da      	lsls	r2, r3, #3
  403be8:	69fb      	ldr	r3, [r7, #28]
  403bea:	68b9      	ldr	r1, [r7, #8]
  403bec:	fb01 f303 	mul.w	r3, r1, r3
  403bf0:	085b      	lsrs	r3, r3, #1
  403bf2:	441a      	add	r2, r3
  403bf4:	69fb      	ldr	r3, [r7, #28]
  403bf6:	68b9      	ldr	r1, [r7, #8]
  403bf8:	fb01 f303 	mul.w	r3, r1, r3
  403bfc:	fbb2 f3f3 	udiv	r3, r2, r3
  403c00:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  403c02:	69bb      	ldr	r3, [r7, #24]
  403c04:	08db      	lsrs	r3, r3, #3
  403c06:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  403c08:	69bb      	ldr	r3, [r7, #24]
  403c0a:	f003 0307 	and.w	r3, r3, #7
  403c0e:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  403c10:	697b      	ldr	r3, [r7, #20]
  403c12:	2b00      	cmp	r3, #0
  403c14:	d003      	beq.n	403c1e <usart_set_async_baudrate+0x5a>
  403c16:	697b      	ldr	r3, [r7, #20]
  403c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  403c1c:	d301      	bcc.n	403c22 <usart_set_async_baudrate+0x5e>
		return 1;
  403c1e:	2301      	movs	r3, #1
  403c20:	e00f      	b.n	403c42 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  403c22:	69fb      	ldr	r3, [r7, #28]
  403c24:	2b08      	cmp	r3, #8
  403c26:	d105      	bne.n	403c34 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  403c28:	68fb      	ldr	r3, [r7, #12]
  403c2a:	685b      	ldr	r3, [r3, #4]
  403c2c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  403c30:	68fb      	ldr	r3, [r7, #12]
  403c32:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  403c34:	693b      	ldr	r3, [r7, #16]
  403c36:	041a      	lsls	r2, r3, #16
  403c38:	697b      	ldr	r3, [r7, #20]
  403c3a:	431a      	orrs	r2, r3
  403c3c:	68fb      	ldr	r3, [r7, #12]
  403c3e:	621a      	str	r2, [r3, #32]

	return 0;
  403c40:	2300      	movs	r3, #0
}
  403c42:	4618      	mov	r0, r3
  403c44:	3724      	adds	r7, #36	; 0x24
  403c46:	46bd      	mov	sp, r7
  403c48:	bc80      	pop	{r7}
  403c4a:	4770      	bx	lr

00403c4c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  403c4c:	b580      	push	{r7, lr}
  403c4e:	b082      	sub	sp, #8
  403c50:	af00      	add	r7, sp, #0
  403c52:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  403c54:	6878      	ldr	r0, [r7, #4]
  403c56:	4b0f      	ldr	r3, [pc, #60]	; (403c94 <usart_reset+0x48>)
  403c58:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  403c5a:	687b      	ldr	r3, [r7, #4]
  403c5c:	2200      	movs	r2, #0
  403c5e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  403c60:	687b      	ldr	r3, [r7, #4]
  403c62:	2200      	movs	r2, #0
  403c64:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  403c66:	687b      	ldr	r3, [r7, #4]
  403c68:	2200      	movs	r2, #0
  403c6a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  403c6c:	6878      	ldr	r0, [r7, #4]
  403c6e:	4b0a      	ldr	r3, [pc, #40]	; (403c98 <usart_reset+0x4c>)
  403c70:	4798      	blx	r3
	usart_reset_rx(p_usart);
  403c72:	6878      	ldr	r0, [r7, #4]
  403c74:	4b09      	ldr	r3, [pc, #36]	; (403c9c <usart_reset+0x50>)
  403c76:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  403c78:	6878      	ldr	r0, [r7, #4]
  403c7a:	4b09      	ldr	r3, [pc, #36]	; (403ca0 <usart_reset+0x54>)
  403c7c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  403c7e:	6878      	ldr	r0, [r7, #4]
  403c80:	4b08      	ldr	r3, [pc, #32]	; (403ca4 <usart_reset+0x58>)
  403c82:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  403c84:	6878      	ldr	r0, [r7, #4]
  403c86:	4b08      	ldr	r3, [pc, #32]	; (403ca8 <usart_reset+0x5c>)
  403c88:	4798      	blx	r3
#endif
}
  403c8a:	bf00      	nop
  403c8c:	3708      	adds	r7, #8
  403c8e:	46bd      	mov	sp, r7
  403c90:	bd80      	pop	{r7, pc}
  403c92:	bf00      	nop
  403c94:	00403f21 	.word	0x00403f21
  403c98:	00403da1 	.word	0x00403da1
  403c9c:	00403de9 	.word	0x00403de9
  403ca0:	00403e69 	.word	0x00403e69
  403ca4:	00403ebd 	.word	0x00403ebd
  403ca8:	00403ea1 	.word	0x00403ea1

00403cac <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  403cac:	b580      	push	{r7, lr}
  403cae:	b084      	sub	sp, #16
  403cb0:	af00      	add	r7, sp, #0
  403cb2:	60f8      	str	r0, [r7, #12]
  403cb4:	60b9      	str	r1, [r7, #8]
  403cb6:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  403cb8:	68f8      	ldr	r0, [r7, #12]
  403cba:	4b1a      	ldr	r3, [pc, #104]	; (403d24 <usart_init_rs232+0x78>)
  403cbc:	4798      	blx	r3

	ul_reg_val = 0;
  403cbe:	4b1a      	ldr	r3, [pc, #104]	; (403d28 <usart_init_rs232+0x7c>)
  403cc0:	2200      	movs	r2, #0
  403cc2:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  403cc4:	68bb      	ldr	r3, [r7, #8]
  403cc6:	2b00      	cmp	r3, #0
  403cc8:	d009      	beq.n	403cde <usart_init_rs232+0x32>
  403cca:	68bb      	ldr	r3, [r7, #8]
  403ccc:	681b      	ldr	r3, [r3, #0]
  403cce:	687a      	ldr	r2, [r7, #4]
  403cd0:	4619      	mov	r1, r3
  403cd2:	68f8      	ldr	r0, [r7, #12]
  403cd4:	4b15      	ldr	r3, [pc, #84]	; (403d2c <usart_init_rs232+0x80>)
  403cd6:	4798      	blx	r3
  403cd8:	4603      	mov	r3, r0
  403cda:	2b00      	cmp	r3, #0
  403cdc:	d001      	beq.n	403ce2 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  403cde:	2301      	movs	r3, #1
  403ce0:	e01b      	b.n	403d1a <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  403ce2:	68bb      	ldr	r3, [r7, #8]
  403ce4:	685a      	ldr	r2, [r3, #4]
  403ce6:	68bb      	ldr	r3, [r7, #8]
  403ce8:	689b      	ldr	r3, [r3, #8]
  403cea:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  403cec:	68bb      	ldr	r3, [r7, #8]
  403cee:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  403cf0:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  403cf2:	68bb      	ldr	r3, [r7, #8]
  403cf4:	68db      	ldr	r3, [r3, #12]
  403cf6:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  403cf8:	4b0b      	ldr	r3, [pc, #44]	; (403d28 <usart_init_rs232+0x7c>)
  403cfa:	681b      	ldr	r3, [r3, #0]
  403cfc:	4313      	orrs	r3, r2
  403cfe:	4a0a      	ldr	r2, [pc, #40]	; (403d28 <usart_init_rs232+0x7c>)
  403d00:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  403d02:	4b09      	ldr	r3, [pc, #36]	; (403d28 <usart_init_rs232+0x7c>)
  403d04:	681b      	ldr	r3, [r3, #0]
  403d06:	4a08      	ldr	r2, [pc, #32]	; (403d28 <usart_init_rs232+0x7c>)
  403d08:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  403d0a:	68fb      	ldr	r3, [r7, #12]
  403d0c:	685a      	ldr	r2, [r3, #4]
  403d0e:	4b06      	ldr	r3, [pc, #24]	; (403d28 <usart_init_rs232+0x7c>)
  403d10:	681b      	ldr	r3, [r3, #0]
  403d12:	431a      	orrs	r2, r3
  403d14:	68fb      	ldr	r3, [r7, #12]
  403d16:	605a      	str	r2, [r3, #4]

	return 0;
  403d18:	2300      	movs	r3, #0
}
  403d1a:	4618      	mov	r0, r3
  403d1c:	3710      	adds	r7, #16
  403d1e:	46bd      	mov	sp, r7
  403d20:	bd80      	pop	{r7, pc}
  403d22:	bf00      	nop
  403d24:	00403c4d 	.word	0x00403c4d
  403d28:	20000568 	.word	0x20000568
  403d2c:	00403bc5 	.word	0x00403bc5

00403d30 <usart_init_rs485>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs485(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  403d30:	b580      	push	{r7, lr}
  403d32:	b084      	sub	sp, #16
  403d34:	af00      	add	r7, sp, #0
  403d36:	60f8      	str	r0, [r7, #12]
  403d38:	60b9      	str	r1, [r7, #8]
  403d3a:	607a      	str	r2, [r7, #4]
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  403d3c:	687a      	ldr	r2, [r7, #4]
  403d3e:	68b9      	ldr	r1, [r7, #8]
  403d40:	68f8      	ldr	r0, [r7, #12]
  403d42:	4b0a      	ldr	r3, [pc, #40]	; (403d6c <usart_init_rs485+0x3c>)
  403d44:	4798      	blx	r3
  403d46:	4603      	mov	r3, r0
  403d48:	2b00      	cmp	r3, #0
  403d4a:	d001      	beq.n	403d50 <usart_init_rs485+0x20>
		return 1;
  403d4c:	2301      	movs	r3, #1
  403d4e:	e008      	b.n	403d62 <usart_init_rs485+0x32>
	}

	/* Set RS485 mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  403d50:	68fb      	ldr	r3, [r7, #12]
  403d52:	685b      	ldr	r3, [r3, #4]
  403d54:	f023 030f 	bic.w	r3, r3, #15
  403d58:	f043 0201 	orr.w	r2, r3, #1
  403d5c:	68fb      	ldr	r3, [r7, #12]
  403d5e:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_RS485;

	return 0;
  403d60:	2300      	movs	r3, #0
}
  403d62:	4618      	mov	r0, r3
  403d64:	3710      	adds	r7, #16
  403d66:	46bd      	mov	sp, r7
  403d68:	bd80      	pop	{r7, pc}
  403d6a:	bf00      	nop
  403d6c:	00403cad 	.word	0x00403cad

00403d70 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  403d70:	b480      	push	{r7}
  403d72:	b083      	sub	sp, #12
  403d74:	af00      	add	r7, sp, #0
  403d76:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  403d78:	687b      	ldr	r3, [r7, #4]
  403d7a:	2240      	movs	r2, #64	; 0x40
  403d7c:	601a      	str	r2, [r3, #0]
}
  403d7e:	bf00      	nop
  403d80:	370c      	adds	r7, #12
  403d82:	46bd      	mov	sp, r7
  403d84:	bc80      	pop	{r7}
  403d86:	4770      	bx	lr

00403d88 <usart_disable_tx>:
 * \brief Disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
  403d88:	b480      	push	{r7}
  403d8a:	b083      	sub	sp, #12
  403d8c:	af00      	add	r7, sp, #0
  403d8e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXDIS;
  403d90:	687b      	ldr	r3, [r7, #4]
  403d92:	2280      	movs	r2, #128	; 0x80
  403d94:	601a      	str	r2, [r3, #0]
}
  403d96:	bf00      	nop
  403d98:	370c      	adds	r7, #12
  403d9a:	46bd      	mov	sp, r7
  403d9c:	bc80      	pop	{r7}
  403d9e:	4770      	bx	lr

00403da0 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  403da0:	b480      	push	{r7}
  403da2:	b083      	sub	sp, #12
  403da4:	af00      	add	r7, sp, #0
  403da6:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  403da8:	687b      	ldr	r3, [r7, #4]
  403daa:	2288      	movs	r2, #136	; 0x88
  403dac:	601a      	str	r2, [r3, #0]
}
  403dae:	bf00      	nop
  403db0:	370c      	adds	r7, #12
  403db2:	46bd      	mov	sp, r7
  403db4:	bc80      	pop	{r7}
  403db6:	4770      	bx	lr

00403db8 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  403db8:	b480      	push	{r7}
  403dba:	b083      	sub	sp, #12
  403dbc:	af00      	add	r7, sp, #0
  403dbe:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  403dc0:	687b      	ldr	r3, [r7, #4]
  403dc2:	2210      	movs	r2, #16
  403dc4:	601a      	str	r2, [r3, #0]
}
  403dc6:	bf00      	nop
  403dc8:	370c      	adds	r7, #12
  403dca:	46bd      	mov	sp, r7
  403dcc:	bc80      	pop	{r7}
  403dce:	4770      	bx	lr

00403dd0 <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
  403dd0:	b480      	push	{r7}
  403dd2:	b083      	sub	sp, #12
  403dd4:	af00      	add	r7, sp, #0
  403dd6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
  403dd8:	687b      	ldr	r3, [r7, #4]
  403dda:	2220      	movs	r2, #32
  403ddc:	601a      	str	r2, [r3, #0]
}
  403dde:	bf00      	nop
  403de0:	370c      	adds	r7, #12
  403de2:	46bd      	mov	sp, r7
  403de4:	bc80      	pop	{r7}
  403de6:	4770      	bx	lr

00403de8 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  403de8:	b480      	push	{r7}
  403dea:	b083      	sub	sp, #12
  403dec:	af00      	add	r7, sp, #0
  403dee:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  403df0:	687b      	ldr	r3, [r7, #4]
  403df2:	2224      	movs	r2, #36	; 0x24
  403df4:	601a      	str	r2, [r3, #0]
}
  403df6:	bf00      	nop
  403df8:	370c      	adds	r7, #12
  403dfa:	46bd      	mov	sp, r7
  403dfc:	bc80      	pop	{r7}
  403dfe:	4770      	bx	lr

00403e00 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  403e00:	b480      	push	{r7}
  403e02:	b083      	sub	sp, #12
  403e04:	af00      	add	r7, sp, #0
  403e06:	6078      	str	r0, [r7, #4]
  403e08:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  403e0a:	687b      	ldr	r3, [r7, #4]
  403e0c:	683a      	ldr	r2, [r7, #0]
  403e0e:	609a      	str	r2, [r3, #8]
}
  403e10:	bf00      	nop
  403e12:	370c      	adds	r7, #12
  403e14:	46bd      	mov	sp, r7
  403e16:	bc80      	pop	{r7}
  403e18:	4770      	bx	lr
  403e1a:	bf00      	nop

00403e1c <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  403e1c:	b480      	push	{r7}
  403e1e:	b083      	sub	sp, #12
  403e20:	af00      	add	r7, sp, #0
  403e22:	6078      	str	r0, [r7, #4]
  403e24:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  403e26:	687b      	ldr	r3, [r7, #4]
  403e28:	683a      	ldr	r2, [r7, #0]
  403e2a:	60da      	str	r2, [r3, #12]
}
  403e2c:	bf00      	nop
  403e2e:	370c      	adds	r7, #12
  403e30:	46bd      	mov	sp, r7
  403e32:	bc80      	pop	{r7}
  403e34:	4770      	bx	lr
  403e36:	bf00      	nop

00403e38 <usart_get_interrupt_mask>:
 * \param p_usart Pointer to a USART peripheral.
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
  403e38:	b480      	push	{r7}
  403e3a:	b083      	sub	sp, #12
  403e3c:	af00      	add	r7, sp, #0
  403e3e:	6078      	str	r0, [r7, #4]
	return p_usart->US_IMR;
  403e40:	687b      	ldr	r3, [r7, #4]
  403e42:	691b      	ldr	r3, [r3, #16]
}
  403e44:	4618      	mov	r0, r3
  403e46:	370c      	adds	r7, #12
  403e48:	46bd      	mov	sp, r7
  403e4a:	bc80      	pop	{r7}
  403e4c:	4770      	bx	lr
  403e4e:	bf00      	nop

00403e50 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  403e50:	b480      	push	{r7}
  403e52:	b083      	sub	sp, #12
  403e54:	af00      	add	r7, sp, #0
  403e56:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  403e58:	687b      	ldr	r3, [r7, #4]
  403e5a:	695b      	ldr	r3, [r3, #20]
}
  403e5c:	4618      	mov	r0, r3
  403e5e:	370c      	adds	r7, #12
  403e60:	46bd      	mov	sp, r7
  403e62:	bc80      	pop	{r7}
  403e64:	4770      	bx	lr
  403e66:	bf00      	nop

00403e68 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  403e68:	b480      	push	{r7}
  403e6a:	b083      	sub	sp, #12
  403e6c:	af00      	add	r7, sp, #0
  403e6e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  403e70:	687b      	ldr	r3, [r7, #4]
  403e72:	f44f 7280 	mov.w	r2, #256	; 0x100
  403e76:	601a      	str	r2, [r3, #0]
}
  403e78:	bf00      	nop
  403e7a:	370c      	adds	r7, #12
  403e7c:	46bd      	mov	sp, r7
  403e7e:	bc80      	pop	{r7}
  403e80:	4770      	bx	lr
  403e82:	bf00      	nop

00403e84 <usart_start_rx_timeout>:
 * Reset the status bit TIMEOUT in US_CSR.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_start_rx_timeout(Usart *p_usart)
{
  403e84:	b480      	push	{r7}
  403e86:	b083      	sub	sp, #12
  403e88:	af00      	add	r7, sp, #0
  403e8a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_STTTO;
  403e8c:	687b      	ldr	r3, [r7, #4]
  403e8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  403e92:	601a      	str	r2, [r3, #0]
}
  403e94:	bf00      	nop
  403e96:	370c      	adds	r7, #12
  403e98:	46bd      	mov	sp, r7
  403e9a:	bc80      	pop	{r7}
  403e9c:	4770      	bx	lr
  403e9e:	bf00      	nop

00403ea0 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  403ea0:	b480      	push	{r7}
  403ea2:	b083      	sub	sp, #12
  403ea4:	af00      	add	r7, sp, #0
  403ea6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  403ea8:	687b      	ldr	r3, [r7, #4]
  403eaa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  403eae:	601a      	str	r2, [r3, #0]
}
  403eb0:	bf00      	nop
  403eb2:	370c      	adds	r7, #12
  403eb4:	46bd      	mov	sp, r7
  403eb6:	bc80      	pop	{r7}
  403eb8:	4770      	bx	lr
  403eba:	bf00      	nop

00403ebc <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  403ebc:	b480      	push	{r7}
  403ebe:	b083      	sub	sp, #12
  403ec0:	af00      	add	r7, sp, #0
  403ec2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  403ec4:	687b      	ldr	r3, [r7, #4]
  403ec6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  403eca:	601a      	str	r2, [r3, #0]
}
  403ecc:	bf00      	nop
  403ece:	370c      	adds	r7, #12
  403ed0:	46bd      	mov	sp, r7
  403ed2:	bc80      	pop	{r7}
  403ed4:	4770      	bx	lr
  403ed6:	bf00      	nop

00403ed8 <usart_get_pdc_base>:
 * \param p_usart Pointer to a UART instance.
 *
 * \return USART PDC registers base for PDC driver to access.
 */
Pdc *usart_get_pdc_base(Usart *p_usart)
{
  403ed8:	b480      	push	{r7}
  403eda:	b085      	sub	sp, #20
  403edc:	af00      	add	r7, sp, #0
  403ede:	6078      	str	r0, [r7, #4]
	Pdc *p_pdc_base;

	p_pdc_base = (Pdc *)NULL;
  403ee0:	2300      	movs	r3, #0
  403ee2:	60fb      	str	r3, [r7, #12]
		p_pdc_base = PDC_USART;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
  403ee4:	687b      	ldr	r3, [r7, #4]
  403ee6:	4a0a      	ldr	r2, [pc, #40]	; (403f10 <usart_get_pdc_base+0x38>)
  403ee8:	4293      	cmp	r3, r2
  403eea:	d103      	bne.n	403ef4 <usart_get_pdc_base+0x1c>
		p_pdc_base = PDC_USART0;
  403eec:	4b09      	ldr	r3, [pc, #36]	; (403f14 <usart_get_pdc_base+0x3c>)
  403eee:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  403ef0:	68fb      	ldr	r3, [r7, #12]
  403ef2:	e008      	b.n	403f06 <usart_get_pdc_base+0x2e>
	}
#endif
#ifdef PDC_USART1
	else if (p_usart == USART1) {
  403ef4:	687b      	ldr	r3, [r7, #4]
  403ef6:	4a08      	ldr	r2, [pc, #32]	; (403f18 <usart_get_pdc_base+0x40>)
  403ef8:	4293      	cmp	r3, r2
  403efa:	d103      	bne.n	403f04 <usart_get_pdc_base+0x2c>
		p_pdc_base = PDC_USART1;
  403efc:	4b07      	ldr	r3, [pc, #28]	; (403f1c <usart_get_pdc_base+0x44>)
  403efe:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  403f00:	68fb      	ldr	r3, [r7, #12]
  403f02:	e000      	b.n	403f06 <usart_get_pdc_base+0x2e>
		p_pdc_base = PDC_USART7;
		return p_pdc_base;
	}
#endif

	return p_pdc_base;
  403f04:	68fb      	ldr	r3, [r7, #12]
}
  403f06:	4618      	mov	r0, r3
  403f08:	3714      	adds	r7, #20
  403f0a:	46bd      	mov	sp, r7
  403f0c:	bc80      	pop	{r7}
  403f0e:	4770      	bx	lr
  403f10:	40024000 	.word	0x40024000
  403f14:	40024100 	.word	0x40024100
  403f18:	40028000 	.word	0x40028000
  403f1c:	40028100 	.word	0x40028100

00403f20 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  403f20:	b480      	push	{r7}
  403f22:	b083      	sub	sp, #12
  403f24:	af00      	add	r7, sp, #0
  403f26:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  403f28:	687b      	ldr	r3, [r7, #4]
  403f2a:	4a04      	ldr	r2, [pc, #16]	; (403f3c <usart_disable_writeprotect+0x1c>)
  403f2c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  403f30:	bf00      	nop
  403f32:	370c      	adds	r7, #12
  403f34:	46bd      	mov	sp, r7
  403f36:	bc80      	pop	{r7}
  403f38:	4770      	bx	lr
  403f3a:	bf00      	nop
  403f3c:	55534100 	.word	0x55534100

00403f40 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  403f40:	b480      	push	{r7}
  403f42:	b083      	sub	sp, #12
  403f44:	af00      	add	r7, sp, #0
  403f46:	4603      	mov	r3, r0
  403f48:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403f4a:	4908      	ldr	r1, [pc, #32]	; (403f6c <NVIC_EnableIRQ+0x2c>)
  403f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403f50:	095b      	lsrs	r3, r3, #5
  403f52:	79fa      	ldrb	r2, [r7, #7]
  403f54:	f002 021f 	and.w	r2, r2, #31
  403f58:	2001      	movs	r0, #1
  403f5a:	fa00 f202 	lsl.w	r2, r0, r2
  403f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  403f62:	bf00      	nop
  403f64:	370c      	adds	r7, #12
  403f66:	46bd      	mov	sp, r7
  403f68:	bc80      	pop	{r7}
  403f6a:	4770      	bx	lr
  403f6c:	e000e100 	.word	0xe000e100

00403f70 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  403f70:	b580      	push	{r7, lr}
  403f72:	b082      	sub	sp, #8
  403f74:	af00      	add	r7, sp, #0
  403f76:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  403f78:	6878      	ldr	r0, [r7, #4]
  403f7a:	4b03      	ldr	r3, [pc, #12]	; (403f88 <sysclk_enable_peripheral_clock+0x18>)
  403f7c:	4798      	blx	r3
}
  403f7e:	bf00      	nop
  403f80:	3708      	adds	r7, #8
  403f82:	46bd      	mov	sp, r7
  403f84:	bd80      	pop	{r7, pc}
  403f86:	bf00      	nop
  403f88:	00404f99 	.word	0x00404f99

00403f8c <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  403f8c:	b580      	push	{r7, lr}
  403f8e:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  403f90:	200b      	movs	r0, #11
  403f92:	4b03      	ldr	r3, [pc, #12]	; (403fa0 <ioport_init+0x14>)
  403f94:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  403f96:	200c      	movs	r0, #12
  403f98:	4b01      	ldr	r3, [pc, #4]	; (403fa0 <ioport_init+0x14>)
  403f9a:	4798      	blx	r3
	arch_ioport_init();
}
  403f9c:	bf00      	nop
  403f9e:	bd80      	pop	{r7, pc}
  403fa0:	00403f71 	.word	0x00403f71

00403fa4 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  403fa4:	b590      	push	{r4, r7, lr}
  403fa6:	b083      	sub	sp, #12
  403fa8:	af02      	add	r7, sp, #8
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */

	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  403faa:	4b2d      	ldr	r3, [pc, #180]	; (404060 <board_init+0xbc>)
  403fac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  403fb0:	605a      	str	r2, [r3, #4]

	/* Init IO Port service to enable configuring pins */
	ioport_init();
  403fb2:	4b2c      	ldr	r3, [pc, #176]	; (404064 <board_init+0xc0>)
  403fb4:	4798      	blx	r3

	/* Configure USART0 Pins (RS485, MODBUS) */
	gpio_configure_group(PINS_USART0_PIO, PINS_USART0, PINS_USART0_FLAGS);
  403fb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  403fba:	2160      	movs	r1, #96	; 0x60
  403fbc:	482a      	ldr	r0, [pc, #168]	; (404068 <board_init+0xc4>)
  403fbe:	4b2b      	ldr	r3, [pc, #172]	; (40406c <board_init+0xc8>)
  403fc0:	4798      	blx	r3

	/* Configure USART1 Pins (XBee) */
	gpio_configure_group(PINS_USART1_PIO, PINS_USART1, PINS_USART1_FLAGS);
  403fc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  403fc6:	f04f 71b0 	mov.w	r1, #23068672	; 0x1600000
  403fca:	4827      	ldr	r0, [pc, #156]	; (404068 <board_init+0xc4>)
  403fcc:	4b27      	ldr	r3, [pc, #156]	; (40406c <board_init+0xc8>)
  403fce:	4798      	blx	r3

	/* Configure UART0 Pins (Console) */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  403fd0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  403fd4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  403fd8:	4823      	ldr	r0, [pc, #140]	; (404068 <board_init+0xc4>)
  403fda:	4b24      	ldr	r3, [pc, #144]	; (40406c <board_init+0xc8>)
  403fdc:	4798      	blx	r3
	
	/* Configure TWI0 Pins */
	gpio_configure_group(PINS_TWI0_PIO, PINS_TWI0, PINS_TWI0_FLAGS);
  403fde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  403fe2:	2118      	movs	r1, #24
  403fe4:	4820      	ldr	r0, [pc, #128]	; (404068 <board_init+0xc4>)
  403fe6:	4b21      	ldr	r3, [pc, #132]	; (40406c <board_init+0xc8>)
  403fe8:	4798      	blx	r3

	/* Configure Motor Controller Pins */
	#ifndef MOTOR_CTRL_A4955
	#else
		gpio_configure_pin(PIN_MOTOR_IN1_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  403fea:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403fee:	2020      	movs	r0, #32
  403ff0:	4b1f      	ldr	r3, [pc, #124]	; (404070 <board_init+0xcc>)
  403ff2:	4798      	blx	r3
		gpio_configure_pin(PIN_MOTOR_IN2_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  403ff4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403ff8:	2021      	movs	r0, #33	; 0x21
  403ffa:	4b1d      	ldr	r3, [pc, #116]	; (404070 <board_init+0xcc>)
  403ffc:	4798      	blx	r3
		gpio_configure_pin(PIN_MOTOR_SLP_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  403ffe:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  404002:	2022      	movs	r0, #34	; 0x22
  404004:	4b1a      	ldr	r3, [pc, #104]	; (404070 <board_init+0xcc>)
  404006:	4798      	blx	r3
		gpio_configure_pin(PIN_MOTOR_OCL_IDX, (PIO_INPUT | PIO_OPENDRAIN));
  404008:	491a      	ldr	r1, [pc, #104]	; (404074 <board_init+0xd0>)
  40400a:	2023      	movs	r0, #35	; 0x23
  40400c:	4b18      	ldr	r3, [pc, #96]	; (404070 <board_init+0xcc>)
  40400e:	4798      	blx	r3
	#endif

	/* Configure LED Pins */
	gpio_configure_pin(PIN_DEBUGLED_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  404010:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  404014:	2010      	movs	r0, #16
  404016:	4b16      	ldr	r3, [pc, #88]	; (404070 <board_init+0xcc>)
  404018:	4798      	blx	r3

	/* Configure LDO EN Pin */
	gpio_configure_pin(PIN_LDOEN_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  40401a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40401e:	2001      	movs	r0, #1
  404020:	4b13      	ldr	r3, [pc, #76]	; (404070 <board_init+0xcc>)
  404022:	4798      	blx	r3
	
	/* Configure RTC 1 min Interrupt Pin */
	gpio_configure_pin(PIN_RTC_INT_IDX, PIO_INPUT);
  404024:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  404028:	2000      	movs	r0, #0
  40402a:	4b11      	ldr	r3, [pc, #68]	; (404070 <board_init+0xcc>)
  40402c:	4798      	blx	r3

	/* Initialize PIOs interrupt handlers (see PIO definition in board.h). */
	pio_handler_set(PIN_RTC_INT_PIO, PIN_RTC_INT_PIO_ID, PIN_RTC_INT_MASK, (PIO_OPENDRAIN | PIO_IT_FALL_EDGE), RTCIntHandler);
  40402e:	4b12      	ldr	r3, [pc, #72]	; (404078 <board_init+0xd4>)
  404030:	9300      	str	r3, [sp, #0]
  404032:	2354      	movs	r3, #84	; 0x54
  404034:	2201      	movs	r2, #1
  404036:	210b      	movs	r1, #11
  404038:	480b      	ldr	r0, [pc, #44]	; (404068 <board_init+0xc4>)
  40403a:	4c10      	ldr	r4, [pc, #64]	; (40407c <board_init+0xd8>)
  40403c:	47a0      	blx	r4

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type) PIN_RTC_INT_PIO_ID);
  40403e:	200b      	movs	r0, #11
  404040:	4b0f      	ldr	r3, [pc, #60]	; (404080 <board_init+0xdc>)
  404042:	4798      	blx	r3

	/* Set RTC Int Priority */
	pio_handler_set_priority(PIN_RTC_INT_PIO, (IRQn_Type) PIN_RTC_INT_PIO_ID, configLIBRARY_LOWEST_INTERRUPT_PRIORITY);
  404044:	220f      	movs	r2, #15
  404046:	210b      	movs	r1, #11
  404048:	4807      	ldr	r0, [pc, #28]	; (404068 <board_init+0xc4>)
  40404a:	4b0e      	ldr	r3, [pc, #56]	; (404084 <board_init+0xe0>)
  40404c:	4798      	blx	r3
	
	/* Enable PIO line interrupts. */
	pio_enable_interrupt(PIN_RTC_INT_PIO, PIN_RTC_INT_MASK);
  40404e:	2101      	movs	r1, #1
  404050:	4805      	ldr	r0, [pc, #20]	; (404068 <board_init+0xc4>)
  404052:	4b0d      	ldr	r3, [pc, #52]	; (404088 <board_init+0xe4>)
  404054:	4798      	blx	r3
}
  404056:	bf00      	nop
  404058:	3704      	adds	r7, #4
  40405a:	46bd      	mov	sp, r7
  40405c:	bd90      	pop	{r4, r7, pc}
  40405e:	bf00      	nop
  404060:	400e1450 	.word	0x400e1450
  404064:	00403f8d 	.word	0x00403f8d
  404068:	400e0e00 	.word	0x400e0e00
  40406c:	004048e9 	.word	0x004048e9
  404070:	00404739 	.word	0x00404739
  404074:	28000004 	.word	0x28000004
  404078:	00400d01 	.word	0x00400d01
  40407c:	00404bf9 	.word	0x00404bf9
  404080:	00403f41 	.word	0x00403f41
  404084:	00404cc9 	.word	0x00404cc9
  404088:	00404671 	.word	0x00404671

0040408c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40408c:	b580      	push	{r7, lr}
  40408e:	b082      	sub	sp, #8
  404090:	af00      	add	r7, sp, #0
  404092:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  404094:	687b      	ldr	r3, [r7, #4]
  404096:	2b07      	cmp	r3, #7
  404098:	d831      	bhi.n	4040fe <osc_enable+0x72>
  40409a:	a201      	add	r2, pc, #4	; (adr r2, 4040a0 <osc_enable+0x14>)
  40409c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4040a0:	004040fd 	.word	0x004040fd
  4040a4:	004040c1 	.word	0x004040c1
  4040a8:	004040c9 	.word	0x004040c9
  4040ac:	004040d1 	.word	0x004040d1
  4040b0:	004040d9 	.word	0x004040d9
  4040b4:	004040e1 	.word	0x004040e1
  4040b8:	004040e9 	.word	0x004040e9
  4040bc:	004040f3 	.word	0x004040f3
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4040c0:	2000      	movs	r0, #0
  4040c2:	4b11      	ldr	r3, [pc, #68]	; (404108 <osc_enable+0x7c>)
  4040c4:	4798      	blx	r3
		break;
  4040c6:	e01a      	b.n	4040fe <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4040c8:	2001      	movs	r0, #1
  4040ca:	4b0f      	ldr	r3, [pc, #60]	; (404108 <osc_enable+0x7c>)
  4040cc:	4798      	blx	r3
		break;
  4040ce:	e016      	b.n	4040fe <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4040d0:	2000      	movs	r0, #0
  4040d2:	4b0e      	ldr	r3, [pc, #56]	; (40410c <osc_enable+0x80>)
  4040d4:	4798      	blx	r3
		break;
  4040d6:	e012      	b.n	4040fe <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4040d8:	2010      	movs	r0, #16
  4040da:	4b0c      	ldr	r3, [pc, #48]	; (40410c <osc_enable+0x80>)
  4040dc:	4798      	blx	r3
		break;
  4040de:	e00e      	b.n	4040fe <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4040e0:	2020      	movs	r0, #32
  4040e2:	4b0a      	ldr	r3, [pc, #40]	; (40410c <osc_enable+0x80>)
  4040e4:	4798      	blx	r3
		break;
  4040e6:	e00a      	b.n	4040fe <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4040e8:	213e      	movs	r1, #62	; 0x3e
  4040ea:	2000      	movs	r0, #0
  4040ec:	4b08      	ldr	r3, [pc, #32]	; (404110 <osc_enable+0x84>)
  4040ee:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  4040f0:	e005      	b.n	4040fe <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  4040f2:	213e      	movs	r1, #62	; 0x3e
  4040f4:	2001      	movs	r0, #1
  4040f6:	4b06      	ldr	r3, [pc, #24]	; (404110 <osc_enable+0x84>)
  4040f8:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  4040fa:	e000      	b.n	4040fe <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  4040fc:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  4040fe:	bf00      	nop
  404100:	3708      	adds	r7, #8
  404102:	46bd      	mov	sp, r7
  404104:	bd80      	pop	{r7, pc}
  404106:	bf00      	nop
  404108:	00404dcd 	.word	0x00404dcd
  40410c:	00404e39 	.word	0x00404e39
  404110:	00404ea9 	.word	0x00404ea9

00404114 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  404114:	b580      	push	{r7, lr}
  404116:	b082      	sub	sp, #8
  404118:	af00      	add	r7, sp, #0
  40411a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40411c:	687b      	ldr	r3, [r7, #4]
  40411e:	2b07      	cmp	r3, #7
  404120:	d826      	bhi.n	404170 <osc_is_ready+0x5c>
  404122:	a201      	add	r2, pc, #4	; (adr r2, 404128 <osc_is_ready+0x14>)
  404124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404128:	00404149 	.word	0x00404149
  40412c:	0040414d 	.word	0x0040414d
  404130:	0040414d 	.word	0x0040414d
  404134:	0040415f 	.word	0x0040415f
  404138:	0040415f 	.word	0x0040415f
  40413c:	0040415f 	.word	0x0040415f
  404140:	0040415f 	.word	0x0040415f
  404144:	0040415f 	.word	0x0040415f
	case OSC_SLCK_32K_RC:
		return 1;
  404148:	2301      	movs	r3, #1
  40414a:	e012      	b.n	404172 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40414c:	4b0b      	ldr	r3, [pc, #44]	; (40417c <osc_is_ready+0x68>)
  40414e:	4798      	blx	r3
  404150:	4603      	mov	r3, r0
  404152:	2b00      	cmp	r3, #0
  404154:	bf14      	ite	ne
  404156:	2301      	movne	r3, #1
  404158:	2300      	moveq	r3, #0
  40415a:	b2db      	uxtb	r3, r3
  40415c:	e009      	b.n	404172 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40415e:	4b08      	ldr	r3, [pc, #32]	; (404180 <osc_is_ready+0x6c>)
  404160:	4798      	blx	r3
  404162:	4603      	mov	r3, r0
  404164:	2b00      	cmp	r3, #0
  404166:	bf14      	ite	ne
  404168:	2301      	movne	r3, #1
  40416a:	2300      	moveq	r3, #0
  40416c:	b2db      	uxtb	r3, r3
  40416e:	e000      	b.n	404172 <osc_is_ready+0x5e>
	}

	return 0;
  404170:	2300      	movs	r3, #0
}
  404172:	4618      	mov	r0, r3
  404174:	3708      	adds	r7, #8
  404176:	46bd      	mov	sp, r7
  404178:	bd80      	pop	{r7, pc}
  40417a:	bf00      	nop
  40417c:	00404e05 	.word	0x00404e05
  404180:	00404f21 	.word	0x00404f21

00404184 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  404184:	b480      	push	{r7}
  404186:	b083      	sub	sp, #12
  404188:	af00      	add	r7, sp, #0
  40418a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40418c:	687b      	ldr	r3, [r7, #4]
  40418e:	2b07      	cmp	r3, #7
  404190:	d825      	bhi.n	4041de <osc_get_rate+0x5a>
  404192:	a201      	add	r2, pc, #4	; (adr r2, 404198 <osc_get_rate+0x14>)
  404194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404198:	004041b9 	.word	0x004041b9
  40419c:	004041bf 	.word	0x004041bf
  4041a0:	004041c5 	.word	0x004041c5
  4041a4:	004041cb 	.word	0x004041cb
  4041a8:	004041cf 	.word	0x004041cf
  4041ac:	004041d3 	.word	0x004041d3
  4041b0:	004041d7 	.word	0x004041d7
  4041b4:	004041db 	.word	0x004041db
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4041b8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4041bc:	e010      	b.n	4041e0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4041be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4041c2:	e00d      	b.n	4041e0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4041c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4041c8:	e00a      	b.n	4041e0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4041ca:	4b08      	ldr	r3, [pc, #32]	; (4041ec <osc_get_rate+0x68>)
  4041cc:	e008      	b.n	4041e0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4041ce:	4b08      	ldr	r3, [pc, #32]	; (4041f0 <osc_get_rate+0x6c>)
  4041d0:	e006      	b.n	4041e0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4041d2:	4b08      	ldr	r3, [pc, #32]	; (4041f4 <osc_get_rate+0x70>)
  4041d4:	e004      	b.n	4041e0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4041d6:	4b07      	ldr	r3, [pc, #28]	; (4041f4 <osc_get_rate+0x70>)
  4041d8:	e002      	b.n	4041e0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4041da:	4b06      	ldr	r3, [pc, #24]	; (4041f4 <osc_get_rate+0x70>)
  4041dc:	e000      	b.n	4041e0 <osc_get_rate+0x5c>
	}

	return 0;
  4041de:	2300      	movs	r3, #0
}
  4041e0:	4618      	mov	r0, r3
  4041e2:	370c      	adds	r7, #12
  4041e4:	46bd      	mov	sp, r7
  4041e6:	bc80      	pop	{r7}
  4041e8:	4770      	bx	lr
  4041ea:	bf00      	nop
  4041ec:	003d0900 	.word	0x003d0900
  4041f0:	007a1200 	.word	0x007a1200
  4041f4:	00b71b00 	.word	0x00b71b00

004041f8 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  4041f8:	b580      	push	{r7, lr}
  4041fa:	b082      	sub	sp, #8
  4041fc:	af00      	add	r7, sp, #0
  4041fe:	4603      	mov	r3, r0
  404200:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  404202:	bf00      	nop
  404204:	79fb      	ldrb	r3, [r7, #7]
  404206:	4618      	mov	r0, r3
  404208:	4b05      	ldr	r3, [pc, #20]	; (404220 <osc_wait_ready+0x28>)
  40420a:	4798      	blx	r3
  40420c:	4603      	mov	r3, r0
  40420e:	f083 0301 	eor.w	r3, r3, #1
  404212:	b2db      	uxtb	r3, r3
  404214:	2b00      	cmp	r3, #0
  404216:	d1f5      	bne.n	404204 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  404218:	bf00      	nop
  40421a:	3708      	adds	r7, #8
  40421c:	46bd      	mov	sp, r7
  40421e:	bd80      	pop	{r7, pc}
  404220:	00404115 	.word	0x00404115

00404224 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  404224:	b580      	push	{r7, lr}
  404226:	b086      	sub	sp, #24
  404228:	af00      	add	r7, sp, #0
  40422a:	60f8      	str	r0, [r7, #12]
  40422c:	607a      	str	r2, [r7, #4]
  40422e:	603b      	str	r3, [r7, #0]
  404230:	460b      	mov	r3, r1
  404232:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  404234:	7afb      	ldrb	r3, [r7, #11]
  404236:	4618      	mov	r0, r3
  404238:	4b0d      	ldr	r3, [pc, #52]	; (404270 <pll_config_init+0x4c>)
  40423a:	4798      	blx	r3
  40423c:	4602      	mov	r2, r0
  40423e:	687b      	ldr	r3, [r7, #4]
  404240:	fbb2 f3f3 	udiv	r3, r2, r3
  404244:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  404246:	697b      	ldr	r3, [r7, #20]
  404248:	683a      	ldr	r2, [r7, #0]
  40424a:	fb02 f303 	mul.w	r3, r2, r3
  40424e:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  404250:	683b      	ldr	r3, [r7, #0]
  404252:	3b01      	subs	r3, #1
  404254:	041a      	lsls	r2, r3, #16
  404256:	4b07      	ldr	r3, [pc, #28]	; (404274 <pll_config_init+0x50>)
  404258:	4013      	ands	r3, r2
  40425a:	687a      	ldr	r2, [r7, #4]
  40425c:	b2d2      	uxtb	r2, r2
  40425e:	4313      	orrs	r3, r2
  404260:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  404264:	68fb      	ldr	r3, [r7, #12]
  404266:	601a      	str	r2, [r3, #0]
}
  404268:	bf00      	nop
  40426a:	3718      	adds	r7, #24
  40426c:	46bd      	mov	sp, r7
  40426e:	bd80      	pop	{r7, pc}
  404270:	00404185 	.word	0x00404185
  404274:	07ff0000 	.word	0x07ff0000

00404278 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  404278:	b580      	push	{r7, lr}
  40427a:	b082      	sub	sp, #8
  40427c:	af00      	add	r7, sp, #0
  40427e:	6078      	str	r0, [r7, #4]
  404280:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  404282:	683b      	ldr	r3, [r7, #0]
  404284:	2b00      	cmp	r3, #0
  404286:	d108      	bne.n	40429a <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  404288:	4b09      	ldr	r3, [pc, #36]	; (4042b0 <pll_enable+0x38>)
  40428a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40428c:	4a09      	ldr	r2, [pc, #36]	; (4042b4 <pll_enable+0x3c>)
  40428e:	687b      	ldr	r3, [r7, #4]
  404290:	681b      	ldr	r3, [r3, #0]
  404292:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  404296:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  404298:	e005      	b.n	4042a6 <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  40429a:	4b07      	ldr	r3, [pc, #28]	; (4042b8 <pll_enable+0x40>)
  40429c:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  40429e:	4a05      	ldr	r2, [pc, #20]	; (4042b4 <pll_enable+0x3c>)
  4042a0:	687b      	ldr	r3, [r7, #4]
  4042a2:	681b      	ldr	r3, [r3, #0]
  4042a4:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
}
  4042a6:	bf00      	nop
  4042a8:	3708      	adds	r7, #8
  4042aa:	46bd      	mov	sp, r7
  4042ac:	bd80      	pop	{r7, pc}
  4042ae:	bf00      	nop
  4042b0:	00404f39 	.word	0x00404f39
  4042b4:	400e0400 	.word	0x400e0400
  4042b8:	00404f69 	.word	0x00404f69

004042bc <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4042bc:	b580      	push	{r7, lr}
  4042be:	b082      	sub	sp, #8
  4042c0:	af00      	add	r7, sp, #0
  4042c2:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4042c4:	687b      	ldr	r3, [r7, #4]
  4042c6:	2b00      	cmp	r3, #0
  4042c8:	d103      	bne.n	4042d2 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  4042ca:	4b05      	ldr	r3, [pc, #20]	; (4042e0 <pll_is_locked+0x24>)
  4042cc:	4798      	blx	r3
  4042ce:	4603      	mov	r3, r0
  4042d0:	e002      	b.n	4042d8 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  4042d2:	4b04      	ldr	r3, [pc, #16]	; (4042e4 <pll_is_locked+0x28>)
  4042d4:	4798      	blx	r3
  4042d6:	4603      	mov	r3, r0
	}
}
  4042d8:	4618      	mov	r0, r3
  4042da:	3708      	adds	r7, #8
  4042dc:	46bd      	mov	sp, r7
  4042de:	bd80      	pop	{r7, pc}
  4042e0:	00404f51 	.word	0x00404f51
  4042e4:	00404f81 	.word	0x00404f81

004042e8 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  4042e8:	b580      	push	{r7, lr}
  4042ea:	b082      	sub	sp, #8
  4042ec:	af00      	add	r7, sp, #0
  4042ee:	4603      	mov	r3, r0
  4042f0:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  4042f2:	79fb      	ldrb	r3, [r7, #7]
  4042f4:	3b03      	subs	r3, #3
  4042f6:	2b04      	cmp	r3, #4
  4042f8:	d808      	bhi.n	40430c <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  4042fa:	79fb      	ldrb	r3, [r7, #7]
  4042fc:	4618      	mov	r0, r3
  4042fe:	4b06      	ldr	r3, [pc, #24]	; (404318 <pll_enable_source+0x30>)
  404300:	4798      	blx	r3
		osc_wait_ready(e_src);
  404302:	79fb      	ldrb	r3, [r7, #7]
  404304:	4618      	mov	r0, r3
  404306:	4b05      	ldr	r3, [pc, #20]	; (40431c <pll_enable_source+0x34>)
  404308:	4798      	blx	r3
		break;
  40430a:	e000      	b.n	40430e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  40430c:	bf00      	nop
	}
}
  40430e:	bf00      	nop
  404310:	3708      	adds	r7, #8
  404312:	46bd      	mov	sp, r7
  404314:	bd80      	pop	{r7, pc}
  404316:	bf00      	nop
  404318:	0040408d 	.word	0x0040408d
  40431c:	004041f9 	.word	0x004041f9

00404320 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  404320:	b580      	push	{r7, lr}
  404322:	b082      	sub	sp, #8
  404324:	af00      	add	r7, sp, #0
  404326:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  404328:	bf00      	nop
  40432a:	6878      	ldr	r0, [r7, #4]
  40432c:	4b04      	ldr	r3, [pc, #16]	; (404340 <pll_wait_for_lock+0x20>)
  40432e:	4798      	blx	r3
  404330:	4603      	mov	r3, r0
  404332:	2b00      	cmp	r3, #0
  404334:	d0f9      	beq.n	40432a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  404336:	2300      	movs	r3, #0
}
  404338:	4618      	mov	r0, r3
  40433a:	3708      	adds	r7, #8
  40433c:	46bd      	mov	sp, r7
  40433e:	bd80      	pop	{r7, pc}
  404340:	004042bd 	.word	0x004042bd

00404344 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  404344:	b580      	push	{r7, lr}
  404346:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  404348:	2006      	movs	r0, #6
  40434a:	4b04      	ldr	r3, [pc, #16]	; (40435c <sysclk_get_main_hz+0x18>)
  40434c:	4798      	blx	r3
  40434e:	4602      	mov	r2, r0
  404350:	4613      	mov	r3, r2
  404352:	009b      	lsls	r3, r3, #2
  404354:	4413      	add	r3, r2
  404356:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  404358:	4618      	mov	r0, r3
  40435a:	bd80      	pop	{r7, pc}
  40435c:	00404185 	.word	0x00404185

00404360 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  404360:	b580      	push	{r7, lr}
  404362:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  404364:	4b02      	ldr	r3, [pc, #8]	; (404370 <sysclk_get_cpu_hz+0x10>)
  404366:	4798      	blx	r3
  404368:	4603      	mov	r3, r0
  40436a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40436c:	4618      	mov	r0, r3
  40436e:	bd80      	pop	{r7, pc}
  404370:	00404345 	.word	0x00404345

00404374 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  404374:	b590      	push	{r4, r7, lr}
  404376:	b083      	sub	sp, #12
  404378:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40437a:	4811      	ldr	r0, [pc, #68]	; (4043c0 <sysclk_init+0x4c>)
  40437c:	4b11      	ldr	r3, [pc, #68]	; (4043c4 <sysclk_init+0x50>)
  40437e:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  404380:	2006      	movs	r0, #6
  404382:	4b11      	ldr	r3, [pc, #68]	; (4043c8 <sysclk_init+0x54>)
  404384:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  404386:	1d38      	adds	r0, r7, #4
  404388:	2314      	movs	r3, #20
  40438a:	2201      	movs	r2, #1
  40438c:	2106      	movs	r1, #6
  40438e:	4c0f      	ldr	r4, [pc, #60]	; (4043cc <sysclk_init+0x58>)
  404390:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  404392:	1d3b      	adds	r3, r7, #4
  404394:	2100      	movs	r1, #0
  404396:	4618      	mov	r0, r3
  404398:	4b0d      	ldr	r3, [pc, #52]	; (4043d0 <sysclk_init+0x5c>)
  40439a:	4798      	blx	r3
		pll_wait_for_lock(0);
  40439c:	2000      	movs	r0, #0
  40439e:	4b0d      	ldr	r3, [pc, #52]	; (4043d4 <sysclk_init+0x60>)
  4043a0:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4043a2:	2010      	movs	r0, #16
  4043a4:	4b0c      	ldr	r3, [pc, #48]	; (4043d8 <sysclk_init+0x64>)
  4043a6:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4043a8:	4b0c      	ldr	r3, [pc, #48]	; (4043dc <sysclk_init+0x68>)
  4043aa:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4043ac:	4b0c      	ldr	r3, [pc, #48]	; (4043e0 <sysclk_init+0x6c>)
  4043ae:	4798      	blx	r3
  4043b0:	4603      	mov	r3, r0
  4043b2:	4618      	mov	r0, r3
  4043b4:	4b03      	ldr	r3, [pc, #12]	; (4043c4 <sysclk_init+0x50>)
  4043b6:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4043b8:	bf00      	nop
  4043ba:	370c      	adds	r7, #12
  4043bc:	46bd      	mov	sp, r7
  4043be:	bd90      	pop	{r4, r7, pc}
  4043c0:	07270e00 	.word	0x07270e00
  4043c4:	00405285 	.word	0x00405285
  4043c8:	004042e9 	.word	0x004042e9
  4043cc:	00404225 	.word	0x00404225
  4043d0:	00404279 	.word	0x00404279
  4043d4:	00404321 	.word	0x00404321
  4043d8:	00404d4d 	.word	0x00404d4d
  4043dc:	004050e9 	.word	0x004050e9
  4043e0:	00404361 	.word	0x00404361

004043e4 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  4043e4:	b480      	push	{r7}
  4043e6:	b085      	sub	sp, #20
  4043e8:	af00      	add	r7, sp, #0
  4043ea:	60f8      	str	r0, [r7, #12]
  4043ec:	60b9      	str	r1, [r7, #8]
  4043ee:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4043f0:	687b      	ldr	r3, [r7, #4]
  4043f2:	2b00      	cmp	r3, #0
  4043f4:	d003      	beq.n	4043fe <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  4043f6:	68fb      	ldr	r3, [r7, #12]
  4043f8:	68ba      	ldr	r2, [r7, #8]
  4043fa:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  4043fc:	e002      	b.n	404404 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4043fe:	68fb      	ldr	r3, [r7, #12]
  404400:	68ba      	ldr	r2, [r7, #8]
  404402:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  404404:	bf00      	nop
  404406:	3714      	adds	r7, #20
  404408:	46bd      	mov	sp, r7
  40440a:	bc80      	pop	{r7}
  40440c:	4770      	bx	lr
  40440e:	bf00      	nop

00404410 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  404410:	b480      	push	{r7}
  404412:	b087      	sub	sp, #28
  404414:	af00      	add	r7, sp, #0
  404416:	60f8      	str	r0, [r7, #12]
  404418:	60b9      	str	r1, [r7, #8]
  40441a:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40441c:	68fb      	ldr	r3, [r7, #12]
  40441e:	687a      	ldr	r2, [r7, #4]
  404420:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  404422:	68bb      	ldr	r3, [r7, #8]
  404424:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  404428:	d04a      	beq.n	4044c0 <pio_set_peripheral+0xb0>
  40442a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40442e:	d808      	bhi.n	404442 <pio_set_peripheral+0x32>
  404430:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  404434:	d016      	beq.n	404464 <pio_set_peripheral+0x54>
  404436:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40443a:	d02c      	beq.n	404496 <pio_set_peripheral+0x86>
  40443c:	2b00      	cmp	r3, #0
  40443e:	d069      	beq.n	404514 <pio_set_peripheral+0x104>
  404440:	e064      	b.n	40450c <pio_set_peripheral+0xfc>
  404442:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  404446:	d065      	beq.n	404514 <pio_set_peripheral+0x104>
  404448:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40444c:	d803      	bhi.n	404456 <pio_set_peripheral+0x46>
  40444e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  404452:	d04a      	beq.n	4044ea <pio_set_peripheral+0xda>
  404454:	e05a      	b.n	40450c <pio_set_peripheral+0xfc>
  404456:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40445a:	d05b      	beq.n	404514 <pio_set_peripheral+0x104>
  40445c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  404460:	d058      	beq.n	404514 <pio_set_peripheral+0x104>
  404462:	e053      	b.n	40450c <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  404464:	68fb      	ldr	r3, [r7, #12]
  404466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  404468:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40446a:	68fb      	ldr	r3, [r7, #12]
  40446c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40446e:	687b      	ldr	r3, [r7, #4]
  404470:	43d9      	mvns	r1, r3
  404472:	697b      	ldr	r3, [r7, #20]
  404474:	400b      	ands	r3, r1
  404476:	401a      	ands	r2, r3
  404478:	68fb      	ldr	r3, [r7, #12]
  40447a:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40447c:	68fb      	ldr	r3, [r7, #12]
  40447e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  404480:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  404482:	68fb      	ldr	r3, [r7, #12]
  404484:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  404486:	687b      	ldr	r3, [r7, #4]
  404488:	43d9      	mvns	r1, r3
  40448a:	697b      	ldr	r3, [r7, #20]
  40448c:	400b      	ands	r3, r1
  40448e:	401a      	ands	r2, r3
  404490:	68fb      	ldr	r3, [r7, #12]
  404492:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  404494:	e03a      	b.n	40450c <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  404496:	68fb      	ldr	r3, [r7, #12]
  404498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40449a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40449c:	687a      	ldr	r2, [r7, #4]
  40449e:	697b      	ldr	r3, [r7, #20]
  4044a0:	431a      	orrs	r2, r3
  4044a2:	68fb      	ldr	r3, [r7, #12]
  4044a4:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4044a6:	68fb      	ldr	r3, [r7, #12]
  4044a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4044aa:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4044ac:	68fb      	ldr	r3, [r7, #12]
  4044ae:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4044b0:	687b      	ldr	r3, [r7, #4]
  4044b2:	43d9      	mvns	r1, r3
  4044b4:	697b      	ldr	r3, [r7, #20]
  4044b6:	400b      	ands	r3, r1
  4044b8:	401a      	ands	r2, r3
  4044ba:	68fb      	ldr	r3, [r7, #12]
  4044bc:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4044be:	e025      	b.n	40450c <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4044c0:	68fb      	ldr	r3, [r7, #12]
  4044c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4044c4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4044c6:	68fb      	ldr	r3, [r7, #12]
  4044c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4044ca:	687b      	ldr	r3, [r7, #4]
  4044cc:	43d9      	mvns	r1, r3
  4044ce:	697b      	ldr	r3, [r7, #20]
  4044d0:	400b      	ands	r3, r1
  4044d2:	401a      	ands	r2, r3
  4044d4:	68fb      	ldr	r3, [r7, #12]
  4044d6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4044d8:	68fb      	ldr	r3, [r7, #12]
  4044da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4044dc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4044de:	687a      	ldr	r2, [r7, #4]
  4044e0:	697b      	ldr	r3, [r7, #20]
  4044e2:	431a      	orrs	r2, r3
  4044e4:	68fb      	ldr	r3, [r7, #12]
  4044e6:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4044e8:	e010      	b.n	40450c <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4044ea:	68fb      	ldr	r3, [r7, #12]
  4044ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4044ee:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4044f0:	687a      	ldr	r2, [r7, #4]
  4044f2:	697b      	ldr	r3, [r7, #20]
  4044f4:	431a      	orrs	r2, r3
  4044f6:	68fb      	ldr	r3, [r7, #12]
  4044f8:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4044fa:	68fb      	ldr	r3, [r7, #12]
  4044fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4044fe:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  404500:	687a      	ldr	r2, [r7, #4]
  404502:	697b      	ldr	r3, [r7, #20]
  404504:	431a      	orrs	r2, r3
  404506:	68fb      	ldr	r3, [r7, #12]
  404508:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40450a:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40450c:	68fb      	ldr	r3, [r7, #12]
  40450e:	687a      	ldr	r2, [r7, #4]
  404510:	605a      	str	r2, [r3, #4]
  404512:	e000      	b.n	404516 <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  404514:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  404516:	371c      	adds	r7, #28
  404518:	46bd      	mov	sp, r7
  40451a:	bc80      	pop	{r7}
  40451c:	4770      	bx	lr
  40451e:	bf00      	nop

00404520 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  404520:	b580      	push	{r7, lr}
  404522:	b084      	sub	sp, #16
  404524:	af00      	add	r7, sp, #0
  404526:	60f8      	str	r0, [r7, #12]
  404528:	60b9      	str	r1, [r7, #8]
  40452a:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  40452c:	68b9      	ldr	r1, [r7, #8]
  40452e:	68f8      	ldr	r0, [r7, #12]
  404530:	4b19      	ldr	r3, [pc, #100]	; (404598 <pio_set_input+0x78>)
  404532:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  404534:	687b      	ldr	r3, [r7, #4]
  404536:	f003 0301 	and.w	r3, r3, #1
  40453a:	461a      	mov	r2, r3
  40453c:	68b9      	ldr	r1, [r7, #8]
  40453e:	68f8      	ldr	r0, [r7, #12]
  404540:	4b16      	ldr	r3, [pc, #88]	; (40459c <pio_set_input+0x7c>)
  404542:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  404544:	687b      	ldr	r3, [r7, #4]
  404546:	f003 030a 	and.w	r3, r3, #10
  40454a:	2b00      	cmp	r3, #0
  40454c:	d003      	beq.n	404556 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  40454e:	68fb      	ldr	r3, [r7, #12]
  404550:	68ba      	ldr	r2, [r7, #8]
  404552:	621a      	str	r2, [r3, #32]
  404554:	e002      	b.n	40455c <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  404556:	68fb      	ldr	r3, [r7, #12]
  404558:	68ba      	ldr	r2, [r7, #8]
  40455a:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40455c:	687b      	ldr	r3, [r7, #4]
  40455e:	f003 0302 	and.w	r3, r3, #2
  404562:	2b00      	cmp	r3, #0
  404564:	d004      	beq.n	404570 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  404566:	68fb      	ldr	r3, [r7, #12]
  404568:	68ba      	ldr	r2, [r7, #8]
  40456a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40456e:	e008      	b.n	404582 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  404570:	687b      	ldr	r3, [r7, #4]
  404572:	f003 0308 	and.w	r3, r3, #8
  404576:	2b00      	cmp	r3, #0
  404578:	d003      	beq.n	404582 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  40457a:	68fb      	ldr	r3, [r7, #12]
  40457c:	68ba      	ldr	r2, [r7, #8]
  40457e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  404582:	68fb      	ldr	r3, [r7, #12]
  404584:	68ba      	ldr	r2, [r7, #8]
  404586:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  404588:	68fb      	ldr	r3, [r7, #12]
  40458a:	68ba      	ldr	r2, [r7, #8]
  40458c:	601a      	str	r2, [r3, #0]
}
  40458e:	bf00      	nop
  404590:	3710      	adds	r7, #16
  404592:	46bd      	mov	sp, r7
  404594:	bd80      	pop	{r7, pc}
  404596:	bf00      	nop
  404598:	0040468d 	.word	0x0040468d
  40459c:	004043e5 	.word	0x004043e5

004045a0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4045a0:	b580      	push	{r7, lr}
  4045a2:	b084      	sub	sp, #16
  4045a4:	af00      	add	r7, sp, #0
  4045a6:	60f8      	str	r0, [r7, #12]
  4045a8:	60b9      	str	r1, [r7, #8]
  4045aa:	607a      	str	r2, [r7, #4]
  4045ac:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  4045ae:	68b9      	ldr	r1, [r7, #8]
  4045b0:	68f8      	ldr	r0, [r7, #12]
  4045b2:	4b12      	ldr	r3, [pc, #72]	; (4045fc <pio_set_output+0x5c>)
  4045b4:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  4045b6:	69ba      	ldr	r2, [r7, #24]
  4045b8:	68b9      	ldr	r1, [r7, #8]
  4045ba:	68f8      	ldr	r0, [r7, #12]
  4045bc:	4b10      	ldr	r3, [pc, #64]	; (404600 <pio_set_output+0x60>)
  4045be:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4045c0:	683b      	ldr	r3, [r7, #0]
  4045c2:	2b00      	cmp	r3, #0
  4045c4:	d003      	beq.n	4045ce <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  4045c6:	68fb      	ldr	r3, [r7, #12]
  4045c8:	68ba      	ldr	r2, [r7, #8]
  4045ca:	651a      	str	r2, [r3, #80]	; 0x50
  4045cc:	e002      	b.n	4045d4 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4045ce:	68fb      	ldr	r3, [r7, #12]
  4045d0:	68ba      	ldr	r2, [r7, #8]
  4045d2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4045d4:	687b      	ldr	r3, [r7, #4]
  4045d6:	2b00      	cmp	r3, #0
  4045d8:	d003      	beq.n	4045e2 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  4045da:	68fb      	ldr	r3, [r7, #12]
  4045dc:	68ba      	ldr	r2, [r7, #8]
  4045de:	631a      	str	r2, [r3, #48]	; 0x30
  4045e0:	e002      	b.n	4045e8 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4045e2:	68fb      	ldr	r3, [r7, #12]
  4045e4:	68ba      	ldr	r2, [r7, #8]
  4045e6:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4045e8:	68fb      	ldr	r3, [r7, #12]
  4045ea:	68ba      	ldr	r2, [r7, #8]
  4045ec:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  4045ee:	68fb      	ldr	r3, [r7, #12]
  4045f0:	68ba      	ldr	r2, [r7, #8]
  4045f2:	601a      	str	r2, [r3, #0]
}
  4045f4:	bf00      	nop
  4045f6:	3710      	adds	r7, #16
  4045f8:	46bd      	mov	sp, r7
  4045fa:	bd80      	pop	{r7, pc}
  4045fc:	0040468d 	.word	0x0040468d
  404600:	004043e5 	.word	0x004043e5

00404604 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  404604:	b480      	push	{r7}
  404606:	b085      	sub	sp, #20
  404608:	af00      	add	r7, sp, #0
  40460a:	60f8      	str	r0, [r7, #12]
  40460c:	60b9      	str	r1, [r7, #8]
  40460e:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  404610:	687b      	ldr	r3, [r7, #4]
  404612:	f003 0310 	and.w	r3, r3, #16
  404616:	2b00      	cmp	r3, #0
  404618:	d020      	beq.n	40465c <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  40461a:	68fb      	ldr	r3, [r7, #12]
  40461c:	68ba      	ldr	r2, [r7, #8]
  40461e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  404622:	687b      	ldr	r3, [r7, #4]
  404624:	f003 0320 	and.w	r3, r3, #32
  404628:	2b00      	cmp	r3, #0
  40462a:	d004      	beq.n	404636 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  40462c:	68fb      	ldr	r3, [r7, #12]
  40462e:	68ba      	ldr	r2, [r7, #8]
  404630:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  404634:	e003      	b.n	40463e <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  404636:	68fb      	ldr	r3, [r7, #12]
  404638:	68ba      	ldr	r2, [r7, #8]
  40463a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  40463e:	687b      	ldr	r3, [r7, #4]
  404640:	f003 0340 	and.w	r3, r3, #64	; 0x40
  404644:	2b00      	cmp	r3, #0
  404646:	d004      	beq.n	404652 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  404648:	68fb      	ldr	r3, [r7, #12]
  40464a:	68ba      	ldr	r2, [r7, #8]
  40464c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  404650:	e008      	b.n	404664 <pio_configure_interrupt+0x60>
		if (ul_attr & PIO_IT_EDGE) {
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  404652:	68fb      	ldr	r3, [r7, #12]
  404654:	68ba      	ldr	r2, [r7, #8]
  404656:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  40465a:	e003      	b.n	404664 <pio_configure_interrupt+0x60>
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  40465c:	68fb      	ldr	r3, [r7, #12]
  40465e:	68ba      	ldr	r2, [r7, #8]
  404660:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	}
}
  404664:	bf00      	nop
  404666:	3714      	adds	r7, #20
  404668:	46bd      	mov	sp, r7
  40466a:	bc80      	pop	{r7}
  40466c:	4770      	bx	lr
  40466e:	bf00      	nop

00404670 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  404670:	b480      	push	{r7}
  404672:	b083      	sub	sp, #12
  404674:	af00      	add	r7, sp, #0
  404676:	6078      	str	r0, [r7, #4]
  404678:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  40467a:	687b      	ldr	r3, [r7, #4]
  40467c:	683a      	ldr	r2, [r7, #0]
  40467e:	641a      	str	r2, [r3, #64]	; 0x40
}
  404680:	bf00      	nop
  404682:	370c      	adds	r7, #12
  404684:	46bd      	mov	sp, r7
  404686:	bc80      	pop	{r7}
  404688:	4770      	bx	lr
  40468a:	bf00      	nop

0040468c <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  40468c:	b480      	push	{r7}
  40468e:	b083      	sub	sp, #12
  404690:	af00      	add	r7, sp, #0
  404692:	6078      	str	r0, [r7, #4]
  404694:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  404696:	687b      	ldr	r3, [r7, #4]
  404698:	683a      	ldr	r2, [r7, #0]
  40469a:	645a      	str	r2, [r3, #68]	; 0x44
}
  40469c:	bf00      	nop
  40469e:	370c      	adds	r7, #12
  4046a0:	46bd      	mov	sp, r7
  4046a2:	bc80      	pop	{r7}
  4046a4:	4770      	bx	lr
  4046a6:	bf00      	nop

004046a8 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4046a8:	b480      	push	{r7}
  4046aa:	b083      	sub	sp, #12
  4046ac:	af00      	add	r7, sp, #0
  4046ae:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4046b0:	687b      	ldr	r3, [r7, #4]
  4046b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4046b4:	4618      	mov	r0, r3
  4046b6:	370c      	adds	r7, #12
  4046b8:	46bd      	mov	sp, r7
  4046ba:	bc80      	pop	{r7}
  4046bc:	4770      	bx	lr
  4046be:	bf00      	nop

004046c0 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4046c0:	b480      	push	{r7}
  4046c2:	b083      	sub	sp, #12
  4046c4:	af00      	add	r7, sp, #0
  4046c6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4046c8:	687b      	ldr	r3, [r7, #4]
  4046ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4046cc:	4618      	mov	r0, r3
  4046ce:	370c      	adds	r7, #12
  4046d0:	46bd      	mov	sp, r7
  4046d2:	bc80      	pop	{r7}
  4046d4:	4770      	bx	lr
  4046d6:	bf00      	nop

004046d8 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
  4046d8:	b580      	push	{r7, lr}
  4046da:	b084      	sub	sp, #16
  4046dc:	af00      	add	r7, sp, #0
  4046de:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  4046e0:	6878      	ldr	r0, [r7, #4]
  4046e2:	4b08      	ldr	r3, [pc, #32]	; (404704 <pio_set_pin_high+0x2c>)
  4046e4:	4798      	blx	r3
  4046e6:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  4046e8:	687b      	ldr	r3, [r7, #4]
  4046ea:	f003 031f 	and.w	r3, r3, #31
  4046ee:	2201      	movs	r2, #1
  4046f0:	fa02 f303 	lsl.w	r3, r2, r3
  4046f4:	461a      	mov	r2, r3
  4046f6:	68fb      	ldr	r3, [r7, #12]
  4046f8:	631a      	str	r2, [r3, #48]	; 0x30
}
  4046fa:	bf00      	nop
  4046fc:	3710      	adds	r7, #16
  4046fe:	46bd      	mov	sp, r7
  404700:	bd80      	pop	{r7, pc}
  404702:	bf00      	nop
  404704:	00404a15 	.word	0x00404a15

00404708 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
  404708:	b580      	push	{r7, lr}
  40470a:	b084      	sub	sp, #16
  40470c:	af00      	add	r7, sp, #0
  40470e:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  404710:	6878      	ldr	r0, [r7, #4]
  404712:	4b08      	ldr	r3, [pc, #32]	; (404734 <pio_set_pin_low+0x2c>)
  404714:	4798      	blx	r3
  404716:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  404718:	687b      	ldr	r3, [r7, #4]
  40471a:	f003 031f 	and.w	r3, r3, #31
  40471e:	2201      	movs	r2, #1
  404720:	fa02 f303 	lsl.w	r3, r2, r3
  404724:	461a      	mov	r2, r3
  404726:	68fb      	ldr	r3, [r7, #12]
  404728:	635a      	str	r2, [r3, #52]	; 0x34
}
  40472a:	bf00      	nop
  40472c:	3710      	adds	r7, #16
  40472e:	46bd      	mov	sp, r7
  404730:	bd80      	pop	{r7, pc}
  404732:	bf00      	nop
  404734:	00404a15 	.word	0x00404a15

00404738 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  404738:	b590      	push	{r4, r7, lr}
  40473a:	b087      	sub	sp, #28
  40473c:	af02      	add	r7, sp, #8
  40473e:	6078      	str	r0, [r7, #4]
  404740:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  404742:	6878      	ldr	r0, [r7, #4]
  404744:	4b63      	ldr	r3, [pc, #396]	; (4048d4 <pio_configure_pin+0x19c>)
  404746:	4798      	blx	r3
  404748:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40474a:	683b      	ldr	r3, [r7, #0]
  40474c:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  404750:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  404754:	d067      	beq.n	404826 <pio_configure_pin+0xee>
  404756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40475a:	d809      	bhi.n	404770 <pio_configure_pin+0x38>
  40475c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  404760:	d02b      	beq.n	4047ba <pio_configure_pin+0x82>
  404762:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  404766:	d043      	beq.n	4047f0 <pio_configure_pin+0xb8>
  404768:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40476c:	d00a      	beq.n	404784 <pio_configure_pin+0x4c>
  40476e:	e0a9      	b.n	4048c4 <pio_configure_pin+0x18c>
  404770:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  404774:	d07e      	beq.n	404874 <pio_configure_pin+0x13c>
  404776:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40477a:	d07b      	beq.n	404874 <pio_configure_pin+0x13c>
  40477c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  404780:	d06c      	beq.n	40485c <pio_configure_pin+0x124>
  404782:	e09f      	b.n	4048c4 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  404784:	687b      	ldr	r3, [r7, #4]
  404786:	f003 031f 	and.w	r3, r3, #31
  40478a:	2201      	movs	r2, #1
  40478c:	fa02 f303 	lsl.w	r3, r2, r3
  404790:	461a      	mov	r2, r3
  404792:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404796:	68f8      	ldr	r0, [r7, #12]
  404798:	4b4f      	ldr	r3, [pc, #316]	; (4048d8 <pio_configure_pin+0x1a0>)
  40479a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40479c:	687b      	ldr	r3, [r7, #4]
  40479e:	f003 031f 	and.w	r3, r3, #31
  4047a2:	2201      	movs	r2, #1
  4047a4:	fa02 f303 	lsl.w	r3, r2, r3
  4047a8:	4619      	mov	r1, r3
  4047aa:	683b      	ldr	r3, [r7, #0]
  4047ac:	f003 0301 	and.w	r3, r3, #1
  4047b0:	461a      	mov	r2, r3
  4047b2:	68f8      	ldr	r0, [r7, #12]
  4047b4:	4b49      	ldr	r3, [pc, #292]	; (4048dc <pio_configure_pin+0x1a4>)
  4047b6:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4047b8:	e086      	b.n	4048c8 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4047ba:	687b      	ldr	r3, [r7, #4]
  4047bc:	f003 031f 	and.w	r3, r3, #31
  4047c0:	2201      	movs	r2, #1
  4047c2:	fa02 f303 	lsl.w	r3, r2, r3
  4047c6:	461a      	mov	r2, r3
  4047c8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4047cc:	68f8      	ldr	r0, [r7, #12]
  4047ce:	4b42      	ldr	r3, [pc, #264]	; (4048d8 <pio_configure_pin+0x1a0>)
  4047d0:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4047d2:	687b      	ldr	r3, [r7, #4]
  4047d4:	f003 031f 	and.w	r3, r3, #31
  4047d8:	2201      	movs	r2, #1
  4047da:	fa02 f303 	lsl.w	r3, r2, r3
  4047de:	4619      	mov	r1, r3
  4047e0:	683b      	ldr	r3, [r7, #0]
  4047e2:	f003 0301 	and.w	r3, r3, #1
  4047e6:	461a      	mov	r2, r3
  4047e8:	68f8      	ldr	r0, [r7, #12]
  4047ea:	4b3c      	ldr	r3, [pc, #240]	; (4048dc <pio_configure_pin+0x1a4>)
  4047ec:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4047ee:	e06b      	b.n	4048c8 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4047f0:	687b      	ldr	r3, [r7, #4]
  4047f2:	f003 031f 	and.w	r3, r3, #31
  4047f6:	2201      	movs	r2, #1
  4047f8:	fa02 f303 	lsl.w	r3, r2, r3
  4047fc:	461a      	mov	r2, r3
  4047fe:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404802:	68f8      	ldr	r0, [r7, #12]
  404804:	4b34      	ldr	r3, [pc, #208]	; (4048d8 <pio_configure_pin+0x1a0>)
  404806:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  404808:	687b      	ldr	r3, [r7, #4]
  40480a:	f003 031f 	and.w	r3, r3, #31
  40480e:	2201      	movs	r2, #1
  404810:	fa02 f303 	lsl.w	r3, r2, r3
  404814:	4619      	mov	r1, r3
  404816:	683b      	ldr	r3, [r7, #0]
  404818:	f003 0301 	and.w	r3, r3, #1
  40481c:	461a      	mov	r2, r3
  40481e:	68f8      	ldr	r0, [r7, #12]
  404820:	4b2e      	ldr	r3, [pc, #184]	; (4048dc <pio_configure_pin+0x1a4>)
  404822:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  404824:	e050      	b.n	4048c8 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  404826:	687b      	ldr	r3, [r7, #4]
  404828:	f003 031f 	and.w	r3, r3, #31
  40482c:	2201      	movs	r2, #1
  40482e:	fa02 f303 	lsl.w	r3, r2, r3
  404832:	461a      	mov	r2, r3
  404834:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  404838:	68f8      	ldr	r0, [r7, #12]
  40483a:	4b27      	ldr	r3, [pc, #156]	; (4048d8 <pio_configure_pin+0x1a0>)
  40483c:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40483e:	687b      	ldr	r3, [r7, #4]
  404840:	f003 031f 	and.w	r3, r3, #31
  404844:	2201      	movs	r2, #1
  404846:	fa02 f303 	lsl.w	r3, r2, r3
  40484a:	4619      	mov	r1, r3
  40484c:	683b      	ldr	r3, [r7, #0]
  40484e:	f003 0301 	and.w	r3, r3, #1
  404852:	461a      	mov	r2, r3
  404854:	68f8      	ldr	r0, [r7, #12]
  404856:	4b21      	ldr	r3, [pc, #132]	; (4048dc <pio_configure_pin+0x1a4>)
  404858:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40485a:	e035      	b.n	4048c8 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40485c:	687b      	ldr	r3, [r7, #4]
  40485e:	f003 031f 	and.w	r3, r3, #31
  404862:	2201      	movs	r2, #1
  404864:	fa02 f303 	lsl.w	r3, r2, r3
  404868:	683a      	ldr	r2, [r7, #0]
  40486a:	4619      	mov	r1, r3
  40486c:	68f8      	ldr	r0, [r7, #12]
  40486e:	4b1c      	ldr	r3, [pc, #112]	; (4048e0 <pio_configure_pin+0x1a8>)
  404870:	4798      	blx	r3
		break;
  404872:	e029      	b.n	4048c8 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  404874:	687b      	ldr	r3, [r7, #4]
  404876:	f003 031f 	and.w	r3, r3, #31
  40487a:	2201      	movs	r2, #1
  40487c:	fa02 f303 	lsl.w	r3, r2, r3
  404880:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  404882:	683b      	ldr	r3, [r7, #0]
  404884:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  404888:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40488c:	bf0c      	ite	eq
  40488e:	2301      	moveq	r3, #1
  404890:	2300      	movne	r3, #0
  404892:	b2db      	uxtb	r3, r3
  404894:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  404896:	683b      	ldr	r3, [r7, #0]
  404898:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40489c:	2b00      	cmp	r3, #0
  40489e:	bf14      	ite	ne
  4048a0:	2301      	movne	r3, #1
  4048a2:	2300      	moveq	r3, #0
  4048a4:	b2db      	uxtb	r3, r3
  4048a6:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  4048a8:	683b      	ldr	r3, [r7, #0]
  4048aa:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4048ae:	2b00      	cmp	r3, #0
  4048b0:	bf14      	ite	ne
  4048b2:	2301      	movne	r3, #1
  4048b4:	2300      	moveq	r3, #0
  4048b6:	b2db      	uxtb	r3, r3
  4048b8:	9300      	str	r3, [sp, #0]
  4048ba:	4603      	mov	r3, r0
  4048bc:	68f8      	ldr	r0, [r7, #12]
  4048be:	4c09      	ldr	r4, [pc, #36]	; (4048e4 <pio_configure_pin+0x1ac>)
  4048c0:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4048c2:	e001      	b.n	4048c8 <pio_configure_pin+0x190>

	default:
		return 0;
  4048c4:	2300      	movs	r3, #0
  4048c6:	e000      	b.n	4048ca <pio_configure_pin+0x192>
	}

	return 1;
  4048c8:	2301      	movs	r3, #1
}
  4048ca:	4618      	mov	r0, r3
  4048cc:	3714      	adds	r7, #20
  4048ce:	46bd      	mov	sp, r7
  4048d0:	bd90      	pop	{r4, r7, pc}
  4048d2:	bf00      	nop
  4048d4:	00404a15 	.word	0x00404a15
  4048d8:	00404411 	.word	0x00404411
  4048dc:	004043e5 	.word	0x004043e5
  4048e0:	00404521 	.word	0x00404521
  4048e4:	004045a1 	.word	0x004045a1

004048e8 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  4048e8:	b590      	push	{r4, r7, lr}
  4048ea:	b087      	sub	sp, #28
  4048ec:	af02      	add	r7, sp, #8
  4048ee:	60f8      	str	r0, [r7, #12]
  4048f0:	60b9      	str	r1, [r7, #8]
  4048f2:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4048f4:	687b      	ldr	r3, [r7, #4]
  4048f6:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  4048fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4048fe:	d043      	beq.n	404988 <pio_configure_pin_group+0xa0>
  404900:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  404904:	d809      	bhi.n	40491a <pio_configure_pin_group+0x32>
  404906:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40490a:	d01f      	beq.n	40494c <pio_configure_pin_group+0x64>
  40490c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  404910:	d02b      	beq.n	40496a <pio_configure_pin_group+0x82>
  404912:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  404916:	d00a      	beq.n	40492e <pio_configure_pin_group+0x46>
  404918:	e06d      	b.n	4049f6 <pio_configure_pin_group+0x10e>
  40491a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40491e:	d048      	beq.n	4049b2 <pio_configure_pin_group+0xca>
  404920:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  404924:	d045      	beq.n	4049b2 <pio_configure_pin_group+0xca>
  404926:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40492a:	d03c      	beq.n	4049a6 <pio_configure_pin_group+0xbe>
  40492c:	e063      	b.n	4049f6 <pio_configure_pin_group+0x10e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40492e:	68ba      	ldr	r2, [r7, #8]
  404930:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404934:	68f8      	ldr	r0, [r7, #12]
  404936:	4b33      	ldr	r3, [pc, #204]	; (404a04 <pio_configure_pin_group+0x11c>)
  404938:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  40493a:	687b      	ldr	r3, [r7, #4]
  40493c:	f003 0301 	and.w	r3, r3, #1
  404940:	461a      	mov	r2, r3
  404942:	68b9      	ldr	r1, [r7, #8]
  404944:	68f8      	ldr	r0, [r7, #12]
  404946:	4b30      	ldr	r3, [pc, #192]	; (404a08 <pio_configure_pin_group+0x120>)
  404948:	4798      	blx	r3
		break;
  40494a:	e056      	b.n	4049fa <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  40494c:	68ba      	ldr	r2, [r7, #8]
  40494e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  404952:	68f8      	ldr	r0, [r7, #12]
  404954:	4b2b      	ldr	r3, [pc, #172]	; (404a04 <pio_configure_pin_group+0x11c>)
  404956:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  404958:	687b      	ldr	r3, [r7, #4]
  40495a:	f003 0301 	and.w	r3, r3, #1
  40495e:	461a      	mov	r2, r3
  404960:	68b9      	ldr	r1, [r7, #8]
  404962:	68f8      	ldr	r0, [r7, #12]
  404964:	4b28      	ldr	r3, [pc, #160]	; (404a08 <pio_configure_pin_group+0x120>)
  404966:	4798      	blx	r3
		break;
  404968:	e047      	b.n	4049fa <pio_configure_pin_group+0x112>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  40496a:	68ba      	ldr	r2, [r7, #8]
  40496c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404970:	68f8      	ldr	r0, [r7, #12]
  404972:	4b24      	ldr	r3, [pc, #144]	; (404a04 <pio_configure_pin_group+0x11c>)
  404974:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  404976:	687b      	ldr	r3, [r7, #4]
  404978:	f003 0301 	and.w	r3, r3, #1
  40497c:	461a      	mov	r2, r3
  40497e:	68b9      	ldr	r1, [r7, #8]
  404980:	68f8      	ldr	r0, [r7, #12]
  404982:	4b21      	ldr	r3, [pc, #132]	; (404a08 <pio_configure_pin_group+0x120>)
  404984:	4798      	blx	r3
		break;
  404986:	e038      	b.n	4049fa <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  404988:	68ba      	ldr	r2, [r7, #8]
  40498a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40498e:	68f8      	ldr	r0, [r7, #12]
  404990:	4b1c      	ldr	r3, [pc, #112]	; (404a04 <pio_configure_pin_group+0x11c>)
  404992:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  404994:	687b      	ldr	r3, [r7, #4]
  404996:	f003 0301 	and.w	r3, r3, #1
  40499a:	461a      	mov	r2, r3
  40499c:	68b9      	ldr	r1, [r7, #8]
  40499e:	68f8      	ldr	r0, [r7, #12]
  4049a0:	4b19      	ldr	r3, [pc, #100]	; (404a08 <pio_configure_pin_group+0x120>)
  4049a2:	4798      	blx	r3
		break;
  4049a4:	e029      	b.n	4049fa <pio_configure_pin_group+0x112>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  4049a6:	687a      	ldr	r2, [r7, #4]
  4049a8:	68b9      	ldr	r1, [r7, #8]
  4049aa:	68f8      	ldr	r0, [r7, #12]
  4049ac:	4b17      	ldr	r3, [pc, #92]	; (404a0c <pio_configure_pin_group+0x124>)
  4049ae:	4798      	blx	r3
		break;
  4049b0:	e023      	b.n	4049fa <pio_configure_pin_group+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4049b2:	687b      	ldr	r3, [r7, #4]
  4049b4:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  4049b8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4049bc:	bf0c      	ite	eq
  4049be:	2301      	moveq	r3, #1
  4049c0:	2300      	movne	r3, #0
  4049c2:	b2db      	uxtb	r3, r3
  4049c4:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  4049c6:	687b      	ldr	r3, [r7, #4]
  4049c8:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  4049cc:	2b00      	cmp	r3, #0
  4049ce:	bf14      	ite	ne
  4049d0:	2301      	movne	r3, #1
  4049d2:	2300      	moveq	r3, #0
  4049d4:	b2db      	uxtb	r3, r3
  4049d6:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  4049d8:	687b      	ldr	r3, [r7, #4]
  4049da:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  4049de:	2b00      	cmp	r3, #0
  4049e0:	bf14      	ite	ne
  4049e2:	2301      	movne	r3, #1
  4049e4:	2300      	moveq	r3, #0
  4049e6:	b2db      	uxtb	r3, r3
  4049e8:	9300      	str	r3, [sp, #0]
  4049ea:	460b      	mov	r3, r1
  4049ec:	68b9      	ldr	r1, [r7, #8]
  4049ee:	68f8      	ldr	r0, [r7, #12]
  4049f0:	4c07      	ldr	r4, [pc, #28]	; (404a10 <pio_configure_pin_group+0x128>)
  4049f2:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4049f4:	e001      	b.n	4049fa <pio_configure_pin_group+0x112>

	default:
		return 0;
  4049f6:	2300      	movs	r3, #0
  4049f8:	e000      	b.n	4049fc <pio_configure_pin_group+0x114>
	}

	return 1;
  4049fa:	2301      	movs	r3, #1
}
  4049fc:	4618      	mov	r0, r3
  4049fe:	3714      	adds	r7, #20
  404a00:	46bd      	mov	sp, r7
  404a02:	bd90      	pop	{r4, r7, pc}
  404a04:	00404411 	.word	0x00404411
  404a08:	004043e5 	.word	0x004043e5
  404a0c:	00404521 	.word	0x00404521
  404a10:	004045a1 	.word	0x004045a1

00404a14 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  404a14:	b480      	push	{r7}
  404a16:	b085      	sub	sp, #20
  404a18:	af00      	add	r7, sp, #0
  404a1a:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  404a1c:	687b      	ldr	r3, [r7, #4]
  404a1e:	095b      	lsrs	r3, r3, #5
  404a20:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  404a24:	f203 7307 	addw	r3, r3, #1799	; 0x707
  404a28:	025b      	lsls	r3, r3, #9
  404a2a:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  404a2c:	68fb      	ldr	r3, [r7, #12]
}
  404a2e:	4618      	mov	r0, r3
  404a30:	3714      	adds	r7, #20
  404a32:	46bd      	mov	sp, r7
  404a34:	bc80      	pop	{r7}
  404a36:	4770      	bx	lr

00404a38 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  404a38:	b480      	push	{r7}
  404a3a:	b083      	sub	sp, #12
  404a3c:	af00      	add	r7, sp, #0
  404a3e:	4603      	mov	r3, r0
  404a40:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  404a42:	4908      	ldr	r1, [pc, #32]	; (404a64 <NVIC_EnableIRQ+0x2c>)
  404a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404a48:	095b      	lsrs	r3, r3, #5
  404a4a:	79fa      	ldrb	r2, [r7, #7]
  404a4c:	f002 021f 	and.w	r2, r2, #31
  404a50:	2001      	movs	r0, #1
  404a52:	fa00 f202 	lsl.w	r2, r0, r2
  404a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  404a5a:	bf00      	nop
  404a5c:	370c      	adds	r7, #12
  404a5e:	46bd      	mov	sp, r7
  404a60:	bc80      	pop	{r7}
  404a62:	4770      	bx	lr
  404a64:	e000e100 	.word	0xe000e100

00404a68 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  404a68:	b480      	push	{r7}
  404a6a:	b083      	sub	sp, #12
  404a6c:	af00      	add	r7, sp, #0
  404a6e:	4603      	mov	r3, r0
  404a70:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  404a72:	4909      	ldr	r1, [pc, #36]	; (404a98 <NVIC_DisableIRQ+0x30>)
  404a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404a78:	095b      	lsrs	r3, r3, #5
  404a7a:	79fa      	ldrb	r2, [r7, #7]
  404a7c:	f002 021f 	and.w	r2, r2, #31
  404a80:	2001      	movs	r0, #1
  404a82:	fa00 f202 	lsl.w	r2, r0, r2
  404a86:	3320      	adds	r3, #32
  404a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  404a8c:	bf00      	nop
  404a8e:	370c      	adds	r7, #12
  404a90:	46bd      	mov	sp, r7
  404a92:	bc80      	pop	{r7}
  404a94:	4770      	bx	lr
  404a96:	bf00      	nop
  404a98:	e000e100 	.word	0xe000e100

00404a9c <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  404a9c:	b480      	push	{r7}
  404a9e:	b083      	sub	sp, #12
  404aa0:	af00      	add	r7, sp, #0
  404aa2:	4603      	mov	r3, r0
  404aa4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  404aa6:	4909      	ldr	r1, [pc, #36]	; (404acc <NVIC_ClearPendingIRQ+0x30>)
  404aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404aac:	095b      	lsrs	r3, r3, #5
  404aae:	79fa      	ldrb	r2, [r7, #7]
  404ab0:	f002 021f 	and.w	r2, r2, #31
  404ab4:	2001      	movs	r0, #1
  404ab6:	fa00 f202 	lsl.w	r2, r0, r2
  404aba:	3360      	adds	r3, #96	; 0x60
  404abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  404ac0:	bf00      	nop
  404ac2:	370c      	adds	r7, #12
  404ac4:	46bd      	mov	sp, r7
  404ac6:	bc80      	pop	{r7}
  404ac8:	4770      	bx	lr
  404aca:	bf00      	nop
  404acc:	e000e100 	.word	0xe000e100

00404ad0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  404ad0:	b480      	push	{r7}
  404ad2:	b083      	sub	sp, #12
  404ad4:	af00      	add	r7, sp, #0
  404ad6:	4603      	mov	r3, r0
  404ad8:	6039      	str	r1, [r7, #0]
  404ada:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  404adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404ae0:	2b00      	cmp	r3, #0
  404ae2:	da0b      	bge.n	404afc <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  404ae4:	490d      	ldr	r1, [pc, #52]	; (404b1c <NVIC_SetPriority+0x4c>)
  404ae6:	79fb      	ldrb	r3, [r7, #7]
  404ae8:	f003 030f 	and.w	r3, r3, #15
  404aec:	3b04      	subs	r3, #4
  404aee:	683a      	ldr	r2, [r7, #0]
  404af0:	b2d2      	uxtb	r2, r2
  404af2:	0112      	lsls	r2, r2, #4
  404af4:	b2d2      	uxtb	r2, r2
  404af6:	440b      	add	r3, r1
  404af8:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
  404afa:	e009      	b.n	404b10 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  404afc:	4908      	ldr	r1, [pc, #32]	; (404b20 <NVIC_SetPriority+0x50>)
  404afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404b02:	683a      	ldr	r2, [r7, #0]
  404b04:	b2d2      	uxtb	r2, r2
  404b06:	0112      	lsls	r2, r2, #4
  404b08:	b2d2      	uxtb	r2, r2
  404b0a:	440b      	add	r3, r1
  404b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  404b10:	bf00      	nop
  404b12:	370c      	adds	r7, #12
  404b14:	46bd      	mov	sp, r7
  404b16:	bc80      	pop	{r7}
  404b18:	4770      	bx	lr
  404b1a:	bf00      	nop
  404b1c:	e000ed00 	.word	0xe000ed00
  404b20:	e000e100 	.word	0xe000e100

00404b24 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  404b24:	b580      	push	{r7, lr}
  404b26:	b084      	sub	sp, #16
  404b28:	af00      	add	r7, sp, #0
  404b2a:	6078      	str	r0, [r7, #4]
  404b2c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  404b2e:	6878      	ldr	r0, [r7, #4]
  404b30:	4b2c      	ldr	r3, [pc, #176]	; (404be4 <pio_handler_process+0xc0>)
  404b32:	4798      	blx	r3
  404b34:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  404b36:	6878      	ldr	r0, [r7, #4]
  404b38:	4b2b      	ldr	r3, [pc, #172]	; (404be8 <pio_handler_process+0xc4>)
  404b3a:	4798      	blx	r3
  404b3c:	4602      	mov	r2, r0
  404b3e:	68fb      	ldr	r3, [r7, #12]
  404b40:	4013      	ands	r3, r2
  404b42:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  404b44:	68fb      	ldr	r3, [r7, #12]
  404b46:	2b00      	cmp	r3, #0
  404b48:	d03c      	beq.n	404bc4 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  404b4a:	2300      	movs	r3, #0
  404b4c:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  404b4e:	e034      	b.n	404bba <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  404b50:	4a26      	ldr	r2, [pc, #152]	; (404bec <pio_handler_process+0xc8>)
  404b52:	68bb      	ldr	r3, [r7, #8]
  404b54:	011b      	lsls	r3, r3, #4
  404b56:	4413      	add	r3, r2
  404b58:	681a      	ldr	r2, [r3, #0]
  404b5a:	683b      	ldr	r3, [r7, #0]
  404b5c:	429a      	cmp	r2, r3
  404b5e:	d126      	bne.n	404bae <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  404b60:	4a22      	ldr	r2, [pc, #136]	; (404bec <pio_handler_process+0xc8>)
  404b62:	68bb      	ldr	r3, [r7, #8]
  404b64:	011b      	lsls	r3, r3, #4
  404b66:	4413      	add	r3, r2
  404b68:	3304      	adds	r3, #4
  404b6a:	681a      	ldr	r2, [r3, #0]
  404b6c:	68fb      	ldr	r3, [r7, #12]
  404b6e:	4013      	ands	r3, r2
  404b70:	2b00      	cmp	r3, #0
  404b72:	d01c      	beq.n	404bae <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  404b74:	4a1d      	ldr	r2, [pc, #116]	; (404bec <pio_handler_process+0xc8>)
  404b76:	68bb      	ldr	r3, [r7, #8]
  404b78:	011b      	lsls	r3, r3, #4
  404b7a:	4413      	add	r3, r2
  404b7c:	330c      	adds	r3, #12
  404b7e:	681b      	ldr	r3, [r3, #0]
  404b80:	491a      	ldr	r1, [pc, #104]	; (404bec <pio_handler_process+0xc8>)
  404b82:	68ba      	ldr	r2, [r7, #8]
  404b84:	0112      	lsls	r2, r2, #4
  404b86:	440a      	add	r2, r1
  404b88:	6810      	ldr	r0, [r2, #0]
  404b8a:	4918      	ldr	r1, [pc, #96]	; (404bec <pio_handler_process+0xc8>)
  404b8c:	68ba      	ldr	r2, [r7, #8]
  404b8e:	0112      	lsls	r2, r2, #4
  404b90:	440a      	add	r2, r1
  404b92:	3204      	adds	r2, #4
  404b94:	6812      	ldr	r2, [r2, #0]
  404b96:	4611      	mov	r1, r2
  404b98:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  404b9a:	4a14      	ldr	r2, [pc, #80]	; (404bec <pio_handler_process+0xc8>)
  404b9c:	68bb      	ldr	r3, [r7, #8]
  404b9e:	011b      	lsls	r3, r3, #4
  404ba0:	4413      	add	r3, r2
  404ba2:	3304      	adds	r3, #4
  404ba4:	681b      	ldr	r3, [r3, #0]
  404ba6:	43db      	mvns	r3, r3
  404ba8:	68fa      	ldr	r2, [r7, #12]
  404baa:	4013      	ands	r3, r2
  404bac:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  404bae:	68bb      	ldr	r3, [r7, #8]
  404bb0:	3301      	adds	r3, #1
  404bb2:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  404bb4:	68bb      	ldr	r3, [r7, #8]
  404bb6:	2b06      	cmp	r3, #6
  404bb8:	d803      	bhi.n	404bc2 <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  404bba:	68fb      	ldr	r3, [r7, #12]
  404bbc:	2b00      	cmp	r3, #0
  404bbe:	d1c7      	bne.n	404b50 <pio_handler_process+0x2c>
  404bc0:	e000      	b.n	404bc4 <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  404bc2:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  404bc4:	4b0a      	ldr	r3, [pc, #40]	; (404bf0 <pio_handler_process+0xcc>)
  404bc6:	681b      	ldr	r3, [r3, #0]
  404bc8:	2b00      	cmp	r3, #0
  404bca:	d007      	beq.n	404bdc <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  404bcc:	4b09      	ldr	r3, [pc, #36]	; (404bf4 <pio_handler_process+0xd0>)
  404bce:	681b      	ldr	r3, [r3, #0]
  404bd0:	2b00      	cmp	r3, #0
  404bd2:	d003      	beq.n	404bdc <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  404bd4:	4b07      	ldr	r3, [pc, #28]	; (404bf4 <pio_handler_process+0xd0>)
  404bd6:	681b      	ldr	r3, [r3, #0]
  404bd8:	6878      	ldr	r0, [r7, #4]
  404bda:	4798      	blx	r3
		}
	}
#endif
}
  404bdc:	bf00      	nop
  404bde:	3710      	adds	r7, #16
  404be0:	46bd      	mov	sp, r7
  404be2:	bd80      	pop	{r7, pc}
  404be4:	004046a9 	.word	0x004046a9
  404be8:	004046c1 	.word	0x004046c1
  404bec:	2000056c 	.word	0x2000056c
  404bf0:	20002740 	.word	0x20002740
  404bf4:	200005e0 	.word	0x200005e0

00404bf8 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  404bf8:	b580      	push	{r7, lr}
  404bfa:	b086      	sub	sp, #24
  404bfc:	af00      	add	r7, sp, #0
  404bfe:	60f8      	str	r0, [r7, #12]
  404c00:	60b9      	str	r1, [r7, #8]
  404c02:	607a      	str	r2, [r7, #4]
  404c04:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  404c06:	4b21      	ldr	r3, [pc, #132]	; (404c8c <pio_handler_set+0x94>)
  404c08:	681b      	ldr	r3, [r3, #0]
  404c0a:	2b06      	cmp	r3, #6
  404c0c:	d901      	bls.n	404c12 <pio_handler_set+0x1a>
		return 1;
  404c0e:	2301      	movs	r3, #1
  404c10:	e038      	b.n	404c84 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  404c12:	2300      	movs	r3, #0
  404c14:	75fb      	strb	r3, [r7, #23]
  404c16:	e011      	b.n	404c3c <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  404c18:	7dfb      	ldrb	r3, [r7, #23]
  404c1a:	011b      	lsls	r3, r3, #4
  404c1c:	4a1c      	ldr	r2, [pc, #112]	; (404c90 <pio_handler_set+0x98>)
  404c1e:	4413      	add	r3, r2
  404c20:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  404c22:	693b      	ldr	r3, [r7, #16]
  404c24:	681a      	ldr	r2, [r3, #0]
  404c26:	68bb      	ldr	r3, [r7, #8]
  404c28:	429a      	cmp	r2, r3
  404c2a:	d104      	bne.n	404c36 <pio_handler_set+0x3e>
  404c2c:	693b      	ldr	r3, [r7, #16]
  404c2e:	685a      	ldr	r2, [r3, #4]
  404c30:	687b      	ldr	r3, [r7, #4]
  404c32:	429a      	cmp	r2, r3
  404c34:	d008      	beq.n	404c48 <pio_handler_set+0x50>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  404c36:	7dfb      	ldrb	r3, [r7, #23]
  404c38:	3301      	adds	r3, #1
  404c3a:	75fb      	strb	r3, [r7, #23]
  404c3c:	7dfa      	ldrb	r2, [r7, #23]
  404c3e:	4b13      	ldr	r3, [pc, #76]	; (404c8c <pio_handler_set+0x94>)
  404c40:	681b      	ldr	r3, [r3, #0]
  404c42:	429a      	cmp	r2, r3
  404c44:	d9e8      	bls.n	404c18 <pio_handler_set+0x20>
  404c46:	e000      	b.n	404c4a <pio_handler_set+0x52>
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
			break;
  404c48:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  404c4a:	693b      	ldr	r3, [r7, #16]
  404c4c:	68ba      	ldr	r2, [r7, #8]
  404c4e:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  404c50:	693b      	ldr	r3, [r7, #16]
  404c52:	687a      	ldr	r2, [r7, #4]
  404c54:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  404c56:	693b      	ldr	r3, [r7, #16]
  404c58:	683a      	ldr	r2, [r7, #0]
  404c5a:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  404c5c:	693b      	ldr	r3, [r7, #16]
  404c5e:	6a3a      	ldr	r2, [r7, #32]
  404c60:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  404c62:	7dfa      	ldrb	r2, [r7, #23]
  404c64:	4b09      	ldr	r3, [pc, #36]	; (404c8c <pio_handler_set+0x94>)
  404c66:	681b      	ldr	r3, [r3, #0]
  404c68:	3301      	adds	r3, #1
  404c6a:	429a      	cmp	r2, r3
  404c6c:	d104      	bne.n	404c78 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  404c6e:	4b07      	ldr	r3, [pc, #28]	; (404c8c <pio_handler_set+0x94>)
  404c70:	681b      	ldr	r3, [r3, #0]
  404c72:	3301      	adds	r3, #1
  404c74:	4a05      	ldr	r2, [pc, #20]	; (404c8c <pio_handler_set+0x94>)
  404c76:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  404c78:	683a      	ldr	r2, [r7, #0]
  404c7a:	6879      	ldr	r1, [r7, #4]
  404c7c:	68f8      	ldr	r0, [r7, #12]
  404c7e:	4b05      	ldr	r3, [pc, #20]	; (404c94 <pio_handler_set+0x9c>)
  404c80:	4798      	blx	r3

	return 0;
  404c82:	2300      	movs	r3, #0
}
  404c84:	4618      	mov	r0, r3
  404c86:	3718      	adds	r7, #24
  404c88:	46bd      	mov	sp, r7
  404c8a:	bd80      	pop	{r7, pc}
  404c8c:	200005dc 	.word	0x200005dc
  404c90:	2000056c 	.word	0x2000056c
  404c94:	00404605 	.word	0x00404605

00404c98 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  404c98:	b580      	push	{r7, lr}
  404c9a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  404c9c:	210b      	movs	r1, #11
  404c9e:	4802      	ldr	r0, [pc, #8]	; (404ca8 <PIOA_Handler+0x10>)
  404ca0:	4b02      	ldr	r3, [pc, #8]	; (404cac <PIOA_Handler+0x14>)
  404ca2:	4798      	blx	r3
}
  404ca4:	bf00      	nop
  404ca6:	bd80      	pop	{r7, pc}
  404ca8:	400e0e00 	.word	0x400e0e00
  404cac:	00404b25 	.word	0x00404b25

00404cb0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  404cb0:	b580      	push	{r7, lr}
  404cb2:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  404cb4:	210c      	movs	r1, #12
  404cb6:	4802      	ldr	r0, [pc, #8]	; (404cc0 <PIOB_Handler+0x10>)
  404cb8:	4b02      	ldr	r3, [pc, #8]	; (404cc4 <PIOB_Handler+0x14>)
  404cba:	4798      	blx	r3
}
  404cbc:	bf00      	nop
  404cbe:	bd80      	pop	{r7, pc}
  404cc0:	400e1000 	.word	0x400e1000
  404cc4:	00404b25 	.word	0x00404b25

00404cc8 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  404cc8:	b580      	push	{r7, lr}
  404cca:	b086      	sub	sp, #24
  404ccc:	af00      	add	r7, sp, #0
  404cce:	60f8      	str	r0, [r7, #12]
  404cd0:	460b      	mov	r3, r1
  404cd2:	607a      	str	r2, [r7, #4]
  404cd4:	72fb      	strb	r3, [r7, #11]
	uint32_t bitmask = 0;
  404cd6:	2300      	movs	r3, #0
  404cd8:	617b      	str	r3, [r7, #20]

	bitmask = pio_get_interrupt_mask(p_pio);
  404cda:	68f8      	ldr	r0, [r7, #12]
  404cdc:	4b13      	ldr	r3, [pc, #76]	; (404d2c <pio_handler_set_priority+0x64>)
  404cde:	4798      	blx	r3
  404ce0:	6178      	str	r0, [r7, #20]
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  404ce2:	f04f 31ff 	mov.w	r1, #4294967295
  404ce6:	68f8      	ldr	r0, [r7, #12]
  404ce8:	4b11      	ldr	r3, [pc, #68]	; (404d30 <pio_handler_set_priority+0x68>)
  404cea:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  404cec:	68f8      	ldr	r0, [r7, #12]
  404cee:	4b11      	ldr	r3, [pc, #68]	; (404d34 <pio_handler_set_priority+0x6c>)
  404cf0:	4798      	blx	r3
	NVIC_DisableIRQ(ul_irqn);
  404cf2:	f997 300b 	ldrsb.w	r3, [r7, #11]
  404cf6:	4618      	mov	r0, r3
  404cf8:	4b0f      	ldr	r3, [pc, #60]	; (404d38 <pio_handler_set_priority+0x70>)
  404cfa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(ul_irqn);
  404cfc:	f997 300b 	ldrsb.w	r3, [r7, #11]
  404d00:	4618      	mov	r0, r3
  404d02:	4b0e      	ldr	r3, [pc, #56]	; (404d3c <pio_handler_set_priority+0x74>)
  404d04:	4798      	blx	r3
	NVIC_SetPriority(ul_irqn, ul_priority);
  404d06:	f997 300b 	ldrsb.w	r3, [r7, #11]
  404d0a:	6879      	ldr	r1, [r7, #4]
  404d0c:	4618      	mov	r0, r3
  404d0e:	4b0c      	ldr	r3, [pc, #48]	; (404d40 <pio_handler_set_priority+0x78>)
  404d10:	4798      	blx	r3
	NVIC_EnableIRQ(ul_irqn);
  404d12:	f997 300b 	ldrsb.w	r3, [r7, #11]
  404d16:	4618      	mov	r0, r3
  404d18:	4b0a      	ldr	r3, [pc, #40]	; (404d44 <pio_handler_set_priority+0x7c>)
  404d1a:	4798      	blx	r3
	pio_enable_interrupt(p_pio, bitmask);
  404d1c:	6979      	ldr	r1, [r7, #20]
  404d1e:	68f8      	ldr	r0, [r7, #12]
  404d20:	4b09      	ldr	r3, [pc, #36]	; (404d48 <pio_handler_set_priority+0x80>)
  404d22:	4798      	blx	r3
}
  404d24:	bf00      	nop
  404d26:	3718      	adds	r7, #24
  404d28:	46bd      	mov	sp, r7
  404d2a:	bd80      	pop	{r7, pc}
  404d2c:	004046c1 	.word	0x004046c1
  404d30:	0040468d 	.word	0x0040468d
  404d34:	004046a9 	.word	0x004046a9
  404d38:	00404a69 	.word	0x00404a69
  404d3c:	00404a9d 	.word	0x00404a9d
  404d40:	00404ad1 	.word	0x00404ad1
  404d44:	00404a39 	.word	0x00404a39
  404d48:	00404671 	.word	0x00404671

00404d4c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  404d4c:	b480      	push	{r7}
  404d4e:	b085      	sub	sp, #20
  404d50:	af00      	add	r7, sp, #0
  404d52:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  404d54:	491c      	ldr	r1, [pc, #112]	; (404dc8 <pmc_switch_mck_to_pllack+0x7c>)
  404d56:	4b1c      	ldr	r3, [pc, #112]	; (404dc8 <pmc_switch_mck_to_pllack+0x7c>)
  404d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404d5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  404d5e:	687b      	ldr	r3, [r7, #4]
  404d60:	4313      	orrs	r3, r2
  404d62:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404d64:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404d68:	60fb      	str	r3, [r7, #12]
  404d6a:	e007      	b.n	404d7c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  404d6c:	68fb      	ldr	r3, [r7, #12]
  404d6e:	2b00      	cmp	r3, #0
  404d70:	d101      	bne.n	404d76 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  404d72:	2301      	movs	r3, #1
  404d74:	e023      	b.n	404dbe <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  404d76:	68fb      	ldr	r3, [r7, #12]
  404d78:	3b01      	subs	r3, #1
  404d7a:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404d7c:	4b12      	ldr	r3, [pc, #72]	; (404dc8 <pmc_switch_mck_to_pllack+0x7c>)
  404d7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404d80:	f003 0308 	and.w	r3, r3, #8
  404d84:	2b00      	cmp	r3, #0
  404d86:	d0f1      	beq.n	404d6c <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  404d88:	4a0f      	ldr	r2, [pc, #60]	; (404dc8 <pmc_switch_mck_to_pllack+0x7c>)
  404d8a:	4b0f      	ldr	r3, [pc, #60]	; (404dc8 <pmc_switch_mck_to_pllack+0x7c>)
  404d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404d8e:	f023 0303 	bic.w	r3, r3, #3
  404d92:	f043 0302 	orr.w	r3, r3, #2
  404d96:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404d98:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404d9c:	60fb      	str	r3, [r7, #12]
  404d9e:	e007      	b.n	404db0 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  404da0:	68fb      	ldr	r3, [r7, #12]
  404da2:	2b00      	cmp	r3, #0
  404da4:	d101      	bne.n	404daa <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  404da6:	2301      	movs	r3, #1
  404da8:	e009      	b.n	404dbe <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  404daa:	68fb      	ldr	r3, [r7, #12]
  404dac:	3b01      	subs	r3, #1
  404dae:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404db0:	4b05      	ldr	r3, [pc, #20]	; (404dc8 <pmc_switch_mck_to_pllack+0x7c>)
  404db2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404db4:	f003 0308 	and.w	r3, r3, #8
  404db8:	2b00      	cmp	r3, #0
  404dba:	d0f1      	beq.n	404da0 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  404dbc:	2300      	movs	r3, #0
}
  404dbe:	4618      	mov	r0, r3
  404dc0:	3714      	adds	r7, #20
  404dc2:	46bd      	mov	sp, r7
  404dc4:	bc80      	pop	{r7}
  404dc6:	4770      	bx	lr
  404dc8:	400e0400 	.word	0x400e0400

00404dcc <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  404dcc:	b480      	push	{r7}
  404dce:	b083      	sub	sp, #12
  404dd0:	af00      	add	r7, sp, #0
  404dd2:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  404dd4:	687b      	ldr	r3, [r7, #4]
  404dd6:	2b01      	cmp	r3, #1
  404dd8:	d107      	bne.n	404dea <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  404dda:	4a08      	ldr	r2, [pc, #32]	; (404dfc <pmc_switch_sclk_to_32kxtal+0x30>)
  404ddc:	4b07      	ldr	r3, [pc, #28]	; (404dfc <pmc_switch_sclk_to_32kxtal+0x30>)
  404dde:	689b      	ldr	r3, [r3, #8]
  404de0:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  404de4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  404de8:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  404dea:	4b04      	ldr	r3, [pc, #16]	; (404dfc <pmc_switch_sclk_to_32kxtal+0x30>)
  404dec:	4a04      	ldr	r2, [pc, #16]	; (404e00 <pmc_switch_sclk_to_32kxtal+0x34>)
  404dee:	601a      	str	r2, [r3, #0]
}
  404df0:	bf00      	nop
  404df2:	370c      	adds	r7, #12
  404df4:	46bd      	mov	sp, r7
  404df6:	bc80      	pop	{r7}
  404df8:	4770      	bx	lr
  404dfa:	bf00      	nop
  404dfc:	400e1410 	.word	0x400e1410
  404e00:	a5000008 	.word	0xa5000008

00404e04 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  404e04:	b480      	push	{r7}
  404e06:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  404e08:	4b09      	ldr	r3, [pc, #36]	; (404e30 <pmc_osc_is_ready_32kxtal+0x2c>)
  404e0a:	695b      	ldr	r3, [r3, #20]
  404e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  404e10:	2b00      	cmp	r3, #0
  404e12:	d007      	beq.n	404e24 <pmc_osc_is_ready_32kxtal+0x20>
  404e14:	4b07      	ldr	r3, [pc, #28]	; (404e34 <pmc_osc_is_ready_32kxtal+0x30>)
  404e16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
  404e1c:	2b00      	cmp	r3, #0
  404e1e:	d001      	beq.n	404e24 <pmc_osc_is_ready_32kxtal+0x20>
  404e20:	2301      	movs	r3, #1
  404e22:	e000      	b.n	404e26 <pmc_osc_is_ready_32kxtal+0x22>
  404e24:	2300      	movs	r3, #0
}
  404e26:	4618      	mov	r0, r3
  404e28:	46bd      	mov	sp, r7
  404e2a:	bc80      	pop	{r7}
  404e2c:	4770      	bx	lr
  404e2e:	bf00      	nop
  404e30:	400e1410 	.word	0x400e1410
  404e34:	400e0400 	.word	0x400e0400

00404e38 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  404e38:	b480      	push	{r7}
  404e3a:	b083      	sub	sp, #12
  404e3c:	af00      	add	r7, sp, #0
  404e3e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  404e40:	4a18      	ldr	r2, [pc, #96]	; (404ea4 <pmc_switch_mainck_to_fastrc+0x6c>)
  404e42:	4b18      	ldr	r3, [pc, #96]	; (404ea4 <pmc_switch_mainck_to_fastrc+0x6c>)
  404e44:	6a1b      	ldr	r3, [r3, #32]
  404e46:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  404e4a:	f043 0308 	orr.w	r3, r3, #8
  404e4e:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  404e50:	bf00      	nop
  404e52:	4b14      	ldr	r3, [pc, #80]	; (404ea4 <pmc_switch_mainck_to_fastrc+0x6c>)
  404e54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  404e5a:	2b00      	cmp	r3, #0
  404e5c:	d0f9      	beq.n	404e52 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  404e5e:	4911      	ldr	r1, [pc, #68]	; (404ea4 <pmc_switch_mainck_to_fastrc+0x6c>)
  404e60:	4b10      	ldr	r3, [pc, #64]	; (404ea4 <pmc_switch_mainck_to_fastrc+0x6c>)
  404e62:	6a1b      	ldr	r3, [r3, #32]
  404e64:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  404e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  404e6c:	687a      	ldr	r2, [r7, #4]
  404e6e:	4313      	orrs	r3, r2
  404e70:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  404e74:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  404e76:	bf00      	nop
  404e78:	4b0a      	ldr	r3, [pc, #40]	; (404ea4 <pmc_switch_mainck_to_fastrc+0x6c>)
  404e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  404e80:	2b00      	cmp	r3, #0
  404e82:	d0f9      	beq.n	404e78 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  404e84:	4a07      	ldr	r2, [pc, #28]	; (404ea4 <pmc_switch_mainck_to_fastrc+0x6c>)
  404e86:	4b07      	ldr	r3, [pc, #28]	; (404ea4 <pmc_switch_mainck_to_fastrc+0x6c>)
  404e88:	6a1b      	ldr	r3, [r3, #32]
  404e8a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  404e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  404e92:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  404e96:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  404e98:	bf00      	nop
  404e9a:	370c      	adds	r7, #12
  404e9c:	46bd      	mov	sp, r7
  404e9e:	bc80      	pop	{r7}
  404ea0:	4770      	bx	lr
  404ea2:	bf00      	nop
  404ea4:	400e0400 	.word	0x400e0400

00404ea8 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  404ea8:	b480      	push	{r7}
  404eaa:	b083      	sub	sp, #12
  404eac:	af00      	add	r7, sp, #0
  404eae:	6078      	str	r0, [r7, #4]
  404eb0:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  404eb2:	687b      	ldr	r3, [r7, #4]
  404eb4:	2b00      	cmp	r3, #0
  404eb6:	d008      	beq.n	404eca <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  404eb8:	4916      	ldr	r1, [pc, #88]	; (404f14 <pmc_switch_mainck_to_xtal+0x6c>)
  404eba:	4b16      	ldr	r3, [pc, #88]	; (404f14 <pmc_switch_mainck_to_xtal+0x6c>)
  404ebc:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  404ebe:	4a16      	ldr	r2, [pc, #88]	; (404f18 <pmc_switch_mainck_to_xtal+0x70>)
  404ec0:	401a      	ands	r2, r3
  404ec2:	4b16      	ldr	r3, [pc, #88]	; (404f1c <pmc_switch_mainck_to_xtal+0x74>)
  404ec4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  404ec6:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  404ec8:	e01e      	b.n	404f08 <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  404eca:	4912      	ldr	r1, [pc, #72]	; (404f14 <pmc_switch_mainck_to_xtal+0x6c>)
  404ecc:	4b11      	ldr	r3, [pc, #68]	; (404f14 <pmc_switch_mainck_to_xtal+0x6c>)
  404ece:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  404ed0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  404ed4:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  404ed8:	683a      	ldr	r2, [r7, #0]
  404eda:	0212      	lsls	r2, r2, #8
  404edc:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  404ede:	4313      	orrs	r3, r2
  404ee0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  404ee4:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  404ee8:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  404eea:	bf00      	nop
  404eec:	4b09      	ldr	r3, [pc, #36]	; (404f14 <pmc_switch_mainck_to_xtal+0x6c>)
  404eee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404ef0:	f003 0301 	and.w	r3, r3, #1
  404ef4:	2b00      	cmp	r3, #0
  404ef6:	d0f9      	beq.n	404eec <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  404ef8:	4a06      	ldr	r2, [pc, #24]	; (404f14 <pmc_switch_mainck_to_xtal+0x6c>)
  404efa:	4b06      	ldr	r3, [pc, #24]	; (404f14 <pmc_switch_mainck_to_xtal+0x6c>)
  404efc:	6a1b      	ldr	r3, [r3, #32]
  404efe:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  404f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  404f06:	6213      	str	r3, [r2, #32]
	}
}
  404f08:	bf00      	nop
  404f0a:	370c      	adds	r7, #12
  404f0c:	46bd      	mov	sp, r7
  404f0e:	bc80      	pop	{r7}
  404f10:	4770      	bx	lr
  404f12:	bf00      	nop
  404f14:	400e0400 	.word	0x400e0400
  404f18:	fec8fffc 	.word	0xfec8fffc
  404f1c:	01370002 	.word	0x01370002

00404f20 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  404f20:	b480      	push	{r7}
  404f22:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  404f24:	4b03      	ldr	r3, [pc, #12]	; (404f34 <pmc_osc_is_ready_mainck+0x14>)
  404f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  404f2c:	4618      	mov	r0, r3
  404f2e:	46bd      	mov	sp, r7
  404f30:	bc80      	pop	{r7}
  404f32:	4770      	bx	lr
  404f34:	400e0400 	.word	0x400e0400

00404f38 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  404f38:	b480      	push	{r7}
  404f3a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  404f3c:	4b03      	ldr	r3, [pc, #12]	; (404f4c <pmc_disable_pllack+0x14>)
  404f3e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  404f42:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  404f44:	bf00      	nop
  404f46:	46bd      	mov	sp, r7
  404f48:	bc80      	pop	{r7}
  404f4a:	4770      	bx	lr
  404f4c:	400e0400 	.word	0x400e0400

00404f50 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  404f50:	b480      	push	{r7}
  404f52:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  404f54:	4b03      	ldr	r3, [pc, #12]	; (404f64 <pmc_is_locked_pllack+0x14>)
  404f56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404f58:	f003 0302 	and.w	r3, r3, #2
}
  404f5c:	4618      	mov	r0, r3
  404f5e:	46bd      	mov	sp, r7
  404f60:	bc80      	pop	{r7}
  404f62:	4770      	bx	lr
  404f64:	400e0400 	.word	0x400e0400

00404f68 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  404f68:	b480      	push	{r7}
  404f6a:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  404f6c:	4b03      	ldr	r3, [pc, #12]	; (404f7c <pmc_disable_pllbck+0x14>)
  404f6e:	2200      	movs	r2, #0
  404f70:	62da      	str	r2, [r3, #44]	; 0x2c
}
  404f72:	bf00      	nop
  404f74:	46bd      	mov	sp, r7
  404f76:	bc80      	pop	{r7}
  404f78:	4770      	bx	lr
  404f7a:	bf00      	nop
  404f7c:	400e0400 	.word	0x400e0400

00404f80 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  404f80:	b480      	push	{r7}
  404f82:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  404f84:	4b03      	ldr	r3, [pc, #12]	; (404f94 <pmc_is_locked_pllbck+0x14>)
  404f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404f88:	f003 0304 	and.w	r3, r3, #4
}
  404f8c:	4618      	mov	r0, r3
  404f8e:	46bd      	mov	sp, r7
  404f90:	bc80      	pop	{r7}
  404f92:	4770      	bx	lr
  404f94:	400e0400 	.word	0x400e0400

00404f98 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  404f98:	b480      	push	{r7}
  404f9a:	b083      	sub	sp, #12
  404f9c:	af00      	add	r7, sp, #0
  404f9e:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  404fa0:	687b      	ldr	r3, [r7, #4]
  404fa2:	2b22      	cmp	r3, #34	; 0x22
  404fa4:	d901      	bls.n	404faa <pmc_enable_periph_clk+0x12>
		return 1;
  404fa6:	2301      	movs	r3, #1
  404fa8:	e02f      	b.n	40500a <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  404faa:	687b      	ldr	r3, [r7, #4]
  404fac:	2b1f      	cmp	r3, #31
  404fae:	d813      	bhi.n	404fd8 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  404fb0:	4b18      	ldr	r3, [pc, #96]	; (405014 <pmc_enable_periph_clk+0x7c>)
  404fb2:	699a      	ldr	r2, [r3, #24]
  404fb4:	2101      	movs	r1, #1
  404fb6:	687b      	ldr	r3, [r7, #4]
  404fb8:	fa01 f303 	lsl.w	r3, r1, r3
  404fbc:	401a      	ands	r2, r3
  404fbe:	2101      	movs	r1, #1
  404fc0:	687b      	ldr	r3, [r7, #4]
  404fc2:	fa01 f303 	lsl.w	r3, r1, r3
  404fc6:	429a      	cmp	r2, r3
  404fc8:	d01e      	beq.n	405008 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  404fca:	4a12      	ldr	r2, [pc, #72]	; (405014 <pmc_enable_periph_clk+0x7c>)
  404fcc:	2101      	movs	r1, #1
  404fce:	687b      	ldr	r3, [r7, #4]
  404fd0:	fa01 f303 	lsl.w	r3, r1, r3
  404fd4:	6113      	str	r3, [r2, #16]
  404fd6:	e017      	b.n	405008 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  404fd8:	687b      	ldr	r3, [r7, #4]
  404fda:	3b20      	subs	r3, #32
  404fdc:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  404fde:	4b0d      	ldr	r3, [pc, #52]	; (405014 <pmc_enable_periph_clk+0x7c>)
  404fe0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  404fe4:	2101      	movs	r1, #1
  404fe6:	687b      	ldr	r3, [r7, #4]
  404fe8:	fa01 f303 	lsl.w	r3, r1, r3
  404fec:	401a      	ands	r2, r3
  404fee:	2101      	movs	r1, #1
  404ff0:	687b      	ldr	r3, [r7, #4]
  404ff2:	fa01 f303 	lsl.w	r3, r1, r3
  404ff6:	429a      	cmp	r2, r3
  404ff8:	d006      	beq.n	405008 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  404ffa:	4a06      	ldr	r2, [pc, #24]	; (405014 <pmc_enable_periph_clk+0x7c>)
  404ffc:	2101      	movs	r1, #1
  404ffe:	687b      	ldr	r3, [r7, #4]
  405000:	fa01 f303 	lsl.w	r3, r1, r3
  405004:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  405008:	2300      	movs	r3, #0
}
  40500a:	4618      	mov	r0, r3
  40500c:	370c      	adds	r7, #12
  40500e:	46bd      	mov	sp, r7
  405010:	bc80      	pop	{r7}
  405012:	4770      	bx	lr
  405014:	400e0400 	.word	0x400e0400

00405018 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  405018:	b580      	push	{r7, lr}
  40501a:	b084      	sub	sp, #16
  40501c:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  40501e:	4b27      	ldr	r3, [pc, #156]	; (4050bc <Reset_Handler+0xa4>)
  405020:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  405022:	4b27      	ldr	r3, [pc, #156]	; (4050c0 <Reset_Handler+0xa8>)
  405024:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  405026:	68fa      	ldr	r2, [r7, #12]
  405028:	68bb      	ldr	r3, [r7, #8]
  40502a:	429a      	cmp	r2, r3
  40502c:	d90d      	bls.n	40504a <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  40502e:	e007      	b.n	405040 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  405030:	68bb      	ldr	r3, [r7, #8]
  405032:	1d1a      	adds	r2, r3, #4
  405034:	60ba      	str	r2, [r7, #8]
  405036:	68fa      	ldr	r2, [r7, #12]
  405038:	1d11      	adds	r1, r2, #4
  40503a:	60f9      	str	r1, [r7, #12]
  40503c:	6812      	ldr	r2, [r2, #0]
  40503e:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  405040:	68bb      	ldr	r3, [r7, #8]
  405042:	4a20      	ldr	r2, [pc, #128]	; (4050c4 <Reset_Handler+0xac>)
  405044:	4293      	cmp	r3, r2
  405046:	d3f3      	bcc.n	405030 <Reset_Handler+0x18>
  405048:	e020      	b.n	40508c <Reset_Handler+0x74>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  40504a:	68fa      	ldr	r2, [r7, #12]
  40504c:	68bb      	ldr	r3, [r7, #8]
  40504e:	429a      	cmp	r2, r3
  405050:	d21c      	bcs.n	40508c <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  405052:	4a1c      	ldr	r2, [pc, #112]	; (4050c4 <Reset_Handler+0xac>)
  405054:	4b1a      	ldr	r3, [pc, #104]	; (4050c0 <Reset_Handler+0xa8>)
  405056:	1ad3      	subs	r3, r2, r3
  405058:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  40505a:	68fa      	ldr	r2, [r7, #12]
  40505c:	687b      	ldr	r3, [r7, #4]
  40505e:	4413      	add	r3, r2
  405060:	3b04      	subs	r3, #4
  405062:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  405064:	68ba      	ldr	r2, [r7, #8]
  405066:	687b      	ldr	r3, [r7, #4]
  405068:	4413      	add	r3, r2
  40506a:	3b04      	subs	r3, #4
  40506c:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  40506e:	e00a      	b.n	405086 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  405070:	68bb      	ldr	r3, [r7, #8]
  405072:	1f1a      	subs	r2, r3, #4
  405074:	60ba      	str	r2, [r7, #8]
  405076:	68fa      	ldr	r2, [r7, #12]
  405078:	1f11      	subs	r1, r2, #4
  40507a:	60f9      	str	r1, [r7, #12]
  40507c:	6812      	ldr	r2, [r2, #0]
  40507e:	601a      	str	r2, [r3, #0]
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  405080:	687b      	ldr	r3, [r7, #4]
  405082:	3b04      	subs	r3, #4
  405084:	607b      	str	r3, [r7, #4]
  405086:	687b      	ldr	r3, [r7, #4]
  405088:	2b00      	cmp	r3, #0
  40508a:	d1f1      	bne.n	405070 <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40508c:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40508e:	4b0e      	ldr	r3, [pc, #56]	; (4050c8 <Reset_Handler+0xb0>)
  405090:	60bb      	str	r3, [r7, #8]
  405092:	e004      	b.n	40509e <Reset_Handler+0x86>
		*pDest++ = 0;
  405094:	68bb      	ldr	r3, [r7, #8]
  405096:	1d1a      	adds	r2, r3, #4
  405098:	60ba      	str	r2, [r7, #8]
  40509a:	2200      	movs	r2, #0
  40509c:	601a      	str	r2, [r3, #0]
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40509e:	68bb      	ldr	r3, [r7, #8]
  4050a0:	4a0a      	ldr	r2, [pc, #40]	; (4050cc <Reset_Handler+0xb4>)
  4050a2:	4293      	cmp	r3, r2
  4050a4:	d3f6      	bcc.n	405094 <Reset_Handler+0x7c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  4050a6:	4b0a      	ldr	r3, [pc, #40]	; (4050d0 <Reset_Handler+0xb8>)
  4050a8:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  4050aa:	4a0a      	ldr	r2, [pc, #40]	; (4050d4 <Reset_Handler+0xbc>)
  4050ac:	68fb      	ldr	r3, [r7, #12]
  4050ae:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  4050b0:	4b09      	ldr	r3, [pc, #36]	; (4050d8 <Reset_Handler+0xc0>)
  4050b2:	4798      	blx	r3

	/* Branch to main function */
	main();
  4050b4:	4b09      	ldr	r3, [pc, #36]	; (4050dc <Reset_Handler+0xc4>)
  4050b6:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  4050b8:	e7fe      	b.n	4050b8 <Reset_Handler+0xa0>
  4050ba:	bf00      	nop
  4050bc:	0040bf8c 	.word	0x0040bf8c
  4050c0:	20000000 	.word	0x20000000
  4050c4:	20000474 	.word	0x20000474
  4050c8:	20000478 	.word	0x20000478
  4050cc:	20002744 	.word	0x20002744
  4050d0:	00400000 	.word	0x00400000
  4050d4:	e000ed00 	.word	0xe000ed00
  4050d8:	0040b8d5 	.word	0x0040b8d5
  4050dc:	00407b21 	.word	0x00407b21

004050e0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4050e0:	b480      	push	{r7}
  4050e2:	af00      	add	r7, sp, #0
	while (1) {
	}
  4050e4:	e7fe      	b.n	4050e4 <Dummy_Handler+0x4>
  4050e6:	bf00      	nop

004050e8 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  4050e8:	b480      	push	{r7}
  4050ea:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4050ec:	4b5d      	ldr	r3, [pc, #372]	; (405264 <SystemCoreClockUpdate+0x17c>)
  4050ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4050f0:	f003 0303 	and.w	r3, r3, #3
  4050f4:	2b03      	cmp	r3, #3
  4050f6:	f200 8096 	bhi.w	405226 <SystemCoreClockUpdate+0x13e>
  4050fa:	a201      	add	r2, pc, #4	; (adr r2, 405100 <SystemCoreClockUpdate+0x18>)
  4050fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405100:	00405111 	.word	0x00405111
  405104:	00405131 	.word	0x00405131
  405108:	0040517b 	.word	0x0040517b
  40510c:	0040517b 	.word	0x0040517b
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  405110:	4b55      	ldr	r3, [pc, #340]	; (405268 <SystemCoreClockUpdate+0x180>)
  405112:	695b      	ldr	r3, [r3, #20]
  405114:	f003 0380 	and.w	r3, r3, #128	; 0x80
  405118:	2b00      	cmp	r3, #0
  40511a:	d004      	beq.n	405126 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40511c:	4b53      	ldr	r3, [pc, #332]	; (40526c <SystemCoreClockUpdate+0x184>)
  40511e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  405122:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  405124:	e080      	b.n	405228 <SystemCoreClockUpdate+0x140>
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  405126:	4b51      	ldr	r3, [pc, #324]	; (40526c <SystemCoreClockUpdate+0x184>)
  405128:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  40512c:	601a      	str	r2, [r3, #0]
			}
		break;
  40512e:	e07b      	b.n	405228 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  405130:	4b4c      	ldr	r3, [pc, #304]	; (405264 <SystemCoreClockUpdate+0x17c>)
  405132:	6a1b      	ldr	r3, [r3, #32]
  405134:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  405138:	2b00      	cmp	r3, #0
  40513a:	d003      	beq.n	405144 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40513c:	4b4b      	ldr	r3, [pc, #300]	; (40526c <SystemCoreClockUpdate+0x184>)
  40513e:	4a4c      	ldr	r2, [pc, #304]	; (405270 <SystemCoreClockUpdate+0x188>)
  405140:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  405142:	e071      	b.n	405228 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
			SystemCoreClock = CHIP_FREQ_XTAL;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  405144:	4b49      	ldr	r3, [pc, #292]	; (40526c <SystemCoreClockUpdate+0x184>)
  405146:	4a4b      	ldr	r2, [pc, #300]	; (405274 <SystemCoreClockUpdate+0x18c>)
  405148:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40514a:	4b46      	ldr	r3, [pc, #280]	; (405264 <SystemCoreClockUpdate+0x17c>)
  40514c:	6a1b      	ldr	r3, [r3, #32]
  40514e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405152:	2b10      	cmp	r3, #16
  405154:	d008      	beq.n	405168 <SystemCoreClockUpdate+0x80>
  405156:	2b20      	cmp	r3, #32
  405158:	d00a      	beq.n	405170 <SystemCoreClockUpdate+0x88>
  40515a:	2b00      	cmp	r3, #0
  40515c:	d000      	beq.n	405160 <SystemCoreClockUpdate+0x78>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
			break;
			
			default:
			break;
  40515e:	e00b      	b.n	405178 <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  405160:	4b42      	ldr	r3, [pc, #264]	; (40526c <SystemCoreClockUpdate+0x184>)
  405162:	4a44      	ldr	r2, [pc, #272]	; (405274 <SystemCoreClockUpdate+0x18c>)
  405164:	601a      	str	r2, [r3, #0]
			break;
  405166:	e007      	b.n	405178 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  405168:	4b40      	ldr	r3, [pc, #256]	; (40526c <SystemCoreClockUpdate+0x184>)
  40516a:	4a43      	ldr	r2, [pc, #268]	; (405278 <SystemCoreClockUpdate+0x190>)
  40516c:	601a      	str	r2, [r3, #0]
			break;
  40516e:	e003      	b.n	405178 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  405170:	4b3e      	ldr	r3, [pc, #248]	; (40526c <SystemCoreClockUpdate+0x184>)
  405172:	4a3f      	ldr	r2, [pc, #252]	; (405270 <SystemCoreClockUpdate+0x188>)
  405174:	601a      	str	r2, [r3, #0]
			break;
  405176:	bf00      	nop
			
			default:
			break;
			}
		}
		break;
  405178:	e056      	b.n	405228 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40517a:	4b3a      	ldr	r3, [pc, #232]	; (405264 <SystemCoreClockUpdate+0x17c>)
  40517c:	6a1b      	ldr	r3, [r3, #32]
  40517e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  405182:	2b00      	cmp	r3, #0
  405184:	d003      	beq.n	40518e <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  405186:	4b39      	ldr	r3, [pc, #228]	; (40526c <SystemCoreClockUpdate+0x184>)
  405188:	4a39      	ldr	r2, [pc, #228]	; (405270 <SystemCoreClockUpdate+0x188>)
  40518a:	601a      	str	r2, [r3, #0]
  40518c:	e019      	b.n	4051c2 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40518e:	4b37      	ldr	r3, [pc, #220]	; (40526c <SystemCoreClockUpdate+0x184>)
  405190:	4a38      	ldr	r2, [pc, #224]	; (405274 <SystemCoreClockUpdate+0x18c>)
  405192:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  405194:	4b33      	ldr	r3, [pc, #204]	; (405264 <SystemCoreClockUpdate+0x17c>)
  405196:	6a1b      	ldr	r3, [r3, #32]
  405198:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40519c:	2b10      	cmp	r3, #16
  40519e:	d008      	beq.n	4051b2 <SystemCoreClockUpdate+0xca>
  4051a0:	2b20      	cmp	r3, #32
  4051a2:	d00a      	beq.n	4051ba <SystemCoreClockUpdate+0xd2>
  4051a4:	2b00      	cmp	r3, #0
  4051a6:	d000      	beq.n	4051aa <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  4051a8:	e00b      	b.n	4051c2 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4051aa:	4b30      	ldr	r3, [pc, #192]	; (40526c <SystemCoreClockUpdate+0x184>)
  4051ac:	4a31      	ldr	r2, [pc, #196]	; (405274 <SystemCoreClockUpdate+0x18c>)
  4051ae:	601a      	str	r2, [r3, #0]
					break;
  4051b0:	e007      	b.n	4051c2 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4051b2:	4b2e      	ldr	r3, [pc, #184]	; (40526c <SystemCoreClockUpdate+0x184>)
  4051b4:	4a30      	ldr	r2, [pc, #192]	; (405278 <SystemCoreClockUpdate+0x190>)
  4051b6:	601a      	str	r2, [r3, #0]
					break;
  4051b8:	e003      	b.n	4051c2 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4051ba:	4b2c      	ldr	r3, [pc, #176]	; (40526c <SystemCoreClockUpdate+0x184>)
  4051bc:	4a2c      	ldr	r2, [pc, #176]	; (405270 <SystemCoreClockUpdate+0x188>)
  4051be:	601a      	str	r2, [r3, #0]
					break;
  4051c0:	bf00      	nop
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4051c2:	4b28      	ldr	r3, [pc, #160]	; (405264 <SystemCoreClockUpdate+0x17c>)
  4051c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4051c6:	f003 0303 	and.w	r3, r3, #3
  4051ca:	2b02      	cmp	r3, #2
  4051cc:	d115      	bne.n	4051fa <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4051ce:	4b25      	ldr	r3, [pc, #148]	; (405264 <SystemCoreClockUpdate+0x17c>)
  4051d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4051d2:	4b2a      	ldr	r3, [pc, #168]	; (40527c <SystemCoreClockUpdate+0x194>)
  4051d4:	4013      	ands	r3, r2
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  4051d6:	0c1b      	lsrs	r3, r3, #16
  4051d8:	3301      	adds	r3, #1
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4051da:	4a24      	ldr	r2, [pc, #144]	; (40526c <SystemCoreClockUpdate+0x184>)
  4051dc:	6812      	ldr	r2, [r2, #0]
  4051de:	fb02 f303 	mul.w	r3, r2, r3
  4051e2:	4a22      	ldr	r2, [pc, #136]	; (40526c <SystemCoreClockUpdate+0x184>)
  4051e4:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4051e6:	4b1f      	ldr	r3, [pc, #124]	; (405264 <SystemCoreClockUpdate+0x17c>)
  4051e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  4051ea:	b2db      	uxtb	r3, r3
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4051ec:	4a1f      	ldr	r2, [pc, #124]	; (40526c <SystemCoreClockUpdate+0x184>)
  4051ee:	6812      	ldr	r2, [r2, #0]
  4051f0:	fbb2 f3f3 	udiv	r3, r2, r3
  4051f4:	4a1d      	ldr	r2, [pc, #116]	; (40526c <SystemCoreClockUpdate+0x184>)
  4051f6:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  4051f8:	e016      	b.n	405228 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4051fa:	4b1a      	ldr	r3, [pc, #104]	; (405264 <SystemCoreClockUpdate+0x17c>)
  4051fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4051fe:	4b1f      	ldr	r3, [pc, #124]	; (40527c <SystemCoreClockUpdate+0x194>)
  405200:	4013      	ands	r3, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  405202:	0c1b      	lsrs	r3, r3, #16
  405204:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  405206:	4a19      	ldr	r2, [pc, #100]	; (40526c <SystemCoreClockUpdate+0x184>)
  405208:	6812      	ldr	r2, [r2, #0]
  40520a:	fb02 f303 	mul.w	r3, r2, r3
  40520e:	4a17      	ldr	r2, [pc, #92]	; (40526c <SystemCoreClockUpdate+0x184>)
  405210:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  405212:	4b14      	ldr	r3, [pc, #80]	; (405264 <SystemCoreClockUpdate+0x17c>)
  405214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  405216:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  405218:	4a14      	ldr	r2, [pc, #80]	; (40526c <SystemCoreClockUpdate+0x184>)
  40521a:	6812      	ldr	r2, [r2, #0]
  40521c:	fbb2 f3f3 	udiv	r3, r2, r3
  405220:	4a12      	ldr	r2, [pc, #72]	; (40526c <SystemCoreClockUpdate+0x184>)
  405222:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  405224:	e000      	b.n	405228 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  405226:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  405228:	4b0e      	ldr	r3, [pc, #56]	; (405264 <SystemCoreClockUpdate+0x17c>)
  40522a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40522c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405230:	2b70      	cmp	r3, #112	; 0x70
  405232:	d108      	bne.n	405246 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  405234:	4b0d      	ldr	r3, [pc, #52]	; (40526c <SystemCoreClockUpdate+0x184>)
  405236:	681b      	ldr	r3, [r3, #0]
  405238:	4a11      	ldr	r2, [pc, #68]	; (405280 <SystemCoreClockUpdate+0x198>)
  40523a:	fba2 2303 	umull	r2, r3, r2, r3
  40523e:	085b      	lsrs	r3, r3, #1
  405240:	4a0a      	ldr	r2, [pc, #40]	; (40526c <SystemCoreClockUpdate+0x184>)
  405242:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  405244:	e00a      	b.n	40525c <SystemCoreClockUpdate+0x174>

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  405246:	4b07      	ldr	r3, [pc, #28]	; (405264 <SystemCoreClockUpdate+0x17c>)
  405248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40524a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40524e:	091b      	lsrs	r3, r3, #4
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  405250:	4a06      	ldr	r2, [pc, #24]	; (40526c <SystemCoreClockUpdate+0x184>)
  405252:	6812      	ldr	r2, [r2, #0]
  405254:	fa22 f303 	lsr.w	r3, r2, r3
  405258:	4a04      	ldr	r2, [pc, #16]	; (40526c <SystemCoreClockUpdate+0x184>)
  40525a:	6013      	str	r3, [r2, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  40525c:	bf00      	nop
  40525e:	46bd      	mov	sp, r7
  405260:	bc80      	pop	{r7}
  405262:	4770      	bx	lr
  405264:	400e0400 	.word	0x400e0400
  405268:	400e1410 	.word	0x400e1410
  40526c:	20000034 	.word	0x20000034
  405270:	00b71b00 	.word	0x00b71b00
  405274:	003d0900 	.word	0x003d0900
  405278:	007a1200 	.word	0x007a1200
  40527c:	07ff0000 	.word	0x07ff0000
  405280:	aaaaaaab 	.word	0xaaaaaaab

00405284 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  405284:	b480      	push	{r7}
  405286:	b083      	sub	sp, #12
  405288:	af00      	add	r7, sp, #0
  40528a:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  40528c:	687b      	ldr	r3, [r7, #4]
  40528e:	4a18      	ldr	r2, [pc, #96]	; (4052f0 <system_init_flash+0x6c>)
  405290:	4293      	cmp	r3, r2
  405292:	d804      	bhi.n	40529e <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  405294:	4b17      	ldr	r3, [pc, #92]	; (4052f4 <system_init_flash+0x70>)
  405296:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40529a:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  40529c:	e023      	b.n	4052e6 <system_init_flash+0x62>
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40529e:	687b      	ldr	r3, [r7, #4]
  4052a0:	4a15      	ldr	r2, [pc, #84]	; (4052f8 <system_init_flash+0x74>)
  4052a2:	4293      	cmp	r3, r2
  4052a4:	d803      	bhi.n	4052ae <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4052a6:	4b13      	ldr	r3, [pc, #76]	; (4052f4 <system_init_flash+0x70>)
  4052a8:	4a14      	ldr	r2, [pc, #80]	; (4052fc <system_init_flash+0x78>)
  4052aa:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  4052ac:	e01b      	b.n	4052e6 <system_init_flash+0x62>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  4052ae:	687b      	ldr	r3, [r7, #4]
  4052b0:	4a13      	ldr	r2, [pc, #76]	; (405300 <system_init_flash+0x7c>)
  4052b2:	4293      	cmp	r3, r2
  4052b4:	d803      	bhi.n	4052be <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4052b6:	4b0f      	ldr	r3, [pc, #60]	; (4052f4 <system_init_flash+0x70>)
  4052b8:	4a12      	ldr	r2, [pc, #72]	; (405304 <system_init_flash+0x80>)
  4052ba:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  4052bc:	e013      	b.n	4052e6 <system_init_flash+0x62>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4052be:	687b      	ldr	r3, [r7, #4]
  4052c0:	4a11      	ldr	r2, [pc, #68]	; (405308 <system_init_flash+0x84>)
  4052c2:	4293      	cmp	r3, r2
  4052c4:	d803      	bhi.n	4052ce <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4052c6:	4b0b      	ldr	r3, [pc, #44]	; (4052f4 <system_init_flash+0x70>)
  4052c8:	4a10      	ldr	r2, [pc, #64]	; (40530c <system_init_flash+0x88>)
  4052ca:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  4052cc:	e00b      	b.n	4052e6 <system_init_flash+0x62>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4052ce:	687b      	ldr	r3, [r7, #4]
  4052d0:	4a0f      	ldr	r2, [pc, #60]	; (405310 <system_init_flash+0x8c>)
  4052d2:	4293      	cmp	r3, r2
  4052d4:	d804      	bhi.n	4052e0 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4052d6:	4b07      	ldr	r3, [pc, #28]	; (4052f4 <system_init_flash+0x70>)
  4052d8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4052dc:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  4052de:	e002      	b.n	4052e6 <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4052e0:	4b04      	ldr	r3, [pc, #16]	; (4052f4 <system_init_flash+0x70>)
  4052e2:	4a0c      	ldr	r2, [pc, #48]	; (405314 <system_init_flash+0x90>)
  4052e4:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  4052e6:	bf00      	nop
  4052e8:	370c      	adds	r7, #12
  4052ea:	46bd      	mov	sp, r7
  4052ec:	bc80      	pop	{r7}
  4052ee:	4770      	bx	lr
  4052f0:	01312cff 	.word	0x01312cff
  4052f4:	400e0a00 	.word	0x400e0a00
  4052f8:	026259ff 	.word	0x026259ff
  4052fc:	04000100 	.word	0x04000100
  405300:	039386ff 	.word	0x039386ff
  405304:	04000200 	.word	0x04000200
  405308:	04c4b3ff 	.word	0x04c4b3ff
  40530c:	04000300 	.word	0x04000300
  405310:	05f5e0ff 	.word	0x05f5e0ff
  405314:	04000500 	.word	0x04000500

00405318 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
  405318:	b480      	push	{r7}
  40531a:	b083      	sub	sp, #12
  40531c:	af00      	add	r7, sp, #0
  40531e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  405320:	687b      	ldr	r3, [r7, #4]
  405322:	f103 0208 	add.w	r2, r3, #8
  405326:	687b      	ldr	r3, [r7, #4]
  405328:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40532a:	687b      	ldr	r3, [r7, #4]
  40532c:	f04f 32ff 	mov.w	r2, #4294967295
  405330:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  405332:	687b      	ldr	r3, [r7, #4]
  405334:	f103 0208 	add.w	r2, r3, #8
  405338:	687b      	ldr	r3, [r7, #4]
  40533a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  40533c:	687b      	ldr	r3, [r7, #4]
  40533e:	f103 0208 	add.w	r2, r3, #8
  405342:	687b      	ldr	r3, [r7, #4]
  405344:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  405346:	687b      	ldr	r3, [r7, #4]
  405348:	2200      	movs	r2, #0
  40534a:	601a      	str	r2, [r3, #0]
}
  40534c:	bf00      	nop
  40534e:	370c      	adds	r7, #12
  405350:	46bd      	mov	sp, r7
  405352:	bc80      	pop	{r7}
  405354:	4770      	bx	lr
  405356:	bf00      	nop

00405358 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
  405358:	b480      	push	{r7}
  40535a:	b083      	sub	sp, #12
  40535c:	af00      	add	r7, sp, #0
  40535e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  405360:	687b      	ldr	r3, [r7, #4]
  405362:	2200      	movs	r2, #0
  405364:	611a      	str	r2, [r3, #16]
}
  405366:	bf00      	nop
  405368:	370c      	adds	r7, #12
  40536a:	46bd      	mov	sp, r7
  40536c:	bc80      	pop	{r7}
  40536e:	4770      	bx	lr

00405370 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
  405370:	b480      	push	{r7}
  405372:	b085      	sub	sp, #20
  405374:	af00      	add	r7, sp, #0
  405376:	6078      	str	r0, [r7, #4]
  405378:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  40537a:	687b      	ldr	r3, [r7, #4]
  40537c:	685b      	ldr	r3, [r3, #4]
  40537e:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
  405380:	68fb      	ldr	r3, [r7, #12]
  405382:	685a      	ldr	r2, [r3, #4]
  405384:	683b      	ldr	r3, [r7, #0]
  405386:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  405388:	687b      	ldr	r3, [r7, #4]
  40538a:	685a      	ldr	r2, [r3, #4]
  40538c:	683b      	ldr	r3, [r7, #0]
  40538e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  405390:	68fb      	ldr	r3, [r7, #12]
  405392:	685b      	ldr	r3, [r3, #4]
  405394:	683a      	ldr	r2, [r7, #0]
  405396:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  405398:	68fb      	ldr	r3, [r7, #12]
  40539a:	683a      	ldr	r2, [r7, #0]
  40539c:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  40539e:	687b      	ldr	r3, [r7, #4]
  4053a0:	683a      	ldr	r2, [r7, #0]
  4053a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4053a4:	683b      	ldr	r3, [r7, #0]
  4053a6:	687a      	ldr	r2, [r7, #4]
  4053a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  4053aa:	687b      	ldr	r3, [r7, #4]
  4053ac:	681b      	ldr	r3, [r3, #0]
  4053ae:	1c5a      	adds	r2, r3, #1
  4053b0:	687b      	ldr	r3, [r7, #4]
  4053b2:	601a      	str	r2, [r3, #0]
}
  4053b4:	bf00      	nop
  4053b6:	3714      	adds	r7, #20
  4053b8:	46bd      	mov	sp, r7
  4053ba:	bc80      	pop	{r7}
  4053bc:	4770      	bx	lr
  4053be:	bf00      	nop

004053c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  4053c0:	b480      	push	{r7}
  4053c2:	b085      	sub	sp, #20
  4053c4:	af00      	add	r7, sp, #0
  4053c6:	6078      	str	r0, [r7, #4]
  4053c8:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  4053ca:	683b      	ldr	r3, [r7, #0]
  4053cc:	681b      	ldr	r3, [r3, #0]
  4053ce:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4053d0:	68bb      	ldr	r3, [r7, #8]
  4053d2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4053d6:	d103      	bne.n	4053e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  4053d8:	687b      	ldr	r3, [r7, #4]
  4053da:	691b      	ldr	r3, [r3, #16]
  4053dc:	60fb      	str	r3, [r7, #12]
  4053de:	e00c      	b.n	4053fa <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  4053e0:	687b      	ldr	r3, [r7, #4]
  4053e2:	3308      	adds	r3, #8
  4053e4:	60fb      	str	r3, [r7, #12]
  4053e6:	e002      	b.n	4053ee <vListInsert+0x2e>
  4053e8:	68fb      	ldr	r3, [r7, #12]
  4053ea:	685b      	ldr	r3, [r3, #4]
  4053ec:	60fb      	str	r3, [r7, #12]
  4053ee:	68fb      	ldr	r3, [r7, #12]
  4053f0:	685b      	ldr	r3, [r3, #4]
  4053f2:	681a      	ldr	r2, [r3, #0]
  4053f4:	68bb      	ldr	r3, [r7, #8]
  4053f6:	429a      	cmp	r2, r3
  4053f8:	d9f6      	bls.n	4053e8 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4053fa:	68fb      	ldr	r3, [r7, #12]
  4053fc:	685a      	ldr	r2, [r3, #4]
  4053fe:	683b      	ldr	r3, [r7, #0]
  405400:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  405402:	683b      	ldr	r3, [r7, #0]
  405404:	685b      	ldr	r3, [r3, #4]
  405406:	683a      	ldr	r2, [r7, #0]
  405408:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  40540a:	683b      	ldr	r3, [r7, #0]
  40540c:	68fa      	ldr	r2, [r7, #12]
  40540e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  405410:	68fb      	ldr	r3, [r7, #12]
  405412:	683a      	ldr	r2, [r7, #0]
  405414:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  405416:	683b      	ldr	r3, [r7, #0]
  405418:	687a      	ldr	r2, [r7, #4]
  40541a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  40541c:	687b      	ldr	r3, [r7, #4]
  40541e:	681b      	ldr	r3, [r3, #0]
  405420:	1c5a      	adds	r2, r3, #1
  405422:	687b      	ldr	r3, [r7, #4]
  405424:	601a      	str	r2, [r3, #0]
}
  405426:	bf00      	nop
  405428:	3714      	adds	r7, #20
  40542a:	46bd      	mov	sp, r7
  40542c:	bc80      	pop	{r7}
  40542e:	4770      	bx	lr

00405430 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
  405430:	b480      	push	{r7}
  405432:	b085      	sub	sp, #20
  405434:	af00      	add	r7, sp, #0
  405436:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  405438:	687b      	ldr	r3, [r7, #4]
  40543a:	685b      	ldr	r3, [r3, #4]
  40543c:	687a      	ldr	r2, [r7, #4]
  40543e:	6892      	ldr	r2, [r2, #8]
  405440:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  405442:	687b      	ldr	r3, [r7, #4]
  405444:	689b      	ldr	r3, [r3, #8]
  405446:	687a      	ldr	r2, [r7, #4]
  405448:	6852      	ldr	r2, [r2, #4]
  40544a:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  40544c:	687b      	ldr	r3, [r7, #4]
  40544e:	691b      	ldr	r3, [r3, #16]
  405450:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  405452:	68fb      	ldr	r3, [r7, #12]
  405454:	685a      	ldr	r2, [r3, #4]
  405456:	687b      	ldr	r3, [r7, #4]
  405458:	429a      	cmp	r2, r3
  40545a:	d103      	bne.n	405464 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  40545c:	687b      	ldr	r3, [r7, #4]
  40545e:	689a      	ldr	r2, [r3, #8]
  405460:	68fb      	ldr	r3, [r7, #12]
  405462:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  405464:	687b      	ldr	r3, [r7, #4]
  405466:	2200      	movs	r2, #0
  405468:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
  40546a:	68fb      	ldr	r3, [r7, #12]
  40546c:	681b      	ldr	r3, [r3, #0]
  40546e:	1e5a      	subs	r2, r3, #1
  405470:	68fb      	ldr	r3, [r7, #12]
  405472:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  405474:	68fb      	ldr	r3, [r7, #12]
  405476:	681b      	ldr	r3, [r3, #0]
}
  405478:	4618      	mov	r0, r3
  40547a:	3714      	adds	r7, #20
  40547c:	46bd      	mov	sp, r7
  40547e:	bc80      	pop	{r7}
  405480:	4770      	bx	lr
  405482:	bf00      	nop

00405484 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  405484:	b480      	push	{r7}
  405486:	b083      	sub	sp, #12
  405488:	af00      	add	r7, sp, #0
  40548a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40548c:	687b      	ldr	r3, [r7, #4]
  40548e:	2b07      	cmp	r3, #7
  405490:	d825      	bhi.n	4054de <osc_get_rate+0x5a>
  405492:	a201      	add	r2, pc, #4	; (adr r2, 405498 <osc_get_rate+0x14>)
  405494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405498:	004054b9 	.word	0x004054b9
  40549c:	004054bf 	.word	0x004054bf
  4054a0:	004054c5 	.word	0x004054c5
  4054a4:	004054cb 	.word	0x004054cb
  4054a8:	004054cf 	.word	0x004054cf
  4054ac:	004054d3 	.word	0x004054d3
  4054b0:	004054d7 	.word	0x004054d7
  4054b4:	004054db 	.word	0x004054db
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4054b8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4054bc:	e010      	b.n	4054e0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4054be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4054c2:	e00d      	b.n	4054e0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4054c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4054c8:	e00a      	b.n	4054e0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4054ca:	4b08      	ldr	r3, [pc, #32]	; (4054ec <osc_get_rate+0x68>)
  4054cc:	e008      	b.n	4054e0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4054ce:	4b08      	ldr	r3, [pc, #32]	; (4054f0 <osc_get_rate+0x6c>)
  4054d0:	e006      	b.n	4054e0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4054d2:	4b08      	ldr	r3, [pc, #32]	; (4054f4 <osc_get_rate+0x70>)
  4054d4:	e004      	b.n	4054e0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4054d6:	4b07      	ldr	r3, [pc, #28]	; (4054f4 <osc_get_rate+0x70>)
  4054d8:	e002      	b.n	4054e0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4054da:	4b06      	ldr	r3, [pc, #24]	; (4054f4 <osc_get_rate+0x70>)
  4054dc:	e000      	b.n	4054e0 <osc_get_rate+0x5c>
	}

	return 0;
  4054de:	2300      	movs	r3, #0
}
  4054e0:	4618      	mov	r0, r3
  4054e2:	370c      	adds	r7, #12
  4054e4:	46bd      	mov	sp, r7
  4054e6:	bc80      	pop	{r7}
  4054e8:	4770      	bx	lr
  4054ea:	bf00      	nop
  4054ec:	003d0900 	.word	0x003d0900
  4054f0:	007a1200 	.word	0x007a1200
  4054f4:	00b71b00 	.word	0x00b71b00

004054f8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4054f8:	b580      	push	{r7, lr}
  4054fa:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4054fc:	2006      	movs	r0, #6
  4054fe:	4b04      	ldr	r3, [pc, #16]	; (405510 <sysclk_get_main_hz+0x18>)
  405500:	4798      	blx	r3
  405502:	4602      	mov	r2, r0
  405504:	4613      	mov	r3, r2
  405506:	009b      	lsls	r3, r3, #2
  405508:	4413      	add	r3, r2
  40550a:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40550c:	4618      	mov	r0, r3
  40550e:	bd80      	pop	{r7, pc}
  405510:	00405485 	.word	0x00405485

00405514 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  405514:	b580      	push	{r7, lr}
  405516:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  405518:	4b02      	ldr	r3, [pc, #8]	; (405524 <sysclk_get_cpu_hz+0x10>)
  40551a:	4798      	blx	r3
  40551c:	4603      	mov	r3, r0
  40551e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  405520:	4618      	mov	r0, r3
  405522:	bd80      	pop	{r7, pc}
  405524:	004054f9 	.word	0x004054f9

00405528 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
  405528:	b480      	push	{r7}
  40552a:	b085      	sub	sp, #20
  40552c:	af00      	add	r7, sp, #0
  40552e:	60f8      	str	r0, [r7, #12]
  405530:	60b9      	str	r1, [r7, #8]
  405532:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
  405534:	68fb      	ldr	r3, [r7, #12]
  405536:	3b04      	subs	r3, #4
  405538:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  40553a:	68fb      	ldr	r3, [r7, #12]
  40553c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  405540:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  405542:	68fb      	ldr	r3, [r7, #12]
  405544:	3b04      	subs	r3, #4
  405546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
  405548:	68ba      	ldr	r2, [r7, #8]
  40554a:	68fb      	ldr	r3, [r7, #12]
  40554c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  40554e:	68fb      	ldr	r3, [r7, #12]
  405550:	3b04      	subs	r3, #4
  405552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
  405554:	68fb      	ldr	r3, [r7, #12]
  405556:	2200      	movs	r2, #0
  405558:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  40555a:	68fb      	ldr	r3, [r7, #12]
  40555c:	3b14      	subs	r3, #20
  40555e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
  405560:	687a      	ldr	r2, [r7, #4]
  405562:	68fb      	ldr	r3, [r7, #12]
  405564:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
  405566:	68fb      	ldr	r3, [r7, #12]
  405568:	3b20      	subs	r3, #32
  40556a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
  40556c:	68fb      	ldr	r3, [r7, #12]
}
  40556e:	4618      	mov	r0, r3
  405570:	3714      	adds	r7, #20
  405572:	46bd      	mov	sp, r7
  405574:	bc80      	pop	{r7}
  405576:	4770      	bx	lr

00405578 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
  405578:	4b06      	ldr	r3, [pc, #24]	; (405594 <pxCurrentTCBConst2>)
  40557a:	6819      	ldr	r1, [r3, #0]
  40557c:	6808      	ldr	r0, [r1, #0]
  40557e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  405582:	f380 8809 	msr	PSP, r0
  405586:	f04f 0000 	mov.w	r0, #0
  40558a:	f380 8811 	msr	BASEPRI, r0
  40558e:	f04e 0e0d 	orr.w	lr, lr, #13
  405592:	4770      	bx	lr

00405594 <pxCurrentTCBConst2>:
  405594:	200025f4 	.word	0x200025f4
					"	bx r14							\n"
					"									\n"
					"	.align 2						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
  405598:	bf00      	nop
  40559a:	bf00      	nop

0040559c <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  40559c:	4804      	ldr	r0, [pc, #16]	; (4055b0 <prvPortStartFirstTask+0x14>)
  40559e:	6800      	ldr	r0, [r0, #0]
  4055a0:	6800      	ldr	r0, [r0, #0]
  4055a2:	f380 8808 	msr	MSP, r0
  4055a6:	b662      	cpsie	i
  4055a8:	df00      	svc	0
  4055aa:	bf00      	nop
					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
					" cpsie i				\n" /* Globally enable interrupts. */
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
  4055ac:	bf00      	nop
  4055ae:	0000      	.short	0x0000
  4055b0:	e000ed08 	.word	0xe000ed08

004055b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
  4055b4:	b580      	push	{r7, lr}
  4055b6:	af00      	add	r7, sp, #0
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4055b8:	4a0a      	ldr	r2, [pc, #40]	; (4055e4 <xPortStartScheduler+0x30>)
  4055ba:	4b0a      	ldr	r3, [pc, #40]	; (4055e4 <xPortStartScheduler+0x30>)
  4055bc:	681b      	ldr	r3, [r3, #0]
  4055be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4055c2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4055c4:	4a07      	ldr	r2, [pc, #28]	; (4055e4 <xPortStartScheduler+0x30>)
  4055c6:	4b07      	ldr	r3, [pc, #28]	; (4055e4 <xPortStartScheduler+0x30>)
  4055c8:	681b      	ldr	r3, [r3, #0]
  4055ca:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
  4055ce:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  4055d0:	4b05      	ldr	r3, [pc, #20]	; (4055e8 <xPortStartScheduler+0x34>)
  4055d2:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  4055d4:	4b05      	ldr	r3, [pc, #20]	; (4055ec <xPortStartScheduler+0x38>)
  4055d6:	2200      	movs	r2, #0
  4055d8:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  4055da:	4b05      	ldr	r3, [pc, #20]	; (4055f0 <xPortStartScheduler+0x3c>)
  4055dc:	4798      	blx	r3

	/* Should not get here! */
	return 0;
  4055de:	2300      	movs	r3, #0
}
  4055e0:	4618      	mov	r0, r3
  4055e2:	bd80      	pop	{r7, pc}
  4055e4:	e000ed20 	.word	0xe000ed20
  4055e8:	004056e1 	.word	0x004056e1
  4055ec:	20000038 	.word	0x20000038
  4055f0:	0040559d 	.word	0x0040559d

004055f4 <vPortYieldFromISR>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
  4055f4:	b480      	push	{r7}
  4055f6:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4055f8:	4b03      	ldr	r3, [pc, #12]	; (405608 <vPortYieldFromISR+0x14>)
  4055fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4055fe:	601a      	str	r2, [r3, #0]
}
  405600:	bf00      	nop
  405602:	46bd      	mov	sp, r7
  405604:	bc80      	pop	{r7}
  405606:	4770      	bx	lr
  405608:	e000ed04 	.word	0xe000ed04

0040560c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  40560c:	b580      	push	{r7, lr}
  40560e:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
  405610:	4b04      	ldr	r3, [pc, #16]	; (405624 <vPortEnterCritical+0x18>)
  405612:	4798      	blx	r3
	uxCriticalNesting++;
  405614:	4b04      	ldr	r3, [pc, #16]	; (405628 <vPortEnterCritical+0x1c>)
  405616:	681b      	ldr	r3, [r3, #0]
  405618:	3301      	adds	r3, #1
  40561a:	4a03      	ldr	r2, [pc, #12]	; (405628 <vPortEnterCritical+0x1c>)
  40561c:	6013      	str	r3, [r2, #0]
}
  40561e:	bf00      	nop
  405620:	bd80      	pop	{r7, pc}
  405622:	bf00      	nop
  405624:	00405655 	.word	0x00405655
  405628:	20000038 	.word	0x20000038

0040562c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  40562c:	b580      	push	{r7, lr}
  40562e:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
  405630:	4b06      	ldr	r3, [pc, #24]	; (40564c <vPortExitCritical+0x20>)
  405632:	681b      	ldr	r3, [r3, #0]
  405634:	3b01      	subs	r3, #1
  405636:	4a05      	ldr	r2, [pc, #20]	; (40564c <vPortExitCritical+0x20>)
  405638:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  40563a:	4b04      	ldr	r3, [pc, #16]	; (40564c <vPortExitCritical+0x20>)
  40563c:	681b      	ldr	r3, [r3, #0]
  40563e:	2b00      	cmp	r3, #0
  405640:	d102      	bne.n	405648 <vPortExitCritical+0x1c>
	{
		portENABLE_INTERRUPTS();
  405642:	2000      	movs	r0, #0
  405644:	4b02      	ldr	r3, [pc, #8]	; (405650 <vPortExitCritical+0x24>)
  405646:	4798      	blx	r3
	}
}
  405648:	bf00      	nop
  40564a:	bd80      	pop	{r7, pc}
  40564c:	20000038 	.word	0x20000038
  405650:	00405669 	.word	0x00405669

00405654 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
  405654:	f3ef 8011 	mrs	r0, BASEPRI
  405658:	f04f 01a0 	mov.w	r1, #160	; 0xa0
  40565c:	f381 8811 	msr	BASEPRI, r1
  405660:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
  405662:	2300      	movs	r3, #0
}
  405664:	4618      	mov	r0, r3
  405666:	bf00      	nop

00405668 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
  405668:	f380 8811 	msr	BASEPRI, r0
  40566c:	4770      	bx	lr
		:::"r0"														\
	);
	
	/* Just to avoid compiler warnings. */
	( void ) ulNewMaskValue;
}
  40566e:	bf00      	nop

00405670 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
  405670:	f3ef 8009 	mrs	r0, PSP
  405674:	4b0c      	ldr	r3, [pc, #48]	; (4056a8 <pxCurrentTCBConst>)
  405676:	681a      	ldr	r2, [r3, #0]
  405678:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40567c:	6010      	str	r0, [r2, #0]
  40567e:	e92d 4008 	stmdb	sp!, {r3, lr}
  405682:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  405686:	f380 8811 	msr	BASEPRI, r0
  40568a:	f001 f829 	bl	4066e0 <vTaskSwitchContext>
  40568e:	f04f 0000 	mov.w	r0, #0
  405692:	f380 8811 	msr	BASEPRI, r0
  405696:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  40569a:	6819      	ldr	r1, [r3, #0]
  40569c:	6808      	ldr	r0, [r1, #0]
  40569e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4056a2:	f380 8809 	msr	PSP, r0
  4056a6:	4770      	bx	lr

004056a8 <pxCurrentTCBConst>:
  4056a8:	200025f4 	.word	0x200025f4
	"										\n"
	"	.align 2							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
  4056ac:	bf00      	nop
  4056ae:	bf00      	nop

004056b0 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
  4056b0:	b580      	push	{r7, lr}
  4056b2:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4056b4:	4b06      	ldr	r3, [pc, #24]	; (4056d0 <SysTick_Handler+0x20>)
  4056b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4056ba:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
  4056bc:	4b05      	ldr	r3, [pc, #20]	; (4056d4 <SysTick_Handler+0x24>)
  4056be:	4798      	blx	r3
	{
		vTaskIncrementTick();
  4056c0:	4b05      	ldr	r3, [pc, #20]	; (4056d8 <SysTick_Handler+0x28>)
  4056c2:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  4056c4:	2000      	movs	r0, #0
  4056c6:	4b05      	ldr	r3, [pc, #20]	; (4056dc <SysTick_Handler+0x2c>)
  4056c8:	4798      	blx	r3
}
  4056ca:	bf00      	nop
  4056cc:	bd80      	pop	{r7, pc}
  4056ce:	bf00      	nop
  4056d0:	e000ed04 	.word	0xe000ed04
  4056d4:	00405655 	.word	0x00405655
  4056d8:	00406595 	.word	0x00406595
  4056dc:	00405669 	.word	0x00405669

004056e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
  4056e0:	b598      	push	{r3, r4, r7, lr}
  4056e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
  4056e4:	4c07      	ldr	r4, [pc, #28]	; (405704 <vPortSetupTimerInterrupt+0x24>)
  4056e6:	4b08      	ldr	r3, [pc, #32]	; (405708 <vPortSetupTimerInterrupt+0x28>)
  4056e8:	4798      	blx	r3
  4056ea:	4602      	mov	r2, r0
  4056ec:	4b07      	ldr	r3, [pc, #28]	; (40570c <vPortSetupTimerInterrupt+0x2c>)
  4056ee:	fba3 2302 	umull	r2, r3, r3, r2
  4056f2:	099b      	lsrs	r3, r3, #6
  4056f4:	3b01      	subs	r3, #1
  4056f6:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
  4056f8:	4b05      	ldr	r3, [pc, #20]	; (405710 <vPortSetupTimerInterrupt+0x30>)
  4056fa:	2207      	movs	r2, #7
  4056fc:	601a      	str	r2, [r3, #0]
}
  4056fe:	bf00      	nop
  405700:	bd98      	pop	{r3, r4, r7, pc}
  405702:	bf00      	nop
  405704:	e000e014 	.word	0xe000e014
  405708:	00405515 	.word	0x00405515
  40570c:	51eb851f 	.word	0x51eb851f
  405710:	e000e010 	.word	0xe000e010

00405714 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
  405714:	b580      	push	{r7, lr}
  405716:	b086      	sub	sp, #24
  405718:	af00      	add	r7, sp, #0
  40571a:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
  40571c:	2300      	movs	r3, #0
  40571e:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
  405720:	4b37      	ldr	r3, [pc, #220]	; (405800 <pvPortMalloc+0xec>)
  405722:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  405724:	4b37      	ldr	r3, [pc, #220]	; (405804 <pvPortMalloc+0xf0>)
  405726:	681b      	ldr	r3, [r3, #0]
  405728:	2b00      	cmp	r3, #0
  40572a:	d101      	bne.n	405730 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
  40572c:	4b36      	ldr	r3, [pc, #216]	; (405808 <pvPortMalloc+0xf4>)
  40572e:	4798      	blx	r3
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
  405730:	687b      	ldr	r3, [r7, #4]
  405732:	2b00      	cmp	r3, #0
  405734:	d00e      	beq.n	405754 <pvPortMalloc+0x40>
		{
			xWantedSize += heapSTRUCT_SIZE;
  405736:	2310      	movs	r3, #16
  405738:	461a      	mov	r2, r3
  40573a:	687b      	ldr	r3, [r7, #4]
  40573c:	4413      	add	r3, r2
  40573e:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  405740:	687b      	ldr	r3, [r7, #4]
  405742:	f003 0307 	and.w	r3, r3, #7
  405746:	2b00      	cmp	r3, #0
  405748:	d004      	beq.n	405754 <pvPortMalloc+0x40>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  40574a:	687b      	ldr	r3, [r7, #4]
  40574c:	f023 0307 	bic.w	r3, r3, #7
  405750:	3308      	adds	r3, #8
  405752:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
  405754:	687b      	ldr	r3, [r7, #4]
  405756:	2b00      	cmp	r3, #0
  405758:	d045      	beq.n	4057e6 <pvPortMalloc+0xd2>
  40575a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40575e:	687b      	ldr	r3, [r7, #4]
  405760:	4293      	cmp	r3, r2
  405762:	d240      	bcs.n	4057e6 <pvPortMalloc+0xd2>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
  405764:	4b29      	ldr	r3, [pc, #164]	; (40580c <pvPortMalloc+0xf8>)
  405766:	613b      	str	r3, [r7, #16]
			pxBlock = xStart.pxNextFreeBlock;
  405768:	4b28      	ldr	r3, [pc, #160]	; (40580c <pvPortMalloc+0xf8>)
  40576a:	681b      	ldr	r3, [r3, #0]
  40576c:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  40576e:	e004      	b.n	40577a <pvPortMalloc+0x66>
			{
				pxPreviousBlock = pxBlock;
  405770:	697b      	ldr	r3, [r7, #20]
  405772:	613b      	str	r3, [r7, #16]
				pxBlock = pxBlock->pxNextFreeBlock;
  405774:	697b      	ldr	r3, [r7, #20]
  405776:	681b      	ldr	r3, [r3, #0]
  405778:	617b      	str	r3, [r7, #20]
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  40577a:	697b      	ldr	r3, [r7, #20]
  40577c:	685a      	ldr	r2, [r3, #4]
  40577e:	687b      	ldr	r3, [r7, #4]
  405780:	429a      	cmp	r2, r3
  405782:	d203      	bcs.n	40578c <pvPortMalloc+0x78>
  405784:	697b      	ldr	r3, [r7, #20]
  405786:	681b      	ldr	r3, [r3, #0]
  405788:	2b00      	cmp	r3, #0
  40578a:	d1f1      	bne.n	405770 <pvPortMalloc+0x5c>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
  40578c:	4b1d      	ldr	r3, [pc, #116]	; (405804 <pvPortMalloc+0xf0>)
  40578e:	681b      	ldr	r3, [r3, #0]
  405790:	697a      	ldr	r2, [r7, #20]
  405792:	429a      	cmp	r2, r3
  405794:	d027      	beq.n	4057e6 <pvPortMalloc+0xd2>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  405796:	693b      	ldr	r3, [r7, #16]
  405798:	681b      	ldr	r3, [r3, #0]
  40579a:	2210      	movs	r2, #16
  40579c:	4413      	add	r3, r2
  40579e:	60fb      	str	r3, [r7, #12]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  4057a0:	697b      	ldr	r3, [r7, #20]
  4057a2:	681a      	ldr	r2, [r3, #0]
  4057a4:	693b      	ldr	r3, [r7, #16]
  4057a6:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  4057a8:	697b      	ldr	r3, [r7, #20]
  4057aa:	685a      	ldr	r2, [r3, #4]
  4057ac:	687b      	ldr	r3, [r7, #4]
  4057ae:	1ad3      	subs	r3, r2, r3
  4057b0:	2210      	movs	r2, #16
  4057b2:	0052      	lsls	r2, r2, #1
  4057b4:	4293      	cmp	r3, r2
  4057b6:	d90f      	bls.n	4057d8 <pvPortMalloc+0xc4>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
  4057b8:	697a      	ldr	r2, [r7, #20]
  4057ba:	687b      	ldr	r3, [r7, #4]
  4057bc:	4413      	add	r3, r2
  4057be:	60bb      	str	r3, [r7, #8]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  4057c0:	697b      	ldr	r3, [r7, #20]
  4057c2:	685a      	ldr	r2, [r3, #4]
  4057c4:	687b      	ldr	r3, [r7, #4]
  4057c6:	1ad2      	subs	r2, r2, r3
  4057c8:	68bb      	ldr	r3, [r7, #8]
  4057ca:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
  4057cc:	697b      	ldr	r3, [r7, #20]
  4057ce:	687a      	ldr	r2, [r7, #4]
  4057d0:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  4057d2:	68b8      	ldr	r0, [r7, #8]
  4057d4:	4b0e      	ldr	r3, [pc, #56]	; (405810 <pvPortMalloc+0xfc>)
  4057d6:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
  4057d8:	4b0e      	ldr	r3, [pc, #56]	; (405814 <pvPortMalloc+0x100>)
  4057da:	681a      	ldr	r2, [r3, #0]
  4057dc:	697b      	ldr	r3, [r7, #20]
  4057de:	685b      	ldr	r3, [r3, #4]
  4057e0:	1ad3      	subs	r3, r2, r3
  4057e2:	4a0c      	ldr	r2, [pc, #48]	; (405814 <pvPortMalloc+0x100>)
  4057e4:	6013      	str	r3, [r2, #0]
			}
		}
	}
	xTaskResumeAll();
  4057e6:	4b0c      	ldr	r3, [pc, #48]	; (405818 <pvPortMalloc+0x104>)
  4057e8:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  4057ea:	68fb      	ldr	r3, [r7, #12]
  4057ec:	2b00      	cmp	r3, #0
  4057ee:	d101      	bne.n	4057f4 <pvPortMalloc+0xe0>
		{
			vApplicationMallocFailedHook();
  4057f0:	4b0a      	ldr	r3, [pc, #40]	; (40581c <pvPortMalloc+0x108>)
  4057f2:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
  4057f4:	68fb      	ldr	r3, [r7, #12]
}
  4057f6:	4618      	mov	r0, r3
  4057f8:	3718      	adds	r7, #24
  4057fa:	46bd      	mov	sp, r7
  4057fc:	bd80      	pop	{r7, pc}
  4057fe:	bf00      	nop
  405800:	0040642d 	.word	0x0040642d
  405804:	200025f0 	.word	0x200025f0
  405808:	00405875 	.word	0x00405875
  40580c:	200025e8 	.word	0x200025e8
  405810:	00405905 	.word	0x00405905
  405814:	2000003c 	.word	0x2000003c
  405818:	00406449 	.word	0x00406449
  40581c:	00407bd1 	.word	0x00407bd1

00405820 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  405820:	b580      	push	{r7, lr}
  405822:	b084      	sub	sp, #16
  405824:	af00      	add	r7, sp, #0
  405826:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
  405828:	687b      	ldr	r3, [r7, #4]
  40582a:	60fb      	str	r3, [r7, #12]
xBlockLink *pxLink;

	if( pv != NULL )
  40582c:	687b      	ldr	r3, [r7, #4]
  40582e:	2b00      	cmp	r3, #0
  405830:	d014      	beq.n	40585c <vPortFree+0x3c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
  405832:	2310      	movs	r3, #16
  405834:	425b      	negs	r3, r3
  405836:	68fa      	ldr	r2, [r7, #12]
  405838:	4413      	add	r3, r2
  40583a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
  40583c:	68fb      	ldr	r3, [r7, #12]
  40583e:	60bb      	str	r3, [r7, #8]

		vTaskSuspendAll();
  405840:	4b08      	ldr	r3, [pc, #32]	; (405864 <vPortFree+0x44>)
  405842:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
  405844:	68bb      	ldr	r3, [r7, #8]
  405846:	685a      	ldr	r2, [r3, #4]
  405848:	4b07      	ldr	r3, [pc, #28]	; (405868 <vPortFree+0x48>)
  40584a:	681b      	ldr	r3, [r3, #0]
  40584c:	4413      	add	r3, r2
  40584e:	4a06      	ldr	r2, [pc, #24]	; (405868 <vPortFree+0x48>)
  405850:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
  405852:	68b8      	ldr	r0, [r7, #8]
  405854:	4b05      	ldr	r3, [pc, #20]	; (40586c <vPortFree+0x4c>)
  405856:	4798      	blx	r3
		}
		xTaskResumeAll();
  405858:	4b05      	ldr	r3, [pc, #20]	; (405870 <vPortFree+0x50>)
  40585a:	4798      	blx	r3
	}
}
  40585c:	bf00      	nop
  40585e:	3710      	adds	r7, #16
  405860:	46bd      	mov	sp, r7
  405862:	bd80      	pop	{r7, pc}
  405864:	0040642d 	.word	0x0040642d
  405868:	2000003c 	.word	0x2000003c
  40586c:	00405905 	.word	0x00405905
  405870:	00406449 	.word	0x00406449

00405874 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
  405874:	b580      	push	{r7, lr}
  405876:	b082      	sub	sp, #8
  405878:	af00      	add	r7, sp, #0
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
  40587a:	4b1d      	ldr	r3, [pc, #116]	; (4058f0 <prvHeapInit+0x7c>)
  40587c:	4a1d      	ldr	r2, [pc, #116]	; (4058f4 <prvHeapInit+0x80>)
  40587e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
  405880:	4b1b      	ldr	r3, [pc, #108]	; (4058f0 <prvHeapInit+0x7c>)
  405882:	2200      	movs	r2, #0
  405884:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
  405886:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40588a:	4b1a      	ldr	r3, [pc, #104]	; (4058f4 <prvHeapInit+0x80>)
  40588c:	4413      	add	r3, r2
  40588e:	607b      	str	r3, [r7, #4]
	pucHeapEnd -= heapSTRUCT_SIZE;
  405890:	2310      	movs	r3, #16
  405892:	425b      	negs	r3, r3
  405894:	687a      	ldr	r2, [r7, #4]
  405896:	4413      	add	r3, r2
  405898:	607b      	str	r3, [r7, #4]
	pxEnd = ( void * ) pucHeapEnd;
  40589a:	4a17      	ldr	r2, [pc, #92]	; (4058f8 <prvHeapInit+0x84>)
  40589c:	687b      	ldr	r3, [r7, #4]
  40589e:	6013      	str	r3, [r2, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
  4058a0:	4b15      	ldr	r3, [pc, #84]	; (4058f8 <prvHeapInit+0x84>)
  4058a2:	681b      	ldr	r3, [r3, #0]
  4058a4:	f003 0307 	and.w	r3, r3, #7
  4058a8:	2b00      	cmp	r3, #0
  4058aa:	d003      	beq.n	4058b4 <prvHeapInit+0x40>
  4058ac:	4b13      	ldr	r3, [pc, #76]	; (4058fc <prvHeapInit+0x88>)
  4058ae:	4798      	blx	r3
  4058b0:	bf00      	nop
  4058b2:	e7fd      	b.n	4058b0 <prvHeapInit+0x3c>
	pxEnd->xBlockSize = 0;
  4058b4:	4b10      	ldr	r3, [pc, #64]	; (4058f8 <prvHeapInit+0x84>)
  4058b6:	681b      	ldr	r3, [r3, #0]
  4058b8:	2200      	movs	r2, #0
  4058ba:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
  4058bc:	4b0e      	ldr	r3, [pc, #56]	; (4058f8 <prvHeapInit+0x84>)
  4058be:	681b      	ldr	r3, [r3, #0]
  4058c0:	2200      	movs	r2, #0
  4058c2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
  4058c4:	4b0b      	ldr	r3, [pc, #44]	; (4058f4 <prvHeapInit+0x80>)
  4058c6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
  4058c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4058cc:	2210      	movs	r2, #16
  4058ce:	1a9a      	subs	r2, r3, r2
  4058d0:	683b      	ldr	r3, [r7, #0]
  4058d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  4058d4:	4b08      	ldr	r3, [pc, #32]	; (4058f8 <prvHeapInit+0x84>)
  4058d6:	681a      	ldr	r2, [r3, #0]
  4058d8:	683b      	ldr	r3, [r7, #0]
  4058da:	601a      	str	r2, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
  4058dc:	4b08      	ldr	r3, [pc, #32]	; (405900 <prvHeapInit+0x8c>)
  4058de:	681b      	ldr	r3, [r3, #0]
  4058e0:	2210      	movs	r2, #16
  4058e2:	1a9b      	subs	r3, r3, r2
  4058e4:	4a06      	ldr	r2, [pc, #24]	; (405900 <prvHeapInit+0x8c>)
  4058e6:	6013      	str	r3, [r2, #0]
}
  4058e8:	bf00      	nop
  4058ea:	3708      	adds	r7, #8
  4058ec:	46bd      	mov	sp, r7
  4058ee:	bd80      	pop	{r7, pc}
  4058f0:	200025e8 	.word	0x200025e8
  4058f4:	200005e8 	.word	0x200005e8
  4058f8:	200025f0 	.word	0x200025f0
  4058fc:	00405655 	.word	0x00405655
  405900:	2000003c 	.word	0x2000003c

00405904 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
  405904:	b480      	push	{r7}
  405906:	b085      	sub	sp, #20
  405908:	af00      	add	r7, sp, #0
  40590a:	6078      	str	r0, [r7, #4]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  40590c:	4b27      	ldr	r3, [pc, #156]	; (4059ac <prvInsertBlockIntoFreeList+0xa8>)
  40590e:	60fb      	str	r3, [r7, #12]
  405910:	e002      	b.n	405918 <prvInsertBlockIntoFreeList+0x14>
  405912:	68fb      	ldr	r3, [r7, #12]
  405914:	681b      	ldr	r3, [r3, #0]
  405916:	60fb      	str	r3, [r7, #12]
  405918:	68fb      	ldr	r3, [r7, #12]
  40591a:	681a      	ldr	r2, [r3, #0]
  40591c:	687b      	ldr	r3, [r7, #4]
  40591e:	429a      	cmp	r2, r3
  405920:	d3f7      	bcc.n	405912 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
  405922:	68fb      	ldr	r3, [r7, #12]
  405924:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
  405926:	68fb      	ldr	r3, [r7, #12]
  405928:	685b      	ldr	r3, [r3, #4]
  40592a:	68ba      	ldr	r2, [r7, #8]
  40592c:	441a      	add	r2, r3
  40592e:	687b      	ldr	r3, [r7, #4]
  405930:	429a      	cmp	r2, r3
  405932:	d108      	bne.n	405946 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  405934:	68fb      	ldr	r3, [r7, #12]
  405936:	685a      	ldr	r2, [r3, #4]
  405938:	687b      	ldr	r3, [r7, #4]
  40593a:	685b      	ldr	r3, [r3, #4]
  40593c:	441a      	add	r2, r3
  40593e:	68fb      	ldr	r3, [r7, #12]
  405940:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
  405942:	68fb      	ldr	r3, [r7, #12]
  405944:	607b      	str	r3, [r7, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
  405946:	687b      	ldr	r3, [r7, #4]
  405948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
  40594a:	687b      	ldr	r3, [r7, #4]
  40594c:	685b      	ldr	r3, [r3, #4]
  40594e:	68ba      	ldr	r2, [r7, #8]
  405950:	441a      	add	r2, r3
  405952:	68fb      	ldr	r3, [r7, #12]
  405954:	681b      	ldr	r3, [r3, #0]
  405956:	429a      	cmp	r2, r3
  405958:	d118      	bne.n	40598c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  40595a:	68fb      	ldr	r3, [r7, #12]
  40595c:	681a      	ldr	r2, [r3, #0]
  40595e:	4b14      	ldr	r3, [pc, #80]	; (4059b0 <prvInsertBlockIntoFreeList+0xac>)
  405960:	681b      	ldr	r3, [r3, #0]
  405962:	429a      	cmp	r2, r3
  405964:	d00d      	beq.n	405982 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  405966:	687b      	ldr	r3, [r7, #4]
  405968:	685a      	ldr	r2, [r3, #4]
  40596a:	68fb      	ldr	r3, [r7, #12]
  40596c:	681b      	ldr	r3, [r3, #0]
  40596e:	685b      	ldr	r3, [r3, #4]
  405970:	441a      	add	r2, r3
  405972:	687b      	ldr	r3, [r7, #4]
  405974:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  405976:	68fb      	ldr	r3, [r7, #12]
  405978:	681b      	ldr	r3, [r3, #0]
  40597a:	681a      	ldr	r2, [r3, #0]
  40597c:	687b      	ldr	r3, [r7, #4]
  40597e:	601a      	str	r2, [r3, #0]
  405980:	e008      	b.n	405994 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  405982:	4b0b      	ldr	r3, [pc, #44]	; (4059b0 <prvInsertBlockIntoFreeList+0xac>)
  405984:	681a      	ldr	r2, [r3, #0]
  405986:	687b      	ldr	r3, [r7, #4]
  405988:	601a      	str	r2, [r3, #0]
  40598a:	e003      	b.n	405994 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
  40598c:	68fb      	ldr	r3, [r7, #12]
  40598e:	681a      	ldr	r2, [r3, #0]
  405990:	687b      	ldr	r3, [r7, #4]
  405992:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  405994:	68fa      	ldr	r2, [r7, #12]
  405996:	687b      	ldr	r3, [r7, #4]
  405998:	429a      	cmp	r2, r3
  40599a:	d002      	beq.n	4059a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  40599c:	68fb      	ldr	r3, [r7, #12]
  40599e:	687a      	ldr	r2, [r7, #4]
  4059a0:	601a      	str	r2, [r3, #0]
	}
}
  4059a2:	bf00      	nop
  4059a4:	3714      	adds	r7, #20
  4059a6:	46bd      	mov	sp, r7
  4059a8:	bc80      	pop	{r7}
  4059aa:	4770      	bx	lr
  4059ac:	200025e8 	.word	0x200025e8
  4059b0:	200025f0 	.word	0x200025f0

004059b4 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
  4059b4:	b580      	push	{r7, lr}
  4059b6:	b082      	sub	sp, #8
  4059b8:	af00      	add	r7, sp, #0
  4059ba:	6078      	str	r0, [r7, #4]
  4059bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxQueue );
  4059be:	687b      	ldr	r3, [r7, #4]
  4059c0:	2b00      	cmp	r3, #0
  4059c2:	d103      	bne.n	4059cc <xQueueGenericReset+0x18>
  4059c4:	4b27      	ldr	r3, [pc, #156]	; (405a64 <xQueueGenericReset+0xb0>)
  4059c6:	4798      	blx	r3
  4059c8:	bf00      	nop
  4059ca:	e7fd      	b.n	4059c8 <xQueueGenericReset+0x14>

	taskENTER_CRITICAL();
  4059cc:	4b26      	ldr	r3, [pc, #152]	; (405a68 <xQueueGenericReset+0xb4>)
  4059ce:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4059d0:	687b      	ldr	r3, [r7, #4]
  4059d2:	681a      	ldr	r2, [r3, #0]
  4059d4:	687b      	ldr	r3, [r7, #4]
  4059d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4059d8:	6879      	ldr	r1, [r7, #4]
  4059da:	6c09      	ldr	r1, [r1, #64]	; 0x40
  4059dc:	fb01 f303 	mul.w	r3, r1, r3
  4059e0:	441a      	add	r2, r3
  4059e2:	687b      	ldr	r3, [r7, #4]
  4059e4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  4059e6:	687b      	ldr	r3, [r7, #4]
  4059e8:	2200      	movs	r2, #0
  4059ea:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4059ec:	687b      	ldr	r3, [r7, #4]
  4059ee:	681a      	ldr	r2, [r3, #0]
  4059f0:	687b      	ldr	r3, [r7, #4]
  4059f2:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
  4059f4:	687b      	ldr	r3, [r7, #4]
  4059f6:	681a      	ldr	r2, [r3, #0]
  4059f8:	687b      	ldr	r3, [r7, #4]
  4059fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4059fc:	3b01      	subs	r3, #1
  4059fe:	6879      	ldr	r1, [r7, #4]
  405a00:	6c09      	ldr	r1, [r1, #64]	; 0x40
  405a02:	fb01 f303 	mul.w	r3, r1, r3
  405a06:	441a      	add	r2, r3
  405a08:	687b      	ldr	r3, [r7, #4]
  405a0a:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  405a0c:	687b      	ldr	r3, [r7, #4]
  405a0e:	f04f 32ff 	mov.w	r2, #4294967295
  405a12:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  405a14:	687b      	ldr	r3, [r7, #4]
  405a16:	f04f 32ff 	mov.w	r2, #4294967295
  405a1a:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  405a1c:	683b      	ldr	r3, [r7, #0]
  405a1e:	2b00      	cmp	r3, #0
  405a20:	d10e      	bne.n	405a40 <xQueueGenericReset+0x8c>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  405a22:	687b      	ldr	r3, [r7, #4]
  405a24:	691b      	ldr	r3, [r3, #16]
  405a26:	2b00      	cmp	r3, #0
  405a28:	d014      	beq.n	405a54 <xQueueGenericReset+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  405a2a:	687b      	ldr	r3, [r7, #4]
  405a2c:	3310      	adds	r3, #16
  405a2e:	4618      	mov	r0, r3
  405a30:	4b0e      	ldr	r3, [pc, #56]	; (405a6c <xQueueGenericReset+0xb8>)
  405a32:	4798      	blx	r3
  405a34:	4603      	mov	r3, r0
  405a36:	2b01      	cmp	r3, #1
  405a38:	d10c      	bne.n	405a54 <xQueueGenericReset+0xa0>
				{
					portYIELD_WITHIN_API();
  405a3a:	4b0d      	ldr	r3, [pc, #52]	; (405a70 <xQueueGenericReset+0xbc>)
  405a3c:	4798      	blx	r3
  405a3e:	e009      	b.n	405a54 <xQueueGenericReset+0xa0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  405a40:	687b      	ldr	r3, [r7, #4]
  405a42:	3310      	adds	r3, #16
  405a44:	4618      	mov	r0, r3
  405a46:	4b0b      	ldr	r3, [pc, #44]	; (405a74 <xQueueGenericReset+0xc0>)
  405a48:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  405a4a:	687b      	ldr	r3, [r7, #4]
  405a4c:	3324      	adds	r3, #36	; 0x24
  405a4e:	4618      	mov	r0, r3
  405a50:	4b08      	ldr	r3, [pc, #32]	; (405a74 <xQueueGenericReset+0xc0>)
  405a52:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
  405a54:	4b08      	ldr	r3, [pc, #32]	; (405a78 <xQueueGenericReset+0xc4>)
  405a56:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
  405a58:	2301      	movs	r3, #1
}
  405a5a:	4618      	mov	r0, r3
  405a5c:	3708      	adds	r7, #8
  405a5e:	46bd      	mov	sp, r7
  405a60:	bd80      	pop	{r7, pc}
  405a62:	bf00      	nop
  405a64:	00405655 	.word	0x00405655
  405a68:	0040560d 	.word	0x0040560d
  405a6c:	004068c5 	.word	0x004068c5
  405a70:	004055f5 	.word	0x004055f5
  405a74:	00405319 	.word	0x00405319
  405a78:	0040562d 	.word	0x0040562d

00405a7c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
  405a7c:	b580      	push	{r7, lr}
  405a7e:	b088      	sub	sp, #32
  405a80:	af00      	add	r7, sp, #0
  405a82:	60f8      	str	r0, [r7, #12]
  405a84:	60b9      	str	r1, [r7, #8]
  405a86:	4613      	mov	r3, r2
  405a88:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
  405a8a:	2300      	movs	r3, #0
  405a8c:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  405a8e:	68fb      	ldr	r3, [r7, #12]
  405a90:	2b00      	cmp	r3, #0
  405a92:	d026      	beq.n	405ae2 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  405a94:	204c      	movs	r0, #76	; 0x4c
  405a96:	4b19      	ldr	r3, [pc, #100]	; (405afc <xQueueGenericCreate+0x80>)
  405a98:	4798      	blx	r3
  405a9a:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
  405a9c:	69bb      	ldr	r3, [r7, #24]
  405a9e:	2b00      	cmp	r3, #0
  405aa0:	d01f      	beq.n	405ae2 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  405aa2:	68fb      	ldr	r3, [r7, #12]
  405aa4:	68ba      	ldr	r2, [r7, #8]
  405aa6:	fb02 f303 	mul.w	r3, r2, r3
  405aaa:	3301      	adds	r3, #1
  405aac:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  405aae:	6978      	ldr	r0, [r7, #20]
  405ab0:	4b12      	ldr	r3, [pc, #72]	; (405afc <xQueueGenericCreate+0x80>)
  405ab2:	4798      	blx	r3
  405ab4:	4602      	mov	r2, r0
  405ab6:	69bb      	ldr	r3, [r7, #24]
  405ab8:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
  405aba:	69bb      	ldr	r3, [r7, #24]
  405abc:	681b      	ldr	r3, [r3, #0]
  405abe:	2b00      	cmp	r3, #0
  405ac0:	d00c      	beq.n	405adc <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
  405ac2:	69bb      	ldr	r3, [r7, #24]
  405ac4:	68fa      	ldr	r2, [r7, #12]
  405ac6:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  405ac8:	69bb      	ldr	r3, [r7, #24]
  405aca:	68ba      	ldr	r2, [r7, #8]
  405acc:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
  405ace:	2101      	movs	r1, #1
  405ad0:	69b8      	ldr	r0, [r7, #24]
  405ad2:	4b0b      	ldr	r3, [pc, #44]	; (405b00 <xQueueGenericCreate+0x84>)
  405ad4:	4798      	blx	r3
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
  405ad6:	69bb      	ldr	r3, [r7, #24]
  405ad8:	61fb      	str	r3, [r7, #28]
  405ada:	e002      	b.n	405ae2 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
  405adc:	69b8      	ldr	r0, [r7, #24]
  405ade:	4b09      	ldr	r3, [pc, #36]	; (405b04 <xQueueGenericCreate+0x88>)
  405ae0:	4798      	blx	r3
			}
		}
	}

	configASSERT( xReturn );
  405ae2:	69fb      	ldr	r3, [r7, #28]
  405ae4:	2b00      	cmp	r3, #0
  405ae6:	d103      	bne.n	405af0 <xQueueGenericCreate+0x74>
  405ae8:	4b07      	ldr	r3, [pc, #28]	; (405b08 <xQueueGenericCreate+0x8c>)
  405aea:	4798      	blx	r3
  405aec:	bf00      	nop
  405aee:	e7fd      	b.n	405aec <xQueueGenericCreate+0x70>

	return xReturn;
  405af0:	69fb      	ldr	r3, [r7, #28]
}
  405af2:	4618      	mov	r0, r3
  405af4:	3720      	adds	r7, #32
  405af6:	46bd      	mov	sp, r7
  405af8:	bd80      	pop	{r7, pc}
  405afa:	bf00      	nop
  405afc:	00405715 	.word	0x00405715
  405b00:	004059b5 	.word	0x004059b5
  405b04:	00405821 	.word	0x00405821
  405b08:	00405655 	.word	0x00405655

00405b0c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  405b0c:	b580      	push	{r7, lr}
  405b0e:	b088      	sub	sp, #32
  405b10:	af00      	add	r7, sp, #0
  405b12:	60f8      	str	r0, [r7, #12]
  405b14:	60b9      	str	r1, [r7, #8]
  405b16:	607a      	str	r2, [r7, #4]
  405b18:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  405b1a:	2300      	movs	r3, #0
  405b1c:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
  405b1e:	68fb      	ldr	r3, [r7, #12]
  405b20:	2b00      	cmp	r3, #0
  405b22:	d103      	bne.n	405b2c <xQueueGenericSend+0x20>
  405b24:	4b46      	ldr	r3, [pc, #280]	; (405c40 <xQueueGenericSend+0x134>)
  405b26:	4798      	blx	r3
  405b28:	bf00      	nop
  405b2a:	e7fd      	b.n	405b28 <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  405b2c:	68bb      	ldr	r3, [r7, #8]
  405b2e:	2b00      	cmp	r3, #0
  405b30:	d103      	bne.n	405b3a <xQueueGenericSend+0x2e>
  405b32:	68fb      	ldr	r3, [r7, #12]
  405b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405b36:	2b00      	cmp	r3, #0
  405b38:	d101      	bne.n	405b3e <xQueueGenericSend+0x32>
  405b3a:	2301      	movs	r3, #1
  405b3c:	e000      	b.n	405b40 <xQueueGenericSend+0x34>
  405b3e:	2300      	movs	r3, #0
  405b40:	2b00      	cmp	r3, #0
  405b42:	d103      	bne.n	405b4c <xQueueGenericSend+0x40>
  405b44:	4b3e      	ldr	r3, [pc, #248]	; (405c40 <xQueueGenericSend+0x134>)
  405b46:	4798      	blx	r3
  405b48:	bf00      	nop
  405b4a:	e7fd      	b.n	405b48 <xQueueGenericSend+0x3c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  405b4c:	4b3d      	ldr	r3, [pc, #244]	; (405c44 <xQueueGenericSend+0x138>)
  405b4e:	4798      	blx	r3
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  405b50:	68fb      	ldr	r3, [r7, #12]
  405b52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  405b54:	68fb      	ldr	r3, [r7, #12]
  405b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  405b58:	429a      	cmp	r2, r3
  405b5a:	d216      	bcs.n	405b8a <xQueueGenericSend+0x7e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  405b5c:	683a      	ldr	r2, [r7, #0]
  405b5e:	68b9      	ldr	r1, [r7, #8]
  405b60:	68f8      	ldr	r0, [r7, #12]
  405b62:	4b39      	ldr	r3, [pc, #228]	; (405c48 <xQueueGenericSend+0x13c>)
  405b64:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  405b66:	68fb      	ldr	r3, [r7, #12]
  405b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  405b6a:	2b00      	cmp	r3, #0
  405b6c:	d009      	beq.n	405b82 <xQueueGenericSend+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  405b6e:	68fb      	ldr	r3, [r7, #12]
  405b70:	3324      	adds	r3, #36	; 0x24
  405b72:	4618      	mov	r0, r3
  405b74:	4b35      	ldr	r3, [pc, #212]	; (405c4c <xQueueGenericSend+0x140>)
  405b76:	4798      	blx	r3
  405b78:	4603      	mov	r3, r0
  405b7a:	2b01      	cmp	r3, #1
  405b7c:	d101      	bne.n	405b82 <xQueueGenericSend+0x76>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  405b7e:	4b34      	ldr	r3, [pc, #208]	; (405c50 <xQueueGenericSend+0x144>)
  405b80:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  405b82:	4b34      	ldr	r3, [pc, #208]	; (405c54 <xQueueGenericSend+0x148>)
  405b84:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  405b86:	2301      	movs	r3, #1
  405b88:	e056      	b.n	405c38 <xQueueGenericSend+0x12c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  405b8a:	687b      	ldr	r3, [r7, #4]
  405b8c:	2b00      	cmp	r3, #0
  405b8e:	d103      	bne.n	405b98 <xQueueGenericSend+0x8c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  405b90:	4b30      	ldr	r3, [pc, #192]	; (405c54 <xQueueGenericSend+0x148>)
  405b92:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  405b94:	2300      	movs	r3, #0
  405b96:	e04f      	b.n	405c38 <xQueueGenericSend+0x12c>
				}
				else if( xEntryTimeSet == pdFALSE )
  405b98:	69fb      	ldr	r3, [r7, #28]
  405b9a:	2b00      	cmp	r3, #0
  405b9c:	d106      	bne.n	405bac <xQueueGenericSend+0xa0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  405b9e:	f107 0314 	add.w	r3, r7, #20
  405ba2:	4618      	mov	r0, r3
  405ba4:	4b2c      	ldr	r3, [pc, #176]	; (405c58 <xQueueGenericSend+0x14c>)
  405ba6:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  405ba8:	2301      	movs	r3, #1
  405baa:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  405bac:	4b29      	ldr	r3, [pc, #164]	; (405c54 <xQueueGenericSend+0x148>)
  405bae:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  405bb0:	4b2a      	ldr	r3, [pc, #168]	; (405c5c <xQueueGenericSend+0x150>)
  405bb2:	4798      	blx	r3
		prvLockQueue( pxQueue );
  405bb4:	4b23      	ldr	r3, [pc, #140]	; (405c44 <xQueueGenericSend+0x138>)
  405bb6:	4798      	blx	r3
  405bb8:	68fb      	ldr	r3, [r7, #12]
  405bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  405bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
  405bc0:	d102      	bne.n	405bc8 <xQueueGenericSend+0xbc>
  405bc2:	68fb      	ldr	r3, [r7, #12]
  405bc4:	2200      	movs	r2, #0
  405bc6:	645a      	str	r2, [r3, #68]	; 0x44
  405bc8:	68fb      	ldr	r3, [r7, #12]
  405bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  405bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
  405bd0:	d102      	bne.n	405bd8 <xQueueGenericSend+0xcc>
  405bd2:	68fb      	ldr	r3, [r7, #12]
  405bd4:	2200      	movs	r2, #0
  405bd6:	649a      	str	r2, [r3, #72]	; 0x48
  405bd8:	4b1e      	ldr	r3, [pc, #120]	; (405c54 <xQueueGenericSend+0x148>)
  405bda:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  405bdc:	1d3a      	adds	r2, r7, #4
  405bde:	f107 0314 	add.w	r3, r7, #20
  405be2:	4611      	mov	r1, r2
  405be4:	4618      	mov	r0, r3
  405be6:	4b1e      	ldr	r3, [pc, #120]	; (405c60 <xQueueGenericSend+0x154>)
  405be8:	4798      	blx	r3
  405bea:	4603      	mov	r3, r0
  405bec:	2b00      	cmp	r3, #0
  405bee:	d11d      	bne.n	405c2c <xQueueGenericSend+0x120>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  405bf0:	68f8      	ldr	r0, [r7, #12]
  405bf2:	4b1c      	ldr	r3, [pc, #112]	; (405c64 <xQueueGenericSend+0x158>)
  405bf4:	4798      	blx	r3
  405bf6:	4603      	mov	r3, r0
  405bf8:	2b00      	cmp	r3, #0
  405bfa:	d011      	beq.n	405c20 <xQueueGenericSend+0x114>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  405bfc:	68fb      	ldr	r3, [r7, #12]
  405bfe:	3310      	adds	r3, #16
  405c00:	687a      	ldr	r2, [r7, #4]
  405c02:	4611      	mov	r1, r2
  405c04:	4618      	mov	r0, r3
  405c06:	4b18      	ldr	r3, [pc, #96]	; (405c68 <xQueueGenericSend+0x15c>)
  405c08:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  405c0a:	68f8      	ldr	r0, [r7, #12]
  405c0c:	4b17      	ldr	r3, [pc, #92]	; (405c6c <xQueueGenericSend+0x160>)
  405c0e:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  405c10:	4b17      	ldr	r3, [pc, #92]	; (405c70 <xQueueGenericSend+0x164>)
  405c12:	4798      	blx	r3
  405c14:	4603      	mov	r3, r0
  405c16:	2b00      	cmp	r3, #0
  405c18:	d198      	bne.n	405b4c <xQueueGenericSend+0x40>
				{
					portYIELD_WITHIN_API();
  405c1a:	4b0d      	ldr	r3, [pc, #52]	; (405c50 <xQueueGenericSend+0x144>)
  405c1c:	4798      	blx	r3
  405c1e:	e795      	b.n	405b4c <xQueueGenericSend+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  405c20:	68f8      	ldr	r0, [r7, #12]
  405c22:	4b12      	ldr	r3, [pc, #72]	; (405c6c <xQueueGenericSend+0x160>)
  405c24:	4798      	blx	r3
				( void ) xTaskResumeAll();
  405c26:	4b12      	ldr	r3, [pc, #72]	; (405c70 <xQueueGenericSend+0x164>)
  405c28:	4798      	blx	r3
  405c2a:	e78f      	b.n	405b4c <xQueueGenericSend+0x40>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  405c2c:	68f8      	ldr	r0, [r7, #12]
  405c2e:	4b0f      	ldr	r3, [pc, #60]	; (405c6c <xQueueGenericSend+0x160>)
  405c30:	4798      	blx	r3
			( void ) xTaskResumeAll();
  405c32:	4b0f      	ldr	r3, [pc, #60]	; (405c70 <xQueueGenericSend+0x164>)
  405c34:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  405c36:	2300      	movs	r3, #0
		}
	}
}
  405c38:	4618      	mov	r0, r3
  405c3a:	3720      	adds	r7, #32
  405c3c:	46bd      	mov	sp, r7
  405c3e:	bd80      	pop	{r7, pc}
  405c40:	00405655 	.word	0x00405655
  405c44:	0040560d 	.word	0x0040560d
  405c48:	00405f05 	.word	0x00405f05
  405c4c:	004068c5 	.word	0x004068c5
  405c50:	004055f5 	.word	0x004055f5
  405c54:	0040562d 	.word	0x0040562d
  405c58:	00406981 	.word	0x00406981
  405c5c:	0040642d 	.word	0x0040642d
  405c60:	004069bd 	.word	0x004069bd
  405c64:	004060f1 	.word	0x004060f1
  405c68:	004067dd 	.word	0x004067dd
  405c6c:	00406015 	.word	0x00406015
  405c70:	00406449 	.word	0x00406449

00405c74 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
  405c74:	b580      	push	{r7, lr}
  405c76:	b086      	sub	sp, #24
  405c78:	af00      	add	r7, sp, #0
  405c7a:	60f8      	str	r0, [r7, #12]
  405c7c:	60b9      	str	r1, [r7, #8]
  405c7e:	607a      	str	r2, [r7, #4]
  405c80:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
  405c82:	68fb      	ldr	r3, [r7, #12]
  405c84:	2b00      	cmp	r3, #0
  405c86:	d103      	bne.n	405c90 <xQueueGenericSendFromISR+0x1c>
  405c88:	4b25      	ldr	r3, [pc, #148]	; (405d20 <xQueueGenericSendFromISR+0xac>)
  405c8a:	4798      	blx	r3
  405c8c:	bf00      	nop
  405c8e:	e7fd      	b.n	405c8c <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  405c90:	68bb      	ldr	r3, [r7, #8]
  405c92:	2b00      	cmp	r3, #0
  405c94:	d103      	bne.n	405c9e <xQueueGenericSendFromISR+0x2a>
  405c96:	68fb      	ldr	r3, [r7, #12]
  405c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405c9a:	2b00      	cmp	r3, #0
  405c9c:	d101      	bne.n	405ca2 <xQueueGenericSendFromISR+0x2e>
  405c9e:	2301      	movs	r3, #1
  405ca0:	e000      	b.n	405ca4 <xQueueGenericSendFromISR+0x30>
  405ca2:	2300      	movs	r3, #0
  405ca4:	2b00      	cmp	r3, #0
  405ca6:	d103      	bne.n	405cb0 <xQueueGenericSendFromISR+0x3c>
  405ca8:	4b1d      	ldr	r3, [pc, #116]	; (405d20 <xQueueGenericSendFromISR+0xac>)
  405caa:	4798      	blx	r3
  405cac:	bf00      	nop
  405cae:	e7fd      	b.n	405cac <xQueueGenericSendFromISR+0x38>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  405cb0:	4b1b      	ldr	r3, [pc, #108]	; (405d20 <xQueueGenericSendFromISR+0xac>)
  405cb2:	4798      	blx	r3
  405cb4:	6138      	str	r0, [r7, #16]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  405cb6:	68fb      	ldr	r3, [r7, #12]
  405cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  405cba:	68fb      	ldr	r3, [r7, #12]
  405cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  405cbe:	429a      	cmp	r2, r3
  405cc0:	d224      	bcs.n	405d0c <xQueueGenericSendFromISR+0x98>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  405cc2:	683a      	ldr	r2, [r7, #0]
  405cc4:	68b9      	ldr	r1, [r7, #8]
  405cc6:	68f8      	ldr	r0, [r7, #12]
  405cc8:	4b16      	ldr	r3, [pc, #88]	; (405d24 <xQueueGenericSendFromISR+0xb0>)
  405cca:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  405ccc:	68fb      	ldr	r3, [r7, #12]
  405cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  405cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
  405cd4:	d112      	bne.n	405cfc <xQueueGenericSendFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  405cd6:	68fb      	ldr	r3, [r7, #12]
  405cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  405cda:	2b00      	cmp	r3, #0
  405cdc:	d013      	beq.n	405d06 <xQueueGenericSendFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  405cde:	68fb      	ldr	r3, [r7, #12]
  405ce0:	3324      	adds	r3, #36	; 0x24
  405ce2:	4618      	mov	r0, r3
  405ce4:	4b10      	ldr	r3, [pc, #64]	; (405d28 <xQueueGenericSendFromISR+0xb4>)
  405ce6:	4798      	blx	r3
  405ce8:	4603      	mov	r3, r0
  405cea:	2b00      	cmp	r3, #0
  405cec:	d00b      	beq.n	405d06 <xQueueGenericSendFromISR+0x92>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
  405cee:	687b      	ldr	r3, [r7, #4]
  405cf0:	2b00      	cmp	r3, #0
  405cf2:	d008      	beq.n	405d06 <xQueueGenericSendFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
  405cf4:	687b      	ldr	r3, [r7, #4]
  405cf6:	2201      	movs	r2, #1
  405cf8:	601a      	str	r2, [r3, #0]
  405cfa:	e004      	b.n	405d06 <xQueueGenericSendFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  405cfc:	68fb      	ldr	r3, [r7, #12]
  405cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  405d00:	1c5a      	adds	r2, r3, #1
  405d02:	68fb      	ldr	r3, [r7, #12]
  405d04:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
  405d06:	2301      	movs	r3, #1
  405d08:	617b      	str	r3, [r7, #20]
  405d0a:	e001      	b.n	405d10 <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  405d0c:	2300      	movs	r3, #0
  405d0e:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  405d10:	6938      	ldr	r0, [r7, #16]
  405d12:	4b06      	ldr	r3, [pc, #24]	; (405d2c <xQueueGenericSendFromISR+0xb8>)
  405d14:	4798      	blx	r3

	return xReturn;
  405d16:	697b      	ldr	r3, [r7, #20]
}
  405d18:	4618      	mov	r0, r3
  405d1a:	3718      	adds	r7, #24
  405d1c:	46bd      	mov	sp, r7
  405d1e:	bd80      	pop	{r7, pc}
  405d20:	00405655 	.word	0x00405655
  405d24:	00405f05 	.word	0x00405f05
  405d28:	004068c5 	.word	0x004068c5
  405d2c:	00405669 	.word	0x00405669

00405d30 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  405d30:	b580      	push	{r7, lr}
  405d32:	b088      	sub	sp, #32
  405d34:	af00      	add	r7, sp, #0
  405d36:	60f8      	str	r0, [r7, #12]
  405d38:	60b9      	str	r1, [r7, #8]
  405d3a:	607a      	str	r2, [r7, #4]
  405d3c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  405d3e:	2300      	movs	r3, #0
  405d40:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
  405d42:	68fb      	ldr	r3, [r7, #12]
  405d44:	2b00      	cmp	r3, #0
  405d46:	d103      	bne.n	405d50 <xQueueGenericReceive+0x20>
  405d48:	4b5f      	ldr	r3, [pc, #380]	; (405ec8 <xQueueGenericReceive+0x198>)
  405d4a:	4798      	blx	r3
  405d4c:	bf00      	nop
  405d4e:	e7fd      	b.n	405d4c <xQueueGenericReceive+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  405d50:	68bb      	ldr	r3, [r7, #8]
  405d52:	2b00      	cmp	r3, #0
  405d54:	d103      	bne.n	405d5e <xQueueGenericReceive+0x2e>
  405d56:	68fb      	ldr	r3, [r7, #12]
  405d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405d5a:	2b00      	cmp	r3, #0
  405d5c:	d101      	bne.n	405d62 <xQueueGenericReceive+0x32>
  405d5e:	2301      	movs	r3, #1
  405d60:	e000      	b.n	405d64 <xQueueGenericReceive+0x34>
  405d62:	2300      	movs	r3, #0
  405d64:	2b00      	cmp	r3, #0
  405d66:	d103      	bne.n	405d70 <xQueueGenericReceive+0x40>
  405d68:	4b57      	ldr	r3, [pc, #348]	; (405ec8 <xQueueGenericReceive+0x198>)
  405d6a:	4798      	blx	r3
  405d6c:	bf00      	nop
  405d6e:	e7fd      	b.n	405d6c <xQueueGenericReceive+0x3c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  405d70:	4b56      	ldr	r3, [pc, #344]	; (405ecc <xQueueGenericReceive+0x19c>)
  405d72:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  405d74:	68fb      	ldr	r3, [r7, #12]
  405d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  405d78:	2b00      	cmp	r3, #0
  405d7a:	d03b      	beq.n	405df4 <xQueueGenericReceive+0xc4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  405d7c:	68fb      	ldr	r3, [r7, #12]
  405d7e:	68db      	ldr	r3, [r3, #12]
  405d80:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  405d82:	68b9      	ldr	r1, [r7, #8]
  405d84:	68f8      	ldr	r0, [r7, #12]
  405d86:	4b52      	ldr	r3, [pc, #328]	; (405ed0 <xQueueGenericReceive+0x1a0>)
  405d88:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  405d8a:	683b      	ldr	r3, [r7, #0]
  405d8c:	2b00      	cmp	r3, #0
  405d8e:	d11c      	bne.n	405dca <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  405d90:	68fb      	ldr	r3, [r7, #12]
  405d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  405d94:	1e5a      	subs	r2, r3, #1
  405d96:	68fb      	ldr	r3, [r7, #12]
  405d98:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  405d9a:	68fb      	ldr	r3, [r7, #12]
  405d9c:	681b      	ldr	r3, [r3, #0]
  405d9e:	2b00      	cmp	r3, #0
  405da0:	d104      	bne.n	405dac <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  405da2:	4b4c      	ldr	r3, [pc, #304]	; (405ed4 <xQueueGenericReceive+0x1a4>)
  405da4:	4798      	blx	r3
  405da6:	4602      	mov	r2, r0
  405da8:	68fb      	ldr	r3, [r7, #12]
  405daa:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  405dac:	68fb      	ldr	r3, [r7, #12]
  405dae:	691b      	ldr	r3, [r3, #16]
  405db0:	2b00      	cmp	r3, #0
  405db2:	d01b      	beq.n	405dec <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  405db4:	68fb      	ldr	r3, [r7, #12]
  405db6:	3310      	adds	r3, #16
  405db8:	4618      	mov	r0, r3
  405dba:	4b47      	ldr	r3, [pc, #284]	; (405ed8 <xQueueGenericReceive+0x1a8>)
  405dbc:	4798      	blx	r3
  405dbe:	4603      	mov	r3, r0
  405dc0:	2b01      	cmp	r3, #1
  405dc2:	d113      	bne.n	405dec <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
  405dc4:	4b45      	ldr	r3, [pc, #276]	; (405edc <xQueueGenericReceive+0x1ac>)
  405dc6:	4798      	blx	r3
  405dc8:	e010      	b.n	405dec <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  405dca:	68fb      	ldr	r3, [r7, #12]
  405dcc:	69ba      	ldr	r2, [r7, #24]
  405dce:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  405dd0:	68fb      	ldr	r3, [r7, #12]
  405dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  405dd4:	2b00      	cmp	r3, #0
  405dd6:	d009      	beq.n	405dec <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  405dd8:	68fb      	ldr	r3, [r7, #12]
  405dda:	3324      	adds	r3, #36	; 0x24
  405ddc:	4618      	mov	r0, r3
  405dde:	4b3e      	ldr	r3, [pc, #248]	; (405ed8 <xQueueGenericReceive+0x1a8>)
  405de0:	4798      	blx	r3
  405de2:	4603      	mov	r3, r0
  405de4:	2b00      	cmp	r3, #0
  405de6:	d001      	beq.n	405dec <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  405de8:	4b3c      	ldr	r3, [pc, #240]	; (405edc <xQueueGenericReceive+0x1ac>)
  405dea:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
  405dec:	4b3c      	ldr	r3, [pc, #240]	; (405ee0 <xQueueGenericReceive+0x1b0>)
  405dee:	4798      	blx	r3
				return pdPASS;
  405df0:	2301      	movs	r3, #1
  405df2:	e064      	b.n	405ebe <xQueueGenericReceive+0x18e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  405df4:	687b      	ldr	r3, [r7, #4]
  405df6:	2b00      	cmp	r3, #0
  405df8:	d103      	bne.n	405e02 <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  405dfa:	4b39      	ldr	r3, [pc, #228]	; (405ee0 <xQueueGenericReceive+0x1b0>)
  405dfc:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  405dfe:	2300      	movs	r3, #0
  405e00:	e05d      	b.n	405ebe <xQueueGenericReceive+0x18e>
				}
				else if( xEntryTimeSet == pdFALSE )
  405e02:	69fb      	ldr	r3, [r7, #28]
  405e04:	2b00      	cmp	r3, #0
  405e06:	d106      	bne.n	405e16 <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  405e08:	f107 0310 	add.w	r3, r7, #16
  405e0c:	4618      	mov	r0, r3
  405e0e:	4b35      	ldr	r3, [pc, #212]	; (405ee4 <xQueueGenericReceive+0x1b4>)
  405e10:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  405e12:	2301      	movs	r3, #1
  405e14:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  405e16:	4b32      	ldr	r3, [pc, #200]	; (405ee0 <xQueueGenericReceive+0x1b0>)
  405e18:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  405e1a:	4b33      	ldr	r3, [pc, #204]	; (405ee8 <xQueueGenericReceive+0x1b8>)
  405e1c:	4798      	blx	r3
		prvLockQueue( pxQueue );
  405e1e:	4b2b      	ldr	r3, [pc, #172]	; (405ecc <xQueueGenericReceive+0x19c>)
  405e20:	4798      	blx	r3
  405e22:	68fb      	ldr	r3, [r7, #12]
  405e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  405e26:	f1b3 3fff 	cmp.w	r3, #4294967295
  405e2a:	d102      	bne.n	405e32 <xQueueGenericReceive+0x102>
  405e2c:	68fb      	ldr	r3, [r7, #12]
  405e2e:	2200      	movs	r2, #0
  405e30:	645a      	str	r2, [r3, #68]	; 0x44
  405e32:	68fb      	ldr	r3, [r7, #12]
  405e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  405e36:	f1b3 3fff 	cmp.w	r3, #4294967295
  405e3a:	d102      	bne.n	405e42 <xQueueGenericReceive+0x112>
  405e3c:	68fb      	ldr	r3, [r7, #12]
  405e3e:	2200      	movs	r2, #0
  405e40:	649a      	str	r2, [r3, #72]	; 0x48
  405e42:	4b27      	ldr	r3, [pc, #156]	; (405ee0 <xQueueGenericReceive+0x1b0>)
  405e44:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  405e46:	1d3a      	adds	r2, r7, #4
  405e48:	f107 0310 	add.w	r3, r7, #16
  405e4c:	4611      	mov	r1, r2
  405e4e:	4618      	mov	r0, r3
  405e50:	4b26      	ldr	r3, [pc, #152]	; (405eec <xQueueGenericReceive+0x1bc>)
  405e52:	4798      	blx	r3
  405e54:	4603      	mov	r3, r0
  405e56:	2b00      	cmp	r3, #0
  405e58:	d12b      	bne.n	405eb2 <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  405e5a:	68f8      	ldr	r0, [r7, #12]
  405e5c:	4b24      	ldr	r3, [pc, #144]	; (405ef0 <xQueueGenericReceive+0x1c0>)
  405e5e:	4798      	blx	r3
  405e60:	4603      	mov	r3, r0
  405e62:	2b00      	cmp	r3, #0
  405e64:	d01f      	beq.n	405ea6 <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  405e66:	68fb      	ldr	r3, [r7, #12]
  405e68:	681b      	ldr	r3, [r3, #0]
  405e6a:	2b00      	cmp	r3, #0
  405e6c:	d108      	bne.n	405e80 <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
  405e6e:	4b17      	ldr	r3, [pc, #92]	; (405ecc <xQueueGenericReceive+0x19c>)
  405e70:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  405e72:	68fb      	ldr	r3, [r7, #12]
  405e74:	685b      	ldr	r3, [r3, #4]
  405e76:	4618      	mov	r0, r3
  405e78:	4b1e      	ldr	r3, [pc, #120]	; (405ef4 <xQueueGenericReceive+0x1c4>)
  405e7a:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  405e7c:	4b18      	ldr	r3, [pc, #96]	; (405ee0 <xQueueGenericReceive+0x1b0>)
  405e7e:	4798      	blx	r3
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  405e80:	68fb      	ldr	r3, [r7, #12]
  405e82:	3324      	adds	r3, #36	; 0x24
  405e84:	687a      	ldr	r2, [r7, #4]
  405e86:	4611      	mov	r1, r2
  405e88:	4618      	mov	r0, r3
  405e8a:	4b1b      	ldr	r3, [pc, #108]	; (405ef8 <xQueueGenericReceive+0x1c8>)
  405e8c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  405e8e:	68f8      	ldr	r0, [r7, #12]
  405e90:	4b1a      	ldr	r3, [pc, #104]	; (405efc <xQueueGenericReceive+0x1cc>)
  405e92:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  405e94:	4b1a      	ldr	r3, [pc, #104]	; (405f00 <xQueueGenericReceive+0x1d0>)
  405e96:	4798      	blx	r3
  405e98:	4603      	mov	r3, r0
  405e9a:	2b00      	cmp	r3, #0
  405e9c:	f47f af68 	bne.w	405d70 <xQueueGenericReceive+0x40>
				{
					portYIELD_WITHIN_API();
  405ea0:	4b0e      	ldr	r3, [pc, #56]	; (405edc <xQueueGenericReceive+0x1ac>)
  405ea2:	4798      	blx	r3
  405ea4:	e764      	b.n	405d70 <xQueueGenericReceive+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  405ea6:	68f8      	ldr	r0, [r7, #12]
  405ea8:	4b14      	ldr	r3, [pc, #80]	; (405efc <xQueueGenericReceive+0x1cc>)
  405eaa:	4798      	blx	r3
				( void ) xTaskResumeAll();
  405eac:	4b14      	ldr	r3, [pc, #80]	; (405f00 <xQueueGenericReceive+0x1d0>)
  405eae:	4798      	blx	r3
  405eb0:	e75e      	b.n	405d70 <xQueueGenericReceive+0x40>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  405eb2:	68f8      	ldr	r0, [r7, #12]
  405eb4:	4b11      	ldr	r3, [pc, #68]	; (405efc <xQueueGenericReceive+0x1cc>)
  405eb6:	4798      	blx	r3
			( void ) xTaskResumeAll();
  405eb8:	4b11      	ldr	r3, [pc, #68]	; (405f00 <xQueueGenericReceive+0x1d0>)
  405eba:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  405ebc:	2300      	movs	r3, #0
		}
	}
}
  405ebe:	4618      	mov	r0, r3
  405ec0:	3720      	adds	r7, #32
  405ec2:	46bd      	mov	sp, r7
  405ec4:	bd80      	pop	{r7, pc}
  405ec6:	bf00      	nop
  405ec8:	00405655 	.word	0x00405655
  405ecc:	0040560d 	.word	0x0040560d
  405ed0:	00405fc5 	.word	0x00405fc5
  405ed4:	00406d29 	.word	0x00406d29
  405ed8:	004068c5 	.word	0x004068c5
  405edc:	004055f5 	.word	0x004055f5
  405ee0:	0040562d 	.word	0x0040562d
  405ee4:	00406981 	.word	0x00406981
  405ee8:	0040642d 	.word	0x0040642d
  405eec:	004069bd 	.word	0x004069bd
  405ef0:	004060bd 	.word	0x004060bd
  405ef4:	00406d81 	.word	0x00406d81
  405ef8:	004067dd 	.word	0x004067dd
  405efc:	00406015 	.word	0x00406015
  405f00:	00406449 	.word	0x00406449

00405f04 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  405f04:	b580      	push	{r7, lr}
  405f06:	b084      	sub	sp, #16
  405f08:	af00      	add	r7, sp, #0
  405f0a:	60f8      	str	r0, [r7, #12]
  405f0c:	60b9      	str	r1, [r7, #8]
  405f0e:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  405f10:	68fb      	ldr	r3, [r7, #12]
  405f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405f14:	2b00      	cmp	r3, #0
  405f16:	d10c      	bne.n	405f32 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  405f18:	68fb      	ldr	r3, [r7, #12]
  405f1a:	681b      	ldr	r3, [r3, #0]
  405f1c:	2b00      	cmp	r3, #0
  405f1e:	d143      	bne.n	405fa8 <prvCopyDataToQueue+0xa4>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  405f20:	68fb      	ldr	r3, [r7, #12]
  405f22:	685b      	ldr	r3, [r3, #4]
  405f24:	4618      	mov	r0, r3
  405f26:	4b25      	ldr	r3, [pc, #148]	; (405fbc <prvCopyDataToQueue+0xb8>)
  405f28:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  405f2a:	68fb      	ldr	r3, [r7, #12]
  405f2c:	2200      	movs	r2, #0
  405f2e:	605a      	str	r2, [r3, #4]
  405f30:	e03a      	b.n	405fa8 <prvCopyDataToQueue+0xa4>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  405f32:	687b      	ldr	r3, [r7, #4]
  405f34:	2b00      	cmp	r3, #0
  405f36:	d119      	bne.n	405f6c <prvCopyDataToQueue+0x68>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  405f38:	68fb      	ldr	r3, [r7, #12]
  405f3a:	6898      	ldr	r0, [r3, #8]
  405f3c:	68fb      	ldr	r3, [r7, #12]
  405f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405f40:	461a      	mov	r2, r3
  405f42:	68b9      	ldr	r1, [r7, #8]
  405f44:	4b1e      	ldr	r3, [pc, #120]	; (405fc0 <prvCopyDataToQueue+0xbc>)
  405f46:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  405f48:	68fb      	ldr	r3, [r7, #12]
  405f4a:	689a      	ldr	r2, [r3, #8]
  405f4c:	68fb      	ldr	r3, [r7, #12]
  405f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405f50:	441a      	add	r2, r3
  405f52:	68fb      	ldr	r3, [r7, #12]
  405f54:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  405f56:	68fb      	ldr	r3, [r7, #12]
  405f58:	689a      	ldr	r2, [r3, #8]
  405f5a:	68fb      	ldr	r3, [r7, #12]
  405f5c:	685b      	ldr	r3, [r3, #4]
  405f5e:	429a      	cmp	r2, r3
  405f60:	d322      	bcc.n	405fa8 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  405f62:	68fb      	ldr	r3, [r7, #12]
  405f64:	681a      	ldr	r2, [r3, #0]
  405f66:	68fb      	ldr	r3, [r7, #12]
  405f68:	609a      	str	r2, [r3, #8]
  405f6a:	e01d      	b.n	405fa8 <prvCopyDataToQueue+0xa4>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  405f6c:	68fb      	ldr	r3, [r7, #12]
  405f6e:	68d8      	ldr	r0, [r3, #12]
  405f70:	68fb      	ldr	r3, [r7, #12]
  405f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405f74:	461a      	mov	r2, r3
  405f76:	68b9      	ldr	r1, [r7, #8]
  405f78:	4b11      	ldr	r3, [pc, #68]	; (405fc0 <prvCopyDataToQueue+0xbc>)
  405f7a:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  405f7c:	68fb      	ldr	r3, [r7, #12]
  405f7e:	68da      	ldr	r2, [r3, #12]
  405f80:	68fb      	ldr	r3, [r7, #12]
  405f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405f84:	425b      	negs	r3, r3
  405f86:	441a      	add	r2, r3
  405f88:	68fb      	ldr	r3, [r7, #12]
  405f8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  405f8c:	68fb      	ldr	r3, [r7, #12]
  405f8e:	68da      	ldr	r2, [r3, #12]
  405f90:	68fb      	ldr	r3, [r7, #12]
  405f92:	681b      	ldr	r3, [r3, #0]
  405f94:	429a      	cmp	r2, r3
  405f96:	d207      	bcs.n	405fa8 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  405f98:	68fb      	ldr	r3, [r7, #12]
  405f9a:	685a      	ldr	r2, [r3, #4]
  405f9c:	68fb      	ldr	r3, [r7, #12]
  405f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405fa0:	425b      	negs	r3, r3
  405fa2:	441a      	add	r2, r3
  405fa4:	68fb      	ldr	r3, [r7, #12]
  405fa6:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  405fa8:	68fb      	ldr	r3, [r7, #12]
  405faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  405fac:	1c5a      	adds	r2, r3, #1
  405fae:	68fb      	ldr	r3, [r7, #12]
  405fb0:	639a      	str	r2, [r3, #56]	; 0x38
}
  405fb2:	bf00      	nop
  405fb4:	3710      	adds	r7, #16
  405fb6:	46bd      	mov	sp, r7
  405fb8:	bd80      	pop	{r7, pc}
  405fba:	bf00      	nop
  405fbc:	00406e35 	.word	0x00406e35
  405fc0:	0040b989 	.word	0x0040b989

00405fc4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  405fc4:	b580      	push	{r7, lr}
  405fc6:	b082      	sub	sp, #8
  405fc8:	af00      	add	r7, sp, #0
  405fca:	6078      	str	r0, [r7, #4]
  405fcc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  405fce:	687b      	ldr	r3, [r7, #4]
  405fd0:	681b      	ldr	r3, [r3, #0]
  405fd2:	2b00      	cmp	r3, #0
  405fd4:	d018      	beq.n	406008 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  405fd6:	687b      	ldr	r3, [r7, #4]
  405fd8:	68da      	ldr	r2, [r3, #12]
  405fda:	687b      	ldr	r3, [r7, #4]
  405fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405fde:	441a      	add	r2, r3
  405fe0:	687b      	ldr	r3, [r7, #4]
  405fe2:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  405fe4:	687b      	ldr	r3, [r7, #4]
  405fe6:	68da      	ldr	r2, [r3, #12]
  405fe8:	687b      	ldr	r3, [r7, #4]
  405fea:	685b      	ldr	r3, [r3, #4]
  405fec:	429a      	cmp	r2, r3
  405fee:	d303      	bcc.n	405ff8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  405ff0:	687b      	ldr	r3, [r7, #4]
  405ff2:	681a      	ldr	r2, [r3, #0]
  405ff4:	687b      	ldr	r3, [r7, #4]
  405ff6:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  405ff8:	687b      	ldr	r3, [r7, #4]
  405ffa:	68d9      	ldr	r1, [r3, #12]
  405ffc:	687b      	ldr	r3, [r7, #4]
  405ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406000:	461a      	mov	r2, r3
  406002:	6838      	ldr	r0, [r7, #0]
  406004:	4b02      	ldr	r3, [pc, #8]	; (406010 <prvCopyDataFromQueue+0x4c>)
  406006:	4798      	blx	r3
	}
}
  406008:	bf00      	nop
  40600a:	3708      	adds	r7, #8
  40600c:	46bd      	mov	sp, r7
  40600e:	bd80      	pop	{r7, pc}
  406010:	0040b989 	.word	0x0040b989

00406014 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  406014:	b580      	push	{r7, lr}
  406016:	b082      	sub	sp, #8
  406018:	af00      	add	r7, sp, #0
  40601a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  40601c:	4b23      	ldr	r3, [pc, #140]	; (4060ac <prvUnlockQueue+0x98>)
  40601e:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  406020:	e012      	b.n	406048 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  406022:	687b      	ldr	r3, [r7, #4]
  406024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406026:	2b00      	cmp	r3, #0
  406028:	d013      	beq.n	406052 <prvUnlockQueue+0x3e>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40602a:	687b      	ldr	r3, [r7, #4]
  40602c:	3324      	adds	r3, #36	; 0x24
  40602e:	4618      	mov	r0, r3
  406030:	4b1f      	ldr	r3, [pc, #124]	; (4060b0 <prvUnlockQueue+0x9c>)
  406032:	4798      	blx	r3
  406034:	4603      	mov	r3, r0
  406036:	2b00      	cmp	r3, #0
  406038:	d001      	beq.n	40603e <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  40603a:	4b1e      	ldr	r3, [pc, #120]	; (4060b4 <prvUnlockQueue+0xa0>)
  40603c:	4798      	blx	r3
				}

				--( pxQueue->xTxLock );
  40603e:	687b      	ldr	r3, [r7, #4]
  406040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  406042:	1e5a      	subs	r2, r3, #1
  406044:	687b      	ldr	r3, [r7, #4]
  406046:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  406048:	687b      	ldr	r3, [r7, #4]
  40604a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40604c:	2b00      	cmp	r3, #0
  40604e:	dce8      	bgt.n	406022 <prvUnlockQueue+0xe>
  406050:	e000      	b.n	406054 <prvUnlockQueue+0x40>

				--( pxQueue->xTxLock );
			}
			else
			{
				break;
  406052:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  406054:	687b      	ldr	r3, [r7, #4]
  406056:	f04f 32ff 	mov.w	r2, #4294967295
  40605a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  40605c:	4b16      	ldr	r3, [pc, #88]	; (4060b8 <prvUnlockQueue+0xa4>)
  40605e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  406060:	4b12      	ldr	r3, [pc, #72]	; (4060ac <prvUnlockQueue+0x98>)
  406062:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  406064:	e012      	b.n	40608c <prvUnlockQueue+0x78>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  406066:	687b      	ldr	r3, [r7, #4]
  406068:	691b      	ldr	r3, [r3, #16]
  40606a:	2b00      	cmp	r3, #0
  40606c:	d013      	beq.n	406096 <prvUnlockQueue+0x82>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40606e:	687b      	ldr	r3, [r7, #4]
  406070:	3310      	adds	r3, #16
  406072:	4618      	mov	r0, r3
  406074:	4b0e      	ldr	r3, [pc, #56]	; (4060b0 <prvUnlockQueue+0x9c>)
  406076:	4798      	blx	r3
  406078:	4603      	mov	r3, r0
  40607a:	2b00      	cmp	r3, #0
  40607c:	d001      	beq.n	406082 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
  40607e:	4b0d      	ldr	r3, [pc, #52]	; (4060b4 <prvUnlockQueue+0xa0>)
  406080:	4798      	blx	r3
				}

				--( pxQueue->xRxLock );
  406082:	687b      	ldr	r3, [r7, #4]
  406084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  406086:	1e5a      	subs	r2, r3, #1
  406088:	687b      	ldr	r3, [r7, #4]
  40608a:	645a      	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40608c:	687b      	ldr	r3, [r7, #4]
  40608e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  406090:	2b00      	cmp	r3, #0
  406092:	dce8      	bgt.n	406066 <prvUnlockQueue+0x52>
  406094:	e000      	b.n	406098 <prvUnlockQueue+0x84>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
  406096:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  406098:	687b      	ldr	r3, [r7, #4]
  40609a:	f04f 32ff 	mov.w	r2, #4294967295
  40609e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  4060a0:	4b05      	ldr	r3, [pc, #20]	; (4060b8 <prvUnlockQueue+0xa4>)
  4060a2:	4798      	blx	r3
}
  4060a4:	bf00      	nop
  4060a6:	3708      	adds	r7, #8
  4060a8:	46bd      	mov	sp, r7
  4060aa:	bd80      	pop	{r7, pc}
  4060ac:	0040560d 	.word	0x0040560d
  4060b0:	004068c5 	.word	0x004068c5
  4060b4:	00406a71 	.word	0x00406a71
  4060b8:	0040562d 	.word	0x0040562d

004060bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
  4060bc:	b580      	push	{r7, lr}
  4060be:	b084      	sub	sp, #16
  4060c0:	af00      	add	r7, sp, #0
  4060c2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  4060c4:	4b08      	ldr	r3, [pc, #32]	; (4060e8 <prvIsQueueEmpty+0x2c>)
  4060c6:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  4060c8:	687b      	ldr	r3, [r7, #4]
  4060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4060cc:	2b00      	cmp	r3, #0
  4060ce:	bf0c      	ite	eq
  4060d0:	2301      	moveq	r3, #1
  4060d2:	2300      	movne	r3, #0
  4060d4:	b2db      	uxtb	r3, r3
  4060d6:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  4060d8:	4b04      	ldr	r3, [pc, #16]	; (4060ec <prvIsQueueEmpty+0x30>)
  4060da:	4798      	blx	r3

	return xReturn;
  4060dc:	68fb      	ldr	r3, [r7, #12]
}
  4060de:	4618      	mov	r0, r3
  4060e0:	3710      	adds	r7, #16
  4060e2:	46bd      	mov	sp, r7
  4060e4:	bd80      	pop	{r7, pc}
  4060e6:	bf00      	nop
  4060e8:	0040560d 	.word	0x0040560d
  4060ec:	0040562d 	.word	0x0040562d

004060f0 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
  4060f0:	b580      	push	{r7, lr}
  4060f2:	b084      	sub	sp, #16
  4060f4:	af00      	add	r7, sp, #0
  4060f6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  4060f8:	4b09      	ldr	r3, [pc, #36]	; (406120 <prvIsQueueFull+0x30>)
  4060fa:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  4060fc:	687b      	ldr	r3, [r7, #4]
  4060fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  406100:	687b      	ldr	r3, [r7, #4]
  406102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  406104:	429a      	cmp	r2, r3
  406106:	bf0c      	ite	eq
  406108:	2301      	moveq	r3, #1
  40610a:	2300      	movne	r3, #0
  40610c:	b2db      	uxtb	r3, r3
  40610e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  406110:	4b04      	ldr	r3, [pc, #16]	; (406124 <prvIsQueueFull+0x34>)
  406112:	4798      	blx	r3

	return xReturn;
  406114:	68fb      	ldr	r3, [r7, #12]
}
  406116:	4618      	mov	r0, r3
  406118:	3710      	adds	r7, #16
  40611a:	46bd      	mov	sp, r7
  40611c:	bd80      	pop	{r7, pc}
  40611e:	bf00      	nop
  406120:	0040560d 	.word	0x0040560d
  406124:	0040562d 	.word	0x0040562d

00406128 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  406128:	b580      	push	{r7, lr}
  40612a:	b082      	sub	sp, #8
  40612c:	af00      	add	r7, sp, #0
  40612e:	6078      	str	r0, [r7, #4]
  406130:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  406132:	4b12      	ldr	r3, [pc, #72]	; (40617c <vQueueWaitForMessageRestricted+0x54>)
  406134:	4798      	blx	r3
  406136:	687b      	ldr	r3, [r7, #4]
  406138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  40613a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40613e:	d102      	bne.n	406146 <vQueueWaitForMessageRestricted+0x1e>
  406140:	687b      	ldr	r3, [r7, #4]
  406142:	2200      	movs	r2, #0
  406144:	645a      	str	r2, [r3, #68]	; 0x44
  406146:	687b      	ldr	r3, [r7, #4]
  406148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40614a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40614e:	d102      	bne.n	406156 <vQueueWaitForMessageRestricted+0x2e>
  406150:	687b      	ldr	r3, [r7, #4]
  406152:	2200      	movs	r2, #0
  406154:	649a      	str	r2, [r3, #72]	; 0x48
  406156:	4b0a      	ldr	r3, [pc, #40]	; (406180 <vQueueWaitForMessageRestricted+0x58>)
  406158:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  40615a:	687b      	ldr	r3, [r7, #4]
  40615c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  40615e:	2b00      	cmp	r3, #0
  406160:	d105      	bne.n	40616e <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  406162:	687b      	ldr	r3, [r7, #4]
  406164:	3324      	adds	r3, #36	; 0x24
  406166:	6839      	ldr	r1, [r7, #0]
  406168:	4618      	mov	r0, r3
  40616a:	4b06      	ldr	r3, [pc, #24]	; (406184 <vQueueWaitForMessageRestricted+0x5c>)
  40616c:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
  40616e:	6878      	ldr	r0, [r7, #4]
  406170:	4b05      	ldr	r3, [pc, #20]	; (406188 <vQueueWaitForMessageRestricted+0x60>)
  406172:	4798      	blx	r3
	}
  406174:	bf00      	nop
  406176:	3708      	adds	r7, #8
  406178:	46bd      	mov	sp, r7
  40617a:	bd80      	pop	{r7, pc}
  40617c:	0040560d 	.word	0x0040560d
  406180:	0040562d 	.word	0x0040562d
  406184:	00406861 	.word	0x00406861
  406188:	00406015 	.word	0x00406015

0040618c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  40618c:	b590      	push	{r4, r7, lr}
  40618e:	b08b      	sub	sp, #44	; 0x2c
  406190:	af02      	add	r7, sp, #8
  406192:	60f8      	str	r0, [r7, #12]
  406194:	60b9      	str	r1, [r7, #8]
  406196:	603b      	str	r3, [r7, #0]
  406198:	4613      	mov	r3, r2
  40619a:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
  40619c:	68fb      	ldr	r3, [r7, #12]
  40619e:	2b00      	cmp	r3, #0
  4061a0:	d103      	bne.n	4061aa <xTaskGenericCreate+0x1e>
  4061a2:	4b58      	ldr	r3, [pc, #352]	; (406304 <xTaskGenericCreate+0x178>)
  4061a4:	4798      	blx	r3
  4061a6:	bf00      	nop
  4061a8:	e7fd      	b.n	4061a6 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
  4061aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4061ac:	2b04      	cmp	r3, #4
  4061ae:	d903      	bls.n	4061b8 <xTaskGenericCreate+0x2c>
  4061b0:	4b54      	ldr	r3, [pc, #336]	; (406304 <xTaskGenericCreate+0x178>)
  4061b2:	4798      	blx	r3
  4061b4:	bf00      	nop
  4061b6:	e7fd      	b.n	4061b4 <xTaskGenericCreate+0x28>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
  4061b8:	88fb      	ldrh	r3, [r7, #6]
  4061ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  4061bc:	4618      	mov	r0, r3
  4061be:	4b52      	ldr	r3, [pc, #328]	; (406308 <xTaskGenericCreate+0x17c>)
  4061c0:	4798      	blx	r3
  4061c2:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
  4061c4:	69bb      	ldr	r3, [r7, #24]
  4061c6:	2b00      	cmp	r3, #0
  4061c8:	f000 8084 	beq.w	4062d4 <xTaskGenericCreate+0x148>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
  4061cc:	69bb      	ldr	r3, [r7, #24]
  4061ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4061d0:	88fb      	ldrh	r3, [r7, #6]
  4061d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  4061d6:	3b01      	subs	r3, #1
  4061d8:	009b      	lsls	r3, r3, #2
  4061da:	4413      	add	r3, r2
  4061dc:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
  4061de:	697b      	ldr	r3, [r7, #20]
  4061e0:	f023 0307 	bic.w	r3, r3, #7
  4061e4:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  4061e6:	697b      	ldr	r3, [r7, #20]
  4061e8:	f003 0307 	and.w	r3, r3, #7
  4061ec:	2b00      	cmp	r3, #0
  4061ee:	d003      	beq.n	4061f8 <xTaskGenericCreate+0x6c>
  4061f0:	4b44      	ldr	r3, [pc, #272]	; (406304 <xTaskGenericCreate+0x178>)
  4061f2:	4798      	blx	r3
  4061f4:	bf00      	nop
  4061f6:	e7fd      	b.n	4061f4 <xTaskGenericCreate+0x68>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
  4061f8:	88fb      	ldrh	r3, [r7, #6]
  4061fa:	9300      	str	r3, [sp, #0]
  4061fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4061fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  406200:	68b9      	ldr	r1, [r7, #8]
  406202:	69b8      	ldr	r0, [r7, #24]
  406204:	4c41      	ldr	r4, [pc, #260]	; (40630c <xTaskGenericCreate+0x180>)
  406206:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  406208:	683a      	ldr	r2, [r7, #0]
  40620a:	68f9      	ldr	r1, [r7, #12]
  40620c:	6978      	ldr	r0, [r7, #20]
  40620e:	4b40      	ldr	r3, [pc, #256]	; (406310 <xTaskGenericCreate+0x184>)
  406210:	4798      	blx	r3
  406212:	4602      	mov	r2, r0
  406214:	69bb      	ldr	r3, [r7, #24]
  406216:	601a      	str	r2, [r3, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  406218:	69bb      	ldr	r3, [r7, #24]
  40621a:	681b      	ldr	r3, [r3, #0]
  40621c:	f003 0307 	and.w	r3, r3, #7
  406220:	2b00      	cmp	r3, #0
  406222:	d003      	beq.n	40622c <xTaskGenericCreate+0xa0>
  406224:	4b37      	ldr	r3, [pc, #220]	; (406304 <xTaskGenericCreate+0x178>)
  406226:	4798      	blx	r3
  406228:	bf00      	nop
  40622a:	e7fd      	b.n	406228 <xTaskGenericCreate+0x9c>

		if( ( void * ) pxCreatedTask != NULL )
  40622c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  40622e:	2b00      	cmp	r3, #0
  406230:	d002      	beq.n	406238 <xTaskGenericCreate+0xac>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  406232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  406234:	69ba      	ldr	r2, [r7, #24]
  406236:	601a      	str	r2, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  406238:	4b36      	ldr	r3, [pc, #216]	; (406314 <xTaskGenericCreate+0x188>)
  40623a:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  40623c:	4b36      	ldr	r3, [pc, #216]	; (406318 <xTaskGenericCreate+0x18c>)
  40623e:	681b      	ldr	r3, [r3, #0]
  406240:	3301      	adds	r3, #1
  406242:	4a35      	ldr	r2, [pc, #212]	; (406318 <xTaskGenericCreate+0x18c>)
  406244:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  406246:	4b35      	ldr	r3, [pc, #212]	; (40631c <xTaskGenericCreate+0x190>)
  406248:	681b      	ldr	r3, [r3, #0]
  40624a:	2b00      	cmp	r3, #0
  40624c:	d109      	bne.n	406262 <xTaskGenericCreate+0xd6>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  40624e:	4a33      	ldr	r2, [pc, #204]	; (40631c <xTaskGenericCreate+0x190>)
  406250:	69bb      	ldr	r3, [r7, #24]
  406252:	6013      	str	r3, [r2, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  406254:	4b30      	ldr	r3, [pc, #192]	; (406318 <xTaskGenericCreate+0x18c>)
  406256:	681b      	ldr	r3, [r3, #0]
  406258:	2b01      	cmp	r3, #1
  40625a:	d10f      	bne.n	40627c <xTaskGenericCreate+0xf0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
  40625c:	4b30      	ldr	r3, [pc, #192]	; (406320 <xTaskGenericCreate+0x194>)
  40625e:	4798      	blx	r3
  406260:	e00c      	b.n	40627c <xTaskGenericCreate+0xf0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  406262:	4b30      	ldr	r3, [pc, #192]	; (406324 <xTaskGenericCreate+0x198>)
  406264:	681b      	ldr	r3, [r3, #0]
  406266:	2b00      	cmp	r3, #0
  406268:	d108      	bne.n	40627c <xTaskGenericCreate+0xf0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  40626a:	4b2c      	ldr	r3, [pc, #176]	; (40631c <xTaskGenericCreate+0x190>)
  40626c:	681b      	ldr	r3, [r3, #0]
  40626e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  406272:	429a      	cmp	r2, r3
  406274:	d802      	bhi.n	40627c <xTaskGenericCreate+0xf0>
					{
						pxCurrentTCB = pxNewTCB;
  406276:	4a29      	ldr	r2, [pc, #164]	; (40631c <xTaskGenericCreate+0x190>)
  406278:	69bb      	ldr	r3, [r7, #24]
  40627a:	6013      	str	r3, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  40627c:	69bb      	ldr	r3, [r7, #24]
  40627e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406280:	4b29      	ldr	r3, [pc, #164]	; (406328 <xTaskGenericCreate+0x19c>)
  406282:	681b      	ldr	r3, [r3, #0]
  406284:	429a      	cmp	r2, r3
  406286:	d903      	bls.n	406290 <xTaskGenericCreate+0x104>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  406288:	69bb      	ldr	r3, [r7, #24]
  40628a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40628c:	4a26      	ldr	r2, [pc, #152]	; (406328 <xTaskGenericCreate+0x19c>)
  40628e:	6013      	str	r3, [r2, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
  406290:	4b26      	ldr	r3, [pc, #152]	; (40632c <xTaskGenericCreate+0x1a0>)
  406292:	681b      	ldr	r3, [r3, #0]
  406294:	3301      	adds	r3, #1
  406296:	4a25      	ldr	r2, [pc, #148]	; (40632c <xTaskGenericCreate+0x1a0>)
  406298:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  40629a:	69bb      	ldr	r3, [r7, #24]
  40629c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40629e:	4b24      	ldr	r3, [pc, #144]	; (406330 <xTaskGenericCreate+0x1a4>)
  4062a0:	681b      	ldr	r3, [r3, #0]
  4062a2:	429a      	cmp	r2, r3
  4062a4:	d903      	bls.n	4062ae <xTaskGenericCreate+0x122>
  4062a6:	69bb      	ldr	r3, [r7, #24]
  4062a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4062aa:	4a21      	ldr	r2, [pc, #132]	; (406330 <xTaskGenericCreate+0x1a4>)
  4062ac:	6013      	str	r3, [r2, #0]
  4062ae:	69bb      	ldr	r3, [r7, #24]
  4062b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4062b2:	4613      	mov	r3, r2
  4062b4:	009b      	lsls	r3, r3, #2
  4062b6:	4413      	add	r3, r2
  4062b8:	009b      	lsls	r3, r3, #2
  4062ba:	4a1e      	ldr	r2, [pc, #120]	; (406334 <xTaskGenericCreate+0x1a8>)
  4062bc:	441a      	add	r2, r3
  4062be:	69bb      	ldr	r3, [r7, #24]
  4062c0:	3304      	adds	r3, #4
  4062c2:	4619      	mov	r1, r3
  4062c4:	4610      	mov	r0, r2
  4062c6:	4b1c      	ldr	r3, [pc, #112]	; (406338 <xTaskGenericCreate+0x1ac>)
  4062c8:	4798      	blx	r3

			xReturn = pdPASS;
  4062ca:	2301      	movs	r3, #1
  4062cc:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  4062ce:	4b1b      	ldr	r3, [pc, #108]	; (40633c <xTaskGenericCreate+0x1b0>)
  4062d0:	4798      	blx	r3
  4062d2:	e002      	b.n	4062da <xTaskGenericCreate+0x14e>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4062d4:	f04f 33ff 	mov.w	r3, #4294967295
  4062d8:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
  4062da:	69fb      	ldr	r3, [r7, #28]
  4062dc:	2b01      	cmp	r3, #1
  4062de:	d10b      	bne.n	4062f8 <xTaskGenericCreate+0x16c>
	{
		if( xSchedulerRunning != pdFALSE )
  4062e0:	4b10      	ldr	r3, [pc, #64]	; (406324 <xTaskGenericCreate+0x198>)
  4062e2:	681b      	ldr	r3, [r3, #0]
  4062e4:	2b00      	cmp	r3, #0
  4062e6:	d007      	beq.n	4062f8 <xTaskGenericCreate+0x16c>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  4062e8:	4b0c      	ldr	r3, [pc, #48]	; (40631c <xTaskGenericCreate+0x190>)
  4062ea:	681b      	ldr	r3, [r3, #0]
  4062ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4062ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4062f0:	429a      	cmp	r2, r3
  4062f2:	d201      	bcs.n	4062f8 <xTaskGenericCreate+0x16c>
			{
				portYIELD_WITHIN_API();
  4062f4:	4b12      	ldr	r3, [pc, #72]	; (406340 <xTaskGenericCreate+0x1b4>)
  4062f6:	4798      	blx	r3
			}
		}
	}

	return xReturn;
  4062f8:	69fb      	ldr	r3, [r7, #28]
}
  4062fa:	4618      	mov	r0, r3
  4062fc:	3724      	adds	r7, #36	; 0x24
  4062fe:	46bd      	mov	sp, r7
  406300:	bd90      	pop	{r4, r7, pc}
  406302:	bf00      	nop
  406304:	00405655 	.word	0x00405655
  406308:	00406c95 	.word	0x00406c95
  40630c:	00406a9d 	.word	0x00406a9d
  406310:	00405529 	.word	0x00405529
  406314:	0040560d 	.word	0x0040560d
  406318:	200026cc 	.word	0x200026cc
  40631c:	200025f4 	.word	0x200025f4
  406320:	00406b11 	.word	0x00406b11
  406324:	200026dc 	.word	0x200026dc
  406328:	200026d4 	.word	0x200026d4
  40632c:	200026f0 	.word	0x200026f0
  406330:	200026d8 	.word	0x200026d8
  406334:	200025f8 	.word	0x200025f8
  406338:	00405371 	.word	0x00405371
  40633c:	0040562d 	.word	0x0040562d
  406340:	004055f5 	.word	0x004055f5

00406344 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
  406344:	b580      	push	{r7, lr}
  406346:	b084      	sub	sp, #16
  406348:	af00      	add	r7, sp, #0
  40634a:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  40634c:	2300      	movs	r3, #0
  40634e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
  406350:	687b      	ldr	r3, [r7, #4]
  406352:	2b00      	cmp	r3, #0
  406354:	d012      	beq.n	40637c <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
  406356:	4b0e      	ldr	r3, [pc, #56]	; (406390 <vTaskDelay+0x4c>)
  406358:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  40635a:	4b0e      	ldr	r3, [pc, #56]	; (406394 <vTaskDelay+0x50>)
  40635c:	681a      	ldr	r2, [r3, #0]
  40635e:	687b      	ldr	r3, [r7, #4]
  406360:	4413      	add	r3, r2
  406362:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  406364:	4b0c      	ldr	r3, [pc, #48]	; (406398 <vTaskDelay+0x54>)
  406366:	681b      	ldr	r3, [r3, #0]
  406368:	3304      	adds	r3, #4
  40636a:	4618      	mov	r0, r3
  40636c:	4b0b      	ldr	r3, [pc, #44]	; (40639c <vTaskDelay+0x58>)
  40636e:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  406370:	68b8      	ldr	r0, [r7, #8]
  406372:	4b0b      	ldr	r3, [pc, #44]	; (4063a0 <vTaskDelay+0x5c>)
  406374:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  406376:	4b0b      	ldr	r3, [pc, #44]	; (4063a4 <vTaskDelay+0x60>)
  406378:	4798      	blx	r3
  40637a:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  40637c:	68fb      	ldr	r3, [r7, #12]
  40637e:	2b00      	cmp	r3, #0
  406380:	d101      	bne.n	406386 <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
  406382:	4b09      	ldr	r3, [pc, #36]	; (4063a8 <vTaskDelay+0x64>)
  406384:	4798      	blx	r3
		}
	}
  406386:	bf00      	nop
  406388:	3710      	adds	r7, #16
  40638a:	46bd      	mov	sp, r7
  40638c:	bd80      	pop	{r7, pc}
  40638e:	bf00      	nop
  406390:	0040642d 	.word	0x0040642d
  406394:	200026d0 	.word	0x200026d0
  406398:	200025f4 	.word	0x200025f4
  40639c:	00405431 	.word	0x00405431
  4063a0:	00406c25 	.word	0x00406c25
  4063a4:	00406449 	.word	0x00406449
  4063a8:	004055f5 	.word	0x004055f5

004063ac <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  4063ac:	b590      	push	{r4, r7, lr}
  4063ae:	b087      	sub	sp, #28
  4063b0:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
  4063b2:	2300      	movs	r3, #0
  4063b4:	9303      	str	r3, [sp, #12]
  4063b6:	2300      	movs	r3, #0
  4063b8:	9302      	str	r3, [sp, #8]
  4063ba:	2300      	movs	r3, #0
  4063bc:	9301      	str	r3, [sp, #4]
  4063be:	2300      	movs	r3, #0
  4063c0:	9300      	str	r3, [sp, #0]
  4063c2:	2300      	movs	r3, #0
  4063c4:	2264      	movs	r2, #100	; 0x64
  4063c6:	4911      	ldr	r1, [pc, #68]	; (40640c <vTaskStartScheduler+0x60>)
  4063c8:	4811      	ldr	r0, [pc, #68]	; (406410 <vTaskStartScheduler+0x64>)
  4063ca:	4c12      	ldr	r4, [pc, #72]	; (406414 <vTaskStartScheduler+0x68>)
  4063cc:	47a0      	blx	r4
  4063ce:	6078      	str	r0, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  4063d0:	687b      	ldr	r3, [r7, #4]
  4063d2:	2b01      	cmp	r3, #1
  4063d4:	d102      	bne.n	4063dc <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
  4063d6:	4b10      	ldr	r3, [pc, #64]	; (406418 <vTaskStartScheduler+0x6c>)
  4063d8:	4798      	blx	r3
  4063da:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
  4063dc:	687b      	ldr	r3, [r7, #4]
  4063de:	2b01      	cmp	r3, #1
  4063e0:	d109      	bne.n	4063f6 <vTaskStartScheduler+0x4a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  4063e2:	4b0e      	ldr	r3, [pc, #56]	; (40641c <vTaskStartScheduler+0x70>)
  4063e4:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
  4063e6:	4b0e      	ldr	r3, [pc, #56]	; (406420 <vTaskStartScheduler+0x74>)
  4063e8:	2201      	movs	r2, #1
  4063ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
  4063ec:	4b0d      	ldr	r3, [pc, #52]	; (406424 <vTaskStartScheduler+0x78>)
  4063ee:	2200      	movs	r2, #0
  4063f0:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  4063f2:	4b0d      	ldr	r3, [pc, #52]	; (406428 <vTaskStartScheduler+0x7c>)
  4063f4:	4798      	blx	r3
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
  4063f6:	687b      	ldr	r3, [r7, #4]
  4063f8:	2b00      	cmp	r3, #0
  4063fa:	d103      	bne.n	406404 <vTaskStartScheduler+0x58>
  4063fc:	4b07      	ldr	r3, [pc, #28]	; (40641c <vTaskStartScheduler+0x70>)
  4063fe:	4798      	blx	r3
  406400:	bf00      	nop
  406402:	e7fd      	b.n	406400 <vTaskStartScheduler+0x54>
}
  406404:	bf00      	nop
  406406:	370c      	adds	r7, #12
  406408:	46bd      	mov	sp, r7
  40640a:	bd90      	pop	{r4, r7, pc}
  40640c:	0040bcec 	.word	0x0040bcec
  406410:	00406a89 	.word	0x00406a89
  406414:	0040618d 	.word	0x0040618d
  406418:	00406eb9 	.word	0x00406eb9
  40641c:	00405655 	.word	0x00405655
  406420:	200026dc 	.word	0x200026dc
  406424:	200026d0 	.word	0x200026d0
  406428:	004055b5 	.word	0x004055b5

0040642c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
  40642c:	b480      	push	{r7}
  40642e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  406430:	4b04      	ldr	r3, [pc, #16]	; (406444 <vTaskSuspendAll+0x18>)
  406432:	681b      	ldr	r3, [r3, #0]
  406434:	3301      	adds	r3, #1
  406436:	4a03      	ldr	r2, [pc, #12]	; (406444 <vTaskSuspendAll+0x18>)
  406438:	6013      	str	r3, [r2, #0]
}
  40643a:	bf00      	nop
  40643c:	46bd      	mov	sp, r7
  40643e:	bc80      	pop	{r7}
  406440:	4770      	bx	lr
  406442:	bf00      	nop
  406444:	200026e0 	.word	0x200026e0

00406448 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  406448:	b590      	push	{r4, r7, lr}
  40644a:	b083      	sub	sp, #12
  40644c:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  40644e:	2300      	movs	r3, #0
  406450:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  406452:	4b36      	ldr	r3, [pc, #216]	; (40652c <xTaskResumeAll+0xe4>)
  406454:	681b      	ldr	r3, [r3, #0]
  406456:	2b00      	cmp	r3, #0
  406458:	d103      	bne.n	406462 <xTaskResumeAll+0x1a>
  40645a:	4b35      	ldr	r3, [pc, #212]	; (406530 <xTaskResumeAll+0xe8>)
  40645c:	4798      	blx	r3
  40645e:	bf00      	nop
  406460:	e7fd      	b.n	40645e <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  406462:	4b34      	ldr	r3, [pc, #208]	; (406534 <xTaskResumeAll+0xec>)
  406464:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  406466:	4b31      	ldr	r3, [pc, #196]	; (40652c <xTaskResumeAll+0xe4>)
  406468:	681b      	ldr	r3, [r3, #0]
  40646a:	3b01      	subs	r3, #1
  40646c:	4a2f      	ldr	r2, [pc, #188]	; (40652c <xTaskResumeAll+0xe4>)
  40646e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  406470:	4b2e      	ldr	r3, [pc, #184]	; (40652c <xTaskResumeAll+0xe4>)
  406472:	681b      	ldr	r3, [r3, #0]
  406474:	2b00      	cmp	r3, #0
  406476:	d152      	bne.n	40651e <xTaskResumeAll+0xd6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
  406478:	4b2f      	ldr	r3, [pc, #188]	; (406538 <xTaskResumeAll+0xf0>)
  40647a:	681b      	ldr	r3, [r3, #0]
  40647c:	2b00      	cmp	r3, #0
  40647e:	d04e      	beq.n	40651e <xTaskResumeAll+0xd6>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
  406480:	2300      	movs	r3, #0
  406482:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  406484:	e027      	b.n	4064d6 <xTaskResumeAll+0x8e>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  406486:	4b2d      	ldr	r3, [pc, #180]	; (40653c <xTaskResumeAll+0xf4>)
  406488:	68db      	ldr	r3, [r3, #12]
  40648a:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
  40648c:	f104 0318 	add.w	r3, r4, #24
  406490:	4618      	mov	r0, r3
  406492:	4b2b      	ldr	r3, [pc, #172]	; (406540 <xTaskResumeAll+0xf8>)
  406494:	4798      	blx	r3
					uxListRemove( &( pxTCB->xGenericListItem ) );
  406496:	1d23      	adds	r3, r4, #4
  406498:	4618      	mov	r0, r3
  40649a:	4b29      	ldr	r3, [pc, #164]	; (406540 <xTaskResumeAll+0xf8>)
  40649c:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
  40649e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4064a0:	4b28      	ldr	r3, [pc, #160]	; (406544 <xTaskResumeAll+0xfc>)
  4064a2:	681b      	ldr	r3, [r3, #0]
  4064a4:	429a      	cmp	r2, r3
  4064a6:	d902      	bls.n	4064ae <xTaskResumeAll+0x66>
  4064a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4064aa:	4a26      	ldr	r2, [pc, #152]	; (406544 <xTaskResumeAll+0xfc>)
  4064ac:	6013      	str	r3, [r2, #0]
  4064ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4064b0:	4613      	mov	r3, r2
  4064b2:	009b      	lsls	r3, r3, #2
  4064b4:	4413      	add	r3, r2
  4064b6:	009b      	lsls	r3, r3, #2
  4064b8:	4a23      	ldr	r2, [pc, #140]	; (406548 <xTaskResumeAll+0x100>)
  4064ba:	4413      	add	r3, r2
  4064bc:	1d22      	adds	r2, r4, #4
  4064be:	4611      	mov	r1, r2
  4064c0:	4618      	mov	r0, r3
  4064c2:	4b22      	ldr	r3, [pc, #136]	; (40654c <xTaskResumeAll+0x104>)
  4064c4:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4064c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4064c8:	4b21      	ldr	r3, [pc, #132]	; (406550 <xTaskResumeAll+0x108>)
  4064ca:	681b      	ldr	r3, [r3, #0]
  4064cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4064ce:	429a      	cmp	r2, r3
  4064d0:	d301      	bcc.n	4064d6 <xTaskResumeAll+0x8e>
					{
						xYieldRequired = pdTRUE;
  4064d2:	2301      	movs	r3, #1
  4064d4:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  4064d6:	4b19      	ldr	r3, [pc, #100]	; (40653c <xTaskResumeAll+0xf4>)
  4064d8:	681b      	ldr	r3, [r3, #0]
  4064da:	2b00      	cmp	r3, #0
  4064dc:	d1d3      	bne.n	406486 <xTaskResumeAll+0x3e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  4064de:	4b1d      	ldr	r3, [pc, #116]	; (406554 <xTaskResumeAll+0x10c>)
  4064e0:	681b      	ldr	r3, [r3, #0]
  4064e2:	2b00      	cmp	r3, #0
  4064e4:	d00d      	beq.n	406502 <xTaskResumeAll+0xba>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  4064e6:	e006      	b.n	4064f6 <xTaskResumeAll+0xae>
					{
						vTaskIncrementTick();
  4064e8:	4b1b      	ldr	r3, [pc, #108]	; (406558 <xTaskResumeAll+0x110>)
  4064ea:	4798      	blx	r3
						--uxMissedTicks;
  4064ec:	4b19      	ldr	r3, [pc, #100]	; (406554 <xTaskResumeAll+0x10c>)
  4064ee:	681b      	ldr	r3, [r3, #0]
  4064f0:	3b01      	subs	r3, #1
  4064f2:	4a18      	ldr	r2, [pc, #96]	; (406554 <xTaskResumeAll+0x10c>)
  4064f4:	6013      	str	r3, [r2, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  4064f6:	4b17      	ldr	r3, [pc, #92]	; (406554 <xTaskResumeAll+0x10c>)
  4064f8:	681b      	ldr	r3, [r3, #0]
  4064fa:	2b00      	cmp	r3, #0
  4064fc:	d1f4      	bne.n	4064e8 <xTaskResumeAll+0xa0>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
  4064fe:	2301      	movs	r3, #1
  406500:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  406502:	683b      	ldr	r3, [r7, #0]
  406504:	2b01      	cmp	r3, #1
  406506:	d003      	beq.n	406510 <xTaskResumeAll+0xc8>
  406508:	4b14      	ldr	r3, [pc, #80]	; (40655c <xTaskResumeAll+0x114>)
  40650a:	681b      	ldr	r3, [r3, #0]
  40650c:	2b01      	cmp	r3, #1
  40650e:	d106      	bne.n	40651e <xTaskResumeAll+0xd6>
				{
					xAlreadyYielded = pdTRUE;
  406510:	2301      	movs	r3, #1
  406512:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
  406514:	4b11      	ldr	r3, [pc, #68]	; (40655c <xTaskResumeAll+0x114>)
  406516:	2200      	movs	r2, #0
  406518:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  40651a:	4b11      	ldr	r3, [pc, #68]	; (406560 <xTaskResumeAll+0x118>)
  40651c:	4798      	blx	r3
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  40651e:	4b11      	ldr	r3, [pc, #68]	; (406564 <xTaskResumeAll+0x11c>)
  406520:	4798      	blx	r3

	return xAlreadyYielded;
  406522:	687b      	ldr	r3, [r7, #4]
}
  406524:	4618      	mov	r0, r3
  406526:	370c      	adds	r7, #12
  406528:	46bd      	mov	sp, r7
  40652a:	bd90      	pop	{r4, r7, pc}
  40652c:	200026e0 	.word	0x200026e0
  406530:	00405655 	.word	0x00405655
  406534:	0040560d 	.word	0x0040560d
  406538:	200026cc 	.word	0x200026cc
  40653c:	2000268c 	.word	0x2000268c
  406540:	00405431 	.word	0x00405431
  406544:	200026d8 	.word	0x200026d8
  406548:	200025f8 	.word	0x200025f8
  40654c:	00405371 	.word	0x00405371
  406550:	200025f4 	.word	0x200025f4
  406554:	200026e4 	.word	0x200026e4
  406558:	00406595 	.word	0x00406595
  40655c:	200026e8 	.word	0x200026e8
  406560:	004055f5 	.word	0x004055f5
  406564:	0040562d 	.word	0x0040562d

00406568 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
  406568:	b580      	push	{r7, lr}
  40656a:	b082      	sub	sp, #8
  40656c:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
  40656e:	4b06      	ldr	r3, [pc, #24]	; (406588 <xTaskGetTickCount+0x20>)
  406570:	4798      	blx	r3
	{
		xTicks = xTickCount;
  406572:	4b06      	ldr	r3, [pc, #24]	; (40658c <xTaskGetTickCount+0x24>)
  406574:	681b      	ldr	r3, [r3, #0]
  406576:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
  406578:	4b05      	ldr	r3, [pc, #20]	; (406590 <xTaskGetTickCount+0x28>)
  40657a:	4798      	blx	r3

	return xTicks;
  40657c:	687b      	ldr	r3, [r7, #4]
}
  40657e:	4618      	mov	r0, r3
  406580:	3708      	adds	r7, #8
  406582:	46bd      	mov	sp, r7
  406584:	bd80      	pop	{r7, pc}
  406586:	bf00      	nop
  406588:	0040560d 	.word	0x0040560d
  40658c:	200026d0 	.word	0x200026d0
  406590:	0040562d 	.word	0x0040562d

00406594 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
  406594:	b580      	push	{r7, lr}
  406596:	b084      	sub	sp, #16
  406598:	af00      	add	r7, sp, #0

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  40659a:	4b45      	ldr	r3, [pc, #276]	; (4066b0 <vTaskIncrementTick+0x11c>)
  40659c:	681b      	ldr	r3, [r3, #0]
  40659e:	2b00      	cmp	r3, #0
  4065a0:	d17b      	bne.n	40669a <vTaskIncrementTick+0x106>
	{
		++xTickCount;
  4065a2:	4b44      	ldr	r3, [pc, #272]	; (4066b4 <vTaskIncrementTick+0x120>)
  4065a4:	681b      	ldr	r3, [r3, #0]
  4065a6:	3301      	adds	r3, #1
  4065a8:	4a42      	ldr	r2, [pc, #264]	; (4066b4 <vTaskIncrementTick+0x120>)
  4065aa:	6013      	str	r3, [r2, #0]
		if( xTickCount == ( portTickType ) 0U )
  4065ac:	4b41      	ldr	r3, [pc, #260]	; (4066b4 <vTaskIncrementTick+0x120>)
  4065ae:	681b      	ldr	r3, [r3, #0]
  4065b0:	2b00      	cmp	r3, #0
  4065b2:	d12a      	bne.n	40660a <vTaskIncrementTick+0x76>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  4065b4:	4b40      	ldr	r3, [pc, #256]	; (4066b8 <vTaskIncrementTick+0x124>)
  4065b6:	681b      	ldr	r3, [r3, #0]
  4065b8:	681b      	ldr	r3, [r3, #0]
  4065ba:	2b00      	cmp	r3, #0
  4065bc:	d003      	beq.n	4065c6 <vTaskIncrementTick+0x32>
  4065be:	4b3f      	ldr	r3, [pc, #252]	; (4066bc <vTaskIncrementTick+0x128>)
  4065c0:	4798      	blx	r3
  4065c2:	bf00      	nop
  4065c4:	e7fd      	b.n	4065c2 <vTaskIncrementTick+0x2e>

			pxTemp = pxDelayedTaskList;
  4065c6:	4b3c      	ldr	r3, [pc, #240]	; (4066b8 <vTaskIncrementTick+0x124>)
  4065c8:	681b      	ldr	r3, [r3, #0]
  4065ca:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  4065cc:	4b3c      	ldr	r3, [pc, #240]	; (4066c0 <vTaskIncrementTick+0x12c>)
  4065ce:	681b      	ldr	r3, [r3, #0]
  4065d0:	4a39      	ldr	r2, [pc, #228]	; (4066b8 <vTaskIncrementTick+0x124>)
  4065d2:	6013      	str	r3, [r2, #0]
			pxOverflowDelayedTaskList = pxTemp;
  4065d4:	4a3a      	ldr	r2, [pc, #232]	; (4066c0 <vTaskIncrementTick+0x12c>)
  4065d6:	68fb      	ldr	r3, [r7, #12]
  4065d8:	6013      	str	r3, [r2, #0]
			xNumOfOverflows++;
  4065da:	4b3a      	ldr	r3, [pc, #232]	; (4066c4 <vTaskIncrementTick+0x130>)
  4065dc:	681b      	ldr	r3, [r3, #0]
  4065de:	3301      	adds	r3, #1
  4065e0:	4a38      	ldr	r2, [pc, #224]	; (4066c4 <vTaskIncrementTick+0x130>)
  4065e2:	6013      	str	r3, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4065e4:	4b34      	ldr	r3, [pc, #208]	; (4066b8 <vTaskIncrementTick+0x124>)
  4065e6:	681b      	ldr	r3, [r3, #0]
  4065e8:	681b      	ldr	r3, [r3, #0]
  4065ea:	2b00      	cmp	r3, #0
  4065ec:	d104      	bne.n	4065f8 <vTaskIncrementTick+0x64>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  4065ee:	4b36      	ldr	r3, [pc, #216]	; (4066c8 <vTaskIncrementTick+0x134>)
  4065f0:	f04f 32ff 	mov.w	r2, #4294967295
  4065f4:	601a      	str	r2, [r3, #0]
  4065f6:	e008      	b.n	40660a <vTaskIncrementTick+0x76>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4065f8:	4b2f      	ldr	r3, [pc, #188]	; (4066b8 <vTaskIncrementTick+0x124>)
  4065fa:	681b      	ldr	r3, [r3, #0]
  4065fc:	68db      	ldr	r3, [r3, #12]
  4065fe:	68db      	ldr	r3, [r3, #12]
  406600:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  406602:	68bb      	ldr	r3, [r7, #8]
  406604:	685b      	ldr	r3, [r3, #4]
  406606:	4a30      	ldr	r2, [pc, #192]	; (4066c8 <vTaskIncrementTick+0x134>)
  406608:	6013      	str	r3, [r2, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  40660a:	4b2a      	ldr	r3, [pc, #168]	; (4066b4 <vTaskIncrementTick+0x120>)
  40660c:	681a      	ldr	r2, [r3, #0]
  40660e:	4b2e      	ldr	r3, [pc, #184]	; (4066c8 <vTaskIncrementTick+0x134>)
  406610:	681b      	ldr	r3, [r3, #0]
  406612:	429a      	cmp	r2, r3
  406614:	d347      	bcc.n	4066a6 <vTaskIncrementTick+0x112>
  406616:	4b28      	ldr	r3, [pc, #160]	; (4066b8 <vTaskIncrementTick+0x124>)
  406618:	681b      	ldr	r3, [r3, #0]
  40661a:	681b      	ldr	r3, [r3, #0]
  40661c:	2b00      	cmp	r3, #0
  40661e:	d104      	bne.n	40662a <vTaskIncrementTick+0x96>
  406620:	4b29      	ldr	r3, [pc, #164]	; (4066c8 <vTaskIncrementTick+0x134>)
  406622:	f04f 32ff 	mov.w	r2, #4294967295
  406626:	601a      	str	r2, [r3, #0]
  406628:	e03d      	b.n	4066a6 <vTaskIncrementTick+0x112>
  40662a:	4b23      	ldr	r3, [pc, #140]	; (4066b8 <vTaskIncrementTick+0x124>)
  40662c:	681b      	ldr	r3, [r3, #0]
  40662e:	68db      	ldr	r3, [r3, #12]
  406630:	68db      	ldr	r3, [r3, #12]
  406632:	60bb      	str	r3, [r7, #8]
  406634:	68bb      	ldr	r3, [r7, #8]
  406636:	685b      	ldr	r3, [r3, #4]
  406638:	607b      	str	r3, [r7, #4]
  40663a:	4b1e      	ldr	r3, [pc, #120]	; (4066b4 <vTaskIncrementTick+0x120>)
  40663c:	681a      	ldr	r2, [r3, #0]
  40663e:	687b      	ldr	r3, [r7, #4]
  406640:	429a      	cmp	r2, r3
  406642:	d203      	bcs.n	40664c <vTaskIncrementTick+0xb8>
  406644:	4a20      	ldr	r2, [pc, #128]	; (4066c8 <vTaskIncrementTick+0x134>)
  406646:	687b      	ldr	r3, [r7, #4]
  406648:	6013      	str	r3, [r2, #0]
  40664a:	e02c      	b.n	4066a6 <vTaskIncrementTick+0x112>
  40664c:	68bb      	ldr	r3, [r7, #8]
  40664e:	3304      	adds	r3, #4
  406650:	4618      	mov	r0, r3
  406652:	4b1e      	ldr	r3, [pc, #120]	; (4066cc <vTaskIncrementTick+0x138>)
  406654:	4798      	blx	r3
  406656:	68bb      	ldr	r3, [r7, #8]
  406658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40665a:	2b00      	cmp	r3, #0
  40665c:	d004      	beq.n	406668 <vTaskIncrementTick+0xd4>
  40665e:	68bb      	ldr	r3, [r7, #8]
  406660:	3318      	adds	r3, #24
  406662:	4618      	mov	r0, r3
  406664:	4b19      	ldr	r3, [pc, #100]	; (4066cc <vTaskIncrementTick+0x138>)
  406666:	4798      	blx	r3
  406668:	68bb      	ldr	r3, [r7, #8]
  40666a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40666c:	4b18      	ldr	r3, [pc, #96]	; (4066d0 <vTaskIncrementTick+0x13c>)
  40666e:	681b      	ldr	r3, [r3, #0]
  406670:	429a      	cmp	r2, r3
  406672:	d903      	bls.n	40667c <vTaskIncrementTick+0xe8>
  406674:	68bb      	ldr	r3, [r7, #8]
  406676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406678:	4a15      	ldr	r2, [pc, #84]	; (4066d0 <vTaskIncrementTick+0x13c>)
  40667a:	6013      	str	r3, [r2, #0]
  40667c:	68bb      	ldr	r3, [r7, #8]
  40667e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406680:	4613      	mov	r3, r2
  406682:	009b      	lsls	r3, r3, #2
  406684:	4413      	add	r3, r2
  406686:	009b      	lsls	r3, r3, #2
  406688:	4a12      	ldr	r2, [pc, #72]	; (4066d4 <vTaskIncrementTick+0x140>)
  40668a:	441a      	add	r2, r3
  40668c:	68bb      	ldr	r3, [r7, #8]
  40668e:	3304      	adds	r3, #4
  406690:	4619      	mov	r1, r3
  406692:	4610      	mov	r0, r2
  406694:	4b10      	ldr	r3, [pc, #64]	; (4066d8 <vTaskIncrementTick+0x144>)
  406696:	4798      	blx	r3
  406698:	e7bd      	b.n	406616 <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
  40669a:	4b10      	ldr	r3, [pc, #64]	; (4066dc <vTaskIncrementTick+0x148>)
  40669c:	681b      	ldr	r3, [r3, #0]
  40669e:	3301      	adds	r3, #1
  4066a0:	4a0e      	ldr	r2, [pc, #56]	; (4066dc <vTaskIncrementTick+0x148>)
  4066a2:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
  4066a4:	e7ff      	b.n	4066a6 <vTaskIncrementTick+0x112>
  4066a6:	bf00      	nop
  4066a8:	3710      	adds	r7, #16
  4066aa:	46bd      	mov	sp, r7
  4066ac:	bd80      	pop	{r7, pc}
  4066ae:	bf00      	nop
  4066b0:	200026e0 	.word	0x200026e0
  4066b4:	200026d0 	.word	0x200026d0
  4066b8:	20002684 	.word	0x20002684
  4066bc:	00405655 	.word	0x00405655
  4066c0:	20002688 	.word	0x20002688
  4066c4:	200026ec 	.word	0x200026ec
  4066c8:	20000040 	.word	0x20000040
  4066cc:	00405431 	.word	0x00405431
  4066d0:	200026d8 	.word	0x200026d8
  4066d4:	200025f8 	.word	0x200025f8
  4066d8:	00405371 	.word	0x00405371
  4066dc:	200026e4 	.word	0x200026e4

004066e0 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  4066e0:	b580      	push	{r7, lr}
  4066e2:	b082      	sub	sp, #8
  4066e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  4066e6:	4b34      	ldr	r3, [pc, #208]	; (4067b8 <vTaskSwitchContext+0xd8>)
  4066e8:	681b      	ldr	r3, [r3, #0]
  4066ea:	2b00      	cmp	r3, #0
  4066ec:	d003      	beq.n	4066f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  4066ee:	4b33      	ldr	r3, [pc, #204]	; (4067bc <vTaskSwitchContext+0xdc>)
  4066f0:	2201      	movs	r2, #1
  4066f2:	601a      	str	r2, [r3, #0]

		taskSELECT_HIGHEST_PRIORITY_TASK();

		traceTASK_SWITCHED_IN();
	}
}
  4066f4:	e05b      	b.n	4067ae <vTaskSwitchContext+0xce>
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
				ulTaskSwitchedInTime = ulTempCounter;
		}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
  4066f6:	4b32      	ldr	r3, [pc, #200]	; (4067c0 <vTaskSwitchContext+0xe0>)
  4066f8:	681b      	ldr	r3, [r3, #0]
  4066fa:	681a      	ldr	r2, [r3, #0]
  4066fc:	4b30      	ldr	r3, [pc, #192]	; (4067c0 <vTaskSwitchContext+0xe0>)
  4066fe:	681b      	ldr	r3, [r3, #0]
  406700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406702:	429a      	cmp	r2, r3
  406704:	d808      	bhi.n	406718 <vTaskSwitchContext+0x38>
  406706:	4b2e      	ldr	r3, [pc, #184]	; (4067c0 <vTaskSwitchContext+0xe0>)
  406708:	681a      	ldr	r2, [r3, #0]
  40670a:	4b2d      	ldr	r3, [pc, #180]	; (4067c0 <vTaskSwitchContext+0xe0>)
  40670c:	681b      	ldr	r3, [r3, #0]
  40670e:	3334      	adds	r3, #52	; 0x34
  406710:	4619      	mov	r1, r3
  406712:	4610      	mov	r0, r2
  406714:	4b2b      	ldr	r3, [pc, #172]	; (4067c4 <vTaskSwitchContext+0xe4>)
  406716:	4798      	blx	r3
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
  406718:	4b29      	ldr	r3, [pc, #164]	; (4067c0 <vTaskSwitchContext+0xe0>)
  40671a:	681b      	ldr	r3, [r3, #0]
  40671c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40671e:	2214      	movs	r2, #20
  406720:	4929      	ldr	r1, [pc, #164]	; (4067c8 <vTaskSwitchContext+0xe8>)
  406722:	4618      	mov	r0, r3
  406724:	4b29      	ldr	r3, [pc, #164]	; (4067cc <vTaskSwitchContext+0xec>)
  406726:	4798      	blx	r3
  406728:	4603      	mov	r3, r0
  40672a:	2b00      	cmp	r3, #0
  40672c:	d016      	beq.n	40675c <vTaskSwitchContext+0x7c>
  40672e:	4b24      	ldr	r3, [pc, #144]	; (4067c0 <vTaskSwitchContext+0xe0>)
  406730:	681a      	ldr	r2, [r3, #0]
  406732:	4b23      	ldr	r3, [pc, #140]	; (4067c0 <vTaskSwitchContext+0xe0>)
  406734:	681b      	ldr	r3, [r3, #0]
  406736:	3334      	adds	r3, #52	; 0x34
  406738:	4619      	mov	r1, r3
  40673a:	4610      	mov	r0, r2
  40673c:	4b21      	ldr	r3, [pc, #132]	; (4067c4 <vTaskSwitchContext+0xe4>)
  40673e:	4798      	blx	r3

		taskSELECT_HIGHEST_PRIORITY_TASK();
  406740:	e00c      	b.n	40675c <vTaskSwitchContext+0x7c>
  406742:	4b23      	ldr	r3, [pc, #140]	; (4067d0 <vTaskSwitchContext+0xf0>)
  406744:	681b      	ldr	r3, [r3, #0]
  406746:	2b00      	cmp	r3, #0
  406748:	d103      	bne.n	406752 <vTaskSwitchContext+0x72>
  40674a:	4b22      	ldr	r3, [pc, #136]	; (4067d4 <vTaskSwitchContext+0xf4>)
  40674c:	4798      	blx	r3
  40674e:	bf00      	nop
  406750:	e7fd      	b.n	40674e <vTaskSwitchContext+0x6e>
  406752:	4b1f      	ldr	r3, [pc, #124]	; (4067d0 <vTaskSwitchContext+0xf0>)
  406754:	681b      	ldr	r3, [r3, #0]
  406756:	3b01      	subs	r3, #1
  406758:	4a1d      	ldr	r2, [pc, #116]	; (4067d0 <vTaskSwitchContext+0xf0>)
  40675a:	6013      	str	r3, [r2, #0]
  40675c:	4b1c      	ldr	r3, [pc, #112]	; (4067d0 <vTaskSwitchContext+0xf0>)
  40675e:	681a      	ldr	r2, [r3, #0]
  406760:	491d      	ldr	r1, [pc, #116]	; (4067d8 <vTaskSwitchContext+0xf8>)
  406762:	4613      	mov	r3, r2
  406764:	009b      	lsls	r3, r3, #2
  406766:	4413      	add	r3, r2
  406768:	009b      	lsls	r3, r3, #2
  40676a:	440b      	add	r3, r1
  40676c:	681b      	ldr	r3, [r3, #0]
  40676e:	2b00      	cmp	r3, #0
  406770:	d0e7      	beq.n	406742 <vTaskSwitchContext+0x62>
  406772:	4b17      	ldr	r3, [pc, #92]	; (4067d0 <vTaskSwitchContext+0xf0>)
  406774:	681a      	ldr	r2, [r3, #0]
  406776:	4613      	mov	r3, r2
  406778:	009b      	lsls	r3, r3, #2
  40677a:	4413      	add	r3, r2
  40677c:	009b      	lsls	r3, r3, #2
  40677e:	4a16      	ldr	r2, [pc, #88]	; (4067d8 <vTaskSwitchContext+0xf8>)
  406780:	4413      	add	r3, r2
  406782:	607b      	str	r3, [r7, #4]
  406784:	687b      	ldr	r3, [r7, #4]
  406786:	685b      	ldr	r3, [r3, #4]
  406788:	685a      	ldr	r2, [r3, #4]
  40678a:	687b      	ldr	r3, [r7, #4]
  40678c:	605a      	str	r2, [r3, #4]
  40678e:	687b      	ldr	r3, [r7, #4]
  406790:	685a      	ldr	r2, [r3, #4]
  406792:	687b      	ldr	r3, [r7, #4]
  406794:	3308      	adds	r3, #8
  406796:	429a      	cmp	r2, r3
  406798:	d104      	bne.n	4067a4 <vTaskSwitchContext+0xc4>
  40679a:	687b      	ldr	r3, [r7, #4]
  40679c:	685b      	ldr	r3, [r3, #4]
  40679e:	685a      	ldr	r2, [r3, #4]
  4067a0:	687b      	ldr	r3, [r7, #4]
  4067a2:	605a      	str	r2, [r3, #4]
  4067a4:	687b      	ldr	r3, [r7, #4]
  4067a6:	685b      	ldr	r3, [r3, #4]
  4067a8:	68db      	ldr	r3, [r3, #12]
  4067aa:	4a05      	ldr	r2, [pc, #20]	; (4067c0 <vTaskSwitchContext+0xe0>)
  4067ac:	6013      	str	r3, [r2, #0]

		traceTASK_SWITCHED_IN();
	}
}
  4067ae:	bf00      	nop
  4067b0:	3708      	adds	r7, #8
  4067b2:	46bd      	mov	sp, r7
  4067b4:	bd80      	pop	{r7, pc}
  4067b6:	bf00      	nop
  4067b8:	200026e0 	.word	0x200026e0
  4067bc:	200026e8 	.word	0x200026e8
  4067c0:	200025f4 	.word	0x200025f4
  4067c4:	00407bbd 	.word	0x00407bbd
  4067c8:	0040bcf4 	.word	0x0040bcf4
  4067cc:	0040b925 	.word	0x0040b925
  4067d0:	200026d8 	.word	0x200026d8
  4067d4:	00405655 	.word	0x00405655
  4067d8:	200025f8 	.word	0x200025f8

004067dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  4067dc:	b580      	push	{r7, lr}
  4067de:	b084      	sub	sp, #16
  4067e0:	af00      	add	r7, sp, #0
  4067e2:	6078      	str	r0, [r7, #4]
  4067e4:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
  4067e6:	687b      	ldr	r3, [r7, #4]
  4067e8:	2b00      	cmp	r3, #0
  4067ea:	d103      	bne.n	4067f4 <vTaskPlaceOnEventList+0x18>
  4067ec:	4b14      	ldr	r3, [pc, #80]	; (406840 <vTaskPlaceOnEventList+0x64>)
  4067ee:	4798      	blx	r3
  4067f0:	bf00      	nop
  4067f2:	e7fd      	b.n	4067f0 <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  4067f4:	4b13      	ldr	r3, [pc, #76]	; (406844 <vTaskPlaceOnEventList+0x68>)
  4067f6:	681b      	ldr	r3, [r3, #0]
  4067f8:	3318      	adds	r3, #24
  4067fa:	4619      	mov	r1, r3
  4067fc:	6878      	ldr	r0, [r7, #4]
  4067fe:	4b12      	ldr	r3, [pc, #72]	; (406848 <vTaskPlaceOnEventList+0x6c>)
  406800:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  406802:	4b10      	ldr	r3, [pc, #64]	; (406844 <vTaskPlaceOnEventList+0x68>)
  406804:	681b      	ldr	r3, [r3, #0]
  406806:	3304      	adds	r3, #4
  406808:	4618      	mov	r0, r3
  40680a:	4b10      	ldr	r3, [pc, #64]	; (40684c <vTaskPlaceOnEventList+0x70>)
  40680c:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  40680e:	683b      	ldr	r3, [r7, #0]
  406810:	f1b3 3fff 	cmp.w	r3, #4294967295
  406814:	d107      	bne.n	406826 <vTaskPlaceOnEventList+0x4a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  406816:	4b0b      	ldr	r3, [pc, #44]	; (406844 <vTaskPlaceOnEventList+0x68>)
  406818:	681b      	ldr	r3, [r3, #0]
  40681a:	3304      	adds	r3, #4
  40681c:	4619      	mov	r1, r3
  40681e:	480c      	ldr	r0, [pc, #48]	; (406850 <vTaskPlaceOnEventList+0x74>)
  406820:	4b0c      	ldr	r3, [pc, #48]	; (406854 <vTaskPlaceOnEventList+0x78>)
  406822:	4798      	blx	r3
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
  406824:	e007      	b.n	406836 <vTaskPlaceOnEventList+0x5a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
  406826:	4b0c      	ldr	r3, [pc, #48]	; (406858 <vTaskPlaceOnEventList+0x7c>)
  406828:	681a      	ldr	r2, [r3, #0]
  40682a:	683b      	ldr	r3, [r7, #0]
  40682c:	4413      	add	r3, r2
  40682e:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  406830:	68f8      	ldr	r0, [r7, #12]
  406832:	4b0a      	ldr	r3, [pc, #40]	; (40685c <vTaskPlaceOnEventList+0x80>)
  406834:	4798      	blx	r3
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
  406836:	bf00      	nop
  406838:	3710      	adds	r7, #16
  40683a:	46bd      	mov	sp, r7
  40683c:	bd80      	pop	{r7, pc}
  40683e:	bf00      	nop
  406840:	00405655 	.word	0x00405655
  406844:	200025f4 	.word	0x200025f4
  406848:	004053c1 	.word	0x004053c1
  40684c:	00405431 	.word	0x00405431
  406850:	200026b8 	.word	0x200026b8
  406854:	00405371 	.word	0x00405371
  406858:	200026d0 	.word	0x200026d0
  40685c:	00406c25 	.word	0x00406c25

00406860 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
  406860:	b580      	push	{r7, lr}
  406862:	b084      	sub	sp, #16
  406864:	af00      	add	r7, sp, #0
  406866:	6078      	str	r0, [r7, #4]
  406868:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
  40686a:	687b      	ldr	r3, [r7, #4]
  40686c:	2b00      	cmp	r3, #0
  40686e:	d103      	bne.n	406878 <vTaskPlaceOnEventListRestricted+0x18>
  406870:	4b0e      	ldr	r3, [pc, #56]	; (4068ac <vTaskPlaceOnEventListRestricted+0x4c>)
  406872:	4798      	blx	r3
  406874:	bf00      	nop
  406876:	e7fd      	b.n	406874 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  406878:	4b0d      	ldr	r3, [pc, #52]	; (4068b0 <vTaskPlaceOnEventListRestricted+0x50>)
  40687a:	681b      	ldr	r3, [r3, #0]
  40687c:	3318      	adds	r3, #24
  40687e:	4619      	mov	r1, r3
  406880:	6878      	ldr	r0, [r7, #4]
  406882:	4b0c      	ldr	r3, [pc, #48]	; (4068b4 <vTaskPlaceOnEventListRestricted+0x54>)
  406884:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  406886:	4b0a      	ldr	r3, [pc, #40]	; (4068b0 <vTaskPlaceOnEventListRestricted+0x50>)
  406888:	681b      	ldr	r3, [r3, #0]
  40688a:	3304      	adds	r3, #4
  40688c:	4618      	mov	r0, r3
  40688e:	4b0a      	ldr	r3, [pc, #40]	; (4068b8 <vTaskPlaceOnEventListRestricted+0x58>)
  406890:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
  406892:	4b0a      	ldr	r3, [pc, #40]	; (4068bc <vTaskPlaceOnEventListRestricted+0x5c>)
  406894:	681a      	ldr	r2, [r3, #0]
  406896:	683b      	ldr	r3, [r7, #0]
  406898:	4413      	add	r3, r2
  40689a:	60fb      	str	r3, [r7, #12]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  40689c:	68f8      	ldr	r0, [r7, #12]
  40689e:	4b08      	ldr	r3, [pc, #32]	; (4068c0 <vTaskPlaceOnEventListRestricted+0x60>)
  4068a0:	4798      	blx	r3
	}
  4068a2:	bf00      	nop
  4068a4:	3710      	adds	r7, #16
  4068a6:	46bd      	mov	sp, r7
  4068a8:	bd80      	pop	{r7, pc}
  4068aa:	bf00      	nop
  4068ac:	00405655 	.word	0x00405655
  4068b0:	200025f4 	.word	0x200025f4
  4068b4:	00405371 	.word	0x00405371
  4068b8:	00405431 	.word	0x00405431
  4068bc:	200026d0 	.word	0x200026d0
  4068c0:	00406c25 	.word	0x00406c25

004068c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  4068c4:	b580      	push	{r7, lr}
  4068c6:	b084      	sub	sp, #16
  4068c8:	af00      	add	r7, sp, #0
  4068ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4068cc:	687b      	ldr	r3, [r7, #4]
  4068ce:	68db      	ldr	r3, [r3, #12]
  4068d0:	68db      	ldr	r3, [r3, #12]
  4068d2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
  4068d4:	68bb      	ldr	r3, [r7, #8]
  4068d6:	2b00      	cmp	r3, #0
  4068d8:	d103      	bne.n	4068e2 <xTaskRemoveFromEventList+0x1e>
  4068da:	4b21      	ldr	r3, [pc, #132]	; (406960 <xTaskRemoveFromEventList+0x9c>)
  4068dc:	4798      	blx	r3
  4068de:	bf00      	nop
  4068e0:	e7fd      	b.n	4068de <xTaskRemoveFromEventList+0x1a>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4068e2:	68bb      	ldr	r3, [r7, #8]
  4068e4:	3318      	adds	r3, #24
  4068e6:	4618      	mov	r0, r3
  4068e8:	4b1e      	ldr	r3, [pc, #120]	; (406964 <xTaskRemoveFromEventList+0xa0>)
  4068ea:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  4068ec:	4b1e      	ldr	r3, [pc, #120]	; (406968 <xTaskRemoveFromEventList+0xa4>)
  4068ee:	681b      	ldr	r3, [r3, #0]
  4068f0:	2b00      	cmp	r3, #0
  4068f2:	d11d      	bne.n	406930 <xTaskRemoveFromEventList+0x6c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  4068f4:	68bb      	ldr	r3, [r7, #8]
  4068f6:	3304      	adds	r3, #4
  4068f8:	4618      	mov	r0, r3
  4068fa:	4b1a      	ldr	r3, [pc, #104]	; (406964 <xTaskRemoveFromEventList+0xa0>)
  4068fc:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  4068fe:	68bb      	ldr	r3, [r7, #8]
  406900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406902:	4b1a      	ldr	r3, [pc, #104]	; (40696c <xTaskRemoveFromEventList+0xa8>)
  406904:	681b      	ldr	r3, [r3, #0]
  406906:	429a      	cmp	r2, r3
  406908:	d903      	bls.n	406912 <xTaskRemoveFromEventList+0x4e>
  40690a:	68bb      	ldr	r3, [r7, #8]
  40690c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40690e:	4a17      	ldr	r2, [pc, #92]	; (40696c <xTaskRemoveFromEventList+0xa8>)
  406910:	6013      	str	r3, [r2, #0]
  406912:	68bb      	ldr	r3, [r7, #8]
  406914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406916:	4613      	mov	r3, r2
  406918:	009b      	lsls	r3, r3, #2
  40691a:	4413      	add	r3, r2
  40691c:	009b      	lsls	r3, r3, #2
  40691e:	4a14      	ldr	r2, [pc, #80]	; (406970 <xTaskRemoveFromEventList+0xac>)
  406920:	441a      	add	r2, r3
  406922:	68bb      	ldr	r3, [r7, #8]
  406924:	3304      	adds	r3, #4
  406926:	4619      	mov	r1, r3
  406928:	4610      	mov	r0, r2
  40692a:	4b12      	ldr	r3, [pc, #72]	; (406974 <xTaskRemoveFromEventList+0xb0>)
  40692c:	4798      	blx	r3
  40692e:	e005      	b.n	40693c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  406930:	68bb      	ldr	r3, [r7, #8]
  406932:	3318      	adds	r3, #24
  406934:	4619      	mov	r1, r3
  406936:	4810      	ldr	r0, [pc, #64]	; (406978 <xTaskRemoveFromEventList+0xb4>)
  406938:	4b0e      	ldr	r3, [pc, #56]	; (406974 <xTaskRemoveFromEventList+0xb0>)
  40693a:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40693c:	68bb      	ldr	r3, [r7, #8]
  40693e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406940:	4b0e      	ldr	r3, [pc, #56]	; (40697c <xTaskRemoveFromEventList+0xb8>)
  406942:	681b      	ldr	r3, [r3, #0]
  406944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406946:	429a      	cmp	r2, r3
  406948:	d302      	bcc.n	406950 <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
  40694a:	2301      	movs	r3, #1
  40694c:	60fb      	str	r3, [r7, #12]
  40694e:	e001      	b.n	406954 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
  406950:	2300      	movs	r3, #0
  406952:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
  406954:	68fb      	ldr	r3, [r7, #12]
}
  406956:	4618      	mov	r0, r3
  406958:	3710      	adds	r7, #16
  40695a:	46bd      	mov	sp, r7
  40695c:	bd80      	pop	{r7, pc}
  40695e:	bf00      	nop
  406960:	00405655 	.word	0x00405655
  406964:	00405431 	.word	0x00405431
  406968:	200026e0 	.word	0x200026e0
  40696c:	200026d8 	.word	0x200026d8
  406970:	200025f8 	.word	0x200025f8
  406974:	00405371 	.word	0x00405371
  406978:	2000268c 	.word	0x2000268c
  40697c:	200025f4 	.word	0x200025f4

00406980 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  406980:	b580      	push	{r7, lr}
  406982:	b082      	sub	sp, #8
  406984:	af00      	add	r7, sp, #0
  406986:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
  406988:	687b      	ldr	r3, [r7, #4]
  40698a:	2b00      	cmp	r3, #0
  40698c:	d103      	bne.n	406996 <vTaskSetTimeOutState+0x16>
  40698e:	4b08      	ldr	r3, [pc, #32]	; (4069b0 <vTaskSetTimeOutState+0x30>)
  406990:	4798      	blx	r3
  406992:	bf00      	nop
  406994:	e7fd      	b.n	406992 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  406996:	4b07      	ldr	r3, [pc, #28]	; (4069b4 <vTaskSetTimeOutState+0x34>)
  406998:	681a      	ldr	r2, [r3, #0]
  40699a:	687b      	ldr	r3, [r7, #4]
  40699c:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40699e:	4b06      	ldr	r3, [pc, #24]	; (4069b8 <vTaskSetTimeOutState+0x38>)
  4069a0:	681a      	ldr	r2, [r3, #0]
  4069a2:	687b      	ldr	r3, [r7, #4]
  4069a4:	605a      	str	r2, [r3, #4]
}
  4069a6:	bf00      	nop
  4069a8:	3708      	adds	r7, #8
  4069aa:	46bd      	mov	sp, r7
  4069ac:	bd80      	pop	{r7, pc}
  4069ae:	bf00      	nop
  4069b0:	00405655 	.word	0x00405655
  4069b4:	200026ec 	.word	0x200026ec
  4069b8:	200026d0 	.word	0x200026d0

004069bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  4069bc:	b580      	push	{r7, lr}
  4069be:	b084      	sub	sp, #16
  4069c0:	af00      	add	r7, sp, #0
  4069c2:	6078      	str	r0, [r7, #4]
  4069c4:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
  4069c6:	687b      	ldr	r3, [r7, #4]
  4069c8:	2b00      	cmp	r3, #0
  4069ca:	d103      	bne.n	4069d4 <xTaskCheckForTimeOut+0x18>
  4069cc:	4b22      	ldr	r3, [pc, #136]	; (406a58 <xTaskCheckForTimeOut+0x9c>)
  4069ce:	4798      	blx	r3
  4069d0:	bf00      	nop
  4069d2:	e7fd      	b.n	4069d0 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
  4069d4:	683b      	ldr	r3, [r7, #0]
  4069d6:	2b00      	cmp	r3, #0
  4069d8:	d103      	bne.n	4069e2 <xTaskCheckForTimeOut+0x26>
  4069da:	4b1f      	ldr	r3, [pc, #124]	; (406a58 <xTaskCheckForTimeOut+0x9c>)
  4069dc:	4798      	blx	r3
  4069de:	bf00      	nop
  4069e0:	e7fd      	b.n	4069de <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
  4069e2:	4b1e      	ldr	r3, [pc, #120]	; (406a5c <xTaskCheckForTimeOut+0xa0>)
  4069e4:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  4069e6:	683b      	ldr	r3, [r7, #0]
  4069e8:	681b      	ldr	r3, [r3, #0]
  4069ea:	f1b3 3fff 	cmp.w	r3, #4294967295
  4069ee:	d102      	bne.n	4069f6 <xTaskCheckForTimeOut+0x3a>
			{
				xReturn = pdFALSE;
  4069f0:	2300      	movs	r3, #0
  4069f2:	60fb      	str	r3, [r7, #12]
  4069f4:	e029      	b.n	406a4a <xTaskCheckForTimeOut+0x8e>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  4069f6:	687b      	ldr	r3, [r7, #4]
  4069f8:	681a      	ldr	r2, [r3, #0]
  4069fa:	4b19      	ldr	r3, [pc, #100]	; (406a60 <xTaskCheckForTimeOut+0xa4>)
  4069fc:	681b      	ldr	r3, [r3, #0]
  4069fe:	429a      	cmp	r2, r3
  406a00:	d008      	beq.n	406a14 <xTaskCheckForTimeOut+0x58>
  406a02:	687b      	ldr	r3, [r7, #4]
  406a04:	685a      	ldr	r2, [r3, #4]
  406a06:	4b17      	ldr	r3, [pc, #92]	; (406a64 <xTaskCheckForTimeOut+0xa8>)
  406a08:	681b      	ldr	r3, [r3, #0]
  406a0a:	429a      	cmp	r2, r3
  406a0c:	d802      	bhi.n	406a14 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  406a0e:	2301      	movs	r3, #1
  406a10:	60fb      	str	r3, [r7, #12]
  406a12:	e01a      	b.n	406a4a <xTaskCheckForTimeOut+0x8e>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  406a14:	4b13      	ldr	r3, [pc, #76]	; (406a64 <xTaskCheckForTimeOut+0xa8>)
  406a16:	681a      	ldr	r2, [r3, #0]
  406a18:	687b      	ldr	r3, [r7, #4]
  406a1a:	685b      	ldr	r3, [r3, #4]
  406a1c:	1ad2      	subs	r2, r2, r3
  406a1e:	683b      	ldr	r3, [r7, #0]
  406a20:	681b      	ldr	r3, [r3, #0]
  406a22:	429a      	cmp	r2, r3
  406a24:	d20f      	bcs.n	406a46 <xTaskCheckForTimeOut+0x8a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  406a26:	4b0f      	ldr	r3, [pc, #60]	; (406a64 <xTaskCheckForTimeOut+0xa8>)
  406a28:	681a      	ldr	r2, [r3, #0]
  406a2a:	687b      	ldr	r3, [r7, #4]
  406a2c:	685b      	ldr	r3, [r3, #4]
  406a2e:	1ad3      	subs	r3, r2, r3
  406a30:	683a      	ldr	r2, [r7, #0]
  406a32:	6812      	ldr	r2, [r2, #0]
  406a34:	1ad2      	subs	r2, r2, r3
  406a36:	683b      	ldr	r3, [r7, #0]
  406a38:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
  406a3a:	6878      	ldr	r0, [r7, #4]
  406a3c:	4b0a      	ldr	r3, [pc, #40]	; (406a68 <xTaskCheckForTimeOut+0xac>)
  406a3e:	4798      	blx	r3
			xReturn = pdFALSE;
  406a40:	2300      	movs	r3, #0
  406a42:	60fb      	str	r3, [r7, #12]
  406a44:	e001      	b.n	406a4a <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			xReturn = pdTRUE;
  406a46:	2301      	movs	r3, #1
  406a48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
  406a4a:	4b08      	ldr	r3, [pc, #32]	; (406a6c <xTaskCheckForTimeOut+0xb0>)
  406a4c:	4798      	blx	r3

	return xReturn;
  406a4e:	68fb      	ldr	r3, [r7, #12]
}
  406a50:	4618      	mov	r0, r3
  406a52:	3710      	adds	r7, #16
  406a54:	46bd      	mov	sp, r7
  406a56:	bd80      	pop	{r7, pc}
  406a58:	00405655 	.word	0x00405655
  406a5c:	0040560d 	.word	0x0040560d
  406a60:	200026ec 	.word	0x200026ec
  406a64:	200026d0 	.word	0x200026d0
  406a68:	00406981 	.word	0x00406981
  406a6c:	0040562d 	.word	0x0040562d

00406a70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
  406a70:	b480      	push	{r7}
  406a72:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
  406a74:	4b03      	ldr	r3, [pc, #12]	; (406a84 <vTaskMissedYield+0x14>)
  406a76:	2201      	movs	r2, #1
  406a78:	601a      	str	r2, [r3, #0]
}
  406a7a:	bf00      	nop
  406a7c:	46bd      	mov	sp, r7
  406a7e:	bc80      	pop	{r7}
  406a80:	4770      	bx	lr
  406a82:	bf00      	nop
  406a84:	200026e8 	.word	0x200026e8

00406a88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  406a88:	b580      	push	{r7, lr}
  406a8a:	b082      	sub	sp, #8
  406a8c:	af00      	add	r7, sp, #0
  406a8e:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
  406a90:	4b01      	ldr	r3, [pc, #4]	; (406a98 <prvIdleTask+0x10>)
  406a92:	4798      	blx	r3
				}
				xTaskResumeAll();
			}
		}
		#endif
	}
  406a94:	e7fc      	b.n	406a90 <prvIdleTask+0x8>
  406a96:	bf00      	nop
  406a98:	00406b95 	.word	0x00406b95

00406a9c <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
  406a9c:	b580      	push	{r7, lr}
  406a9e:	b084      	sub	sp, #16
  406aa0:	af00      	add	r7, sp, #0
  406aa2:	60f8      	str	r0, [r7, #12]
  406aa4:	60b9      	str	r1, [r7, #8]
  406aa6:	607a      	str	r2, [r7, #4]
  406aa8:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  406aaa:	68fb      	ldr	r3, [r7, #12]
  406aac:	3334      	adds	r3, #52	; 0x34
  406aae:	220c      	movs	r2, #12
  406ab0:	68b9      	ldr	r1, [r7, #8]
  406ab2:	4618      	mov	r0, r3
  406ab4:	4b14      	ldr	r3, [pc, #80]	; (406b08 <prvInitialiseTCBVariables+0x6c>)
  406ab6:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  406ab8:	68fb      	ldr	r3, [r7, #12]
  406aba:	2200      	movs	r2, #0
  406abc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
  406ac0:	687b      	ldr	r3, [r7, #4]
  406ac2:	2b04      	cmp	r3, #4
  406ac4:	d901      	bls.n	406aca <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
  406ac6:	2304      	movs	r3, #4
  406ac8:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
  406aca:	68fb      	ldr	r3, [r7, #12]
  406acc:	687a      	ldr	r2, [r7, #4]
  406ace:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  406ad0:	68fb      	ldr	r3, [r7, #12]
  406ad2:	687a      	ldr	r2, [r7, #4]
  406ad4:	641a      	str	r2, [r3, #64]	; 0x40
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  406ad6:	68fb      	ldr	r3, [r7, #12]
  406ad8:	3304      	adds	r3, #4
  406ada:	4618      	mov	r0, r3
  406adc:	4b0b      	ldr	r3, [pc, #44]	; (406b0c <prvInitialiseTCBVariables+0x70>)
  406ade:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  406ae0:	68fb      	ldr	r3, [r7, #12]
  406ae2:	3318      	adds	r3, #24
  406ae4:	4618      	mov	r0, r3
  406ae6:	4b09      	ldr	r3, [pc, #36]	; (406b0c <prvInitialiseTCBVariables+0x70>)
  406ae8:	4798      	blx	r3

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  406aea:	68fb      	ldr	r3, [r7, #12]
  406aec:	68fa      	ldr	r2, [r7, #12]
  406aee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  406af0:	687b      	ldr	r3, [r7, #4]
  406af2:	f1c3 0205 	rsb	r2, r3, #5
  406af6:	68fb      	ldr	r3, [r7, #12]
  406af8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  406afa:	68fb      	ldr	r3, [r7, #12]
  406afc:	68fa      	ldr	r2, [r7, #12]
  406afe:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
  406b00:	bf00      	nop
  406b02:	3710      	adds	r7, #16
  406b04:	46bd      	mov	sp, r7
  406b06:	bd80      	pop	{r7, pc}
  406b08:	0040bb59 	.word	0x0040bb59
  406b0c:	00405359 	.word	0x00405359

00406b10 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
  406b10:	b580      	push	{r7, lr}
  406b12:	b082      	sub	sp, #8
  406b14:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  406b16:	2300      	movs	r3, #0
  406b18:	607b      	str	r3, [r7, #4]
  406b1a:	e00c      	b.n	406b36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  406b1c:	687a      	ldr	r2, [r7, #4]
  406b1e:	4613      	mov	r3, r2
  406b20:	009b      	lsls	r3, r3, #2
  406b22:	4413      	add	r3, r2
  406b24:	009b      	lsls	r3, r3, #2
  406b26:	4a12      	ldr	r2, [pc, #72]	; (406b70 <prvInitialiseTaskLists+0x60>)
  406b28:	4413      	add	r3, r2
  406b2a:	4618      	mov	r0, r3
  406b2c:	4b11      	ldr	r3, [pc, #68]	; (406b74 <prvInitialiseTaskLists+0x64>)
  406b2e:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  406b30:	687b      	ldr	r3, [r7, #4]
  406b32:	3301      	adds	r3, #1
  406b34:	607b      	str	r3, [r7, #4]
  406b36:	687b      	ldr	r3, [r7, #4]
  406b38:	2b04      	cmp	r3, #4
  406b3a:	d9ef      	bls.n	406b1c <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  406b3c:	480e      	ldr	r0, [pc, #56]	; (406b78 <prvInitialiseTaskLists+0x68>)
  406b3e:	4b0d      	ldr	r3, [pc, #52]	; (406b74 <prvInitialiseTaskLists+0x64>)
  406b40:	4798      	blx	r3
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  406b42:	480e      	ldr	r0, [pc, #56]	; (406b7c <prvInitialiseTaskLists+0x6c>)
  406b44:	4b0b      	ldr	r3, [pc, #44]	; (406b74 <prvInitialiseTaskLists+0x64>)
  406b46:	4798      	blx	r3
	vListInitialise( ( xList * ) &xPendingReadyList );
  406b48:	480d      	ldr	r0, [pc, #52]	; (406b80 <prvInitialiseTaskLists+0x70>)
  406b4a:	4b0a      	ldr	r3, [pc, #40]	; (406b74 <prvInitialiseTaskLists+0x64>)
  406b4c:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  406b4e:	480d      	ldr	r0, [pc, #52]	; (406b84 <prvInitialiseTaskLists+0x74>)
  406b50:	4b08      	ldr	r3, [pc, #32]	; (406b74 <prvInitialiseTaskLists+0x64>)
  406b52:	4798      	blx	r3
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  406b54:	480c      	ldr	r0, [pc, #48]	; (406b88 <prvInitialiseTaskLists+0x78>)
  406b56:	4b07      	ldr	r3, [pc, #28]	; (406b74 <prvInitialiseTaskLists+0x64>)
  406b58:	4798      	blx	r3
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  406b5a:	4b0c      	ldr	r3, [pc, #48]	; (406b8c <prvInitialiseTaskLists+0x7c>)
  406b5c:	4a06      	ldr	r2, [pc, #24]	; (406b78 <prvInitialiseTaskLists+0x68>)
  406b5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  406b60:	4b0b      	ldr	r3, [pc, #44]	; (406b90 <prvInitialiseTaskLists+0x80>)
  406b62:	4a06      	ldr	r2, [pc, #24]	; (406b7c <prvInitialiseTaskLists+0x6c>)
  406b64:	601a      	str	r2, [r3, #0]
}
  406b66:	bf00      	nop
  406b68:	3708      	adds	r7, #8
  406b6a:	46bd      	mov	sp, r7
  406b6c:	bd80      	pop	{r7, pc}
  406b6e:	bf00      	nop
  406b70:	200025f8 	.word	0x200025f8
  406b74:	00405319 	.word	0x00405319
  406b78:	2000265c 	.word	0x2000265c
  406b7c:	20002670 	.word	0x20002670
  406b80:	2000268c 	.word	0x2000268c
  406b84:	200026a0 	.word	0x200026a0
  406b88:	200026b8 	.word	0x200026b8
  406b8c:	20002684 	.word	0x20002684
  406b90:	20002688 	.word	0x20002688

00406b94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
  406b94:	b580      	push	{r7, lr}
  406b96:	b082      	sub	sp, #8
  406b98:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  406b9a:	e028      	b.n	406bee <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
  406b9c:	4b18      	ldr	r3, [pc, #96]	; (406c00 <prvCheckTasksWaitingTermination+0x6c>)
  406b9e:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  406ba0:	4b18      	ldr	r3, [pc, #96]	; (406c04 <prvCheckTasksWaitingTermination+0x70>)
  406ba2:	681b      	ldr	r3, [r3, #0]
  406ba4:	2b00      	cmp	r3, #0
  406ba6:	bf0c      	ite	eq
  406ba8:	2301      	moveq	r3, #1
  406baa:	2300      	movne	r3, #0
  406bac:	b2db      	uxtb	r3, r3
  406bae:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
  406bb0:	4b15      	ldr	r3, [pc, #84]	; (406c08 <prvCheckTasksWaitingTermination+0x74>)
  406bb2:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
  406bb4:	687b      	ldr	r3, [r7, #4]
  406bb6:	2b00      	cmp	r3, #0
  406bb8:	d119      	bne.n	406bee <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  406bba:	4b14      	ldr	r3, [pc, #80]	; (406c0c <prvCheckTasksWaitingTermination+0x78>)
  406bbc:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  406bbe:	4b11      	ldr	r3, [pc, #68]	; (406c04 <prvCheckTasksWaitingTermination+0x70>)
  406bc0:	68db      	ldr	r3, [r3, #12]
  406bc2:	68db      	ldr	r3, [r3, #12]
  406bc4:	603b      	str	r3, [r7, #0]
					uxListRemove( &( pxTCB->xGenericListItem ) );
  406bc6:	683b      	ldr	r3, [r7, #0]
  406bc8:	3304      	adds	r3, #4
  406bca:	4618      	mov	r0, r3
  406bcc:	4b10      	ldr	r3, [pc, #64]	; (406c10 <prvCheckTasksWaitingTermination+0x7c>)
  406bce:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  406bd0:	4b10      	ldr	r3, [pc, #64]	; (406c14 <prvCheckTasksWaitingTermination+0x80>)
  406bd2:	681b      	ldr	r3, [r3, #0]
  406bd4:	3b01      	subs	r3, #1
  406bd6:	4a0f      	ldr	r2, [pc, #60]	; (406c14 <prvCheckTasksWaitingTermination+0x80>)
  406bd8:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  406bda:	4b0f      	ldr	r3, [pc, #60]	; (406c18 <prvCheckTasksWaitingTermination+0x84>)
  406bdc:	681b      	ldr	r3, [r3, #0]
  406bde:	3b01      	subs	r3, #1
  406be0:	4a0d      	ldr	r2, [pc, #52]	; (406c18 <prvCheckTasksWaitingTermination+0x84>)
  406be2:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
  406be4:	4b0d      	ldr	r3, [pc, #52]	; (406c1c <prvCheckTasksWaitingTermination+0x88>)
  406be6:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
  406be8:	6838      	ldr	r0, [r7, #0]
  406bea:	4b0d      	ldr	r3, [pc, #52]	; (406c20 <prvCheckTasksWaitingTermination+0x8c>)
  406bec:	4798      	blx	r3
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  406bee:	4b0a      	ldr	r3, [pc, #40]	; (406c18 <prvCheckTasksWaitingTermination+0x84>)
  406bf0:	681b      	ldr	r3, [r3, #0]
  406bf2:	2b00      	cmp	r3, #0
  406bf4:	d1d2      	bne.n	406b9c <prvCheckTasksWaitingTermination+0x8>
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif
}
  406bf6:	bf00      	nop
  406bf8:	3708      	adds	r7, #8
  406bfa:	46bd      	mov	sp, r7
  406bfc:	bd80      	pop	{r7, pc}
  406bfe:	bf00      	nop
  406c00:	0040642d 	.word	0x0040642d
  406c04:	200026a0 	.word	0x200026a0
  406c08:	00406449 	.word	0x00406449
  406c0c:	0040560d 	.word	0x0040560d
  406c10:	00405431 	.word	0x00405431
  406c14:	200026cc 	.word	0x200026cc
  406c18:	200026b4 	.word	0x200026b4
  406c1c:	0040562d 	.word	0x0040562d
  406c20:	00406d05 	.word	0x00406d05

00406c24 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  406c24:	b580      	push	{r7, lr}
  406c26:	b082      	sub	sp, #8
  406c28:	af00      	add	r7, sp, #0
  406c2a:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  406c2c:	4b13      	ldr	r3, [pc, #76]	; (406c7c <prvAddCurrentTaskToDelayedList+0x58>)
  406c2e:	681b      	ldr	r3, [r3, #0]
  406c30:	687a      	ldr	r2, [r7, #4]
  406c32:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
  406c34:	4b12      	ldr	r3, [pc, #72]	; (406c80 <prvAddCurrentTaskToDelayedList+0x5c>)
  406c36:	681b      	ldr	r3, [r3, #0]
  406c38:	687a      	ldr	r2, [r7, #4]
  406c3a:	429a      	cmp	r2, r3
  406c3c:	d209      	bcs.n	406c52 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  406c3e:	4b11      	ldr	r3, [pc, #68]	; (406c84 <prvAddCurrentTaskToDelayedList+0x60>)
  406c40:	681a      	ldr	r2, [r3, #0]
  406c42:	4b0e      	ldr	r3, [pc, #56]	; (406c7c <prvAddCurrentTaskToDelayedList+0x58>)
  406c44:	681b      	ldr	r3, [r3, #0]
  406c46:	3304      	adds	r3, #4
  406c48:	4619      	mov	r1, r3
  406c4a:	4610      	mov	r0, r2
  406c4c:	4b0e      	ldr	r3, [pc, #56]	; (406c88 <prvAddCurrentTaskToDelayedList+0x64>)
  406c4e:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
  406c50:	e010      	b.n	406c74 <prvAddCurrentTaskToDelayedList+0x50>
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  406c52:	4b0e      	ldr	r3, [pc, #56]	; (406c8c <prvAddCurrentTaskToDelayedList+0x68>)
  406c54:	681a      	ldr	r2, [r3, #0]
  406c56:	4b09      	ldr	r3, [pc, #36]	; (406c7c <prvAddCurrentTaskToDelayedList+0x58>)
  406c58:	681b      	ldr	r3, [r3, #0]
  406c5a:	3304      	adds	r3, #4
  406c5c:	4619      	mov	r1, r3
  406c5e:	4610      	mov	r0, r2
  406c60:	4b09      	ldr	r3, [pc, #36]	; (406c88 <prvAddCurrentTaskToDelayedList+0x64>)
  406c62:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  406c64:	4b0a      	ldr	r3, [pc, #40]	; (406c90 <prvAddCurrentTaskToDelayedList+0x6c>)
  406c66:	681b      	ldr	r3, [r3, #0]
  406c68:	687a      	ldr	r2, [r7, #4]
  406c6a:	429a      	cmp	r2, r3
  406c6c:	d202      	bcs.n	406c74 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
  406c6e:	4a08      	ldr	r2, [pc, #32]	; (406c90 <prvAddCurrentTaskToDelayedList+0x6c>)
  406c70:	687b      	ldr	r3, [r7, #4]
  406c72:	6013      	str	r3, [r2, #0]
		}
	}
}
  406c74:	bf00      	nop
  406c76:	3708      	adds	r7, #8
  406c78:	46bd      	mov	sp, r7
  406c7a:	bd80      	pop	{r7, pc}
  406c7c:	200025f4 	.word	0x200025f4
  406c80:	200026d0 	.word	0x200026d0
  406c84:	20002688 	.word	0x20002688
  406c88:	004053c1 	.word	0x004053c1
  406c8c:	20002684 	.word	0x20002684
  406c90:	20000040 	.word	0x20000040

00406c94 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
  406c94:	b580      	push	{r7, lr}
  406c96:	b084      	sub	sp, #16
  406c98:	af00      	add	r7, sp, #0
  406c9a:	4603      	mov	r3, r0
  406c9c:	6039      	str	r1, [r7, #0]
  406c9e:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  406ca0:	2044      	movs	r0, #68	; 0x44
  406ca2:	4b15      	ldr	r3, [pc, #84]	; (406cf8 <prvAllocateTCBAndStack+0x64>)
  406ca4:	4798      	blx	r3
  406ca6:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
  406ca8:	68fb      	ldr	r3, [r7, #12]
  406caa:	2b00      	cmp	r3, #0
  406cac:	d01e      	beq.n	406cec <prvAllocateTCBAndStack+0x58>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  406cae:	683b      	ldr	r3, [r7, #0]
  406cb0:	2b00      	cmp	r3, #0
  406cb2:	d106      	bne.n	406cc2 <prvAllocateTCBAndStack+0x2e>
  406cb4:	88fb      	ldrh	r3, [r7, #6]
  406cb6:	009b      	lsls	r3, r3, #2
  406cb8:	4618      	mov	r0, r3
  406cba:	4b0f      	ldr	r3, [pc, #60]	; (406cf8 <prvAllocateTCBAndStack+0x64>)
  406cbc:	4798      	blx	r3
  406cbe:	4603      	mov	r3, r0
  406cc0:	e000      	b.n	406cc4 <prvAllocateTCBAndStack+0x30>
  406cc2:	683b      	ldr	r3, [r7, #0]
  406cc4:	68fa      	ldr	r2, [r7, #12]
  406cc6:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  406cc8:	68fb      	ldr	r3, [r7, #12]
  406cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406ccc:	2b00      	cmp	r3, #0
  406cce:	d105      	bne.n	406cdc <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  406cd0:	68f8      	ldr	r0, [r7, #12]
  406cd2:	4b0a      	ldr	r3, [pc, #40]	; (406cfc <prvAllocateTCBAndStack+0x68>)
  406cd4:	4798      	blx	r3
			pxNewTCB = NULL;
  406cd6:	2300      	movs	r3, #0
  406cd8:	60fb      	str	r3, [r7, #12]
  406cda:	e007      	b.n	406cec <prvAllocateTCBAndStack+0x58>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
  406cdc:	68fb      	ldr	r3, [r7, #12]
  406cde:	6b18      	ldr	r0, [r3, #48]	; 0x30
  406ce0:	88fb      	ldrh	r3, [r7, #6]
  406ce2:	009b      	lsls	r3, r3, #2
  406ce4:	461a      	mov	r2, r3
  406ce6:	21a5      	movs	r1, #165	; 0xa5
  406ce8:	4b05      	ldr	r3, [pc, #20]	; (406d00 <prvAllocateTCBAndStack+0x6c>)
  406cea:	4798      	blx	r3
		}
	}

	return pxNewTCB;
  406cec:	68fb      	ldr	r3, [r7, #12]
}
  406cee:	4618      	mov	r0, r3
  406cf0:	3710      	adds	r7, #16
  406cf2:	46bd      	mov	sp, r7
  406cf4:	bd80      	pop	{r7, pc}
  406cf6:	bf00      	nop
  406cf8:	00405715 	.word	0x00405715
  406cfc:	00405821 	.word	0x00405821
  406d00:	0040babd 	.word	0x0040babd

00406d04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
  406d04:	b580      	push	{r7, lr}
  406d06:	b082      	sub	sp, #8
  406d08:	af00      	add	r7, sp, #0
  406d0a:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  406d0c:	687b      	ldr	r3, [r7, #4]
  406d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406d10:	4618      	mov	r0, r3
  406d12:	4b04      	ldr	r3, [pc, #16]	; (406d24 <prvDeleteTCB+0x20>)
  406d14:	4798      	blx	r3
		vPortFree( pxTCB );
  406d16:	6878      	ldr	r0, [r7, #4]
  406d18:	4b02      	ldr	r3, [pc, #8]	; (406d24 <prvDeleteTCB+0x20>)
  406d1a:	4798      	blx	r3
	}
  406d1c:	bf00      	nop
  406d1e:	3708      	adds	r7, #8
  406d20:	46bd      	mov	sp, r7
  406d22:	bd80      	pop	{r7, pc}
  406d24:	00405821 	.word	0x00405821

00406d28 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
  406d28:	b480      	push	{r7}
  406d2a:	b083      	sub	sp, #12
  406d2c:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  406d2e:	4b04      	ldr	r3, [pc, #16]	; (406d40 <xTaskGetCurrentTaskHandle+0x18>)
  406d30:	681b      	ldr	r3, [r3, #0]
  406d32:	607b      	str	r3, [r7, #4]

		return xReturn;
  406d34:	687b      	ldr	r3, [r7, #4]
	}
  406d36:	4618      	mov	r0, r3
  406d38:	370c      	adds	r7, #12
  406d3a:	46bd      	mov	sp, r7
  406d3c:	bc80      	pop	{r7}
  406d3e:	4770      	bx	lr
  406d40:	200025f4 	.word	0x200025f4

00406d44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
  406d44:	b480      	push	{r7}
  406d46:	b083      	sub	sp, #12
  406d48:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  406d4a:	4b0b      	ldr	r3, [pc, #44]	; (406d78 <xTaskGetSchedulerState+0x34>)
  406d4c:	681b      	ldr	r3, [r3, #0]
  406d4e:	2b00      	cmp	r3, #0
  406d50:	d102      	bne.n	406d58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  406d52:	2300      	movs	r3, #0
  406d54:	607b      	str	r3, [r7, #4]
  406d56:	e008      	b.n	406d6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  406d58:	4b08      	ldr	r3, [pc, #32]	; (406d7c <xTaskGetSchedulerState+0x38>)
  406d5a:	681b      	ldr	r3, [r3, #0]
  406d5c:	2b00      	cmp	r3, #0
  406d5e:	d102      	bne.n	406d66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
  406d60:	2301      	movs	r3, #1
  406d62:	607b      	str	r3, [r7, #4]
  406d64:	e001      	b.n	406d6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  406d66:	2302      	movs	r3, #2
  406d68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
  406d6a:	687b      	ldr	r3, [r7, #4]
	}
  406d6c:	4618      	mov	r0, r3
  406d6e:	370c      	adds	r7, #12
  406d70:	46bd      	mov	sp, r7
  406d72:	bc80      	pop	{r7}
  406d74:	4770      	bx	lr
  406d76:	bf00      	nop
  406d78:	200026dc 	.word	0x200026dc
  406d7c:	200026e0 	.word	0x200026e0

00406d80 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  406d80:	b580      	push	{r7, lr}
  406d82:	b084      	sub	sp, #16
  406d84:	af00      	add	r7, sp, #0
  406d86:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  406d88:	687b      	ldr	r3, [r7, #4]
  406d8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  406d8c:	687b      	ldr	r3, [r7, #4]
  406d8e:	2b00      	cmp	r3, #0
  406d90:	d041      	beq.n	406e16 <vTaskPriorityInherit+0x96>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  406d92:	68fb      	ldr	r3, [r7, #12]
  406d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406d96:	4b22      	ldr	r3, [pc, #136]	; (406e20 <vTaskPriorityInherit+0xa0>)
  406d98:	681b      	ldr	r3, [r3, #0]
  406d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406d9c:	429a      	cmp	r2, r3
  406d9e:	d23a      	bcs.n	406e16 <vTaskPriorityInherit+0x96>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  406da0:	4b1f      	ldr	r3, [pc, #124]	; (406e20 <vTaskPriorityInherit+0xa0>)
  406da2:	681b      	ldr	r3, [r3, #0]
  406da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406da6:	f1c3 0205 	rsb	r2, r3, #5
  406daa:	68fb      	ldr	r3, [r7, #12]
  406dac:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  406dae:	68fb      	ldr	r3, [r7, #12]
  406db0:	6959      	ldr	r1, [r3, #20]
  406db2:	68fb      	ldr	r3, [r7, #12]
  406db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406db6:	4613      	mov	r3, r2
  406db8:	009b      	lsls	r3, r3, #2
  406dba:	4413      	add	r3, r2
  406dbc:	009b      	lsls	r3, r3, #2
  406dbe:	4a19      	ldr	r2, [pc, #100]	; (406e24 <vTaskPriorityInherit+0xa4>)
  406dc0:	4413      	add	r3, r2
  406dc2:	4299      	cmp	r1, r3
  406dc4:	d122      	bne.n	406e0c <vTaskPriorityInherit+0x8c>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  406dc6:	68fb      	ldr	r3, [r7, #12]
  406dc8:	3304      	adds	r3, #4
  406dca:	4618      	mov	r0, r3
  406dcc:	4b16      	ldr	r3, [pc, #88]	; (406e28 <vTaskPriorityInherit+0xa8>)
  406dce:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  406dd0:	4b13      	ldr	r3, [pc, #76]	; (406e20 <vTaskPriorityInherit+0xa0>)
  406dd2:	681b      	ldr	r3, [r3, #0]
  406dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406dd6:	68fb      	ldr	r3, [r7, #12]
  406dd8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
  406dda:	68fb      	ldr	r3, [r7, #12]
  406ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406dde:	4b13      	ldr	r3, [pc, #76]	; (406e2c <vTaskPriorityInherit+0xac>)
  406de0:	681b      	ldr	r3, [r3, #0]
  406de2:	429a      	cmp	r2, r3
  406de4:	d903      	bls.n	406dee <vTaskPriorityInherit+0x6e>
  406de6:	68fb      	ldr	r3, [r7, #12]
  406de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406dea:	4a10      	ldr	r2, [pc, #64]	; (406e2c <vTaskPriorityInherit+0xac>)
  406dec:	6013      	str	r3, [r2, #0]
  406dee:	68fb      	ldr	r3, [r7, #12]
  406df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406df2:	4613      	mov	r3, r2
  406df4:	009b      	lsls	r3, r3, #2
  406df6:	4413      	add	r3, r2
  406df8:	009b      	lsls	r3, r3, #2
  406dfa:	4a0a      	ldr	r2, [pc, #40]	; (406e24 <vTaskPriorityInherit+0xa4>)
  406dfc:	441a      	add	r2, r3
  406dfe:	68fb      	ldr	r3, [r7, #12]
  406e00:	3304      	adds	r3, #4
  406e02:	4619      	mov	r1, r3
  406e04:	4610      	mov	r0, r2
  406e06:	4b0a      	ldr	r3, [pc, #40]	; (406e30 <vTaskPriorityInherit+0xb0>)
  406e08:	4798      	blx	r3
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
  406e0a:	e004      	b.n	406e16 <vTaskPriorityInherit+0x96>
					prvAddTaskToReadyQueue( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  406e0c:	4b04      	ldr	r3, [pc, #16]	; (406e20 <vTaskPriorityInherit+0xa0>)
  406e0e:	681b      	ldr	r3, [r3, #0]
  406e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406e12:	68fb      	ldr	r3, [r7, #12]
  406e14:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
  406e16:	bf00      	nop
  406e18:	3710      	adds	r7, #16
  406e1a:	46bd      	mov	sp, r7
  406e1c:	bd80      	pop	{r7, pc}
  406e1e:	bf00      	nop
  406e20:	200025f4 	.word	0x200025f4
  406e24:	200025f8 	.word	0x200025f8
  406e28:	00405431 	.word	0x00405431
  406e2c:	200026d8 	.word	0x200026d8
  406e30:	00405371 	.word	0x00405371

00406e34 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  406e34:	b580      	push	{r7, lr}
  406e36:	b084      	sub	sp, #16
  406e38:	af00      	add	r7, sp, #0
  406e3a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  406e3c:	687b      	ldr	r3, [r7, #4]
  406e3e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
  406e40:	687b      	ldr	r3, [r7, #4]
  406e42:	2b00      	cmp	r3, #0
  406e44:	d02c      	beq.n	406ea0 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  406e46:	68fb      	ldr	r3, [r7, #12]
  406e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406e4a:	68fb      	ldr	r3, [r7, #12]
  406e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406e4e:	429a      	cmp	r2, r3
  406e50:	d026      	beq.n	406ea0 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  406e52:	68fb      	ldr	r3, [r7, #12]
  406e54:	3304      	adds	r3, #4
  406e56:	4618      	mov	r0, r3
  406e58:	4b13      	ldr	r3, [pc, #76]	; (406ea8 <vTaskPriorityDisinherit+0x74>)
  406e5a:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  406e5c:	68fb      	ldr	r3, [r7, #12]
  406e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  406e60:	68fb      	ldr	r3, [r7, #12]
  406e62:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  406e64:	68fb      	ldr	r3, [r7, #12]
  406e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406e68:	f1c3 0205 	rsb	r2, r3, #5
  406e6c:	68fb      	ldr	r3, [r7, #12]
  406e6e:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
  406e70:	68fb      	ldr	r3, [r7, #12]
  406e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406e74:	4b0d      	ldr	r3, [pc, #52]	; (406eac <vTaskPriorityDisinherit+0x78>)
  406e76:	681b      	ldr	r3, [r3, #0]
  406e78:	429a      	cmp	r2, r3
  406e7a:	d903      	bls.n	406e84 <vTaskPriorityDisinherit+0x50>
  406e7c:	68fb      	ldr	r3, [r7, #12]
  406e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406e80:	4a0a      	ldr	r2, [pc, #40]	; (406eac <vTaskPriorityDisinherit+0x78>)
  406e82:	6013      	str	r3, [r2, #0]
  406e84:	68fb      	ldr	r3, [r7, #12]
  406e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406e88:	4613      	mov	r3, r2
  406e8a:	009b      	lsls	r3, r3, #2
  406e8c:	4413      	add	r3, r2
  406e8e:	009b      	lsls	r3, r3, #2
  406e90:	4a07      	ldr	r2, [pc, #28]	; (406eb0 <vTaskPriorityDisinherit+0x7c>)
  406e92:	441a      	add	r2, r3
  406e94:	68fb      	ldr	r3, [r7, #12]
  406e96:	3304      	adds	r3, #4
  406e98:	4619      	mov	r1, r3
  406e9a:	4610      	mov	r0, r2
  406e9c:	4b05      	ldr	r3, [pc, #20]	; (406eb4 <vTaskPriorityDisinherit+0x80>)
  406e9e:	4798      	blx	r3
			}
		}
	}
  406ea0:	bf00      	nop
  406ea2:	3710      	adds	r7, #16
  406ea4:	46bd      	mov	sp, r7
  406ea6:	bd80      	pop	{r7, pc}
  406ea8:	00405431 	.word	0x00405431
  406eac:	200026d8 	.word	0x200026d8
  406eb0:	200025f8 	.word	0x200025f8
  406eb4:	00405371 	.word	0x00405371

00406eb8 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
  406eb8:	b590      	push	{r4, r7, lr}
  406eba:	b087      	sub	sp, #28
  406ebc:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
  406ebe:	2300      	movs	r3, #0
  406ec0:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  406ec2:	4b10      	ldr	r3, [pc, #64]	; (406f04 <xTimerCreateTimerTask+0x4c>)
  406ec4:	4798      	blx	r3

	if( xTimerQueue != NULL )
  406ec6:	4b10      	ldr	r3, [pc, #64]	; (406f08 <xTimerCreateTimerTask+0x50>)
  406ec8:	681b      	ldr	r3, [r3, #0]
  406eca:	2b00      	cmp	r3, #0
  406ecc:	d00e      	beq.n	406eec <xTimerCreateTimerTask+0x34>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  406ece:	2300      	movs	r3, #0
  406ed0:	9303      	str	r3, [sp, #12]
  406ed2:	2300      	movs	r3, #0
  406ed4:	9302      	str	r3, [sp, #8]
  406ed6:	2300      	movs	r3, #0
  406ed8:	9301      	str	r3, [sp, #4]
  406eda:	2304      	movs	r3, #4
  406edc:	9300      	str	r3, [sp, #0]
  406ede:	2300      	movs	r3, #0
  406ee0:	22c8      	movs	r2, #200	; 0xc8
  406ee2:	490a      	ldr	r1, [pc, #40]	; (406f0c <xTimerCreateTimerTask+0x54>)
  406ee4:	480a      	ldr	r0, [pc, #40]	; (406f10 <xTimerCreateTimerTask+0x58>)
  406ee6:	4c0b      	ldr	r4, [pc, #44]	; (406f14 <xTimerCreateTimerTask+0x5c>)
  406ee8:	47a0      	blx	r4
  406eea:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
  406eec:	687b      	ldr	r3, [r7, #4]
  406eee:	2b00      	cmp	r3, #0
  406ef0:	d103      	bne.n	406efa <xTimerCreateTimerTask+0x42>
  406ef2:	4b09      	ldr	r3, [pc, #36]	; (406f18 <xTimerCreateTimerTask+0x60>)
  406ef4:	4798      	blx	r3
  406ef6:	bf00      	nop
  406ef8:	e7fd      	b.n	406ef6 <xTimerCreateTimerTask+0x3e>
	return xReturn;
  406efa:	687b      	ldr	r3, [r7, #4]
}
  406efc:	4618      	mov	r0, r3
  406efe:	370c      	adds	r7, #12
  406f00:	46bd      	mov	sp, r7
  406f02:	bd90      	pop	{r4, r7, pc}
  406f04:	004073d1 	.word	0x004073d1
  406f08:	20002724 	.word	0x20002724
  406f0c:	0040bd08 	.word	0x0040bd08
  406f10:	0040702d 	.word	0x0040702d
  406f14:	0040618d 	.word	0x0040618d
  406f18:	00405655 	.word	0x00405655

00406f1c <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
  406f1c:	b590      	push	{r4, r7, lr}
  406f1e:	b089      	sub	sp, #36	; 0x24
  406f20:	af00      	add	r7, sp, #0
  406f22:	60f8      	str	r0, [r7, #12]
  406f24:	60b9      	str	r1, [r7, #8]
  406f26:	607a      	str	r2, [r7, #4]
  406f28:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
  406f2a:	2300      	movs	r3, #0
  406f2c:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  406f2e:	4b1a      	ldr	r3, [pc, #104]	; (406f98 <xTimerGenericCommand+0x7c>)
  406f30:	681b      	ldr	r3, [r3, #0]
  406f32:	2b00      	cmp	r3, #0
  406f34:	d02a      	beq.n	406f8c <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  406f36:	68bb      	ldr	r3, [r7, #8]
  406f38:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
  406f3a:	687b      	ldr	r3, [r7, #4]
  406f3c:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  406f3e:	68fb      	ldr	r3, [r7, #12]
  406f40:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
  406f42:	683b      	ldr	r3, [r7, #0]
  406f44:	2b00      	cmp	r3, #0
  406f46:	d118      	bne.n	406f7a <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  406f48:	4b14      	ldr	r3, [pc, #80]	; (406f9c <xTimerGenericCommand+0x80>)
  406f4a:	4798      	blx	r3
  406f4c:	4603      	mov	r3, r0
  406f4e:	2b01      	cmp	r3, #1
  406f50:	d109      	bne.n	406f66 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  406f52:	4b11      	ldr	r3, [pc, #68]	; (406f98 <xTimerGenericCommand+0x7c>)
  406f54:	6818      	ldr	r0, [r3, #0]
  406f56:	f107 0110 	add.w	r1, r7, #16
  406f5a:	2300      	movs	r3, #0
  406f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  406f5e:	4c10      	ldr	r4, [pc, #64]	; (406fa0 <xTimerGenericCommand+0x84>)
  406f60:	47a0      	blx	r4
  406f62:	61f8      	str	r0, [r7, #28]
  406f64:	e012      	b.n	406f8c <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  406f66:	4b0c      	ldr	r3, [pc, #48]	; (406f98 <xTimerGenericCommand+0x7c>)
  406f68:	6818      	ldr	r0, [r3, #0]
  406f6a:	f107 0110 	add.w	r1, r7, #16
  406f6e:	2300      	movs	r3, #0
  406f70:	2200      	movs	r2, #0
  406f72:	4c0b      	ldr	r4, [pc, #44]	; (406fa0 <xTimerGenericCommand+0x84>)
  406f74:	47a0      	blx	r4
  406f76:	61f8      	str	r0, [r7, #28]
  406f78:	e008      	b.n	406f8c <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  406f7a:	4b07      	ldr	r3, [pc, #28]	; (406f98 <xTimerGenericCommand+0x7c>)
  406f7c:	6818      	ldr	r0, [r3, #0]
  406f7e:	f107 0110 	add.w	r1, r7, #16
  406f82:	2300      	movs	r3, #0
  406f84:	683a      	ldr	r2, [r7, #0]
  406f86:	4c07      	ldr	r4, [pc, #28]	; (406fa4 <xTimerGenericCommand+0x88>)
  406f88:	47a0      	blx	r4
  406f8a:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
  406f8c:	69fb      	ldr	r3, [r7, #28]
}
  406f8e:	4618      	mov	r0, r3
  406f90:	3724      	adds	r7, #36	; 0x24
  406f92:	46bd      	mov	sp, r7
  406f94:	bd90      	pop	{r4, r7, pc}
  406f96:	bf00      	nop
  406f98:	20002724 	.word	0x20002724
  406f9c:	00406d45 	.word	0x00406d45
  406fa0:	00405b0d 	.word	0x00405b0d
  406fa4:	00405c75 	.word	0x00405c75

00406fa8 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
  406fa8:	b590      	push	{r4, r7, lr}
  406faa:	b087      	sub	sp, #28
  406fac:	af02      	add	r7, sp, #8
  406fae:	6078      	str	r0, [r7, #4]
  406fb0:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  406fb2:	4b19      	ldr	r3, [pc, #100]	; (407018 <prvProcessExpiredTimer+0x70>)
  406fb4:	681b      	ldr	r3, [r3, #0]
  406fb6:	68db      	ldr	r3, [r3, #12]
  406fb8:	68db      	ldr	r3, [r3, #12]
  406fba:	60fb      	str	r3, [r7, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
  406fbc:	68fb      	ldr	r3, [r7, #12]
  406fbe:	3304      	adds	r3, #4
  406fc0:	4618      	mov	r0, r3
  406fc2:	4b16      	ldr	r3, [pc, #88]	; (40701c <prvProcessExpiredTimer+0x74>)
  406fc4:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  406fc6:	68fb      	ldr	r3, [r7, #12]
  406fc8:	69db      	ldr	r3, [r3, #28]
  406fca:	2b01      	cmp	r3, #1
  406fcc:	d11b      	bne.n	407006 <prvProcessExpiredTimer+0x5e>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  406fce:	68fb      	ldr	r3, [r7, #12]
  406fd0:	699a      	ldr	r2, [r3, #24]
  406fd2:	687b      	ldr	r3, [r7, #4]
  406fd4:	18d1      	adds	r1, r2, r3
  406fd6:	687b      	ldr	r3, [r7, #4]
  406fd8:	683a      	ldr	r2, [r7, #0]
  406fda:	68f8      	ldr	r0, [r7, #12]
  406fdc:	4c10      	ldr	r4, [pc, #64]	; (407020 <prvProcessExpiredTimer+0x78>)
  406fde:	47a0      	blx	r4
  406fe0:	4603      	mov	r3, r0
  406fe2:	2b01      	cmp	r3, #1
  406fe4:	d10f      	bne.n	407006 <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  406fe6:	2300      	movs	r3, #0
  406fe8:	9300      	str	r3, [sp, #0]
  406fea:	2300      	movs	r3, #0
  406fec:	687a      	ldr	r2, [r7, #4]
  406fee:	2100      	movs	r1, #0
  406ff0:	68f8      	ldr	r0, [r7, #12]
  406ff2:	4c0c      	ldr	r4, [pc, #48]	; (407024 <prvProcessExpiredTimer+0x7c>)
  406ff4:	47a0      	blx	r4
  406ff6:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
  406ff8:	68bb      	ldr	r3, [r7, #8]
  406ffa:	2b00      	cmp	r3, #0
  406ffc:	d103      	bne.n	407006 <prvProcessExpiredTimer+0x5e>
  406ffe:	4b0a      	ldr	r3, [pc, #40]	; (407028 <prvProcessExpiredTimer+0x80>)
  407000:	4798      	blx	r3
  407002:	bf00      	nop
  407004:	e7fd      	b.n	407002 <prvProcessExpiredTimer+0x5a>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  407006:	68fb      	ldr	r3, [r7, #12]
  407008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40700a:	68f8      	ldr	r0, [r7, #12]
  40700c:	4798      	blx	r3
}
  40700e:	bf00      	nop
  407010:	3714      	adds	r7, #20
  407012:	46bd      	mov	sp, r7
  407014:	bd90      	pop	{r4, r7, pc}
  407016:	bf00      	nop
  407018:	2000271c 	.word	0x2000271c
  40701c:	00405431 	.word	0x00405431
  407020:	00407175 	.word	0x00407175
  407024:	00406f1d 	.word	0x00406f1d
  407028:	00405655 	.word	0x00405655

0040702c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  40702c:	b580      	push	{r7, lr}
  40702e:	b084      	sub	sp, #16
  407030:	af00      	add	r7, sp, #0
  407032:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  407034:	f107 0308 	add.w	r3, r7, #8
  407038:	4618      	mov	r0, r3
  40703a:	4b05      	ldr	r3, [pc, #20]	; (407050 <prvTimerTask+0x24>)
  40703c:	4798      	blx	r3
  40703e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  407040:	68bb      	ldr	r3, [r7, #8]
  407042:	4619      	mov	r1, r3
  407044:	68f8      	ldr	r0, [r7, #12]
  407046:	4b03      	ldr	r3, [pc, #12]	; (407054 <prvTimerTask+0x28>)
  407048:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
  40704a:	4b03      	ldr	r3, [pc, #12]	; (407058 <prvTimerTask+0x2c>)
  40704c:	4798      	blx	r3
	}
  40704e:	e7f1      	b.n	407034 <prvTimerTask+0x8>
  407050:	004070e1 	.word	0x004070e1
  407054:	0040705d 	.word	0x0040705d
  407058:	004071fd 	.word	0x004071fd

0040705c <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
  40705c:	b580      	push	{r7, lr}
  40705e:	b084      	sub	sp, #16
  407060:	af00      	add	r7, sp, #0
  407062:	6078      	str	r0, [r7, #4]
  407064:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  407066:	4b17      	ldr	r3, [pc, #92]	; (4070c4 <prvProcessTimerOrBlockTask+0x68>)
  407068:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40706a:	f107 0308 	add.w	r3, r7, #8
  40706e:	4618      	mov	r0, r3
  407070:	4b15      	ldr	r3, [pc, #84]	; (4070c8 <prvProcessTimerOrBlockTask+0x6c>)
  407072:	4798      	blx	r3
  407074:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
  407076:	68bb      	ldr	r3, [r7, #8]
  407078:	2b00      	cmp	r3, #0
  40707a:	d11d      	bne.n	4070b8 <prvProcessTimerOrBlockTask+0x5c>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  40707c:	683b      	ldr	r3, [r7, #0]
  40707e:	2b00      	cmp	r3, #0
  407080:	d10a      	bne.n	407098 <prvProcessTimerOrBlockTask+0x3c>
  407082:	687a      	ldr	r2, [r7, #4]
  407084:	68fb      	ldr	r3, [r7, #12]
  407086:	429a      	cmp	r2, r3
  407088:	d806      	bhi.n	407098 <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
  40708a:	4b10      	ldr	r3, [pc, #64]	; (4070cc <prvProcessTimerOrBlockTask+0x70>)
  40708c:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  40708e:	68f9      	ldr	r1, [r7, #12]
  407090:	6878      	ldr	r0, [r7, #4]
  407092:	4b0f      	ldr	r3, [pc, #60]	; (4070d0 <prvProcessTimerOrBlockTask+0x74>)
  407094:	4798      	blx	r3
		else
		{
			xTaskResumeAll();
		}
	}
}
  407096:	e011      	b.n	4070bc <prvProcessTimerOrBlockTask+0x60>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  407098:	4b0e      	ldr	r3, [pc, #56]	; (4070d4 <prvProcessTimerOrBlockTask+0x78>)
  40709a:	6818      	ldr	r0, [r3, #0]
  40709c:	687a      	ldr	r2, [r7, #4]
  40709e:	68fb      	ldr	r3, [r7, #12]
  4070a0:	1ad3      	subs	r3, r2, r3
  4070a2:	4619      	mov	r1, r3
  4070a4:	4b0c      	ldr	r3, [pc, #48]	; (4070d8 <prvProcessTimerOrBlockTask+0x7c>)
  4070a6:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  4070a8:	4b08      	ldr	r3, [pc, #32]	; (4070cc <prvProcessTimerOrBlockTask+0x70>)
  4070aa:	4798      	blx	r3
  4070ac:	4603      	mov	r3, r0
  4070ae:	2b00      	cmp	r3, #0
  4070b0:	d104      	bne.n	4070bc <prvProcessTimerOrBlockTask+0x60>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
  4070b2:	4b0a      	ldr	r3, [pc, #40]	; (4070dc <prvProcessTimerOrBlockTask+0x80>)
  4070b4:	4798      	blx	r3
		else
		{
			xTaskResumeAll();
		}
	}
}
  4070b6:	e001      	b.n	4070bc <prvProcessTimerOrBlockTask+0x60>
				}
			}
		}
		else
		{
			xTaskResumeAll();
  4070b8:	4b04      	ldr	r3, [pc, #16]	; (4070cc <prvProcessTimerOrBlockTask+0x70>)
  4070ba:	4798      	blx	r3
		}
	}
}
  4070bc:	bf00      	nop
  4070be:	3710      	adds	r7, #16
  4070c0:	46bd      	mov	sp, r7
  4070c2:	bd80      	pop	{r7, pc}
  4070c4:	0040642d 	.word	0x0040642d
  4070c8:	00407129 	.word	0x00407129
  4070cc:	00406449 	.word	0x00406449
  4070d0:	00406fa9 	.word	0x00406fa9
  4070d4:	20002724 	.word	0x20002724
  4070d8:	00406129 	.word	0x00406129
  4070dc:	004055f5 	.word	0x004055f5

004070e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
  4070e0:	b480      	push	{r7}
  4070e2:	b085      	sub	sp, #20
  4070e4:	af00      	add	r7, sp, #0
  4070e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4070e8:	4b0e      	ldr	r3, [pc, #56]	; (407124 <prvGetNextExpireTime+0x44>)
  4070ea:	681b      	ldr	r3, [r3, #0]
  4070ec:	681b      	ldr	r3, [r3, #0]
  4070ee:	2b00      	cmp	r3, #0
  4070f0:	bf0c      	ite	eq
  4070f2:	2301      	moveq	r3, #1
  4070f4:	2300      	movne	r3, #0
  4070f6:	b2db      	uxtb	r3, r3
  4070f8:	461a      	mov	r2, r3
  4070fa:	687b      	ldr	r3, [r7, #4]
  4070fc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  4070fe:	687b      	ldr	r3, [r7, #4]
  407100:	681b      	ldr	r3, [r3, #0]
  407102:	2b00      	cmp	r3, #0
  407104:	d105      	bne.n	407112 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  407106:	4b07      	ldr	r3, [pc, #28]	; (407124 <prvGetNextExpireTime+0x44>)
  407108:	681b      	ldr	r3, [r3, #0]
  40710a:	68db      	ldr	r3, [r3, #12]
  40710c:	681b      	ldr	r3, [r3, #0]
  40710e:	60fb      	str	r3, [r7, #12]
  407110:	e001      	b.n	407116 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
  407112:	2300      	movs	r3, #0
  407114:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
  407116:	68fb      	ldr	r3, [r7, #12]
}
  407118:	4618      	mov	r0, r3
  40711a:	3714      	adds	r7, #20
  40711c:	46bd      	mov	sp, r7
  40711e:	bc80      	pop	{r7}
  407120:	4770      	bx	lr
  407122:	bf00      	nop
  407124:	2000271c 	.word	0x2000271c

00407128 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
  407128:	b580      	push	{r7, lr}
  40712a:	b084      	sub	sp, #16
  40712c:	af00      	add	r7, sp, #0
  40712e:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
  407130:	4b0d      	ldr	r3, [pc, #52]	; (407168 <prvSampleTimeNow+0x40>)
  407132:	4798      	blx	r3
  407134:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
  407136:	4b0d      	ldr	r3, [pc, #52]	; (40716c <prvSampleTimeNow+0x44>)
  407138:	681b      	ldr	r3, [r3, #0]
  40713a:	68fa      	ldr	r2, [r7, #12]
  40713c:	429a      	cmp	r2, r3
  40713e:	d208      	bcs.n	407152 <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
  407140:	4b0a      	ldr	r3, [pc, #40]	; (40716c <prvSampleTimeNow+0x44>)
  407142:	681b      	ldr	r3, [r3, #0]
  407144:	4618      	mov	r0, r3
  407146:	4b0a      	ldr	r3, [pc, #40]	; (407170 <prvSampleTimeNow+0x48>)
  407148:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  40714a:	687b      	ldr	r3, [r7, #4]
  40714c:	2201      	movs	r2, #1
  40714e:	601a      	str	r2, [r3, #0]
  407150:	e002      	b.n	407158 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  407152:	687b      	ldr	r3, [r7, #4]
  407154:	2200      	movs	r2, #0
  407156:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
  407158:	4a04      	ldr	r2, [pc, #16]	; (40716c <prvSampleTimeNow+0x44>)
  40715a:	68fb      	ldr	r3, [r7, #12]
  40715c:	6013      	str	r3, [r2, #0]

	return xTimeNow;
  40715e:	68fb      	ldr	r3, [r7, #12]
}
  407160:	4618      	mov	r0, r3
  407162:	3710      	adds	r7, #16
  407164:	46bd      	mov	sp, r7
  407166:	bd80      	pop	{r7, pc}
  407168:	00406569 	.word	0x00406569
  40716c:	20002728 	.word	0x20002728
  407170:	00407309 	.word	0x00407309

00407174 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  407174:	b580      	push	{r7, lr}
  407176:	b086      	sub	sp, #24
  407178:	af00      	add	r7, sp, #0
  40717a:	60f8      	str	r0, [r7, #12]
  40717c:	60b9      	str	r1, [r7, #8]
  40717e:	607a      	str	r2, [r7, #4]
  407180:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
  407182:	2300      	movs	r3, #0
  407184:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  407186:	68fb      	ldr	r3, [r7, #12]
  407188:	68ba      	ldr	r2, [r7, #8]
  40718a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40718c:	68fb      	ldr	r3, [r7, #12]
  40718e:	68fa      	ldr	r2, [r7, #12]
  407190:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
  407192:	68ba      	ldr	r2, [r7, #8]
  407194:	687b      	ldr	r3, [r7, #4]
  407196:	429a      	cmp	r2, r3
  407198:	d812      	bhi.n	4071c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  40719a:	687a      	ldr	r2, [r7, #4]
  40719c:	683b      	ldr	r3, [r7, #0]
  40719e:	1ad2      	subs	r2, r2, r3
  4071a0:	68fb      	ldr	r3, [r7, #12]
  4071a2:	699b      	ldr	r3, [r3, #24]
  4071a4:	429a      	cmp	r2, r3
  4071a6:	d302      	bcc.n	4071ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  4071a8:	2301      	movs	r3, #1
  4071aa:	617b      	str	r3, [r7, #20]
  4071ac:	e01b      	b.n	4071e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  4071ae:	4b10      	ldr	r3, [pc, #64]	; (4071f0 <prvInsertTimerInActiveList+0x7c>)
  4071b0:	681a      	ldr	r2, [r3, #0]
  4071b2:	68fb      	ldr	r3, [r7, #12]
  4071b4:	3304      	adds	r3, #4
  4071b6:	4619      	mov	r1, r3
  4071b8:	4610      	mov	r0, r2
  4071ba:	4b0e      	ldr	r3, [pc, #56]	; (4071f4 <prvInsertTimerInActiveList+0x80>)
  4071bc:	4798      	blx	r3
  4071be:	e012      	b.n	4071e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  4071c0:	687a      	ldr	r2, [r7, #4]
  4071c2:	683b      	ldr	r3, [r7, #0]
  4071c4:	429a      	cmp	r2, r3
  4071c6:	d206      	bcs.n	4071d6 <prvInsertTimerInActiveList+0x62>
  4071c8:	68ba      	ldr	r2, [r7, #8]
  4071ca:	683b      	ldr	r3, [r7, #0]
  4071cc:	429a      	cmp	r2, r3
  4071ce:	d302      	bcc.n	4071d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  4071d0:	2301      	movs	r3, #1
  4071d2:	617b      	str	r3, [r7, #20]
  4071d4:	e007      	b.n	4071e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4071d6:	4b08      	ldr	r3, [pc, #32]	; (4071f8 <prvInsertTimerInActiveList+0x84>)
  4071d8:	681a      	ldr	r2, [r3, #0]
  4071da:	68fb      	ldr	r3, [r7, #12]
  4071dc:	3304      	adds	r3, #4
  4071de:	4619      	mov	r1, r3
  4071e0:	4610      	mov	r0, r2
  4071e2:	4b04      	ldr	r3, [pc, #16]	; (4071f4 <prvInsertTimerInActiveList+0x80>)
  4071e4:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
  4071e6:	697b      	ldr	r3, [r7, #20]
}
  4071e8:	4618      	mov	r0, r3
  4071ea:	3718      	adds	r7, #24
  4071ec:	46bd      	mov	sp, r7
  4071ee:	bd80      	pop	{r7, pc}
  4071f0:	20002720 	.word	0x20002720
  4071f4:	004053c1 	.word	0x004053c1
  4071f8:	2000271c 	.word	0x2000271c

004071fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
  4071fc:	b590      	push	{r4, r7, lr}
  4071fe:	b08b      	sub	sp, #44	; 0x2c
  407200:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  407202:	1d3b      	adds	r3, r7, #4
  407204:	4618      	mov	r0, r3
  407206:	4b38      	ldr	r3, [pc, #224]	; (4072e8 <prvProcessReceivedCommands+0xec>)
  407208:	4798      	blx	r3
  40720a:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  40720c:	e05d      	b.n	4072ca <prvProcessReceivedCommands+0xce>
	{
		pxTimer = xMessage.pxTimer;
  40720e:	693b      	ldr	r3, [r7, #16]
  407210:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
  407212:	69bb      	ldr	r3, [r7, #24]
  407214:	2b00      	cmp	r3, #0
  407216:	d008      	beq.n	40722a <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  407218:	69bb      	ldr	r3, [r7, #24]
  40721a:	695b      	ldr	r3, [r3, #20]
  40721c:	2b00      	cmp	r3, #0
  40721e:	d004      	beq.n	40722a <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
  407220:	69bb      	ldr	r3, [r7, #24]
  407222:	3304      	adds	r3, #4
  407224:	4618      	mov	r0, r3
  407226:	4b31      	ldr	r3, [pc, #196]	; (4072ec <prvProcessReceivedCommands+0xf0>)
  407228:	4798      	blx	r3
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
  40722a:	68bb      	ldr	r3, [r7, #8]
  40722c:	2b03      	cmp	r3, #3
  40722e:	d84b      	bhi.n	4072c8 <prvProcessReceivedCommands+0xcc>
  407230:	a201      	add	r2, pc, #4	; (adr r2, 407238 <prvProcessReceivedCommands+0x3c>)
  407232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  407236:	bf00      	nop
  407238:	00407249 	.word	0x00407249
  40723c:	004072cb 	.word	0x004072cb
  407240:	00407297 	.word	0x00407297
  407244:	004072c1 	.word	0x004072c1
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  407248:	68fa      	ldr	r2, [r7, #12]
  40724a:	69bb      	ldr	r3, [r7, #24]
  40724c:	699b      	ldr	r3, [r3, #24]
  40724e:	18d1      	adds	r1, r2, r3
  407250:	68fb      	ldr	r3, [r7, #12]
  407252:	69fa      	ldr	r2, [r7, #28]
  407254:	69b8      	ldr	r0, [r7, #24]
  407256:	4c26      	ldr	r4, [pc, #152]	; (4072f0 <prvProcessReceivedCommands+0xf4>)
  407258:	47a0      	blx	r4
  40725a:	4603      	mov	r3, r0
  40725c:	2b01      	cmp	r3, #1
  40725e:	d134      	bne.n	4072ca <prvProcessReceivedCommands+0xce>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  407260:	69bb      	ldr	r3, [r7, #24]
  407262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  407264:	69b8      	ldr	r0, [r7, #24]
  407266:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  407268:	69bb      	ldr	r3, [r7, #24]
  40726a:	69db      	ldr	r3, [r3, #28]
  40726c:	2b01      	cmp	r3, #1
  40726e:	d12c      	bne.n	4072ca <prvProcessReceivedCommands+0xce>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  407270:	68fa      	ldr	r2, [r7, #12]
  407272:	69bb      	ldr	r3, [r7, #24]
  407274:	699b      	ldr	r3, [r3, #24]
  407276:	441a      	add	r2, r3
  407278:	2300      	movs	r3, #0
  40727a:	9300      	str	r3, [sp, #0]
  40727c:	2300      	movs	r3, #0
  40727e:	2100      	movs	r1, #0
  407280:	69b8      	ldr	r0, [r7, #24]
  407282:	4c1c      	ldr	r4, [pc, #112]	; (4072f4 <prvProcessReceivedCommands+0xf8>)
  407284:	47a0      	blx	r4
  407286:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
  407288:	697b      	ldr	r3, [r7, #20]
  40728a:	2b00      	cmp	r3, #0
  40728c:	d11d      	bne.n	4072ca <prvProcessReceivedCommands+0xce>
  40728e:	4b1a      	ldr	r3, [pc, #104]	; (4072f8 <prvProcessReceivedCommands+0xfc>)
  407290:	4798      	blx	r3
  407292:	bf00      	nop
  407294:	e7fd      	b.n	407292 <prvProcessReceivedCommands+0x96>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  407296:	68fa      	ldr	r2, [r7, #12]
  407298:	69bb      	ldr	r3, [r7, #24]
  40729a:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  40729c:	69bb      	ldr	r3, [r7, #24]
  40729e:	699b      	ldr	r3, [r3, #24]
  4072a0:	2b00      	cmp	r3, #0
  4072a2:	d103      	bne.n	4072ac <prvProcessReceivedCommands+0xb0>
  4072a4:	4b14      	ldr	r3, [pc, #80]	; (4072f8 <prvProcessReceivedCommands+0xfc>)
  4072a6:	4798      	blx	r3
  4072a8:	bf00      	nop
  4072aa:	e7fd      	b.n	4072a8 <prvProcessReceivedCommands+0xac>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4072ac:	69bb      	ldr	r3, [r7, #24]
  4072ae:	699a      	ldr	r2, [r3, #24]
  4072b0:	69fb      	ldr	r3, [r7, #28]
  4072b2:	18d1      	adds	r1, r2, r3
  4072b4:	69fb      	ldr	r3, [r7, #28]
  4072b6:	69fa      	ldr	r2, [r7, #28]
  4072b8:	69b8      	ldr	r0, [r7, #24]
  4072ba:	4c0d      	ldr	r4, [pc, #52]	; (4072f0 <prvProcessReceivedCommands+0xf4>)
  4072bc:	47a0      	blx	r4
				break;
  4072be:	e004      	b.n	4072ca <prvProcessReceivedCommands+0xce>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
  4072c0:	69b8      	ldr	r0, [r7, #24]
  4072c2:	4b0e      	ldr	r3, [pc, #56]	; (4072fc <prvProcessReceivedCommands+0x100>)
  4072c4:	4798      	blx	r3
				break;
  4072c6:	e000      	b.n	4072ca <prvProcessReceivedCommands+0xce>

			default	:
				/* Don't expect to get here. */
				break;
  4072c8:	bf00      	nop

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  4072ca:	4b0d      	ldr	r3, [pc, #52]	; (407300 <prvProcessReceivedCommands+0x104>)
  4072cc:	6818      	ldr	r0, [r3, #0]
  4072ce:	f107 0108 	add.w	r1, r7, #8
  4072d2:	2300      	movs	r3, #0
  4072d4:	2200      	movs	r2, #0
  4072d6:	4c0b      	ldr	r4, [pc, #44]	; (407304 <prvProcessReceivedCommands+0x108>)
  4072d8:	47a0      	blx	r4
  4072da:	4603      	mov	r3, r0
  4072dc:	2b00      	cmp	r3, #0
  4072de:	d196      	bne.n	40720e <prvProcessReceivedCommands+0x12>
			default	:
				/* Don't expect to get here. */
				break;
		}
	}
}
  4072e0:	bf00      	nop
  4072e2:	3724      	adds	r7, #36	; 0x24
  4072e4:	46bd      	mov	sp, r7
  4072e6:	bd90      	pop	{r4, r7, pc}
  4072e8:	00407129 	.word	0x00407129
  4072ec:	00405431 	.word	0x00405431
  4072f0:	00407175 	.word	0x00407175
  4072f4:	00406f1d 	.word	0x00406f1d
  4072f8:	00405655 	.word	0x00405655
  4072fc:	00405821 	.word	0x00405821
  407300:	20002724 	.word	0x20002724
  407304:	00405d31 	.word	0x00405d31

00407308 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
  407308:	b590      	push	{r4, r7, lr}
  40730a:	b08b      	sub	sp, #44	; 0x2c
  40730c:	af02      	add	r7, sp, #8
  40730e:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  407310:	e03e      	b.n	407390 <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  407312:	4b29      	ldr	r3, [pc, #164]	; (4073b8 <prvSwitchTimerLists+0xb0>)
  407314:	681b      	ldr	r3, [r3, #0]
  407316:	68db      	ldr	r3, [r3, #12]
  407318:	681b      	ldr	r3, [r3, #0]
  40731a:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40731c:	4b26      	ldr	r3, [pc, #152]	; (4073b8 <prvSwitchTimerLists+0xb0>)
  40731e:	681b      	ldr	r3, [r3, #0]
  407320:	68db      	ldr	r3, [r3, #12]
  407322:	68db      	ldr	r3, [r3, #12]
  407324:	61bb      	str	r3, [r7, #24]
		uxListRemove( &( pxTimer->xTimerListItem ) );
  407326:	69bb      	ldr	r3, [r7, #24]
  407328:	3304      	adds	r3, #4
  40732a:	4618      	mov	r0, r3
  40732c:	4b23      	ldr	r3, [pc, #140]	; (4073bc <prvSwitchTimerLists+0xb4>)
  40732e:	4798      	blx	r3

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  407330:	69bb      	ldr	r3, [r7, #24]
  407332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  407334:	69b8      	ldr	r0, [r7, #24]
  407336:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  407338:	69bb      	ldr	r3, [r7, #24]
  40733a:	69db      	ldr	r3, [r3, #28]
  40733c:	2b01      	cmp	r3, #1
  40733e:	d127      	bne.n	407390 <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  407340:	69bb      	ldr	r3, [r7, #24]
  407342:	699a      	ldr	r2, [r3, #24]
  407344:	69fb      	ldr	r3, [r7, #28]
  407346:	4413      	add	r3, r2
  407348:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
  40734a:	697a      	ldr	r2, [r7, #20]
  40734c:	69fb      	ldr	r3, [r7, #28]
  40734e:	429a      	cmp	r2, r3
  407350:	d90e      	bls.n	407370 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  407352:	69bb      	ldr	r3, [r7, #24]
  407354:	697a      	ldr	r2, [r7, #20]
  407356:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  407358:	69bb      	ldr	r3, [r7, #24]
  40735a:	69ba      	ldr	r2, [r7, #24]
  40735c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40735e:	4b16      	ldr	r3, [pc, #88]	; (4073b8 <prvSwitchTimerLists+0xb0>)
  407360:	681a      	ldr	r2, [r3, #0]
  407362:	69bb      	ldr	r3, [r7, #24]
  407364:	3304      	adds	r3, #4
  407366:	4619      	mov	r1, r3
  407368:	4610      	mov	r0, r2
  40736a:	4b15      	ldr	r3, [pc, #84]	; (4073c0 <prvSwitchTimerLists+0xb8>)
  40736c:	4798      	blx	r3
  40736e:	e00f      	b.n	407390 <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  407370:	2300      	movs	r3, #0
  407372:	9300      	str	r3, [sp, #0]
  407374:	2300      	movs	r3, #0
  407376:	69fa      	ldr	r2, [r7, #28]
  407378:	2100      	movs	r1, #0
  40737a:	69b8      	ldr	r0, [r7, #24]
  40737c:	4c11      	ldr	r4, [pc, #68]	; (4073c4 <prvSwitchTimerLists+0xbc>)
  40737e:	47a0      	blx	r4
  407380:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
  407382:	693b      	ldr	r3, [r7, #16]
  407384:	2b00      	cmp	r3, #0
  407386:	d103      	bne.n	407390 <prvSwitchTimerLists+0x88>
  407388:	4b0f      	ldr	r3, [pc, #60]	; (4073c8 <prvSwitchTimerLists+0xc0>)
  40738a:	4798      	blx	r3
  40738c:	bf00      	nop
  40738e:	e7fd      	b.n	40738c <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  407390:	4b09      	ldr	r3, [pc, #36]	; (4073b8 <prvSwitchTimerLists+0xb0>)
  407392:	681b      	ldr	r3, [r3, #0]
  407394:	681b      	ldr	r3, [r3, #0]
  407396:	2b00      	cmp	r3, #0
  407398:	d1bb      	bne.n	407312 <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
  40739a:	4b07      	ldr	r3, [pc, #28]	; (4073b8 <prvSwitchTimerLists+0xb0>)
  40739c:	681b      	ldr	r3, [r3, #0]
  40739e:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
  4073a0:	4b0a      	ldr	r3, [pc, #40]	; (4073cc <prvSwitchTimerLists+0xc4>)
  4073a2:	681b      	ldr	r3, [r3, #0]
  4073a4:	4a04      	ldr	r2, [pc, #16]	; (4073b8 <prvSwitchTimerLists+0xb0>)
  4073a6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
  4073a8:	4a08      	ldr	r2, [pc, #32]	; (4073cc <prvSwitchTimerLists+0xc4>)
  4073aa:	68fb      	ldr	r3, [r7, #12]
  4073ac:	6013      	str	r3, [r2, #0]
}
  4073ae:	bf00      	nop
  4073b0:	3724      	adds	r7, #36	; 0x24
  4073b2:	46bd      	mov	sp, r7
  4073b4:	bd90      	pop	{r4, r7, pc}
  4073b6:	bf00      	nop
  4073b8:	2000271c 	.word	0x2000271c
  4073bc:	00405431 	.word	0x00405431
  4073c0:	004053c1 	.word	0x004053c1
  4073c4:	00406f1d 	.word	0x00406f1d
  4073c8:	00405655 	.word	0x00405655
  4073cc:	20002720 	.word	0x20002720

004073d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4073d0:	b580      	push	{r7, lr}
  4073d2:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  4073d4:	4b0e      	ldr	r3, [pc, #56]	; (407410 <prvCheckForValidListAndQueue+0x40>)
  4073d6:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4073d8:	4b0e      	ldr	r3, [pc, #56]	; (407414 <prvCheckForValidListAndQueue+0x44>)
  4073da:	681b      	ldr	r3, [r3, #0]
  4073dc:	2b00      	cmp	r3, #0
  4073de:	d113      	bne.n	407408 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
  4073e0:	480d      	ldr	r0, [pc, #52]	; (407418 <prvCheckForValidListAndQueue+0x48>)
  4073e2:	4b0e      	ldr	r3, [pc, #56]	; (40741c <prvCheckForValidListAndQueue+0x4c>)
  4073e4:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
  4073e6:	480e      	ldr	r0, [pc, #56]	; (407420 <prvCheckForValidListAndQueue+0x50>)
  4073e8:	4b0c      	ldr	r3, [pc, #48]	; (40741c <prvCheckForValidListAndQueue+0x4c>)
  4073ea:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
  4073ec:	4b0d      	ldr	r3, [pc, #52]	; (407424 <prvCheckForValidListAndQueue+0x54>)
  4073ee:	4a0a      	ldr	r2, [pc, #40]	; (407418 <prvCheckForValidListAndQueue+0x48>)
  4073f0:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4073f2:	4b0d      	ldr	r3, [pc, #52]	; (407428 <prvCheckForValidListAndQueue+0x58>)
  4073f4:	4a0a      	ldr	r2, [pc, #40]	; (407420 <prvCheckForValidListAndQueue+0x50>)
  4073f6:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  4073f8:	2200      	movs	r2, #0
  4073fa:	210c      	movs	r1, #12
  4073fc:	2005      	movs	r0, #5
  4073fe:	4b0b      	ldr	r3, [pc, #44]	; (40742c <prvCheckForValidListAndQueue+0x5c>)
  407400:	4798      	blx	r3
  407402:	4602      	mov	r2, r0
  407404:	4b03      	ldr	r3, [pc, #12]	; (407414 <prvCheckForValidListAndQueue+0x44>)
  407406:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
  407408:	4b09      	ldr	r3, [pc, #36]	; (407430 <prvCheckForValidListAndQueue+0x60>)
  40740a:	4798      	blx	r3
}
  40740c:	bf00      	nop
  40740e:	bd80      	pop	{r7, pc}
  407410:	0040560d 	.word	0x0040560d
  407414:	20002724 	.word	0x20002724
  407418:	200026f4 	.word	0x200026f4
  40741c:	00405319 	.word	0x00405319
  407420:	20002708 	.word	0x20002708
  407424:	2000271c 	.word	0x2000271c
  407428:	20002720 	.word	0x20002720
  40742c:	00405a7d 	.word	0x00405a7d
  407430:	0040562d 	.word	0x0040562d

00407434 <vCommTask>:

void WriteMbusRegs(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len);
void SendRespPkt(uint8_t *pkt, uint8_t len);

void vCommTask(void *pvParameters)
{
  407434:	b590      	push	{r4, r7, lr}
  407436:	b0d3      	sub	sp, #332	; 0x14c
  407438:	af02      	add	r7, sp, #8
  40743a:	1d3b      	adds	r3, r7, #4
  40743c:	6018      	str	r0, [r3, #0]
    
	/* RS485 Rx buffer */
	uint8_t rs485RxBuffer[RS485_BUFFER_SIZE];
	/* RS485 Tx buffer */
    uint8_t respBuff[RS485_BUFFER_SIZE], respLen = 0;
  40743e:	f107 030b 	add.w	r3, r7, #11
  407442:	2200      	movs	r2, #0
  407444:	701a      	strb	r2, [r3, #0]
    uint8_t commState = 0, recvdBytes = 0, prevRecvdBytes;
  407446:	2300      	movs	r3, #0
  407448:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
  40744c:	2300      	movs	r3, #0
  40744e:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
    /* Init Mbus writeFunc() ptr */
    writeFunc = WriteMbusRegs;
  407452:	4b46      	ldr	r3, [pc, #280]	; (40756c <vCommTask+0x138>)
  407454:	4a46      	ldr	r2, [pc, #280]	; (407570 <vCommTask+0x13c>)
  407456:	601a      	str	r2, [r3, #0]
	
	/* Start Receiving Data */
	usart_disable_tx(RS485_USART);
  407458:	4846      	ldr	r0, [pc, #280]	; (407574 <vCommTask+0x140>)
  40745a:	4b47      	ldr	r3, [pc, #284]	; (407578 <vCommTask+0x144>)
  40745c:	4798      	blx	r3
	usart_enable_rx(RS485_USART);
  40745e:	4845      	ldr	r0, [pc, #276]	; (407574 <vCommTask+0x140>)
  407460:	4b46      	ldr	r3, [pc, #280]	; (40757c <vCommTask+0x148>)
  407462:	4798      	blx	r3
	Rs485PdcStartRx((uint32_t)rs485RxBuffer,RS485_BUFFER_SIZE);
  407464:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
  407468:	2196      	movs	r1, #150	; 0x96
  40746a:	4618      	mov	r0, r3
  40746c:	4b44      	ldr	r3, [pc, #272]	; (407580 <vCommTask+0x14c>)
  40746e:	4798      	blx	r3

    while(1)
    {
        /* Sleep for some time and check if data recvd */
        vTaskDelay(40 / portTICK_RATE_MS);
  407470:	2008      	movs	r0, #8
  407472:	4b44      	ldr	r3, [pc, #272]	; (407584 <vCommTask+0x150>)
  407474:	4798      	blx	r3
        
		recvdBytes = Rs485PdcGetRxBytes();
  407476:	4b44      	ldr	r3, [pc, #272]	; (407588 <vCommTask+0x154>)
  407478:	4798      	blx	r3
  40747a:	4603      	mov	r3, r0
  40747c:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
		/* Check if data received on 485 */
		switch(commState)
  407480:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
  407484:	2b00      	cmp	r3, #0
  407486:	d002      	beq.n	40748e <vCommTask+0x5a>
  407488:	2b01      	cmp	r3, #1
  40748a:	d00c      	beq.n	4074a6 <vCommTask+0x72>
  40748c:	e06c      	b.n	407568 <vCommTask+0x134>
		{
			case 0:
				if(recvdBytes!=0)
  40748e:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
  407492:	2b00      	cmp	r3, #0
  407494:	d067      	beq.n	407566 <vCommTask+0x132>
				{
					commState = 1;
  407496:	2301      	movs	r3, #1
  407498:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
					prevRecvdBytes = recvdBytes;
  40749c:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
  4074a0:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
				}
				break;
  4074a4:	e05f      	b.n	407566 <vCommTask+0x132>
			case 1:
				if(prevRecvdBytes != recvdBytes)
  4074a6:	f897 213e 	ldrb.w	r2, [r7, #318]	; 0x13e
  4074aa:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
  4074ae:	429a      	cmp	r2, r3
  4074b0:	d004      	beq.n	4074bc <vCommTask+0x88>
				{
					prevRecvdBytes = recvdBytes;
  4074b2:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
  4074b6:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
					
					usart_enable_rx(RS485_USART);
					pdc_enable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN);
					Rs485PdcStartRx((uint32_t)rs485RxBuffer,RS485_BUFFER_SIZE);
				}
				break;
  4074ba:	e055      	b.n	407568 <vCommTask+0x134>
					prevRecvdBytes = recvdBytes;
				}
				else
				{
					/* 1 Modbus Pkt received. Process it. */
					usart_disable_rx(RS485_USART);
  4074bc:	482d      	ldr	r0, [pc, #180]	; (407574 <vCommTask+0x140>)
  4074be:	4b33      	ldr	r3, [pc, #204]	; (40758c <vCommTask+0x158>)
  4074c0:	4798      	blx	r3
					pdc_disable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN);
  4074c2:	4b33      	ldr	r3, [pc, #204]	; (407590 <vCommTask+0x15c>)
  4074c4:	681b      	ldr	r3, [r3, #0]
  4074c6:	2101      	movs	r1, #1
  4074c8:	4618      	mov	r0, r3
  4074ca:	4b32      	ldr	r3, [pc, #200]	; (407594 <vCommTask+0x160>)
  4074cc:	4798      	blx	r3

					/* Parse Received MBUS Pkt, update actual variables */
					ParseMbusPkt(mBusRegs[MBUS_REG_SLA], rs485RxBuffer, recvdBytes, respBuff, &respLen);
  4074ce:	4b32      	ldr	r3, [pc, #200]	; (407598 <vCommTask+0x164>)
  4074d0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
  4074d4:	b2d8      	uxtb	r0, r3
  4074d6:	f107 040c 	add.w	r4, r7, #12
  4074da:	f897 213d 	ldrb.w	r2, [r7, #317]	; 0x13d
  4074de:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
  4074e2:	f107 030b 	add.w	r3, r7, #11
  4074e6:	9300      	str	r3, [sp, #0]
  4074e8:	4623      	mov	r3, r4
  4074ea:	4c2c      	ldr	r4, [pc, #176]	; (40759c <vCommTask+0x168>)
  4074ec:	47a0      	blx	r4
				
					/* Generate MBus Resp */
					if(respLen)
  4074ee:	f107 030b 	add.w	r3, r7, #11
  4074f2:	781b      	ldrb	r3, [r3, #0]
  4074f4:	2b00      	cmp	r3, #0
  4074f6:	d008      	beq.n	40750a <vCommTask+0xd6>
					{
						SendRespPkt(respBuff, respLen);
  4074f8:	f107 030b 	add.w	r3, r7, #11
  4074fc:	781a      	ldrb	r2, [r3, #0]
  4074fe:	f107 030c 	add.w	r3, r7, #12
  407502:	4611      	mov	r1, r2
  407504:	4618      	mov	r0, r3
  407506:	4b26      	ldr	r3, [pc, #152]	; (4075a0 <vCommTask+0x16c>)
  407508:	4798      	blx	r3
					}
					
					memset((uint8_t *)rs485RxBuffer,0,sizeof(rs485RxBuffer));
  40750a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
  40750e:	2296      	movs	r2, #150	; 0x96
  407510:	2100      	movs	r1, #0
  407512:	4618      	mov	r0, r3
  407514:	4b23      	ldr	r3, [pc, #140]	; (4075a4 <vCommTask+0x170>)
  407516:	4798      	blx	r3
					memset(respBuff,0,sizeof(respBuff));
  407518:	f107 030c 	add.w	r3, r7, #12
  40751c:	2296      	movs	r2, #150	; 0x96
  40751e:	2100      	movs	r1, #0
  407520:	4618      	mov	r0, r3
  407522:	4b20      	ldr	r3, [pc, #128]	; (4075a4 <vCommTask+0x170>)
  407524:	4798      	blx	r3
					respLen = 0;
  407526:	f107 030b 	add.w	r3, r7, #11
  40752a:	2200      	movs	r2, #0
  40752c:	701a      	strb	r2, [r3, #0]
					commState = 0;
  40752e:	2300      	movs	r3, #0
  407530:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

					if(updateCommParams)
  407534:	4b1c      	ldr	r3, [pc, #112]	; (4075a8 <vCommTask+0x174>)
  407536:	781b      	ldrb	r3, [r3, #0]
  407538:	2b00      	cmp	r3, #0
  40753a:	d004      	beq.n	407546 <vCommTask+0x112>
					{
						vCommInit();
  40753c:	4b1b      	ldr	r3, [pc, #108]	; (4075ac <vCommTask+0x178>)
  40753e:	4798      	blx	r3
						updateCommParams = 0;
  407540:	4b19      	ldr	r3, [pc, #100]	; (4075a8 <vCommTask+0x174>)
  407542:	2200      	movs	r2, #0
  407544:	701a      	strb	r2, [r3, #0]
					}
					
					usart_enable_rx(RS485_USART);
  407546:	480b      	ldr	r0, [pc, #44]	; (407574 <vCommTask+0x140>)
  407548:	4b0c      	ldr	r3, [pc, #48]	; (40757c <vCommTask+0x148>)
  40754a:	4798      	blx	r3
					pdc_enable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN);
  40754c:	4b10      	ldr	r3, [pc, #64]	; (407590 <vCommTask+0x15c>)
  40754e:	681b      	ldr	r3, [r3, #0]
  407550:	2101      	movs	r1, #1
  407552:	4618      	mov	r0, r3
  407554:	4b16      	ldr	r3, [pc, #88]	; (4075b0 <vCommTask+0x17c>)
  407556:	4798      	blx	r3
					Rs485PdcStartRx((uint32_t)rs485RxBuffer,RS485_BUFFER_SIZE);
  407558:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
  40755c:	2196      	movs	r1, #150	; 0x96
  40755e:	4618      	mov	r0, r3
  407560:	4b07      	ldr	r3, [pc, #28]	; (407580 <vCommTask+0x14c>)
  407562:	4798      	blx	r3
				}
				break;
  407564:	e000      	b.n	407568 <vCommTask+0x134>
				if(recvdBytes!=0)
				{
					commState = 1;
					prevRecvdBytes = recvdBytes;
				}
				break;
  407566:	bf00      	nop
					pdc_enable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN);
					Rs485PdcStartRx((uint32_t)rs485RxBuffer,RS485_BUFFER_SIZE);
				}
				break;
		}
    }
  407568:	e782      	b.n	407470 <vCommTask+0x3c>
  40756a:	bf00      	nop
  40756c:	20002730 	.word	0x20002730
  407570:	004075cd 	.word	0x004075cd
  407574:	40028000 	.word	0x40028000
  407578:	00403d89 	.word	0x00403d89
  40757c:	00403db9 	.word	0x00403db9
  407580:	00402fe1 	.word	0x00402fe1
  407584:	00406345 	.word	0x00406345
  407588:	0040301d 	.word	0x0040301d
  40758c:	00403dd1 	.word	0x00403dd1
  407590:	20002734 	.word	0x20002734
  407594:	00403761 	.word	0x00403761
  407598:	20000494 	.word	0x20000494
  40759c:	004006f1 	.word	0x004006f1
  4075a0:	004079b1 	.word	0x004079b1
  4075a4:	0040babd 	.word	0x0040babd
  4075a8:	2000272c 	.word	0x2000272c
  4075ac:	004075b5 	.word	0x004075b5
  4075b0:	00403741 	.word	0x00403741

004075b4 <vCommInit>:
}

void vCommInit(void)
{
  4075b4:	b580      	push	{r7, lr}
  4075b6:	af00      	add	r7, sp, #0
    /* Update Local variables with EEPROM values */
	UpdateRs485Params();
  4075b8:	4b02      	ldr	r3, [pc, #8]	; (4075c4 <vCommInit+0x10>)
  4075ba:	4798      	blx	r3
	/* Init RS485 port with PDC support */
    InitRs485Pdc();
  4075bc:	4b02      	ldr	r3, [pc, #8]	; (4075c8 <vCommInit+0x14>)
  4075be:	4798      	blx	r3
}
  4075c0:	bf00      	nop
  4075c2:	bd80      	pop	{r7, pc}
  4075c4:	00407a09 	.word	0x00407a09
  4075c8:	00402f11 	.word	0x00402f11

004075cc <WriteMbusRegs>:

void WriteMbusRegs(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len)
{
  4075cc:	b590      	push	{r4, r7, lr}
  4075ce:	b087      	sub	sp, #28
  4075d0:	af02      	add	r7, sp, #8
  4075d2:	6078      	str	r0, [r7, #4]
  4075d4:	460b      	mov	r3, r1
  4075d6:	70fb      	strb	r3, [r7, #3]
  4075d8:	4613      	mov	r3, r2
  4075da:	70bb      	strb	r3, [r7, #2]
    uint16_t *ptr;
	uint8_t *ptr8;
    
    while(len)
  4075dc:	e1d1      	b.n	407982 <WriteMbusRegs+0x3b6>
    {
        switch(regAddr)
  4075de:	78fb      	ldrb	r3, [r7, #3]
  4075e0:	2b29      	cmp	r3, #41	; 0x29
  4075e2:	f200 81c5 	bhi.w	407970 <WriteMbusRegs+0x3a4>
  4075e6:	a201      	add	r2, pc, #4	; (adr r2, 4075ec <WriteMbusRegs+0x20>)
  4075e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4075ec:	00407695 	.word	0x00407695
  4075f0:	004076ab 	.word	0x004076ab
  4075f4:	004076c1 	.word	0x004076c1
  4075f8:	004076d7 	.word	0x004076d7
  4075fc:	004076ed 	.word	0x004076ed
  407600:	00407703 	.word	0x00407703
  407604:	00407719 	.word	0x00407719
  407608:	00407971 	.word	0x00407971
  40760c:	00407971 	.word	0x00407971
  407610:	0040772f 	.word	0x0040772f
  407614:	00407971 	.word	0x00407971
  407618:	0040775b 	.word	0x0040775b
  40761c:	00407971 	.word	0x00407971
  407620:	00407787 	.word	0x00407787
  407624:	00407971 	.word	0x00407971
  407628:	00407971 	.word	0x00407971
  40762c:	00407971 	.word	0x00407971
  407630:	00407971 	.word	0x00407971
  407634:	00407971 	.word	0x00407971
  407638:	004077b3 	.word	0x004077b3
  40763c:	00407971 	.word	0x00407971
  407640:	00407971 	.word	0x00407971
  407644:	00407971 	.word	0x00407971
  407648:	00407971 	.word	0x00407971
  40764c:	00407951 	.word	0x00407951
  407650:	00407971 	.word	0x00407971
  407654:	00407971 	.word	0x00407971
  407658:	00407971 	.word	0x00407971
  40765c:	00407971 	.word	0x00407971
  407660:	00407971 	.word	0x00407971
  407664:	00407971 	.word	0x00407971
  407668:	004077df 	.word	0x004077df
  40766c:	00407971 	.word	0x00407971
  407670:	0040780b 	.word	0x0040780b
  407674:	00407971 	.word	0x00407971
  407678:	0040783b 	.word	0x0040783b
  40767c:	00407971 	.word	0x00407971
  407680:	0040786b 	.word	0x0040786b
  407684:	0040789b 	.word	0x0040789b
  407688:	004078ad 	.word	0x004078ad
  40768c:	004078c9 	.word	0x004078c9
  407690:	00407939 	.word	0x00407939
        {
            case MBUS_REG_SEC:
				#ifndef DS3231_USE_RTOS_API
					DSSetSecs(BOARD_TWI, mbusBuff[regAddr]);
  407694:	78fb      	ldrb	r3, [r7, #3]
  407696:	005b      	lsls	r3, r3, #1
  407698:	687a      	ldr	r2, [r7, #4]
  40769a:	4413      	add	r3, r2
  40769c:	881b      	ldrh	r3, [r3, #0]
  40769e:	b2db      	uxtb	r3, r3
  4076a0:	4619      	mov	r1, r3
  4076a2:	488f      	ldr	r0, [pc, #572]	; (4078e0 <WriteMbusRegs+0x314>)
  4076a4:	4b8f      	ldr	r3, [pc, #572]	; (4078e4 <WriteMbusRegs+0x318>)
  4076a6:	4798      	blx	r3
				#else
					DSSetSecsTo(twiPort, mbusBuff[regAddr],50);
				#endif
                break;
  4076a8:	e165      	b.n	407976 <WriteMbusRegs+0x3aa>
            case MBUS_REG_MIN:
				#ifndef DS3231_USE_RTOS_API
					DSSetMins(BOARD_TWI, mbusBuff[regAddr]);
  4076aa:	78fb      	ldrb	r3, [r7, #3]
  4076ac:	005b      	lsls	r3, r3, #1
  4076ae:	687a      	ldr	r2, [r7, #4]
  4076b0:	4413      	add	r3, r2
  4076b2:	881b      	ldrh	r3, [r3, #0]
  4076b4:	b2db      	uxtb	r3, r3
  4076b6:	4619      	mov	r1, r3
  4076b8:	4889      	ldr	r0, [pc, #548]	; (4078e0 <WriteMbusRegs+0x314>)
  4076ba:	4b8b      	ldr	r3, [pc, #556]	; (4078e8 <WriteMbusRegs+0x31c>)
  4076bc:	4798      	blx	r3
				#else
					DSSetMinsTo(twiPort, mbusBuff[regAddr],50);
				#endif
                break;
  4076be:	e15a      	b.n	407976 <WriteMbusRegs+0x3aa>
            case MBUS_REG_HRS:
				#ifndef DS3231_USE_RTOS_API
					DSSetHrs(BOARD_TWI, mbusBuff[regAddr]);
  4076c0:	78fb      	ldrb	r3, [r7, #3]
  4076c2:	005b      	lsls	r3, r3, #1
  4076c4:	687a      	ldr	r2, [r7, #4]
  4076c6:	4413      	add	r3, r2
  4076c8:	881b      	ldrh	r3, [r3, #0]
  4076ca:	b2db      	uxtb	r3, r3
  4076cc:	4619      	mov	r1, r3
  4076ce:	4884      	ldr	r0, [pc, #528]	; (4078e0 <WriteMbusRegs+0x314>)
  4076d0:	4b86      	ldr	r3, [pc, #536]	; (4078ec <WriteMbusRegs+0x320>)
  4076d2:	4798      	blx	r3
				#else
					DSSetHrsTo(twiPort, mbusBuff[regAddr],50);
				#endif
                break;
  4076d4:	e14f      	b.n	407976 <WriteMbusRegs+0x3aa>
            case MBUS_REG_DAY:
				#ifndef DS3231_USE_RTOS_API
					DSSetDay(BOARD_TWI, mbusBuff[regAddr]);
  4076d6:	78fb      	ldrb	r3, [r7, #3]
  4076d8:	005b      	lsls	r3, r3, #1
  4076da:	687a      	ldr	r2, [r7, #4]
  4076dc:	4413      	add	r3, r2
  4076de:	881b      	ldrh	r3, [r3, #0]
  4076e0:	b2db      	uxtb	r3, r3
  4076e2:	4619      	mov	r1, r3
  4076e4:	487e      	ldr	r0, [pc, #504]	; (4078e0 <WriteMbusRegs+0x314>)
  4076e6:	4b82      	ldr	r3, [pc, #520]	; (4078f0 <WriteMbusRegs+0x324>)
  4076e8:	4798      	blx	r3
				#else
					DSSetDayTo(twiPort, mbusBuff[regAddr],50);
				#endif
                break;
  4076ea:	e144      	b.n	407976 <WriteMbusRegs+0x3aa>
            case MBUS_REG_DD:
				#ifndef DS3231_USE_RTOS_API
					DSSetDate(BOARD_TWI, mbusBuff[regAddr]);
  4076ec:	78fb      	ldrb	r3, [r7, #3]
  4076ee:	005b      	lsls	r3, r3, #1
  4076f0:	687a      	ldr	r2, [r7, #4]
  4076f2:	4413      	add	r3, r2
  4076f4:	881b      	ldrh	r3, [r3, #0]
  4076f6:	b2db      	uxtb	r3, r3
  4076f8:	4619      	mov	r1, r3
  4076fa:	4879      	ldr	r0, [pc, #484]	; (4078e0 <WriteMbusRegs+0x314>)
  4076fc:	4b7d      	ldr	r3, [pc, #500]	; (4078f4 <WriteMbusRegs+0x328>)
  4076fe:	4798      	blx	r3
				#else
					DSSetDateTo(twiPort, mbusBuff[regAddr],50);
				#endif
                break;
  407700:	e139      	b.n	407976 <WriteMbusRegs+0x3aa>
            case MBUS_REG_MM:
				#ifndef DS3231_USE_RTOS_API
					DSSetMonth(BOARD_TWI, mbusBuff[regAddr]);
  407702:	78fb      	ldrb	r3, [r7, #3]
  407704:	005b      	lsls	r3, r3, #1
  407706:	687a      	ldr	r2, [r7, #4]
  407708:	4413      	add	r3, r2
  40770a:	881b      	ldrh	r3, [r3, #0]
  40770c:	b2db      	uxtb	r3, r3
  40770e:	4619      	mov	r1, r3
  407710:	4873      	ldr	r0, [pc, #460]	; (4078e0 <WriteMbusRegs+0x314>)
  407712:	4b79      	ldr	r3, [pc, #484]	; (4078f8 <WriteMbusRegs+0x32c>)
  407714:	4798      	blx	r3
				#else
					DSSetMonthTo(twiPort, mbusBuff[regAddr],50);
				#endif
                break;
  407716:	e12e      	b.n	407976 <WriteMbusRegs+0x3aa>
            case MBUS_REG_YY:
				#ifndef DS3231_USE_RTOS_API
					DSSetYear(BOARD_TWI, mbusBuff[regAddr]);
  407718:	78fb      	ldrb	r3, [r7, #3]
  40771a:	005b      	lsls	r3, r3, #1
  40771c:	687a      	ldr	r2, [r7, #4]
  40771e:	4413      	add	r3, r2
  407720:	881b      	ldrh	r3, [r3, #0]
  407722:	b2db      	uxtb	r3, r3
  407724:	4619      	mov	r1, r3
  407726:	486e      	ldr	r0, [pc, #440]	; (4078e0 <WriteMbusRegs+0x314>)
  407728:	4b74      	ldr	r3, [pc, #464]	; (4078fc <WriteMbusRegs+0x330>)
  40772a:	4798      	blx	r3
				#else
					DSSetYearTo(twiPort, mbusBuff[regAddr],50);
				#endif
                break;
  40772c:	e123      	b.n	407976 <WriteMbusRegs+0x3aa>
            case MBUS_REG_LATH:
                ptr = (uint16_t*)&lat;
  40772e:	4b74      	ldr	r3, [pc, #464]	; (407900 <WriteMbusRegs+0x334>)
  407730:	60fb      	str	r3, [r7, #12]
                ptr[1] = mBusRegs[MBUS_REG_LATH];
  407732:	68fb      	ldr	r3, [r7, #12]
  407734:	3302      	adds	r3, #2
  407736:	4a73      	ldr	r2, [pc, #460]	; (407904 <WriteMbusRegs+0x338>)
  407738:	8a52      	ldrh	r2, [r2, #18]
  40773a:	801a      	strh	r2, [r3, #0]
                ptr[0] = mBusRegs[MBUS_REG_LATL];
  40773c:	4b71      	ldr	r3, [pc, #452]	; (407904 <WriteMbusRegs+0x338>)
  40773e:	8a1a      	ldrh	r2, [r3, #16]
  407740:	68fb      	ldr	r3, [r7, #12]
  407742:	801a      	strh	r2, [r3, #0]
				/* Update EEPROM */
				ptr8 = (uint8_t *)&lat;
  407744:	4b6e      	ldr	r3, [pc, #440]	; (407900 <WriteMbusRegs+0x334>)
  407746:	60bb      	str	r3, [r7, #8]
				WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_LAT0, ptr8, 4);
  407748:	2304      	movs	r3, #4
  40774a:	9300      	str	r3, [sp, #0]
  40774c:	68bb      	ldr	r3, [r7, #8]
  40774e:	2200      	movs	r2, #0
  407750:	2150      	movs	r1, #80	; 0x50
  407752:	4863      	ldr	r0, [pc, #396]	; (4078e0 <WriteMbusRegs+0x314>)
  407754:	4c6c      	ldr	r4, [pc, #432]	; (407908 <WriteMbusRegs+0x33c>)
  407756:	47a0      	blx	r4
                break;
  407758:	e10d      	b.n	407976 <WriteMbusRegs+0x3aa>
            case MBUS_REG_LONH:
                ptr = (uint16_t*)&lon;
  40775a:	4b6c      	ldr	r3, [pc, #432]	; (40790c <WriteMbusRegs+0x340>)
  40775c:	60fb      	str	r3, [r7, #12]
                ptr[1] = mBusRegs[MBUS_REG_LONH];
  40775e:	68fb      	ldr	r3, [r7, #12]
  407760:	3302      	adds	r3, #2
  407762:	4a68      	ldr	r2, [pc, #416]	; (407904 <WriteMbusRegs+0x338>)
  407764:	8ad2      	ldrh	r2, [r2, #22]
  407766:	801a      	strh	r2, [r3, #0]
                ptr[0] = mBusRegs[MBUS_REG_LONL];
  407768:	4b66      	ldr	r3, [pc, #408]	; (407904 <WriteMbusRegs+0x338>)
  40776a:	8a9a      	ldrh	r2, [r3, #20]
  40776c:	68fb      	ldr	r3, [r7, #12]
  40776e:	801a      	strh	r2, [r3, #0]
				/* Update EEPROM */
                ptr8 = (uint8_t *)&lon;
  407770:	4b66      	ldr	r3, [pc, #408]	; (40790c <WriteMbusRegs+0x340>)
  407772:	60bb      	str	r3, [r7, #8]
                WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_LON0, ptr8, 4);
  407774:	2304      	movs	r3, #4
  407776:	9300      	str	r3, [sp, #0]
  407778:	68bb      	ldr	r3, [r7, #8]
  40777a:	2204      	movs	r2, #4
  40777c:	2150      	movs	r1, #80	; 0x50
  40777e:	4858      	ldr	r0, [pc, #352]	; (4078e0 <WriteMbusRegs+0x314>)
  407780:	4c61      	ldr	r4, [pc, #388]	; (407908 <WriteMbusRegs+0x33c>)
  407782:	47a0      	blx	r4
                break;
  407784:	e0f7      	b.n	407976 <WriteMbusRegs+0x3aa>
            case MBUS_REG_TZH:
                ptr = (uint16_t*)&timeZone;
  407786:	4b62      	ldr	r3, [pc, #392]	; (407910 <WriteMbusRegs+0x344>)
  407788:	60fb      	str	r3, [r7, #12]
                ptr[1] = mBusRegs[MBUS_REG_TZH];
  40778a:	68fb      	ldr	r3, [r7, #12]
  40778c:	3302      	adds	r3, #2
  40778e:	4a5d      	ldr	r2, [pc, #372]	; (407904 <WriteMbusRegs+0x338>)
  407790:	8b52      	ldrh	r2, [r2, #26]
  407792:	801a      	strh	r2, [r3, #0]
                ptr[0] = mBusRegs[MBUS_REG_TZL];
  407794:	4b5b      	ldr	r3, [pc, #364]	; (407904 <WriteMbusRegs+0x338>)
  407796:	8b1a      	ldrh	r2, [r3, #24]
  407798:	68fb      	ldr	r3, [r7, #12]
  40779a:	801a      	strh	r2, [r3, #0]
                /* Update EEPROM */
				ptr8 = (uint8_t *)&timeZone;
  40779c:	4b5c      	ldr	r3, [pc, #368]	; (407910 <WriteMbusRegs+0x344>)
  40779e:	60bb      	str	r3, [r7, #8]
				WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_TZ0, ptr8, 4);
  4077a0:	2304      	movs	r3, #4
  4077a2:	9300      	str	r3, [sp, #0]
  4077a4:	68bb      	ldr	r3, [r7, #8]
  4077a6:	2208      	movs	r2, #8
  4077a8:	2150      	movs	r1, #80	; 0x50
  4077aa:	484d      	ldr	r0, [pc, #308]	; (4078e0 <WriteMbusRegs+0x314>)
  4077ac:	4c56      	ldr	r4, [pc, #344]	; (407908 <WriteMbusRegs+0x33c>)
  4077ae:	47a0      	blx	r4
                break;
  4077b0:	e0e1      	b.n	407976 <WriteMbusRegs+0x3aa>
            case MBUS_REG_PNLRNGH:
                ptr = (uint16_t*)&pvAngleRng;
  4077b2:	4b58      	ldr	r3, [pc, #352]	; (407914 <WriteMbusRegs+0x348>)
  4077b4:	60fb      	str	r3, [r7, #12]
                ptr[1] = mBusRegs[MBUS_REG_PNLRNGH];
  4077b6:	68fb      	ldr	r3, [r7, #12]
  4077b8:	3302      	adds	r3, #2
  4077ba:	4a52      	ldr	r2, [pc, #328]	; (407904 <WriteMbusRegs+0x338>)
  4077bc:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
  4077be:	801a      	strh	r2, [r3, #0]
                ptr[0] = mBusRegs[MBUS_REG_PNLRNGL];
  4077c0:	4b50      	ldr	r3, [pc, #320]	; (407904 <WriteMbusRegs+0x338>)
  4077c2:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
  4077c4:	68fb      	ldr	r3, [r7, #12]
  4077c6:	801a      	strh	r2, [r3, #0]
                /* Update EEPROM */
				ptr8 = (uint8_t *)&pvAngleRng;
  4077c8:	4b52      	ldr	r3, [pc, #328]	; (407914 <WriteMbusRegs+0x348>)
  4077ca:	60bb      	str	r3, [r7, #8]
				WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_PNLRNG0, ptr8, 4);
  4077cc:	2304      	movs	r3, #4
  4077ce:	9300      	str	r3, [sp, #0]
  4077d0:	68bb      	ldr	r3, [r7, #8]
  4077d2:	2214      	movs	r2, #20
  4077d4:	2150      	movs	r1, #80	; 0x50
  4077d6:	4842      	ldr	r0, [pc, #264]	; (4078e0 <WriteMbusRegs+0x314>)
  4077d8:	4c4b      	ldr	r4, [pc, #300]	; (407908 <WriteMbusRegs+0x33c>)
  4077da:	47a0      	blx	r4
                break;
  4077dc:	e0cb      	b.n	407976 <WriteMbusRegs+0x3aa>
            case MBUS_REG_DISTH:
                ptr = (uint16_t*)&dist;
  4077de:	4b4e      	ldr	r3, [pc, #312]	; (407918 <WriteMbusRegs+0x34c>)
  4077e0:	60fb      	str	r3, [r7, #12]
                ptr[1] = mBusRegs[MBUS_REG_DISTH];
  4077e2:	68fb      	ldr	r3, [r7, #12]
  4077e4:	3302      	adds	r3, #2
  4077e6:	4a47      	ldr	r2, [pc, #284]	; (407904 <WriteMbusRegs+0x338>)
  4077e8:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
  4077ea:	801a      	strh	r2, [r3, #0]
                ptr[0] = mBusRegs[MBUS_REG_DISTL];
  4077ec:	4b45      	ldr	r3, [pc, #276]	; (407904 <WriteMbusRegs+0x338>)
  4077ee:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
  4077f0:	68fb      	ldr	r3, [r7, #12]
  4077f2:	801a      	strh	r2, [r3, #0]
                /* Update EEPROM */
				ptr8 = (uint8_t *)&dist;
  4077f4:	4b48      	ldr	r3, [pc, #288]	; (407918 <WriteMbusRegs+0x34c>)
  4077f6:	60bb      	str	r3, [r7, #8]
				WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_DIST0, ptr8, 4);
  4077f8:	2304      	movs	r3, #4
  4077fa:	9300      	str	r3, [sp, #0]
  4077fc:	68bb      	ldr	r3, [r7, #8]
  4077fe:	220c      	movs	r2, #12
  407800:	2150      	movs	r1, #80	; 0x50
  407802:	4837      	ldr	r0, [pc, #220]	; (4078e0 <WriteMbusRegs+0x314>)
  407804:	4c40      	ldr	r4, [pc, #256]	; (407908 <WriteMbusRegs+0x33c>)
  407806:	47a0      	blx	r4
                break;
  407808:	e0b5      	b.n	407976 <WriteMbusRegs+0x3aa>
            case MBUS_REG_WIDTHH:
                ptr = (uint16_t*)&width;
  40780a:	4b44      	ldr	r3, [pc, #272]	; (40791c <WriteMbusRegs+0x350>)
  40780c:	60fb      	str	r3, [r7, #12]
                ptr[1] = mBusRegs[MBUS_REG_WIDTHH];
  40780e:	68fb      	ldr	r3, [r7, #12]
  407810:	3302      	adds	r3, #2
  407812:	4a3c      	ldr	r2, [pc, #240]	; (407904 <WriteMbusRegs+0x338>)
  407814:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
  407818:	801a      	strh	r2, [r3, #0]
                ptr[0] = mBusRegs[MBUS_REG_WIDTHL];
  40781a:	4b3a      	ldr	r3, [pc, #232]	; (407904 <WriteMbusRegs+0x338>)
  40781c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
  407820:	68fb      	ldr	r3, [r7, #12]
  407822:	801a      	strh	r2, [r3, #0]
                /* Update EEPROM */
				ptr8 = (uint8_t *)&width;
  407824:	4b3d      	ldr	r3, [pc, #244]	; (40791c <WriteMbusRegs+0x350>)
  407826:	60bb      	str	r3, [r7, #8]
                WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_WIDTH0, ptr8, 4);
  407828:	2304      	movs	r3, #4
  40782a:	9300      	str	r3, [sp, #0]
  40782c:	68bb      	ldr	r3, [r7, #8]
  40782e:	2210      	movs	r2, #16
  407830:	2150      	movs	r1, #80	; 0x50
  407832:	482b      	ldr	r0, [pc, #172]	; (4078e0 <WriteMbusRegs+0x314>)
  407834:	4c34      	ldr	r4, [pc, #208]	; (407908 <WriteMbusRegs+0x33c>)
  407836:	47a0      	blx	r4
                break;
  407838:	e09d      	b.n	407976 <WriteMbusRegs+0x3aa>
			case MBUS_REG_BKPARAM1H:
				ptr = (uint16_t*)&bkTrkParam1;
  40783a:	4b39      	ldr	r3, [pc, #228]	; (407920 <WriteMbusRegs+0x354>)
  40783c:	60fb      	str	r3, [r7, #12]
				ptr[1] = mBusRegs[MBUS_REG_BKPARAM1H];
  40783e:	68fb      	ldr	r3, [r7, #12]
  407840:	3302      	adds	r3, #2
  407842:	4a30      	ldr	r2, [pc, #192]	; (407904 <WriteMbusRegs+0x338>)
  407844:	f8b2 2046 	ldrh.w	r2, [r2, #70]	; 0x46
  407848:	801a      	strh	r2, [r3, #0]
				ptr[0] = mBusRegs[MBUS_REG_BKPARAM1L];
  40784a:	4b2e      	ldr	r3, [pc, #184]	; (407904 <WriteMbusRegs+0x338>)
  40784c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
  407850:	68fb      	ldr	r3, [r7, #12]
  407852:	801a      	strh	r2, [r3, #0]
				/* Update EEPROM */
				ptr8 = (uint8_t *)&bkTrkParam1;
  407854:	4b32      	ldr	r3, [pc, #200]	; (407920 <WriteMbusRegs+0x354>)
  407856:	60bb      	str	r3, [r7, #8]
				WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_BKPARAM10, ptr8, 4);
  407858:	2304      	movs	r3, #4
  40785a:	9300      	str	r3, [sp, #0]
  40785c:	68bb      	ldr	r3, [r7, #8]
  40785e:	2218      	movs	r2, #24
  407860:	2150      	movs	r1, #80	; 0x50
  407862:	481f      	ldr	r0, [pc, #124]	; (4078e0 <WriteMbusRegs+0x314>)
  407864:	4c28      	ldr	r4, [pc, #160]	; (407908 <WriteMbusRegs+0x33c>)
  407866:	47a0      	blx	r4
				break;
  407868:	e085      	b.n	407976 <WriteMbusRegs+0x3aa>
			case MBUS_REG_BKPARAM2H:
				ptr = (uint16_t*)&bkTrkParam2;
  40786a:	4b2e      	ldr	r3, [pc, #184]	; (407924 <WriteMbusRegs+0x358>)
  40786c:	60fb      	str	r3, [r7, #12]
				ptr[1] = mBusRegs[MBUS_REG_BKPARAM2H];
  40786e:	68fb      	ldr	r3, [r7, #12]
  407870:	3302      	adds	r3, #2
  407872:	4a24      	ldr	r2, [pc, #144]	; (407904 <WriteMbusRegs+0x338>)
  407874:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
  407878:	801a      	strh	r2, [r3, #0]
				ptr[0] = mBusRegs[MBUS_REG_BKPARAM2L];
  40787a:	4b22      	ldr	r3, [pc, #136]	; (407904 <WriteMbusRegs+0x338>)
  40787c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
  407880:	68fb      	ldr	r3, [r7, #12]
  407882:	801a      	strh	r2, [r3, #0]
				/* Update EEPROM */
				ptr8 = (uint8_t *)&bkTrkParam2;
  407884:	4b27      	ldr	r3, [pc, #156]	; (407924 <WriteMbusRegs+0x358>)
  407886:	60bb      	str	r3, [r7, #8]
				WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_BKPARAM20, ptr8, 4);
  407888:	2304      	movs	r3, #4
  40788a:	9300      	str	r3, [sp, #0]
  40788c:	68bb      	ldr	r3, [r7, #8]
  40788e:	221c      	movs	r2, #28
  407890:	2150      	movs	r1, #80	; 0x50
  407892:	4813      	ldr	r0, [pc, #76]	; (4078e0 <WriteMbusRegs+0x314>)
  407894:	4c1c      	ldr	r4, [pc, #112]	; (407908 <WriteMbusRegs+0x33c>)
  407896:	47a0      	blx	r4
				break;
  407898:	e06d      	b.n	407976 <WriteMbusRegs+0x3aa>
			case MBUS_REG_CLMODEDIR:
				/* Update EEPROM */
				WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_CLMODEDIR, (uint8_t *)&mBusRegs[MBUS_REG_CLMODEDIR], 1);
  40789a:	2301      	movs	r3, #1
  40789c:	9300      	str	r3, [sp, #0]
  40789e:	4b22      	ldr	r3, [pc, #136]	; (407928 <WriteMbusRegs+0x35c>)
  4078a0:	2220      	movs	r2, #32
  4078a2:	2150      	movs	r1, #80	; 0x50
  4078a4:	480e      	ldr	r0, [pc, #56]	; (4078e0 <WriteMbusRegs+0x314>)
  4078a6:	4c18      	ldr	r4, [pc, #96]	; (407908 <WriteMbusRegs+0x33c>)
  4078a8:	47a0      	blx	r4
				break;
  4078aa:	e064      	b.n	407976 <WriteMbusRegs+0x3aa>
			case MBUS_REG_SLA:
				if(mBusRegs[MBUS_REG_SLA]!=0)
  4078ac:	4b15      	ldr	r3, [pc, #84]	; (407904 <WriteMbusRegs+0x338>)
  4078ae:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
  4078b2:	2b00      	cmp	r3, #0
  4078b4:	d05e      	beq.n	407974 <WriteMbusRegs+0x3a8>
				{
					/* Update EEPROM */
					WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_SLA, (uint8_t *)&mBusRegs[MBUS_REG_SLA], 1);
  4078b6:	2301      	movs	r3, #1
  4078b8:	9300      	str	r3, [sp, #0]
  4078ba:	4b1c      	ldr	r3, [pc, #112]	; (40792c <WriteMbusRegs+0x360>)
  4078bc:	2221      	movs	r2, #33	; 0x21
  4078be:	2150      	movs	r1, #80	; 0x50
  4078c0:	4807      	ldr	r0, [pc, #28]	; (4078e0 <WriteMbusRegs+0x314>)
  4078c2:	4c11      	ldr	r4, [pc, #68]	; (407908 <WriteMbusRegs+0x33c>)
  4078c4:	47a0      	blx	r4
				}
				break;
  4078c6:	e055      	b.n	407974 <WriteMbusRegs+0x3a8>
			case MBUS_REG_BAUDRATE:
				/* Update EEPROM */
				WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_BAUDRATE, (uint8_t *)&mBusRegs[MBUS_REG_BAUDRATE], 1);
  4078c8:	2301      	movs	r3, #1
  4078ca:	9300      	str	r3, [sp, #0]
  4078cc:	4b18      	ldr	r3, [pc, #96]	; (407930 <WriteMbusRegs+0x364>)
  4078ce:	2222      	movs	r2, #34	; 0x22
  4078d0:	2150      	movs	r1, #80	; 0x50
  4078d2:	4803      	ldr	r0, [pc, #12]	; (4078e0 <WriteMbusRegs+0x314>)
  4078d4:	4c0c      	ldr	r4, [pc, #48]	; (407908 <WriteMbusRegs+0x33c>)
  4078d6:	47a0      	blx	r4
				updateCommParams = 1;
  4078d8:	4b16      	ldr	r3, [pc, #88]	; (407934 <WriteMbusRegs+0x368>)
  4078da:	2201      	movs	r2, #1
  4078dc:	701a      	strb	r2, [r3, #0]
				break;
  4078de:	e04a      	b.n	407976 <WriteMbusRegs+0x3aa>
  4078e0:	40018000 	.word	0x40018000
  4078e4:	00400349 	.word	0x00400349
  4078e8:	0040036d 	.word	0x0040036d
  4078ec:	00400391 	.word	0x00400391
  4078f0:	00400415 	.word	0x00400415
  4078f4:	00400439 	.word	0x00400439
  4078f8:	0040045d 	.word	0x0040045d
  4078fc:	00400481 	.word	0x00400481
  407900:	2000000c 	.word	0x2000000c
  407904:	20000494 	.word	0x20000494
  407908:	004001cd 	.word	0x004001cd
  40790c:	20000010 	.word	0x20000010
  407910:	20000014 	.word	0x20000014
  407914:	20000020 	.word	0x20000020
  407918:	20000018 	.word	0x20000018
  40791c:	2000001c 	.word	0x2000001c
  407920:	20000024 	.word	0x20000024
  407924:	20000028 	.word	0x20000028
  407928:	200004e0 	.word	0x200004e0
  40792c:	200004e2 	.word	0x200004e2
  407930:	200004e4 	.word	0x200004e4
  407934:	2000272c 	.word	0x2000272c
			case MBUS_REG_PARITY:
				/* Update EEPROM */
				WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_PARITY, (uint8_t *)&mBusRegs[MBUS_REG_PARITY], 1);
  407938:	2301      	movs	r3, #1
  40793a:	9300      	str	r3, [sp, #0]
  40793c:	4b15      	ldr	r3, [pc, #84]	; (407994 <WriteMbusRegs+0x3c8>)
  40793e:	2223      	movs	r2, #35	; 0x23
  407940:	2150      	movs	r1, #80	; 0x50
  407942:	4815      	ldr	r0, [pc, #84]	; (407998 <WriteMbusRegs+0x3cc>)
  407944:	4c15      	ldr	r4, [pc, #84]	; (40799c <WriteMbusRegs+0x3d0>)
  407946:	47a0      	blx	r4
				updateCommParams = 1;
  407948:	4b15      	ldr	r3, [pc, #84]	; (4079a0 <WriteMbusRegs+0x3d4>)
  40794a:	2201      	movs	r2, #1
  40794c:	701a      	strb	r2, [r3, #0]
				break;
  40794e:	e012      	b.n	407976 <WriteMbusRegs+0x3aa>
            case MBUS_REG_OPMODE:
                mBusRegs[MBUS_REG_MOTON] = 0;
  407950:	4b14      	ldr	r3, [pc, #80]	; (4079a4 <WriteMbusRegs+0x3d8>)
  407952:	2200      	movs	r2, #0
  407954:	869a      	strh	r2, [r3, #52]	; 0x34
                minCtr = 0;
  407956:	4b14      	ldr	r3, [pc, #80]	; (4079a8 <WriteMbusRegs+0x3dc>)
  407958:	2200      	movs	r2, #0
  40795a:	701a      	strb	r2, [r3, #0]
                /* Turn Motor Off */
				#ifndef MOTOR_CTRL_A4955
					gpio_set_pin_low(PIN_MOTOR_RST_IDX);
				#else
					gpio_set_pin_low(PIN_MOTOR_SLP_IDX);
  40795c:	2022      	movs	r0, #34	; 0x22
  40795e:	4b13      	ldr	r3, [pc, #76]	; (4079ac <WriteMbusRegs+0x3e0>)
  407960:	4798      	blx	r3
					gpio_set_pin_low(PIN_MOTOR_IN1_IDX);
  407962:	2020      	movs	r0, #32
  407964:	4b11      	ldr	r3, [pc, #68]	; (4079ac <WriteMbusRegs+0x3e0>)
  407966:	4798      	blx	r3
					gpio_set_pin_low(PIN_MOTOR_IN2_IDX);
  407968:	2021      	movs	r0, #33	; 0x21
  40796a:	4b10      	ldr	r3, [pc, #64]	; (4079ac <WriteMbusRegs+0x3e0>)
  40796c:	4798      	blx	r3
				#endif
                break;
  40796e:	e002      	b.n	407976 <WriteMbusRegs+0x3aa>
            default:
                break;
  407970:	bf00      	nop
  407972:	e000      	b.n	407976 <WriteMbusRegs+0x3aa>
				if(mBusRegs[MBUS_REG_SLA]!=0)
				{
					/* Update EEPROM */
					WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_SLA, (uint8_t *)&mBusRegs[MBUS_REG_SLA], 1);
				}
				break;
  407974:	bf00      	nop
				#endif
                break;
            default:
                break;
        }    
        regAddr++;
  407976:	78fb      	ldrb	r3, [r7, #3]
  407978:	3301      	adds	r3, #1
  40797a:	70fb      	strb	r3, [r7, #3]
        len--;
  40797c:	78bb      	ldrb	r3, [r7, #2]
  40797e:	3b01      	subs	r3, #1
  407980:	70bb      	strb	r3, [r7, #2]
void WriteMbusRegs(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len)
{
    uint16_t *ptr;
	uint8_t *ptr8;
    
    while(len)
  407982:	78bb      	ldrb	r3, [r7, #2]
  407984:	2b00      	cmp	r3, #0
  407986:	f47f ae2a 	bne.w	4075de <WriteMbusRegs+0x12>
                break;
        }    
        regAddr++;
        len--;
    }
}
  40798a:	bf00      	nop
  40798c:	3714      	adds	r7, #20
  40798e:	46bd      	mov	sp, r7
  407990:	bd90      	pop	{r4, r7, pc}
  407992:	bf00      	nop
  407994:	200004e6 	.word	0x200004e6
  407998:	40018000 	.word	0x40018000
  40799c:	004001cd 	.word	0x004001cd
  4079a0:	2000272c 	.word	0x2000272c
  4079a4:	20000494 	.word	0x20000494
  4079a8:	200004ea 	.word	0x200004ea
  4079ac:	00404709 	.word	0x00404709

004079b0 <SendRespPkt>:

void SendRespPkt(uint8_t *pkt, uint8_t len)
{
  4079b0:	b580      	push	{r7, lr}
  4079b2:	b082      	sub	sp, #8
  4079b4:	af00      	add	r7, sp, #0
  4079b6:	6078      	str	r0, [r7, #4]
  4079b8:	460b      	mov	r3, r1
  4079ba:	70fb      	strb	r3, [r7, #3]
	usart_enable_tx(RS485_USART);
  4079bc:	480c      	ldr	r0, [pc, #48]	; (4079f0 <SendRespPkt+0x40>)
  4079be:	4b0d      	ldr	r3, [pc, #52]	; (4079f4 <SendRespPkt+0x44>)
  4079c0:	4798      	blx	r3
	/* 3.5 Char Wait Time */
	
	/* Start PDC Transfer */
	Rs485PdcStartTx((uint32_t)pkt, len);
  4079c2:	687b      	ldr	r3, [r7, #4]
  4079c4:	78fa      	ldrb	r2, [r7, #3]
  4079c6:	b292      	uxth	r2, r2
  4079c8:	4611      	mov	r1, r2
  4079ca:	4618      	mov	r0, r3
  4079cc:	4b0a      	ldr	r3, [pc, #40]	; (4079f8 <SendRespPkt+0x48>)
  4079ce:	4798      	blx	r3

	/* Wait till tx completes */
	while(!Rs485PdcGetTxStatus())
  4079d0:	e002      	b.n	4079d8 <SendRespPkt+0x28>
		vTaskDelay(10 / portTICK_RATE_MS);
  4079d2:	2002      	movs	r0, #2
  4079d4:	4b09      	ldr	r3, [pc, #36]	; (4079fc <SendRespPkt+0x4c>)
  4079d6:	4798      	blx	r3
	
	/* Start PDC Transfer */
	Rs485PdcStartTx((uint32_t)pkt, len);

	/* Wait till tx completes */
	while(!Rs485PdcGetTxStatus())
  4079d8:	4b09      	ldr	r3, [pc, #36]	; (407a00 <SendRespPkt+0x50>)
  4079da:	4798      	blx	r3
  4079dc:	4603      	mov	r3, r0
  4079de:	2b00      	cmp	r3, #0
  4079e0:	d0f7      	beq.n	4079d2 <SendRespPkt+0x22>
		vTaskDelay(10 / portTICK_RATE_MS);

	/* 3.5 Char Wait Time */

	usart_disable_tx(RS485_USART);
  4079e2:	4803      	ldr	r0, [pc, #12]	; (4079f0 <SendRespPkt+0x40>)
  4079e4:	4b07      	ldr	r3, [pc, #28]	; (407a04 <SendRespPkt+0x54>)
  4079e6:	4798      	blx	r3
}
  4079e8:	bf00      	nop
  4079ea:	3708      	adds	r7, #8
  4079ec:	46bd      	mov	sp, r7
  4079ee:	bd80      	pop	{r7, pc}
  4079f0:	40028000 	.word	0x40028000
  4079f4:	00403d71 	.word	0x00403d71
  4079f8:	00402fa5 	.word	0x00402fa5
  4079fc:	00406345 	.word	0x00406345
  407a00:	00403055 	.word	0x00403055
  407a04:	00403d89 	.word	0x00403d89

00407a08 <UpdateRs485Params>:

void UpdateRs485Params(void)
{
  407a08:	b480      	push	{r7}
  407a0a:	af00      	add	r7, sp, #0
	switch(mBusRegs[MBUS_REG_BAUDRATE])
  407a0c:	4b18      	ldr	r3, [pc, #96]	; (407a70 <UpdateRs485Params+0x68>)
  407a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
  407a12:	2b01      	cmp	r3, #1
  407a14:	d002      	beq.n	407a1c <UpdateRs485Params+0x14>
  407a16:	2b03      	cmp	r3, #3
  407a18:	d005      	beq.n	407a26 <UpdateRs485Params+0x1e>
  407a1a:	e009      	b.n	407a30 <UpdateRs485Params+0x28>
	{
		case 1:
			rs485BaudRate = 4800;
  407a1c:	4b15      	ldr	r3, [pc, #84]	; (407a74 <UpdateRs485Params+0x6c>)
  407a1e:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
  407a22:	601a      	str	r2, [r3, #0]
			break;
  407a24:	e009      	b.n	407a3a <UpdateRs485Params+0x32>
		case 3:
			rs485BaudRate = 19200;
  407a26:	4b13      	ldr	r3, [pc, #76]	; (407a74 <UpdateRs485Params+0x6c>)
  407a28:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
  407a2c:	601a      	str	r2, [r3, #0]
			break;
  407a2e:	e004      	b.n	407a3a <UpdateRs485Params+0x32>
		default:
			rs485BaudRate = 9600;
  407a30:	4b10      	ldr	r3, [pc, #64]	; (407a74 <UpdateRs485Params+0x6c>)
  407a32:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  407a36:	601a      	str	r2, [r3, #0]
			break;
  407a38:	bf00      	nop
	}
	
	switch(mBusRegs[MBUS_REG_PARITY])
  407a3a:	4b0d      	ldr	r3, [pc, #52]	; (407a70 <UpdateRs485Params+0x68>)
  407a3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
  407a40:	2b01      	cmp	r3, #1
  407a42:	d002      	beq.n	407a4a <UpdateRs485Params+0x42>
  407a44:	2b02      	cmp	r3, #2
  407a46:	d004      	beq.n	407a52 <UpdateRs485Params+0x4a>
  407a48:	e008      	b.n	407a5c <UpdateRs485Params+0x54>
	{
		case 1:
			rs485Parity = US_MR_PAR_EVEN;
  407a4a:	4b0b      	ldr	r3, [pc, #44]	; (407a78 <UpdateRs485Params+0x70>)
  407a4c:	2200      	movs	r2, #0
  407a4e:	601a      	str	r2, [r3, #0]
			break;
  407a50:	e009      	b.n	407a66 <UpdateRs485Params+0x5e>
		case 2:
			rs485Parity = US_MR_PAR_ODD;
  407a52:	4b09      	ldr	r3, [pc, #36]	; (407a78 <UpdateRs485Params+0x70>)
  407a54:	f44f 7200 	mov.w	r2, #512	; 0x200
  407a58:	601a      	str	r2, [r3, #0]
			break;
  407a5a:	e004      	b.n	407a66 <UpdateRs485Params+0x5e>
		default:
			rs485Parity = US_MR_PAR_NO;
  407a5c:	4b06      	ldr	r3, [pc, #24]	; (407a78 <UpdateRs485Params+0x70>)
  407a5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  407a62:	601a      	str	r2, [r3, #0]
			break;
  407a64:	bf00      	nop
	}
}
  407a66:	bf00      	nop
  407a68:	46bd      	mov	sp, r7
  407a6a:	bc80      	pop	{r7}
  407a6c:	4770      	bx	lr
  407a6e:	bf00      	nop
  407a70:	20000494 	.word	0x20000494
  407a74:	2000002c 	.word	0x2000002c
  407a78:	20000030 	.word	0x20000030

00407a7c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  407a7c:	b480      	push	{r7}
  407a7e:	b083      	sub	sp, #12
  407a80:	af00      	add	r7, sp, #0
  407a82:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  407a84:	687b      	ldr	r3, [r7, #4]
  407a86:	2b07      	cmp	r3, #7
  407a88:	d825      	bhi.n	407ad6 <osc_get_rate+0x5a>
  407a8a:	a201      	add	r2, pc, #4	; (adr r2, 407a90 <osc_get_rate+0x14>)
  407a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  407a90:	00407ab1 	.word	0x00407ab1
  407a94:	00407ab7 	.word	0x00407ab7
  407a98:	00407abd 	.word	0x00407abd
  407a9c:	00407ac3 	.word	0x00407ac3
  407aa0:	00407ac7 	.word	0x00407ac7
  407aa4:	00407acb 	.word	0x00407acb
  407aa8:	00407acf 	.word	0x00407acf
  407aac:	00407ad3 	.word	0x00407ad3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  407ab0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  407ab4:	e010      	b.n	407ad8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  407ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  407aba:	e00d      	b.n	407ad8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  407abc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  407ac0:	e00a      	b.n	407ad8 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  407ac2:	4b08      	ldr	r3, [pc, #32]	; (407ae4 <osc_get_rate+0x68>)
  407ac4:	e008      	b.n	407ad8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  407ac6:	4b08      	ldr	r3, [pc, #32]	; (407ae8 <osc_get_rate+0x6c>)
  407ac8:	e006      	b.n	407ad8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  407aca:	4b08      	ldr	r3, [pc, #32]	; (407aec <osc_get_rate+0x70>)
  407acc:	e004      	b.n	407ad8 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  407ace:	4b07      	ldr	r3, [pc, #28]	; (407aec <osc_get_rate+0x70>)
  407ad0:	e002      	b.n	407ad8 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  407ad2:	4b06      	ldr	r3, [pc, #24]	; (407aec <osc_get_rate+0x70>)
  407ad4:	e000      	b.n	407ad8 <osc_get_rate+0x5c>
	}

	return 0;
  407ad6:	2300      	movs	r3, #0
}
  407ad8:	4618      	mov	r0, r3
  407ada:	370c      	adds	r7, #12
  407adc:	46bd      	mov	sp, r7
  407ade:	bc80      	pop	{r7}
  407ae0:	4770      	bx	lr
  407ae2:	bf00      	nop
  407ae4:	003d0900 	.word	0x003d0900
  407ae8:	007a1200 	.word	0x007a1200
  407aec:	00b71b00 	.word	0x00b71b00

00407af0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  407af0:	b580      	push	{r7, lr}
  407af2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  407af4:	2006      	movs	r0, #6
  407af6:	4b04      	ldr	r3, [pc, #16]	; (407b08 <sysclk_get_main_hz+0x18>)
  407af8:	4798      	blx	r3
  407afa:	4602      	mov	r2, r0
  407afc:	4613      	mov	r3, r2
  407afe:	009b      	lsls	r3, r3, #2
  407b00:	4413      	add	r3, r2
  407b02:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  407b04:	4618      	mov	r0, r3
  407b06:	bd80      	pop	{r7, pc}
  407b08:	00407a7d 	.word	0x00407a7d

00407b0c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  407b0c:	b580      	push	{r7, lr}
  407b0e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  407b10:	4b02      	ldr	r3, [pc, #8]	; (407b1c <sysclk_get_cpu_hz+0x10>)
  407b12:	4798      	blx	r3
  407b14:	4603      	mov	r3, r0
  407b16:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  407b18:	4618      	mov	r0, r3
  407b1a:	bd80      	pop	{r7, pc}
  407b1c:	00407af1 	.word	0x00407af1

00407b20 <main>:
/*	*** Updates ***

*/

int main (void)
{
  407b20:	b590      	push	{r4, r7, lr}
  407b22:	b085      	sub	sp, #20
  407b24:	af04      	add	r7, sp, #16
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
  407b26:	4b1a      	ldr	r3, [pc, #104]	; (407b90 <main+0x70>)
  407b28:	4798      	blx	r3
	/* Initialize all peripherals */
	board_init();
  407b2a:	4b1a      	ldr	r3, [pc, #104]	; (407b94 <main+0x74>)
  407b2c:	4798      	blx	r3
	delay_init(sysclk_get_cpu_hz());
	
	vInitPeripherals();
  407b2e:	4b1a      	ldr	r3, [pc, #104]	; (407b98 <main+0x78>)
  407b30:	4798      	blx	r3

	/* Enable global interrupts. */   
    
//     xTaskCreate(vCCTask, "Cc", 100, NULL, 2, NULL);
    xTaskCreate(vPvTrackerTask, (const signed char *)"Pv", 300, NULL, 1, NULL);
  407b32:	2300      	movs	r3, #0
  407b34:	9303      	str	r3, [sp, #12]
  407b36:	2300      	movs	r3, #0
  407b38:	9302      	str	r3, [sp, #8]
  407b3a:	2300      	movs	r3, #0
  407b3c:	9301      	str	r3, [sp, #4]
  407b3e:	2301      	movs	r3, #1
  407b40:	9300      	str	r3, [sp, #0]
  407b42:	2300      	movs	r3, #0
  407b44:	f44f 7296 	mov.w	r2, #300	; 0x12c
  407b48:	4914      	ldr	r1, [pc, #80]	; (407b9c <main+0x7c>)
  407b4a:	4815      	ldr	r0, [pc, #84]	; (407ba0 <main+0x80>)
  407b4c:	4c15      	ldr	r4, [pc, #84]	; (407ba4 <main+0x84>)
  407b4e:	47a0      	blx	r4
    xTaskCreate(vCommTask, (const signed char *)"Comm", 512, NULL, 1, NULL);
  407b50:	2300      	movs	r3, #0
  407b52:	9303      	str	r3, [sp, #12]
  407b54:	2300      	movs	r3, #0
  407b56:	9302      	str	r3, [sp, #8]
  407b58:	2300      	movs	r3, #0
  407b5a:	9301      	str	r3, [sp, #4]
  407b5c:	2301      	movs	r3, #1
  407b5e:	9300      	str	r3, [sp, #0]
  407b60:	2300      	movs	r3, #0
  407b62:	f44f 7200 	mov.w	r2, #512	; 0x200
  407b66:	4910      	ldr	r1, [pc, #64]	; (407ba8 <main+0x88>)
  407b68:	4810      	ldr	r0, [pc, #64]	; (407bac <main+0x8c>)
  407b6a:	4c0e      	ldr	r4, [pc, #56]	; (407ba4 <main+0x84>)
  407b6c:	47a0      	blx	r4
	xTaskCreate(vBlinkTask, (const signed char *)"Blinky", 100, NULL, 1, NULL);
  407b6e:	2300      	movs	r3, #0
  407b70:	9303      	str	r3, [sp, #12]
  407b72:	2300      	movs	r3, #0
  407b74:	9302      	str	r3, [sp, #8]
  407b76:	2300      	movs	r3, #0
  407b78:	9301      	str	r3, [sp, #4]
  407b7a:	2301      	movs	r3, #1
  407b7c:	9300      	str	r3, [sp, #0]
  407b7e:	2300      	movs	r3, #0
  407b80:	2264      	movs	r2, #100	; 0x64
  407b82:	490b      	ldr	r1, [pc, #44]	; (407bb0 <main+0x90>)
  407b84:	480b      	ldr	r0, [pc, #44]	; (407bb4 <main+0x94>)
  407b86:	4c07      	ldr	r4, [pc, #28]	; (407ba4 <main+0x84>)
  407b88:	47a0      	blx	r4
    
    /* Start Watchdog Timer */
        
    vTaskStartScheduler();
  407b8a:	4b0b      	ldr	r3, [pc, #44]	; (407bb8 <main+0x98>)
  407b8c:	4798      	blx	r3
     
	for( ;; );
  407b8e:	e7fe      	b.n	407b8e <main+0x6e>
  407b90:	00404375 	.word	0x00404375
  407b94:	00403fa5 	.word	0x00403fa5
  407b98:	00407be1 	.word	0x00407be1
  407b9c:	0040bd10 	.word	0x0040bd10
  407ba0:	00400d4d 	.word	0x00400d4d
  407ba4:	0040618d 	.word	0x0040618d
  407ba8:	0040bd14 	.word	0x0040bd14
  407bac:	00407435 	.word	0x00407435
  407bb0:	0040bd1c 	.word	0x0040bd1c
  407bb4:	00407d1d 	.word	0x00407d1d
  407bb8:	004063ad 	.word	0x004063ad

00407bbc <vApplicationStackOverflowHook>:
}

void vApplicationStackOverflowHook(xTaskHandle pxTask, char *pcTaskName )
{
  407bbc:	b580      	push	{r7, lr}
  407bbe:	b082      	sub	sp, #8
  407bc0:	af00      	add	r7, sp, #0
  407bc2:	6078      	str	r0, [r7, #4]
  407bc4:	6039      	str	r1, [r7, #0]
	/* The stack space has been execeeded for a task, considering allocating more. */
	taskDISABLE_INTERRUPTS();
  407bc6:	4b01      	ldr	r3, [pc, #4]	; (407bcc <vApplicationStackOverflowHook+0x10>)
  407bc8:	4798      	blx	r3
	for( ;; );
  407bca:	e7fe      	b.n	407bca <vApplicationStackOverflowHook+0xe>
  407bcc:	00405655 	.word	0x00405655

00407bd0 <vApplicationMallocFailedHook>:
}

void vApplicationMallocFailedHook( void )
{
  407bd0:	b580      	push	{r7, lr}
  407bd2:	af00      	add	r7, sp, #0
	/* The heap space has been execeeded. */
	taskDISABLE_INTERRUPTS();
  407bd4:	4b01      	ldr	r3, [pc, #4]	; (407bdc <vApplicationMallocFailedHook+0xc>)
  407bd6:	4798      	blx	r3
	for( ;; );
  407bd8:	e7fe      	b.n	407bd8 <vApplicationMallocFailedHook+0x8>
  407bda:	bf00      	nop
  407bdc:	00405655 	.word	0x00405655

00407be0 <vInitPeripherals>:
}

void vInitPeripherals( void )
{
  407be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407be4:	b087      	sub	sp, #28
  407be6:	af00      	add	r7, sp, #0
	#if defined(DEBUG_EN) || defined(LOG_EN)
		ConsoleInit();
	#endif
	
	gpio_set_pin_low(PIN_LDOEN_IDX);
  407be8:	2001      	movs	r0, #1
  407bea:	4b45      	ldr	r3, [pc, #276]	; (407d00 <vInitPeripherals+0x120>)
  407bec:	4798      	blx	r3
	delay_ms(500);
  407bee:	4b45      	ldr	r3, [pc, #276]	; (407d04 <vInitPeripherals+0x124>)
  407bf0:	4798      	blx	r3
  407bf2:	4603      	mov	r3, r0
  407bf4:	4619      	mov	r1, r3
  407bf6:	f04f 0200 	mov.w	r2, #0
  407bfa:	460b      	mov	r3, r1
  407bfc:	4614      	mov	r4, r2
  407bfe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
  407c02:	ea4b 7b93 	orr.w	fp, fp, r3, lsr #30
  407c06:	ea4f 0a83 	mov.w	sl, r3, lsl #2
  407c0a:	4653      	mov	r3, sl
  407c0c:	465c      	mov	r4, fp
  407c0e:	ea4f 1944 	mov.w	r9, r4, lsl #5
  407c12:	ea49 69d3 	orr.w	r9, r9, r3, lsr #27
  407c16:	ea4f 1843 	mov.w	r8, r3, lsl #5
  407c1a:	ebb8 0803 	subs.w	r8, r8, r3
  407c1e:	eb69 0904 	sbc.w	r9, r9, r4
  407c22:	eb18 0801 	adds.w	r8, r8, r1
  407c26:	eb49 0902 	adc.w	r9, r9, r2
  407c2a:	ea4f 0389 	mov.w	r3, r9, lsl #2
  407c2e:	617b      	str	r3, [r7, #20]
  407c30:	697b      	ldr	r3, [r7, #20]
  407c32:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
  407c36:	617b      	str	r3, [r7, #20]
  407c38:	ea4f 0388 	mov.w	r3, r8, lsl #2
  407c3c:	613b      	str	r3, [r7, #16]
  407c3e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
  407c42:	4641      	mov	r1, r8
  407c44:	464a      	mov	r2, r9
  407c46:	f243 63af 	movw	r3, #13999	; 0x36af
  407c4a:	f04f 0400 	mov.w	r4, #0
  407c4e:	eb11 0803 	adds.w	r8, r1, r3
  407c52:	eb42 0904 	adc.w	r9, r2, r4
  407c56:	4640      	mov	r0, r8
  407c58:	4649      	mov	r1, r9
  407c5a:	4c2b      	ldr	r4, [pc, #172]	; (407d08 <vInitPeripherals+0x128>)
  407c5c:	f243 62b0 	movw	r2, #14000	; 0x36b0
  407c60:	f04f 0300 	mov.w	r3, #0
  407c64:	47a0      	blx	r4
  407c66:	4603      	mov	r3, r0
  407c68:	460c      	mov	r4, r1
  407c6a:	4618      	mov	r0, r3
  407c6c:	4b27      	ldr	r3, [pc, #156]	; (407d0c <vInitPeripherals+0x12c>)
  407c6e:	4798      	blx	r3
	/* Enable LDO */
	gpio_set_pin_high(PIN_LDOEN_IDX);
  407c70:	2001      	movs	r0, #1
  407c72:	4b27      	ldr	r3, [pc, #156]	; (407d10 <vInitPeripherals+0x130>)
  407c74:	4798      	blx	r3
	delay_ms(1000);
  407c76:	4b23      	ldr	r3, [pc, #140]	; (407d04 <vInitPeripherals+0x124>)
  407c78:	4798      	blx	r3
  407c7a:	4603      	mov	r3, r0
  407c7c:	4619      	mov	r1, r3
  407c7e:	f04f 0200 	mov.w	r2, #0
  407c82:	460b      	mov	r3, r1
  407c84:	4614      	mov	r4, r2
  407c86:	00a0      	lsls	r0, r4, #2
  407c88:	60f8      	str	r0, [r7, #12]
  407c8a:	68f8      	ldr	r0, [r7, #12]
  407c8c:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  407c90:	60f8      	str	r0, [r7, #12]
  407c92:	009b      	lsls	r3, r3, #2
  407c94:	60bb      	str	r3, [r7, #8]
  407c96:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  407c9a:	0166      	lsls	r6, r4, #5
  407c9c:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  407ca0:	015d      	lsls	r5, r3, #5
  407ca2:	1aed      	subs	r5, r5, r3
  407ca4:	eb66 0604 	sbc.w	r6, r6, r4
  407ca8:	186d      	adds	r5, r5, r1
  407caa:	eb46 0602 	adc.w	r6, r6, r2
  407cae:	00f3      	lsls	r3, r6, #3
  407cb0:	607b      	str	r3, [r7, #4]
  407cb2:	687b      	ldr	r3, [r7, #4]
  407cb4:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
  407cb8:	607b      	str	r3, [r7, #4]
  407cba:	00eb      	lsls	r3, r5, #3
  407cbc:	603b      	str	r3, [r7, #0]
  407cbe:	e9d7 5600 	ldrd	r5, r6, [r7]
  407cc2:	4629      	mov	r1, r5
  407cc4:	4632      	mov	r2, r6
  407cc6:	f243 63af 	movw	r3, #13999	; 0x36af
  407cca:	f04f 0400 	mov.w	r4, #0
  407cce:	18cd      	adds	r5, r1, r3
  407cd0:	eb42 0604 	adc.w	r6, r2, r4
  407cd4:	4628      	mov	r0, r5
  407cd6:	4631      	mov	r1, r6
  407cd8:	4c0b      	ldr	r4, [pc, #44]	; (407d08 <vInitPeripherals+0x128>)
  407cda:	f243 62b0 	movw	r2, #14000	; 0x36b0
  407cde:	f04f 0300 	mov.w	r3, #0
  407ce2:	47a0      	blx	r4
  407ce4:	4603      	mov	r3, r0
  407ce6:	460c      	mov	r4, r1
  407ce8:	4618      	mov	r0, r3
  407cea:	4b08      	ldr	r3, [pc, #32]	; (407d0c <vInitPeripherals+0x12c>)
  407cec:	4798      	blx	r3

	/* Initialize all RTOS vars */
	//vCCInit();
	vPvTrackerInit();
  407cee:	4b09      	ldr	r3, [pc, #36]	; (407d14 <vInitPeripherals+0x134>)
  407cf0:	4798      	blx	r3
	vCommInit();
  407cf2:	4b09      	ldr	r3, [pc, #36]	; (407d18 <vInitPeripherals+0x138>)
  407cf4:	4798      	blx	r3
}
  407cf6:	bf00      	nop
  407cf8:	371c      	adds	r7, #28
  407cfa:	46bd      	mov	sp, r7
  407cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d00:	00404709 	.word	0x00404709
  407d04:	00407b0d 	.word	0x00407b0d
  407d08:	0040b5b1 	.word	0x0040b5b1
  407d0c:	20000001 	.word	0x20000001
  407d10:	004046d9 	.word	0x004046d9
  407d14:	00400ddd 	.word	0x00400ddd
  407d18:	004075b5 	.word	0x004075b5

00407d1c <vBlinkTask>:

void vBlinkTask( void *pvParameters )
{
  407d1c:	b580      	push	{r7, lr}
  407d1e:	b082      	sub	sp, #8
  407d20:	af00      	add	r7, sp, #0
  407d22:	6078      	str	r0, [r7, #4]
	while(1)
	{
		gpio_set_pin_high(PIN_DEBUGLED_IDX);
  407d24:	2010      	movs	r0, #16
  407d26:	4b06      	ldr	r3, [pc, #24]	; (407d40 <vBlinkTask+0x24>)
  407d28:	4798      	blx	r3
		vTaskDelay(500 / portTICK_RATE_MS);
  407d2a:	2064      	movs	r0, #100	; 0x64
  407d2c:	4b05      	ldr	r3, [pc, #20]	; (407d44 <vBlinkTask+0x28>)
  407d2e:	4798      	blx	r3
		gpio_set_pin_low(PIN_DEBUGLED_IDX);
  407d30:	2010      	movs	r0, #16
  407d32:	4b05      	ldr	r3, [pc, #20]	; (407d48 <vBlinkTask+0x2c>)
  407d34:	4798      	blx	r3
		vTaskDelay(500 / portTICK_RATE_MS);
  407d36:	2064      	movs	r0, #100	; 0x64
  407d38:	4b02      	ldr	r3, [pc, #8]	; (407d44 <vBlinkTask+0x28>)
  407d3a:	4798      	blx	r3
	}
  407d3c:	e7f2      	b.n	407d24 <vBlinkTask+0x8>
  407d3e:	bf00      	nop
  407d40:	004046d9 	.word	0x004046d9
  407d44:	00406345 	.word	0x00406345
  407d48:	00404709 	.word	0x00404709

00407d4c <cos>:
  407d4c:	b530      	push	{r4, r5, lr}
  407d4e:	4a22      	ldr	r2, [pc, #136]	; (407dd8 <cos+0x8c>)
  407d50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  407d54:	4293      	cmp	r3, r2
  407d56:	b087      	sub	sp, #28
  407d58:	dd1b      	ble.n	407d92 <cos+0x46>
  407d5a:	4a20      	ldr	r2, [pc, #128]	; (407ddc <cos+0x90>)
  407d5c:	4293      	cmp	r3, r2
  407d5e:	dd05      	ble.n	407d6c <cos+0x20>
  407d60:	4602      	mov	r2, r0
  407d62:	460b      	mov	r3, r1
  407d64:	f002 fc4e 	bl	40a604 <__aeabi_dsub>
  407d68:	b007      	add	sp, #28
  407d6a:	bd30      	pop	{r4, r5, pc}
  407d6c:	aa02      	add	r2, sp, #8
  407d6e:	f000 ff07 	bl	408b80 <__ieee754_rem_pio2>
  407d72:	f000 0303 	and.w	r3, r0, #3
  407d76:	2b01      	cmp	r3, #1
  407d78:	d01a      	beq.n	407db0 <cos+0x64>
  407d7a:	2b02      	cmp	r3, #2
  407d7c:	d00f      	beq.n	407d9e <cos+0x52>
  407d7e:	b31b      	cbz	r3, 407dc8 <cos+0x7c>
  407d80:	2401      	movs	r4, #1
  407d82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  407d86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407d8a:	9400      	str	r4, [sp, #0]
  407d8c:	f001 fefc 	bl	409b88 <__kernel_sin>
  407d90:	e7ea      	b.n	407d68 <cos+0x1c>
  407d92:	2200      	movs	r2, #0
  407d94:	2300      	movs	r3, #0
  407d96:	f001 f9d7 	bl	409148 <__kernel_cos>
  407d9a:	b007      	add	sp, #28
  407d9c:	bd30      	pop	{r4, r5, pc}
  407d9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  407da2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407da6:	f001 f9cf 	bl	409148 <__kernel_cos>
  407daa:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  407dae:	e7db      	b.n	407d68 <cos+0x1c>
  407db0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  407db4:	9300      	str	r3, [sp, #0]
  407db6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407dba:	4622      	mov	r2, r4
  407dbc:	462b      	mov	r3, r5
  407dbe:	f001 fee3 	bl	409b88 <__kernel_sin>
  407dc2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  407dc6:	e7cf      	b.n	407d68 <cos+0x1c>
  407dc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  407dcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407dd0:	f001 f9ba 	bl	409148 <__kernel_cos>
  407dd4:	e7c8      	b.n	407d68 <cos+0x1c>
  407dd6:	bf00      	nop
  407dd8:	3fe921fb 	.word	0x3fe921fb
  407ddc:	7fefffff 	.word	0x7fefffff

00407de0 <sin>:
  407de0:	b530      	push	{r4, r5, lr}
  407de2:	4a1f      	ldr	r2, [pc, #124]	; (407e60 <sin+0x80>)
  407de4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  407de8:	4293      	cmp	r3, r2
  407dea:	b087      	sub	sp, #28
  407dec:	dd1b      	ble.n	407e26 <sin+0x46>
  407dee:	4a1d      	ldr	r2, [pc, #116]	; (407e64 <sin+0x84>)
  407df0:	4293      	cmp	r3, r2
  407df2:	dd05      	ble.n	407e00 <sin+0x20>
  407df4:	4602      	mov	r2, r0
  407df6:	460b      	mov	r3, r1
  407df8:	f002 fc04 	bl	40a604 <__aeabi_dsub>
  407dfc:	b007      	add	sp, #28
  407dfe:	bd30      	pop	{r4, r5, pc}
  407e00:	aa02      	add	r2, sp, #8
  407e02:	f000 febd 	bl	408b80 <__ieee754_rem_pio2>
  407e06:	f000 0003 	and.w	r0, r0, #3
  407e0a:	2801      	cmp	r0, #1
  407e0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  407e10:	d01a      	beq.n	407e48 <sin+0x68>
  407e12:	2802      	cmp	r0, #2
  407e14:	d00f      	beq.n	407e36 <sin+0x56>
  407e16:	b1e0      	cbz	r0, 407e52 <sin+0x72>
  407e18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407e1c:	f001 f994 	bl	409148 <__kernel_cos>
  407e20:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  407e24:	e7ea      	b.n	407dfc <sin+0x1c>
  407e26:	2300      	movs	r3, #0
  407e28:	9300      	str	r3, [sp, #0]
  407e2a:	2200      	movs	r2, #0
  407e2c:	2300      	movs	r3, #0
  407e2e:	f001 feab 	bl	409b88 <__kernel_sin>
  407e32:	b007      	add	sp, #28
  407e34:	bd30      	pop	{r4, r5, pc}
  407e36:	2401      	movs	r4, #1
  407e38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407e3c:	9400      	str	r4, [sp, #0]
  407e3e:	f001 fea3 	bl	409b88 <__kernel_sin>
  407e42:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  407e46:	e7d9      	b.n	407dfc <sin+0x1c>
  407e48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407e4c:	f001 f97c 	bl	409148 <__kernel_cos>
  407e50:	e7d4      	b.n	407dfc <sin+0x1c>
  407e52:	2401      	movs	r4, #1
  407e54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407e58:	9400      	str	r4, [sp, #0]
  407e5a:	f001 fe95 	bl	409b88 <__kernel_sin>
  407e5e:	e7cd      	b.n	407dfc <sin+0x1c>
  407e60:	3fe921fb 	.word	0x3fe921fb
  407e64:	7fefffff 	.word	0x7fefffff

00407e68 <tan>:
  407e68:	b530      	push	{r4, r5, lr}
  407e6a:	4a14      	ldr	r2, [pc, #80]	; (407ebc <tan+0x54>)
  407e6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  407e70:	4293      	cmp	r3, r2
  407e72:	b087      	sub	sp, #28
  407e74:	dd19      	ble.n	407eaa <tan+0x42>
  407e76:	4a12      	ldr	r2, [pc, #72]	; (407ec0 <tan+0x58>)
  407e78:	4293      	cmp	r3, r2
  407e7a:	dd05      	ble.n	407e88 <tan+0x20>
  407e7c:	4602      	mov	r2, r0
  407e7e:	460b      	mov	r3, r1
  407e80:	f002 fbc0 	bl	40a604 <__aeabi_dsub>
  407e84:	b007      	add	sp, #28
  407e86:	bd30      	pop	{r4, r5, pc}
  407e88:	aa02      	add	r2, sp, #8
  407e8a:	f000 fe79 	bl	408b80 <__ieee754_rem_pio2>
  407e8e:	0044      	lsls	r4, r0, #1
  407e90:	f004 0402 	and.w	r4, r4, #2
  407e94:	f1c4 0401 	rsb	r4, r4, #1
  407e98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  407e9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407ea0:	9400      	str	r4, [sp, #0]
  407ea2:	f001 ff29 	bl	409cf8 <__kernel_tan>
  407ea6:	b007      	add	sp, #28
  407ea8:	bd30      	pop	{r4, r5, pc}
  407eaa:	2301      	movs	r3, #1
  407eac:	9300      	str	r3, [sp, #0]
  407eae:	2200      	movs	r2, #0
  407eb0:	2300      	movs	r3, #0
  407eb2:	f001 ff21 	bl	409cf8 <__kernel_tan>
  407eb6:	b007      	add	sp, #28
  407eb8:	bd30      	pop	{r4, r5, pc}
  407eba:	bf00      	nop
  407ebc:	3fe921fb 	.word	0x3fe921fb
  407ec0:	7fefffff 	.word	0x7fefffff

00407ec4 <acos>:
  407ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407ec8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 407f70 <acos+0xac>
  407ecc:	b08b      	sub	sp, #44	; 0x2c
  407ece:	4604      	mov	r4, r0
  407ed0:	460d      	mov	r5, r1
  407ed2:	f000 f905 	bl	4080e0 <__ieee754_acos>
  407ed6:	f998 3000 	ldrsb.w	r3, [r8]
  407eda:	3301      	adds	r3, #1
  407edc:	4606      	mov	r6, r0
  407ede:	460f      	mov	r7, r1
  407ee0:	d02e      	beq.n	407f40 <acos+0x7c>
  407ee2:	4622      	mov	r2, r4
  407ee4:	462b      	mov	r3, r5
  407ee6:	4620      	mov	r0, r4
  407ee8:	4629      	mov	r1, r5
  407eea:	f002 ffd9 	bl	40aea0 <__aeabi_dcmpun>
  407eee:	4681      	mov	r9, r0
  407ef0:	bb30      	cbnz	r0, 407f40 <acos+0x7c>
  407ef2:	4620      	mov	r0, r4
  407ef4:	4629      	mov	r1, r5
  407ef6:	f002 fa65 	bl	40a3c4 <fabs>
  407efa:	2200      	movs	r2, #0
  407efc:	4b19      	ldr	r3, [pc, #100]	; (407f64 <acos+0xa0>)
  407efe:	f002 ffc5 	bl	40ae8c <__aeabi_dcmpgt>
  407f02:	b1e8      	cbz	r0, 407f40 <acos+0x7c>
  407f04:	4b18      	ldr	r3, [pc, #96]	; (407f68 <acos+0xa4>)
  407f06:	4819      	ldr	r0, [pc, #100]	; (407f6c <acos+0xa8>)
  407f08:	f8cd 9020 	str.w	r9, [sp, #32]
  407f0c:	2201      	movs	r2, #1
  407f0e:	e88d 000c 	stmia.w	sp, {r2, r3}
  407f12:	e9cd 4504 	strd	r4, r5, [sp, #16]
  407f16:	e9cd 4502 	strd	r4, r5, [sp, #8]
  407f1a:	f002 fae3 	bl	40a4e4 <nan>
  407f1e:	f998 3000 	ldrsb.w	r3, [r8]
  407f22:	2b02      	cmp	r3, #2
  407f24:	e9cd 0106 	strd	r0, r1, [sp, #24]
  407f28:	d00f      	beq.n	407f4a <acos+0x86>
  407f2a:	4668      	mov	r0, sp
  407f2c:	f002 fad8 	bl	40a4e0 <matherr>
  407f30:	b158      	cbz	r0, 407f4a <acos+0x86>
  407f32:	9b08      	ldr	r3, [sp, #32]
  407f34:	b983      	cbnz	r3, 407f58 <acos+0x94>
  407f36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  407f3a:	b00b      	add	sp, #44	; 0x2c
  407f3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407f40:	4630      	mov	r0, r6
  407f42:	4639      	mov	r1, r7
  407f44:	b00b      	add	sp, #44	; 0x2c
  407f46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407f4a:	f003 fcbd 	bl	40b8c8 <__errno>
  407f4e:	2321      	movs	r3, #33	; 0x21
  407f50:	6003      	str	r3, [r0, #0]
  407f52:	9b08      	ldr	r3, [sp, #32]
  407f54:	2b00      	cmp	r3, #0
  407f56:	d0ee      	beq.n	407f36 <acos+0x72>
  407f58:	f003 fcb6 	bl	40b8c8 <__errno>
  407f5c:	9b08      	ldr	r3, [sp, #32]
  407f5e:	6003      	str	r3, [r0, #0]
  407f60:	e7e9      	b.n	407f36 <acos+0x72>
  407f62:	bf00      	nop
  407f64:	3ff00000 	.word	0x3ff00000
  407f68:	0040bd24 	.word	0x0040bd24
  407f6c:	0040bd30 	.word	0x0040bd30
  407f70:	20000044 	.word	0x20000044

00407f74 <asin>:
  407f74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407f78:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 408020 <asin+0xac>
  407f7c:	b08b      	sub	sp, #44	; 0x2c
  407f7e:	4604      	mov	r4, r0
  407f80:	460d      	mov	r5, r1
  407f82:	f000 fb01 	bl	408588 <__ieee754_asin>
  407f86:	f998 3000 	ldrsb.w	r3, [r8]
  407f8a:	3301      	adds	r3, #1
  407f8c:	4606      	mov	r6, r0
  407f8e:	460f      	mov	r7, r1
  407f90:	d02e      	beq.n	407ff0 <asin+0x7c>
  407f92:	4622      	mov	r2, r4
  407f94:	462b      	mov	r3, r5
  407f96:	4620      	mov	r0, r4
  407f98:	4629      	mov	r1, r5
  407f9a:	f002 ff81 	bl	40aea0 <__aeabi_dcmpun>
  407f9e:	4681      	mov	r9, r0
  407fa0:	bb30      	cbnz	r0, 407ff0 <asin+0x7c>
  407fa2:	4620      	mov	r0, r4
  407fa4:	4629      	mov	r1, r5
  407fa6:	f002 fa0d 	bl	40a3c4 <fabs>
  407faa:	2200      	movs	r2, #0
  407fac:	4b19      	ldr	r3, [pc, #100]	; (408014 <asin+0xa0>)
  407fae:	f002 ff6d 	bl	40ae8c <__aeabi_dcmpgt>
  407fb2:	b1e8      	cbz	r0, 407ff0 <asin+0x7c>
  407fb4:	4b18      	ldr	r3, [pc, #96]	; (408018 <asin+0xa4>)
  407fb6:	4819      	ldr	r0, [pc, #100]	; (40801c <asin+0xa8>)
  407fb8:	f8cd 9020 	str.w	r9, [sp, #32]
  407fbc:	2201      	movs	r2, #1
  407fbe:	e88d 000c 	stmia.w	sp, {r2, r3}
  407fc2:	e9cd 4504 	strd	r4, r5, [sp, #16]
  407fc6:	e9cd 4502 	strd	r4, r5, [sp, #8]
  407fca:	f002 fa8b 	bl	40a4e4 <nan>
  407fce:	f998 3000 	ldrsb.w	r3, [r8]
  407fd2:	2b02      	cmp	r3, #2
  407fd4:	e9cd 0106 	strd	r0, r1, [sp, #24]
  407fd8:	d00f      	beq.n	407ffa <asin+0x86>
  407fda:	4668      	mov	r0, sp
  407fdc:	f002 fa80 	bl	40a4e0 <matherr>
  407fe0:	b158      	cbz	r0, 407ffa <asin+0x86>
  407fe2:	9b08      	ldr	r3, [sp, #32]
  407fe4:	b983      	cbnz	r3, 408008 <asin+0x94>
  407fe6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  407fea:	b00b      	add	sp, #44	; 0x2c
  407fec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407ff0:	4630      	mov	r0, r6
  407ff2:	4639      	mov	r1, r7
  407ff4:	b00b      	add	sp, #44	; 0x2c
  407ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407ffa:	f003 fc65 	bl	40b8c8 <__errno>
  407ffe:	2321      	movs	r3, #33	; 0x21
  408000:	6003      	str	r3, [r0, #0]
  408002:	9b08      	ldr	r3, [sp, #32]
  408004:	2b00      	cmp	r3, #0
  408006:	d0ee      	beq.n	407fe6 <asin+0x72>
  408008:	f003 fc5e 	bl	40b8c8 <__errno>
  40800c:	9b08      	ldr	r3, [sp, #32]
  40800e:	6003      	str	r3, [r0, #0]
  408010:	e7e9      	b.n	407fe6 <asin+0x72>
  408012:	bf00      	nop
  408014:	3ff00000 	.word	0x3ff00000
  408018:	0040bd2c 	.word	0x0040bd2c
  40801c:	0040bd30 	.word	0x0040bd30
  408020:	20000044 	.word	0x20000044

00408024 <atan2>:
  408024:	f000 bce0 	b.w	4089e8 <__ieee754_atan2>

00408028 <sqrt>:
  408028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40802c:	b08b      	sub	sp, #44	; 0x2c
  40802e:	4604      	mov	r4, r0
  408030:	460d      	mov	r5, r1
  408032:	f000 ffc7 	bl	408fc4 <__ieee754_sqrt>
  408036:	4b28      	ldr	r3, [pc, #160]	; (4080d8 <sqrt+0xb0>)
  408038:	f993 a000 	ldrsb.w	sl, [r3]
  40803c:	f1ba 3fff 	cmp.w	sl, #4294967295
  408040:	4606      	mov	r6, r0
  408042:	460f      	mov	r7, r1
  408044:	d012      	beq.n	40806c <sqrt+0x44>
  408046:	4622      	mov	r2, r4
  408048:	462b      	mov	r3, r5
  40804a:	4620      	mov	r0, r4
  40804c:	4629      	mov	r1, r5
  40804e:	f002 ff27 	bl	40aea0 <__aeabi_dcmpun>
  408052:	4683      	mov	fp, r0
  408054:	b950      	cbnz	r0, 40806c <sqrt+0x44>
  408056:	f04f 0800 	mov.w	r8, #0
  40805a:	f04f 0900 	mov.w	r9, #0
  40805e:	4642      	mov	r2, r8
  408060:	464b      	mov	r3, r9
  408062:	4620      	mov	r0, r4
  408064:	4629      	mov	r1, r5
  408066:	f002 fef3 	bl	40ae50 <__aeabi_dcmplt>
  40806a:	b920      	cbnz	r0, 408076 <sqrt+0x4e>
  40806c:	4630      	mov	r0, r6
  40806e:	4639      	mov	r1, r7
  408070:	b00b      	add	sp, #44	; 0x2c
  408072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408076:	4b19      	ldr	r3, [pc, #100]	; (4080dc <sqrt+0xb4>)
  408078:	f8cd b020 	str.w	fp, [sp, #32]
  40807c:	2201      	movs	r2, #1
  40807e:	e9cd 4504 	strd	r4, r5, [sp, #16]
  408082:	e9cd 4502 	strd	r4, r5, [sp, #8]
  408086:	e88d 000c 	stmia.w	sp, {r2, r3}
  40808a:	f1ba 0f00 	cmp.w	sl, #0
  40808e:	d015      	beq.n	4080bc <sqrt+0x94>
  408090:	4642      	mov	r2, r8
  408092:	464b      	mov	r3, r9
  408094:	4640      	mov	r0, r8
  408096:	4649      	mov	r1, r9
  408098:	f002 fd92 	bl	40abc0 <__aeabi_ddiv>
  40809c:	f1ba 0f02 	cmp.w	sl, #2
  4080a0:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4080a4:	d10c      	bne.n	4080c0 <sqrt+0x98>
  4080a6:	f003 fc0f 	bl	40b8c8 <__errno>
  4080aa:	2321      	movs	r3, #33	; 0x21
  4080ac:	6003      	str	r3, [r0, #0]
  4080ae:	9b08      	ldr	r3, [sp, #32]
  4080b0:	b963      	cbnz	r3, 4080cc <sqrt+0xa4>
  4080b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4080b6:	b00b      	add	sp, #44	; 0x2c
  4080b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4080bc:	e9cd 8906 	strd	r8, r9, [sp, #24]
  4080c0:	4668      	mov	r0, sp
  4080c2:	f002 fa0d 	bl	40a4e0 <matherr>
  4080c6:	2800      	cmp	r0, #0
  4080c8:	d1f1      	bne.n	4080ae <sqrt+0x86>
  4080ca:	e7ec      	b.n	4080a6 <sqrt+0x7e>
  4080cc:	f003 fbfc 	bl	40b8c8 <__errno>
  4080d0:	9b08      	ldr	r3, [sp, #32]
  4080d2:	6003      	str	r3, [r0, #0]
  4080d4:	e7ed      	b.n	4080b2 <sqrt+0x8a>
  4080d6:	bf00      	nop
  4080d8:	20000044 	.word	0x20000044
  4080dc:	0040bd34 	.word	0x0040bd34

004080e0 <__ieee754_acos>:
  4080e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4080e4:	4ec4      	ldr	r6, [pc, #784]	; (4083f8 <__ieee754_acos+0x318>)
  4080e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  4080ea:	42b3      	cmp	r3, r6
  4080ec:	460c      	mov	r4, r1
  4080ee:	4605      	mov	r5, r0
  4080f0:	dd0d      	ble.n	40810e <__ieee754_acos+0x2e>
  4080f2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
  4080f6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
  4080fa:	4303      	orrs	r3, r0
  4080fc:	f040 80b9 	bne.w	408272 <__ieee754_acos+0x192>
  408100:	2900      	cmp	r1, #0
  408102:	f340 8140 	ble.w	408386 <__ieee754_acos+0x2a6>
  408106:	2000      	movs	r0, #0
  408108:	2100      	movs	r1, #0
  40810a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40810e:	4ebb      	ldr	r6, [pc, #748]	; (4083fc <__ieee754_acos+0x31c>)
  408110:	42b3      	cmp	r3, r6
  408112:	f340 80a6 	ble.w	408262 <__ieee754_acos+0x182>
  408116:	2900      	cmp	r1, #0
  408118:	f2c0 8178 	blt.w	40840c <__ieee754_acos+0x32c>
  40811c:	4602      	mov	r2, r0
  40811e:	460b      	mov	r3, r1
  408120:	2000      	movs	r0, #0
  408122:	49b7      	ldr	r1, [pc, #732]	; (408400 <__ieee754_acos+0x320>)
  408124:	f002 fa6e 	bl	40a604 <__aeabi_dsub>
  408128:	2200      	movs	r2, #0
  40812a:	4bb6      	ldr	r3, [pc, #728]	; (408404 <__ieee754_acos+0x324>)
  40812c:	f002 fc1e 	bl	40a96c <__aeabi_dmul>
  408130:	4604      	mov	r4, r0
  408132:	460d      	mov	r5, r1
  408134:	f000 ff46 	bl	408fc4 <__ieee754_sqrt>
  408138:	a395      	add	r3, pc, #596	; (adr r3, 408390 <__ieee754_acos+0x2b0>)
  40813a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40813e:	4689      	mov	r9, r1
  408140:	4680      	mov	r8, r0
  408142:	4629      	mov	r1, r5
  408144:	4620      	mov	r0, r4
  408146:	f002 fc11 	bl	40a96c <__aeabi_dmul>
  40814a:	a393      	add	r3, pc, #588	; (adr r3, 408398 <__ieee754_acos+0x2b8>)
  40814c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408150:	f002 fa5a 	bl	40a608 <__adddf3>
  408154:	4622      	mov	r2, r4
  408156:	462b      	mov	r3, r5
  408158:	f002 fc08 	bl	40a96c <__aeabi_dmul>
  40815c:	a390      	add	r3, pc, #576	; (adr r3, 4083a0 <__ieee754_acos+0x2c0>)
  40815e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408162:	f002 fa4f 	bl	40a604 <__aeabi_dsub>
  408166:	4622      	mov	r2, r4
  408168:	462b      	mov	r3, r5
  40816a:	f002 fbff 	bl	40a96c <__aeabi_dmul>
  40816e:	a38e      	add	r3, pc, #568	; (adr r3, 4083a8 <__ieee754_acos+0x2c8>)
  408170:	e9d3 2300 	ldrd	r2, r3, [r3]
  408174:	f002 fa48 	bl	40a608 <__adddf3>
  408178:	4622      	mov	r2, r4
  40817a:	462b      	mov	r3, r5
  40817c:	f002 fbf6 	bl	40a96c <__aeabi_dmul>
  408180:	a38b      	add	r3, pc, #556	; (adr r3, 4083b0 <__ieee754_acos+0x2d0>)
  408182:	e9d3 2300 	ldrd	r2, r3, [r3]
  408186:	f002 fa3d 	bl	40a604 <__aeabi_dsub>
  40818a:	4622      	mov	r2, r4
  40818c:	462b      	mov	r3, r5
  40818e:	f002 fbed 	bl	40a96c <__aeabi_dmul>
  408192:	a389      	add	r3, pc, #548	; (adr r3, 4083b8 <__ieee754_acos+0x2d8>)
  408194:	e9d3 2300 	ldrd	r2, r3, [r3]
  408198:	f002 fa36 	bl	40a608 <__adddf3>
  40819c:	4622      	mov	r2, r4
  40819e:	462b      	mov	r3, r5
  4081a0:	f002 fbe4 	bl	40a96c <__aeabi_dmul>
  4081a4:	a386      	add	r3, pc, #536	; (adr r3, 4083c0 <__ieee754_acos+0x2e0>)
  4081a6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4081aa:	4682      	mov	sl, r0
  4081ac:	468b      	mov	fp, r1
  4081ae:	4620      	mov	r0, r4
  4081b0:	4629      	mov	r1, r5
  4081b2:	f002 fbdb 	bl	40a96c <__aeabi_dmul>
  4081b6:	a384      	add	r3, pc, #528	; (adr r3, 4083c8 <__ieee754_acos+0x2e8>)
  4081b8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4081bc:	f002 fa22 	bl	40a604 <__aeabi_dsub>
  4081c0:	4622      	mov	r2, r4
  4081c2:	462b      	mov	r3, r5
  4081c4:	f002 fbd2 	bl	40a96c <__aeabi_dmul>
  4081c8:	a381      	add	r3, pc, #516	; (adr r3, 4083d0 <__ieee754_acos+0x2f0>)
  4081ca:	e9d3 2300 	ldrd	r2, r3, [r3]
  4081ce:	f002 fa1b 	bl	40a608 <__adddf3>
  4081d2:	4622      	mov	r2, r4
  4081d4:	462b      	mov	r3, r5
  4081d6:	f002 fbc9 	bl	40a96c <__aeabi_dmul>
  4081da:	a37f      	add	r3, pc, #508	; (adr r3, 4083d8 <__ieee754_acos+0x2f8>)
  4081dc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4081e0:	f002 fa10 	bl	40a604 <__aeabi_dsub>
  4081e4:	4622      	mov	r2, r4
  4081e6:	462b      	mov	r3, r5
  4081e8:	f002 fbc0 	bl	40a96c <__aeabi_dmul>
  4081ec:	2200      	movs	r2, #0
  4081ee:	4b84      	ldr	r3, [pc, #528]	; (408400 <__ieee754_acos+0x320>)
  4081f0:	f002 fa0a 	bl	40a608 <__adddf3>
  4081f4:	4602      	mov	r2, r0
  4081f6:	460b      	mov	r3, r1
  4081f8:	4650      	mov	r0, sl
  4081fa:	4659      	mov	r1, fp
  4081fc:	f002 fce0 	bl	40abc0 <__aeabi_ddiv>
  408200:	4642      	mov	r2, r8
  408202:	464b      	mov	r3, r9
  408204:	f002 fbb2 	bl	40a96c <__aeabi_dmul>
  408208:	2600      	movs	r6, #0
  40820a:	4682      	mov	sl, r0
  40820c:	468b      	mov	fp, r1
  40820e:	4632      	mov	r2, r6
  408210:	464b      	mov	r3, r9
  408212:	4630      	mov	r0, r6
  408214:	4649      	mov	r1, r9
  408216:	f002 fba9 	bl	40a96c <__aeabi_dmul>
  40821a:	4602      	mov	r2, r0
  40821c:	460b      	mov	r3, r1
  40821e:	4620      	mov	r0, r4
  408220:	4629      	mov	r1, r5
  408222:	f002 f9ef 	bl	40a604 <__aeabi_dsub>
  408226:	4632      	mov	r2, r6
  408228:	4604      	mov	r4, r0
  40822a:	460d      	mov	r5, r1
  40822c:	464b      	mov	r3, r9
  40822e:	4640      	mov	r0, r8
  408230:	4649      	mov	r1, r9
  408232:	f002 f9e9 	bl	40a608 <__adddf3>
  408236:	4602      	mov	r2, r0
  408238:	460b      	mov	r3, r1
  40823a:	4620      	mov	r0, r4
  40823c:	4629      	mov	r1, r5
  40823e:	f002 fcbf 	bl	40abc0 <__aeabi_ddiv>
  408242:	4602      	mov	r2, r0
  408244:	460b      	mov	r3, r1
  408246:	4650      	mov	r0, sl
  408248:	4659      	mov	r1, fp
  40824a:	f002 f9dd 	bl	40a608 <__adddf3>
  40824e:	4632      	mov	r2, r6
  408250:	464b      	mov	r3, r9
  408252:	f002 f9d9 	bl	40a608 <__adddf3>
  408256:	4602      	mov	r2, r0
  408258:	460b      	mov	r3, r1
  40825a:	f002 f9d5 	bl	40a608 <__adddf3>
  40825e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408262:	4a69      	ldr	r2, [pc, #420]	; (408408 <__ieee754_acos+0x328>)
  408264:	4293      	cmp	r3, r2
  408266:	dc0e      	bgt.n	408286 <__ieee754_acos+0x1a6>
  408268:	a15d      	add	r1, pc, #372	; (adr r1, 4083e0 <__ieee754_acos+0x300>)
  40826a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40826e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408272:	4602      	mov	r2, r0
  408274:	460b      	mov	r3, r1
  408276:	f002 f9c5 	bl	40a604 <__aeabi_dsub>
  40827a:	4602      	mov	r2, r0
  40827c:	460b      	mov	r3, r1
  40827e:	f002 fc9f 	bl	40abc0 <__aeabi_ddiv>
  408282:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408286:	4602      	mov	r2, r0
  408288:	460b      	mov	r3, r1
  40828a:	f002 fb6f 	bl	40a96c <__aeabi_dmul>
  40828e:	a340      	add	r3, pc, #256	; (adr r3, 408390 <__ieee754_acos+0x2b0>)
  408290:	e9d3 2300 	ldrd	r2, r3, [r3]
  408294:	4606      	mov	r6, r0
  408296:	460f      	mov	r7, r1
  408298:	f002 fb68 	bl	40a96c <__aeabi_dmul>
  40829c:	a33e      	add	r3, pc, #248	; (adr r3, 408398 <__ieee754_acos+0x2b8>)
  40829e:	e9d3 2300 	ldrd	r2, r3, [r3]
  4082a2:	f002 f9b1 	bl	40a608 <__adddf3>
  4082a6:	4632      	mov	r2, r6
  4082a8:	463b      	mov	r3, r7
  4082aa:	f002 fb5f 	bl	40a96c <__aeabi_dmul>
  4082ae:	a33c      	add	r3, pc, #240	; (adr r3, 4083a0 <__ieee754_acos+0x2c0>)
  4082b0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4082b4:	f002 f9a6 	bl	40a604 <__aeabi_dsub>
  4082b8:	4632      	mov	r2, r6
  4082ba:	463b      	mov	r3, r7
  4082bc:	f002 fb56 	bl	40a96c <__aeabi_dmul>
  4082c0:	a339      	add	r3, pc, #228	; (adr r3, 4083a8 <__ieee754_acos+0x2c8>)
  4082c2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4082c6:	f002 f99f 	bl	40a608 <__adddf3>
  4082ca:	4632      	mov	r2, r6
  4082cc:	463b      	mov	r3, r7
  4082ce:	f002 fb4d 	bl	40a96c <__aeabi_dmul>
  4082d2:	a337      	add	r3, pc, #220	; (adr r3, 4083b0 <__ieee754_acos+0x2d0>)
  4082d4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4082d8:	f002 f994 	bl	40a604 <__aeabi_dsub>
  4082dc:	4632      	mov	r2, r6
  4082de:	463b      	mov	r3, r7
  4082e0:	f002 fb44 	bl	40a96c <__aeabi_dmul>
  4082e4:	a334      	add	r3, pc, #208	; (adr r3, 4083b8 <__ieee754_acos+0x2d8>)
  4082e6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4082ea:	f002 f98d 	bl	40a608 <__adddf3>
  4082ee:	4632      	mov	r2, r6
  4082f0:	463b      	mov	r3, r7
  4082f2:	f002 fb3b 	bl	40a96c <__aeabi_dmul>
  4082f6:	a332      	add	r3, pc, #200	; (adr r3, 4083c0 <__ieee754_acos+0x2e0>)
  4082f8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4082fc:	4680      	mov	r8, r0
  4082fe:	4689      	mov	r9, r1
  408300:	4630      	mov	r0, r6
  408302:	4639      	mov	r1, r7
  408304:	f002 fb32 	bl	40a96c <__aeabi_dmul>
  408308:	a32f      	add	r3, pc, #188	; (adr r3, 4083c8 <__ieee754_acos+0x2e8>)
  40830a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40830e:	f002 f979 	bl	40a604 <__aeabi_dsub>
  408312:	4632      	mov	r2, r6
  408314:	463b      	mov	r3, r7
  408316:	f002 fb29 	bl	40a96c <__aeabi_dmul>
  40831a:	a32d      	add	r3, pc, #180	; (adr r3, 4083d0 <__ieee754_acos+0x2f0>)
  40831c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408320:	f002 f972 	bl	40a608 <__adddf3>
  408324:	4632      	mov	r2, r6
  408326:	463b      	mov	r3, r7
  408328:	f002 fb20 	bl	40a96c <__aeabi_dmul>
  40832c:	a32a      	add	r3, pc, #168	; (adr r3, 4083d8 <__ieee754_acos+0x2f8>)
  40832e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408332:	f002 f967 	bl	40a604 <__aeabi_dsub>
  408336:	4632      	mov	r2, r6
  408338:	463b      	mov	r3, r7
  40833a:	f002 fb17 	bl	40a96c <__aeabi_dmul>
  40833e:	2200      	movs	r2, #0
  408340:	4b2f      	ldr	r3, [pc, #188]	; (408400 <__ieee754_acos+0x320>)
  408342:	f002 f961 	bl	40a608 <__adddf3>
  408346:	4602      	mov	r2, r0
  408348:	460b      	mov	r3, r1
  40834a:	4640      	mov	r0, r8
  40834c:	4649      	mov	r1, r9
  40834e:	f002 fc37 	bl	40abc0 <__aeabi_ddiv>
  408352:	462a      	mov	r2, r5
  408354:	4623      	mov	r3, r4
  408356:	f002 fb09 	bl	40a96c <__aeabi_dmul>
  40835a:	4602      	mov	r2, r0
  40835c:	460b      	mov	r3, r1
  40835e:	a122      	add	r1, pc, #136	; (adr r1, 4083e8 <__ieee754_acos+0x308>)
  408360:	e9d1 0100 	ldrd	r0, r1, [r1]
  408364:	f002 f94e 	bl	40a604 <__aeabi_dsub>
  408368:	4602      	mov	r2, r0
  40836a:	460b      	mov	r3, r1
  40836c:	4628      	mov	r0, r5
  40836e:	4621      	mov	r1, r4
  408370:	f002 f948 	bl	40a604 <__aeabi_dsub>
  408374:	4602      	mov	r2, r0
  408376:	460b      	mov	r3, r1
  408378:	a119      	add	r1, pc, #100	; (adr r1, 4083e0 <__ieee754_acos+0x300>)
  40837a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40837e:	f002 f941 	bl	40a604 <__aeabi_dsub>
  408382:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408386:	a11a      	add	r1, pc, #104	; (adr r1, 4083f0 <__ieee754_acos+0x310>)
  408388:	e9d1 0100 	ldrd	r0, r1, [r1]
  40838c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408390:	0dfdf709 	.word	0x0dfdf709
  408394:	3f023de1 	.word	0x3f023de1
  408398:	7501b288 	.word	0x7501b288
  40839c:	3f49efe0 	.word	0x3f49efe0
  4083a0:	b5688f3b 	.word	0xb5688f3b
  4083a4:	3fa48228 	.word	0x3fa48228
  4083a8:	0e884455 	.word	0x0e884455
  4083ac:	3fc9c155 	.word	0x3fc9c155
  4083b0:	03eb6f7d 	.word	0x03eb6f7d
  4083b4:	3fd4d612 	.word	0x3fd4d612
  4083b8:	55555555 	.word	0x55555555
  4083bc:	3fc55555 	.word	0x3fc55555
  4083c0:	b12e9282 	.word	0xb12e9282
  4083c4:	3fb3b8c5 	.word	0x3fb3b8c5
  4083c8:	1b8d0159 	.word	0x1b8d0159
  4083cc:	3fe6066c 	.word	0x3fe6066c
  4083d0:	9c598ac8 	.word	0x9c598ac8
  4083d4:	40002ae5 	.word	0x40002ae5
  4083d8:	1c8a2d4b 	.word	0x1c8a2d4b
  4083dc:	40033a27 	.word	0x40033a27
  4083e0:	54442d18 	.word	0x54442d18
  4083e4:	3ff921fb 	.word	0x3ff921fb
  4083e8:	33145c07 	.word	0x33145c07
  4083ec:	3c91a626 	.word	0x3c91a626
  4083f0:	54442d18 	.word	0x54442d18
  4083f4:	400921fb 	.word	0x400921fb
  4083f8:	3fefffff 	.word	0x3fefffff
  4083fc:	3fdfffff 	.word	0x3fdfffff
  408400:	3ff00000 	.word	0x3ff00000
  408404:	3fe00000 	.word	0x3fe00000
  408408:	3c600000 	.word	0x3c600000
  40840c:	2200      	movs	r2, #0
  40840e:	4b5c      	ldr	r3, [pc, #368]	; (408580 <__ieee754_acos+0x4a0>)
  408410:	f002 f8fa 	bl	40a608 <__adddf3>
  408414:	2200      	movs	r2, #0
  408416:	4b5b      	ldr	r3, [pc, #364]	; (408584 <__ieee754_acos+0x4a4>)
  408418:	f002 faa8 	bl	40a96c <__aeabi_dmul>
  40841c:	a340      	add	r3, pc, #256	; (adr r3, 408520 <__ieee754_acos+0x440>)
  40841e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408422:	4604      	mov	r4, r0
  408424:	460d      	mov	r5, r1
  408426:	f002 faa1 	bl	40a96c <__aeabi_dmul>
  40842a:	a33f      	add	r3, pc, #252	; (adr r3, 408528 <__ieee754_acos+0x448>)
  40842c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408430:	f002 f8ea 	bl	40a608 <__adddf3>
  408434:	4622      	mov	r2, r4
  408436:	462b      	mov	r3, r5
  408438:	f002 fa98 	bl	40a96c <__aeabi_dmul>
  40843c:	a33c      	add	r3, pc, #240	; (adr r3, 408530 <__ieee754_acos+0x450>)
  40843e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408442:	f002 f8df 	bl	40a604 <__aeabi_dsub>
  408446:	4622      	mov	r2, r4
  408448:	462b      	mov	r3, r5
  40844a:	f002 fa8f 	bl	40a96c <__aeabi_dmul>
  40844e:	a33a      	add	r3, pc, #232	; (adr r3, 408538 <__ieee754_acos+0x458>)
  408450:	e9d3 2300 	ldrd	r2, r3, [r3]
  408454:	f002 f8d8 	bl	40a608 <__adddf3>
  408458:	4622      	mov	r2, r4
  40845a:	462b      	mov	r3, r5
  40845c:	f002 fa86 	bl	40a96c <__aeabi_dmul>
  408460:	a337      	add	r3, pc, #220	; (adr r3, 408540 <__ieee754_acos+0x460>)
  408462:	e9d3 2300 	ldrd	r2, r3, [r3]
  408466:	f002 f8cd 	bl	40a604 <__aeabi_dsub>
  40846a:	4622      	mov	r2, r4
  40846c:	462b      	mov	r3, r5
  40846e:	f002 fa7d 	bl	40a96c <__aeabi_dmul>
  408472:	a335      	add	r3, pc, #212	; (adr r3, 408548 <__ieee754_acos+0x468>)
  408474:	e9d3 2300 	ldrd	r2, r3, [r3]
  408478:	f002 f8c6 	bl	40a608 <__adddf3>
  40847c:	4622      	mov	r2, r4
  40847e:	462b      	mov	r3, r5
  408480:	f002 fa74 	bl	40a96c <__aeabi_dmul>
  408484:	4680      	mov	r8, r0
  408486:	4689      	mov	r9, r1
  408488:	4620      	mov	r0, r4
  40848a:	4629      	mov	r1, r5
  40848c:	f000 fd9a 	bl	408fc4 <__ieee754_sqrt>
  408490:	a32f      	add	r3, pc, #188	; (adr r3, 408550 <__ieee754_acos+0x470>)
  408492:	e9d3 2300 	ldrd	r2, r3, [r3]
  408496:	4606      	mov	r6, r0
  408498:	460f      	mov	r7, r1
  40849a:	4620      	mov	r0, r4
  40849c:	4629      	mov	r1, r5
  40849e:	f002 fa65 	bl	40a96c <__aeabi_dmul>
  4084a2:	a32d      	add	r3, pc, #180	; (adr r3, 408558 <__ieee754_acos+0x478>)
  4084a4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4084a8:	f002 f8ac 	bl	40a604 <__aeabi_dsub>
  4084ac:	4622      	mov	r2, r4
  4084ae:	462b      	mov	r3, r5
  4084b0:	f002 fa5c 	bl	40a96c <__aeabi_dmul>
  4084b4:	a32a      	add	r3, pc, #168	; (adr r3, 408560 <__ieee754_acos+0x480>)
  4084b6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4084ba:	f002 f8a5 	bl	40a608 <__adddf3>
  4084be:	4622      	mov	r2, r4
  4084c0:	462b      	mov	r3, r5
  4084c2:	f002 fa53 	bl	40a96c <__aeabi_dmul>
  4084c6:	a328      	add	r3, pc, #160	; (adr r3, 408568 <__ieee754_acos+0x488>)
  4084c8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4084cc:	f002 f89a 	bl	40a604 <__aeabi_dsub>
  4084d0:	4622      	mov	r2, r4
  4084d2:	462b      	mov	r3, r5
  4084d4:	f002 fa4a 	bl	40a96c <__aeabi_dmul>
  4084d8:	2200      	movs	r2, #0
  4084da:	4b29      	ldr	r3, [pc, #164]	; (408580 <__ieee754_acos+0x4a0>)
  4084dc:	f002 f894 	bl	40a608 <__adddf3>
  4084e0:	4602      	mov	r2, r0
  4084e2:	460b      	mov	r3, r1
  4084e4:	4640      	mov	r0, r8
  4084e6:	4649      	mov	r1, r9
  4084e8:	f002 fb6a 	bl	40abc0 <__aeabi_ddiv>
  4084ec:	4632      	mov	r2, r6
  4084ee:	463b      	mov	r3, r7
  4084f0:	f002 fa3c 	bl	40a96c <__aeabi_dmul>
  4084f4:	a31e      	add	r3, pc, #120	; (adr r3, 408570 <__ieee754_acos+0x490>)
  4084f6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4084fa:	f002 f883 	bl	40a604 <__aeabi_dsub>
  4084fe:	4632      	mov	r2, r6
  408500:	463b      	mov	r3, r7
  408502:	f002 f881 	bl	40a608 <__adddf3>
  408506:	4602      	mov	r2, r0
  408508:	460b      	mov	r3, r1
  40850a:	f002 f87d 	bl	40a608 <__adddf3>
  40850e:	4602      	mov	r2, r0
  408510:	460b      	mov	r3, r1
  408512:	a119      	add	r1, pc, #100	; (adr r1, 408578 <__ieee754_acos+0x498>)
  408514:	e9d1 0100 	ldrd	r0, r1, [r1]
  408518:	f002 f874 	bl	40a604 <__aeabi_dsub>
  40851c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408520:	0dfdf709 	.word	0x0dfdf709
  408524:	3f023de1 	.word	0x3f023de1
  408528:	7501b288 	.word	0x7501b288
  40852c:	3f49efe0 	.word	0x3f49efe0
  408530:	b5688f3b 	.word	0xb5688f3b
  408534:	3fa48228 	.word	0x3fa48228
  408538:	0e884455 	.word	0x0e884455
  40853c:	3fc9c155 	.word	0x3fc9c155
  408540:	03eb6f7d 	.word	0x03eb6f7d
  408544:	3fd4d612 	.word	0x3fd4d612
  408548:	55555555 	.word	0x55555555
  40854c:	3fc55555 	.word	0x3fc55555
  408550:	b12e9282 	.word	0xb12e9282
  408554:	3fb3b8c5 	.word	0x3fb3b8c5
  408558:	1b8d0159 	.word	0x1b8d0159
  40855c:	3fe6066c 	.word	0x3fe6066c
  408560:	9c598ac8 	.word	0x9c598ac8
  408564:	40002ae5 	.word	0x40002ae5
  408568:	1c8a2d4b 	.word	0x1c8a2d4b
  40856c:	40033a27 	.word	0x40033a27
  408570:	33145c07 	.word	0x33145c07
  408574:	3c91a626 	.word	0x3c91a626
  408578:	54442d18 	.word	0x54442d18
  40857c:	400921fb 	.word	0x400921fb
  408580:	3ff00000 	.word	0x3ff00000
  408584:	3fe00000 	.word	0x3fe00000

00408588 <__ieee754_asin>:
  408588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40858c:	4bc0      	ldr	r3, [pc, #768]	; (408890 <__ieee754_asin+0x308>)
  40858e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
  408592:	4598      	cmp	r8, r3
  408594:	b084      	sub	sp, #16
  408596:	460d      	mov	r5, r1
  408598:	4604      	mov	r4, r0
  40859a:	dd14      	ble.n	4085c6 <__ieee754_asin+0x3e>
  40859c:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
  4085a0:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
  4085a4:	4603      	mov	r3, r0
  4085a6:	ea58 0303 	orrs.w	r3, r8, r3
  4085aa:	d023      	beq.n	4085f4 <__ieee754_asin+0x6c>
  4085ac:	4602      	mov	r2, r0
  4085ae:	460b      	mov	r3, r1
  4085b0:	f002 f828 	bl	40a604 <__aeabi_dsub>
  4085b4:	4602      	mov	r2, r0
  4085b6:	460b      	mov	r3, r1
  4085b8:	f002 fb02 	bl	40abc0 <__aeabi_ddiv>
  4085bc:	4604      	mov	r4, r0
  4085be:	4620      	mov	r0, r4
  4085c0:	b004      	add	sp, #16
  4085c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4085c6:	4bb3      	ldr	r3, [pc, #716]	; (408894 <__ieee754_asin+0x30c>)
  4085c8:	4598      	cmp	r8, r3
  4085ca:	468a      	mov	sl, r1
  4085cc:	dc2b      	bgt.n	408626 <__ieee754_asin+0x9e>
  4085ce:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
  4085d2:	f280 8167 	bge.w	4088a4 <__ieee754_asin+0x31c>
  4085d6:	a392      	add	r3, pc, #584	; (adr r3, 408820 <__ieee754_asin+0x298>)
  4085d8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085dc:	f002 f814 	bl	40a608 <__adddf3>
  4085e0:	2200      	movs	r2, #0
  4085e2:	4bad      	ldr	r3, [pc, #692]	; (408898 <__ieee754_asin+0x310>)
  4085e4:	f002 fc52 	bl	40ae8c <__aeabi_dcmpgt>
  4085e8:	b1e8      	cbz	r0, 408626 <__ieee754_asin+0x9e>
  4085ea:	4629      	mov	r1, r5
  4085ec:	4620      	mov	r0, r4
  4085ee:	b004      	add	sp, #16
  4085f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4085f4:	a38c      	add	r3, pc, #560	; (adr r3, 408828 <__ieee754_asin+0x2a0>)
  4085f6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085fa:	f002 f9b7 	bl	40a96c <__aeabi_dmul>
  4085fe:	a38c      	add	r3, pc, #560	; (adr r3, 408830 <__ieee754_asin+0x2a8>)
  408600:	e9d3 2300 	ldrd	r2, r3, [r3]
  408604:	4606      	mov	r6, r0
  408606:	460f      	mov	r7, r1
  408608:	4620      	mov	r0, r4
  40860a:	4629      	mov	r1, r5
  40860c:	f002 f9ae 	bl	40a96c <__aeabi_dmul>
  408610:	4602      	mov	r2, r0
  408612:	460b      	mov	r3, r1
  408614:	4630      	mov	r0, r6
  408616:	4639      	mov	r1, r7
  408618:	f001 fff6 	bl	40a608 <__adddf3>
  40861c:	4604      	mov	r4, r0
  40861e:	4620      	mov	r0, r4
  408620:	b004      	add	sp, #16
  408622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408626:	4620      	mov	r0, r4
  408628:	4629      	mov	r1, r5
  40862a:	f001 fecb 	bl	40a3c4 <fabs>
  40862e:	4602      	mov	r2, r0
  408630:	460b      	mov	r3, r1
  408632:	2000      	movs	r0, #0
  408634:	4998      	ldr	r1, [pc, #608]	; (408898 <__ieee754_asin+0x310>)
  408636:	f001 ffe5 	bl	40a604 <__aeabi_dsub>
  40863a:	2200      	movs	r2, #0
  40863c:	4b97      	ldr	r3, [pc, #604]	; (40889c <__ieee754_asin+0x314>)
  40863e:	f002 f995 	bl	40a96c <__aeabi_dmul>
  408642:	a37d      	add	r3, pc, #500	; (adr r3, 408838 <__ieee754_asin+0x2b0>)
  408644:	e9d3 2300 	ldrd	r2, r3, [r3]
  408648:	4604      	mov	r4, r0
  40864a:	460d      	mov	r5, r1
  40864c:	f002 f98e 	bl	40a96c <__aeabi_dmul>
  408650:	a37b      	add	r3, pc, #492	; (adr r3, 408840 <__ieee754_asin+0x2b8>)
  408652:	e9d3 2300 	ldrd	r2, r3, [r3]
  408656:	f001 ffd7 	bl	40a608 <__adddf3>
  40865a:	4622      	mov	r2, r4
  40865c:	462b      	mov	r3, r5
  40865e:	f002 f985 	bl	40a96c <__aeabi_dmul>
  408662:	a379      	add	r3, pc, #484	; (adr r3, 408848 <__ieee754_asin+0x2c0>)
  408664:	e9d3 2300 	ldrd	r2, r3, [r3]
  408668:	f001 ffcc 	bl	40a604 <__aeabi_dsub>
  40866c:	4622      	mov	r2, r4
  40866e:	462b      	mov	r3, r5
  408670:	f002 f97c 	bl	40a96c <__aeabi_dmul>
  408674:	a376      	add	r3, pc, #472	; (adr r3, 408850 <__ieee754_asin+0x2c8>)
  408676:	e9d3 2300 	ldrd	r2, r3, [r3]
  40867a:	f001 ffc5 	bl	40a608 <__adddf3>
  40867e:	4622      	mov	r2, r4
  408680:	462b      	mov	r3, r5
  408682:	f002 f973 	bl	40a96c <__aeabi_dmul>
  408686:	a374      	add	r3, pc, #464	; (adr r3, 408858 <__ieee754_asin+0x2d0>)
  408688:	e9d3 2300 	ldrd	r2, r3, [r3]
  40868c:	f001 ffba 	bl	40a604 <__aeabi_dsub>
  408690:	4622      	mov	r2, r4
  408692:	462b      	mov	r3, r5
  408694:	f002 f96a 	bl	40a96c <__aeabi_dmul>
  408698:	a371      	add	r3, pc, #452	; (adr r3, 408860 <__ieee754_asin+0x2d8>)
  40869a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40869e:	f001 ffb3 	bl	40a608 <__adddf3>
  4086a2:	4622      	mov	r2, r4
  4086a4:	462b      	mov	r3, r5
  4086a6:	f002 f961 	bl	40a96c <__aeabi_dmul>
  4086aa:	a36f      	add	r3, pc, #444	; (adr r3, 408868 <__ieee754_asin+0x2e0>)
  4086ac:	e9d3 2300 	ldrd	r2, r3, [r3]
  4086b0:	e9cd 0100 	strd	r0, r1, [sp]
  4086b4:	4620      	mov	r0, r4
  4086b6:	4629      	mov	r1, r5
  4086b8:	f002 f958 	bl	40a96c <__aeabi_dmul>
  4086bc:	a36c      	add	r3, pc, #432	; (adr r3, 408870 <__ieee754_asin+0x2e8>)
  4086be:	e9d3 2300 	ldrd	r2, r3, [r3]
  4086c2:	f001 ff9f 	bl	40a604 <__aeabi_dsub>
  4086c6:	4622      	mov	r2, r4
  4086c8:	462b      	mov	r3, r5
  4086ca:	f002 f94f 	bl	40a96c <__aeabi_dmul>
  4086ce:	a36a      	add	r3, pc, #424	; (adr r3, 408878 <__ieee754_asin+0x2f0>)
  4086d0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4086d4:	f001 ff98 	bl	40a608 <__adddf3>
  4086d8:	4622      	mov	r2, r4
  4086da:	462b      	mov	r3, r5
  4086dc:	f002 f946 	bl	40a96c <__aeabi_dmul>
  4086e0:	a367      	add	r3, pc, #412	; (adr r3, 408880 <__ieee754_asin+0x2f8>)
  4086e2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4086e6:	f001 ff8d 	bl	40a604 <__aeabi_dsub>
  4086ea:	4622      	mov	r2, r4
  4086ec:	462b      	mov	r3, r5
  4086ee:	f002 f93d 	bl	40a96c <__aeabi_dmul>
  4086f2:	4b69      	ldr	r3, [pc, #420]	; (408898 <__ieee754_asin+0x310>)
  4086f4:	2200      	movs	r2, #0
  4086f6:	f001 ff87 	bl	40a608 <__adddf3>
  4086fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4086fe:	4620      	mov	r0, r4
  408700:	4629      	mov	r1, r5
  408702:	f000 fc5f 	bl	408fc4 <__ieee754_sqrt>
  408706:	4b66      	ldr	r3, [pc, #408]	; (4088a0 <__ieee754_asin+0x318>)
  408708:	4598      	cmp	r8, r3
  40870a:	4606      	mov	r6, r0
  40870c:	460f      	mov	r7, r1
  40870e:	dc66      	bgt.n	4087de <__ieee754_asin+0x256>
  408710:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408714:	e9dd 0100 	ldrd	r0, r1, [sp]
  408718:	f002 fa52 	bl	40abc0 <__aeabi_ddiv>
  40871c:	4632      	mov	r2, r6
  40871e:	e9cd 0100 	strd	r0, r1, [sp]
  408722:	463b      	mov	r3, r7
  408724:	4630      	mov	r0, r6
  408726:	4639      	mov	r1, r7
  408728:	f001 ff6e 	bl	40a608 <__adddf3>
  40872c:	4602      	mov	r2, r0
  40872e:	460b      	mov	r3, r1
  408730:	e9dd 0100 	ldrd	r0, r1, [sp]
  408734:	f002 f91a 	bl	40a96c <__aeabi_dmul>
  408738:	f04f 0800 	mov.w	r8, #0
  40873c:	e9cd 0100 	strd	r0, r1, [sp]
  408740:	4642      	mov	r2, r8
  408742:	463b      	mov	r3, r7
  408744:	4640      	mov	r0, r8
  408746:	4639      	mov	r1, r7
  408748:	f002 f910 	bl	40a96c <__aeabi_dmul>
  40874c:	4602      	mov	r2, r0
  40874e:	460b      	mov	r3, r1
  408750:	4620      	mov	r0, r4
  408752:	4629      	mov	r1, r5
  408754:	f001 ff56 	bl	40a604 <__aeabi_dsub>
  408758:	4642      	mov	r2, r8
  40875a:	4604      	mov	r4, r0
  40875c:	460d      	mov	r5, r1
  40875e:	463b      	mov	r3, r7
  408760:	4630      	mov	r0, r6
  408762:	4639      	mov	r1, r7
  408764:	f001 ff50 	bl	40a608 <__adddf3>
  408768:	4602      	mov	r2, r0
  40876a:	460b      	mov	r3, r1
  40876c:	4620      	mov	r0, r4
  40876e:	4629      	mov	r1, r5
  408770:	f002 fa26 	bl	40abc0 <__aeabi_ddiv>
  408774:	4602      	mov	r2, r0
  408776:	460b      	mov	r3, r1
  408778:	f001 ff46 	bl	40a608 <__adddf3>
  40877c:	4602      	mov	r2, r0
  40877e:	460b      	mov	r3, r1
  408780:	a12b      	add	r1, pc, #172	; (adr r1, 408830 <__ieee754_asin+0x2a8>)
  408782:	e9d1 0100 	ldrd	r0, r1, [r1]
  408786:	f001 ff3d 	bl	40a604 <__aeabi_dsub>
  40878a:	4602      	mov	r2, r0
  40878c:	460b      	mov	r3, r1
  40878e:	e9dd 0100 	ldrd	r0, r1, [sp]
  408792:	f001 ff37 	bl	40a604 <__aeabi_dsub>
  408796:	4642      	mov	r2, r8
  408798:	4604      	mov	r4, r0
  40879a:	460d      	mov	r5, r1
  40879c:	463b      	mov	r3, r7
  40879e:	4640      	mov	r0, r8
  4087a0:	4639      	mov	r1, r7
  4087a2:	f001 ff31 	bl	40a608 <__adddf3>
  4087a6:	4602      	mov	r2, r0
  4087a8:	460b      	mov	r3, r1
  4087aa:	a137      	add	r1, pc, #220	; (adr r1, 408888 <__ieee754_asin+0x300>)
  4087ac:	e9d1 0100 	ldrd	r0, r1, [r1]
  4087b0:	f001 ff28 	bl	40a604 <__aeabi_dsub>
  4087b4:	4602      	mov	r2, r0
  4087b6:	460b      	mov	r3, r1
  4087b8:	4620      	mov	r0, r4
  4087ba:	4629      	mov	r1, r5
  4087bc:	f001 ff22 	bl	40a604 <__aeabi_dsub>
  4087c0:	4602      	mov	r2, r0
  4087c2:	460b      	mov	r3, r1
  4087c4:	a130      	add	r1, pc, #192	; (adr r1, 408888 <__ieee754_asin+0x300>)
  4087c6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4087ca:	f001 ff1b 	bl	40a604 <__aeabi_dsub>
  4087ce:	4604      	mov	r4, r0
  4087d0:	f1ba 0f00 	cmp.w	sl, #0
  4087d4:	f73f aef3 	bgt.w	4085be <__ieee754_asin+0x36>
  4087d8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4087dc:	e6ef      	b.n	4085be <__ieee754_asin+0x36>
  4087de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4087e2:	e9dd 0100 	ldrd	r0, r1, [sp]
  4087e6:	f002 f9eb 	bl	40abc0 <__aeabi_ddiv>
  4087ea:	4632      	mov	r2, r6
  4087ec:	463b      	mov	r3, r7
  4087ee:	f002 f8bd 	bl	40a96c <__aeabi_dmul>
  4087f2:	4632      	mov	r2, r6
  4087f4:	463b      	mov	r3, r7
  4087f6:	f001 ff07 	bl	40a608 <__adddf3>
  4087fa:	4602      	mov	r2, r0
  4087fc:	460b      	mov	r3, r1
  4087fe:	f001 ff03 	bl	40a608 <__adddf3>
  408802:	a30b      	add	r3, pc, #44	; (adr r3, 408830 <__ieee754_asin+0x2a8>)
  408804:	e9d3 2300 	ldrd	r2, r3, [r3]
  408808:	f001 fefc 	bl	40a604 <__aeabi_dsub>
  40880c:	4602      	mov	r2, r0
  40880e:	460b      	mov	r3, r1
  408810:	a105      	add	r1, pc, #20	; (adr r1, 408828 <__ieee754_asin+0x2a0>)
  408812:	e9d1 0100 	ldrd	r0, r1, [r1]
  408816:	f001 fef5 	bl	40a604 <__aeabi_dsub>
  40881a:	4604      	mov	r4, r0
  40881c:	e7d8      	b.n	4087d0 <__ieee754_asin+0x248>
  40881e:	bf00      	nop
  408820:	8800759c 	.word	0x8800759c
  408824:	7e37e43c 	.word	0x7e37e43c
  408828:	54442d18 	.word	0x54442d18
  40882c:	3ff921fb 	.word	0x3ff921fb
  408830:	33145c07 	.word	0x33145c07
  408834:	3c91a626 	.word	0x3c91a626
  408838:	0dfdf709 	.word	0x0dfdf709
  40883c:	3f023de1 	.word	0x3f023de1
  408840:	7501b288 	.word	0x7501b288
  408844:	3f49efe0 	.word	0x3f49efe0
  408848:	b5688f3b 	.word	0xb5688f3b
  40884c:	3fa48228 	.word	0x3fa48228
  408850:	0e884455 	.word	0x0e884455
  408854:	3fc9c155 	.word	0x3fc9c155
  408858:	03eb6f7d 	.word	0x03eb6f7d
  40885c:	3fd4d612 	.word	0x3fd4d612
  408860:	55555555 	.word	0x55555555
  408864:	3fc55555 	.word	0x3fc55555
  408868:	b12e9282 	.word	0xb12e9282
  40886c:	3fb3b8c5 	.word	0x3fb3b8c5
  408870:	1b8d0159 	.word	0x1b8d0159
  408874:	3fe6066c 	.word	0x3fe6066c
  408878:	9c598ac8 	.word	0x9c598ac8
  40887c:	40002ae5 	.word	0x40002ae5
  408880:	1c8a2d4b 	.word	0x1c8a2d4b
  408884:	40033a27 	.word	0x40033a27
  408888:	54442d18 	.word	0x54442d18
  40888c:	3fe921fb 	.word	0x3fe921fb
  408890:	3fefffff 	.word	0x3fefffff
  408894:	3fdfffff 	.word	0x3fdfffff
  408898:	3ff00000 	.word	0x3ff00000
  40889c:	3fe00000 	.word	0x3fe00000
  4088a0:	3fef3332 	.word	0x3fef3332
  4088a4:	4602      	mov	r2, r0
  4088a6:	460b      	mov	r3, r1
  4088a8:	f002 f860 	bl	40a96c <__aeabi_dmul>
  4088ac:	a338      	add	r3, pc, #224	; (adr r3, 408990 <__ieee754_asin+0x408>)
  4088ae:	e9d3 2300 	ldrd	r2, r3, [r3]
  4088b2:	4606      	mov	r6, r0
  4088b4:	460f      	mov	r7, r1
  4088b6:	f002 f859 	bl	40a96c <__aeabi_dmul>
  4088ba:	a337      	add	r3, pc, #220	; (adr r3, 408998 <__ieee754_asin+0x410>)
  4088bc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4088c0:	f001 fea2 	bl	40a608 <__adddf3>
  4088c4:	4632      	mov	r2, r6
  4088c6:	463b      	mov	r3, r7
  4088c8:	f002 f850 	bl	40a96c <__aeabi_dmul>
  4088cc:	a334      	add	r3, pc, #208	; (adr r3, 4089a0 <__ieee754_asin+0x418>)
  4088ce:	e9d3 2300 	ldrd	r2, r3, [r3]
  4088d2:	f001 fe97 	bl	40a604 <__aeabi_dsub>
  4088d6:	4632      	mov	r2, r6
  4088d8:	463b      	mov	r3, r7
  4088da:	f002 f847 	bl	40a96c <__aeabi_dmul>
  4088de:	a332      	add	r3, pc, #200	; (adr r3, 4089a8 <__ieee754_asin+0x420>)
  4088e0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4088e4:	f001 fe90 	bl	40a608 <__adddf3>
  4088e8:	4632      	mov	r2, r6
  4088ea:	463b      	mov	r3, r7
  4088ec:	f002 f83e 	bl	40a96c <__aeabi_dmul>
  4088f0:	a32f      	add	r3, pc, #188	; (adr r3, 4089b0 <__ieee754_asin+0x428>)
  4088f2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4088f6:	f001 fe85 	bl	40a604 <__aeabi_dsub>
  4088fa:	4632      	mov	r2, r6
  4088fc:	463b      	mov	r3, r7
  4088fe:	f002 f835 	bl	40a96c <__aeabi_dmul>
  408902:	a32d      	add	r3, pc, #180	; (adr r3, 4089b8 <__ieee754_asin+0x430>)
  408904:	e9d3 2300 	ldrd	r2, r3, [r3]
  408908:	f001 fe7e 	bl	40a608 <__adddf3>
  40890c:	4632      	mov	r2, r6
  40890e:	463b      	mov	r3, r7
  408910:	f002 f82c 	bl	40a96c <__aeabi_dmul>
  408914:	a32a      	add	r3, pc, #168	; (adr r3, 4089c0 <__ieee754_asin+0x438>)
  408916:	e9d3 2300 	ldrd	r2, r3, [r3]
  40891a:	4680      	mov	r8, r0
  40891c:	4689      	mov	r9, r1
  40891e:	4630      	mov	r0, r6
  408920:	4639      	mov	r1, r7
  408922:	f002 f823 	bl	40a96c <__aeabi_dmul>
  408926:	a328      	add	r3, pc, #160	; (adr r3, 4089c8 <__ieee754_asin+0x440>)
  408928:	e9d3 2300 	ldrd	r2, r3, [r3]
  40892c:	f001 fe6a 	bl	40a604 <__aeabi_dsub>
  408930:	4632      	mov	r2, r6
  408932:	463b      	mov	r3, r7
  408934:	f002 f81a 	bl	40a96c <__aeabi_dmul>
  408938:	a325      	add	r3, pc, #148	; (adr r3, 4089d0 <__ieee754_asin+0x448>)
  40893a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40893e:	f001 fe63 	bl	40a608 <__adddf3>
  408942:	4632      	mov	r2, r6
  408944:	463b      	mov	r3, r7
  408946:	f002 f811 	bl	40a96c <__aeabi_dmul>
  40894a:	a323      	add	r3, pc, #140	; (adr r3, 4089d8 <__ieee754_asin+0x450>)
  40894c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408950:	f001 fe58 	bl	40a604 <__aeabi_dsub>
  408954:	4632      	mov	r2, r6
  408956:	463b      	mov	r3, r7
  408958:	f002 f808 	bl	40a96c <__aeabi_dmul>
  40895c:	2200      	movs	r2, #0
  40895e:	4b20      	ldr	r3, [pc, #128]	; (4089e0 <__ieee754_asin+0x458>)
  408960:	f001 fe52 	bl	40a608 <__adddf3>
  408964:	4602      	mov	r2, r0
  408966:	460b      	mov	r3, r1
  408968:	4640      	mov	r0, r8
  40896a:	4649      	mov	r1, r9
  40896c:	f002 f928 	bl	40abc0 <__aeabi_ddiv>
  408970:	4622      	mov	r2, r4
  408972:	462b      	mov	r3, r5
  408974:	f001 fffa 	bl	40a96c <__aeabi_dmul>
  408978:	4622      	mov	r2, r4
  40897a:	462b      	mov	r3, r5
  40897c:	f001 fe44 	bl	40a608 <__adddf3>
  408980:	4604      	mov	r4, r0
  408982:	4620      	mov	r0, r4
  408984:	b004      	add	sp, #16
  408986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40898a:	bf00      	nop
  40898c:	f3af 8000 	nop.w
  408990:	0dfdf709 	.word	0x0dfdf709
  408994:	3f023de1 	.word	0x3f023de1
  408998:	7501b288 	.word	0x7501b288
  40899c:	3f49efe0 	.word	0x3f49efe0
  4089a0:	b5688f3b 	.word	0xb5688f3b
  4089a4:	3fa48228 	.word	0x3fa48228
  4089a8:	0e884455 	.word	0x0e884455
  4089ac:	3fc9c155 	.word	0x3fc9c155
  4089b0:	03eb6f7d 	.word	0x03eb6f7d
  4089b4:	3fd4d612 	.word	0x3fd4d612
  4089b8:	55555555 	.word	0x55555555
  4089bc:	3fc55555 	.word	0x3fc55555
  4089c0:	b12e9282 	.word	0xb12e9282
  4089c4:	3fb3b8c5 	.word	0x3fb3b8c5
  4089c8:	1b8d0159 	.word	0x1b8d0159
  4089cc:	3fe6066c 	.word	0x3fe6066c
  4089d0:	9c598ac8 	.word	0x9c598ac8
  4089d4:	40002ae5 	.word	0x40002ae5
  4089d8:	1c8a2d4b 	.word	0x1c8a2d4b
  4089dc:	40033a27 	.word	0x40033a27
  4089e0:	3ff00000 	.word	0x3ff00000
  4089e4:	00000000 	.word	0x00000000

004089e8 <__ieee754_atan2>:
  4089e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4089ec:	4254      	negs	r4, r2
  4089ee:	4314      	orrs	r4, r2
  4089f0:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
  4089f4:	f8df e180 	ldr.w	lr, [pc, #384]	; 408b78 <__ieee754_atan2+0x190>
  4089f8:	ea49 74d4 	orr.w	r4, r9, r4, lsr #31
  4089fc:	4574      	cmp	r4, lr
  4089fe:	4606      	mov	r6, r0
  408a00:	460d      	mov	r5, r1
  408a02:	d83e      	bhi.n	408a82 <__ieee754_atan2+0x9a>
  408a04:	4244      	negs	r4, r0
  408a06:	4304      	orrs	r4, r0
  408a08:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
  408a0c:	ea4b 74d4 	orr.w	r4, fp, r4, lsr #31
  408a10:	4574      	cmp	r4, lr
  408a12:	468a      	mov	sl, r1
  408a14:	d835      	bhi.n	408a82 <__ieee754_atan2+0x9a>
  408a16:	f103 4440 	add.w	r4, r3, #3221225472	; 0xc0000000
  408a1a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
  408a1e:	4314      	orrs	r4, r2
  408a20:	d044      	beq.n	408aac <__ieee754_atan2+0xc4>
  408a22:	179c      	asrs	r4, r3, #30
  408a24:	f004 0402 	and.w	r4, r4, #2
  408a28:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
  408a2c:	ea50 010b 	orrs.w	r1, r0, fp
  408a30:	d02f      	beq.n	408a92 <__ieee754_atan2+0xaa>
  408a32:	ea52 0109 	orrs.w	r1, r2, r9
  408a36:	d033      	beq.n	408aa0 <__ieee754_atan2+0xb8>
  408a38:	45f1      	cmp	r9, lr
  408a3a:	d046      	beq.n	408aca <__ieee754_atan2+0xe2>
  408a3c:	45f3      	cmp	fp, lr
  408a3e:	d02f      	beq.n	408aa0 <__ieee754_atan2+0xb8>
  408a40:	ebc9 090b 	rsb	r9, r9, fp
  408a44:	ea4f 5929 	mov.w	r9, r9, asr #20
  408a48:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
  408a4c:	dc34      	bgt.n	408ab8 <__ieee754_atan2+0xd0>
  408a4e:	2b00      	cmp	r3, #0
  408a50:	db57      	blt.n	408b02 <__ieee754_atan2+0x11a>
  408a52:	4630      	mov	r0, r6
  408a54:	4629      	mov	r1, r5
  408a56:	f002 f8b3 	bl	40abc0 <__aeabi_ddiv>
  408a5a:	f001 fcb3 	bl	40a3c4 <fabs>
  408a5e:	f001 fb13 	bl	40a088 <atan>
  408a62:	2c01      	cmp	r4, #1
  408a64:	d04a      	beq.n	408afc <__ieee754_atan2+0x114>
  408a66:	2c02      	cmp	r4, #2
  408a68:	d03b      	beq.n	408ae2 <__ieee754_atan2+0xfa>
  408a6a:	b184      	cbz	r4, 408a8e <__ieee754_atan2+0xa6>
  408a6c:	a332      	add	r3, pc, #200	; (adr r3, 408b38 <__ieee754_atan2+0x150>)
  408a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408a72:	f001 fdc7 	bl	40a604 <__aeabi_dsub>
  408a76:	a332      	add	r3, pc, #200	; (adr r3, 408b40 <__ieee754_atan2+0x158>)
  408a78:	e9d3 2300 	ldrd	r2, r3, [r3]
  408a7c:	f001 fdc2 	bl	40a604 <__aeabi_dsub>
  408a80:	e005      	b.n	408a8e <__ieee754_atan2+0xa6>
  408a82:	4610      	mov	r0, r2
  408a84:	4619      	mov	r1, r3
  408a86:	4632      	mov	r2, r6
  408a88:	462b      	mov	r3, r5
  408a8a:	f001 fdbd 	bl	40a608 <__adddf3>
  408a8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408a92:	2c02      	cmp	r4, #2
  408a94:	d014      	beq.n	408ac0 <__ieee754_atan2+0xd8>
  408a96:	2c03      	cmp	r4, #3
  408a98:	d10c      	bne.n	408ab4 <__ieee754_atan2+0xcc>
  408a9a:	482d      	ldr	r0, [pc, #180]	; (408b50 <__ieee754_atan2+0x168>)
  408a9c:	492d      	ldr	r1, [pc, #180]	; (408b54 <__ieee754_atan2+0x16c>)
  408a9e:	e7f6      	b.n	408a8e <__ieee754_atan2+0xa6>
  408aa0:	f1ba 0f00 	cmp.w	sl, #0
  408aa4:	482a      	ldr	r0, [pc, #168]	; (408b50 <__ieee754_atan2+0x168>)
  408aa6:	db0e      	blt.n	408ac6 <__ieee754_atan2+0xde>
  408aa8:	492b      	ldr	r1, [pc, #172]	; (408b58 <__ieee754_atan2+0x170>)
  408aaa:	e7f0      	b.n	408a8e <__ieee754_atan2+0xa6>
  408aac:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408ab0:	f001 baea 	b.w	40a088 <atan>
  408ab4:	4629      	mov	r1, r5
  408ab6:	e7ea      	b.n	408a8e <__ieee754_atan2+0xa6>
  408ab8:	a123      	add	r1, pc, #140	; (adr r1, 408b48 <__ieee754_atan2+0x160>)
  408aba:	e9d1 0100 	ldrd	r0, r1, [r1]
  408abe:	e7d0      	b.n	408a62 <__ieee754_atan2+0x7a>
  408ac0:	4823      	ldr	r0, [pc, #140]	; (408b50 <__ieee754_atan2+0x168>)
  408ac2:	4926      	ldr	r1, [pc, #152]	; (408b5c <__ieee754_atan2+0x174>)
  408ac4:	e7e3      	b.n	408a8e <__ieee754_atan2+0xa6>
  408ac6:	4926      	ldr	r1, [pc, #152]	; (408b60 <__ieee754_atan2+0x178>)
  408ac8:	e7e1      	b.n	408a8e <__ieee754_atan2+0xa6>
  408aca:	45cb      	cmp	fp, r9
  408acc:	d01f      	beq.n	408b0e <__ieee754_atan2+0x126>
  408ace:	2c02      	cmp	r4, #2
  408ad0:	d0f6      	beq.n	408ac0 <__ieee754_atan2+0xd8>
  408ad2:	2c03      	cmp	r4, #3
  408ad4:	d0e1      	beq.n	408a9a <__ieee754_atan2+0xb2>
  408ad6:	2c01      	cmp	r4, #1
  408ad8:	f04f 0000 	mov.w	r0, #0
  408adc:	d020      	beq.n	408b20 <__ieee754_atan2+0x138>
  408ade:	4601      	mov	r1, r0
  408ae0:	e7d5      	b.n	408a8e <__ieee754_atan2+0xa6>
  408ae2:	a315      	add	r3, pc, #84	; (adr r3, 408b38 <__ieee754_atan2+0x150>)
  408ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
  408ae8:	f001 fd8c 	bl	40a604 <__aeabi_dsub>
  408aec:	4602      	mov	r2, r0
  408aee:	460b      	mov	r3, r1
  408af0:	a113      	add	r1, pc, #76	; (adr r1, 408b40 <__ieee754_atan2+0x158>)
  408af2:	e9d1 0100 	ldrd	r0, r1, [r1]
  408af6:	f001 fd85 	bl	40a604 <__aeabi_dsub>
  408afa:	e7c8      	b.n	408a8e <__ieee754_atan2+0xa6>
  408afc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  408b00:	e7c5      	b.n	408a8e <__ieee754_atan2+0xa6>
  408b02:	f119 0f3c 	cmn.w	r9, #60	; 0x3c
  408b06:	daa4      	bge.n	408a52 <__ieee754_atan2+0x6a>
  408b08:	2000      	movs	r0, #0
  408b0a:	2100      	movs	r1, #0
  408b0c:	e7a9      	b.n	408a62 <__ieee754_atan2+0x7a>
  408b0e:	2c02      	cmp	r4, #2
  408b10:	d00e      	beq.n	408b30 <__ieee754_atan2+0x148>
  408b12:	2c03      	cmp	r4, #3
  408b14:	d009      	beq.n	408b2a <__ieee754_atan2+0x142>
  408b16:	2c01      	cmp	r4, #1
  408b18:	480d      	ldr	r0, [pc, #52]	; (408b50 <__ieee754_atan2+0x168>)
  408b1a:	d004      	beq.n	408b26 <__ieee754_atan2+0x13e>
  408b1c:	4911      	ldr	r1, [pc, #68]	; (408b64 <__ieee754_atan2+0x17c>)
  408b1e:	e7b6      	b.n	408a8e <__ieee754_atan2+0xa6>
  408b20:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  408b24:	e7b3      	b.n	408a8e <__ieee754_atan2+0xa6>
  408b26:	4910      	ldr	r1, [pc, #64]	; (408b68 <__ieee754_atan2+0x180>)
  408b28:	e7b1      	b.n	408a8e <__ieee754_atan2+0xa6>
  408b2a:	4810      	ldr	r0, [pc, #64]	; (408b6c <__ieee754_atan2+0x184>)
  408b2c:	4910      	ldr	r1, [pc, #64]	; (408b70 <__ieee754_atan2+0x188>)
  408b2e:	e7ae      	b.n	408a8e <__ieee754_atan2+0xa6>
  408b30:	480e      	ldr	r0, [pc, #56]	; (408b6c <__ieee754_atan2+0x184>)
  408b32:	4910      	ldr	r1, [pc, #64]	; (408b74 <__ieee754_atan2+0x18c>)
  408b34:	e7ab      	b.n	408a8e <__ieee754_atan2+0xa6>
  408b36:	bf00      	nop
  408b38:	33145c07 	.word	0x33145c07
  408b3c:	3ca1a626 	.word	0x3ca1a626
  408b40:	54442d18 	.word	0x54442d18
  408b44:	400921fb 	.word	0x400921fb
  408b48:	54442d18 	.word	0x54442d18
  408b4c:	3ff921fb 	.word	0x3ff921fb
  408b50:	54442d18 	.word	0x54442d18
  408b54:	c00921fb 	.word	0xc00921fb
  408b58:	3ff921fb 	.word	0x3ff921fb
  408b5c:	400921fb 	.word	0x400921fb
  408b60:	bff921fb 	.word	0xbff921fb
  408b64:	3fe921fb 	.word	0x3fe921fb
  408b68:	bfe921fb 	.word	0xbfe921fb
  408b6c:	7f3321d2 	.word	0x7f3321d2
  408b70:	c002d97c 	.word	0xc002d97c
  408b74:	4002d97c 	.word	0x4002d97c
  408b78:	7ff00000 	.word	0x7ff00000
  408b7c:	00000000 	.word	0x00000000

00408b80 <__ieee754_rem_pio2>:
  408b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408b84:	4e94      	ldr	r6, [pc, #592]	; (408dd8 <__ieee754_rem_pio2+0x258>)
  408b86:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  408b8a:	42b7      	cmp	r7, r6
  408b8c:	b091      	sub	sp, #68	; 0x44
  408b8e:	f340 8082 	ble.w	408c96 <__ieee754_rem_pio2+0x116>
  408b92:	4692      	mov	sl, r2
  408b94:	4a91      	ldr	r2, [pc, #580]	; (408ddc <__ieee754_rem_pio2+0x25c>)
  408b96:	4297      	cmp	r7, r2
  408b98:	460c      	mov	r4, r1
  408b9a:	dc26      	bgt.n	408bea <__ieee754_rem_pio2+0x6a>
  408b9c:	2900      	cmp	r1, #0
  408b9e:	a384      	add	r3, pc, #528	; (adr r3, 408db0 <__ieee754_rem_pio2+0x230>)
  408ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
  408ba4:	f340 81a8 	ble.w	408ef8 <__ieee754_rem_pio2+0x378>
  408ba8:	f001 fd2c 	bl	40a604 <__aeabi_dsub>
  408bac:	4b8c      	ldr	r3, [pc, #560]	; (408de0 <__ieee754_rem_pio2+0x260>)
  408bae:	429f      	cmp	r7, r3
  408bb0:	4604      	mov	r4, r0
  408bb2:	460d      	mov	r5, r1
  408bb4:	f000 8084 	beq.w	408cc0 <__ieee754_rem_pio2+0x140>
  408bb8:	a37f      	add	r3, pc, #508	; (adr r3, 408db8 <__ieee754_rem_pio2+0x238>)
  408bba:	e9d3 2300 	ldrd	r2, r3, [r3]
  408bbe:	f001 fd21 	bl	40a604 <__aeabi_dsub>
  408bc2:	4602      	mov	r2, r0
  408bc4:	460b      	mov	r3, r1
  408bc6:	e9ca 2300 	strd	r2, r3, [sl]
  408bca:	4620      	mov	r0, r4
  408bcc:	4629      	mov	r1, r5
  408bce:	f001 fd19 	bl	40a604 <__aeabi_dsub>
  408bd2:	a379      	add	r3, pc, #484	; (adr r3, 408db8 <__ieee754_rem_pio2+0x238>)
  408bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
  408bd8:	f001 fd14 	bl	40a604 <__aeabi_dsub>
  408bdc:	2501      	movs	r5, #1
  408bde:	e9ca 0102 	strd	r0, r1, [sl, #8]
  408be2:	4628      	mov	r0, r5
  408be4:	b011      	add	sp, #68	; 0x44
  408be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408bea:	4a7e      	ldr	r2, [pc, #504]	; (408de4 <__ieee754_rem_pio2+0x264>)
  408bec:	4297      	cmp	r7, r2
  408bee:	f340 8084 	ble.w	408cfa <__ieee754_rem_pio2+0x17a>
  408bf2:	4a7d      	ldr	r2, [pc, #500]	; (408de8 <__ieee754_rem_pio2+0x268>)
  408bf4:	4297      	cmp	r7, r2
  408bf6:	dc59      	bgt.n	408cac <__ieee754_rem_pio2+0x12c>
  408bf8:	153d      	asrs	r5, r7, #20
  408bfa:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
  408bfe:	eba7 5305 	sub.w	r3, r7, r5, lsl #20
  408c02:	4619      	mov	r1, r3
  408c04:	461f      	mov	r7, r3
  408c06:	4606      	mov	r6, r0
  408c08:	f002 f960 	bl	40aecc <__aeabi_d2iz>
  408c0c:	f001 fe48 	bl	40a8a0 <__aeabi_i2d>
  408c10:	4680      	mov	r8, r0
  408c12:	4689      	mov	r9, r1
  408c14:	4602      	mov	r2, r0
  408c16:	460b      	mov	r3, r1
  408c18:	4630      	mov	r0, r6
  408c1a:	4639      	mov	r1, r7
  408c1c:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  408c20:	f001 fcf0 	bl	40a604 <__aeabi_dsub>
  408c24:	2200      	movs	r2, #0
  408c26:	4b71      	ldr	r3, [pc, #452]	; (408dec <__ieee754_rem_pio2+0x26c>)
  408c28:	f001 fea0 	bl	40a96c <__aeabi_dmul>
  408c2c:	4689      	mov	r9, r1
  408c2e:	4680      	mov	r8, r0
  408c30:	f002 f94c 	bl	40aecc <__aeabi_d2iz>
  408c34:	f001 fe34 	bl	40a8a0 <__aeabi_i2d>
  408c38:	4602      	mov	r2, r0
  408c3a:	460b      	mov	r3, r1
  408c3c:	4606      	mov	r6, r0
  408c3e:	460f      	mov	r7, r1
  408c40:	4640      	mov	r0, r8
  408c42:	4649      	mov	r1, r9
  408c44:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  408c48:	f001 fcdc 	bl	40a604 <__aeabi_dsub>
  408c4c:	2200      	movs	r2, #0
  408c4e:	4b67      	ldr	r3, [pc, #412]	; (408dec <__ieee754_rem_pio2+0x26c>)
  408c50:	f001 fe8c 	bl	40a96c <__aeabi_dmul>
  408c54:	2200      	movs	r2, #0
  408c56:	2300      	movs	r3, #0
  408c58:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  408c5c:	f002 f8ee 	bl	40ae3c <__aeabi_dcmpeq>
  408c60:	2800      	cmp	r0, #0
  408c62:	f000 8175 	beq.w	408f50 <__ieee754_rem_pio2+0x3d0>
  408c66:	2300      	movs	r3, #0
  408c68:	4630      	mov	r0, r6
  408c6a:	4639      	mov	r1, r7
  408c6c:	2200      	movs	r2, #0
  408c6e:	f002 f8e5 	bl	40ae3c <__aeabi_dcmpeq>
  408c72:	2800      	cmp	r0, #0
  408c74:	bf14      	ite	ne
  408c76:	2301      	movne	r3, #1
  408c78:	2302      	moveq	r3, #2
  408c7a:	4a5d      	ldr	r2, [pc, #372]	; (408df0 <__ieee754_rem_pio2+0x270>)
  408c7c:	9201      	str	r2, [sp, #4]
  408c7e:	2102      	movs	r1, #2
  408c80:	9100      	str	r1, [sp, #0]
  408c82:	462a      	mov	r2, r5
  408c84:	4651      	mov	r1, sl
  408c86:	a80a      	add	r0, sp, #40	; 0x28
  408c88:	f000 fb82 	bl	409390 <__kernel_rem_pio2>
  408c8c:	2c00      	cmp	r4, #0
  408c8e:	f2c0 8151 	blt.w	408f34 <__ieee754_rem_pio2+0x3b4>
  408c92:	4605      	mov	r5, r0
  408c94:	e006      	b.n	408ca4 <__ieee754_rem_pio2+0x124>
  408c96:	e9c2 0100 	strd	r0, r1, [r2]
  408c9a:	2500      	movs	r5, #0
  408c9c:	2400      	movs	r4, #0
  408c9e:	e9c2 4502 	strd	r4, r5, [r2, #8]
  408ca2:	2500      	movs	r5, #0
  408ca4:	4628      	mov	r0, r5
  408ca6:	b011      	add	sp, #68	; 0x44
  408ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408cac:	4602      	mov	r2, r0
  408cae:	460b      	mov	r3, r1
  408cb0:	f001 fca8 	bl	40a604 <__aeabi_dsub>
  408cb4:	2500      	movs	r5, #0
  408cb6:	e9ca 0102 	strd	r0, r1, [sl, #8]
  408cba:	e9ca 0100 	strd	r0, r1, [sl]
  408cbe:	e7f1      	b.n	408ca4 <__ieee754_rem_pio2+0x124>
  408cc0:	a33f      	add	r3, pc, #252	; (adr r3, 408dc0 <__ieee754_rem_pio2+0x240>)
  408cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
  408cc6:	f001 fc9d 	bl	40a604 <__aeabi_dsub>
  408cca:	a33f      	add	r3, pc, #252	; (adr r3, 408dc8 <__ieee754_rem_pio2+0x248>)
  408ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
  408cd0:	460d      	mov	r5, r1
  408cd2:	4604      	mov	r4, r0
  408cd4:	f001 fc96 	bl	40a604 <__aeabi_dsub>
  408cd8:	4602      	mov	r2, r0
  408cda:	460b      	mov	r3, r1
  408cdc:	e9ca 2300 	strd	r2, r3, [sl]
  408ce0:	4629      	mov	r1, r5
  408ce2:	4620      	mov	r0, r4
  408ce4:	f001 fc8e 	bl	40a604 <__aeabi_dsub>
  408ce8:	a337      	add	r3, pc, #220	; (adr r3, 408dc8 <__ieee754_rem_pio2+0x248>)
  408cea:	e9d3 2300 	ldrd	r2, r3, [r3]
  408cee:	f001 fc89 	bl	40a604 <__aeabi_dsub>
  408cf2:	2501      	movs	r5, #1
  408cf4:	e9ca 0102 	strd	r0, r1, [sl, #8]
  408cf8:	e7d4      	b.n	408ca4 <__ieee754_rem_pio2+0x124>
  408cfa:	f001 fb63 	bl	40a3c4 <fabs>
  408cfe:	a334      	add	r3, pc, #208	; (adr r3, 408dd0 <__ieee754_rem_pio2+0x250>)
  408d00:	e9d3 2300 	ldrd	r2, r3, [r3]
  408d04:	4680      	mov	r8, r0
  408d06:	4689      	mov	r9, r1
  408d08:	f001 fe30 	bl	40a96c <__aeabi_dmul>
  408d0c:	2200      	movs	r2, #0
  408d0e:	4b39      	ldr	r3, [pc, #228]	; (408df4 <__ieee754_rem_pio2+0x274>)
  408d10:	f001 fc7a 	bl	40a608 <__adddf3>
  408d14:	f002 f8da 	bl	40aecc <__aeabi_d2iz>
  408d18:	4605      	mov	r5, r0
  408d1a:	f001 fdc1 	bl	40a8a0 <__aeabi_i2d>
  408d1e:	a324      	add	r3, pc, #144	; (adr r3, 408db0 <__ieee754_rem_pio2+0x230>)
  408d20:	e9d3 2300 	ldrd	r2, r3, [r3]
  408d24:	e9cd 0104 	strd	r0, r1, [sp, #16]
  408d28:	f001 fe20 	bl	40a96c <__aeabi_dmul>
  408d2c:	4602      	mov	r2, r0
  408d2e:	460b      	mov	r3, r1
  408d30:	4640      	mov	r0, r8
  408d32:	4649      	mov	r1, r9
  408d34:	f001 fc66 	bl	40a604 <__aeabi_dsub>
  408d38:	a31f      	add	r3, pc, #124	; (adr r3, 408db8 <__ieee754_rem_pio2+0x238>)
  408d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
  408d3e:	4680      	mov	r8, r0
  408d40:	4689      	mov	r9, r1
  408d42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  408d46:	f001 fe11 	bl	40a96c <__aeabi_dmul>
  408d4a:	2d1f      	cmp	r5, #31
  408d4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  408d50:	dc54      	bgt.n	408dfc <__ieee754_rem_pio2+0x27c>
  408d52:	4b29      	ldr	r3, [pc, #164]	; (408df8 <__ieee754_rem_pio2+0x278>)
  408d54:	1e6a      	subs	r2, r5, #1
  408d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408d5a:	429f      	cmp	r7, r3
  408d5c:	d04e      	beq.n	408dfc <__ieee754_rem_pio2+0x27c>
  408d5e:	4602      	mov	r2, r0
  408d60:	460b      	mov	r3, r1
  408d62:	4640      	mov	r0, r8
  408d64:	4649      	mov	r1, r9
  408d66:	f001 fc4d 	bl	40a604 <__aeabi_dsub>
  408d6a:	4602      	mov	r2, r0
  408d6c:	460b      	mov	r3, r1
  408d6e:	e9ca 2300 	strd	r2, r3, [sl]
  408d72:	4683      	mov	fp, r0
  408d74:	460e      	mov	r6, r1
  408d76:	465a      	mov	r2, fp
  408d78:	4633      	mov	r3, r6
  408d7a:	4640      	mov	r0, r8
  408d7c:	4649      	mov	r1, r9
  408d7e:	f001 fc41 	bl	40a604 <__aeabi_dsub>
  408d82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408d86:	f001 fc3d 	bl	40a604 <__aeabi_dsub>
  408d8a:	2c00      	cmp	r4, #0
  408d8c:	4602      	mov	r2, r0
  408d8e:	460b      	mov	r3, r1
  408d90:	e9ca 2302 	strd	r2, r3, [sl, #8]
  408d94:	da86      	bge.n	408ca4 <__ieee754_rem_pio2+0x124>
  408d96:	465b      	mov	r3, fp
  408d98:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  408d9c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  408da0:	e88a 0048 	stmia.w	sl, {r3, r6}
  408da4:	f8ca 100c 	str.w	r1, [sl, #12]
  408da8:	f8ca 0008 	str.w	r0, [sl, #8]
  408dac:	426d      	negs	r5, r5
  408dae:	e779      	b.n	408ca4 <__ieee754_rem_pio2+0x124>
  408db0:	54400000 	.word	0x54400000
  408db4:	3ff921fb 	.word	0x3ff921fb
  408db8:	1a626331 	.word	0x1a626331
  408dbc:	3dd0b461 	.word	0x3dd0b461
  408dc0:	1a600000 	.word	0x1a600000
  408dc4:	3dd0b461 	.word	0x3dd0b461
  408dc8:	2e037073 	.word	0x2e037073
  408dcc:	3ba3198a 	.word	0x3ba3198a
  408dd0:	6dc9c883 	.word	0x6dc9c883
  408dd4:	3fe45f30 	.word	0x3fe45f30
  408dd8:	3fe921fb 	.word	0x3fe921fb
  408ddc:	4002d97b 	.word	0x4002d97b
  408de0:	3ff921fb 	.word	0x3ff921fb
  408de4:	413921fb 	.word	0x413921fb
  408de8:	7fefffff 	.word	0x7fefffff
  408dec:	41700000 	.word	0x41700000
  408df0:	0040bdbc 	.word	0x0040bdbc
  408df4:	3fe00000 	.word	0x3fe00000
  408df8:	0040bd3c 	.word	0x0040bd3c
  408dfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408e00:	4640      	mov	r0, r8
  408e02:	4649      	mov	r1, r9
  408e04:	f001 fbfe 	bl	40a604 <__aeabi_dsub>
  408e08:	153a      	asrs	r2, r7, #20
  408e0a:	f3c1 530a 	ubfx	r3, r1, #20, #11
  408e0e:	1ad3      	subs	r3, r2, r3
  408e10:	2b10      	cmp	r3, #16
  408e12:	4683      	mov	fp, r0
  408e14:	460e      	mov	r6, r1
  408e16:	9209      	str	r2, [sp, #36]	; 0x24
  408e18:	e9ca 0100 	strd	r0, r1, [sl]
  408e1c:	ddab      	ble.n	408d76 <__ieee754_rem_pio2+0x1f6>
  408e1e:	a35e      	add	r3, pc, #376	; (adr r3, 408f98 <__ieee754_rem_pio2+0x418>)
  408e20:	e9d3 2300 	ldrd	r2, r3, [r3]
  408e24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  408e28:	f001 fda0 	bl	40a96c <__aeabi_dmul>
  408e2c:	4606      	mov	r6, r0
  408e2e:	460f      	mov	r7, r1
  408e30:	4602      	mov	r2, r0
  408e32:	460b      	mov	r3, r1
  408e34:	4640      	mov	r0, r8
  408e36:	4649      	mov	r1, r9
  408e38:	f001 fbe4 	bl	40a604 <__aeabi_dsub>
  408e3c:	e9cd 0106 	strd	r0, r1, [sp, #24]
  408e40:	4602      	mov	r2, r0
  408e42:	460b      	mov	r3, r1
  408e44:	4640      	mov	r0, r8
  408e46:	4649      	mov	r1, r9
  408e48:	f001 fbdc 	bl	40a604 <__aeabi_dsub>
  408e4c:	4632      	mov	r2, r6
  408e4e:	463b      	mov	r3, r7
  408e50:	f001 fbd8 	bl	40a604 <__aeabi_dsub>
  408e54:	a352      	add	r3, pc, #328	; (adr r3, 408fa0 <__ieee754_rem_pio2+0x420>)
  408e56:	e9d3 2300 	ldrd	r2, r3, [r3]
  408e5a:	4606      	mov	r6, r0
  408e5c:	460f      	mov	r7, r1
  408e5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  408e62:	f001 fd83 	bl	40a96c <__aeabi_dmul>
  408e66:	4632      	mov	r2, r6
  408e68:	463b      	mov	r3, r7
  408e6a:	f001 fbcb 	bl	40a604 <__aeabi_dsub>
  408e6e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  408e72:	e9cd 0102 	strd	r0, r1, [sp, #8]
  408e76:	4602      	mov	r2, r0
  408e78:	460b      	mov	r3, r1
  408e7a:	4640      	mov	r0, r8
  408e7c:	4649      	mov	r1, r9
  408e7e:	f001 fbc1 	bl	40a604 <__aeabi_dsub>
  408e82:	460b      	mov	r3, r1
  408e84:	f3c1 570a 	ubfx	r7, r1, #20, #11
  408e88:	460e      	mov	r6, r1
  408e8a:	9909      	ldr	r1, [sp, #36]	; 0x24
  408e8c:	1bcf      	subs	r7, r1, r7
  408e8e:	4602      	mov	r2, r0
  408e90:	2f31      	cmp	r7, #49	; 0x31
  408e92:	4683      	mov	fp, r0
  408e94:	e9ca 2300 	strd	r2, r3, [sl]
  408e98:	dd7a      	ble.n	408f90 <__ieee754_rem_pio2+0x410>
  408e9a:	a343      	add	r3, pc, #268	; (adr r3, 408fa8 <__ieee754_rem_pio2+0x428>)
  408e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408ea0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  408ea4:	f001 fd62 	bl	40a96c <__aeabi_dmul>
  408ea8:	4606      	mov	r6, r0
  408eaa:	460f      	mov	r7, r1
  408eac:	4602      	mov	r2, r0
  408eae:	460b      	mov	r3, r1
  408eb0:	4640      	mov	r0, r8
  408eb2:	4649      	mov	r1, r9
  408eb4:	e9cd 8906 	strd	r8, r9, [sp, #24]
  408eb8:	f001 fba4 	bl	40a604 <__aeabi_dsub>
  408ebc:	4602      	mov	r2, r0
  408ebe:	460b      	mov	r3, r1
  408ec0:	4680      	mov	r8, r0
  408ec2:	4689      	mov	r9, r1
  408ec4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  408ec8:	f001 fb9c 	bl	40a604 <__aeabi_dsub>
  408ecc:	4632      	mov	r2, r6
  408ece:	463b      	mov	r3, r7
  408ed0:	f001 fb98 	bl	40a604 <__aeabi_dsub>
  408ed4:	a336      	add	r3, pc, #216	; (adr r3, 408fb0 <__ieee754_rem_pio2+0x430>)
  408ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
  408eda:	4606      	mov	r6, r0
  408edc:	460f      	mov	r7, r1
  408ede:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  408ee2:	f001 fd43 	bl	40a96c <__aeabi_dmul>
  408ee6:	4632      	mov	r2, r6
  408ee8:	463b      	mov	r3, r7
  408eea:	f001 fb8b 	bl	40a604 <__aeabi_dsub>
  408eee:	4602      	mov	r2, r0
  408ef0:	460b      	mov	r3, r1
  408ef2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  408ef6:	e734      	b.n	408d62 <__ieee754_rem_pio2+0x1e2>
  408ef8:	f001 fb86 	bl	40a608 <__adddf3>
  408efc:	4b30      	ldr	r3, [pc, #192]	; (408fc0 <__ieee754_rem_pio2+0x440>)
  408efe:	429f      	cmp	r7, r3
  408f00:	4604      	mov	r4, r0
  408f02:	460d      	mov	r5, r1
  408f04:	d026      	beq.n	408f54 <__ieee754_rem_pio2+0x3d4>
  408f06:	a32c      	add	r3, pc, #176	; (adr r3, 408fb8 <__ieee754_rem_pio2+0x438>)
  408f08:	e9d3 2300 	ldrd	r2, r3, [r3]
  408f0c:	f001 fb7c 	bl	40a608 <__adddf3>
  408f10:	4602      	mov	r2, r0
  408f12:	460b      	mov	r3, r1
  408f14:	e9ca 2300 	strd	r2, r3, [sl]
  408f18:	4629      	mov	r1, r5
  408f1a:	4620      	mov	r0, r4
  408f1c:	f001 fb72 	bl	40a604 <__aeabi_dsub>
  408f20:	a325      	add	r3, pc, #148	; (adr r3, 408fb8 <__ieee754_rem_pio2+0x438>)
  408f22:	e9d3 2300 	ldrd	r2, r3, [r3]
  408f26:	f001 fb6f 	bl	40a608 <__adddf3>
  408f2a:	f04f 35ff 	mov.w	r5, #4294967295
  408f2e:	e9ca 0102 	strd	r0, r1, [sl, #8]
  408f32:	e6b7      	b.n	408ca4 <__ieee754_rem_pio2+0x124>
  408f34:	f8da 2004 	ldr.w	r2, [sl, #4]
  408f38:	f8da 300c 	ldr.w	r3, [sl, #12]
  408f3c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  408f40:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  408f44:	4245      	negs	r5, r0
  408f46:	f8ca 2004 	str.w	r2, [sl, #4]
  408f4a:	f8ca 300c 	str.w	r3, [sl, #12]
  408f4e:	e6a9      	b.n	408ca4 <__ieee754_rem_pio2+0x124>
  408f50:	2303      	movs	r3, #3
  408f52:	e692      	b.n	408c7a <__ieee754_rem_pio2+0xfa>
  408f54:	a310      	add	r3, pc, #64	; (adr r3, 408f98 <__ieee754_rem_pio2+0x418>)
  408f56:	e9d3 2300 	ldrd	r2, r3, [r3]
  408f5a:	f001 fb55 	bl	40a608 <__adddf3>
  408f5e:	a310      	add	r3, pc, #64	; (adr r3, 408fa0 <__ieee754_rem_pio2+0x420>)
  408f60:	e9d3 2300 	ldrd	r2, r3, [r3]
  408f64:	460d      	mov	r5, r1
  408f66:	4604      	mov	r4, r0
  408f68:	f001 fb4e 	bl	40a608 <__adddf3>
  408f6c:	4602      	mov	r2, r0
  408f6e:	460b      	mov	r3, r1
  408f70:	e9ca 2300 	strd	r2, r3, [sl]
  408f74:	4629      	mov	r1, r5
  408f76:	4620      	mov	r0, r4
  408f78:	f001 fb44 	bl	40a604 <__aeabi_dsub>
  408f7c:	a308      	add	r3, pc, #32	; (adr r3, 408fa0 <__ieee754_rem_pio2+0x420>)
  408f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408f82:	f001 fb41 	bl	40a608 <__adddf3>
  408f86:	f04f 35ff 	mov.w	r5, #4294967295
  408f8a:	e9ca 0102 	strd	r0, r1, [sl, #8]
  408f8e:	e689      	b.n	408ca4 <__ieee754_rem_pio2+0x124>
  408f90:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  408f94:	e6ef      	b.n	408d76 <__ieee754_rem_pio2+0x1f6>
  408f96:	bf00      	nop
  408f98:	1a600000 	.word	0x1a600000
  408f9c:	3dd0b461 	.word	0x3dd0b461
  408fa0:	2e037073 	.word	0x2e037073
  408fa4:	3ba3198a 	.word	0x3ba3198a
  408fa8:	2e000000 	.word	0x2e000000
  408fac:	3ba3198a 	.word	0x3ba3198a
  408fb0:	252049c1 	.word	0x252049c1
  408fb4:	397b839a 	.word	0x397b839a
  408fb8:	1a626331 	.word	0x1a626331
  408fbc:	3dd0b461 	.word	0x3dd0b461
  408fc0:	3ff921fb 	.word	0x3ff921fb

00408fc4 <__ieee754_sqrt>:
  408fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408fc8:	4e5d      	ldr	r6, [pc, #372]	; (409140 <__ieee754_sqrt+0x17c>)
  408fca:	46b6      	mov	lr, r6
  408fcc:	400e      	ands	r6, r1
  408fce:	4576      	cmp	r6, lr
  408fd0:	460c      	mov	r4, r1
  408fd2:	4605      	mov	r5, r0
  408fd4:	f000 8095 	beq.w	409102 <__ieee754_sqrt+0x13e>
  408fd8:	2900      	cmp	r1, #0
  408fda:	460b      	mov	r3, r1
  408fdc:	4602      	mov	r2, r0
  408fde:	dd73      	ble.n	4090c8 <__ieee754_sqrt+0x104>
  408fe0:	150f      	asrs	r7, r1, #20
  408fe2:	d07e      	beq.n	4090e2 <__ieee754_sqrt+0x11e>
  408fe4:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  408fe8:	f3c3 0313 	ubfx	r3, r3, #0, #20
  408fec:	07f8      	lsls	r0, r7, #31
  408fee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  408ff2:	d464      	bmi.n	4090be <__ieee754_sqrt+0xfa>
  408ff4:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  408ff8:	2600      	movs	r6, #0
  408ffa:	440b      	add	r3, r1
  408ffc:	107f      	asrs	r7, r7, #1
  408ffe:	0052      	lsls	r2, r2, #1
  409000:	46b6      	mov	lr, r6
  409002:	2016      	movs	r0, #22
  409004:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  409008:	eb0e 0401 	add.w	r4, lr, r1
  40900c:	429c      	cmp	r4, r3
  40900e:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  409012:	ea4f 0242 	mov.w	r2, r2, lsl #1
  409016:	dc03      	bgt.n	409020 <__ieee754_sqrt+0x5c>
  409018:	1b1b      	subs	r3, r3, r4
  40901a:	eb04 0e01 	add.w	lr, r4, r1
  40901e:	440e      	add	r6, r1
  409020:	3801      	subs	r0, #1
  409022:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  409026:	ea4f 0151 	mov.w	r1, r1, lsr #1
  40902a:	d1ed      	bne.n	409008 <__ieee754_sqrt+0x44>
  40902c:	4684      	mov	ip, r0
  40902e:	2420      	movs	r4, #32
  409030:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  409034:	e009      	b.n	40904a <__ieee754_sqrt+0x86>
  409036:	d020      	beq.n	40907a <__ieee754_sqrt+0xb6>
  409038:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  40903c:	3c01      	subs	r4, #1
  40903e:	ea4f 0151 	mov.w	r1, r1, lsr #1
  409042:	442b      	add	r3, r5
  409044:	ea4f 0242 	mov.w	r2, r2, lsl #1
  409048:	d020      	beq.n	40908c <__ieee754_sqrt+0xc8>
  40904a:	459e      	cmp	lr, r3
  40904c:	eb01 050c 	add.w	r5, r1, ip
  409050:	daf1      	bge.n	409036 <__ieee754_sqrt+0x72>
  409052:	2d00      	cmp	r5, #0
  409054:	eb05 0c01 	add.w	ip, r5, r1
  409058:	db09      	blt.n	40906e <__ieee754_sqrt+0xaa>
  40905a:	46f0      	mov	r8, lr
  40905c:	4295      	cmp	r5, r2
  40905e:	ebce 0303 	rsb	r3, lr, r3
  409062:	d900      	bls.n	409066 <__ieee754_sqrt+0xa2>
  409064:	3b01      	subs	r3, #1
  409066:	1b52      	subs	r2, r2, r5
  409068:	4408      	add	r0, r1
  40906a:	46c6      	mov	lr, r8
  40906c:	e7e4      	b.n	409038 <__ieee754_sqrt+0x74>
  40906e:	f1bc 0f00 	cmp.w	ip, #0
  409072:	dbf2      	blt.n	40905a <__ieee754_sqrt+0x96>
  409074:	f10e 0801 	add.w	r8, lr, #1
  409078:	e7f0      	b.n	40905c <__ieee754_sqrt+0x98>
  40907a:	4295      	cmp	r5, r2
  40907c:	d817      	bhi.n	4090ae <__ieee754_sqrt+0xea>
  40907e:	2d00      	cmp	r5, #0
  409080:	eb05 0c01 	add.w	ip, r5, r1
  409084:	db47      	blt.n	409116 <__ieee754_sqrt+0x152>
  409086:	4698      	mov	r8, r3
  409088:	2300      	movs	r3, #0
  40908a:	e7ec      	b.n	409066 <__ieee754_sqrt+0xa2>
  40908c:	4313      	orrs	r3, r2
  40908e:	d110      	bne.n	4090b2 <__ieee754_sqrt+0xee>
  409090:	0840      	lsrs	r0, r0, #1
  409092:	1073      	asrs	r3, r6, #1
  409094:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  409098:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40909c:	07f2      	lsls	r2, r6, #31
  40909e:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  4090a2:	bf48      	it	mi
  4090a4:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  4090a8:	4649      	mov	r1, r9
  4090aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4090ae:	4673      	mov	r3, lr
  4090b0:	e7c2      	b.n	409038 <__ieee754_sqrt+0x74>
  4090b2:	1c41      	adds	r1, r0, #1
  4090b4:	d033      	beq.n	40911e <__ieee754_sqrt+0x15a>
  4090b6:	f000 0301 	and.w	r3, r0, #1
  4090ba:	4418      	add	r0, r3
  4090bc:	e7e8      	b.n	409090 <__ieee754_sqrt+0xcc>
  4090be:	005b      	lsls	r3, r3, #1
  4090c0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  4090c4:	0052      	lsls	r2, r2, #1
  4090c6:	e795      	b.n	408ff4 <__ieee754_sqrt+0x30>
  4090c8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  4090cc:	4306      	orrs	r6, r0
  4090ce:	d0ec      	beq.n	4090aa <__ieee754_sqrt+0xe6>
  4090d0:	bb69      	cbnz	r1, 40912e <__ieee754_sqrt+0x16a>
  4090d2:	460f      	mov	r7, r1
  4090d4:	0ad3      	lsrs	r3, r2, #11
  4090d6:	3f15      	subs	r7, #21
  4090d8:	0552      	lsls	r2, r2, #21
  4090da:	2b00      	cmp	r3, #0
  4090dc:	d0fa      	beq.n	4090d4 <__ieee754_sqrt+0x110>
  4090de:	02dd      	lsls	r5, r3, #11
  4090e0:	d420      	bmi.n	409124 <__ieee754_sqrt+0x160>
  4090e2:	2100      	movs	r1, #0
  4090e4:	e000      	b.n	4090e8 <__ieee754_sqrt+0x124>
  4090e6:	4601      	mov	r1, r0
  4090e8:	005b      	lsls	r3, r3, #1
  4090ea:	02dc      	lsls	r4, r3, #11
  4090ec:	f101 0001 	add.w	r0, r1, #1
  4090f0:	d5f9      	bpl.n	4090e6 <__ieee754_sqrt+0x122>
  4090f2:	f1c0 0420 	rsb	r4, r0, #32
  4090f6:	fa22 f404 	lsr.w	r4, r2, r4
  4090fa:	4323      	orrs	r3, r4
  4090fc:	1a7f      	subs	r7, r7, r1
  4090fe:	4082      	lsls	r2, r0
  409100:	e770      	b.n	408fe4 <__ieee754_sqrt+0x20>
  409102:	4602      	mov	r2, r0
  409104:	460b      	mov	r3, r1
  409106:	f001 fc31 	bl	40a96c <__aeabi_dmul>
  40910a:	462a      	mov	r2, r5
  40910c:	4623      	mov	r3, r4
  40910e:	f001 fa7b 	bl	40a608 <__adddf3>
  409112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409116:	f1bc 0f00 	cmp.w	ip, #0
  40911a:	daab      	bge.n	409074 <__ieee754_sqrt+0xb0>
  40911c:	e7b3      	b.n	409086 <__ieee754_sqrt+0xc2>
  40911e:	3601      	adds	r6, #1
  409120:	4620      	mov	r0, r4
  409122:	e7b6      	b.n	409092 <__ieee754_sqrt+0xce>
  409124:	2420      	movs	r4, #32
  409126:	f04f 31ff 	mov.w	r1, #4294967295
  40912a:	2000      	movs	r0, #0
  40912c:	e7e3      	b.n	4090f6 <__ieee754_sqrt+0x132>
  40912e:	4602      	mov	r2, r0
  409130:	460b      	mov	r3, r1
  409132:	f001 fa67 	bl	40a604 <__aeabi_dsub>
  409136:	4602      	mov	r2, r0
  409138:	460b      	mov	r3, r1
  40913a:	f001 fd41 	bl	40abc0 <__aeabi_ddiv>
  40913e:	e7b4      	b.n	4090aa <__ieee754_sqrt+0xe6>
  409140:	7ff00000 	.word	0x7ff00000
  409144:	00000000 	.word	0x00000000

00409148 <__kernel_cos>:
  409148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40914c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  409150:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  409154:	b085      	sub	sp, #20
  409156:	460c      	mov	r4, r1
  409158:	4692      	mov	sl, r2
  40915a:	469b      	mov	fp, r3
  40915c:	4605      	mov	r5, r0
  40915e:	da6b      	bge.n	409238 <__kernel_cos+0xf0>
  409160:	f001 feb4 	bl	40aecc <__aeabi_d2iz>
  409164:	2800      	cmp	r0, #0
  409166:	f000 80e8 	beq.w	40933a <__kernel_cos+0x1f2>
  40916a:	462a      	mov	r2, r5
  40916c:	4623      	mov	r3, r4
  40916e:	4628      	mov	r0, r5
  409170:	4621      	mov	r1, r4
  409172:	f001 fbfb 	bl	40a96c <__aeabi_dmul>
  409176:	a374      	add	r3, pc, #464	; (adr r3, 409348 <__kernel_cos+0x200>)
  409178:	e9d3 2300 	ldrd	r2, r3, [r3]
  40917c:	4680      	mov	r8, r0
  40917e:	4689      	mov	r9, r1
  409180:	f001 fbf4 	bl	40a96c <__aeabi_dmul>
  409184:	a372      	add	r3, pc, #456	; (adr r3, 409350 <__kernel_cos+0x208>)
  409186:	e9d3 2300 	ldrd	r2, r3, [r3]
  40918a:	f001 fa3d 	bl	40a608 <__adddf3>
  40918e:	4642      	mov	r2, r8
  409190:	464b      	mov	r3, r9
  409192:	f001 fbeb 	bl	40a96c <__aeabi_dmul>
  409196:	a370      	add	r3, pc, #448	; (adr r3, 409358 <__kernel_cos+0x210>)
  409198:	e9d3 2300 	ldrd	r2, r3, [r3]
  40919c:	f001 fa32 	bl	40a604 <__aeabi_dsub>
  4091a0:	4642      	mov	r2, r8
  4091a2:	464b      	mov	r3, r9
  4091a4:	f001 fbe2 	bl	40a96c <__aeabi_dmul>
  4091a8:	a36d      	add	r3, pc, #436	; (adr r3, 409360 <__kernel_cos+0x218>)
  4091aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4091ae:	f001 fa2b 	bl	40a608 <__adddf3>
  4091b2:	4642      	mov	r2, r8
  4091b4:	464b      	mov	r3, r9
  4091b6:	f001 fbd9 	bl	40a96c <__aeabi_dmul>
  4091ba:	a36b      	add	r3, pc, #428	; (adr r3, 409368 <__kernel_cos+0x220>)
  4091bc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4091c0:	f001 fa20 	bl	40a604 <__aeabi_dsub>
  4091c4:	4642      	mov	r2, r8
  4091c6:	464b      	mov	r3, r9
  4091c8:	f001 fbd0 	bl	40a96c <__aeabi_dmul>
  4091cc:	a368      	add	r3, pc, #416	; (adr r3, 409370 <__kernel_cos+0x228>)
  4091ce:	e9d3 2300 	ldrd	r2, r3, [r3]
  4091d2:	f001 fa19 	bl	40a608 <__adddf3>
  4091d6:	4642      	mov	r2, r8
  4091d8:	464b      	mov	r3, r9
  4091da:	f001 fbc7 	bl	40a96c <__aeabi_dmul>
  4091de:	e9cd 0100 	strd	r0, r1, [sp]
  4091e2:	2200      	movs	r2, #0
  4091e4:	4b64      	ldr	r3, [pc, #400]	; (409378 <__kernel_cos+0x230>)
  4091e6:	4640      	mov	r0, r8
  4091e8:	4649      	mov	r1, r9
  4091ea:	f001 fbbf 	bl	40a96c <__aeabi_dmul>
  4091ee:	e9dd 2300 	ldrd	r2, r3, [sp]
  4091f2:	4606      	mov	r6, r0
  4091f4:	460f      	mov	r7, r1
  4091f6:	4640      	mov	r0, r8
  4091f8:	4649      	mov	r1, r9
  4091fa:	f001 fbb7 	bl	40a96c <__aeabi_dmul>
  4091fe:	4652      	mov	r2, sl
  409200:	4680      	mov	r8, r0
  409202:	4689      	mov	r9, r1
  409204:	465b      	mov	r3, fp
  409206:	4628      	mov	r0, r5
  409208:	4621      	mov	r1, r4
  40920a:	f001 fbaf 	bl	40a96c <__aeabi_dmul>
  40920e:	4602      	mov	r2, r0
  409210:	460b      	mov	r3, r1
  409212:	4640      	mov	r0, r8
  409214:	4649      	mov	r1, r9
  409216:	f001 f9f5 	bl	40a604 <__aeabi_dsub>
  40921a:	4602      	mov	r2, r0
  40921c:	460b      	mov	r3, r1
  40921e:	4630      	mov	r0, r6
  409220:	4639      	mov	r1, r7
  409222:	f001 f9ef 	bl	40a604 <__aeabi_dsub>
  409226:	4602      	mov	r2, r0
  409228:	460b      	mov	r3, r1
  40922a:	2000      	movs	r0, #0
  40922c:	4953      	ldr	r1, [pc, #332]	; (40937c <__kernel_cos+0x234>)
  40922e:	f001 f9e9 	bl	40a604 <__aeabi_dsub>
  409232:	b005      	add	sp, #20
  409234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409238:	4602      	mov	r2, r0
  40923a:	460b      	mov	r3, r1
  40923c:	f001 fb96 	bl	40a96c <__aeabi_dmul>
  409240:	a341      	add	r3, pc, #260	; (adr r3, 409348 <__kernel_cos+0x200>)
  409242:	e9d3 2300 	ldrd	r2, r3, [r3]
  409246:	4680      	mov	r8, r0
  409248:	4689      	mov	r9, r1
  40924a:	f001 fb8f 	bl	40a96c <__aeabi_dmul>
  40924e:	a340      	add	r3, pc, #256	; (adr r3, 409350 <__kernel_cos+0x208>)
  409250:	e9d3 2300 	ldrd	r2, r3, [r3]
  409254:	f001 f9d8 	bl	40a608 <__adddf3>
  409258:	4642      	mov	r2, r8
  40925a:	464b      	mov	r3, r9
  40925c:	f001 fb86 	bl	40a96c <__aeabi_dmul>
  409260:	a33d      	add	r3, pc, #244	; (adr r3, 409358 <__kernel_cos+0x210>)
  409262:	e9d3 2300 	ldrd	r2, r3, [r3]
  409266:	f001 f9cd 	bl	40a604 <__aeabi_dsub>
  40926a:	4642      	mov	r2, r8
  40926c:	464b      	mov	r3, r9
  40926e:	f001 fb7d 	bl	40a96c <__aeabi_dmul>
  409272:	a33b      	add	r3, pc, #236	; (adr r3, 409360 <__kernel_cos+0x218>)
  409274:	e9d3 2300 	ldrd	r2, r3, [r3]
  409278:	f001 f9c6 	bl	40a608 <__adddf3>
  40927c:	4642      	mov	r2, r8
  40927e:	464b      	mov	r3, r9
  409280:	f001 fb74 	bl	40a96c <__aeabi_dmul>
  409284:	a338      	add	r3, pc, #224	; (adr r3, 409368 <__kernel_cos+0x220>)
  409286:	e9d3 2300 	ldrd	r2, r3, [r3]
  40928a:	f001 f9bb 	bl	40a604 <__aeabi_dsub>
  40928e:	4642      	mov	r2, r8
  409290:	464b      	mov	r3, r9
  409292:	f001 fb6b 	bl	40a96c <__aeabi_dmul>
  409296:	a336      	add	r3, pc, #216	; (adr r3, 409370 <__kernel_cos+0x228>)
  409298:	e9d3 2300 	ldrd	r2, r3, [r3]
  40929c:	f001 f9b4 	bl	40a608 <__adddf3>
  4092a0:	464b      	mov	r3, r9
  4092a2:	4642      	mov	r2, r8
  4092a4:	f001 fb62 	bl	40a96c <__aeabi_dmul>
  4092a8:	4b35      	ldr	r3, [pc, #212]	; (409380 <__kernel_cos+0x238>)
  4092aa:	429e      	cmp	r6, r3
  4092ac:	e9cd 0100 	strd	r0, r1, [sp]
  4092b0:	dd97      	ble.n	4091e2 <__kernel_cos+0x9a>
  4092b2:	4b34      	ldr	r3, [pc, #208]	; (409384 <__kernel_cos+0x23c>)
  4092b4:	429e      	cmp	r6, r3
  4092b6:	f04f 0200 	mov.w	r2, #0
  4092ba:	dc38      	bgt.n	40932e <__kernel_cos+0x1e6>
  4092bc:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
  4092c0:	2000      	movs	r0, #0
  4092c2:	492e      	ldr	r1, [pc, #184]	; (40937c <__kernel_cos+0x234>)
  4092c4:	4616      	mov	r6, r2
  4092c6:	461f      	mov	r7, r3
  4092c8:	f001 f99c 	bl	40a604 <__aeabi_dsub>
  4092cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4092d0:	2200      	movs	r2, #0
  4092d2:	4b29      	ldr	r3, [pc, #164]	; (409378 <__kernel_cos+0x230>)
  4092d4:	4640      	mov	r0, r8
  4092d6:	4649      	mov	r1, r9
  4092d8:	f001 fb48 	bl	40a96c <__aeabi_dmul>
  4092dc:	4632      	mov	r2, r6
  4092de:	463b      	mov	r3, r7
  4092e0:	f001 f990 	bl	40a604 <__aeabi_dsub>
  4092e4:	e9dd 2300 	ldrd	r2, r3, [sp]
  4092e8:	4606      	mov	r6, r0
  4092ea:	460f      	mov	r7, r1
  4092ec:	4640      	mov	r0, r8
  4092ee:	4649      	mov	r1, r9
  4092f0:	f001 fb3c 	bl	40a96c <__aeabi_dmul>
  4092f4:	4652      	mov	r2, sl
  4092f6:	4680      	mov	r8, r0
  4092f8:	4689      	mov	r9, r1
  4092fa:	465b      	mov	r3, fp
  4092fc:	4628      	mov	r0, r5
  4092fe:	4621      	mov	r1, r4
  409300:	f001 fb34 	bl	40a96c <__aeabi_dmul>
  409304:	4602      	mov	r2, r0
  409306:	460b      	mov	r3, r1
  409308:	4640      	mov	r0, r8
  40930a:	4649      	mov	r1, r9
  40930c:	f001 f97a 	bl	40a604 <__aeabi_dsub>
  409310:	4602      	mov	r2, r0
  409312:	460b      	mov	r3, r1
  409314:	4630      	mov	r0, r6
  409316:	4639      	mov	r1, r7
  409318:	f001 f974 	bl	40a604 <__aeabi_dsub>
  40931c:	4602      	mov	r2, r0
  40931e:	460b      	mov	r3, r1
  409320:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409324:	f001 f96e 	bl	40a604 <__aeabi_dsub>
  409328:	b005      	add	sp, #20
  40932a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40932e:	4b16      	ldr	r3, [pc, #88]	; (409388 <__kernel_cos+0x240>)
  409330:	4f16      	ldr	r7, [pc, #88]	; (40938c <__kernel_cos+0x244>)
  409332:	e9cd 2302 	strd	r2, r3, [sp, #8]
  409336:	2600      	movs	r6, #0
  409338:	e7ca      	b.n	4092d0 <__kernel_cos+0x188>
  40933a:	4910      	ldr	r1, [pc, #64]	; (40937c <__kernel_cos+0x234>)
  40933c:	2000      	movs	r0, #0
  40933e:	b005      	add	sp, #20
  409340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409344:	f3af 8000 	nop.w
  409348:	be8838d4 	.word	0xbe8838d4
  40934c:	bda8fae9 	.word	0xbda8fae9
  409350:	bdb4b1c4 	.word	0xbdb4b1c4
  409354:	3e21ee9e 	.word	0x3e21ee9e
  409358:	809c52ad 	.word	0x809c52ad
  40935c:	3e927e4f 	.word	0x3e927e4f
  409360:	19cb1590 	.word	0x19cb1590
  409364:	3efa01a0 	.word	0x3efa01a0
  409368:	16c15177 	.word	0x16c15177
  40936c:	3f56c16c 	.word	0x3f56c16c
  409370:	5555554c 	.word	0x5555554c
  409374:	3fa55555 	.word	0x3fa55555
  409378:	3fe00000 	.word	0x3fe00000
  40937c:	3ff00000 	.word	0x3ff00000
  409380:	3fd33332 	.word	0x3fd33332
  409384:	3fe90000 	.word	0x3fe90000
  409388:	3fe70000 	.word	0x3fe70000
  40938c:	3fd20000 	.word	0x3fd20000

00409390 <__kernel_rem_pio2>:
  409390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409394:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
  409398:	4c79      	ldr	r4, [pc, #484]	; (409580 <__kernel_rem_pio2+0x1f0>)
  40939a:	9ea6      	ldr	r6, [sp, #664]	; 0x298
  40939c:	4d79      	ldr	r5, [pc, #484]	; (409584 <__kernel_rem_pio2+0x1f4>)
  40939e:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
  4093a2:	9409      	str	r4, [sp, #36]	; 0x24
  4093a4:	4626      	mov	r6, r4
  4093a6:	1ed4      	subs	r4, r2, #3
  4093a8:	fb85 7504 	smull	r7, r5, r5, r4
  4093ac:	17e4      	asrs	r4, r4, #31
  4093ae:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
  4093b2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  4093b6:	461d      	mov	r5, r3
  4093b8:	930c      	str	r3, [sp, #48]	; 0x30
  4093ba:	1c63      	adds	r3, r4, #1
  4093bc:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
  4093c0:	3d01      	subs	r5, #1
  4093c2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4093c6:	9308      	str	r3, [sp, #32]
  4093c8:	462b      	mov	r3, r5
  4093ca:	940d      	str	r4, [sp, #52]	; 0x34
  4093cc:	9502      	str	r5, [sp, #8]
  4093ce:	1b65      	subs	r5, r4, r5
  4093d0:	18f4      	adds	r4, r6, r3
  4093d2:	9004      	str	r0, [sp, #16]
  4093d4:	910a      	str	r1, [sp, #40]	; 0x28
  4093d6:	d416      	bmi.n	409406 <__kernel_rem_pio2+0x76>
  4093d8:	442c      	add	r4, r5
  4093da:	3401      	adds	r4, #1
  4093dc:	ae22      	add	r6, sp, #136	; 0x88
  4093de:	9fa7      	ldr	r7, [sp, #668]	; 0x29c
  4093e0:	e008      	b.n	4093f4 <__kernel_rem_pio2+0x64>
  4093e2:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
  4093e6:	f001 fa5b 	bl	40a8a0 <__aeabi_i2d>
  4093ea:	3501      	adds	r5, #1
  4093ec:	42a5      	cmp	r5, r4
  4093ee:	e9e6 0102 	strd	r0, r1, [r6, #8]!
  4093f2:	d008      	beq.n	409406 <__kernel_rem_pio2+0x76>
  4093f4:	2d00      	cmp	r5, #0
  4093f6:	daf4      	bge.n	4093e2 <__kernel_rem_pio2+0x52>
  4093f8:	3501      	adds	r5, #1
  4093fa:	2000      	movs	r0, #0
  4093fc:	2100      	movs	r1, #0
  4093fe:	42a5      	cmp	r5, r4
  409400:	e9e6 0102 	strd	r0, r1, [r6, #8]!
  409404:	d1f6      	bne.n	4093f4 <__kernel_rem_pio2+0x64>
  409406:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409408:	2b00      	cmp	r3, #0
  40940a:	db31      	blt.n	409470 <__kernel_rem_pio2+0xe0>
  40940c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40940e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409410:	a974      	add	r1, sp, #464	; 0x1d0
  409412:	eb01 0bc2 	add.w	fp, r1, r2, lsl #3
  409416:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
  40941a:	9a02      	ldr	r2, [sp, #8]
  40941c:	a924      	add	r1, sp, #144	; 0x90
  40941e:	00db      	lsls	r3, r3, #3
  409420:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
  409424:	9301      	str	r3, [sp, #4]
  409426:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
  40942a:	9b02      	ldr	r3, [sp, #8]
  40942c:	2b00      	cmp	r3, #0
  40942e:	f2c0 8190 	blt.w	409752 <__kernel_rem_pio2+0x3c2>
  409432:	9b04      	ldr	r3, [sp, #16]
  409434:	f1a3 0508 	sub.w	r5, r3, #8
  409438:	9b01      	ldr	r3, [sp, #4]
  40943a:	464c      	mov	r4, r9
  40943c:	eb09 0803 	add.w	r8, r9, r3
  409440:	2600      	movs	r6, #0
  409442:	2700      	movs	r7, #0
  409444:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
  409448:	e874 0102 	ldrd	r0, r1, [r4], #-8
  40944c:	f001 fa8e 	bl	40a96c <__aeabi_dmul>
  409450:	4602      	mov	r2, r0
  409452:	460b      	mov	r3, r1
  409454:	4630      	mov	r0, r6
  409456:	4639      	mov	r1, r7
  409458:	f001 f8d6 	bl	40a608 <__adddf3>
  40945c:	4544      	cmp	r4, r8
  40945e:	4606      	mov	r6, r0
  409460:	460f      	mov	r7, r1
  409462:	d1ef      	bne.n	409444 <__kernel_rem_pio2+0xb4>
  409464:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  409468:	45da      	cmp	sl, fp
  40946a:	f109 0908 	add.w	r9, r9, #8
  40946e:	d1dc      	bne.n	40942a <__kernel_rem_pio2+0x9a>
  409470:	9d09      	ldr	r5, [sp, #36]	; 0x24
  409472:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
  409476:	3b02      	subs	r3, #2
  409478:	009b      	lsls	r3, r3, #2
  40947a:	1d1a      	adds	r2, r3, #4
  40947c:	a910      	add	r1, sp, #64	; 0x40
  40947e:	440a      	add	r2, r1
  409480:	440b      	add	r3, r1
  409482:	920f      	str	r2, [sp, #60]	; 0x3c
  409484:	930e      	str	r3, [sp, #56]	; 0x38
  409486:	ab9c      	add	r3, sp, #624	; 0x270
  409488:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40948c:	2d00      	cmp	r5, #0
  40948e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
  409492:	dd2b      	ble.n	4094ec <__kernel_rem_pio2+0x15c>
  409494:	ab9c      	add	r3, sp, #624	; 0x270
  409496:	eb03 04c5 	add.w	r4, r3, r5, lsl #3
  40949a:	3ca8      	subs	r4, #168	; 0xa8
  40949c:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
  4094a0:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
  4094a4:	2200      	movs	r2, #0
  4094a6:	4b38      	ldr	r3, [pc, #224]	; (409588 <__kernel_rem_pio2+0x1f8>)
  4094a8:	4630      	mov	r0, r6
  4094aa:	4639      	mov	r1, r7
  4094ac:	f001 fa5e 	bl	40a96c <__aeabi_dmul>
  4094b0:	f001 fd0c 	bl	40aecc <__aeabi_d2iz>
  4094b4:	f001 f9f4 	bl	40a8a0 <__aeabi_i2d>
  4094b8:	2200      	movs	r2, #0
  4094ba:	4b34      	ldr	r3, [pc, #208]	; (40958c <__kernel_rem_pio2+0x1fc>)
  4094bc:	4680      	mov	r8, r0
  4094be:	4689      	mov	r9, r1
  4094c0:	f001 fa54 	bl	40a96c <__aeabi_dmul>
  4094c4:	4602      	mov	r2, r0
  4094c6:	460b      	mov	r3, r1
  4094c8:	4630      	mov	r0, r6
  4094ca:	4639      	mov	r1, r7
  4094cc:	f001 f89a 	bl	40a604 <__aeabi_dsub>
  4094d0:	f001 fcfc 	bl	40aecc <__aeabi_d2iz>
  4094d4:	e874 2302 	ldrd	r2, r3, [r4], #-8
  4094d8:	f84a 0f04 	str.w	r0, [sl, #4]!
  4094dc:	4649      	mov	r1, r9
  4094de:	4640      	mov	r0, r8
  4094e0:	f001 f892 	bl	40a608 <__adddf3>
  4094e4:	455c      	cmp	r4, fp
  4094e6:	4606      	mov	r6, r0
  4094e8:	460f      	mov	r7, r1
  4094ea:	d1db      	bne.n	4094a4 <__kernel_rem_pio2+0x114>
  4094ec:	9c08      	ldr	r4, [sp, #32]
  4094ee:	4630      	mov	r0, r6
  4094f0:	4639      	mov	r1, r7
  4094f2:	4622      	mov	r2, r4
  4094f4:	f000 fffc 	bl	40a4f0 <scalbn>
  4094f8:	2200      	movs	r2, #0
  4094fa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  4094fe:	4606      	mov	r6, r0
  409500:	460f      	mov	r7, r1
  409502:	f001 fa33 	bl	40a96c <__aeabi_dmul>
  409506:	f000 ff63 	bl	40a3d0 <floor>
  40950a:	2200      	movs	r2, #0
  40950c:	4b20      	ldr	r3, [pc, #128]	; (409590 <__kernel_rem_pio2+0x200>)
  40950e:	f001 fa2d 	bl	40a96c <__aeabi_dmul>
  409512:	4602      	mov	r2, r0
  409514:	460b      	mov	r3, r1
  409516:	4630      	mov	r0, r6
  409518:	4639      	mov	r1, r7
  40951a:	f001 f873 	bl	40a604 <__aeabi_dsub>
  40951e:	460f      	mov	r7, r1
  409520:	4606      	mov	r6, r0
  409522:	f001 fcd3 	bl	40aecc <__aeabi_d2iz>
  409526:	4681      	mov	r9, r0
  409528:	f001 f9ba 	bl	40a8a0 <__aeabi_i2d>
  40952c:	4602      	mov	r2, r0
  40952e:	460b      	mov	r3, r1
  409530:	4630      	mov	r0, r6
  409532:	4639      	mov	r1, r7
  409534:	f001 f866 	bl	40a604 <__aeabi_dsub>
  409538:	2c00      	cmp	r4, #0
  40953a:	4606      	mov	r6, r0
  40953c:	460f      	mov	r7, r1
  40953e:	f340 80ef 	ble.w	409720 <__kernel_rem_pio2+0x390>
  409542:	1e69      	subs	r1, r5, #1
  409544:	aa10      	add	r2, sp, #64	; 0x40
  409546:	f1c4 0318 	rsb	r3, r4, #24
  40954a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40954e:	fa42 f003 	asr.w	r0, r2, r3
  409552:	fa00 f303 	lsl.w	r3, r0, r3
  409556:	1ad3      	subs	r3, r2, r3
  409558:	aa10      	add	r2, sp, #64	; 0x40
  40955a:	f1c4 0817 	rsb	r8, r4, #23
  40955e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  409562:	4481      	add	r9, r0
  409564:	fa43 f808 	asr.w	r8, r3, r8
  409568:	f1b8 0f00 	cmp.w	r8, #0
  40956c:	dd3d      	ble.n	4095ea <__kernel_rem_pio2+0x25a>
  40956e:	2d00      	cmp	r5, #0
  409570:	f109 0901 	add.w	r9, r9, #1
  409574:	f340 82d6 	ble.w	409b24 <__kernel_rem_pio2+0x794>
  409578:	2200      	movs	r2, #0
  40957a:	4614      	mov	r4, r2
  40957c:	a90f      	add	r1, sp, #60	; 0x3c
  40957e:	e011      	b.n	4095a4 <__kernel_rem_pio2+0x214>
  409580:	0040bec4 	.word	0x0040bec4
  409584:	2aaaaaab 	.word	0x2aaaaaab
  409588:	3e700000 	.word	0x3e700000
  40958c:	41700000 	.word	0x41700000
  409590:	40200000 	.word	0x40200000
  409594:	f1c3 7080 	rsb	r0, r3, #16777216	; 0x1000000
  409598:	b10b      	cbz	r3, 40959e <__kernel_rem_pio2+0x20e>
  40959a:	6008      	str	r0, [r1, #0]
  40959c:	2401      	movs	r4, #1
  40959e:	3201      	adds	r2, #1
  4095a0:	4295      	cmp	r5, r2
  4095a2:	dd0d      	ble.n	4095c0 <__kernel_rem_pio2+0x230>
  4095a4:	f851 3f04 	ldr.w	r3, [r1, #4]!
  4095a8:	2c00      	cmp	r4, #0
  4095aa:	d0f3      	beq.n	409594 <__kernel_rem_pio2+0x204>
  4095ac:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
  4095b0:	3201      	adds	r2, #1
  4095b2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
  4095b6:	4295      	cmp	r5, r2
  4095b8:	600b      	str	r3, [r1, #0]
  4095ba:	f04f 0401 	mov.w	r4, #1
  4095be:	dcf1      	bgt.n	4095a4 <__kernel_rem_pio2+0x214>
  4095c0:	9b08      	ldr	r3, [sp, #32]
  4095c2:	2b00      	cmp	r3, #0
  4095c4:	dd0d      	ble.n	4095e2 <__kernel_rem_pio2+0x252>
  4095c6:	2b01      	cmp	r3, #1
  4095c8:	f000 80b2 	beq.w	409730 <__kernel_rem_pio2+0x3a0>
  4095cc:	2b02      	cmp	r3, #2
  4095ce:	d108      	bne.n	4095e2 <__kernel_rem_pio2+0x252>
  4095d0:	1e6a      	subs	r2, r5, #1
  4095d2:	ab10      	add	r3, sp, #64	; 0x40
  4095d4:	a910      	add	r1, sp, #64	; 0x40
  4095d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4095da:	f3c3 0315 	ubfx	r3, r3, #0, #22
  4095de:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  4095e2:	f1b8 0f02 	cmp.w	r8, #2
  4095e6:	f000 8082 	beq.w	4096ee <__kernel_rem_pio2+0x35e>
  4095ea:	2200      	movs	r2, #0
  4095ec:	2300      	movs	r3, #0
  4095ee:	4630      	mov	r0, r6
  4095f0:	4639      	mov	r1, r7
  4095f2:	f001 fc23 	bl	40ae3c <__aeabi_dcmpeq>
  4095f6:	2800      	cmp	r0, #0
  4095f8:	f000 825e 	beq.w	409ab8 <__kernel_rem_pio2+0x728>
  4095fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4095fe:	f105 3bff 	add.w	fp, r5, #4294967295
  409602:	455b      	cmp	r3, fp
  409604:	dc10      	bgt.n	409628 <__kernel_rem_pio2+0x298>
  409606:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
  40960a:	aa10      	add	r2, sp, #64	; 0x40
  40960c:	3b01      	subs	r3, #1
  40960e:	980f      	ldr	r0, [sp, #60]	; 0x3c
  409610:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  409614:	2200      	movs	r2, #0
  409616:	f853 1904 	ldr.w	r1, [r3], #-4
  40961a:	4283      	cmp	r3, r0
  40961c:	ea42 0201 	orr.w	r2, r2, r1
  409620:	d1f9      	bne.n	409616 <__kernel_rem_pio2+0x286>
  409622:	2a00      	cmp	r2, #0
  409624:	f040 80b2 	bne.w	40978c <__kernel_rem_pio2+0x3fc>
  409628:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40962a:	aa10      	add	r2, sp, #64	; 0x40
  40962c:	3b01      	subs	r3, #1
  40962e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  409632:	2b00      	cmp	r3, #0
  409634:	f040 8274 	bne.w	409b20 <__kernel_rem_pio2+0x790>
  409638:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40963a:	2301      	movs	r3, #1
  40963c:	f852 1904 	ldr.w	r1, [r2], #-4
  409640:	3301      	adds	r3, #1
  409642:	2900      	cmp	r1, #0
  409644:	d0fa      	beq.n	40963c <__kernel_rem_pio2+0x2ac>
  409646:	18e9      	adds	r1, r5, r3
  409648:	1c6a      	adds	r2, r5, #1
  40964a:	428a      	cmp	r2, r1
  40964c:	910b      	str	r1, [sp, #44]	; 0x2c
  40964e:	dc49      	bgt.n	4096e4 <__kernel_rem_pio2+0x354>
  409650:	990d      	ldr	r1, [sp, #52]	; 0x34
  409652:	980c      	ldr	r0, [sp, #48]	; 0x30
  409654:	1851      	adds	r1, r2, r1
  409656:	00db      	lsls	r3, r3, #3
  409658:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
  40965c:	9305      	str	r3, [sp, #20]
  40965e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
  409660:	4405      	add	r5, r0
  409662:	3901      	subs	r1, #1
  409664:	00e8      	lsls	r0, r5, #3
  409666:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
  40966a:	ab24      	add	r3, sp, #144	; 0x90
  40966c:	00d2      	lsls	r2, r2, #3
  40966e:	eb03 0b00 	add.w	fp, r3, r0
  409672:	ab74      	add	r3, sp, #464	; 0x1d0
  409674:	4413      	add	r3, r2
  409676:	9301      	str	r3, [sp, #4]
  409678:	f1a2 0308 	sub.w	r3, r2, #8
  40967c:	9006      	str	r0, [sp, #24]
  40967e:	9307      	str	r3, [sp, #28]
  409680:	f04f 0900 	mov.w	r9, #0
  409684:	f85a 0f04 	ldr.w	r0, [sl, #4]!
  409688:	f001 f90a 	bl	40a8a0 <__aeabi_i2d>
  40968c:	9b02      	ldr	r3, [sp, #8]
  40968e:	2b00      	cmp	r3, #0
  409690:	e8eb 0102 	strd	r0, r1, [fp], #8
  409694:	db28      	blt.n	4096e8 <__kernel_rem_pio2+0x358>
  409696:	9b06      	ldr	r3, [sp, #24]
  409698:	eb03 0409 	add.w	r4, r3, r9
  40969c:	9b07      	ldr	r3, [sp, #28]
  40969e:	eb09 0803 	add.w	r8, r9, r3
  4096a2:	ab24      	add	r3, sp, #144	; 0x90
  4096a4:	441c      	add	r4, r3
  4096a6:	4498      	add	r8, r3
  4096a8:	9b04      	ldr	r3, [sp, #16]
  4096aa:	2600      	movs	r6, #0
  4096ac:	f1a3 0508 	sub.w	r5, r3, #8
  4096b0:	2700      	movs	r7, #0
  4096b2:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
  4096b6:	e874 0102 	ldrd	r0, r1, [r4], #-8
  4096ba:	f001 f957 	bl	40a96c <__aeabi_dmul>
  4096be:	4602      	mov	r2, r0
  4096c0:	460b      	mov	r3, r1
  4096c2:	4630      	mov	r0, r6
  4096c4:	4639      	mov	r1, r7
  4096c6:	f000 ff9f 	bl	40a608 <__adddf3>
  4096ca:	4544      	cmp	r4, r8
  4096cc:	4606      	mov	r6, r0
  4096ce:	460f      	mov	r7, r1
  4096d0:	d1ef      	bne.n	4096b2 <__kernel_rem_pio2+0x322>
  4096d2:	9b01      	ldr	r3, [sp, #4]
  4096d4:	e8e3 6702 	strd	r6, r7, [r3], #8
  4096d8:	9301      	str	r3, [sp, #4]
  4096da:	9b05      	ldr	r3, [sp, #20]
  4096dc:	f109 0908 	add.w	r9, r9, #8
  4096e0:	4599      	cmp	r9, r3
  4096e2:	d1cf      	bne.n	409684 <__kernel_rem_pio2+0x2f4>
  4096e4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4096e6:	e6ce      	b.n	409486 <__kernel_rem_pio2+0xf6>
  4096e8:	2600      	movs	r6, #0
  4096ea:	2700      	movs	r7, #0
  4096ec:	e7f1      	b.n	4096d2 <__kernel_rem_pio2+0x342>
  4096ee:	4632      	mov	r2, r6
  4096f0:	463b      	mov	r3, r7
  4096f2:	2000      	movs	r0, #0
  4096f4:	49b0      	ldr	r1, [pc, #704]	; (4099b8 <__kernel_rem_pio2+0x628>)
  4096f6:	f000 ff85 	bl	40a604 <__aeabi_dsub>
  4096fa:	4606      	mov	r6, r0
  4096fc:	460f      	mov	r7, r1
  4096fe:	2c00      	cmp	r4, #0
  409700:	f43f af73 	beq.w	4095ea <__kernel_rem_pio2+0x25a>
  409704:	9a08      	ldr	r2, [sp, #32]
  409706:	49ac      	ldr	r1, [pc, #688]	; (4099b8 <__kernel_rem_pio2+0x628>)
  409708:	2000      	movs	r0, #0
  40970a:	f000 fef1 	bl	40a4f0 <scalbn>
  40970e:	4602      	mov	r2, r0
  409710:	460b      	mov	r3, r1
  409712:	4630      	mov	r0, r6
  409714:	4639      	mov	r1, r7
  409716:	f000 ff75 	bl	40a604 <__aeabi_dsub>
  40971a:	4606      	mov	r6, r0
  40971c:	460f      	mov	r7, r1
  40971e:	e764      	b.n	4095ea <__kernel_rem_pio2+0x25a>
  409720:	d110      	bne.n	409744 <__kernel_rem_pio2+0x3b4>
  409722:	1e6b      	subs	r3, r5, #1
  409724:	aa10      	add	r2, sp, #64	; 0x40
  409726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40972a:	ea4f 58e3 	mov.w	r8, r3, asr #23
  40972e:	e71b      	b.n	409568 <__kernel_rem_pio2+0x1d8>
  409730:	1e6a      	subs	r2, r5, #1
  409732:	ab10      	add	r3, sp, #64	; 0x40
  409734:	a910      	add	r1, sp, #64	; 0x40
  409736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40973a:	f3c3 0316 	ubfx	r3, r3, #0, #23
  40973e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  409742:	e74e      	b.n	4095e2 <__kernel_rem_pio2+0x252>
  409744:	2200      	movs	r2, #0
  409746:	4b9d      	ldr	r3, [pc, #628]	; (4099bc <__kernel_rem_pio2+0x62c>)
  409748:	f001 fb96 	bl	40ae78 <__aeabi_dcmpge>
  40974c:	b958      	cbnz	r0, 409766 <__kernel_rem_pio2+0x3d6>
  40974e:	4680      	mov	r8, r0
  409750:	e74b      	b.n	4095ea <__kernel_rem_pio2+0x25a>
  409752:	2600      	movs	r6, #0
  409754:	2700      	movs	r7, #0
  409756:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  40975a:	45da      	cmp	sl, fp
  40975c:	f109 0908 	add.w	r9, r9, #8
  409760:	f47f ae63 	bne.w	40942a <__kernel_rem_pio2+0x9a>
  409764:	e684      	b.n	409470 <__kernel_rem_pio2+0xe0>
  409766:	2d00      	cmp	r5, #0
  409768:	f109 0901 	add.w	r9, r9, #1
  40976c:	bfc8      	it	gt
  40976e:	f04f 0802 	movgt.w	r8, #2
  409772:	f73f af01 	bgt.w	409578 <__kernel_rem_pio2+0x1e8>
  409776:	4632      	mov	r2, r6
  409778:	463b      	mov	r3, r7
  40977a:	2000      	movs	r0, #0
  40977c:	498e      	ldr	r1, [pc, #568]	; (4099b8 <__kernel_rem_pio2+0x628>)
  40977e:	f000 ff41 	bl	40a604 <__aeabi_dsub>
  409782:	f04f 0802 	mov.w	r8, #2
  409786:	4606      	mov	r6, r0
  409788:	460f      	mov	r7, r1
  40978a:	e72e      	b.n	4095ea <__kernel_rem_pio2+0x25a>
  40978c:	ab10      	add	r3, sp, #64	; 0x40
  40978e:	9a08      	ldr	r2, [sp, #32]
  409790:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
  409794:	f8cd 9014 	str.w	r9, [sp, #20]
  409798:	3a18      	subs	r2, #24
  40979a:	f8cd 8004 	str.w	r8, [sp, #4]
  40979e:	9208      	str	r2, [sp, #32]
  4097a0:	b96b      	cbnz	r3, 4097be <__kernel_rem_pio2+0x42e>
  4097a2:	f10b 4380 	add.w	r3, fp, #1073741824	; 0x40000000
  4097a6:	3b01      	subs	r3, #1
  4097a8:	a910      	add	r1, sp, #64	; 0x40
  4097aa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  4097ae:	f853 1904 	ldr.w	r1, [r3], #-4
  4097b2:	f10b 3bff 	add.w	fp, fp, #4294967295
  4097b6:	3a18      	subs	r2, #24
  4097b8:	2900      	cmp	r1, #0
  4097ba:	d0f8      	beq.n	4097ae <__kernel_rem_pio2+0x41e>
  4097bc:	9208      	str	r2, [sp, #32]
  4097be:	9a08      	ldr	r2, [sp, #32]
  4097c0:	497d      	ldr	r1, [pc, #500]	; (4099b8 <__kernel_rem_pio2+0x628>)
  4097c2:	2000      	movs	r0, #0
  4097c4:	f000 fe94 	bl	40a4f0 <scalbn>
  4097c8:	f1bb 0f00 	cmp.w	fp, #0
  4097cc:	4604      	mov	r4, r0
  4097ce:	460d      	mov	r5, r1
  4097d0:	f2c0 81b8 	blt.w	409b44 <__kernel_rem_pio2+0x7b4>
  4097d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
  4097d8:	f50d 78e8 	add.w	r8, sp, #464	; 0x1d0
  4097dc:	aa10      	add	r2, sp, #64	; 0x40
  4097de:	eb02 068b 	add.w	r6, r2, fp, lsl #2
  4097e2:	eb08 0903 	add.w	r9, r8, r3
  4097e6:	9304      	str	r3, [sp, #16]
  4097e8:	3604      	adds	r6, #4
  4097ea:	f109 0708 	add.w	r7, r9, #8
  4097ee:	f856 0d04 	ldr.w	r0, [r6, #-4]!
  4097f2:	f001 f855 	bl	40a8a0 <__aeabi_i2d>
  4097f6:	4622      	mov	r2, r4
  4097f8:	462b      	mov	r3, r5
  4097fa:	f001 f8b7 	bl	40a96c <__aeabi_dmul>
  4097fe:	2200      	movs	r2, #0
  409800:	e967 0102 	strd	r0, r1, [r7, #-8]!
  409804:	4b6e      	ldr	r3, [pc, #440]	; (4099c0 <__kernel_rem_pio2+0x630>)
  409806:	4620      	mov	r0, r4
  409808:	4629      	mov	r1, r5
  40980a:	f001 f8af 	bl	40a96c <__aeabi_dmul>
  40980e:	45b8      	cmp	r8, r7
  409810:	4604      	mov	r4, r0
  409812:	460d      	mov	r5, r1
  409814:	d1eb      	bne.n	4097ee <__kernel_rem_pio2+0x45e>
  409816:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
  40981a:	464b      	mov	r3, r9
  40981c:	f8cd a008 	str.w	sl, [sp, #8]
  409820:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  409824:	f8cd b018 	str.w	fp, [sp, #24]
  409828:	f04f 0900 	mov.w	r9, #0
  40982c:	469b      	mov	fp, r3
  40982e:	f1ba 0f00 	cmp.w	sl, #0
  409832:	f2c0 812a 	blt.w	409a8a <__kernel_rem_pio2+0x6fa>
  409836:	f8df 818c 	ldr.w	r8, [pc, #396]	; 4099c4 <__kernel_rem_pio2+0x634>
  40983a:	465d      	mov	r5, fp
  40983c:	a35c      	add	r3, pc, #368	; (adr r3, 4099b0 <__kernel_rem_pio2+0x620>)
  40983e:	e9d3 2300 	ldrd	r2, r3, [r3]
  409842:	2600      	movs	r6, #0
  409844:	2700      	movs	r7, #0
  409846:	2400      	movs	r4, #0
  409848:	e003      	b.n	409852 <__kernel_rem_pio2+0x4c2>
  40984a:	45a1      	cmp	r9, r4
  40984c:	db10      	blt.n	409870 <__kernel_rem_pio2+0x4e0>
  40984e:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
  409852:	e8f5 0102 	ldrd	r0, r1, [r5], #8
  409856:	f001 f889 	bl	40a96c <__aeabi_dmul>
  40985a:	4602      	mov	r2, r0
  40985c:	460b      	mov	r3, r1
  40985e:	4630      	mov	r0, r6
  409860:	4639      	mov	r1, r7
  409862:	f000 fed1 	bl	40a608 <__adddf3>
  409866:	3401      	adds	r4, #1
  409868:	45a2      	cmp	sl, r4
  40986a:	4606      	mov	r6, r0
  40986c:	460f      	mov	r7, r1
  40986e:	daec      	bge.n	40984a <__kernel_rem_pio2+0x4ba>
  409870:	9b02      	ldr	r3, [sp, #8]
  409872:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  409876:	f1ab 0b08 	sub.w	fp, fp, #8
  40987a:	e9c3 6700 	strd	r6, r7, [r3]
  40987e:	ab72      	add	r3, sp, #456	; 0x1c8
  409880:	455b      	cmp	r3, fp
  409882:	f109 0901 	add.w	r9, r9, #1
  409886:	d1d2      	bne.n	40982e <__kernel_rem_pio2+0x49e>
  409888:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  40988a:	f8dd b018 	ldr.w	fp, [sp, #24]
  40988e:	f8dd a008 	ldr.w	sl, [sp, #8]
  409892:	2b03      	cmp	r3, #3
  409894:	f200 8083 	bhi.w	40999e <__kernel_rem_pio2+0x60e>
  409898:	e8df f013 	tbh	[pc, r3, lsl #1]
  40989c:	009600d5 	.word	0x009600d5
  4098a0:	00040096 	.word	0x00040096
  4098a4:	f1bb 0f00 	cmp.w	fp, #0
  4098a8:	f340 8156 	ble.w	409b58 <__kernel_rem_pio2+0x7c8>
  4098ac:	9b04      	ldr	r3, [sp, #16]
  4098ae:	f8cd b008 	str.w	fp, [sp, #8]
  4098b2:	eb0a 0803 	add.w	r8, sl, r3
  4098b6:	e9d8 6700 	ldrd	r6, r7, [r8]
  4098ba:	46d3      	mov	fp, sl
  4098bc:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
  4098c0:	4632      	mov	r2, r6
  4098c2:	463b      	mov	r3, r7
  4098c4:	4648      	mov	r0, r9
  4098c6:	4651      	mov	r1, sl
  4098c8:	f000 fe9e 	bl	40a608 <__adddf3>
  4098cc:	4604      	mov	r4, r0
  4098ce:	460d      	mov	r5, r1
  4098d0:	4602      	mov	r2, r0
  4098d2:	460b      	mov	r3, r1
  4098d4:	4648      	mov	r0, r9
  4098d6:	4651      	mov	r1, sl
  4098d8:	f000 fe94 	bl	40a604 <__aeabi_dsub>
  4098dc:	4632      	mov	r2, r6
  4098de:	463b      	mov	r3, r7
  4098e0:	f000 fe92 	bl	40a608 <__adddf3>
  4098e4:	e9c8 0100 	strd	r0, r1, [r8]
  4098e8:	e968 4502 	strd	r4, r5, [r8, #-8]!
  4098ec:	45c3      	cmp	fp, r8
  4098ee:	4626      	mov	r6, r4
  4098f0:	462f      	mov	r7, r5
  4098f2:	d1e3      	bne.n	4098bc <__kernel_rem_pio2+0x52c>
  4098f4:	46da      	mov	sl, fp
  4098f6:	f8dd b008 	ldr.w	fp, [sp, #8]
  4098fa:	f1bb 0f01 	cmp.w	fp, #1
  4098fe:	f340 812b 	ble.w	409b58 <__kernel_rem_pio2+0x7c8>
  409902:	9b04      	ldr	r3, [sp, #16]
  409904:	4453      	add	r3, sl
  409906:	e9d3 6700 	ldrd	r6, r7, [r3]
  40990a:	4698      	mov	r8, r3
  40990c:	4699      	mov	r9, r3
  40990e:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
  409912:	e959 3402 	ldrd	r3, r4, [r9, #-8]
  409916:	4630      	mov	r0, r6
  409918:	e9cd 3402 	strd	r3, r4, [sp, #8]
  40991c:	461a      	mov	r2, r3
  40991e:	4639      	mov	r1, r7
  409920:	4623      	mov	r3, r4
  409922:	f000 fe71 	bl	40a608 <__adddf3>
  409926:	4604      	mov	r4, r0
  409928:	460d      	mov	r5, r1
  40992a:	4602      	mov	r2, r0
  40992c:	460b      	mov	r3, r1
  40992e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409932:	f000 fe67 	bl	40a604 <__aeabi_dsub>
  409936:	4632      	mov	r2, r6
  409938:	463b      	mov	r3, r7
  40993a:	f000 fe65 	bl	40a608 <__adddf3>
  40993e:	e9c9 0100 	strd	r0, r1, [r9]
  409942:	e969 4502 	strd	r4, r5, [r9, #-8]!
  409946:	45cb      	cmp	fp, r9
  409948:	4626      	mov	r6, r4
  40994a:	462f      	mov	r7, r5
  40994c:	d1e1      	bne.n	409912 <__kernel_rem_pio2+0x582>
  40994e:	2300      	movs	r3, #0
  409950:	f108 0808 	add.w	r8, r8, #8
  409954:	461d      	mov	r5, r3
  409956:	ac50      	add	r4, sp, #320	; 0x140
  409958:	4618      	mov	r0, r3
  40995a:	4629      	mov	r1, r5
  40995c:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
  409960:	f000 fe52 	bl	40a608 <__adddf3>
  409964:	4544      	cmp	r4, r8
  409966:	4603      	mov	r3, r0
  409968:	460d      	mov	r5, r1
  40996a:	d1f5      	bne.n	409958 <__kernel_rem_pio2+0x5c8>
  40996c:	9a01      	ldr	r2, [sp, #4]
  40996e:	2a00      	cmp	r2, #0
  409970:	f000 80da 	beq.w	409b28 <__kernel_rem_pio2+0x798>
  409974:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  409976:	f8da 4004 	ldr.w	r4, [sl, #4]
  40997a:	f8da 200c 	ldr.w	r2, [sl, #12]
  40997e:	f8da 1000 	ldr.w	r1, [sl]
  409982:	f8da 0008 	ldr.w	r0, [sl, #8]
  409986:	613b      	str	r3, [r7, #16]
  409988:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
  40998c:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
  409990:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
  409994:	617d      	str	r5, [r7, #20]
  409996:	607c      	str	r4, [r7, #4]
  409998:	60fb      	str	r3, [r7, #12]
  40999a:	6039      	str	r1, [r7, #0]
  40999c:	60b8      	str	r0, [r7, #8]
  40999e:	9b05      	ldr	r3, [sp, #20]
  4099a0:	f003 0007 	and.w	r0, r3, #7
  4099a4:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  4099a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4099ac:	f3af 8000 	nop.w
  4099b0:	40000000 	.word	0x40000000
  4099b4:	3ff921fb 	.word	0x3ff921fb
  4099b8:	3ff00000 	.word	0x3ff00000
  4099bc:	3fe00000 	.word	0x3fe00000
  4099c0:	3e700000 	.word	0x3e700000
  4099c4:	0040bed8 	.word	0x0040bed8
  4099c8:	9c04      	ldr	r4, [sp, #16]
  4099ca:	2600      	movs	r6, #0
  4099cc:	3408      	adds	r4, #8
  4099ce:	4454      	add	r4, sl
  4099d0:	4633      	mov	r3, r6
  4099d2:	4630      	mov	r0, r6
  4099d4:	4619      	mov	r1, r3
  4099d6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  4099da:	f000 fe15 	bl	40a608 <__adddf3>
  4099de:	4554      	cmp	r4, sl
  4099e0:	4606      	mov	r6, r0
  4099e2:	460b      	mov	r3, r1
  4099e4:	d1f5      	bne.n	4099d2 <__kernel_rem_pio2+0x642>
  4099e6:	9a01      	ldr	r2, [sp, #4]
  4099e8:	4630      	mov	r0, r6
  4099ea:	4619      	mov	r1, r3
  4099ec:	2a00      	cmp	r2, #0
  4099ee:	d04f      	beq.n	409a90 <__kernel_rem_pio2+0x700>
  4099f0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4099f2:	f103 4400 	add.w	r4, r3, #2147483648	; 0x80000000
  4099f6:	4632      	mov	r2, r6
  4099f8:	6044      	str	r4, [r0, #4]
  4099fa:	6006      	str	r6, [r0, #0]
  4099fc:	e9da 0100 	ldrd	r0, r1, [sl]
  409a00:	f000 fe00 	bl	40a604 <__aeabi_dsub>
  409a04:	f1bb 0f00 	cmp.w	fp, #0
  409a08:	4602      	mov	r2, r0
  409a0a:	460b      	mov	r3, r1
  409a0c:	dd0d      	ble.n	409a2a <__kernel_rem_pio2+0x69a>
  409a0e:	2401      	movs	r4, #1
  409a10:	4610      	mov	r0, r2
  409a12:	4619      	mov	r1, r3
  409a14:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
  409a18:	f000 fdf6 	bl	40a608 <__adddf3>
  409a1c:	3401      	adds	r4, #1
  409a1e:	45a3      	cmp	fp, r4
  409a20:	4602      	mov	r2, r0
  409a22:	460b      	mov	r3, r1
  409a24:	daf4      	bge.n	409a10 <__kernel_rem_pio2+0x680>
  409a26:	9901      	ldr	r1, [sp, #4]
  409a28:	b109      	cbz	r1, 409a2e <__kernel_rem_pio2+0x69e>
  409a2a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  409a2e:	4619      	mov	r1, r3
  409a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409a32:	4610      	mov	r0, r2
  409a34:	e9c3 0102 	strd	r0, r1, [r3, #8]
  409a38:	9b05      	ldr	r3, [sp, #20]
  409a3a:	f003 0007 	and.w	r0, r3, #7
  409a3e:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  409a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409a46:	9b04      	ldr	r3, [sp, #16]
  409a48:	2200      	movs	r2, #0
  409a4a:	3308      	adds	r3, #8
  409a4c:	449a      	add	sl, r3
  409a4e:	4613      	mov	r3, r2
  409a50:	4610      	mov	r0, r2
  409a52:	4619      	mov	r1, r3
  409a54:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
  409a58:	f000 fdd6 	bl	40a608 <__adddf3>
  409a5c:	f10b 3bff 	add.w	fp, fp, #4294967295
  409a60:	f1bb 3fff 	cmp.w	fp, #4294967295
  409a64:	4602      	mov	r2, r0
  409a66:	460b      	mov	r3, r1
  409a68:	d1f2      	bne.n	409a50 <__kernel_rem_pio2+0x6c0>
  409a6a:	9901      	ldr	r1, [sp, #4]
  409a6c:	b109      	cbz	r1, 409a72 <__kernel_rem_pio2+0x6e2>
  409a6e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  409a72:	4619      	mov	r1, r3
  409a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409a76:	4610      	mov	r0, r2
  409a78:	e9c3 0100 	strd	r0, r1, [r3]
  409a7c:	9b05      	ldr	r3, [sp, #20]
  409a7e:	f003 0007 	and.w	r0, r3, #7
  409a82:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  409a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409a8a:	2600      	movs	r6, #0
  409a8c:	2700      	movs	r7, #0
  409a8e:	e6ef      	b.n	409870 <__kernel_rem_pio2+0x4e0>
  409a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409a92:	4632      	mov	r2, r6
  409a94:	e9c3 0100 	strd	r0, r1, [r3]
  409a98:	460b      	mov	r3, r1
  409a9a:	e9da 0100 	ldrd	r0, r1, [sl]
  409a9e:	f000 fdb1 	bl	40a604 <__aeabi_dsub>
  409aa2:	f1bb 0f00 	cmp.w	fp, #0
  409aa6:	4602      	mov	r2, r0
  409aa8:	460b      	mov	r3, r1
  409aaa:	dcb0      	bgt.n	409a0e <__kernel_rem_pio2+0x67e>
  409aac:	4619      	mov	r1, r3
  409aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409ab0:	4610      	mov	r0, r2
  409ab2:	e9c3 0102 	strd	r0, r1, [r3, #8]
  409ab6:	e7bf      	b.n	409a38 <__kernel_rem_pio2+0x6a8>
  409ab8:	9b08      	ldr	r3, [sp, #32]
  409aba:	f8cd 9014 	str.w	r9, [sp, #20]
  409abe:	425a      	negs	r2, r3
  409ac0:	4630      	mov	r0, r6
  409ac2:	4639      	mov	r1, r7
  409ac4:	f8cd 8004 	str.w	r8, [sp, #4]
  409ac8:	f000 fd12 	bl	40a4f0 <scalbn>
  409acc:	2200      	movs	r2, #0
  409ace:	4b2c      	ldr	r3, [pc, #176]	; (409b80 <__kernel_rem_pio2+0x7f0>)
  409ad0:	4606      	mov	r6, r0
  409ad2:	460f      	mov	r7, r1
  409ad4:	f001 f9d0 	bl	40ae78 <__aeabi_dcmpge>
  409ad8:	2800      	cmp	r0, #0
  409ada:	d040      	beq.n	409b5e <__kernel_rem_pio2+0x7ce>
  409adc:	2200      	movs	r2, #0
  409ade:	4b29      	ldr	r3, [pc, #164]	; (409b84 <__kernel_rem_pio2+0x7f4>)
  409ae0:	4630      	mov	r0, r6
  409ae2:	4639      	mov	r1, r7
  409ae4:	f000 ff42 	bl	40a96c <__aeabi_dmul>
  409ae8:	f001 f9f0 	bl	40aecc <__aeabi_d2iz>
  409aec:	4604      	mov	r4, r0
  409aee:	f000 fed7 	bl	40a8a0 <__aeabi_i2d>
  409af2:	2200      	movs	r2, #0
  409af4:	4b22      	ldr	r3, [pc, #136]	; (409b80 <__kernel_rem_pio2+0x7f0>)
  409af6:	f000 ff39 	bl	40a96c <__aeabi_dmul>
  409afa:	460b      	mov	r3, r1
  409afc:	4602      	mov	r2, r0
  409afe:	4639      	mov	r1, r7
  409b00:	4630      	mov	r0, r6
  409b02:	f000 fd7f 	bl	40a604 <__aeabi_dsub>
  409b06:	f001 f9e1 	bl	40aecc <__aeabi_d2iz>
  409b0a:	9b08      	ldr	r3, [sp, #32]
  409b0c:	3318      	adds	r3, #24
  409b0e:	f105 0b01 	add.w	fp, r5, #1
  409b12:	9308      	str	r3, [sp, #32]
  409b14:	ab10      	add	r3, sp, #64	; 0x40
  409b16:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
  409b1a:	f843 402b 	str.w	r4, [r3, fp, lsl #2]
  409b1e:	e64e      	b.n	4097be <__kernel_rem_pio2+0x42e>
  409b20:	2301      	movs	r3, #1
  409b22:	e590      	b.n	409646 <__kernel_rem_pio2+0x2b6>
  409b24:	2400      	movs	r4, #0
  409b26:	e54b      	b.n	4095c0 <__kernel_rem_pio2+0x230>
  409b28:	4618      	mov	r0, r3
  409b2a:	4629      	mov	r1, r5
  409b2c:	e9da 2300 	ldrd	r2, r3, [sl]
  409b30:	e9da 4502 	ldrd	r4, r5, [sl, #8]
  409b34:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  409b36:	e9c7 0104 	strd	r0, r1, [r7, #16]
  409b3a:	e9c7 2300 	strd	r2, r3, [r7]
  409b3e:	e9c7 4502 	strd	r4, r5, [r7, #8]
  409b42:	e72c      	b.n	40999e <__kernel_rem_pio2+0x60e>
  409b44:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  409b46:	2b03      	cmp	r3, #3
  409b48:	f63f af29 	bhi.w	40999e <__kernel_rem_pio2+0x60e>
  409b4c:	e8df f003 	tbb	[pc, r3]
  409b50:	02101015 	.word	0x02101015
  409b54:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
  409b58:	2300      	movs	r3, #0
  409b5a:	461d      	mov	r5, r3
  409b5c:	e706      	b.n	40996c <__kernel_rem_pio2+0x5dc>
  409b5e:	4630      	mov	r0, r6
  409b60:	4639      	mov	r1, r7
  409b62:	f001 f9b3 	bl	40aecc <__aeabi_d2iz>
  409b66:	ab10      	add	r3, sp, #64	; 0x40
  409b68:	46ab      	mov	fp, r5
  409b6a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
  409b6e:	e626      	b.n	4097be <__kernel_rem_pio2+0x42e>
  409b70:	2600      	movs	r6, #0
  409b72:	4633      	mov	r3, r6
  409b74:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
  409b78:	e735      	b.n	4099e6 <__kernel_rem_pio2+0x656>
  409b7a:	2200      	movs	r2, #0
  409b7c:	4613      	mov	r3, r2
  409b7e:	e774      	b.n	409a6a <__kernel_rem_pio2+0x6da>
  409b80:	41700000 	.word	0x41700000
  409b84:	3e700000 	.word	0x3e700000

00409b88 <__kernel_sin>:
  409b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409b8c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  409b90:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  409b94:	b085      	sub	sp, #20
  409b96:	460c      	mov	r4, r1
  409b98:	4690      	mov	r8, r2
  409b9a:	4699      	mov	r9, r3
  409b9c:	4605      	mov	r5, r0
  409b9e:	da04      	bge.n	409baa <__kernel_sin+0x22>
  409ba0:	f001 f994 	bl	40aecc <__aeabi_d2iz>
  409ba4:	2800      	cmp	r0, #0
  409ba6:	f000 8085 	beq.w	409cb4 <__kernel_sin+0x12c>
  409baa:	462a      	mov	r2, r5
  409bac:	4623      	mov	r3, r4
  409bae:	4628      	mov	r0, r5
  409bb0:	4621      	mov	r1, r4
  409bb2:	f000 fedb 	bl	40a96c <__aeabi_dmul>
  409bb6:	4606      	mov	r6, r0
  409bb8:	460f      	mov	r7, r1
  409bba:	4602      	mov	r2, r0
  409bbc:	460b      	mov	r3, r1
  409bbe:	4628      	mov	r0, r5
  409bc0:	4621      	mov	r1, r4
  409bc2:	f000 fed3 	bl	40a96c <__aeabi_dmul>
  409bc6:	a33e      	add	r3, pc, #248	; (adr r3, 409cc0 <__kernel_sin+0x138>)
  409bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
  409bcc:	4682      	mov	sl, r0
  409bce:	468b      	mov	fp, r1
  409bd0:	4630      	mov	r0, r6
  409bd2:	4639      	mov	r1, r7
  409bd4:	f000 feca 	bl	40a96c <__aeabi_dmul>
  409bd8:	a33b      	add	r3, pc, #236	; (adr r3, 409cc8 <__kernel_sin+0x140>)
  409bda:	e9d3 2300 	ldrd	r2, r3, [r3]
  409bde:	f000 fd11 	bl	40a604 <__aeabi_dsub>
  409be2:	4632      	mov	r2, r6
  409be4:	463b      	mov	r3, r7
  409be6:	f000 fec1 	bl	40a96c <__aeabi_dmul>
  409bea:	a339      	add	r3, pc, #228	; (adr r3, 409cd0 <__kernel_sin+0x148>)
  409bec:	e9d3 2300 	ldrd	r2, r3, [r3]
  409bf0:	f000 fd0a 	bl	40a608 <__adddf3>
  409bf4:	4632      	mov	r2, r6
  409bf6:	463b      	mov	r3, r7
  409bf8:	f000 feb8 	bl	40a96c <__aeabi_dmul>
  409bfc:	a336      	add	r3, pc, #216	; (adr r3, 409cd8 <__kernel_sin+0x150>)
  409bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
  409c02:	f000 fcff 	bl	40a604 <__aeabi_dsub>
  409c06:	4632      	mov	r2, r6
  409c08:	463b      	mov	r3, r7
  409c0a:	f000 feaf 	bl	40a96c <__aeabi_dmul>
  409c0e:	a334      	add	r3, pc, #208	; (adr r3, 409ce0 <__kernel_sin+0x158>)
  409c10:	e9d3 2300 	ldrd	r2, r3, [r3]
  409c14:	f000 fcf8 	bl	40a608 <__adddf3>
  409c18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409c1a:	e9cd 0100 	strd	r0, r1, [sp]
  409c1e:	b39b      	cbz	r3, 409c88 <__kernel_sin+0x100>
  409c20:	2200      	movs	r2, #0
  409c22:	4b33      	ldr	r3, [pc, #204]	; (409cf0 <__kernel_sin+0x168>)
  409c24:	4640      	mov	r0, r8
  409c26:	4649      	mov	r1, r9
  409c28:	f000 fea0 	bl	40a96c <__aeabi_dmul>
  409c2c:	e9dd 2300 	ldrd	r2, r3, [sp]
  409c30:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409c34:	4650      	mov	r0, sl
  409c36:	4659      	mov	r1, fp
  409c38:	f000 fe98 	bl	40a96c <__aeabi_dmul>
  409c3c:	4602      	mov	r2, r0
  409c3e:	460b      	mov	r3, r1
  409c40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409c44:	f000 fcde 	bl	40a604 <__aeabi_dsub>
  409c48:	4632      	mov	r2, r6
  409c4a:	463b      	mov	r3, r7
  409c4c:	f000 fe8e 	bl	40a96c <__aeabi_dmul>
  409c50:	4642      	mov	r2, r8
  409c52:	464b      	mov	r3, r9
  409c54:	f000 fcd6 	bl	40a604 <__aeabi_dsub>
  409c58:	a323      	add	r3, pc, #140	; (adr r3, 409ce8 <__kernel_sin+0x160>)
  409c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
  409c5e:	4606      	mov	r6, r0
  409c60:	460f      	mov	r7, r1
  409c62:	4650      	mov	r0, sl
  409c64:	4659      	mov	r1, fp
  409c66:	f000 fe81 	bl	40a96c <__aeabi_dmul>
  409c6a:	4602      	mov	r2, r0
  409c6c:	460b      	mov	r3, r1
  409c6e:	4630      	mov	r0, r6
  409c70:	4639      	mov	r1, r7
  409c72:	f000 fcc9 	bl	40a608 <__adddf3>
  409c76:	4602      	mov	r2, r0
  409c78:	460b      	mov	r3, r1
  409c7a:	4628      	mov	r0, r5
  409c7c:	4621      	mov	r1, r4
  409c7e:	f000 fcc1 	bl	40a604 <__aeabi_dsub>
  409c82:	b005      	add	sp, #20
  409c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409c88:	4602      	mov	r2, r0
  409c8a:	460b      	mov	r3, r1
  409c8c:	4630      	mov	r0, r6
  409c8e:	4639      	mov	r1, r7
  409c90:	f000 fe6c 	bl	40a96c <__aeabi_dmul>
  409c94:	a314      	add	r3, pc, #80	; (adr r3, 409ce8 <__kernel_sin+0x160>)
  409c96:	e9d3 2300 	ldrd	r2, r3, [r3]
  409c9a:	f000 fcb3 	bl	40a604 <__aeabi_dsub>
  409c9e:	4652      	mov	r2, sl
  409ca0:	465b      	mov	r3, fp
  409ca2:	f000 fe63 	bl	40a96c <__aeabi_dmul>
  409ca6:	462a      	mov	r2, r5
  409ca8:	4623      	mov	r3, r4
  409caa:	f000 fcad 	bl	40a608 <__adddf3>
  409cae:	b005      	add	sp, #20
  409cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409cb4:	4628      	mov	r0, r5
  409cb6:	4621      	mov	r1, r4
  409cb8:	b005      	add	sp, #20
  409cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409cbe:	bf00      	nop
  409cc0:	5acfd57c 	.word	0x5acfd57c
  409cc4:	3de5d93a 	.word	0x3de5d93a
  409cc8:	8a2b9ceb 	.word	0x8a2b9ceb
  409ccc:	3e5ae5e6 	.word	0x3e5ae5e6
  409cd0:	57b1fe7d 	.word	0x57b1fe7d
  409cd4:	3ec71de3 	.word	0x3ec71de3
  409cd8:	19c161d5 	.word	0x19c161d5
  409cdc:	3f2a01a0 	.word	0x3f2a01a0
  409ce0:	1110f8a6 	.word	0x1110f8a6
  409ce4:	3f811111 	.word	0x3f811111
  409ce8:	55555549 	.word	0x55555549
  409cec:	3fc55555 	.word	0x3fc55555
  409cf0:	3fe00000 	.word	0x3fe00000
  409cf4:	00000000 	.word	0x00000000

00409cf8 <__kernel_tan>:
  409cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409cfc:	4cd8      	ldr	r4, [pc, #864]	; (40a060 <__kernel_tan+0x368>)
  409cfe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  409d02:	42a6      	cmp	r6, r4
  409d04:	b087      	sub	sp, #28
  409d06:	468a      	mov	sl, r1
  409d08:	4689      	mov	r9, r1
  409d0a:	4617      	mov	r7, r2
  409d0c:	4698      	mov	r8, r3
  409d0e:	4683      	mov	fp, r0
  409d10:	dc16      	bgt.n	409d40 <__kernel_tan+0x48>
  409d12:	f001 f8db 	bl	40aecc <__aeabi_d2iz>
  409d16:	bb88      	cbnz	r0, 409d7c <__kernel_tan+0x84>
  409d18:	465b      	mov	r3, fp
  409d1a:	431e      	orrs	r6, r3
  409d1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  409d1e:	3301      	adds	r3, #1
  409d20:	4333      	orrs	r3, r6
  409d22:	f000 8156 	beq.w	409fd2 <__kernel_tan+0x2da>
  409d26:	9b10      	ldr	r3, [sp, #64]	; 0x40
  409d28:	2b01      	cmp	r3, #1
  409d2a:	f000 81a8 	beq.w	40a07e <__kernel_tan+0x386>
  409d2e:	465a      	mov	r2, fp
  409d30:	4653      	mov	r3, sl
  409d32:	2000      	movs	r0, #0
  409d34:	49cb      	ldr	r1, [pc, #812]	; (40a064 <__kernel_tan+0x36c>)
  409d36:	f000 ff43 	bl	40abc0 <__aeabi_ddiv>
  409d3a:	b007      	add	sp, #28
  409d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409d40:	4bc9      	ldr	r3, [pc, #804]	; (40a068 <__kernel_tan+0x370>)
  409d42:	429e      	cmp	r6, r3
  409d44:	dd1a      	ble.n	409d7c <__kernel_tan+0x84>
  409d46:	2900      	cmp	r1, #0
  409d48:	f2c0 8192 	blt.w	40a070 <__kernel_tan+0x378>
  409d4c:	465a      	mov	r2, fp
  409d4e:	4653      	mov	r3, sl
  409d50:	a1a5      	add	r1, pc, #660	; (adr r1, 409fe8 <__kernel_tan+0x2f0>)
  409d52:	e9d1 0100 	ldrd	r0, r1, [r1]
  409d56:	f000 fc55 	bl	40a604 <__aeabi_dsub>
  409d5a:	463a      	mov	r2, r7
  409d5c:	4643      	mov	r3, r8
  409d5e:	4604      	mov	r4, r0
  409d60:	460d      	mov	r5, r1
  409d62:	a1a3      	add	r1, pc, #652	; (adr r1, 409ff0 <__kernel_tan+0x2f8>)
  409d64:	e9d1 0100 	ldrd	r0, r1, [r1]
  409d68:	f000 fc4c 	bl	40a604 <__aeabi_dsub>
  409d6c:	4622      	mov	r2, r4
  409d6e:	462b      	mov	r3, r5
  409d70:	f000 fc4a 	bl	40a608 <__adddf3>
  409d74:	2700      	movs	r7, #0
  409d76:	4683      	mov	fp, r0
  409d78:	468a      	mov	sl, r1
  409d7a:	46b8      	mov	r8, r7
  409d7c:	465a      	mov	r2, fp
  409d7e:	4653      	mov	r3, sl
  409d80:	4658      	mov	r0, fp
  409d82:	4651      	mov	r1, sl
  409d84:	f000 fdf2 	bl	40a96c <__aeabi_dmul>
  409d88:	4603      	mov	r3, r0
  409d8a:	460c      	mov	r4, r1
  409d8c:	e9cd 3400 	strd	r3, r4, [sp]
  409d90:	4602      	mov	r2, r0
  409d92:	460b      	mov	r3, r1
  409d94:	f000 fdea 	bl	40a96c <__aeabi_dmul>
  409d98:	e9dd 2300 	ldrd	r2, r3, [sp]
  409d9c:	4604      	mov	r4, r0
  409d9e:	460d      	mov	r5, r1
  409da0:	4658      	mov	r0, fp
  409da2:	4651      	mov	r1, sl
  409da4:	f000 fde2 	bl	40a96c <__aeabi_dmul>
  409da8:	a393      	add	r3, pc, #588	; (adr r3, 409ff8 <__kernel_tan+0x300>)
  409daa:	e9d3 2300 	ldrd	r2, r3, [r3]
  409dae:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409db2:	4620      	mov	r0, r4
  409db4:	4629      	mov	r1, r5
  409db6:	f000 fdd9 	bl	40a96c <__aeabi_dmul>
  409dba:	a391      	add	r3, pc, #580	; (adr r3, 40a000 <__kernel_tan+0x308>)
  409dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
  409dc0:	f000 fc22 	bl	40a608 <__adddf3>
  409dc4:	4622      	mov	r2, r4
  409dc6:	462b      	mov	r3, r5
  409dc8:	f000 fdd0 	bl	40a96c <__aeabi_dmul>
  409dcc:	a38e      	add	r3, pc, #568	; (adr r3, 40a008 <__kernel_tan+0x310>)
  409dce:	e9d3 2300 	ldrd	r2, r3, [r3]
  409dd2:	f000 fc19 	bl	40a608 <__adddf3>
  409dd6:	4622      	mov	r2, r4
  409dd8:	462b      	mov	r3, r5
  409dda:	f000 fdc7 	bl	40a96c <__aeabi_dmul>
  409dde:	a38c      	add	r3, pc, #560	; (adr r3, 40a010 <__kernel_tan+0x318>)
  409de0:	e9d3 2300 	ldrd	r2, r3, [r3]
  409de4:	f000 fc10 	bl	40a608 <__adddf3>
  409de8:	4622      	mov	r2, r4
  409dea:	462b      	mov	r3, r5
  409dec:	f000 fdbe 	bl	40a96c <__aeabi_dmul>
  409df0:	a389      	add	r3, pc, #548	; (adr r3, 40a018 <__kernel_tan+0x320>)
  409df2:	e9d3 2300 	ldrd	r2, r3, [r3]
  409df6:	f000 fc07 	bl	40a608 <__adddf3>
  409dfa:	4622      	mov	r2, r4
  409dfc:	462b      	mov	r3, r5
  409dfe:	f000 fdb5 	bl	40a96c <__aeabi_dmul>
  409e02:	a387      	add	r3, pc, #540	; (adr r3, 40a020 <__kernel_tan+0x328>)
  409e04:	e9d3 2300 	ldrd	r2, r3, [r3]
  409e08:	f000 fbfe 	bl	40a608 <__adddf3>
  409e0c:	e9dd 2300 	ldrd	r2, r3, [sp]
  409e10:	f000 fdac 	bl	40a96c <__aeabi_dmul>
  409e14:	a384      	add	r3, pc, #528	; (adr r3, 40a028 <__kernel_tan+0x330>)
  409e16:	e9d3 2300 	ldrd	r2, r3, [r3]
  409e1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
  409e1e:	4620      	mov	r0, r4
  409e20:	4629      	mov	r1, r5
  409e22:	f000 fda3 	bl	40a96c <__aeabi_dmul>
  409e26:	a382      	add	r3, pc, #520	; (adr r3, 40a030 <__kernel_tan+0x338>)
  409e28:	e9d3 2300 	ldrd	r2, r3, [r3]
  409e2c:	f000 fbec 	bl	40a608 <__adddf3>
  409e30:	4622      	mov	r2, r4
  409e32:	462b      	mov	r3, r5
  409e34:	f000 fd9a 	bl	40a96c <__aeabi_dmul>
  409e38:	a37f      	add	r3, pc, #508	; (adr r3, 40a038 <__kernel_tan+0x340>)
  409e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
  409e3e:	f000 fbe3 	bl	40a608 <__adddf3>
  409e42:	4622      	mov	r2, r4
  409e44:	462b      	mov	r3, r5
  409e46:	f000 fd91 	bl	40a96c <__aeabi_dmul>
  409e4a:	a37d      	add	r3, pc, #500	; (adr r3, 40a040 <__kernel_tan+0x348>)
  409e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
  409e50:	f000 fbda 	bl	40a608 <__adddf3>
  409e54:	4622      	mov	r2, r4
  409e56:	462b      	mov	r3, r5
  409e58:	f000 fd88 	bl	40a96c <__aeabi_dmul>
  409e5c:	a37a      	add	r3, pc, #488	; (adr r3, 40a048 <__kernel_tan+0x350>)
  409e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
  409e62:	f000 fbd1 	bl	40a608 <__adddf3>
  409e66:	4622      	mov	r2, r4
  409e68:	462b      	mov	r3, r5
  409e6a:	f000 fd7f 	bl	40a96c <__aeabi_dmul>
  409e6e:	a378      	add	r3, pc, #480	; (adr r3, 40a050 <__kernel_tan+0x358>)
  409e70:	e9d3 2300 	ldrd	r2, r3, [r3]
  409e74:	f000 fbc8 	bl	40a608 <__adddf3>
  409e78:	4602      	mov	r2, r0
  409e7a:	460b      	mov	r3, r1
  409e7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  409e80:	f000 fbc2 	bl	40a608 <__adddf3>
  409e84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409e88:	f000 fd70 	bl	40a96c <__aeabi_dmul>
  409e8c:	463a      	mov	r2, r7
  409e8e:	4643      	mov	r3, r8
  409e90:	f000 fbba 	bl	40a608 <__adddf3>
  409e94:	e9dd 2300 	ldrd	r2, r3, [sp]
  409e98:	f000 fd68 	bl	40a96c <__aeabi_dmul>
  409e9c:	4602      	mov	r2, r0
  409e9e:	460b      	mov	r3, r1
  409ea0:	4638      	mov	r0, r7
  409ea2:	4641      	mov	r1, r8
  409ea4:	f000 fbb0 	bl	40a608 <__adddf3>
  409ea8:	a36b      	add	r3, pc, #428	; (adr r3, 40a058 <__kernel_tan+0x360>)
  409eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
  409eae:	4604      	mov	r4, r0
  409eb0:	460d      	mov	r5, r1
  409eb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409eb6:	f000 fd59 	bl	40a96c <__aeabi_dmul>
  409eba:	4622      	mov	r2, r4
  409ebc:	462b      	mov	r3, r5
  409ebe:	f000 fba3 	bl	40a608 <__adddf3>
  409ec2:	460b      	mov	r3, r1
  409ec4:	4602      	mov	r2, r0
  409ec6:	4651      	mov	r1, sl
  409ec8:	4658      	mov	r0, fp
  409eca:	e9cd 2300 	strd	r2, r3, [sp]
  409ece:	f000 fb9b 	bl	40a608 <__adddf3>
  409ed2:	4b65      	ldr	r3, [pc, #404]	; (40a068 <__kernel_tan+0x370>)
  409ed4:	429e      	cmp	r6, r3
  409ed6:	4604      	mov	r4, r0
  409ed8:	460d      	mov	r5, r1
  409eda:	dc3a      	bgt.n	409f52 <__kernel_tan+0x25a>
  409edc:	9b10      	ldr	r3, [sp, #64]	; 0x40
  409ede:	2b01      	cmp	r3, #1
  409ee0:	d034      	beq.n	409f4c <__kernel_tan+0x254>
  409ee2:	4602      	mov	r2, r0
  409ee4:	460b      	mov	r3, r1
  409ee6:	2000      	movs	r0, #0
  409ee8:	495e      	ldr	r1, [pc, #376]	; (40a064 <__kernel_tan+0x36c>)
  409eea:	f000 fe69 	bl	40abc0 <__aeabi_ddiv>
  409eee:	2400      	movs	r4, #0
  409ef0:	460f      	mov	r7, r1
  409ef2:	4606      	mov	r6, r0
  409ef4:	465a      	mov	r2, fp
  409ef6:	4653      	mov	r3, sl
  409ef8:	4620      	mov	r0, r4
  409efa:	4629      	mov	r1, r5
  409efc:	f000 fb82 	bl	40a604 <__aeabi_dsub>
  409f00:	46a0      	mov	r8, r4
  409f02:	4602      	mov	r2, r0
  409f04:	460b      	mov	r3, r1
  409f06:	e9dd 0100 	ldrd	r0, r1, [sp]
  409f0a:	f000 fb7b 	bl	40a604 <__aeabi_dsub>
  409f0e:	4642      	mov	r2, r8
  409f10:	463b      	mov	r3, r7
  409f12:	f000 fd2b 	bl	40a96c <__aeabi_dmul>
  409f16:	46a9      	mov	r9, r5
  409f18:	4604      	mov	r4, r0
  409f1a:	460d      	mov	r5, r1
  409f1c:	4642      	mov	r2, r8
  409f1e:	463b      	mov	r3, r7
  409f20:	4640      	mov	r0, r8
  409f22:	4649      	mov	r1, r9
  409f24:	f000 fd22 	bl	40a96c <__aeabi_dmul>
  409f28:	2200      	movs	r2, #0
  409f2a:	4b50      	ldr	r3, [pc, #320]	; (40a06c <__kernel_tan+0x374>)
  409f2c:	f000 fb6c 	bl	40a608 <__adddf3>
  409f30:	4602      	mov	r2, r0
  409f32:	460b      	mov	r3, r1
  409f34:	4620      	mov	r0, r4
  409f36:	4629      	mov	r1, r5
  409f38:	f000 fb66 	bl	40a608 <__adddf3>
  409f3c:	4632      	mov	r2, r6
  409f3e:	463b      	mov	r3, r7
  409f40:	f000 fd14 	bl	40a96c <__aeabi_dmul>
  409f44:	4642      	mov	r2, r8
  409f46:	463b      	mov	r3, r7
  409f48:	f000 fb5e 	bl	40a608 <__adddf3>
  409f4c:	b007      	add	sp, #28
  409f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409f52:	9810      	ldr	r0, [sp, #64]	; 0x40
  409f54:	f000 fca4 	bl	40a8a0 <__aeabi_i2d>
  409f58:	4622      	mov	r2, r4
  409f5a:	4606      	mov	r6, r0
  409f5c:	460f      	mov	r7, r1
  409f5e:	462b      	mov	r3, r5
  409f60:	4620      	mov	r0, r4
  409f62:	4629      	mov	r1, r5
  409f64:	f000 fd02 	bl	40a96c <__aeabi_dmul>
  409f68:	4632      	mov	r2, r6
  409f6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409f6e:	463b      	mov	r3, r7
  409f70:	4620      	mov	r0, r4
  409f72:	4629      	mov	r1, r5
  409f74:	f000 fb48 	bl	40a608 <__adddf3>
  409f78:	4602      	mov	r2, r0
  409f7a:	460b      	mov	r3, r1
  409f7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409f80:	f000 fe1e 	bl	40abc0 <__aeabi_ddiv>
  409f84:	e9dd 2300 	ldrd	r2, r3, [sp]
  409f88:	f000 fb3c 	bl	40a604 <__aeabi_dsub>
  409f8c:	4602      	mov	r2, r0
  409f8e:	460b      	mov	r3, r1
  409f90:	4658      	mov	r0, fp
  409f92:	4651      	mov	r1, sl
  409f94:	f000 fb36 	bl	40a604 <__aeabi_dsub>
  409f98:	4602      	mov	r2, r0
  409f9a:	460b      	mov	r3, r1
  409f9c:	f000 fb34 	bl	40a608 <__adddf3>
  409fa0:	4602      	mov	r2, r0
  409fa2:	460b      	mov	r3, r1
  409fa4:	4630      	mov	r0, r6
  409fa6:	4639      	mov	r1, r7
  409fa8:	f000 fb2c 	bl	40a604 <__aeabi_dsub>
  409fac:	4604      	mov	r4, r0
  409fae:	ea4f 70a9 	mov.w	r0, r9, asr #30
  409fb2:	f000 0002 	and.w	r0, r0, #2
  409fb6:	f1c0 0001 	rsb	r0, r0, #1
  409fba:	460d      	mov	r5, r1
  409fbc:	f000 fc70 	bl	40a8a0 <__aeabi_i2d>
  409fc0:	4602      	mov	r2, r0
  409fc2:	460b      	mov	r3, r1
  409fc4:	4620      	mov	r0, r4
  409fc6:	4629      	mov	r1, r5
  409fc8:	f000 fcd0 	bl	40a96c <__aeabi_dmul>
  409fcc:	b007      	add	sp, #28
  409fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409fd2:	4658      	mov	r0, fp
  409fd4:	4651      	mov	r1, sl
  409fd6:	f000 f9f5 	bl	40a3c4 <fabs>
  409fda:	4602      	mov	r2, r0
  409fdc:	460b      	mov	r3, r1
  409fde:	2000      	movs	r0, #0
  409fe0:	4922      	ldr	r1, [pc, #136]	; (40a06c <__kernel_tan+0x374>)
  409fe2:	f000 fded 	bl	40abc0 <__aeabi_ddiv>
  409fe6:	e7b1      	b.n	409f4c <__kernel_tan+0x254>
  409fe8:	54442d18 	.word	0x54442d18
  409fec:	3fe921fb 	.word	0x3fe921fb
  409ff0:	33145c07 	.word	0x33145c07
  409ff4:	3c81a626 	.word	0x3c81a626
  409ff8:	74bf7ad4 	.word	0x74bf7ad4
  409ffc:	3efb2a70 	.word	0x3efb2a70
  40a000:	32f0a7e9 	.word	0x32f0a7e9
  40a004:	3f12b80f 	.word	0x3f12b80f
  40a008:	1a8d1068 	.word	0x1a8d1068
  40a00c:	3f3026f7 	.word	0x3f3026f7
  40a010:	fee08315 	.word	0xfee08315
  40a014:	3f57dbc8 	.word	0x3f57dbc8
  40a018:	e96e8493 	.word	0xe96e8493
  40a01c:	3f8226e3 	.word	0x3f8226e3
  40a020:	1bb341fe 	.word	0x1bb341fe
  40a024:	3faba1ba 	.word	0x3faba1ba
  40a028:	db605373 	.word	0xdb605373
  40a02c:	bef375cb 	.word	0xbef375cb
  40a030:	a03792a6 	.word	0xa03792a6
  40a034:	3f147e88 	.word	0x3f147e88
  40a038:	f2f26501 	.word	0xf2f26501
  40a03c:	3f4344d8 	.word	0x3f4344d8
  40a040:	c9560328 	.word	0xc9560328
  40a044:	3f6d6d22 	.word	0x3f6d6d22
  40a048:	8406d637 	.word	0x8406d637
  40a04c:	3f9664f4 	.word	0x3f9664f4
  40a050:	1110fe7a 	.word	0x1110fe7a
  40a054:	3fc11111 	.word	0x3fc11111
  40a058:	55555563 	.word	0x55555563
  40a05c:	3fd55555 	.word	0x3fd55555
  40a060:	3e2fffff 	.word	0x3e2fffff
  40a064:	bff00000 	.word	0xbff00000
  40a068:	3fe59427 	.word	0x3fe59427
  40a06c:	3ff00000 	.word	0x3ff00000
  40a070:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  40a074:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
  40a078:	4683      	mov	fp, r0
  40a07a:	469a      	mov	sl, r3
  40a07c:	e666      	b.n	409d4c <__kernel_tan+0x54>
  40a07e:	4658      	mov	r0, fp
  40a080:	4651      	mov	r1, sl
  40a082:	e763      	b.n	409f4c <__kernel_tan+0x254>
  40a084:	0000      	movs	r0, r0
	...

0040a088 <atan>:
  40a088:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a08c:	4bc0      	ldr	r3, [pc, #768]	; (40a390 <atan+0x308>)
  40a08e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  40a092:	429e      	cmp	r6, r3
  40a094:	460d      	mov	r5, r1
  40a096:	468a      	mov	sl, r1
  40a098:	4604      	mov	r4, r0
  40a09a:	dd0f      	ble.n	40a0bc <atan+0x34>
  40a09c:	4bbd      	ldr	r3, [pc, #756]	; (40a394 <atan+0x30c>)
  40a09e:	429e      	cmp	r6, r3
  40a0a0:	f300 80b2 	bgt.w	40a208 <atan+0x180>
  40a0a4:	f000 80ad 	beq.w	40a202 <atan+0x17a>
  40a0a8:	4bbb      	ldr	r3, [pc, #748]	; (40a398 <atan+0x310>)
  40a0aa:	49bc      	ldr	r1, [pc, #752]	; (40a39c <atan+0x314>)
  40a0ac:	4cbc      	ldr	r4, [pc, #752]	; (40a3a0 <atan+0x318>)
  40a0ae:	f1ba 0f00 	cmp.w	sl, #0
  40a0b2:	bfc8      	it	gt
  40a0b4:	4619      	movgt	r1, r3
  40a0b6:	4620      	mov	r0, r4
  40a0b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a0bc:	4bb9      	ldr	r3, [pc, #740]	; (40a3a4 <atan+0x31c>)
  40a0be:	429e      	cmp	r6, r3
  40a0c0:	f300 80bc 	bgt.w	40a23c <atan+0x1b4>
  40a0c4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
  40a0c8:	429e      	cmp	r6, r3
  40a0ca:	f340 80a7 	ble.w	40a21c <atan+0x194>
  40a0ce:	f04f 3bff 	mov.w	fp, #4294967295
  40a0d2:	4622      	mov	r2, r4
  40a0d4:	462b      	mov	r3, r5
  40a0d6:	4620      	mov	r0, r4
  40a0d8:	4629      	mov	r1, r5
  40a0da:	f000 fc47 	bl	40a96c <__aeabi_dmul>
  40a0de:	4602      	mov	r2, r0
  40a0e0:	460b      	mov	r3, r1
  40a0e2:	4680      	mov	r8, r0
  40a0e4:	4689      	mov	r9, r1
  40a0e6:	f000 fc41 	bl	40a96c <__aeabi_dmul>
  40a0ea:	a391      	add	r3, pc, #580	; (adr r3, 40a330 <atan+0x2a8>)
  40a0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a0f0:	4606      	mov	r6, r0
  40a0f2:	460f      	mov	r7, r1
  40a0f4:	f000 fc3a 	bl	40a96c <__aeabi_dmul>
  40a0f8:	a38f      	add	r3, pc, #572	; (adr r3, 40a338 <atan+0x2b0>)
  40a0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a0fe:	f000 fa83 	bl	40a608 <__adddf3>
  40a102:	4632      	mov	r2, r6
  40a104:	463b      	mov	r3, r7
  40a106:	f000 fc31 	bl	40a96c <__aeabi_dmul>
  40a10a:	a38d      	add	r3, pc, #564	; (adr r3, 40a340 <atan+0x2b8>)
  40a10c:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a110:	f000 fa7a 	bl	40a608 <__adddf3>
  40a114:	4632      	mov	r2, r6
  40a116:	463b      	mov	r3, r7
  40a118:	f000 fc28 	bl	40a96c <__aeabi_dmul>
  40a11c:	a38a      	add	r3, pc, #552	; (adr r3, 40a348 <atan+0x2c0>)
  40a11e:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a122:	f000 fa71 	bl	40a608 <__adddf3>
  40a126:	4632      	mov	r2, r6
  40a128:	463b      	mov	r3, r7
  40a12a:	f000 fc1f 	bl	40a96c <__aeabi_dmul>
  40a12e:	a388      	add	r3, pc, #544	; (adr r3, 40a350 <atan+0x2c8>)
  40a130:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a134:	f000 fa68 	bl	40a608 <__adddf3>
  40a138:	4632      	mov	r2, r6
  40a13a:	463b      	mov	r3, r7
  40a13c:	f000 fc16 	bl	40a96c <__aeabi_dmul>
  40a140:	a385      	add	r3, pc, #532	; (adr r3, 40a358 <atan+0x2d0>)
  40a142:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a146:	f000 fa5f 	bl	40a608 <__adddf3>
  40a14a:	4642      	mov	r2, r8
  40a14c:	464b      	mov	r3, r9
  40a14e:	f000 fc0d 	bl	40a96c <__aeabi_dmul>
  40a152:	a383      	add	r3, pc, #524	; (adr r3, 40a360 <atan+0x2d8>)
  40a154:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a158:	4680      	mov	r8, r0
  40a15a:	4689      	mov	r9, r1
  40a15c:	4630      	mov	r0, r6
  40a15e:	4639      	mov	r1, r7
  40a160:	f000 fc04 	bl	40a96c <__aeabi_dmul>
  40a164:	a380      	add	r3, pc, #512	; (adr r3, 40a368 <atan+0x2e0>)
  40a166:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a16a:	f000 fa4b 	bl	40a604 <__aeabi_dsub>
  40a16e:	4632      	mov	r2, r6
  40a170:	463b      	mov	r3, r7
  40a172:	f000 fbfb 	bl	40a96c <__aeabi_dmul>
  40a176:	a37e      	add	r3, pc, #504	; (adr r3, 40a370 <atan+0x2e8>)
  40a178:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a17c:	f000 fa42 	bl	40a604 <__aeabi_dsub>
  40a180:	4632      	mov	r2, r6
  40a182:	463b      	mov	r3, r7
  40a184:	f000 fbf2 	bl	40a96c <__aeabi_dmul>
  40a188:	a37b      	add	r3, pc, #492	; (adr r3, 40a378 <atan+0x2f0>)
  40a18a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a18e:	f000 fa39 	bl	40a604 <__aeabi_dsub>
  40a192:	4632      	mov	r2, r6
  40a194:	463b      	mov	r3, r7
  40a196:	f000 fbe9 	bl	40a96c <__aeabi_dmul>
  40a19a:	a379      	add	r3, pc, #484	; (adr r3, 40a380 <atan+0x2f8>)
  40a19c:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a1a0:	f000 fa30 	bl	40a604 <__aeabi_dsub>
  40a1a4:	4632      	mov	r2, r6
  40a1a6:	463b      	mov	r3, r7
  40a1a8:	f000 fbe0 	bl	40a96c <__aeabi_dmul>
  40a1ac:	f1bb 3fff 	cmp.w	fp, #4294967295
  40a1b0:	4602      	mov	r2, r0
  40a1b2:	460b      	mov	r3, r1
  40a1b4:	d069      	beq.n	40a28a <atan+0x202>
  40a1b6:	4640      	mov	r0, r8
  40a1b8:	4649      	mov	r1, r9
  40a1ba:	f000 fa25 	bl	40a608 <__adddf3>
  40a1be:	4622      	mov	r2, r4
  40a1c0:	462b      	mov	r3, r5
  40a1c2:	f000 fbd3 	bl	40a96c <__aeabi_dmul>
  40a1c6:	4e78      	ldr	r6, [pc, #480]	; (40a3a8 <atan+0x320>)
  40a1c8:	4b78      	ldr	r3, [pc, #480]	; (40a3ac <atan+0x324>)
  40a1ca:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
  40a1ce:	445e      	add	r6, fp
  40a1d0:	449b      	add	fp, r3
  40a1d2:	e9db 2300 	ldrd	r2, r3, [fp]
  40a1d6:	f000 fa15 	bl	40a604 <__aeabi_dsub>
  40a1da:	4622      	mov	r2, r4
  40a1dc:	462b      	mov	r3, r5
  40a1de:	f000 fa11 	bl	40a604 <__aeabi_dsub>
  40a1e2:	4602      	mov	r2, r0
  40a1e4:	460b      	mov	r3, r1
  40a1e6:	e9d6 0100 	ldrd	r0, r1, [r6]
  40a1ea:	f000 fa0b 	bl	40a604 <__aeabi_dsub>
  40a1ee:	f1ba 0f00 	cmp.w	sl, #0
  40a1f2:	4604      	mov	r4, r0
  40a1f4:	f6bf af5f 	bge.w	40a0b6 <atan+0x2e>
  40a1f8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  40a1fc:	4620      	mov	r0, r4
  40a1fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a202:	2800      	cmp	r0, #0
  40a204:	f43f af50 	beq.w	40a0a8 <atan+0x20>
  40a208:	4622      	mov	r2, r4
  40a20a:	4620      	mov	r0, r4
  40a20c:	462b      	mov	r3, r5
  40a20e:	4629      	mov	r1, r5
  40a210:	f000 f9fa 	bl	40a608 <__adddf3>
  40a214:	4604      	mov	r4, r0
  40a216:	4620      	mov	r0, r4
  40a218:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a21c:	a35a      	add	r3, pc, #360	; (adr r3, 40a388 <atan+0x300>)
  40a21e:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a222:	f000 f9f1 	bl	40a608 <__adddf3>
  40a226:	2200      	movs	r2, #0
  40a228:	4b61      	ldr	r3, [pc, #388]	; (40a3b0 <atan+0x328>)
  40a22a:	f000 fe2f 	bl	40ae8c <__aeabi_dcmpgt>
  40a22e:	2800      	cmp	r0, #0
  40a230:	f43f af4d 	beq.w	40a0ce <atan+0x46>
  40a234:	4629      	mov	r1, r5
  40a236:	4620      	mov	r0, r4
  40a238:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a23c:	f000 f8c2 	bl	40a3c4 <fabs>
  40a240:	4b5c      	ldr	r3, [pc, #368]	; (40a3b4 <atan+0x32c>)
  40a242:	429e      	cmp	r6, r3
  40a244:	4604      	mov	r4, r0
  40a246:	460d      	mov	r5, r1
  40a248:	dc2f      	bgt.n	40a2aa <atan+0x222>
  40a24a:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
  40a24e:	429e      	cmp	r6, r3
  40a250:	dc54      	bgt.n	40a2fc <atan+0x274>
  40a252:	4602      	mov	r2, r0
  40a254:	460b      	mov	r3, r1
  40a256:	f000 f9d7 	bl	40a608 <__adddf3>
  40a25a:	2200      	movs	r2, #0
  40a25c:	4b54      	ldr	r3, [pc, #336]	; (40a3b0 <atan+0x328>)
  40a25e:	f000 f9d1 	bl	40a604 <__aeabi_dsub>
  40a262:	2200      	movs	r2, #0
  40a264:	4606      	mov	r6, r0
  40a266:	460f      	mov	r7, r1
  40a268:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40a26c:	4620      	mov	r0, r4
  40a26e:	4629      	mov	r1, r5
  40a270:	f000 f9ca 	bl	40a608 <__adddf3>
  40a274:	4602      	mov	r2, r0
  40a276:	460b      	mov	r3, r1
  40a278:	4630      	mov	r0, r6
  40a27a:	4639      	mov	r1, r7
  40a27c:	f000 fca0 	bl	40abc0 <__aeabi_ddiv>
  40a280:	f04f 0b00 	mov.w	fp, #0
  40a284:	4604      	mov	r4, r0
  40a286:	460d      	mov	r5, r1
  40a288:	e723      	b.n	40a0d2 <atan+0x4a>
  40a28a:	4640      	mov	r0, r8
  40a28c:	4649      	mov	r1, r9
  40a28e:	f000 f9bb 	bl	40a608 <__adddf3>
  40a292:	4622      	mov	r2, r4
  40a294:	462b      	mov	r3, r5
  40a296:	f000 fb69 	bl	40a96c <__aeabi_dmul>
  40a29a:	4602      	mov	r2, r0
  40a29c:	460b      	mov	r3, r1
  40a29e:	4620      	mov	r0, r4
  40a2a0:	4629      	mov	r1, r5
  40a2a2:	f000 f9af 	bl	40a604 <__aeabi_dsub>
  40a2a6:	4604      	mov	r4, r0
  40a2a8:	e705      	b.n	40a0b6 <atan+0x2e>
  40a2aa:	4b43      	ldr	r3, [pc, #268]	; (40a3b8 <atan+0x330>)
  40a2ac:	429e      	cmp	r6, r3
  40a2ae:	dc1a      	bgt.n	40a2e6 <atan+0x25e>
  40a2b0:	2200      	movs	r2, #0
  40a2b2:	4b42      	ldr	r3, [pc, #264]	; (40a3bc <atan+0x334>)
  40a2b4:	f000 f9a6 	bl	40a604 <__aeabi_dsub>
  40a2b8:	2200      	movs	r2, #0
  40a2ba:	4606      	mov	r6, r0
  40a2bc:	460f      	mov	r7, r1
  40a2be:	4b3f      	ldr	r3, [pc, #252]	; (40a3bc <atan+0x334>)
  40a2c0:	4620      	mov	r0, r4
  40a2c2:	4629      	mov	r1, r5
  40a2c4:	f000 fb52 	bl	40a96c <__aeabi_dmul>
  40a2c8:	2200      	movs	r2, #0
  40a2ca:	4b39      	ldr	r3, [pc, #228]	; (40a3b0 <atan+0x328>)
  40a2cc:	f000 f99c 	bl	40a608 <__adddf3>
  40a2d0:	4602      	mov	r2, r0
  40a2d2:	460b      	mov	r3, r1
  40a2d4:	4630      	mov	r0, r6
  40a2d6:	4639      	mov	r1, r7
  40a2d8:	f000 fc72 	bl	40abc0 <__aeabi_ddiv>
  40a2dc:	f04f 0b02 	mov.w	fp, #2
  40a2e0:	4604      	mov	r4, r0
  40a2e2:	460d      	mov	r5, r1
  40a2e4:	e6f5      	b.n	40a0d2 <atan+0x4a>
  40a2e6:	4602      	mov	r2, r0
  40a2e8:	460b      	mov	r3, r1
  40a2ea:	2000      	movs	r0, #0
  40a2ec:	4934      	ldr	r1, [pc, #208]	; (40a3c0 <atan+0x338>)
  40a2ee:	f000 fc67 	bl	40abc0 <__aeabi_ddiv>
  40a2f2:	f04f 0b03 	mov.w	fp, #3
  40a2f6:	4604      	mov	r4, r0
  40a2f8:	460d      	mov	r5, r1
  40a2fa:	e6ea      	b.n	40a0d2 <atan+0x4a>
  40a2fc:	2200      	movs	r2, #0
  40a2fe:	4b2c      	ldr	r3, [pc, #176]	; (40a3b0 <atan+0x328>)
  40a300:	f000 f980 	bl	40a604 <__aeabi_dsub>
  40a304:	2200      	movs	r2, #0
  40a306:	4606      	mov	r6, r0
  40a308:	460f      	mov	r7, r1
  40a30a:	4b29      	ldr	r3, [pc, #164]	; (40a3b0 <atan+0x328>)
  40a30c:	4620      	mov	r0, r4
  40a30e:	4629      	mov	r1, r5
  40a310:	f000 f97a 	bl	40a608 <__adddf3>
  40a314:	4602      	mov	r2, r0
  40a316:	460b      	mov	r3, r1
  40a318:	4630      	mov	r0, r6
  40a31a:	4639      	mov	r1, r7
  40a31c:	f000 fc50 	bl	40abc0 <__aeabi_ddiv>
  40a320:	f04f 0b01 	mov.w	fp, #1
  40a324:	4604      	mov	r4, r0
  40a326:	460d      	mov	r5, r1
  40a328:	e6d3      	b.n	40a0d2 <atan+0x4a>
  40a32a:	bf00      	nop
  40a32c:	f3af 8000 	nop.w
  40a330:	e322da11 	.word	0xe322da11
  40a334:	3f90ad3a 	.word	0x3f90ad3a
  40a338:	24760deb 	.word	0x24760deb
  40a33c:	3fa97b4b 	.word	0x3fa97b4b
  40a340:	a0d03d51 	.word	0xa0d03d51
  40a344:	3fb10d66 	.word	0x3fb10d66
  40a348:	c54c206e 	.word	0xc54c206e
  40a34c:	3fb745cd 	.word	0x3fb745cd
  40a350:	920083ff 	.word	0x920083ff
  40a354:	3fc24924 	.word	0x3fc24924
  40a358:	5555550d 	.word	0x5555550d
  40a35c:	3fd55555 	.word	0x3fd55555
  40a360:	2c6a6c2f 	.word	0x2c6a6c2f
  40a364:	bfa2b444 	.word	0xbfa2b444
  40a368:	52defd9a 	.word	0x52defd9a
  40a36c:	3fadde2d 	.word	0x3fadde2d
  40a370:	af749a6d 	.word	0xaf749a6d
  40a374:	3fb3b0f2 	.word	0x3fb3b0f2
  40a378:	fe231671 	.word	0xfe231671
  40a37c:	3fbc71c6 	.word	0x3fbc71c6
  40a380:	9998ebc4 	.word	0x9998ebc4
  40a384:	3fc99999 	.word	0x3fc99999
  40a388:	8800759c 	.word	0x8800759c
  40a38c:	7e37e43c 	.word	0x7e37e43c
  40a390:	440fffff 	.word	0x440fffff
  40a394:	7ff00000 	.word	0x7ff00000
  40a398:	3ff921fb 	.word	0x3ff921fb
  40a39c:	bff921fb 	.word	0xbff921fb
  40a3a0:	54442d18 	.word	0x54442d18
  40a3a4:	3fdbffff 	.word	0x3fdbffff
  40a3a8:	0040bf38 	.word	0x0040bf38
  40a3ac:	0040bf18 	.word	0x0040bf18
  40a3b0:	3ff00000 	.word	0x3ff00000
  40a3b4:	3ff2ffff 	.word	0x3ff2ffff
  40a3b8:	40037fff 	.word	0x40037fff
  40a3bc:	3ff80000 	.word	0x3ff80000
  40a3c0:	bff00000 	.word	0xbff00000

0040a3c4 <fabs>:
  40a3c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a3c8:	4770      	bx	lr
  40a3ca:	bf00      	nop
  40a3cc:	0000      	movs	r0, r0
	...

0040a3d0 <floor>:
  40a3d0:	f3c1 520a 	ubfx	r2, r1, #20, #11
  40a3d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a3d8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
  40a3dc:	2e13      	cmp	r6, #19
  40a3de:	460b      	mov	r3, r1
  40a3e0:	460d      	mov	r5, r1
  40a3e2:	4604      	mov	r4, r0
  40a3e4:	4688      	mov	r8, r1
  40a3e6:	4607      	mov	r7, r0
  40a3e8:	dc1c      	bgt.n	40a424 <floor+0x54>
  40a3ea:	2e00      	cmp	r6, #0
  40a3ec:	db3f      	blt.n	40a46e <floor+0x9e>
  40a3ee:	4a3a      	ldr	r2, [pc, #232]	; (40a4d8 <floor+0x108>)
  40a3f0:	fa42 f906 	asr.w	r9, r2, r6
  40a3f4:	ea01 0209 	and.w	r2, r1, r9
  40a3f8:	4302      	orrs	r2, r0
  40a3fa:	4686      	mov	lr, r0
  40a3fc:	d017      	beq.n	40a42e <floor+0x5e>
  40a3fe:	a334      	add	r3, pc, #208	; (adr r3, 40a4d0 <floor+0x100>)
  40a400:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a404:	f000 f900 	bl	40a608 <__adddf3>
  40a408:	2200      	movs	r2, #0
  40a40a:	2300      	movs	r3, #0
  40a40c:	f000 fd3e 	bl	40ae8c <__aeabi_dcmpgt>
  40a410:	b120      	cbz	r0, 40a41c <floor+0x4c>
  40a412:	2d00      	cmp	r5, #0
  40a414:	db40      	blt.n	40a498 <floor+0xc8>
  40a416:	ea28 0509 	bic.w	r5, r8, r9
  40a41a:	2700      	movs	r7, #0
  40a41c:	4638      	mov	r0, r7
  40a41e:	4629      	mov	r1, r5
  40a420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a424:	2e33      	cmp	r6, #51	; 0x33
  40a426:	dd06      	ble.n	40a436 <floor+0x66>
  40a428:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  40a42c:	d02f      	beq.n	40a48e <floor+0xbe>
  40a42e:	4620      	mov	r0, r4
  40a430:	4619      	mov	r1, r3
  40a432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a436:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
  40a43a:	f04f 39ff 	mov.w	r9, #4294967295
  40a43e:	fa29 f902 	lsr.w	r9, r9, r2
  40a442:	ea10 0f09 	tst.w	r0, r9
  40a446:	d0f2      	beq.n	40a42e <floor+0x5e>
  40a448:	a321      	add	r3, pc, #132	; (adr r3, 40a4d0 <floor+0x100>)
  40a44a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a44e:	f000 f8db 	bl	40a608 <__adddf3>
  40a452:	2200      	movs	r2, #0
  40a454:	2300      	movs	r3, #0
  40a456:	f000 fd19 	bl	40ae8c <__aeabi_dcmpgt>
  40a45a:	2800      	cmp	r0, #0
  40a45c:	d0de      	beq.n	40a41c <floor+0x4c>
  40a45e:	2d00      	cmp	r5, #0
  40a460:	db20      	blt.n	40a4a4 <floor+0xd4>
  40a462:	4645      	mov	r5, r8
  40a464:	ea27 0709 	bic.w	r7, r7, r9
  40a468:	4638      	mov	r0, r7
  40a46a:	4629      	mov	r1, r5
  40a46c:	e7d8      	b.n	40a420 <floor+0x50>
  40a46e:	a318      	add	r3, pc, #96	; (adr r3, 40a4d0 <floor+0x100>)
  40a470:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a474:	f000 f8c8 	bl	40a608 <__adddf3>
  40a478:	2200      	movs	r2, #0
  40a47a:	2300      	movs	r3, #0
  40a47c:	f000 fd06 	bl	40ae8c <__aeabi_dcmpgt>
  40a480:	2800      	cmp	r0, #0
  40a482:	d0cb      	beq.n	40a41c <floor+0x4c>
  40a484:	2d00      	cmp	r5, #0
  40a486:	db18      	blt.n	40a4ba <floor+0xea>
  40a488:	2700      	movs	r7, #0
  40a48a:	463d      	mov	r5, r7
  40a48c:	e7c6      	b.n	40a41c <floor+0x4c>
  40a48e:	4602      	mov	r2, r0
  40a490:	460b      	mov	r3, r1
  40a492:	f000 f8b9 	bl	40a608 <__adddf3>
  40a496:	e7cc      	b.n	40a432 <floor+0x62>
  40a498:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  40a49c:	fa43 f606 	asr.w	r6, r3, r6
  40a4a0:	44b0      	add	r8, r6
  40a4a2:	e7b8      	b.n	40a416 <floor+0x46>
  40a4a4:	2e14      	cmp	r6, #20
  40a4a6:	d010      	beq.n	40a4ca <floor+0xfa>
  40a4a8:	2301      	movs	r3, #1
  40a4aa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
  40a4ae:	fa03 f606 	lsl.w	r6, r3, r6
  40a4b2:	1937      	adds	r7, r6, r4
  40a4b4:	bf28      	it	cs
  40a4b6:	4498      	addcs	r8, r3
  40a4b8:	e7d3      	b.n	40a462 <floor+0x92>
  40a4ba:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
  40a4be:	4b07      	ldr	r3, [pc, #28]	; (40a4dc <floor+0x10c>)
  40a4c0:	4322      	orrs	r2, r4
  40a4c2:	bf18      	it	ne
  40a4c4:	461d      	movne	r5, r3
  40a4c6:	2700      	movs	r7, #0
  40a4c8:	e7a8      	b.n	40a41c <floor+0x4c>
  40a4ca:	f105 0801 	add.w	r8, r5, #1
  40a4ce:	e7c8      	b.n	40a462 <floor+0x92>
  40a4d0:	8800759c 	.word	0x8800759c
  40a4d4:	7e37e43c 	.word	0x7e37e43c
  40a4d8:	000fffff 	.word	0x000fffff
  40a4dc:	bff00000 	.word	0xbff00000

0040a4e0 <matherr>:
  40a4e0:	2000      	movs	r0, #0
  40a4e2:	4770      	bx	lr

0040a4e4 <nan>:
  40a4e4:	2000      	movs	r0, #0
  40a4e6:	4901      	ldr	r1, [pc, #4]	; (40a4ec <nan+0x8>)
  40a4e8:	4770      	bx	lr
  40a4ea:	bf00      	nop
  40a4ec:	7ff80000 	.word	0x7ff80000

0040a4f0 <scalbn>:
  40a4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a4f2:	f3c1 560a 	ubfx	r6, r1, #20, #11
  40a4f6:	4604      	mov	r4, r0
  40a4f8:	460d      	mov	r5, r1
  40a4fa:	460b      	mov	r3, r1
  40a4fc:	4617      	mov	r7, r2
  40a4fe:	bb06      	cbnz	r6, 40a542 <scalbn+0x52>
  40a500:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  40a504:	4303      	orrs	r3, r0
  40a506:	d025      	beq.n	40a554 <scalbn+0x64>
  40a508:	2200      	movs	r2, #0
  40a50a:	4b35      	ldr	r3, [pc, #212]	; (40a5e0 <scalbn+0xf0>)
  40a50c:	f000 fa2e 	bl	40a96c <__aeabi_dmul>
  40a510:	4a34      	ldr	r2, [pc, #208]	; (40a5e4 <scalbn+0xf4>)
  40a512:	4297      	cmp	r7, r2
  40a514:	4604      	mov	r4, r0
  40a516:	460d      	mov	r5, r1
  40a518:	460b      	mov	r3, r1
  40a51a:	db2a      	blt.n	40a572 <scalbn+0x82>
  40a51c:	f3c1 560a 	ubfx	r6, r1, #20, #11
  40a520:	3e36      	subs	r6, #54	; 0x36
  40a522:	443e      	add	r6, r7
  40a524:	f240 72fe 	movw	r2, #2046	; 0x7fe
  40a528:	4296      	cmp	r6, r2
  40a52a:	dc28      	bgt.n	40a57e <scalbn+0x8e>
  40a52c:	2e00      	cmp	r6, #0
  40a52e:	dd12      	ble.n	40a556 <scalbn+0x66>
  40a530:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  40a534:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  40a538:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  40a53c:	4620      	mov	r0, r4
  40a53e:	4629      	mov	r1, r5
  40a540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a542:	f240 72ff 	movw	r2, #2047	; 0x7ff
  40a546:	4296      	cmp	r6, r2
  40a548:	d1eb      	bne.n	40a522 <scalbn+0x32>
  40a54a:	4602      	mov	r2, r0
  40a54c:	460b      	mov	r3, r1
  40a54e:	f000 f85b 	bl	40a608 <__adddf3>
  40a552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a556:	f116 0f35 	cmn.w	r6, #53	; 0x35
  40a55a:	da1d      	bge.n	40a598 <scalbn+0xa8>
  40a55c:	f24c 3350 	movw	r3, #50000	; 0xc350
  40a560:	429f      	cmp	r7, r3
  40a562:	4622      	mov	r2, r4
  40a564:	462b      	mov	r3, r5
  40a566:	dc25      	bgt.n	40a5b4 <scalbn+0xc4>
  40a568:	a119      	add	r1, pc, #100	; (adr r1, 40a5d0 <scalbn+0xe0>)
  40a56a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40a56e:	f000 f83d 	bl	40a5ec <copysign>
  40a572:	a317      	add	r3, pc, #92	; (adr r3, 40a5d0 <scalbn+0xe0>)
  40a574:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a578:	f000 f9f8 	bl	40a96c <__aeabi_dmul>
  40a57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a57e:	4622      	mov	r2, r4
  40a580:	462b      	mov	r3, r5
  40a582:	a115      	add	r1, pc, #84	; (adr r1, 40a5d8 <scalbn+0xe8>)
  40a584:	e9d1 0100 	ldrd	r0, r1, [r1]
  40a588:	f000 f830 	bl	40a5ec <copysign>
  40a58c:	a312      	add	r3, pc, #72	; (adr r3, 40a5d8 <scalbn+0xe8>)
  40a58e:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a592:	f000 f9eb 	bl	40a96c <__aeabi_dmul>
  40a596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a598:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  40a59c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  40a5a0:	3636      	adds	r6, #54	; 0x36
  40a5a2:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  40a5a6:	4620      	mov	r0, r4
  40a5a8:	4629      	mov	r1, r5
  40a5aa:	2200      	movs	r2, #0
  40a5ac:	4b0e      	ldr	r3, [pc, #56]	; (40a5e8 <scalbn+0xf8>)
  40a5ae:	f000 f9dd 	bl	40a96c <__aeabi_dmul>
  40a5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a5b4:	a108      	add	r1, pc, #32	; (adr r1, 40a5d8 <scalbn+0xe8>)
  40a5b6:	e9d1 0100 	ldrd	r0, r1, [r1]
  40a5ba:	f000 f817 	bl	40a5ec <copysign>
  40a5be:	a306      	add	r3, pc, #24	; (adr r3, 40a5d8 <scalbn+0xe8>)
  40a5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a5c4:	f000 f9d2 	bl	40a96c <__aeabi_dmul>
  40a5c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a5ca:	bf00      	nop
  40a5cc:	f3af 8000 	nop.w
  40a5d0:	c2f8f359 	.word	0xc2f8f359
  40a5d4:	01a56e1f 	.word	0x01a56e1f
  40a5d8:	8800759c 	.word	0x8800759c
  40a5dc:	7e37e43c 	.word	0x7e37e43c
  40a5e0:	43500000 	.word	0x43500000
  40a5e4:	ffff3cb0 	.word	0xffff3cb0
  40a5e8:	3c900000 	.word	0x3c900000

0040a5ec <copysign>:
  40a5ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  40a5f0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
  40a5f4:	ea42 0103 	orr.w	r1, r2, r3
  40a5f8:	4770      	bx	lr
  40a5fa:	bf00      	nop

0040a5fc <__aeabi_drsub>:
  40a5fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40a600:	e002      	b.n	40a608 <__adddf3>
  40a602:	bf00      	nop

0040a604 <__aeabi_dsub>:
  40a604:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040a608 <__adddf3>:
  40a608:	b530      	push	{r4, r5, lr}
  40a60a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40a60e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40a612:	ea94 0f05 	teq	r4, r5
  40a616:	bf08      	it	eq
  40a618:	ea90 0f02 	teqeq	r0, r2
  40a61c:	bf1f      	itttt	ne
  40a61e:	ea54 0c00 	orrsne.w	ip, r4, r0
  40a622:	ea55 0c02 	orrsne.w	ip, r5, r2
  40a626:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40a62a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a62e:	f000 80e2 	beq.w	40a7f6 <__adddf3+0x1ee>
  40a632:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40a636:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40a63a:	bfb8      	it	lt
  40a63c:	426d      	neglt	r5, r5
  40a63e:	dd0c      	ble.n	40a65a <__adddf3+0x52>
  40a640:	442c      	add	r4, r5
  40a642:	ea80 0202 	eor.w	r2, r0, r2
  40a646:	ea81 0303 	eor.w	r3, r1, r3
  40a64a:	ea82 0000 	eor.w	r0, r2, r0
  40a64e:	ea83 0101 	eor.w	r1, r3, r1
  40a652:	ea80 0202 	eor.w	r2, r0, r2
  40a656:	ea81 0303 	eor.w	r3, r1, r3
  40a65a:	2d36      	cmp	r5, #54	; 0x36
  40a65c:	bf88      	it	hi
  40a65e:	bd30      	pophi	{r4, r5, pc}
  40a660:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40a664:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40a668:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40a66c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40a670:	d002      	beq.n	40a678 <__adddf3+0x70>
  40a672:	4240      	negs	r0, r0
  40a674:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a678:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40a67c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40a680:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40a684:	d002      	beq.n	40a68c <__adddf3+0x84>
  40a686:	4252      	negs	r2, r2
  40a688:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40a68c:	ea94 0f05 	teq	r4, r5
  40a690:	f000 80a7 	beq.w	40a7e2 <__adddf3+0x1da>
  40a694:	f1a4 0401 	sub.w	r4, r4, #1
  40a698:	f1d5 0e20 	rsbs	lr, r5, #32
  40a69c:	db0d      	blt.n	40a6ba <__adddf3+0xb2>
  40a69e:	fa02 fc0e 	lsl.w	ip, r2, lr
  40a6a2:	fa22 f205 	lsr.w	r2, r2, r5
  40a6a6:	1880      	adds	r0, r0, r2
  40a6a8:	f141 0100 	adc.w	r1, r1, #0
  40a6ac:	fa03 f20e 	lsl.w	r2, r3, lr
  40a6b0:	1880      	adds	r0, r0, r2
  40a6b2:	fa43 f305 	asr.w	r3, r3, r5
  40a6b6:	4159      	adcs	r1, r3
  40a6b8:	e00e      	b.n	40a6d8 <__adddf3+0xd0>
  40a6ba:	f1a5 0520 	sub.w	r5, r5, #32
  40a6be:	f10e 0e20 	add.w	lr, lr, #32
  40a6c2:	2a01      	cmp	r2, #1
  40a6c4:	fa03 fc0e 	lsl.w	ip, r3, lr
  40a6c8:	bf28      	it	cs
  40a6ca:	f04c 0c02 	orrcs.w	ip, ip, #2
  40a6ce:	fa43 f305 	asr.w	r3, r3, r5
  40a6d2:	18c0      	adds	r0, r0, r3
  40a6d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40a6d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a6dc:	d507      	bpl.n	40a6ee <__adddf3+0xe6>
  40a6de:	f04f 0e00 	mov.w	lr, #0
  40a6e2:	f1dc 0c00 	rsbs	ip, ip, #0
  40a6e6:	eb7e 0000 	sbcs.w	r0, lr, r0
  40a6ea:	eb6e 0101 	sbc.w	r1, lr, r1
  40a6ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40a6f2:	d31b      	bcc.n	40a72c <__adddf3+0x124>
  40a6f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40a6f8:	d30c      	bcc.n	40a714 <__adddf3+0x10c>
  40a6fa:	0849      	lsrs	r1, r1, #1
  40a6fc:	ea5f 0030 	movs.w	r0, r0, rrx
  40a700:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40a704:	f104 0401 	add.w	r4, r4, #1
  40a708:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40a70c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40a710:	f080 809a 	bcs.w	40a848 <__adddf3+0x240>
  40a714:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40a718:	bf08      	it	eq
  40a71a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40a71e:	f150 0000 	adcs.w	r0, r0, #0
  40a722:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a726:	ea41 0105 	orr.w	r1, r1, r5
  40a72a:	bd30      	pop	{r4, r5, pc}
  40a72c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40a730:	4140      	adcs	r0, r0
  40a732:	eb41 0101 	adc.w	r1, r1, r1
  40a736:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a73a:	f1a4 0401 	sub.w	r4, r4, #1
  40a73e:	d1e9      	bne.n	40a714 <__adddf3+0x10c>
  40a740:	f091 0f00 	teq	r1, #0
  40a744:	bf04      	itt	eq
  40a746:	4601      	moveq	r1, r0
  40a748:	2000      	moveq	r0, #0
  40a74a:	fab1 f381 	clz	r3, r1
  40a74e:	bf08      	it	eq
  40a750:	3320      	addeq	r3, #32
  40a752:	f1a3 030b 	sub.w	r3, r3, #11
  40a756:	f1b3 0220 	subs.w	r2, r3, #32
  40a75a:	da0c      	bge.n	40a776 <__adddf3+0x16e>
  40a75c:	320c      	adds	r2, #12
  40a75e:	dd08      	ble.n	40a772 <__adddf3+0x16a>
  40a760:	f102 0c14 	add.w	ip, r2, #20
  40a764:	f1c2 020c 	rsb	r2, r2, #12
  40a768:	fa01 f00c 	lsl.w	r0, r1, ip
  40a76c:	fa21 f102 	lsr.w	r1, r1, r2
  40a770:	e00c      	b.n	40a78c <__adddf3+0x184>
  40a772:	f102 0214 	add.w	r2, r2, #20
  40a776:	bfd8      	it	le
  40a778:	f1c2 0c20 	rsble	ip, r2, #32
  40a77c:	fa01 f102 	lsl.w	r1, r1, r2
  40a780:	fa20 fc0c 	lsr.w	ip, r0, ip
  40a784:	bfdc      	itt	le
  40a786:	ea41 010c 	orrle.w	r1, r1, ip
  40a78a:	4090      	lslle	r0, r2
  40a78c:	1ae4      	subs	r4, r4, r3
  40a78e:	bfa2      	ittt	ge
  40a790:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40a794:	4329      	orrge	r1, r5
  40a796:	bd30      	popge	{r4, r5, pc}
  40a798:	ea6f 0404 	mvn.w	r4, r4
  40a79c:	3c1f      	subs	r4, #31
  40a79e:	da1c      	bge.n	40a7da <__adddf3+0x1d2>
  40a7a0:	340c      	adds	r4, #12
  40a7a2:	dc0e      	bgt.n	40a7c2 <__adddf3+0x1ba>
  40a7a4:	f104 0414 	add.w	r4, r4, #20
  40a7a8:	f1c4 0220 	rsb	r2, r4, #32
  40a7ac:	fa20 f004 	lsr.w	r0, r0, r4
  40a7b0:	fa01 f302 	lsl.w	r3, r1, r2
  40a7b4:	ea40 0003 	orr.w	r0, r0, r3
  40a7b8:	fa21 f304 	lsr.w	r3, r1, r4
  40a7bc:	ea45 0103 	orr.w	r1, r5, r3
  40a7c0:	bd30      	pop	{r4, r5, pc}
  40a7c2:	f1c4 040c 	rsb	r4, r4, #12
  40a7c6:	f1c4 0220 	rsb	r2, r4, #32
  40a7ca:	fa20 f002 	lsr.w	r0, r0, r2
  40a7ce:	fa01 f304 	lsl.w	r3, r1, r4
  40a7d2:	ea40 0003 	orr.w	r0, r0, r3
  40a7d6:	4629      	mov	r1, r5
  40a7d8:	bd30      	pop	{r4, r5, pc}
  40a7da:	fa21 f004 	lsr.w	r0, r1, r4
  40a7de:	4629      	mov	r1, r5
  40a7e0:	bd30      	pop	{r4, r5, pc}
  40a7e2:	f094 0f00 	teq	r4, #0
  40a7e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40a7ea:	bf06      	itte	eq
  40a7ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40a7f0:	3401      	addeq	r4, #1
  40a7f2:	3d01      	subne	r5, #1
  40a7f4:	e74e      	b.n	40a694 <__adddf3+0x8c>
  40a7f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a7fa:	bf18      	it	ne
  40a7fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a800:	d029      	beq.n	40a856 <__adddf3+0x24e>
  40a802:	ea94 0f05 	teq	r4, r5
  40a806:	bf08      	it	eq
  40a808:	ea90 0f02 	teqeq	r0, r2
  40a80c:	d005      	beq.n	40a81a <__adddf3+0x212>
  40a80e:	ea54 0c00 	orrs.w	ip, r4, r0
  40a812:	bf04      	itt	eq
  40a814:	4619      	moveq	r1, r3
  40a816:	4610      	moveq	r0, r2
  40a818:	bd30      	pop	{r4, r5, pc}
  40a81a:	ea91 0f03 	teq	r1, r3
  40a81e:	bf1e      	ittt	ne
  40a820:	2100      	movne	r1, #0
  40a822:	2000      	movne	r0, #0
  40a824:	bd30      	popne	{r4, r5, pc}
  40a826:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40a82a:	d105      	bne.n	40a838 <__adddf3+0x230>
  40a82c:	0040      	lsls	r0, r0, #1
  40a82e:	4149      	adcs	r1, r1
  40a830:	bf28      	it	cs
  40a832:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40a836:	bd30      	pop	{r4, r5, pc}
  40a838:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40a83c:	bf3c      	itt	cc
  40a83e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40a842:	bd30      	popcc	{r4, r5, pc}
  40a844:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a848:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40a84c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40a850:	f04f 0000 	mov.w	r0, #0
  40a854:	bd30      	pop	{r4, r5, pc}
  40a856:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a85a:	bf1a      	itte	ne
  40a85c:	4619      	movne	r1, r3
  40a85e:	4610      	movne	r0, r2
  40a860:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40a864:	bf1c      	itt	ne
  40a866:	460b      	movne	r3, r1
  40a868:	4602      	movne	r2, r0
  40a86a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40a86e:	bf06      	itte	eq
  40a870:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40a874:	ea91 0f03 	teqeq	r1, r3
  40a878:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40a87c:	bd30      	pop	{r4, r5, pc}
  40a87e:	bf00      	nop

0040a880 <__aeabi_ui2d>:
  40a880:	f090 0f00 	teq	r0, #0
  40a884:	bf04      	itt	eq
  40a886:	2100      	moveq	r1, #0
  40a888:	4770      	bxeq	lr
  40a88a:	b530      	push	{r4, r5, lr}
  40a88c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a890:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a894:	f04f 0500 	mov.w	r5, #0
  40a898:	f04f 0100 	mov.w	r1, #0
  40a89c:	e750      	b.n	40a740 <__adddf3+0x138>
  40a89e:	bf00      	nop

0040a8a0 <__aeabi_i2d>:
  40a8a0:	f090 0f00 	teq	r0, #0
  40a8a4:	bf04      	itt	eq
  40a8a6:	2100      	moveq	r1, #0
  40a8a8:	4770      	bxeq	lr
  40a8aa:	b530      	push	{r4, r5, lr}
  40a8ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a8b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a8b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40a8b8:	bf48      	it	mi
  40a8ba:	4240      	negmi	r0, r0
  40a8bc:	f04f 0100 	mov.w	r1, #0
  40a8c0:	e73e      	b.n	40a740 <__adddf3+0x138>
  40a8c2:	bf00      	nop

0040a8c4 <__aeabi_f2d>:
  40a8c4:	0042      	lsls	r2, r0, #1
  40a8c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40a8ca:	ea4f 0131 	mov.w	r1, r1, rrx
  40a8ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40a8d2:	bf1f      	itttt	ne
  40a8d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40a8d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a8dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40a8e0:	4770      	bxne	lr
  40a8e2:	f092 0f00 	teq	r2, #0
  40a8e6:	bf14      	ite	ne
  40a8e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a8ec:	4770      	bxeq	lr
  40a8ee:	b530      	push	{r4, r5, lr}
  40a8f0:	f44f 7460 	mov.w	r4, #896	; 0x380
  40a8f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a8f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a8fc:	e720      	b.n	40a740 <__adddf3+0x138>
  40a8fe:	bf00      	nop

0040a900 <__aeabi_ul2d>:
  40a900:	ea50 0201 	orrs.w	r2, r0, r1
  40a904:	bf08      	it	eq
  40a906:	4770      	bxeq	lr
  40a908:	b530      	push	{r4, r5, lr}
  40a90a:	f04f 0500 	mov.w	r5, #0
  40a90e:	e00a      	b.n	40a926 <__aeabi_l2d+0x16>

0040a910 <__aeabi_l2d>:
  40a910:	ea50 0201 	orrs.w	r2, r0, r1
  40a914:	bf08      	it	eq
  40a916:	4770      	bxeq	lr
  40a918:	b530      	push	{r4, r5, lr}
  40a91a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40a91e:	d502      	bpl.n	40a926 <__aeabi_l2d+0x16>
  40a920:	4240      	negs	r0, r0
  40a922:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a926:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a92a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a92e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40a932:	f43f aedc 	beq.w	40a6ee <__adddf3+0xe6>
  40a936:	f04f 0203 	mov.w	r2, #3
  40a93a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a93e:	bf18      	it	ne
  40a940:	3203      	addne	r2, #3
  40a942:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a946:	bf18      	it	ne
  40a948:	3203      	addne	r2, #3
  40a94a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40a94e:	f1c2 0320 	rsb	r3, r2, #32
  40a952:	fa00 fc03 	lsl.w	ip, r0, r3
  40a956:	fa20 f002 	lsr.w	r0, r0, r2
  40a95a:	fa01 fe03 	lsl.w	lr, r1, r3
  40a95e:	ea40 000e 	orr.w	r0, r0, lr
  40a962:	fa21 f102 	lsr.w	r1, r1, r2
  40a966:	4414      	add	r4, r2
  40a968:	e6c1      	b.n	40a6ee <__adddf3+0xe6>
  40a96a:	bf00      	nop

0040a96c <__aeabi_dmul>:
  40a96c:	b570      	push	{r4, r5, r6, lr}
  40a96e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40a972:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40a976:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40a97a:	bf1d      	ittte	ne
  40a97c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40a980:	ea94 0f0c 	teqne	r4, ip
  40a984:	ea95 0f0c 	teqne	r5, ip
  40a988:	f000 f8de 	bleq	40ab48 <__aeabi_dmul+0x1dc>
  40a98c:	442c      	add	r4, r5
  40a98e:	ea81 0603 	eor.w	r6, r1, r3
  40a992:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40a996:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40a99a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40a99e:	bf18      	it	ne
  40a9a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40a9a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a9a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40a9ac:	d038      	beq.n	40aa20 <__aeabi_dmul+0xb4>
  40a9ae:	fba0 ce02 	umull	ip, lr, r0, r2
  40a9b2:	f04f 0500 	mov.w	r5, #0
  40a9b6:	fbe1 e502 	umlal	lr, r5, r1, r2
  40a9ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40a9be:	fbe0 e503 	umlal	lr, r5, r0, r3
  40a9c2:	f04f 0600 	mov.w	r6, #0
  40a9c6:	fbe1 5603 	umlal	r5, r6, r1, r3
  40a9ca:	f09c 0f00 	teq	ip, #0
  40a9ce:	bf18      	it	ne
  40a9d0:	f04e 0e01 	orrne.w	lr, lr, #1
  40a9d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40a9d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40a9dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40a9e0:	d204      	bcs.n	40a9ec <__aeabi_dmul+0x80>
  40a9e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40a9e6:	416d      	adcs	r5, r5
  40a9e8:	eb46 0606 	adc.w	r6, r6, r6
  40a9ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40a9f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40a9f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40a9f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40a9fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40aa00:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40aa04:	bf88      	it	hi
  40aa06:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40aa0a:	d81e      	bhi.n	40aa4a <__aeabi_dmul+0xde>
  40aa0c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40aa10:	bf08      	it	eq
  40aa12:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40aa16:	f150 0000 	adcs.w	r0, r0, #0
  40aa1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40aa1e:	bd70      	pop	{r4, r5, r6, pc}
  40aa20:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40aa24:	ea46 0101 	orr.w	r1, r6, r1
  40aa28:	ea40 0002 	orr.w	r0, r0, r2
  40aa2c:	ea81 0103 	eor.w	r1, r1, r3
  40aa30:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40aa34:	bfc2      	ittt	gt
  40aa36:	ebd4 050c 	rsbsgt	r5, r4, ip
  40aa3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40aa3e:	bd70      	popgt	{r4, r5, r6, pc}
  40aa40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40aa44:	f04f 0e00 	mov.w	lr, #0
  40aa48:	3c01      	subs	r4, #1
  40aa4a:	f300 80ab 	bgt.w	40aba4 <__aeabi_dmul+0x238>
  40aa4e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40aa52:	bfde      	ittt	le
  40aa54:	2000      	movle	r0, #0
  40aa56:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40aa5a:	bd70      	pople	{r4, r5, r6, pc}
  40aa5c:	f1c4 0400 	rsb	r4, r4, #0
  40aa60:	3c20      	subs	r4, #32
  40aa62:	da35      	bge.n	40aad0 <__aeabi_dmul+0x164>
  40aa64:	340c      	adds	r4, #12
  40aa66:	dc1b      	bgt.n	40aaa0 <__aeabi_dmul+0x134>
  40aa68:	f104 0414 	add.w	r4, r4, #20
  40aa6c:	f1c4 0520 	rsb	r5, r4, #32
  40aa70:	fa00 f305 	lsl.w	r3, r0, r5
  40aa74:	fa20 f004 	lsr.w	r0, r0, r4
  40aa78:	fa01 f205 	lsl.w	r2, r1, r5
  40aa7c:	ea40 0002 	orr.w	r0, r0, r2
  40aa80:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40aa84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40aa88:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40aa8c:	fa21 f604 	lsr.w	r6, r1, r4
  40aa90:	eb42 0106 	adc.w	r1, r2, r6
  40aa94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40aa98:	bf08      	it	eq
  40aa9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40aa9e:	bd70      	pop	{r4, r5, r6, pc}
  40aaa0:	f1c4 040c 	rsb	r4, r4, #12
  40aaa4:	f1c4 0520 	rsb	r5, r4, #32
  40aaa8:	fa00 f304 	lsl.w	r3, r0, r4
  40aaac:	fa20 f005 	lsr.w	r0, r0, r5
  40aab0:	fa01 f204 	lsl.w	r2, r1, r4
  40aab4:	ea40 0002 	orr.w	r0, r0, r2
  40aab8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40aabc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40aac0:	f141 0100 	adc.w	r1, r1, #0
  40aac4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40aac8:	bf08      	it	eq
  40aaca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40aace:	bd70      	pop	{r4, r5, r6, pc}
  40aad0:	f1c4 0520 	rsb	r5, r4, #32
  40aad4:	fa00 f205 	lsl.w	r2, r0, r5
  40aad8:	ea4e 0e02 	orr.w	lr, lr, r2
  40aadc:	fa20 f304 	lsr.w	r3, r0, r4
  40aae0:	fa01 f205 	lsl.w	r2, r1, r5
  40aae4:	ea43 0302 	orr.w	r3, r3, r2
  40aae8:	fa21 f004 	lsr.w	r0, r1, r4
  40aaec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40aaf0:	fa21 f204 	lsr.w	r2, r1, r4
  40aaf4:	ea20 0002 	bic.w	r0, r0, r2
  40aaf8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40aafc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40ab00:	bf08      	it	eq
  40ab02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40ab06:	bd70      	pop	{r4, r5, r6, pc}
  40ab08:	f094 0f00 	teq	r4, #0
  40ab0c:	d10f      	bne.n	40ab2e <__aeabi_dmul+0x1c2>
  40ab0e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40ab12:	0040      	lsls	r0, r0, #1
  40ab14:	eb41 0101 	adc.w	r1, r1, r1
  40ab18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40ab1c:	bf08      	it	eq
  40ab1e:	3c01      	subeq	r4, #1
  40ab20:	d0f7      	beq.n	40ab12 <__aeabi_dmul+0x1a6>
  40ab22:	ea41 0106 	orr.w	r1, r1, r6
  40ab26:	f095 0f00 	teq	r5, #0
  40ab2a:	bf18      	it	ne
  40ab2c:	4770      	bxne	lr
  40ab2e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40ab32:	0052      	lsls	r2, r2, #1
  40ab34:	eb43 0303 	adc.w	r3, r3, r3
  40ab38:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40ab3c:	bf08      	it	eq
  40ab3e:	3d01      	subeq	r5, #1
  40ab40:	d0f7      	beq.n	40ab32 <__aeabi_dmul+0x1c6>
  40ab42:	ea43 0306 	orr.w	r3, r3, r6
  40ab46:	4770      	bx	lr
  40ab48:	ea94 0f0c 	teq	r4, ip
  40ab4c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40ab50:	bf18      	it	ne
  40ab52:	ea95 0f0c 	teqne	r5, ip
  40ab56:	d00c      	beq.n	40ab72 <__aeabi_dmul+0x206>
  40ab58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40ab5c:	bf18      	it	ne
  40ab5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40ab62:	d1d1      	bne.n	40ab08 <__aeabi_dmul+0x19c>
  40ab64:	ea81 0103 	eor.w	r1, r1, r3
  40ab68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40ab6c:	f04f 0000 	mov.w	r0, #0
  40ab70:	bd70      	pop	{r4, r5, r6, pc}
  40ab72:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40ab76:	bf06      	itte	eq
  40ab78:	4610      	moveq	r0, r2
  40ab7a:	4619      	moveq	r1, r3
  40ab7c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40ab80:	d019      	beq.n	40abb6 <__aeabi_dmul+0x24a>
  40ab82:	ea94 0f0c 	teq	r4, ip
  40ab86:	d102      	bne.n	40ab8e <__aeabi_dmul+0x222>
  40ab88:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40ab8c:	d113      	bne.n	40abb6 <__aeabi_dmul+0x24a>
  40ab8e:	ea95 0f0c 	teq	r5, ip
  40ab92:	d105      	bne.n	40aba0 <__aeabi_dmul+0x234>
  40ab94:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40ab98:	bf1c      	itt	ne
  40ab9a:	4610      	movne	r0, r2
  40ab9c:	4619      	movne	r1, r3
  40ab9e:	d10a      	bne.n	40abb6 <__aeabi_dmul+0x24a>
  40aba0:	ea81 0103 	eor.w	r1, r1, r3
  40aba4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40aba8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40abac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40abb0:	f04f 0000 	mov.w	r0, #0
  40abb4:	bd70      	pop	{r4, r5, r6, pc}
  40abb6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40abba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40abbe:	bd70      	pop	{r4, r5, r6, pc}

0040abc0 <__aeabi_ddiv>:
  40abc0:	b570      	push	{r4, r5, r6, lr}
  40abc2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40abc6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40abca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40abce:	bf1d      	ittte	ne
  40abd0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40abd4:	ea94 0f0c 	teqne	r4, ip
  40abd8:	ea95 0f0c 	teqne	r5, ip
  40abdc:	f000 f8a7 	bleq	40ad2e <__aeabi_ddiv+0x16e>
  40abe0:	eba4 0405 	sub.w	r4, r4, r5
  40abe4:	ea81 0e03 	eor.w	lr, r1, r3
  40abe8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40abec:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40abf0:	f000 8088 	beq.w	40ad04 <__aeabi_ddiv+0x144>
  40abf4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40abf8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40abfc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40ac00:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40ac04:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40ac08:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40ac0c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40ac10:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40ac14:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40ac18:	429d      	cmp	r5, r3
  40ac1a:	bf08      	it	eq
  40ac1c:	4296      	cmpeq	r6, r2
  40ac1e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40ac22:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40ac26:	d202      	bcs.n	40ac2e <__aeabi_ddiv+0x6e>
  40ac28:	085b      	lsrs	r3, r3, #1
  40ac2a:	ea4f 0232 	mov.w	r2, r2, rrx
  40ac2e:	1ab6      	subs	r6, r6, r2
  40ac30:	eb65 0503 	sbc.w	r5, r5, r3
  40ac34:	085b      	lsrs	r3, r3, #1
  40ac36:	ea4f 0232 	mov.w	r2, r2, rrx
  40ac3a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40ac3e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40ac42:	ebb6 0e02 	subs.w	lr, r6, r2
  40ac46:	eb75 0e03 	sbcs.w	lr, r5, r3
  40ac4a:	bf22      	ittt	cs
  40ac4c:	1ab6      	subcs	r6, r6, r2
  40ac4e:	4675      	movcs	r5, lr
  40ac50:	ea40 000c 	orrcs.w	r0, r0, ip
  40ac54:	085b      	lsrs	r3, r3, #1
  40ac56:	ea4f 0232 	mov.w	r2, r2, rrx
  40ac5a:	ebb6 0e02 	subs.w	lr, r6, r2
  40ac5e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40ac62:	bf22      	ittt	cs
  40ac64:	1ab6      	subcs	r6, r6, r2
  40ac66:	4675      	movcs	r5, lr
  40ac68:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40ac6c:	085b      	lsrs	r3, r3, #1
  40ac6e:	ea4f 0232 	mov.w	r2, r2, rrx
  40ac72:	ebb6 0e02 	subs.w	lr, r6, r2
  40ac76:	eb75 0e03 	sbcs.w	lr, r5, r3
  40ac7a:	bf22      	ittt	cs
  40ac7c:	1ab6      	subcs	r6, r6, r2
  40ac7e:	4675      	movcs	r5, lr
  40ac80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40ac84:	085b      	lsrs	r3, r3, #1
  40ac86:	ea4f 0232 	mov.w	r2, r2, rrx
  40ac8a:	ebb6 0e02 	subs.w	lr, r6, r2
  40ac8e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40ac92:	bf22      	ittt	cs
  40ac94:	1ab6      	subcs	r6, r6, r2
  40ac96:	4675      	movcs	r5, lr
  40ac98:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40ac9c:	ea55 0e06 	orrs.w	lr, r5, r6
  40aca0:	d018      	beq.n	40acd4 <__aeabi_ddiv+0x114>
  40aca2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40aca6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40acaa:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40acae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40acb2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40acb6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40acba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40acbe:	d1c0      	bne.n	40ac42 <__aeabi_ddiv+0x82>
  40acc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40acc4:	d10b      	bne.n	40acde <__aeabi_ddiv+0x11e>
  40acc6:	ea41 0100 	orr.w	r1, r1, r0
  40acca:	f04f 0000 	mov.w	r0, #0
  40acce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40acd2:	e7b6      	b.n	40ac42 <__aeabi_ddiv+0x82>
  40acd4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40acd8:	bf04      	itt	eq
  40acda:	4301      	orreq	r1, r0
  40acdc:	2000      	moveq	r0, #0
  40acde:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40ace2:	bf88      	it	hi
  40ace4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40ace8:	f63f aeaf 	bhi.w	40aa4a <__aeabi_dmul+0xde>
  40acec:	ebb5 0c03 	subs.w	ip, r5, r3
  40acf0:	bf04      	itt	eq
  40acf2:	ebb6 0c02 	subseq.w	ip, r6, r2
  40acf6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40acfa:	f150 0000 	adcs.w	r0, r0, #0
  40acfe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40ad02:	bd70      	pop	{r4, r5, r6, pc}
  40ad04:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40ad08:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40ad0c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40ad10:	bfc2      	ittt	gt
  40ad12:	ebd4 050c 	rsbsgt	r5, r4, ip
  40ad16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40ad1a:	bd70      	popgt	{r4, r5, r6, pc}
  40ad1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40ad20:	f04f 0e00 	mov.w	lr, #0
  40ad24:	3c01      	subs	r4, #1
  40ad26:	e690      	b.n	40aa4a <__aeabi_dmul+0xde>
  40ad28:	ea45 0e06 	orr.w	lr, r5, r6
  40ad2c:	e68d      	b.n	40aa4a <__aeabi_dmul+0xde>
  40ad2e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40ad32:	ea94 0f0c 	teq	r4, ip
  40ad36:	bf08      	it	eq
  40ad38:	ea95 0f0c 	teqeq	r5, ip
  40ad3c:	f43f af3b 	beq.w	40abb6 <__aeabi_dmul+0x24a>
  40ad40:	ea94 0f0c 	teq	r4, ip
  40ad44:	d10a      	bne.n	40ad5c <__aeabi_ddiv+0x19c>
  40ad46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40ad4a:	f47f af34 	bne.w	40abb6 <__aeabi_dmul+0x24a>
  40ad4e:	ea95 0f0c 	teq	r5, ip
  40ad52:	f47f af25 	bne.w	40aba0 <__aeabi_dmul+0x234>
  40ad56:	4610      	mov	r0, r2
  40ad58:	4619      	mov	r1, r3
  40ad5a:	e72c      	b.n	40abb6 <__aeabi_dmul+0x24a>
  40ad5c:	ea95 0f0c 	teq	r5, ip
  40ad60:	d106      	bne.n	40ad70 <__aeabi_ddiv+0x1b0>
  40ad62:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40ad66:	f43f aefd 	beq.w	40ab64 <__aeabi_dmul+0x1f8>
  40ad6a:	4610      	mov	r0, r2
  40ad6c:	4619      	mov	r1, r3
  40ad6e:	e722      	b.n	40abb6 <__aeabi_dmul+0x24a>
  40ad70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40ad74:	bf18      	it	ne
  40ad76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40ad7a:	f47f aec5 	bne.w	40ab08 <__aeabi_dmul+0x19c>
  40ad7e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40ad82:	f47f af0d 	bne.w	40aba0 <__aeabi_dmul+0x234>
  40ad86:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40ad8a:	f47f aeeb 	bne.w	40ab64 <__aeabi_dmul+0x1f8>
  40ad8e:	e712      	b.n	40abb6 <__aeabi_dmul+0x24a>

0040ad90 <__gedf2>:
  40ad90:	f04f 3cff 	mov.w	ip, #4294967295
  40ad94:	e006      	b.n	40ada4 <__cmpdf2+0x4>
  40ad96:	bf00      	nop

0040ad98 <__ledf2>:
  40ad98:	f04f 0c01 	mov.w	ip, #1
  40ad9c:	e002      	b.n	40ada4 <__cmpdf2+0x4>
  40ad9e:	bf00      	nop

0040ada0 <__cmpdf2>:
  40ada0:	f04f 0c01 	mov.w	ip, #1
  40ada4:	f84d cd04 	str.w	ip, [sp, #-4]!
  40ada8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40adac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40adb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40adb4:	bf18      	it	ne
  40adb6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40adba:	d01b      	beq.n	40adf4 <__cmpdf2+0x54>
  40adbc:	b001      	add	sp, #4
  40adbe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40adc2:	bf0c      	ite	eq
  40adc4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40adc8:	ea91 0f03 	teqne	r1, r3
  40adcc:	bf02      	ittt	eq
  40adce:	ea90 0f02 	teqeq	r0, r2
  40add2:	2000      	moveq	r0, #0
  40add4:	4770      	bxeq	lr
  40add6:	f110 0f00 	cmn.w	r0, #0
  40adda:	ea91 0f03 	teq	r1, r3
  40adde:	bf58      	it	pl
  40ade0:	4299      	cmppl	r1, r3
  40ade2:	bf08      	it	eq
  40ade4:	4290      	cmpeq	r0, r2
  40ade6:	bf2c      	ite	cs
  40ade8:	17d8      	asrcs	r0, r3, #31
  40adea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40adee:	f040 0001 	orr.w	r0, r0, #1
  40adf2:	4770      	bx	lr
  40adf4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40adf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40adfc:	d102      	bne.n	40ae04 <__cmpdf2+0x64>
  40adfe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40ae02:	d107      	bne.n	40ae14 <__cmpdf2+0x74>
  40ae04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40ae08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ae0c:	d1d6      	bne.n	40adbc <__cmpdf2+0x1c>
  40ae0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40ae12:	d0d3      	beq.n	40adbc <__cmpdf2+0x1c>
  40ae14:	f85d 0b04 	ldr.w	r0, [sp], #4
  40ae18:	4770      	bx	lr
  40ae1a:	bf00      	nop

0040ae1c <__aeabi_cdrcmple>:
  40ae1c:	4684      	mov	ip, r0
  40ae1e:	4610      	mov	r0, r2
  40ae20:	4662      	mov	r2, ip
  40ae22:	468c      	mov	ip, r1
  40ae24:	4619      	mov	r1, r3
  40ae26:	4663      	mov	r3, ip
  40ae28:	e000      	b.n	40ae2c <__aeabi_cdcmpeq>
  40ae2a:	bf00      	nop

0040ae2c <__aeabi_cdcmpeq>:
  40ae2c:	b501      	push	{r0, lr}
  40ae2e:	f7ff ffb7 	bl	40ada0 <__cmpdf2>
  40ae32:	2800      	cmp	r0, #0
  40ae34:	bf48      	it	mi
  40ae36:	f110 0f00 	cmnmi.w	r0, #0
  40ae3a:	bd01      	pop	{r0, pc}

0040ae3c <__aeabi_dcmpeq>:
  40ae3c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ae40:	f7ff fff4 	bl	40ae2c <__aeabi_cdcmpeq>
  40ae44:	bf0c      	ite	eq
  40ae46:	2001      	moveq	r0, #1
  40ae48:	2000      	movne	r0, #0
  40ae4a:	f85d fb08 	ldr.w	pc, [sp], #8
  40ae4e:	bf00      	nop

0040ae50 <__aeabi_dcmplt>:
  40ae50:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ae54:	f7ff ffea 	bl	40ae2c <__aeabi_cdcmpeq>
  40ae58:	bf34      	ite	cc
  40ae5a:	2001      	movcc	r0, #1
  40ae5c:	2000      	movcs	r0, #0
  40ae5e:	f85d fb08 	ldr.w	pc, [sp], #8
  40ae62:	bf00      	nop

0040ae64 <__aeabi_dcmple>:
  40ae64:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ae68:	f7ff ffe0 	bl	40ae2c <__aeabi_cdcmpeq>
  40ae6c:	bf94      	ite	ls
  40ae6e:	2001      	movls	r0, #1
  40ae70:	2000      	movhi	r0, #0
  40ae72:	f85d fb08 	ldr.w	pc, [sp], #8
  40ae76:	bf00      	nop

0040ae78 <__aeabi_dcmpge>:
  40ae78:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ae7c:	f7ff ffce 	bl	40ae1c <__aeabi_cdrcmple>
  40ae80:	bf94      	ite	ls
  40ae82:	2001      	movls	r0, #1
  40ae84:	2000      	movhi	r0, #0
  40ae86:	f85d fb08 	ldr.w	pc, [sp], #8
  40ae8a:	bf00      	nop

0040ae8c <__aeabi_dcmpgt>:
  40ae8c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ae90:	f7ff ffc4 	bl	40ae1c <__aeabi_cdrcmple>
  40ae94:	bf34      	ite	cc
  40ae96:	2001      	movcc	r0, #1
  40ae98:	2000      	movcs	r0, #0
  40ae9a:	f85d fb08 	ldr.w	pc, [sp], #8
  40ae9e:	bf00      	nop

0040aea0 <__aeabi_dcmpun>:
  40aea0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40aea4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40aea8:	d102      	bne.n	40aeb0 <__aeabi_dcmpun+0x10>
  40aeaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40aeae:	d10a      	bne.n	40aec6 <__aeabi_dcmpun+0x26>
  40aeb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40aeb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40aeb8:	d102      	bne.n	40aec0 <__aeabi_dcmpun+0x20>
  40aeba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40aebe:	d102      	bne.n	40aec6 <__aeabi_dcmpun+0x26>
  40aec0:	f04f 0000 	mov.w	r0, #0
  40aec4:	4770      	bx	lr
  40aec6:	f04f 0001 	mov.w	r0, #1
  40aeca:	4770      	bx	lr

0040aecc <__aeabi_d2iz>:
  40aecc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40aed0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40aed4:	d215      	bcs.n	40af02 <__aeabi_d2iz+0x36>
  40aed6:	d511      	bpl.n	40aefc <__aeabi_d2iz+0x30>
  40aed8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40aedc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40aee0:	d912      	bls.n	40af08 <__aeabi_d2iz+0x3c>
  40aee2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40aee6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40aeea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40aeee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40aef2:	fa23 f002 	lsr.w	r0, r3, r2
  40aef6:	bf18      	it	ne
  40aef8:	4240      	negne	r0, r0
  40aefa:	4770      	bx	lr
  40aefc:	f04f 0000 	mov.w	r0, #0
  40af00:	4770      	bx	lr
  40af02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40af06:	d105      	bne.n	40af14 <__aeabi_d2iz+0x48>
  40af08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40af0c:	bf08      	it	eq
  40af0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40af12:	4770      	bx	lr
  40af14:	f04f 0000 	mov.w	r0, #0
  40af18:	4770      	bx	lr
  40af1a:	bf00      	nop

0040af1c <__aeabi_d2f>:
  40af1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40af20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  40af24:	bf24      	itt	cs
  40af26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40af2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40af2e:	d90d      	bls.n	40af4c <__aeabi_d2f+0x30>
  40af30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40af34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  40af38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  40af3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  40af40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  40af44:	bf08      	it	eq
  40af46:	f020 0001 	biceq.w	r0, r0, #1
  40af4a:	4770      	bx	lr
  40af4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  40af50:	d121      	bne.n	40af96 <__aeabi_d2f+0x7a>
  40af52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40af56:	bfbc      	itt	lt
  40af58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  40af5c:	4770      	bxlt	lr
  40af5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40af62:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40af66:	f1c2 0218 	rsb	r2, r2, #24
  40af6a:	f1c2 0c20 	rsb	ip, r2, #32
  40af6e:	fa10 f30c 	lsls.w	r3, r0, ip
  40af72:	fa20 f002 	lsr.w	r0, r0, r2
  40af76:	bf18      	it	ne
  40af78:	f040 0001 	orrne.w	r0, r0, #1
  40af7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40af80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  40af84:	fa03 fc0c 	lsl.w	ip, r3, ip
  40af88:	ea40 000c 	orr.w	r0, r0, ip
  40af8c:	fa23 f302 	lsr.w	r3, r3, r2
  40af90:	ea4f 0343 	mov.w	r3, r3, lsl #1
  40af94:	e7cc      	b.n	40af30 <__aeabi_d2f+0x14>
  40af96:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40af9a:	d107      	bne.n	40afac <__aeabi_d2f+0x90>
  40af9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  40afa0:	bf1e      	ittt	ne
  40afa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40afa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40afaa:	4770      	bxne	lr
  40afac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  40afb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40afb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40afb8:	4770      	bx	lr
  40afba:	bf00      	nop

0040afbc <__aeabi_frsub>:
  40afbc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  40afc0:	e002      	b.n	40afc8 <__addsf3>
  40afc2:	bf00      	nop

0040afc4 <__aeabi_fsub>:
  40afc4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0040afc8 <__addsf3>:
  40afc8:	0042      	lsls	r2, r0, #1
  40afca:	bf1f      	itttt	ne
  40afcc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  40afd0:	ea92 0f03 	teqne	r2, r3
  40afd4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  40afd8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40afdc:	d06a      	beq.n	40b0b4 <__addsf3+0xec>
  40afde:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40afe2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  40afe6:	bfc1      	itttt	gt
  40afe8:	18d2      	addgt	r2, r2, r3
  40afea:	4041      	eorgt	r1, r0
  40afec:	4048      	eorgt	r0, r1
  40afee:	4041      	eorgt	r1, r0
  40aff0:	bfb8      	it	lt
  40aff2:	425b      	neglt	r3, r3
  40aff4:	2b19      	cmp	r3, #25
  40aff6:	bf88      	it	hi
  40aff8:	4770      	bxhi	lr
  40affa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  40affe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40b002:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  40b006:	bf18      	it	ne
  40b008:	4240      	negne	r0, r0
  40b00a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40b00e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  40b012:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  40b016:	bf18      	it	ne
  40b018:	4249      	negne	r1, r1
  40b01a:	ea92 0f03 	teq	r2, r3
  40b01e:	d03f      	beq.n	40b0a0 <__addsf3+0xd8>
  40b020:	f1a2 0201 	sub.w	r2, r2, #1
  40b024:	fa41 fc03 	asr.w	ip, r1, r3
  40b028:	eb10 000c 	adds.w	r0, r0, ip
  40b02c:	f1c3 0320 	rsb	r3, r3, #32
  40b030:	fa01 f103 	lsl.w	r1, r1, r3
  40b034:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40b038:	d502      	bpl.n	40b040 <__addsf3+0x78>
  40b03a:	4249      	negs	r1, r1
  40b03c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  40b040:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  40b044:	d313      	bcc.n	40b06e <__addsf3+0xa6>
  40b046:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  40b04a:	d306      	bcc.n	40b05a <__addsf3+0x92>
  40b04c:	0840      	lsrs	r0, r0, #1
  40b04e:	ea4f 0131 	mov.w	r1, r1, rrx
  40b052:	f102 0201 	add.w	r2, r2, #1
  40b056:	2afe      	cmp	r2, #254	; 0xfe
  40b058:	d251      	bcs.n	40b0fe <__addsf3+0x136>
  40b05a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  40b05e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40b062:	bf08      	it	eq
  40b064:	f020 0001 	biceq.w	r0, r0, #1
  40b068:	ea40 0003 	orr.w	r0, r0, r3
  40b06c:	4770      	bx	lr
  40b06e:	0049      	lsls	r1, r1, #1
  40b070:	eb40 0000 	adc.w	r0, r0, r0
  40b074:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  40b078:	f1a2 0201 	sub.w	r2, r2, #1
  40b07c:	d1ed      	bne.n	40b05a <__addsf3+0x92>
  40b07e:	fab0 fc80 	clz	ip, r0
  40b082:	f1ac 0c08 	sub.w	ip, ip, #8
  40b086:	ebb2 020c 	subs.w	r2, r2, ip
  40b08a:	fa00 f00c 	lsl.w	r0, r0, ip
  40b08e:	bfaa      	itet	ge
  40b090:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  40b094:	4252      	neglt	r2, r2
  40b096:	4318      	orrge	r0, r3
  40b098:	bfbc      	itt	lt
  40b09a:	40d0      	lsrlt	r0, r2
  40b09c:	4318      	orrlt	r0, r3
  40b09e:	4770      	bx	lr
  40b0a0:	f092 0f00 	teq	r2, #0
  40b0a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  40b0a8:	bf06      	itte	eq
  40b0aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  40b0ae:	3201      	addeq	r2, #1
  40b0b0:	3b01      	subne	r3, #1
  40b0b2:	e7b5      	b.n	40b020 <__addsf3+0x58>
  40b0b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
  40b0b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  40b0bc:	bf18      	it	ne
  40b0be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40b0c2:	d021      	beq.n	40b108 <__addsf3+0x140>
  40b0c4:	ea92 0f03 	teq	r2, r3
  40b0c8:	d004      	beq.n	40b0d4 <__addsf3+0x10c>
  40b0ca:	f092 0f00 	teq	r2, #0
  40b0ce:	bf08      	it	eq
  40b0d0:	4608      	moveq	r0, r1
  40b0d2:	4770      	bx	lr
  40b0d4:	ea90 0f01 	teq	r0, r1
  40b0d8:	bf1c      	itt	ne
  40b0da:	2000      	movne	r0, #0
  40b0dc:	4770      	bxne	lr
  40b0de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  40b0e2:	d104      	bne.n	40b0ee <__addsf3+0x126>
  40b0e4:	0040      	lsls	r0, r0, #1
  40b0e6:	bf28      	it	cs
  40b0e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  40b0ec:	4770      	bx	lr
  40b0ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  40b0f2:	bf3c      	itt	cc
  40b0f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  40b0f8:	4770      	bxcc	lr
  40b0fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40b0fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  40b102:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40b106:	4770      	bx	lr
  40b108:	ea7f 6222 	mvns.w	r2, r2, asr #24
  40b10c:	bf16      	itet	ne
  40b10e:	4608      	movne	r0, r1
  40b110:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  40b114:	4601      	movne	r1, r0
  40b116:	0242      	lsls	r2, r0, #9
  40b118:	bf06      	itte	eq
  40b11a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  40b11e:	ea90 0f01 	teqeq	r0, r1
  40b122:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  40b126:	4770      	bx	lr

0040b128 <__aeabi_ui2f>:
  40b128:	f04f 0300 	mov.w	r3, #0
  40b12c:	e004      	b.n	40b138 <__aeabi_i2f+0x8>
  40b12e:	bf00      	nop

0040b130 <__aeabi_i2f>:
  40b130:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  40b134:	bf48      	it	mi
  40b136:	4240      	negmi	r0, r0
  40b138:	ea5f 0c00 	movs.w	ip, r0
  40b13c:	bf08      	it	eq
  40b13e:	4770      	bxeq	lr
  40b140:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  40b144:	4601      	mov	r1, r0
  40b146:	f04f 0000 	mov.w	r0, #0
  40b14a:	e01c      	b.n	40b186 <__aeabi_l2f+0x2a>

0040b14c <__aeabi_ul2f>:
  40b14c:	ea50 0201 	orrs.w	r2, r0, r1
  40b150:	bf08      	it	eq
  40b152:	4770      	bxeq	lr
  40b154:	f04f 0300 	mov.w	r3, #0
  40b158:	e00a      	b.n	40b170 <__aeabi_l2f+0x14>
  40b15a:	bf00      	nop

0040b15c <__aeabi_l2f>:
  40b15c:	ea50 0201 	orrs.w	r2, r0, r1
  40b160:	bf08      	it	eq
  40b162:	4770      	bxeq	lr
  40b164:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  40b168:	d502      	bpl.n	40b170 <__aeabi_l2f+0x14>
  40b16a:	4240      	negs	r0, r0
  40b16c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40b170:	ea5f 0c01 	movs.w	ip, r1
  40b174:	bf02      	ittt	eq
  40b176:	4684      	moveq	ip, r0
  40b178:	4601      	moveq	r1, r0
  40b17a:	2000      	moveq	r0, #0
  40b17c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  40b180:	bf08      	it	eq
  40b182:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  40b186:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  40b18a:	fabc f28c 	clz	r2, ip
  40b18e:	3a08      	subs	r2, #8
  40b190:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  40b194:	db10      	blt.n	40b1b8 <__aeabi_l2f+0x5c>
  40b196:	fa01 fc02 	lsl.w	ip, r1, r2
  40b19a:	4463      	add	r3, ip
  40b19c:	fa00 fc02 	lsl.w	ip, r0, r2
  40b1a0:	f1c2 0220 	rsb	r2, r2, #32
  40b1a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40b1a8:	fa20 f202 	lsr.w	r2, r0, r2
  40b1ac:	eb43 0002 	adc.w	r0, r3, r2
  40b1b0:	bf08      	it	eq
  40b1b2:	f020 0001 	biceq.w	r0, r0, #1
  40b1b6:	4770      	bx	lr
  40b1b8:	f102 0220 	add.w	r2, r2, #32
  40b1bc:	fa01 fc02 	lsl.w	ip, r1, r2
  40b1c0:	f1c2 0220 	rsb	r2, r2, #32
  40b1c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  40b1c8:	fa21 f202 	lsr.w	r2, r1, r2
  40b1cc:	eb43 0002 	adc.w	r0, r3, r2
  40b1d0:	bf08      	it	eq
  40b1d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  40b1d6:	4770      	bx	lr

0040b1d8 <__aeabi_fmul>:
  40b1d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40b1dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  40b1e0:	bf1e      	ittt	ne
  40b1e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40b1e6:	ea92 0f0c 	teqne	r2, ip
  40b1ea:	ea93 0f0c 	teqne	r3, ip
  40b1ee:	d06f      	beq.n	40b2d0 <__aeabi_fmul+0xf8>
  40b1f0:	441a      	add	r2, r3
  40b1f2:	ea80 0c01 	eor.w	ip, r0, r1
  40b1f6:	0240      	lsls	r0, r0, #9
  40b1f8:	bf18      	it	ne
  40b1fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  40b1fe:	d01e      	beq.n	40b23e <__aeabi_fmul+0x66>
  40b200:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  40b204:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  40b208:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  40b20c:	fba0 3101 	umull	r3, r1, r0, r1
  40b210:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  40b214:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  40b218:	bf3e      	ittt	cc
  40b21a:	0049      	lslcc	r1, r1, #1
  40b21c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  40b220:	005b      	lslcc	r3, r3, #1
  40b222:	ea40 0001 	orr.w	r0, r0, r1
  40b226:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  40b22a:	2afd      	cmp	r2, #253	; 0xfd
  40b22c:	d81d      	bhi.n	40b26a <__aeabi_fmul+0x92>
  40b22e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  40b232:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40b236:	bf08      	it	eq
  40b238:	f020 0001 	biceq.w	r0, r0, #1
  40b23c:	4770      	bx	lr
  40b23e:	f090 0f00 	teq	r0, #0
  40b242:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  40b246:	bf08      	it	eq
  40b248:	0249      	lsleq	r1, r1, #9
  40b24a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  40b24e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  40b252:	3a7f      	subs	r2, #127	; 0x7f
  40b254:	bfc2      	ittt	gt
  40b256:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40b25a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  40b25e:	4770      	bxgt	lr
  40b260:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40b264:	f04f 0300 	mov.w	r3, #0
  40b268:	3a01      	subs	r2, #1
  40b26a:	dc5d      	bgt.n	40b328 <__aeabi_fmul+0x150>
  40b26c:	f112 0f19 	cmn.w	r2, #25
  40b270:	bfdc      	itt	le
  40b272:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  40b276:	4770      	bxle	lr
  40b278:	f1c2 0200 	rsb	r2, r2, #0
  40b27c:	0041      	lsls	r1, r0, #1
  40b27e:	fa21 f102 	lsr.w	r1, r1, r2
  40b282:	f1c2 0220 	rsb	r2, r2, #32
  40b286:	fa00 fc02 	lsl.w	ip, r0, r2
  40b28a:	ea5f 0031 	movs.w	r0, r1, rrx
  40b28e:	f140 0000 	adc.w	r0, r0, #0
  40b292:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  40b296:	bf08      	it	eq
  40b298:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  40b29c:	4770      	bx	lr
  40b29e:	f092 0f00 	teq	r2, #0
  40b2a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  40b2a6:	bf02      	ittt	eq
  40b2a8:	0040      	lsleq	r0, r0, #1
  40b2aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  40b2ae:	3a01      	subeq	r2, #1
  40b2b0:	d0f9      	beq.n	40b2a6 <__aeabi_fmul+0xce>
  40b2b2:	ea40 000c 	orr.w	r0, r0, ip
  40b2b6:	f093 0f00 	teq	r3, #0
  40b2ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40b2be:	bf02      	ittt	eq
  40b2c0:	0049      	lsleq	r1, r1, #1
  40b2c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  40b2c6:	3b01      	subeq	r3, #1
  40b2c8:	d0f9      	beq.n	40b2be <__aeabi_fmul+0xe6>
  40b2ca:	ea41 010c 	orr.w	r1, r1, ip
  40b2ce:	e78f      	b.n	40b1f0 <__aeabi_fmul+0x18>
  40b2d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  40b2d4:	ea92 0f0c 	teq	r2, ip
  40b2d8:	bf18      	it	ne
  40b2da:	ea93 0f0c 	teqne	r3, ip
  40b2de:	d00a      	beq.n	40b2f6 <__aeabi_fmul+0x11e>
  40b2e0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  40b2e4:	bf18      	it	ne
  40b2e6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  40b2ea:	d1d8      	bne.n	40b29e <__aeabi_fmul+0xc6>
  40b2ec:	ea80 0001 	eor.w	r0, r0, r1
  40b2f0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  40b2f4:	4770      	bx	lr
  40b2f6:	f090 0f00 	teq	r0, #0
  40b2fa:	bf17      	itett	ne
  40b2fc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  40b300:	4608      	moveq	r0, r1
  40b302:	f091 0f00 	teqne	r1, #0
  40b306:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  40b30a:	d014      	beq.n	40b336 <__aeabi_fmul+0x15e>
  40b30c:	ea92 0f0c 	teq	r2, ip
  40b310:	d101      	bne.n	40b316 <__aeabi_fmul+0x13e>
  40b312:	0242      	lsls	r2, r0, #9
  40b314:	d10f      	bne.n	40b336 <__aeabi_fmul+0x15e>
  40b316:	ea93 0f0c 	teq	r3, ip
  40b31a:	d103      	bne.n	40b324 <__aeabi_fmul+0x14c>
  40b31c:	024b      	lsls	r3, r1, #9
  40b31e:	bf18      	it	ne
  40b320:	4608      	movne	r0, r1
  40b322:	d108      	bne.n	40b336 <__aeabi_fmul+0x15e>
  40b324:	ea80 0001 	eor.w	r0, r0, r1
  40b328:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  40b32c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40b330:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40b334:	4770      	bx	lr
  40b336:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40b33a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  40b33e:	4770      	bx	lr

0040b340 <__aeabi_fdiv>:
  40b340:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40b344:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  40b348:	bf1e      	ittt	ne
  40b34a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40b34e:	ea92 0f0c 	teqne	r2, ip
  40b352:	ea93 0f0c 	teqne	r3, ip
  40b356:	d069      	beq.n	40b42c <__aeabi_fdiv+0xec>
  40b358:	eba2 0203 	sub.w	r2, r2, r3
  40b35c:	ea80 0c01 	eor.w	ip, r0, r1
  40b360:	0249      	lsls	r1, r1, #9
  40b362:	ea4f 2040 	mov.w	r0, r0, lsl #9
  40b366:	d037      	beq.n	40b3d8 <__aeabi_fdiv+0x98>
  40b368:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40b36c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  40b370:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  40b374:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  40b378:	428b      	cmp	r3, r1
  40b37a:	bf38      	it	cc
  40b37c:	005b      	lslcc	r3, r3, #1
  40b37e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  40b382:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  40b386:	428b      	cmp	r3, r1
  40b388:	bf24      	itt	cs
  40b38a:	1a5b      	subcs	r3, r3, r1
  40b38c:	ea40 000c 	orrcs.w	r0, r0, ip
  40b390:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  40b394:	bf24      	itt	cs
  40b396:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  40b39a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40b39e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  40b3a2:	bf24      	itt	cs
  40b3a4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  40b3a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40b3ac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  40b3b0:	bf24      	itt	cs
  40b3b2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  40b3b6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40b3ba:	011b      	lsls	r3, r3, #4
  40b3bc:	bf18      	it	ne
  40b3be:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  40b3c2:	d1e0      	bne.n	40b386 <__aeabi_fdiv+0x46>
  40b3c4:	2afd      	cmp	r2, #253	; 0xfd
  40b3c6:	f63f af50 	bhi.w	40b26a <__aeabi_fmul+0x92>
  40b3ca:	428b      	cmp	r3, r1
  40b3cc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40b3d0:	bf08      	it	eq
  40b3d2:	f020 0001 	biceq.w	r0, r0, #1
  40b3d6:	4770      	bx	lr
  40b3d8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  40b3dc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  40b3e0:	327f      	adds	r2, #127	; 0x7f
  40b3e2:	bfc2      	ittt	gt
  40b3e4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40b3e8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  40b3ec:	4770      	bxgt	lr
  40b3ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40b3f2:	f04f 0300 	mov.w	r3, #0
  40b3f6:	3a01      	subs	r2, #1
  40b3f8:	e737      	b.n	40b26a <__aeabi_fmul+0x92>
  40b3fa:	f092 0f00 	teq	r2, #0
  40b3fe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  40b402:	bf02      	ittt	eq
  40b404:	0040      	lsleq	r0, r0, #1
  40b406:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  40b40a:	3a01      	subeq	r2, #1
  40b40c:	d0f9      	beq.n	40b402 <__aeabi_fdiv+0xc2>
  40b40e:	ea40 000c 	orr.w	r0, r0, ip
  40b412:	f093 0f00 	teq	r3, #0
  40b416:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40b41a:	bf02      	ittt	eq
  40b41c:	0049      	lsleq	r1, r1, #1
  40b41e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  40b422:	3b01      	subeq	r3, #1
  40b424:	d0f9      	beq.n	40b41a <__aeabi_fdiv+0xda>
  40b426:	ea41 010c 	orr.w	r1, r1, ip
  40b42a:	e795      	b.n	40b358 <__aeabi_fdiv+0x18>
  40b42c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  40b430:	ea92 0f0c 	teq	r2, ip
  40b434:	d108      	bne.n	40b448 <__aeabi_fdiv+0x108>
  40b436:	0242      	lsls	r2, r0, #9
  40b438:	f47f af7d 	bne.w	40b336 <__aeabi_fmul+0x15e>
  40b43c:	ea93 0f0c 	teq	r3, ip
  40b440:	f47f af70 	bne.w	40b324 <__aeabi_fmul+0x14c>
  40b444:	4608      	mov	r0, r1
  40b446:	e776      	b.n	40b336 <__aeabi_fmul+0x15e>
  40b448:	ea93 0f0c 	teq	r3, ip
  40b44c:	d104      	bne.n	40b458 <__aeabi_fdiv+0x118>
  40b44e:	024b      	lsls	r3, r1, #9
  40b450:	f43f af4c 	beq.w	40b2ec <__aeabi_fmul+0x114>
  40b454:	4608      	mov	r0, r1
  40b456:	e76e      	b.n	40b336 <__aeabi_fmul+0x15e>
  40b458:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  40b45c:	bf18      	it	ne
  40b45e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  40b462:	d1ca      	bne.n	40b3fa <__aeabi_fdiv+0xba>
  40b464:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  40b468:	f47f af5c 	bne.w	40b324 <__aeabi_fmul+0x14c>
  40b46c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  40b470:	f47f af3c 	bne.w	40b2ec <__aeabi_fmul+0x114>
  40b474:	e75f      	b.n	40b336 <__aeabi_fmul+0x15e>
  40b476:	bf00      	nop

0040b478 <__gesf2>:
  40b478:	f04f 3cff 	mov.w	ip, #4294967295
  40b47c:	e006      	b.n	40b48c <__cmpsf2+0x4>
  40b47e:	bf00      	nop

0040b480 <__lesf2>:
  40b480:	f04f 0c01 	mov.w	ip, #1
  40b484:	e002      	b.n	40b48c <__cmpsf2+0x4>
  40b486:	bf00      	nop

0040b488 <__cmpsf2>:
  40b488:	f04f 0c01 	mov.w	ip, #1
  40b48c:	f84d cd04 	str.w	ip, [sp, #-4]!
  40b490:	ea4f 0240 	mov.w	r2, r0, lsl #1
  40b494:	ea4f 0341 	mov.w	r3, r1, lsl #1
  40b498:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  40b49c:	bf18      	it	ne
  40b49e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40b4a2:	d011      	beq.n	40b4c8 <__cmpsf2+0x40>
  40b4a4:	b001      	add	sp, #4
  40b4a6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  40b4aa:	bf18      	it	ne
  40b4ac:	ea90 0f01 	teqne	r0, r1
  40b4b0:	bf58      	it	pl
  40b4b2:	ebb2 0003 	subspl.w	r0, r2, r3
  40b4b6:	bf88      	it	hi
  40b4b8:	17c8      	asrhi	r0, r1, #31
  40b4ba:	bf38      	it	cc
  40b4bc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  40b4c0:	bf18      	it	ne
  40b4c2:	f040 0001 	orrne.w	r0, r0, #1
  40b4c6:	4770      	bx	lr
  40b4c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  40b4cc:	d102      	bne.n	40b4d4 <__cmpsf2+0x4c>
  40b4ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  40b4d2:	d105      	bne.n	40b4e0 <__cmpsf2+0x58>
  40b4d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  40b4d8:	d1e4      	bne.n	40b4a4 <__cmpsf2+0x1c>
  40b4da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  40b4de:	d0e1      	beq.n	40b4a4 <__cmpsf2+0x1c>
  40b4e0:	f85d 0b04 	ldr.w	r0, [sp], #4
  40b4e4:	4770      	bx	lr
  40b4e6:	bf00      	nop

0040b4e8 <__aeabi_cfrcmple>:
  40b4e8:	4684      	mov	ip, r0
  40b4ea:	4608      	mov	r0, r1
  40b4ec:	4661      	mov	r1, ip
  40b4ee:	e7ff      	b.n	40b4f0 <__aeabi_cfcmpeq>

0040b4f0 <__aeabi_cfcmpeq>:
  40b4f0:	b50f      	push	{r0, r1, r2, r3, lr}
  40b4f2:	f7ff ffc9 	bl	40b488 <__cmpsf2>
  40b4f6:	2800      	cmp	r0, #0
  40b4f8:	bf48      	it	mi
  40b4fa:	f110 0f00 	cmnmi.w	r0, #0
  40b4fe:	bd0f      	pop	{r0, r1, r2, r3, pc}

0040b500 <__aeabi_fcmpeq>:
  40b500:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b504:	f7ff fff4 	bl	40b4f0 <__aeabi_cfcmpeq>
  40b508:	bf0c      	ite	eq
  40b50a:	2001      	moveq	r0, #1
  40b50c:	2000      	movne	r0, #0
  40b50e:	f85d fb08 	ldr.w	pc, [sp], #8
  40b512:	bf00      	nop

0040b514 <__aeabi_fcmplt>:
  40b514:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b518:	f7ff ffea 	bl	40b4f0 <__aeabi_cfcmpeq>
  40b51c:	bf34      	ite	cc
  40b51e:	2001      	movcc	r0, #1
  40b520:	2000      	movcs	r0, #0
  40b522:	f85d fb08 	ldr.w	pc, [sp], #8
  40b526:	bf00      	nop

0040b528 <__aeabi_fcmple>:
  40b528:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b52c:	f7ff ffe0 	bl	40b4f0 <__aeabi_cfcmpeq>
  40b530:	bf94      	ite	ls
  40b532:	2001      	movls	r0, #1
  40b534:	2000      	movhi	r0, #0
  40b536:	f85d fb08 	ldr.w	pc, [sp], #8
  40b53a:	bf00      	nop

0040b53c <__aeabi_fcmpge>:
  40b53c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b540:	f7ff ffd2 	bl	40b4e8 <__aeabi_cfrcmple>
  40b544:	bf94      	ite	ls
  40b546:	2001      	movls	r0, #1
  40b548:	2000      	movhi	r0, #0
  40b54a:	f85d fb08 	ldr.w	pc, [sp], #8
  40b54e:	bf00      	nop

0040b550 <__aeabi_fcmpgt>:
  40b550:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b554:	f7ff ffc8 	bl	40b4e8 <__aeabi_cfrcmple>
  40b558:	bf34      	ite	cc
  40b55a:	2001      	movcc	r0, #1
  40b55c:	2000      	movcs	r0, #0
  40b55e:	f85d fb08 	ldr.w	pc, [sp], #8
  40b562:	bf00      	nop

0040b564 <__aeabi_f2iz>:
  40b564:	ea4f 0240 	mov.w	r2, r0, lsl #1
  40b568:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  40b56c:	d30f      	bcc.n	40b58e <__aeabi_f2iz+0x2a>
  40b56e:	f04f 039e 	mov.w	r3, #158	; 0x9e
  40b572:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  40b576:	d90d      	bls.n	40b594 <__aeabi_f2iz+0x30>
  40b578:	ea4f 2300 	mov.w	r3, r0, lsl #8
  40b57c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40b580:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  40b584:	fa23 f002 	lsr.w	r0, r3, r2
  40b588:	bf18      	it	ne
  40b58a:	4240      	negne	r0, r0
  40b58c:	4770      	bx	lr
  40b58e:	f04f 0000 	mov.w	r0, #0
  40b592:	4770      	bx	lr
  40b594:	f112 0f61 	cmn.w	r2, #97	; 0x61
  40b598:	d101      	bne.n	40b59e <__aeabi_f2iz+0x3a>
  40b59a:	0242      	lsls	r2, r0, #9
  40b59c:	d105      	bne.n	40b5aa <__aeabi_f2iz+0x46>
  40b59e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  40b5a2:	bf08      	it	eq
  40b5a4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40b5a8:	4770      	bx	lr
  40b5aa:	f04f 0000 	mov.w	r0, #0
  40b5ae:	4770      	bx	lr

0040b5b0 <__aeabi_uldivmod>:
  40b5b0:	b953      	cbnz	r3, 40b5c8 <__aeabi_uldivmod+0x18>
  40b5b2:	b94a      	cbnz	r2, 40b5c8 <__aeabi_uldivmod+0x18>
  40b5b4:	2900      	cmp	r1, #0
  40b5b6:	bf08      	it	eq
  40b5b8:	2800      	cmpeq	r0, #0
  40b5ba:	bf1c      	itt	ne
  40b5bc:	f04f 31ff 	movne.w	r1, #4294967295
  40b5c0:	f04f 30ff 	movne.w	r0, #4294967295
  40b5c4:	f000 b97e 	b.w	40b8c4 <__aeabi_idiv0>
  40b5c8:	f1ad 0c08 	sub.w	ip, sp, #8
  40b5cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40b5d0:	f000 f806 	bl	40b5e0 <__udivmoddi4>
  40b5d4:	f8dd e004 	ldr.w	lr, [sp, #4]
  40b5d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40b5dc:	b004      	add	sp, #16
  40b5de:	4770      	bx	lr

0040b5e0 <__udivmoddi4>:
  40b5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40b5e4:	468c      	mov	ip, r1
  40b5e6:	460e      	mov	r6, r1
  40b5e8:	4604      	mov	r4, r0
  40b5ea:	9d08      	ldr	r5, [sp, #32]
  40b5ec:	2b00      	cmp	r3, #0
  40b5ee:	d150      	bne.n	40b692 <__udivmoddi4+0xb2>
  40b5f0:	428a      	cmp	r2, r1
  40b5f2:	4617      	mov	r7, r2
  40b5f4:	d96c      	bls.n	40b6d0 <__udivmoddi4+0xf0>
  40b5f6:	fab2 fe82 	clz	lr, r2
  40b5fa:	f1be 0f00 	cmp.w	lr, #0
  40b5fe:	d00b      	beq.n	40b618 <__udivmoddi4+0x38>
  40b600:	f1ce 0420 	rsb	r4, lr, #32
  40b604:	fa20 f404 	lsr.w	r4, r0, r4
  40b608:	fa01 f60e 	lsl.w	r6, r1, lr
  40b60c:	ea44 0c06 	orr.w	ip, r4, r6
  40b610:	fa02 f70e 	lsl.w	r7, r2, lr
  40b614:	fa00 f40e 	lsl.w	r4, r0, lr
  40b618:	ea4f 4917 	mov.w	r9, r7, lsr #16
  40b61c:	0c22      	lsrs	r2, r4, #16
  40b61e:	fbbc f0f9 	udiv	r0, ip, r9
  40b622:	fa1f f887 	uxth.w	r8, r7
  40b626:	fb09 c610 	mls	r6, r9, r0, ip
  40b62a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  40b62e:	fb00 f308 	mul.w	r3, r0, r8
  40b632:	42b3      	cmp	r3, r6
  40b634:	d909      	bls.n	40b64a <__udivmoddi4+0x6a>
  40b636:	19f6      	adds	r6, r6, r7
  40b638:	f100 32ff 	add.w	r2, r0, #4294967295
  40b63c:	f080 8122 	bcs.w	40b884 <__udivmoddi4+0x2a4>
  40b640:	42b3      	cmp	r3, r6
  40b642:	f240 811f 	bls.w	40b884 <__udivmoddi4+0x2a4>
  40b646:	3802      	subs	r0, #2
  40b648:	443e      	add	r6, r7
  40b64a:	1af6      	subs	r6, r6, r3
  40b64c:	b2a2      	uxth	r2, r4
  40b64e:	fbb6 f3f9 	udiv	r3, r6, r9
  40b652:	fb09 6613 	mls	r6, r9, r3, r6
  40b656:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40b65a:	fb03 f808 	mul.w	r8, r3, r8
  40b65e:	45a0      	cmp	r8, r4
  40b660:	d909      	bls.n	40b676 <__udivmoddi4+0x96>
  40b662:	19e4      	adds	r4, r4, r7
  40b664:	f103 32ff 	add.w	r2, r3, #4294967295
  40b668:	f080 810a 	bcs.w	40b880 <__udivmoddi4+0x2a0>
  40b66c:	45a0      	cmp	r8, r4
  40b66e:	f240 8107 	bls.w	40b880 <__udivmoddi4+0x2a0>
  40b672:	3b02      	subs	r3, #2
  40b674:	443c      	add	r4, r7
  40b676:	ebc8 0404 	rsb	r4, r8, r4
  40b67a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40b67e:	2100      	movs	r1, #0
  40b680:	2d00      	cmp	r5, #0
  40b682:	d062      	beq.n	40b74a <__udivmoddi4+0x16a>
  40b684:	fa24 f40e 	lsr.w	r4, r4, lr
  40b688:	2300      	movs	r3, #0
  40b68a:	602c      	str	r4, [r5, #0]
  40b68c:	606b      	str	r3, [r5, #4]
  40b68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b692:	428b      	cmp	r3, r1
  40b694:	d907      	bls.n	40b6a6 <__udivmoddi4+0xc6>
  40b696:	2d00      	cmp	r5, #0
  40b698:	d055      	beq.n	40b746 <__udivmoddi4+0x166>
  40b69a:	2100      	movs	r1, #0
  40b69c:	e885 0041 	stmia.w	r5, {r0, r6}
  40b6a0:	4608      	mov	r0, r1
  40b6a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b6a6:	fab3 f183 	clz	r1, r3
  40b6aa:	2900      	cmp	r1, #0
  40b6ac:	f040 8090 	bne.w	40b7d0 <__udivmoddi4+0x1f0>
  40b6b0:	42b3      	cmp	r3, r6
  40b6b2:	d302      	bcc.n	40b6ba <__udivmoddi4+0xda>
  40b6b4:	4282      	cmp	r2, r0
  40b6b6:	f200 80f8 	bhi.w	40b8aa <__udivmoddi4+0x2ca>
  40b6ba:	1a84      	subs	r4, r0, r2
  40b6bc:	eb66 0603 	sbc.w	r6, r6, r3
  40b6c0:	2001      	movs	r0, #1
  40b6c2:	46b4      	mov	ip, r6
  40b6c4:	2d00      	cmp	r5, #0
  40b6c6:	d040      	beq.n	40b74a <__udivmoddi4+0x16a>
  40b6c8:	e885 1010 	stmia.w	r5, {r4, ip}
  40b6cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b6d0:	b912      	cbnz	r2, 40b6d8 <__udivmoddi4+0xf8>
  40b6d2:	2701      	movs	r7, #1
  40b6d4:	fbb7 f7f2 	udiv	r7, r7, r2
  40b6d8:	fab7 fe87 	clz	lr, r7
  40b6dc:	f1be 0f00 	cmp.w	lr, #0
  40b6e0:	d135      	bne.n	40b74e <__udivmoddi4+0x16e>
  40b6e2:	1bf3      	subs	r3, r6, r7
  40b6e4:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40b6e8:	fa1f fc87 	uxth.w	ip, r7
  40b6ec:	2101      	movs	r1, #1
  40b6ee:	fbb3 f0f8 	udiv	r0, r3, r8
  40b6f2:	0c22      	lsrs	r2, r4, #16
  40b6f4:	fb08 3610 	mls	r6, r8, r0, r3
  40b6f8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  40b6fc:	fb0c f300 	mul.w	r3, ip, r0
  40b700:	42b3      	cmp	r3, r6
  40b702:	d907      	bls.n	40b714 <__udivmoddi4+0x134>
  40b704:	19f6      	adds	r6, r6, r7
  40b706:	f100 32ff 	add.w	r2, r0, #4294967295
  40b70a:	d202      	bcs.n	40b712 <__udivmoddi4+0x132>
  40b70c:	42b3      	cmp	r3, r6
  40b70e:	f200 80ce 	bhi.w	40b8ae <__udivmoddi4+0x2ce>
  40b712:	4610      	mov	r0, r2
  40b714:	1af6      	subs	r6, r6, r3
  40b716:	b2a2      	uxth	r2, r4
  40b718:	fbb6 f3f8 	udiv	r3, r6, r8
  40b71c:	fb08 6613 	mls	r6, r8, r3, r6
  40b720:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40b724:	fb0c fc03 	mul.w	ip, ip, r3
  40b728:	45a4      	cmp	ip, r4
  40b72a:	d907      	bls.n	40b73c <__udivmoddi4+0x15c>
  40b72c:	19e4      	adds	r4, r4, r7
  40b72e:	f103 32ff 	add.w	r2, r3, #4294967295
  40b732:	d202      	bcs.n	40b73a <__udivmoddi4+0x15a>
  40b734:	45a4      	cmp	ip, r4
  40b736:	f200 80b5 	bhi.w	40b8a4 <__udivmoddi4+0x2c4>
  40b73a:	4613      	mov	r3, r2
  40b73c:	ebcc 0404 	rsb	r4, ip, r4
  40b740:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40b744:	e79c      	b.n	40b680 <__udivmoddi4+0xa0>
  40b746:	4629      	mov	r1, r5
  40b748:	4628      	mov	r0, r5
  40b74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b74e:	f1ce 0120 	rsb	r1, lr, #32
  40b752:	fa06 f30e 	lsl.w	r3, r6, lr
  40b756:	fa07 f70e 	lsl.w	r7, r7, lr
  40b75a:	fa20 f901 	lsr.w	r9, r0, r1
  40b75e:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40b762:	40ce      	lsrs	r6, r1
  40b764:	ea49 0903 	orr.w	r9, r9, r3
  40b768:	fbb6 faf8 	udiv	sl, r6, r8
  40b76c:	ea4f 4419 	mov.w	r4, r9, lsr #16
  40b770:	fb08 661a 	mls	r6, r8, sl, r6
  40b774:	fa1f fc87 	uxth.w	ip, r7
  40b778:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  40b77c:	fb0a f20c 	mul.w	r2, sl, ip
  40b780:	429a      	cmp	r2, r3
  40b782:	fa00 f40e 	lsl.w	r4, r0, lr
  40b786:	d90a      	bls.n	40b79e <__udivmoddi4+0x1be>
  40b788:	19db      	adds	r3, r3, r7
  40b78a:	f10a 31ff 	add.w	r1, sl, #4294967295
  40b78e:	f080 8087 	bcs.w	40b8a0 <__udivmoddi4+0x2c0>
  40b792:	429a      	cmp	r2, r3
  40b794:	f240 8084 	bls.w	40b8a0 <__udivmoddi4+0x2c0>
  40b798:	f1aa 0a02 	sub.w	sl, sl, #2
  40b79c:	443b      	add	r3, r7
  40b79e:	1a9b      	subs	r3, r3, r2
  40b7a0:	fa1f f989 	uxth.w	r9, r9
  40b7a4:	fbb3 f1f8 	udiv	r1, r3, r8
  40b7a8:	fb08 3311 	mls	r3, r8, r1, r3
  40b7ac:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  40b7b0:	fb01 f60c 	mul.w	r6, r1, ip
  40b7b4:	429e      	cmp	r6, r3
  40b7b6:	d907      	bls.n	40b7c8 <__udivmoddi4+0x1e8>
  40b7b8:	19db      	adds	r3, r3, r7
  40b7ba:	f101 32ff 	add.w	r2, r1, #4294967295
  40b7be:	d26b      	bcs.n	40b898 <__udivmoddi4+0x2b8>
  40b7c0:	429e      	cmp	r6, r3
  40b7c2:	d969      	bls.n	40b898 <__udivmoddi4+0x2b8>
  40b7c4:	3902      	subs	r1, #2
  40b7c6:	443b      	add	r3, r7
  40b7c8:	1b9b      	subs	r3, r3, r6
  40b7ca:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  40b7ce:	e78e      	b.n	40b6ee <__udivmoddi4+0x10e>
  40b7d0:	f1c1 0e20 	rsb	lr, r1, #32
  40b7d4:	fa22 f40e 	lsr.w	r4, r2, lr
  40b7d8:	408b      	lsls	r3, r1
  40b7da:	4323      	orrs	r3, r4
  40b7dc:	fa20 f70e 	lsr.w	r7, r0, lr
  40b7e0:	fa06 f401 	lsl.w	r4, r6, r1
  40b7e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40b7e8:	fa26 f60e 	lsr.w	r6, r6, lr
  40b7ec:	433c      	orrs	r4, r7
  40b7ee:	fbb6 f9fc 	udiv	r9, r6, ip
  40b7f2:	0c27      	lsrs	r7, r4, #16
  40b7f4:	fb0c 6619 	mls	r6, ip, r9, r6
  40b7f8:	fa1f f883 	uxth.w	r8, r3
  40b7fc:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  40b800:	fb09 f708 	mul.w	r7, r9, r8
  40b804:	42b7      	cmp	r7, r6
  40b806:	fa02 f201 	lsl.w	r2, r2, r1
  40b80a:	fa00 fa01 	lsl.w	sl, r0, r1
  40b80e:	d908      	bls.n	40b822 <__udivmoddi4+0x242>
  40b810:	18f6      	adds	r6, r6, r3
  40b812:	f109 30ff 	add.w	r0, r9, #4294967295
  40b816:	d241      	bcs.n	40b89c <__udivmoddi4+0x2bc>
  40b818:	42b7      	cmp	r7, r6
  40b81a:	d93f      	bls.n	40b89c <__udivmoddi4+0x2bc>
  40b81c:	f1a9 0902 	sub.w	r9, r9, #2
  40b820:	441e      	add	r6, r3
  40b822:	1bf6      	subs	r6, r6, r7
  40b824:	b2a0      	uxth	r0, r4
  40b826:	fbb6 f4fc 	udiv	r4, r6, ip
  40b82a:	fb0c 6614 	mls	r6, ip, r4, r6
  40b82e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  40b832:	fb04 f808 	mul.w	r8, r4, r8
  40b836:	45b8      	cmp	r8, r7
  40b838:	d907      	bls.n	40b84a <__udivmoddi4+0x26a>
  40b83a:	18ff      	adds	r7, r7, r3
  40b83c:	f104 30ff 	add.w	r0, r4, #4294967295
  40b840:	d228      	bcs.n	40b894 <__udivmoddi4+0x2b4>
  40b842:	45b8      	cmp	r8, r7
  40b844:	d926      	bls.n	40b894 <__udivmoddi4+0x2b4>
  40b846:	3c02      	subs	r4, #2
  40b848:	441f      	add	r7, r3
  40b84a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  40b84e:	ebc8 0707 	rsb	r7, r8, r7
  40b852:	fba0 8902 	umull	r8, r9, r0, r2
  40b856:	454f      	cmp	r7, r9
  40b858:	4644      	mov	r4, r8
  40b85a:	464e      	mov	r6, r9
  40b85c:	d314      	bcc.n	40b888 <__udivmoddi4+0x2a8>
  40b85e:	d029      	beq.n	40b8b4 <__udivmoddi4+0x2d4>
  40b860:	b365      	cbz	r5, 40b8bc <__udivmoddi4+0x2dc>
  40b862:	ebba 0304 	subs.w	r3, sl, r4
  40b866:	eb67 0706 	sbc.w	r7, r7, r6
  40b86a:	fa07 fe0e 	lsl.w	lr, r7, lr
  40b86e:	40cb      	lsrs	r3, r1
  40b870:	40cf      	lsrs	r7, r1
  40b872:	ea4e 0303 	orr.w	r3, lr, r3
  40b876:	e885 0088 	stmia.w	r5, {r3, r7}
  40b87a:	2100      	movs	r1, #0
  40b87c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b880:	4613      	mov	r3, r2
  40b882:	e6f8      	b.n	40b676 <__udivmoddi4+0x96>
  40b884:	4610      	mov	r0, r2
  40b886:	e6e0      	b.n	40b64a <__udivmoddi4+0x6a>
  40b888:	ebb8 0402 	subs.w	r4, r8, r2
  40b88c:	eb69 0603 	sbc.w	r6, r9, r3
  40b890:	3801      	subs	r0, #1
  40b892:	e7e5      	b.n	40b860 <__udivmoddi4+0x280>
  40b894:	4604      	mov	r4, r0
  40b896:	e7d8      	b.n	40b84a <__udivmoddi4+0x26a>
  40b898:	4611      	mov	r1, r2
  40b89a:	e795      	b.n	40b7c8 <__udivmoddi4+0x1e8>
  40b89c:	4681      	mov	r9, r0
  40b89e:	e7c0      	b.n	40b822 <__udivmoddi4+0x242>
  40b8a0:	468a      	mov	sl, r1
  40b8a2:	e77c      	b.n	40b79e <__udivmoddi4+0x1be>
  40b8a4:	3b02      	subs	r3, #2
  40b8a6:	443c      	add	r4, r7
  40b8a8:	e748      	b.n	40b73c <__udivmoddi4+0x15c>
  40b8aa:	4608      	mov	r0, r1
  40b8ac:	e70a      	b.n	40b6c4 <__udivmoddi4+0xe4>
  40b8ae:	3802      	subs	r0, #2
  40b8b0:	443e      	add	r6, r7
  40b8b2:	e72f      	b.n	40b714 <__udivmoddi4+0x134>
  40b8b4:	45c2      	cmp	sl, r8
  40b8b6:	d3e7      	bcc.n	40b888 <__udivmoddi4+0x2a8>
  40b8b8:	463e      	mov	r6, r7
  40b8ba:	e7d1      	b.n	40b860 <__udivmoddi4+0x280>
  40b8bc:	4629      	mov	r1, r5
  40b8be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b8c2:	bf00      	nop

0040b8c4 <__aeabi_idiv0>:
  40b8c4:	4770      	bx	lr
  40b8c6:	bf00      	nop

0040b8c8 <__errno>:
  40b8c8:	4b01      	ldr	r3, [pc, #4]	; (40b8d0 <__errno+0x8>)
  40b8ca:	6818      	ldr	r0, [r3, #0]
  40b8cc:	4770      	bx	lr
  40b8ce:	bf00      	nop
  40b8d0:	20000470 	.word	0x20000470

0040b8d4 <__libc_init_array>:
  40b8d4:	b570      	push	{r4, r5, r6, lr}
  40b8d6:	4e0f      	ldr	r6, [pc, #60]	; (40b914 <__libc_init_array+0x40>)
  40b8d8:	4d0f      	ldr	r5, [pc, #60]	; (40b918 <__libc_init_array+0x44>)
  40b8da:	1b76      	subs	r6, r6, r5
  40b8dc:	10b6      	asrs	r6, r6, #2
  40b8de:	bf18      	it	ne
  40b8e0:	2400      	movne	r4, #0
  40b8e2:	d005      	beq.n	40b8f0 <__libc_init_array+0x1c>
  40b8e4:	3401      	adds	r4, #1
  40b8e6:	f855 3b04 	ldr.w	r3, [r5], #4
  40b8ea:	4798      	blx	r3
  40b8ec:	42a6      	cmp	r6, r4
  40b8ee:	d1f9      	bne.n	40b8e4 <__libc_init_array+0x10>
  40b8f0:	4e0a      	ldr	r6, [pc, #40]	; (40b91c <__libc_init_array+0x48>)
  40b8f2:	4d0b      	ldr	r5, [pc, #44]	; (40b920 <__libc_init_array+0x4c>)
  40b8f4:	1b76      	subs	r6, r6, r5
  40b8f6:	f000 fb33 	bl	40bf60 <_init>
  40b8fa:	10b6      	asrs	r6, r6, #2
  40b8fc:	bf18      	it	ne
  40b8fe:	2400      	movne	r4, #0
  40b900:	d006      	beq.n	40b910 <__libc_init_array+0x3c>
  40b902:	3401      	adds	r4, #1
  40b904:	f855 3b04 	ldr.w	r3, [r5], #4
  40b908:	4798      	blx	r3
  40b90a:	42a6      	cmp	r6, r4
  40b90c:	d1f9      	bne.n	40b902 <__libc_init_array+0x2e>
  40b90e:	bd70      	pop	{r4, r5, r6, pc}
  40b910:	bd70      	pop	{r4, r5, r6, pc}
  40b912:	bf00      	nop
  40b914:	0040bf6c 	.word	0x0040bf6c
  40b918:	0040bf6c 	.word	0x0040bf6c
  40b91c:	0040bf74 	.word	0x0040bf74
  40b920:	0040bf6c 	.word	0x0040bf6c

0040b924 <memcmp>:
  40b924:	2a03      	cmp	r2, #3
  40b926:	b470      	push	{r4, r5, r6}
  40b928:	d926      	bls.n	40b978 <memcmp+0x54>
  40b92a:	ea40 0301 	orr.w	r3, r0, r1
  40b92e:	079b      	lsls	r3, r3, #30
  40b930:	d011      	beq.n	40b956 <memcmp+0x32>
  40b932:	7804      	ldrb	r4, [r0, #0]
  40b934:	780d      	ldrb	r5, [r1, #0]
  40b936:	42ac      	cmp	r4, r5
  40b938:	d122      	bne.n	40b980 <memcmp+0x5c>
  40b93a:	4402      	add	r2, r0
  40b93c:	1c43      	adds	r3, r0, #1
  40b93e:	e005      	b.n	40b94c <memcmp+0x28>
  40b940:	f813 4b01 	ldrb.w	r4, [r3], #1
  40b944:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  40b948:	42ac      	cmp	r4, r5
  40b94a:	d119      	bne.n	40b980 <memcmp+0x5c>
  40b94c:	4293      	cmp	r3, r2
  40b94e:	d1f7      	bne.n	40b940 <memcmp+0x1c>
  40b950:	2000      	movs	r0, #0
  40b952:	bc70      	pop	{r4, r5, r6}
  40b954:	4770      	bx	lr
  40b956:	460c      	mov	r4, r1
  40b958:	4603      	mov	r3, r0
  40b95a:	681e      	ldr	r6, [r3, #0]
  40b95c:	6825      	ldr	r5, [r4, #0]
  40b95e:	42ae      	cmp	r6, r5
  40b960:	4618      	mov	r0, r3
  40b962:	4621      	mov	r1, r4
  40b964:	f103 0304 	add.w	r3, r3, #4
  40b968:	f104 0404 	add.w	r4, r4, #4
  40b96c:	d1e1      	bne.n	40b932 <memcmp+0xe>
  40b96e:	3a04      	subs	r2, #4
  40b970:	2a03      	cmp	r2, #3
  40b972:	4618      	mov	r0, r3
  40b974:	4621      	mov	r1, r4
  40b976:	d8f0      	bhi.n	40b95a <memcmp+0x36>
  40b978:	2a00      	cmp	r2, #0
  40b97a:	d1da      	bne.n	40b932 <memcmp+0xe>
  40b97c:	4610      	mov	r0, r2
  40b97e:	e7e8      	b.n	40b952 <memcmp+0x2e>
  40b980:	1b60      	subs	r0, r4, r5
  40b982:	bc70      	pop	{r4, r5, r6}
  40b984:	4770      	bx	lr
  40b986:	bf00      	nop

0040b988 <memcpy>:
  40b988:	4684      	mov	ip, r0
  40b98a:	ea41 0300 	orr.w	r3, r1, r0
  40b98e:	f013 0303 	ands.w	r3, r3, #3
  40b992:	d16d      	bne.n	40ba70 <memcpy+0xe8>
  40b994:	3a40      	subs	r2, #64	; 0x40
  40b996:	d341      	bcc.n	40ba1c <memcpy+0x94>
  40b998:	f851 3b04 	ldr.w	r3, [r1], #4
  40b99c:	f840 3b04 	str.w	r3, [r0], #4
  40b9a0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9a4:	f840 3b04 	str.w	r3, [r0], #4
  40b9a8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9ac:	f840 3b04 	str.w	r3, [r0], #4
  40b9b0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9b4:	f840 3b04 	str.w	r3, [r0], #4
  40b9b8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9bc:	f840 3b04 	str.w	r3, [r0], #4
  40b9c0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9c4:	f840 3b04 	str.w	r3, [r0], #4
  40b9c8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9cc:	f840 3b04 	str.w	r3, [r0], #4
  40b9d0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9d4:	f840 3b04 	str.w	r3, [r0], #4
  40b9d8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9dc:	f840 3b04 	str.w	r3, [r0], #4
  40b9e0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9e4:	f840 3b04 	str.w	r3, [r0], #4
  40b9e8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9ec:	f840 3b04 	str.w	r3, [r0], #4
  40b9f0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9f4:	f840 3b04 	str.w	r3, [r0], #4
  40b9f8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9fc:	f840 3b04 	str.w	r3, [r0], #4
  40ba00:	f851 3b04 	ldr.w	r3, [r1], #4
  40ba04:	f840 3b04 	str.w	r3, [r0], #4
  40ba08:	f851 3b04 	ldr.w	r3, [r1], #4
  40ba0c:	f840 3b04 	str.w	r3, [r0], #4
  40ba10:	f851 3b04 	ldr.w	r3, [r1], #4
  40ba14:	f840 3b04 	str.w	r3, [r0], #4
  40ba18:	3a40      	subs	r2, #64	; 0x40
  40ba1a:	d2bd      	bcs.n	40b998 <memcpy+0x10>
  40ba1c:	3230      	adds	r2, #48	; 0x30
  40ba1e:	d311      	bcc.n	40ba44 <memcpy+0xbc>
  40ba20:	f851 3b04 	ldr.w	r3, [r1], #4
  40ba24:	f840 3b04 	str.w	r3, [r0], #4
  40ba28:	f851 3b04 	ldr.w	r3, [r1], #4
  40ba2c:	f840 3b04 	str.w	r3, [r0], #4
  40ba30:	f851 3b04 	ldr.w	r3, [r1], #4
  40ba34:	f840 3b04 	str.w	r3, [r0], #4
  40ba38:	f851 3b04 	ldr.w	r3, [r1], #4
  40ba3c:	f840 3b04 	str.w	r3, [r0], #4
  40ba40:	3a10      	subs	r2, #16
  40ba42:	d2ed      	bcs.n	40ba20 <memcpy+0x98>
  40ba44:	320c      	adds	r2, #12
  40ba46:	d305      	bcc.n	40ba54 <memcpy+0xcc>
  40ba48:	f851 3b04 	ldr.w	r3, [r1], #4
  40ba4c:	f840 3b04 	str.w	r3, [r0], #4
  40ba50:	3a04      	subs	r2, #4
  40ba52:	d2f9      	bcs.n	40ba48 <memcpy+0xc0>
  40ba54:	3204      	adds	r2, #4
  40ba56:	d008      	beq.n	40ba6a <memcpy+0xe2>
  40ba58:	07d2      	lsls	r2, r2, #31
  40ba5a:	bf1c      	itt	ne
  40ba5c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40ba60:	f800 3b01 	strbne.w	r3, [r0], #1
  40ba64:	d301      	bcc.n	40ba6a <memcpy+0xe2>
  40ba66:	880b      	ldrh	r3, [r1, #0]
  40ba68:	8003      	strh	r3, [r0, #0]
  40ba6a:	4660      	mov	r0, ip
  40ba6c:	4770      	bx	lr
  40ba6e:	bf00      	nop
  40ba70:	2a08      	cmp	r2, #8
  40ba72:	d313      	bcc.n	40ba9c <memcpy+0x114>
  40ba74:	078b      	lsls	r3, r1, #30
  40ba76:	d08d      	beq.n	40b994 <memcpy+0xc>
  40ba78:	f010 0303 	ands.w	r3, r0, #3
  40ba7c:	d08a      	beq.n	40b994 <memcpy+0xc>
  40ba7e:	f1c3 0304 	rsb	r3, r3, #4
  40ba82:	1ad2      	subs	r2, r2, r3
  40ba84:	07db      	lsls	r3, r3, #31
  40ba86:	bf1c      	itt	ne
  40ba88:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40ba8c:	f800 3b01 	strbne.w	r3, [r0], #1
  40ba90:	d380      	bcc.n	40b994 <memcpy+0xc>
  40ba92:	f831 3b02 	ldrh.w	r3, [r1], #2
  40ba96:	f820 3b02 	strh.w	r3, [r0], #2
  40ba9a:	e77b      	b.n	40b994 <memcpy+0xc>
  40ba9c:	3a04      	subs	r2, #4
  40ba9e:	d3d9      	bcc.n	40ba54 <memcpy+0xcc>
  40baa0:	3a01      	subs	r2, #1
  40baa2:	f811 3b01 	ldrb.w	r3, [r1], #1
  40baa6:	f800 3b01 	strb.w	r3, [r0], #1
  40baaa:	d2f9      	bcs.n	40baa0 <memcpy+0x118>
  40baac:	780b      	ldrb	r3, [r1, #0]
  40baae:	7003      	strb	r3, [r0, #0]
  40bab0:	784b      	ldrb	r3, [r1, #1]
  40bab2:	7043      	strb	r3, [r0, #1]
  40bab4:	788b      	ldrb	r3, [r1, #2]
  40bab6:	7083      	strb	r3, [r0, #2]
  40bab8:	4660      	mov	r0, ip
  40baba:	4770      	bx	lr

0040babc <memset>:
  40babc:	b470      	push	{r4, r5, r6}
  40babe:	0784      	lsls	r4, r0, #30
  40bac0:	d046      	beq.n	40bb50 <memset+0x94>
  40bac2:	1e54      	subs	r4, r2, #1
  40bac4:	2a00      	cmp	r2, #0
  40bac6:	d041      	beq.n	40bb4c <memset+0x90>
  40bac8:	b2cd      	uxtb	r5, r1
  40baca:	4603      	mov	r3, r0
  40bacc:	e002      	b.n	40bad4 <memset+0x18>
  40bace:	1e62      	subs	r2, r4, #1
  40bad0:	b3e4      	cbz	r4, 40bb4c <memset+0x90>
  40bad2:	4614      	mov	r4, r2
  40bad4:	f803 5b01 	strb.w	r5, [r3], #1
  40bad8:	079a      	lsls	r2, r3, #30
  40bada:	d1f8      	bne.n	40bace <memset+0x12>
  40badc:	2c03      	cmp	r4, #3
  40bade:	d92e      	bls.n	40bb3e <memset+0x82>
  40bae0:	b2cd      	uxtb	r5, r1
  40bae2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40bae6:	2c0f      	cmp	r4, #15
  40bae8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40baec:	d919      	bls.n	40bb22 <memset+0x66>
  40baee:	f103 0210 	add.w	r2, r3, #16
  40baf2:	4626      	mov	r6, r4
  40baf4:	3e10      	subs	r6, #16
  40baf6:	2e0f      	cmp	r6, #15
  40baf8:	f842 5c10 	str.w	r5, [r2, #-16]
  40bafc:	f842 5c0c 	str.w	r5, [r2, #-12]
  40bb00:	f842 5c08 	str.w	r5, [r2, #-8]
  40bb04:	f842 5c04 	str.w	r5, [r2, #-4]
  40bb08:	f102 0210 	add.w	r2, r2, #16
  40bb0c:	d8f2      	bhi.n	40baf4 <memset+0x38>
  40bb0e:	f1a4 0210 	sub.w	r2, r4, #16
  40bb12:	f022 020f 	bic.w	r2, r2, #15
  40bb16:	f004 040f 	and.w	r4, r4, #15
  40bb1a:	3210      	adds	r2, #16
  40bb1c:	2c03      	cmp	r4, #3
  40bb1e:	4413      	add	r3, r2
  40bb20:	d90d      	bls.n	40bb3e <memset+0x82>
  40bb22:	461e      	mov	r6, r3
  40bb24:	4622      	mov	r2, r4
  40bb26:	3a04      	subs	r2, #4
  40bb28:	2a03      	cmp	r2, #3
  40bb2a:	f846 5b04 	str.w	r5, [r6], #4
  40bb2e:	d8fa      	bhi.n	40bb26 <memset+0x6a>
  40bb30:	1f22      	subs	r2, r4, #4
  40bb32:	f022 0203 	bic.w	r2, r2, #3
  40bb36:	3204      	adds	r2, #4
  40bb38:	4413      	add	r3, r2
  40bb3a:	f004 0403 	and.w	r4, r4, #3
  40bb3e:	b12c      	cbz	r4, 40bb4c <memset+0x90>
  40bb40:	b2c9      	uxtb	r1, r1
  40bb42:	441c      	add	r4, r3
  40bb44:	f803 1b01 	strb.w	r1, [r3], #1
  40bb48:	42a3      	cmp	r3, r4
  40bb4a:	d1fb      	bne.n	40bb44 <memset+0x88>
  40bb4c:	bc70      	pop	{r4, r5, r6}
  40bb4e:	4770      	bx	lr
  40bb50:	4614      	mov	r4, r2
  40bb52:	4603      	mov	r3, r0
  40bb54:	e7c2      	b.n	40badc <memset+0x20>
  40bb56:	bf00      	nop

0040bb58 <strncpy>:
  40bb58:	ea40 0301 	orr.w	r3, r0, r1
  40bb5c:	079b      	lsls	r3, r3, #30
  40bb5e:	b470      	push	{r4, r5, r6}
  40bb60:	d12b      	bne.n	40bbba <strncpy+0x62>
  40bb62:	2a03      	cmp	r2, #3
  40bb64:	d929      	bls.n	40bbba <strncpy+0x62>
  40bb66:	460c      	mov	r4, r1
  40bb68:	4603      	mov	r3, r0
  40bb6a:	4621      	mov	r1, r4
  40bb6c:	f854 6b04 	ldr.w	r6, [r4], #4
  40bb70:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
  40bb74:	ea25 0506 	bic.w	r5, r5, r6
  40bb78:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
  40bb7c:	d106      	bne.n	40bb8c <strncpy+0x34>
  40bb7e:	3a04      	subs	r2, #4
  40bb80:	2a03      	cmp	r2, #3
  40bb82:	f843 6b04 	str.w	r6, [r3], #4
  40bb86:	4621      	mov	r1, r4
  40bb88:	d8ef      	bhi.n	40bb6a <strncpy+0x12>
  40bb8a:	b1a2      	cbz	r2, 40bbb6 <strncpy+0x5e>
  40bb8c:	780c      	ldrb	r4, [r1, #0]
  40bb8e:	701c      	strb	r4, [r3, #0]
  40bb90:	3a01      	subs	r2, #1
  40bb92:	3301      	adds	r3, #1
  40bb94:	3101      	adds	r1, #1
  40bb96:	b13c      	cbz	r4, 40bba8 <strncpy+0x50>
  40bb98:	b16a      	cbz	r2, 40bbb6 <strncpy+0x5e>
  40bb9a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40bb9e:	f803 4b01 	strb.w	r4, [r3], #1
  40bba2:	3a01      	subs	r2, #1
  40bba4:	2c00      	cmp	r4, #0
  40bba6:	d1f7      	bne.n	40bb98 <strncpy+0x40>
  40bba8:	b12a      	cbz	r2, 40bbb6 <strncpy+0x5e>
  40bbaa:	441a      	add	r2, r3
  40bbac:	2100      	movs	r1, #0
  40bbae:	f803 1b01 	strb.w	r1, [r3], #1
  40bbb2:	429a      	cmp	r2, r3
  40bbb4:	d1fb      	bne.n	40bbae <strncpy+0x56>
  40bbb6:	bc70      	pop	{r4, r5, r6}
  40bbb8:	4770      	bx	lr
  40bbba:	4603      	mov	r3, r0
  40bbbc:	e7e5      	b.n	40bb8a <strncpy+0x32>
  40bbbe:	bf00      	nop

0040bbc0 <register_fini>:
  40bbc0:	4b02      	ldr	r3, [pc, #8]	; (40bbcc <register_fini+0xc>)
  40bbc2:	b113      	cbz	r3, 40bbca <register_fini+0xa>
  40bbc4:	4802      	ldr	r0, [pc, #8]	; (40bbd0 <register_fini+0x10>)
  40bbc6:	f000 b805 	b.w	40bbd4 <atexit>
  40bbca:	4770      	bx	lr
  40bbcc:	00000000 	.word	0x00000000
  40bbd0:	0040bbe1 	.word	0x0040bbe1

0040bbd4 <atexit>:
  40bbd4:	2300      	movs	r3, #0
  40bbd6:	4601      	mov	r1, r0
  40bbd8:	461a      	mov	r2, r3
  40bbda:	4618      	mov	r0, r3
  40bbdc:	f000 b814 	b.w	40bc08 <__register_exitproc>

0040bbe0 <__libc_fini_array>:
  40bbe0:	b538      	push	{r3, r4, r5, lr}
  40bbe2:	4d07      	ldr	r5, [pc, #28]	; (40bc00 <__libc_fini_array+0x20>)
  40bbe4:	4c07      	ldr	r4, [pc, #28]	; (40bc04 <__libc_fini_array+0x24>)
  40bbe6:	1b2c      	subs	r4, r5, r4
  40bbe8:	10a4      	asrs	r4, r4, #2
  40bbea:	d005      	beq.n	40bbf8 <__libc_fini_array+0x18>
  40bbec:	3c01      	subs	r4, #1
  40bbee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40bbf2:	4798      	blx	r3
  40bbf4:	2c00      	cmp	r4, #0
  40bbf6:	d1f9      	bne.n	40bbec <__libc_fini_array+0xc>
  40bbf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40bbfc:	f000 b9ba 	b.w	40bf74 <_fini>
  40bc00:	0040bf84 	.word	0x0040bf84
  40bc04:	0040bf80 	.word	0x0040bf80

0040bc08 <__register_exitproc>:
  40bc08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40bc0c:	4c25      	ldr	r4, [pc, #148]	; (40bca4 <__register_exitproc+0x9c>)
  40bc0e:	6825      	ldr	r5, [r4, #0]
  40bc10:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40bc14:	4606      	mov	r6, r0
  40bc16:	4688      	mov	r8, r1
  40bc18:	4692      	mov	sl, r2
  40bc1a:	4699      	mov	r9, r3
  40bc1c:	b3c4      	cbz	r4, 40bc90 <__register_exitproc+0x88>
  40bc1e:	6860      	ldr	r0, [r4, #4]
  40bc20:	281f      	cmp	r0, #31
  40bc22:	dc17      	bgt.n	40bc54 <__register_exitproc+0x4c>
  40bc24:	1c43      	adds	r3, r0, #1
  40bc26:	b176      	cbz	r6, 40bc46 <__register_exitproc+0x3e>
  40bc28:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40bc2c:	2201      	movs	r2, #1
  40bc2e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40bc32:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40bc36:	4082      	lsls	r2, r0
  40bc38:	4311      	orrs	r1, r2
  40bc3a:	2e02      	cmp	r6, #2
  40bc3c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40bc40:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  40bc44:	d01e      	beq.n	40bc84 <__register_exitproc+0x7c>
  40bc46:	3002      	adds	r0, #2
  40bc48:	6063      	str	r3, [r4, #4]
  40bc4a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40bc4e:	2000      	movs	r0, #0
  40bc50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40bc54:	4b14      	ldr	r3, [pc, #80]	; (40bca8 <__register_exitproc+0xa0>)
  40bc56:	b303      	cbz	r3, 40bc9a <__register_exitproc+0x92>
  40bc58:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40bc5c:	f3af 8000 	nop.w
  40bc60:	4604      	mov	r4, r0
  40bc62:	b1d0      	cbz	r0, 40bc9a <__register_exitproc+0x92>
  40bc64:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40bc68:	2700      	movs	r7, #0
  40bc6a:	e880 0088 	stmia.w	r0, {r3, r7}
  40bc6e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40bc72:	4638      	mov	r0, r7
  40bc74:	2301      	movs	r3, #1
  40bc76:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40bc7a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40bc7e:	2e00      	cmp	r6, #0
  40bc80:	d0e1      	beq.n	40bc46 <__register_exitproc+0x3e>
  40bc82:	e7d1      	b.n	40bc28 <__register_exitproc+0x20>
  40bc84:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  40bc88:	430a      	orrs	r2, r1
  40bc8a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40bc8e:	e7da      	b.n	40bc46 <__register_exitproc+0x3e>
  40bc90:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40bc94:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40bc98:	e7c1      	b.n	40bc1e <__register_exitproc+0x16>
  40bc9a:	f04f 30ff 	mov.w	r0, #4294967295
  40bc9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40bca2:	bf00      	nop
  40bca4:	0040bf5c 	.word	0x0040bf5c
  40bca8:	00000000 	.word	0x00000000

0040bcac <all_twi_definitions>:
  40bcac:	40018000 40018100 00000013 00000013     ...@...@........
  40bcbc:	4001c000 4001c100 00000014 00000014     ...@...@........

0040bccc <all_usart_definitions>:
  40bccc:	40024000 40024100 0000000e 0000000e     .@.@.A.@........
  40bcdc:	40028000 40028100 0000000f 0000000f     ...@...@........
  40bcec:	454c4449 00000000                       IDLE....

0040bcf4 <ucExpectedStackBytes.6087>:
  40bcf4:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
  40bd04:	a5a5a5a5 20726d54 00637653 00007650     ....Tmr Svc.Pv..
  40bd14:	6d6d6f43 00000000 6e696c42 0000796b     Comm....Blinky..
  40bd24:	736f6361 00000000 6e697361 00000000     acos....asin....
  40bd34:	74727173 00000000                       sqrt....

0040bd3c <npio2_hw>:
  40bd3c:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
  40bd4c:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
  40bd5c:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
  40bd6c:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
  40bd7c:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
  40bd8c:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
  40bd9c:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
  40bdac:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

0040bdbc <two_over_pi>:
  40bdbc:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
  40bdcc:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
  40bddc:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
  40bdec:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
  40bdfc:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
  40be0c:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
  40be1c:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
  40be2c:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
  40be3c:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
  40be4c:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
  40be5c:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
  40be6c:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
  40be7c:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
  40be8c:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
  40be9c:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
  40beac:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
  40bebc:	0060e27b 00c08c6b                       {.`.k...

0040bec4 <init_jk>:
  40bec4:	00000002 00000003 00000004 00000006     ................
  40bed4:	00000000                                ....

0040bed8 <PIo2>:
  40bed8:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
  40bee8:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
  40bef8:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
  40bf08:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

0040bf18 <atanlo>:
  40bf18:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
  40bf28:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

0040bf38 <atanhi>:
  40bf38:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
  40bf48:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
  40bf58:	00000043                                C...

0040bf5c <_global_impure_ptr>:
  40bf5c:	20000048                                H.. 

0040bf60 <_init>:
  40bf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40bf62:	bf00      	nop
  40bf64:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40bf66:	bc08      	pop	{r3}
  40bf68:	469e      	mov	lr, r3
  40bf6a:	4770      	bx	lr

0040bf6c <__init_array_start>:
  40bf6c:	0040bbc1 	.word	0x0040bbc1

0040bf70 <__frame_dummy_init_array_entry>:
  40bf70:	004000f1                                ..@.

0040bf74 <_fini>:
  40bf74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40bf76:	bf00      	nop
  40bf78:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40bf7a:	bc08      	pop	{r3}
  40bf7c:	469e      	mov	lr, r3
  40bf7e:	4770      	bx	lr

0040bf80 <__fini_array_start>:
  40bf80:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <lat>:
2000000c:	ba88 418b                                   ...A

20000010 <lon>:
20000010:	e153 429c                                   S..B

20000014 <timeZone>:
20000014:	0000 40b0                                   ...@

20000018 <dist>:
20000018:	0000 40a0                                   ...@

2000001c <width>:
2000001c:	0000 4000                                   ...@

20000020 <pvAngleRng>:
20000020:	0000 422c                                   ..,B

20000024 <bkTrkParam1>:
20000024:	7a57 3ced                                   Wz.<

20000028 <bkTrkParam2>:
20000028:	999a 3fc9                                   ...?

2000002c <rs485BaudRate>:
2000002c:	2580 0000                                   .%..

20000030 <rs485Parity>:
20000030:	0800 0000                                   ....

20000034 <SystemCoreClock>:
20000034:	0900 003d                                   ..=.

20000038 <uxCriticalNesting>:
20000038:	aaaa aaaa                                   ....

2000003c <xFreeBytesRemaining>:
2000003c:	2000 0000                                   . ..

20000040 <xNextTaskUnblockTime>:
20000040:	ffff ffff                                   ....

20000044 <__fdlib_version>:
20000044:	0001 0000                                   ....

20000048 <impure_data>:
20000048:	0000 0000 0334 2000 039c 2000 0404 2000     ....4.. ... ... 
	...
2000007c:	bf58 0040 0000 0000 0000 0000 0000 0000     X.@.............
	...
200000f0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000100:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000470 <_impure_ptr>:
20000470:	0048 2000                                   H.. 
