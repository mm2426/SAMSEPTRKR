
SAMSEPTRKR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b814  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040b814  0040b814  0001b814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000464  20000000  0040b81c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000022c4  20000468  0040bc88  00020468  2**3
                  ALLOC
  4 .stack        00003004  2000272c  0040df4c  00020468  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020464  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002048e  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000e618  00000000  00000000  000204e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002a1c  00000000  00000000  0002eaff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00008c07  00000000  00000000  0003151b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001080  00000000  00000000  0003a122  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ed0  00000000  00000000  0003b1a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000a151  00000000  00000000  0003c072  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00016130  00000000  00000000  000461c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00053a9d  00000000  00000000  0005c2f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000498c  00000000  00000000  000afd90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20005730 	.word	0x20005730
  400004:	00404a39 	.word	0x00404a39
  400008:	00404b01 	.word	0x00404b01
  40000c:	00404b01 	.word	0x00404b01
  400010:	00404b01 	.word	0x00404b01
  400014:	00404b01 	.word	0x00404b01
  400018:	00404b01 	.word	0x00404b01
	...
  40002c:	00404f99 	.word	0x00404f99
  400030:	00404b01 	.word	0x00404b01
  400034:	00000000 	.word	0x00000000
  400038:	00405091 	.word	0x00405091
  40003c:	004050d1 	.word	0x004050d1
  400040:	00404b01 	.word	0x00404b01
  400044:	00404b01 	.word	0x00404b01
  400048:	00404b01 	.word	0x00404b01
  40004c:	00404b01 	.word	0x00404b01
  400050:	00404b01 	.word	0x00404b01
  400054:	00404b01 	.word	0x00404b01
  400058:	00404b01 	.word	0x00404b01
  40005c:	00000000 	.word	0x00000000
  400060:	00404b01 	.word	0x00404b01
  400064:	00404b01 	.word	0x00404b01
  400068:	00000000 	.word	0x00000000
  40006c:	004046b9 	.word	0x004046b9
  400070:	004046d1 	.word	0x004046d1
  400074:	00000000 	.word	0x00000000
  400078:	004030b1 	.word	0x004030b1
  40007c:	004030c5 	.word	0x004030c5
	...
  400088:	00404b01 	.word	0x00404b01
  40008c:	00402dad 	.word	0x00402dad
  400090:	00402dc1 	.word	0x00402dc1
  400094:	00404b01 	.word	0x00404b01
  400098:	00404b01 	.word	0x00404b01
  40009c:	00404b01 	.word	0x00404b01
  4000a0:	00404b01 	.word	0x00404b01
  4000a4:	00404b01 	.word	0x00404b01
	...
  4000b4:	00404b01 	.word	0x00404b01
  4000b8:	00404b01 	.word	0x00404b01
  4000bc:	00404b01 	.word	0x00404b01
  4000c0:	00404b01 	.word	0x00404b01
  4000c4:	00404b01 	.word	0x00404b01
  4000c8:	00404b01 	.word	0x00404b01

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000468 	.word	0x20000468
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040b81c 	.word	0x0040b81c

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	2000046c 	.word	0x2000046c
  40011c:	0040b81c 	.word	0x0040b81c
  400120:	0040b81c 	.word	0x0040b81c
  400124:	00000000 	.word	0x00000000

00400128 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400128:	b480      	push	{r7}
  40012a:	b083      	sub	sp, #12
  40012c:	af00      	add	r7, sp, #0
  40012e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400130:	687b      	ldr	r3, [r7, #4]
  400132:	2b07      	cmp	r3, #7
  400134:	d825      	bhi.n	400182 <osc_get_rate+0x5a>
  400136:	a201      	add	r2, pc, #4	; (adr r2, 40013c <osc_get_rate+0x14>)
  400138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40013c:	0040015d 	.word	0x0040015d
  400140:	00400163 	.word	0x00400163
  400144:	00400169 	.word	0x00400169
  400148:	0040016f 	.word	0x0040016f
  40014c:	00400173 	.word	0x00400173
  400150:	00400177 	.word	0x00400177
  400154:	0040017b 	.word	0x0040017b
  400158:	0040017f 	.word	0x0040017f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40015c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400160:	e010      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400166:	e00d      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400168:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40016c:	e00a      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40016e:	4b08      	ldr	r3, [pc, #32]	; (400190 <osc_get_rate+0x68>)
  400170:	e008      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400172:	4b08      	ldr	r3, [pc, #32]	; (400194 <osc_get_rate+0x6c>)
  400174:	e006      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400176:	4b08      	ldr	r3, [pc, #32]	; (400198 <osc_get_rate+0x70>)
  400178:	e004      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <osc_get_rate+0x70>)
  40017c:	e002      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40017e:	4b06      	ldr	r3, [pc, #24]	; (400198 <osc_get_rate+0x70>)
  400180:	e000      	b.n	400184 <osc_get_rate+0x5c>
	}

	return 0;
  400182:	2300      	movs	r3, #0
}
  400184:	4618      	mov	r0, r3
  400186:	370c      	adds	r7, #12
  400188:	46bd      	mov	sp, r7
  40018a:	bc80      	pop	{r7}
  40018c:	4770      	bx	lr
  40018e:	bf00      	nop
  400190:	003d0900 	.word	0x003d0900
  400194:	007a1200 	.word	0x007a1200
  400198:	00b71b00 	.word	0x00b71b00

0040019c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40019c:	b580      	push	{r7, lr}
  40019e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4001a0:	2006      	movs	r0, #6
  4001a2:	4b04      	ldr	r3, [pc, #16]	; (4001b4 <sysclk_get_main_hz+0x18>)
  4001a4:	4798      	blx	r3
  4001a6:	4602      	mov	r2, r0
  4001a8:	4613      	mov	r3, r2
  4001aa:	009b      	lsls	r3, r3, #2
  4001ac:	4413      	add	r3, r2
  4001ae:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4001b0:	4618      	mov	r0, r3
  4001b2:	bd80      	pop	{r7, pc}
  4001b4:	00400129 	.word	0x00400129

004001b8 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4001b8:	b580      	push	{r7, lr}
  4001ba:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4001bc:	4b02      	ldr	r3, [pc, #8]	; (4001c8 <sysclk_get_cpu_hz+0x10>)
  4001be:	4798      	blx	r3
  4001c0:	4603      	mov	r3, r0
  4001c2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4001c4:	4618      	mov	r0, r3
  4001c6:	bd80      	pop	{r7, pc}
  4001c8:	0040019d 	.word	0x0040019d

004001cc <WriteEEPROM>:
	 /*
	  * 2 LSBs of chipAddr (A1,A0) are the memory addresses (A9, A8).
	  * Write operation takes place in pages of 16Bytes only. Any data more than that is wrapped around.
	  */
	 void WriteEEPROM(Twi * Port, uint8_t chipAddr, uint16_t memAddr, uint8_t *dPkt, uint8_t dLen)
	 {
  4001cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4001ce:	b08b      	sub	sp, #44	; 0x2c
  4001d0:	af00      	add	r7, sp, #0
  4001d2:	60f8      	str	r0, [r7, #12]
  4001d4:	607b      	str	r3, [r7, #4]
  4001d6:	460b      	mov	r3, r1
  4001d8:	72fb      	strb	r3, [r7, #11]
  4001da:	4613      	mov	r3, r2
  4001dc:	813b      	strh	r3, [r7, #8]
		 twi_packet_t pkt;
		 /* Set Device Address */
		 pkt.chip = (chipAddr&0xFC);
  4001de:	7afb      	ldrb	r3, [r7, #11]
  4001e0:	f023 0303 	bic.w	r3, r3, #3
  4001e4:	b2db      	uxtb	r3, r3
  4001e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		 pkt.chip |= ((memAddr>>8)&0x03);
  4001ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
  4001ee:	b25a      	sxtb	r2, r3
  4001f0:	893b      	ldrh	r3, [r7, #8]
  4001f2:	0a1b      	lsrs	r3, r3, #8
  4001f4:	b29b      	uxth	r3, r3
  4001f6:	b25b      	sxtb	r3, r3
  4001f8:	f003 0303 	and.w	r3, r3, #3
  4001fc:	b25b      	sxtb	r3, r3
  4001fe:	4313      	orrs	r3, r2
  400200:	b25b      	sxtb	r3, r3
  400202:	b2db      	uxtb	r3, r3
  400204:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		 /* Page Number */
		 pkt.addr[0] = memAddr;
  400208:	893b      	ldrh	r3, [r7, #8]
  40020a:	b2db      	uxtb	r3, r3
  40020c:	753b      	strb	r3, [r7, #20]
		 /* No Address Bytes to be clocked */
		 pkt.addr_length = 1;
  40020e:	2301      	movs	r3, #1
  400210:	61bb      	str	r3, [r7, #24]
		 /* Address of buffer where recvd data is to be stored */
		 pkt.buffer = dPkt;
  400212:	687b      	ldr	r3, [r7, #4]
  400214:	61fb      	str	r3, [r7, #28]
		 /* No of bytes to read */
		 pkt.length = dLen;
  400216:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
  40021a:	623b      	str	r3, [r7, #32]
		 twi_master_write(Port, &pkt);
  40021c:	f107 0314 	add.w	r3, r7, #20
  400220:	4619      	mov	r1, r3
  400222:	68f8      	ldr	r0, [r7, #12]
  400224:	4b15      	ldr	r3, [pc, #84]	; (40027c <WriteEEPROM+0xb0>)
  400226:	4798      	blx	r3
		 delay_ms(5);
  400228:	4b15      	ldr	r3, [pc, #84]	; (400280 <WriteEEPROM+0xb4>)
  40022a:	4798      	blx	r3
  40022c:	4603      	mov	r3, r0
  40022e:	4619      	mov	r1, r3
  400230:	f04f 0200 	mov.w	r2, #0
  400234:	460b      	mov	r3, r1
  400236:	4614      	mov	r4, r2
  400238:	00a6      	lsls	r6, r4, #2
  40023a:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  40023e:	009d      	lsls	r5, r3, #2
  400240:	462b      	mov	r3, r5
  400242:	4634      	mov	r4, r6
  400244:	185b      	adds	r3, r3, r1
  400246:	eb44 0402 	adc.w	r4, r4, r2
  40024a:	f243 61af 	movw	r1, #13999	; 0x36af
  40024e:	f04f 0200 	mov.w	r2, #0
  400252:	185d      	adds	r5, r3, r1
  400254:	eb44 0602 	adc.w	r6, r4, r2
  400258:	4628      	mov	r0, r5
  40025a:	4631      	mov	r1, r6
  40025c:	4c09      	ldr	r4, [pc, #36]	; (400284 <WriteEEPROM+0xb8>)
  40025e:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400262:	f04f 0300 	mov.w	r3, #0
  400266:	47a0      	blx	r4
  400268:	4603      	mov	r3, r0
  40026a:	460c      	mov	r4, r1
  40026c:	4618      	mov	r0, r3
  40026e:	4b06      	ldr	r3, [pc, #24]	; (400288 <WriteEEPROM+0xbc>)
  400270:	4798      	blx	r3
	 }
  400272:	bf00      	nop
  400274:	372c      	adds	r7, #44	; 0x2c
  400276:	46bd      	mov	sp, r7
  400278:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40027a:	bf00      	nop
  40027c:	0040349d 	.word	0x0040349d
  400280:	004001b9 	.word	0x004001b9
  400284:	0040ae29 	.word	0x0040ae29
  400288:	20000001 	.word	0x20000001

0040028c <ReadEEPROM>:
	 /*
	  * 2 LSBs of chipAddr (A1,A0) are the memory addresses (A9, A8).
	  * Read operation does not wrap around on page boundaries.
	  */
	 void ReadEEPROM(Twi * Port, uint8_t chipAddr, uint16_t memAddr, uint8_t *dPkt, uint16_t dLen)
	 {
  40028c:	b580      	push	{r7, lr}
  40028e:	b08a      	sub	sp, #40	; 0x28
  400290:	af00      	add	r7, sp, #0
  400292:	60f8      	str	r0, [r7, #12]
  400294:	607b      	str	r3, [r7, #4]
  400296:	460b      	mov	r3, r1
  400298:	72fb      	strb	r3, [r7, #11]
  40029a:	4613      	mov	r3, r2
  40029c:	813b      	strh	r3, [r7, #8]
		 twi_packet_t pkt;
		 /* Set Device Address */
		 pkt.chip = (chipAddr&0xFC);
  40029e:	7afb      	ldrb	r3, [r7, #11]
  4002a0:	f023 0303 	bic.w	r3, r3, #3
  4002a4:	b2db      	uxtb	r3, r3
  4002a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		 pkt.chip |= ((memAddr>>8)&0x03);
  4002aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
  4002ae:	b25a      	sxtb	r2, r3
  4002b0:	893b      	ldrh	r3, [r7, #8]
  4002b2:	0a1b      	lsrs	r3, r3, #8
  4002b4:	b29b      	uxth	r3, r3
  4002b6:	b25b      	sxtb	r3, r3
  4002b8:	f003 0303 	and.w	r3, r3, #3
  4002bc:	b25b      	sxtb	r3, r3
  4002be:	4313      	orrs	r3, r2
  4002c0:	b25b      	sxtb	r3, r3
  4002c2:	b2db      	uxtb	r3, r3
  4002c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		 /* Page Number */
		 pkt.addr[0] = memAddr;
  4002c8:	893b      	ldrh	r3, [r7, #8]
  4002ca:	b2db      	uxtb	r3, r3
  4002cc:	753b      	strb	r3, [r7, #20]
		 /* No Address Bytes to be clocked */
		 pkt.addr_length = 1;
  4002ce:	2301      	movs	r3, #1
  4002d0:	61bb      	str	r3, [r7, #24]
		 /* Address of buffer where recvd data is to be stored */
		 pkt.buffer = dPkt;
  4002d2:	687b      	ldr	r3, [r7, #4]
  4002d4:	61fb      	str	r3, [r7, #28]
		 /* No of bytes to read */
		 pkt.length = dLen;
  4002d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
  4002d8:	623b      	str	r3, [r7, #32]
		 twi_master_read(Port, &pkt);
  4002da:	f107 0314 	add.w	r3, r7, #20
  4002de:	4619      	mov	r1, r3
  4002e0:	68f8      	ldr	r0, [r7, #12]
  4002e2:	4b03      	ldr	r3, [pc, #12]	; (4002f0 <ReadEEPROM+0x64>)
  4002e4:	4798      	blx	r3
	 }
  4002e6:	bf00      	nop
  4002e8:	3728      	adds	r7, #40	; 0x28
  4002ea:	46bd      	mov	sp, r7
  4002ec:	bd80      	pop	{r7, pc}
  4002ee:	bf00      	nop
  4002f0:	00403391 	.word	0x00403391

004002f4 <DSGetTime>:

#include "DS3231.h"

#ifndef DS3231_USE_RTOS_API
	void DSGetTime(Twi *port, uint16_t *recvTime)
	{
  4002f4:	b580      	push	{r7, lr}
  4002f6:	b088      	sub	sp, #32
  4002f8:	af00      	add	r7, sp, #0
  4002fa:	6078      	str	r0, [r7, #4]
  4002fc:	6039      	str	r1, [r7, #0]
		uint8_t buff[3];
		twi_packet_t pkt;
	
		pkt.chip = DS_ADDR;
  4002fe:	2368      	movs	r3, #104	; 0x68
  400300:	763b      	strb	r3, [r7, #24]
		pkt.addr[0] = DS_REG_SEC;
  400302:	2300      	movs	r3, #0
  400304:	723b      	strb	r3, [r7, #8]
		pkt.addr_length = 1;
  400306:	2301      	movs	r3, #1
  400308:	60fb      	str	r3, [r7, #12]
		pkt.buffer = buff;
  40030a:	f107 031c 	add.w	r3, r7, #28
  40030e:	613b      	str	r3, [r7, #16]
		pkt.length = 3;
  400310:	2303      	movs	r3, #3
  400312:	617b      	str	r3, [r7, #20]
		twi_master_read(port, &pkt);
  400314:	f107 0308 	add.w	r3, r7, #8
  400318:	4619      	mov	r1, r3
  40031a:	6878      	ldr	r0, [r7, #4]
  40031c:	4b09      	ldr	r3, [pc, #36]	; (400344 <DSGetTime+0x50>)
  40031e:	4798      	blx	r3

		//SS
		recvTime[0] = buff[0];
  400320:	7f3b      	ldrb	r3, [r7, #28]
  400322:	b29a      	uxth	r2, r3
  400324:	683b      	ldr	r3, [r7, #0]
  400326:	801a      	strh	r2, [r3, #0]
		//MM
		recvTime[1] = buff[1];
  400328:	683b      	ldr	r3, [r7, #0]
  40032a:	3302      	adds	r3, #2
  40032c:	7f7a      	ldrb	r2, [r7, #29]
  40032e:	b292      	uxth	r2, r2
  400330:	801a      	strh	r2, [r3, #0]
		//HH
		recvTime[2] = buff[2];
  400332:	683b      	ldr	r3, [r7, #0]
  400334:	3304      	adds	r3, #4
  400336:	7fba      	ldrb	r2, [r7, #30]
  400338:	b292      	uxth	r2, r2
  40033a:	801a      	strh	r2, [r3, #0]
	}
  40033c:	bf00      	nop
  40033e:	3720      	adds	r7, #32
  400340:	46bd      	mov	sp, r7
  400342:	bd80      	pop	{r7, pc}
  400344:	00403391 	.word	0x00403391

00400348 <DSSetSecs>:
	{
		DSReadByte(port, DS_REG_SEC, (uint8_t *)ss);
	}

	void DSSetSecs(Twi *port, uint8_t ss)
	{
  400348:	b580      	push	{r7, lr}
  40034a:	b082      	sub	sp, #8
  40034c:	af00      	add	r7, sp, #0
  40034e:	6078      	str	r0, [r7, #4]
  400350:	460b      	mov	r3, r1
  400352:	70fb      	strb	r3, [r7, #3]
		DSWriteByte(port, DS_REG_SEC, ss);
  400354:	78fb      	ldrb	r3, [r7, #3]
  400356:	461a      	mov	r2, r3
  400358:	2100      	movs	r1, #0
  40035a:	6878      	ldr	r0, [r7, #4]
  40035c:	4b02      	ldr	r3, [pc, #8]	; (400368 <DSSetSecs+0x20>)
  40035e:	4798      	blx	r3
	}
  400360:	bf00      	nop
  400362:	3708      	adds	r7, #8
  400364:	46bd      	mov	sp, r7
  400366:	bd80      	pop	{r7, pc}
  400368:	00400515 	.word	0x00400515

0040036c <DSSetMins>:
	{
		DSReadByte(port, DS_REG_MIN, (uint8_t *)mm);
	}

	void DSSetMins(Twi *port, uint8_t mm)
	{
  40036c:	b580      	push	{r7, lr}
  40036e:	b082      	sub	sp, #8
  400370:	af00      	add	r7, sp, #0
  400372:	6078      	str	r0, [r7, #4]
  400374:	460b      	mov	r3, r1
  400376:	70fb      	strb	r3, [r7, #3]
		DSWriteByte(port, DS_REG_MIN, mm);
  400378:	78fb      	ldrb	r3, [r7, #3]
  40037a:	461a      	mov	r2, r3
  40037c:	2101      	movs	r1, #1
  40037e:	6878      	ldr	r0, [r7, #4]
  400380:	4b02      	ldr	r3, [pc, #8]	; (40038c <DSSetMins+0x20>)
  400382:	4798      	blx	r3
	}
  400384:	bf00      	nop
  400386:	3708      	adds	r7, #8
  400388:	46bd      	mov	sp, r7
  40038a:	bd80      	pop	{r7, pc}
  40038c:	00400515 	.word	0x00400515

00400390 <DSSetHrs>:
	{
		DSReadByte(port, DS_REG_HRS, (uint8_t *)hh);
	}

	void DSSetHrs(Twi *port, uint8_t hh)
	{
  400390:	b580      	push	{r7, lr}
  400392:	b082      	sub	sp, #8
  400394:	af00      	add	r7, sp, #0
  400396:	6078      	str	r0, [r7, #4]
  400398:	460b      	mov	r3, r1
  40039a:	70fb      	strb	r3, [r7, #3]
		DSWriteByte(port, DS_REG_HRS, hh);
  40039c:	78fb      	ldrb	r3, [r7, #3]
  40039e:	461a      	mov	r2, r3
  4003a0:	2102      	movs	r1, #2
  4003a2:	6878      	ldr	r0, [r7, #4]
  4003a4:	4b02      	ldr	r3, [pc, #8]	; (4003b0 <DSSetHrs+0x20>)
  4003a6:	4798      	blx	r3
	}
  4003a8:	bf00      	nop
  4003aa:	3708      	adds	r7, #8
  4003ac:	46bd      	mov	sp, r7
  4003ae:	bd80      	pop	{r7, pc}
  4003b0:	00400515 	.word	0x00400515

004003b4 <DSGetFullDate>:

	void DSGetFullDate(Twi *port, uint16_t *recvDate)
	{
  4003b4:	b580      	push	{r7, lr}
  4003b6:	b088      	sub	sp, #32
  4003b8:	af00      	add	r7, sp, #0
  4003ba:	6078      	str	r0, [r7, #4]
  4003bc:	6039      	str	r1, [r7, #0]
		uint8_t buff[4];
		twi_packet_t pkt;
    
		pkt.chip = DS_ADDR;
  4003be:	2368      	movs	r3, #104	; 0x68
  4003c0:	763b      	strb	r3, [r7, #24]
		pkt.addr[0] = DS_REG_DAY;
  4003c2:	2303      	movs	r3, #3
  4003c4:	723b      	strb	r3, [r7, #8]
		pkt.addr_length = 1;
  4003c6:	2301      	movs	r3, #1
  4003c8:	60fb      	str	r3, [r7, #12]
		pkt.buffer = buff;
  4003ca:	f107 031c 	add.w	r3, r7, #28
  4003ce:	613b      	str	r3, [r7, #16]
		pkt.length = 4;
  4003d0:	2304      	movs	r3, #4
  4003d2:	617b      	str	r3, [r7, #20]
		twi_master_read(port, &pkt);
  4003d4:	f107 0308 	add.w	r3, r7, #8
  4003d8:	4619      	mov	r1, r3
  4003da:	6878      	ldr	r0, [r7, #4]
  4003dc:	4b0c      	ldr	r3, [pc, #48]	; (400410 <DSGetFullDate+0x5c>)
  4003de:	4798      	blx	r3
		//DAY
		recvDate[0] = buff[0];
  4003e0:	7f3b      	ldrb	r3, [r7, #28]
  4003e2:	b29a      	uxth	r2, r3
  4003e4:	683b      	ldr	r3, [r7, #0]
  4003e6:	801a      	strh	r2, [r3, #0]
		//DD
		recvDate[1] = buff[1];
  4003e8:	683b      	ldr	r3, [r7, #0]
  4003ea:	3302      	adds	r3, #2
  4003ec:	7f7a      	ldrb	r2, [r7, #29]
  4003ee:	b292      	uxth	r2, r2
  4003f0:	801a      	strh	r2, [r3, #0]
		//MM
		recvDate[2] = buff[2];
  4003f2:	683b      	ldr	r3, [r7, #0]
  4003f4:	3304      	adds	r3, #4
  4003f6:	7fba      	ldrb	r2, [r7, #30]
  4003f8:	b292      	uxth	r2, r2
  4003fa:	801a      	strh	r2, [r3, #0]
		//YY
		recvDate[3] = buff[3];
  4003fc:	683b      	ldr	r3, [r7, #0]
  4003fe:	3306      	adds	r3, #6
  400400:	7ffa      	ldrb	r2, [r7, #31]
  400402:	b292      	uxth	r2, r2
  400404:	801a      	strh	r2, [r3, #0]
	}
  400406:	bf00      	nop
  400408:	3720      	adds	r7, #32
  40040a:	46bd      	mov	sp, r7
  40040c:	bd80      	pop	{r7, pc}
  40040e:	bf00      	nop
  400410:	00403391 	.word	0x00403391

00400414 <DSSetDay>:
	{
		DSReadByte(port, DS_REG_DAY, (uint8_t *)d);
	}

	void DSSetDay(Twi *port, uint8_t d)
	{
  400414:	b580      	push	{r7, lr}
  400416:	b082      	sub	sp, #8
  400418:	af00      	add	r7, sp, #0
  40041a:	6078      	str	r0, [r7, #4]
  40041c:	460b      	mov	r3, r1
  40041e:	70fb      	strb	r3, [r7, #3]
		DSWriteByte(port, DS_REG_DAY, d);
  400420:	78fb      	ldrb	r3, [r7, #3]
  400422:	461a      	mov	r2, r3
  400424:	2103      	movs	r1, #3
  400426:	6878      	ldr	r0, [r7, #4]
  400428:	4b02      	ldr	r3, [pc, #8]	; (400434 <DSSetDay+0x20>)
  40042a:	4798      	blx	r3
	}
  40042c:	bf00      	nop
  40042e:	3708      	adds	r7, #8
  400430:	46bd      	mov	sp, r7
  400432:	bd80      	pop	{r7, pc}
  400434:	00400515 	.word	0x00400515

00400438 <DSSetDate>:
	{
		DSReadByte(port, DS_REG_DAT, (uint8_t *)dd);
	}

	void DSSetDate(Twi *port, uint8_t dd)
	{
  400438:	b580      	push	{r7, lr}
  40043a:	b082      	sub	sp, #8
  40043c:	af00      	add	r7, sp, #0
  40043e:	6078      	str	r0, [r7, #4]
  400440:	460b      	mov	r3, r1
  400442:	70fb      	strb	r3, [r7, #3]
		DSWriteByte(port, DS_REG_DAT, dd);
  400444:	78fb      	ldrb	r3, [r7, #3]
  400446:	461a      	mov	r2, r3
  400448:	2104      	movs	r1, #4
  40044a:	6878      	ldr	r0, [r7, #4]
  40044c:	4b02      	ldr	r3, [pc, #8]	; (400458 <DSSetDate+0x20>)
  40044e:	4798      	blx	r3
	}
  400450:	bf00      	nop
  400452:	3708      	adds	r7, #8
  400454:	46bd      	mov	sp, r7
  400456:	bd80      	pop	{r7, pc}
  400458:	00400515 	.word	0x00400515

0040045c <DSSetMonth>:
	{
		DSReadByte(port, DS_REG_MON, (uint8_t *)mm);
	}

	void DSSetMonth(Twi *port, uint8_t mm)
	{
  40045c:	b580      	push	{r7, lr}
  40045e:	b082      	sub	sp, #8
  400460:	af00      	add	r7, sp, #0
  400462:	6078      	str	r0, [r7, #4]
  400464:	460b      	mov	r3, r1
  400466:	70fb      	strb	r3, [r7, #3]
		DSWriteByte(port, DS_REG_MON, mm);
  400468:	78fb      	ldrb	r3, [r7, #3]
  40046a:	461a      	mov	r2, r3
  40046c:	2105      	movs	r1, #5
  40046e:	6878      	ldr	r0, [r7, #4]
  400470:	4b02      	ldr	r3, [pc, #8]	; (40047c <DSSetMonth+0x20>)
  400472:	4798      	blx	r3
	}
  400474:	bf00      	nop
  400476:	3708      	adds	r7, #8
  400478:	46bd      	mov	sp, r7
  40047a:	bd80      	pop	{r7, pc}
  40047c:	00400515 	.word	0x00400515

00400480 <DSSetYear>:
	{
		DSReadByte(port, DS_REG_YRS, (uint8_t *)yy);
	}

	void DSSetYear(Twi *port, uint8_t yy)
	{
  400480:	b580      	push	{r7, lr}
  400482:	b082      	sub	sp, #8
  400484:	af00      	add	r7, sp, #0
  400486:	6078      	str	r0, [r7, #4]
  400488:	460b      	mov	r3, r1
  40048a:	70fb      	strb	r3, [r7, #3]
		DSWriteByte(port, DS_REG_YRS, yy);
  40048c:	78fb      	ldrb	r3, [r7, #3]
  40048e:	461a      	mov	r2, r3
  400490:	2106      	movs	r1, #6
  400492:	6878      	ldr	r0, [r7, #4]
  400494:	4b02      	ldr	r3, [pc, #8]	; (4004a0 <DSSetYear+0x20>)
  400496:	4798      	blx	r3
	}
  400498:	bf00      	nop
  40049a:	3708      	adds	r7, #8
  40049c:	46bd      	mov	sp, r7
  40049e:	bd80      	pop	{r7, pc}
  4004a0:	00400515 	.word	0x00400515

004004a4 <DSEnAL2>:
			DSWriteByte(port, DS_REG_CTRL, 0x04);
		}
	}

	void DSEnAL2(Twi *port, uint8_t en)
	{
  4004a4:	b580      	push	{r7, lr}
  4004a6:	b088      	sub	sp, #32
  4004a8:	af00      	add	r7, sp, #0
  4004aa:	6078      	str	r0, [r7, #4]
  4004ac:	460b      	mov	r3, r1
  4004ae:	70fb      	strb	r3, [r7, #3]
		uint8_t buff[3];
		twi_packet_t pkt;

		if(en)
  4004b0:	78fb      	ldrb	r3, [r7, #3]
  4004b2:	2b00      	cmp	r3, #0
  4004b4:	d021      	beq.n	4004fa <DSEnAL2+0x56>
		{
			pkt.chip = DS_ADDR;
  4004b6:	2368      	movs	r3, #104	; 0x68
  4004b8:	763b      	strb	r3, [r7, #24]
			pkt.addr[0] = DS_REG_AL2M;
  4004ba:	230b      	movs	r3, #11
  4004bc:	723b      	strb	r3, [r7, #8]
			pkt.addr_length = 1;
  4004be:	2301      	movs	r3, #1
  4004c0:	60fb      	str	r3, [r7, #12]
			pkt.buffer = buff;
  4004c2:	f107 031c 	add.w	r3, r7, #28
  4004c6:	613b      	str	r3, [r7, #16]
			pkt.length = 3;
  4004c8:	2303      	movs	r3, #3
  4004ca:	617b      	str	r3, [r7, #20]

			buff[0] = 0x80;
  4004cc:	2380      	movs	r3, #128	; 0x80
  4004ce:	773b      	strb	r3, [r7, #28]
			buff[1] = 0x80;
  4004d0:	2380      	movs	r3, #128	; 0x80
  4004d2:	777b      	strb	r3, [r7, #29]
			buff[2] = 0x80;
  4004d4:	2380      	movs	r3, #128	; 0x80
  4004d6:	77bb      	strb	r3, [r7, #30]

			//Set Alarm 2 for 1 min interrupt
			twi_master_write(port, &pkt);
  4004d8:	f107 0308 	add.w	r3, r7, #8
  4004dc:	4619      	mov	r1, r3
  4004de:	6878      	ldr	r0, [r7, #4]
  4004e0:	4b0a      	ldr	r3, [pc, #40]	; (40050c <DSEnAL2+0x68>)
  4004e2:	4798      	blx	r3
			//Write Enable Alarm Register
			DSWriteByte(port, DS_REG_CTRL, 0x06);
  4004e4:	2206      	movs	r2, #6
  4004e6:	210e      	movs	r1, #14
  4004e8:	6878      	ldr	r0, [r7, #4]
  4004ea:	4b09      	ldr	r3, [pc, #36]	; (400510 <DSEnAL2+0x6c>)
  4004ec:	4798      	blx	r3
			//Clear Status Reg
			DSWriteByte(port, DS_REG_STAT, 0x80);
  4004ee:	2280      	movs	r2, #128	; 0x80
  4004f0:	210f      	movs	r1, #15
  4004f2:	6878      	ldr	r0, [r7, #4]
  4004f4:	4b06      	ldr	r3, [pc, #24]	; (400510 <DSEnAL2+0x6c>)
  4004f6:	4798      	blx	r3
		else
		{
			//Write Disable Alarm Register
			DSWriteByte(port, DS_REG_CTRL, 0x04);
		}
	}
  4004f8:	e004      	b.n	400504 <DSEnAL2+0x60>
			DSWriteByte(port, DS_REG_STAT, 0x80);
		}
		else
		{
			//Write Disable Alarm Register
			DSWriteByte(port, DS_REG_CTRL, 0x04);
  4004fa:	2204      	movs	r2, #4
  4004fc:	210e      	movs	r1, #14
  4004fe:	6878      	ldr	r0, [r7, #4]
  400500:	4b03      	ldr	r3, [pc, #12]	; (400510 <DSEnAL2+0x6c>)
  400502:	4798      	blx	r3
		}
	}
  400504:	bf00      	nop
  400506:	3720      	adds	r7, #32
  400508:	46bd      	mov	sp, r7
  40050a:	bd80      	pop	{r7, pc}
  40050c:	0040349d 	.word	0x0040349d
  400510:	00400515 	.word	0x00400515

00400514 <DSWriteByte>:
		twi_master_read(port, &pkt);
		*temp = (((uint16_t)buff[0])<<8) | buff[1];
	}

	void DSWriteByte(Twi *port, uint8_t reg, uint8_t data)
	{
  400514:	b580      	push	{r7, lr}
  400516:	b088      	sub	sp, #32
  400518:	af00      	add	r7, sp, #0
  40051a:	6078      	str	r0, [r7, #4]
  40051c:	460b      	mov	r3, r1
  40051e:	70fb      	strb	r3, [r7, #3]
  400520:	4613      	mov	r3, r2
  400522:	70bb      	strb	r3, [r7, #2]
		twi_packet_t pkt;
    
		pkt.chip = DS_ADDR;
  400524:	2368      	movs	r3, #104	; 0x68
  400526:	773b      	strb	r3, [r7, #28]
		pkt.addr[0] = reg;
  400528:	78fb      	ldrb	r3, [r7, #3]
  40052a:	733b      	strb	r3, [r7, #12]
		pkt.addr_length = 1;
  40052c:	2301      	movs	r3, #1
  40052e:	613b      	str	r3, [r7, #16]
		pkt.buffer = &data;
  400530:	1cbb      	adds	r3, r7, #2
  400532:	617b      	str	r3, [r7, #20]
		pkt.length = 1;
  400534:	2301      	movs	r3, #1
  400536:	61bb      	str	r3, [r7, #24]
	
		twi_master_write(port, &pkt);
  400538:	f107 030c 	add.w	r3, r7, #12
  40053c:	4619      	mov	r1, r3
  40053e:	6878      	ldr	r0, [r7, #4]
  400540:	4b02      	ldr	r3, [pc, #8]	; (40054c <DSWriteByte+0x38>)
  400542:	4798      	blx	r3
	}
  400544:	bf00      	nop
  400546:	3720      	adds	r7, #32
  400548:	46bd      	mov	sp, r7
  40054a:	bd80      	pop	{r7, pc}
  40054c:	0040349d 	.word	0x0040349d

00400550 <DSReadByte>:

	void DSReadByte(Twi *port, uint8_t reg, uint8_t *recvData)
	{
  400550:	b580      	push	{r7, lr}
  400552:	b08a      	sub	sp, #40	; 0x28
  400554:	af00      	add	r7, sp, #0
  400556:	60f8      	str	r0, [r7, #12]
  400558:	460b      	mov	r3, r1
  40055a:	607a      	str	r2, [r7, #4]
  40055c:	72fb      	strb	r3, [r7, #11]
		twi_packet_t pkt;
    
		pkt.chip = DS_ADDR;
  40055e:	2368      	movs	r3, #104	; 0x68
  400560:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		pkt.addr[0] = reg;
  400564:	7afb      	ldrb	r3, [r7, #11]
  400566:	753b      	strb	r3, [r7, #20]
		pkt.addr_length = 1;
  400568:	2301      	movs	r3, #1
  40056a:	61bb      	str	r3, [r7, #24]
		pkt.buffer = recvData;
  40056c:	687b      	ldr	r3, [r7, #4]
  40056e:	61fb      	str	r3, [r7, #28]
		pkt.length = 1;
  400570:	2301      	movs	r3, #1
  400572:	623b      	str	r3, [r7, #32]
    
		twi_master_read(port, &pkt);
  400574:	f107 0314 	add.w	r3, r7, #20
  400578:	4619      	mov	r1, r3
  40057a:	68f8      	ldr	r0, [r7, #12]
  40057c:	4b02      	ldr	r3, [pc, #8]	; (400588 <DSReadByte+0x38>)
  40057e:	4798      	blx	r3
	}
  400580:	bf00      	nop
  400582:	3728      	adds	r7, #40	; 0x28
  400584:	46bd      	mov	sp, r7
  400586:	bd80      	pop	{r7, pc}
  400588:	00403391 	.word	0x00403391

0040058c <ICMInitialize>:

#include "ICM20648.h"

#ifndef ICM20648_USE_RTOS_API
	void ICMInitialize(Twi *port, uint8_t sla)
	{
  40058c:	b590      	push	{r4, r7, lr}
  40058e:	b083      	sub	sp, #12
  400590:	af00      	add	r7, sp, #0
  400592:	6078      	str	r0, [r7, #4]
  400594:	460b      	mov	r3, r1
  400596:	70fb      	strb	r3, [r7, #3]
		//Select USER Bank 0
		ICMWriteByte(port, sla,ICM_REG_BANK_SEL,0x00);
  400598:	78f9      	ldrb	r1, [r7, #3]
  40059a:	2300      	movs	r3, #0
  40059c:	227f      	movs	r2, #127	; 0x7f
  40059e:	6878      	ldr	r0, [r7, #4]
  4005a0:	4c11      	ldr	r4, [pc, #68]	; (4005e8 <ICMInitialize+0x5c>)
  4005a2:	47a0      	blx	r4
    
		//Auto Select Best Clock Source
		ICMWriteByte(port, sla,ICM_REG_PWR_MGMT1,0x01);
  4005a4:	78f9      	ldrb	r1, [r7, #3]
  4005a6:	2301      	movs	r3, #1
  4005a8:	2206      	movs	r2, #6
  4005aa:	6878      	ldr	r0, [r7, #4]
  4005ac:	4c0e      	ldr	r4, [pc, #56]	; (4005e8 <ICMInitialize+0x5c>)
  4005ae:	47a0      	blx	r4
    
		//Select USER Bank 2
		ICMWriteByte(port, sla,ICM_REG_BANK_SEL,0x20);
  4005b0:	78f9      	ldrb	r1, [r7, #3]
  4005b2:	2320      	movs	r3, #32
  4005b4:	227f      	movs	r2, #127	; 0x7f
  4005b6:	6878      	ldr	r0, [r7, #4]
  4005b8:	4c0b      	ldr	r4, [pc, #44]	; (4005e8 <ICMInitialize+0x5c>)
  4005ba:	47a0      	blx	r4
    
		//Accel Full Scale set to 2G
		//ICMWriteByte(sla,ICM_REG_ACC_CONFIG,0x00);
		//Full Scale = 2G, Enable DLP, Cutoff = 23Hz
		ICMWriteByte(port, sla,ICM_REG_ACC_CONFIG,0x31);
  4005bc:	78f9      	ldrb	r1, [r7, #3]
  4005be:	2331      	movs	r3, #49	; 0x31
  4005c0:	2214      	movs	r2, #20
  4005c2:	6878      	ldr	r0, [r7, #4]
  4005c4:	4c08      	ldr	r4, [pc, #32]	; (4005e8 <ICMInitialize+0x5c>)
  4005c6:	47a0      	blx	r4
    
		//Output Data Rate Set to 17.xx Hz
		ICMWriteByte(port, sla,ICM_REG_ACC_SMPLRT_DIV1,0x00);
  4005c8:	78f9      	ldrb	r1, [r7, #3]
  4005ca:	2300      	movs	r3, #0
  4005cc:	2210      	movs	r2, #16
  4005ce:	6878      	ldr	r0, [r7, #4]
  4005d0:	4c05      	ldr	r4, [pc, #20]	; (4005e8 <ICMInitialize+0x5c>)
  4005d2:	47a0      	blx	r4
		ICMWriteByte(port, sla,ICM_REG_ACC_SMPLRT_DIV2,0x3F);
  4005d4:	78f9      	ldrb	r1, [r7, #3]
  4005d6:	233f      	movs	r3, #63	; 0x3f
  4005d8:	2211      	movs	r2, #17
  4005da:	6878      	ldr	r0, [r7, #4]
  4005dc:	4c02      	ldr	r4, [pc, #8]	; (4005e8 <ICMInitialize+0x5c>)
  4005de:	47a0      	blx	r4
    
	}
  4005e0:	bf00      	nop
  4005e2:	370c      	adds	r7, #12
  4005e4:	46bd      	mov	sp, r7
  4005e6:	bd90      	pop	{r4, r7, pc}
  4005e8:	00400669 	.word	0x00400669

004005ec <ICMReadAccDataAll>:
		ICMReadByte(port, sla, ICM_REG_ACC_ZOUTH, &((uint8_t *)recvData)[1]);
		ICMReadByte(port, sla, ICM_REG_ACC_ZOUTL, &((uint8_t *)recvData)[0]);
	}

	void ICMReadAccDataAll(Twi *port, uint8_t sla, uint16_t *recvData)
	{
  4005ec:	b590      	push	{r4, r7, lr}
  4005ee:	b085      	sub	sp, #20
  4005f0:	af00      	add	r7, sp, #0
  4005f2:	60f8      	str	r0, [r7, #12]
  4005f4:	460b      	mov	r3, r1
  4005f6:	607a      	str	r2, [r7, #4]
  4005f8:	72fb      	strb	r3, [r7, #11]
		//Select USER Bank 0
		ICMWriteByte(port, sla,ICM_REG_BANK_SEL,0x00);
  4005fa:	7af9      	ldrb	r1, [r7, #11]
  4005fc:	2300      	movs	r3, #0
  4005fe:	227f      	movs	r2, #127	; 0x7f
  400600:	68f8      	ldr	r0, [r7, #12]
  400602:	4c17      	ldr	r4, [pc, #92]	; (400660 <ICMReadAccDataAll+0x74>)
  400604:	47a0      	blx	r4
    
		//Read ACC data
		ICMReadByte(port, sla, ICM_REG_ACC_XOUTH, &((uint8_t *)recvData)[1]);
  400606:	687b      	ldr	r3, [r7, #4]
  400608:	3301      	adds	r3, #1
  40060a:	7af9      	ldrb	r1, [r7, #11]
  40060c:	222d      	movs	r2, #45	; 0x2d
  40060e:	68f8      	ldr	r0, [r7, #12]
  400610:	4c14      	ldr	r4, [pc, #80]	; (400664 <ICMReadAccDataAll+0x78>)
  400612:	47a0      	blx	r4
		ICMReadByte(port, sla, ICM_REG_ACC_XOUTL, &((uint8_t *)recvData)[0]);
  400614:	7af9      	ldrb	r1, [r7, #11]
  400616:	687b      	ldr	r3, [r7, #4]
  400618:	222e      	movs	r2, #46	; 0x2e
  40061a:	68f8      	ldr	r0, [r7, #12]
  40061c:	4c11      	ldr	r4, [pc, #68]	; (400664 <ICMReadAccDataAll+0x78>)
  40061e:	47a0      	blx	r4
		ICMReadByte(port, sla, ICM_REG_ACC_YOUTH, &((uint8_t *)recvData)[3]);
  400620:	687b      	ldr	r3, [r7, #4]
  400622:	3303      	adds	r3, #3
  400624:	7af9      	ldrb	r1, [r7, #11]
  400626:	222f      	movs	r2, #47	; 0x2f
  400628:	68f8      	ldr	r0, [r7, #12]
  40062a:	4c0e      	ldr	r4, [pc, #56]	; (400664 <ICMReadAccDataAll+0x78>)
  40062c:	47a0      	blx	r4
		ICMReadByte(port, sla, ICM_REG_ACC_YOUTL, &((uint8_t *)recvData)[2]);
  40062e:	687b      	ldr	r3, [r7, #4]
  400630:	3302      	adds	r3, #2
  400632:	7af9      	ldrb	r1, [r7, #11]
  400634:	2230      	movs	r2, #48	; 0x30
  400636:	68f8      	ldr	r0, [r7, #12]
  400638:	4c0a      	ldr	r4, [pc, #40]	; (400664 <ICMReadAccDataAll+0x78>)
  40063a:	47a0      	blx	r4
		ICMReadByte(port, sla, ICM_REG_ACC_ZOUTH, &((uint8_t *)recvData)[5]);
  40063c:	687b      	ldr	r3, [r7, #4]
  40063e:	3305      	adds	r3, #5
  400640:	7af9      	ldrb	r1, [r7, #11]
  400642:	2231      	movs	r2, #49	; 0x31
  400644:	68f8      	ldr	r0, [r7, #12]
  400646:	4c07      	ldr	r4, [pc, #28]	; (400664 <ICMReadAccDataAll+0x78>)
  400648:	47a0      	blx	r4
		ICMReadByte(port, sla, ICM_REG_ACC_ZOUTL, &((uint8_t *)recvData)[4]);
  40064a:	687b      	ldr	r3, [r7, #4]
  40064c:	3304      	adds	r3, #4
  40064e:	7af9      	ldrb	r1, [r7, #11]
  400650:	2232      	movs	r2, #50	; 0x32
  400652:	68f8      	ldr	r0, [r7, #12]
  400654:	4c03      	ldr	r4, [pc, #12]	; (400664 <ICMReadAccDataAll+0x78>)
  400656:	47a0      	blx	r4
	}
  400658:	bf00      	nop
  40065a:	3714      	adds	r7, #20
  40065c:	46bd      	mov	sp, r7
  40065e:	bd90      	pop	{r4, r7, pc}
  400660:	00400669 	.word	0x00400669
  400664:	004006b1 	.word	0x004006b1

00400668 <ICMWriteByte>:

	void ICMWriteByte(Twi *port, uint8_t sla, uint8_t reg, uint8_t data)
	{
  400668:	b580      	push	{r7, lr}
  40066a:	b088      	sub	sp, #32
  40066c:	af00      	add	r7, sp, #0
  40066e:	6078      	str	r0, [r7, #4]
  400670:	4608      	mov	r0, r1
  400672:	4611      	mov	r1, r2
  400674:	461a      	mov	r2, r3
  400676:	4603      	mov	r3, r0
  400678:	70fb      	strb	r3, [r7, #3]
  40067a:	460b      	mov	r3, r1
  40067c:	70bb      	strb	r3, [r7, #2]
  40067e:	4613      	mov	r3, r2
  400680:	707b      	strb	r3, [r7, #1]
		twi_packet_t pkt;
    
		pkt.chip = sla;
  400682:	78fb      	ldrb	r3, [r7, #3]
  400684:	773b      	strb	r3, [r7, #28]
		pkt.addr[0] = reg;
  400686:	78bb      	ldrb	r3, [r7, #2]
  400688:	733b      	strb	r3, [r7, #12]
		pkt.addr_length = 1;
  40068a:	2301      	movs	r3, #1
  40068c:	613b      	str	r3, [r7, #16]
		pkt.buffer = &data;
  40068e:	1c7b      	adds	r3, r7, #1
  400690:	617b      	str	r3, [r7, #20]
		pkt.length = 1;
  400692:	2301      	movs	r3, #1
  400694:	61bb      	str	r3, [r7, #24]
    
		twi_master_write(port, &pkt);
  400696:	f107 030c 	add.w	r3, r7, #12
  40069a:	4619      	mov	r1, r3
  40069c:	6878      	ldr	r0, [r7, #4]
  40069e:	4b03      	ldr	r3, [pc, #12]	; (4006ac <ICMWriteByte+0x44>)
  4006a0:	4798      	blx	r3
	}
  4006a2:	bf00      	nop
  4006a4:	3720      	adds	r7, #32
  4006a6:	46bd      	mov	sp, r7
  4006a8:	bd80      	pop	{r7, pc}
  4006aa:	bf00      	nop
  4006ac:	0040349d 	.word	0x0040349d

004006b0 <ICMReadByte>:

	void ICMReadByte(Twi *port, uint8_t sla, uint8_t reg, uint8_t *recvData)
	{
  4006b0:	b580      	push	{r7, lr}
  4006b2:	b08a      	sub	sp, #40	; 0x28
  4006b4:	af00      	add	r7, sp, #0
  4006b6:	60f8      	str	r0, [r7, #12]
  4006b8:	607b      	str	r3, [r7, #4]
  4006ba:	460b      	mov	r3, r1
  4006bc:	72fb      	strb	r3, [r7, #11]
  4006be:	4613      	mov	r3, r2
  4006c0:	72bb      	strb	r3, [r7, #10]
		twi_packet_t pkt;
    
		pkt.chip = sla;
  4006c2:	7afb      	ldrb	r3, [r7, #11]
  4006c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		pkt.addr[0] = reg;
  4006c8:	7abb      	ldrb	r3, [r7, #10]
  4006ca:	753b      	strb	r3, [r7, #20]
		pkt.addr_length = 1;
  4006cc:	2301      	movs	r3, #1
  4006ce:	61bb      	str	r3, [r7, #24]
		pkt.buffer = recvData;
  4006d0:	687b      	ldr	r3, [r7, #4]
  4006d2:	61fb      	str	r3, [r7, #28]
		pkt.length = 1;
  4006d4:	2301      	movs	r3, #1
  4006d6:	623b      	str	r3, [r7, #32]
    
		twi_master_read(port, &pkt);
  4006d8:	f107 0314 	add.w	r3, r7, #20
  4006dc:	4619      	mov	r1, r3
  4006de:	68f8      	ldr	r0, [r7, #12]
  4006e0:	4b02      	ldr	r3, [pc, #8]	; (4006ec <ICMReadByte+0x3c>)
  4006e2:	4798      	blx	r3
	}
  4006e4:	bf00      	nop
  4006e6:	3728      	adds	r7, #40	; 0x28
  4006e8:	46bd      	mov	sp, r7
  4006ea:	bd80      	pop	{r7, pc}
  4006ec:	00403391 	.word	0x00403391

004006f0 <ParseMbusPkt>:
//Write function pointer
void (*writeFunc)(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len);

/* Modbus stack parser function */
void ParseMbusPkt(uint8_t slaveAddr, uint8_t *buff, uint8_t len, uint8_t *respBuff, uint8_t *respLen)
{
  4006f0:	b580      	push	{r7, lr}
  4006f2:	b08a      	sub	sp, #40	; 0x28
  4006f4:	af00      	add	r7, sp, #0
  4006f6:	60b9      	str	r1, [r7, #8]
  4006f8:	607b      	str	r3, [r7, #4]
  4006fa:	4603      	mov	r3, r0
  4006fc:	73fb      	strb	r3, [r7, #15]
  4006fe:	4613      	mov	r3, r2
  400700:	73bb      	strb	r3, [r7, #14]
	 uint16_t crc = 0, recvCrc = 0;
  400702:	2300      	movs	r3, #0
  400704:	83fb      	strh	r3, [r7, #30]
  400706:	2300      	movs	r3, #0
  400708:	83bb      	strh	r3, [r7, #28]
	 uint16_t regAddr = 0, numReg = 0;
  40070a:	2300      	movs	r3, #0
  40070c:	837b      	strh	r3, [r7, #26]
  40070e:	2300      	movs	r3, #0
  400710:	833b      	strh	r3, [r7, #24]
	 uint16_t regVal = 0;
  400712:	2300      	movs	r3, #0
  400714:	84fb      	strh	r3, [r7, #38]	; 0x26
	 uint8_t fCode = 0, genErrRsp = 0;
  400716:	2300      	movs	r3, #0
  400718:	75fb      	strb	r3, [r7, #23]
  40071a:	2300      	movs	r3, #0
  40071c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	 uint8_t expFuncCode = 0, expCode = 0;
  400720:	2300      	movs	r3, #0
  400722:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  400726:	2300      	movs	r3, #0
  400728:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	 uint8_t i = 0, ind = 0;
  40072c:	2300      	movs	r3, #0
  40072e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  400732:	2300      	movs	r3, #0
  400734:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	 
	 /* Self Addr recvd or Broadcast Addr = 0 recvd */
	 if(buff[0]==slaveAddr||buff[0]==0)
  400738:	68bb      	ldr	r3, [r7, #8]
  40073a:	781b      	ldrb	r3, [r3, #0]
  40073c:	7bfa      	ldrb	r2, [r7, #15]
  40073e:	429a      	cmp	r2, r3
  400740:	d004      	beq.n	40074c <ParseMbusPkt+0x5c>
  400742:	68bb      	ldr	r3, [r7, #8]
  400744:	781b      	ldrb	r3, [r3, #0]
  400746:	2b00      	cmp	r3, #0
  400748:	f040 81fb 	bne.w	400b42 <ParseMbusPkt+0x452>
	 {
		 /* Calc CRC */
		 recvCrc = (((uint16_t)buff[len-1])<<8)|buff[len-2];
  40074c:	7bbb      	ldrb	r3, [r7, #14]
  40074e:	3b01      	subs	r3, #1
  400750:	68ba      	ldr	r2, [r7, #8]
  400752:	4413      	add	r3, r2
  400754:	781b      	ldrb	r3, [r3, #0]
  400756:	021b      	lsls	r3, r3, #8
  400758:	b21a      	sxth	r2, r3
  40075a:	7bbb      	ldrb	r3, [r7, #14]
  40075c:	3b02      	subs	r3, #2
  40075e:	68b9      	ldr	r1, [r7, #8]
  400760:	440b      	add	r3, r1
  400762:	781b      	ldrb	r3, [r3, #0]
  400764:	b21b      	sxth	r3, r3
  400766:	4313      	orrs	r3, r2
  400768:	b21b      	sxth	r3, r3
  40076a:	83bb      	strh	r3, [r7, #28]
		 crc = calcCRC(buff,len-2);
  40076c:	7bbb      	ldrb	r3, [r7, #14]
  40076e:	3b02      	subs	r3, #2
  400770:	b2db      	uxtb	r3, r3
  400772:	4619      	mov	r1, r3
  400774:	68b8      	ldr	r0, [r7, #8]
  400776:	4b90      	ldr	r3, [pc, #576]	; (4009b8 <ParseMbusPkt+0x2c8>)
  400778:	4798      	blx	r3
  40077a:	4603      	mov	r3, r0
  40077c:	83fb      	strh	r3, [r7, #30]
		 /* If CRC Matched */
		 if(crc==recvCrc)
  40077e:	8bfa      	ldrh	r2, [r7, #30]
  400780:	8bbb      	ldrh	r3, [r7, #28]
  400782:	429a      	cmp	r2, r3
  400784:	f040 81e0 	bne.w	400b48 <ParseMbusPkt+0x458>
		 {
			 /* Function Code Extraction */
			 fCode = buff[1];
  400788:	68bb      	ldr	r3, [r7, #8]
  40078a:	785b      	ldrb	r3, [r3, #1]
  40078c:	75fb      	strb	r3, [r7, #23]
			 switch(fCode)
  40078e:	7dfb      	ldrb	r3, [r7, #23]
  400790:	2b06      	cmp	r3, #6
  400792:	f000 80a9 	beq.w	4008e8 <ParseMbusPkt+0x1f8>
  400796:	2b10      	cmp	r3, #16
  400798:	f000 8114 	beq.w	4009c4 <ParseMbusPkt+0x2d4>
  40079c:	2b03      	cmp	r3, #3
  40079e:	f040 81c2 	bne.w	400b26 <ParseMbusPkt+0x436>
			 {
				 /* Read Analog Reg Func Code Recvd */
				 case 0x03:
				 numReg = (((uint16_t)buff[4])<<8)|buff[5];
  4007a2:	68bb      	ldr	r3, [r7, #8]
  4007a4:	3304      	adds	r3, #4
  4007a6:	781b      	ldrb	r3, [r3, #0]
  4007a8:	021b      	lsls	r3, r3, #8
  4007aa:	b21a      	sxth	r2, r3
  4007ac:	68bb      	ldr	r3, [r7, #8]
  4007ae:	3305      	adds	r3, #5
  4007b0:	781b      	ldrb	r3, [r3, #0]
  4007b2:	b21b      	sxth	r3, r3
  4007b4:	4313      	orrs	r3, r2
  4007b6:	b21b      	sxth	r3, r3
  4007b8:	833b      	strh	r3, [r7, #24]
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
  4007ba:	8b3b      	ldrh	r3, [r7, #24]
  4007bc:	2b00      	cmp	r3, #0
  4007be:	f000 8088 	beq.w	4008d2 <ParseMbusPkt+0x1e2>
  4007c2:	8b3b      	ldrh	r3, [r7, #24]
  4007c4:	2b7d      	cmp	r3, #125	; 0x7d
  4007c6:	f200 8084 	bhi.w	4008d2 <ParseMbusPkt+0x1e2>
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
  4007ca:	68bb      	ldr	r3, [r7, #8]
  4007cc:	3302      	adds	r3, #2
  4007ce:	781b      	ldrb	r3, [r3, #0]
  4007d0:	021b      	lsls	r3, r3, #8
  4007d2:	b21a      	sxth	r2, r3
  4007d4:	68bb      	ldr	r3, [r7, #8]
  4007d6:	3303      	adds	r3, #3
  4007d8:	781b      	ldrb	r3, [r3, #0]
  4007da:	b21b      	sxth	r3, r3
  4007dc:	4313      	orrs	r3, r2
  4007de:	b21b      	sxth	r3, r3
  4007e0:	837b      	strh	r3, [r7, #26]
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  4007e2:	8b7a      	ldrh	r2, [r7, #26]
  4007e4:	8b3b      	ldrh	r3, [r7, #24]
  4007e6:	4413      	add	r3, r2
  4007e8:	2b26      	cmp	r3, #38	; 0x26
  4007ea:	dc68      	bgt.n	4008be <ParseMbusPkt+0x1ce>
					 {
						 /* Process Read Reg Req */
						 /* Gen Valid Resp */
						 respBuff[0] = slaveAddr;
  4007ec:	687b      	ldr	r3, [r7, #4]
  4007ee:	7bfa      	ldrb	r2, [r7, #15]
  4007f0:	701a      	strb	r2, [r3, #0]
						 respBuff[1] = 0x03;
  4007f2:	687b      	ldr	r3, [r7, #4]
  4007f4:	3301      	adds	r3, #1
  4007f6:	2203      	movs	r2, #3
  4007f8:	701a      	strb	r2, [r3, #0]
						 respBuff[2] = (numReg *2); //No of Data Bytes
  4007fa:	687b      	ldr	r3, [r7, #4]
  4007fc:	3302      	adds	r3, #2
  4007fe:	8b3a      	ldrh	r2, [r7, #24]
  400800:	b2d2      	uxtb	r2, r2
  400802:	0052      	lsls	r2, r2, #1
  400804:	b2d2      	uxtb	r2, r2
  400806:	701a      	strb	r2, [r3, #0]
						 
						 i = 3;
  400808:	2303      	movs	r3, #3
  40080a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
						 for(ind = 0; ind < numReg; ind++)
  40080e:	2300      	movs	r3, #0
  400810:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  400814:	e028      	b.n	400868 <ParseMbusPkt+0x178>
						 {
							 respBuff[i++] = (mBusRegs[regAddr+ind]>>8);
  400816:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  40081a:	1c5a      	adds	r2, r3, #1
  40081c:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
  400820:	461a      	mov	r2, r3
  400822:	687b      	ldr	r3, [r7, #4]
  400824:	4413      	add	r3, r2
  400826:	8b79      	ldrh	r1, [r7, #26]
  400828:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
  40082c:	440a      	add	r2, r1
  40082e:	4963      	ldr	r1, [pc, #396]	; (4009bc <ParseMbusPkt+0x2cc>)
  400830:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
  400834:	0a12      	lsrs	r2, r2, #8
  400836:	b292      	uxth	r2, r2
  400838:	b2d2      	uxtb	r2, r2
  40083a:	701a      	strb	r2, [r3, #0]
							 respBuff[i++] = (mBusRegs[regAddr+ind]&0x00FF);
  40083c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400840:	1c5a      	adds	r2, r3, #1
  400842:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
  400846:	461a      	mov	r2, r3
  400848:	687b      	ldr	r3, [r7, #4]
  40084a:	4413      	add	r3, r2
  40084c:	8b79      	ldrh	r1, [r7, #26]
  40084e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
  400852:	440a      	add	r2, r1
  400854:	4959      	ldr	r1, [pc, #356]	; (4009bc <ParseMbusPkt+0x2cc>)
  400856:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
  40085a:	b2d2      	uxtb	r2, r2
  40085c:	701a      	strb	r2, [r3, #0]
						 respBuff[0] = slaveAddr;
						 respBuff[1] = 0x03;
						 respBuff[2] = (numReg *2); //No of Data Bytes
						 
						 i = 3;
						 for(ind = 0; ind < numReg; ind++)
  40085e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  400862:	3301      	adds	r3, #1
  400864:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  400868:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  40086c:	b29b      	uxth	r3, r3
  40086e:	8b3a      	ldrh	r2, [r7, #24]
  400870:	429a      	cmp	r2, r3
  400872:	d8d0      	bhi.n	400816 <ParseMbusPkt+0x126>
						 {
							 respBuff[i++] = (mBusRegs[regAddr+ind]>>8);
							 respBuff[i++] = (mBusRegs[regAddr+ind]&0x00FF);
						 }
						 crc = calcCRC(respBuff, i);
  400874:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400878:	4619      	mov	r1, r3
  40087a:	6878      	ldr	r0, [r7, #4]
  40087c:	4b4e      	ldr	r3, [pc, #312]	; (4009b8 <ParseMbusPkt+0x2c8>)
  40087e:	4798      	blx	r3
  400880:	4603      	mov	r3, r0
  400882:	83fb      	strh	r3, [r7, #30]
						 respBuff[i++] = (crc&0x00FF);
  400884:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400888:	1c5a      	adds	r2, r3, #1
  40088a:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
  40088e:	461a      	mov	r2, r3
  400890:	687b      	ldr	r3, [r7, #4]
  400892:	4413      	add	r3, r2
  400894:	8bfa      	ldrh	r2, [r7, #30]
  400896:	b2d2      	uxtb	r2, r2
  400898:	701a      	strb	r2, [r3, #0]
						 respBuff[i++] = (crc>>8);
  40089a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  40089e:	1c5a      	adds	r2, r3, #1
  4008a0:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
  4008a4:	461a      	mov	r2, r3
  4008a6:	687b      	ldr	r3, [r7, #4]
  4008a8:	4413      	add	r3, r2
  4008aa:	8bfa      	ldrh	r2, [r7, #30]
  4008ac:	0a12      	lsrs	r2, r2, #8
  4008ae:	b292      	uxth	r2, r2
  4008b0:	b2d2      	uxtb	r2, r2
  4008b2:	701a      	strb	r2, [r3, #0]
						 *respLen = i;
  4008b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4008b6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
  4008ba:	701a      	strb	r2, [r3, #0]
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  4008bc:	e013      	b.n	4008e6 <ParseMbusPkt+0x1f6>
						 *respLen = i;
					 }
					 else
					 {
						 /* Error code = 0x02 */
						 genErrRsp = 1;
  4008be:	2301      	movs	r3, #1
  4008c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						 expFuncCode = 0x83;
  4008c4:	2383      	movs	r3, #131	; 0x83
  4008c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						 expCode = 0x02;
  4008ca:	2302      	movs	r3, #2
  4008cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  4008d0:	e009      	b.n	4008e6 <ParseMbusPkt+0x1f6>
					 }
				 }
				 else
				 {
					 /* Error Code 0x03 */
					 genErrRsp = 1;
  4008d2:	2301      	movs	r3, #1
  4008d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					 expFuncCode = 0x83;
  4008d8:	2383      	movs	r3, #131	; 0x83
  4008da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					 expCode = 0x03;
  4008de:	2303      	movs	r3, #3
  4008e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 }
				 break;
  4008e4:	e12c      	b.n	400b40 <ParseMbusPkt+0x450>
  4008e6:	e12b      	b.n	400b40 <ParseMbusPkt+0x450>
				 /* Write Single Analog Reg */
				 case 0x06:
				 /* Output Value = 0x0000 or 0xFF00 */
				 regVal = (((uint16_t)buff[4])<<8)|(buff[5]);
  4008e8:	68bb      	ldr	r3, [r7, #8]
  4008ea:	3304      	adds	r3, #4
  4008ec:	781b      	ldrb	r3, [r3, #0]
  4008ee:	021b      	lsls	r3, r3, #8
  4008f0:	b21a      	sxth	r2, r3
  4008f2:	68bb      	ldr	r3, [r7, #8]
  4008f4:	3305      	adds	r3, #5
  4008f6:	781b      	ldrb	r3, [r3, #0]
  4008f8:	b21b      	sxth	r3, r3
  4008fa:	4313      	orrs	r3, r2
  4008fc:	b21b      	sxth	r3, r3
  4008fe:	84fb      	strh	r3, [r7, #38]	; 0x26
				 if(1)
				 {
					 /* Output Address = OK */
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
  400900:	68bb      	ldr	r3, [r7, #8]
  400902:	3302      	adds	r3, #2
  400904:	781b      	ldrb	r3, [r3, #0]
  400906:	021b      	lsls	r3, r3, #8
  400908:	b21a      	sxth	r2, r3
  40090a:	68bb      	ldr	r3, [r7, #8]
  40090c:	3303      	adds	r3, #3
  40090e:	781b      	ldrb	r3, [r3, #0]
  400910:	b21b      	sxth	r3, r3
  400912:	4313      	orrs	r3, r2
  400914:	b21b      	sxth	r3, r3
  400916:	837b      	strh	r3, [r7, #26]
					 if(regAddr <= MBUS_MAX_REGS)
  400918:	8b7b      	ldrh	r3, [r7, #26]
  40091a:	2b26      	cmp	r3, #38	; 0x26
  40091c:	d841      	bhi.n	4009a2 <ParseMbusPkt+0x2b2>
					 {
						 /* Gen Valid Mbus Resp */
						 mBusRegs[regAddr] = regVal;
  40091e:	8b7b      	ldrh	r3, [r7, #26]
  400920:	4926      	ldr	r1, [pc, #152]	; (4009bc <ParseMbusPkt+0x2cc>)
  400922:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  400924:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						 /* Success Error Code */
						 respBuff[0] = slaveAddr;
  400928:	687b      	ldr	r3, [r7, #4]
  40092a:	7bfa      	ldrb	r2, [r7, #15]
  40092c:	701a      	strb	r2, [r3, #0]
						 respBuff[1] = 0x06;
  40092e:	687b      	ldr	r3, [r7, #4]
  400930:	3301      	adds	r3, #1
  400932:	2206      	movs	r2, #6
  400934:	701a      	strb	r2, [r3, #0]
						 respBuff[2] = buff[2];
  400936:	687b      	ldr	r3, [r7, #4]
  400938:	3302      	adds	r3, #2
  40093a:	68ba      	ldr	r2, [r7, #8]
  40093c:	7892      	ldrb	r2, [r2, #2]
  40093e:	701a      	strb	r2, [r3, #0]
						 respBuff[3] = buff[3];
  400940:	687b      	ldr	r3, [r7, #4]
  400942:	3303      	adds	r3, #3
  400944:	68ba      	ldr	r2, [r7, #8]
  400946:	78d2      	ldrb	r2, [r2, #3]
  400948:	701a      	strb	r2, [r3, #0]
						 respBuff[4] = buff[4];
  40094a:	687b      	ldr	r3, [r7, #4]
  40094c:	3304      	adds	r3, #4
  40094e:	68ba      	ldr	r2, [r7, #8]
  400950:	7912      	ldrb	r2, [r2, #4]
  400952:	701a      	strb	r2, [r3, #0]
						 respBuff[5] = buff[5];
  400954:	687b      	ldr	r3, [r7, #4]
  400956:	3305      	adds	r3, #5
  400958:	68ba      	ldr	r2, [r7, #8]
  40095a:	7952      	ldrb	r2, [r2, #5]
  40095c:	701a      	strb	r2, [r3, #0]
						 crc = calcCRC(respBuff, 6);
  40095e:	2106      	movs	r1, #6
  400960:	6878      	ldr	r0, [r7, #4]
  400962:	4b15      	ldr	r3, [pc, #84]	; (4009b8 <ParseMbusPkt+0x2c8>)
  400964:	4798      	blx	r3
  400966:	4603      	mov	r3, r0
  400968:	83fb      	strh	r3, [r7, #30]
						 respBuff[6] = (crc&0x00FF);
  40096a:	687b      	ldr	r3, [r7, #4]
  40096c:	3306      	adds	r3, #6
  40096e:	8bfa      	ldrh	r2, [r7, #30]
  400970:	b2d2      	uxtb	r2, r2
  400972:	701a      	strb	r2, [r3, #0]
						 respBuff[7] = (crc>>8);
  400974:	687b      	ldr	r3, [r7, #4]
  400976:	3307      	adds	r3, #7
  400978:	8bfa      	ldrh	r2, [r7, #30]
  40097a:	0a12      	lsrs	r2, r2, #8
  40097c:	b292      	uxth	r2, r2
  40097e:	b2d2      	uxtb	r2, r2
  400980:	701a      	strb	r2, [r3, #0]
						 *respLen = 8;
  400982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400984:	2208      	movs	r2, #8
  400986:	701a      	strb	r2, [r3, #0]
						 
						 /* Process Write Reg Req */
						 if(writeFunc!=NULL)
  400988:	4b0d      	ldr	r3, [pc, #52]	; (4009c0 <ParseMbusPkt+0x2d0>)
  40098a:	681b      	ldr	r3, [r3, #0]
  40098c:	2b00      	cmp	r3, #0
  40098e:	f000 80d6 	beq.w	400b3e <ParseMbusPkt+0x44e>
							writeFunc(mBusRegs,regAddr,1);
  400992:	4b0b      	ldr	r3, [pc, #44]	; (4009c0 <ParseMbusPkt+0x2d0>)
  400994:	681b      	ldr	r3, [r3, #0]
  400996:	8b7a      	ldrh	r2, [r7, #26]
  400998:	b2d1      	uxtb	r1, r2
  40099a:	2201      	movs	r2, #1
  40099c:	4807      	ldr	r0, [pc, #28]	; (4009bc <ParseMbusPkt+0x2cc>)
  40099e:	4798      	blx	r3
					 /* Illegal Data Value Error */
					 genErrRsp = 1;
					 expFuncCode = 0x86;
					 expCode = 0x03;
				 }
				 break;
  4009a0:	e0cd      	b.n	400b3e <ParseMbusPkt+0x44e>
							writeFunc(mBusRegs,regAddr,1);
					 }
					 else
					 {
						 /* Illegal Data Address Error */
						 genErrRsp = 1;
  4009a2:	2301      	movs	r3, #1
  4009a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						 expFuncCode = 0x86;
  4009a8:	2386      	movs	r3, #134	; 0x86
  4009aa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						 expCode = 0x02;
  4009ae:	2302      	movs	r3, #2
  4009b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					 /* Illegal Data Value Error */
					 genErrRsp = 1;
					 expFuncCode = 0x86;
					 expCode = 0x03;
				 }
				 break;
  4009b4:	e0c3      	b.n	400b3e <ParseMbusPkt+0x44e>
  4009b6:	bf00      	nop
  4009b8:	00400ba9 	.word	0x00400ba9
  4009bc:	20000484 	.word	0x20000484
  4009c0:	2000270c 	.word	0x2000270c
				 case 0x10: /* Write Mul Register */
				 numReg = (((uint16_t)buff[4])<<8)|buff[5];
  4009c4:	68bb      	ldr	r3, [r7, #8]
  4009c6:	3304      	adds	r3, #4
  4009c8:	781b      	ldrb	r3, [r3, #0]
  4009ca:	021b      	lsls	r3, r3, #8
  4009cc:	b21a      	sxth	r2, r3
  4009ce:	68bb      	ldr	r3, [r7, #8]
  4009d0:	3305      	adds	r3, #5
  4009d2:	781b      	ldrb	r3, [r3, #0]
  4009d4:	b21b      	sxth	r3, r3
  4009d6:	4313      	orrs	r3, r2
  4009d8:	b21b      	sxth	r3, r3
  4009da:	833b      	strh	r3, [r7, #24]
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
  4009dc:	8b3b      	ldrh	r3, [r7, #24]
  4009de:	2b00      	cmp	r3, #0
  4009e0:	f000 8096 	beq.w	400b10 <ParseMbusPkt+0x420>
  4009e4:	8b3b      	ldrh	r3, [r7, #24]
  4009e6:	2b7d      	cmp	r3, #125	; 0x7d
  4009e8:	f200 8092 	bhi.w	400b10 <ParseMbusPkt+0x420>
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
  4009ec:	68bb      	ldr	r3, [r7, #8]
  4009ee:	3302      	adds	r3, #2
  4009f0:	781b      	ldrb	r3, [r3, #0]
  4009f2:	021b      	lsls	r3, r3, #8
  4009f4:	b21a      	sxth	r2, r3
  4009f6:	68bb      	ldr	r3, [r7, #8]
  4009f8:	3303      	adds	r3, #3
  4009fa:	781b      	ldrb	r3, [r3, #0]
  4009fc:	b21b      	sxth	r3, r3
  4009fe:	4313      	orrs	r3, r2
  400a00:	b21b      	sxth	r3, r3
  400a02:	837b      	strh	r3, [r7, #26]
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  400a04:	8b7a      	ldrh	r2, [r7, #26]
  400a06:	8b3b      	ldrh	r3, [r7, #24]
  400a08:	4413      	add	r3, r2
  400a0a:	2b26      	cmp	r3, #38	; 0x26
  400a0c:	dc76      	bgt.n	400afc <ParseMbusPkt+0x40c>
					 {
						 /* Gen Valid Resp */
						 respBuff[0] = slaveAddr;
  400a0e:	687b      	ldr	r3, [r7, #4]
  400a10:	7bfa      	ldrb	r2, [r7, #15]
  400a12:	701a      	strb	r2, [r3, #0]
						 respBuff[1] = 0x10;
  400a14:	687b      	ldr	r3, [r7, #4]
  400a16:	3301      	adds	r3, #1
  400a18:	2210      	movs	r2, #16
  400a1a:	701a      	strb	r2, [r3, #0]
						 respBuff[2] = buff[2];
  400a1c:	687b      	ldr	r3, [r7, #4]
  400a1e:	3302      	adds	r3, #2
  400a20:	68ba      	ldr	r2, [r7, #8]
  400a22:	7892      	ldrb	r2, [r2, #2]
  400a24:	701a      	strb	r2, [r3, #0]
						 respBuff[3] = buff[3];
  400a26:	687b      	ldr	r3, [r7, #4]
  400a28:	3303      	adds	r3, #3
  400a2a:	68ba      	ldr	r2, [r7, #8]
  400a2c:	78d2      	ldrb	r2, [r2, #3]
  400a2e:	701a      	strb	r2, [r3, #0]
						 respBuff[4] = buff[4];
  400a30:	687b      	ldr	r3, [r7, #4]
  400a32:	3304      	adds	r3, #4
  400a34:	68ba      	ldr	r2, [r7, #8]
  400a36:	7912      	ldrb	r2, [r2, #4]
  400a38:	701a      	strb	r2, [r3, #0]
						 respBuff[5] = buff[5];
  400a3a:	687b      	ldr	r3, [r7, #4]
  400a3c:	3305      	adds	r3, #5
  400a3e:	68ba      	ldr	r2, [r7, #8]
  400a40:	7952      	ldrb	r2, [r2, #5]
  400a42:	701a      	strb	r2, [r3, #0]
						 crc = calcCRC(respBuff, 6);
  400a44:	2106      	movs	r1, #6
  400a46:	6878      	ldr	r0, [r7, #4]
  400a48:	4b54      	ldr	r3, [pc, #336]	; (400b9c <ParseMbusPkt+0x4ac>)
  400a4a:	4798      	blx	r3
  400a4c:	4603      	mov	r3, r0
  400a4e:	83fb      	strh	r3, [r7, #30]
						 respBuff[6] = (crc&0x00FF);
  400a50:	687b      	ldr	r3, [r7, #4]
  400a52:	3306      	adds	r3, #6
  400a54:	8bfa      	ldrh	r2, [r7, #30]
  400a56:	b2d2      	uxtb	r2, r2
  400a58:	701a      	strb	r2, [r3, #0]
						 respBuff[7] = (crc>>8);
  400a5a:	687b      	ldr	r3, [r7, #4]
  400a5c:	3307      	adds	r3, #7
  400a5e:	8bfa      	ldrh	r2, [r7, #30]
  400a60:	0a12      	lsrs	r2, r2, #8
  400a62:	b292      	uxth	r2, r2
  400a64:	b2d2      	uxtb	r2, r2
  400a66:	701a      	strb	r2, [r3, #0]
						 *respLen = 8;
  400a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400a6a:	2208      	movs	r2, #8
  400a6c:	701a      	strb	r2, [r3, #0]
						 
						 /* Byte count */
						 numReg = 7 + buff[6];
  400a6e:	68bb      	ldr	r3, [r7, #8]
  400a70:	3306      	adds	r3, #6
  400a72:	781b      	ldrb	r3, [r3, #0]
  400a74:	b29b      	uxth	r3, r3
  400a76:	3307      	adds	r3, #7
  400a78:	833b      	strh	r3, [r7, #24]
						 ind = 0;
  400a7a:	2300      	movs	r3, #0
  400a7c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
						 for(i = 7; i < numReg; i++)
  400a80:	2307      	movs	r3, #7
  400a82:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  400a86:	e02a      	b.n	400ade <ParseMbusPkt+0x3ee>
						 {
							 if(i%2==1)
  400a88:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400a8c:	f003 0301 	and.w	r3, r3, #1
  400a90:	b2db      	uxtb	r3, r3
  400a92:	2b00      	cmp	r3, #0
  400a94:	d008      	beq.n	400aa8 <ParseMbusPkt+0x3b8>
							 {
								 regVal = ((uint16_t)buff[i])<<8;
  400a96:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400a9a:	68ba      	ldr	r2, [r7, #8]
  400a9c:	4413      	add	r3, r2
  400a9e:	781b      	ldrb	r3, [r3, #0]
  400aa0:	b29b      	uxth	r3, r3
  400aa2:	021b      	lsls	r3, r3, #8
  400aa4:	84fb      	strh	r3, [r7, #38]	; 0x26
  400aa6:	e015      	b.n	400ad4 <ParseMbusPkt+0x3e4>
							 }
							 else
							 {
								 regVal |= buff[i];
  400aa8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400aac:	68ba      	ldr	r2, [r7, #8]
  400aae:	4413      	add	r3, r2
  400ab0:	781b      	ldrb	r3, [r3, #0]
  400ab2:	b29a      	uxth	r2, r3
  400ab4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  400ab6:	4313      	orrs	r3, r2
  400ab8:	84fb      	strh	r3, [r7, #38]	; 0x26
								 mBusRegs[regAddr+ind] = regVal;
  400aba:	8b7a      	ldrh	r2, [r7, #26]
  400abc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  400ac0:	4413      	add	r3, r2
  400ac2:	4937      	ldr	r1, [pc, #220]	; (400ba0 <ParseMbusPkt+0x4b0>)
  400ac4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  400ac6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								 ind ++;
  400aca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  400ace:	3301      	adds	r3, #1
  400ad0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
						 *respLen = 8;
						 
						 /* Byte count */
						 numReg = 7 + buff[6];
						 ind = 0;
						 for(i = 7; i < numReg; i++)
  400ad4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400ad8:	3301      	adds	r3, #1
  400ada:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  400ade:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  400ae2:	b29b      	uxth	r3, r3
  400ae4:	8b3a      	ldrh	r2, [r7, #24]
  400ae6:	429a      	cmp	r2, r3
  400ae8:	d8ce      	bhi.n	400a88 <ParseMbusPkt+0x398>
								 mBusRegs[regAddr+ind] = regVal;
								 ind ++;
							 }
						 }
						 /* Process Write Reg Req */
						 writeFunc(mBusRegs,regAddr,ind);
  400aea:	4b2e      	ldr	r3, [pc, #184]	; (400ba4 <ParseMbusPkt+0x4b4>)
  400aec:	681b      	ldr	r3, [r3, #0]
  400aee:	8b7a      	ldrh	r2, [r7, #26]
  400af0:	b2d1      	uxtb	r1, r2
  400af2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
  400af6:	482a      	ldr	r0, [pc, #168]	; (400ba0 <ParseMbusPkt+0x4b0>)
  400af8:	4798      	blx	r3
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  400afa:	e013      	b.n	400b24 <ParseMbusPkt+0x434>
						 writeFunc(mBusRegs,regAddr,ind);
					 }
					 else
					 {
						 /* Error code = 0x02 */
						 genErrRsp = 1;
  400afc:	2301      	movs	r3, #1
  400afe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						 expFuncCode = 0x90;
  400b02:	2390      	movs	r3, #144	; 0x90
  400b04:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						 expCode = 0x02;
  400b08:	2302      	movs	r3, #2
  400b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 /* 0x0001<= If Qty of Regs <= 0x007D */
				 if(numReg>=0x0001&&numReg<=0x007D)
				 {
					 regAddr = (((uint16_t)buff[2])<<8)|(buff[3]);
					 /* Starting Addr == OK && Starting Addr + Qty of Regs == OK */
					 if((regAddr+numReg) <= MBUS_MAX_REGS)
  400b0e:	e009      	b.n	400b24 <ParseMbusPkt+0x434>
					 }
				 }
				 else
				 {
					 /* Error Code 0x03 */
					 genErrRsp = 1;
  400b10:	2301      	movs	r3, #1
  400b12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					 expFuncCode = 0x90;
  400b16:	2390      	movs	r3, #144	; 0x90
  400b18:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					 expCode = 0x03;
  400b1c:	2303      	movs	r3, #3
  400b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 }
				 break;
  400b22:	e00d      	b.n	400b40 <ParseMbusPkt+0x450>
  400b24:	e00c      	b.n	400b40 <ParseMbusPkt+0x450>
				 default:
				 /* Illegal Function Code Error */
				 /* Set MSB of recvd Function code */
				 /* Error Code 0x01 */
				 expFuncCode = fCode|(1<<7);
  400b26:	7dfb      	ldrb	r3, [r7, #23]
  400b28:	f063 037f 	orn	r3, r3, #127	; 0x7f
  400b2c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				 expCode = 0x01;
  400b30:	2301      	movs	r3, #1
  400b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				 genErrRsp = 1;
  400b36:	2301      	movs	r3, #1
  400b38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				 break;
  400b3c:	e000      	b.n	400b40 <ParseMbusPkt+0x450>
					 /* Illegal Data Value Error */
					 genErrRsp = 1;
					 expFuncCode = 0x86;
					 expCode = 0x03;
				 }
				 break;
  400b3e:	bf00      	nop
	 {
		 /* Calc CRC */
		 recvCrc = (((uint16_t)buff[len-1])<<8)|buff[len-2];
		 crc = calcCRC(buff,len-2);
		 /* If CRC Matched */
		 if(crc==recvCrc)
  400b40:	e002      	b.n	400b48 <ParseMbusPkt+0x458>
			 }
		 }
	 }
	 else
	 {
		 *respLen = 0;
  400b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400b44:	2200      	movs	r2, #0
  400b46:	701a      	strb	r2, [r3, #0]
	 }
	 
	 if(genErrRsp)
  400b48:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
  400b4c:	2b00      	cmp	r3, #0
  400b4e:	d021      	beq.n	400b94 <ParseMbusPkt+0x4a4>
	 {
		 respBuff[0] = slaveAddr;
  400b50:	687b      	ldr	r3, [r7, #4]
  400b52:	7bfa      	ldrb	r2, [r7, #15]
  400b54:	701a      	strb	r2, [r3, #0]
		 respBuff[1] = expFuncCode;
  400b56:	687b      	ldr	r3, [r7, #4]
  400b58:	3301      	adds	r3, #1
  400b5a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
  400b5e:	701a      	strb	r2, [r3, #0]
		 respBuff[2] = expCode;
  400b60:	687b      	ldr	r3, [r7, #4]
  400b62:	3302      	adds	r3, #2
  400b64:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
  400b68:	701a      	strb	r2, [r3, #0]
		 crc = calcCRC(respBuff, 3);
  400b6a:	2103      	movs	r1, #3
  400b6c:	6878      	ldr	r0, [r7, #4]
  400b6e:	4b0b      	ldr	r3, [pc, #44]	; (400b9c <ParseMbusPkt+0x4ac>)
  400b70:	4798      	blx	r3
  400b72:	4603      	mov	r3, r0
  400b74:	83fb      	strh	r3, [r7, #30]
		 respBuff[3] = (crc&0x00FF);
  400b76:	687b      	ldr	r3, [r7, #4]
  400b78:	3303      	adds	r3, #3
  400b7a:	8bfa      	ldrh	r2, [r7, #30]
  400b7c:	b2d2      	uxtb	r2, r2
  400b7e:	701a      	strb	r2, [r3, #0]
		 respBuff[4] = (crc>>8);
  400b80:	687b      	ldr	r3, [r7, #4]
  400b82:	3304      	adds	r3, #4
  400b84:	8bfa      	ldrh	r2, [r7, #30]
  400b86:	0a12      	lsrs	r2, r2, #8
  400b88:	b292      	uxth	r2, r2
  400b8a:	b2d2      	uxtb	r2, r2
  400b8c:	701a      	strb	r2, [r3, #0]
		 *respLen = 5;
  400b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  400b90:	2205      	movs	r2, #5
  400b92:	701a      	strb	r2, [r3, #0]
	 }
 }
  400b94:	bf00      	nop
  400b96:	3728      	adds	r7, #40	; 0x28
  400b98:	46bd      	mov	sp, r7
  400b9a:	bd80      	pop	{r7, pc}
  400b9c:	00400ba9 	.word	0x00400ba9
  400ba0:	20000484 	.word	0x20000484
  400ba4:	2000270c 	.word	0x2000270c

00400ba8 <calcCRC>:

 uint16_t calcCRC(uint8_t *buff, uint8_t len)
 {
  400ba8:	b480      	push	{r7}
  400baa:	b085      	sub	sp, #20
  400bac:	af00      	add	r7, sp, #0
  400bae:	6078      	str	r0, [r7, #4]
  400bb0:	460b      	mov	r3, r1
  400bb2:	70fb      	strb	r3, [r7, #3]
	 uint16_t crcReg = 0xFFFF;
  400bb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400bb8:	81fb      	strh	r3, [r7, #14]
	 uint8_t i = 0, j=0;
  400bba:	2300      	movs	r3, #0
  400bbc:	737b      	strb	r3, [r7, #13]
  400bbe:	2300      	movs	r3, #0
  400bc0:	733b      	strb	r3, [r7, #12]

	 for(i=0;i<len;i++)
  400bc2:	2300      	movs	r3, #0
  400bc4:	737b      	strb	r3, [r7, #13]
  400bc6:	e026      	b.n	400c16 <calcCRC+0x6e>
	 {
		 crcReg = crcReg ^ buff[i];
  400bc8:	7b7b      	ldrb	r3, [r7, #13]
  400bca:	687a      	ldr	r2, [r7, #4]
  400bcc:	4413      	add	r3, r2
  400bce:	781b      	ldrb	r3, [r3, #0]
  400bd0:	b29a      	uxth	r2, r3
  400bd2:	89fb      	ldrh	r3, [r7, #14]
  400bd4:	4053      	eors	r3, r2
  400bd6:	81fb      	strh	r3, [r7, #14]
		 for(j=0;j<8;j++)
  400bd8:	2300      	movs	r3, #0
  400bda:	733b      	strb	r3, [r7, #12]
  400bdc:	e015      	b.n	400c0a <calcCRC+0x62>
		 {

			 if(bitIsSet(crcReg,0))
  400bde:	89fb      	ldrh	r3, [r7, #14]
  400be0:	f003 0301 	and.w	r3, r3, #1
  400be4:	2b00      	cmp	r3, #0
  400be6:	d00a      	beq.n	400bfe <calcCRC+0x56>
			 {
				 crcReg = crcReg >> 1;
  400be8:	89fb      	ldrh	r3, [r7, #14]
  400bea:	085b      	lsrs	r3, r3, #1
  400bec:	81fb      	strh	r3, [r7, #14]
				 crcReg = crcReg ^ MBUS_CRC_POLY;
  400bee:	89fb      	ldrh	r3, [r7, #14]
  400bf0:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
  400bf4:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
  400bf8:	43db      	mvns	r3, r3
  400bfa:	81fb      	strh	r3, [r7, #14]
  400bfc:	e002      	b.n	400c04 <calcCRC+0x5c>
			 }
			 else
			 {
				 crcReg = crcReg >> 1;
  400bfe:	89fb      	ldrh	r3, [r7, #14]
  400c00:	085b      	lsrs	r3, r3, #1
  400c02:	81fb      	strh	r3, [r7, #14]
	 uint8_t i = 0, j=0;

	 for(i=0;i<len;i++)
	 {
		 crcReg = crcReg ^ buff[i];
		 for(j=0;j<8;j++)
  400c04:	7b3b      	ldrb	r3, [r7, #12]
  400c06:	3301      	adds	r3, #1
  400c08:	733b      	strb	r3, [r7, #12]
  400c0a:	7b3b      	ldrb	r3, [r7, #12]
  400c0c:	2b07      	cmp	r3, #7
  400c0e:	d9e6      	bls.n	400bde <calcCRC+0x36>
 uint16_t calcCRC(uint8_t *buff, uint8_t len)
 {
	 uint16_t crcReg = 0xFFFF;
	 uint8_t i = 0, j=0;

	 for(i=0;i<len;i++)
  400c10:	7b7b      	ldrb	r3, [r7, #13]
  400c12:	3301      	adds	r3, #1
  400c14:	737b      	strb	r3, [r7, #13]
  400c16:	7b7a      	ldrb	r2, [r7, #13]
  400c18:	78fb      	ldrb	r3, [r7, #3]
  400c1a:	429a      	cmp	r2, r3
  400c1c:	d3d4      	bcc.n	400bc8 <calcCRC+0x20>
			 {
				 crcReg = crcReg >> 1;
			 }
		 }
	 }
	 return crcReg;
  400c1e:	89fb      	ldrh	r3, [r7, #14]
 }
  400c20:	4618      	mov	r0, r3
  400c22:	3714      	adds	r7, #20
  400c24:	46bd      	mov	sp, r7
  400c26:	bc80      	pop	{r7}
  400c28:	4770      	bx	lr
  400c2a:	bf00      	nop

00400c2c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400c2c:	b480      	push	{r7}
  400c2e:	b083      	sub	sp, #12
  400c30:	af00      	add	r7, sp, #0
  400c32:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400c34:	687b      	ldr	r3, [r7, #4]
  400c36:	2b07      	cmp	r3, #7
  400c38:	d825      	bhi.n	400c86 <osc_get_rate+0x5a>
  400c3a:	a201      	add	r2, pc, #4	; (adr r2, 400c40 <osc_get_rate+0x14>)
  400c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400c40:	00400c61 	.word	0x00400c61
  400c44:	00400c67 	.word	0x00400c67
  400c48:	00400c6d 	.word	0x00400c6d
  400c4c:	00400c73 	.word	0x00400c73
  400c50:	00400c77 	.word	0x00400c77
  400c54:	00400c7b 	.word	0x00400c7b
  400c58:	00400c7f 	.word	0x00400c7f
  400c5c:	00400c83 	.word	0x00400c83
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400c60:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400c64:	e010      	b.n	400c88 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400c6a:	e00d      	b.n	400c88 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400c6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400c70:	e00a      	b.n	400c88 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400c72:	4b08      	ldr	r3, [pc, #32]	; (400c94 <osc_get_rate+0x68>)
  400c74:	e008      	b.n	400c88 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400c76:	4b08      	ldr	r3, [pc, #32]	; (400c98 <osc_get_rate+0x6c>)
  400c78:	e006      	b.n	400c88 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400c7a:	4b08      	ldr	r3, [pc, #32]	; (400c9c <osc_get_rate+0x70>)
  400c7c:	e004      	b.n	400c88 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400c7e:	4b07      	ldr	r3, [pc, #28]	; (400c9c <osc_get_rate+0x70>)
  400c80:	e002      	b.n	400c88 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400c82:	4b06      	ldr	r3, [pc, #24]	; (400c9c <osc_get_rate+0x70>)
  400c84:	e000      	b.n	400c88 <osc_get_rate+0x5c>
	}

	return 0;
  400c86:	2300      	movs	r3, #0
}
  400c88:	4618      	mov	r0, r3
  400c8a:	370c      	adds	r7, #12
  400c8c:	46bd      	mov	sp, r7
  400c8e:	bc80      	pop	{r7}
  400c90:	4770      	bx	lr
  400c92:	bf00      	nop
  400c94:	003d0900 	.word	0x003d0900
  400c98:	007a1200 	.word	0x007a1200
  400c9c:	00b71b00 	.word	0x00b71b00

00400ca0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400ca0:	b580      	push	{r7, lr}
  400ca2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400ca4:	2006      	movs	r0, #6
  400ca6:	4b04      	ldr	r3, [pc, #16]	; (400cb8 <sysclk_get_main_hz+0x18>)
  400ca8:	4798      	blx	r3
  400caa:	4602      	mov	r2, r0
  400cac:	4613      	mov	r3, r2
  400cae:	009b      	lsls	r3, r3, #2
  400cb0:	4413      	add	r3, r2
  400cb2:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400cb4:	4618      	mov	r0, r3
  400cb6:	bd80      	pop	{r7, pc}
  400cb8:	00400c2d 	.word	0x00400c2d

00400cbc <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400cbc:	b580      	push	{r7, lr}
  400cbe:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400cc0:	4b02      	ldr	r3, [pc, #8]	; (400ccc <sysclk_get_cpu_hz+0x10>)
  400cc2:	4798      	blx	r3
  400cc4:	4603      	mov	r3, r0
  400cc6:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400cc8:	4618      	mov	r0, r3
  400cca:	bd80      	pop	{r7, pc}
  400ccc:	00400ca1 	.word	0x00400ca1

00400cd0 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  400cd0:	b580      	push	{r7, lr}
  400cd2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400cd4:	4b02      	ldr	r3, [pc, #8]	; (400ce0 <sysclk_get_peripheral_hz+0x10>)
  400cd6:	4798      	blx	r3
  400cd8:	4603      	mov	r3, r0
  400cda:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400cdc:	4618      	mov	r0, r3
  400cde:	bd80      	pop	{r7, pc}
  400ce0:	00400ca1 	.word	0x00400ca1

00400ce4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400ce4:	b580      	push	{r7, lr}
  400ce6:	b082      	sub	sp, #8
  400ce8:	af00      	add	r7, sp, #0
  400cea:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400cec:	6878      	ldr	r0, [r7, #4]
  400cee:	4b03      	ldr	r3, [pc, #12]	; (400cfc <sysclk_enable_peripheral_clock+0x18>)
  400cf0:	4798      	blx	r3
}
  400cf2:	bf00      	nop
  400cf4:	3708      	adds	r7, #8
  400cf6:	46bd      	mov	sp, r7
  400cf8:	bd80      	pop	{r7, pc}
  400cfa:	bf00      	nop
  400cfc:	004049b9 	.word	0x004049b9

00400d00 <RTCIntHandler>:

static void InitTWI(void);

/* RTC 1 Min ISR */
void RTCIntHandler(uint32_t ul_id, uint32_t ul_mask)
{
  400d00:	b480      	push	{r7}
  400d02:	b083      	sub	sp, #12
  400d04:	af00      	add	r7, sp, #0
  400d06:	6078      	str	r0, [r7, #4]
  400d08:	6039      	str	r1, [r7, #0]
    if (PIN_RTC_INT_PIO_ID != ul_id || PIN_RTC_INT_MASK != ul_mask)
  400d0a:	687b      	ldr	r3, [r7, #4]
  400d0c:	2b0b      	cmp	r3, #11
  400d0e:	d113      	bne.n	400d38 <RTCIntHandler+0x38>
  400d10:	683b      	ldr	r3, [r7, #0]
  400d12:	2b01      	cmp	r3, #1
  400d14:	d110      	bne.n	400d38 <RTCIntHandler+0x38>
		return;
	
    /* If Auto Mode */
    if(!mBusRegs[MBUS_REG_OPMODE])
  400d16:	4b0b      	ldr	r3, [pc, #44]	; (400d44 <RTCIntHandler+0x44>)
  400d18:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
  400d1a:	2b00      	cmp	r3, #0
  400d1c:	d10d      	bne.n	400d3a <RTCIntHandler+0x3a>
    {
        /* Increment Time Var */
        if(minCtr < TRACKING_INTERVAL)
  400d1e:	4b0a      	ldr	r3, [pc, #40]	; (400d48 <RTCIntHandler+0x48>)
  400d20:	781b      	ldrb	r3, [r3, #0]
  400d22:	b2db      	uxtb	r3, r3
  400d24:	2b02      	cmp	r3, #2
  400d26:	d808      	bhi.n	400d3a <RTCIntHandler+0x3a>
            minCtr++;
  400d28:	4b07      	ldr	r3, [pc, #28]	; (400d48 <RTCIntHandler+0x48>)
  400d2a:	781b      	ldrb	r3, [r3, #0]
  400d2c:	b2db      	uxtb	r3, r3
  400d2e:	3301      	adds	r3, #1
  400d30:	b2da      	uxtb	r2, r3
  400d32:	4b05      	ldr	r3, [pc, #20]	; (400d48 <RTCIntHandler+0x48>)
  400d34:	701a      	strb	r2, [r3, #0]
  400d36:	e000      	b.n	400d3a <RTCIntHandler+0x3a>

/* RTC 1 Min ISR */
void RTCIntHandler(uint32_t ul_id, uint32_t ul_mask)
{
    if (PIN_RTC_INT_PIO_ID != ul_id || PIN_RTC_INT_MASK != ul_mask)
		return;
  400d38:	bf00      	nop
    {
        /* Increment Time Var */
        if(minCtr < TRACKING_INTERVAL)
            minCtr++;
    }
}
  400d3a:	370c      	adds	r7, #12
  400d3c:	46bd      	mov	sp, r7
  400d3e:	bc80      	pop	{r7}
  400d40:	4770      	bx	lr
  400d42:	bf00      	nop
  400d44:	20000484 	.word	0x20000484
  400d48:	200004d1 	.word	0x200004d1

00400d4c <vPvTrackerTask>:

void vPvTrackerTask(void *pvParameters)
{
  400d4c:	b580      	push	{r7, lr}
  400d4e:	b084      	sub	sp, #16
  400d50:	af00      	add	r7, sp, #0
  400d52:	6078      	str	r0, [r7, #4]
    uint8_t status = 0;
  400d54:	2300      	movs	r3, #0
  400d56:	73fb      	strb	r3, [r7, #15]
    #endif
	
	/* These Init routines are shifted here because they should only be called after the scheduler has started */
	/* Init Accelerometer */
	#ifndef ICM20648_USE_RTOS_API
		ICMInitialize(BOARD_TWI, ICM_ADDR);
  400d58:	2169      	movs	r1, #105	; 0x69
  400d5a:	4816      	ldr	r0, [pc, #88]	; (400db4 <vPvTrackerTask+0x68>)
  400d5c:	4b16      	ldr	r3, [pc, #88]	; (400db8 <vPvTrackerTask+0x6c>)
  400d5e:	4798      	blx	r3
		ICMInitializeTo(twiPort, ICM_ADDR, 50);
	#endif

	/* Init RTC 1 min Alarm */
	#ifndef DS3231_USE_RTOS_API
		DSEnAL2(BOARD_TWI, 1);
  400d60:	2101      	movs	r1, #1
  400d62:	4814      	ldr	r0, [pc, #80]	; (400db4 <vPvTrackerTask+0x68>)
  400d64:	4b15      	ldr	r3, [pc, #84]	; (400dbc <vPvTrackerTask+0x70>)
  400d66:	4798      	blx	r3

	while(1)
    {
		/* Clear RTC interrupt flag */
		#ifndef DS3231_USE_RTOS_API
			DSReadByte(BOARD_TWI, DS_REG_STAT,&status);
  400d68:	f107 030f 	add.w	r3, r7, #15
  400d6c:	461a      	mov	r2, r3
  400d6e:	210f      	movs	r1, #15
  400d70:	4810      	ldr	r0, [pc, #64]	; (400db4 <vPvTrackerTask+0x68>)
  400d72:	4b13      	ldr	r3, [pc, #76]	; (400dc0 <vPvTrackerTask+0x74>)
  400d74:	4798      	blx	r3
		#else
			DSReadByteTo(twiPort, DS_REG_STAT,&status,50);
		#endif
        if(status&0x02)
  400d76:	7bfb      	ldrb	r3, [r7, #15]
  400d78:	f003 0302 	and.w	r3, r3, #2
  400d7c:	2b00      	cmp	r3, #0
  400d7e:	d004      	beq.n	400d8a <vPvTrackerTask+0x3e>
        {
            /* Clear Status Reg */
			#ifndef DS3231_USE_RTOS_API
				DSWriteByte(BOARD_TWI, DS_REG_STAT, 0x00);
  400d80:	2200      	movs	r2, #0
  400d82:	210f      	movs	r1, #15
  400d84:	480b      	ldr	r0, [pc, #44]	; (400db4 <vPvTrackerTask+0x68>)
  400d86:	4b0f      	ldr	r3, [pc, #60]	; (400dc4 <vPvTrackerTask+0x78>)
  400d88:	4798      	blx	r3
				DSWriteByteTo(twiPort, DS_REG_STAT, 0x00, 50);
			#endif
        }
        
        /* In Tracking / Auto Mode */
        if(!mBusRegs[MBUS_REG_OPMODE])
  400d8a:	4b0f      	ldr	r3, [pc, #60]	; (400dc8 <vPvTrackerTask+0x7c>)
  400d8c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
  400d8e:	2b00      	cmp	r3, #0
  400d90:	d10a      	bne.n	400da8 <vPvTrackerTask+0x5c>
        {
			/* If Tracking Time Expired */
            if(minCtr >= TRACKING_INTERVAL)
  400d92:	4b0e      	ldr	r3, [pc, #56]	; (400dcc <vPvTrackerTask+0x80>)
  400d94:	781b      	ldrb	r3, [r3, #0]
  400d96:	b2db      	uxtb	r3, r3
  400d98:	2b02      	cmp	r3, #2
  400d9a:	d907      	bls.n	400dac <vPvTrackerTask+0x60>
            {
                PVTrack();
  400d9c:	4b0c      	ldr	r3, [pc, #48]	; (400dd0 <vPvTrackerTask+0x84>)
  400d9e:	4798      	blx	r3
                minCtr = 0;
  400da0:	4b0a      	ldr	r3, [pc, #40]	; (400dcc <vPvTrackerTask+0x80>)
  400da2:	2200      	movs	r2, #0
  400da4:	701a      	strb	r2, [r3, #0]
  400da6:	e001      	b.n	400dac <vPvTrackerTask+0x60>
            /* LED1 Heart Beat Status (No Block) */
        }
        else
        {
            /* In Manual Mode */
            TestCode();
  400da8:	4b0a      	ldr	r3, [pc, #40]	; (400dd4 <vPvTrackerTask+0x88>)
  400daa:	4798      	blx	r3
        }
		vTaskDelay(200 / portTICK_RATE_MS);
  400dac:	2028      	movs	r0, #40	; 0x28
  400dae:	4b0a      	ldr	r3, [pc, #40]	; (400dd8 <vPvTrackerTask+0x8c>)
  400db0:	4798      	blx	r3
    }
  400db2:	e7d9      	b.n	400d68 <vPvTrackerTask+0x1c>
  400db4:	40018000 	.word	0x40018000
  400db8:	0040058d 	.word	0x0040058d
  400dbc:	004004a5 	.word	0x004004a5
  400dc0:	00400551 	.word	0x00400551
  400dc4:	00400515 	.word	0x00400515
  400dc8:	20000484 	.word	0x20000484
  400dcc:	200004d1 	.word	0x200004d1
  400dd0:	00401339 	.word	0x00401339
  400dd4:	00401711 	.word	0x00401711
  400dd8:	00405d65 	.word	0x00405d65

00400ddc <vPvTrackerInit>:
}

void vPvTrackerInit(void)
{
  400ddc:	b580      	push	{r7, lr}
  400dde:	af00      	add	r7, sp, #0
    /* Initialize all peripherals */
    /* Initialize TWI Port */
    //InitTwiRTOS();
	InitTWI();
  400de0:	4b04      	ldr	r3, [pc, #16]	; (400df4 <vPvTrackerInit+0x18>)
  400de2:	4798      	blx	r3
	/* Init TWI ADC */

	/* Initialize Variables from EEPROM */
    InitVars();
  400de4:	4b04      	ldr	r3, [pc, #16]	; (400df8 <vPvTrackerInit+0x1c>)
  400de6:	4798      	blx	r3
    
    /* Init Motor Controller */
	#ifndef MOTOR_CTRL_A4955
	#else
		/* Put driver in sleep mode */
		gpio_set_pin_low(PIN_MOTOR_SLP_IDX);
  400de8:	2022      	movs	r0, #34	; 0x22
  400dea:	4b04      	ldr	r3, [pc, #16]	; (400dfc <vPvTrackerInit+0x20>)
  400dec:	4798      	blx	r3
	#endif
}
  400dee:	bf00      	nop
  400df0:	bd80      	pop	{r7, pc}
  400df2:	bf00      	nop
  400df4:	004012e9 	.word	0x004012e9
  400df8:	00400e01 	.word	0x00400e01
  400dfc:	00404129 	.word	0x00404129

00400e00 <InitVars>:

/* Initializes RAM variables from Ext. EERPOM */
void InitVars(void)
{
  400e00:	b590      	push	{r4, r7, lr}
  400e02:	b08f      	sub	sp, #60	; 0x3c
  400e04:	af02      	add	r7, sp, #8
    uint16_t *ptr;
	uint8_t *ptr8;

	uint8_t memBuff[(EE_REG_DEFCONFIG - EE_REG_BASE) + 1];
    /* Read vars from Memory */
	ReadEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_BASE, memBuff, (EE_REG_DEFCONFIG - EE_REG_BASE) + 1);
  400e06:	1d3a      	adds	r2, r7, #4
  400e08:	2321      	movs	r3, #33	; 0x21
  400e0a:	9300      	str	r3, [sp, #0]
  400e0c:	4613      	mov	r3, r2
  400e0e:	2200      	movs	r2, #0
  400e10:	2150      	movs	r1, #80	; 0x50
  400e12:	4894      	ldr	r0, [pc, #592]	; (401064 <InitVars+0x264>)
  400e14:	4c94      	ldr	r4, [pc, #592]	; (401068 <InitVars+0x268>)
  400e16:	47a0      	blx	r4
	
	#ifndef FORCE_WRITE_DEF_VALS
		/* Check for known value in default config register */
		if(memBuff[(EE_REG_DEFCONFIG - EE_REG_BASE)] == 0xAB)
  400e18:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
  400e1c:	2bab      	cmp	r3, #171	; 0xab
  400e1e:	f040 8172 	bne.w	401106 <InitVars+0x306>
		{
			/* Configuration already exists, load values from EEPROM */
		
			/* Update LATL and LATH Regs */
			mBusRegs[MBUS_REG_LATL] = memBuff[EE_REG_LAT1 - EE_REG_BASE];
  400e22:	797b      	ldrb	r3, [r7, #5]
  400e24:	b29a      	uxth	r2, r3
  400e26:	4b91      	ldr	r3, [pc, #580]	; (40106c <InitVars+0x26c>)
  400e28:	821a      	strh	r2, [r3, #16]
			mBusRegs[MBUS_REG_LATL] = (mBusRegs[MBUS_REG_LATL]<<8) | memBuff[EE_REG_LAT0 - EE_REG_BASE];
  400e2a:	4b90      	ldr	r3, [pc, #576]	; (40106c <InitVars+0x26c>)
  400e2c:	8a1b      	ldrh	r3, [r3, #16]
  400e2e:	021b      	lsls	r3, r3, #8
  400e30:	b21a      	sxth	r2, r3
  400e32:	793b      	ldrb	r3, [r7, #4]
  400e34:	b21b      	sxth	r3, r3
  400e36:	4313      	orrs	r3, r2
  400e38:	b21b      	sxth	r3, r3
  400e3a:	b29a      	uxth	r2, r3
  400e3c:	4b8b      	ldr	r3, [pc, #556]	; (40106c <InitVars+0x26c>)
  400e3e:	821a      	strh	r2, [r3, #16]
			mBusRegs[MBUS_REG_LATH] = memBuff[EE_REG_LAT3 - EE_REG_BASE];
  400e40:	79fb      	ldrb	r3, [r7, #7]
  400e42:	b29a      	uxth	r2, r3
  400e44:	4b89      	ldr	r3, [pc, #548]	; (40106c <InitVars+0x26c>)
  400e46:	825a      	strh	r2, [r3, #18]
			mBusRegs[MBUS_REG_LATH] = (mBusRegs[MBUS_REG_LATH]<<8) | memBuff[EE_REG_LAT2 - EE_REG_BASE];
  400e48:	4b88      	ldr	r3, [pc, #544]	; (40106c <InitVars+0x26c>)
  400e4a:	8a5b      	ldrh	r3, [r3, #18]
  400e4c:	021b      	lsls	r3, r3, #8
  400e4e:	b21a      	sxth	r2, r3
  400e50:	79bb      	ldrb	r3, [r7, #6]
  400e52:	b21b      	sxth	r3, r3
  400e54:	4313      	orrs	r3, r2
  400e56:	b21b      	sxth	r3, r3
  400e58:	b29a      	uxth	r2, r3
  400e5a:	4b84      	ldr	r3, [pc, #528]	; (40106c <InitVars+0x26c>)
  400e5c:	825a      	strh	r2, [r3, #18]
		
			/* Update LONL and LONH Regs */
			mBusRegs[MBUS_REG_LONL] = memBuff[EE_REG_LON1 - EE_REG_BASE];
  400e5e:	7a7b      	ldrb	r3, [r7, #9]
  400e60:	b29a      	uxth	r2, r3
  400e62:	4b82      	ldr	r3, [pc, #520]	; (40106c <InitVars+0x26c>)
  400e64:	829a      	strh	r2, [r3, #20]
			mBusRegs[MBUS_REG_LONL] = (mBusRegs[MBUS_REG_LONL]<<8) | memBuff[EE_REG_LON0 - EE_REG_BASE];
  400e66:	4b81      	ldr	r3, [pc, #516]	; (40106c <InitVars+0x26c>)
  400e68:	8a9b      	ldrh	r3, [r3, #20]
  400e6a:	021b      	lsls	r3, r3, #8
  400e6c:	b21a      	sxth	r2, r3
  400e6e:	7a3b      	ldrb	r3, [r7, #8]
  400e70:	b21b      	sxth	r3, r3
  400e72:	4313      	orrs	r3, r2
  400e74:	b21b      	sxth	r3, r3
  400e76:	b29a      	uxth	r2, r3
  400e78:	4b7c      	ldr	r3, [pc, #496]	; (40106c <InitVars+0x26c>)
  400e7a:	829a      	strh	r2, [r3, #20]
			mBusRegs[MBUS_REG_LONH] = memBuff[EE_REG_LON3 - EE_REG_BASE];
  400e7c:	7afb      	ldrb	r3, [r7, #11]
  400e7e:	b29a      	uxth	r2, r3
  400e80:	4b7a      	ldr	r3, [pc, #488]	; (40106c <InitVars+0x26c>)
  400e82:	82da      	strh	r2, [r3, #22]
			mBusRegs[MBUS_REG_LONH] = (mBusRegs[MBUS_REG_LONH]<<8) | memBuff[EE_REG_LON2 - EE_REG_BASE];
  400e84:	4b79      	ldr	r3, [pc, #484]	; (40106c <InitVars+0x26c>)
  400e86:	8adb      	ldrh	r3, [r3, #22]
  400e88:	021b      	lsls	r3, r3, #8
  400e8a:	b21a      	sxth	r2, r3
  400e8c:	7abb      	ldrb	r3, [r7, #10]
  400e8e:	b21b      	sxth	r3, r3
  400e90:	4313      	orrs	r3, r2
  400e92:	b21b      	sxth	r3, r3
  400e94:	b29a      	uxth	r2, r3
  400e96:	4b75      	ldr	r3, [pc, #468]	; (40106c <InitVars+0x26c>)
  400e98:	82da      	strh	r2, [r3, #22]
		
			/* Update TZL and TZH Regs */
			mBusRegs[MBUS_REG_TZL] = memBuff[EE_REG_TZ1 - EE_REG_BASE];
  400e9a:	7b7b      	ldrb	r3, [r7, #13]
  400e9c:	b29a      	uxth	r2, r3
  400e9e:	4b73      	ldr	r3, [pc, #460]	; (40106c <InitVars+0x26c>)
  400ea0:	831a      	strh	r2, [r3, #24]
			mBusRegs[MBUS_REG_TZL] = (mBusRegs[MBUS_REG_TZL]<<8) | memBuff[EE_REG_TZ0 - EE_REG_BASE];
  400ea2:	4b72      	ldr	r3, [pc, #456]	; (40106c <InitVars+0x26c>)
  400ea4:	8b1b      	ldrh	r3, [r3, #24]
  400ea6:	021b      	lsls	r3, r3, #8
  400ea8:	b21a      	sxth	r2, r3
  400eaa:	7b3b      	ldrb	r3, [r7, #12]
  400eac:	b21b      	sxth	r3, r3
  400eae:	4313      	orrs	r3, r2
  400eb0:	b21b      	sxth	r3, r3
  400eb2:	b29a      	uxth	r2, r3
  400eb4:	4b6d      	ldr	r3, [pc, #436]	; (40106c <InitVars+0x26c>)
  400eb6:	831a      	strh	r2, [r3, #24]
			mBusRegs[MBUS_REG_TZH] = memBuff[EE_REG_TZ3 - EE_REG_BASE];
  400eb8:	7bfb      	ldrb	r3, [r7, #15]
  400eba:	b29a      	uxth	r2, r3
  400ebc:	4b6b      	ldr	r3, [pc, #428]	; (40106c <InitVars+0x26c>)
  400ebe:	835a      	strh	r2, [r3, #26]
			mBusRegs[MBUS_REG_TZH] = (mBusRegs[MBUS_REG_TZH]<<8) | memBuff[EE_REG_TZ2 - EE_REG_BASE];
  400ec0:	4b6a      	ldr	r3, [pc, #424]	; (40106c <InitVars+0x26c>)
  400ec2:	8b5b      	ldrh	r3, [r3, #26]
  400ec4:	021b      	lsls	r3, r3, #8
  400ec6:	b21a      	sxth	r2, r3
  400ec8:	7bbb      	ldrb	r3, [r7, #14]
  400eca:	b21b      	sxth	r3, r3
  400ecc:	4313      	orrs	r3, r2
  400ece:	b21b      	sxth	r3, r3
  400ed0:	b29a      	uxth	r2, r3
  400ed2:	4b66      	ldr	r3, [pc, #408]	; (40106c <InitVars+0x26c>)
  400ed4:	835a      	strh	r2, [r3, #26]
		
			/* Update DISTL and DISTH Regs */
			mBusRegs[MBUS_REG_DISTL] = memBuff[EE_REG_DIST1 - EE_REG_BASE];
  400ed6:	7c7b      	ldrb	r3, [r7, #17]
  400ed8:	b29a      	uxth	r2, r3
  400eda:	4b64      	ldr	r3, [pc, #400]	; (40106c <InitVars+0x26c>)
  400edc:	879a      	strh	r2, [r3, #60]	; 0x3c
			mBusRegs[MBUS_REG_DISTL] = (mBusRegs[MBUS_REG_DISTL]<<8) | memBuff[EE_REG_DIST0 - EE_REG_BASE];
  400ede:	4b63      	ldr	r3, [pc, #396]	; (40106c <InitVars+0x26c>)
  400ee0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
  400ee2:	021b      	lsls	r3, r3, #8
  400ee4:	b21a      	sxth	r2, r3
  400ee6:	7c3b      	ldrb	r3, [r7, #16]
  400ee8:	b21b      	sxth	r3, r3
  400eea:	4313      	orrs	r3, r2
  400eec:	b21b      	sxth	r3, r3
  400eee:	b29a      	uxth	r2, r3
  400ef0:	4b5e      	ldr	r3, [pc, #376]	; (40106c <InitVars+0x26c>)
  400ef2:	879a      	strh	r2, [r3, #60]	; 0x3c
			mBusRegs[MBUS_REG_DISTH] = memBuff[EE_REG_DIST3 - EE_REG_BASE];
  400ef4:	7cfb      	ldrb	r3, [r7, #19]
  400ef6:	b29a      	uxth	r2, r3
  400ef8:	4b5c      	ldr	r3, [pc, #368]	; (40106c <InitVars+0x26c>)
  400efa:	87da      	strh	r2, [r3, #62]	; 0x3e
			mBusRegs[MBUS_REG_DISTH] = (mBusRegs[MBUS_REG_DISTH]<<8) | memBuff[EE_REG_DIST2 - EE_REG_BASE];
  400efc:	4b5b      	ldr	r3, [pc, #364]	; (40106c <InitVars+0x26c>)
  400efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
  400f00:	021b      	lsls	r3, r3, #8
  400f02:	b21a      	sxth	r2, r3
  400f04:	7cbb      	ldrb	r3, [r7, #18]
  400f06:	b21b      	sxth	r3, r3
  400f08:	4313      	orrs	r3, r2
  400f0a:	b21b      	sxth	r3, r3
  400f0c:	b29a      	uxth	r2, r3
  400f0e:	4b57      	ldr	r3, [pc, #348]	; (40106c <InitVars+0x26c>)
  400f10:	87da      	strh	r2, [r3, #62]	; 0x3e

			/* Update WIDTHL and WIDTH Regs */
			mBusRegs[MBUS_REG_WIDTHL] = memBuff[EE_REG_WIDTH1 - EE_REG_BASE];
  400f12:	7d7b      	ldrb	r3, [r7, #21]
  400f14:	b29a      	uxth	r2, r3
  400f16:	4b55      	ldr	r3, [pc, #340]	; (40106c <InitVars+0x26c>)
  400f18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			mBusRegs[MBUS_REG_WIDTHL] = (mBusRegs[MBUS_REG_WIDTHL]<<8) | memBuff[EE_REG_WIDTH0 - EE_REG_BASE];
  400f1c:	4b53      	ldr	r3, [pc, #332]	; (40106c <InitVars+0x26c>)
  400f1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
  400f22:	021b      	lsls	r3, r3, #8
  400f24:	b21a      	sxth	r2, r3
  400f26:	7d3b      	ldrb	r3, [r7, #20]
  400f28:	b21b      	sxth	r3, r3
  400f2a:	4313      	orrs	r3, r2
  400f2c:	b21b      	sxth	r3, r3
  400f2e:	b29a      	uxth	r2, r3
  400f30:	4b4e      	ldr	r3, [pc, #312]	; (40106c <InitVars+0x26c>)
  400f32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			mBusRegs[MBUS_REG_WIDTHH] = memBuff[EE_REG_WIDTH3 - EE_REG_BASE];
  400f36:	7dfb      	ldrb	r3, [r7, #23]
  400f38:	b29a      	uxth	r2, r3
  400f3a:	4b4c      	ldr	r3, [pc, #304]	; (40106c <InitVars+0x26c>)
  400f3c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			mBusRegs[MBUS_REG_WIDTHH] = (mBusRegs[MBUS_REG_WIDTHH]<<8) | memBuff[EE_REG_WIDTH2 - EE_REG_BASE];
  400f40:	4b4a      	ldr	r3, [pc, #296]	; (40106c <InitVars+0x26c>)
  400f42:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
  400f46:	021b      	lsls	r3, r3, #8
  400f48:	b21a      	sxth	r2, r3
  400f4a:	7dbb      	ldrb	r3, [r7, #22]
  400f4c:	b21b      	sxth	r3, r3
  400f4e:	4313      	orrs	r3, r2
  400f50:	b21b      	sxth	r3, r3
  400f52:	b29a      	uxth	r2, r3
  400f54:	4b45      	ldr	r3, [pc, #276]	; (40106c <InitVars+0x26c>)
  400f56:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

			/* Update PNLRNGL and PNLRNGH Regs */
			mBusRegs[MBUS_REG_PNLRNGL] = memBuff[EE_REG_PNLRNG1 - EE_REG_BASE];
  400f5a:	7e7b      	ldrb	r3, [r7, #25]
  400f5c:	b29a      	uxth	r2, r3
  400f5e:	4b43      	ldr	r3, [pc, #268]	; (40106c <InitVars+0x26c>)
  400f60:	849a      	strh	r2, [r3, #36]	; 0x24
			mBusRegs[MBUS_REG_PNLRNGL] = (mBusRegs[MBUS_REG_PNLRNGL]<<8) | memBuff[EE_REG_PNLRNG0 - EE_REG_BASE];
  400f62:	4b42      	ldr	r3, [pc, #264]	; (40106c <InitVars+0x26c>)
  400f64:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  400f66:	021b      	lsls	r3, r3, #8
  400f68:	b21a      	sxth	r2, r3
  400f6a:	7e3b      	ldrb	r3, [r7, #24]
  400f6c:	b21b      	sxth	r3, r3
  400f6e:	4313      	orrs	r3, r2
  400f70:	b21b      	sxth	r3, r3
  400f72:	b29a      	uxth	r2, r3
  400f74:	4b3d      	ldr	r3, [pc, #244]	; (40106c <InitVars+0x26c>)
  400f76:	849a      	strh	r2, [r3, #36]	; 0x24
			mBusRegs[MBUS_REG_PNLRNGH] = memBuff[EE_REG_PNLRNG3 - EE_REG_BASE];
  400f78:	7efb      	ldrb	r3, [r7, #27]
  400f7a:	b29a      	uxth	r2, r3
  400f7c:	4b3b      	ldr	r3, [pc, #236]	; (40106c <InitVars+0x26c>)
  400f7e:	84da      	strh	r2, [r3, #38]	; 0x26
			mBusRegs[MBUS_REG_PNLRNGH] = (mBusRegs[MBUS_REG_PNLRNGH]<<8) | memBuff[EE_REG_PNLRNG2 - EE_REG_BASE];
  400f80:	4b3a      	ldr	r3, [pc, #232]	; (40106c <InitVars+0x26c>)
  400f82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
  400f84:	021b      	lsls	r3, r3, #8
  400f86:	b21a      	sxth	r2, r3
  400f88:	7ebb      	ldrb	r3, [r7, #26]
  400f8a:	b21b      	sxth	r3, r3
  400f8c:	4313      	orrs	r3, r2
  400f8e:	b21b      	sxth	r3, r3
  400f90:	b29a      	uxth	r2, r3
  400f92:	4b36      	ldr	r3, [pc, #216]	; (40106c <InitVars+0x26c>)
  400f94:	84da      	strh	r2, [r3, #38]	; 0x26

			/* Update BKPARAM1L and BKPARAM1H Regs */
			mBusRegs[MBUS_REG_BKPARAM1L] = memBuff[EE_REG_BKPARAM11 - EE_REG_BASE];
  400f96:	7f7b      	ldrb	r3, [r7, #29]
  400f98:	b29a      	uxth	r2, r3
  400f9a:	4b34      	ldr	r3, [pc, #208]	; (40106c <InitVars+0x26c>)
  400f9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			mBusRegs[MBUS_REG_BKPARAM1L] = (mBusRegs[MBUS_REG_BKPARAM1L]<<8) | memBuff[EE_REG_BKPARAM10 - EE_REG_BASE];
  400fa0:	4b32      	ldr	r3, [pc, #200]	; (40106c <InitVars+0x26c>)
  400fa2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
  400fa6:	021b      	lsls	r3, r3, #8
  400fa8:	b21a      	sxth	r2, r3
  400faa:	7f3b      	ldrb	r3, [r7, #28]
  400fac:	b21b      	sxth	r3, r3
  400fae:	4313      	orrs	r3, r2
  400fb0:	b21b      	sxth	r3, r3
  400fb2:	b29a      	uxth	r2, r3
  400fb4:	4b2d      	ldr	r3, [pc, #180]	; (40106c <InitVars+0x26c>)
  400fb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			mBusRegs[MBUS_REG_BKPARAM1H] = memBuff[EE_REG_BKPARAM13 - EE_REG_BASE];
  400fba:	7ffb      	ldrb	r3, [r7, #31]
  400fbc:	b29a      	uxth	r2, r3
  400fbe:	4b2b      	ldr	r3, [pc, #172]	; (40106c <InitVars+0x26c>)
  400fc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			mBusRegs[MBUS_REG_BKPARAM1H] = (mBusRegs[MBUS_REG_BKPARAM1H]<<8) | memBuff[EE_REG_BKPARAM12 - EE_REG_BASE];
  400fc4:	4b29      	ldr	r3, [pc, #164]	; (40106c <InitVars+0x26c>)
  400fc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
  400fca:	021b      	lsls	r3, r3, #8
  400fcc:	b21a      	sxth	r2, r3
  400fce:	7fbb      	ldrb	r3, [r7, #30]
  400fd0:	b21b      	sxth	r3, r3
  400fd2:	4313      	orrs	r3, r2
  400fd4:	b21b      	sxth	r3, r3
  400fd6:	b29a      	uxth	r2, r3
  400fd8:	4b24      	ldr	r3, [pc, #144]	; (40106c <InitVars+0x26c>)
  400fda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			/* Update BKPARAM2L and BKPARAM2H Regs */
			mBusRegs[MBUS_REG_BKPARAM2L] = memBuff[EE_REG_BKPARAM21 - EE_REG_BASE];
  400fde:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
  400fe2:	b29a      	uxth	r2, r3
  400fe4:	4b21      	ldr	r3, [pc, #132]	; (40106c <InitVars+0x26c>)
  400fe6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			mBusRegs[MBUS_REG_BKPARAM2L] = (mBusRegs[MBUS_REG_BKPARAM2L]<<8) | memBuff[EE_REG_BKPARAM20 - EE_REG_BASE];
  400fea:	4b20      	ldr	r3, [pc, #128]	; (40106c <InitVars+0x26c>)
  400fec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
  400ff0:	021b      	lsls	r3, r3, #8
  400ff2:	b21a      	sxth	r2, r3
  400ff4:	f897 3020 	ldrb.w	r3, [r7, #32]
  400ff8:	b21b      	sxth	r3, r3
  400ffa:	4313      	orrs	r3, r2
  400ffc:	b21b      	sxth	r3, r3
  400ffe:	b29a      	uxth	r2, r3
  401000:	4b1a      	ldr	r3, [pc, #104]	; (40106c <InitVars+0x26c>)
  401002:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			mBusRegs[MBUS_REG_BKPARAM2H] = memBuff[EE_REG_BKPARAM23 - EE_REG_BASE];
  401006:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40100a:	b29a      	uxth	r2, r3
  40100c:	4b17      	ldr	r3, [pc, #92]	; (40106c <InitVars+0x26c>)
  40100e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			mBusRegs[MBUS_REG_BKPARAM2H] = (mBusRegs[MBUS_REG_BKPARAM2H]<<8) | memBuff[EE_REG_BKPARAM22 - EE_REG_BASE];
  401012:	4b16      	ldr	r3, [pc, #88]	; (40106c <InitVars+0x26c>)
  401014:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
  401018:	021b      	lsls	r3, r3, #8
  40101a:	b21a      	sxth	r2, r3
  40101c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  401020:	b21b      	sxth	r3, r3
  401022:	4313      	orrs	r3, r2
  401024:	b21b      	sxth	r3, r3
  401026:	b29a      	uxth	r2, r3
  401028:	4b10      	ldr	r3, [pc, #64]	; (40106c <InitVars+0x26c>)
  40102a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			/* Init local vars */
			ptr = (uint16_t*)&lat;
  40102e:	4b10      	ldr	r3, [pc, #64]	; (401070 <InitVars+0x270>)
  401030:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_LATH];
  401032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401034:	3302      	adds	r3, #2
  401036:	4a0d      	ldr	r2, [pc, #52]	; (40106c <InitVars+0x26c>)
  401038:	8a52      	ldrh	r2, [r2, #18]
  40103a:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_LATL];
  40103c:	4b0b      	ldr	r3, [pc, #44]	; (40106c <InitVars+0x26c>)
  40103e:	8a1a      	ldrh	r2, [r3, #16]
  401040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401042:	801a      	strh	r2, [r3, #0]
			ptr = (uint16_t*)&lon;
  401044:	4b0b      	ldr	r3, [pc, #44]	; (401074 <InitVars+0x274>)
  401046:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_LONH];
  401048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40104a:	3302      	adds	r3, #2
  40104c:	4a07      	ldr	r2, [pc, #28]	; (40106c <InitVars+0x26c>)
  40104e:	8ad2      	ldrh	r2, [r2, #22]
  401050:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_LONL];
  401052:	4b06      	ldr	r3, [pc, #24]	; (40106c <InitVars+0x26c>)
  401054:	8a9a      	ldrh	r2, [r3, #20]
  401056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401058:	801a      	strh	r2, [r3, #0]
			ptr = (uint16_t*)&timeZone;
  40105a:	4b07      	ldr	r3, [pc, #28]	; (401078 <InitVars+0x278>)
  40105c:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_TZH];
  40105e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401060:	3302      	adds	r3, #2
  401062:	e00b      	b.n	40107c <InitVars+0x27c>
  401064:	40018000 	.word	0x40018000
  401068:	0040028d 	.word	0x0040028d
  40106c:	20000484 	.word	0x20000484
  401070:	2000000c 	.word	0x2000000c
  401074:	20000010 	.word	0x20000010
  401078:	20000014 	.word	0x20000014
  40107c:	4a8a      	ldr	r2, [pc, #552]	; (4012a8 <InitVars+0x4a8>)
  40107e:	8b52      	ldrh	r2, [r2, #26]
  401080:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_TZL];
  401082:	4b89      	ldr	r3, [pc, #548]	; (4012a8 <InitVars+0x4a8>)
  401084:	8b1a      	ldrh	r2, [r3, #24]
  401086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401088:	801a      	strh	r2, [r3, #0]
			ptr = (uint16_t*)&width;
  40108a:	4b88      	ldr	r3, [pc, #544]	; (4012ac <InitVars+0x4ac>)
  40108c:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_WIDTHH];
  40108e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401090:	3302      	adds	r3, #2
  401092:	4a85      	ldr	r2, [pc, #532]	; (4012a8 <InitVars+0x4a8>)
  401094:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
  401098:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_WIDTHL];
  40109a:	4b83      	ldr	r3, [pc, #524]	; (4012a8 <InitVars+0x4a8>)
  40109c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
  4010a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4010a2:	801a      	strh	r2, [r3, #0]
			ptr = (uint16_t*)&dist;
  4010a4:	4b82      	ldr	r3, [pc, #520]	; (4012b0 <InitVars+0x4b0>)
  4010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_DISTH];
  4010a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4010aa:	3302      	adds	r3, #2
  4010ac:	4a7e      	ldr	r2, [pc, #504]	; (4012a8 <InitVars+0x4a8>)
  4010ae:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
  4010b0:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_DISTL];
  4010b2:	4b7d      	ldr	r3, [pc, #500]	; (4012a8 <InitVars+0x4a8>)
  4010b4:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
  4010b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4010b8:	801a      	strh	r2, [r3, #0]
			ptr = (uint16_t*)&pvAngleRng;
  4010ba:	4b7e      	ldr	r3, [pc, #504]	; (4012b4 <InitVars+0x4b4>)
  4010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_PNLRNGH];
  4010be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4010c0:	3302      	adds	r3, #2
  4010c2:	4a79      	ldr	r2, [pc, #484]	; (4012a8 <InitVars+0x4a8>)
  4010c4:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
  4010c6:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_PNLRNGL];
  4010c8:	4b77      	ldr	r3, [pc, #476]	; (4012a8 <InitVars+0x4a8>)
  4010ca:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
  4010cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4010ce:	801a      	strh	r2, [r3, #0]
			ptr = (uint16_t*)&bkTrkParam1;
  4010d0:	4b79      	ldr	r3, [pc, #484]	; (4012b8 <InitVars+0x4b8>)
  4010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_BKPARAM1H];
  4010d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4010d6:	3302      	adds	r3, #2
  4010d8:	4a73      	ldr	r2, [pc, #460]	; (4012a8 <InitVars+0x4a8>)
  4010da:	f8b2 2046 	ldrh.w	r2, [r2, #70]	; 0x46
  4010de:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_BKPARAM1L];
  4010e0:	4b71      	ldr	r3, [pc, #452]	; (4012a8 <InitVars+0x4a8>)
  4010e2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
  4010e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4010e8:	801a      	strh	r2, [r3, #0]
			ptr = (uint16_t*)&bkTrkParam2;
  4010ea:	4b74      	ldr	r3, [pc, #464]	; (4012bc <InitVars+0x4bc>)
  4010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
			ptr[1] = mBusRegs[MBUS_REG_BKPARAM2H];
  4010ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4010f0:	3302      	adds	r3, #2
  4010f2:	4a6d      	ldr	r2, [pc, #436]	; (4012a8 <InitVars+0x4a8>)
  4010f4:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
  4010f8:	801a      	strh	r2, [r3, #0]
			ptr[0] = mBusRegs[MBUS_REG_BKPARAM2L];
  4010fa:	4b6b      	ldr	r3, [pc, #428]	; (4012a8 <InitVars+0x4a8>)
  4010fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
  401100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401102:	801a      	strh	r2, [r3, #0]
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_BKPARAM20, ptr8, 4);

			memBuff[0] = 0xAB;
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_DEFCONFIG, memBuff, 1);
		}
}
  401104:	e0cb      	b.n	40129e <InitVars+0x49e>
		}
		else
	#endif
		{
			/* First time programming, write default configuration to EEPROM */
			lat = 17.46608f; 
  401106:	4b6e      	ldr	r3, [pc, #440]	; (4012c0 <InitVars+0x4c0>)
  401108:	4a6e      	ldr	r2, [pc, #440]	; (4012c4 <InitVars+0x4c4>)
  40110a:	601a      	str	r2, [r3, #0]
			lon = 78.44009f;
  40110c:	4b6e      	ldr	r3, [pc, #440]	; (4012c8 <InitVars+0x4c8>)
  40110e:	4a6f      	ldr	r2, [pc, #444]	; (4012cc <InitVars+0x4cc>)
  401110:	601a      	str	r2, [r3, #0]
			timeZone = 5.5f;
  401112:	4b6f      	ldr	r3, [pc, #444]	; (4012d0 <InitVars+0x4d0>)
  401114:	4a6f      	ldr	r2, [pc, #444]	; (4012d4 <InitVars+0x4d4>)
  401116:	601a      	str	r2, [r3, #0]
			dist = 5.0f;
  401118:	4b65      	ldr	r3, [pc, #404]	; (4012b0 <InitVars+0x4b0>)
  40111a:	4a6f      	ldr	r2, [pc, #444]	; (4012d8 <InitVars+0x4d8>)
  40111c:	601a      	str	r2, [r3, #0]
			width = 2.0f;
  40111e:	4b63      	ldr	r3, [pc, #396]	; (4012ac <InitVars+0x4ac>)
  401120:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401124:	601a      	str	r2, [r3, #0]
			/* Panels will track +/-pvAngleRng degrees. */
			pvAngleRng = 43;
  401126:	4b63      	ldr	r3, [pc, #396]	; (4012b4 <InitVars+0x4b4>)
  401128:	4a6c      	ldr	r2, [pc, #432]	; (4012dc <InitVars+0x4dc>)
  40112a:	601a      	str	r2, [r3, #0]
			#warning "Backtracking Parameters uninitialized"
			/* Backtracking parameters */
			bkTrkParam1 = 0.0f;
  40112c:	4b62      	ldr	r3, [pc, #392]	; (4012b8 <InitVars+0x4b8>)
  40112e:	f04f 0200 	mov.w	r2, #0
  401132:	601a      	str	r2, [r3, #0]
			bkTrkParam1 = 0.0f;
  401134:	4b60      	ldr	r3, [pc, #384]	; (4012b8 <InitVars+0x4b8>)
  401136:	f04f 0200 	mov.w	r2, #0
  40113a:	601a      	str	r2, [r3, #0]
			/* Init MODBUS Regs */
			ptr = (uint16_t*)&lat;
  40113c:	4b60      	ldr	r3, [pc, #384]	; (4012c0 <InitVars+0x4c0>)
  40113e:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_LATH] = ptr[1];
  401140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401142:	885a      	ldrh	r2, [r3, #2]
  401144:	4b58      	ldr	r3, [pc, #352]	; (4012a8 <InitVars+0x4a8>)
  401146:	825a      	strh	r2, [r3, #18]
			mBusRegs[MBUS_REG_LATL] = ptr[0];
  401148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40114a:	881a      	ldrh	r2, [r3, #0]
  40114c:	4b56      	ldr	r3, [pc, #344]	; (4012a8 <InitVars+0x4a8>)
  40114e:	821a      	strh	r2, [r3, #16]
		
			ptr = (uint16_t*)&lon;
  401150:	4b5d      	ldr	r3, [pc, #372]	; (4012c8 <InitVars+0x4c8>)
  401152:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_LONH] = ptr[1];
  401154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401156:	885a      	ldrh	r2, [r3, #2]
  401158:	4b53      	ldr	r3, [pc, #332]	; (4012a8 <InitVars+0x4a8>)
  40115a:	82da      	strh	r2, [r3, #22]
			mBusRegs[MBUS_REG_LONL] = ptr[0];
  40115c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40115e:	881a      	ldrh	r2, [r3, #0]
  401160:	4b51      	ldr	r3, [pc, #324]	; (4012a8 <InitVars+0x4a8>)
  401162:	829a      	strh	r2, [r3, #20]

			ptr = (uint16_t*)&timeZone;
  401164:	4b5a      	ldr	r3, [pc, #360]	; (4012d0 <InitVars+0x4d0>)
  401166:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_TZH] = ptr[1];
  401168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40116a:	885a      	ldrh	r2, [r3, #2]
  40116c:	4b4e      	ldr	r3, [pc, #312]	; (4012a8 <InitVars+0x4a8>)
  40116e:	835a      	strh	r2, [r3, #26]
			mBusRegs[MBUS_REG_TZL] = ptr[0];
  401170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401172:	881a      	ldrh	r2, [r3, #0]
  401174:	4b4c      	ldr	r3, [pc, #304]	; (4012a8 <InitVars+0x4a8>)
  401176:	831a      	strh	r2, [r3, #24]

			ptr = (uint16_t*)&width;
  401178:	4b4c      	ldr	r3, [pc, #304]	; (4012ac <InitVars+0x4ac>)
  40117a:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_WIDTHH] = ptr[1];
  40117c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40117e:	885a      	ldrh	r2, [r3, #2]
  401180:	4b49      	ldr	r3, [pc, #292]	; (4012a8 <InitVars+0x4a8>)
  401182:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			mBusRegs[MBUS_REG_WIDTHL] = ptr[0];
  401186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401188:	881a      	ldrh	r2, [r3, #0]
  40118a:	4b47      	ldr	r3, [pc, #284]	; (4012a8 <InitVars+0x4a8>)
  40118c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			ptr = (uint16_t*)&dist;
  401190:	4b47      	ldr	r3, [pc, #284]	; (4012b0 <InitVars+0x4b0>)
  401192:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_DISTH] = ptr[1];
  401194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401196:	885a      	ldrh	r2, [r3, #2]
  401198:	4b43      	ldr	r3, [pc, #268]	; (4012a8 <InitVars+0x4a8>)
  40119a:	87da      	strh	r2, [r3, #62]	; 0x3e
			mBusRegs[MBUS_REG_DISTL] = ptr[0];
  40119c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40119e:	881a      	ldrh	r2, [r3, #0]
  4011a0:	4b41      	ldr	r3, [pc, #260]	; (4012a8 <InitVars+0x4a8>)
  4011a2:	879a      	strh	r2, [r3, #60]	; 0x3c

			ptr = (uint16_t*)&pvAngleRng;
  4011a4:	4b43      	ldr	r3, [pc, #268]	; (4012b4 <InitVars+0x4b4>)
  4011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_PNLRNGH] = ptr[1];
  4011a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4011aa:	885a      	ldrh	r2, [r3, #2]
  4011ac:	4b3e      	ldr	r3, [pc, #248]	; (4012a8 <InitVars+0x4a8>)
  4011ae:	84da      	strh	r2, [r3, #38]	; 0x26
			mBusRegs[MBUS_REG_PNLRNGL] = ptr[0];
  4011b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4011b2:	881a      	ldrh	r2, [r3, #0]
  4011b4:	4b3c      	ldr	r3, [pc, #240]	; (4012a8 <InitVars+0x4a8>)
  4011b6:	849a      	strh	r2, [r3, #36]	; 0x24

			ptr = (uint16_t*)&bkTrkParam1;
  4011b8:	4b3f      	ldr	r3, [pc, #252]	; (4012b8 <InitVars+0x4b8>)
  4011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_BKPARAM1H] = ptr[1];
  4011bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4011be:	885a      	ldrh	r2, [r3, #2]
  4011c0:	4b39      	ldr	r3, [pc, #228]	; (4012a8 <InitVars+0x4a8>)
  4011c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			mBusRegs[MBUS_REG_BKPARAM1L] = ptr[0];
  4011c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4011c8:	881a      	ldrh	r2, [r3, #0]
  4011ca:	4b37      	ldr	r3, [pc, #220]	; (4012a8 <InitVars+0x4a8>)
  4011cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

			ptr = (uint16_t*)&bkTrkParam2;
  4011d0:	4b3a      	ldr	r3, [pc, #232]	; (4012bc <InitVars+0x4bc>)
  4011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			mBusRegs[MBUS_REG_BKPARAM2H] = ptr[1];
  4011d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4011d6:	885a      	ldrh	r2, [r3, #2]
  4011d8:	4b33      	ldr	r3, [pc, #204]	; (4012a8 <InitVars+0x4a8>)
  4011da:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			mBusRegs[MBUS_REG_BKPARAM2L] = ptr[0];
  4011de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4011e0:	881a      	ldrh	r2, [r3, #0]
  4011e2:	4b31      	ldr	r3, [pc, #196]	; (4012a8 <InitVars+0x4a8>)
  4011e4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

			/* Update EEPROM */
			ptr8 = (uint8_t *)&lat;
  4011e8:	4b35      	ldr	r3, [pc, #212]	; (4012c0 <InitVars+0x4c0>)
  4011ea:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_LAT0, ptr8, 4);
  4011ec:	2304      	movs	r3, #4
  4011ee:	9300      	str	r3, [sp, #0]
  4011f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4011f2:	2200      	movs	r2, #0
  4011f4:	2150      	movs	r1, #80	; 0x50
  4011f6:	483a      	ldr	r0, [pc, #232]	; (4012e0 <InitVars+0x4e0>)
  4011f8:	4c3a      	ldr	r4, [pc, #232]	; (4012e4 <InitVars+0x4e4>)
  4011fa:	47a0      	blx	r4

			ptr8 = (uint8_t *)&lon;
  4011fc:	4b32      	ldr	r3, [pc, #200]	; (4012c8 <InitVars+0x4c8>)
  4011fe:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_LON0, ptr8, 4);
  401200:	2304      	movs	r3, #4
  401202:	9300      	str	r3, [sp, #0]
  401204:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401206:	2204      	movs	r2, #4
  401208:	2150      	movs	r1, #80	; 0x50
  40120a:	4835      	ldr	r0, [pc, #212]	; (4012e0 <InitVars+0x4e0>)
  40120c:	4c35      	ldr	r4, [pc, #212]	; (4012e4 <InitVars+0x4e4>)
  40120e:	47a0      	blx	r4

			ptr8 = (uint8_t *)&timeZone;
  401210:	4b2f      	ldr	r3, [pc, #188]	; (4012d0 <InitVars+0x4d0>)
  401212:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_TZ0, ptr8, 4);
  401214:	2304      	movs	r3, #4
  401216:	9300      	str	r3, [sp, #0]
  401218:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40121a:	2208      	movs	r2, #8
  40121c:	2150      	movs	r1, #80	; 0x50
  40121e:	4830      	ldr	r0, [pc, #192]	; (4012e0 <InitVars+0x4e0>)
  401220:	4c30      	ldr	r4, [pc, #192]	; (4012e4 <InitVars+0x4e4>)
  401222:	47a0      	blx	r4

			ptr8 = (uint8_t *)&width;
  401224:	4b21      	ldr	r3, [pc, #132]	; (4012ac <InitVars+0x4ac>)
  401226:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_WIDTH0, ptr8, 4);
  401228:	2304      	movs	r3, #4
  40122a:	9300      	str	r3, [sp, #0]
  40122c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40122e:	2210      	movs	r2, #16
  401230:	2150      	movs	r1, #80	; 0x50
  401232:	482b      	ldr	r0, [pc, #172]	; (4012e0 <InitVars+0x4e0>)
  401234:	4c2b      	ldr	r4, [pc, #172]	; (4012e4 <InitVars+0x4e4>)
  401236:	47a0      	blx	r4

			ptr8 = (uint8_t *)&dist;
  401238:	4b1d      	ldr	r3, [pc, #116]	; (4012b0 <InitVars+0x4b0>)
  40123a:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_DIST0, ptr8, 4);
  40123c:	2304      	movs	r3, #4
  40123e:	9300      	str	r3, [sp, #0]
  401240:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401242:	220c      	movs	r2, #12
  401244:	2150      	movs	r1, #80	; 0x50
  401246:	4826      	ldr	r0, [pc, #152]	; (4012e0 <InitVars+0x4e0>)
  401248:	4c26      	ldr	r4, [pc, #152]	; (4012e4 <InitVars+0x4e4>)
  40124a:	47a0      	blx	r4

			ptr8 = (uint8_t *)&pvAngleRng;
  40124c:	4b19      	ldr	r3, [pc, #100]	; (4012b4 <InitVars+0x4b4>)
  40124e:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_PNLRNG0, ptr8, 4);
  401250:	2304      	movs	r3, #4
  401252:	9300      	str	r3, [sp, #0]
  401254:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401256:	2214      	movs	r2, #20
  401258:	2150      	movs	r1, #80	; 0x50
  40125a:	4821      	ldr	r0, [pc, #132]	; (4012e0 <InitVars+0x4e0>)
  40125c:	4c21      	ldr	r4, [pc, #132]	; (4012e4 <InitVars+0x4e4>)
  40125e:	47a0      	blx	r4

			ptr8 = (uint8_t *)&bkTrkParam1;
  401260:	4b15      	ldr	r3, [pc, #84]	; (4012b8 <InitVars+0x4b8>)
  401262:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_BKPARAM10, ptr8, 4);
  401264:	2304      	movs	r3, #4
  401266:	9300      	str	r3, [sp, #0]
  401268:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40126a:	2218      	movs	r2, #24
  40126c:	2150      	movs	r1, #80	; 0x50
  40126e:	481c      	ldr	r0, [pc, #112]	; (4012e0 <InitVars+0x4e0>)
  401270:	4c1c      	ldr	r4, [pc, #112]	; (4012e4 <InitVars+0x4e4>)
  401272:	47a0      	blx	r4

			ptr8 = (uint8_t *)&bkTrkParam2;
  401274:	4b11      	ldr	r3, [pc, #68]	; (4012bc <InitVars+0x4bc>)
  401276:	62bb      	str	r3, [r7, #40]	; 0x28
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_BKPARAM20, ptr8, 4);
  401278:	2304      	movs	r3, #4
  40127a:	9300      	str	r3, [sp, #0]
  40127c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40127e:	221c      	movs	r2, #28
  401280:	2150      	movs	r1, #80	; 0x50
  401282:	4817      	ldr	r0, [pc, #92]	; (4012e0 <InitVars+0x4e0>)
  401284:	4c17      	ldr	r4, [pc, #92]	; (4012e4 <InitVars+0x4e4>)
  401286:	47a0      	blx	r4

			memBuff[0] = 0xAB;
  401288:	23ab      	movs	r3, #171	; 0xab
  40128a:	713b      	strb	r3, [r7, #4]
			WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_DEFCONFIG, memBuff, 1);
  40128c:	1d3a      	adds	r2, r7, #4
  40128e:	2301      	movs	r3, #1
  401290:	9300      	str	r3, [sp, #0]
  401292:	4613      	mov	r3, r2
  401294:	2220      	movs	r2, #32
  401296:	2150      	movs	r1, #80	; 0x50
  401298:	4811      	ldr	r0, [pc, #68]	; (4012e0 <InitVars+0x4e0>)
  40129a:	4c12      	ldr	r4, [pc, #72]	; (4012e4 <InitVars+0x4e4>)
  40129c:	47a0      	blx	r4
		}
}
  40129e:	bf00      	nop
  4012a0:	3734      	adds	r7, #52	; 0x34
  4012a2:	46bd      	mov	sp, r7
  4012a4:	bd90      	pop	{r4, r7, pc}
  4012a6:	bf00      	nop
  4012a8:	20000484 	.word	0x20000484
  4012ac:	2000001c 	.word	0x2000001c
  4012b0:	20000018 	.word	0x20000018
  4012b4:	20000020 	.word	0x20000020
  4012b8:	20002714 	.word	0x20002714
  4012bc:	20002718 	.word	0x20002718
  4012c0:	2000000c 	.word	0x2000000c
  4012c4:	418bba88 	.word	0x418bba88
  4012c8:	20000010 	.word	0x20000010
  4012cc:	429ce153 	.word	0x429ce153
  4012d0:	20000014 	.word	0x20000014
  4012d4:	40b00000 	.word	0x40b00000
  4012d8:	40a00000 	.word	0x40a00000
  4012dc:	422c0000 	.word	0x422c0000
  4012e0:	40018000 	.word	0x40018000
  4012e4:	004001cd 	.word	0x004001cd

004012e8 <InitTWI>:

static void InitTWI(void)
{
  4012e8:	b580      	push	{r7, lr}
  4012ea:	b084      	sub	sp, #16
  4012ec:	af00      	add	r7, sp, #0
	twi_options_t twiSettings = {
		sysclk_get_peripheral_hz(),
  4012ee:	4b0c      	ldr	r3, [pc, #48]	; (401320 <InitTWI+0x38>)
  4012f0:	4798      	blx	r3
  4012f2:	4603      	mov	r3, r0
		}
}

static void InitTWI(void)
{
	twi_options_t twiSettings = {
  4012f4:	607b      	str	r3, [r7, #4]
  4012f6:	4b0b      	ldr	r3, [pc, #44]	; (401324 <InitTWI+0x3c>)
  4012f8:	60bb      	str	r3, [r7, #8]
  4012fa:	2300      	movs	r3, #0
  4012fc:	733b      	strb	r3, [r7, #12]
  4012fe:	2300      	movs	r3, #0
  401300:	737b      	strb	r3, [r7, #13]
		400000,
		0,
		0
	};
	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_TWI_ID);
  401302:	2013      	movs	r0, #19
  401304:	4b08      	ldr	r3, [pc, #32]	; (401328 <InitTWI+0x40>)
  401306:	4798      	blx	r3

	/* Enable TWI master mode */
	twi_enable_master_mode(BOARD_TWI);
  401308:	4808      	ldr	r0, [pc, #32]	; (40132c <InitTWI+0x44>)
  40130a:	4b09      	ldr	r3, [pc, #36]	; (401330 <InitTWI+0x48>)
  40130c:	4798      	blx	r3

	/* Initialize TWI peripheral */
	twi_master_init(BOARD_TWI, &twiSettings);
  40130e:	1d3b      	adds	r3, r7, #4
  401310:	4619      	mov	r1, r3
  401312:	4806      	ldr	r0, [pc, #24]	; (40132c <InitTWI+0x44>)
  401314:	4b07      	ldr	r3, [pc, #28]	; (401334 <InitTWI+0x4c>)
  401316:	4798      	blx	r3
}
  401318:	bf00      	nop
  40131a:	3710      	adds	r7, #16
  40131c:	46bd      	mov	sp, r7
  40131e:	bd80      	pop	{r7, pc}
  401320:	00400cd1 	.word	0x00400cd1
  401324:	00061a80 	.word	0x00061a80
  401328:	00400ce5 	.word	0x00400ce5
  40132c:	40018000 	.word	0x40018000
  401330:	004031b9 	.word	0x004031b9
  401334:	004031dd 	.word	0x004031dd

00401338 <PVTrack>:
// 	//InitTWI();
// 	twiPort = freertos_twi_master_init(BOARD_TWI, &settings);
// }

void PVTrack(void)
{
  401338:	b580      	push	{r7, lr}
  40133a:	b084      	sub	sp, #16
  40133c:	af00      	add	r7, sp, #0
//     while(ccStatus)
//     {
//         vTaskDelay(pdMS_TO_TICKS(10));
//     }
    
    taskENTER_CRITICAL();
  40133e:	4b42      	ldr	r3, [pc, #264]	; (401448 <PVTrack+0x110>)
  401340:	4798      	blx	r3
    
    /* Read RTC */
	#ifndef DS3231_USE_RTOS_API
		DSGetTime(BOARD_TWI, (uint16_t *)&mBusRegs[MBUS_REG_SEC]);
  401342:	4942      	ldr	r1, [pc, #264]	; (40144c <PVTrack+0x114>)
  401344:	4842      	ldr	r0, [pc, #264]	; (401450 <PVTrack+0x118>)
  401346:	4b43      	ldr	r3, [pc, #268]	; (401454 <PVTrack+0x11c>)
  401348:	4798      	blx	r3
		DSGetFullDate(BOARD_TWI, (uint16_t *)&mBusRegs[MBUS_REG_DAY]);
  40134a:	4943      	ldr	r1, [pc, #268]	; (401458 <PVTrack+0x120>)
  40134c:	4840      	ldr	r0, [pc, #256]	; (401450 <PVTrack+0x118>)
  40134e:	4b43      	ldr	r3, [pc, #268]	; (40145c <PVTrack+0x124>)
  401350:	4798      	blx	r3
		DSGetTimeTo(twiPort, (uint16_t *)&mBusRegs[MBUS_REG_SEC], 50);
		DSGetFullDateTo(twiPort, (uint16_t *)&mBusRegs[MBUS_REG_DAY], 50);
	#endif
    
    /* Clacluate PV Angle from time */
    pvAngle = GetPvAngle();
  401352:	4b43      	ldr	r3, [pc, #268]	; (401460 <PVTrack+0x128>)
  401354:	4798      	blx	r3
  401356:	4603      	mov	r3, r0
  401358:	607b      	str	r3, [r7, #4]
    ptr = (uint16_t*)&pvAngle;
  40135a:	1d3b      	adds	r3, r7, #4
  40135c:	60fb      	str	r3, [r7, #12]
    mBusRegs[MBUS_REG_PVANGLEH] = ptr[1];
  40135e:	68fb      	ldr	r3, [r7, #12]
  401360:	885a      	ldrh	r2, [r3, #2]
  401362:	4b3a      	ldr	r3, [pc, #232]	; (40144c <PVTrack+0x114>)
  401364:	845a      	strh	r2, [r3, #34]	; 0x22
    mBusRegs[MBUS_REG_PVANGLEL] = ptr[0];
  401366:	68fb      	ldr	r3, [r7, #12]
  401368:	881a      	ldrh	r2, [r3, #0]
  40136a:	4b38      	ldr	r3, [pc, #224]	; (40144c <PVTrack+0x114>)
  40136c:	841a      	strh	r2, [r3, #32]
		LogBuff[0] = ',';
		ConsoleWrite((uint8_t *)LogBuff, 1);
    #endif
    
    /* If not backtracking */
    if(!bkTrkFlg)
  40136e:	4b3d      	ldr	r3, [pc, #244]	; (401464 <PVTrack+0x12c>)
  401370:	781b      	ldrb	r3, [r3, #0]
  401372:	2b00      	cmp	r3, #0
  401374:	d11c      	bne.n	4013b0 <PVTrack+0x78>
        #ifdef LOG_EN
            sprintf(LogBuff,"NA\r\n");
			ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
        #endif
        /* If Angle between +/- pvAngleRng deg */
        if(pvAngle>= -pvAngleRng && pvAngle <= pvAngleRng)
  401376:	4b3c      	ldr	r3, [pc, #240]	; (401468 <PVTrack+0x130>)
  401378:	681b      	ldr	r3, [r3, #0]
  40137a:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
  40137e:	6879      	ldr	r1, [r7, #4]
  401380:	4b3a      	ldr	r3, [pc, #232]	; (40146c <PVTrack+0x134>)
  401382:	4610      	mov	r0, r2
  401384:	4798      	blx	r3
  401386:	4603      	mov	r3, r0
  401388:	2b00      	cmp	r3, #0
  40138a:	d00d      	beq.n	4013a8 <PVTrack+0x70>
  40138c:	687a      	ldr	r2, [r7, #4]
  40138e:	4b36      	ldr	r3, [pc, #216]	; (401468 <PVTrack+0x130>)
  401390:	6819      	ldr	r1, [r3, #0]
  401392:	4b36      	ldr	r3, [pc, #216]	; (40146c <PVTrack+0x134>)
  401394:	4610      	mov	r0, r2
  401396:	4798      	blx	r3
  401398:	4603      	mov	r3, r0
  40139a:	2b00      	cmp	r3, #0
  40139c:	d004      	beq.n	4013a8 <PVTrack+0x70>
        {
            /* Rotate Motor */
            #ifndef LOG_EN
                GotoAngle(pvAngle);
  40139e:	687b      	ldr	r3, [r7, #4]
  4013a0:	4618      	mov	r0, r3
  4013a2:	4b33      	ldr	r3, [pc, #204]	; (401470 <PVTrack+0x138>)
  4013a4:	4798      	blx	r3
  4013a6:	e046      	b.n	401436 <PVTrack+0xfe>
            #endif
        }
        else
        {
            bkTrkFlg = 1;
  4013a8:	4b2e      	ldr	r3, [pc, #184]	; (401464 <PVTrack+0x12c>)
  4013aa:	2201      	movs	r2, #1
  4013ac:	701a      	strb	r2, [r3, #0]
  4013ae:	e042      	b.n	401436 <PVTrack+0xfe>
        }
    }
    else
    {
        if(pvAngle>= -90 && pvAngle <= 90)
  4013b0:	687a      	ldr	r2, [r7, #4]
  4013b2:	4b30      	ldr	r3, [pc, #192]	; (401474 <PVTrack+0x13c>)
  4013b4:	4930      	ldr	r1, [pc, #192]	; (401478 <PVTrack+0x140>)
  4013b6:	4610      	mov	r0, r2
  4013b8:	4798      	blx	r3
  4013ba:	4603      	mov	r3, r0
  4013bc:	2b00      	cmp	r3, #0
  4013be:	d023      	beq.n	401408 <PVTrack+0xd0>
  4013c0:	687a      	ldr	r2, [r7, #4]
  4013c2:	4b2a      	ldr	r3, [pc, #168]	; (40146c <PVTrack+0x134>)
  4013c4:	492d      	ldr	r1, [pc, #180]	; (40147c <PVTrack+0x144>)
  4013c6:	4610      	mov	r0, r2
  4013c8:	4798      	blx	r3
  4013ca:	4603      	mov	r3, r0
  4013cc:	2b00      	cmp	r3, #0
  4013ce:	d01b      	beq.n	401408 <PVTrack+0xd0>
        {
            bkTrkAngle = GetPvBackTrackAngle(pvAngle);
  4013d0:	687b      	ldr	r3, [r7, #4]
  4013d2:	4618      	mov	r0, r3
  4013d4:	4b2a      	ldr	r3, [pc, #168]	; (401480 <PVTrack+0x148>)
  4013d6:	4798      	blx	r3
  4013d8:	60b8      	str	r0, [r7, #8]
            
            /* If bkTrkAngle is within +/- given range */ 
            if(bkTrkAngle>= -pvAngleRng && bkTrkAngle <= pvAngleRng)
  4013da:	4b23      	ldr	r3, [pc, #140]	; (401468 <PVTrack+0x130>)
  4013dc:	681b      	ldr	r3, [r3, #0]
  4013de:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
  4013e2:	4b22      	ldr	r3, [pc, #136]	; (40146c <PVTrack+0x134>)
  4013e4:	68b9      	ldr	r1, [r7, #8]
  4013e6:	4610      	mov	r0, r2
  4013e8:	4798      	blx	r3
  4013ea:	4603      	mov	r3, r0
  4013ec:	2b00      	cmp	r3, #0
  4013ee:	d00b      	beq.n	401408 <PVTrack+0xd0>
  4013f0:	4b1d      	ldr	r3, [pc, #116]	; (401468 <PVTrack+0x130>)
  4013f2:	681a      	ldr	r2, [r3, #0]
  4013f4:	4b1d      	ldr	r3, [pc, #116]	; (40146c <PVTrack+0x134>)
  4013f6:	4611      	mov	r1, r2
  4013f8:	68b8      	ldr	r0, [r7, #8]
  4013fa:	4798      	blx	r3
  4013fc:	4603      	mov	r3, r0
  4013fe:	2b00      	cmp	r3, #0
  401400:	d002      	beq.n	401408 <PVTrack+0xd0>
					ConsoleWrite((uint8_t *)LogBuff, 2);
                #endif
                
                /* Rotate Motor */
                #ifndef LOG_EN
                    GotoAngle(bkTrkAngle);
  401402:	68b8      	ldr	r0, [r7, #8]
  401404:	4b1a      	ldr	r3, [pc, #104]	; (401470 <PVTrack+0x138>)
  401406:	4798      	blx	r3
            {
                sprintf(LogBuff,"NA\r\n");
				ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
            }
        #endif
        if(pvAngle>= -pvAngleRng && pvAngle <= pvAngleRng)
  401408:	4b17      	ldr	r3, [pc, #92]	; (401468 <PVTrack+0x130>)
  40140a:	681b      	ldr	r3, [r3, #0]
  40140c:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
  401410:	6879      	ldr	r1, [r7, #4]
  401412:	4b16      	ldr	r3, [pc, #88]	; (40146c <PVTrack+0x134>)
  401414:	4610      	mov	r0, r2
  401416:	4798      	blx	r3
  401418:	4603      	mov	r3, r0
  40141a:	2b00      	cmp	r3, #0
  40141c:	d00b      	beq.n	401436 <PVTrack+0xfe>
  40141e:	687a      	ldr	r2, [r7, #4]
  401420:	4b11      	ldr	r3, [pc, #68]	; (401468 <PVTrack+0x130>)
  401422:	6819      	ldr	r1, [r3, #0]
  401424:	4b11      	ldr	r3, [pc, #68]	; (40146c <PVTrack+0x134>)
  401426:	4610      	mov	r0, r2
  401428:	4798      	blx	r3
  40142a:	4603      	mov	r3, r0
  40142c:	2b00      	cmp	r3, #0
  40142e:	d002      	beq.n	401436 <PVTrack+0xfe>
        {
            bkTrkFlg = 0;
  401430:	4b0c      	ldr	r3, [pc, #48]	; (401464 <PVTrack+0x12c>)
  401432:	2200      	movs	r2, #0
  401434:	701a      	strb	r2, [r3, #0]
        }
    }
          
    /* Clear any required flags */
    minCtr = 0;
  401436:	4b13      	ldr	r3, [pc, #76]	; (401484 <PVTrack+0x14c>)
  401438:	2200      	movs	r2, #0
  40143a:	701a      	strb	r2, [r3, #0]
    taskEXIT_CRITICAL();
  40143c:	4b12      	ldr	r3, [pc, #72]	; (401488 <PVTrack+0x150>)
  40143e:	4798      	blx	r3
    
    /* Enable Charge Ctrlr */
    //ccEn = 1;
} 
  401440:	bf00      	nop
  401442:	3710      	adds	r7, #16
  401444:	46bd      	mov	sp, r7
  401446:	bd80      	pop	{r7, pc}
  401448:	0040502d 	.word	0x0040502d
  40144c:	20000484 	.word	0x20000484
  401450:	40018000 	.word	0x40018000
  401454:	004002f5 	.word	0x004002f5
  401458:	2000048a 	.word	0x2000048a
  40145c:	004003b5 	.word	0x004003b5
  401460:	00401981 	.word	0x00401981
  401464:	200004d0 	.word	0x200004d0
  401468:	20000020 	.word	0x20000020
  40146c:	0040ada1 	.word	0x0040ada1
  401470:	0040148d 	.word	0x0040148d
  401474:	0040adb5 	.word	0x0040adb5
  401478:	c2b40000 	.word	0xc2b40000
  40147c:	42b40000 	.word	0x42b40000
  401480:	004026a5 	.word	0x004026a5
  401484:	200004d1 	.word	0x200004d1
  401488:	0040504d 	.word	0x0040504d

0040148c <GotoAngle>:

void GotoAngle(float pvAngle)
{
  40148c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  401490:	b08c      	sub	sp, #48	; 0x30
  401492:	af00      	add	r7, sp, #0
  401494:	6078      	str	r0, [r7, #4]
    uint16_t *ptr;
    int16_t accVals[3] = {};
  401496:	f107 0314 	add.w	r3, r7, #20
  40149a:	2200      	movs	r2, #0
  40149c:	601a      	str	r2, [r3, #0]
  40149e:	809a      	strh	r2, [r3, #4]
    float oriVals[3], error = 0;
  4014a0:	f04f 0300 	mov.w	r3, #0
  4014a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t p = 0;
  4014a6:	2300      	movs	r3, #0
  4014a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    float oriX, prevOri = 0;
  4014ac:	f04f 0300 	mov.w	r3, #0
  4014b0:	623b      	str	r3, [r7, #32]
    
	#ifndef ICM20648_USE_RTOS_API
		ICMReadAccDataAll(BOARD_TWI, ICM_ADDR,(uint16_t*)accVals);
  4014b2:	f107 0314 	add.w	r3, r7, #20
  4014b6:	461a      	mov	r2, r3
  4014b8:	2169      	movs	r1, #105	; 0x69
  4014ba:	4885      	ldr	r0, [pc, #532]	; (4016d0 <GotoAngle+0x244>)
  4014bc:	4b85      	ldr	r3, [pc, #532]	; (4016d4 <GotoAngle+0x248>)
  4014be:	4798      	blx	r3
	#else
		ICMReadAccDataAllTo(twiPort, ICM_ADDR,(uint16_t*)accVals, 50);
	#endif

    GetOrientation(accVals, oriVals);
  4014c0:	f107 0208 	add.w	r2, r7, #8
  4014c4:	f107 0314 	add.w	r3, r7, #20
  4014c8:	4611      	mov	r1, r2
  4014ca:	4618      	mov	r0, r3
  4014cc:	4b82      	ldr	r3, [pc, #520]	; (4016d8 <GotoAngle+0x24c>)
  4014ce:	4798      	blx	r3
        PrintFlt(oriVals[0]);
        sprintf(LogBuff,"\r\n");
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
    #endif
    
    error = pvAngle - oriVals[0];
  4014d0:	68ba      	ldr	r2, [r7, #8]
  4014d2:	4b82      	ldr	r3, [pc, #520]	; (4016dc <GotoAngle+0x250>)
  4014d4:	4611      	mov	r1, r2
  4014d6:	6878      	ldr	r0, [r7, #4]
  4014d8:	4798      	blx	r3
  4014da:	4603      	mov	r3, r0
  4014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
        PrintFlt(error);
        sprintf(LogBuff,"\r\n");
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
    #endif
    if(error > 0)
  4014de:	4b80      	ldr	r3, [pc, #512]	; (4016e0 <GotoAngle+0x254>)
  4014e0:	f04f 0100 	mov.w	r1, #0
  4014e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  4014e6:	4798      	blx	r3
  4014e8:	4603      	mov	r3, r0
  4014ea:	2b00      	cmp	r3, #0
  4014ec:	d006      	beq.n	4014fc <GotoAngle+0x70>
        //Set Anti Clockwise Direction
        #ifdef DEBUG_EN
            sprintf(LogBuff,"ACLK\r\n");
			ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
        #endif
        gpio_set_pin_low(PIN_MOTOR_IN1_IDX);
  4014ee:	2020      	movs	r0, #32
  4014f0:	4b7c      	ldr	r3, [pc, #496]	; (4016e4 <GotoAngle+0x258>)
  4014f2:	4798      	blx	r3
		gpio_set_pin_high(PIN_MOTOR_IN2_IDX);
  4014f4:	2021      	movs	r0, #33	; 0x21
  4014f6:	4b7c      	ldr	r3, [pc, #496]	; (4016e8 <GotoAngle+0x25c>)
  4014f8:	4798      	blx	r3
  4014fa:	e005      	b.n	401508 <GotoAngle+0x7c>
        //Set Clockwise Direction
        #ifdef DEBUG_EN
            sprintf(LogBuff,"CLK\r\n");
			ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
        #endif
        gpio_set_pin_high(PIN_MOTOR_IN1_IDX);
  4014fc:	2020      	movs	r0, #32
  4014fe:	4b7a      	ldr	r3, [pc, #488]	; (4016e8 <GotoAngle+0x25c>)
  401500:	4798      	blx	r3
        gpio_set_pin_low(PIN_MOTOR_IN2_IDX);
  401502:	2021      	movs	r0, #33	; 0x21
  401504:	4b77      	ldr	r3, [pc, #476]	; (4016e4 <GotoAngle+0x258>)
  401506:	4798      	blx	r3
    }
    
    //If error greater than +/- 1.0f
    if(!((error >=-INCLINATION_ERROR)&&(error<INCLINATION_ERROR)))
  401508:	2301      	movs	r3, #1
  40150a:	461c      	mov	r4, r3
  40150c:	4b77      	ldr	r3, [pc, #476]	; (4016ec <GotoAngle+0x260>)
  40150e:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
  401512:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  401514:	4798      	blx	r3
  401516:	4603      	mov	r3, r0
  401518:	2b00      	cmp	r3, #0
  40151a:	d101      	bne.n	401520 <GotoAngle+0x94>
  40151c:	2300      	movs	r3, #0
  40151e:	461c      	mov	r4, r3
  401520:	b2e3      	uxtb	r3, r4
  401522:	f083 0301 	eor.w	r3, r3, #1
  401526:	b2db      	uxtb	r3, r3
  401528:	2b00      	cmp	r3, #0
  40152a:	d112      	bne.n	401552 <GotoAngle+0xc6>
  40152c:	2301      	movs	r3, #1
  40152e:	461c      	mov	r4, r3
  401530:	4b6f      	ldr	r3, [pc, #444]	; (4016f0 <GotoAngle+0x264>)
  401532:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  401536:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  401538:	4798      	blx	r3
  40153a:	4603      	mov	r3, r0
  40153c:	2b00      	cmp	r3, #0
  40153e:	d101      	bne.n	401544 <GotoAngle+0xb8>
  401540:	2300      	movs	r3, #0
  401542:	461c      	mov	r4, r3
  401544:	b2e3      	uxtb	r3, r4
  401546:	f083 0301 	eor.w	r3, r3, #1
  40154a:	b2db      	uxtb	r3, r3
  40154c:	2b00      	cmp	r3, #0
  40154e:	f000 8086 	beq.w	40165e <GotoAngle+0x1d2>
    {
        /* Turn Motor On */
        #ifndef MOTOR_CTRL_A4955
			gpio_set_pin_high(PIN_MOTOR_RST_IDX);
		#else
			gpio_set_pin_high(PIN_MOTOR_SLP_IDX);
  401552:	2022      	movs	r0, #34	; 0x22
  401554:	4b64      	ldr	r3, [pc, #400]	; (4016e8 <GotoAngle+0x25c>)
  401556:	4798      	blx	r3
            sprintf(LogBuff,"ON\r\n");
			ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));    
        #endif
    }
    
    while(!((error >=-INCLINATION_ERROR)&&(error<INCLINATION_ERROR)))
  401558:	e081      	b.n	40165e <GotoAngle+0x1d2>
    {
        prevOri = 0;
  40155a:	f04f 0300 	mov.w	r3, #0
  40155e:	623b      	str	r3, [r7, #32]
        for(p = 0; p < 8; p++)
  401560:	2300      	movs	r3, #0
  401562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401566:	e058      	b.n	40161a <GotoAngle+0x18e>
        {
            #ifndef ICM20648_USE_RTOS_API
				ICMReadAccDataAll(BOARD_TWI, ICM_ADDR,(uint16_t*)accVals);
  401568:	f107 0314 	add.w	r3, r7, #20
  40156c:	461a      	mov	r2, r3
  40156e:	2169      	movs	r1, #105	; 0x69
  401570:	4857      	ldr	r0, [pc, #348]	; (4016d0 <GotoAngle+0x244>)
  401572:	4b58      	ldr	r3, [pc, #352]	; (4016d4 <GotoAngle+0x248>)
  401574:	4798      	blx	r3
			#else
				ICMReadAccDataAllTo(twiPort, ICM_ADDR,(uint16_t*)accVals, 50);
			#endif
            GetOrientation(accVals, oriVals);
  401576:	f107 0208 	add.w	r2, r7, #8
  40157a:	f107 0314 	add.w	r3, r7, #20
  40157e:	4611      	mov	r1, r2
  401580:	4618      	mov	r0, r3
  401582:	4b55      	ldr	r3, [pc, #340]	; (4016d8 <GotoAngle+0x24c>)
  401584:	4798      	blx	r3
            oriX = prevOri + ((oriVals[0] - prevOri)/((float)(p+1)));
  401586:	68ba      	ldr	r2, [r7, #8]
  401588:	4b54      	ldr	r3, [pc, #336]	; (4016dc <GotoAngle+0x250>)
  40158a:	6a39      	ldr	r1, [r7, #32]
  40158c:	4610      	mov	r0, r2
  40158e:	4798      	blx	r3
  401590:	4603      	mov	r3, r0
  401592:	461c      	mov	r4, r3
  401594:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401598:	1c5a      	adds	r2, r3, #1
  40159a:	4b56      	ldr	r3, [pc, #344]	; (4016f4 <GotoAngle+0x268>)
  40159c:	4610      	mov	r0, r2
  40159e:	4798      	blx	r3
  4015a0:	4602      	mov	r2, r0
  4015a2:	4b55      	ldr	r3, [pc, #340]	; (4016f8 <GotoAngle+0x26c>)
  4015a4:	4611      	mov	r1, r2
  4015a6:	4620      	mov	r0, r4
  4015a8:	4798      	blx	r3
  4015aa:	4603      	mov	r3, r0
  4015ac:	461a      	mov	r2, r3
  4015ae:	4b53      	ldr	r3, [pc, #332]	; (4016fc <GotoAngle+0x270>)
  4015b0:	6a39      	ldr	r1, [r7, #32]
  4015b2:	4610      	mov	r0, r2
  4015b4:	4798      	blx	r3
  4015b6:	4603      	mov	r3, r0
  4015b8:	627b      	str	r3, [r7, #36]	; 0x24
        	prevOri = oriX;
  4015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4015bc:	623b      	str	r3, [r7, #32]
            delay_ms(40);
  4015be:	4b50      	ldr	r3, [pc, #320]	; (401700 <GotoAngle+0x274>)
  4015c0:	4798      	blx	r3
  4015c2:	4603      	mov	r3, r0
  4015c4:	f04f 0400 	mov.w	r4, #0
  4015c8:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  4015cc:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  4015d0:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  4015d4:	4643      	mov	r3, r8
  4015d6:	464c      	mov	r4, r9
  4015d8:	00a6      	lsls	r6, r4, #2
  4015da:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  4015de:	009d      	lsls	r5, r3, #2
  4015e0:	195b      	adds	r3, r3, r5
  4015e2:	eb44 0406 	adc.w	r4, r4, r6
  4015e6:	f243 61af 	movw	r1, #13999	; 0x36af
  4015ea:	f04f 0200 	mov.w	r2, #0
  4015ee:	eb13 0b01 	adds.w	fp, r3, r1
  4015f2:	eb44 0c02 	adc.w	ip, r4, r2
  4015f6:	4658      	mov	r0, fp
  4015f8:	4661      	mov	r1, ip
  4015fa:	4c42      	ldr	r4, [pc, #264]	; (401704 <GotoAngle+0x278>)
  4015fc:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401600:	f04f 0300 	mov.w	r3, #0
  401604:	47a0      	blx	r4
  401606:	4603      	mov	r3, r0
  401608:	460c      	mov	r4, r1
  40160a:	4618      	mov	r0, r3
  40160c:	4b3e      	ldr	r3, [pc, #248]	; (401708 <GotoAngle+0x27c>)
  40160e:	4798      	blx	r3
    }
    
    while(!((error >=-INCLINATION_ERROR)&&(error<INCLINATION_ERROR)))
    {
        prevOri = 0;
        for(p = 0; p < 8; p++)
  401610:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401614:	3301      	adds	r3, #1
  401616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40161a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40161e:	2b07      	cmp	r3, #7
  401620:	d9a2      	bls.n	401568 <GotoAngle+0xdc>
            GetOrientation(accVals, oriVals);
            oriX = prevOri + ((oriVals[0] - prevOri)/((float)(p+1)));
        	prevOri = oriX;
            delay_ms(40);
        }
        oriVals[0] = oriX;
  401622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401624:	60bb      	str	r3, [r7, #8]
			LogBuff[0] = '\r';
			LogBuff[1] = '\n';
			ConsoleWrite((uint8_t *)LogBuff, 2);
        #endif
        
        error = pvAngle - oriVals[0];
  401626:	68ba      	ldr	r2, [r7, #8]
  401628:	4b2c      	ldr	r3, [pc, #176]	; (4016dc <GotoAngle+0x250>)
  40162a:	4611      	mov	r1, r2
  40162c:	6878      	ldr	r0, [r7, #4]
  40162e:	4798      	blx	r3
  401630:	4603      	mov	r3, r0
  401632:	62fb      	str	r3, [r7, #44]	; 0x2c
        
        if(error > 0)
  401634:	4b2a      	ldr	r3, [pc, #168]	; (4016e0 <GotoAngle+0x254>)
  401636:	f04f 0100 	mov.w	r1, #0
  40163a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  40163c:	4798      	blx	r3
  40163e:	4603      	mov	r3, r0
  401640:	2b00      	cmp	r3, #0
  401642:	d006      	beq.n	401652 <GotoAngle+0x1c6>
                sprintf(LogBuff,"ACLK\r\n");
				ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
            #endif
			#ifndef MOTOR_CTRL_A4955
			#else
				gpio_set_pin_low(PIN_MOTOR_IN1_IDX);
  401644:	2020      	movs	r0, #32
  401646:	4b27      	ldr	r3, [pc, #156]	; (4016e4 <GotoAngle+0x258>)
  401648:	4798      	blx	r3
				gpio_set_pin_high(PIN_MOTOR_IN2_IDX);
  40164a:	2021      	movs	r0, #33	; 0x21
  40164c:	4b26      	ldr	r3, [pc, #152]	; (4016e8 <GotoAngle+0x25c>)
  40164e:	4798      	blx	r3
  401650:	e005      	b.n	40165e <GotoAngle+0x1d2>
                sprintf(LogBuff,"CLK\r\n");
				ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
            #endif
			#ifndef MOTOR_CTRL_A4955
			#else
				gpio_set_pin_high(PIN_MOTOR_IN1_IDX);
  401652:	2020      	movs	r0, #32
  401654:	4b24      	ldr	r3, [pc, #144]	; (4016e8 <GotoAngle+0x25c>)
  401656:	4798      	blx	r3
				gpio_set_pin_low(PIN_MOTOR_IN2_IDX);
  401658:	2021      	movs	r0, #33	; 0x21
  40165a:	4b22      	ldr	r3, [pc, #136]	; (4016e4 <GotoAngle+0x258>)
  40165c:	4798      	blx	r3
            sprintf(LogBuff,"ON\r\n");
			ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));    
        #endif
    }
    
    while(!((error >=-INCLINATION_ERROR)&&(error<INCLINATION_ERROR)))
  40165e:	2301      	movs	r3, #1
  401660:	461c      	mov	r4, r3
  401662:	4b22      	ldr	r3, [pc, #136]	; (4016ec <GotoAngle+0x260>)
  401664:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
  401668:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  40166a:	4798      	blx	r3
  40166c:	4603      	mov	r3, r0
  40166e:	2b00      	cmp	r3, #0
  401670:	d101      	bne.n	401676 <GotoAngle+0x1ea>
  401672:	2300      	movs	r3, #0
  401674:	461c      	mov	r4, r3
  401676:	b2e3      	uxtb	r3, r4
  401678:	f083 0301 	eor.w	r3, r3, #1
  40167c:	b2db      	uxtb	r3, r3
  40167e:	2b00      	cmp	r3, #0
  401680:	f47f af6b 	bne.w	40155a <GotoAngle+0xce>
  401684:	2301      	movs	r3, #1
  401686:	461c      	mov	r4, r3
  401688:	4b19      	ldr	r3, [pc, #100]	; (4016f0 <GotoAngle+0x264>)
  40168a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  40168e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  401690:	4798      	blx	r3
  401692:	4603      	mov	r3, r0
  401694:	2b00      	cmp	r3, #0
  401696:	d101      	bne.n	40169c <GotoAngle+0x210>
  401698:	2300      	movs	r3, #0
  40169a:	461c      	mov	r4, r3
  40169c:	b2e3      	uxtb	r3, r4
  40169e:	f083 0301 	eor.w	r3, r3, #1
  4016a2:	b2db      	uxtb	r3, r3
  4016a4:	2b00      	cmp	r3, #0
  4016a6:	f47f af58 	bne.w	40155a <GotoAngle+0xce>

    /* Turn Motor Off */
	#ifndef MOTOR_CTRL_A4955
		gpio_set_pin_low(PIN_MOTOR_RST_IDX);
	#else
		gpio_set_pin_low(PIN_MOTOR_SLP_IDX);
  4016aa:	2022      	movs	r0, #34	; 0x22
  4016ac:	4b0d      	ldr	r3, [pc, #52]	; (4016e4 <GotoAngle+0x258>)
  4016ae:	4798      	blx	r3
    #ifdef DEBUG_EN
        sprintf(LogBuff,"OFF\r\n");
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
    #endif
    
    ptr = (uint16_t*)&oriVals[0];
  4016b0:	f107 0308 	add.w	r3, r7, #8
  4016b4:	61fb      	str	r3, [r7, #28]
    mBusRegs[MBUS_REG_ANXH] = ptr[1];
  4016b6:	69fb      	ldr	r3, [r7, #28]
  4016b8:	885a      	ldrh	r2, [r3, #2]
  4016ba:	4b14      	ldr	r3, [pc, #80]	; (40170c <GotoAngle+0x280>)
  4016bc:	83da      	strh	r2, [r3, #30]
    mBusRegs[MBUS_REG_ANXL] = ptr[0];
  4016be:	69fb      	ldr	r3, [r7, #28]
  4016c0:	881a      	ldrh	r2, [r3, #0]
  4016c2:	4b12      	ldr	r3, [pc, #72]	; (40170c <GotoAngle+0x280>)
  4016c4:	839a      	strh	r2, [r3, #28]
}
  4016c6:	bf00      	nop
  4016c8:	3730      	adds	r7, #48	; 0x30
  4016ca:	46bd      	mov	sp, r7
  4016cc:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
  4016d0:	40018000 	.word	0x40018000
  4016d4:	004005ed 	.word	0x004005ed
  4016d8:	004017f1 	.word	0x004017f1
  4016dc:	0040a83d 	.word	0x0040a83d
  4016e0:	0040adc9 	.word	0x0040adc9
  4016e4:	00404129 	.word	0x00404129
  4016e8:	004040f9 	.word	0x004040f9
  4016ec:	0040adb5 	.word	0x0040adb5
  4016f0:	0040ad8d 	.word	0x0040ad8d
  4016f4:	0040a9a9 	.word	0x0040a9a9
  4016f8:	0040abb9 	.word	0x0040abb9
  4016fc:	0040a841 	.word	0x0040a841
  401700:	00400cbd 	.word	0x00400cbd
  401704:	0040ae29 	.word	0x0040ae29
  401708:	20000001 	.word	0x20000001
  40170c:	20000484 	.word	0x20000484

00401710 <TestCode>:

void TestCode(void)
{
  401710:	b580      	push	{r7, lr}
  401712:	b088      	sub	sp, #32
  401714:	af00      	add	r7, sp, #0
    int16_t accVals[3] = {0, 0, 0};
  401716:	2300      	movs	r3, #0
  401718:	82bb      	strh	r3, [r7, #20]
  40171a:	2300      	movs	r3, #0
  40171c:	82fb      	strh	r3, [r7, #22]
  40171e:	2300      	movs	r3, #0
  401720:	833b      	strh	r3, [r7, #24]
    float oriVals[3], pvAngle=0;
  401722:	f04f 0300 	mov.w	r3, #0
  401726:	607b      	str	r3, [r7, #4]
    uint16_t *ptr;
    #ifndef DS3231_USE_RTOS_API
		DSGetTime(BOARD_TWI, (uint16_t *)&mBusRegs[MBUS_REG_SEC]);
  401728:	4927      	ldr	r1, [pc, #156]	; (4017c8 <TestCode+0xb8>)
  40172a:	4828      	ldr	r0, [pc, #160]	; (4017cc <TestCode+0xbc>)
  40172c:	4b28      	ldr	r3, [pc, #160]	; (4017d0 <TestCode+0xc0>)
  40172e:	4798      	blx	r3
		DSGetFullDate(BOARD_TWI, (uint16_t *)&mBusRegs[MBUS_REG_DAY]);
  401730:	4928      	ldr	r1, [pc, #160]	; (4017d4 <TestCode+0xc4>)
  401732:	4826      	ldr	r0, [pc, #152]	; (4017cc <TestCode+0xbc>)
  401734:	4b28      	ldr	r3, [pc, #160]	; (4017d8 <TestCode+0xc8>)
  401736:	4798      	blx	r3
		(((mBusRegs[MBUS_REG_SEC]>>4)*10) + (mBusRegs[MBUS_REG_SEC]&0x000F)));
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
    #endif

	#ifndef ICM20648_USE_RTOS_API
		ICMReadAccDataAll(BOARD_TWI, ICM_ADDR,(uint16_t*)accVals);
  401738:	f107 0314 	add.w	r3, r7, #20
  40173c:	461a      	mov	r2, r3
  40173e:	2169      	movs	r1, #105	; 0x69
  401740:	4822      	ldr	r0, [pc, #136]	; (4017cc <TestCode+0xbc>)
  401742:	4b26      	ldr	r3, [pc, #152]	; (4017dc <TestCode+0xcc>)
  401744:	4798      	blx	r3
	#else
		ICMReadAccDataAllTo(twiPort, ICM_ADDR,(uint16_t*)accVals, 50);
	#endif
    GetOrientation(accVals, oriVals);
  401746:	f107 0208 	add.w	r2, r7, #8
  40174a:	f107 0314 	add.w	r3, r7, #20
  40174e:	4611      	mov	r1, r2
  401750:	4618      	mov	r0, r3
  401752:	4b23      	ldr	r3, [pc, #140]	; (4017e0 <TestCode+0xd0>)
  401754:	4798      	blx	r3
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
        PrintFlt(oriVals[0]);
        sprintf(LogBuff,"\r\n");
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
    #endif
    ptr = (uint16_t*)&oriVals[0];
  401756:	f107 0308 	add.w	r3, r7, #8
  40175a:	61fb      	str	r3, [r7, #28]
    mBusRegs[MBUS_REG_ANXH] = ptr[1];
  40175c:	69fb      	ldr	r3, [r7, #28]
  40175e:	885a      	ldrh	r2, [r3, #2]
  401760:	4b19      	ldr	r3, [pc, #100]	; (4017c8 <TestCode+0xb8>)
  401762:	83da      	strh	r2, [r3, #30]
    mBusRegs[MBUS_REG_ANXL] = ptr[0];
  401764:	69fb      	ldr	r3, [r7, #28]
  401766:	881a      	ldrh	r2, [r3, #0]
  401768:	4b17      	ldr	r3, [pc, #92]	; (4017c8 <TestCode+0xb8>)
  40176a:	839a      	strh	r2, [r3, #28]
    pvAngle = GetPvAngle();
  40176c:	4b1d      	ldr	r3, [pc, #116]	; (4017e4 <TestCode+0xd4>)
  40176e:	4798      	blx	r3
  401770:	4603      	mov	r3, r0
  401772:	607b      	str	r3, [r7, #4]
    ptr = (uint16_t*)&pvAngle;
  401774:	1d3b      	adds	r3, r7, #4
  401776:	61fb      	str	r3, [r7, #28]
    mBusRegs[MBUS_REG_PVANGLEH] = ptr[1];
  401778:	69fb      	ldr	r3, [r7, #28]
  40177a:	885a      	ldrh	r2, [r3, #2]
  40177c:	4b12      	ldr	r3, [pc, #72]	; (4017c8 <TestCode+0xb8>)
  40177e:	845a      	strh	r2, [r3, #34]	; 0x22
    mBusRegs[MBUS_REG_PVANGLEL] = ptr[0];
  401780:	69fb      	ldr	r3, [r7, #28]
  401782:	881a      	ldrh	r2, [r3, #0]
  401784:	4b10      	ldr	r3, [pc, #64]	; (4017c8 <TestCode+0xb8>)
  401786:	841a      	strh	r2, [r3, #32]
    
	if(mBusRegs[MBUS_REG_MOTDR])
  401788:	4b0f      	ldr	r3, [pc, #60]	; (4017c8 <TestCode+0xb8>)
  40178a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
  40178c:	2b00      	cmp	r3, #0
  40178e:	d006      	beq.n	40179e <TestCode+0x8e>
	{
		gpio_set_pin_low(PIN_MOTOR_IN1_IDX);
  401790:	2020      	movs	r0, #32
  401792:	4b15      	ldr	r3, [pc, #84]	; (4017e8 <TestCode+0xd8>)
  401794:	4798      	blx	r3
		gpio_set_pin_high(PIN_MOTOR_IN2_IDX);
  401796:	2021      	movs	r0, #33	; 0x21
  401798:	4b14      	ldr	r3, [pc, #80]	; (4017ec <TestCode+0xdc>)
  40179a:	4798      	blx	r3
  40179c:	e005      	b.n	4017aa <TestCode+0x9a>
	}
	else
	{
		gpio_set_pin_high(PIN_MOTOR_IN1_IDX);
  40179e:	2020      	movs	r0, #32
  4017a0:	4b12      	ldr	r3, [pc, #72]	; (4017ec <TestCode+0xdc>)
  4017a2:	4798      	blx	r3
		gpio_set_pin_low(PIN_MOTOR_IN2_IDX);
  4017a4:	2021      	movs	r0, #33	; 0x21
  4017a6:	4b10      	ldr	r3, [pc, #64]	; (4017e8 <TestCode+0xd8>)
  4017a8:	4798      	blx	r3
	}

    if(mBusRegs[MBUS_REG_MOTON])
  4017aa:	4b07      	ldr	r3, [pc, #28]	; (4017c8 <TestCode+0xb8>)
  4017ac:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
  4017ae:	2b00      	cmp	r3, #0
  4017b0:	d003      	beq.n	4017ba <TestCode+0xaa>
        //Disable Charge Ctrlr
		//ccEn = 0;
        /* Turn Motor On */
		#ifndef MOTOR_CTRL_A4955
		#else
			gpio_set_pin_high(PIN_MOTOR_SLP_IDX);
  4017b2:	2022      	movs	r0, #34	; 0x22
  4017b4:	4b0d      	ldr	r3, [pc, #52]	; (4017ec <TestCode+0xdc>)
  4017b6:	4798      	blx	r3
		#ifndef MOTOR_CTRL_A4955
		#else
			gpio_set_pin_low(PIN_MOTOR_SLP_IDX);
		#endif
    }
}
  4017b8:	e002      	b.n	4017c0 <TestCode+0xb0>
        //Enable Charge Ctrlr
        //ccEn = 1;
        /* Turn Motor Off */
		#ifndef MOTOR_CTRL_A4955
		#else
			gpio_set_pin_low(PIN_MOTOR_SLP_IDX);
  4017ba:	2022      	movs	r0, #34	; 0x22
  4017bc:	4b0a      	ldr	r3, [pc, #40]	; (4017e8 <TestCode+0xd8>)
  4017be:	4798      	blx	r3
		#endif
    }
}
  4017c0:	bf00      	nop
  4017c2:	3720      	adds	r7, #32
  4017c4:	46bd      	mov	sp, r7
  4017c6:	bd80      	pop	{r7, pc}
  4017c8:	20000484 	.word	0x20000484
  4017cc:	40018000 	.word	0x40018000
  4017d0:	004002f5 	.word	0x004002f5
  4017d4:	2000048a 	.word	0x2000048a
  4017d8:	004003b5 	.word	0x004003b5
  4017dc:	004005ed 	.word	0x004005ed
  4017e0:	004017f1 	.word	0x004017f1
  4017e4:	00401981 	.word	0x00401981
  4017e8:	00404129 	.word	0x00404129
  4017ec:	004040f9 	.word	0x004040f9

004017f0 <GetOrientation>:
        ConsoleWrite((uint8_t *)buff2, strlen(buff2));
    }
#endif

void GetOrientation(int16_t *acc, float *orientation)
{
  4017f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4017f2:	b087      	sub	sp, #28
  4017f4:	af00      	add	r7, sp, #0
  4017f6:	6078      	str	r0, [r7, #4]
  4017f8:	6039      	str	r1, [r7, #0]
    float accFlt[3];
    accFlt[0] = ((float)acc[0])/32768.0f;
  4017fa:	687b      	ldr	r3, [r7, #4]
  4017fc:	f9b3 2000 	ldrsh.w	r2, [r3]
  401800:	4b55      	ldr	r3, [pc, #340]	; (401958 <GetOrientation+0x168>)
  401802:	4610      	mov	r0, r2
  401804:	4798      	blx	r3
  401806:	4602      	mov	r2, r0
  401808:	4b54      	ldr	r3, [pc, #336]	; (40195c <GetOrientation+0x16c>)
  40180a:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
  40180e:	4610      	mov	r0, r2
  401810:	4798      	blx	r3
  401812:	4603      	mov	r3, r0
  401814:	60fb      	str	r3, [r7, #12]
    accFlt[1] = ((float)acc[1])/32768.0f;
  401816:	687b      	ldr	r3, [r7, #4]
  401818:	3302      	adds	r3, #2
  40181a:	f9b3 2000 	ldrsh.w	r2, [r3]
  40181e:	4b4e      	ldr	r3, [pc, #312]	; (401958 <GetOrientation+0x168>)
  401820:	4610      	mov	r0, r2
  401822:	4798      	blx	r3
  401824:	4602      	mov	r2, r0
  401826:	4b4d      	ldr	r3, [pc, #308]	; (40195c <GetOrientation+0x16c>)
  401828:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
  40182c:	4610      	mov	r0, r2
  40182e:	4798      	blx	r3
  401830:	4603      	mov	r3, r0
  401832:	613b      	str	r3, [r7, #16]
    accFlt[2] = ((float)acc[2])/32768.0f;
  401834:	687b      	ldr	r3, [r7, #4]
  401836:	3304      	adds	r3, #4
  401838:	f9b3 2000 	ldrsh.w	r2, [r3]
  40183c:	4b46      	ldr	r3, [pc, #280]	; (401958 <GetOrientation+0x168>)
  40183e:	4610      	mov	r0, r2
  401840:	4798      	blx	r3
  401842:	4602      	mov	r2, r0
  401844:	4b45      	ldr	r3, [pc, #276]	; (40195c <GetOrientation+0x16c>)
  401846:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
  40184a:	4610      	mov	r0, r2
  40184c:	4798      	blx	r3
  40184e:	4603      	mov	r3, r0
  401850:	617b      	str	r3, [r7, #20]
    
    //Equation 25 (Rotate Across X Axis)
    orientation[0] = atan2(accFlt[1], accFlt[2]);
  401852:	693a      	ldr	r2, [r7, #16]
  401854:	4b42      	ldr	r3, [pc, #264]	; (401960 <GetOrientation+0x170>)
  401856:	4610      	mov	r0, r2
  401858:	4798      	blx	r3
  40185a:	4604      	mov	r4, r0
  40185c:	460d      	mov	r5, r1
  40185e:	697a      	ldr	r2, [r7, #20]
  401860:	4b3f      	ldr	r3, [pc, #252]	; (401960 <GetOrientation+0x170>)
  401862:	4610      	mov	r0, r2
  401864:	4798      	blx	r3
  401866:	4602      	mov	r2, r0
  401868:	460b      	mov	r3, r1
  40186a:	4620      	mov	r0, r4
  40186c:	4629      	mov	r1, r5
  40186e:	4c3d      	ldr	r4, [pc, #244]	; (401964 <GetOrientation+0x174>)
  401870:	47a0      	blx	r4
  401872:	460a      	mov	r2, r1
  401874:	4601      	mov	r1, r0
  401876:	4b3c      	ldr	r3, [pc, #240]	; (401968 <GetOrientation+0x178>)
  401878:	4608      	mov	r0, r1
  40187a:	4611      	mov	r1, r2
  40187c:	4798      	blx	r3
  40187e:	4602      	mov	r2, r0
  401880:	683b      	ldr	r3, [r7, #0]
  401882:	601a      	str	r2, [r3, #0]
    //Radian to degrees conversion
    orientation[0] = (180.0f * orientation[0])/(float)M_PI;
  401884:	683b      	ldr	r3, [r7, #0]
  401886:	681a      	ldr	r2, [r3, #0]
  401888:	4b38      	ldr	r3, [pc, #224]	; (40196c <GetOrientation+0x17c>)
  40188a:	4939      	ldr	r1, [pc, #228]	; (401970 <GetOrientation+0x180>)
  40188c:	4610      	mov	r0, r2
  40188e:	4798      	blx	r3
  401890:	4603      	mov	r3, r0
  401892:	461a      	mov	r2, r3
  401894:	4b31      	ldr	r3, [pc, #196]	; (40195c <GetOrientation+0x16c>)
  401896:	4937      	ldr	r1, [pc, #220]	; (401974 <GetOrientation+0x184>)
  401898:	4610      	mov	r0, r2
  40189a:	4798      	blx	r3
  40189c:	4603      	mov	r3, r0
  40189e:	461a      	mov	r2, r3
  4018a0:	683b      	ldr	r3, [r7, #0]
  4018a2:	601a      	str	r2, [r3, #0]
    
    //Equation 26 (Rotate Across Y Axis)
    orientation[1] = sqrt(accFlt[1]*accFlt[1] + accFlt[2]*accFlt[2]);
  4018a4:	683b      	ldr	r3, [r7, #0]
  4018a6:	1d1c      	adds	r4, r3, #4
  4018a8:	693a      	ldr	r2, [r7, #16]
  4018aa:	6939      	ldr	r1, [r7, #16]
  4018ac:	4b2f      	ldr	r3, [pc, #188]	; (40196c <GetOrientation+0x17c>)
  4018ae:	4610      	mov	r0, r2
  4018b0:	4798      	blx	r3
  4018b2:	4603      	mov	r3, r0
  4018b4:	461d      	mov	r5, r3
  4018b6:	697a      	ldr	r2, [r7, #20]
  4018b8:	6979      	ldr	r1, [r7, #20]
  4018ba:	4b2c      	ldr	r3, [pc, #176]	; (40196c <GetOrientation+0x17c>)
  4018bc:	4610      	mov	r0, r2
  4018be:	4798      	blx	r3
  4018c0:	4603      	mov	r3, r0
  4018c2:	461a      	mov	r2, r3
  4018c4:	4b2c      	ldr	r3, [pc, #176]	; (401978 <GetOrientation+0x188>)
  4018c6:	4611      	mov	r1, r2
  4018c8:	4628      	mov	r0, r5
  4018ca:	4798      	blx	r3
  4018cc:	4603      	mov	r3, r0
  4018ce:	461a      	mov	r2, r3
  4018d0:	4b23      	ldr	r3, [pc, #140]	; (401960 <GetOrientation+0x170>)
  4018d2:	4610      	mov	r0, r2
  4018d4:	4798      	blx	r3
  4018d6:	4602      	mov	r2, r0
  4018d8:	460b      	mov	r3, r1
  4018da:	4610      	mov	r0, r2
  4018dc:	4619      	mov	r1, r3
  4018de:	4b27      	ldr	r3, [pc, #156]	; (40197c <GetOrientation+0x18c>)
  4018e0:	4798      	blx	r3
  4018e2:	460a      	mov	r2, r1
  4018e4:	4601      	mov	r1, r0
  4018e6:	4b20      	ldr	r3, [pc, #128]	; (401968 <GetOrientation+0x178>)
  4018e8:	4608      	mov	r0, r1
  4018ea:	4611      	mov	r1, r2
  4018ec:	4798      	blx	r3
  4018ee:	4603      	mov	r3, r0
  4018f0:	6023      	str	r3, [r4, #0]
    orientation[1] = atan2(-accFlt[0], orientation[1]); 
  4018f2:	683b      	ldr	r3, [r7, #0]
  4018f4:	1d1c      	adds	r4, r3, #4
  4018f6:	68fb      	ldr	r3, [r7, #12]
  4018f8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
  4018fc:	4b18      	ldr	r3, [pc, #96]	; (401960 <GetOrientation+0x170>)
  4018fe:	4610      	mov	r0, r2
  401900:	4798      	blx	r3
  401902:	4605      	mov	r5, r0
  401904:	460e      	mov	r6, r1
  401906:	683b      	ldr	r3, [r7, #0]
  401908:	3304      	adds	r3, #4
  40190a:	681a      	ldr	r2, [r3, #0]
  40190c:	4b14      	ldr	r3, [pc, #80]	; (401960 <GetOrientation+0x170>)
  40190e:	4610      	mov	r0, r2
  401910:	4798      	blx	r3
  401912:	4602      	mov	r2, r0
  401914:	460b      	mov	r3, r1
  401916:	4628      	mov	r0, r5
  401918:	4631      	mov	r1, r6
  40191a:	4d12      	ldr	r5, [pc, #72]	; (401964 <GetOrientation+0x174>)
  40191c:	47a8      	blx	r5
  40191e:	460a      	mov	r2, r1
  401920:	4601      	mov	r1, r0
  401922:	4b11      	ldr	r3, [pc, #68]	; (401968 <GetOrientation+0x178>)
  401924:	4608      	mov	r0, r1
  401926:	4611      	mov	r1, r2
  401928:	4798      	blx	r3
  40192a:	4603      	mov	r3, r0
  40192c:	6023      	str	r3, [r4, #0]
    //Radian to degrees conversion
    orientation[1] = (180.0f * orientation[1])/(float)M_PI;
  40192e:	683b      	ldr	r3, [r7, #0]
  401930:	1d1c      	adds	r4, r3, #4
  401932:	683b      	ldr	r3, [r7, #0]
  401934:	3304      	adds	r3, #4
  401936:	681a      	ldr	r2, [r3, #0]
  401938:	4b0c      	ldr	r3, [pc, #48]	; (40196c <GetOrientation+0x17c>)
  40193a:	490d      	ldr	r1, [pc, #52]	; (401970 <GetOrientation+0x180>)
  40193c:	4610      	mov	r0, r2
  40193e:	4798      	blx	r3
  401940:	4603      	mov	r3, r0
  401942:	461a      	mov	r2, r3
  401944:	4b05      	ldr	r3, [pc, #20]	; (40195c <GetOrientation+0x16c>)
  401946:	490b      	ldr	r1, [pc, #44]	; (401974 <GetOrientation+0x184>)
  401948:	4610      	mov	r0, r2
  40194a:	4798      	blx	r3
  40194c:	4603      	mov	r3, r0
  40194e:	6023      	str	r3, [r4, #0]
}
  401950:	bf00      	nop
  401952:	371c      	adds	r7, #28
  401954:	46bd      	mov	sp, r7
  401956:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401958:	0040a9a9 	.word	0x0040a9a9
  40195c:	0040abb9 	.word	0x0040abb9
  401960:	0040a13d 	.word	0x0040a13d
  401964:	00407899 	.word	0x00407899
  401968:	0040a795 	.word	0x0040a795
  40196c:	0040aa51 	.word	0x0040aa51
  401970:	43340000 	.word	0x43340000
  401974:	40490fdb 	.word	0x40490fdb
  401978:	0040a841 	.word	0x0040a841
  40197c:	0040789d 	.word	0x0040789d

00401980 <GetPvAngle>:

float GetPvAngle(void)
{
  401980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401984:	b0af      	sub	sp, #188	; 0xbc
  401986:	af00      	add	r7, sp, #0
	float e, f, g, h, i, j, k, l, m, n, o, p;
	float q, r, s, t;
	float timeInSecs;
    
    //BCD to Int Conversion
    date = ((mBusRegs[MBUS_REG_DD]>>4)*10) + (mBusRegs[MBUS_REG_DD]&0x000F); 
  401988:	4b4a      	ldr	r3, [pc, #296]	; (401ab4 <GetPvAngle+0x134>)
  40198a:	891b      	ldrh	r3, [r3, #8]
  40198c:	091b      	lsrs	r3, r3, #4
  40198e:	b29b      	uxth	r3, r3
  401990:	461a      	mov	r2, r3
  401992:	0092      	lsls	r2, r2, #2
  401994:	4413      	add	r3, r2
  401996:	005b      	lsls	r3, r3, #1
  401998:	b29a      	uxth	r2, r3
  40199a:	4b46      	ldr	r3, [pc, #280]	; (401ab4 <GetPvAngle+0x134>)
  40199c:	891b      	ldrh	r3, [r3, #8]
  40199e:	f003 030f 	and.w	r3, r3, #15
  4019a2:	b29b      	uxth	r3, r3
  4019a4:	4413      	add	r3, r2
  4019a6:	b29b      	uxth	r3, r3
  4019a8:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
    mon = ((mBusRegs[MBUS_REG_MM]>>4)*10) + (mBusRegs[MBUS_REG_MM]&0x000F); 
  4019ac:	4b41      	ldr	r3, [pc, #260]	; (401ab4 <GetPvAngle+0x134>)
  4019ae:	895b      	ldrh	r3, [r3, #10]
  4019b0:	091b      	lsrs	r3, r3, #4
  4019b2:	b29b      	uxth	r3, r3
  4019b4:	461a      	mov	r2, r3
  4019b6:	0092      	lsls	r2, r2, #2
  4019b8:	4413      	add	r3, r2
  4019ba:	005b      	lsls	r3, r3, #1
  4019bc:	b29a      	uxth	r2, r3
  4019be:	4b3d      	ldr	r3, [pc, #244]	; (401ab4 <GetPvAngle+0x134>)
  4019c0:	895b      	ldrh	r3, [r3, #10]
  4019c2:	f003 030f 	and.w	r3, r3, #15
  4019c6:	b29b      	uxth	r3, r3
  4019c8:	4413      	add	r3, r2
  4019ca:	b29b      	uxth	r3, r3
  4019cc:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
    year = ((mBusRegs[MBUS_REG_YY]>>4)*10) + (mBusRegs[MBUS_REG_YY]&0x000F); 
  4019d0:	4b38      	ldr	r3, [pc, #224]	; (401ab4 <GetPvAngle+0x134>)
  4019d2:	899b      	ldrh	r3, [r3, #12]
  4019d4:	091b      	lsrs	r3, r3, #4
  4019d6:	b29b      	uxth	r3, r3
  4019d8:	461a      	mov	r2, r3
  4019da:	0092      	lsls	r2, r2, #2
  4019dc:	4413      	add	r3, r2
  4019de:	005b      	lsls	r3, r3, #1
  4019e0:	b29a      	uxth	r2, r3
  4019e2:	4b34      	ldr	r3, [pc, #208]	; (401ab4 <GetPvAngle+0x134>)
  4019e4:	899b      	ldrh	r3, [r3, #12]
  4019e6:	f003 030f 	and.w	r3, r3, #15
  4019ea:	b29b      	uxth	r3, r3
  4019ec:	4413      	add	r3, r2
  4019ee:	b29b      	uxth	r3, r3
  4019f0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
    year += 2000;
  4019f4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
  4019f8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
  4019fc:	b29b      	uxth	r3, r3
  4019fe:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
    hrs = ((mBusRegs[MBUS_REG_HRS]>>4)*10) + (mBusRegs[MBUS_REG_HRS]&0x000F); 
  401a02:	4b2c      	ldr	r3, [pc, #176]	; (401ab4 <GetPvAngle+0x134>)
  401a04:	889b      	ldrh	r3, [r3, #4]
  401a06:	091b      	lsrs	r3, r3, #4
  401a08:	b29b      	uxth	r3, r3
  401a0a:	461a      	mov	r2, r3
  401a0c:	0092      	lsls	r2, r2, #2
  401a0e:	4413      	add	r3, r2
  401a10:	005b      	lsls	r3, r3, #1
  401a12:	b29a      	uxth	r2, r3
  401a14:	4b27      	ldr	r3, [pc, #156]	; (401ab4 <GetPvAngle+0x134>)
  401a16:	889b      	ldrh	r3, [r3, #4]
  401a18:	f003 030f 	and.w	r3, r3, #15
  401a1c:	b29b      	uxth	r3, r3
  401a1e:	4413      	add	r3, r2
  401a20:	b29b      	uxth	r3, r3
  401a22:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
    min = ((mBusRegs[MBUS_REG_MIN]>>4)*10) + (mBusRegs[MBUS_REG_MIN]&0x000F); 
  401a26:	4b23      	ldr	r3, [pc, #140]	; (401ab4 <GetPvAngle+0x134>)
  401a28:	885b      	ldrh	r3, [r3, #2]
  401a2a:	091b      	lsrs	r3, r3, #4
  401a2c:	b29b      	uxth	r3, r3
  401a2e:	461a      	mov	r2, r3
  401a30:	0092      	lsls	r2, r2, #2
  401a32:	4413      	add	r3, r2
  401a34:	005b      	lsls	r3, r3, #1
  401a36:	b29a      	uxth	r2, r3
  401a38:	4b1e      	ldr	r3, [pc, #120]	; (401ab4 <GetPvAngle+0x134>)
  401a3a:	885b      	ldrh	r3, [r3, #2]
  401a3c:	f003 030f 	and.w	r3, r3, #15
  401a40:	b29b      	uxth	r3, r3
  401a42:	4413      	add	r3, r2
  401a44:	b29b      	uxth	r3, r3
  401a46:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    sec = ((mBusRegs[MBUS_REG_SEC]>>4)*10) + (mBusRegs[MBUS_REG_SEC]&0x000F); 
  401a4a:	4b1a      	ldr	r3, [pc, #104]	; (401ab4 <GetPvAngle+0x134>)
  401a4c:	881b      	ldrh	r3, [r3, #0]
  401a4e:	091b      	lsrs	r3, r3, #4
  401a50:	b29b      	uxth	r3, r3
  401a52:	461a      	mov	r2, r3
  401a54:	0092      	lsls	r2, r2, #2
  401a56:	4413      	add	r3, r2
  401a58:	005b      	lsls	r3, r3, #1
  401a5a:	b29a      	uxth	r2, r3
  401a5c:	4b15      	ldr	r3, [pc, #84]	; (401ab4 <GetPvAngle+0x134>)
  401a5e:	881b      	ldrh	r3, [r3, #0]
  401a60:	f003 030f 	and.w	r3, r3, #15
  401a64:	b29b      	uxth	r3, r3
  401a66:	4413      	add	r3, r2
  401a68:	b29b      	uxth	r3, r3
  401a6a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
    #ifdef LOG_EN
        sprintf(LogBuff,"%d,%d,%d,", hrs, min, sec);
		ConsoleWrite((uint8_t *)LogBuff, strlen(LogBuff));
    #endif
    
    timeInSecs = (hrs*3600 + min*60 + sec)/86400.0f;
  401a6e:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	; 0xa8
  401a72:	f44f 6261 	mov.w	r2, #3600	; 0xe10
  401a76:	fb02 f103 	mul.w	r1, r2, r3
  401a7a:	f9b7 20a6 	ldrsh.w	r2, [r7, #166]	; 0xa6
  401a7e:	4613      	mov	r3, r2
  401a80:	011b      	lsls	r3, r3, #4
  401a82:	1a9b      	subs	r3, r3, r2
  401a84:	009b      	lsls	r3, r3, #2
  401a86:	18ca      	adds	r2, r1, r3
  401a88:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
  401a8c:	441a      	add	r2, r3
  401a8e:	4b0a      	ldr	r3, [pc, #40]	; (401ab8 <GetPvAngle+0x138>)
  401a90:	4610      	mov	r0, r2
  401a92:	4798      	blx	r3
  401a94:	4602      	mov	r2, r0
  401a96:	4b09      	ldr	r3, [pc, #36]	; (401abc <GetPvAngle+0x13c>)
  401a98:	4909      	ldr	r1, [pc, #36]	; (401ac0 <GetPvAngle+0x140>)
  401a9a:	4610      	mov	r0, r2
  401a9c:	4798      	blx	r3
  401a9e:	4603      	mov	r3, r0
  401aa0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    //Angle Calcualation Algorithm
	if (mon <= 2)
  401aa4:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
  401aa8:	2b02      	cmp	r3, #2
  401aaa:	dc0b      	bgt.n	401ac4 <GetPvAngle+0x144>
	{
		x1 = 1;
  401aac:	2301      	movs	r3, #1
  401aae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  401ab2:	e00a      	b.n	401aca <GetPvAngle+0x14a>
  401ab4:	20000484 	.word	0x20000484
  401ab8:	0040a9a9 	.word	0x0040a9a9
  401abc:	0040abb9 	.word	0x0040abb9
  401ac0:	47a8c000 	.word	0x47a8c000
	}
	else
	{
		x1 = 0;
  401ac4:	2300      	movs	r3, #0
  401ac6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	}
	x2 = 12 * x1;
  401aca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
  401ace:	4613      	mov	r3, r2
  401ad0:	005b      	lsls	r3, r3, #1
  401ad2:	4413      	add	r3, r2
  401ad4:	009b      	lsls	r3, r3, #2
  401ad6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	x3 = x2 - 3;
  401ada:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
  401ade:	3b03      	subs	r3, #3
  401ae0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	x4 = mon + x3;
  401ae4:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	; 0xac
  401ae8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
  401aec:	4413      	add	r3, r2
  401aee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	x5 = 4800 - x1;
  401af2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
  401af6:	f5c3 5396 	rsb	r3, r3, #4800	; 0x12c0
  401afa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	x7 = x5 + year;
  401afe:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
  401b02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
  401b06:	4413      	add	r3, r2
  401b08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	y0 = 153*x4;
  401b0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
  401b10:	4613      	mov	r3, r2
  401b12:	00db      	lsls	r3, r3, #3
  401b14:	4413      	add	r3, r2
  401b16:	011a      	lsls	r2, r3, #4
  401b18:	4413      	add	r3, r2
  401b1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	y1 = y0 + 2;
  401b1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
  401b22:	3302      	adds	r3, #2
  401b24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	y2 = y1 / 5.0f;
  401b28:	4b8a      	ldr	r3, [pc, #552]	; (401d54 <GetPvAngle+0x3d4>)
  401b2a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
  401b2e:	4798      	blx	r3
  401b30:	4602      	mov	r2, r0
  401b32:	4b89      	ldr	r3, [pc, #548]	; (401d58 <GetPvAngle+0x3d8>)
  401b34:	4989      	ldr	r1, [pc, #548]	; (401d5c <GetPvAngle+0x3dc>)
  401b36:	4610      	mov	r0, r2
  401b38:	4798      	blx	r3
  401b3a:	4603      	mov	r3, r0
  401b3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	y3 = date + y2;
  401b40:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
  401b44:	4b83      	ldr	r3, [pc, #524]	; (401d54 <GetPvAngle+0x3d4>)
  401b46:	4610      	mov	r0, r2
  401b48:	4798      	blx	r3
  401b4a:	4602      	mov	r2, r0
  401b4c:	4b84      	ldr	r3, [pc, #528]	; (401d60 <GetPvAngle+0x3e0>)
  401b4e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
  401b52:	4610      	mov	r0, r2
  401b54:	4798      	blx	r3
  401b56:	4603      	mov	r3, r0
  401b58:	67fb      	str	r3, [r7, #124]	; 0x7c
	y4 = 365 * x7;
  401b5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
  401b5e:	f240 126d 	movw	r2, #365	; 0x16d
  401b62:	fb02 f303 	mul.w	r3, r2, r3
  401b66:	67bb      	str	r3, [r7, #120]	; 0x78
	y5 = y3 + y4;
  401b68:	4b7a      	ldr	r3, [pc, #488]	; (401d54 <GetPvAngle+0x3d4>)
  401b6a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
  401b6c:	4798      	blx	r3
  401b6e:	4602      	mov	r2, r0
  401b70:	4b7b      	ldr	r3, [pc, #492]	; (401d60 <GetPvAngle+0x3e0>)
  401b72:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
  401b74:	4610      	mov	r0, r2
  401b76:	4798      	blx	r3
  401b78:	4603      	mov	r3, r0
  401b7a:	677b      	str	r3, [r7, #116]	; 0x74
	y6 = x7 / 4.0f;
  401b7c:	4b75      	ldr	r3, [pc, #468]	; (401d54 <GetPvAngle+0x3d4>)
  401b7e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
  401b82:	4798      	blx	r3
  401b84:	4602      	mov	r2, r0
  401b86:	4b74      	ldr	r3, [pc, #464]	; (401d58 <GetPvAngle+0x3d8>)
  401b88:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  401b8c:	4610      	mov	r0, r2
  401b8e:	4798      	blx	r3
  401b90:	4603      	mov	r3, r0
  401b92:	673b      	str	r3, [r7, #112]	; 0x70
	y7 = y5 + y6;
  401b94:	4b72      	ldr	r3, [pc, #456]	; (401d60 <GetPvAngle+0x3e0>)
  401b96:	6f39      	ldr	r1, [r7, #112]	; 0x70
  401b98:	6f78      	ldr	r0, [r7, #116]	; 0x74
  401b9a:	4798      	blx	r3
  401b9c:	4603      	mov	r3, r0
  401b9e:	66fb      	str	r3, [r7, #108]	; 0x6c
	y8 = x7 / 100.0f;
  401ba0:	4b6c      	ldr	r3, [pc, #432]	; (401d54 <GetPvAngle+0x3d4>)
  401ba2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
  401ba6:	4798      	blx	r3
  401ba8:	4602      	mov	r2, r0
  401baa:	4b6b      	ldr	r3, [pc, #428]	; (401d58 <GetPvAngle+0x3d8>)
  401bac:	496d      	ldr	r1, [pc, #436]	; (401d64 <GetPvAngle+0x3e4>)
  401bae:	4610      	mov	r0, r2
  401bb0:	4798      	blx	r3
  401bb2:	4603      	mov	r3, r0
  401bb4:	66bb      	str	r3, [r7, #104]	; 0x68
	y9 = y7 - y8;
  401bb6:	4b6c      	ldr	r3, [pc, #432]	; (401d68 <GetPvAngle+0x3e8>)
  401bb8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
  401bba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
  401bbc:	4798      	blx	r3
  401bbe:	4603      	mov	r3, r0
  401bc0:	667b      	str	r3, [r7, #100]	; 0x64
	y10 = x7 / 400.0f;
  401bc2:	4b64      	ldr	r3, [pc, #400]	; (401d54 <GetPvAngle+0x3d4>)
  401bc4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
  401bc8:	4798      	blx	r3
  401bca:	4602      	mov	r2, r0
  401bcc:	4b62      	ldr	r3, [pc, #392]	; (401d58 <GetPvAngle+0x3d8>)
  401bce:	4967      	ldr	r1, [pc, #412]	; (401d6c <GetPvAngle+0x3ec>)
  401bd0:	4610      	mov	r0, r2
  401bd2:	4798      	blx	r3
  401bd4:	4603      	mov	r3, r0
  401bd6:	663b      	str	r3, [r7, #96]	; 0x60
	y11 = y9 + y10;
  401bd8:	4b61      	ldr	r3, [pc, #388]	; (401d60 <GetPvAngle+0x3e0>)
  401bda:	6e39      	ldr	r1, [r7, #96]	; 0x60
  401bdc:	6e78      	ldr	r0, [r7, #100]	; 0x64
  401bde:	4798      	blx	r3
  401be0:	4603      	mov	r3, r0
  401be2:	65fb      	str	r3, [r7, #92]	; 0x5c

	x9 = y11 - 32045;
  401be4:	4b60      	ldr	r3, [pc, #384]	; (401d68 <GetPvAngle+0x3e8>)
  401be6:	4962      	ldr	r1, [pc, #392]	; (401d70 <GetPvAngle+0x3f0>)
  401be8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
  401bea:	4798      	blx	r3
  401bec:	4603      	mov	r3, r0
  401bee:	65bb      	str	r3, [r7, #88]	; 0x58
	y12 = hrs - 12;
  401bf0:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	; 0xa8
  401bf4:	3b0c      	subs	r3, #12
  401bf6:	657b      	str	r3, [r7, #84]	; 0x54
	y13 = y12 / 24.0f;
  401bf8:	4b56      	ldr	r3, [pc, #344]	; (401d54 <GetPvAngle+0x3d4>)
  401bfa:	6d78      	ldr	r0, [r7, #84]	; 0x54
  401bfc:	4798      	blx	r3
  401bfe:	4602      	mov	r2, r0
  401c00:	4b55      	ldr	r3, [pc, #340]	; (401d58 <GetPvAngle+0x3d8>)
  401c02:	495c      	ldr	r1, [pc, #368]	; (401d74 <GetPvAngle+0x3f4>)
  401c04:	4610      	mov	r0, r2
  401c06:	4798      	blx	r3
  401c08:	4603      	mov	r3, r0
  401c0a:	653b      	str	r3, [r7, #80]	; 0x50
	y14 = min / 1440.0f;
  401c0c:	f9b7 20a6 	ldrsh.w	r2, [r7, #166]	; 0xa6
  401c10:	4b50      	ldr	r3, [pc, #320]	; (401d54 <GetPvAngle+0x3d4>)
  401c12:	4610      	mov	r0, r2
  401c14:	4798      	blx	r3
  401c16:	4602      	mov	r2, r0
  401c18:	4b4f      	ldr	r3, [pc, #316]	; (401d58 <GetPvAngle+0x3d8>)
  401c1a:	4957      	ldr	r1, [pc, #348]	; (401d78 <GetPvAngle+0x3f8>)
  401c1c:	4610      	mov	r0, r2
  401c1e:	4798      	blx	r3
  401c20:	4603      	mov	r3, r0
  401c22:	64fb      	str	r3, [r7, #76]	; 0x4c
	y15 = y13 + y14;
  401c24:	4b4e      	ldr	r3, [pc, #312]	; (401d60 <GetPvAngle+0x3e0>)
  401c26:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
  401c28:	6d38      	ldr	r0, [r7, #80]	; 0x50
  401c2a:	4798      	blx	r3
  401c2c:	4603      	mov	r3, r0
  401c2e:	64bb      	str	r3, [r7, #72]	; 0x48
	y16 = sec / 86400.0f;
  401c30:	f9b7 20a4 	ldrsh.w	r2, [r7, #164]	; 0xa4
  401c34:	4b47      	ldr	r3, [pc, #284]	; (401d54 <GetPvAngle+0x3d4>)
  401c36:	4610      	mov	r0, r2
  401c38:	4798      	blx	r3
  401c3a:	4602      	mov	r2, r0
  401c3c:	4b46      	ldr	r3, [pc, #280]	; (401d58 <GetPvAngle+0x3d8>)
  401c3e:	494f      	ldr	r1, [pc, #316]	; (401d7c <GetPvAngle+0x3fc>)
  401c40:	4610      	mov	r0, r2
  401c42:	4798      	blx	r3
  401c44:	4603      	mov	r3, r0
  401c46:	647b      	str	r3, [r7, #68]	; 0x44
	x13 = y15 + y16;
  401c48:	4b45      	ldr	r3, [pc, #276]	; (401d60 <GetPvAngle+0x3e0>)
  401c4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
  401c4c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
  401c4e:	4798      	blx	r3
  401c50:	4603      	mov	r3, r0
  401c52:	643b      	str	r3, [r7, #64]	; 0x40

	e = x9 + x13;
  401c54:	4b42      	ldr	r3, [pc, #264]	; (401d60 <GetPvAngle+0x3e0>)
  401c56:	6c39      	ldr	r1, [r7, #64]	; 0x40
  401c58:	6db8      	ldr	r0, [r7, #88]	; 0x58
  401c5a:	4798      	blx	r3
  401c5c:	4603      	mov	r3, r0
  401c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
	f = (e - 2451545.0f) / 36525.0f;
  401c60:	4b41      	ldr	r3, [pc, #260]	; (401d68 <GetPvAngle+0x3e8>)
  401c62:	4947      	ldr	r1, [pc, #284]	; (401d80 <GetPvAngle+0x400>)
  401c64:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
  401c66:	4798      	blx	r3
  401c68:	4603      	mov	r3, r0
  401c6a:	461a      	mov	r2, r3
  401c6c:	4b3a      	ldr	r3, [pc, #232]	; (401d58 <GetPvAngle+0x3d8>)
  401c6e:	4945      	ldr	r1, [pc, #276]	; (401d84 <GetPvAngle+0x404>)
  401c70:	4610      	mov	r0, r2
  401c72:	4798      	blx	r3
  401c74:	4603      	mov	r3, r0
  401c76:	63bb      	str	r3, [r7, #56]	; 0x38
	g = ((int)(280.46646f + f*(36000.76983f + f*0.0003032f))) % 360; //mod
  401c78:	4b43      	ldr	r3, [pc, #268]	; (401d88 <GetPvAngle+0x408>)
  401c7a:	4944      	ldr	r1, [pc, #272]	; (401d8c <GetPvAngle+0x40c>)
  401c7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  401c7e:	4798      	blx	r3
  401c80:	4603      	mov	r3, r0
  401c82:	461a      	mov	r2, r3
  401c84:	4b36      	ldr	r3, [pc, #216]	; (401d60 <GetPvAngle+0x3e0>)
  401c86:	4942      	ldr	r1, [pc, #264]	; (401d90 <GetPvAngle+0x410>)
  401c88:	4610      	mov	r0, r2
  401c8a:	4798      	blx	r3
  401c8c:	4603      	mov	r3, r0
  401c8e:	461a      	mov	r2, r3
  401c90:	4b3d      	ldr	r3, [pc, #244]	; (401d88 <GetPvAngle+0x408>)
  401c92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  401c94:	4610      	mov	r0, r2
  401c96:	4798      	blx	r3
  401c98:	4603      	mov	r3, r0
  401c9a:	461a      	mov	r2, r3
  401c9c:	4b30      	ldr	r3, [pc, #192]	; (401d60 <GetPvAngle+0x3e0>)
  401c9e:	493d      	ldr	r1, [pc, #244]	; (401d94 <GetPvAngle+0x414>)
  401ca0:	4610      	mov	r0, r2
  401ca2:	4798      	blx	r3
  401ca4:	4603      	mov	r3, r0
  401ca6:	461a      	mov	r2, r3
  401ca8:	4b3b      	ldr	r3, [pc, #236]	; (401d98 <GetPvAngle+0x418>)
  401caa:	4610      	mov	r0, r2
  401cac:	4798      	blx	r3
  401cae:	4603      	mov	r3, r0
  401cb0:	4a3a      	ldr	r2, [pc, #232]	; (401d9c <GetPvAngle+0x41c>)
  401cb2:	fb83 1202 	smull	r1, r2, r3, r2
  401cb6:	441a      	add	r2, r3
  401cb8:	1211      	asrs	r1, r2, #8
  401cba:	17da      	asrs	r2, r3, #31
  401cbc:	1a8a      	subs	r2, r1, r2
  401cbe:	f44f 71b4 	mov.w	r1, #360	; 0x168
  401cc2:	fb01 f202 	mul.w	r2, r1, r2
  401cc6:	1a9a      	subs	r2, r3, r2
  401cc8:	4b22      	ldr	r3, [pc, #136]	; (401d54 <GetPvAngle+0x3d4>)
  401cca:	4610      	mov	r0, r2
  401ccc:	4798      	blx	r3
  401cce:	4603      	mov	r3, r0
  401cd0:	637b      	str	r3, [r7, #52]	; 0x34
	h = 357.52911f + f*(35999.05029f - 0.0001537f*f);
  401cd2:	4b2d      	ldr	r3, [pc, #180]	; (401d88 <GetPvAngle+0x408>)
  401cd4:	4932      	ldr	r1, [pc, #200]	; (401da0 <GetPvAngle+0x420>)
  401cd6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  401cd8:	4798      	blx	r3
  401cda:	4603      	mov	r3, r0
  401cdc:	461a      	mov	r2, r3
  401cde:	4b22      	ldr	r3, [pc, #136]	; (401d68 <GetPvAngle+0x3e8>)
  401ce0:	4611      	mov	r1, r2
  401ce2:	4830      	ldr	r0, [pc, #192]	; (401da4 <GetPvAngle+0x424>)
  401ce4:	4798      	blx	r3
  401ce6:	4603      	mov	r3, r0
  401ce8:	461a      	mov	r2, r3
  401cea:	4b27      	ldr	r3, [pc, #156]	; (401d88 <GetPvAngle+0x408>)
  401cec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  401cee:	4610      	mov	r0, r2
  401cf0:	4798      	blx	r3
  401cf2:	4603      	mov	r3, r0
  401cf4:	461a      	mov	r2, r3
  401cf6:	4b1a      	ldr	r3, [pc, #104]	; (401d60 <GetPvAngle+0x3e0>)
  401cf8:	492b      	ldr	r1, [pc, #172]	; (401da8 <GetPvAngle+0x428>)
  401cfa:	4610      	mov	r0, r2
  401cfc:	4798      	blx	r3
  401cfe:	4603      	mov	r3, r0
  401d00:	633b      	str	r3, [r7, #48]	; 0x30
	i = 0.016708634f - f*(0.000042037f + 0.0000001267f*f);
  401d02:	4b21      	ldr	r3, [pc, #132]	; (401d88 <GetPvAngle+0x408>)
  401d04:	4929      	ldr	r1, [pc, #164]	; (401dac <GetPvAngle+0x42c>)
  401d06:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  401d08:	4798      	blx	r3
  401d0a:	4603      	mov	r3, r0
  401d0c:	461a      	mov	r2, r3
  401d0e:	4b14      	ldr	r3, [pc, #80]	; (401d60 <GetPvAngle+0x3e0>)
  401d10:	4927      	ldr	r1, [pc, #156]	; (401db0 <GetPvAngle+0x430>)
  401d12:	4610      	mov	r0, r2
  401d14:	4798      	blx	r3
  401d16:	4603      	mov	r3, r0
  401d18:	461a      	mov	r2, r3
  401d1a:	4b1b      	ldr	r3, [pc, #108]	; (401d88 <GetPvAngle+0x408>)
  401d1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  401d1e:	4610      	mov	r0, r2
  401d20:	4798      	blx	r3
  401d22:	4603      	mov	r3, r0
  401d24:	461a      	mov	r2, r3
  401d26:	4b10      	ldr	r3, [pc, #64]	; (401d68 <GetPvAngle+0x3e8>)
  401d28:	4611      	mov	r1, r2
  401d2a:	4822      	ldr	r0, [pc, #136]	; (401db4 <GetPvAngle+0x434>)
  401d2c:	4798      	blx	r3
  401d2e:	4603      	mov	r3, r0
  401d30:	62fb      	str	r3, [r7, #44]	; 0x2c
	j = sin(Rad(h))*(1.914602f - f*(0.004817f + 0.000014f*f));
  401d32:	6b38      	ldr	r0, [r7, #48]	; 0x30
  401d34:	4b20      	ldr	r3, [pc, #128]	; (401db8 <GetPvAngle+0x438>)
  401d36:	4798      	blx	r3
  401d38:	4602      	mov	r2, r0
  401d3a:	4b20      	ldr	r3, [pc, #128]	; (401dbc <GetPvAngle+0x43c>)
  401d3c:	4610      	mov	r0, r2
  401d3e:	4798      	blx	r3
  401d40:	4603      	mov	r3, r0
  401d42:	460c      	mov	r4, r1
  401d44:	4618      	mov	r0, r3
  401d46:	4621      	mov	r1, r4
  401d48:	4b1d      	ldr	r3, [pc, #116]	; (401dc0 <GetPvAngle+0x440>)
  401d4a:	4798      	blx	r3
  401d4c:	4605      	mov	r5, r0
  401d4e:	460e      	mov	r6, r1
  401d50:	4b0d      	ldr	r3, [pc, #52]	; (401d88 <GetPvAngle+0x408>)
  401d52:	e037      	b.n	401dc4 <GetPvAngle+0x444>
  401d54:	0040a9a9 	.word	0x0040a9a9
  401d58:	0040abb9 	.word	0x0040abb9
  401d5c:	40a00000 	.word	0x40a00000
  401d60:	0040a841 	.word	0x0040a841
  401d64:	42c80000 	.word	0x42c80000
  401d68:	0040a83d 	.word	0x0040a83d
  401d6c:	43c80000 	.word	0x43c80000
  401d70:	46fa5a00 	.word	0x46fa5a00
  401d74:	41c00000 	.word	0x41c00000
  401d78:	44b40000 	.word	0x44b40000
  401d7c:	47a8c000 	.word	0x47a8c000
  401d80:	4a15a164 	.word	0x4a15a164
  401d84:	470ead00 	.word	0x470ead00
  401d88:	0040aa51 	.word	0x0040aa51
  401d8c:	399ef6d1 	.word	0x399ef6d1
  401d90:	470ca0c5 	.word	0x470ca0c5
  401d94:	438c3bb5 	.word	0x438c3bb5
  401d98:	0040addd 	.word	0x0040addd
  401d9c:	b60b60b7 	.word	0xb60b60b7
  401da0:	39212a88 	.word	0x39212a88
  401da4:	470c9f0d 	.word	0x470c9f0d
  401da8:	43b2c3ba 	.word	0x43b2c3ba
  401dac:	34080b08 	.word	0x34080b08
  401db0:	383050e3 	.word	0x383050e3
  401db4:	3c88e08c 	.word	0x3c88e08c
  401db8:	00402811 	.word	0x00402811
  401dbc:	0040a13d 	.word	0x0040a13d
  401dc0:	00407655 	.word	0x00407655
  401dc4:	4994      	ldr	r1, [pc, #592]	; (402018 <GetPvAngle+0x698>)
  401dc6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  401dc8:	4798      	blx	r3
  401dca:	4603      	mov	r3, r0
  401dcc:	461a      	mov	r2, r3
  401dce:	4b93      	ldr	r3, [pc, #588]	; (40201c <GetPvAngle+0x69c>)
  401dd0:	4993      	ldr	r1, [pc, #588]	; (402020 <GetPvAngle+0x6a0>)
  401dd2:	4610      	mov	r0, r2
  401dd4:	4798      	blx	r3
  401dd6:	4603      	mov	r3, r0
  401dd8:	461a      	mov	r2, r3
  401dda:	4b92      	ldr	r3, [pc, #584]	; (402024 <GetPvAngle+0x6a4>)
  401ddc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  401dde:	4610      	mov	r0, r2
  401de0:	4798      	blx	r3
  401de2:	4603      	mov	r3, r0
  401de4:	461a      	mov	r2, r3
  401de6:	4b90      	ldr	r3, [pc, #576]	; (402028 <GetPvAngle+0x6a8>)
  401de8:	4611      	mov	r1, r2
  401dea:	4890      	ldr	r0, [pc, #576]	; (40202c <GetPvAngle+0x6ac>)
  401dec:	4798      	blx	r3
  401dee:	4603      	mov	r3, r0
  401df0:	461a      	mov	r2, r3
  401df2:	4b8f      	ldr	r3, [pc, #572]	; (402030 <GetPvAngle+0x6b0>)
  401df4:	4610      	mov	r0, r2
  401df6:	4798      	blx	r3
  401df8:	4602      	mov	r2, r0
  401dfa:	460b      	mov	r3, r1
  401dfc:	4c8d      	ldr	r4, [pc, #564]	; (402034 <GetPvAngle+0x6b4>)
  401dfe:	4628      	mov	r0, r5
  401e00:	4631      	mov	r1, r6
  401e02:	47a0      	blx	r4
  401e04:	4603      	mov	r3, r0
  401e06:	460c      	mov	r4, r1
  401e08:	4619      	mov	r1, r3
  401e0a:	4622      	mov	r2, r4
  401e0c:	4b8a      	ldr	r3, [pc, #552]	; (402038 <GetPvAngle+0x6b8>)
  401e0e:	4608      	mov	r0, r1
  401e10:	4611      	mov	r1, r2
  401e12:	4798      	blx	r3
  401e14:	4603      	mov	r3, r0
  401e16:	62bb      	str	r3, [r7, #40]	; 0x28
	j = j + sin(Rad(2 * h))*(0.019993f - 0.000101f*f);
  401e18:	4b85      	ldr	r3, [pc, #532]	; (402030 <GetPvAngle+0x6b0>)
  401e1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  401e1c:	4798      	blx	r3
  401e1e:	4605      	mov	r5, r0
  401e20:	460e      	mov	r6, r1
  401e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  401e24:	4b7d      	ldr	r3, [pc, #500]	; (40201c <GetPvAngle+0x69c>)
  401e26:	4611      	mov	r1, r2
  401e28:	4610      	mov	r0, r2
  401e2a:	4798      	blx	r3
  401e2c:	4603      	mov	r3, r0
  401e2e:	4618      	mov	r0, r3
  401e30:	4b82      	ldr	r3, [pc, #520]	; (40203c <GetPvAngle+0x6bc>)
  401e32:	4798      	blx	r3
  401e34:	4602      	mov	r2, r0
  401e36:	4b7e      	ldr	r3, [pc, #504]	; (402030 <GetPvAngle+0x6b0>)
  401e38:	4610      	mov	r0, r2
  401e3a:	4798      	blx	r3
  401e3c:	4603      	mov	r3, r0
  401e3e:	460c      	mov	r4, r1
  401e40:	4618      	mov	r0, r3
  401e42:	4621      	mov	r1, r4
  401e44:	4b7e      	ldr	r3, [pc, #504]	; (402040 <GetPvAngle+0x6c0>)
  401e46:	4798      	blx	r3
  401e48:	4680      	mov	r8, r0
  401e4a:	4689      	mov	r9, r1
  401e4c:	4b75      	ldr	r3, [pc, #468]	; (402024 <GetPvAngle+0x6a4>)
  401e4e:	497d      	ldr	r1, [pc, #500]	; (402044 <GetPvAngle+0x6c4>)
  401e50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  401e52:	4798      	blx	r3
  401e54:	4603      	mov	r3, r0
  401e56:	461a      	mov	r2, r3
  401e58:	4b73      	ldr	r3, [pc, #460]	; (402028 <GetPvAngle+0x6a8>)
  401e5a:	4611      	mov	r1, r2
  401e5c:	487a      	ldr	r0, [pc, #488]	; (402048 <GetPvAngle+0x6c8>)
  401e5e:	4798      	blx	r3
  401e60:	4603      	mov	r3, r0
  401e62:	461a      	mov	r2, r3
  401e64:	4b72      	ldr	r3, [pc, #456]	; (402030 <GetPvAngle+0x6b0>)
  401e66:	4610      	mov	r0, r2
  401e68:	4798      	blx	r3
  401e6a:	4602      	mov	r2, r0
  401e6c:	460b      	mov	r3, r1
  401e6e:	4c71      	ldr	r4, [pc, #452]	; (402034 <GetPvAngle+0x6b4>)
  401e70:	4640      	mov	r0, r8
  401e72:	4649      	mov	r1, r9
  401e74:	47a0      	blx	r4
  401e76:	4603      	mov	r3, r0
  401e78:	460c      	mov	r4, r1
  401e7a:	461a      	mov	r2, r3
  401e7c:	4623      	mov	r3, r4
  401e7e:	4c73      	ldr	r4, [pc, #460]	; (40204c <GetPvAngle+0x6cc>)
  401e80:	4628      	mov	r0, r5
  401e82:	4631      	mov	r1, r6
  401e84:	47a0      	blx	r4
  401e86:	4603      	mov	r3, r0
  401e88:	460c      	mov	r4, r1
  401e8a:	4619      	mov	r1, r3
  401e8c:	4622      	mov	r2, r4
  401e8e:	4b6a      	ldr	r3, [pc, #424]	; (402038 <GetPvAngle+0x6b8>)
  401e90:	4608      	mov	r0, r1
  401e92:	4611      	mov	r1, r2
  401e94:	4798      	blx	r3
  401e96:	4603      	mov	r3, r0
  401e98:	62bb      	str	r3, [r7, #40]	; 0x28
	j = j + sin(Rad(3 * h))*0.000289f;
  401e9a:	4b65      	ldr	r3, [pc, #404]	; (402030 <GetPvAngle+0x6b0>)
  401e9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  401e9e:	4798      	blx	r3
  401ea0:	4605      	mov	r5, r0
  401ea2:	460e      	mov	r6, r1
  401ea4:	4b5f      	ldr	r3, [pc, #380]	; (402024 <GetPvAngle+0x6a4>)
  401ea6:	496a      	ldr	r1, [pc, #424]	; (402050 <GetPvAngle+0x6d0>)
  401ea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
  401eaa:	4798      	blx	r3
  401eac:	4603      	mov	r3, r0
  401eae:	4618      	mov	r0, r3
  401eb0:	4b62      	ldr	r3, [pc, #392]	; (40203c <GetPvAngle+0x6bc>)
  401eb2:	4798      	blx	r3
  401eb4:	4602      	mov	r2, r0
  401eb6:	4b5e      	ldr	r3, [pc, #376]	; (402030 <GetPvAngle+0x6b0>)
  401eb8:	4610      	mov	r0, r2
  401eba:	4798      	blx	r3
  401ebc:	4603      	mov	r3, r0
  401ebe:	460c      	mov	r4, r1
  401ec0:	4618      	mov	r0, r3
  401ec2:	4621      	mov	r1, r4
  401ec4:	4b5e      	ldr	r3, [pc, #376]	; (402040 <GetPvAngle+0x6c0>)
  401ec6:	4798      	blx	r3
  401ec8:	4c5a      	ldr	r4, [pc, #360]	; (402034 <GetPvAngle+0x6b4>)
  401eca:	a34f      	add	r3, pc, #316	; (adr r3, 402008 <GetPvAngle+0x688>)
  401ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
  401ed0:	47a0      	blx	r4
  401ed2:	4603      	mov	r3, r0
  401ed4:	460c      	mov	r4, r1
  401ed6:	461a      	mov	r2, r3
  401ed8:	4623      	mov	r3, r4
  401eda:	4c5c      	ldr	r4, [pc, #368]	; (40204c <GetPvAngle+0x6cc>)
  401edc:	4628      	mov	r0, r5
  401ede:	4631      	mov	r1, r6
  401ee0:	47a0      	blx	r4
  401ee2:	4603      	mov	r3, r0
  401ee4:	460c      	mov	r4, r1
  401ee6:	4619      	mov	r1, r3
  401ee8:	4622      	mov	r2, r4
  401eea:	4b53      	ldr	r3, [pc, #332]	; (402038 <GetPvAngle+0x6b8>)
  401eec:	4608      	mov	r0, r1
  401eee:	4611      	mov	r1, r2
  401ef0:	4798      	blx	r3
  401ef2:	4603      	mov	r3, r0
  401ef4:	62bb      	str	r3, [r7, #40]	; 0x28
	k = g + j;
  401ef6:	4b49      	ldr	r3, [pc, #292]	; (40201c <GetPvAngle+0x69c>)
  401ef8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  401efa:	6b78      	ldr	r0, [r7, #52]	; 0x34
  401efc:	4798      	blx	r3
  401efe:	4603      	mov	r3, r0
  401f00:	627b      	str	r3, [r7, #36]	; 0x24
	l = k - 0.00569f - 0.00478f*sin(Rad(125.04f - 1934.136f*f));
  401f02:	4b49      	ldr	r3, [pc, #292]	; (402028 <GetPvAngle+0x6a8>)
  401f04:	4953      	ldr	r1, [pc, #332]	; (402054 <GetPvAngle+0x6d4>)
  401f06:	6a78      	ldr	r0, [r7, #36]	; 0x24
  401f08:	4798      	blx	r3
  401f0a:	4603      	mov	r3, r0
  401f0c:	461a      	mov	r2, r3
  401f0e:	4b48      	ldr	r3, [pc, #288]	; (402030 <GetPvAngle+0x6b0>)
  401f10:	4610      	mov	r0, r2
  401f12:	4798      	blx	r3
  401f14:	4605      	mov	r5, r0
  401f16:	460e      	mov	r6, r1
  401f18:	4b42      	ldr	r3, [pc, #264]	; (402024 <GetPvAngle+0x6a4>)
  401f1a:	494f      	ldr	r1, [pc, #316]	; (402058 <GetPvAngle+0x6d8>)
  401f1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  401f1e:	4798      	blx	r3
  401f20:	4603      	mov	r3, r0
  401f22:	461a      	mov	r2, r3
  401f24:	4b40      	ldr	r3, [pc, #256]	; (402028 <GetPvAngle+0x6a8>)
  401f26:	4611      	mov	r1, r2
  401f28:	484c      	ldr	r0, [pc, #304]	; (40205c <GetPvAngle+0x6dc>)
  401f2a:	4798      	blx	r3
  401f2c:	4603      	mov	r3, r0
  401f2e:	4618      	mov	r0, r3
  401f30:	4b42      	ldr	r3, [pc, #264]	; (40203c <GetPvAngle+0x6bc>)
  401f32:	4798      	blx	r3
  401f34:	4602      	mov	r2, r0
  401f36:	4b3e      	ldr	r3, [pc, #248]	; (402030 <GetPvAngle+0x6b0>)
  401f38:	4610      	mov	r0, r2
  401f3a:	4798      	blx	r3
  401f3c:	4603      	mov	r3, r0
  401f3e:	460c      	mov	r4, r1
  401f40:	4618      	mov	r0, r3
  401f42:	4621      	mov	r1, r4
  401f44:	4b3e      	ldr	r3, [pc, #248]	; (402040 <GetPvAngle+0x6c0>)
  401f46:	4798      	blx	r3
  401f48:	4c3a      	ldr	r4, [pc, #232]	; (402034 <GetPvAngle+0x6b4>)
  401f4a:	a331      	add	r3, pc, #196	; (adr r3, 402010 <GetPvAngle+0x690>)
  401f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f50:	47a0      	blx	r4
  401f52:	4603      	mov	r3, r0
  401f54:	460c      	mov	r4, r1
  401f56:	461a      	mov	r2, r3
  401f58:	4623      	mov	r3, r4
  401f5a:	4c41      	ldr	r4, [pc, #260]	; (402060 <GetPvAngle+0x6e0>)
  401f5c:	4628      	mov	r0, r5
  401f5e:	4631      	mov	r1, r6
  401f60:	47a0      	blx	r4
  401f62:	4603      	mov	r3, r0
  401f64:	460c      	mov	r4, r1
  401f66:	4619      	mov	r1, r3
  401f68:	4622      	mov	r2, r4
  401f6a:	4b33      	ldr	r3, [pc, #204]	; (402038 <GetPvAngle+0x6b8>)
  401f6c:	4608      	mov	r0, r1
  401f6e:	4611      	mov	r1, r2
  401f70:	4798      	blx	r3
  401f72:	4603      	mov	r3, r0
  401f74:	623b      	str	r3, [r7, #32]
	m = 23 + (26 + ((21.448f - f*(46.815f + f*(0.00059f - f*0.001813f)))) / 60.0f) / 60.0f;
  401f76:	4b2b      	ldr	r3, [pc, #172]	; (402024 <GetPvAngle+0x6a4>)
  401f78:	493a      	ldr	r1, [pc, #232]	; (402064 <GetPvAngle+0x6e4>)
  401f7a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  401f7c:	4798      	blx	r3
  401f7e:	4603      	mov	r3, r0
  401f80:	461a      	mov	r2, r3
  401f82:	4b29      	ldr	r3, [pc, #164]	; (402028 <GetPvAngle+0x6a8>)
  401f84:	4611      	mov	r1, r2
  401f86:	4838      	ldr	r0, [pc, #224]	; (402068 <GetPvAngle+0x6e8>)
  401f88:	4798      	blx	r3
  401f8a:	4603      	mov	r3, r0
  401f8c:	461a      	mov	r2, r3
  401f8e:	4b25      	ldr	r3, [pc, #148]	; (402024 <GetPvAngle+0x6a4>)
  401f90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  401f92:	4610      	mov	r0, r2
  401f94:	4798      	blx	r3
  401f96:	4603      	mov	r3, r0
  401f98:	461a      	mov	r2, r3
  401f9a:	4b20      	ldr	r3, [pc, #128]	; (40201c <GetPvAngle+0x69c>)
  401f9c:	4933      	ldr	r1, [pc, #204]	; (40206c <GetPvAngle+0x6ec>)
  401f9e:	4610      	mov	r0, r2
  401fa0:	4798      	blx	r3
  401fa2:	4603      	mov	r3, r0
  401fa4:	461a      	mov	r2, r3
  401fa6:	4b1f      	ldr	r3, [pc, #124]	; (402024 <GetPvAngle+0x6a4>)
  401fa8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  401faa:	4610      	mov	r0, r2
  401fac:	4798      	blx	r3
  401fae:	4603      	mov	r3, r0
  401fb0:	461a      	mov	r2, r3
  401fb2:	4b1d      	ldr	r3, [pc, #116]	; (402028 <GetPvAngle+0x6a8>)
  401fb4:	4611      	mov	r1, r2
  401fb6:	482e      	ldr	r0, [pc, #184]	; (402070 <GetPvAngle+0x6f0>)
  401fb8:	4798      	blx	r3
  401fba:	4603      	mov	r3, r0
  401fbc:	461a      	mov	r2, r3
  401fbe:	4b2d      	ldr	r3, [pc, #180]	; (402074 <GetPvAngle+0x6f4>)
  401fc0:	492d      	ldr	r1, [pc, #180]	; (402078 <GetPvAngle+0x6f8>)
  401fc2:	4610      	mov	r0, r2
  401fc4:	4798      	blx	r3
  401fc6:	4603      	mov	r3, r0
  401fc8:	461a      	mov	r2, r3
  401fca:	4b14      	ldr	r3, [pc, #80]	; (40201c <GetPvAngle+0x69c>)
  401fcc:	492b      	ldr	r1, [pc, #172]	; (40207c <GetPvAngle+0x6fc>)
  401fce:	4610      	mov	r0, r2
  401fd0:	4798      	blx	r3
  401fd2:	4603      	mov	r3, r0
  401fd4:	461a      	mov	r2, r3
  401fd6:	4b27      	ldr	r3, [pc, #156]	; (402074 <GetPvAngle+0x6f4>)
  401fd8:	4927      	ldr	r1, [pc, #156]	; (402078 <GetPvAngle+0x6f8>)
  401fda:	4610      	mov	r0, r2
  401fdc:	4798      	blx	r3
  401fde:	4603      	mov	r3, r0
  401fe0:	461a      	mov	r2, r3
  401fe2:	4b0e      	ldr	r3, [pc, #56]	; (40201c <GetPvAngle+0x69c>)
  401fe4:	4926      	ldr	r1, [pc, #152]	; (402080 <GetPvAngle+0x700>)
  401fe6:	4610      	mov	r0, r2
  401fe8:	4798      	blx	r3
  401fea:	4603      	mov	r3, r0
  401fec:	61fb      	str	r3, [r7, #28]
	n = m + 0.00256f*cos(Rad(125.04f - 1934.136f*f));
  401fee:	4b10      	ldr	r3, [pc, #64]	; (402030 <GetPvAngle+0x6b0>)
  401ff0:	69f8      	ldr	r0, [r7, #28]
  401ff2:	4798      	blx	r3
  401ff4:	4605      	mov	r5, r0
  401ff6:	460e      	mov	r6, r1
  401ff8:	4b0a      	ldr	r3, [pc, #40]	; (402024 <GetPvAngle+0x6a4>)
  401ffa:	4917      	ldr	r1, [pc, #92]	; (402058 <GetPvAngle+0x6d8>)
  401ffc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  401ffe:	4798      	blx	r3
  402000:	4603      	mov	r3, r0
  402002:	e03f      	b.n	402084 <GetPvAngle+0x704>
  402004:	f3af 8000 	nop.w
  402008:	80000000 	.word	0x80000000
  40200c:	3f32f09d 	.word	0x3f32f09d
  402010:	80000000 	.word	0x80000000
  402014:	3f739431 	.word	0x3f739431
  402018:	376ae18b 	.word	0x376ae18b
  40201c:	0040a841 	.word	0x0040a841
  402020:	3b9dd7ed 	.word	0x3b9dd7ed
  402024:	0040aa51 	.word	0x0040aa51
  402028:	0040a83d 	.word	0x0040a83d
  40202c:	3ff511ae 	.word	0x3ff511ae
  402030:	0040a13d 	.word	0x0040a13d
  402034:	0040a1e5 	.word	0x0040a1e5
  402038:	0040a795 	.word	0x0040a795
  40203c:	00402811 	.word	0x00402811
  402040:	00407655 	.word	0x00407655
  402044:	38d3cff6 	.word	0x38d3cff6
  402048:	3ca3c85c 	.word	0x3ca3c85c
  40204c:	00409e81 	.word	0x00409e81
  402050:	40400000 	.word	0x40400000
  402054:	3bba732e 	.word	0x3bba732e
  402058:	44f1c45a 	.word	0x44f1c45a
  40205c:	42fa147b 	.word	0x42fa147b
  402060:	00409e7d 	.word	0x00409e7d
  402064:	3aeda22f 	.word	0x3aeda22f
  402068:	3a1aaa3b 	.word	0x3a1aaa3b
  40206c:	423b428f 	.word	0x423b428f
  402070:	41ab9581 	.word	0x41ab9581
  402074:	0040abb9 	.word	0x0040abb9
  402078:	42700000 	.word	0x42700000
  40207c:	41d00000 	.word	0x41d00000
  402080:	41b80000 	.word	0x41b80000
  402084:	461a      	mov	r2, r3
  402086:	4ba2      	ldr	r3, [pc, #648]	; (402310 <GetPvAngle+0x990>)
  402088:	4611      	mov	r1, r2
  40208a:	48a2      	ldr	r0, [pc, #648]	; (402314 <GetPvAngle+0x994>)
  40208c:	4798      	blx	r3
  40208e:	4603      	mov	r3, r0
  402090:	4618      	mov	r0, r3
  402092:	4ba1      	ldr	r3, [pc, #644]	; (402318 <GetPvAngle+0x998>)
  402094:	4798      	blx	r3
  402096:	4602      	mov	r2, r0
  402098:	4ba0      	ldr	r3, [pc, #640]	; (40231c <GetPvAngle+0x99c>)
  40209a:	4610      	mov	r0, r2
  40209c:	4798      	blx	r3
  40209e:	4603      	mov	r3, r0
  4020a0:	460c      	mov	r4, r1
  4020a2:	4618      	mov	r0, r3
  4020a4:	4621      	mov	r1, r4
  4020a6:	4b9e      	ldr	r3, [pc, #632]	; (402320 <GetPvAngle+0x9a0>)
  4020a8:	4798      	blx	r3
  4020aa:	4c9e      	ldr	r4, [pc, #632]	; (402324 <GetPvAngle+0x9a4>)
  4020ac:	a396      	add	r3, pc, #600	; (adr r3, 402308 <GetPvAngle+0x988>)
  4020ae:	e9d3 2300 	ldrd	r2, r3, [r3]
  4020b2:	47a0      	blx	r4
  4020b4:	4603      	mov	r3, r0
  4020b6:	460c      	mov	r4, r1
  4020b8:	461a      	mov	r2, r3
  4020ba:	4623      	mov	r3, r4
  4020bc:	4c9a      	ldr	r4, [pc, #616]	; (402328 <GetPvAngle+0x9a8>)
  4020be:	4628      	mov	r0, r5
  4020c0:	4631      	mov	r1, r6
  4020c2:	47a0      	blx	r4
  4020c4:	4603      	mov	r3, r0
  4020c6:	460c      	mov	r4, r1
  4020c8:	4619      	mov	r1, r3
  4020ca:	4622      	mov	r2, r4
  4020cc:	4b97      	ldr	r3, [pc, #604]	; (40232c <GetPvAngle+0x9ac>)
  4020ce:	4608      	mov	r0, r1
  4020d0:	4611      	mov	r1, r2
  4020d2:	4798      	blx	r3
  4020d4:	4603      	mov	r3, r0
  4020d6:	61bb      	str	r3, [r7, #24]
	o = Deg(asin(sin(Rad(n))*sin(Rad(l))));
  4020d8:	69b8      	ldr	r0, [r7, #24]
  4020da:	4b8f      	ldr	r3, [pc, #572]	; (402318 <GetPvAngle+0x998>)
  4020dc:	4798      	blx	r3
  4020de:	4602      	mov	r2, r0
  4020e0:	4b8e      	ldr	r3, [pc, #568]	; (40231c <GetPvAngle+0x99c>)
  4020e2:	4610      	mov	r0, r2
  4020e4:	4798      	blx	r3
  4020e6:	4603      	mov	r3, r0
  4020e8:	460c      	mov	r4, r1
  4020ea:	4618      	mov	r0, r3
  4020ec:	4621      	mov	r1, r4
  4020ee:	4b90      	ldr	r3, [pc, #576]	; (402330 <GetPvAngle+0x9b0>)
  4020f0:	4798      	blx	r3
  4020f2:	4605      	mov	r5, r0
  4020f4:	460e      	mov	r6, r1
  4020f6:	6a38      	ldr	r0, [r7, #32]
  4020f8:	4b87      	ldr	r3, [pc, #540]	; (402318 <GetPvAngle+0x998>)
  4020fa:	4798      	blx	r3
  4020fc:	4602      	mov	r2, r0
  4020fe:	4b87      	ldr	r3, [pc, #540]	; (40231c <GetPvAngle+0x99c>)
  402100:	4610      	mov	r0, r2
  402102:	4798      	blx	r3
  402104:	4603      	mov	r3, r0
  402106:	460c      	mov	r4, r1
  402108:	4618      	mov	r0, r3
  40210a:	4621      	mov	r1, r4
  40210c:	4b88      	ldr	r3, [pc, #544]	; (402330 <GetPvAngle+0x9b0>)
  40210e:	4798      	blx	r3
  402110:	4602      	mov	r2, r0
  402112:	460b      	mov	r3, r1
  402114:	4c83      	ldr	r4, [pc, #524]	; (402324 <GetPvAngle+0x9a4>)
  402116:	4628      	mov	r0, r5
  402118:	4631      	mov	r1, r6
  40211a:	47a0      	blx	r4
  40211c:	4603      	mov	r3, r0
  40211e:	460c      	mov	r4, r1
  402120:	4618      	mov	r0, r3
  402122:	4621      	mov	r1, r4
  402124:	4b83      	ldr	r3, [pc, #524]	; (402334 <GetPvAngle+0x9b4>)
  402126:	4798      	blx	r3
  402128:	460a      	mov	r2, r1
  40212a:	4601      	mov	r1, r0
  40212c:	4b7f      	ldr	r3, [pc, #508]	; (40232c <GetPvAngle+0x9ac>)
  40212e:	4608      	mov	r0, r1
  402130:	4611      	mov	r1, r2
  402132:	4798      	blx	r3
  402134:	4603      	mov	r3, r0
  402136:	4618      	mov	r0, r3
  402138:	4b7f      	ldr	r3, [pc, #508]	; (402338 <GetPvAngle+0x9b8>)
  40213a:	4798      	blx	r3
  40213c:	6178      	str	r0, [r7, #20]
	p = tan(Rad(n / 2))*tan(Rad(n / 2));
  40213e:	4b7f      	ldr	r3, [pc, #508]	; (40233c <GetPvAngle+0x9bc>)
  402140:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402144:	69b8      	ldr	r0, [r7, #24]
  402146:	4798      	blx	r3
  402148:	4603      	mov	r3, r0
  40214a:	4618      	mov	r0, r3
  40214c:	4b72      	ldr	r3, [pc, #456]	; (402318 <GetPvAngle+0x998>)
  40214e:	4798      	blx	r3
  402150:	4602      	mov	r2, r0
  402152:	4b72      	ldr	r3, [pc, #456]	; (40231c <GetPvAngle+0x99c>)
  402154:	4610      	mov	r0, r2
  402156:	4798      	blx	r3
  402158:	4603      	mov	r3, r0
  40215a:	460c      	mov	r4, r1
  40215c:	4618      	mov	r0, r3
  40215e:	4621      	mov	r1, r4
  402160:	4b77      	ldr	r3, [pc, #476]	; (402340 <GetPvAngle+0x9c0>)
  402162:	4798      	blx	r3
  402164:	4605      	mov	r5, r0
  402166:	460e      	mov	r6, r1
  402168:	4b74      	ldr	r3, [pc, #464]	; (40233c <GetPvAngle+0x9bc>)
  40216a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40216e:	69b8      	ldr	r0, [r7, #24]
  402170:	4798      	blx	r3
  402172:	4603      	mov	r3, r0
  402174:	4618      	mov	r0, r3
  402176:	4b68      	ldr	r3, [pc, #416]	; (402318 <GetPvAngle+0x998>)
  402178:	4798      	blx	r3
  40217a:	4602      	mov	r2, r0
  40217c:	4b67      	ldr	r3, [pc, #412]	; (40231c <GetPvAngle+0x99c>)
  40217e:	4610      	mov	r0, r2
  402180:	4798      	blx	r3
  402182:	4603      	mov	r3, r0
  402184:	460c      	mov	r4, r1
  402186:	4618      	mov	r0, r3
  402188:	4621      	mov	r1, r4
  40218a:	4b6d      	ldr	r3, [pc, #436]	; (402340 <GetPvAngle+0x9c0>)
  40218c:	4798      	blx	r3
  40218e:	4602      	mov	r2, r0
  402190:	460b      	mov	r3, r1
  402192:	4c64      	ldr	r4, [pc, #400]	; (402324 <GetPvAngle+0x9a4>)
  402194:	4628      	mov	r0, r5
  402196:	4631      	mov	r1, r6
  402198:	47a0      	blx	r4
  40219a:	4603      	mov	r3, r0
  40219c:	460c      	mov	r4, r1
  40219e:	4619      	mov	r1, r3
  4021a0:	4622      	mov	r2, r4
  4021a2:	4b62      	ldr	r3, [pc, #392]	; (40232c <GetPvAngle+0x9ac>)
  4021a4:	4608      	mov	r0, r1
  4021a6:	4611      	mov	r1, r2
  4021a8:	4798      	blx	r3
  4021aa:	4603      	mov	r3, r0
  4021ac:	613b      	str	r3, [r7, #16]
	q = 4.0f * Deg(p*sin(2.0f * Rad(g)) - 2.0f * i*sin(Rad(h)) + 4.0f * i*p*sin(Rad(h))*cos(2.0f * Rad(g)) - 0.5f*p*p*sin(4.0f * Rad(g)) - 1.25f*i*i*sin(2.0f * Rad(h)));
  4021ae:	4b5b      	ldr	r3, [pc, #364]	; (40231c <GetPvAngle+0x99c>)
  4021b0:	6938      	ldr	r0, [r7, #16]
  4021b2:	4798      	blx	r3
  4021b4:	4605      	mov	r5, r0
  4021b6:	460e      	mov	r6, r1
  4021b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
  4021ba:	4b57      	ldr	r3, [pc, #348]	; (402318 <GetPvAngle+0x998>)
  4021bc:	4798      	blx	r3
  4021be:	4602      	mov	r2, r0
  4021c0:	4b60      	ldr	r3, [pc, #384]	; (402344 <GetPvAngle+0x9c4>)
  4021c2:	4611      	mov	r1, r2
  4021c4:	4610      	mov	r0, r2
  4021c6:	4798      	blx	r3
  4021c8:	4603      	mov	r3, r0
  4021ca:	461a      	mov	r2, r3
  4021cc:	4b53      	ldr	r3, [pc, #332]	; (40231c <GetPvAngle+0x99c>)
  4021ce:	4610      	mov	r0, r2
  4021d0:	4798      	blx	r3
  4021d2:	4603      	mov	r3, r0
  4021d4:	460c      	mov	r4, r1
  4021d6:	4618      	mov	r0, r3
  4021d8:	4621      	mov	r1, r4
  4021da:	4b55      	ldr	r3, [pc, #340]	; (402330 <GetPvAngle+0x9b0>)
  4021dc:	4798      	blx	r3
  4021de:	4602      	mov	r2, r0
  4021e0:	460b      	mov	r3, r1
  4021e2:	4c50      	ldr	r4, [pc, #320]	; (402324 <GetPvAngle+0x9a4>)
  4021e4:	4628      	mov	r0, r5
  4021e6:	4631      	mov	r1, r6
  4021e8:	47a0      	blx	r4
  4021ea:	4603      	mov	r3, r0
  4021ec:	460c      	mov	r4, r1
  4021ee:	461d      	mov	r5, r3
  4021f0:	4626      	mov	r6, r4
  4021f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  4021f4:	4b53      	ldr	r3, [pc, #332]	; (402344 <GetPvAngle+0x9c4>)
  4021f6:	4611      	mov	r1, r2
  4021f8:	4610      	mov	r0, r2
  4021fa:	4798      	blx	r3
  4021fc:	4603      	mov	r3, r0
  4021fe:	461a      	mov	r2, r3
  402200:	4b46      	ldr	r3, [pc, #280]	; (40231c <GetPvAngle+0x99c>)
  402202:	4610      	mov	r0, r2
  402204:	4798      	blx	r3
  402206:	4680      	mov	r8, r0
  402208:	4689      	mov	r9, r1
  40220a:	6b38      	ldr	r0, [r7, #48]	; 0x30
  40220c:	4b42      	ldr	r3, [pc, #264]	; (402318 <GetPvAngle+0x998>)
  40220e:	4798      	blx	r3
  402210:	4602      	mov	r2, r0
  402212:	4b42      	ldr	r3, [pc, #264]	; (40231c <GetPvAngle+0x99c>)
  402214:	4610      	mov	r0, r2
  402216:	4798      	blx	r3
  402218:	4603      	mov	r3, r0
  40221a:	460c      	mov	r4, r1
  40221c:	4618      	mov	r0, r3
  40221e:	4621      	mov	r1, r4
  402220:	4b43      	ldr	r3, [pc, #268]	; (402330 <GetPvAngle+0x9b0>)
  402222:	4798      	blx	r3
  402224:	4602      	mov	r2, r0
  402226:	460b      	mov	r3, r1
  402228:	4c3e      	ldr	r4, [pc, #248]	; (402324 <GetPvAngle+0x9a4>)
  40222a:	4640      	mov	r0, r8
  40222c:	4649      	mov	r1, r9
  40222e:	47a0      	blx	r4
  402230:	4603      	mov	r3, r0
  402232:	460c      	mov	r4, r1
  402234:	461a      	mov	r2, r3
  402236:	4623      	mov	r3, r4
  402238:	4c43      	ldr	r4, [pc, #268]	; (402348 <GetPvAngle+0x9c8>)
  40223a:	4628      	mov	r0, r5
  40223c:	4631      	mov	r1, r6
  40223e:	47a0      	blx	r4
  402240:	4603      	mov	r3, r0
  402242:	460c      	mov	r4, r1
  402244:	461d      	mov	r5, r3
  402246:	4626      	mov	r6, r4
  402248:	4b40      	ldr	r3, [pc, #256]	; (40234c <GetPvAngle+0x9cc>)
  40224a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  40224e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  402250:	4798      	blx	r3
  402252:	4603      	mov	r3, r0
  402254:	461a      	mov	r2, r3
  402256:	4b3d      	ldr	r3, [pc, #244]	; (40234c <GetPvAngle+0x9cc>)
  402258:	6939      	ldr	r1, [r7, #16]
  40225a:	4610      	mov	r0, r2
  40225c:	4798      	blx	r3
  40225e:	4603      	mov	r3, r0
  402260:	461a      	mov	r2, r3
  402262:	4b2e      	ldr	r3, [pc, #184]	; (40231c <GetPvAngle+0x99c>)
  402264:	4610      	mov	r0, r2
  402266:	4798      	blx	r3
  402268:	4680      	mov	r8, r0
  40226a:	4689      	mov	r9, r1
  40226c:	6b38      	ldr	r0, [r7, #48]	; 0x30
  40226e:	4b2a      	ldr	r3, [pc, #168]	; (402318 <GetPvAngle+0x998>)
  402270:	4798      	blx	r3
  402272:	4602      	mov	r2, r0
  402274:	4b29      	ldr	r3, [pc, #164]	; (40231c <GetPvAngle+0x99c>)
  402276:	4610      	mov	r0, r2
  402278:	4798      	blx	r3
  40227a:	4603      	mov	r3, r0
  40227c:	460c      	mov	r4, r1
  40227e:	4618      	mov	r0, r3
  402280:	4621      	mov	r1, r4
  402282:	4b2b      	ldr	r3, [pc, #172]	; (402330 <GetPvAngle+0x9b0>)
  402284:	4798      	blx	r3
  402286:	4602      	mov	r2, r0
  402288:	460b      	mov	r3, r1
  40228a:	4c26      	ldr	r4, [pc, #152]	; (402324 <GetPvAngle+0x9a4>)
  40228c:	4640      	mov	r0, r8
  40228e:	4649      	mov	r1, r9
  402290:	47a0      	blx	r4
  402292:	4603      	mov	r3, r0
  402294:	460c      	mov	r4, r1
  402296:	4698      	mov	r8, r3
  402298:	46a1      	mov	r9, r4
  40229a:	6b78      	ldr	r0, [r7, #52]	; 0x34
  40229c:	4b1e      	ldr	r3, [pc, #120]	; (402318 <GetPvAngle+0x998>)
  40229e:	4798      	blx	r3
  4022a0:	4602      	mov	r2, r0
  4022a2:	4b28      	ldr	r3, [pc, #160]	; (402344 <GetPvAngle+0x9c4>)
  4022a4:	4611      	mov	r1, r2
  4022a6:	4610      	mov	r0, r2
  4022a8:	4798      	blx	r3
  4022aa:	4603      	mov	r3, r0
  4022ac:	461a      	mov	r2, r3
  4022ae:	4b1b      	ldr	r3, [pc, #108]	; (40231c <GetPvAngle+0x99c>)
  4022b0:	4610      	mov	r0, r2
  4022b2:	4798      	blx	r3
  4022b4:	4603      	mov	r3, r0
  4022b6:	460c      	mov	r4, r1
  4022b8:	4618      	mov	r0, r3
  4022ba:	4621      	mov	r1, r4
  4022bc:	4b18      	ldr	r3, [pc, #96]	; (402320 <GetPvAngle+0x9a0>)
  4022be:	4798      	blx	r3
  4022c0:	4602      	mov	r2, r0
  4022c2:	460b      	mov	r3, r1
  4022c4:	4c17      	ldr	r4, [pc, #92]	; (402324 <GetPvAngle+0x9a4>)
  4022c6:	4640      	mov	r0, r8
  4022c8:	4649      	mov	r1, r9
  4022ca:	47a0      	blx	r4
  4022cc:	4603      	mov	r3, r0
  4022ce:	460c      	mov	r4, r1
  4022d0:	461a      	mov	r2, r3
  4022d2:	4623      	mov	r3, r4
  4022d4:	4c14      	ldr	r4, [pc, #80]	; (402328 <GetPvAngle+0x9a8>)
  4022d6:	4628      	mov	r0, r5
  4022d8:	4631      	mov	r1, r6
  4022da:	47a0      	blx	r4
  4022dc:	4603      	mov	r3, r0
  4022de:	460c      	mov	r4, r1
  4022e0:	461d      	mov	r5, r3
  4022e2:	4626      	mov	r6, r4
  4022e4:	4b19      	ldr	r3, [pc, #100]	; (40234c <GetPvAngle+0x9cc>)
  4022e6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  4022ea:	6938      	ldr	r0, [r7, #16]
  4022ec:	4798      	blx	r3
  4022ee:	4603      	mov	r3, r0
  4022f0:	461a      	mov	r2, r3
  4022f2:	4b16      	ldr	r3, [pc, #88]	; (40234c <GetPvAngle+0x9cc>)
  4022f4:	6939      	ldr	r1, [r7, #16]
  4022f6:	4610      	mov	r0, r2
  4022f8:	4798      	blx	r3
  4022fa:	4603      	mov	r3, r0
  4022fc:	461a      	mov	r2, r3
  4022fe:	4b07      	ldr	r3, [pc, #28]	; (40231c <GetPvAngle+0x99c>)
  402300:	4610      	mov	r0, r2
  402302:	e025      	b.n	402350 <GetPvAngle+0x9d0>
  402304:	f3af 8000 	nop.w
  402308:	80000000 	.word	0x80000000
  40230c:	3f64f8b5 	.word	0x3f64f8b5
  402310:	0040a83d 	.word	0x0040a83d
  402314:	42fa147b 	.word	0x42fa147b
  402318:	00402811 	.word	0x00402811
  40231c:	0040a13d 	.word	0x0040a13d
  402320:	004075c1 	.word	0x004075c1
  402324:	0040a1e5 	.word	0x0040a1e5
  402328:	00409e81 	.word	0x00409e81
  40232c:	0040a795 	.word	0x0040a795
  402330:	00407655 	.word	0x00407655
  402334:	004077e9 	.word	0x004077e9
  402338:	00402849 	.word	0x00402849
  40233c:	0040abb9 	.word	0x0040abb9
  402340:	004076dd 	.word	0x004076dd
  402344:	0040a841 	.word	0x0040a841
  402348:	00409e7d 	.word	0x00409e7d
  40234c:	0040aa51 	.word	0x0040aa51
  402350:	4798      	blx	r3
  402352:	4680      	mov	r8, r0
  402354:	4689      	mov	r9, r1
  402356:	6b78      	ldr	r0, [r7, #52]	; 0x34
  402358:	4b9e      	ldr	r3, [pc, #632]	; (4025d4 <GetPvAngle+0xc54>)
  40235a:	4798      	blx	r3
  40235c:	4602      	mov	r2, r0
  40235e:	4b9e      	ldr	r3, [pc, #632]	; (4025d8 <GetPvAngle+0xc58>)
  402360:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  402364:	4610      	mov	r0, r2
  402366:	4798      	blx	r3
  402368:	4603      	mov	r3, r0
  40236a:	461a      	mov	r2, r3
  40236c:	4b9b      	ldr	r3, [pc, #620]	; (4025dc <GetPvAngle+0xc5c>)
  40236e:	4610      	mov	r0, r2
  402370:	4798      	blx	r3
  402372:	4603      	mov	r3, r0
  402374:	460c      	mov	r4, r1
  402376:	4618      	mov	r0, r3
  402378:	4621      	mov	r1, r4
  40237a:	4b99      	ldr	r3, [pc, #612]	; (4025e0 <GetPvAngle+0xc60>)
  40237c:	4798      	blx	r3
  40237e:	4602      	mov	r2, r0
  402380:	460b      	mov	r3, r1
  402382:	4c98      	ldr	r4, [pc, #608]	; (4025e4 <GetPvAngle+0xc64>)
  402384:	4640      	mov	r0, r8
  402386:	4649      	mov	r1, r9
  402388:	47a0      	blx	r4
  40238a:	4603      	mov	r3, r0
  40238c:	460c      	mov	r4, r1
  40238e:	461a      	mov	r2, r3
  402390:	4623      	mov	r3, r4
  402392:	4c95      	ldr	r4, [pc, #596]	; (4025e8 <GetPvAngle+0xc68>)
  402394:	4628      	mov	r0, r5
  402396:	4631      	mov	r1, r6
  402398:	47a0      	blx	r4
  40239a:	4603      	mov	r3, r0
  40239c:	460c      	mov	r4, r1
  40239e:	461d      	mov	r5, r3
  4023a0:	4626      	mov	r6, r4
  4023a2:	4b8d      	ldr	r3, [pc, #564]	; (4025d8 <GetPvAngle+0xc58>)
  4023a4:	4991      	ldr	r1, [pc, #580]	; (4025ec <GetPvAngle+0xc6c>)
  4023a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  4023a8:	4798      	blx	r3
  4023aa:	4603      	mov	r3, r0
  4023ac:	461a      	mov	r2, r3
  4023ae:	4b8a      	ldr	r3, [pc, #552]	; (4025d8 <GetPvAngle+0xc58>)
  4023b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
  4023b2:	4610      	mov	r0, r2
  4023b4:	4798      	blx	r3
  4023b6:	4603      	mov	r3, r0
  4023b8:	461a      	mov	r2, r3
  4023ba:	4b88      	ldr	r3, [pc, #544]	; (4025dc <GetPvAngle+0xc5c>)
  4023bc:	4610      	mov	r0, r2
  4023be:	4798      	blx	r3
  4023c0:	4680      	mov	r8, r0
  4023c2:	4689      	mov	r9, r1
  4023c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
  4023c6:	4b83      	ldr	r3, [pc, #524]	; (4025d4 <GetPvAngle+0xc54>)
  4023c8:	4798      	blx	r3
  4023ca:	4602      	mov	r2, r0
  4023cc:	4b88      	ldr	r3, [pc, #544]	; (4025f0 <GetPvAngle+0xc70>)
  4023ce:	4611      	mov	r1, r2
  4023d0:	4610      	mov	r0, r2
  4023d2:	4798      	blx	r3
  4023d4:	4603      	mov	r3, r0
  4023d6:	461a      	mov	r2, r3
  4023d8:	4b80      	ldr	r3, [pc, #512]	; (4025dc <GetPvAngle+0xc5c>)
  4023da:	4610      	mov	r0, r2
  4023dc:	4798      	blx	r3
  4023de:	4603      	mov	r3, r0
  4023e0:	460c      	mov	r4, r1
  4023e2:	4618      	mov	r0, r3
  4023e4:	4621      	mov	r1, r4
  4023e6:	4b7e      	ldr	r3, [pc, #504]	; (4025e0 <GetPvAngle+0xc60>)
  4023e8:	4798      	blx	r3
  4023ea:	4602      	mov	r2, r0
  4023ec:	460b      	mov	r3, r1
  4023ee:	4c7d      	ldr	r4, [pc, #500]	; (4025e4 <GetPvAngle+0xc64>)
  4023f0:	4640      	mov	r0, r8
  4023f2:	4649      	mov	r1, r9
  4023f4:	47a0      	blx	r4
  4023f6:	4603      	mov	r3, r0
  4023f8:	460c      	mov	r4, r1
  4023fa:	461a      	mov	r2, r3
  4023fc:	4623      	mov	r3, r4
  4023fe:	4c7a      	ldr	r4, [pc, #488]	; (4025e8 <GetPvAngle+0xc68>)
  402400:	4628      	mov	r0, r5
  402402:	4631      	mov	r1, r6
  402404:	47a0      	blx	r4
  402406:	4603      	mov	r3, r0
  402408:	460c      	mov	r4, r1
  40240a:	4619      	mov	r1, r3
  40240c:	4622      	mov	r2, r4
  40240e:	4b79      	ldr	r3, [pc, #484]	; (4025f4 <GetPvAngle+0xc74>)
  402410:	4608      	mov	r0, r1
  402412:	4611      	mov	r1, r2
  402414:	4798      	blx	r3
  402416:	4603      	mov	r3, r0
  402418:	4618      	mov	r0, r3
  40241a:	4b77      	ldr	r3, [pc, #476]	; (4025f8 <GetPvAngle+0xc78>)
  40241c:	4798      	blx	r3
  40241e:	4602      	mov	r2, r0
  402420:	4b6d      	ldr	r3, [pc, #436]	; (4025d8 <GetPvAngle+0xc58>)
  402422:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  402426:	4610      	mov	r0, r2
  402428:	4798      	blx	r3
  40242a:	4603      	mov	r3, r0
  40242c:	60fb      	str	r3, [r7, #12]
	r = Deg(acos(cos(Rad(90.833f)) / (cos(Rad(lat))*cos(Rad(o))) - tan(Rad(lat))*tan(Rad(o))));
  40242e:	4873      	ldr	r0, [pc, #460]	; (4025fc <GetPvAngle+0xc7c>)
  402430:	4b68      	ldr	r3, [pc, #416]	; (4025d4 <GetPvAngle+0xc54>)
  402432:	4798      	blx	r3
  402434:	4602      	mov	r2, r0
  402436:	4b69      	ldr	r3, [pc, #420]	; (4025dc <GetPvAngle+0xc5c>)
  402438:	4610      	mov	r0, r2
  40243a:	4798      	blx	r3
  40243c:	4603      	mov	r3, r0
  40243e:	460c      	mov	r4, r1
  402440:	4618      	mov	r0, r3
  402442:	4621      	mov	r1, r4
  402444:	4b6e      	ldr	r3, [pc, #440]	; (402600 <GetPvAngle+0xc80>)
  402446:	4798      	blx	r3
  402448:	4605      	mov	r5, r0
  40244a:	460e      	mov	r6, r1
  40244c:	4b6d      	ldr	r3, [pc, #436]	; (402604 <GetPvAngle+0xc84>)
  40244e:	681b      	ldr	r3, [r3, #0]
  402450:	4618      	mov	r0, r3
  402452:	4b60      	ldr	r3, [pc, #384]	; (4025d4 <GetPvAngle+0xc54>)
  402454:	4798      	blx	r3
  402456:	4602      	mov	r2, r0
  402458:	4b60      	ldr	r3, [pc, #384]	; (4025dc <GetPvAngle+0xc5c>)
  40245a:	4610      	mov	r0, r2
  40245c:	4798      	blx	r3
  40245e:	4603      	mov	r3, r0
  402460:	460c      	mov	r4, r1
  402462:	4618      	mov	r0, r3
  402464:	4621      	mov	r1, r4
  402466:	4b66      	ldr	r3, [pc, #408]	; (402600 <GetPvAngle+0xc80>)
  402468:	4798      	blx	r3
  40246a:	4680      	mov	r8, r0
  40246c:	4689      	mov	r9, r1
  40246e:	6978      	ldr	r0, [r7, #20]
  402470:	4b58      	ldr	r3, [pc, #352]	; (4025d4 <GetPvAngle+0xc54>)
  402472:	4798      	blx	r3
  402474:	4602      	mov	r2, r0
  402476:	4b59      	ldr	r3, [pc, #356]	; (4025dc <GetPvAngle+0xc5c>)
  402478:	4610      	mov	r0, r2
  40247a:	4798      	blx	r3
  40247c:	4603      	mov	r3, r0
  40247e:	460c      	mov	r4, r1
  402480:	4618      	mov	r0, r3
  402482:	4621      	mov	r1, r4
  402484:	4b5e      	ldr	r3, [pc, #376]	; (402600 <GetPvAngle+0xc80>)
  402486:	4798      	blx	r3
  402488:	4602      	mov	r2, r0
  40248a:	460b      	mov	r3, r1
  40248c:	4c55      	ldr	r4, [pc, #340]	; (4025e4 <GetPvAngle+0xc64>)
  40248e:	4640      	mov	r0, r8
  402490:	4649      	mov	r1, r9
  402492:	47a0      	blx	r4
  402494:	4603      	mov	r3, r0
  402496:	460c      	mov	r4, r1
  402498:	461a      	mov	r2, r3
  40249a:	4623      	mov	r3, r4
  40249c:	4c5a      	ldr	r4, [pc, #360]	; (402608 <GetPvAngle+0xc88>)
  40249e:	4628      	mov	r0, r5
  4024a0:	4631      	mov	r1, r6
  4024a2:	47a0      	blx	r4
  4024a4:	4603      	mov	r3, r0
  4024a6:	460c      	mov	r4, r1
  4024a8:	461d      	mov	r5, r3
  4024aa:	4626      	mov	r6, r4
  4024ac:	4b55      	ldr	r3, [pc, #340]	; (402604 <GetPvAngle+0xc84>)
  4024ae:	681b      	ldr	r3, [r3, #0]
  4024b0:	4618      	mov	r0, r3
  4024b2:	4b48      	ldr	r3, [pc, #288]	; (4025d4 <GetPvAngle+0xc54>)
  4024b4:	4798      	blx	r3
  4024b6:	4602      	mov	r2, r0
  4024b8:	4b48      	ldr	r3, [pc, #288]	; (4025dc <GetPvAngle+0xc5c>)
  4024ba:	4610      	mov	r0, r2
  4024bc:	4798      	blx	r3
  4024be:	4603      	mov	r3, r0
  4024c0:	460c      	mov	r4, r1
  4024c2:	4618      	mov	r0, r3
  4024c4:	4621      	mov	r1, r4
  4024c6:	4b51      	ldr	r3, [pc, #324]	; (40260c <GetPvAngle+0xc8c>)
  4024c8:	4798      	blx	r3
  4024ca:	4680      	mov	r8, r0
  4024cc:	4689      	mov	r9, r1
  4024ce:	6978      	ldr	r0, [r7, #20]
  4024d0:	4b40      	ldr	r3, [pc, #256]	; (4025d4 <GetPvAngle+0xc54>)
  4024d2:	4798      	blx	r3
  4024d4:	4602      	mov	r2, r0
  4024d6:	4b41      	ldr	r3, [pc, #260]	; (4025dc <GetPvAngle+0xc5c>)
  4024d8:	4610      	mov	r0, r2
  4024da:	4798      	blx	r3
  4024dc:	4603      	mov	r3, r0
  4024de:	460c      	mov	r4, r1
  4024e0:	4618      	mov	r0, r3
  4024e2:	4621      	mov	r1, r4
  4024e4:	4b49      	ldr	r3, [pc, #292]	; (40260c <GetPvAngle+0xc8c>)
  4024e6:	4798      	blx	r3
  4024e8:	4602      	mov	r2, r0
  4024ea:	460b      	mov	r3, r1
  4024ec:	4c3d      	ldr	r4, [pc, #244]	; (4025e4 <GetPvAngle+0xc64>)
  4024ee:	4640      	mov	r0, r8
  4024f0:	4649      	mov	r1, r9
  4024f2:	47a0      	blx	r4
  4024f4:	4603      	mov	r3, r0
  4024f6:	460c      	mov	r4, r1
  4024f8:	461a      	mov	r2, r3
  4024fa:	4623      	mov	r3, r4
  4024fc:	4c3a      	ldr	r4, [pc, #232]	; (4025e8 <GetPvAngle+0xc68>)
  4024fe:	4628      	mov	r0, r5
  402500:	4631      	mov	r1, r6
  402502:	47a0      	blx	r4
  402504:	4603      	mov	r3, r0
  402506:	460c      	mov	r4, r1
  402508:	4618      	mov	r0, r3
  40250a:	4621      	mov	r1, r4
  40250c:	4b40      	ldr	r3, [pc, #256]	; (402610 <GetPvAngle+0xc90>)
  40250e:	4798      	blx	r3
  402510:	460a      	mov	r2, r1
  402512:	4601      	mov	r1, r0
  402514:	4b37      	ldr	r3, [pc, #220]	; (4025f4 <GetPvAngle+0xc74>)
  402516:	4608      	mov	r0, r1
  402518:	4611      	mov	r1, r2
  40251a:	4798      	blx	r3
  40251c:	4603      	mov	r3, r0
  40251e:	4618      	mov	r0, r3
  402520:	4b35      	ldr	r3, [pc, #212]	; (4025f8 <GetPvAngle+0xc78>)
  402522:	4798      	blx	r3
  402524:	60b8      	str	r0, [r7, #8]
	s = ((int)(timeInSecs * 1440 + q + 4 * lon - 60 * timeZone)) % 1440;
  402526:	4b2c      	ldr	r3, [pc, #176]	; (4025d8 <GetPvAngle+0xc58>)
  402528:	493a      	ldr	r1, [pc, #232]	; (402614 <GetPvAngle+0xc94>)
  40252a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
  40252e:	4798      	blx	r3
  402530:	4603      	mov	r3, r0
  402532:	461a      	mov	r2, r3
  402534:	4b2e      	ldr	r3, [pc, #184]	; (4025f0 <GetPvAngle+0xc70>)
  402536:	68f9      	ldr	r1, [r7, #12]
  402538:	4610      	mov	r0, r2
  40253a:	4798      	blx	r3
  40253c:	4603      	mov	r3, r0
  40253e:	461c      	mov	r4, r3
  402540:	4b35      	ldr	r3, [pc, #212]	; (402618 <GetPvAngle+0xc98>)
  402542:	681a      	ldr	r2, [r3, #0]
  402544:	4b24      	ldr	r3, [pc, #144]	; (4025d8 <GetPvAngle+0xc58>)
  402546:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  40254a:	4610      	mov	r0, r2
  40254c:	4798      	blx	r3
  40254e:	4603      	mov	r3, r0
  402550:	461a      	mov	r2, r3
  402552:	4b27      	ldr	r3, [pc, #156]	; (4025f0 <GetPvAngle+0xc70>)
  402554:	4611      	mov	r1, r2
  402556:	4620      	mov	r0, r4
  402558:	4798      	blx	r3
  40255a:	4603      	mov	r3, r0
  40255c:	461c      	mov	r4, r3
  40255e:	4b2f      	ldr	r3, [pc, #188]	; (40261c <GetPvAngle+0xc9c>)
  402560:	681a      	ldr	r2, [r3, #0]
  402562:	4b1d      	ldr	r3, [pc, #116]	; (4025d8 <GetPvAngle+0xc58>)
  402564:	492e      	ldr	r1, [pc, #184]	; (402620 <GetPvAngle+0xca0>)
  402566:	4610      	mov	r0, r2
  402568:	4798      	blx	r3
  40256a:	4603      	mov	r3, r0
  40256c:	461a      	mov	r2, r3
  40256e:	4b2d      	ldr	r3, [pc, #180]	; (402624 <GetPvAngle+0xca4>)
  402570:	4611      	mov	r1, r2
  402572:	4620      	mov	r0, r4
  402574:	4798      	blx	r3
  402576:	4603      	mov	r3, r0
  402578:	461a      	mov	r2, r3
  40257a:	4b2b      	ldr	r3, [pc, #172]	; (402628 <GetPvAngle+0xca8>)
  40257c:	4610      	mov	r0, r2
  40257e:	4798      	blx	r3
  402580:	4603      	mov	r3, r0
  402582:	4a2a      	ldr	r2, [pc, #168]	; (40262c <GetPvAngle+0xcac>)
  402584:	fb83 1202 	smull	r1, r2, r3, r2
  402588:	441a      	add	r2, r3
  40258a:	1291      	asrs	r1, r2, #10
  40258c:	17da      	asrs	r2, r3, #31
  40258e:	1a8a      	subs	r2, r1, r2
  402590:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
  402594:	fb01 f202 	mul.w	r2, r1, r2
  402598:	1a9a      	subs	r2, r3, r2
  40259a:	4b25      	ldr	r3, [pc, #148]	; (402630 <GetPvAngle+0xcb0>)
  40259c:	4610      	mov	r0, r2
  40259e:	4798      	blx	r3
  4025a0:	4603      	mov	r3, r0
  4025a2:	607b      	str	r3, [r7, #4]
	if ((s / 4.0f) < 0)
  4025a4:	4b23      	ldr	r3, [pc, #140]	; (402634 <GetPvAngle+0xcb4>)
  4025a6:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  4025aa:	6878      	ldr	r0, [r7, #4]
  4025ac:	4798      	blx	r3
  4025ae:	4603      	mov	r3, r0
  4025b0:	461a      	mov	r2, r3
  4025b2:	4b21      	ldr	r3, [pc, #132]	; (402638 <GetPvAngle+0xcb8>)
  4025b4:	f04f 0100 	mov.w	r1, #0
  4025b8:	4610      	mov	r0, r2
  4025ba:	4798      	blx	r3
  4025bc:	4603      	mov	r3, r0
  4025be:	2b00      	cmp	r3, #0
  4025c0:	d044      	beq.n	40264c <GetPvAngle+0xccc>
	{
		t = (s / 4.0f) + 180.0f;
  4025c2:	4b1c      	ldr	r3, [pc, #112]	; (402634 <GetPvAngle+0xcb4>)
  4025c4:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  4025c8:	6878      	ldr	r0, [r7, #4]
  4025ca:	4798      	blx	r3
  4025cc:	4603      	mov	r3, r0
  4025ce:	461a      	mov	r2, r3
  4025d0:	e034      	b.n	40263c <GetPvAngle+0xcbc>
  4025d2:	bf00      	nop
  4025d4:	00402811 	.word	0x00402811
  4025d8:	0040aa51 	.word	0x0040aa51
  4025dc:	0040a13d 	.word	0x0040a13d
  4025e0:	00407655 	.word	0x00407655
  4025e4:	0040a1e5 	.word	0x0040a1e5
  4025e8:	00409e7d 	.word	0x00409e7d
  4025ec:	3fa00000 	.word	0x3fa00000
  4025f0:	0040a841 	.word	0x0040a841
  4025f4:	0040a795 	.word	0x0040a795
  4025f8:	00402849 	.word	0x00402849
  4025fc:	42b5aa7f 	.word	0x42b5aa7f
  402600:	004075c1 	.word	0x004075c1
  402604:	2000000c 	.word	0x2000000c
  402608:	0040a439 	.word	0x0040a439
  40260c:	004076dd 	.word	0x004076dd
  402610:	00407739 	.word	0x00407739
  402614:	44b40000 	.word	0x44b40000
  402618:	20000010 	.word	0x20000010
  40261c:	20000014 	.word	0x20000014
  402620:	42700000 	.word	0x42700000
  402624:	0040a83d 	.word	0x0040a83d
  402628:	0040addd 	.word	0x0040addd
  40262c:	b60b60b7 	.word	0xb60b60b7
  402630:	0040a9a9 	.word	0x0040a9a9
  402634:	0040abb9 	.word	0x0040abb9
  402638:	0040ad8d 	.word	0x0040ad8d
  40263c:	4b13      	ldr	r3, [pc, #76]	; (40268c <GetPvAngle+0xd0c>)
  40263e:	4914      	ldr	r1, [pc, #80]	; (402690 <GetPvAngle+0xd10>)
  402640:	4610      	mov	r0, r2
  402642:	4798      	blx	r3
  402644:	4603      	mov	r3, r0
  402646:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  40264a:	e00d      	b.n	402668 <GetPvAngle+0xce8>
	}
	else
	{
		t = (s / 4.0f) - 180.0f;
  40264c:	4b11      	ldr	r3, [pc, #68]	; (402694 <GetPvAngle+0xd14>)
  40264e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
  402652:	6878      	ldr	r0, [r7, #4]
  402654:	4798      	blx	r3
  402656:	4603      	mov	r3, r0
  402658:	461a      	mov	r2, r3
  40265a:	4b0f      	ldr	r3, [pc, #60]	; (402698 <GetPvAngle+0xd18>)
  40265c:	490c      	ldr	r1, [pc, #48]	; (402690 <GetPvAngle+0xd10>)
  40265e:	4610      	mov	r0, r2
  402660:	4798      	blx	r3
  402662:	4603      	mov	r3, r0
  402664:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	}
	return (90.0f / r*t);
  402668:	4b0a      	ldr	r3, [pc, #40]	; (402694 <GetPvAngle+0xd14>)
  40266a:	68b9      	ldr	r1, [r7, #8]
  40266c:	480b      	ldr	r0, [pc, #44]	; (40269c <GetPvAngle+0xd1c>)
  40266e:	4798      	blx	r3
  402670:	4603      	mov	r3, r0
  402672:	461a      	mov	r2, r3
  402674:	4b0a      	ldr	r3, [pc, #40]	; (4026a0 <GetPvAngle+0xd20>)
  402676:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
  40267a:	4610      	mov	r0, r2
  40267c:	4798      	blx	r3
  40267e:	4603      	mov	r3, r0
}
  402680:	4618      	mov	r0, r3
  402682:	37bc      	adds	r7, #188	; 0xbc
  402684:	46bd      	mov	sp, r7
  402686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40268a:	bf00      	nop
  40268c:	0040a841 	.word	0x0040a841
  402690:	43340000 	.word	0x43340000
  402694:	0040abb9 	.word	0x0040abb9
  402698:	0040a83d 	.word	0x0040a83d
  40269c:	42b40000 	.word	0x42b40000
  4026a0:	0040aa51 	.word	0x0040aa51

004026a4 <GetPvBackTrackAngle>:

float GetPvBackTrackAngle(float pvAngle)
{
  4026a4:	b590      	push	{r4, r7, lr}
  4026a6:	b085      	sub	sp, #20
  4026a8:	af00      	add	r7, sp, #0
  4026aa:	6078      	str	r0, [r7, #4]
	float a0;
	
	a0 = pvAngle*0.0174603f;
  4026ac:	4b44      	ldr	r3, [pc, #272]	; (4027c0 <GetPvBackTrackAngle+0x11c>)
  4026ae:	4945      	ldr	r1, [pc, #276]	; (4027c4 <GetPvBackTrackAngle+0x120>)
  4026b0:	6878      	ldr	r0, [r7, #4]
  4026b2:	4798      	blx	r3
  4026b4:	4603      	mov	r3, r0
  4026b6:	60fb      	str	r3, [r7, #12]
	a0 += 1.575f;
  4026b8:	4b43      	ldr	r3, [pc, #268]	; (4027c8 <GetPvBackTrackAngle+0x124>)
  4026ba:	4944      	ldr	r1, [pc, #272]	; (4027cc <GetPvBackTrackAngle+0x128>)
  4026bc:	68f8      	ldr	r0, [r7, #12]
  4026be:	4798      	blx	r3
  4026c0:	4603      	mov	r3, r0
  4026c2:	60fb      	str	r3, [r7, #12]
	a0 -= 0.028989f;
  4026c4:	4b42      	ldr	r3, [pc, #264]	; (4027d0 <GetPvBackTrackAngle+0x12c>)
  4026c6:	4943      	ldr	r1, [pc, #268]	; (4027d4 <GetPvBackTrackAngle+0x130>)
  4026c8:	68f8      	ldr	r0, [r7, #12]
  4026ca:	4798      	blx	r3
  4026cc:	4603      	mov	r3, r0
  4026ce:	60fb      	str	r3, [r7, #12]
	a0 = sin(a0);
  4026d0:	4b41      	ldr	r3, [pc, #260]	; (4027d8 <GetPvBackTrackAngle+0x134>)
  4026d2:	68f8      	ldr	r0, [r7, #12]
  4026d4:	4798      	blx	r3
  4026d6:	4603      	mov	r3, r0
  4026d8:	460c      	mov	r4, r1
  4026da:	4618      	mov	r0, r3
  4026dc:	4621      	mov	r1, r4
  4026de:	4b3f      	ldr	r3, [pc, #252]	; (4027dc <GetPvBackTrackAngle+0x138>)
  4026e0:	4798      	blx	r3
  4026e2:	460a      	mov	r2, r1
  4026e4:	4601      	mov	r1, r0
  4026e6:	4b3e      	ldr	r3, [pc, #248]	; (4027e0 <GetPvBackTrackAngle+0x13c>)
  4026e8:	4608      	mov	r0, r1
  4026ea:	4611      	mov	r1, r2
  4026ec:	4798      	blx	r3
  4026ee:	4603      	mov	r3, r0
  4026f0:	60fb      	str	r3, [r7, #12]
	a0 = a0 * dist;
  4026f2:	4b3c      	ldr	r3, [pc, #240]	; (4027e4 <GetPvBackTrackAngle+0x140>)
  4026f4:	681a      	ldr	r2, [r3, #0]
  4026f6:	4b32      	ldr	r3, [pc, #200]	; (4027c0 <GetPvBackTrackAngle+0x11c>)
  4026f8:	4611      	mov	r1, r2
  4026fa:	68f8      	ldr	r0, [r7, #12]
  4026fc:	4798      	blx	r3
  4026fe:	4603      	mov	r3, r0
  402700:	60fb      	str	r3, [r7, #12]
	a0 = a0 / width;
  402702:	4b39      	ldr	r3, [pc, #228]	; (4027e8 <GetPvBackTrackAngle+0x144>)
  402704:	681a      	ldr	r2, [r3, #0]
  402706:	4b39      	ldr	r3, [pc, #228]	; (4027ec <GetPvBackTrackAngle+0x148>)
  402708:	4611      	mov	r1, r2
  40270a:	68f8      	ldr	r0, [r7, #12]
  40270c:	4798      	blx	r3
  40270e:	4603      	mov	r3, r0
  402710:	60fb      	str	r3, [r7, #12]
	/* If this val is < 1 enter back track calculation */
	/* Otherwise exit backtracking mode */
	if (a0 < 1)
  402712:	4b37      	ldr	r3, [pc, #220]	; (4027f0 <GetPvBackTrackAngle+0x14c>)
  402714:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  402718:	68f8      	ldr	r0, [r7, #12]
  40271a:	4798      	blx	r3
  40271c:	4603      	mov	r3, r0
  40271e:	2b00      	cmp	r3, #0
  402720:	d048      	beq.n	4027b4 <GetPvBackTrackAngle+0x110>
	{
		a0 = asin(a0);
  402722:	4b2d      	ldr	r3, [pc, #180]	; (4027d8 <GetPvBackTrackAngle+0x134>)
  402724:	68f8      	ldr	r0, [r7, #12]
  402726:	4798      	blx	r3
  402728:	4603      	mov	r3, r0
  40272a:	460c      	mov	r4, r1
  40272c:	4618      	mov	r0, r3
  40272e:	4621      	mov	r1, r4
  402730:	4b30      	ldr	r3, [pc, #192]	; (4027f4 <GetPvBackTrackAngle+0x150>)
  402732:	4798      	blx	r3
  402734:	460a      	mov	r2, r1
  402736:	4601      	mov	r1, r0
  402738:	4b29      	ldr	r3, [pc, #164]	; (4027e0 <GetPvBackTrackAngle+0x13c>)
  40273a:	4608      	mov	r0, r1
  40273c:	4611      	mov	r1, r2
  40273e:	4798      	blx	r3
  402740:	4603      	mov	r3, r0
  402742:	60fb      	str	r3, [r7, #12]
		a0 = a0 * 57.2958f;
  402744:	4b1e      	ldr	r3, [pc, #120]	; (4027c0 <GetPvBackTrackAngle+0x11c>)
  402746:	492c      	ldr	r1, [pc, #176]	; (4027f8 <GetPvBackTrackAngle+0x154>)
  402748:	68f8      	ldr	r0, [r7, #12]
  40274a:	4798      	blx	r3
  40274c:	4603      	mov	r3, r0
  40274e:	60fb      	str	r3, [r7, #12]
		if ((pvAngle >= -90) && (pvAngle < 0))
  402750:	4b2a      	ldr	r3, [pc, #168]	; (4027fc <GetPvBackTrackAngle+0x158>)
  402752:	492b      	ldr	r1, [pc, #172]	; (402800 <GetPvBackTrackAngle+0x15c>)
  402754:	6878      	ldr	r0, [r7, #4]
  402756:	4798      	blx	r3
  402758:	4603      	mov	r3, r0
  40275a:	2b00      	cmp	r3, #0
  40275c:	d012      	beq.n	402784 <GetPvBackTrackAngle+0xe0>
  40275e:	4b24      	ldr	r3, [pc, #144]	; (4027f0 <GetPvBackTrackAngle+0x14c>)
  402760:	f04f 0100 	mov.w	r1, #0
  402764:	6878      	ldr	r0, [r7, #4]
  402766:	4798      	blx	r3
  402768:	4603      	mov	r3, r0
  40276a:	2b00      	cmp	r3, #0
  40276c:	d00a      	beq.n	402784 <GetPvBackTrackAngle+0xe0>
		{
			a0 = -a0 / 2.0;
  40276e:	68fb      	ldr	r3, [r7, #12]
  402770:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
  402774:	4b1d      	ldr	r3, [pc, #116]	; (4027ec <GetPvBackTrackAngle+0x148>)
  402776:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40277a:	4610      	mov	r0, r2
  40277c:	4798      	blx	r3
  40277e:	4603      	mov	r3, r0
  402780:	60fb      	str	r3, [r7, #12]
  402782:	e015      	b.n	4027b0 <GetPvBackTrackAngle+0x10c>
		}
		else if ((pvAngle >= 0) && (pvAngle <= 90))
  402784:	4b1d      	ldr	r3, [pc, #116]	; (4027fc <GetPvBackTrackAngle+0x158>)
  402786:	f04f 0100 	mov.w	r1, #0
  40278a:	6878      	ldr	r0, [r7, #4]
  40278c:	4798      	blx	r3
  40278e:	4603      	mov	r3, r0
  402790:	2b00      	cmp	r3, #0
  402792:	d00d      	beq.n	4027b0 <GetPvBackTrackAngle+0x10c>
  402794:	4b1b      	ldr	r3, [pc, #108]	; (402804 <GetPvBackTrackAngle+0x160>)
  402796:	491c      	ldr	r1, [pc, #112]	; (402808 <GetPvBackTrackAngle+0x164>)
  402798:	6878      	ldr	r0, [r7, #4]
  40279a:	4798      	blx	r3
  40279c:	4603      	mov	r3, r0
  40279e:	2b00      	cmp	r3, #0
  4027a0:	d006      	beq.n	4027b0 <GetPvBackTrackAngle+0x10c>
		{
			a0 = a0 / 2.0;
  4027a2:	4b12      	ldr	r3, [pc, #72]	; (4027ec <GetPvBackTrackAngle+0x148>)
  4027a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4027a8:	68f8      	ldr	r0, [r7, #12]
  4027aa:	4798      	blx	r3
  4027ac:	4603      	mov	r3, r0
  4027ae:	60fb      	str	r3, [r7, #12]
		}
		return a0;
  4027b0:	68fb      	ldr	r3, [r7, #12]
  4027b2:	e000      	b.n	4027b6 <GetPvBackTrackAngle+0x112>
	}
	else
		return NAN;
  4027b4:	4b15      	ldr	r3, [pc, #84]	; (40280c <GetPvBackTrackAngle+0x168>)
}
  4027b6:	4618      	mov	r0, r3
  4027b8:	3714      	adds	r7, #20
  4027ba:	46bd      	mov	sp, r7
  4027bc:	bd90      	pop	{r4, r7, pc}
  4027be:	bf00      	nop
  4027c0:	0040aa51 	.word	0x0040aa51
  4027c4:	3c8f08e7 	.word	0x3c8f08e7
  4027c8:	0040a841 	.word	0x0040a841
  4027cc:	3fc9999a 	.word	0x3fc9999a
  4027d0:	0040a83d 	.word	0x0040a83d
  4027d4:	3ced7a57 	.word	0x3ced7a57
  4027d8:	0040a13d 	.word	0x0040a13d
  4027dc:	00407655 	.word	0x00407655
  4027e0:	0040a795 	.word	0x0040a795
  4027e4:	20000018 	.word	0x20000018
  4027e8:	2000001c 	.word	0x2000001c
  4027ec:	0040abb9 	.word	0x0040abb9
  4027f0:	0040ad8d 	.word	0x0040ad8d
  4027f4:	004077e9 	.word	0x004077e9
  4027f8:	42652ee6 	.word	0x42652ee6
  4027fc:	0040adb5 	.word	0x0040adb5
  402800:	c2b40000 	.word	0xc2b40000
  402804:	0040ada1 	.word	0x0040ada1
  402808:	42b40000 	.word	0x42b40000
  40280c:	7fc00000 	.word	0x7fc00000

00402810 <Rad>:

float Rad(float deg)
{
  402810:	b580      	push	{r7, lr}
  402812:	b082      	sub	sp, #8
  402814:	af00      	add	r7, sp, #0
  402816:	6078      	str	r0, [r7, #4]
	return ((float)M_PI*deg)/180.0f;
  402818:	4b07      	ldr	r3, [pc, #28]	; (402838 <Rad+0x28>)
  40281a:	4908      	ldr	r1, [pc, #32]	; (40283c <Rad+0x2c>)
  40281c:	6878      	ldr	r0, [r7, #4]
  40281e:	4798      	blx	r3
  402820:	4603      	mov	r3, r0
  402822:	461a      	mov	r2, r3
  402824:	4b06      	ldr	r3, [pc, #24]	; (402840 <Rad+0x30>)
  402826:	4907      	ldr	r1, [pc, #28]	; (402844 <Rad+0x34>)
  402828:	4610      	mov	r0, r2
  40282a:	4798      	blx	r3
  40282c:	4603      	mov	r3, r0
}
  40282e:	4618      	mov	r0, r3
  402830:	3708      	adds	r7, #8
  402832:	46bd      	mov	sp, r7
  402834:	bd80      	pop	{r7, pc}
  402836:	bf00      	nop
  402838:	0040aa51 	.word	0x0040aa51
  40283c:	40490fdb 	.word	0x40490fdb
  402840:	0040abb9 	.word	0x0040abb9
  402844:	43340000 	.word	0x43340000

00402848 <Deg>:

float Deg(float rad)
{
  402848:	b580      	push	{r7, lr}
  40284a:	b082      	sub	sp, #8
  40284c:	af00      	add	r7, sp, #0
  40284e:	6078      	str	r0, [r7, #4]
	return (180.0f *rad) / (float)M_PI;
  402850:	4b07      	ldr	r3, [pc, #28]	; (402870 <Deg+0x28>)
  402852:	4908      	ldr	r1, [pc, #32]	; (402874 <Deg+0x2c>)
  402854:	6878      	ldr	r0, [r7, #4]
  402856:	4798      	blx	r3
  402858:	4603      	mov	r3, r0
  40285a:	461a      	mov	r2, r3
  40285c:	4b06      	ldr	r3, [pc, #24]	; (402878 <Deg+0x30>)
  40285e:	4907      	ldr	r1, [pc, #28]	; (40287c <Deg+0x34>)
  402860:	4610      	mov	r0, r2
  402862:	4798      	blx	r3
  402864:	4603      	mov	r3, r0
}
  402866:	4618      	mov	r0, r3
  402868:	3708      	adds	r7, #8
  40286a:	46bd      	mov	sp, r7
  40286c:	bd80      	pop	{r7, pc}
  40286e:	bf00      	nop
  402870:	0040aa51 	.word	0x0040aa51
  402874:	43340000 	.word	0x43340000
  402878:	0040abb9 	.word	0x0040abb9
  40287c:	40490fdb 	.word	0x40490fdb

00402880 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  402880:	b480      	push	{r7}
  402882:	b083      	sub	sp, #12
  402884:	af00      	add	r7, sp, #0
  402886:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402888:	687b      	ldr	r3, [r7, #4]
  40288a:	2b07      	cmp	r3, #7
  40288c:	d825      	bhi.n	4028da <osc_get_rate+0x5a>
  40288e:	a201      	add	r2, pc, #4	; (adr r2, 402894 <osc_get_rate+0x14>)
  402890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402894:	004028b5 	.word	0x004028b5
  402898:	004028bb 	.word	0x004028bb
  40289c:	004028c1 	.word	0x004028c1
  4028a0:	004028c7 	.word	0x004028c7
  4028a4:	004028cb 	.word	0x004028cb
  4028a8:	004028cf 	.word	0x004028cf
  4028ac:	004028d3 	.word	0x004028d3
  4028b0:	004028d7 	.word	0x004028d7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4028b4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4028b8:	e010      	b.n	4028dc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4028ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4028be:	e00d      	b.n	4028dc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4028c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4028c4:	e00a      	b.n	4028dc <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4028c6:	4b08      	ldr	r3, [pc, #32]	; (4028e8 <osc_get_rate+0x68>)
  4028c8:	e008      	b.n	4028dc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4028ca:	4b08      	ldr	r3, [pc, #32]	; (4028ec <osc_get_rate+0x6c>)
  4028cc:	e006      	b.n	4028dc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4028ce:	4b08      	ldr	r3, [pc, #32]	; (4028f0 <osc_get_rate+0x70>)
  4028d0:	e004      	b.n	4028dc <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4028d2:	4b07      	ldr	r3, [pc, #28]	; (4028f0 <osc_get_rate+0x70>)
  4028d4:	e002      	b.n	4028dc <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4028d6:	4b06      	ldr	r3, [pc, #24]	; (4028f0 <osc_get_rate+0x70>)
  4028d8:	e000      	b.n	4028dc <osc_get_rate+0x5c>
	}

	return 0;
  4028da:	2300      	movs	r3, #0
}
  4028dc:	4618      	mov	r0, r3
  4028de:	370c      	adds	r7, #12
  4028e0:	46bd      	mov	sp, r7
  4028e2:	bc80      	pop	{r7}
  4028e4:	4770      	bx	lr
  4028e6:	bf00      	nop
  4028e8:	003d0900 	.word	0x003d0900
  4028ec:	007a1200 	.word	0x007a1200
  4028f0:	00b71b00 	.word	0x00b71b00

004028f4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4028f4:	b580      	push	{r7, lr}
  4028f6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4028f8:	2006      	movs	r0, #6
  4028fa:	4b04      	ldr	r3, [pc, #16]	; (40290c <sysclk_get_main_hz+0x18>)
  4028fc:	4798      	blx	r3
  4028fe:	4602      	mov	r2, r0
  402900:	4613      	mov	r3, r2
  402902:	009b      	lsls	r3, r3, #2
  402904:	4413      	add	r3, r2
  402906:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  402908:	4618      	mov	r0, r3
  40290a:	bd80      	pop	{r7, pc}
  40290c:	00402881 	.word	0x00402881

00402910 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  402910:	b580      	push	{r7, lr}
  402912:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  402914:	4b02      	ldr	r3, [pc, #8]	; (402920 <sysclk_get_peripheral_hz+0x10>)
  402916:	4798      	blx	r3
  402918:	4603      	mov	r3, r0
  40291a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40291c:	4618      	mov	r0, r3
  40291e:	bd80      	pop	{r7, pc}
  402920:	004028f5 	.word	0x004028f5

00402924 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  402924:	b580      	push	{r7, lr}
  402926:	b082      	sub	sp, #8
  402928:	af00      	add	r7, sp, #0
  40292a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40292c:	6878      	ldr	r0, [r7, #4]
  40292e:	4b03      	ldr	r3, [pc, #12]	; (40293c <sysclk_enable_peripheral_clock+0x18>)
  402930:	4798      	blx	r3
}
  402932:	bf00      	nop
  402934:	3708      	adds	r7, #8
  402936:	46bd      	mov	sp, r7
  402938:	bd80      	pop	{r7, pc}
  40293a:	bf00      	nop
  40293c:	004049b9 	.word	0x004049b9

00402940 <InitRs485Pdc>:
 pdc_packet_t rs485PdcPkt;
 /* Pointer to PDC register base. */
 Pdc *rs485PdcBase;

 void InitRs485Pdc(void)
 {
  402940:	b5b0      	push	{r4, r5, r7, lr}
  402942:	b086      	sub	sp, #24
  402944:	af00      	add	r7, sp, #0
	 const sam_usart_opt_t usart_console_settings = {
  402946:	4b15      	ldr	r3, [pc, #84]	; (40299c <InitRs485Pdc+0x5c>)
  402948:	463c      	mov	r4, r7
  40294a:	461d      	mov	r5, r3
  40294c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40294e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402950:	e895 0003 	ldmia.w	r5, {r0, r1}
  402954:	e884 0003 	stmia.w	r4, {r0, r1}
		 /* This field is only used in IrDA mode. */
		 0
	 };

	 /* Enable the peripheral clock in the PMC. */
	 sysclk_enable_peripheral_clock(RS485_USART_ID);
  402958:	200f      	movs	r0, #15
  40295a:	4b11      	ldr	r3, [pc, #68]	; (4029a0 <InitRs485Pdc+0x60>)
  40295c:	4798      	blx	r3

	 /* Configure USART in RS485 mode. */
	 usart_init_rs485(RS485_USART, &usart_console_settings,
  40295e:	4b11      	ldr	r3, [pc, #68]	; (4029a4 <InitRs485Pdc+0x64>)
  402960:	4798      	blx	r3
  402962:	4602      	mov	r2, r0
  402964:	463b      	mov	r3, r7
  402966:	4619      	mov	r1, r3
  402968:	480f      	ldr	r0, [pc, #60]	; (4029a8 <InitRs485Pdc+0x68>)
  40296a:	4b10      	ldr	r3, [pc, #64]	; (4029ac <InitRs485Pdc+0x6c>)
  40296c:	4798      	blx	r3
	 sysclk_get_peripheral_hz());


	 /* Enable TX & RX function. */
	 usart_enable_tx(RS485_USART);
  40296e:	480e      	ldr	r0, [pc, #56]	; (4029a8 <InitRs485Pdc+0x68>)
  402970:	4b0f      	ldr	r3, [pc, #60]	; (4029b0 <InitRs485Pdc+0x70>)
  402972:	4798      	blx	r3
	 usart_enable_rx(RS485_USART);
  402974:	480c      	ldr	r0, [pc, #48]	; (4029a8 <InitRs485Pdc+0x68>)
  402976:	4b0f      	ldr	r3, [pc, #60]	; (4029b4 <InitRs485Pdc+0x74>)
  402978:	4798      	blx	r3
 	 
	 /* Get board USART PDC base address and enable receiver and transmitter. */
	 rs485PdcBase = usart_get_pdc_base(RS485_USART);
  40297a:	480b      	ldr	r0, [pc, #44]	; (4029a8 <InitRs485Pdc+0x68>)
  40297c:	4b0e      	ldr	r3, [pc, #56]	; (4029b8 <InitRs485Pdc+0x78>)
  40297e:	4798      	blx	r3
  402980:	4602      	mov	r2, r0
  402982:	4b0e      	ldr	r3, [pc, #56]	; (4029bc <InitRs485Pdc+0x7c>)
  402984:	601a      	str	r2, [r3, #0]
	 pdc_enable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  402986:	4b0d      	ldr	r3, [pc, #52]	; (4029bc <InitRs485Pdc+0x7c>)
  402988:	681b      	ldr	r3, [r3, #0]
  40298a:	f240 1101 	movw	r1, #257	; 0x101
  40298e:	4618      	mov	r0, r3
  402990:	4b0b      	ldr	r3, [pc, #44]	; (4029c0 <InitRs485Pdc+0x80>)
  402992:	4798      	blx	r3

 }
  402994:	bf00      	nop
  402996:	3718      	adds	r7, #24
  402998:	46bd      	mov	sp, r7
  40299a:	bdb0      	pop	{r4, r5, r7, pc}
  40299c:	0040b524 	.word	0x0040b524
  4029a0:	00402925 	.word	0x00402925
  4029a4:	00402911 	.word	0x00402911
  4029a8:	40028000 	.word	0x40028000
  4029ac:	00403751 	.word	0x00403751
  4029b0:	00403791 	.word	0x00403791
  4029b4:	004037d9 	.word	0x004037d9
  4029b8:	004038f9 	.word	0x004038f9
  4029bc:	2000271c 	.word	0x2000271c
  4029c0:	00403161 	.word	0x00403161

004029c4 <Rs485PdcStartTx>:

 /* Set pointers and start transmitting */
 void Rs485PdcStartTx(uint32_t buff, uint16_t nBytes)
 {
  4029c4:	b580      	push	{r7, lr}
  4029c6:	b082      	sub	sp, #8
  4029c8:	af00      	add	r7, sp, #0
  4029ca:	6078      	str	r0, [r7, #4]
  4029cc:	460b      	mov	r3, r1
  4029ce:	807b      	strh	r3, [r7, #2]
	rs485PdcPkt.ul_addr = buff;
  4029d0:	4a08      	ldr	r2, [pc, #32]	; (4029f4 <Rs485PdcStartTx+0x30>)
  4029d2:	687b      	ldr	r3, [r7, #4]
  4029d4:	6013      	str	r3, [r2, #0]
	rs485PdcPkt.ul_size = nBytes;
  4029d6:	887b      	ldrh	r3, [r7, #2]
  4029d8:	4a06      	ldr	r2, [pc, #24]	; (4029f4 <Rs485PdcStartTx+0x30>)
  4029da:	6053      	str	r3, [r2, #4]
	pdc_tx_init(rs485PdcBase, &rs485PdcPkt, NULL);
  4029dc:	4b06      	ldr	r3, [pc, #24]	; (4029f8 <Rs485PdcStartTx+0x34>)
  4029de:	681b      	ldr	r3, [r3, #0]
  4029e0:	2200      	movs	r2, #0
  4029e2:	4904      	ldr	r1, [pc, #16]	; (4029f4 <Rs485PdcStartTx+0x30>)
  4029e4:	4618      	mov	r0, r3
  4029e6:	4b05      	ldr	r3, [pc, #20]	; (4029fc <Rs485PdcStartTx+0x38>)
  4029e8:	4798      	blx	r3
 }
  4029ea:	bf00      	nop
  4029ec:	3708      	adds	r7, #8
  4029ee:	46bd      	mov	sp, r7
  4029f0:	bd80      	pop	{r7, pc}
  4029f2:	bf00      	nop
  4029f4:	20002720 	.word	0x20002720
  4029f8:	2000271c 	.word	0x2000271c
  4029fc:	004030d9 	.word	0x004030d9

00402a00 <Rs485PdcStartRx>:

 /* Set pointers and start receiving */
 void Rs485PdcStartRx(uint32_t buff, uint16_t nBytes)
 {
  402a00:	b580      	push	{r7, lr}
  402a02:	b082      	sub	sp, #8
  402a04:	af00      	add	r7, sp, #0
  402a06:	6078      	str	r0, [r7, #4]
  402a08:	460b      	mov	r3, r1
  402a0a:	807b      	strh	r3, [r7, #2]
	rs485PdcPkt.ul_addr = buff;
  402a0c:	4a08      	ldr	r2, [pc, #32]	; (402a30 <Rs485PdcStartRx+0x30>)
  402a0e:	687b      	ldr	r3, [r7, #4]
  402a10:	6013      	str	r3, [r2, #0]
	rs485PdcPkt.ul_size = nBytes;
  402a12:	887b      	ldrh	r3, [r7, #2]
  402a14:	4a06      	ldr	r2, [pc, #24]	; (402a30 <Rs485PdcStartRx+0x30>)
  402a16:	6053      	str	r3, [r2, #4]
	pdc_rx_init(rs485PdcBase, &rs485PdcPkt, NULL);
  402a18:	4b06      	ldr	r3, [pc, #24]	; (402a34 <Rs485PdcStartRx+0x34>)
  402a1a:	681b      	ldr	r3, [r3, #0]
  402a1c:	2200      	movs	r2, #0
  402a1e:	4904      	ldr	r1, [pc, #16]	; (402a30 <Rs485PdcStartRx+0x30>)
  402a20:	4618      	mov	r0, r3
  402a22:	4b05      	ldr	r3, [pc, #20]	; (402a38 <Rs485PdcStartRx+0x38>)
  402a24:	4798      	blx	r3
 }
  402a26:	bf00      	nop
  402a28:	3708      	adds	r7, #8
  402a2a:	46bd      	mov	sp, r7
  402a2c:	bd80      	pop	{r7, pc}
  402a2e:	bf00      	nop
  402a30:	20002720 	.word	0x20002720
  402a34:	2000271c 	.word	0x2000271c
  402a38:	0040311d 	.word	0x0040311d

00402a3c <Rs485PdcGetRxBytes>:
 
 /* Returns number of bytes in Rx buffer */
 uint32_t Rs485PdcGetRxBytes(void)
 {
  402a3c:	b580      	push	{r7, lr}
  402a3e:	b082      	sub	sp, #8
  402a40:	af00      	add	r7, sp, #0
	uint32_t recvdBytes = RS485_BUFFER_SIZE;
  402a42:	2396      	movs	r3, #150	; 0x96
  402a44:	607b      	str	r3, [r7, #4]
	recvdBytes -= pdc_read_rx_counter(rs485PdcBase);
  402a46:	4b09      	ldr	r3, [pc, #36]	; (402a6c <Rs485PdcGetRxBytes+0x30>)
  402a48:	681b      	ldr	r3, [r3, #0]
  402a4a:	4618      	mov	r0, r3
  402a4c:	4b08      	ldr	r3, [pc, #32]	; (402a70 <Rs485PdcGetRxBytes+0x34>)
  402a4e:	4798      	blx	r3
  402a50:	4602      	mov	r2, r0
  402a52:	687b      	ldr	r3, [r7, #4]
  402a54:	1a9b      	subs	r3, r3, r2
  402a56:	607b      	str	r3, [r7, #4]
	if(recvdBytes>RS485_BUFFER_SIZE)//If overflow occurred. 
  402a58:	687b      	ldr	r3, [r7, #4]
  402a5a:	2b96      	cmp	r3, #150	; 0x96
  402a5c:	d901      	bls.n	402a62 <Rs485PdcGetRxBytes+0x26>
	{
		recvdBytes = 0;
  402a5e:	2300      	movs	r3, #0
  402a60:	607b      	str	r3, [r7, #4]
	}
	return recvdBytes;
  402a62:	687b      	ldr	r3, [r7, #4]
 }
  402a64:	4618      	mov	r0, r3
  402a66:	3708      	adds	r7, #8
  402a68:	46bd      	mov	sp, r7
  402a6a:	bd80      	pop	{r7, pc}
  402a6c:	2000271c 	.word	0x2000271c
  402a70:	004031a1 	.word	0x004031a1

00402a74 <Rs485PdcGetTxStatus>:
	return (usart_get_status(RS485_USART)&US_CSR_ENDRX);
 }

 /* Returns 1 if Tx Buffer is empty else 0 */
 uint32_t Rs485PdcGetTxStatus(void)
 {
  402a74:	b580      	push	{r7, lr}
  402a76:	af00      	add	r7, sp, #0
	return (usart_get_status(RS485_USART)&US_CSR_ENDTX);
  402a78:	4803      	ldr	r0, [pc, #12]	; (402a88 <Rs485PdcGetTxStatus+0x14>)
  402a7a:	4b04      	ldr	r3, [pc, #16]	; (402a8c <Rs485PdcGetTxStatus+0x18>)
  402a7c:	4798      	blx	r3
  402a7e:	4603      	mov	r3, r0
  402a80:	f003 0310 	and.w	r3, r3, #16
 }
  402a84:	4618      	mov	r0, r3
  402a86:	bd80      	pop	{r7, pc}
  402a88:	40028000 	.word	0x40028000
  402a8c:	00403871 	.word	0x00403871

00402a90 <local_twi_handler>:
/*
 * For internal use only.
 * A common TWI interrupt handler that is called for all TWI peripherals.
 */
static void local_twi_handler(const portBASE_TYPE twi_index)
{
  402a90:	b590      	push	{r4, r7, lr}
  402a92:	b08b      	sub	sp, #44	; 0x2c
  402a94:	af00      	add	r7, sp, #0
  402a96:	6078      	str	r0, [r7, #4]
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
  402a98:	2300      	movs	r3, #0
  402a9a:	60bb      	str	r3, [r7, #8]
	uint32_t twi_status;
	Twi *twi_port;
	bool transfer_timeout = false;
  402a9c:	2300      	movs	r3, #0
  402a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	twi_port = all_twi_definitions[twi_index].peripheral_base_address;
  402aa2:	4a7f      	ldr	r2, [pc, #508]	; (402ca0 <local_twi_handler+0x210>)
  402aa4:	687b      	ldr	r3, [r7, #4]
  402aa6:	011b      	lsls	r3, r3, #4
  402aa8:	4413      	add	r3, r2
  402aaa:	681b      	ldr	r3, [r3, #0]
  402aac:	61bb      	str	r3, [r7, #24]

	twi_status = twi_get_interrupt_status(twi_port);
  402aae:	69b8      	ldr	r0, [r7, #24]
  402ab0:	4b7c      	ldr	r3, [pc, #496]	; (402ca4 <local_twi_handler+0x214>)
  402ab2:	4798      	blx	r3
  402ab4:	6178      	str	r0, [r7, #20]
	twi_status &= twi_get_interrupt_mask(twi_port);
  402ab6:	69b8      	ldr	r0, [r7, #24]
  402ab8:	4b7b      	ldr	r3, [pc, #492]	; (402ca8 <local_twi_handler+0x218>)
  402aba:	4798      	blx	r3
  402abc:	4602      	mov	r2, r0
  402abe:	697b      	ldr	r3, [r7, #20]
  402ac0:	4013      	ands	r3, r2
  402ac2:	617b      	str	r3, [r7, #20]

	/* Has the PDC completed a transmission? */
	if ((twi_status & TWI_SR_ENDTX) != 0UL) {
  402ac4:	697b      	ldr	r3, [r7, #20]
  402ac6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  402aca:	2b00      	cmp	r3, #0
  402acc:	d071      	beq.n	402bb2 <local_twi_handler+0x122>
		/* Disable PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_TXTDIS);
  402ace:	4a74      	ldr	r2, [pc, #464]	; (402ca0 <local_twi_handler+0x210>)
  402ad0:	687b      	ldr	r3, [r7, #4]
  402ad2:	011b      	lsls	r3, r3, #4
  402ad4:	4413      	add	r3, r2
  402ad6:	3304      	adds	r3, #4
  402ad8:	681b      	ldr	r3, [r3, #0]
  402ada:	f44f 7100 	mov.w	r1, #512	; 0x200
  402ade:	4618      	mov	r0, r3
  402ae0:	4b72      	ldr	r3, [pc, #456]	; (402cac <local_twi_handler+0x21c>)
  402ae2:	4798      	blx	r3
		twi_disable_interrupt(twi_port, TWI_IDR_ENDTX);
  402ae4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  402ae8:	69b8      	ldr	r0, [r7, #24]
  402aea:	4b71      	ldr	r3, [pc, #452]	; (402cb0 <local_twi_handler+0x220>)
  402aec:	4798      	blx	r3

		uint8_t status;
		uint32_t timeout_counter = 0;
  402aee:	2300      	movs	r3, #0
  402af0:	623b      	str	r3, [r7, #32]

		/* Wait for TX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  402af2:	69bb      	ldr	r3, [r7, #24]
  402af4:	6a1b      	ldr	r3, [r3, #32]
  402af6:	74fb      	strb	r3, [r7, #19]
			if (status & TWI_SR_TXRDY) {
  402af8:	7cfb      	ldrb	r3, [r7, #19]
  402afa:	f003 0304 	and.w	r3, r3, #4
  402afe:	2b00      	cmp	r3, #0
  402b00:	d10a      	bne.n	402b18 <local_twi_handler+0x88>
				break;
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  402b02:	6a3b      	ldr	r3, [r7, #32]
  402b04:	3301      	adds	r3, #1
  402b06:	623b      	str	r3, [r7, #32]
  402b08:	6a3b      	ldr	r3, [r7, #32]
  402b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
  402b0e:	d1f0      	bne.n	402af2 <local_twi_handler+0x62>
				transfer_timeout = true;
  402b10:	2301      	movs	r3, #1
  402b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
  402b16:	e000      	b.n	402b1a <local_twi_handler+0x8a>

		/* Wait for TX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
			if (status & TWI_SR_TXRDY) {
				break;
  402b18:	bf00      	nop
				transfer_timeout = true;
				break;
			}
		}
		/* Complete the transfer - stop and last byte */
		twi_port->TWI_CR = TWI_CR_STOP;
  402b1a:	69bb      	ldr	r3, [r7, #24]
  402b1c:	2202      	movs	r2, #2
  402b1e:	601a      	str	r2, [r3, #0]
		twi_port->TWI_THR = twis[twi_index].buffer[twis[twi_index].length-1];
  402b20:	4a64      	ldr	r2, [pc, #400]	; (402cb4 <local_twi_handler+0x224>)
  402b22:	687b      	ldr	r3, [r7, #4]
  402b24:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  402b28:	4962      	ldr	r1, [pc, #392]	; (402cb4 <local_twi_handler+0x224>)
  402b2a:	687b      	ldr	r3, [r7, #4]
  402b2c:	00db      	lsls	r3, r3, #3
  402b2e:	440b      	add	r3, r1
  402b30:	685b      	ldr	r3, [r3, #4]
  402b32:	3b01      	subs	r3, #1
  402b34:	4413      	add	r3, r2
  402b36:	781b      	ldrb	r3, [r3, #0]
  402b38:	461a      	mov	r2, r3
  402b3a:	69bb      	ldr	r3, [r7, #24]
  402b3c:	635a      	str	r2, [r3, #52]	; 0x34

		/* Wait for TX complete flag */
		while (1) {
			status = twi_port->TWI_SR;
  402b3e:	69bb      	ldr	r3, [r7, #24]
  402b40:	6a1b      	ldr	r3, [r3, #32]
  402b42:	74fb      	strb	r3, [r7, #19]
			if (status & TWI_SR_TXCOMP) {
  402b44:	7cfb      	ldrb	r3, [r7, #19]
  402b46:	f003 0301 	and.w	r3, r3, #1
  402b4a:	2b00      	cmp	r3, #0
  402b4c:	d10a      	bne.n	402b64 <local_twi_handler+0xd4>
				break;
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  402b4e:	6a3b      	ldr	r3, [r7, #32]
  402b50:	3301      	adds	r3, #1
  402b52:	623b      	str	r3, [r7, #32]
  402b54:	6a3b      	ldr	r3, [r7, #32]
  402b56:	f1b3 3fff 	cmp.w	r3, #4294967295
  402b5a:	d1f0      	bne.n	402b3e <local_twi_handler+0xae>
				transfer_timeout = true;
  402b5c:	2301      	movs	r3, #1
  402b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
  402b62:	e000      	b.n	402b66 <local_twi_handler+0xd6>

		/* Wait for TX complete flag */
		while (1) {
			status = twi_port->TWI_SR;
			if (status & TWI_SR_TXCOMP) {
				break;
  402b64:	bf00      	nop
				break;
			}
		}
		/* If the driver is supporting multi-threading, then return the access
		mutex. */
		if (tx_dma_control[twi_index].peripheral_access_sem != NULL) {
  402b66:	4a54      	ldr	r2, [pc, #336]	; (402cb8 <local_twi_handler+0x228>)
  402b68:	687b      	ldr	r3, [r7, #4]
  402b6a:	00db      	lsls	r3, r3, #3
  402b6c:	4413      	add	r3, r2
  402b6e:	685b      	ldr	r3, [r3, #4]
  402b70:	2b00      	cmp	r3, #0
  402b72:	d00a      	beq.n	402b8a <local_twi_handler+0xfa>
			xSemaphoreGiveFromISR(
  402b74:	4a50      	ldr	r2, [pc, #320]	; (402cb8 <local_twi_handler+0x228>)
  402b76:	687b      	ldr	r3, [r7, #4]
  402b78:	00db      	lsls	r3, r3, #3
  402b7a:	4413      	add	r3, r2
  402b7c:	6858      	ldr	r0, [r3, #4]
  402b7e:	f107 0208 	add.w	r2, r7, #8
  402b82:	2300      	movs	r3, #0
  402b84:	2100      	movs	r1, #0
  402b86:	4c4d      	ldr	r4, [pc, #308]	; (402cbc <local_twi_handler+0x22c>)
  402b88:	47a0      	blx	r4
					&higher_priority_task_woken);
		}

		/* if the sending task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  402b8a:	6a3b      	ldr	r3, [r7, #32]
  402b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
  402b90:	d00f      	beq.n	402bb2 <local_twi_handler+0x122>
			if (tx_dma_control[twi_index]. transaction_complete_notification_semaphore != NULL) {
  402b92:	4a49      	ldr	r2, [pc, #292]	; (402cb8 <local_twi_handler+0x228>)
  402b94:	687b      	ldr	r3, [r7, #4]
  402b96:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  402b9a:	2b00      	cmp	r3, #0
  402b9c:	d009      	beq.n	402bb2 <local_twi_handler+0x122>
				xSemaphoreGiveFromISR(
  402b9e:	4a46      	ldr	r2, [pc, #280]	; (402cb8 <local_twi_handler+0x228>)
  402ba0:	687b      	ldr	r3, [r7, #4]
  402ba2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
  402ba6:	f107 0208 	add.w	r2, r7, #8
  402baa:	2300      	movs	r3, #0
  402bac:	2100      	movs	r1, #0
  402bae:	4c43      	ldr	r4, [pc, #268]	; (402cbc <local_twi_handler+0x22c>)
  402bb0:	47a0      	blx	r4
			}
		}
	}

	/* Has the PDC completed a reception? */
	if ((twi_status & TWI_SR_ENDRX) != 0UL) {
  402bb2:	697b      	ldr	r3, [r7, #20]
  402bb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  402bb8:	2b00      	cmp	r3, #0
  402bba:	f000 80a8 	beq.w	402d0e <local_twi_handler+0x27e>
		uint32_t timeout_counter = 0;
  402bbe:	2300      	movs	r3, #0
  402bc0:	61fb      	str	r3, [r7, #28]
		uint32_t status;
		/* Must handle the two last bytes */
		/* Disable PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_RXTDIS);
  402bc2:	4a37      	ldr	r2, [pc, #220]	; (402ca0 <local_twi_handler+0x210>)
  402bc4:	687b      	ldr	r3, [r7, #4]
  402bc6:	011b      	lsls	r3, r3, #4
  402bc8:	4413      	add	r3, r2
  402bca:	3304      	adds	r3, #4
  402bcc:	681b      	ldr	r3, [r3, #0]
  402bce:	2102      	movs	r1, #2
  402bd0:	4618      	mov	r0, r3
  402bd2:	4b36      	ldr	r3, [pc, #216]	; (402cac <local_twi_handler+0x21c>)
  402bd4:	4798      	blx	r3

		twi_disable_interrupt(twi_port, TWI_IDR_ENDRX);
  402bd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402bda:	69b8      	ldr	r0, [r7, #24]
  402bdc:	4b34      	ldr	r3, [pc, #208]	; (402cb0 <local_twi_handler+0x220>)
  402bde:	4798      	blx	r3

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  402be0:	69bb      	ldr	r3, [r7, #24]
  402be2:	6a1b      	ldr	r3, [r3, #32]
  402be4:	60fb      	str	r3, [r7, #12]
			if (status & TWI_SR_RXRDY) {
  402be6:	68fb      	ldr	r3, [r7, #12]
  402be8:	f003 0302 	and.w	r3, r3, #2
  402bec:	2b00      	cmp	r3, #0
  402bee:	d107      	bne.n	402c00 <local_twi_handler+0x170>
				break;
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  402bf0:	69fb      	ldr	r3, [r7, #28]
  402bf2:	3301      	adds	r3, #1
  402bf4:	61fb      	str	r3, [r7, #28]
  402bf6:	69fb      	ldr	r3, [r7, #28]
  402bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
  402bfc:	d002      	beq.n	402c04 <local_twi_handler+0x174>
				break;
			}
		}
  402bfe:	e7ef      	b.n	402be0 <local_twi_handler+0x150>

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
			if (status & TWI_SR_RXRDY) {
				break;
  402c00:	bf00      	nop
  402c02:	e000      	b.n	402c06 <local_twi_handler+0x176>
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
				break;
  402c04:	bf00      	nop
			}
		}
		/* Complete the transfer. */
		twi_port->TWI_CR = TWI_CR_STOP;
  402c06:	69bb      	ldr	r3, [r7, #24]
  402c08:	2202      	movs	r2, #2
  402c0a:	601a      	str	r2, [r3, #0]
		/* Read second last data */
		twis[twi_index].buffer[(twis[twi_index].length)-2] = twi_port->TWI_RHR;
  402c0c:	4a29      	ldr	r2, [pc, #164]	; (402cb4 <local_twi_handler+0x224>)
  402c0e:	687b      	ldr	r3, [r7, #4]
  402c10:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  402c14:	4927      	ldr	r1, [pc, #156]	; (402cb4 <local_twi_handler+0x224>)
  402c16:	687b      	ldr	r3, [r7, #4]
  402c18:	00db      	lsls	r3, r3, #3
  402c1a:	440b      	add	r3, r1
  402c1c:	685b      	ldr	r3, [r3, #4]
  402c1e:	3b02      	subs	r3, #2
  402c20:	4413      	add	r3, r2
  402c22:	69ba      	ldr	r2, [r7, #24]
  402c24:	6b12      	ldr	r2, [r2, #48]	; 0x30
  402c26:	b2d2      	uxtb	r2, r2
  402c28:	701a      	strb	r2, [r3, #0]

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  402c2a:	69bb      	ldr	r3, [r7, #24]
  402c2c:	6a1b      	ldr	r3, [r3, #32]
  402c2e:	60fb      	str	r3, [r7, #12]
			if (status & TWI_SR_RXRDY) {
  402c30:	68fb      	ldr	r3, [r7, #12]
  402c32:	f003 0302 	and.w	r3, r3, #2
  402c36:	2b00      	cmp	r3, #0
  402c38:	d107      	bne.n	402c4a <local_twi_handler+0x1ba>
				break;
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  402c3a:	69fb      	ldr	r3, [r7, #28]
  402c3c:	3301      	adds	r3, #1
  402c3e:	61fb      	str	r3, [r7, #28]
  402c40:	69fb      	ldr	r3, [r7, #28]
  402c42:	f1b3 3fff 	cmp.w	r3, #4294967295
  402c46:	d002      	beq.n	402c4e <local_twi_handler+0x1be>
				break;
			}
		}
  402c48:	e7ef      	b.n	402c2a <local_twi_handler+0x19a>

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
			if (status & TWI_SR_RXRDY) {
				break;
  402c4a:	bf00      	nop
  402c4c:	e000      	b.n	402c50 <local_twi_handler+0x1c0>
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
				break;
  402c4e:	bf00      	nop
			}
		}

		if (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  402c50:	69fb      	ldr	r3, [r7, #28]
  402c52:	f1b3 3fff 	cmp.w	r3, #4294967295
  402c56:	d034      	beq.n	402cc2 <local_twi_handler+0x232>
			/* Read last data */
			twis[twi_index].buffer[(twis[twi_index].length)-1] = twi_port->TWI_RHR;
  402c58:	4a16      	ldr	r2, [pc, #88]	; (402cb4 <local_twi_handler+0x224>)
  402c5a:	687b      	ldr	r3, [r7, #4]
  402c5c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  402c60:	4914      	ldr	r1, [pc, #80]	; (402cb4 <local_twi_handler+0x224>)
  402c62:	687b      	ldr	r3, [r7, #4]
  402c64:	00db      	lsls	r3, r3, #3
  402c66:	440b      	add	r3, r1
  402c68:	685b      	ldr	r3, [r3, #4]
  402c6a:	3b01      	subs	r3, #1
  402c6c:	4413      	add	r3, r2
  402c6e:	69ba      	ldr	r2, [r7, #24]
  402c70:	6b12      	ldr	r2, [r2, #48]	; 0x30
  402c72:	b2d2      	uxtb	r2, r2
  402c74:	701a      	strb	r2, [r3, #0]
			timeout_counter = 0;
  402c76:	2300      	movs	r3, #0
  402c78:	61fb      	str	r3, [r7, #28]
			/* Wait for TX complete flag before releasing semaphore */
			while (1) {
				status = twi_port->TWI_SR;
  402c7a:	69bb      	ldr	r3, [r7, #24]
  402c7c:	6a1b      	ldr	r3, [r3, #32]
  402c7e:	60fb      	str	r3, [r7, #12]
				if (status & TWI_SR_TXCOMP) {
  402c80:	68fb      	ldr	r3, [r7, #12]
  402c82:	f003 0301 	and.w	r3, r3, #1
  402c86:	2b00      	cmp	r3, #0
  402c88:	d11a      	bne.n	402cc0 <local_twi_handler+0x230>
					break;
				}
				/* Check timeout condition. */
				if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  402c8a:	69fb      	ldr	r3, [r7, #28]
  402c8c:	3301      	adds	r3, #1
  402c8e:	61fb      	str	r3, [r7, #28]
  402c90:	69fb      	ldr	r3, [r7, #28]
  402c92:	f1b3 3fff 	cmp.w	r3, #4294967295
  402c96:	d1f0      	bne.n	402c7a <local_twi_handler+0x1ea>
					transfer_timeout = true;
  402c98:	2301      	movs	r3, #1
  402c9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
  402c9e:	e010      	b.n	402cc2 <local_twi_handler+0x232>
  402ca0:	0040b53c 	.word	0x0040b53c
  402ca4:	00403599 	.word	0x00403599
  402ca8:	004035b1 	.word	0x004035b1
  402cac:	00403181 	.word	0x00403181
  402cb0:	00403579 	.word	0x00403579
  402cb4:	200004f4 	.word	0x200004f4
  402cb8:	200004d4 	.word	0x200004d4
  402cbc:	00405695 	.word	0x00405695
			timeout_counter = 0;
			/* Wait for TX complete flag before releasing semaphore */
			while (1) {
				status = twi_port->TWI_SR;
				if (status & TWI_SR_TXCOMP) {
					break;
  402cc0:	bf00      	nop
		}

		/* If the driver is supporting multi-threading, then return the access
		mutex.  NOTE: As the peripheral is half duplex there is only one
		access mutex, and the reception uses the tx access muted. */
		if (tx_dma_control[twi_index].peripheral_access_sem != NULL) {
  402cc2:	4a33      	ldr	r2, [pc, #204]	; (402d90 <local_twi_handler+0x300>)
  402cc4:	687b      	ldr	r3, [r7, #4]
  402cc6:	00db      	lsls	r3, r3, #3
  402cc8:	4413      	add	r3, r2
  402cca:	685b      	ldr	r3, [r3, #4]
  402ccc:	2b00      	cmp	r3, #0
  402cce:	d00a      	beq.n	402ce6 <local_twi_handler+0x256>
			xSemaphoreGiveFromISR(
  402cd0:	4a2f      	ldr	r2, [pc, #188]	; (402d90 <local_twi_handler+0x300>)
  402cd2:	687b      	ldr	r3, [r7, #4]
  402cd4:	00db      	lsls	r3, r3, #3
  402cd6:	4413      	add	r3, r2
  402cd8:	6858      	ldr	r0, [r3, #4]
  402cda:	f107 0208 	add.w	r2, r7, #8
  402cde:	2300      	movs	r3, #0
  402ce0:	2100      	movs	r1, #0
  402ce2:	4c2c      	ldr	r4, [pc, #176]	; (402d94 <local_twi_handler+0x304>)
  402ce4:	47a0      	blx	r4
					&higher_priority_task_woken);
		}

		/* if the receiving task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if  (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  402ce6:	69fb      	ldr	r3, [r7, #28]
  402ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
  402cec:	d00f      	beq.n	402d0e <local_twi_handler+0x27e>
			if (rx_dma_control[twi_index].transaction_complete_notification_semaphore != NULL) {
  402cee:	4a2a      	ldr	r2, [pc, #168]	; (402d98 <local_twi_handler+0x308>)
  402cf0:	687b      	ldr	r3, [r7, #4]
  402cf2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  402cf6:	2b00      	cmp	r3, #0
  402cf8:	d009      	beq.n	402d0e <local_twi_handler+0x27e>
				xSemaphoreGiveFromISR(
  402cfa:	4a27      	ldr	r2, [pc, #156]	; (402d98 <local_twi_handler+0x308>)
  402cfc:	687b      	ldr	r3, [r7, #4]
  402cfe:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
  402d02:	f107 0208 	add.w	r2, r7, #8
  402d06:	2300      	movs	r3, #0
  402d08:	2100      	movs	r1, #0
  402d0a:	4c22      	ldr	r4, [pc, #136]	; (402d94 <local_twi_handler+0x304>)
  402d0c:	47a0      	blx	r4
						&higher_priority_task_woken);
			}
		}
	}

	if (((twi_status & SR_ERROR_INTERRUPTS) != 0) || (transfer_timeout == true)) {
  402d0e:	697b      	ldr	r3, [r7, #20]
  402d10:	f403 7350 	and.w	r3, r3, #832	; 0x340
  402d14:	2b00      	cmp	r3, #0
  402d16:	d103      	bne.n	402d20 <local_twi_handler+0x290>
  402d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  402d1c:	2b00      	cmp	r3, #0
  402d1e:	d02e      	beq.n	402d7e <local_twi_handler+0x2ee>
		Stop the transmission, disable interrupts used by the peripheral, and
		ensure the peripheral access mutex is made available to tasks.  As this
		peripheral is half duplex, only the Tx peripheral access mutex exits.*/

		/* Stop the PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
  402d20:	4a1e      	ldr	r2, [pc, #120]	; (402d9c <local_twi_handler+0x30c>)
  402d22:	687b      	ldr	r3, [r7, #4]
  402d24:	011b      	lsls	r3, r3, #4
  402d26:	4413      	add	r3, r2
  402d28:	3304      	adds	r3, #4
  402d2a:	681b      	ldr	r3, [r3, #0]
  402d2c:	f240 2102 	movw	r1, #514	; 0x202
  402d30:	4618      	mov	r0, r3
  402d32:	4b1b      	ldr	r3, [pc, #108]	; (402da0 <local_twi_handler+0x310>)
  402d34:	4798      	blx	r3

		if (!(twi_status & TWI_SR_NACK)) {
  402d36:	697b      	ldr	r3, [r7, #20]
  402d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
  402d3c:	2b00      	cmp	r3, #0
  402d3e:	d102      	bne.n	402d46 <local_twi_handler+0x2b6>
			/* Do not send stop if NACK received. Handled by hardware */
			twi_port->TWI_CR = TWI_CR_STOP;
  402d40:	69bb      	ldr	r3, [r7, #24]
  402d42:	2202      	movs	r2, #2
  402d44:	601a      	str	r2, [r3, #0]
		}
		twi_disable_interrupt(twi_port, TWI_IDR_ENDTX);
  402d46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  402d4a:	69b8      	ldr	r0, [r7, #24]
  402d4c:	4b15      	ldr	r3, [pc, #84]	; (402da4 <local_twi_handler+0x314>)
  402d4e:	4798      	blx	r3
		twi_disable_interrupt(twi_port, TWI_IDR_ENDRX);
  402d50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402d54:	69b8      	ldr	r0, [r7, #24]
  402d56:	4b13      	ldr	r3, [pc, #76]	; (402da4 <local_twi_handler+0x314>)
  402d58:	4798      	blx	r3

		if (tx_dma_control[twi_index].peripheral_access_sem != NULL) {
  402d5a:	4a0d      	ldr	r2, [pc, #52]	; (402d90 <local_twi_handler+0x300>)
  402d5c:	687b      	ldr	r3, [r7, #4]
  402d5e:	00db      	lsls	r3, r3, #3
  402d60:	4413      	add	r3, r2
  402d62:	685b      	ldr	r3, [r3, #4]
  402d64:	2b00      	cmp	r3, #0
  402d66:	d00a      	beq.n	402d7e <local_twi_handler+0x2ee>
			xSemaphoreGiveFromISR(
  402d68:	4a09      	ldr	r2, [pc, #36]	; (402d90 <local_twi_handler+0x300>)
  402d6a:	687b      	ldr	r3, [r7, #4]
  402d6c:	00db      	lsls	r3, r3, #3
  402d6e:	4413      	add	r3, r2
  402d70:	6858      	ldr	r0, [r3, #4]
  402d72:	f107 0208 	add.w	r2, r7, #8
  402d76:	2300      	movs	r3, #0
  402d78:	2100      	movs	r1, #0
  402d7a:	4c06      	ldr	r4, [pc, #24]	; (402d94 <local_twi_handler+0x304>)
  402d7c:	47a0      	blx	r4
	has a priority equal to or higher than the currently running task (the task
	this ISR interrupted), then higher_priority_task_woken will have
	automatically been set to pdTRUE within the semaphore function.
	portEND_SWITCHING_ISR() will then ensure that this ISR returns directly to
	the higher priority unblocked task. */
	portEND_SWITCHING_ISR(higher_priority_task_woken);
  402d7e:	68bb      	ldr	r3, [r7, #8]
  402d80:	2b00      	cmp	r3, #0
  402d82:	d001      	beq.n	402d88 <local_twi_handler+0x2f8>
  402d84:	4b08      	ldr	r3, [pc, #32]	; (402da8 <local_twi_handler+0x318>)
  402d86:	4798      	blx	r3
}
  402d88:	bf00      	nop
  402d8a:	372c      	adds	r7, #44	; 0x2c
  402d8c:	46bd      	mov	sp, r7
  402d8e:	bd90      	pop	{r4, r7, pc}
  402d90:	200004d4 	.word	0x200004d4
  402d94:	00405695 	.word	0x00405695
  402d98:	200004e4 	.word	0x200004e4
  402d9c:	0040b53c 	.word	0x0040b53c
  402da0:	00403181 	.word	0x00403181
  402da4:	00403579 	.word	0x00403579
  402da8:	00405015 	.word	0x00405015

00402dac <TWI0_Handler>:
#endif /* TWI */

#ifdef TWI0

void TWI0_Handler(void)
{
  402dac:	b580      	push	{r7, lr}
  402dae:	af00      	add	r7, sp, #0
	local_twi_handler(0);
  402db0:	2000      	movs	r0, #0
  402db2:	4b02      	ldr	r3, [pc, #8]	; (402dbc <TWI0_Handler+0x10>)
  402db4:	4798      	blx	r3
}
  402db6:	bf00      	nop
  402db8:	bd80      	pop	{r7, pc}
  402dba:	bf00      	nop
  402dbc:	00402a91 	.word	0x00402a91

00402dc0 <TWI1_Handler>:
#endif

#ifdef TWI1

void TWI1_Handler(void)
{
  402dc0:	b580      	push	{r7, lr}
  402dc2:	af00      	add	r7, sp, #0
	local_twi_handler(1);
  402dc4:	2001      	movs	r0, #1
  402dc6:	4b02      	ldr	r3, [pc, #8]	; (402dd0 <TWI1_Handler+0x10>)
  402dc8:	4798      	blx	r3
}
  402dca:	bf00      	nop
  402dcc:	bd80      	pop	{r7, pc}
  402dce:	bf00      	nop
  402dd0:	00402a91 	.word	0x00402a91

00402dd4 <configure_rx_dma>:
 * For internal use only.
 * Configures the Rx DMA to receive data into free space within the Rx buffer.
 */
static void configure_rx_dma(uint32_t usart_index,
		enum buffer_operations operation_performed)
{
  402dd4:	b580      	push	{r7, lr}
  402dd6:	b084      	sub	sp, #16
  402dd8:	af00      	add	r7, sp, #0
  402dda:	6078      	str	r0, [r7, #4]
  402ddc:	460b      	mov	r3, r1
  402dde:	70fb      	strb	r3, [r7, #3]
	freertos_pdc_rx_control_t *rx_buffer_definition;

	rx_buffer_definition = &(rx_buffer_definitions[usart_index]);
  402de0:	687a      	ldr	r2, [r7, #4]
  402de2:	4613      	mov	r3, r2
  402de4:	00db      	lsls	r3, r3, #3
  402de6:	1a9b      	subs	r3, r3, r2
  402de8:	009b      	lsls	r3, r3, #2
  402dea:	4a38      	ldr	r2, [pc, #224]	; (402ecc <configure_rx_dma+0xf8>)
  402dec:	4413      	add	r3, r2
  402dee:	60fb      	str	r3, [r7, #12]

	/* How much space is there between the start of the DMA buffer and the
	current read pointer?  */

	if (((uint32_t)rx_buffer_definition->next_byte_to_read) ==
  402df0:	68fb      	ldr	r3, [r7, #12]
  402df2:	699b      	ldr	r3, [r3, #24]
  402df4:	461a      	mov	r2, r3
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
  402df6:	68fb      	ldr	r3, [r7, #12]
  402df8:	689b      	ldr	r3, [r3, #8]
	rx_buffer_definition = &(rx_buffer_definitions[usart_index]);

	/* How much space is there between the start of the DMA buffer and the
	current read pointer?  */

	if (((uint32_t)rx_buffer_definition->next_byte_to_read) ==
  402dfa:	429a      	cmp	r2, r3
  402dfc:	d10e      	bne.n	402e1c <configure_rx_dma+0x48>
		/* The read pointer and the write pointer are equal.  If this function
		was called because data was added to the buffer, then there is no free
		space in the buffer remaining.  If this function was called because data
		was removed from the buffer, then the space remaining is from the write
		pointer up to the end of the buffer. */
		if (operation_performed == data_added) {
  402dfe:	78fb      	ldrb	r3, [r7, #3]
  402e00:	2b00      	cmp	r3, #0
  402e02:	d103      	bne.n	402e0c <configure_rx_dma+0x38>
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
  402e04:	68fb      	ldr	r3, [r7, #12]
  402e06:	2200      	movs	r2, #0
  402e08:	60da      	str	r2, [r3, #12]
  402e0a:	e01e      	b.n	402e4a <configure_rx_dma+0x76>
		} else {
			rx_buffer_definition->rx_pdc_parameters.ul_size =
				rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
  402e0c:	68fb      	ldr	r3, [r7, #12]
  402e0e:	685a      	ldr	r2, [r3, #4]
  402e10:	68fb      	ldr	r3, [r7, #12]
  402e12:	689b      	ldr	r3, [r3, #8]
  402e14:	1ad2      	subs	r2, r2, r3
		was removed from the buffer, then the space remaining is from the write
		pointer up to the end of the buffer. */
		if (operation_performed == data_added) {
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
		} else {
			rx_buffer_definition->rx_pdc_parameters.ul_size =
  402e16:	68fb      	ldr	r3, [r7, #12]
  402e18:	60da      	str	r2, [r3, #12]
  402e1a:	e016      	b.n	402e4a <configure_rx_dma+0x76>
				rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
		}
	} else if (((uint32_t)rx_buffer_definition->next_byte_to_read) >
  402e1c:	68fb      	ldr	r3, [r7, #12]
  402e1e:	699b      	ldr	r3, [r3, #24]
  402e20:	461a      	mov	r2, r3
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
  402e22:	68fb      	ldr	r3, [r7, #12]
  402e24:	689b      	ldr	r3, [r3, #8]
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
		} else {
			rx_buffer_definition->rx_pdc_parameters.ul_size =
				rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
		}
	} else if (((uint32_t)rx_buffer_definition->next_byte_to_read) >
  402e26:	429a      	cmp	r2, r3
  402e28:	d908      	bls.n	402e3c <configure_rx_dma+0x68>
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
		/* The read pointer is ahead of the write pointer.  The space available
		is up to the write pointer to ensure unread data is not overwritten. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
			((uint32_t) rx_buffer_definition->next_byte_to_read) - rx_buffer_definition->rx_pdc_parameters.ul_addr;
  402e2a:	68fb      	ldr	r3, [r7, #12]
  402e2c:	699b      	ldr	r3, [r3, #24]
  402e2e:	461a      	mov	r2, r3
  402e30:	68fb      	ldr	r3, [r7, #12]
  402e32:	689b      	ldr	r3, [r3, #8]
  402e34:	1ad2      	subs	r2, r2, r3
		}
	} else if (((uint32_t)rx_buffer_definition->next_byte_to_read) >
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
		/* The read pointer is ahead of the write pointer.  The space available
		is up to the write pointer to ensure unread data is not overwritten. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
  402e36:	68fb      	ldr	r3, [r7, #12]
  402e38:	60da      	str	r2, [r3, #12]
  402e3a:	e006      	b.n	402e4a <configure_rx_dma+0x76>
			((uint32_t) rx_buffer_definition->next_byte_to_read) - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	} else {
		/* The write pointer is ahead of the read pointer so the space
		available is up to the end of the buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
			rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
  402e3c:	68fb      	ldr	r3, [r7, #12]
  402e3e:	685a      	ldr	r2, [r3, #4]
  402e40:	68fb      	ldr	r3, [r7, #12]
  402e42:	689b      	ldr	r3, [r3, #8]
  402e44:	1ad2      	subs	r2, r2, r3
		rx_buffer_definition->rx_pdc_parameters.ul_size =
			((uint32_t) rx_buffer_definition->next_byte_to_read) - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	} else {
		/* The write pointer is ahead of the read pointer so the space
		available is up to the end of the buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
  402e46:	68fb      	ldr	r3, [r7, #12]
  402e48:	60da      	str	r2, [r3, #12]
			rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	}

	configASSERT((rx_buffer_definition->rx_pdc_parameters.ul_addr +
  402e4a:	68fb      	ldr	r3, [r7, #12]
  402e4c:	689a      	ldr	r2, [r3, #8]
  402e4e:	68fb      	ldr	r3, [r7, #12]
  402e50:	68db      	ldr	r3, [r3, #12]
  402e52:	441a      	add	r2, r3
  402e54:	68fb      	ldr	r3, [r7, #12]
  402e56:	685b      	ldr	r3, [r3, #4]
  402e58:	429a      	cmp	r2, r3
  402e5a:	d903      	bls.n	402e64 <configure_rx_dma+0x90>
  402e5c:	4b1c      	ldr	r3, [pc, #112]	; (402ed0 <configure_rx_dma+0xfc>)
  402e5e:	4798      	blx	r3
  402e60:	bf00      	nop
  402e62:	e7fd      	b.n	402e60 <configure_rx_dma+0x8c>
			rx_buffer_definition->rx_pdc_parameters.ul_size) <=
			rx_buffer_definition->past_rx_buffer_end_address);

	if (rx_buffer_definition->rx_pdc_parameters.ul_size > 0) {
  402e64:	68fb      	ldr	r3, [r7, #12]
  402e66:	68db      	ldr	r3, [r3, #12]
  402e68:	2b00      	cmp	r3, #0
  402e6a:	d020      	beq.n	402eae <configure_rx_dma+0xda>
		/* Restart the DMA to receive into whichever space was calculated
		as remaining.  First clear any characters that might already be in the
		registers. */
		pdc_rx_init(
  402e6c:	4a19      	ldr	r2, [pc, #100]	; (402ed4 <configure_rx_dma+0x100>)
  402e6e:	687b      	ldr	r3, [r7, #4]
  402e70:	011b      	lsls	r3, r3, #4
  402e72:	4413      	add	r3, r2
  402e74:	3304      	adds	r3, #4
  402e76:	6818      	ldr	r0, [r3, #0]
  402e78:	68fb      	ldr	r3, [r7, #12]
  402e7a:	3308      	adds	r3, #8
  402e7c:	2200      	movs	r2, #0
  402e7e:	4619      	mov	r1, r3
  402e80:	4b15      	ldr	r3, [pc, #84]	; (402ed8 <configure_rx_dma+0x104>)
  402e82:	4798      	blx	r3
				all_usart_definitions[usart_index].pdc_base_address, &rx_buffer_definition->rx_pdc_parameters,
				NULL);
		pdc_enable_transfer(
  402e84:	4a13      	ldr	r2, [pc, #76]	; (402ed4 <configure_rx_dma+0x100>)
  402e86:	687b      	ldr	r3, [r7, #4]
  402e88:	011b      	lsls	r3, r3, #4
  402e8a:	4413      	add	r3, r2
  402e8c:	3304      	adds	r3, #4
  402e8e:	681b      	ldr	r3, [r3, #0]
  402e90:	2101      	movs	r1, #1
  402e92:	4618      	mov	r0, r3
  402e94:	4b11      	ldr	r3, [pc, #68]	; (402edc <configure_rx_dma+0x108>)
  402e96:	4798      	blx	r3
				all_usart_definitions[usart_index].pdc_base_address,
				PERIPH_PTCR_RXTEN);
		usart_enable_interrupt(
				all_usart_definitions[usart_index].peripheral_base_address, US_IER_ENDRX |
  402e98:	4a0e      	ldr	r2, [pc, #56]	; (402ed4 <configure_rx_dma+0x100>)
  402e9a:	687b      	ldr	r3, [r7, #4]
  402e9c:	011b      	lsls	r3, r3, #4
  402e9e:	4413      	add	r3, r2
  402ea0:	681b      	ldr	r3, [r3, #0]
				all_usart_definitions[usart_index].pdc_base_address, &rx_buffer_definition->rx_pdc_parameters,
				NULL);
		pdc_enable_transfer(
				all_usart_definitions[usart_index].pdc_base_address,
				PERIPH_PTCR_RXTEN);
		usart_enable_interrupt(
  402ea2:	f44f 7184 	mov.w	r1, #264	; 0x108
  402ea6:	4618      	mov	r0, r3
  402ea8:	4b0d      	ldr	r3, [pc, #52]	; (402ee0 <configure_rx_dma+0x10c>)
  402eaa:	4798      	blx	r3
		space. */
		usart_disable_interrupt(
				all_usart_definitions[usart_index].peripheral_base_address, US_IER_ENDRX |
				US_IER_TIMEOUT);
	}
}
  402eac:	e009      	b.n	402ec2 <configure_rx_dma+0xee>
	} else {
		/* The write pointer has reached the read pointer.  There is no
		more room so the DMA is not re-enabled until a read has created
		space. */
		usart_disable_interrupt(
				all_usart_definitions[usart_index].peripheral_base_address, US_IER_ENDRX |
  402eae:	4a09      	ldr	r2, [pc, #36]	; (402ed4 <configure_rx_dma+0x100>)
  402eb0:	687b      	ldr	r3, [r7, #4]
  402eb2:	011b      	lsls	r3, r3, #4
  402eb4:	4413      	add	r3, r2
  402eb6:	681b      	ldr	r3, [r3, #0]
				US_IER_TIMEOUT);
	} else {
		/* The write pointer has reached the read pointer.  There is no
		more room so the DMA is not re-enabled until a read has created
		space. */
		usart_disable_interrupt(
  402eb8:	f44f 7184 	mov.w	r1, #264	; 0x108
  402ebc:	4618      	mov	r0, r3
  402ebe:	4b09      	ldr	r3, [pc, #36]	; (402ee4 <configure_rx_dma+0x110>)
  402ec0:	4798      	blx	r3
				all_usart_definitions[usart_index].peripheral_base_address, US_IER_ENDRX |
				US_IER_TIMEOUT);
	}
}
  402ec2:	bf00      	nop
  402ec4:	3710      	adds	r7, #16
  402ec6:	46bd      	mov	sp, r7
  402ec8:	bd80      	pop	{r7, pc}
  402eca:	bf00      	nop
  402ecc:	20000504 	.word	0x20000504
  402ed0:	00405075 	.word	0x00405075
  402ed4:	0040b55c 	.word	0x0040b55c
  402ed8:	0040311d 	.word	0x0040311d
  402edc:	00403161 	.word	0x00403161
  402ee0:	00403821 	.word	0x00403821
  402ee4:	0040383d 	.word	0x0040383d

00402ee8 <local_usart_handler>:
/*
 * For internal use only.
 * A common USART interrupt handler that is called for all USART peripherals.
 */
static void local_usart_handler(const portBASE_TYPE usart_index)
{
  402ee8:	b590      	push	{r4, r7, lr}
  402eea:	b087      	sub	sp, #28
  402eec:	af00      	add	r7, sp, #0
  402eee:	6078      	str	r0, [r7, #4]
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
  402ef0:	2300      	movs	r3, #0
  402ef2:	60fb      	str	r3, [r7, #12]
	uint32_t usart_status;
	freertos_pdc_rx_control_t *rx_buffer_definition;

	usart_status = usart_get_status(
			all_usart_definitions[usart_index].peripheral_base_address);
  402ef4:	4a62      	ldr	r2, [pc, #392]	; (403080 <local_usart_handler+0x198>)
  402ef6:	687b      	ldr	r3, [r7, #4]
  402ef8:	011b      	lsls	r3, r3, #4
  402efa:	4413      	add	r3, r2
  402efc:	681b      	ldr	r3, [r3, #0]
{
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
	uint32_t usart_status;
	freertos_pdc_rx_control_t *rx_buffer_definition;

	usart_status = usart_get_status(
  402efe:	4618      	mov	r0, r3
  402f00:	4b60      	ldr	r3, [pc, #384]	; (403084 <local_usart_handler+0x19c>)
  402f02:	4798      	blx	r3
  402f04:	6178      	str	r0, [r7, #20]
			all_usart_definitions[usart_index].peripheral_base_address);
	usart_status &= usart_get_interrupt_mask(
			all_usart_definitions[usart_index].peripheral_base_address);
  402f06:	4a5e      	ldr	r2, [pc, #376]	; (403080 <local_usart_handler+0x198>)
  402f08:	687b      	ldr	r3, [r7, #4]
  402f0a:	011b      	lsls	r3, r3, #4
  402f0c:	4413      	add	r3, r2
  402f0e:	681b      	ldr	r3, [r3, #0]
	uint32_t usart_status;
	freertos_pdc_rx_control_t *rx_buffer_definition;

	usart_status = usart_get_status(
			all_usart_definitions[usart_index].peripheral_base_address);
	usart_status &= usart_get_interrupt_mask(
  402f10:	4618      	mov	r0, r3
  402f12:	4b5d      	ldr	r3, [pc, #372]	; (403088 <local_usart_handler+0x1a0>)
  402f14:	4798      	blx	r3
  402f16:	4602      	mov	r2, r0
  402f18:	697b      	ldr	r3, [r7, #20]
  402f1a:	4013      	ands	r3, r2
  402f1c:	617b      	str	r3, [r7, #20]
			all_usart_definitions[usart_index].peripheral_base_address);

	rx_buffer_definition = &(rx_buffer_definitions[usart_index]);
  402f1e:	687a      	ldr	r2, [r7, #4]
  402f20:	4613      	mov	r3, r2
  402f22:	00db      	lsls	r3, r3, #3
  402f24:	1a9b      	subs	r3, r3, r2
  402f26:	009b      	lsls	r3, r3, #2
  402f28:	4a58      	ldr	r2, [pc, #352]	; (40308c <local_usart_handler+0x1a4>)
  402f2a:	4413      	add	r3, r2
  402f2c:	613b      	str	r3, [r7, #16]

	/* Has the PDC completed a transmission? */
	if ((usart_status & US_CSR_ENDTX) != 0UL) {
  402f2e:	697b      	ldr	r3, [r7, #20]
  402f30:	f003 0310 	and.w	r3, r3, #16
  402f34:	2b00      	cmp	r3, #0
  402f36:	d02a      	beq.n	402f8e <local_usart_handler+0xa6>
		usart_disable_interrupt(
				all_usart_definitions[usart_index].peripheral_base_address,
  402f38:	4a51      	ldr	r2, [pc, #324]	; (403080 <local_usart_handler+0x198>)
  402f3a:	687b      	ldr	r3, [r7, #4]
  402f3c:	011b      	lsls	r3, r3, #4
  402f3e:	4413      	add	r3, r2
  402f40:	681b      	ldr	r3, [r3, #0]

	rx_buffer_definition = &(rx_buffer_definitions[usart_index]);

	/* Has the PDC completed a transmission? */
	if ((usart_status & US_CSR_ENDTX) != 0UL) {
		usart_disable_interrupt(
  402f42:	2110      	movs	r1, #16
  402f44:	4618      	mov	r0, r3
  402f46:	4b52      	ldr	r3, [pc, #328]	; (403090 <local_usart_handler+0x1a8>)
  402f48:	4798      	blx	r3
				all_usart_definitions[usart_index].peripheral_base_address,
				US_IER_ENDTX);

		/* If the driver is supporting multi-threading, then return the access
		mutex. */
		if (tx_dma_control[usart_index].peripheral_access_sem != NULL) {
  402f4a:	4a52      	ldr	r2, [pc, #328]	; (403094 <local_usart_handler+0x1ac>)
  402f4c:	687b      	ldr	r3, [r7, #4]
  402f4e:	00db      	lsls	r3, r3, #3
  402f50:	4413      	add	r3, r2
  402f52:	685b      	ldr	r3, [r3, #4]
  402f54:	2b00      	cmp	r3, #0
  402f56:	d00a      	beq.n	402f6e <local_usart_handler+0x86>
			xSemaphoreGiveFromISR(
  402f58:	4a4e      	ldr	r2, [pc, #312]	; (403094 <local_usart_handler+0x1ac>)
  402f5a:	687b      	ldr	r3, [r7, #4]
  402f5c:	00db      	lsls	r3, r3, #3
  402f5e:	4413      	add	r3, r2
  402f60:	6858      	ldr	r0, [r3, #4]
  402f62:	f107 020c 	add.w	r2, r7, #12
  402f66:	2300      	movs	r3, #0
  402f68:	2100      	movs	r1, #0
  402f6a:	4c4b      	ldr	r4, [pc, #300]	; (403098 <local_usart_handler+0x1b0>)
  402f6c:	47a0      	blx	r4
					&higher_priority_task_woken);
		}

		/* if the sending task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if (tx_dma_control[usart_index].transaction_complete_notification_semaphore != NULL) {
  402f6e:	4a49      	ldr	r2, [pc, #292]	; (403094 <local_usart_handler+0x1ac>)
  402f70:	687b      	ldr	r3, [r7, #4]
  402f72:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  402f76:	2b00      	cmp	r3, #0
  402f78:	d009      	beq.n	402f8e <local_usart_handler+0xa6>
			xSemaphoreGiveFromISR(
  402f7a:	4a46      	ldr	r2, [pc, #280]	; (403094 <local_usart_handler+0x1ac>)
  402f7c:	687b      	ldr	r3, [r7, #4]
  402f7e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
  402f82:	f107 020c 	add.w	r2, r7, #12
  402f86:	2300      	movs	r3, #0
  402f88:	2100      	movs	r1, #0
  402f8a:	4c43      	ldr	r4, [pc, #268]	; (403098 <local_usart_handler+0x1b0>)
  402f8c:	47a0      	blx	r4
					tx_dma_control[usart_index].transaction_complete_notification_semaphore,
					&higher_priority_task_woken);
		}
	}

	if ((usart_status & US_CSR_ENDRX) != 0UL) {
  402f8e:	697b      	ldr	r3, [r7, #20]
  402f90:	f003 0308 	and.w	r3, r3, #8
  402f94:	2b00      	cmp	r3, #0
  402f96:	d031      	beq.n	402ffc <local_usart_handler+0x114>
		/* It is possible to initialise the peripheral to only use Tx and not Rx.
		Check that Rx has been initialised. */
		configASSERT(rx_buffer_definition->next_byte_to_read);
  402f98:	693b      	ldr	r3, [r7, #16]
  402f9a:	699b      	ldr	r3, [r3, #24]
  402f9c:	2b00      	cmp	r3, #0
  402f9e:	d103      	bne.n	402fa8 <local_usart_handler+0xc0>
  402fa0:	4b3e      	ldr	r3, [pc, #248]	; (40309c <local_usart_handler+0x1b4>)
  402fa2:	4798      	blx	r3
  402fa4:	bf00      	nop
  402fa6:	e7fd      	b.n	402fa4 <local_usart_handler+0xbc>
		configASSERT(rx_buffer_definition->next_byte_to_read !=
  402fa8:	693b      	ldr	r3, [r7, #16]
  402faa:	699b      	ldr	r3, [r3, #24]
  402fac:	2b01      	cmp	r3, #1
  402fae:	d103      	bne.n	402fb8 <local_usart_handler+0xd0>
  402fb0:	4b3a      	ldr	r3, [pc, #232]	; (40309c <local_usart_handler+0x1b4>)
  402fb2:	4798      	blx	r3
  402fb4:	bf00      	nop
  402fb6:	e7fd      	b.n	402fb4 <local_usart_handler+0xcc>
				RX_NOT_USED);

		/* Out of DMA buffer, configure the next buffer.  Start by moving
		the DMA buffer start address up to the end of the previously defined
		buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_addr +=
  402fb8:	693b      	ldr	r3, [r7, #16]
  402fba:	689a      	ldr	r2, [r3, #8]
				rx_buffer_definition->rx_pdc_parameters.ul_size;
  402fbc:	693b      	ldr	r3, [r7, #16]
  402fbe:	68db      	ldr	r3, [r3, #12]
				RX_NOT_USED);

		/* Out of DMA buffer, configure the next buffer.  Start by moving
		the DMA buffer start address up to the end of the previously defined
		buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_addr +=
  402fc0:	441a      	add	r2, r3
  402fc2:	693b      	ldr	r3, [r7, #16]
  402fc4:	609a      	str	r2, [r3, #8]
				rx_buffer_definition->rx_pdc_parameters.ul_size;

		/* If the end of the buffer has been reached, wrap back to the start. */
		if (rx_buffer_definition->rx_pdc_parameters.ul_addr >=
  402fc6:	693b      	ldr	r3, [r7, #16]
  402fc8:	689a      	ldr	r2, [r3, #8]
				rx_buffer_definition->past_rx_buffer_end_address)
  402fca:	693b      	ldr	r3, [r7, #16]
  402fcc:	685b      	ldr	r3, [r3, #4]
		buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_addr +=
				rx_buffer_definition->rx_pdc_parameters.ul_size;

		/* If the end of the buffer has been reached, wrap back to the start. */
		if (rx_buffer_definition->rx_pdc_parameters.ul_addr >=
  402fce:	429a      	cmp	r2, r3
  402fd0:	d303      	bcc.n	402fda <local_usart_handler+0xf2>
				rx_buffer_definition->past_rx_buffer_end_address)
		{
			rx_buffer_definition->rx_pdc_parameters.ul_addr =
					rx_buffer_definition->rx_buffer_start_address;
  402fd2:	693b      	ldr	r3, [r7, #16]
  402fd4:	681a      	ldr	r2, [r3, #0]

		/* If the end of the buffer has been reached, wrap back to the start. */
		if (rx_buffer_definition->rx_pdc_parameters.ul_addr >=
				rx_buffer_definition->past_rx_buffer_end_address)
		{
			rx_buffer_definition->rx_pdc_parameters.ul_addr =
  402fd6:	693b      	ldr	r3, [r7, #16]
  402fd8:	609a      	str	r2, [r3, #8]
					rx_buffer_definition->rx_buffer_start_address;
		}

		/* Reset the Rx DMA to receive data into whatever free space remains in
		the Rx buffer. */
		configure_rx_dma(usart_index, data_added);
  402fda:	687b      	ldr	r3, [r7, #4]
  402fdc:	2100      	movs	r1, #0
  402fde:	4618      	mov	r0, r3
  402fe0:	4b2f      	ldr	r3, [pc, #188]	; (4030a0 <local_usart_handler+0x1b8>)
  402fe2:	4798      	blx	r3

		if (rx_buffer_definition->rx_event_semaphore != NULL) {
  402fe4:	693b      	ldr	r3, [r7, #16]
  402fe6:	691b      	ldr	r3, [r3, #16]
  402fe8:	2b00      	cmp	r3, #0
  402fea:	d007      	beq.n	402ffc <local_usart_handler+0x114>
			/* Notify that new data is available. */
			xSemaphoreGiveFromISR(
  402fec:	693b      	ldr	r3, [r7, #16]
  402fee:	6918      	ldr	r0, [r3, #16]
  402ff0:	f107 020c 	add.w	r2, r7, #12
  402ff4:	2300      	movs	r3, #0
  402ff6:	2100      	movs	r1, #0
  402ff8:	4c27      	ldr	r4, [pc, #156]	; (403098 <local_usart_handler+0x1b0>)
  402ffa:	47a0      	blx	r4
					rx_buffer_definition->rx_event_semaphore,
					&higher_priority_task_woken);
		}
	}

	if ((usart_status & US_IER_TIMEOUT) != 0UL) {
  402ffc:	697b      	ldr	r3, [r7, #20]
  402ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
  403002:	2b00      	cmp	r3, #0
  403004:	d013      	beq.n	40302e <local_usart_handler+0x146>
		/* More characters have been placed into the Rx buffer.

		Restart the timeout after more data has been received. */
		usart_start_rx_timeout(all_usart_definitions[usart_index].peripheral_base_address);
  403006:	4a1e      	ldr	r2, [pc, #120]	; (403080 <local_usart_handler+0x198>)
  403008:	687b      	ldr	r3, [r7, #4]
  40300a:	011b      	lsls	r3, r3, #4
  40300c:	4413      	add	r3, r2
  40300e:	681b      	ldr	r3, [r3, #0]
  403010:	4618      	mov	r0, r3
  403012:	4b24      	ldr	r3, [pc, #144]	; (4030a4 <local_usart_handler+0x1bc>)
  403014:	4798      	blx	r3

		if (rx_buffer_definition->rx_event_semaphore != NULL) {
  403016:	693b      	ldr	r3, [r7, #16]
  403018:	691b      	ldr	r3, [r3, #16]
  40301a:	2b00      	cmp	r3, #0
  40301c:	d007      	beq.n	40302e <local_usart_handler+0x146>
			/* Notify that new data is available. */
			xSemaphoreGiveFromISR(
  40301e:	693b      	ldr	r3, [r7, #16]
  403020:	6918      	ldr	r0, [r3, #16]
  403022:	f107 020c 	add.w	r2, r7, #12
  403026:	2300      	movs	r3, #0
  403028:	2100      	movs	r1, #0
  40302a:	4c1b      	ldr	r4, [pc, #108]	; (403098 <local_usart_handler+0x1b0>)
  40302c:	47a0      	blx	r4
					rx_buffer_definition->rx_event_semaphore,
					&higher_priority_task_woken);
		}
	}

	if ((usart_status & SR_ERROR_INTERRUPTS) != 0) {
  40302e:	697b      	ldr	r3, [r7, #20]
  403030:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
  403034:	2b00      	cmp	r3, #0
  403036:	d019      	beq.n	40306c <local_usart_handler+0x184>
		/* An error occurred in either a transmission or reception.  Abort, and
		ensure the peripheral access mutex is made available to tasks. */
		usart_reset_status(
				all_usart_definitions[usart_index].peripheral_base_address);
  403038:	4a11      	ldr	r2, [pc, #68]	; (403080 <local_usart_handler+0x198>)
  40303a:	687b      	ldr	r3, [r7, #4]
  40303c:	011b      	lsls	r3, r3, #4
  40303e:	4413      	add	r3, r2
  403040:	681b      	ldr	r3, [r3, #0]
	}

	if ((usart_status & SR_ERROR_INTERRUPTS) != 0) {
		/* An error occurred in either a transmission or reception.  Abort, and
		ensure the peripheral access mutex is made available to tasks. */
		usart_reset_status(
  403042:	4618      	mov	r0, r3
  403044:	4b18      	ldr	r3, [pc, #96]	; (4030a8 <local_usart_handler+0x1c0>)
  403046:	4798      	blx	r3
				all_usart_definitions[usart_index].peripheral_base_address);
		if (tx_dma_control[usart_index].peripheral_access_sem != NULL) {
  403048:	4a12      	ldr	r2, [pc, #72]	; (403094 <local_usart_handler+0x1ac>)
  40304a:	687b      	ldr	r3, [r7, #4]
  40304c:	00db      	lsls	r3, r3, #3
  40304e:	4413      	add	r3, r2
  403050:	685b      	ldr	r3, [r3, #4]
  403052:	2b00      	cmp	r3, #0
  403054:	d00a      	beq.n	40306c <local_usart_handler+0x184>
			xSemaphoreGiveFromISR(
  403056:	4a0f      	ldr	r2, [pc, #60]	; (403094 <local_usart_handler+0x1ac>)
  403058:	687b      	ldr	r3, [r7, #4]
  40305a:	00db      	lsls	r3, r3, #3
  40305c:	4413      	add	r3, r2
  40305e:	6858      	ldr	r0, [r3, #4]
  403060:	f107 020c 	add.w	r2, r7, #12
  403064:	2300      	movs	r3, #0
  403066:	2100      	movs	r1, #0
  403068:	4c0b      	ldr	r4, [pc, #44]	; (403098 <local_usart_handler+0x1b0>)
  40306a:	47a0      	blx	r4
	has a priority equal to or higher than the currently running task (the task
	this ISR interrupted), then higher_priority_task_woken will have
	automatically been set to pdTRUE within the semaphore function.
	portEND_SWITCHING_ISR() will then ensure that this ISR returns directly to
	the higher priority unblocked task. */
	portEND_SWITCHING_ISR(higher_priority_task_woken);
  40306c:	68fb      	ldr	r3, [r7, #12]
  40306e:	2b00      	cmp	r3, #0
  403070:	d001      	beq.n	403076 <local_usart_handler+0x18e>
  403072:	4b0e      	ldr	r3, [pc, #56]	; (4030ac <local_usart_handler+0x1c4>)
  403074:	4798      	blx	r3
}
  403076:	bf00      	nop
  403078:	371c      	adds	r7, #28
  40307a:	46bd      	mov	sp, r7
  40307c:	bd90      	pop	{r4, r7, pc}
  40307e:	bf00      	nop
  403080:	0040b55c 	.word	0x0040b55c
  403084:	00403871 	.word	0x00403871
  403088:	00403859 	.word	0x00403859
  40308c:	20000504 	.word	0x20000504
  403090:	0040383d 	.word	0x0040383d
  403094:	2000053c 	.word	0x2000053c
  403098:	00405695 	.word	0x00405695
  40309c:	00405075 	.word	0x00405075
  4030a0:	00402dd5 	.word	0x00402dd5
  4030a4:	004038a5 	.word	0x004038a5
  4030a8:	00403889 	.word	0x00403889
  4030ac:	00405015 	.word	0x00405015

004030b0 <USART0_Handler>:
#endif /* USART */

#ifdef USART0

void USART0_Handler(void)
{
  4030b0:	b580      	push	{r7, lr}
  4030b2:	af00      	add	r7, sp, #0
	local_usart_handler(0);
  4030b4:	2000      	movs	r0, #0
  4030b6:	4b02      	ldr	r3, [pc, #8]	; (4030c0 <USART0_Handler+0x10>)
  4030b8:	4798      	blx	r3
}
  4030ba:	bf00      	nop
  4030bc:	bd80      	pop	{r7, pc}
  4030be:	bf00      	nop
  4030c0:	00402ee9 	.word	0x00402ee9

004030c4 <USART1_Handler>:
#endif /* USART0 */

#ifdef USART1

void USART1_Handler(void)
{
  4030c4:	b580      	push	{r7, lr}
  4030c6:	af00      	add	r7, sp, #0
	local_usart_handler(1);
  4030c8:	2001      	movs	r0, #1
  4030ca:	4b02      	ldr	r3, [pc, #8]	; (4030d4 <USART1_Handler+0x10>)
  4030cc:	4798      	blx	r3
}
  4030ce:	bf00      	nop
  4030d0:	bd80      	pop	{r7, pc}
  4030d2:	bf00      	nop
  4030d4:	00402ee9 	.word	0x00402ee9

004030d8 <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  4030d8:	b480      	push	{r7}
  4030da:	b085      	sub	sp, #20
  4030dc:	af00      	add	r7, sp, #0
  4030de:	60f8      	str	r0, [r7, #12]
  4030e0:	60b9      	str	r1, [r7, #8]
  4030e2:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  4030e4:	68bb      	ldr	r3, [r7, #8]
  4030e6:	2b00      	cmp	r3, #0
  4030e8:	d007      	beq.n	4030fa <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
  4030ea:	68bb      	ldr	r3, [r7, #8]
  4030ec:	681a      	ldr	r2, [r3, #0]
  4030ee:	68fb      	ldr	r3, [r7, #12]
  4030f0:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  4030f2:	68bb      	ldr	r3, [r7, #8]
  4030f4:	685a      	ldr	r2, [r3, #4]
  4030f6:	68fb      	ldr	r3, [r7, #12]
  4030f8:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
  4030fa:	687b      	ldr	r3, [r7, #4]
  4030fc:	2b00      	cmp	r3, #0
  4030fe:	d007      	beq.n	403110 <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  403100:	687b      	ldr	r3, [r7, #4]
  403102:	681a      	ldr	r2, [r3, #0]
  403104:	68fb      	ldr	r3, [r7, #12]
  403106:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  403108:	687b      	ldr	r3, [r7, #4]
  40310a:	685a      	ldr	r2, [r3, #4]
  40310c:	68fb      	ldr	r3, [r7, #12]
  40310e:	61da      	str	r2, [r3, #28]
	}
}
  403110:	bf00      	nop
  403112:	3714      	adds	r7, #20
  403114:	46bd      	mov	sp, r7
  403116:	bc80      	pop	{r7}
  403118:	4770      	bx	lr
  40311a:	bf00      	nop

0040311c <pdc_rx_init>:
 */
void pdc_rx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  40311c:	b480      	push	{r7}
  40311e:	b085      	sub	sp, #20
  403120:	af00      	add	r7, sp, #0
  403122:	60f8      	str	r0, [r7, #12]
  403124:	60b9      	str	r1, [r7, #8]
  403126:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  403128:	68bb      	ldr	r3, [r7, #8]
  40312a:	2b00      	cmp	r3, #0
  40312c:	d007      	beq.n	40313e <pdc_rx_init+0x22>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  40312e:	68bb      	ldr	r3, [r7, #8]
  403130:	681a      	ldr	r2, [r3, #0]
  403132:	68fb      	ldr	r3, [r7, #12]
  403134:	601a      	str	r2, [r3, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  403136:	68bb      	ldr	r3, [r7, #8]
  403138:	685a      	ldr	r2, [r3, #4]
  40313a:	68fb      	ldr	r3, [r7, #12]
  40313c:	605a      	str	r2, [r3, #4]
	}
	if (p_next_packet) {
  40313e:	687b      	ldr	r3, [r7, #4]
  403140:	2b00      	cmp	r3, #0
  403142:	d007      	beq.n	403154 <pdc_rx_init+0x38>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  403144:	687b      	ldr	r3, [r7, #4]
  403146:	681a      	ldr	r2, [r3, #0]
  403148:	68fb      	ldr	r3, [r7, #12]
  40314a:	611a      	str	r2, [r3, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  40314c:	687b      	ldr	r3, [r7, #4]
  40314e:	685a      	ldr	r2, [r3, #4]
  403150:	68fb      	ldr	r3, [r7, #12]
  403152:	615a      	str	r2, [r3, #20]
	}
}
  403154:	bf00      	nop
  403156:	3714      	adds	r7, #20
  403158:	46bd      	mov	sp, r7
  40315a:	bc80      	pop	{r7}
  40315c:	4770      	bx	lr
  40315e:	bf00      	nop

00403160 <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  403160:	b480      	push	{r7}
  403162:	b083      	sub	sp, #12
  403164:	af00      	add	r7, sp, #0
  403166:	6078      	str	r0, [r7, #4]
  403168:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  40316a:	683a      	ldr	r2, [r7, #0]
  40316c:	f240 1301 	movw	r3, #257	; 0x101
  403170:	4013      	ands	r3, r2
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  403172:	687a      	ldr	r2, [r7, #4]
  403174:	6213      	str	r3, [r2, #32]
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
}
  403176:	bf00      	nop
  403178:	370c      	adds	r7, #12
  40317a:	46bd      	mov	sp, r7
  40317c:	bc80      	pop	{r7}
  40317e:	4770      	bx	lr

00403180 <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  403180:	b480      	push	{r7}
  403182:	b083      	sub	sp, #12
  403184:	af00      	add	r7, sp, #0
  403186:	6078      	str	r0, [r7, #4]
  403188:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  40318a:	683a      	ldr	r2, [r7, #0]
  40318c:	f240 2302 	movw	r3, #514	; 0x202
  403190:	4013      	ands	r3, r2
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  403192:	687a      	ldr	r2, [r7, #4]
  403194:	6213      	str	r3, [r2, #32]
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
}
  403196:	bf00      	nop
  403198:	370c      	adds	r7, #12
  40319a:	46bd      	mov	sp, r7
  40319c:	bc80      	pop	{r7}
  40319e:	4770      	bx	lr

004031a0 <pdc_read_rx_counter>:
 *
 * \return Receive Counter Register value.
 */
uint32_t pdc_read_rx_counter(
		Pdc *p_pdc)
{
  4031a0:	b480      	push	{r7}
  4031a2:	b083      	sub	sp, #12
  4031a4:	af00      	add	r7, sp, #0
  4031a6:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	return p_pdc->PERIPH_RCR;
  4031a8:	687b      	ldr	r3, [r7, #4]
  4031aa:	685b      	ldr	r3, [r3, #4]
}
  4031ac:	4618      	mov	r0, r3
  4031ae:	370c      	adds	r7, #12
  4031b0:	46bd      	mov	sp, r7
  4031b2:	bc80      	pop	{r7}
  4031b4:	4770      	bx	lr
  4031b6:	bf00      	nop

004031b8 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  4031b8:	b480      	push	{r7}
  4031ba:	b083      	sub	sp, #12
  4031bc:	af00      	add	r7, sp, #0
  4031be:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  4031c0:	687b      	ldr	r3, [r7, #4]
  4031c2:	2208      	movs	r2, #8
  4031c4:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  4031c6:	687b      	ldr	r3, [r7, #4]
  4031c8:	2220      	movs	r2, #32
  4031ca:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  4031cc:	687b      	ldr	r3, [r7, #4]
  4031ce:	2204      	movs	r2, #4
  4031d0:	601a      	str	r2, [r3, #0]
}
  4031d2:	bf00      	nop
  4031d4:	370c      	adds	r7, #12
  4031d6:	46bd      	mov	sp, r7
  4031d8:	bc80      	pop	{r7}
  4031da:	4770      	bx	lr

004031dc <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  4031dc:	b580      	push	{r7, lr}
  4031de:	b084      	sub	sp, #16
  4031e0:	af00      	add	r7, sp, #0
  4031e2:	6078      	str	r0, [r7, #4]
  4031e4:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
  4031e6:	2300      	movs	r3, #0
  4031e8:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  4031ea:	687b      	ldr	r3, [r7, #4]
  4031ec:	f04f 32ff 	mov.w	r2, #4294967295
  4031f0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  4031f2:	687b      	ldr	r3, [r7, #4]
  4031f4:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  4031f6:	6878      	ldr	r0, [r7, #4]
  4031f8:	4b0e      	ldr	r3, [pc, #56]	; (403234 <twi_master_init+0x58>)
  4031fa:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  4031fc:	6878      	ldr	r0, [r7, #4]
  4031fe:	4b0e      	ldr	r3, [pc, #56]	; (403238 <twi_master_init+0x5c>)
  403200:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  403202:	683b      	ldr	r3, [r7, #0]
  403204:	6859      	ldr	r1, [r3, #4]
  403206:	683b      	ldr	r3, [r7, #0]
  403208:	681b      	ldr	r3, [r3, #0]
  40320a:	461a      	mov	r2, r3
  40320c:	6878      	ldr	r0, [r7, #4]
  40320e:	4b0b      	ldr	r3, [pc, #44]	; (40323c <twi_master_init+0x60>)
  403210:	4798      	blx	r3
  403212:	4603      	mov	r3, r0
  403214:	2b01      	cmp	r3, #1
  403216:	d101      	bne.n	40321c <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  403218:	2301      	movs	r3, #1
  40321a:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  40321c:	683b      	ldr	r3, [r7, #0]
  40321e:	7a5b      	ldrb	r3, [r3, #9]
  403220:	2b01      	cmp	r3, #1
  403222:	d102      	bne.n	40322a <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
  403224:	687b      	ldr	r3, [r7, #4]
  403226:	2240      	movs	r2, #64	; 0x40
  403228:	601a      	str	r2, [r3, #0]
	}

	return status;
  40322a:	68fb      	ldr	r3, [r7, #12]
}
  40322c:	4618      	mov	r0, r3
  40322e:	3710      	adds	r7, #16
  403230:	46bd      	mov	sp, r7
  403232:	bd80      	pop	{r7, pc}
  403234:	004035c9 	.word	0x004035c9
  403238:	004031b9 	.word	0x004031b9
  40323c:	00403241 	.word	0x00403241

00403240 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  403240:	b480      	push	{r7}
  403242:	b089      	sub	sp, #36	; 0x24
  403244:	af00      	add	r7, sp, #0
  403246:	60f8      	str	r0, [r7, #12]
  403248:	60b9      	str	r1, [r7, #8]
  40324a:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  40324c:	2300      	movs	r3, #0
  40324e:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  403250:	68bb      	ldr	r3, [r7, #8]
  403252:	4a34      	ldr	r2, [pc, #208]	; (403324 <twi_set_speed+0xe4>)
  403254:	4293      	cmp	r3, r2
  403256:	d901      	bls.n	40325c <twi_set_speed+0x1c>
		return FAIL;
  403258:	2301      	movs	r3, #1
  40325a:	e05d      	b.n	403318 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  40325c:	68bb      	ldr	r3, [r7, #8]
  40325e:	4a32      	ldr	r2, [pc, #200]	; (403328 <twi_set_speed+0xe8>)
  403260:	4293      	cmp	r3, r2
  403262:	d937      	bls.n	4032d4 <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  403264:	687b      	ldr	r3, [r7, #4]
  403266:	4a31      	ldr	r2, [pc, #196]	; (40332c <twi_set_speed+0xec>)
  403268:	fba2 2303 	umull	r2, r3, r2, r3
  40326c:	0b9b      	lsrs	r3, r3, #14
  40326e:	3b04      	subs	r3, #4
  403270:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  403272:	68ba      	ldr	r2, [r7, #8]
  403274:	4b2e      	ldr	r3, [pc, #184]	; (403330 <twi_set_speed+0xf0>)
  403276:	4413      	add	r3, r2
  403278:	009b      	lsls	r3, r3, #2
  40327a:	687a      	ldr	r2, [r7, #4]
  40327c:	fbb2 f3f3 	udiv	r3, r2, r3
  403280:	3b04      	subs	r3, #4
  403282:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  403284:	e005      	b.n	403292 <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
  403286:	69fb      	ldr	r3, [r7, #28]
  403288:	3301      	adds	r3, #1
  40328a:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  40328c:	697b      	ldr	r3, [r7, #20]
  40328e:	085b      	lsrs	r3, r3, #1
  403290:	617b      	str	r3, [r7, #20]
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  403292:	697b      	ldr	r3, [r7, #20]
  403294:	2bff      	cmp	r3, #255	; 0xff
  403296:	d909      	bls.n	4032ac <twi_set_speed+0x6c>
  403298:	69fb      	ldr	r3, [r7, #28]
  40329a:	2b06      	cmp	r3, #6
  40329c:	d9f3      	bls.n	403286 <twi_set_speed+0x46>
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40329e:	e005      	b.n	4032ac <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
  4032a0:	69fb      	ldr	r3, [r7, #28]
  4032a2:	3301      	adds	r3, #1
  4032a4:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  4032a6:	693b      	ldr	r3, [r7, #16]
  4032a8:	085b      	lsrs	r3, r3, #1
  4032aa:	613b      	str	r3, [r7, #16]
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4032ac:	693b      	ldr	r3, [r7, #16]
  4032ae:	2bff      	cmp	r3, #255	; 0xff
  4032b0:	d902      	bls.n	4032b8 <twi_set_speed+0x78>
  4032b2:	69fb      	ldr	r3, [r7, #28]
  4032b4:	2b06      	cmp	r3, #6
  4032b6:	d9f3      	bls.n	4032a0 <twi_set_speed+0x60>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4032b8:	697b      	ldr	r3, [r7, #20]
  4032ba:	b2da      	uxtb	r2, r3
  4032bc:	693b      	ldr	r3, [r7, #16]
  4032be:	021b      	lsls	r3, r3, #8
  4032c0:	b29b      	uxth	r3, r3
  4032c2:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
  4032c4:	69fb      	ldr	r3, [r7, #28]
  4032c6:	041b      	lsls	r3, r3, #16
  4032c8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4032cc:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  4032ce:	68fb      	ldr	r3, [r7, #12]
  4032d0:	611a      	str	r2, [r3, #16]
  4032d2:	e020      	b.n	403316 <twi_set_speed+0xd6>
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4032d4:	68bb      	ldr	r3, [r7, #8]
  4032d6:	005b      	lsls	r3, r3, #1
  4032d8:	687a      	ldr	r2, [r7, #4]
  4032da:	fbb2 f3f3 	udiv	r3, r2, r3
  4032de:	3b04      	subs	r3, #4
  4032e0:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4032e2:	e005      	b.n	4032f0 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
  4032e4:	69fb      	ldr	r3, [r7, #28]
  4032e6:	3301      	adds	r3, #1
  4032e8:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  4032ea:	69bb      	ldr	r3, [r7, #24]
  4032ec:	085b      	lsrs	r3, r3, #1
  4032ee:	61bb      	str	r3, [r7, #24]
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4032f0:	69bb      	ldr	r3, [r7, #24]
  4032f2:	2bff      	cmp	r3, #255	; 0xff
  4032f4:	d902      	bls.n	4032fc <twi_set_speed+0xbc>
  4032f6:	69fb      	ldr	r3, [r7, #28]
  4032f8:	2b06      	cmp	r3, #6
  4032fa:	d9f3      	bls.n	4032e4 <twi_set_speed+0xa4>
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  4032fc:	69bb      	ldr	r3, [r7, #24]
  4032fe:	b2da      	uxtb	r2, r3
  403300:	69bb      	ldr	r3, [r7, #24]
  403302:	021b      	lsls	r3, r3, #8
  403304:	b29b      	uxth	r3, r3
  403306:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
  403308:	69fb      	ldr	r3, [r7, #28]
  40330a:	041b      	lsls	r3, r3, #16
  40330c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  403310:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  403312:	68fb      	ldr	r3, [r7, #12]
  403314:	611a      	str	r2, [r3, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  403316:	2300      	movs	r3, #0
}
  403318:	4618      	mov	r0, r3
  40331a:	3724      	adds	r7, #36	; 0x24
  40331c:	46bd      	mov	sp, r7
  40331e:	bc80      	pop	{r7}
  403320:	4770      	bx	lr
  403322:	bf00      	nop
  403324:	00061a80 	.word	0x00061a80
  403328:	0005dc00 	.word	0x0005dc00
  40332c:	057619f1 	.word	0x057619f1
  403330:	3ffd1200 	.word	0x3ffd1200

00403334 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
  403334:	b480      	push	{r7}
  403336:	b085      	sub	sp, #20
  403338:	af00      	add	r7, sp, #0
  40333a:	6078      	str	r0, [r7, #4]
  40333c:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  40333e:	683b      	ldr	r3, [r7, #0]
  403340:	2b00      	cmp	r3, #0
  403342:	d101      	bne.n	403348 <twi_mk_addr+0x14>
		return 0;
  403344:	2300      	movs	r3, #0
  403346:	e01d      	b.n	403384 <twi_mk_addr+0x50>

	val = addr[0];
  403348:	687b      	ldr	r3, [r7, #4]
  40334a:	781b      	ldrb	r3, [r3, #0]
  40334c:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  40334e:	683b      	ldr	r3, [r7, #0]
  403350:	2b01      	cmp	r3, #1
  403352:	dd09      	ble.n	403368 <twi_mk_addr+0x34>
		val <<= 8;
  403354:	68fb      	ldr	r3, [r7, #12]
  403356:	021b      	lsls	r3, r3, #8
  403358:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  40335a:	687b      	ldr	r3, [r7, #4]
  40335c:	3301      	adds	r3, #1
  40335e:	781b      	ldrb	r3, [r3, #0]
  403360:	461a      	mov	r2, r3
  403362:	68fb      	ldr	r3, [r7, #12]
  403364:	4313      	orrs	r3, r2
  403366:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  403368:	683b      	ldr	r3, [r7, #0]
  40336a:	2b02      	cmp	r3, #2
  40336c:	dd09      	ble.n	403382 <twi_mk_addr+0x4e>
		val <<= 8;
  40336e:	68fb      	ldr	r3, [r7, #12]
  403370:	021b      	lsls	r3, r3, #8
  403372:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  403374:	687b      	ldr	r3, [r7, #4]
  403376:	3302      	adds	r3, #2
  403378:	781b      	ldrb	r3, [r3, #0]
  40337a:	461a      	mov	r2, r3
  40337c:	68fb      	ldr	r3, [r7, #12]
  40337e:	4313      	orrs	r3, r2
  403380:	60fb      	str	r3, [r7, #12]
	}
	return val;
  403382:	68fb      	ldr	r3, [r7, #12]
}
  403384:	4618      	mov	r0, r3
  403386:	3714      	adds	r7, #20
  403388:	46bd      	mov	sp, r7
  40338a:	bc80      	pop	{r7}
  40338c:	4770      	bx	lr
  40338e:	bf00      	nop

00403390 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  403390:	b580      	push	{r7, lr}
  403392:	b088      	sub	sp, #32
  403394:	af00      	add	r7, sp, #0
  403396:	6078      	str	r0, [r7, #4]
  403398:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  40339a:	683b      	ldr	r3, [r7, #0]
  40339c:	68db      	ldr	r3, [r3, #12]
  40339e:	61fb      	str	r3, [r7, #28]
	uint8_t *buffer = p_packet->buffer;
  4033a0:	683b      	ldr	r3, [r7, #0]
  4033a2:	689b      	ldr	r3, [r3, #8]
  4033a4:	61bb      	str	r3, [r7, #24]
	uint8_t stop_sent = 0;
  4033a6:	2300      	movs	r3, #0
  4033a8:	75fb      	strb	r3, [r7, #23]
	uint32_t timeout = TWI_TIMEOUT;;
  4033aa:	f247 5330 	movw	r3, #30000	; 0x7530
  4033ae:	613b      	str	r3, [r7, #16]
	
	/* Check argument */
	if (cnt == 0) {
  4033b0:	69fb      	ldr	r3, [r7, #28]
  4033b2:	2b00      	cmp	r3, #0
  4033b4:	d101      	bne.n	4033ba <twi_master_read+0x2a>
		return TWI_INVALID_ARGUMENT;
  4033b6:	2301      	movs	r3, #1
  4033b8:	e069      	b.n	40348e <twi_master_read+0xfe>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  4033ba:	687b      	ldr	r3, [r7, #4]
  4033bc:	2200      	movs	r2, #0
  4033be:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  4033c0:	683b      	ldr	r3, [r7, #0]
  4033c2:	7c1b      	ldrb	r3, [r3, #16]
  4033c4:	041b      	lsls	r3, r3, #16
  4033c6:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  4033ca:	683b      	ldr	r3, [r7, #0]
  4033cc:	685b      	ldr	r3, [r3, #4]
  4033ce:	021b      	lsls	r3, r3, #8
  4033d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  4033d4:	4313      	orrs	r3, r2
  4033d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  4033da:	687b      	ldr	r3, [r7, #4]
  4033dc:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  4033de:	687b      	ldr	r3, [r7, #4]
  4033e0:	2200      	movs	r2, #0
  4033e2:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4033e4:	683a      	ldr	r2, [r7, #0]
  4033e6:	683b      	ldr	r3, [r7, #0]
  4033e8:	685b      	ldr	r3, [r3, #4]
  4033ea:	4619      	mov	r1, r3
  4033ec:	4610      	mov	r0, r2
  4033ee:	4b2a      	ldr	r3, [pc, #168]	; (403498 <twi_master_read+0x108>)
  4033f0:	4798      	blx	r3
  4033f2:	4602      	mov	r2, r0
  4033f4:	687b      	ldr	r3, [r7, #4]
  4033f6:	60da      	str	r2, [r3, #12]

	/* Send a START condition */
	if (cnt == 1) {
  4033f8:	69fb      	ldr	r3, [r7, #28]
  4033fa:	2b01      	cmp	r3, #1
  4033fc:	d105      	bne.n	40340a <twi_master_read+0x7a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  4033fe:	687b      	ldr	r3, [r7, #4]
  403400:	2203      	movs	r2, #3
  403402:	601a      	str	r2, [r3, #0]
		stop_sent = 1;
  403404:	2301      	movs	r3, #1
  403406:	75fb      	strb	r3, [r7, #23]
  403408:	e034      	b.n	403474 <twi_master_read+0xe4>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  40340a:	687b      	ldr	r3, [r7, #4]
  40340c:	2201      	movs	r2, #1
  40340e:	601a      	str	r2, [r3, #0]
		stop_sent = 0;
  403410:	2300      	movs	r3, #0
  403412:	75fb      	strb	r3, [r7, #23]
	}

	while (cnt > 0) {
  403414:	e02e      	b.n	403474 <twi_master_read+0xe4>
		status = p_twi->TWI_SR;
  403416:	687b      	ldr	r3, [r7, #4]
  403418:	6a1b      	ldr	r3, [r3, #32]
  40341a:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  40341c:	68fb      	ldr	r3, [r7, #12]
  40341e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  403422:	2b00      	cmp	r3, #0
  403424:	d001      	beq.n	40342a <twi_master_read+0x9a>
			return TWI_RECEIVE_NACK;
  403426:	2305      	movs	r3, #5
  403428:	e031      	b.n	40348e <twi_master_read+0xfe>
		}

		if (!timeout--) {
  40342a:	693b      	ldr	r3, [r7, #16]
  40342c:	1e5a      	subs	r2, r3, #1
  40342e:	613a      	str	r2, [r7, #16]
  403430:	2b00      	cmp	r3, #0
  403432:	d101      	bne.n	403438 <twi_master_read+0xa8>
			return TWI_ERROR_TIMEOUT;
  403434:	2309      	movs	r3, #9
  403436:	e02a      	b.n	40348e <twi_master_read+0xfe>
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  403438:	69fb      	ldr	r3, [r7, #28]
  40343a:	2b01      	cmp	r3, #1
  40343c:	d107      	bne.n	40344e <twi_master_read+0xbe>
  40343e:	7dfb      	ldrb	r3, [r7, #23]
  403440:	2b00      	cmp	r3, #0
  403442:	d104      	bne.n	40344e <twi_master_read+0xbe>
			p_twi->TWI_CR = TWI_CR_STOP;
  403444:	687b      	ldr	r3, [r7, #4]
  403446:	2202      	movs	r2, #2
  403448:	601a      	str	r2, [r3, #0]
			stop_sent = 1;
  40344a:	2301      	movs	r3, #1
  40344c:	75fb      	strb	r3, [r7, #23]
		}

		if (!(status & TWI_SR_RXRDY)) {
  40344e:	68fb      	ldr	r3, [r7, #12]
  403450:	f003 0302 	and.w	r3, r3, #2
  403454:	2b00      	cmp	r3, #0
  403456:	d100      	bne.n	40345a <twi_master_read+0xca>
			continue;
  403458:	e00c      	b.n	403474 <twi_master_read+0xe4>
		}
		*buffer++ = p_twi->TWI_RHR;
  40345a:	69bb      	ldr	r3, [r7, #24]
  40345c:	1c5a      	adds	r2, r3, #1
  40345e:	61ba      	str	r2, [r7, #24]
  403460:	687a      	ldr	r2, [r7, #4]
  403462:	6b12      	ldr	r2, [r2, #48]	; 0x30
  403464:	b2d2      	uxtb	r2, r2
  403466:	701a      	strb	r2, [r3, #0]

		cnt--;
  403468:	69fb      	ldr	r3, [r7, #28]
  40346a:	3b01      	subs	r3, #1
  40346c:	61fb      	str	r3, [r7, #28]
		timeout = TWI_TIMEOUT;
  40346e:	f247 5330 	movw	r3, #30000	; 0x7530
  403472:	613b      	str	r3, [r7, #16]
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  403474:	69fb      	ldr	r3, [r7, #28]
  403476:	2b00      	cmp	r3, #0
  403478:	d1cd      	bne.n	403416 <twi_master_read+0x86>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  40347a:	bf00      	nop
  40347c:	687b      	ldr	r3, [r7, #4]
  40347e:	6a1b      	ldr	r3, [r3, #32]
  403480:	f003 0301 	and.w	r3, r3, #1
  403484:	2b00      	cmp	r3, #0
  403486:	d0f9      	beq.n	40347c <twi_master_read+0xec>
	}

	p_twi->TWI_SR;
  403488:	687b      	ldr	r3, [r7, #4]
  40348a:	6a1b      	ldr	r3, [r3, #32]

	return TWI_SUCCESS;
  40348c:	2300      	movs	r3, #0
}
  40348e:	4618      	mov	r0, r3
  403490:	3720      	adds	r7, #32
  403492:	46bd      	mov	sp, r7
  403494:	bd80      	pop	{r7, pc}
  403496:	bf00      	nop
  403498:	00403335 	.word	0x00403335

0040349c <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  40349c:	b580      	push	{r7, lr}
  40349e:	b086      	sub	sp, #24
  4034a0:	af00      	add	r7, sp, #0
  4034a2:	6078      	str	r0, [r7, #4]
  4034a4:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4034a6:	683b      	ldr	r3, [r7, #0]
  4034a8:	68db      	ldr	r3, [r3, #12]
  4034aa:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  4034ac:	683b      	ldr	r3, [r7, #0]
  4034ae:	689b      	ldr	r3, [r3, #8]
  4034b0:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  4034b2:	697b      	ldr	r3, [r7, #20]
  4034b4:	2b00      	cmp	r3, #0
  4034b6:	d101      	bne.n	4034bc <twi_master_write+0x20>
		return TWI_INVALID_ARGUMENT;
  4034b8:	2301      	movs	r3, #1
  4034ba:	e056      	b.n	40356a <twi_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  4034bc:	687b      	ldr	r3, [r7, #4]
  4034be:	2200      	movs	r2, #0
  4034c0:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  4034c2:	683b      	ldr	r3, [r7, #0]
  4034c4:	7c1b      	ldrb	r3, [r3, #16]
  4034c6:	041b      	lsls	r3, r3, #16
  4034c8:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  4034cc:	683b      	ldr	r3, [r7, #0]
  4034ce:	685b      	ldr	r3, [r3, #4]
  4034d0:	021b      	lsls	r3, r3, #8
  4034d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  4034d6:	431a      	orrs	r2, r3
  4034d8:	687b      	ldr	r3, [r7, #4]
  4034da:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  4034dc:	687b      	ldr	r3, [r7, #4]
  4034de:	2200      	movs	r2, #0
  4034e0:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4034e2:	683a      	ldr	r2, [r7, #0]
  4034e4:	683b      	ldr	r3, [r7, #0]
  4034e6:	685b      	ldr	r3, [r3, #4]
  4034e8:	4619      	mov	r1, r3
  4034ea:	4610      	mov	r0, r2
  4034ec:	4b21      	ldr	r3, [pc, #132]	; (403574 <twi_master_write+0xd8>)
  4034ee:	4798      	blx	r3
  4034f0:	4602      	mov	r2, r0
  4034f2:	687b      	ldr	r3, [r7, #4]
  4034f4:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  4034f6:	e019      	b.n	40352c <twi_master_write+0x90>
		status = p_twi->TWI_SR;
  4034f8:	687b      	ldr	r3, [r7, #4]
  4034fa:	6a1b      	ldr	r3, [r3, #32]
  4034fc:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  4034fe:	68fb      	ldr	r3, [r7, #12]
  403500:	f403 7380 	and.w	r3, r3, #256	; 0x100
  403504:	2b00      	cmp	r3, #0
  403506:	d001      	beq.n	40350c <twi_master_write+0x70>
			return TWI_RECEIVE_NACK;
  403508:	2305      	movs	r3, #5
  40350a:	e02e      	b.n	40356a <twi_master_write+0xce>
		}

		if (!(status & TWI_SR_TXRDY)) {
  40350c:	68fb      	ldr	r3, [r7, #12]
  40350e:	f003 0304 	and.w	r3, r3, #4
  403512:	2b00      	cmp	r3, #0
  403514:	d100      	bne.n	403518 <twi_master_write+0x7c>
			continue;
  403516:	e009      	b.n	40352c <twi_master_write+0x90>
		}
		p_twi->TWI_THR = *buffer++;
  403518:	693b      	ldr	r3, [r7, #16]
  40351a:	1c5a      	adds	r2, r3, #1
  40351c:	613a      	str	r2, [r7, #16]
  40351e:	781b      	ldrb	r3, [r3, #0]
  403520:	461a      	mov	r2, r3
  403522:	687b      	ldr	r3, [r7, #4]
  403524:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  403526:	697b      	ldr	r3, [r7, #20]
  403528:	3b01      	subs	r3, #1
  40352a:	617b      	str	r3, [r7, #20]
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  40352c:	697b      	ldr	r3, [r7, #20]
  40352e:	2b00      	cmp	r3, #0
  403530:	d1e2      	bne.n	4034f8 <twi_master_write+0x5c>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  403532:	687b      	ldr	r3, [r7, #4]
  403534:	6a1b      	ldr	r3, [r3, #32]
  403536:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  403538:	68fb      	ldr	r3, [r7, #12]
  40353a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  40353e:	2b00      	cmp	r3, #0
  403540:	d001      	beq.n	403546 <twi_master_write+0xaa>
			return TWI_RECEIVE_NACK;
  403542:	2305      	movs	r3, #5
  403544:	e011      	b.n	40356a <twi_master_write+0xce>
		}

		if (status & TWI_SR_TXRDY) {
  403546:	68fb      	ldr	r3, [r7, #12]
  403548:	f003 0304 	and.w	r3, r3, #4
  40354c:	2b00      	cmp	r3, #0
  40354e:	d100      	bne.n	403552 <twi_master_write+0xb6>
			break;
		}
	}
  403550:	e7ef      	b.n	403532 <twi_master_write+0x96>
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
			break;
  403552:	bf00      	nop
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  403554:	687b      	ldr	r3, [r7, #4]
  403556:	2202      	movs	r2, #2
  403558:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  40355a:	bf00      	nop
  40355c:	687b      	ldr	r3, [r7, #4]
  40355e:	6a1b      	ldr	r3, [r3, #32]
  403560:	f003 0301 	and.w	r3, r3, #1
  403564:	2b00      	cmp	r3, #0
  403566:	d0f9      	beq.n	40355c <twi_master_write+0xc0>
	}

	return TWI_SUCCESS;
  403568:	2300      	movs	r3, #0
}
  40356a:	4618      	mov	r0, r3
  40356c:	3718      	adds	r7, #24
  40356e:	46bd      	mov	sp, r7
  403570:	bd80      	pop	{r7, pc}
  403572:	bf00      	nop
  403574:	00403335 	.word	0x00403335

00403578 <twi_disable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be disabled.
 */
void twi_disable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
  403578:	b480      	push	{r7}
  40357a:	b083      	sub	sp, #12
  40357c:	af00      	add	r7, sp, #0
  40357e:	6078      	str	r0, [r7, #4]
  403580:	6039      	str	r1, [r7, #0]
	/* Disable the specified interrupts */
	p_twi->TWI_IDR = ul_sources;
  403582:	687b      	ldr	r3, [r7, #4]
  403584:	683a      	ldr	r2, [r7, #0]
  403586:	629a      	str	r2, [r3, #40]	; 0x28
	/* Dummy read */
	p_twi->TWI_SR;
  403588:	687b      	ldr	r3, [r7, #4]
  40358a:	6a1b      	ldr	r3, [r3, #32]
}
  40358c:	bf00      	nop
  40358e:	370c      	adds	r7, #12
  403590:	46bd      	mov	sp, r7
  403592:	bc80      	pop	{r7}
  403594:	4770      	bx	lr
  403596:	bf00      	nop

00403598 <twi_get_interrupt_status>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \retval TWI interrupt status.
 */
uint32_t twi_get_interrupt_status(Twi *p_twi)
{
  403598:	b480      	push	{r7}
  40359a:	b083      	sub	sp, #12
  40359c:	af00      	add	r7, sp, #0
  40359e:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_SR;
  4035a0:	687b      	ldr	r3, [r7, #4]
  4035a2:	6a1b      	ldr	r3, [r3, #32]
}
  4035a4:	4618      	mov	r0, r3
  4035a6:	370c      	adds	r7, #12
  4035a8:	46bd      	mov	sp, r7
  4035aa:	bc80      	pop	{r7}
  4035ac:	4770      	bx	lr
  4035ae:	bf00      	nop

004035b0 <twi_get_interrupt_mask>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The interrupt mask value.
 */
uint32_t twi_get_interrupt_mask(Twi *p_twi)
{
  4035b0:	b480      	push	{r7}
  4035b2:	b083      	sub	sp, #12
  4035b4:	af00      	add	r7, sp, #0
  4035b6:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_IMR;
  4035b8:	687b      	ldr	r3, [r7, #4]
  4035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
  4035bc:	4618      	mov	r0, r3
  4035be:	370c      	adds	r7, #12
  4035c0:	46bd      	mov	sp, r7
  4035c2:	bc80      	pop	{r7}
  4035c4:	4770      	bx	lr
  4035c6:	bf00      	nop

004035c8 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  4035c8:	b480      	push	{r7}
  4035ca:	b083      	sub	sp, #12
  4035cc:	af00      	add	r7, sp, #0
  4035ce:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  4035d0:	687b      	ldr	r3, [r7, #4]
  4035d2:	2280      	movs	r2, #128	; 0x80
  4035d4:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  4035d6:	687b      	ldr	r3, [r7, #4]
  4035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  4035da:	bf00      	nop
  4035dc:	370c      	adds	r7, #12
  4035de:	46bd      	mov	sp, r7
  4035e0:	bc80      	pop	{r7}
  4035e2:	4770      	bx	lr

004035e4 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4035e4:	b480      	push	{r7}
  4035e6:	b089      	sub	sp, #36	; 0x24
  4035e8:	af00      	add	r7, sp, #0
  4035ea:	60f8      	str	r0, [r7, #12]
  4035ec:	60b9      	str	r1, [r7, #8]
  4035ee:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4035f0:	68bb      	ldr	r3, [r7, #8]
  4035f2:	011a      	lsls	r2, r3, #4
  4035f4:	687b      	ldr	r3, [r7, #4]
  4035f6:	429a      	cmp	r2, r3
  4035f8:	d802      	bhi.n	403600 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  4035fa:	2310      	movs	r3, #16
  4035fc:	61fb      	str	r3, [r7, #28]
  4035fe:	e001      	b.n	403604 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  403600:	2308      	movs	r3, #8
  403602:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  403604:	687b      	ldr	r3, [r7, #4]
  403606:	00da      	lsls	r2, r3, #3
  403608:	69fb      	ldr	r3, [r7, #28]
  40360a:	68b9      	ldr	r1, [r7, #8]
  40360c:	fb01 f303 	mul.w	r3, r1, r3
  403610:	085b      	lsrs	r3, r3, #1
  403612:	441a      	add	r2, r3
  403614:	69fb      	ldr	r3, [r7, #28]
  403616:	68b9      	ldr	r1, [r7, #8]
  403618:	fb01 f303 	mul.w	r3, r1, r3
  40361c:	fbb2 f3f3 	udiv	r3, r2, r3
  403620:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  403622:	69bb      	ldr	r3, [r7, #24]
  403624:	08db      	lsrs	r3, r3, #3
  403626:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  403628:	69bb      	ldr	r3, [r7, #24]
  40362a:	f003 0307 	and.w	r3, r3, #7
  40362e:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  403630:	697b      	ldr	r3, [r7, #20]
  403632:	2b00      	cmp	r3, #0
  403634:	d003      	beq.n	40363e <usart_set_async_baudrate+0x5a>
  403636:	697b      	ldr	r3, [r7, #20]
  403638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  40363c:	d301      	bcc.n	403642 <usart_set_async_baudrate+0x5e>
		return 1;
  40363e:	2301      	movs	r3, #1
  403640:	e00f      	b.n	403662 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  403642:	69fb      	ldr	r3, [r7, #28]
  403644:	2b08      	cmp	r3, #8
  403646:	d105      	bne.n	403654 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  403648:	68fb      	ldr	r3, [r7, #12]
  40364a:	685b      	ldr	r3, [r3, #4]
  40364c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  403650:	68fb      	ldr	r3, [r7, #12]
  403652:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  403654:	693b      	ldr	r3, [r7, #16]
  403656:	041a      	lsls	r2, r3, #16
  403658:	697b      	ldr	r3, [r7, #20]
  40365a:	431a      	orrs	r2, r3
  40365c:	68fb      	ldr	r3, [r7, #12]
  40365e:	621a      	str	r2, [r3, #32]

	return 0;
  403660:	2300      	movs	r3, #0
}
  403662:	4618      	mov	r0, r3
  403664:	3724      	adds	r7, #36	; 0x24
  403666:	46bd      	mov	sp, r7
  403668:	bc80      	pop	{r7}
  40366a:	4770      	bx	lr

0040366c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  40366c:	b580      	push	{r7, lr}
  40366e:	b082      	sub	sp, #8
  403670:	af00      	add	r7, sp, #0
  403672:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  403674:	6878      	ldr	r0, [r7, #4]
  403676:	4b0f      	ldr	r3, [pc, #60]	; (4036b4 <usart_reset+0x48>)
  403678:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  40367a:	687b      	ldr	r3, [r7, #4]
  40367c:	2200      	movs	r2, #0
  40367e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  403680:	687b      	ldr	r3, [r7, #4]
  403682:	2200      	movs	r2, #0
  403684:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  403686:	687b      	ldr	r3, [r7, #4]
  403688:	2200      	movs	r2, #0
  40368a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  40368c:	6878      	ldr	r0, [r7, #4]
  40368e:	4b0a      	ldr	r3, [pc, #40]	; (4036b8 <usart_reset+0x4c>)
  403690:	4798      	blx	r3
	usart_reset_rx(p_usart);
  403692:	6878      	ldr	r0, [r7, #4]
  403694:	4b09      	ldr	r3, [pc, #36]	; (4036bc <usart_reset+0x50>)
  403696:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  403698:	6878      	ldr	r0, [r7, #4]
  40369a:	4b09      	ldr	r3, [pc, #36]	; (4036c0 <usart_reset+0x54>)
  40369c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  40369e:	6878      	ldr	r0, [r7, #4]
  4036a0:	4b08      	ldr	r3, [pc, #32]	; (4036c4 <usart_reset+0x58>)
  4036a2:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  4036a4:	6878      	ldr	r0, [r7, #4]
  4036a6:	4b08      	ldr	r3, [pc, #32]	; (4036c8 <usart_reset+0x5c>)
  4036a8:	4798      	blx	r3
#endif
}
  4036aa:	bf00      	nop
  4036ac:	3708      	adds	r7, #8
  4036ae:	46bd      	mov	sp, r7
  4036b0:	bd80      	pop	{r7, pc}
  4036b2:	bf00      	nop
  4036b4:	00403941 	.word	0x00403941
  4036b8:	004037c1 	.word	0x004037c1
  4036bc:	00403809 	.word	0x00403809
  4036c0:	00403889 	.word	0x00403889
  4036c4:	004038dd 	.word	0x004038dd
  4036c8:	004038c1 	.word	0x004038c1

004036cc <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4036cc:	b580      	push	{r7, lr}
  4036ce:	b084      	sub	sp, #16
  4036d0:	af00      	add	r7, sp, #0
  4036d2:	60f8      	str	r0, [r7, #12]
  4036d4:	60b9      	str	r1, [r7, #8]
  4036d6:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4036d8:	68f8      	ldr	r0, [r7, #12]
  4036da:	4b1a      	ldr	r3, [pc, #104]	; (403744 <usart_init_rs232+0x78>)
  4036dc:	4798      	blx	r3

	ul_reg_val = 0;
  4036de:	4b1a      	ldr	r3, [pc, #104]	; (403748 <usart_init_rs232+0x7c>)
  4036e0:	2200      	movs	r2, #0
  4036e2:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4036e4:	68bb      	ldr	r3, [r7, #8]
  4036e6:	2b00      	cmp	r3, #0
  4036e8:	d009      	beq.n	4036fe <usart_init_rs232+0x32>
  4036ea:	68bb      	ldr	r3, [r7, #8]
  4036ec:	681b      	ldr	r3, [r3, #0]
  4036ee:	687a      	ldr	r2, [r7, #4]
  4036f0:	4619      	mov	r1, r3
  4036f2:	68f8      	ldr	r0, [r7, #12]
  4036f4:	4b15      	ldr	r3, [pc, #84]	; (40374c <usart_init_rs232+0x80>)
  4036f6:	4798      	blx	r3
  4036f8:	4603      	mov	r3, r0
  4036fa:	2b00      	cmp	r3, #0
  4036fc:	d001      	beq.n	403702 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4036fe:	2301      	movs	r3, #1
  403700:	e01b      	b.n	40373a <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  403702:	68bb      	ldr	r3, [r7, #8]
  403704:	685a      	ldr	r2, [r3, #4]
  403706:	68bb      	ldr	r3, [r7, #8]
  403708:	689b      	ldr	r3, [r3, #8]
  40370a:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40370c:	68bb      	ldr	r3, [r7, #8]
  40370e:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  403710:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  403712:	68bb      	ldr	r3, [r7, #8]
  403714:	68db      	ldr	r3, [r3, #12]
  403716:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  403718:	4b0b      	ldr	r3, [pc, #44]	; (403748 <usart_init_rs232+0x7c>)
  40371a:	681b      	ldr	r3, [r3, #0]
  40371c:	4313      	orrs	r3, r2
  40371e:	4a0a      	ldr	r2, [pc, #40]	; (403748 <usart_init_rs232+0x7c>)
  403720:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  403722:	4b09      	ldr	r3, [pc, #36]	; (403748 <usart_init_rs232+0x7c>)
  403724:	681b      	ldr	r3, [r3, #0]
  403726:	4a08      	ldr	r2, [pc, #32]	; (403748 <usart_init_rs232+0x7c>)
  403728:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  40372a:	68fb      	ldr	r3, [r7, #12]
  40372c:	685a      	ldr	r2, [r3, #4]
  40372e:	4b06      	ldr	r3, [pc, #24]	; (403748 <usart_init_rs232+0x7c>)
  403730:	681b      	ldr	r3, [r3, #0]
  403732:	431a      	orrs	r2, r3
  403734:	68fb      	ldr	r3, [r7, #12]
  403736:	605a      	str	r2, [r3, #4]

	return 0;
  403738:	2300      	movs	r3, #0
}
  40373a:	4618      	mov	r0, r3
  40373c:	3710      	adds	r7, #16
  40373e:	46bd      	mov	sp, r7
  403740:	bd80      	pop	{r7, pc}
  403742:	bf00      	nop
  403744:	0040366d 	.word	0x0040366d
  403748:	2000054c 	.word	0x2000054c
  40374c:	004035e5 	.word	0x004035e5

00403750 <usart_init_rs485>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs485(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  403750:	b580      	push	{r7, lr}
  403752:	b084      	sub	sp, #16
  403754:	af00      	add	r7, sp, #0
  403756:	60f8      	str	r0, [r7, #12]
  403758:	60b9      	str	r1, [r7, #8]
  40375a:	607a      	str	r2, [r7, #4]
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  40375c:	687a      	ldr	r2, [r7, #4]
  40375e:	68b9      	ldr	r1, [r7, #8]
  403760:	68f8      	ldr	r0, [r7, #12]
  403762:	4b0a      	ldr	r3, [pc, #40]	; (40378c <usart_init_rs485+0x3c>)
  403764:	4798      	blx	r3
  403766:	4603      	mov	r3, r0
  403768:	2b00      	cmp	r3, #0
  40376a:	d001      	beq.n	403770 <usart_init_rs485+0x20>
		return 1;
  40376c:	2301      	movs	r3, #1
  40376e:	e008      	b.n	403782 <usart_init_rs485+0x32>
	}

	/* Set RS485 mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  403770:	68fb      	ldr	r3, [r7, #12]
  403772:	685b      	ldr	r3, [r3, #4]
  403774:	f023 030f 	bic.w	r3, r3, #15
  403778:	f043 0201 	orr.w	r2, r3, #1
  40377c:	68fb      	ldr	r3, [r7, #12]
  40377e:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_RS485;

	return 0;
  403780:	2300      	movs	r3, #0
}
  403782:	4618      	mov	r0, r3
  403784:	3710      	adds	r7, #16
  403786:	46bd      	mov	sp, r7
  403788:	bd80      	pop	{r7, pc}
  40378a:	bf00      	nop
  40378c:	004036cd 	.word	0x004036cd

00403790 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  403790:	b480      	push	{r7}
  403792:	b083      	sub	sp, #12
  403794:	af00      	add	r7, sp, #0
  403796:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  403798:	687b      	ldr	r3, [r7, #4]
  40379a:	2240      	movs	r2, #64	; 0x40
  40379c:	601a      	str	r2, [r3, #0]
}
  40379e:	bf00      	nop
  4037a0:	370c      	adds	r7, #12
  4037a2:	46bd      	mov	sp, r7
  4037a4:	bc80      	pop	{r7}
  4037a6:	4770      	bx	lr

004037a8 <usart_disable_tx>:
 * \brief Disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
  4037a8:	b480      	push	{r7}
  4037aa:	b083      	sub	sp, #12
  4037ac:	af00      	add	r7, sp, #0
  4037ae:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXDIS;
  4037b0:	687b      	ldr	r3, [r7, #4]
  4037b2:	2280      	movs	r2, #128	; 0x80
  4037b4:	601a      	str	r2, [r3, #0]
}
  4037b6:	bf00      	nop
  4037b8:	370c      	adds	r7, #12
  4037ba:	46bd      	mov	sp, r7
  4037bc:	bc80      	pop	{r7}
  4037be:	4770      	bx	lr

004037c0 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4037c0:	b480      	push	{r7}
  4037c2:	b083      	sub	sp, #12
  4037c4:	af00      	add	r7, sp, #0
  4037c6:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4037c8:	687b      	ldr	r3, [r7, #4]
  4037ca:	2288      	movs	r2, #136	; 0x88
  4037cc:	601a      	str	r2, [r3, #0]
}
  4037ce:	bf00      	nop
  4037d0:	370c      	adds	r7, #12
  4037d2:	46bd      	mov	sp, r7
  4037d4:	bc80      	pop	{r7}
  4037d6:	4770      	bx	lr

004037d8 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4037d8:	b480      	push	{r7}
  4037da:	b083      	sub	sp, #12
  4037dc:	af00      	add	r7, sp, #0
  4037de:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4037e0:	687b      	ldr	r3, [r7, #4]
  4037e2:	2210      	movs	r2, #16
  4037e4:	601a      	str	r2, [r3, #0]
}
  4037e6:	bf00      	nop
  4037e8:	370c      	adds	r7, #12
  4037ea:	46bd      	mov	sp, r7
  4037ec:	bc80      	pop	{r7}
  4037ee:	4770      	bx	lr

004037f0 <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
  4037f0:	b480      	push	{r7}
  4037f2:	b083      	sub	sp, #12
  4037f4:	af00      	add	r7, sp, #0
  4037f6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
  4037f8:	687b      	ldr	r3, [r7, #4]
  4037fa:	2220      	movs	r2, #32
  4037fc:	601a      	str	r2, [r3, #0]
}
  4037fe:	bf00      	nop
  403800:	370c      	adds	r7, #12
  403802:	46bd      	mov	sp, r7
  403804:	bc80      	pop	{r7}
  403806:	4770      	bx	lr

00403808 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  403808:	b480      	push	{r7}
  40380a:	b083      	sub	sp, #12
  40380c:	af00      	add	r7, sp, #0
  40380e:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  403810:	687b      	ldr	r3, [r7, #4]
  403812:	2224      	movs	r2, #36	; 0x24
  403814:	601a      	str	r2, [r3, #0]
}
  403816:	bf00      	nop
  403818:	370c      	adds	r7, #12
  40381a:	46bd      	mov	sp, r7
  40381c:	bc80      	pop	{r7}
  40381e:	4770      	bx	lr

00403820 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  403820:	b480      	push	{r7}
  403822:	b083      	sub	sp, #12
  403824:	af00      	add	r7, sp, #0
  403826:	6078      	str	r0, [r7, #4]
  403828:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  40382a:	687b      	ldr	r3, [r7, #4]
  40382c:	683a      	ldr	r2, [r7, #0]
  40382e:	609a      	str	r2, [r3, #8]
}
  403830:	bf00      	nop
  403832:	370c      	adds	r7, #12
  403834:	46bd      	mov	sp, r7
  403836:	bc80      	pop	{r7}
  403838:	4770      	bx	lr
  40383a:	bf00      	nop

0040383c <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  40383c:	b480      	push	{r7}
  40383e:	b083      	sub	sp, #12
  403840:	af00      	add	r7, sp, #0
  403842:	6078      	str	r0, [r7, #4]
  403844:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  403846:	687b      	ldr	r3, [r7, #4]
  403848:	683a      	ldr	r2, [r7, #0]
  40384a:	60da      	str	r2, [r3, #12]
}
  40384c:	bf00      	nop
  40384e:	370c      	adds	r7, #12
  403850:	46bd      	mov	sp, r7
  403852:	bc80      	pop	{r7}
  403854:	4770      	bx	lr
  403856:	bf00      	nop

00403858 <usart_get_interrupt_mask>:
 * \param p_usart Pointer to a USART peripheral.
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
  403858:	b480      	push	{r7}
  40385a:	b083      	sub	sp, #12
  40385c:	af00      	add	r7, sp, #0
  40385e:	6078      	str	r0, [r7, #4]
	return p_usart->US_IMR;
  403860:	687b      	ldr	r3, [r7, #4]
  403862:	691b      	ldr	r3, [r3, #16]
}
  403864:	4618      	mov	r0, r3
  403866:	370c      	adds	r7, #12
  403868:	46bd      	mov	sp, r7
  40386a:	bc80      	pop	{r7}
  40386c:	4770      	bx	lr
  40386e:	bf00      	nop

00403870 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  403870:	b480      	push	{r7}
  403872:	b083      	sub	sp, #12
  403874:	af00      	add	r7, sp, #0
  403876:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  403878:	687b      	ldr	r3, [r7, #4]
  40387a:	695b      	ldr	r3, [r3, #20]
}
  40387c:	4618      	mov	r0, r3
  40387e:	370c      	adds	r7, #12
  403880:	46bd      	mov	sp, r7
  403882:	bc80      	pop	{r7}
  403884:	4770      	bx	lr
  403886:	bf00      	nop

00403888 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  403888:	b480      	push	{r7}
  40388a:	b083      	sub	sp, #12
  40388c:	af00      	add	r7, sp, #0
  40388e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  403890:	687b      	ldr	r3, [r7, #4]
  403892:	f44f 7280 	mov.w	r2, #256	; 0x100
  403896:	601a      	str	r2, [r3, #0]
}
  403898:	bf00      	nop
  40389a:	370c      	adds	r7, #12
  40389c:	46bd      	mov	sp, r7
  40389e:	bc80      	pop	{r7}
  4038a0:	4770      	bx	lr
  4038a2:	bf00      	nop

004038a4 <usart_start_rx_timeout>:
 * Reset the status bit TIMEOUT in US_CSR.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_start_rx_timeout(Usart *p_usart)
{
  4038a4:	b480      	push	{r7}
  4038a6:	b083      	sub	sp, #12
  4038a8:	af00      	add	r7, sp, #0
  4038aa:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_STTTO;
  4038ac:	687b      	ldr	r3, [r7, #4]
  4038ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4038b2:	601a      	str	r2, [r3, #0]
}
  4038b4:	bf00      	nop
  4038b6:	370c      	adds	r7, #12
  4038b8:	46bd      	mov	sp, r7
  4038ba:	bc80      	pop	{r7}
  4038bc:	4770      	bx	lr
  4038be:	bf00      	nop

004038c0 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  4038c0:	b480      	push	{r7}
  4038c2:	b083      	sub	sp, #12
  4038c4:	af00      	add	r7, sp, #0
  4038c6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  4038c8:	687b      	ldr	r3, [r7, #4]
  4038ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  4038ce:	601a      	str	r2, [r3, #0]
}
  4038d0:	bf00      	nop
  4038d2:	370c      	adds	r7, #12
  4038d4:	46bd      	mov	sp, r7
  4038d6:	bc80      	pop	{r7}
  4038d8:	4770      	bx	lr
  4038da:	bf00      	nop

004038dc <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  4038dc:	b480      	push	{r7}
  4038de:	b083      	sub	sp, #12
  4038e0:	af00      	add	r7, sp, #0
  4038e2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  4038e4:	687b      	ldr	r3, [r7, #4]
  4038e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4038ea:	601a      	str	r2, [r3, #0]
}
  4038ec:	bf00      	nop
  4038ee:	370c      	adds	r7, #12
  4038f0:	46bd      	mov	sp, r7
  4038f2:	bc80      	pop	{r7}
  4038f4:	4770      	bx	lr
  4038f6:	bf00      	nop

004038f8 <usart_get_pdc_base>:
 * \param p_usart Pointer to a UART instance.
 *
 * \return USART PDC registers base for PDC driver to access.
 */
Pdc *usart_get_pdc_base(Usart *p_usart)
{
  4038f8:	b480      	push	{r7}
  4038fa:	b085      	sub	sp, #20
  4038fc:	af00      	add	r7, sp, #0
  4038fe:	6078      	str	r0, [r7, #4]
	Pdc *p_pdc_base;

	p_pdc_base = (Pdc *)NULL;
  403900:	2300      	movs	r3, #0
  403902:	60fb      	str	r3, [r7, #12]
		p_pdc_base = PDC_USART;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
  403904:	687b      	ldr	r3, [r7, #4]
  403906:	4a0a      	ldr	r2, [pc, #40]	; (403930 <usart_get_pdc_base+0x38>)
  403908:	4293      	cmp	r3, r2
  40390a:	d103      	bne.n	403914 <usart_get_pdc_base+0x1c>
		p_pdc_base = PDC_USART0;
  40390c:	4b09      	ldr	r3, [pc, #36]	; (403934 <usart_get_pdc_base+0x3c>)
  40390e:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  403910:	68fb      	ldr	r3, [r7, #12]
  403912:	e008      	b.n	403926 <usart_get_pdc_base+0x2e>
	}
#endif
#ifdef PDC_USART1
	else if (p_usart == USART1) {
  403914:	687b      	ldr	r3, [r7, #4]
  403916:	4a08      	ldr	r2, [pc, #32]	; (403938 <usart_get_pdc_base+0x40>)
  403918:	4293      	cmp	r3, r2
  40391a:	d103      	bne.n	403924 <usart_get_pdc_base+0x2c>
		p_pdc_base = PDC_USART1;
  40391c:	4b07      	ldr	r3, [pc, #28]	; (40393c <usart_get_pdc_base+0x44>)
  40391e:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  403920:	68fb      	ldr	r3, [r7, #12]
  403922:	e000      	b.n	403926 <usart_get_pdc_base+0x2e>
		p_pdc_base = PDC_USART7;
		return p_pdc_base;
	}
#endif

	return p_pdc_base;
  403924:	68fb      	ldr	r3, [r7, #12]
}
  403926:	4618      	mov	r0, r3
  403928:	3714      	adds	r7, #20
  40392a:	46bd      	mov	sp, r7
  40392c:	bc80      	pop	{r7}
  40392e:	4770      	bx	lr
  403930:	40024000 	.word	0x40024000
  403934:	40024100 	.word	0x40024100
  403938:	40028000 	.word	0x40028000
  40393c:	40028100 	.word	0x40028100

00403940 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  403940:	b480      	push	{r7}
  403942:	b083      	sub	sp, #12
  403944:	af00      	add	r7, sp, #0
  403946:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  403948:	687b      	ldr	r3, [r7, #4]
  40394a:	4a04      	ldr	r2, [pc, #16]	; (40395c <usart_disable_writeprotect+0x1c>)
  40394c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  403950:	bf00      	nop
  403952:	370c      	adds	r7, #12
  403954:	46bd      	mov	sp, r7
  403956:	bc80      	pop	{r7}
  403958:	4770      	bx	lr
  40395a:	bf00      	nop
  40395c:	55534100 	.word	0x55534100

00403960 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  403960:	b480      	push	{r7}
  403962:	b083      	sub	sp, #12
  403964:	af00      	add	r7, sp, #0
  403966:	4603      	mov	r3, r0
  403968:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40396a:	4908      	ldr	r1, [pc, #32]	; (40398c <NVIC_EnableIRQ+0x2c>)
  40396c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403970:	095b      	lsrs	r3, r3, #5
  403972:	79fa      	ldrb	r2, [r7, #7]
  403974:	f002 021f 	and.w	r2, r2, #31
  403978:	2001      	movs	r0, #1
  40397a:	fa00 f202 	lsl.w	r2, r0, r2
  40397e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  403982:	bf00      	nop
  403984:	370c      	adds	r7, #12
  403986:	46bd      	mov	sp, r7
  403988:	bc80      	pop	{r7}
  40398a:	4770      	bx	lr
  40398c:	e000e100 	.word	0xe000e100

00403990 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  403990:	b580      	push	{r7, lr}
  403992:	b082      	sub	sp, #8
  403994:	af00      	add	r7, sp, #0
  403996:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  403998:	6878      	ldr	r0, [r7, #4]
  40399a:	4b03      	ldr	r3, [pc, #12]	; (4039a8 <sysclk_enable_peripheral_clock+0x18>)
  40399c:	4798      	blx	r3
}
  40399e:	bf00      	nop
  4039a0:	3708      	adds	r7, #8
  4039a2:	46bd      	mov	sp, r7
  4039a4:	bd80      	pop	{r7, pc}
  4039a6:	bf00      	nop
  4039a8:	004049b9 	.word	0x004049b9

004039ac <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4039ac:	b580      	push	{r7, lr}
  4039ae:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4039b0:	200b      	movs	r0, #11
  4039b2:	4b03      	ldr	r3, [pc, #12]	; (4039c0 <ioport_init+0x14>)
  4039b4:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4039b6:	200c      	movs	r0, #12
  4039b8:	4b01      	ldr	r3, [pc, #4]	; (4039c0 <ioport_init+0x14>)
  4039ba:	4798      	blx	r3
	arch_ioport_init();
}
  4039bc:	bf00      	nop
  4039be:	bd80      	pop	{r7, pc}
  4039c0:	00403991 	.word	0x00403991

004039c4 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  4039c4:	b590      	push	{r4, r7, lr}
  4039c6:	b083      	sub	sp, #12
  4039c8:	af02      	add	r7, sp, #8
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */

	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4039ca:	4b2d      	ldr	r3, [pc, #180]	; (403a80 <board_init+0xbc>)
  4039cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4039d0:	605a      	str	r2, [r3, #4]

	/* Init IO Port service to enable configuring pins */
	ioport_init();
  4039d2:	4b2c      	ldr	r3, [pc, #176]	; (403a84 <board_init+0xc0>)
  4039d4:	4798      	blx	r3

	/* Configure USART0 Pins (RS485, MODBUS) */
	gpio_configure_group(PINS_USART0_PIO, PINS_USART0, PINS_USART0_FLAGS);
  4039d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4039da:	2160      	movs	r1, #96	; 0x60
  4039dc:	482a      	ldr	r0, [pc, #168]	; (403a88 <board_init+0xc4>)
  4039de:	4b2b      	ldr	r3, [pc, #172]	; (403a8c <board_init+0xc8>)
  4039e0:	4798      	blx	r3

	/* Configure USART1 Pins (XBee) */
	gpio_configure_group(PINS_USART1_PIO, PINS_USART1, PINS_USART1_FLAGS);
  4039e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4039e6:	f04f 71b0 	mov.w	r1, #23068672	; 0x1600000
  4039ea:	4827      	ldr	r0, [pc, #156]	; (403a88 <board_init+0xc4>)
  4039ec:	4b27      	ldr	r3, [pc, #156]	; (403a8c <board_init+0xc8>)
  4039ee:	4798      	blx	r3

	/* Configure UART0 Pins (Console) */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  4039f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4039f4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  4039f8:	4823      	ldr	r0, [pc, #140]	; (403a88 <board_init+0xc4>)
  4039fa:	4b24      	ldr	r3, [pc, #144]	; (403a8c <board_init+0xc8>)
  4039fc:	4798      	blx	r3
	
	/* Configure TWI0 Pins */
	gpio_configure_group(PINS_TWI0_PIO, PINS_TWI0, PINS_TWI0_FLAGS);
  4039fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  403a02:	2118      	movs	r1, #24
  403a04:	4820      	ldr	r0, [pc, #128]	; (403a88 <board_init+0xc4>)
  403a06:	4b21      	ldr	r3, [pc, #132]	; (403a8c <board_init+0xc8>)
  403a08:	4798      	blx	r3

	/* Configure Motor Controller Pins */
	#ifndef MOTOR_CTRL_A4955
	#else
		gpio_configure_pin(PIN_MOTOR_IN1_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  403a0a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403a0e:	2020      	movs	r0, #32
  403a10:	4b1f      	ldr	r3, [pc, #124]	; (403a90 <board_init+0xcc>)
  403a12:	4798      	blx	r3
		gpio_configure_pin(PIN_MOTOR_IN2_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  403a14:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403a18:	2021      	movs	r0, #33	; 0x21
  403a1a:	4b1d      	ldr	r3, [pc, #116]	; (403a90 <board_init+0xcc>)
  403a1c:	4798      	blx	r3
		gpio_configure_pin(PIN_MOTOR_SLP_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  403a1e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403a22:	2022      	movs	r0, #34	; 0x22
  403a24:	4b1a      	ldr	r3, [pc, #104]	; (403a90 <board_init+0xcc>)
  403a26:	4798      	blx	r3
		gpio_configure_pin(PIN_MOTOR_OCL_IDX, (PIO_INPUT | PIO_OPENDRAIN));
  403a28:	491a      	ldr	r1, [pc, #104]	; (403a94 <board_init+0xd0>)
  403a2a:	2023      	movs	r0, #35	; 0x23
  403a2c:	4b18      	ldr	r3, [pc, #96]	; (403a90 <board_init+0xcc>)
  403a2e:	4798      	blx	r3
	#endif

	/* Configure LED Pins */
	gpio_configure_pin(PIN_DEBUGLED_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  403a30:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403a34:	2010      	movs	r0, #16
  403a36:	4b16      	ldr	r3, [pc, #88]	; (403a90 <board_init+0xcc>)
  403a38:	4798      	blx	r3

	/* Configure LDO EN Pin */
	gpio_configure_pin(PIN_LDOEN_IDX, (PIO_OUTPUT_0 | PIO_DEFAULT));
  403a3a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403a3e:	2001      	movs	r0, #1
  403a40:	4b13      	ldr	r3, [pc, #76]	; (403a90 <board_init+0xcc>)
  403a42:	4798      	blx	r3
	
	/* Configure RTC 1 min Interrupt Pin */
	gpio_configure_pin(PIN_RTC_INT_IDX, PIO_INPUT);
  403a44:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403a48:	2000      	movs	r0, #0
  403a4a:	4b11      	ldr	r3, [pc, #68]	; (403a90 <board_init+0xcc>)
  403a4c:	4798      	blx	r3

	/* Initialize PIOs interrupt handlers (see PIO definition in board.h). */
	pio_handler_set(PIN_RTC_INT_PIO, PIN_RTC_INT_PIO_ID, PIN_RTC_INT_MASK, (PIO_OPENDRAIN | PIO_IT_FALL_EDGE), RTCIntHandler);
  403a4e:	4b12      	ldr	r3, [pc, #72]	; (403a98 <board_init+0xd4>)
  403a50:	9300      	str	r3, [sp, #0]
  403a52:	2354      	movs	r3, #84	; 0x54
  403a54:	2201      	movs	r2, #1
  403a56:	210b      	movs	r1, #11
  403a58:	480b      	ldr	r0, [pc, #44]	; (403a88 <board_init+0xc4>)
  403a5a:	4c10      	ldr	r4, [pc, #64]	; (403a9c <board_init+0xd8>)
  403a5c:	47a0      	blx	r4

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type) PIN_RTC_INT_PIO_ID);
  403a5e:	200b      	movs	r0, #11
  403a60:	4b0f      	ldr	r3, [pc, #60]	; (403aa0 <board_init+0xdc>)
  403a62:	4798      	blx	r3

	/* Set RTC Int Priority */
	pio_handler_set_priority(PIN_RTC_INT_PIO, (IRQn_Type) PIN_RTC_INT_PIO_ID, configLIBRARY_LOWEST_INTERRUPT_PRIORITY);
  403a64:	220f      	movs	r2, #15
  403a66:	210b      	movs	r1, #11
  403a68:	4807      	ldr	r0, [pc, #28]	; (403a88 <board_init+0xc4>)
  403a6a:	4b0e      	ldr	r3, [pc, #56]	; (403aa4 <board_init+0xe0>)
  403a6c:	4798      	blx	r3
	
	/* Enable PIO line interrupts. */
	pio_enable_interrupt(PIN_RTC_INT_PIO, PIN_RTC_INT_MASK);
  403a6e:	2101      	movs	r1, #1
  403a70:	4805      	ldr	r0, [pc, #20]	; (403a88 <board_init+0xc4>)
  403a72:	4b0d      	ldr	r3, [pc, #52]	; (403aa8 <board_init+0xe4>)
  403a74:	4798      	blx	r3
}
  403a76:	bf00      	nop
  403a78:	3704      	adds	r7, #4
  403a7a:	46bd      	mov	sp, r7
  403a7c:	bd90      	pop	{r4, r7, pc}
  403a7e:	bf00      	nop
  403a80:	400e1450 	.word	0x400e1450
  403a84:	004039ad 	.word	0x004039ad
  403a88:	400e0e00 	.word	0x400e0e00
  403a8c:	00404309 	.word	0x00404309
  403a90:	00404159 	.word	0x00404159
  403a94:	28000004 	.word	0x28000004
  403a98:	00400d01 	.word	0x00400d01
  403a9c:	00404619 	.word	0x00404619
  403aa0:	00403961 	.word	0x00403961
  403aa4:	004046e9 	.word	0x004046e9
  403aa8:	00404091 	.word	0x00404091

00403aac <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  403aac:	b580      	push	{r7, lr}
  403aae:	b082      	sub	sp, #8
  403ab0:	af00      	add	r7, sp, #0
  403ab2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403ab4:	687b      	ldr	r3, [r7, #4]
  403ab6:	2b07      	cmp	r3, #7
  403ab8:	d831      	bhi.n	403b1e <osc_enable+0x72>
  403aba:	a201      	add	r2, pc, #4	; (adr r2, 403ac0 <osc_enable+0x14>)
  403abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403ac0:	00403b1d 	.word	0x00403b1d
  403ac4:	00403ae1 	.word	0x00403ae1
  403ac8:	00403ae9 	.word	0x00403ae9
  403acc:	00403af1 	.word	0x00403af1
  403ad0:	00403af9 	.word	0x00403af9
  403ad4:	00403b01 	.word	0x00403b01
  403ad8:	00403b09 	.word	0x00403b09
  403adc:	00403b13 	.word	0x00403b13
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  403ae0:	2000      	movs	r0, #0
  403ae2:	4b11      	ldr	r3, [pc, #68]	; (403b28 <osc_enable+0x7c>)
  403ae4:	4798      	blx	r3
		break;
  403ae6:	e01a      	b.n	403b1e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  403ae8:	2001      	movs	r0, #1
  403aea:	4b0f      	ldr	r3, [pc, #60]	; (403b28 <osc_enable+0x7c>)
  403aec:	4798      	blx	r3
		break;
  403aee:	e016      	b.n	403b1e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  403af0:	2000      	movs	r0, #0
  403af2:	4b0e      	ldr	r3, [pc, #56]	; (403b2c <osc_enable+0x80>)
  403af4:	4798      	blx	r3
		break;
  403af6:	e012      	b.n	403b1e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  403af8:	2010      	movs	r0, #16
  403afa:	4b0c      	ldr	r3, [pc, #48]	; (403b2c <osc_enable+0x80>)
  403afc:	4798      	blx	r3
		break;
  403afe:	e00e      	b.n	403b1e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  403b00:	2020      	movs	r0, #32
  403b02:	4b0a      	ldr	r3, [pc, #40]	; (403b2c <osc_enable+0x80>)
  403b04:	4798      	blx	r3
		break;
  403b06:	e00a      	b.n	403b1e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  403b08:	213e      	movs	r1, #62	; 0x3e
  403b0a:	2000      	movs	r0, #0
  403b0c:	4b08      	ldr	r3, [pc, #32]	; (403b30 <osc_enable+0x84>)
  403b0e:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  403b10:	e005      	b.n	403b1e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  403b12:	213e      	movs	r1, #62	; 0x3e
  403b14:	2001      	movs	r0, #1
  403b16:	4b06      	ldr	r3, [pc, #24]	; (403b30 <osc_enable+0x84>)
  403b18:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  403b1a:	e000      	b.n	403b1e <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  403b1c:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  403b1e:	bf00      	nop
  403b20:	3708      	adds	r7, #8
  403b22:	46bd      	mov	sp, r7
  403b24:	bd80      	pop	{r7, pc}
  403b26:	bf00      	nop
  403b28:	004047ed 	.word	0x004047ed
  403b2c:	00404859 	.word	0x00404859
  403b30:	004048c9 	.word	0x004048c9

00403b34 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  403b34:	b580      	push	{r7, lr}
  403b36:	b082      	sub	sp, #8
  403b38:	af00      	add	r7, sp, #0
  403b3a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403b3c:	687b      	ldr	r3, [r7, #4]
  403b3e:	2b07      	cmp	r3, #7
  403b40:	d826      	bhi.n	403b90 <osc_is_ready+0x5c>
  403b42:	a201      	add	r2, pc, #4	; (adr r2, 403b48 <osc_is_ready+0x14>)
  403b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403b48:	00403b69 	.word	0x00403b69
  403b4c:	00403b6d 	.word	0x00403b6d
  403b50:	00403b6d 	.word	0x00403b6d
  403b54:	00403b7f 	.word	0x00403b7f
  403b58:	00403b7f 	.word	0x00403b7f
  403b5c:	00403b7f 	.word	0x00403b7f
  403b60:	00403b7f 	.word	0x00403b7f
  403b64:	00403b7f 	.word	0x00403b7f
	case OSC_SLCK_32K_RC:
		return 1;
  403b68:	2301      	movs	r3, #1
  403b6a:	e012      	b.n	403b92 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  403b6c:	4b0b      	ldr	r3, [pc, #44]	; (403b9c <osc_is_ready+0x68>)
  403b6e:	4798      	blx	r3
  403b70:	4603      	mov	r3, r0
  403b72:	2b00      	cmp	r3, #0
  403b74:	bf14      	ite	ne
  403b76:	2301      	movne	r3, #1
  403b78:	2300      	moveq	r3, #0
  403b7a:	b2db      	uxtb	r3, r3
  403b7c:	e009      	b.n	403b92 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  403b7e:	4b08      	ldr	r3, [pc, #32]	; (403ba0 <osc_is_ready+0x6c>)
  403b80:	4798      	blx	r3
  403b82:	4603      	mov	r3, r0
  403b84:	2b00      	cmp	r3, #0
  403b86:	bf14      	ite	ne
  403b88:	2301      	movne	r3, #1
  403b8a:	2300      	moveq	r3, #0
  403b8c:	b2db      	uxtb	r3, r3
  403b8e:	e000      	b.n	403b92 <osc_is_ready+0x5e>
	}

	return 0;
  403b90:	2300      	movs	r3, #0
}
  403b92:	4618      	mov	r0, r3
  403b94:	3708      	adds	r7, #8
  403b96:	46bd      	mov	sp, r7
  403b98:	bd80      	pop	{r7, pc}
  403b9a:	bf00      	nop
  403b9c:	00404825 	.word	0x00404825
  403ba0:	00404941 	.word	0x00404941

00403ba4 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  403ba4:	b480      	push	{r7}
  403ba6:	b083      	sub	sp, #12
  403ba8:	af00      	add	r7, sp, #0
  403baa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403bac:	687b      	ldr	r3, [r7, #4]
  403bae:	2b07      	cmp	r3, #7
  403bb0:	d825      	bhi.n	403bfe <osc_get_rate+0x5a>
  403bb2:	a201      	add	r2, pc, #4	; (adr r2, 403bb8 <osc_get_rate+0x14>)
  403bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403bb8:	00403bd9 	.word	0x00403bd9
  403bbc:	00403bdf 	.word	0x00403bdf
  403bc0:	00403be5 	.word	0x00403be5
  403bc4:	00403beb 	.word	0x00403beb
  403bc8:	00403bef 	.word	0x00403bef
  403bcc:	00403bf3 	.word	0x00403bf3
  403bd0:	00403bf7 	.word	0x00403bf7
  403bd4:	00403bfb 	.word	0x00403bfb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  403bd8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  403bdc:	e010      	b.n	403c00 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  403bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403be2:	e00d      	b.n	403c00 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  403be4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403be8:	e00a      	b.n	403c00 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  403bea:	4b08      	ldr	r3, [pc, #32]	; (403c0c <osc_get_rate+0x68>)
  403bec:	e008      	b.n	403c00 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  403bee:	4b08      	ldr	r3, [pc, #32]	; (403c10 <osc_get_rate+0x6c>)
  403bf0:	e006      	b.n	403c00 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  403bf2:	4b08      	ldr	r3, [pc, #32]	; (403c14 <osc_get_rate+0x70>)
  403bf4:	e004      	b.n	403c00 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  403bf6:	4b07      	ldr	r3, [pc, #28]	; (403c14 <osc_get_rate+0x70>)
  403bf8:	e002      	b.n	403c00 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  403bfa:	4b06      	ldr	r3, [pc, #24]	; (403c14 <osc_get_rate+0x70>)
  403bfc:	e000      	b.n	403c00 <osc_get_rate+0x5c>
	}

	return 0;
  403bfe:	2300      	movs	r3, #0
}
  403c00:	4618      	mov	r0, r3
  403c02:	370c      	adds	r7, #12
  403c04:	46bd      	mov	sp, r7
  403c06:	bc80      	pop	{r7}
  403c08:	4770      	bx	lr
  403c0a:	bf00      	nop
  403c0c:	003d0900 	.word	0x003d0900
  403c10:	007a1200 	.word	0x007a1200
  403c14:	00b71b00 	.word	0x00b71b00

00403c18 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  403c18:	b580      	push	{r7, lr}
  403c1a:	b082      	sub	sp, #8
  403c1c:	af00      	add	r7, sp, #0
  403c1e:	4603      	mov	r3, r0
  403c20:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  403c22:	bf00      	nop
  403c24:	79fb      	ldrb	r3, [r7, #7]
  403c26:	4618      	mov	r0, r3
  403c28:	4b05      	ldr	r3, [pc, #20]	; (403c40 <osc_wait_ready+0x28>)
  403c2a:	4798      	blx	r3
  403c2c:	4603      	mov	r3, r0
  403c2e:	f083 0301 	eor.w	r3, r3, #1
  403c32:	b2db      	uxtb	r3, r3
  403c34:	2b00      	cmp	r3, #0
  403c36:	d1f5      	bne.n	403c24 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  403c38:	bf00      	nop
  403c3a:	3708      	adds	r7, #8
  403c3c:	46bd      	mov	sp, r7
  403c3e:	bd80      	pop	{r7, pc}
  403c40:	00403b35 	.word	0x00403b35

00403c44 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  403c44:	b580      	push	{r7, lr}
  403c46:	b086      	sub	sp, #24
  403c48:	af00      	add	r7, sp, #0
  403c4a:	60f8      	str	r0, [r7, #12]
  403c4c:	607a      	str	r2, [r7, #4]
  403c4e:	603b      	str	r3, [r7, #0]
  403c50:	460b      	mov	r3, r1
  403c52:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  403c54:	7afb      	ldrb	r3, [r7, #11]
  403c56:	4618      	mov	r0, r3
  403c58:	4b0d      	ldr	r3, [pc, #52]	; (403c90 <pll_config_init+0x4c>)
  403c5a:	4798      	blx	r3
  403c5c:	4602      	mov	r2, r0
  403c5e:	687b      	ldr	r3, [r7, #4]
  403c60:	fbb2 f3f3 	udiv	r3, r2, r3
  403c64:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  403c66:	697b      	ldr	r3, [r7, #20]
  403c68:	683a      	ldr	r2, [r7, #0]
  403c6a:	fb02 f303 	mul.w	r3, r2, r3
  403c6e:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  403c70:	683b      	ldr	r3, [r7, #0]
  403c72:	3b01      	subs	r3, #1
  403c74:	041a      	lsls	r2, r3, #16
  403c76:	4b07      	ldr	r3, [pc, #28]	; (403c94 <pll_config_init+0x50>)
  403c78:	4013      	ands	r3, r2
  403c7a:	687a      	ldr	r2, [r7, #4]
  403c7c:	b2d2      	uxtb	r2, r2
  403c7e:	4313      	orrs	r3, r2
  403c80:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  403c84:	68fb      	ldr	r3, [r7, #12]
  403c86:	601a      	str	r2, [r3, #0]
}
  403c88:	bf00      	nop
  403c8a:	3718      	adds	r7, #24
  403c8c:	46bd      	mov	sp, r7
  403c8e:	bd80      	pop	{r7, pc}
  403c90:	00403ba5 	.word	0x00403ba5
  403c94:	07ff0000 	.word	0x07ff0000

00403c98 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  403c98:	b580      	push	{r7, lr}
  403c9a:	b082      	sub	sp, #8
  403c9c:	af00      	add	r7, sp, #0
  403c9e:	6078      	str	r0, [r7, #4]
  403ca0:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  403ca2:	683b      	ldr	r3, [r7, #0]
  403ca4:	2b00      	cmp	r3, #0
  403ca6:	d108      	bne.n	403cba <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  403ca8:	4b09      	ldr	r3, [pc, #36]	; (403cd0 <pll_enable+0x38>)
  403caa:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  403cac:	4a09      	ldr	r2, [pc, #36]	; (403cd4 <pll_enable+0x3c>)
  403cae:	687b      	ldr	r3, [r7, #4]
  403cb0:	681b      	ldr	r3, [r3, #0]
  403cb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  403cb6:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  403cb8:	e005      	b.n	403cc6 <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  403cba:	4b07      	ldr	r3, [pc, #28]	; (403cd8 <pll_enable+0x40>)
  403cbc:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  403cbe:	4a05      	ldr	r2, [pc, #20]	; (403cd4 <pll_enable+0x3c>)
  403cc0:	687b      	ldr	r3, [r7, #4]
  403cc2:	681b      	ldr	r3, [r3, #0]
  403cc4:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
}
  403cc6:	bf00      	nop
  403cc8:	3708      	adds	r7, #8
  403cca:	46bd      	mov	sp, r7
  403ccc:	bd80      	pop	{r7, pc}
  403cce:	bf00      	nop
  403cd0:	00404959 	.word	0x00404959
  403cd4:	400e0400 	.word	0x400e0400
  403cd8:	00404989 	.word	0x00404989

00403cdc <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  403cdc:	b580      	push	{r7, lr}
  403cde:	b082      	sub	sp, #8
  403ce0:	af00      	add	r7, sp, #0
  403ce2:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  403ce4:	687b      	ldr	r3, [r7, #4]
  403ce6:	2b00      	cmp	r3, #0
  403ce8:	d103      	bne.n	403cf2 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  403cea:	4b05      	ldr	r3, [pc, #20]	; (403d00 <pll_is_locked+0x24>)
  403cec:	4798      	blx	r3
  403cee:	4603      	mov	r3, r0
  403cf0:	e002      	b.n	403cf8 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  403cf2:	4b04      	ldr	r3, [pc, #16]	; (403d04 <pll_is_locked+0x28>)
  403cf4:	4798      	blx	r3
  403cf6:	4603      	mov	r3, r0
	}
}
  403cf8:	4618      	mov	r0, r3
  403cfa:	3708      	adds	r7, #8
  403cfc:	46bd      	mov	sp, r7
  403cfe:	bd80      	pop	{r7, pc}
  403d00:	00404971 	.word	0x00404971
  403d04:	004049a1 	.word	0x004049a1

00403d08 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  403d08:	b580      	push	{r7, lr}
  403d0a:	b082      	sub	sp, #8
  403d0c:	af00      	add	r7, sp, #0
  403d0e:	4603      	mov	r3, r0
  403d10:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  403d12:	79fb      	ldrb	r3, [r7, #7]
  403d14:	3b03      	subs	r3, #3
  403d16:	2b04      	cmp	r3, #4
  403d18:	d808      	bhi.n	403d2c <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  403d1a:	79fb      	ldrb	r3, [r7, #7]
  403d1c:	4618      	mov	r0, r3
  403d1e:	4b06      	ldr	r3, [pc, #24]	; (403d38 <pll_enable_source+0x30>)
  403d20:	4798      	blx	r3
		osc_wait_ready(e_src);
  403d22:	79fb      	ldrb	r3, [r7, #7]
  403d24:	4618      	mov	r0, r3
  403d26:	4b05      	ldr	r3, [pc, #20]	; (403d3c <pll_enable_source+0x34>)
  403d28:	4798      	blx	r3
		break;
  403d2a:	e000      	b.n	403d2e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  403d2c:	bf00      	nop
	}
}
  403d2e:	bf00      	nop
  403d30:	3708      	adds	r7, #8
  403d32:	46bd      	mov	sp, r7
  403d34:	bd80      	pop	{r7, pc}
  403d36:	bf00      	nop
  403d38:	00403aad 	.word	0x00403aad
  403d3c:	00403c19 	.word	0x00403c19

00403d40 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  403d40:	b580      	push	{r7, lr}
  403d42:	b082      	sub	sp, #8
  403d44:	af00      	add	r7, sp, #0
  403d46:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  403d48:	bf00      	nop
  403d4a:	6878      	ldr	r0, [r7, #4]
  403d4c:	4b04      	ldr	r3, [pc, #16]	; (403d60 <pll_wait_for_lock+0x20>)
  403d4e:	4798      	blx	r3
  403d50:	4603      	mov	r3, r0
  403d52:	2b00      	cmp	r3, #0
  403d54:	d0f9      	beq.n	403d4a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  403d56:	2300      	movs	r3, #0
}
  403d58:	4618      	mov	r0, r3
  403d5a:	3708      	adds	r7, #8
  403d5c:	46bd      	mov	sp, r7
  403d5e:	bd80      	pop	{r7, pc}
  403d60:	00403cdd 	.word	0x00403cdd

00403d64 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  403d64:	b580      	push	{r7, lr}
  403d66:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  403d68:	2006      	movs	r0, #6
  403d6a:	4b04      	ldr	r3, [pc, #16]	; (403d7c <sysclk_get_main_hz+0x18>)
  403d6c:	4798      	blx	r3
  403d6e:	4602      	mov	r2, r0
  403d70:	4613      	mov	r3, r2
  403d72:	009b      	lsls	r3, r3, #2
  403d74:	4413      	add	r3, r2
  403d76:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  403d78:	4618      	mov	r0, r3
  403d7a:	bd80      	pop	{r7, pc}
  403d7c:	00403ba5 	.word	0x00403ba5

00403d80 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  403d80:	b580      	push	{r7, lr}
  403d82:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  403d84:	4b02      	ldr	r3, [pc, #8]	; (403d90 <sysclk_get_cpu_hz+0x10>)
  403d86:	4798      	blx	r3
  403d88:	4603      	mov	r3, r0
  403d8a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  403d8c:	4618      	mov	r0, r3
  403d8e:	bd80      	pop	{r7, pc}
  403d90:	00403d65 	.word	0x00403d65

00403d94 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  403d94:	b590      	push	{r4, r7, lr}
  403d96:	b083      	sub	sp, #12
  403d98:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  403d9a:	4811      	ldr	r0, [pc, #68]	; (403de0 <sysclk_init+0x4c>)
  403d9c:	4b11      	ldr	r3, [pc, #68]	; (403de4 <sysclk_init+0x50>)
  403d9e:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  403da0:	2006      	movs	r0, #6
  403da2:	4b11      	ldr	r3, [pc, #68]	; (403de8 <sysclk_init+0x54>)
  403da4:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  403da6:	1d38      	adds	r0, r7, #4
  403da8:	2314      	movs	r3, #20
  403daa:	2201      	movs	r2, #1
  403dac:	2106      	movs	r1, #6
  403dae:	4c0f      	ldr	r4, [pc, #60]	; (403dec <sysclk_init+0x58>)
  403db0:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  403db2:	1d3b      	adds	r3, r7, #4
  403db4:	2100      	movs	r1, #0
  403db6:	4618      	mov	r0, r3
  403db8:	4b0d      	ldr	r3, [pc, #52]	; (403df0 <sysclk_init+0x5c>)
  403dba:	4798      	blx	r3
		pll_wait_for_lock(0);
  403dbc:	2000      	movs	r0, #0
  403dbe:	4b0d      	ldr	r3, [pc, #52]	; (403df4 <sysclk_init+0x60>)
  403dc0:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  403dc2:	2010      	movs	r0, #16
  403dc4:	4b0c      	ldr	r3, [pc, #48]	; (403df8 <sysclk_init+0x64>)
  403dc6:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  403dc8:	4b0c      	ldr	r3, [pc, #48]	; (403dfc <sysclk_init+0x68>)
  403dca:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  403dcc:	4b0c      	ldr	r3, [pc, #48]	; (403e00 <sysclk_init+0x6c>)
  403dce:	4798      	blx	r3
  403dd0:	4603      	mov	r3, r0
  403dd2:	4618      	mov	r0, r3
  403dd4:	4b03      	ldr	r3, [pc, #12]	; (403de4 <sysclk_init+0x50>)
  403dd6:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  403dd8:	bf00      	nop
  403dda:	370c      	adds	r7, #12
  403ddc:	46bd      	mov	sp, r7
  403dde:	bd90      	pop	{r4, r7, pc}
  403de0:	07270e00 	.word	0x07270e00
  403de4:	00404ca5 	.word	0x00404ca5
  403de8:	00403d09 	.word	0x00403d09
  403dec:	00403c45 	.word	0x00403c45
  403df0:	00403c99 	.word	0x00403c99
  403df4:	00403d41 	.word	0x00403d41
  403df8:	0040476d 	.word	0x0040476d
  403dfc:	00404b09 	.word	0x00404b09
  403e00:	00403d81 	.word	0x00403d81

00403e04 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  403e04:	b480      	push	{r7}
  403e06:	b085      	sub	sp, #20
  403e08:	af00      	add	r7, sp, #0
  403e0a:	60f8      	str	r0, [r7, #12]
  403e0c:	60b9      	str	r1, [r7, #8]
  403e0e:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  403e10:	687b      	ldr	r3, [r7, #4]
  403e12:	2b00      	cmp	r3, #0
  403e14:	d003      	beq.n	403e1e <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  403e16:	68fb      	ldr	r3, [r7, #12]
  403e18:	68ba      	ldr	r2, [r7, #8]
  403e1a:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  403e1c:	e002      	b.n	403e24 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  403e1e:	68fb      	ldr	r3, [r7, #12]
  403e20:	68ba      	ldr	r2, [r7, #8]
  403e22:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  403e24:	bf00      	nop
  403e26:	3714      	adds	r7, #20
  403e28:	46bd      	mov	sp, r7
  403e2a:	bc80      	pop	{r7}
  403e2c:	4770      	bx	lr
  403e2e:	bf00      	nop

00403e30 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  403e30:	b480      	push	{r7}
  403e32:	b087      	sub	sp, #28
  403e34:	af00      	add	r7, sp, #0
  403e36:	60f8      	str	r0, [r7, #12]
  403e38:	60b9      	str	r1, [r7, #8]
  403e3a:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  403e3c:	68fb      	ldr	r3, [r7, #12]
  403e3e:	687a      	ldr	r2, [r7, #4]
  403e40:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  403e42:	68bb      	ldr	r3, [r7, #8]
  403e44:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  403e48:	d04a      	beq.n	403ee0 <pio_set_peripheral+0xb0>
  403e4a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  403e4e:	d808      	bhi.n	403e62 <pio_set_peripheral+0x32>
  403e50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  403e54:	d016      	beq.n	403e84 <pio_set_peripheral+0x54>
  403e56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  403e5a:	d02c      	beq.n	403eb6 <pio_set_peripheral+0x86>
  403e5c:	2b00      	cmp	r3, #0
  403e5e:	d069      	beq.n	403f34 <pio_set_peripheral+0x104>
  403e60:	e064      	b.n	403f2c <pio_set_peripheral+0xfc>
  403e62:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  403e66:	d065      	beq.n	403f34 <pio_set_peripheral+0x104>
  403e68:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  403e6c:	d803      	bhi.n	403e76 <pio_set_peripheral+0x46>
  403e6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  403e72:	d04a      	beq.n	403f0a <pio_set_peripheral+0xda>
  403e74:	e05a      	b.n	403f2c <pio_set_peripheral+0xfc>
  403e76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  403e7a:	d05b      	beq.n	403f34 <pio_set_peripheral+0x104>
  403e7c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  403e80:	d058      	beq.n	403f34 <pio_set_peripheral+0x104>
  403e82:	e053      	b.n	403f2c <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403e84:	68fb      	ldr	r3, [r7, #12]
  403e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  403e88:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  403e8a:	68fb      	ldr	r3, [r7, #12]
  403e8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  403e8e:	687b      	ldr	r3, [r7, #4]
  403e90:	43d9      	mvns	r1, r3
  403e92:	697b      	ldr	r3, [r7, #20]
  403e94:	400b      	ands	r3, r1
  403e96:	401a      	ands	r2, r3
  403e98:	68fb      	ldr	r3, [r7, #12]
  403e9a:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403e9c:	68fb      	ldr	r3, [r7, #12]
  403e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  403ea0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  403ea2:	68fb      	ldr	r3, [r7, #12]
  403ea4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  403ea6:	687b      	ldr	r3, [r7, #4]
  403ea8:	43d9      	mvns	r1, r3
  403eaa:	697b      	ldr	r3, [r7, #20]
  403eac:	400b      	ands	r3, r1
  403eae:	401a      	ands	r2, r3
  403eb0:	68fb      	ldr	r3, [r7, #12]
  403eb2:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  403eb4:	e03a      	b.n	403f2c <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403eb6:	68fb      	ldr	r3, [r7, #12]
  403eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  403eba:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  403ebc:	687a      	ldr	r2, [r7, #4]
  403ebe:	697b      	ldr	r3, [r7, #20]
  403ec0:	431a      	orrs	r2, r3
  403ec2:	68fb      	ldr	r3, [r7, #12]
  403ec4:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403ec6:	68fb      	ldr	r3, [r7, #12]
  403ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  403eca:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  403ecc:	68fb      	ldr	r3, [r7, #12]
  403ece:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  403ed0:	687b      	ldr	r3, [r7, #4]
  403ed2:	43d9      	mvns	r1, r3
  403ed4:	697b      	ldr	r3, [r7, #20]
  403ed6:	400b      	ands	r3, r1
  403ed8:	401a      	ands	r2, r3
  403eda:	68fb      	ldr	r3, [r7, #12]
  403edc:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  403ede:	e025      	b.n	403f2c <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403ee0:	68fb      	ldr	r3, [r7, #12]
  403ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  403ee4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  403ee6:	68fb      	ldr	r3, [r7, #12]
  403ee8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  403eea:	687b      	ldr	r3, [r7, #4]
  403eec:	43d9      	mvns	r1, r3
  403eee:	697b      	ldr	r3, [r7, #20]
  403ef0:	400b      	ands	r3, r1
  403ef2:	401a      	ands	r2, r3
  403ef4:	68fb      	ldr	r3, [r7, #12]
  403ef6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403ef8:	68fb      	ldr	r3, [r7, #12]
  403efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  403efc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  403efe:	687a      	ldr	r2, [r7, #4]
  403f00:	697b      	ldr	r3, [r7, #20]
  403f02:	431a      	orrs	r2, r3
  403f04:	68fb      	ldr	r3, [r7, #12]
  403f06:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  403f08:	e010      	b.n	403f2c <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403f0a:	68fb      	ldr	r3, [r7, #12]
  403f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  403f0e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  403f10:	687a      	ldr	r2, [r7, #4]
  403f12:	697b      	ldr	r3, [r7, #20]
  403f14:	431a      	orrs	r2, r3
  403f16:	68fb      	ldr	r3, [r7, #12]
  403f18:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403f1a:	68fb      	ldr	r3, [r7, #12]
  403f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  403f1e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  403f20:	687a      	ldr	r2, [r7, #4]
  403f22:	697b      	ldr	r3, [r7, #20]
  403f24:	431a      	orrs	r2, r3
  403f26:	68fb      	ldr	r3, [r7, #12]
  403f28:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  403f2a:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  403f2c:	68fb      	ldr	r3, [r7, #12]
  403f2e:	687a      	ldr	r2, [r7, #4]
  403f30:	605a      	str	r2, [r3, #4]
  403f32:	e000      	b.n	403f36 <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  403f34:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  403f36:	371c      	adds	r7, #28
  403f38:	46bd      	mov	sp, r7
  403f3a:	bc80      	pop	{r7}
  403f3c:	4770      	bx	lr
  403f3e:	bf00      	nop

00403f40 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  403f40:	b580      	push	{r7, lr}
  403f42:	b084      	sub	sp, #16
  403f44:	af00      	add	r7, sp, #0
  403f46:	60f8      	str	r0, [r7, #12]
  403f48:	60b9      	str	r1, [r7, #8]
  403f4a:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  403f4c:	68b9      	ldr	r1, [r7, #8]
  403f4e:	68f8      	ldr	r0, [r7, #12]
  403f50:	4b19      	ldr	r3, [pc, #100]	; (403fb8 <pio_set_input+0x78>)
  403f52:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  403f54:	687b      	ldr	r3, [r7, #4]
  403f56:	f003 0301 	and.w	r3, r3, #1
  403f5a:	461a      	mov	r2, r3
  403f5c:	68b9      	ldr	r1, [r7, #8]
  403f5e:	68f8      	ldr	r0, [r7, #12]
  403f60:	4b16      	ldr	r3, [pc, #88]	; (403fbc <pio_set_input+0x7c>)
  403f62:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  403f64:	687b      	ldr	r3, [r7, #4]
  403f66:	f003 030a 	and.w	r3, r3, #10
  403f6a:	2b00      	cmp	r3, #0
  403f6c:	d003      	beq.n	403f76 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  403f6e:	68fb      	ldr	r3, [r7, #12]
  403f70:	68ba      	ldr	r2, [r7, #8]
  403f72:	621a      	str	r2, [r3, #32]
  403f74:	e002      	b.n	403f7c <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  403f76:	68fb      	ldr	r3, [r7, #12]
  403f78:	68ba      	ldr	r2, [r7, #8]
  403f7a:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  403f7c:	687b      	ldr	r3, [r7, #4]
  403f7e:	f003 0302 	and.w	r3, r3, #2
  403f82:	2b00      	cmp	r3, #0
  403f84:	d004      	beq.n	403f90 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  403f86:	68fb      	ldr	r3, [r7, #12]
  403f88:	68ba      	ldr	r2, [r7, #8]
  403f8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  403f8e:	e008      	b.n	403fa2 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  403f90:	687b      	ldr	r3, [r7, #4]
  403f92:	f003 0308 	and.w	r3, r3, #8
  403f96:	2b00      	cmp	r3, #0
  403f98:	d003      	beq.n	403fa2 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  403f9a:	68fb      	ldr	r3, [r7, #12]
  403f9c:	68ba      	ldr	r2, [r7, #8]
  403f9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  403fa2:	68fb      	ldr	r3, [r7, #12]
  403fa4:	68ba      	ldr	r2, [r7, #8]
  403fa6:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  403fa8:	68fb      	ldr	r3, [r7, #12]
  403faa:	68ba      	ldr	r2, [r7, #8]
  403fac:	601a      	str	r2, [r3, #0]
}
  403fae:	bf00      	nop
  403fb0:	3710      	adds	r7, #16
  403fb2:	46bd      	mov	sp, r7
  403fb4:	bd80      	pop	{r7, pc}
  403fb6:	bf00      	nop
  403fb8:	004040ad 	.word	0x004040ad
  403fbc:	00403e05 	.word	0x00403e05

00403fc0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  403fc0:	b580      	push	{r7, lr}
  403fc2:	b084      	sub	sp, #16
  403fc4:	af00      	add	r7, sp, #0
  403fc6:	60f8      	str	r0, [r7, #12]
  403fc8:	60b9      	str	r1, [r7, #8]
  403fca:	607a      	str	r2, [r7, #4]
  403fcc:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  403fce:	68b9      	ldr	r1, [r7, #8]
  403fd0:	68f8      	ldr	r0, [r7, #12]
  403fd2:	4b12      	ldr	r3, [pc, #72]	; (40401c <pio_set_output+0x5c>)
  403fd4:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  403fd6:	69ba      	ldr	r2, [r7, #24]
  403fd8:	68b9      	ldr	r1, [r7, #8]
  403fda:	68f8      	ldr	r0, [r7, #12]
  403fdc:	4b10      	ldr	r3, [pc, #64]	; (404020 <pio_set_output+0x60>)
  403fde:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  403fe0:	683b      	ldr	r3, [r7, #0]
  403fe2:	2b00      	cmp	r3, #0
  403fe4:	d003      	beq.n	403fee <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  403fe6:	68fb      	ldr	r3, [r7, #12]
  403fe8:	68ba      	ldr	r2, [r7, #8]
  403fea:	651a      	str	r2, [r3, #80]	; 0x50
  403fec:	e002      	b.n	403ff4 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  403fee:	68fb      	ldr	r3, [r7, #12]
  403ff0:	68ba      	ldr	r2, [r7, #8]
  403ff2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  403ff4:	687b      	ldr	r3, [r7, #4]
  403ff6:	2b00      	cmp	r3, #0
  403ff8:	d003      	beq.n	404002 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  403ffa:	68fb      	ldr	r3, [r7, #12]
  403ffc:	68ba      	ldr	r2, [r7, #8]
  403ffe:	631a      	str	r2, [r3, #48]	; 0x30
  404000:	e002      	b.n	404008 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  404002:	68fb      	ldr	r3, [r7, #12]
  404004:	68ba      	ldr	r2, [r7, #8]
  404006:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  404008:	68fb      	ldr	r3, [r7, #12]
  40400a:	68ba      	ldr	r2, [r7, #8]
  40400c:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  40400e:	68fb      	ldr	r3, [r7, #12]
  404010:	68ba      	ldr	r2, [r7, #8]
  404012:	601a      	str	r2, [r3, #0]
}
  404014:	bf00      	nop
  404016:	3710      	adds	r7, #16
  404018:	46bd      	mov	sp, r7
  40401a:	bd80      	pop	{r7, pc}
  40401c:	004040ad 	.word	0x004040ad
  404020:	00403e05 	.word	0x00403e05

00404024 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  404024:	b480      	push	{r7}
  404026:	b085      	sub	sp, #20
  404028:	af00      	add	r7, sp, #0
  40402a:	60f8      	str	r0, [r7, #12]
  40402c:	60b9      	str	r1, [r7, #8]
  40402e:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  404030:	687b      	ldr	r3, [r7, #4]
  404032:	f003 0310 	and.w	r3, r3, #16
  404036:	2b00      	cmp	r3, #0
  404038:	d020      	beq.n	40407c <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  40403a:	68fb      	ldr	r3, [r7, #12]
  40403c:	68ba      	ldr	r2, [r7, #8]
  40403e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  404042:	687b      	ldr	r3, [r7, #4]
  404044:	f003 0320 	and.w	r3, r3, #32
  404048:	2b00      	cmp	r3, #0
  40404a:	d004      	beq.n	404056 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  40404c:	68fb      	ldr	r3, [r7, #12]
  40404e:	68ba      	ldr	r2, [r7, #8]
  404050:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  404054:	e003      	b.n	40405e <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  404056:	68fb      	ldr	r3, [r7, #12]
  404058:	68ba      	ldr	r2, [r7, #8]
  40405a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  40405e:	687b      	ldr	r3, [r7, #4]
  404060:	f003 0340 	and.w	r3, r3, #64	; 0x40
  404064:	2b00      	cmp	r3, #0
  404066:	d004      	beq.n	404072 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  404068:	68fb      	ldr	r3, [r7, #12]
  40406a:	68ba      	ldr	r2, [r7, #8]
  40406c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  404070:	e008      	b.n	404084 <pio_configure_interrupt+0x60>
		if (ul_attr & PIO_IT_EDGE) {
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  404072:	68fb      	ldr	r3, [r7, #12]
  404074:	68ba      	ldr	r2, [r7, #8]
  404076:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  40407a:	e003      	b.n	404084 <pio_configure_interrupt+0x60>
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  40407c:	68fb      	ldr	r3, [r7, #12]
  40407e:	68ba      	ldr	r2, [r7, #8]
  404080:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	}
}
  404084:	bf00      	nop
  404086:	3714      	adds	r7, #20
  404088:	46bd      	mov	sp, r7
  40408a:	bc80      	pop	{r7}
  40408c:	4770      	bx	lr
  40408e:	bf00      	nop

00404090 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  404090:	b480      	push	{r7}
  404092:	b083      	sub	sp, #12
  404094:	af00      	add	r7, sp, #0
  404096:	6078      	str	r0, [r7, #4]
  404098:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  40409a:	687b      	ldr	r3, [r7, #4]
  40409c:	683a      	ldr	r2, [r7, #0]
  40409e:	641a      	str	r2, [r3, #64]	; 0x40
}
  4040a0:	bf00      	nop
  4040a2:	370c      	adds	r7, #12
  4040a4:	46bd      	mov	sp, r7
  4040a6:	bc80      	pop	{r7}
  4040a8:	4770      	bx	lr
  4040aa:	bf00      	nop

004040ac <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4040ac:	b480      	push	{r7}
  4040ae:	b083      	sub	sp, #12
  4040b0:	af00      	add	r7, sp, #0
  4040b2:	6078      	str	r0, [r7, #4]
  4040b4:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4040b6:	687b      	ldr	r3, [r7, #4]
  4040b8:	683a      	ldr	r2, [r7, #0]
  4040ba:	645a      	str	r2, [r3, #68]	; 0x44
}
  4040bc:	bf00      	nop
  4040be:	370c      	adds	r7, #12
  4040c0:	46bd      	mov	sp, r7
  4040c2:	bc80      	pop	{r7}
  4040c4:	4770      	bx	lr
  4040c6:	bf00      	nop

004040c8 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4040c8:	b480      	push	{r7}
  4040ca:	b083      	sub	sp, #12
  4040cc:	af00      	add	r7, sp, #0
  4040ce:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4040d0:	687b      	ldr	r3, [r7, #4]
  4040d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4040d4:	4618      	mov	r0, r3
  4040d6:	370c      	adds	r7, #12
  4040d8:	46bd      	mov	sp, r7
  4040da:	bc80      	pop	{r7}
  4040dc:	4770      	bx	lr
  4040de:	bf00      	nop

004040e0 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4040e0:	b480      	push	{r7}
  4040e2:	b083      	sub	sp, #12
  4040e4:	af00      	add	r7, sp, #0
  4040e6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4040e8:	687b      	ldr	r3, [r7, #4]
  4040ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4040ec:	4618      	mov	r0, r3
  4040ee:	370c      	adds	r7, #12
  4040f0:	46bd      	mov	sp, r7
  4040f2:	bc80      	pop	{r7}
  4040f4:	4770      	bx	lr
  4040f6:	bf00      	nop

004040f8 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
  4040f8:	b580      	push	{r7, lr}
  4040fa:	b084      	sub	sp, #16
  4040fc:	af00      	add	r7, sp, #0
  4040fe:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  404100:	6878      	ldr	r0, [r7, #4]
  404102:	4b08      	ldr	r3, [pc, #32]	; (404124 <pio_set_pin_high+0x2c>)
  404104:	4798      	blx	r3
  404106:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  404108:	687b      	ldr	r3, [r7, #4]
  40410a:	f003 031f 	and.w	r3, r3, #31
  40410e:	2201      	movs	r2, #1
  404110:	fa02 f303 	lsl.w	r3, r2, r3
  404114:	461a      	mov	r2, r3
  404116:	68fb      	ldr	r3, [r7, #12]
  404118:	631a      	str	r2, [r3, #48]	; 0x30
}
  40411a:	bf00      	nop
  40411c:	3710      	adds	r7, #16
  40411e:	46bd      	mov	sp, r7
  404120:	bd80      	pop	{r7, pc}
  404122:	bf00      	nop
  404124:	00404435 	.word	0x00404435

00404128 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
  404128:	b580      	push	{r7, lr}
  40412a:	b084      	sub	sp, #16
  40412c:	af00      	add	r7, sp, #0
  40412e:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  404130:	6878      	ldr	r0, [r7, #4]
  404132:	4b08      	ldr	r3, [pc, #32]	; (404154 <pio_set_pin_low+0x2c>)
  404134:	4798      	blx	r3
  404136:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  404138:	687b      	ldr	r3, [r7, #4]
  40413a:	f003 031f 	and.w	r3, r3, #31
  40413e:	2201      	movs	r2, #1
  404140:	fa02 f303 	lsl.w	r3, r2, r3
  404144:	461a      	mov	r2, r3
  404146:	68fb      	ldr	r3, [r7, #12]
  404148:	635a      	str	r2, [r3, #52]	; 0x34
}
  40414a:	bf00      	nop
  40414c:	3710      	adds	r7, #16
  40414e:	46bd      	mov	sp, r7
  404150:	bd80      	pop	{r7, pc}
  404152:	bf00      	nop
  404154:	00404435 	.word	0x00404435

00404158 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  404158:	b590      	push	{r4, r7, lr}
  40415a:	b087      	sub	sp, #28
  40415c:	af02      	add	r7, sp, #8
  40415e:	6078      	str	r0, [r7, #4]
  404160:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  404162:	6878      	ldr	r0, [r7, #4]
  404164:	4b63      	ldr	r3, [pc, #396]	; (4042f4 <pio_configure_pin+0x19c>)
  404166:	4798      	blx	r3
  404168:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40416a:	683b      	ldr	r3, [r7, #0]
  40416c:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  404170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  404174:	d067      	beq.n	404246 <pio_configure_pin+0xee>
  404176:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40417a:	d809      	bhi.n	404190 <pio_configure_pin+0x38>
  40417c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  404180:	d02b      	beq.n	4041da <pio_configure_pin+0x82>
  404182:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  404186:	d043      	beq.n	404210 <pio_configure_pin+0xb8>
  404188:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40418c:	d00a      	beq.n	4041a4 <pio_configure_pin+0x4c>
  40418e:	e0a9      	b.n	4042e4 <pio_configure_pin+0x18c>
  404190:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  404194:	d07e      	beq.n	404294 <pio_configure_pin+0x13c>
  404196:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40419a:	d07b      	beq.n	404294 <pio_configure_pin+0x13c>
  40419c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4041a0:	d06c      	beq.n	40427c <pio_configure_pin+0x124>
  4041a2:	e09f      	b.n	4042e4 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4041a4:	687b      	ldr	r3, [r7, #4]
  4041a6:	f003 031f 	and.w	r3, r3, #31
  4041aa:	2201      	movs	r2, #1
  4041ac:	fa02 f303 	lsl.w	r3, r2, r3
  4041b0:	461a      	mov	r2, r3
  4041b2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4041b6:	68f8      	ldr	r0, [r7, #12]
  4041b8:	4b4f      	ldr	r3, [pc, #316]	; (4042f8 <pio_configure_pin+0x1a0>)
  4041ba:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4041bc:	687b      	ldr	r3, [r7, #4]
  4041be:	f003 031f 	and.w	r3, r3, #31
  4041c2:	2201      	movs	r2, #1
  4041c4:	fa02 f303 	lsl.w	r3, r2, r3
  4041c8:	4619      	mov	r1, r3
  4041ca:	683b      	ldr	r3, [r7, #0]
  4041cc:	f003 0301 	and.w	r3, r3, #1
  4041d0:	461a      	mov	r2, r3
  4041d2:	68f8      	ldr	r0, [r7, #12]
  4041d4:	4b49      	ldr	r3, [pc, #292]	; (4042fc <pio_configure_pin+0x1a4>)
  4041d6:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4041d8:	e086      	b.n	4042e8 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4041da:	687b      	ldr	r3, [r7, #4]
  4041dc:	f003 031f 	and.w	r3, r3, #31
  4041e0:	2201      	movs	r2, #1
  4041e2:	fa02 f303 	lsl.w	r3, r2, r3
  4041e6:	461a      	mov	r2, r3
  4041e8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4041ec:	68f8      	ldr	r0, [r7, #12]
  4041ee:	4b42      	ldr	r3, [pc, #264]	; (4042f8 <pio_configure_pin+0x1a0>)
  4041f0:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4041f2:	687b      	ldr	r3, [r7, #4]
  4041f4:	f003 031f 	and.w	r3, r3, #31
  4041f8:	2201      	movs	r2, #1
  4041fa:	fa02 f303 	lsl.w	r3, r2, r3
  4041fe:	4619      	mov	r1, r3
  404200:	683b      	ldr	r3, [r7, #0]
  404202:	f003 0301 	and.w	r3, r3, #1
  404206:	461a      	mov	r2, r3
  404208:	68f8      	ldr	r0, [r7, #12]
  40420a:	4b3c      	ldr	r3, [pc, #240]	; (4042fc <pio_configure_pin+0x1a4>)
  40420c:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40420e:	e06b      	b.n	4042e8 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  404210:	687b      	ldr	r3, [r7, #4]
  404212:	f003 031f 	and.w	r3, r3, #31
  404216:	2201      	movs	r2, #1
  404218:	fa02 f303 	lsl.w	r3, r2, r3
  40421c:	461a      	mov	r2, r3
  40421e:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404222:	68f8      	ldr	r0, [r7, #12]
  404224:	4b34      	ldr	r3, [pc, #208]	; (4042f8 <pio_configure_pin+0x1a0>)
  404226:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  404228:	687b      	ldr	r3, [r7, #4]
  40422a:	f003 031f 	and.w	r3, r3, #31
  40422e:	2201      	movs	r2, #1
  404230:	fa02 f303 	lsl.w	r3, r2, r3
  404234:	4619      	mov	r1, r3
  404236:	683b      	ldr	r3, [r7, #0]
  404238:	f003 0301 	and.w	r3, r3, #1
  40423c:	461a      	mov	r2, r3
  40423e:	68f8      	ldr	r0, [r7, #12]
  404240:	4b2e      	ldr	r3, [pc, #184]	; (4042fc <pio_configure_pin+0x1a4>)
  404242:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  404244:	e050      	b.n	4042e8 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  404246:	687b      	ldr	r3, [r7, #4]
  404248:	f003 031f 	and.w	r3, r3, #31
  40424c:	2201      	movs	r2, #1
  40424e:	fa02 f303 	lsl.w	r3, r2, r3
  404252:	461a      	mov	r2, r3
  404254:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  404258:	68f8      	ldr	r0, [r7, #12]
  40425a:	4b27      	ldr	r3, [pc, #156]	; (4042f8 <pio_configure_pin+0x1a0>)
  40425c:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40425e:	687b      	ldr	r3, [r7, #4]
  404260:	f003 031f 	and.w	r3, r3, #31
  404264:	2201      	movs	r2, #1
  404266:	fa02 f303 	lsl.w	r3, r2, r3
  40426a:	4619      	mov	r1, r3
  40426c:	683b      	ldr	r3, [r7, #0]
  40426e:	f003 0301 	and.w	r3, r3, #1
  404272:	461a      	mov	r2, r3
  404274:	68f8      	ldr	r0, [r7, #12]
  404276:	4b21      	ldr	r3, [pc, #132]	; (4042fc <pio_configure_pin+0x1a4>)
  404278:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40427a:	e035      	b.n	4042e8 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40427c:	687b      	ldr	r3, [r7, #4]
  40427e:	f003 031f 	and.w	r3, r3, #31
  404282:	2201      	movs	r2, #1
  404284:	fa02 f303 	lsl.w	r3, r2, r3
  404288:	683a      	ldr	r2, [r7, #0]
  40428a:	4619      	mov	r1, r3
  40428c:	68f8      	ldr	r0, [r7, #12]
  40428e:	4b1c      	ldr	r3, [pc, #112]	; (404300 <pio_configure_pin+0x1a8>)
  404290:	4798      	blx	r3
		break;
  404292:	e029      	b.n	4042e8 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  404294:	687b      	ldr	r3, [r7, #4]
  404296:	f003 031f 	and.w	r3, r3, #31
  40429a:	2201      	movs	r2, #1
  40429c:	fa02 f303 	lsl.w	r3, r2, r3
  4042a0:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4042a2:	683b      	ldr	r3, [r7, #0]
  4042a4:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4042a8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4042ac:	bf0c      	ite	eq
  4042ae:	2301      	moveq	r3, #1
  4042b0:	2300      	movne	r3, #0
  4042b2:	b2db      	uxtb	r3, r3
  4042b4:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  4042b6:	683b      	ldr	r3, [r7, #0]
  4042b8:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4042bc:	2b00      	cmp	r3, #0
  4042be:	bf14      	ite	ne
  4042c0:	2301      	movne	r3, #1
  4042c2:	2300      	moveq	r3, #0
  4042c4:	b2db      	uxtb	r3, r3
  4042c6:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  4042c8:	683b      	ldr	r3, [r7, #0]
  4042ca:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4042ce:	2b00      	cmp	r3, #0
  4042d0:	bf14      	ite	ne
  4042d2:	2301      	movne	r3, #1
  4042d4:	2300      	moveq	r3, #0
  4042d6:	b2db      	uxtb	r3, r3
  4042d8:	9300      	str	r3, [sp, #0]
  4042da:	4603      	mov	r3, r0
  4042dc:	68f8      	ldr	r0, [r7, #12]
  4042de:	4c09      	ldr	r4, [pc, #36]	; (404304 <pio_configure_pin+0x1ac>)
  4042e0:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4042e2:	e001      	b.n	4042e8 <pio_configure_pin+0x190>

	default:
		return 0;
  4042e4:	2300      	movs	r3, #0
  4042e6:	e000      	b.n	4042ea <pio_configure_pin+0x192>
	}

	return 1;
  4042e8:	2301      	movs	r3, #1
}
  4042ea:	4618      	mov	r0, r3
  4042ec:	3714      	adds	r7, #20
  4042ee:	46bd      	mov	sp, r7
  4042f0:	bd90      	pop	{r4, r7, pc}
  4042f2:	bf00      	nop
  4042f4:	00404435 	.word	0x00404435
  4042f8:	00403e31 	.word	0x00403e31
  4042fc:	00403e05 	.word	0x00403e05
  404300:	00403f41 	.word	0x00403f41
  404304:	00403fc1 	.word	0x00403fc1

00404308 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  404308:	b590      	push	{r4, r7, lr}
  40430a:	b087      	sub	sp, #28
  40430c:	af02      	add	r7, sp, #8
  40430e:	60f8      	str	r0, [r7, #12]
  404310:	60b9      	str	r1, [r7, #8]
  404312:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  404314:	687b      	ldr	r3, [r7, #4]
  404316:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  40431a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40431e:	d043      	beq.n	4043a8 <pio_configure_pin_group+0xa0>
  404320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  404324:	d809      	bhi.n	40433a <pio_configure_pin_group+0x32>
  404326:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40432a:	d01f      	beq.n	40436c <pio_configure_pin_group+0x64>
  40432c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  404330:	d02b      	beq.n	40438a <pio_configure_pin_group+0x82>
  404332:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  404336:	d00a      	beq.n	40434e <pio_configure_pin_group+0x46>
  404338:	e06d      	b.n	404416 <pio_configure_pin_group+0x10e>
  40433a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40433e:	d048      	beq.n	4043d2 <pio_configure_pin_group+0xca>
  404340:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  404344:	d045      	beq.n	4043d2 <pio_configure_pin_group+0xca>
  404346:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40434a:	d03c      	beq.n	4043c6 <pio_configure_pin_group+0xbe>
  40434c:	e063      	b.n	404416 <pio_configure_pin_group+0x10e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40434e:	68ba      	ldr	r2, [r7, #8]
  404350:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404354:	68f8      	ldr	r0, [r7, #12]
  404356:	4b33      	ldr	r3, [pc, #204]	; (404424 <pio_configure_pin_group+0x11c>)
  404358:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  40435a:	687b      	ldr	r3, [r7, #4]
  40435c:	f003 0301 	and.w	r3, r3, #1
  404360:	461a      	mov	r2, r3
  404362:	68b9      	ldr	r1, [r7, #8]
  404364:	68f8      	ldr	r0, [r7, #12]
  404366:	4b30      	ldr	r3, [pc, #192]	; (404428 <pio_configure_pin_group+0x120>)
  404368:	4798      	blx	r3
		break;
  40436a:	e056      	b.n	40441a <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  40436c:	68ba      	ldr	r2, [r7, #8]
  40436e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  404372:	68f8      	ldr	r0, [r7, #12]
  404374:	4b2b      	ldr	r3, [pc, #172]	; (404424 <pio_configure_pin_group+0x11c>)
  404376:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  404378:	687b      	ldr	r3, [r7, #4]
  40437a:	f003 0301 	and.w	r3, r3, #1
  40437e:	461a      	mov	r2, r3
  404380:	68b9      	ldr	r1, [r7, #8]
  404382:	68f8      	ldr	r0, [r7, #12]
  404384:	4b28      	ldr	r3, [pc, #160]	; (404428 <pio_configure_pin_group+0x120>)
  404386:	4798      	blx	r3
		break;
  404388:	e047      	b.n	40441a <pio_configure_pin_group+0x112>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  40438a:	68ba      	ldr	r2, [r7, #8]
  40438c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404390:	68f8      	ldr	r0, [r7, #12]
  404392:	4b24      	ldr	r3, [pc, #144]	; (404424 <pio_configure_pin_group+0x11c>)
  404394:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  404396:	687b      	ldr	r3, [r7, #4]
  404398:	f003 0301 	and.w	r3, r3, #1
  40439c:	461a      	mov	r2, r3
  40439e:	68b9      	ldr	r1, [r7, #8]
  4043a0:	68f8      	ldr	r0, [r7, #12]
  4043a2:	4b21      	ldr	r3, [pc, #132]	; (404428 <pio_configure_pin_group+0x120>)
  4043a4:	4798      	blx	r3
		break;
  4043a6:	e038      	b.n	40441a <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  4043a8:	68ba      	ldr	r2, [r7, #8]
  4043aa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4043ae:	68f8      	ldr	r0, [r7, #12]
  4043b0:	4b1c      	ldr	r3, [pc, #112]	; (404424 <pio_configure_pin_group+0x11c>)
  4043b2:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  4043b4:	687b      	ldr	r3, [r7, #4]
  4043b6:	f003 0301 	and.w	r3, r3, #1
  4043ba:	461a      	mov	r2, r3
  4043bc:	68b9      	ldr	r1, [r7, #8]
  4043be:	68f8      	ldr	r0, [r7, #12]
  4043c0:	4b19      	ldr	r3, [pc, #100]	; (404428 <pio_configure_pin_group+0x120>)
  4043c2:	4798      	blx	r3
		break;
  4043c4:	e029      	b.n	40441a <pio_configure_pin_group+0x112>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  4043c6:	687a      	ldr	r2, [r7, #4]
  4043c8:	68b9      	ldr	r1, [r7, #8]
  4043ca:	68f8      	ldr	r0, [r7, #12]
  4043cc:	4b17      	ldr	r3, [pc, #92]	; (40442c <pio_configure_pin_group+0x124>)
  4043ce:	4798      	blx	r3
		break;
  4043d0:	e023      	b.n	40441a <pio_configure_pin_group+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4043d2:	687b      	ldr	r3, [r7, #4]
  4043d4:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  4043d8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4043dc:	bf0c      	ite	eq
  4043de:	2301      	moveq	r3, #1
  4043e0:	2300      	movne	r3, #0
  4043e2:	b2db      	uxtb	r3, r3
  4043e4:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  4043e6:	687b      	ldr	r3, [r7, #4]
  4043e8:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  4043ec:	2b00      	cmp	r3, #0
  4043ee:	bf14      	ite	ne
  4043f0:	2301      	movne	r3, #1
  4043f2:	2300      	moveq	r3, #0
  4043f4:	b2db      	uxtb	r3, r3
  4043f6:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  4043f8:	687b      	ldr	r3, [r7, #4]
  4043fa:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  4043fe:	2b00      	cmp	r3, #0
  404400:	bf14      	ite	ne
  404402:	2301      	movne	r3, #1
  404404:	2300      	moveq	r3, #0
  404406:	b2db      	uxtb	r3, r3
  404408:	9300      	str	r3, [sp, #0]
  40440a:	460b      	mov	r3, r1
  40440c:	68b9      	ldr	r1, [r7, #8]
  40440e:	68f8      	ldr	r0, [r7, #12]
  404410:	4c07      	ldr	r4, [pc, #28]	; (404430 <pio_configure_pin_group+0x128>)
  404412:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  404414:	e001      	b.n	40441a <pio_configure_pin_group+0x112>

	default:
		return 0;
  404416:	2300      	movs	r3, #0
  404418:	e000      	b.n	40441c <pio_configure_pin_group+0x114>
	}

	return 1;
  40441a:	2301      	movs	r3, #1
}
  40441c:	4618      	mov	r0, r3
  40441e:	3714      	adds	r7, #20
  404420:	46bd      	mov	sp, r7
  404422:	bd90      	pop	{r4, r7, pc}
  404424:	00403e31 	.word	0x00403e31
  404428:	00403e05 	.word	0x00403e05
  40442c:	00403f41 	.word	0x00403f41
  404430:	00403fc1 	.word	0x00403fc1

00404434 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  404434:	b480      	push	{r7}
  404436:	b085      	sub	sp, #20
  404438:	af00      	add	r7, sp, #0
  40443a:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40443c:	687b      	ldr	r3, [r7, #4]
  40443e:	095b      	lsrs	r3, r3, #5
  404440:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  404444:	f203 7307 	addw	r3, r3, #1799	; 0x707
  404448:	025b      	lsls	r3, r3, #9
  40444a:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  40444c:	68fb      	ldr	r3, [r7, #12]
}
  40444e:	4618      	mov	r0, r3
  404450:	3714      	adds	r7, #20
  404452:	46bd      	mov	sp, r7
  404454:	bc80      	pop	{r7}
  404456:	4770      	bx	lr

00404458 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  404458:	b480      	push	{r7}
  40445a:	b083      	sub	sp, #12
  40445c:	af00      	add	r7, sp, #0
  40445e:	4603      	mov	r3, r0
  404460:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  404462:	4908      	ldr	r1, [pc, #32]	; (404484 <NVIC_EnableIRQ+0x2c>)
  404464:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404468:	095b      	lsrs	r3, r3, #5
  40446a:	79fa      	ldrb	r2, [r7, #7]
  40446c:	f002 021f 	and.w	r2, r2, #31
  404470:	2001      	movs	r0, #1
  404472:	fa00 f202 	lsl.w	r2, r0, r2
  404476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40447a:	bf00      	nop
  40447c:	370c      	adds	r7, #12
  40447e:	46bd      	mov	sp, r7
  404480:	bc80      	pop	{r7}
  404482:	4770      	bx	lr
  404484:	e000e100 	.word	0xe000e100

00404488 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  404488:	b480      	push	{r7}
  40448a:	b083      	sub	sp, #12
  40448c:	af00      	add	r7, sp, #0
  40448e:	4603      	mov	r3, r0
  404490:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  404492:	4909      	ldr	r1, [pc, #36]	; (4044b8 <NVIC_DisableIRQ+0x30>)
  404494:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404498:	095b      	lsrs	r3, r3, #5
  40449a:	79fa      	ldrb	r2, [r7, #7]
  40449c:	f002 021f 	and.w	r2, r2, #31
  4044a0:	2001      	movs	r0, #1
  4044a2:	fa00 f202 	lsl.w	r2, r0, r2
  4044a6:	3320      	adds	r3, #32
  4044a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4044ac:	bf00      	nop
  4044ae:	370c      	adds	r7, #12
  4044b0:	46bd      	mov	sp, r7
  4044b2:	bc80      	pop	{r7}
  4044b4:	4770      	bx	lr
  4044b6:	bf00      	nop
  4044b8:	e000e100 	.word	0xe000e100

004044bc <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  4044bc:	b480      	push	{r7}
  4044be:	b083      	sub	sp, #12
  4044c0:	af00      	add	r7, sp, #0
  4044c2:	4603      	mov	r3, r0
  4044c4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4044c6:	4909      	ldr	r1, [pc, #36]	; (4044ec <NVIC_ClearPendingIRQ+0x30>)
  4044c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4044cc:	095b      	lsrs	r3, r3, #5
  4044ce:	79fa      	ldrb	r2, [r7, #7]
  4044d0:	f002 021f 	and.w	r2, r2, #31
  4044d4:	2001      	movs	r0, #1
  4044d6:	fa00 f202 	lsl.w	r2, r0, r2
  4044da:	3360      	adds	r3, #96	; 0x60
  4044dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4044e0:	bf00      	nop
  4044e2:	370c      	adds	r7, #12
  4044e4:	46bd      	mov	sp, r7
  4044e6:	bc80      	pop	{r7}
  4044e8:	4770      	bx	lr
  4044ea:	bf00      	nop
  4044ec:	e000e100 	.word	0xe000e100

004044f0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  4044f0:	b480      	push	{r7}
  4044f2:	b083      	sub	sp, #12
  4044f4:	af00      	add	r7, sp, #0
  4044f6:	4603      	mov	r3, r0
  4044f8:	6039      	str	r1, [r7, #0]
  4044fa:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  4044fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404500:	2b00      	cmp	r3, #0
  404502:	da0b      	bge.n	40451c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  404504:	490d      	ldr	r1, [pc, #52]	; (40453c <NVIC_SetPriority+0x4c>)
  404506:	79fb      	ldrb	r3, [r7, #7]
  404508:	f003 030f 	and.w	r3, r3, #15
  40450c:	3b04      	subs	r3, #4
  40450e:	683a      	ldr	r2, [r7, #0]
  404510:	b2d2      	uxtb	r2, r2
  404512:	0112      	lsls	r2, r2, #4
  404514:	b2d2      	uxtb	r2, r2
  404516:	440b      	add	r3, r1
  404518:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
  40451a:	e009      	b.n	404530 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  40451c:	4908      	ldr	r1, [pc, #32]	; (404540 <NVIC_SetPriority+0x50>)
  40451e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404522:	683a      	ldr	r2, [r7, #0]
  404524:	b2d2      	uxtb	r2, r2
  404526:	0112      	lsls	r2, r2, #4
  404528:	b2d2      	uxtb	r2, r2
  40452a:	440b      	add	r3, r1
  40452c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  404530:	bf00      	nop
  404532:	370c      	adds	r7, #12
  404534:	46bd      	mov	sp, r7
  404536:	bc80      	pop	{r7}
  404538:	4770      	bx	lr
  40453a:	bf00      	nop
  40453c:	e000ed00 	.word	0xe000ed00
  404540:	e000e100 	.word	0xe000e100

00404544 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  404544:	b580      	push	{r7, lr}
  404546:	b084      	sub	sp, #16
  404548:	af00      	add	r7, sp, #0
  40454a:	6078      	str	r0, [r7, #4]
  40454c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40454e:	6878      	ldr	r0, [r7, #4]
  404550:	4b2c      	ldr	r3, [pc, #176]	; (404604 <pio_handler_process+0xc0>)
  404552:	4798      	blx	r3
  404554:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  404556:	6878      	ldr	r0, [r7, #4]
  404558:	4b2b      	ldr	r3, [pc, #172]	; (404608 <pio_handler_process+0xc4>)
  40455a:	4798      	blx	r3
  40455c:	4602      	mov	r2, r0
  40455e:	68fb      	ldr	r3, [r7, #12]
  404560:	4013      	ands	r3, r2
  404562:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  404564:	68fb      	ldr	r3, [r7, #12]
  404566:	2b00      	cmp	r3, #0
  404568:	d03c      	beq.n	4045e4 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40456a:	2300      	movs	r3, #0
  40456c:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40456e:	e034      	b.n	4045da <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  404570:	4a26      	ldr	r2, [pc, #152]	; (40460c <pio_handler_process+0xc8>)
  404572:	68bb      	ldr	r3, [r7, #8]
  404574:	011b      	lsls	r3, r3, #4
  404576:	4413      	add	r3, r2
  404578:	681a      	ldr	r2, [r3, #0]
  40457a:	683b      	ldr	r3, [r7, #0]
  40457c:	429a      	cmp	r2, r3
  40457e:	d126      	bne.n	4045ce <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  404580:	4a22      	ldr	r2, [pc, #136]	; (40460c <pio_handler_process+0xc8>)
  404582:	68bb      	ldr	r3, [r7, #8]
  404584:	011b      	lsls	r3, r3, #4
  404586:	4413      	add	r3, r2
  404588:	3304      	adds	r3, #4
  40458a:	681a      	ldr	r2, [r3, #0]
  40458c:	68fb      	ldr	r3, [r7, #12]
  40458e:	4013      	ands	r3, r2
  404590:	2b00      	cmp	r3, #0
  404592:	d01c      	beq.n	4045ce <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  404594:	4a1d      	ldr	r2, [pc, #116]	; (40460c <pio_handler_process+0xc8>)
  404596:	68bb      	ldr	r3, [r7, #8]
  404598:	011b      	lsls	r3, r3, #4
  40459a:	4413      	add	r3, r2
  40459c:	330c      	adds	r3, #12
  40459e:	681b      	ldr	r3, [r3, #0]
  4045a0:	491a      	ldr	r1, [pc, #104]	; (40460c <pio_handler_process+0xc8>)
  4045a2:	68ba      	ldr	r2, [r7, #8]
  4045a4:	0112      	lsls	r2, r2, #4
  4045a6:	440a      	add	r2, r1
  4045a8:	6810      	ldr	r0, [r2, #0]
  4045aa:	4918      	ldr	r1, [pc, #96]	; (40460c <pio_handler_process+0xc8>)
  4045ac:	68ba      	ldr	r2, [r7, #8]
  4045ae:	0112      	lsls	r2, r2, #4
  4045b0:	440a      	add	r2, r1
  4045b2:	3204      	adds	r2, #4
  4045b4:	6812      	ldr	r2, [r2, #0]
  4045b6:	4611      	mov	r1, r2
  4045b8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4045ba:	4a14      	ldr	r2, [pc, #80]	; (40460c <pio_handler_process+0xc8>)
  4045bc:	68bb      	ldr	r3, [r7, #8]
  4045be:	011b      	lsls	r3, r3, #4
  4045c0:	4413      	add	r3, r2
  4045c2:	3304      	adds	r3, #4
  4045c4:	681b      	ldr	r3, [r3, #0]
  4045c6:	43db      	mvns	r3, r3
  4045c8:	68fa      	ldr	r2, [r7, #12]
  4045ca:	4013      	ands	r3, r2
  4045cc:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4045ce:	68bb      	ldr	r3, [r7, #8]
  4045d0:	3301      	adds	r3, #1
  4045d2:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4045d4:	68bb      	ldr	r3, [r7, #8]
  4045d6:	2b06      	cmp	r3, #6
  4045d8:	d803      	bhi.n	4045e2 <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4045da:	68fb      	ldr	r3, [r7, #12]
  4045dc:	2b00      	cmp	r3, #0
  4045de:	d1c7      	bne.n	404570 <pio_handler_process+0x2c>
  4045e0:	e000      	b.n	4045e4 <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  4045e2:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4045e4:	4b0a      	ldr	r3, [pc, #40]	; (404610 <pio_handler_process+0xcc>)
  4045e6:	681b      	ldr	r3, [r3, #0]
  4045e8:	2b00      	cmp	r3, #0
  4045ea:	d007      	beq.n	4045fc <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  4045ec:	4b09      	ldr	r3, [pc, #36]	; (404614 <pio_handler_process+0xd0>)
  4045ee:	681b      	ldr	r3, [r3, #0]
  4045f0:	2b00      	cmp	r3, #0
  4045f2:	d003      	beq.n	4045fc <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  4045f4:	4b07      	ldr	r3, [pc, #28]	; (404614 <pio_handler_process+0xd0>)
  4045f6:	681b      	ldr	r3, [r3, #0]
  4045f8:	6878      	ldr	r0, [r7, #4]
  4045fa:	4798      	blx	r3
		}
	}
#endif
}
  4045fc:	bf00      	nop
  4045fe:	3710      	adds	r7, #16
  404600:	46bd      	mov	sp, r7
  404602:	bd80      	pop	{r7, pc}
  404604:	004040c9 	.word	0x004040c9
  404608:	004040e1 	.word	0x004040e1
  40460c:	20000550 	.word	0x20000550
  404610:	20002728 	.word	0x20002728
  404614:	200005c4 	.word	0x200005c4

00404618 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  404618:	b580      	push	{r7, lr}
  40461a:	b086      	sub	sp, #24
  40461c:	af00      	add	r7, sp, #0
  40461e:	60f8      	str	r0, [r7, #12]
  404620:	60b9      	str	r1, [r7, #8]
  404622:	607a      	str	r2, [r7, #4]
  404624:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  404626:	4b21      	ldr	r3, [pc, #132]	; (4046ac <pio_handler_set+0x94>)
  404628:	681b      	ldr	r3, [r3, #0]
  40462a:	2b06      	cmp	r3, #6
  40462c:	d901      	bls.n	404632 <pio_handler_set+0x1a>
		return 1;
  40462e:	2301      	movs	r3, #1
  404630:	e038      	b.n	4046a4 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  404632:	2300      	movs	r3, #0
  404634:	75fb      	strb	r3, [r7, #23]
  404636:	e011      	b.n	40465c <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  404638:	7dfb      	ldrb	r3, [r7, #23]
  40463a:	011b      	lsls	r3, r3, #4
  40463c:	4a1c      	ldr	r2, [pc, #112]	; (4046b0 <pio_handler_set+0x98>)
  40463e:	4413      	add	r3, r2
  404640:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  404642:	693b      	ldr	r3, [r7, #16]
  404644:	681a      	ldr	r2, [r3, #0]
  404646:	68bb      	ldr	r3, [r7, #8]
  404648:	429a      	cmp	r2, r3
  40464a:	d104      	bne.n	404656 <pio_handler_set+0x3e>
  40464c:	693b      	ldr	r3, [r7, #16]
  40464e:	685a      	ldr	r2, [r3, #4]
  404650:	687b      	ldr	r3, [r7, #4]
  404652:	429a      	cmp	r2, r3
  404654:	d008      	beq.n	404668 <pio_handler_set+0x50>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  404656:	7dfb      	ldrb	r3, [r7, #23]
  404658:	3301      	adds	r3, #1
  40465a:	75fb      	strb	r3, [r7, #23]
  40465c:	7dfa      	ldrb	r2, [r7, #23]
  40465e:	4b13      	ldr	r3, [pc, #76]	; (4046ac <pio_handler_set+0x94>)
  404660:	681b      	ldr	r3, [r3, #0]
  404662:	429a      	cmp	r2, r3
  404664:	d9e8      	bls.n	404638 <pio_handler_set+0x20>
  404666:	e000      	b.n	40466a <pio_handler_set+0x52>
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
			break;
  404668:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40466a:	693b      	ldr	r3, [r7, #16]
  40466c:	68ba      	ldr	r2, [r7, #8]
  40466e:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  404670:	693b      	ldr	r3, [r7, #16]
  404672:	687a      	ldr	r2, [r7, #4]
  404674:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  404676:	693b      	ldr	r3, [r7, #16]
  404678:	683a      	ldr	r2, [r7, #0]
  40467a:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  40467c:	693b      	ldr	r3, [r7, #16]
  40467e:	6a3a      	ldr	r2, [r7, #32]
  404680:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  404682:	7dfa      	ldrb	r2, [r7, #23]
  404684:	4b09      	ldr	r3, [pc, #36]	; (4046ac <pio_handler_set+0x94>)
  404686:	681b      	ldr	r3, [r3, #0]
  404688:	3301      	adds	r3, #1
  40468a:	429a      	cmp	r2, r3
  40468c:	d104      	bne.n	404698 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  40468e:	4b07      	ldr	r3, [pc, #28]	; (4046ac <pio_handler_set+0x94>)
  404690:	681b      	ldr	r3, [r3, #0]
  404692:	3301      	adds	r3, #1
  404694:	4a05      	ldr	r2, [pc, #20]	; (4046ac <pio_handler_set+0x94>)
  404696:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  404698:	683a      	ldr	r2, [r7, #0]
  40469a:	6879      	ldr	r1, [r7, #4]
  40469c:	68f8      	ldr	r0, [r7, #12]
  40469e:	4b05      	ldr	r3, [pc, #20]	; (4046b4 <pio_handler_set+0x9c>)
  4046a0:	4798      	blx	r3

	return 0;
  4046a2:	2300      	movs	r3, #0
}
  4046a4:	4618      	mov	r0, r3
  4046a6:	3718      	adds	r7, #24
  4046a8:	46bd      	mov	sp, r7
  4046aa:	bd80      	pop	{r7, pc}
  4046ac:	200005c0 	.word	0x200005c0
  4046b0:	20000550 	.word	0x20000550
  4046b4:	00404025 	.word	0x00404025

004046b8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4046b8:	b580      	push	{r7, lr}
  4046ba:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4046bc:	210b      	movs	r1, #11
  4046be:	4802      	ldr	r0, [pc, #8]	; (4046c8 <PIOA_Handler+0x10>)
  4046c0:	4b02      	ldr	r3, [pc, #8]	; (4046cc <PIOA_Handler+0x14>)
  4046c2:	4798      	blx	r3
}
  4046c4:	bf00      	nop
  4046c6:	bd80      	pop	{r7, pc}
  4046c8:	400e0e00 	.word	0x400e0e00
  4046cc:	00404545 	.word	0x00404545

004046d0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4046d0:	b580      	push	{r7, lr}
  4046d2:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4046d4:	210c      	movs	r1, #12
  4046d6:	4802      	ldr	r0, [pc, #8]	; (4046e0 <PIOB_Handler+0x10>)
  4046d8:	4b02      	ldr	r3, [pc, #8]	; (4046e4 <PIOB_Handler+0x14>)
  4046da:	4798      	blx	r3
}
  4046dc:	bf00      	nop
  4046de:	bd80      	pop	{r7, pc}
  4046e0:	400e1000 	.word	0x400e1000
  4046e4:	00404545 	.word	0x00404545

004046e8 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  4046e8:	b580      	push	{r7, lr}
  4046ea:	b086      	sub	sp, #24
  4046ec:	af00      	add	r7, sp, #0
  4046ee:	60f8      	str	r0, [r7, #12]
  4046f0:	460b      	mov	r3, r1
  4046f2:	607a      	str	r2, [r7, #4]
  4046f4:	72fb      	strb	r3, [r7, #11]
	uint32_t bitmask = 0;
  4046f6:	2300      	movs	r3, #0
  4046f8:	617b      	str	r3, [r7, #20]

	bitmask = pio_get_interrupt_mask(p_pio);
  4046fa:	68f8      	ldr	r0, [r7, #12]
  4046fc:	4b13      	ldr	r3, [pc, #76]	; (40474c <pio_handler_set_priority+0x64>)
  4046fe:	4798      	blx	r3
  404700:	6178      	str	r0, [r7, #20]
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  404702:	f04f 31ff 	mov.w	r1, #4294967295
  404706:	68f8      	ldr	r0, [r7, #12]
  404708:	4b11      	ldr	r3, [pc, #68]	; (404750 <pio_handler_set_priority+0x68>)
  40470a:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  40470c:	68f8      	ldr	r0, [r7, #12]
  40470e:	4b11      	ldr	r3, [pc, #68]	; (404754 <pio_handler_set_priority+0x6c>)
  404710:	4798      	blx	r3
	NVIC_DisableIRQ(ul_irqn);
  404712:	f997 300b 	ldrsb.w	r3, [r7, #11]
  404716:	4618      	mov	r0, r3
  404718:	4b0f      	ldr	r3, [pc, #60]	; (404758 <pio_handler_set_priority+0x70>)
  40471a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(ul_irqn);
  40471c:	f997 300b 	ldrsb.w	r3, [r7, #11]
  404720:	4618      	mov	r0, r3
  404722:	4b0e      	ldr	r3, [pc, #56]	; (40475c <pio_handler_set_priority+0x74>)
  404724:	4798      	blx	r3
	NVIC_SetPriority(ul_irqn, ul_priority);
  404726:	f997 300b 	ldrsb.w	r3, [r7, #11]
  40472a:	6879      	ldr	r1, [r7, #4]
  40472c:	4618      	mov	r0, r3
  40472e:	4b0c      	ldr	r3, [pc, #48]	; (404760 <pio_handler_set_priority+0x78>)
  404730:	4798      	blx	r3
	NVIC_EnableIRQ(ul_irqn);
  404732:	f997 300b 	ldrsb.w	r3, [r7, #11]
  404736:	4618      	mov	r0, r3
  404738:	4b0a      	ldr	r3, [pc, #40]	; (404764 <pio_handler_set_priority+0x7c>)
  40473a:	4798      	blx	r3
	pio_enable_interrupt(p_pio, bitmask);
  40473c:	6979      	ldr	r1, [r7, #20]
  40473e:	68f8      	ldr	r0, [r7, #12]
  404740:	4b09      	ldr	r3, [pc, #36]	; (404768 <pio_handler_set_priority+0x80>)
  404742:	4798      	blx	r3
}
  404744:	bf00      	nop
  404746:	3718      	adds	r7, #24
  404748:	46bd      	mov	sp, r7
  40474a:	bd80      	pop	{r7, pc}
  40474c:	004040e1 	.word	0x004040e1
  404750:	004040ad 	.word	0x004040ad
  404754:	004040c9 	.word	0x004040c9
  404758:	00404489 	.word	0x00404489
  40475c:	004044bd 	.word	0x004044bd
  404760:	004044f1 	.word	0x004044f1
  404764:	00404459 	.word	0x00404459
  404768:	00404091 	.word	0x00404091

0040476c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  40476c:	b480      	push	{r7}
  40476e:	b085      	sub	sp, #20
  404770:	af00      	add	r7, sp, #0
  404772:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  404774:	491c      	ldr	r1, [pc, #112]	; (4047e8 <pmc_switch_mck_to_pllack+0x7c>)
  404776:	4b1c      	ldr	r3, [pc, #112]	; (4047e8 <pmc_switch_mck_to_pllack+0x7c>)
  404778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40477a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40477e:	687b      	ldr	r3, [r7, #4]
  404780:	4313      	orrs	r3, r2
  404782:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404784:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404788:	60fb      	str	r3, [r7, #12]
  40478a:	e007      	b.n	40479c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40478c:	68fb      	ldr	r3, [r7, #12]
  40478e:	2b00      	cmp	r3, #0
  404790:	d101      	bne.n	404796 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  404792:	2301      	movs	r3, #1
  404794:	e023      	b.n	4047de <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  404796:	68fb      	ldr	r3, [r7, #12]
  404798:	3b01      	subs	r3, #1
  40479a:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40479c:	4b12      	ldr	r3, [pc, #72]	; (4047e8 <pmc_switch_mck_to_pllack+0x7c>)
  40479e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4047a0:	f003 0308 	and.w	r3, r3, #8
  4047a4:	2b00      	cmp	r3, #0
  4047a6:	d0f1      	beq.n	40478c <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4047a8:	4a0f      	ldr	r2, [pc, #60]	; (4047e8 <pmc_switch_mck_to_pllack+0x7c>)
  4047aa:	4b0f      	ldr	r3, [pc, #60]	; (4047e8 <pmc_switch_mck_to_pllack+0x7c>)
  4047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4047ae:	f023 0303 	bic.w	r3, r3, #3
  4047b2:	f043 0302 	orr.w	r3, r3, #2
  4047b6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4047b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4047bc:	60fb      	str	r3, [r7, #12]
  4047be:	e007      	b.n	4047d0 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4047c0:	68fb      	ldr	r3, [r7, #12]
  4047c2:	2b00      	cmp	r3, #0
  4047c4:	d101      	bne.n	4047ca <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4047c6:	2301      	movs	r3, #1
  4047c8:	e009      	b.n	4047de <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  4047ca:	68fb      	ldr	r3, [r7, #12]
  4047cc:	3b01      	subs	r3, #1
  4047ce:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4047d0:	4b05      	ldr	r3, [pc, #20]	; (4047e8 <pmc_switch_mck_to_pllack+0x7c>)
  4047d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4047d4:	f003 0308 	and.w	r3, r3, #8
  4047d8:	2b00      	cmp	r3, #0
  4047da:	d0f1      	beq.n	4047c0 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4047dc:	2300      	movs	r3, #0
}
  4047de:	4618      	mov	r0, r3
  4047e0:	3714      	adds	r7, #20
  4047e2:	46bd      	mov	sp, r7
  4047e4:	bc80      	pop	{r7}
  4047e6:	4770      	bx	lr
  4047e8:	400e0400 	.word	0x400e0400

004047ec <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4047ec:	b480      	push	{r7}
  4047ee:	b083      	sub	sp, #12
  4047f0:	af00      	add	r7, sp, #0
  4047f2:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4047f4:	687b      	ldr	r3, [r7, #4]
  4047f6:	2b01      	cmp	r3, #1
  4047f8:	d107      	bne.n	40480a <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4047fa:	4a08      	ldr	r2, [pc, #32]	; (40481c <pmc_switch_sclk_to_32kxtal+0x30>)
  4047fc:	4b07      	ldr	r3, [pc, #28]	; (40481c <pmc_switch_sclk_to_32kxtal+0x30>)
  4047fe:	689b      	ldr	r3, [r3, #8]
  404800:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  404804:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  404808:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40480a:	4b04      	ldr	r3, [pc, #16]	; (40481c <pmc_switch_sclk_to_32kxtal+0x30>)
  40480c:	4a04      	ldr	r2, [pc, #16]	; (404820 <pmc_switch_sclk_to_32kxtal+0x34>)
  40480e:	601a      	str	r2, [r3, #0]
}
  404810:	bf00      	nop
  404812:	370c      	adds	r7, #12
  404814:	46bd      	mov	sp, r7
  404816:	bc80      	pop	{r7}
  404818:	4770      	bx	lr
  40481a:	bf00      	nop
  40481c:	400e1410 	.word	0x400e1410
  404820:	a5000008 	.word	0xa5000008

00404824 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  404824:	b480      	push	{r7}
  404826:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  404828:	4b09      	ldr	r3, [pc, #36]	; (404850 <pmc_osc_is_ready_32kxtal+0x2c>)
  40482a:	695b      	ldr	r3, [r3, #20]
  40482c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  404830:	2b00      	cmp	r3, #0
  404832:	d007      	beq.n	404844 <pmc_osc_is_ready_32kxtal+0x20>
  404834:	4b07      	ldr	r3, [pc, #28]	; (404854 <pmc_osc_is_ready_32kxtal+0x30>)
  404836:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404838:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40483c:	2b00      	cmp	r3, #0
  40483e:	d001      	beq.n	404844 <pmc_osc_is_ready_32kxtal+0x20>
  404840:	2301      	movs	r3, #1
  404842:	e000      	b.n	404846 <pmc_osc_is_ready_32kxtal+0x22>
  404844:	2300      	movs	r3, #0
}
  404846:	4618      	mov	r0, r3
  404848:	46bd      	mov	sp, r7
  40484a:	bc80      	pop	{r7}
  40484c:	4770      	bx	lr
  40484e:	bf00      	nop
  404850:	400e1410 	.word	0x400e1410
  404854:	400e0400 	.word	0x400e0400

00404858 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  404858:	b480      	push	{r7}
  40485a:	b083      	sub	sp, #12
  40485c:	af00      	add	r7, sp, #0
  40485e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  404860:	4a18      	ldr	r2, [pc, #96]	; (4048c4 <pmc_switch_mainck_to_fastrc+0x6c>)
  404862:	4b18      	ldr	r3, [pc, #96]	; (4048c4 <pmc_switch_mainck_to_fastrc+0x6c>)
  404864:	6a1b      	ldr	r3, [r3, #32]
  404866:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40486a:	f043 0308 	orr.w	r3, r3, #8
  40486e:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  404870:	bf00      	nop
  404872:	4b14      	ldr	r3, [pc, #80]	; (4048c4 <pmc_switch_mainck_to_fastrc+0x6c>)
  404874:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40487a:	2b00      	cmp	r3, #0
  40487c:	d0f9      	beq.n	404872 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40487e:	4911      	ldr	r1, [pc, #68]	; (4048c4 <pmc_switch_mainck_to_fastrc+0x6c>)
  404880:	4b10      	ldr	r3, [pc, #64]	; (4048c4 <pmc_switch_mainck_to_fastrc+0x6c>)
  404882:	6a1b      	ldr	r3, [r3, #32]
  404884:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  404888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40488c:	687a      	ldr	r2, [r7, #4]
  40488e:	4313      	orrs	r3, r2
  404890:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  404894:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  404896:	bf00      	nop
  404898:	4b0a      	ldr	r3, [pc, #40]	; (4048c4 <pmc_switch_mainck_to_fastrc+0x6c>)
  40489a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40489c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4048a0:	2b00      	cmp	r3, #0
  4048a2:	d0f9      	beq.n	404898 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4048a4:	4a07      	ldr	r2, [pc, #28]	; (4048c4 <pmc_switch_mainck_to_fastrc+0x6c>)
  4048a6:	4b07      	ldr	r3, [pc, #28]	; (4048c4 <pmc_switch_mainck_to_fastrc+0x6c>)
  4048a8:	6a1b      	ldr	r3, [r3, #32]
  4048aa:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  4048ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4048b2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4048b6:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4048b8:	bf00      	nop
  4048ba:	370c      	adds	r7, #12
  4048bc:	46bd      	mov	sp, r7
  4048be:	bc80      	pop	{r7}
  4048c0:	4770      	bx	lr
  4048c2:	bf00      	nop
  4048c4:	400e0400 	.word	0x400e0400

004048c8 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4048c8:	b480      	push	{r7}
  4048ca:	b083      	sub	sp, #12
  4048cc:	af00      	add	r7, sp, #0
  4048ce:	6078      	str	r0, [r7, #4]
  4048d0:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4048d2:	687b      	ldr	r3, [r7, #4]
  4048d4:	2b00      	cmp	r3, #0
  4048d6:	d008      	beq.n	4048ea <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4048d8:	4916      	ldr	r1, [pc, #88]	; (404934 <pmc_switch_mainck_to_xtal+0x6c>)
  4048da:	4b16      	ldr	r3, [pc, #88]	; (404934 <pmc_switch_mainck_to_xtal+0x6c>)
  4048dc:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4048de:	4a16      	ldr	r2, [pc, #88]	; (404938 <pmc_switch_mainck_to_xtal+0x70>)
  4048e0:	401a      	ands	r2, r3
  4048e2:	4b16      	ldr	r3, [pc, #88]	; (40493c <pmc_switch_mainck_to_xtal+0x74>)
  4048e4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4048e6:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4048e8:	e01e      	b.n	404928 <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4048ea:	4912      	ldr	r1, [pc, #72]	; (404934 <pmc_switch_mainck_to_xtal+0x6c>)
  4048ec:	4b11      	ldr	r3, [pc, #68]	; (404934 <pmc_switch_mainck_to_xtal+0x6c>)
  4048ee:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4048f0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4048f4:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4048f8:	683a      	ldr	r2, [r7, #0]
  4048fa:	0212      	lsls	r2, r2, #8
  4048fc:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4048fe:	4313      	orrs	r3, r2
  404900:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  404904:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  404908:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40490a:	bf00      	nop
  40490c:	4b09      	ldr	r3, [pc, #36]	; (404934 <pmc_switch_mainck_to_xtal+0x6c>)
  40490e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404910:	f003 0301 	and.w	r3, r3, #1
  404914:	2b00      	cmp	r3, #0
  404916:	d0f9      	beq.n	40490c <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  404918:	4a06      	ldr	r2, [pc, #24]	; (404934 <pmc_switch_mainck_to_xtal+0x6c>)
  40491a:	4b06      	ldr	r3, [pc, #24]	; (404934 <pmc_switch_mainck_to_xtal+0x6c>)
  40491c:	6a1b      	ldr	r3, [r3, #32]
  40491e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  404922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  404926:	6213      	str	r3, [r2, #32]
	}
}
  404928:	bf00      	nop
  40492a:	370c      	adds	r7, #12
  40492c:	46bd      	mov	sp, r7
  40492e:	bc80      	pop	{r7}
  404930:	4770      	bx	lr
  404932:	bf00      	nop
  404934:	400e0400 	.word	0x400e0400
  404938:	fec8fffc 	.word	0xfec8fffc
  40493c:	01370002 	.word	0x01370002

00404940 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  404940:	b480      	push	{r7}
  404942:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  404944:	4b03      	ldr	r3, [pc, #12]	; (404954 <pmc_osc_is_ready_mainck+0x14>)
  404946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  40494c:	4618      	mov	r0, r3
  40494e:	46bd      	mov	sp, r7
  404950:	bc80      	pop	{r7}
  404952:	4770      	bx	lr
  404954:	400e0400 	.word	0x400e0400

00404958 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  404958:	b480      	push	{r7}
  40495a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40495c:	4b03      	ldr	r3, [pc, #12]	; (40496c <pmc_disable_pllack+0x14>)
  40495e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  404962:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  404964:	bf00      	nop
  404966:	46bd      	mov	sp, r7
  404968:	bc80      	pop	{r7}
  40496a:	4770      	bx	lr
  40496c:	400e0400 	.word	0x400e0400

00404970 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  404970:	b480      	push	{r7}
  404972:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  404974:	4b03      	ldr	r3, [pc, #12]	; (404984 <pmc_is_locked_pllack+0x14>)
  404976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404978:	f003 0302 	and.w	r3, r3, #2
}
  40497c:	4618      	mov	r0, r3
  40497e:	46bd      	mov	sp, r7
  404980:	bc80      	pop	{r7}
  404982:	4770      	bx	lr
  404984:	400e0400 	.word	0x400e0400

00404988 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  404988:	b480      	push	{r7}
  40498a:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  40498c:	4b03      	ldr	r3, [pc, #12]	; (40499c <pmc_disable_pllbck+0x14>)
  40498e:	2200      	movs	r2, #0
  404990:	62da      	str	r2, [r3, #44]	; 0x2c
}
  404992:	bf00      	nop
  404994:	46bd      	mov	sp, r7
  404996:	bc80      	pop	{r7}
  404998:	4770      	bx	lr
  40499a:	bf00      	nop
  40499c:	400e0400 	.word	0x400e0400

004049a0 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  4049a0:	b480      	push	{r7}
  4049a2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  4049a4:	4b03      	ldr	r3, [pc, #12]	; (4049b4 <pmc_is_locked_pllbck+0x14>)
  4049a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4049a8:	f003 0304 	and.w	r3, r3, #4
}
  4049ac:	4618      	mov	r0, r3
  4049ae:	46bd      	mov	sp, r7
  4049b0:	bc80      	pop	{r7}
  4049b2:	4770      	bx	lr
  4049b4:	400e0400 	.word	0x400e0400

004049b8 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4049b8:	b480      	push	{r7}
  4049ba:	b083      	sub	sp, #12
  4049bc:	af00      	add	r7, sp, #0
  4049be:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  4049c0:	687b      	ldr	r3, [r7, #4]
  4049c2:	2b22      	cmp	r3, #34	; 0x22
  4049c4:	d901      	bls.n	4049ca <pmc_enable_periph_clk+0x12>
		return 1;
  4049c6:	2301      	movs	r3, #1
  4049c8:	e02f      	b.n	404a2a <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4049ca:	687b      	ldr	r3, [r7, #4]
  4049cc:	2b1f      	cmp	r3, #31
  4049ce:	d813      	bhi.n	4049f8 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4049d0:	4b18      	ldr	r3, [pc, #96]	; (404a34 <pmc_enable_periph_clk+0x7c>)
  4049d2:	699a      	ldr	r2, [r3, #24]
  4049d4:	2101      	movs	r1, #1
  4049d6:	687b      	ldr	r3, [r7, #4]
  4049d8:	fa01 f303 	lsl.w	r3, r1, r3
  4049dc:	401a      	ands	r2, r3
  4049de:	2101      	movs	r1, #1
  4049e0:	687b      	ldr	r3, [r7, #4]
  4049e2:	fa01 f303 	lsl.w	r3, r1, r3
  4049e6:	429a      	cmp	r2, r3
  4049e8:	d01e      	beq.n	404a28 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4049ea:	4a12      	ldr	r2, [pc, #72]	; (404a34 <pmc_enable_periph_clk+0x7c>)
  4049ec:	2101      	movs	r1, #1
  4049ee:	687b      	ldr	r3, [r7, #4]
  4049f0:	fa01 f303 	lsl.w	r3, r1, r3
  4049f4:	6113      	str	r3, [r2, #16]
  4049f6:	e017      	b.n	404a28 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4049f8:	687b      	ldr	r3, [r7, #4]
  4049fa:	3b20      	subs	r3, #32
  4049fc:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4049fe:	4b0d      	ldr	r3, [pc, #52]	; (404a34 <pmc_enable_periph_clk+0x7c>)
  404a00:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  404a04:	2101      	movs	r1, #1
  404a06:	687b      	ldr	r3, [r7, #4]
  404a08:	fa01 f303 	lsl.w	r3, r1, r3
  404a0c:	401a      	ands	r2, r3
  404a0e:	2101      	movs	r1, #1
  404a10:	687b      	ldr	r3, [r7, #4]
  404a12:	fa01 f303 	lsl.w	r3, r1, r3
  404a16:	429a      	cmp	r2, r3
  404a18:	d006      	beq.n	404a28 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  404a1a:	4a06      	ldr	r2, [pc, #24]	; (404a34 <pmc_enable_periph_clk+0x7c>)
  404a1c:	2101      	movs	r1, #1
  404a1e:	687b      	ldr	r3, [r7, #4]
  404a20:	fa01 f303 	lsl.w	r3, r1, r3
  404a24:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  404a28:	2300      	movs	r3, #0
}
  404a2a:	4618      	mov	r0, r3
  404a2c:	370c      	adds	r7, #12
  404a2e:	46bd      	mov	sp, r7
  404a30:	bc80      	pop	{r7}
  404a32:	4770      	bx	lr
  404a34:	400e0400 	.word	0x400e0400

00404a38 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  404a38:	b580      	push	{r7, lr}
  404a3a:	b084      	sub	sp, #16
  404a3c:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  404a3e:	4b27      	ldr	r3, [pc, #156]	; (404adc <Reset_Handler+0xa4>)
  404a40:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  404a42:	4b27      	ldr	r3, [pc, #156]	; (404ae0 <Reset_Handler+0xa8>)
  404a44:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  404a46:	68fa      	ldr	r2, [r7, #12]
  404a48:	68bb      	ldr	r3, [r7, #8]
  404a4a:	429a      	cmp	r2, r3
  404a4c:	d90d      	bls.n	404a6a <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  404a4e:	e007      	b.n	404a60 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  404a50:	68bb      	ldr	r3, [r7, #8]
  404a52:	1d1a      	adds	r2, r3, #4
  404a54:	60ba      	str	r2, [r7, #8]
  404a56:	68fa      	ldr	r2, [r7, #12]
  404a58:	1d11      	adds	r1, r2, #4
  404a5a:	60f9      	str	r1, [r7, #12]
  404a5c:	6812      	ldr	r2, [r2, #0]
  404a5e:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  404a60:	68bb      	ldr	r3, [r7, #8]
  404a62:	4a20      	ldr	r2, [pc, #128]	; (404ae4 <Reset_Handler+0xac>)
  404a64:	4293      	cmp	r3, r2
  404a66:	d3f3      	bcc.n	404a50 <Reset_Handler+0x18>
  404a68:	e020      	b.n	404aac <Reset_Handler+0x74>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  404a6a:	68fa      	ldr	r2, [r7, #12]
  404a6c:	68bb      	ldr	r3, [r7, #8]
  404a6e:	429a      	cmp	r2, r3
  404a70:	d21c      	bcs.n	404aac <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  404a72:	4a1c      	ldr	r2, [pc, #112]	; (404ae4 <Reset_Handler+0xac>)
  404a74:	4b1a      	ldr	r3, [pc, #104]	; (404ae0 <Reset_Handler+0xa8>)
  404a76:	1ad3      	subs	r3, r2, r3
  404a78:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  404a7a:	68fa      	ldr	r2, [r7, #12]
  404a7c:	687b      	ldr	r3, [r7, #4]
  404a7e:	4413      	add	r3, r2
  404a80:	3b04      	subs	r3, #4
  404a82:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  404a84:	68ba      	ldr	r2, [r7, #8]
  404a86:	687b      	ldr	r3, [r7, #4]
  404a88:	4413      	add	r3, r2
  404a8a:	3b04      	subs	r3, #4
  404a8c:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  404a8e:	e00a      	b.n	404aa6 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  404a90:	68bb      	ldr	r3, [r7, #8]
  404a92:	1f1a      	subs	r2, r3, #4
  404a94:	60ba      	str	r2, [r7, #8]
  404a96:	68fa      	ldr	r2, [r7, #12]
  404a98:	1f11      	subs	r1, r2, #4
  404a9a:	60f9      	str	r1, [r7, #12]
  404a9c:	6812      	ldr	r2, [r2, #0]
  404a9e:	601a      	str	r2, [r3, #0]
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  404aa0:	687b      	ldr	r3, [r7, #4]
  404aa2:	3b04      	subs	r3, #4
  404aa4:	607b      	str	r3, [r7, #4]
  404aa6:	687b      	ldr	r3, [r7, #4]
  404aa8:	2b00      	cmp	r3, #0
  404aaa:	d1f1      	bne.n	404a90 <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  404aac:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  404aae:	4b0e      	ldr	r3, [pc, #56]	; (404ae8 <Reset_Handler+0xb0>)
  404ab0:	60bb      	str	r3, [r7, #8]
  404ab2:	e004      	b.n	404abe <Reset_Handler+0x86>
		*pDest++ = 0;
  404ab4:	68bb      	ldr	r3, [r7, #8]
  404ab6:	1d1a      	adds	r2, r3, #4
  404ab8:	60ba      	str	r2, [r7, #8]
  404aba:	2200      	movs	r2, #0
  404abc:	601a      	str	r2, [r3, #0]
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  404abe:	68bb      	ldr	r3, [r7, #8]
  404ac0:	4a0a      	ldr	r2, [pc, #40]	; (404aec <Reset_Handler+0xb4>)
  404ac2:	4293      	cmp	r3, r2
  404ac4:	d3f6      	bcc.n	404ab4 <Reset_Handler+0x7c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  404ac6:	4b0a      	ldr	r3, [pc, #40]	; (404af0 <Reset_Handler+0xb8>)
  404ac8:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  404aca:	4a0a      	ldr	r2, [pc, #40]	; (404af4 <Reset_Handler+0xbc>)
  404acc:	68fb      	ldr	r3, [r7, #12]
  404ace:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  404ad0:	4b09      	ldr	r3, [pc, #36]	; (404af8 <Reset_Handler+0xc0>)
  404ad2:	4798      	blx	r3

	/* Branch to main function */
	main();
  404ad4:	4b09      	ldr	r3, [pc, #36]	; (404afc <Reset_Handler+0xc4>)
  404ad6:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  404ad8:	e7fe      	b.n	404ad8 <Reset_Handler+0xa0>
  404ada:	bf00      	nop
  404adc:	0040b81c 	.word	0x0040b81c
  404ae0:	20000000 	.word	0x20000000
  404ae4:	20000464 	.word	0x20000464
  404ae8:	20000468 	.word	0x20000468
  404aec:	2000272c 	.word	0x2000272c
  404af0:	00400000 	.word	0x00400000
  404af4:	e000ed00 	.word	0xe000ed00
  404af8:	0040b14d 	.word	0x0040b14d
  404afc:	00407395 	.word	0x00407395

00404b00 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  404b00:	b480      	push	{r7}
  404b02:	af00      	add	r7, sp, #0
	while (1) {
	}
  404b04:	e7fe      	b.n	404b04 <Dummy_Handler+0x4>
  404b06:	bf00      	nop

00404b08 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  404b08:	b480      	push	{r7}
  404b0a:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  404b0c:	4b5d      	ldr	r3, [pc, #372]	; (404c84 <SystemCoreClockUpdate+0x17c>)
  404b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404b10:	f003 0303 	and.w	r3, r3, #3
  404b14:	2b03      	cmp	r3, #3
  404b16:	f200 8096 	bhi.w	404c46 <SystemCoreClockUpdate+0x13e>
  404b1a:	a201      	add	r2, pc, #4	; (adr r2, 404b20 <SystemCoreClockUpdate+0x18>)
  404b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404b20:	00404b31 	.word	0x00404b31
  404b24:	00404b51 	.word	0x00404b51
  404b28:	00404b9b 	.word	0x00404b9b
  404b2c:	00404b9b 	.word	0x00404b9b
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  404b30:	4b55      	ldr	r3, [pc, #340]	; (404c88 <SystemCoreClockUpdate+0x180>)
  404b32:	695b      	ldr	r3, [r3, #20]
  404b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
  404b38:	2b00      	cmp	r3, #0
  404b3a:	d004      	beq.n	404b46 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  404b3c:	4b53      	ldr	r3, [pc, #332]	; (404c8c <SystemCoreClockUpdate+0x184>)
  404b3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  404b42:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  404b44:	e080      	b.n	404c48 <SystemCoreClockUpdate+0x140>
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  404b46:	4b51      	ldr	r3, [pc, #324]	; (404c8c <SystemCoreClockUpdate+0x184>)
  404b48:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  404b4c:	601a      	str	r2, [r3, #0]
			}
		break;
  404b4e:	e07b      	b.n	404c48 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  404b50:	4b4c      	ldr	r3, [pc, #304]	; (404c84 <SystemCoreClockUpdate+0x17c>)
  404b52:	6a1b      	ldr	r3, [r3, #32]
  404b54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  404b58:	2b00      	cmp	r3, #0
  404b5a:	d003      	beq.n	404b64 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  404b5c:	4b4b      	ldr	r3, [pc, #300]	; (404c8c <SystemCoreClockUpdate+0x184>)
  404b5e:	4a4c      	ldr	r2, [pc, #304]	; (404c90 <SystemCoreClockUpdate+0x188>)
  404b60:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  404b62:	e071      	b.n	404c48 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
			SystemCoreClock = CHIP_FREQ_XTAL;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  404b64:	4b49      	ldr	r3, [pc, #292]	; (404c8c <SystemCoreClockUpdate+0x184>)
  404b66:	4a4b      	ldr	r2, [pc, #300]	; (404c94 <SystemCoreClockUpdate+0x18c>)
  404b68:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  404b6a:	4b46      	ldr	r3, [pc, #280]	; (404c84 <SystemCoreClockUpdate+0x17c>)
  404b6c:	6a1b      	ldr	r3, [r3, #32]
  404b6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404b72:	2b10      	cmp	r3, #16
  404b74:	d008      	beq.n	404b88 <SystemCoreClockUpdate+0x80>
  404b76:	2b20      	cmp	r3, #32
  404b78:	d00a      	beq.n	404b90 <SystemCoreClockUpdate+0x88>
  404b7a:	2b00      	cmp	r3, #0
  404b7c:	d000      	beq.n	404b80 <SystemCoreClockUpdate+0x78>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
			break;
			
			default:
			break;
  404b7e:	e00b      	b.n	404b98 <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  404b80:	4b42      	ldr	r3, [pc, #264]	; (404c8c <SystemCoreClockUpdate+0x184>)
  404b82:	4a44      	ldr	r2, [pc, #272]	; (404c94 <SystemCoreClockUpdate+0x18c>)
  404b84:	601a      	str	r2, [r3, #0]
			break;
  404b86:	e007      	b.n	404b98 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  404b88:	4b40      	ldr	r3, [pc, #256]	; (404c8c <SystemCoreClockUpdate+0x184>)
  404b8a:	4a43      	ldr	r2, [pc, #268]	; (404c98 <SystemCoreClockUpdate+0x190>)
  404b8c:	601a      	str	r2, [r3, #0]
			break;
  404b8e:	e003      	b.n	404b98 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  404b90:	4b3e      	ldr	r3, [pc, #248]	; (404c8c <SystemCoreClockUpdate+0x184>)
  404b92:	4a3f      	ldr	r2, [pc, #252]	; (404c90 <SystemCoreClockUpdate+0x188>)
  404b94:	601a      	str	r2, [r3, #0]
			break;
  404b96:	bf00      	nop
			
			default:
			break;
			}
		}
		break;
  404b98:	e056      	b.n	404c48 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  404b9a:	4b3a      	ldr	r3, [pc, #232]	; (404c84 <SystemCoreClockUpdate+0x17c>)
  404b9c:	6a1b      	ldr	r3, [r3, #32]
  404b9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  404ba2:	2b00      	cmp	r3, #0
  404ba4:	d003      	beq.n	404bae <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  404ba6:	4b39      	ldr	r3, [pc, #228]	; (404c8c <SystemCoreClockUpdate+0x184>)
  404ba8:	4a39      	ldr	r2, [pc, #228]	; (404c90 <SystemCoreClockUpdate+0x188>)
  404baa:	601a      	str	r2, [r3, #0]
  404bac:	e019      	b.n	404be2 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  404bae:	4b37      	ldr	r3, [pc, #220]	; (404c8c <SystemCoreClockUpdate+0x184>)
  404bb0:	4a38      	ldr	r2, [pc, #224]	; (404c94 <SystemCoreClockUpdate+0x18c>)
  404bb2:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  404bb4:	4b33      	ldr	r3, [pc, #204]	; (404c84 <SystemCoreClockUpdate+0x17c>)
  404bb6:	6a1b      	ldr	r3, [r3, #32]
  404bb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404bbc:	2b10      	cmp	r3, #16
  404bbe:	d008      	beq.n	404bd2 <SystemCoreClockUpdate+0xca>
  404bc0:	2b20      	cmp	r3, #32
  404bc2:	d00a      	beq.n	404bda <SystemCoreClockUpdate+0xd2>
  404bc4:	2b00      	cmp	r3, #0
  404bc6:	d000      	beq.n	404bca <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  404bc8:	e00b      	b.n	404be2 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  404bca:	4b30      	ldr	r3, [pc, #192]	; (404c8c <SystemCoreClockUpdate+0x184>)
  404bcc:	4a31      	ldr	r2, [pc, #196]	; (404c94 <SystemCoreClockUpdate+0x18c>)
  404bce:	601a      	str	r2, [r3, #0]
					break;
  404bd0:	e007      	b.n	404be2 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  404bd2:	4b2e      	ldr	r3, [pc, #184]	; (404c8c <SystemCoreClockUpdate+0x184>)
  404bd4:	4a30      	ldr	r2, [pc, #192]	; (404c98 <SystemCoreClockUpdate+0x190>)
  404bd6:	601a      	str	r2, [r3, #0]
					break;
  404bd8:	e003      	b.n	404be2 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  404bda:	4b2c      	ldr	r3, [pc, #176]	; (404c8c <SystemCoreClockUpdate+0x184>)
  404bdc:	4a2c      	ldr	r2, [pc, #176]	; (404c90 <SystemCoreClockUpdate+0x188>)
  404bde:	601a      	str	r2, [r3, #0]
					break;
  404be0:	bf00      	nop
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  404be2:	4b28      	ldr	r3, [pc, #160]	; (404c84 <SystemCoreClockUpdate+0x17c>)
  404be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404be6:	f003 0303 	and.w	r3, r3, #3
  404bea:	2b02      	cmp	r3, #2
  404bec:	d115      	bne.n	404c1a <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  404bee:	4b25      	ldr	r3, [pc, #148]	; (404c84 <SystemCoreClockUpdate+0x17c>)
  404bf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  404bf2:	4b2a      	ldr	r3, [pc, #168]	; (404c9c <SystemCoreClockUpdate+0x194>)
  404bf4:	4013      	ands	r3, r2
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  404bf6:	0c1b      	lsrs	r3, r3, #16
  404bf8:	3301      	adds	r3, #1
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  404bfa:	4a24      	ldr	r2, [pc, #144]	; (404c8c <SystemCoreClockUpdate+0x184>)
  404bfc:	6812      	ldr	r2, [r2, #0]
  404bfe:	fb02 f303 	mul.w	r3, r2, r3
  404c02:	4a22      	ldr	r2, [pc, #136]	; (404c8c <SystemCoreClockUpdate+0x184>)
  404c04:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  404c06:	4b1f      	ldr	r3, [pc, #124]	; (404c84 <SystemCoreClockUpdate+0x17c>)
  404c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  404c0a:	b2db      	uxtb	r3, r3
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  404c0c:	4a1f      	ldr	r2, [pc, #124]	; (404c8c <SystemCoreClockUpdate+0x184>)
  404c0e:	6812      	ldr	r2, [r2, #0]
  404c10:	fbb2 f3f3 	udiv	r3, r2, r3
  404c14:	4a1d      	ldr	r2, [pc, #116]	; (404c8c <SystemCoreClockUpdate+0x184>)
  404c16:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  404c18:	e016      	b.n	404c48 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  404c1a:	4b1a      	ldr	r3, [pc, #104]	; (404c84 <SystemCoreClockUpdate+0x17c>)
  404c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  404c1e:	4b1f      	ldr	r3, [pc, #124]	; (404c9c <SystemCoreClockUpdate+0x194>)
  404c20:	4013      	ands	r3, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  404c22:	0c1b      	lsrs	r3, r3, #16
  404c24:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  404c26:	4a19      	ldr	r2, [pc, #100]	; (404c8c <SystemCoreClockUpdate+0x184>)
  404c28:	6812      	ldr	r2, [r2, #0]
  404c2a:	fb02 f303 	mul.w	r3, r2, r3
  404c2e:	4a17      	ldr	r2, [pc, #92]	; (404c8c <SystemCoreClockUpdate+0x184>)
  404c30:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  404c32:	4b14      	ldr	r3, [pc, #80]	; (404c84 <SystemCoreClockUpdate+0x17c>)
  404c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  404c36:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  404c38:	4a14      	ldr	r2, [pc, #80]	; (404c8c <SystemCoreClockUpdate+0x184>)
  404c3a:	6812      	ldr	r2, [r2, #0]
  404c3c:	fbb2 f3f3 	udiv	r3, r2, r3
  404c40:	4a12      	ldr	r2, [pc, #72]	; (404c8c <SystemCoreClockUpdate+0x184>)
  404c42:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  404c44:	e000      	b.n	404c48 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  404c46:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  404c48:	4b0e      	ldr	r3, [pc, #56]	; (404c84 <SystemCoreClockUpdate+0x17c>)
  404c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404c4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404c50:	2b70      	cmp	r3, #112	; 0x70
  404c52:	d108      	bne.n	404c66 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  404c54:	4b0d      	ldr	r3, [pc, #52]	; (404c8c <SystemCoreClockUpdate+0x184>)
  404c56:	681b      	ldr	r3, [r3, #0]
  404c58:	4a11      	ldr	r2, [pc, #68]	; (404ca0 <SystemCoreClockUpdate+0x198>)
  404c5a:	fba2 2303 	umull	r2, r3, r2, r3
  404c5e:	085b      	lsrs	r3, r3, #1
  404c60:	4a0a      	ldr	r2, [pc, #40]	; (404c8c <SystemCoreClockUpdate+0x184>)
  404c62:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  404c64:	e00a      	b.n	404c7c <SystemCoreClockUpdate+0x174>

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  404c66:	4b07      	ldr	r3, [pc, #28]	; (404c84 <SystemCoreClockUpdate+0x17c>)
  404c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404c6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404c6e:	091b      	lsrs	r3, r3, #4
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  404c70:	4a06      	ldr	r2, [pc, #24]	; (404c8c <SystemCoreClockUpdate+0x184>)
  404c72:	6812      	ldr	r2, [r2, #0]
  404c74:	fa22 f303 	lsr.w	r3, r2, r3
  404c78:	4a04      	ldr	r2, [pc, #16]	; (404c8c <SystemCoreClockUpdate+0x184>)
  404c7a:	6013      	str	r3, [r2, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  404c7c:	bf00      	nop
  404c7e:	46bd      	mov	sp, r7
  404c80:	bc80      	pop	{r7}
  404c82:	4770      	bx	lr
  404c84:	400e0400 	.word	0x400e0400
  404c88:	400e1410 	.word	0x400e1410
  404c8c:	20000024 	.word	0x20000024
  404c90:	00b71b00 	.word	0x00b71b00
  404c94:	003d0900 	.word	0x003d0900
  404c98:	007a1200 	.word	0x007a1200
  404c9c:	07ff0000 	.word	0x07ff0000
  404ca0:	aaaaaaab 	.word	0xaaaaaaab

00404ca4 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  404ca4:	b480      	push	{r7}
  404ca6:	b083      	sub	sp, #12
  404ca8:	af00      	add	r7, sp, #0
  404caa:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  404cac:	687b      	ldr	r3, [r7, #4]
  404cae:	4a18      	ldr	r2, [pc, #96]	; (404d10 <system_init_flash+0x6c>)
  404cb0:	4293      	cmp	r3, r2
  404cb2:	d804      	bhi.n	404cbe <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  404cb4:	4b17      	ldr	r3, [pc, #92]	; (404d14 <system_init_flash+0x70>)
  404cb6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  404cba:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  404cbc:	e023      	b.n	404d06 <system_init_flash+0x62>
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  404cbe:	687b      	ldr	r3, [r7, #4]
  404cc0:	4a15      	ldr	r2, [pc, #84]	; (404d18 <system_init_flash+0x74>)
  404cc2:	4293      	cmp	r3, r2
  404cc4:	d803      	bhi.n	404cce <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  404cc6:	4b13      	ldr	r3, [pc, #76]	; (404d14 <system_init_flash+0x70>)
  404cc8:	4a14      	ldr	r2, [pc, #80]	; (404d1c <system_init_flash+0x78>)
  404cca:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  404ccc:	e01b      	b.n	404d06 <system_init_flash+0x62>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  404cce:	687b      	ldr	r3, [r7, #4]
  404cd0:	4a13      	ldr	r2, [pc, #76]	; (404d20 <system_init_flash+0x7c>)
  404cd2:	4293      	cmp	r3, r2
  404cd4:	d803      	bhi.n	404cde <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  404cd6:	4b0f      	ldr	r3, [pc, #60]	; (404d14 <system_init_flash+0x70>)
  404cd8:	4a12      	ldr	r2, [pc, #72]	; (404d24 <system_init_flash+0x80>)
  404cda:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  404cdc:	e013      	b.n	404d06 <system_init_flash+0x62>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  404cde:	687b      	ldr	r3, [r7, #4]
  404ce0:	4a11      	ldr	r2, [pc, #68]	; (404d28 <system_init_flash+0x84>)
  404ce2:	4293      	cmp	r3, r2
  404ce4:	d803      	bhi.n	404cee <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  404ce6:	4b0b      	ldr	r3, [pc, #44]	; (404d14 <system_init_flash+0x70>)
  404ce8:	4a10      	ldr	r2, [pc, #64]	; (404d2c <system_init_flash+0x88>)
  404cea:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  404cec:	e00b      	b.n	404d06 <system_init_flash+0x62>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  404cee:	687b      	ldr	r3, [r7, #4]
  404cf0:	4a0f      	ldr	r2, [pc, #60]	; (404d30 <system_init_flash+0x8c>)
  404cf2:	4293      	cmp	r3, r2
  404cf4:	d804      	bhi.n	404d00 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  404cf6:	4b07      	ldr	r3, [pc, #28]	; (404d14 <system_init_flash+0x70>)
  404cf8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  404cfc:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  404cfe:	e002      	b.n	404d06 <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  404d00:	4b04      	ldr	r3, [pc, #16]	; (404d14 <system_init_flash+0x70>)
  404d02:	4a0c      	ldr	r2, [pc, #48]	; (404d34 <system_init_flash+0x90>)
  404d04:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  404d06:	bf00      	nop
  404d08:	370c      	adds	r7, #12
  404d0a:	46bd      	mov	sp, r7
  404d0c:	bc80      	pop	{r7}
  404d0e:	4770      	bx	lr
  404d10:	01312cff 	.word	0x01312cff
  404d14:	400e0a00 	.word	0x400e0a00
  404d18:	026259ff 	.word	0x026259ff
  404d1c:	04000100 	.word	0x04000100
  404d20:	039386ff 	.word	0x039386ff
  404d24:	04000200 	.word	0x04000200
  404d28:	04c4b3ff 	.word	0x04c4b3ff
  404d2c:	04000300 	.word	0x04000300
  404d30:	05f5e0ff 	.word	0x05f5e0ff
  404d34:	04000500 	.word	0x04000500

00404d38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
  404d38:	b480      	push	{r7}
  404d3a:	b083      	sub	sp, #12
  404d3c:	af00      	add	r7, sp, #0
  404d3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  404d40:	687b      	ldr	r3, [r7, #4]
  404d42:	f103 0208 	add.w	r2, r3, #8
  404d46:	687b      	ldr	r3, [r7, #4]
  404d48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  404d4a:	687b      	ldr	r3, [r7, #4]
  404d4c:	f04f 32ff 	mov.w	r2, #4294967295
  404d50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  404d52:	687b      	ldr	r3, [r7, #4]
  404d54:	f103 0208 	add.w	r2, r3, #8
  404d58:	687b      	ldr	r3, [r7, #4]
  404d5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  404d5c:	687b      	ldr	r3, [r7, #4]
  404d5e:	f103 0208 	add.w	r2, r3, #8
  404d62:	687b      	ldr	r3, [r7, #4]
  404d64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  404d66:	687b      	ldr	r3, [r7, #4]
  404d68:	2200      	movs	r2, #0
  404d6a:	601a      	str	r2, [r3, #0]
}
  404d6c:	bf00      	nop
  404d6e:	370c      	adds	r7, #12
  404d70:	46bd      	mov	sp, r7
  404d72:	bc80      	pop	{r7}
  404d74:	4770      	bx	lr
  404d76:	bf00      	nop

00404d78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
  404d78:	b480      	push	{r7}
  404d7a:	b083      	sub	sp, #12
  404d7c:	af00      	add	r7, sp, #0
  404d7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  404d80:	687b      	ldr	r3, [r7, #4]
  404d82:	2200      	movs	r2, #0
  404d84:	611a      	str	r2, [r3, #16]
}
  404d86:	bf00      	nop
  404d88:	370c      	adds	r7, #12
  404d8a:	46bd      	mov	sp, r7
  404d8c:	bc80      	pop	{r7}
  404d8e:	4770      	bx	lr

00404d90 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
  404d90:	b480      	push	{r7}
  404d92:	b085      	sub	sp, #20
  404d94:	af00      	add	r7, sp, #0
  404d96:	6078      	str	r0, [r7, #4]
  404d98:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  404d9a:	687b      	ldr	r3, [r7, #4]
  404d9c:	685b      	ldr	r3, [r3, #4]
  404d9e:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
  404da0:	68fb      	ldr	r3, [r7, #12]
  404da2:	685a      	ldr	r2, [r3, #4]
  404da4:	683b      	ldr	r3, [r7, #0]
  404da6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  404da8:	687b      	ldr	r3, [r7, #4]
  404daa:	685a      	ldr	r2, [r3, #4]
  404dac:	683b      	ldr	r3, [r7, #0]
  404dae:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  404db0:	68fb      	ldr	r3, [r7, #12]
  404db2:	685b      	ldr	r3, [r3, #4]
  404db4:	683a      	ldr	r2, [r7, #0]
  404db6:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  404db8:	68fb      	ldr	r3, [r7, #12]
  404dba:	683a      	ldr	r2, [r7, #0]
  404dbc:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  404dbe:	687b      	ldr	r3, [r7, #4]
  404dc0:	683a      	ldr	r2, [r7, #0]
  404dc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  404dc4:	683b      	ldr	r3, [r7, #0]
  404dc6:	687a      	ldr	r2, [r7, #4]
  404dc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  404dca:	687b      	ldr	r3, [r7, #4]
  404dcc:	681b      	ldr	r3, [r3, #0]
  404dce:	1c5a      	adds	r2, r3, #1
  404dd0:	687b      	ldr	r3, [r7, #4]
  404dd2:	601a      	str	r2, [r3, #0]
}
  404dd4:	bf00      	nop
  404dd6:	3714      	adds	r7, #20
  404dd8:	46bd      	mov	sp, r7
  404dda:	bc80      	pop	{r7}
  404ddc:	4770      	bx	lr
  404dde:	bf00      	nop

00404de0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  404de0:	b480      	push	{r7}
  404de2:	b085      	sub	sp, #20
  404de4:	af00      	add	r7, sp, #0
  404de6:	6078      	str	r0, [r7, #4]
  404de8:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  404dea:	683b      	ldr	r3, [r7, #0]
  404dec:	681b      	ldr	r3, [r3, #0]
  404dee:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  404df0:	68bb      	ldr	r3, [r7, #8]
  404df2:	f1b3 3fff 	cmp.w	r3, #4294967295
  404df6:	d103      	bne.n	404e00 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  404df8:	687b      	ldr	r3, [r7, #4]
  404dfa:	691b      	ldr	r3, [r3, #16]
  404dfc:	60fb      	str	r3, [r7, #12]
  404dfe:	e00c      	b.n	404e1a <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  404e00:	687b      	ldr	r3, [r7, #4]
  404e02:	3308      	adds	r3, #8
  404e04:	60fb      	str	r3, [r7, #12]
  404e06:	e002      	b.n	404e0e <vListInsert+0x2e>
  404e08:	68fb      	ldr	r3, [r7, #12]
  404e0a:	685b      	ldr	r3, [r3, #4]
  404e0c:	60fb      	str	r3, [r7, #12]
  404e0e:	68fb      	ldr	r3, [r7, #12]
  404e10:	685b      	ldr	r3, [r3, #4]
  404e12:	681a      	ldr	r2, [r3, #0]
  404e14:	68bb      	ldr	r3, [r7, #8]
  404e16:	429a      	cmp	r2, r3
  404e18:	d9f6      	bls.n	404e08 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  404e1a:	68fb      	ldr	r3, [r7, #12]
  404e1c:	685a      	ldr	r2, [r3, #4]
  404e1e:	683b      	ldr	r3, [r7, #0]
  404e20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  404e22:	683b      	ldr	r3, [r7, #0]
  404e24:	685b      	ldr	r3, [r3, #4]
  404e26:	683a      	ldr	r2, [r7, #0]
  404e28:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  404e2a:	683b      	ldr	r3, [r7, #0]
  404e2c:	68fa      	ldr	r2, [r7, #12]
  404e2e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  404e30:	68fb      	ldr	r3, [r7, #12]
  404e32:	683a      	ldr	r2, [r7, #0]
  404e34:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  404e36:	683b      	ldr	r3, [r7, #0]
  404e38:	687a      	ldr	r2, [r7, #4]
  404e3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  404e3c:	687b      	ldr	r3, [r7, #4]
  404e3e:	681b      	ldr	r3, [r3, #0]
  404e40:	1c5a      	adds	r2, r3, #1
  404e42:	687b      	ldr	r3, [r7, #4]
  404e44:	601a      	str	r2, [r3, #0]
}
  404e46:	bf00      	nop
  404e48:	3714      	adds	r7, #20
  404e4a:	46bd      	mov	sp, r7
  404e4c:	bc80      	pop	{r7}
  404e4e:	4770      	bx	lr

00404e50 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
  404e50:	b480      	push	{r7}
  404e52:	b085      	sub	sp, #20
  404e54:	af00      	add	r7, sp, #0
  404e56:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  404e58:	687b      	ldr	r3, [r7, #4]
  404e5a:	685b      	ldr	r3, [r3, #4]
  404e5c:	687a      	ldr	r2, [r7, #4]
  404e5e:	6892      	ldr	r2, [r2, #8]
  404e60:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  404e62:	687b      	ldr	r3, [r7, #4]
  404e64:	689b      	ldr	r3, [r3, #8]
  404e66:	687a      	ldr	r2, [r7, #4]
  404e68:	6852      	ldr	r2, [r2, #4]
  404e6a:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  404e6c:	687b      	ldr	r3, [r7, #4]
  404e6e:	691b      	ldr	r3, [r3, #16]
  404e70:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  404e72:	68fb      	ldr	r3, [r7, #12]
  404e74:	685a      	ldr	r2, [r3, #4]
  404e76:	687b      	ldr	r3, [r7, #4]
  404e78:	429a      	cmp	r2, r3
  404e7a:	d103      	bne.n	404e84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  404e7c:	687b      	ldr	r3, [r7, #4]
  404e7e:	689a      	ldr	r2, [r3, #8]
  404e80:	68fb      	ldr	r3, [r7, #12]
  404e82:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  404e84:	687b      	ldr	r3, [r7, #4]
  404e86:	2200      	movs	r2, #0
  404e88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
  404e8a:	68fb      	ldr	r3, [r7, #12]
  404e8c:	681b      	ldr	r3, [r3, #0]
  404e8e:	1e5a      	subs	r2, r3, #1
  404e90:	68fb      	ldr	r3, [r7, #12]
  404e92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  404e94:	68fb      	ldr	r3, [r7, #12]
  404e96:	681b      	ldr	r3, [r3, #0]
}
  404e98:	4618      	mov	r0, r3
  404e9a:	3714      	adds	r7, #20
  404e9c:	46bd      	mov	sp, r7
  404e9e:	bc80      	pop	{r7}
  404ea0:	4770      	bx	lr
  404ea2:	bf00      	nop

00404ea4 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  404ea4:	b480      	push	{r7}
  404ea6:	b083      	sub	sp, #12
  404ea8:	af00      	add	r7, sp, #0
  404eaa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  404eac:	687b      	ldr	r3, [r7, #4]
  404eae:	2b07      	cmp	r3, #7
  404eb0:	d825      	bhi.n	404efe <osc_get_rate+0x5a>
  404eb2:	a201      	add	r2, pc, #4	; (adr r2, 404eb8 <osc_get_rate+0x14>)
  404eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404eb8:	00404ed9 	.word	0x00404ed9
  404ebc:	00404edf 	.word	0x00404edf
  404ec0:	00404ee5 	.word	0x00404ee5
  404ec4:	00404eeb 	.word	0x00404eeb
  404ec8:	00404eef 	.word	0x00404eef
  404ecc:	00404ef3 	.word	0x00404ef3
  404ed0:	00404ef7 	.word	0x00404ef7
  404ed4:	00404efb 	.word	0x00404efb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  404ed8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  404edc:	e010      	b.n	404f00 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  404ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  404ee2:	e00d      	b.n	404f00 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  404ee4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  404ee8:	e00a      	b.n	404f00 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  404eea:	4b08      	ldr	r3, [pc, #32]	; (404f0c <osc_get_rate+0x68>)
  404eec:	e008      	b.n	404f00 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  404eee:	4b08      	ldr	r3, [pc, #32]	; (404f10 <osc_get_rate+0x6c>)
  404ef0:	e006      	b.n	404f00 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  404ef2:	4b08      	ldr	r3, [pc, #32]	; (404f14 <osc_get_rate+0x70>)
  404ef4:	e004      	b.n	404f00 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  404ef6:	4b07      	ldr	r3, [pc, #28]	; (404f14 <osc_get_rate+0x70>)
  404ef8:	e002      	b.n	404f00 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  404efa:	4b06      	ldr	r3, [pc, #24]	; (404f14 <osc_get_rate+0x70>)
  404efc:	e000      	b.n	404f00 <osc_get_rate+0x5c>
	}

	return 0;
  404efe:	2300      	movs	r3, #0
}
  404f00:	4618      	mov	r0, r3
  404f02:	370c      	adds	r7, #12
  404f04:	46bd      	mov	sp, r7
  404f06:	bc80      	pop	{r7}
  404f08:	4770      	bx	lr
  404f0a:	bf00      	nop
  404f0c:	003d0900 	.word	0x003d0900
  404f10:	007a1200 	.word	0x007a1200
  404f14:	00b71b00 	.word	0x00b71b00

00404f18 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  404f18:	b580      	push	{r7, lr}
  404f1a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  404f1c:	2006      	movs	r0, #6
  404f1e:	4b04      	ldr	r3, [pc, #16]	; (404f30 <sysclk_get_main_hz+0x18>)
  404f20:	4798      	blx	r3
  404f22:	4602      	mov	r2, r0
  404f24:	4613      	mov	r3, r2
  404f26:	009b      	lsls	r3, r3, #2
  404f28:	4413      	add	r3, r2
  404f2a:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  404f2c:	4618      	mov	r0, r3
  404f2e:	bd80      	pop	{r7, pc}
  404f30:	00404ea5 	.word	0x00404ea5

00404f34 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  404f34:	b580      	push	{r7, lr}
  404f36:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  404f38:	4b02      	ldr	r3, [pc, #8]	; (404f44 <sysclk_get_cpu_hz+0x10>)
  404f3a:	4798      	blx	r3
  404f3c:	4603      	mov	r3, r0
  404f3e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  404f40:	4618      	mov	r0, r3
  404f42:	bd80      	pop	{r7, pc}
  404f44:	00404f19 	.word	0x00404f19

00404f48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
  404f48:	b480      	push	{r7}
  404f4a:	b085      	sub	sp, #20
  404f4c:	af00      	add	r7, sp, #0
  404f4e:	60f8      	str	r0, [r7, #12]
  404f50:	60b9      	str	r1, [r7, #8]
  404f52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
  404f54:	68fb      	ldr	r3, [r7, #12]
  404f56:	3b04      	subs	r3, #4
  404f58:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  404f5a:	68fb      	ldr	r3, [r7, #12]
  404f5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  404f60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  404f62:	68fb      	ldr	r3, [r7, #12]
  404f64:	3b04      	subs	r3, #4
  404f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
  404f68:	68ba      	ldr	r2, [r7, #8]
  404f6a:	68fb      	ldr	r3, [r7, #12]
  404f6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  404f6e:	68fb      	ldr	r3, [r7, #12]
  404f70:	3b04      	subs	r3, #4
  404f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
  404f74:	68fb      	ldr	r3, [r7, #12]
  404f76:	2200      	movs	r2, #0
  404f78:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  404f7a:	68fb      	ldr	r3, [r7, #12]
  404f7c:	3b14      	subs	r3, #20
  404f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
  404f80:	687a      	ldr	r2, [r7, #4]
  404f82:	68fb      	ldr	r3, [r7, #12]
  404f84:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
  404f86:	68fb      	ldr	r3, [r7, #12]
  404f88:	3b20      	subs	r3, #32
  404f8a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
  404f8c:	68fb      	ldr	r3, [r7, #12]
}
  404f8e:	4618      	mov	r0, r3
  404f90:	3714      	adds	r7, #20
  404f92:	46bd      	mov	sp, r7
  404f94:	bc80      	pop	{r7}
  404f96:	4770      	bx	lr

00404f98 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
  404f98:	4b06      	ldr	r3, [pc, #24]	; (404fb4 <pxCurrentTCBConst2>)
  404f9a:	6819      	ldr	r1, [r3, #0]
  404f9c:	6808      	ldr	r0, [r1, #0]
  404f9e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  404fa2:	f380 8809 	msr	PSP, r0
  404fa6:	f04f 0000 	mov.w	r0, #0
  404faa:	f380 8811 	msr	BASEPRI, r0
  404fae:	f04e 0e0d 	orr.w	lr, lr, #13
  404fb2:	4770      	bx	lr

00404fb4 <pxCurrentTCBConst2>:
  404fb4:	200025d4 	.word	0x200025d4
					"	bx r14							\n"
					"									\n"
					"	.align 2						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
  404fb8:	bf00      	nop
  404fba:	bf00      	nop

00404fbc <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  404fbc:	4804      	ldr	r0, [pc, #16]	; (404fd0 <prvPortStartFirstTask+0x14>)
  404fbe:	6800      	ldr	r0, [r0, #0]
  404fc0:	6800      	ldr	r0, [r0, #0]
  404fc2:	f380 8808 	msr	MSP, r0
  404fc6:	b662      	cpsie	i
  404fc8:	df00      	svc	0
  404fca:	bf00      	nop
					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
					" cpsie i				\n" /* Globally enable interrupts. */
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
  404fcc:	bf00      	nop
  404fce:	0000      	.short	0x0000
  404fd0:	e000ed08 	.word	0xe000ed08

00404fd4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
  404fd4:	b580      	push	{r7, lr}
  404fd6:	af00      	add	r7, sp, #0
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  404fd8:	4a0a      	ldr	r2, [pc, #40]	; (405004 <xPortStartScheduler+0x30>)
  404fda:	4b0a      	ldr	r3, [pc, #40]	; (405004 <xPortStartScheduler+0x30>)
  404fdc:	681b      	ldr	r3, [r3, #0]
  404fde:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  404fe2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  404fe4:	4a07      	ldr	r2, [pc, #28]	; (405004 <xPortStartScheduler+0x30>)
  404fe6:	4b07      	ldr	r3, [pc, #28]	; (405004 <xPortStartScheduler+0x30>)
  404fe8:	681b      	ldr	r3, [r3, #0]
  404fea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
  404fee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  404ff0:	4b05      	ldr	r3, [pc, #20]	; (405008 <xPortStartScheduler+0x34>)
  404ff2:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  404ff4:	4b05      	ldr	r3, [pc, #20]	; (40500c <xPortStartScheduler+0x38>)
  404ff6:	2200      	movs	r2, #0
  404ff8:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  404ffa:	4b05      	ldr	r3, [pc, #20]	; (405010 <xPortStartScheduler+0x3c>)
  404ffc:	4798      	blx	r3

	/* Should not get here! */
	return 0;
  404ffe:	2300      	movs	r3, #0
}
  405000:	4618      	mov	r0, r3
  405002:	bd80      	pop	{r7, pc}
  405004:	e000ed20 	.word	0xe000ed20
  405008:	00405101 	.word	0x00405101
  40500c:	20000028 	.word	0x20000028
  405010:	00404fbd 	.word	0x00404fbd

00405014 <vPortYieldFromISR>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
  405014:	b480      	push	{r7}
  405016:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  405018:	4b03      	ldr	r3, [pc, #12]	; (405028 <vPortYieldFromISR+0x14>)
  40501a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40501e:	601a      	str	r2, [r3, #0]
}
  405020:	bf00      	nop
  405022:	46bd      	mov	sp, r7
  405024:	bc80      	pop	{r7}
  405026:	4770      	bx	lr
  405028:	e000ed04 	.word	0xe000ed04

0040502c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  40502c:	b580      	push	{r7, lr}
  40502e:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
  405030:	4b04      	ldr	r3, [pc, #16]	; (405044 <vPortEnterCritical+0x18>)
  405032:	4798      	blx	r3
	uxCriticalNesting++;
  405034:	4b04      	ldr	r3, [pc, #16]	; (405048 <vPortEnterCritical+0x1c>)
  405036:	681b      	ldr	r3, [r3, #0]
  405038:	3301      	adds	r3, #1
  40503a:	4a03      	ldr	r2, [pc, #12]	; (405048 <vPortEnterCritical+0x1c>)
  40503c:	6013      	str	r3, [r2, #0]
}
  40503e:	bf00      	nop
  405040:	bd80      	pop	{r7, pc}
  405042:	bf00      	nop
  405044:	00405075 	.word	0x00405075
  405048:	20000028 	.word	0x20000028

0040504c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  40504c:	b580      	push	{r7, lr}
  40504e:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
  405050:	4b06      	ldr	r3, [pc, #24]	; (40506c <vPortExitCritical+0x20>)
  405052:	681b      	ldr	r3, [r3, #0]
  405054:	3b01      	subs	r3, #1
  405056:	4a05      	ldr	r2, [pc, #20]	; (40506c <vPortExitCritical+0x20>)
  405058:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  40505a:	4b04      	ldr	r3, [pc, #16]	; (40506c <vPortExitCritical+0x20>)
  40505c:	681b      	ldr	r3, [r3, #0]
  40505e:	2b00      	cmp	r3, #0
  405060:	d102      	bne.n	405068 <vPortExitCritical+0x1c>
	{
		portENABLE_INTERRUPTS();
  405062:	2000      	movs	r0, #0
  405064:	4b02      	ldr	r3, [pc, #8]	; (405070 <vPortExitCritical+0x24>)
  405066:	4798      	blx	r3
	}
}
  405068:	bf00      	nop
  40506a:	bd80      	pop	{r7, pc}
  40506c:	20000028 	.word	0x20000028
  405070:	00405089 	.word	0x00405089

00405074 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
  405074:	f3ef 8011 	mrs	r0, BASEPRI
  405078:	f04f 01a0 	mov.w	r1, #160	; 0xa0
  40507c:	f381 8811 	msr	BASEPRI, r1
  405080:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
  405082:	2300      	movs	r3, #0
}
  405084:	4618      	mov	r0, r3
  405086:	bf00      	nop

00405088 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
  405088:	f380 8811 	msr	BASEPRI, r0
  40508c:	4770      	bx	lr
		:::"r0"														\
	);
	
	/* Just to avoid compiler warnings. */
	( void ) ulNewMaskValue;
}
  40508e:	bf00      	nop

00405090 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
  405090:	f3ef 8009 	mrs	r0, PSP
  405094:	4b0c      	ldr	r3, [pc, #48]	; (4050c8 <pxCurrentTCBConst>)
  405096:	681a      	ldr	r2, [r3, #0]
  405098:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40509c:	6010      	str	r0, [r2, #0]
  40509e:	e92d 4008 	stmdb	sp!, {r3, lr}
  4050a2:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  4050a6:	f380 8811 	msr	BASEPRI, r0
  4050aa:	f001 f829 	bl	406100 <vTaskSwitchContext>
  4050ae:	f04f 0000 	mov.w	r0, #0
  4050b2:	f380 8811 	msr	BASEPRI, r0
  4050b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  4050ba:	6819      	ldr	r1, [r3, #0]
  4050bc:	6808      	ldr	r0, [r1, #0]
  4050be:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4050c2:	f380 8809 	msr	PSP, r0
  4050c6:	4770      	bx	lr

004050c8 <pxCurrentTCBConst>:
  4050c8:	200025d4 	.word	0x200025d4
	"										\n"
	"	.align 2							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
  4050cc:	bf00      	nop
  4050ce:	bf00      	nop

004050d0 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
  4050d0:	b580      	push	{r7, lr}
  4050d2:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4050d4:	4b06      	ldr	r3, [pc, #24]	; (4050f0 <SysTick_Handler+0x20>)
  4050d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4050da:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
  4050dc:	4b05      	ldr	r3, [pc, #20]	; (4050f4 <SysTick_Handler+0x24>)
  4050de:	4798      	blx	r3
	{
		vTaskIncrementTick();
  4050e0:	4b05      	ldr	r3, [pc, #20]	; (4050f8 <SysTick_Handler+0x28>)
  4050e2:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  4050e4:	2000      	movs	r0, #0
  4050e6:	4b05      	ldr	r3, [pc, #20]	; (4050fc <SysTick_Handler+0x2c>)
  4050e8:	4798      	blx	r3
}
  4050ea:	bf00      	nop
  4050ec:	bd80      	pop	{r7, pc}
  4050ee:	bf00      	nop
  4050f0:	e000ed04 	.word	0xe000ed04
  4050f4:	00405075 	.word	0x00405075
  4050f8:	00405fb5 	.word	0x00405fb5
  4050fc:	00405089 	.word	0x00405089

00405100 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
  405100:	b598      	push	{r3, r4, r7, lr}
  405102:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
  405104:	4c07      	ldr	r4, [pc, #28]	; (405124 <vPortSetupTimerInterrupt+0x24>)
  405106:	4b08      	ldr	r3, [pc, #32]	; (405128 <vPortSetupTimerInterrupt+0x28>)
  405108:	4798      	blx	r3
  40510a:	4602      	mov	r2, r0
  40510c:	4b07      	ldr	r3, [pc, #28]	; (40512c <vPortSetupTimerInterrupt+0x2c>)
  40510e:	fba3 2302 	umull	r2, r3, r3, r2
  405112:	099b      	lsrs	r3, r3, #6
  405114:	3b01      	subs	r3, #1
  405116:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
  405118:	4b05      	ldr	r3, [pc, #20]	; (405130 <vPortSetupTimerInterrupt+0x30>)
  40511a:	2207      	movs	r2, #7
  40511c:	601a      	str	r2, [r3, #0]
}
  40511e:	bf00      	nop
  405120:	bd98      	pop	{r3, r4, r7, pc}
  405122:	bf00      	nop
  405124:	e000e014 	.word	0xe000e014
  405128:	00404f35 	.word	0x00404f35
  40512c:	51eb851f 	.word	0x51eb851f
  405130:	e000e010 	.word	0xe000e010

00405134 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
  405134:	b580      	push	{r7, lr}
  405136:	b086      	sub	sp, #24
  405138:	af00      	add	r7, sp, #0
  40513a:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
  40513c:	2300      	movs	r3, #0
  40513e:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
  405140:	4b37      	ldr	r3, [pc, #220]	; (405220 <pvPortMalloc+0xec>)
  405142:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  405144:	4b37      	ldr	r3, [pc, #220]	; (405224 <pvPortMalloc+0xf0>)
  405146:	681b      	ldr	r3, [r3, #0]
  405148:	2b00      	cmp	r3, #0
  40514a:	d101      	bne.n	405150 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
  40514c:	4b36      	ldr	r3, [pc, #216]	; (405228 <pvPortMalloc+0xf4>)
  40514e:	4798      	blx	r3
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
  405150:	687b      	ldr	r3, [r7, #4]
  405152:	2b00      	cmp	r3, #0
  405154:	d00e      	beq.n	405174 <pvPortMalloc+0x40>
		{
			xWantedSize += heapSTRUCT_SIZE;
  405156:	2310      	movs	r3, #16
  405158:	461a      	mov	r2, r3
  40515a:	687b      	ldr	r3, [r7, #4]
  40515c:	4413      	add	r3, r2
  40515e:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  405160:	687b      	ldr	r3, [r7, #4]
  405162:	f003 0307 	and.w	r3, r3, #7
  405166:	2b00      	cmp	r3, #0
  405168:	d004      	beq.n	405174 <pvPortMalloc+0x40>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  40516a:	687b      	ldr	r3, [r7, #4]
  40516c:	f023 0307 	bic.w	r3, r3, #7
  405170:	3308      	adds	r3, #8
  405172:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
  405174:	687b      	ldr	r3, [r7, #4]
  405176:	2b00      	cmp	r3, #0
  405178:	d045      	beq.n	405206 <pvPortMalloc+0xd2>
  40517a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40517e:	687b      	ldr	r3, [r7, #4]
  405180:	4293      	cmp	r3, r2
  405182:	d240      	bcs.n	405206 <pvPortMalloc+0xd2>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
  405184:	4b29      	ldr	r3, [pc, #164]	; (40522c <pvPortMalloc+0xf8>)
  405186:	613b      	str	r3, [r7, #16]
			pxBlock = xStart.pxNextFreeBlock;
  405188:	4b28      	ldr	r3, [pc, #160]	; (40522c <pvPortMalloc+0xf8>)
  40518a:	681b      	ldr	r3, [r3, #0]
  40518c:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  40518e:	e004      	b.n	40519a <pvPortMalloc+0x66>
			{
				pxPreviousBlock = pxBlock;
  405190:	697b      	ldr	r3, [r7, #20]
  405192:	613b      	str	r3, [r7, #16]
				pxBlock = pxBlock->pxNextFreeBlock;
  405194:	697b      	ldr	r3, [r7, #20]
  405196:	681b      	ldr	r3, [r3, #0]
  405198:	617b      	str	r3, [r7, #20]
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  40519a:	697b      	ldr	r3, [r7, #20]
  40519c:	685a      	ldr	r2, [r3, #4]
  40519e:	687b      	ldr	r3, [r7, #4]
  4051a0:	429a      	cmp	r2, r3
  4051a2:	d203      	bcs.n	4051ac <pvPortMalloc+0x78>
  4051a4:	697b      	ldr	r3, [r7, #20]
  4051a6:	681b      	ldr	r3, [r3, #0]
  4051a8:	2b00      	cmp	r3, #0
  4051aa:	d1f1      	bne.n	405190 <pvPortMalloc+0x5c>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
  4051ac:	4b1d      	ldr	r3, [pc, #116]	; (405224 <pvPortMalloc+0xf0>)
  4051ae:	681b      	ldr	r3, [r3, #0]
  4051b0:	697a      	ldr	r2, [r7, #20]
  4051b2:	429a      	cmp	r2, r3
  4051b4:	d027      	beq.n	405206 <pvPortMalloc+0xd2>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  4051b6:	693b      	ldr	r3, [r7, #16]
  4051b8:	681b      	ldr	r3, [r3, #0]
  4051ba:	2210      	movs	r2, #16
  4051bc:	4413      	add	r3, r2
  4051be:	60fb      	str	r3, [r7, #12]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  4051c0:	697b      	ldr	r3, [r7, #20]
  4051c2:	681a      	ldr	r2, [r3, #0]
  4051c4:	693b      	ldr	r3, [r7, #16]
  4051c6:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  4051c8:	697b      	ldr	r3, [r7, #20]
  4051ca:	685a      	ldr	r2, [r3, #4]
  4051cc:	687b      	ldr	r3, [r7, #4]
  4051ce:	1ad3      	subs	r3, r2, r3
  4051d0:	2210      	movs	r2, #16
  4051d2:	0052      	lsls	r2, r2, #1
  4051d4:	4293      	cmp	r3, r2
  4051d6:	d90f      	bls.n	4051f8 <pvPortMalloc+0xc4>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
  4051d8:	697a      	ldr	r2, [r7, #20]
  4051da:	687b      	ldr	r3, [r7, #4]
  4051dc:	4413      	add	r3, r2
  4051de:	60bb      	str	r3, [r7, #8]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  4051e0:	697b      	ldr	r3, [r7, #20]
  4051e2:	685a      	ldr	r2, [r3, #4]
  4051e4:	687b      	ldr	r3, [r7, #4]
  4051e6:	1ad2      	subs	r2, r2, r3
  4051e8:	68bb      	ldr	r3, [r7, #8]
  4051ea:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
  4051ec:	697b      	ldr	r3, [r7, #20]
  4051ee:	687a      	ldr	r2, [r7, #4]
  4051f0:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  4051f2:	68b8      	ldr	r0, [r7, #8]
  4051f4:	4b0e      	ldr	r3, [pc, #56]	; (405230 <pvPortMalloc+0xfc>)
  4051f6:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
  4051f8:	4b0e      	ldr	r3, [pc, #56]	; (405234 <pvPortMalloc+0x100>)
  4051fa:	681a      	ldr	r2, [r3, #0]
  4051fc:	697b      	ldr	r3, [r7, #20]
  4051fe:	685b      	ldr	r3, [r3, #4]
  405200:	1ad3      	subs	r3, r2, r3
  405202:	4a0c      	ldr	r2, [pc, #48]	; (405234 <pvPortMalloc+0x100>)
  405204:	6013      	str	r3, [r2, #0]
			}
		}
	}
	xTaskResumeAll();
  405206:	4b0c      	ldr	r3, [pc, #48]	; (405238 <pvPortMalloc+0x104>)
  405208:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  40520a:	68fb      	ldr	r3, [r7, #12]
  40520c:	2b00      	cmp	r3, #0
  40520e:	d101      	bne.n	405214 <pvPortMalloc+0xe0>
		{
			vApplicationMallocFailedHook();
  405210:	4b0a      	ldr	r3, [pc, #40]	; (40523c <pvPortMalloc+0x108>)
  405212:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
  405214:	68fb      	ldr	r3, [r7, #12]
}
  405216:	4618      	mov	r0, r3
  405218:	3718      	adds	r7, #24
  40521a:	46bd      	mov	sp, r7
  40521c:	bd80      	pop	{r7, pc}
  40521e:	bf00      	nop
  405220:	00405e4d 	.word	0x00405e4d
  405224:	200025d0 	.word	0x200025d0
  405228:	00405295 	.word	0x00405295
  40522c:	200025c8 	.word	0x200025c8
  405230:	00405325 	.word	0x00405325
  405234:	2000002c 	.word	0x2000002c
  405238:	00405e69 	.word	0x00405e69
  40523c:	00407445 	.word	0x00407445

00405240 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  405240:	b580      	push	{r7, lr}
  405242:	b084      	sub	sp, #16
  405244:	af00      	add	r7, sp, #0
  405246:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
  405248:	687b      	ldr	r3, [r7, #4]
  40524a:	60fb      	str	r3, [r7, #12]
xBlockLink *pxLink;

	if( pv != NULL )
  40524c:	687b      	ldr	r3, [r7, #4]
  40524e:	2b00      	cmp	r3, #0
  405250:	d014      	beq.n	40527c <vPortFree+0x3c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
  405252:	2310      	movs	r3, #16
  405254:	425b      	negs	r3, r3
  405256:	68fa      	ldr	r2, [r7, #12]
  405258:	4413      	add	r3, r2
  40525a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
  40525c:	68fb      	ldr	r3, [r7, #12]
  40525e:	60bb      	str	r3, [r7, #8]

		vTaskSuspendAll();
  405260:	4b08      	ldr	r3, [pc, #32]	; (405284 <vPortFree+0x44>)
  405262:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
  405264:	68bb      	ldr	r3, [r7, #8]
  405266:	685a      	ldr	r2, [r3, #4]
  405268:	4b07      	ldr	r3, [pc, #28]	; (405288 <vPortFree+0x48>)
  40526a:	681b      	ldr	r3, [r3, #0]
  40526c:	4413      	add	r3, r2
  40526e:	4a06      	ldr	r2, [pc, #24]	; (405288 <vPortFree+0x48>)
  405270:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
  405272:	68b8      	ldr	r0, [r7, #8]
  405274:	4b05      	ldr	r3, [pc, #20]	; (40528c <vPortFree+0x4c>)
  405276:	4798      	blx	r3
		}
		xTaskResumeAll();
  405278:	4b05      	ldr	r3, [pc, #20]	; (405290 <vPortFree+0x50>)
  40527a:	4798      	blx	r3
	}
}
  40527c:	bf00      	nop
  40527e:	3710      	adds	r7, #16
  405280:	46bd      	mov	sp, r7
  405282:	bd80      	pop	{r7, pc}
  405284:	00405e4d 	.word	0x00405e4d
  405288:	2000002c 	.word	0x2000002c
  40528c:	00405325 	.word	0x00405325
  405290:	00405e69 	.word	0x00405e69

00405294 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
  405294:	b580      	push	{r7, lr}
  405296:	b082      	sub	sp, #8
  405298:	af00      	add	r7, sp, #0
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
  40529a:	4b1d      	ldr	r3, [pc, #116]	; (405310 <prvHeapInit+0x7c>)
  40529c:	4a1d      	ldr	r2, [pc, #116]	; (405314 <prvHeapInit+0x80>)
  40529e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
  4052a0:	4b1b      	ldr	r3, [pc, #108]	; (405310 <prvHeapInit+0x7c>)
  4052a2:	2200      	movs	r2, #0
  4052a4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
  4052a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4052aa:	4b1a      	ldr	r3, [pc, #104]	; (405314 <prvHeapInit+0x80>)
  4052ac:	4413      	add	r3, r2
  4052ae:	607b      	str	r3, [r7, #4]
	pucHeapEnd -= heapSTRUCT_SIZE;
  4052b0:	2310      	movs	r3, #16
  4052b2:	425b      	negs	r3, r3
  4052b4:	687a      	ldr	r2, [r7, #4]
  4052b6:	4413      	add	r3, r2
  4052b8:	607b      	str	r3, [r7, #4]
	pxEnd = ( void * ) pucHeapEnd;
  4052ba:	4a17      	ldr	r2, [pc, #92]	; (405318 <prvHeapInit+0x84>)
  4052bc:	687b      	ldr	r3, [r7, #4]
  4052be:	6013      	str	r3, [r2, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
  4052c0:	4b15      	ldr	r3, [pc, #84]	; (405318 <prvHeapInit+0x84>)
  4052c2:	681b      	ldr	r3, [r3, #0]
  4052c4:	f003 0307 	and.w	r3, r3, #7
  4052c8:	2b00      	cmp	r3, #0
  4052ca:	d003      	beq.n	4052d4 <prvHeapInit+0x40>
  4052cc:	4b13      	ldr	r3, [pc, #76]	; (40531c <prvHeapInit+0x88>)
  4052ce:	4798      	blx	r3
  4052d0:	bf00      	nop
  4052d2:	e7fd      	b.n	4052d0 <prvHeapInit+0x3c>
	pxEnd->xBlockSize = 0;
  4052d4:	4b10      	ldr	r3, [pc, #64]	; (405318 <prvHeapInit+0x84>)
  4052d6:	681b      	ldr	r3, [r3, #0]
  4052d8:	2200      	movs	r2, #0
  4052da:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
  4052dc:	4b0e      	ldr	r3, [pc, #56]	; (405318 <prvHeapInit+0x84>)
  4052de:	681b      	ldr	r3, [r3, #0]
  4052e0:	2200      	movs	r2, #0
  4052e2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
  4052e4:	4b0b      	ldr	r3, [pc, #44]	; (405314 <prvHeapInit+0x80>)
  4052e6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
  4052e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4052ec:	2210      	movs	r2, #16
  4052ee:	1a9a      	subs	r2, r3, r2
  4052f0:	683b      	ldr	r3, [r7, #0]
  4052f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  4052f4:	4b08      	ldr	r3, [pc, #32]	; (405318 <prvHeapInit+0x84>)
  4052f6:	681a      	ldr	r2, [r3, #0]
  4052f8:	683b      	ldr	r3, [r7, #0]
  4052fa:	601a      	str	r2, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
  4052fc:	4b08      	ldr	r3, [pc, #32]	; (405320 <prvHeapInit+0x8c>)
  4052fe:	681b      	ldr	r3, [r3, #0]
  405300:	2210      	movs	r2, #16
  405302:	1a9b      	subs	r3, r3, r2
  405304:	4a06      	ldr	r2, [pc, #24]	; (405320 <prvHeapInit+0x8c>)
  405306:	6013      	str	r3, [r2, #0]
}
  405308:	bf00      	nop
  40530a:	3708      	adds	r7, #8
  40530c:	46bd      	mov	sp, r7
  40530e:	bd80      	pop	{r7, pc}
  405310:	200025c8 	.word	0x200025c8
  405314:	200005c8 	.word	0x200005c8
  405318:	200025d0 	.word	0x200025d0
  40531c:	00405075 	.word	0x00405075
  405320:	2000002c 	.word	0x2000002c

00405324 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
  405324:	b480      	push	{r7}
  405326:	b085      	sub	sp, #20
  405328:	af00      	add	r7, sp, #0
  40532a:	6078      	str	r0, [r7, #4]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  40532c:	4b27      	ldr	r3, [pc, #156]	; (4053cc <prvInsertBlockIntoFreeList+0xa8>)
  40532e:	60fb      	str	r3, [r7, #12]
  405330:	e002      	b.n	405338 <prvInsertBlockIntoFreeList+0x14>
  405332:	68fb      	ldr	r3, [r7, #12]
  405334:	681b      	ldr	r3, [r3, #0]
  405336:	60fb      	str	r3, [r7, #12]
  405338:	68fb      	ldr	r3, [r7, #12]
  40533a:	681a      	ldr	r2, [r3, #0]
  40533c:	687b      	ldr	r3, [r7, #4]
  40533e:	429a      	cmp	r2, r3
  405340:	d3f7      	bcc.n	405332 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
  405342:	68fb      	ldr	r3, [r7, #12]
  405344:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
  405346:	68fb      	ldr	r3, [r7, #12]
  405348:	685b      	ldr	r3, [r3, #4]
  40534a:	68ba      	ldr	r2, [r7, #8]
  40534c:	441a      	add	r2, r3
  40534e:	687b      	ldr	r3, [r7, #4]
  405350:	429a      	cmp	r2, r3
  405352:	d108      	bne.n	405366 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  405354:	68fb      	ldr	r3, [r7, #12]
  405356:	685a      	ldr	r2, [r3, #4]
  405358:	687b      	ldr	r3, [r7, #4]
  40535a:	685b      	ldr	r3, [r3, #4]
  40535c:	441a      	add	r2, r3
  40535e:	68fb      	ldr	r3, [r7, #12]
  405360:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
  405362:	68fb      	ldr	r3, [r7, #12]
  405364:	607b      	str	r3, [r7, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
  405366:	687b      	ldr	r3, [r7, #4]
  405368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
  40536a:	687b      	ldr	r3, [r7, #4]
  40536c:	685b      	ldr	r3, [r3, #4]
  40536e:	68ba      	ldr	r2, [r7, #8]
  405370:	441a      	add	r2, r3
  405372:	68fb      	ldr	r3, [r7, #12]
  405374:	681b      	ldr	r3, [r3, #0]
  405376:	429a      	cmp	r2, r3
  405378:	d118      	bne.n	4053ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  40537a:	68fb      	ldr	r3, [r7, #12]
  40537c:	681a      	ldr	r2, [r3, #0]
  40537e:	4b14      	ldr	r3, [pc, #80]	; (4053d0 <prvInsertBlockIntoFreeList+0xac>)
  405380:	681b      	ldr	r3, [r3, #0]
  405382:	429a      	cmp	r2, r3
  405384:	d00d      	beq.n	4053a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  405386:	687b      	ldr	r3, [r7, #4]
  405388:	685a      	ldr	r2, [r3, #4]
  40538a:	68fb      	ldr	r3, [r7, #12]
  40538c:	681b      	ldr	r3, [r3, #0]
  40538e:	685b      	ldr	r3, [r3, #4]
  405390:	441a      	add	r2, r3
  405392:	687b      	ldr	r3, [r7, #4]
  405394:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  405396:	68fb      	ldr	r3, [r7, #12]
  405398:	681b      	ldr	r3, [r3, #0]
  40539a:	681a      	ldr	r2, [r3, #0]
  40539c:	687b      	ldr	r3, [r7, #4]
  40539e:	601a      	str	r2, [r3, #0]
  4053a0:	e008      	b.n	4053b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  4053a2:	4b0b      	ldr	r3, [pc, #44]	; (4053d0 <prvInsertBlockIntoFreeList+0xac>)
  4053a4:	681a      	ldr	r2, [r3, #0]
  4053a6:	687b      	ldr	r3, [r7, #4]
  4053a8:	601a      	str	r2, [r3, #0]
  4053aa:	e003      	b.n	4053b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
  4053ac:	68fb      	ldr	r3, [r7, #12]
  4053ae:	681a      	ldr	r2, [r3, #0]
  4053b0:	687b      	ldr	r3, [r7, #4]
  4053b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  4053b4:	68fa      	ldr	r2, [r7, #12]
  4053b6:	687b      	ldr	r3, [r7, #4]
  4053b8:	429a      	cmp	r2, r3
  4053ba:	d002      	beq.n	4053c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  4053bc:	68fb      	ldr	r3, [r7, #12]
  4053be:	687a      	ldr	r2, [r7, #4]
  4053c0:	601a      	str	r2, [r3, #0]
	}
}
  4053c2:	bf00      	nop
  4053c4:	3714      	adds	r7, #20
  4053c6:	46bd      	mov	sp, r7
  4053c8:	bc80      	pop	{r7}
  4053ca:	4770      	bx	lr
  4053cc:	200025c8 	.word	0x200025c8
  4053d0:	200025d0 	.word	0x200025d0

004053d4 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
  4053d4:	b580      	push	{r7, lr}
  4053d6:	b082      	sub	sp, #8
  4053d8:	af00      	add	r7, sp, #0
  4053da:	6078      	str	r0, [r7, #4]
  4053dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxQueue );
  4053de:	687b      	ldr	r3, [r7, #4]
  4053e0:	2b00      	cmp	r3, #0
  4053e2:	d103      	bne.n	4053ec <xQueueGenericReset+0x18>
  4053e4:	4b27      	ldr	r3, [pc, #156]	; (405484 <xQueueGenericReset+0xb0>)
  4053e6:	4798      	blx	r3
  4053e8:	bf00      	nop
  4053ea:	e7fd      	b.n	4053e8 <xQueueGenericReset+0x14>

	taskENTER_CRITICAL();
  4053ec:	4b26      	ldr	r3, [pc, #152]	; (405488 <xQueueGenericReset+0xb4>)
  4053ee:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4053f0:	687b      	ldr	r3, [r7, #4]
  4053f2:	681a      	ldr	r2, [r3, #0]
  4053f4:	687b      	ldr	r3, [r7, #4]
  4053f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4053f8:	6879      	ldr	r1, [r7, #4]
  4053fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
  4053fc:	fb01 f303 	mul.w	r3, r1, r3
  405400:	441a      	add	r2, r3
  405402:	687b      	ldr	r3, [r7, #4]
  405404:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  405406:	687b      	ldr	r3, [r7, #4]
  405408:	2200      	movs	r2, #0
  40540a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  40540c:	687b      	ldr	r3, [r7, #4]
  40540e:	681a      	ldr	r2, [r3, #0]
  405410:	687b      	ldr	r3, [r7, #4]
  405412:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
  405414:	687b      	ldr	r3, [r7, #4]
  405416:	681a      	ldr	r2, [r3, #0]
  405418:	687b      	ldr	r3, [r7, #4]
  40541a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40541c:	3b01      	subs	r3, #1
  40541e:	6879      	ldr	r1, [r7, #4]
  405420:	6c09      	ldr	r1, [r1, #64]	; 0x40
  405422:	fb01 f303 	mul.w	r3, r1, r3
  405426:	441a      	add	r2, r3
  405428:	687b      	ldr	r3, [r7, #4]
  40542a:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  40542c:	687b      	ldr	r3, [r7, #4]
  40542e:	f04f 32ff 	mov.w	r2, #4294967295
  405432:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  405434:	687b      	ldr	r3, [r7, #4]
  405436:	f04f 32ff 	mov.w	r2, #4294967295
  40543a:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  40543c:	683b      	ldr	r3, [r7, #0]
  40543e:	2b00      	cmp	r3, #0
  405440:	d10e      	bne.n	405460 <xQueueGenericReset+0x8c>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  405442:	687b      	ldr	r3, [r7, #4]
  405444:	691b      	ldr	r3, [r3, #16]
  405446:	2b00      	cmp	r3, #0
  405448:	d014      	beq.n	405474 <xQueueGenericReset+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40544a:	687b      	ldr	r3, [r7, #4]
  40544c:	3310      	adds	r3, #16
  40544e:	4618      	mov	r0, r3
  405450:	4b0e      	ldr	r3, [pc, #56]	; (40548c <xQueueGenericReset+0xb8>)
  405452:	4798      	blx	r3
  405454:	4603      	mov	r3, r0
  405456:	2b01      	cmp	r3, #1
  405458:	d10c      	bne.n	405474 <xQueueGenericReset+0xa0>
				{
					portYIELD_WITHIN_API();
  40545a:	4b0d      	ldr	r3, [pc, #52]	; (405490 <xQueueGenericReset+0xbc>)
  40545c:	4798      	blx	r3
  40545e:	e009      	b.n	405474 <xQueueGenericReset+0xa0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  405460:	687b      	ldr	r3, [r7, #4]
  405462:	3310      	adds	r3, #16
  405464:	4618      	mov	r0, r3
  405466:	4b0b      	ldr	r3, [pc, #44]	; (405494 <xQueueGenericReset+0xc0>)
  405468:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  40546a:	687b      	ldr	r3, [r7, #4]
  40546c:	3324      	adds	r3, #36	; 0x24
  40546e:	4618      	mov	r0, r3
  405470:	4b08      	ldr	r3, [pc, #32]	; (405494 <xQueueGenericReset+0xc0>)
  405472:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
  405474:	4b08      	ldr	r3, [pc, #32]	; (405498 <xQueueGenericReset+0xc4>)
  405476:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
  405478:	2301      	movs	r3, #1
}
  40547a:	4618      	mov	r0, r3
  40547c:	3708      	adds	r7, #8
  40547e:	46bd      	mov	sp, r7
  405480:	bd80      	pop	{r7, pc}
  405482:	bf00      	nop
  405484:	00405075 	.word	0x00405075
  405488:	0040502d 	.word	0x0040502d
  40548c:	004062e5 	.word	0x004062e5
  405490:	00405015 	.word	0x00405015
  405494:	00404d39 	.word	0x00404d39
  405498:	0040504d 	.word	0x0040504d

0040549c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
  40549c:	b580      	push	{r7, lr}
  40549e:	b088      	sub	sp, #32
  4054a0:	af00      	add	r7, sp, #0
  4054a2:	60f8      	str	r0, [r7, #12]
  4054a4:	60b9      	str	r1, [r7, #8]
  4054a6:	4613      	mov	r3, r2
  4054a8:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
  4054aa:	2300      	movs	r3, #0
  4054ac:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  4054ae:	68fb      	ldr	r3, [r7, #12]
  4054b0:	2b00      	cmp	r3, #0
  4054b2:	d026      	beq.n	405502 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  4054b4:	204c      	movs	r0, #76	; 0x4c
  4054b6:	4b19      	ldr	r3, [pc, #100]	; (40551c <xQueueGenericCreate+0x80>)
  4054b8:	4798      	blx	r3
  4054ba:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
  4054bc:	69bb      	ldr	r3, [r7, #24]
  4054be:	2b00      	cmp	r3, #0
  4054c0:	d01f      	beq.n	405502 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  4054c2:	68fb      	ldr	r3, [r7, #12]
  4054c4:	68ba      	ldr	r2, [r7, #8]
  4054c6:	fb02 f303 	mul.w	r3, r2, r3
  4054ca:	3301      	adds	r3, #1
  4054cc:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  4054ce:	6978      	ldr	r0, [r7, #20]
  4054d0:	4b12      	ldr	r3, [pc, #72]	; (40551c <xQueueGenericCreate+0x80>)
  4054d2:	4798      	blx	r3
  4054d4:	4602      	mov	r2, r0
  4054d6:	69bb      	ldr	r3, [r7, #24]
  4054d8:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
  4054da:	69bb      	ldr	r3, [r7, #24]
  4054dc:	681b      	ldr	r3, [r3, #0]
  4054de:	2b00      	cmp	r3, #0
  4054e0:	d00c      	beq.n	4054fc <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
  4054e2:	69bb      	ldr	r3, [r7, #24]
  4054e4:	68fa      	ldr	r2, [r7, #12]
  4054e6:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  4054e8:	69bb      	ldr	r3, [r7, #24]
  4054ea:	68ba      	ldr	r2, [r7, #8]
  4054ec:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
  4054ee:	2101      	movs	r1, #1
  4054f0:	69b8      	ldr	r0, [r7, #24]
  4054f2:	4b0b      	ldr	r3, [pc, #44]	; (405520 <xQueueGenericCreate+0x84>)
  4054f4:	4798      	blx	r3
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
  4054f6:	69bb      	ldr	r3, [r7, #24]
  4054f8:	61fb      	str	r3, [r7, #28]
  4054fa:	e002      	b.n	405502 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
  4054fc:	69b8      	ldr	r0, [r7, #24]
  4054fe:	4b09      	ldr	r3, [pc, #36]	; (405524 <xQueueGenericCreate+0x88>)
  405500:	4798      	blx	r3
			}
		}
	}

	configASSERT( xReturn );
  405502:	69fb      	ldr	r3, [r7, #28]
  405504:	2b00      	cmp	r3, #0
  405506:	d103      	bne.n	405510 <xQueueGenericCreate+0x74>
  405508:	4b07      	ldr	r3, [pc, #28]	; (405528 <xQueueGenericCreate+0x8c>)
  40550a:	4798      	blx	r3
  40550c:	bf00      	nop
  40550e:	e7fd      	b.n	40550c <xQueueGenericCreate+0x70>

	return xReturn;
  405510:	69fb      	ldr	r3, [r7, #28]
}
  405512:	4618      	mov	r0, r3
  405514:	3720      	adds	r7, #32
  405516:	46bd      	mov	sp, r7
  405518:	bd80      	pop	{r7, pc}
  40551a:	bf00      	nop
  40551c:	00405135 	.word	0x00405135
  405520:	004053d5 	.word	0x004053d5
  405524:	00405241 	.word	0x00405241
  405528:	00405075 	.word	0x00405075

0040552c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  40552c:	b580      	push	{r7, lr}
  40552e:	b088      	sub	sp, #32
  405530:	af00      	add	r7, sp, #0
  405532:	60f8      	str	r0, [r7, #12]
  405534:	60b9      	str	r1, [r7, #8]
  405536:	607a      	str	r2, [r7, #4]
  405538:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  40553a:	2300      	movs	r3, #0
  40553c:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
  40553e:	68fb      	ldr	r3, [r7, #12]
  405540:	2b00      	cmp	r3, #0
  405542:	d103      	bne.n	40554c <xQueueGenericSend+0x20>
  405544:	4b46      	ldr	r3, [pc, #280]	; (405660 <xQueueGenericSend+0x134>)
  405546:	4798      	blx	r3
  405548:	bf00      	nop
  40554a:	e7fd      	b.n	405548 <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  40554c:	68bb      	ldr	r3, [r7, #8]
  40554e:	2b00      	cmp	r3, #0
  405550:	d103      	bne.n	40555a <xQueueGenericSend+0x2e>
  405552:	68fb      	ldr	r3, [r7, #12]
  405554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405556:	2b00      	cmp	r3, #0
  405558:	d101      	bne.n	40555e <xQueueGenericSend+0x32>
  40555a:	2301      	movs	r3, #1
  40555c:	e000      	b.n	405560 <xQueueGenericSend+0x34>
  40555e:	2300      	movs	r3, #0
  405560:	2b00      	cmp	r3, #0
  405562:	d103      	bne.n	40556c <xQueueGenericSend+0x40>
  405564:	4b3e      	ldr	r3, [pc, #248]	; (405660 <xQueueGenericSend+0x134>)
  405566:	4798      	blx	r3
  405568:	bf00      	nop
  40556a:	e7fd      	b.n	405568 <xQueueGenericSend+0x3c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  40556c:	4b3d      	ldr	r3, [pc, #244]	; (405664 <xQueueGenericSend+0x138>)
  40556e:	4798      	blx	r3
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  405570:	68fb      	ldr	r3, [r7, #12]
  405572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  405574:	68fb      	ldr	r3, [r7, #12]
  405576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  405578:	429a      	cmp	r2, r3
  40557a:	d216      	bcs.n	4055aa <xQueueGenericSend+0x7e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40557c:	683a      	ldr	r2, [r7, #0]
  40557e:	68b9      	ldr	r1, [r7, #8]
  405580:	68f8      	ldr	r0, [r7, #12]
  405582:	4b39      	ldr	r3, [pc, #228]	; (405668 <xQueueGenericSend+0x13c>)
  405584:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  405586:	68fb      	ldr	r3, [r7, #12]
  405588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40558a:	2b00      	cmp	r3, #0
  40558c:	d009      	beq.n	4055a2 <xQueueGenericSend+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  40558e:	68fb      	ldr	r3, [r7, #12]
  405590:	3324      	adds	r3, #36	; 0x24
  405592:	4618      	mov	r0, r3
  405594:	4b35      	ldr	r3, [pc, #212]	; (40566c <xQueueGenericSend+0x140>)
  405596:	4798      	blx	r3
  405598:	4603      	mov	r3, r0
  40559a:	2b01      	cmp	r3, #1
  40559c:	d101      	bne.n	4055a2 <xQueueGenericSend+0x76>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  40559e:	4b34      	ldr	r3, [pc, #208]	; (405670 <xQueueGenericSend+0x144>)
  4055a0:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  4055a2:	4b34      	ldr	r3, [pc, #208]	; (405674 <xQueueGenericSend+0x148>)
  4055a4:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  4055a6:	2301      	movs	r3, #1
  4055a8:	e056      	b.n	405658 <xQueueGenericSend+0x12c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  4055aa:	687b      	ldr	r3, [r7, #4]
  4055ac:	2b00      	cmp	r3, #0
  4055ae:	d103      	bne.n	4055b8 <xQueueGenericSend+0x8c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  4055b0:	4b30      	ldr	r3, [pc, #192]	; (405674 <xQueueGenericSend+0x148>)
  4055b2:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  4055b4:	2300      	movs	r3, #0
  4055b6:	e04f      	b.n	405658 <xQueueGenericSend+0x12c>
				}
				else if( xEntryTimeSet == pdFALSE )
  4055b8:	69fb      	ldr	r3, [r7, #28]
  4055ba:	2b00      	cmp	r3, #0
  4055bc:	d106      	bne.n	4055cc <xQueueGenericSend+0xa0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4055be:	f107 0314 	add.w	r3, r7, #20
  4055c2:	4618      	mov	r0, r3
  4055c4:	4b2c      	ldr	r3, [pc, #176]	; (405678 <xQueueGenericSend+0x14c>)
  4055c6:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  4055c8:	2301      	movs	r3, #1
  4055ca:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  4055cc:	4b29      	ldr	r3, [pc, #164]	; (405674 <xQueueGenericSend+0x148>)
  4055ce:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  4055d0:	4b2a      	ldr	r3, [pc, #168]	; (40567c <xQueueGenericSend+0x150>)
  4055d2:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4055d4:	4b23      	ldr	r3, [pc, #140]	; (405664 <xQueueGenericSend+0x138>)
  4055d6:	4798      	blx	r3
  4055d8:	68fb      	ldr	r3, [r7, #12]
  4055da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  4055dc:	f1b3 3fff 	cmp.w	r3, #4294967295
  4055e0:	d102      	bne.n	4055e8 <xQueueGenericSend+0xbc>
  4055e2:	68fb      	ldr	r3, [r7, #12]
  4055e4:	2200      	movs	r2, #0
  4055e6:	645a      	str	r2, [r3, #68]	; 0x44
  4055e8:	68fb      	ldr	r3, [r7, #12]
  4055ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4055ec:	f1b3 3fff 	cmp.w	r3, #4294967295
  4055f0:	d102      	bne.n	4055f8 <xQueueGenericSend+0xcc>
  4055f2:	68fb      	ldr	r3, [r7, #12]
  4055f4:	2200      	movs	r2, #0
  4055f6:	649a      	str	r2, [r3, #72]	; 0x48
  4055f8:	4b1e      	ldr	r3, [pc, #120]	; (405674 <xQueueGenericSend+0x148>)
  4055fa:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4055fc:	1d3a      	adds	r2, r7, #4
  4055fe:	f107 0314 	add.w	r3, r7, #20
  405602:	4611      	mov	r1, r2
  405604:	4618      	mov	r0, r3
  405606:	4b1e      	ldr	r3, [pc, #120]	; (405680 <xQueueGenericSend+0x154>)
  405608:	4798      	blx	r3
  40560a:	4603      	mov	r3, r0
  40560c:	2b00      	cmp	r3, #0
  40560e:	d11d      	bne.n	40564c <xQueueGenericSend+0x120>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  405610:	68f8      	ldr	r0, [r7, #12]
  405612:	4b1c      	ldr	r3, [pc, #112]	; (405684 <xQueueGenericSend+0x158>)
  405614:	4798      	blx	r3
  405616:	4603      	mov	r3, r0
  405618:	2b00      	cmp	r3, #0
  40561a:	d011      	beq.n	405640 <xQueueGenericSend+0x114>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  40561c:	68fb      	ldr	r3, [r7, #12]
  40561e:	3310      	adds	r3, #16
  405620:	687a      	ldr	r2, [r7, #4]
  405622:	4611      	mov	r1, r2
  405624:	4618      	mov	r0, r3
  405626:	4b18      	ldr	r3, [pc, #96]	; (405688 <xQueueGenericSend+0x15c>)
  405628:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  40562a:	68f8      	ldr	r0, [r7, #12]
  40562c:	4b17      	ldr	r3, [pc, #92]	; (40568c <xQueueGenericSend+0x160>)
  40562e:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  405630:	4b17      	ldr	r3, [pc, #92]	; (405690 <xQueueGenericSend+0x164>)
  405632:	4798      	blx	r3
  405634:	4603      	mov	r3, r0
  405636:	2b00      	cmp	r3, #0
  405638:	d198      	bne.n	40556c <xQueueGenericSend+0x40>
				{
					portYIELD_WITHIN_API();
  40563a:	4b0d      	ldr	r3, [pc, #52]	; (405670 <xQueueGenericSend+0x144>)
  40563c:	4798      	blx	r3
  40563e:	e795      	b.n	40556c <xQueueGenericSend+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  405640:	68f8      	ldr	r0, [r7, #12]
  405642:	4b12      	ldr	r3, [pc, #72]	; (40568c <xQueueGenericSend+0x160>)
  405644:	4798      	blx	r3
				( void ) xTaskResumeAll();
  405646:	4b12      	ldr	r3, [pc, #72]	; (405690 <xQueueGenericSend+0x164>)
  405648:	4798      	blx	r3
  40564a:	e78f      	b.n	40556c <xQueueGenericSend+0x40>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  40564c:	68f8      	ldr	r0, [r7, #12]
  40564e:	4b0f      	ldr	r3, [pc, #60]	; (40568c <xQueueGenericSend+0x160>)
  405650:	4798      	blx	r3
			( void ) xTaskResumeAll();
  405652:	4b0f      	ldr	r3, [pc, #60]	; (405690 <xQueueGenericSend+0x164>)
  405654:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  405656:	2300      	movs	r3, #0
		}
	}
}
  405658:	4618      	mov	r0, r3
  40565a:	3720      	adds	r7, #32
  40565c:	46bd      	mov	sp, r7
  40565e:	bd80      	pop	{r7, pc}
  405660:	00405075 	.word	0x00405075
  405664:	0040502d 	.word	0x0040502d
  405668:	00405925 	.word	0x00405925
  40566c:	004062e5 	.word	0x004062e5
  405670:	00405015 	.word	0x00405015
  405674:	0040504d 	.word	0x0040504d
  405678:	004063a1 	.word	0x004063a1
  40567c:	00405e4d 	.word	0x00405e4d
  405680:	004063dd 	.word	0x004063dd
  405684:	00405b11 	.word	0x00405b11
  405688:	004061fd 	.word	0x004061fd
  40568c:	00405a35 	.word	0x00405a35
  405690:	00405e69 	.word	0x00405e69

00405694 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
  405694:	b580      	push	{r7, lr}
  405696:	b086      	sub	sp, #24
  405698:	af00      	add	r7, sp, #0
  40569a:	60f8      	str	r0, [r7, #12]
  40569c:	60b9      	str	r1, [r7, #8]
  40569e:	607a      	str	r2, [r7, #4]
  4056a0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
  4056a2:	68fb      	ldr	r3, [r7, #12]
  4056a4:	2b00      	cmp	r3, #0
  4056a6:	d103      	bne.n	4056b0 <xQueueGenericSendFromISR+0x1c>
  4056a8:	4b25      	ldr	r3, [pc, #148]	; (405740 <xQueueGenericSendFromISR+0xac>)
  4056aa:	4798      	blx	r3
  4056ac:	bf00      	nop
  4056ae:	e7fd      	b.n	4056ac <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  4056b0:	68bb      	ldr	r3, [r7, #8]
  4056b2:	2b00      	cmp	r3, #0
  4056b4:	d103      	bne.n	4056be <xQueueGenericSendFromISR+0x2a>
  4056b6:	68fb      	ldr	r3, [r7, #12]
  4056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4056ba:	2b00      	cmp	r3, #0
  4056bc:	d101      	bne.n	4056c2 <xQueueGenericSendFromISR+0x2e>
  4056be:	2301      	movs	r3, #1
  4056c0:	e000      	b.n	4056c4 <xQueueGenericSendFromISR+0x30>
  4056c2:	2300      	movs	r3, #0
  4056c4:	2b00      	cmp	r3, #0
  4056c6:	d103      	bne.n	4056d0 <xQueueGenericSendFromISR+0x3c>
  4056c8:	4b1d      	ldr	r3, [pc, #116]	; (405740 <xQueueGenericSendFromISR+0xac>)
  4056ca:	4798      	blx	r3
  4056cc:	bf00      	nop
  4056ce:	e7fd      	b.n	4056cc <xQueueGenericSendFromISR+0x38>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  4056d0:	4b1b      	ldr	r3, [pc, #108]	; (405740 <xQueueGenericSendFromISR+0xac>)
  4056d2:	4798      	blx	r3
  4056d4:	6138      	str	r0, [r7, #16]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  4056d6:	68fb      	ldr	r3, [r7, #12]
  4056d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4056da:	68fb      	ldr	r3, [r7, #12]
  4056dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4056de:	429a      	cmp	r2, r3
  4056e0:	d224      	bcs.n	40572c <xQueueGenericSendFromISR+0x98>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4056e2:	683a      	ldr	r2, [r7, #0]
  4056e4:	68b9      	ldr	r1, [r7, #8]
  4056e6:	68f8      	ldr	r0, [r7, #12]
  4056e8:	4b16      	ldr	r3, [pc, #88]	; (405744 <xQueueGenericSendFromISR+0xb0>)
  4056ea:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  4056ec:	68fb      	ldr	r3, [r7, #12]
  4056ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4056f0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4056f4:	d112      	bne.n	40571c <xQueueGenericSendFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4056f6:	68fb      	ldr	r3, [r7, #12]
  4056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4056fa:	2b00      	cmp	r3, #0
  4056fc:	d013      	beq.n	405726 <xQueueGenericSendFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4056fe:	68fb      	ldr	r3, [r7, #12]
  405700:	3324      	adds	r3, #36	; 0x24
  405702:	4618      	mov	r0, r3
  405704:	4b10      	ldr	r3, [pc, #64]	; (405748 <xQueueGenericSendFromISR+0xb4>)
  405706:	4798      	blx	r3
  405708:	4603      	mov	r3, r0
  40570a:	2b00      	cmp	r3, #0
  40570c:	d00b      	beq.n	405726 <xQueueGenericSendFromISR+0x92>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
  40570e:	687b      	ldr	r3, [r7, #4]
  405710:	2b00      	cmp	r3, #0
  405712:	d008      	beq.n	405726 <xQueueGenericSendFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
  405714:	687b      	ldr	r3, [r7, #4]
  405716:	2201      	movs	r2, #1
  405718:	601a      	str	r2, [r3, #0]
  40571a:	e004      	b.n	405726 <xQueueGenericSendFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  40571c:	68fb      	ldr	r3, [r7, #12]
  40571e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  405720:	1c5a      	adds	r2, r3, #1
  405722:	68fb      	ldr	r3, [r7, #12]
  405724:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
  405726:	2301      	movs	r3, #1
  405728:	617b      	str	r3, [r7, #20]
  40572a:	e001      	b.n	405730 <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  40572c:	2300      	movs	r3, #0
  40572e:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  405730:	6938      	ldr	r0, [r7, #16]
  405732:	4b06      	ldr	r3, [pc, #24]	; (40574c <xQueueGenericSendFromISR+0xb8>)
  405734:	4798      	blx	r3

	return xReturn;
  405736:	697b      	ldr	r3, [r7, #20]
}
  405738:	4618      	mov	r0, r3
  40573a:	3718      	adds	r7, #24
  40573c:	46bd      	mov	sp, r7
  40573e:	bd80      	pop	{r7, pc}
  405740:	00405075 	.word	0x00405075
  405744:	00405925 	.word	0x00405925
  405748:	004062e5 	.word	0x004062e5
  40574c:	00405089 	.word	0x00405089

00405750 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  405750:	b580      	push	{r7, lr}
  405752:	b088      	sub	sp, #32
  405754:	af00      	add	r7, sp, #0
  405756:	60f8      	str	r0, [r7, #12]
  405758:	60b9      	str	r1, [r7, #8]
  40575a:	607a      	str	r2, [r7, #4]
  40575c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  40575e:	2300      	movs	r3, #0
  405760:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
  405762:	68fb      	ldr	r3, [r7, #12]
  405764:	2b00      	cmp	r3, #0
  405766:	d103      	bne.n	405770 <xQueueGenericReceive+0x20>
  405768:	4b5f      	ldr	r3, [pc, #380]	; (4058e8 <xQueueGenericReceive+0x198>)
  40576a:	4798      	blx	r3
  40576c:	bf00      	nop
  40576e:	e7fd      	b.n	40576c <xQueueGenericReceive+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  405770:	68bb      	ldr	r3, [r7, #8]
  405772:	2b00      	cmp	r3, #0
  405774:	d103      	bne.n	40577e <xQueueGenericReceive+0x2e>
  405776:	68fb      	ldr	r3, [r7, #12]
  405778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40577a:	2b00      	cmp	r3, #0
  40577c:	d101      	bne.n	405782 <xQueueGenericReceive+0x32>
  40577e:	2301      	movs	r3, #1
  405780:	e000      	b.n	405784 <xQueueGenericReceive+0x34>
  405782:	2300      	movs	r3, #0
  405784:	2b00      	cmp	r3, #0
  405786:	d103      	bne.n	405790 <xQueueGenericReceive+0x40>
  405788:	4b57      	ldr	r3, [pc, #348]	; (4058e8 <xQueueGenericReceive+0x198>)
  40578a:	4798      	blx	r3
  40578c:	bf00      	nop
  40578e:	e7fd      	b.n	40578c <xQueueGenericReceive+0x3c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  405790:	4b56      	ldr	r3, [pc, #344]	; (4058ec <xQueueGenericReceive+0x19c>)
  405792:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  405794:	68fb      	ldr	r3, [r7, #12]
  405796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  405798:	2b00      	cmp	r3, #0
  40579a:	d03b      	beq.n	405814 <xQueueGenericReceive+0xc4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  40579c:	68fb      	ldr	r3, [r7, #12]
  40579e:	68db      	ldr	r3, [r3, #12]
  4057a0:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4057a2:	68b9      	ldr	r1, [r7, #8]
  4057a4:	68f8      	ldr	r0, [r7, #12]
  4057a6:	4b52      	ldr	r3, [pc, #328]	; (4058f0 <xQueueGenericReceive+0x1a0>)
  4057a8:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  4057aa:	683b      	ldr	r3, [r7, #0]
  4057ac:	2b00      	cmp	r3, #0
  4057ae:	d11c      	bne.n	4057ea <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  4057b0:	68fb      	ldr	r3, [r7, #12]
  4057b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4057b4:	1e5a      	subs	r2, r3, #1
  4057b6:	68fb      	ldr	r3, [r7, #12]
  4057b8:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4057ba:	68fb      	ldr	r3, [r7, #12]
  4057bc:	681b      	ldr	r3, [r3, #0]
  4057be:	2b00      	cmp	r3, #0
  4057c0:	d104      	bne.n	4057cc <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  4057c2:	4b4c      	ldr	r3, [pc, #304]	; (4058f4 <xQueueGenericReceive+0x1a4>)
  4057c4:	4798      	blx	r3
  4057c6:	4602      	mov	r2, r0
  4057c8:	68fb      	ldr	r3, [r7, #12]
  4057ca:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4057cc:	68fb      	ldr	r3, [r7, #12]
  4057ce:	691b      	ldr	r3, [r3, #16]
  4057d0:	2b00      	cmp	r3, #0
  4057d2:	d01b      	beq.n	40580c <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4057d4:	68fb      	ldr	r3, [r7, #12]
  4057d6:	3310      	adds	r3, #16
  4057d8:	4618      	mov	r0, r3
  4057da:	4b47      	ldr	r3, [pc, #284]	; (4058f8 <xQueueGenericReceive+0x1a8>)
  4057dc:	4798      	blx	r3
  4057de:	4603      	mov	r3, r0
  4057e0:	2b01      	cmp	r3, #1
  4057e2:	d113      	bne.n	40580c <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
  4057e4:	4b45      	ldr	r3, [pc, #276]	; (4058fc <xQueueGenericReceive+0x1ac>)
  4057e6:	4798      	blx	r3
  4057e8:	e010      	b.n	40580c <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  4057ea:	68fb      	ldr	r3, [r7, #12]
  4057ec:	69ba      	ldr	r2, [r7, #24]
  4057ee:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4057f0:	68fb      	ldr	r3, [r7, #12]
  4057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4057f4:	2b00      	cmp	r3, #0
  4057f6:	d009      	beq.n	40580c <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4057f8:	68fb      	ldr	r3, [r7, #12]
  4057fa:	3324      	adds	r3, #36	; 0x24
  4057fc:	4618      	mov	r0, r3
  4057fe:	4b3e      	ldr	r3, [pc, #248]	; (4058f8 <xQueueGenericReceive+0x1a8>)
  405800:	4798      	blx	r3
  405802:	4603      	mov	r3, r0
  405804:	2b00      	cmp	r3, #0
  405806:	d001      	beq.n	40580c <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  405808:	4b3c      	ldr	r3, [pc, #240]	; (4058fc <xQueueGenericReceive+0x1ac>)
  40580a:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
  40580c:	4b3c      	ldr	r3, [pc, #240]	; (405900 <xQueueGenericReceive+0x1b0>)
  40580e:	4798      	blx	r3
				return pdPASS;
  405810:	2301      	movs	r3, #1
  405812:	e064      	b.n	4058de <xQueueGenericReceive+0x18e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  405814:	687b      	ldr	r3, [r7, #4]
  405816:	2b00      	cmp	r3, #0
  405818:	d103      	bne.n	405822 <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  40581a:	4b39      	ldr	r3, [pc, #228]	; (405900 <xQueueGenericReceive+0x1b0>)
  40581c:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  40581e:	2300      	movs	r3, #0
  405820:	e05d      	b.n	4058de <xQueueGenericReceive+0x18e>
				}
				else if( xEntryTimeSet == pdFALSE )
  405822:	69fb      	ldr	r3, [r7, #28]
  405824:	2b00      	cmp	r3, #0
  405826:	d106      	bne.n	405836 <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  405828:	f107 0310 	add.w	r3, r7, #16
  40582c:	4618      	mov	r0, r3
  40582e:	4b35      	ldr	r3, [pc, #212]	; (405904 <xQueueGenericReceive+0x1b4>)
  405830:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  405832:	2301      	movs	r3, #1
  405834:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  405836:	4b32      	ldr	r3, [pc, #200]	; (405900 <xQueueGenericReceive+0x1b0>)
  405838:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  40583a:	4b33      	ldr	r3, [pc, #204]	; (405908 <xQueueGenericReceive+0x1b8>)
  40583c:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40583e:	4b2b      	ldr	r3, [pc, #172]	; (4058ec <xQueueGenericReceive+0x19c>)
  405840:	4798      	blx	r3
  405842:	68fb      	ldr	r3, [r7, #12]
  405844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  405846:	f1b3 3fff 	cmp.w	r3, #4294967295
  40584a:	d102      	bne.n	405852 <xQueueGenericReceive+0x102>
  40584c:	68fb      	ldr	r3, [r7, #12]
  40584e:	2200      	movs	r2, #0
  405850:	645a      	str	r2, [r3, #68]	; 0x44
  405852:	68fb      	ldr	r3, [r7, #12]
  405854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  405856:	f1b3 3fff 	cmp.w	r3, #4294967295
  40585a:	d102      	bne.n	405862 <xQueueGenericReceive+0x112>
  40585c:	68fb      	ldr	r3, [r7, #12]
  40585e:	2200      	movs	r2, #0
  405860:	649a      	str	r2, [r3, #72]	; 0x48
  405862:	4b27      	ldr	r3, [pc, #156]	; (405900 <xQueueGenericReceive+0x1b0>)
  405864:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  405866:	1d3a      	adds	r2, r7, #4
  405868:	f107 0310 	add.w	r3, r7, #16
  40586c:	4611      	mov	r1, r2
  40586e:	4618      	mov	r0, r3
  405870:	4b26      	ldr	r3, [pc, #152]	; (40590c <xQueueGenericReceive+0x1bc>)
  405872:	4798      	blx	r3
  405874:	4603      	mov	r3, r0
  405876:	2b00      	cmp	r3, #0
  405878:	d12b      	bne.n	4058d2 <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40587a:	68f8      	ldr	r0, [r7, #12]
  40587c:	4b24      	ldr	r3, [pc, #144]	; (405910 <xQueueGenericReceive+0x1c0>)
  40587e:	4798      	blx	r3
  405880:	4603      	mov	r3, r0
  405882:	2b00      	cmp	r3, #0
  405884:	d01f      	beq.n	4058c6 <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  405886:	68fb      	ldr	r3, [r7, #12]
  405888:	681b      	ldr	r3, [r3, #0]
  40588a:	2b00      	cmp	r3, #0
  40588c:	d108      	bne.n	4058a0 <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
  40588e:	4b17      	ldr	r3, [pc, #92]	; (4058ec <xQueueGenericReceive+0x19c>)
  405890:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  405892:	68fb      	ldr	r3, [r7, #12]
  405894:	685b      	ldr	r3, [r3, #4]
  405896:	4618      	mov	r0, r3
  405898:	4b1e      	ldr	r3, [pc, #120]	; (405914 <xQueueGenericReceive+0x1c4>)
  40589a:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  40589c:	4b18      	ldr	r3, [pc, #96]	; (405900 <xQueueGenericReceive+0x1b0>)
  40589e:	4798      	blx	r3
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4058a0:	68fb      	ldr	r3, [r7, #12]
  4058a2:	3324      	adds	r3, #36	; 0x24
  4058a4:	687a      	ldr	r2, [r7, #4]
  4058a6:	4611      	mov	r1, r2
  4058a8:	4618      	mov	r0, r3
  4058aa:	4b1b      	ldr	r3, [pc, #108]	; (405918 <xQueueGenericReceive+0x1c8>)
  4058ac:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4058ae:	68f8      	ldr	r0, [r7, #12]
  4058b0:	4b1a      	ldr	r3, [pc, #104]	; (40591c <xQueueGenericReceive+0x1cc>)
  4058b2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4058b4:	4b1a      	ldr	r3, [pc, #104]	; (405920 <xQueueGenericReceive+0x1d0>)
  4058b6:	4798      	blx	r3
  4058b8:	4603      	mov	r3, r0
  4058ba:	2b00      	cmp	r3, #0
  4058bc:	f47f af68 	bne.w	405790 <xQueueGenericReceive+0x40>
				{
					portYIELD_WITHIN_API();
  4058c0:	4b0e      	ldr	r3, [pc, #56]	; (4058fc <xQueueGenericReceive+0x1ac>)
  4058c2:	4798      	blx	r3
  4058c4:	e764      	b.n	405790 <xQueueGenericReceive+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  4058c6:	68f8      	ldr	r0, [r7, #12]
  4058c8:	4b14      	ldr	r3, [pc, #80]	; (40591c <xQueueGenericReceive+0x1cc>)
  4058ca:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4058cc:	4b14      	ldr	r3, [pc, #80]	; (405920 <xQueueGenericReceive+0x1d0>)
  4058ce:	4798      	blx	r3
  4058d0:	e75e      	b.n	405790 <xQueueGenericReceive+0x40>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  4058d2:	68f8      	ldr	r0, [r7, #12]
  4058d4:	4b11      	ldr	r3, [pc, #68]	; (40591c <xQueueGenericReceive+0x1cc>)
  4058d6:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4058d8:	4b11      	ldr	r3, [pc, #68]	; (405920 <xQueueGenericReceive+0x1d0>)
  4058da:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  4058dc:	2300      	movs	r3, #0
		}
	}
}
  4058de:	4618      	mov	r0, r3
  4058e0:	3720      	adds	r7, #32
  4058e2:	46bd      	mov	sp, r7
  4058e4:	bd80      	pop	{r7, pc}
  4058e6:	bf00      	nop
  4058e8:	00405075 	.word	0x00405075
  4058ec:	0040502d 	.word	0x0040502d
  4058f0:	004059e5 	.word	0x004059e5
  4058f4:	00406749 	.word	0x00406749
  4058f8:	004062e5 	.word	0x004062e5
  4058fc:	00405015 	.word	0x00405015
  405900:	0040504d 	.word	0x0040504d
  405904:	004063a1 	.word	0x004063a1
  405908:	00405e4d 	.word	0x00405e4d
  40590c:	004063dd 	.word	0x004063dd
  405910:	00405add 	.word	0x00405add
  405914:	004067a1 	.word	0x004067a1
  405918:	004061fd 	.word	0x004061fd
  40591c:	00405a35 	.word	0x00405a35
  405920:	00405e69 	.word	0x00405e69

00405924 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  405924:	b580      	push	{r7, lr}
  405926:	b084      	sub	sp, #16
  405928:	af00      	add	r7, sp, #0
  40592a:	60f8      	str	r0, [r7, #12]
  40592c:	60b9      	str	r1, [r7, #8]
  40592e:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  405930:	68fb      	ldr	r3, [r7, #12]
  405932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405934:	2b00      	cmp	r3, #0
  405936:	d10c      	bne.n	405952 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  405938:	68fb      	ldr	r3, [r7, #12]
  40593a:	681b      	ldr	r3, [r3, #0]
  40593c:	2b00      	cmp	r3, #0
  40593e:	d143      	bne.n	4059c8 <prvCopyDataToQueue+0xa4>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  405940:	68fb      	ldr	r3, [r7, #12]
  405942:	685b      	ldr	r3, [r3, #4]
  405944:	4618      	mov	r0, r3
  405946:	4b25      	ldr	r3, [pc, #148]	; (4059dc <prvCopyDataToQueue+0xb8>)
  405948:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  40594a:	68fb      	ldr	r3, [r7, #12]
  40594c:	2200      	movs	r2, #0
  40594e:	605a      	str	r2, [r3, #4]
  405950:	e03a      	b.n	4059c8 <prvCopyDataToQueue+0xa4>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  405952:	687b      	ldr	r3, [r7, #4]
  405954:	2b00      	cmp	r3, #0
  405956:	d119      	bne.n	40598c <prvCopyDataToQueue+0x68>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  405958:	68fb      	ldr	r3, [r7, #12]
  40595a:	6898      	ldr	r0, [r3, #8]
  40595c:	68fb      	ldr	r3, [r7, #12]
  40595e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405960:	461a      	mov	r2, r3
  405962:	68b9      	ldr	r1, [r7, #8]
  405964:	4b1e      	ldr	r3, [pc, #120]	; (4059e0 <prvCopyDataToQueue+0xbc>)
  405966:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  405968:	68fb      	ldr	r3, [r7, #12]
  40596a:	689a      	ldr	r2, [r3, #8]
  40596c:	68fb      	ldr	r3, [r7, #12]
  40596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405970:	441a      	add	r2, r3
  405972:	68fb      	ldr	r3, [r7, #12]
  405974:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  405976:	68fb      	ldr	r3, [r7, #12]
  405978:	689a      	ldr	r2, [r3, #8]
  40597a:	68fb      	ldr	r3, [r7, #12]
  40597c:	685b      	ldr	r3, [r3, #4]
  40597e:	429a      	cmp	r2, r3
  405980:	d322      	bcc.n	4059c8 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  405982:	68fb      	ldr	r3, [r7, #12]
  405984:	681a      	ldr	r2, [r3, #0]
  405986:	68fb      	ldr	r3, [r7, #12]
  405988:	609a      	str	r2, [r3, #8]
  40598a:	e01d      	b.n	4059c8 <prvCopyDataToQueue+0xa4>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  40598c:	68fb      	ldr	r3, [r7, #12]
  40598e:	68d8      	ldr	r0, [r3, #12]
  405990:	68fb      	ldr	r3, [r7, #12]
  405992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405994:	461a      	mov	r2, r3
  405996:	68b9      	ldr	r1, [r7, #8]
  405998:	4b11      	ldr	r3, [pc, #68]	; (4059e0 <prvCopyDataToQueue+0xbc>)
  40599a:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  40599c:	68fb      	ldr	r3, [r7, #12]
  40599e:	68da      	ldr	r2, [r3, #12]
  4059a0:	68fb      	ldr	r3, [r7, #12]
  4059a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4059a4:	425b      	negs	r3, r3
  4059a6:	441a      	add	r2, r3
  4059a8:	68fb      	ldr	r3, [r7, #12]
  4059aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  4059ac:	68fb      	ldr	r3, [r7, #12]
  4059ae:	68da      	ldr	r2, [r3, #12]
  4059b0:	68fb      	ldr	r3, [r7, #12]
  4059b2:	681b      	ldr	r3, [r3, #0]
  4059b4:	429a      	cmp	r2, r3
  4059b6:	d207      	bcs.n	4059c8 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4059b8:	68fb      	ldr	r3, [r7, #12]
  4059ba:	685a      	ldr	r2, [r3, #4]
  4059bc:	68fb      	ldr	r3, [r7, #12]
  4059be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4059c0:	425b      	negs	r3, r3
  4059c2:	441a      	add	r2, r3
  4059c4:	68fb      	ldr	r3, [r7, #12]
  4059c6:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4059c8:	68fb      	ldr	r3, [r7, #12]
  4059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4059cc:	1c5a      	adds	r2, r3, #1
  4059ce:	68fb      	ldr	r3, [r7, #12]
  4059d0:	639a      	str	r2, [r3, #56]	; 0x38
}
  4059d2:	bf00      	nop
  4059d4:	3710      	adds	r7, #16
  4059d6:	46bd      	mov	sp, r7
  4059d8:	bd80      	pop	{r7, pc}
  4059da:	bf00      	nop
  4059dc:	00406855 	.word	0x00406855
  4059e0:	0040b201 	.word	0x0040b201

004059e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  4059e4:	b580      	push	{r7, lr}
  4059e6:	b082      	sub	sp, #8
  4059e8:	af00      	add	r7, sp, #0
  4059ea:	6078      	str	r0, [r7, #4]
  4059ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  4059ee:	687b      	ldr	r3, [r7, #4]
  4059f0:	681b      	ldr	r3, [r3, #0]
  4059f2:	2b00      	cmp	r3, #0
  4059f4:	d018      	beq.n	405a28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  4059f6:	687b      	ldr	r3, [r7, #4]
  4059f8:	68da      	ldr	r2, [r3, #12]
  4059fa:	687b      	ldr	r3, [r7, #4]
  4059fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4059fe:	441a      	add	r2, r3
  405a00:	687b      	ldr	r3, [r7, #4]
  405a02:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  405a04:	687b      	ldr	r3, [r7, #4]
  405a06:	68da      	ldr	r2, [r3, #12]
  405a08:	687b      	ldr	r3, [r7, #4]
  405a0a:	685b      	ldr	r3, [r3, #4]
  405a0c:	429a      	cmp	r2, r3
  405a0e:	d303      	bcc.n	405a18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  405a10:	687b      	ldr	r3, [r7, #4]
  405a12:	681a      	ldr	r2, [r3, #0]
  405a14:	687b      	ldr	r3, [r7, #4]
  405a16:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  405a18:	687b      	ldr	r3, [r7, #4]
  405a1a:	68d9      	ldr	r1, [r3, #12]
  405a1c:	687b      	ldr	r3, [r7, #4]
  405a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405a20:	461a      	mov	r2, r3
  405a22:	6838      	ldr	r0, [r7, #0]
  405a24:	4b02      	ldr	r3, [pc, #8]	; (405a30 <prvCopyDataFromQueue+0x4c>)
  405a26:	4798      	blx	r3
	}
}
  405a28:	bf00      	nop
  405a2a:	3708      	adds	r7, #8
  405a2c:	46bd      	mov	sp, r7
  405a2e:	bd80      	pop	{r7, pc}
  405a30:	0040b201 	.word	0x0040b201

00405a34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  405a34:	b580      	push	{r7, lr}
  405a36:	b082      	sub	sp, #8
  405a38:	af00      	add	r7, sp, #0
  405a3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  405a3c:	4b23      	ldr	r3, [pc, #140]	; (405acc <prvUnlockQueue+0x98>)
  405a3e:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  405a40:	e012      	b.n	405a68 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  405a42:	687b      	ldr	r3, [r7, #4]
  405a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  405a46:	2b00      	cmp	r3, #0
  405a48:	d013      	beq.n	405a72 <prvUnlockQueue+0x3e>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  405a4a:	687b      	ldr	r3, [r7, #4]
  405a4c:	3324      	adds	r3, #36	; 0x24
  405a4e:	4618      	mov	r0, r3
  405a50:	4b1f      	ldr	r3, [pc, #124]	; (405ad0 <prvUnlockQueue+0x9c>)
  405a52:	4798      	blx	r3
  405a54:	4603      	mov	r3, r0
  405a56:	2b00      	cmp	r3, #0
  405a58:	d001      	beq.n	405a5e <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  405a5a:	4b1e      	ldr	r3, [pc, #120]	; (405ad4 <prvUnlockQueue+0xa0>)
  405a5c:	4798      	blx	r3
				}

				--( pxQueue->xTxLock );
  405a5e:	687b      	ldr	r3, [r7, #4]
  405a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  405a62:	1e5a      	subs	r2, r3, #1
  405a64:	687b      	ldr	r3, [r7, #4]
  405a66:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  405a68:	687b      	ldr	r3, [r7, #4]
  405a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  405a6c:	2b00      	cmp	r3, #0
  405a6e:	dce8      	bgt.n	405a42 <prvUnlockQueue+0xe>
  405a70:	e000      	b.n	405a74 <prvUnlockQueue+0x40>

				--( pxQueue->xTxLock );
			}
			else
			{
				break;
  405a72:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  405a74:	687b      	ldr	r3, [r7, #4]
  405a76:	f04f 32ff 	mov.w	r2, #4294967295
  405a7a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  405a7c:	4b16      	ldr	r3, [pc, #88]	; (405ad8 <prvUnlockQueue+0xa4>)
  405a7e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  405a80:	4b12      	ldr	r3, [pc, #72]	; (405acc <prvUnlockQueue+0x98>)
  405a82:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  405a84:	e012      	b.n	405aac <prvUnlockQueue+0x78>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  405a86:	687b      	ldr	r3, [r7, #4]
  405a88:	691b      	ldr	r3, [r3, #16]
  405a8a:	2b00      	cmp	r3, #0
  405a8c:	d013      	beq.n	405ab6 <prvUnlockQueue+0x82>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  405a8e:	687b      	ldr	r3, [r7, #4]
  405a90:	3310      	adds	r3, #16
  405a92:	4618      	mov	r0, r3
  405a94:	4b0e      	ldr	r3, [pc, #56]	; (405ad0 <prvUnlockQueue+0x9c>)
  405a96:	4798      	blx	r3
  405a98:	4603      	mov	r3, r0
  405a9a:	2b00      	cmp	r3, #0
  405a9c:	d001      	beq.n	405aa2 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
  405a9e:	4b0d      	ldr	r3, [pc, #52]	; (405ad4 <prvUnlockQueue+0xa0>)
  405aa0:	4798      	blx	r3
				}

				--( pxQueue->xRxLock );
  405aa2:	687b      	ldr	r3, [r7, #4]
  405aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  405aa6:	1e5a      	subs	r2, r3, #1
  405aa8:	687b      	ldr	r3, [r7, #4]
  405aaa:	645a      	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  405aac:	687b      	ldr	r3, [r7, #4]
  405aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  405ab0:	2b00      	cmp	r3, #0
  405ab2:	dce8      	bgt.n	405a86 <prvUnlockQueue+0x52>
  405ab4:	e000      	b.n	405ab8 <prvUnlockQueue+0x84>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
  405ab6:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  405ab8:	687b      	ldr	r3, [r7, #4]
  405aba:	f04f 32ff 	mov.w	r2, #4294967295
  405abe:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  405ac0:	4b05      	ldr	r3, [pc, #20]	; (405ad8 <prvUnlockQueue+0xa4>)
  405ac2:	4798      	blx	r3
}
  405ac4:	bf00      	nop
  405ac6:	3708      	adds	r7, #8
  405ac8:	46bd      	mov	sp, r7
  405aca:	bd80      	pop	{r7, pc}
  405acc:	0040502d 	.word	0x0040502d
  405ad0:	004062e5 	.word	0x004062e5
  405ad4:	00406491 	.word	0x00406491
  405ad8:	0040504d 	.word	0x0040504d

00405adc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
  405adc:	b580      	push	{r7, lr}
  405ade:	b084      	sub	sp, #16
  405ae0:	af00      	add	r7, sp, #0
  405ae2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  405ae4:	4b08      	ldr	r3, [pc, #32]	; (405b08 <prvIsQueueEmpty+0x2c>)
  405ae6:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  405ae8:	687b      	ldr	r3, [r7, #4]
  405aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  405aec:	2b00      	cmp	r3, #0
  405aee:	bf0c      	ite	eq
  405af0:	2301      	moveq	r3, #1
  405af2:	2300      	movne	r3, #0
  405af4:	b2db      	uxtb	r3, r3
  405af6:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  405af8:	4b04      	ldr	r3, [pc, #16]	; (405b0c <prvIsQueueEmpty+0x30>)
  405afa:	4798      	blx	r3

	return xReturn;
  405afc:	68fb      	ldr	r3, [r7, #12]
}
  405afe:	4618      	mov	r0, r3
  405b00:	3710      	adds	r7, #16
  405b02:	46bd      	mov	sp, r7
  405b04:	bd80      	pop	{r7, pc}
  405b06:	bf00      	nop
  405b08:	0040502d 	.word	0x0040502d
  405b0c:	0040504d 	.word	0x0040504d

00405b10 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
  405b10:	b580      	push	{r7, lr}
  405b12:	b084      	sub	sp, #16
  405b14:	af00      	add	r7, sp, #0
  405b16:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  405b18:	4b09      	ldr	r3, [pc, #36]	; (405b40 <prvIsQueueFull+0x30>)
  405b1a:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  405b1c:	687b      	ldr	r3, [r7, #4]
  405b1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  405b20:	687b      	ldr	r3, [r7, #4]
  405b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  405b24:	429a      	cmp	r2, r3
  405b26:	bf0c      	ite	eq
  405b28:	2301      	moveq	r3, #1
  405b2a:	2300      	movne	r3, #0
  405b2c:	b2db      	uxtb	r3, r3
  405b2e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  405b30:	4b04      	ldr	r3, [pc, #16]	; (405b44 <prvIsQueueFull+0x34>)
  405b32:	4798      	blx	r3

	return xReturn;
  405b34:	68fb      	ldr	r3, [r7, #12]
}
  405b36:	4618      	mov	r0, r3
  405b38:	3710      	adds	r7, #16
  405b3a:	46bd      	mov	sp, r7
  405b3c:	bd80      	pop	{r7, pc}
  405b3e:	bf00      	nop
  405b40:	0040502d 	.word	0x0040502d
  405b44:	0040504d 	.word	0x0040504d

00405b48 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  405b48:	b580      	push	{r7, lr}
  405b4a:	b082      	sub	sp, #8
  405b4c:	af00      	add	r7, sp, #0
  405b4e:	6078      	str	r0, [r7, #4]
  405b50:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  405b52:	4b12      	ldr	r3, [pc, #72]	; (405b9c <vQueueWaitForMessageRestricted+0x54>)
  405b54:	4798      	blx	r3
  405b56:	687b      	ldr	r3, [r7, #4]
  405b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  405b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
  405b5e:	d102      	bne.n	405b66 <vQueueWaitForMessageRestricted+0x1e>
  405b60:	687b      	ldr	r3, [r7, #4]
  405b62:	2200      	movs	r2, #0
  405b64:	645a      	str	r2, [r3, #68]	; 0x44
  405b66:	687b      	ldr	r3, [r7, #4]
  405b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  405b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
  405b6e:	d102      	bne.n	405b76 <vQueueWaitForMessageRestricted+0x2e>
  405b70:	687b      	ldr	r3, [r7, #4]
  405b72:	2200      	movs	r2, #0
  405b74:	649a      	str	r2, [r3, #72]	; 0x48
  405b76:	4b0a      	ldr	r3, [pc, #40]	; (405ba0 <vQueueWaitForMessageRestricted+0x58>)
  405b78:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  405b7a:	687b      	ldr	r3, [r7, #4]
  405b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  405b7e:	2b00      	cmp	r3, #0
  405b80:	d105      	bne.n	405b8e <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  405b82:	687b      	ldr	r3, [r7, #4]
  405b84:	3324      	adds	r3, #36	; 0x24
  405b86:	6839      	ldr	r1, [r7, #0]
  405b88:	4618      	mov	r0, r3
  405b8a:	4b06      	ldr	r3, [pc, #24]	; (405ba4 <vQueueWaitForMessageRestricted+0x5c>)
  405b8c:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
  405b8e:	6878      	ldr	r0, [r7, #4]
  405b90:	4b05      	ldr	r3, [pc, #20]	; (405ba8 <vQueueWaitForMessageRestricted+0x60>)
  405b92:	4798      	blx	r3
	}
  405b94:	bf00      	nop
  405b96:	3708      	adds	r7, #8
  405b98:	46bd      	mov	sp, r7
  405b9a:	bd80      	pop	{r7, pc}
  405b9c:	0040502d 	.word	0x0040502d
  405ba0:	0040504d 	.word	0x0040504d
  405ba4:	00406281 	.word	0x00406281
  405ba8:	00405a35 	.word	0x00405a35

00405bac <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  405bac:	b590      	push	{r4, r7, lr}
  405bae:	b08b      	sub	sp, #44	; 0x2c
  405bb0:	af02      	add	r7, sp, #8
  405bb2:	60f8      	str	r0, [r7, #12]
  405bb4:	60b9      	str	r1, [r7, #8]
  405bb6:	603b      	str	r3, [r7, #0]
  405bb8:	4613      	mov	r3, r2
  405bba:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
  405bbc:	68fb      	ldr	r3, [r7, #12]
  405bbe:	2b00      	cmp	r3, #0
  405bc0:	d103      	bne.n	405bca <xTaskGenericCreate+0x1e>
  405bc2:	4b58      	ldr	r3, [pc, #352]	; (405d24 <xTaskGenericCreate+0x178>)
  405bc4:	4798      	blx	r3
  405bc6:	bf00      	nop
  405bc8:	e7fd      	b.n	405bc6 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
  405bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  405bcc:	2b04      	cmp	r3, #4
  405bce:	d903      	bls.n	405bd8 <xTaskGenericCreate+0x2c>
  405bd0:	4b54      	ldr	r3, [pc, #336]	; (405d24 <xTaskGenericCreate+0x178>)
  405bd2:	4798      	blx	r3
  405bd4:	bf00      	nop
  405bd6:	e7fd      	b.n	405bd4 <xTaskGenericCreate+0x28>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
  405bd8:	88fb      	ldrh	r3, [r7, #6]
  405bda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  405bdc:	4618      	mov	r0, r3
  405bde:	4b52      	ldr	r3, [pc, #328]	; (405d28 <xTaskGenericCreate+0x17c>)
  405be0:	4798      	blx	r3
  405be2:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
  405be4:	69bb      	ldr	r3, [r7, #24]
  405be6:	2b00      	cmp	r3, #0
  405be8:	f000 8084 	beq.w	405cf4 <xTaskGenericCreate+0x148>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
  405bec:	69bb      	ldr	r3, [r7, #24]
  405bee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  405bf0:	88fb      	ldrh	r3, [r7, #6]
  405bf2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  405bf6:	3b01      	subs	r3, #1
  405bf8:	009b      	lsls	r3, r3, #2
  405bfa:	4413      	add	r3, r2
  405bfc:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
  405bfe:	697b      	ldr	r3, [r7, #20]
  405c00:	f023 0307 	bic.w	r3, r3, #7
  405c04:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  405c06:	697b      	ldr	r3, [r7, #20]
  405c08:	f003 0307 	and.w	r3, r3, #7
  405c0c:	2b00      	cmp	r3, #0
  405c0e:	d003      	beq.n	405c18 <xTaskGenericCreate+0x6c>
  405c10:	4b44      	ldr	r3, [pc, #272]	; (405d24 <xTaskGenericCreate+0x178>)
  405c12:	4798      	blx	r3
  405c14:	bf00      	nop
  405c16:	e7fd      	b.n	405c14 <xTaskGenericCreate+0x68>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
  405c18:	88fb      	ldrh	r3, [r7, #6]
  405c1a:	9300      	str	r3, [sp, #0]
  405c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  405c1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  405c20:	68b9      	ldr	r1, [r7, #8]
  405c22:	69b8      	ldr	r0, [r7, #24]
  405c24:	4c41      	ldr	r4, [pc, #260]	; (405d2c <xTaskGenericCreate+0x180>)
  405c26:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  405c28:	683a      	ldr	r2, [r7, #0]
  405c2a:	68f9      	ldr	r1, [r7, #12]
  405c2c:	6978      	ldr	r0, [r7, #20]
  405c2e:	4b40      	ldr	r3, [pc, #256]	; (405d30 <xTaskGenericCreate+0x184>)
  405c30:	4798      	blx	r3
  405c32:	4602      	mov	r2, r0
  405c34:	69bb      	ldr	r3, [r7, #24]
  405c36:	601a      	str	r2, [r3, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  405c38:	69bb      	ldr	r3, [r7, #24]
  405c3a:	681b      	ldr	r3, [r3, #0]
  405c3c:	f003 0307 	and.w	r3, r3, #7
  405c40:	2b00      	cmp	r3, #0
  405c42:	d003      	beq.n	405c4c <xTaskGenericCreate+0xa0>
  405c44:	4b37      	ldr	r3, [pc, #220]	; (405d24 <xTaskGenericCreate+0x178>)
  405c46:	4798      	blx	r3
  405c48:	bf00      	nop
  405c4a:	e7fd      	b.n	405c48 <xTaskGenericCreate+0x9c>

		if( ( void * ) pxCreatedTask != NULL )
  405c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  405c4e:	2b00      	cmp	r3, #0
  405c50:	d002      	beq.n	405c58 <xTaskGenericCreate+0xac>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  405c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  405c54:	69ba      	ldr	r2, [r7, #24]
  405c56:	601a      	str	r2, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  405c58:	4b36      	ldr	r3, [pc, #216]	; (405d34 <xTaskGenericCreate+0x188>)
  405c5a:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  405c5c:	4b36      	ldr	r3, [pc, #216]	; (405d38 <xTaskGenericCreate+0x18c>)
  405c5e:	681b      	ldr	r3, [r3, #0]
  405c60:	3301      	adds	r3, #1
  405c62:	4a35      	ldr	r2, [pc, #212]	; (405d38 <xTaskGenericCreate+0x18c>)
  405c64:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  405c66:	4b35      	ldr	r3, [pc, #212]	; (405d3c <xTaskGenericCreate+0x190>)
  405c68:	681b      	ldr	r3, [r3, #0]
  405c6a:	2b00      	cmp	r3, #0
  405c6c:	d109      	bne.n	405c82 <xTaskGenericCreate+0xd6>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  405c6e:	4a33      	ldr	r2, [pc, #204]	; (405d3c <xTaskGenericCreate+0x190>)
  405c70:	69bb      	ldr	r3, [r7, #24]
  405c72:	6013      	str	r3, [r2, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  405c74:	4b30      	ldr	r3, [pc, #192]	; (405d38 <xTaskGenericCreate+0x18c>)
  405c76:	681b      	ldr	r3, [r3, #0]
  405c78:	2b01      	cmp	r3, #1
  405c7a:	d10f      	bne.n	405c9c <xTaskGenericCreate+0xf0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
  405c7c:	4b30      	ldr	r3, [pc, #192]	; (405d40 <xTaskGenericCreate+0x194>)
  405c7e:	4798      	blx	r3
  405c80:	e00c      	b.n	405c9c <xTaskGenericCreate+0xf0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  405c82:	4b30      	ldr	r3, [pc, #192]	; (405d44 <xTaskGenericCreate+0x198>)
  405c84:	681b      	ldr	r3, [r3, #0]
  405c86:	2b00      	cmp	r3, #0
  405c88:	d108      	bne.n	405c9c <xTaskGenericCreate+0xf0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  405c8a:	4b2c      	ldr	r3, [pc, #176]	; (405d3c <xTaskGenericCreate+0x190>)
  405c8c:	681b      	ldr	r3, [r3, #0]
  405c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  405c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  405c92:	429a      	cmp	r2, r3
  405c94:	d802      	bhi.n	405c9c <xTaskGenericCreate+0xf0>
					{
						pxCurrentTCB = pxNewTCB;
  405c96:	4a29      	ldr	r2, [pc, #164]	; (405d3c <xTaskGenericCreate+0x190>)
  405c98:	69bb      	ldr	r3, [r7, #24]
  405c9a:	6013      	str	r3, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  405c9c:	69bb      	ldr	r3, [r7, #24]
  405c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  405ca0:	4b29      	ldr	r3, [pc, #164]	; (405d48 <xTaskGenericCreate+0x19c>)
  405ca2:	681b      	ldr	r3, [r3, #0]
  405ca4:	429a      	cmp	r2, r3
  405ca6:	d903      	bls.n	405cb0 <xTaskGenericCreate+0x104>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  405ca8:	69bb      	ldr	r3, [r7, #24]
  405caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  405cac:	4a26      	ldr	r2, [pc, #152]	; (405d48 <xTaskGenericCreate+0x19c>)
  405cae:	6013      	str	r3, [r2, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
  405cb0:	4b26      	ldr	r3, [pc, #152]	; (405d4c <xTaskGenericCreate+0x1a0>)
  405cb2:	681b      	ldr	r3, [r3, #0]
  405cb4:	3301      	adds	r3, #1
  405cb6:	4a25      	ldr	r2, [pc, #148]	; (405d4c <xTaskGenericCreate+0x1a0>)
  405cb8:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  405cba:	69bb      	ldr	r3, [r7, #24]
  405cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  405cbe:	4b24      	ldr	r3, [pc, #144]	; (405d50 <xTaskGenericCreate+0x1a4>)
  405cc0:	681b      	ldr	r3, [r3, #0]
  405cc2:	429a      	cmp	r2, r3
  405cc4:	d903      	bls.n	405cce <xTaskGenericCreate+0x122>
  405cc6:	69bb      	ldr	r3, [r7, #24]
  405cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  405cca:	4a21      	ldr	r2, [pc, #132]	; (405d50 <xTaskGenericCreate+0x1a4>)
  405ccc:	6013      	str	r3, [r2, #0]
  405cce:	69bb      	ldr	r3, [r7, #24]
  405cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  405cd2:	4613      	mov	r3, r2
  405cd4:	009b      	lsls	r3, r3, #2
  405cd6:	4413      	add	r3, r2
  405cd8:	009b      	lsls	r3, r3, #2
  405cda:	4a1e      	ldr	r2, [pc, #120]	; (405d54 <xTaskGenericCreate+0x1a8>)
  405cdc:	441a      	add	r2, r3
  405cde:	69bb      	ldr	r3, [r7, #24]
  405ce0:	3304      	adds	r3, #4
  405ce2:	4619      	mov	r1, r3
  405ce4:	4610      	mov	r0, r2
  405ce6:	4b1c      	ldr	r3, [pc, #112]	; (405d58 <xTaskGenericCreate+0x1ac>)
  405ce8:	4798      	blx	r3

			xReturn = pdPASS;
  405cea:	2301      	movs	r3, #1
  405cec:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  405cee:	4b1b      	ldr	r3, [pc, #108]	; (405d5c <xTaskGenericCreate+0x1b0>)
  405cf0:	4798      	blx	r3
  405cf2:	e002      	b.n	405cfa <xTaskGenericCreate+0x14e>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  405cf4:	f04f 33ff 	mov.w	r3, #4294967295
  405cf8:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
  405cfa:	69fb      	ldr	r3, [r7, #28]
  405cfc:	2b01      	cmp	r3, #1
  405cfe:	d10b      	bne.n	405d18 <xTaskGenericCreate+0x16c>
	{
		if( xSchedulerRunning != pdFALSE )
  405d00:	4b10      	ldr	r3, [pc, #64]	; (405d44 <xTaskGenericCreate+0x198>)
  405d02:	681b      	ldr	r3, [r3, #0]
  405d04:	2b00      	cmp	r3, #0
  405d06:	d007      	beq.n	405d18 <xTaskGenericCreate+0x16c>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  405d08:	4b0c      	ldr	r3, [pc, #48]	; (405d3c <xTaskGenericCreate+0x190>)
  405d0a:	681b      	ldr	r3, [r3, #0]
  405d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  405d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  405d10:	429a      	cmp	r2, r3
  405d12:	d201      	bcs.n	405d18 <xTaskGenericCreate+0x16c>
			{
				portYIELD_WITHIN_API();
  405d14:	4b12      	ldr	r3, [pc, #72]	; (405d60 <xTaskGenericCreate+0x1b4>)
  405d16:	4798      	blx	r3
			}
		}
	}

	return xReturn;
  405d18:	69fb      	ldr	r3, [r7, #28]
}
  405d1a:	4618      	mov	r0, r3
  405d1c:	3724      	adds	r7, #36	; 0x24
  405d1e:	46bd      	mov	sp, r7
  405d20:	bd90      	pop	{r4, r7, pc}
  405d22:	bf00      	nop
  405d24:	00405075 	.word	0x00405075
  405d28:	004066b5 	.word	0x004066b5
  405d2c:	004064bd 	.word	0x004064bd
  405d30:	00404f49 	.word	0x00404f49
  405d34:	0040502d 	.word	0x0040502d
  405d38:	200026ac 	.word	0x200026ac
  405d3c:	200025d4 	.word	0x200025d4
  405d40:	00406531 	.word	0x00406531
  405d44:	200026bc 	.word	0x200026bc
  405d48:	200026b4 	.word	0x200026b4
  405d4c:	200026d0 	.word	0x200026d0
  405d50:	200026b8 	.word	0x200026b8
  405d54:	200025d8 	.word	0x200025d8
  405d58:	00404d91 	.word	0x00404d91
  405d5c:	0040504d 	.word	0x0040504d
  405d60:	00405015 	.word	0x00405015

00405d64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
  405d64:	b580      	push	{r7, lr}
  405d66:	b084      	sub	sp, #16
  405d68:	af00      	add	r7, sp, #0
  405d6a:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  405d6c:	2300      	movs	r3, #0
  405d6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
  405d70:	687b      	ldr	r3, [r7, #4]
  405d72:	2b00      	cmp	r3, #0
  405d74:	d012      	beq.n	405d9c <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
  405d76:	4b0e      	ldr	r3, [pc, #56]	; (405db0 <vTaskDelay+0x4c>)
  405d78:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  405d7a:	4b0e      	ldr	r3, [pc, #56]	; (405db4 <vTaskDelay+0x50>)
  405d7c:	681a      	ldr	r2, [r3, #0]
  405d7e:	687b      	ldr	r3, [r7, #4]
  405d80:	4413      	add	r3, r2
  405d82:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  405d84:	4b0c      	ldr	r3, [pc, #48]	; (405db8 <vTaskDelay+0x54>)
  405d86:	681b      	ldr	r3, [r3, #0]
  405d88:	3304      	adds	r3, #4
  405d8a:	4618      	mov	r0, r3
  405d8c:	4b0b      	ldr	r3, [pc, #44]	; (405dbc <vTaskDelay+0x58>)
  405d8e:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  405d90:	68b8      	ldr	r0, [r7, #8]
  405d92:	4b0b      	ldr	r3, [pc, #44]	; (405dc0 <vTaskDelay+0x5c>)
  405d94:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  405d96:	4b0b      	ldr	r3, [pc, #44]	; (405dc4 <vTaskDelay+0x60>)
  405d98:	4798      	blx	r3
  405d9a:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  405d9c:	68fb      	ldr	r3, [r7, #12]
  405d9e:	2b00      	cmp	r3, #0
  405da0:	d101      	bne.n	405da6 <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
  405da2:	4b09      	ldr	r3, [pc, #36]	; (405dc8 <vTaskDelay+0x64>)
  405da4:	4798      	blx	r3
		}
	}
  405da6:	bf00      	nop
  405da8:	3710      	adds	r7, #16
  405daa:	46bd      	mov	sp, r7
  405dac:	bd80      	pop	{r7, pc}
  405dae:	bf00      	nop
  405db0:	00405e4d 	.word	0x00405e4d
  405db4:	200026b0 	.word	0x200026b0
  405db8:	200025d4 	.word	0x200025d4
  405dbc:	00404e51 	.word	0x00404e51
  405dc0:	00406645 	.word	0x00406645
  405dc4:	00405e69 	.word	0x00405e69
  405dc8:	00405015 	.word	0x00405015

00405dcc <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  405dcc:	b590      	push	{r4, r7, lr}
  405dce:	b087      	sub	sp, #28
  405dd0:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
  405dd2:	2300      	movs	r3, #0
  405dd4:	9303      	str	r3, [sp, #12]
  405dd6:	2300      	movs	r3, #0
  405dd8:	9302      	str	r3, [sp, #8]
  405dda:	2300      	movs	r3, #0
  405ddc:	9301      	str	r3, [sp, #4]
  405dde:	2300      	movs	r3, #0
  405de0:	9300      	str	r3, [sp, #0]
  405de2:	2300      	movs	r3, #0
  405de4:	2264      	movs	r2, #100	; 0x64
  405de6:	4911      	ldr	r1, [pc, #68]	; (405e2c <vTaskStartScheduler+0x60>)
  405de8:	4811      	ldr	r0, [pc, #68]	; (405e30 <vTaskStartScheduler+0x64>)
  405dea:	4c12      	ldr	r4, [pc, #72]	; (405e34 <vTaskStartScheduler+0x68>)
  405dec:	47a0      	blx	r4
  405dee:	6078      	str	r0, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  405df0:	687b      	ldr	r3, [r7, #4]
  405df2:	2b01      	cmp	r3, #1
  405df4:	d102      	bne.n	405dfc <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
  405df6:	4b10      	ldr	r3, [pc, #64]	; (405e38 <vTaskStartScheduler+0x6c>)
  405df8:	4798      	blx	r3
  405dfa:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
  405dfc:	687b      	ldr	r3, [r7, #4]
  405dfe:	2b01      	cmp	r3, #1
  405e00:	d109      	bne.n	405e16 <vTaskStartScheduler+0x4a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  405e02:	4b0e      	ldr	r3, [pc, #56]	; (405e3c <vTaskStartScheduler+0x70>)
  405e04:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
  405e06:	4b0e      	ldr	r3, [pc, #56]	; (405e40 <vTaskStartScheduler+0x74>)
  405e08:	2201      	movs	r2, #1
  405e0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
  405e0c:	4b0d      	ldr	r3, [pc, #52]	; (405e44 <vTaskStartScheduler+0x78>)
  405e0e:	2200      	movs	r2, #0
  405e10:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  405e12:	4b0d      	ldr	r3, [pc, #52]	; (405e48 <vTaskStartScheduler+0x7c>)
  405e14:	4798      	blx	r3
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
  405e16:	687b      	ldr	r3, [r7, #4]
  405e18:	2b00      	cmp	r3, #0
  405e1a:	d103      	bne.n	405e24 <vTaskStartScheduler+0x58>
  405e1c:	4b07      	ldr	r3, [pc, #28]	; (405e3c <vTaskStartScheduler+0x70>)
  405e1e:	4798      	blx	r3
  405e20:	bf00      	nop
  405e22:	e7fd      	b.n	405e20 <vTaskStartScheduler+0x54>
}
  405e24:	bf00      	nop
  405e26:	370c      	adds	r7, #12
  405e28:	46bd      	mov	sp, r7
  405e2a:	bd90      	pop	{r4, r7, pc}
  405e2c:	0040b57c 	.word	0x0040b57c
  405e30:	004064a9 	.word	0x004064a9
  405e34:	00405bad 	.word	0x00405bad
  405e38:	004068d9 	.word	0x004068d9
  405e3c:	00405075 	.word	0x00405075
  405e40:	200026bc 	.word	0x200026bc
  405e44:	200026b0 	.word	0x200026b0
  405e48:	00404fd5 	.word	0x00404fd5

00405e4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
  405e4c:	b480      	push	{r7}
  405e4e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  405e50:	4b04      	ldr	r3, [pc, #16]	; (405e64 <vTaskSuspendAll+0x18>)
  405e52:	681b      	ldr	r3, [r3, #0]
  405e54:	3301      	adds	r3, #1
  405e56:	4a03      	ldr	r2, [pc, #12]	; (405e64 <vTaskSuspendAll+0x18>)
  405e58:	6013      	str	r3, [r2, #0]
}
  405e5a:	bf00      	nop
  405e5c:	46bd      	mov	sp, r7
  405e5e:	bc80      	pop	{r7}
  405e60:	4770      	bx	lr
  405e62:	bf00      	nop
  405e64:	200026c0 	.word	0x200026c0

00405e68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  405e68:	b590      	push	{r4, r7, lr}
  405e6a:	b083      	sub	sp, #12
  405e6c:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  405e6e:	2300      	movs	r3, #0
  405e70:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  405e72:	4b36      	ldr	r3, [pc, #216]	; (405f4c <xTaskResumeAll+0xe4>)
  405e74:	681b      	ldr	r3, [r3, #0]
  405e76:	2b00      	cmp	r3, #0
  405e78:	d103      	bne.n	405e82 <xTaskResumeAll+0x1a>
  405e7a:	4b35      	ldr	r3, [pc, #212]	; (405f50 <xTaskResumeAll+0xe8>)
  405e7c:	4798      	blx	r3
  405e7e:	bf00      	nop
  405e80:	e7fd      	b.n	405e7e <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  405e82:	4b34      	ldr	r3, [pc, #208]	; (405f54 <xTaskResumeAll+0xec>)
  405e84:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  405e86:	4b31      	ldr	r3, [pc, #196]	; (405f4c <xTaskResumeAll+0xe4>)
  405e88:	681b      	ldr	r3, [r3, #0]
  405e8a:	3b01      	subs	r3, #1
  405e8c:	4a2f      	ldr	r2, [pc, #188]	; (405f4c <xTaskResumeAll+0xe4>)
  405e8e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  405e90:	4b2e      	ldr	r3, [pc, #184]	; (405f4c <xTaskResumeAll+0xe4>)
  405e92:	681b      	ldr	r3, [r3, #0]
  405e94:	2b00      	cmp	r3, #0
  405e96:	d152      	bne.n	405f3e <xTaskResumeAll+0xd6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
  405e98:	4b2f      	ldr	r3, [pc, #188]	; (405f58 <xTaskResumeAll+0xf0>)
  405e9a:	681b      	ldr	r3, [r3, #0]
  405e9c:	2b00      	cmp	r3, #0
  405e9e:	d04e      	beq.n	405f3e <xTaskResumeAll+0xd6>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
  405ea0:	2300      	movs	r3, #0
  405ea2:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  405ea4:	e027      	b.n	405ef6 <xTaskResumeAll+0x8e>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  405ea6:	4b2d      	ldr	r3, [pc, #180]	; (405f5c <xTaskResumeAll+0xf4>)
  405ea8:	68db      	ldr	r3, [r3, #12]
  405eaa:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
  405eac:	f104 0318 	add.w	r3, r4, #24
  405eb0:	4618      	mov	r0, r3
  405eb2:	4b2b      	ldr	r3, [pc, #172]	; (405f60 <xTaskResumeAll+0xf8>)
  405eb4:	4798      	blx	r3
					uxListRemove( &( pxTCB->xGenericListItem ) );
  405eb6:	1d23      	adds	r3, r4, #4
  405eb8:	4618      	mov	r0, r3
  405eba:	4b29      	ldr	r3, [pc, #164]	; (405f60 <xTaskResumeAll+0xf8>)
  405ebc:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
  405ebe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  405ec0:	4b28      	ldr	r3, [pc, #160]	; (405f64 <xTaskResumeAll+0xfc>)
  405ec2:	681b      	ldr	r3, [r3, #0]
  405ec4:	429a      	cmp	r2, r3
  405ec6:	d902      	bls.n	405ece <xTaskResumeAll+0x66>
  405ec8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  405eca:	4a26      	ldr	r2, [pc, #152]	; (405f64 <xTaskResumeAll+0xfc>)
  405ecc:	6013      	str	r3, [r2, #0]
  405ece:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  405ed0:	4613      	mov	r3, r2
  405ed2:	009b      	lsls	r3, r3, #2
  405ed4:	4413      	add	r3, r2
  405ed6:	009b      	lsls	r3, r3, #2
  405ed8:	4a23      	ldr	r2, [pc, #140]	; (405f68 <xTaskResumeAll+0x100>)
  405eda:	4413      	add	r3, r2
  405edc:	1d22      	adds	r2, r4, #4
  405ede:	4611      	mov	r1, r2
  405ee0:	4618      	mov	r0, r3
  405ee2:	4b22      	ldr	r3, [pc, #136]	; (405f6c <xTaskResumeAll+0x104>)
  405ee4:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  405ee6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  405ee8:	4b21      	ldr	r3, [pc, #132]	; (405f70 <xTaskResumeAll+0x108>)
  405eea:	681b      	ldr	r3, [r3, #0]
  405eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  405eee:	429a      	cmp	r2, r3
  405ef0:	d301      	bcc.n	405ef6 <xTaskResumeAll+0x8e>
					{
						xYieldRequired = pdTRUE;
  405ef2:	2301      	movs	r3, #1
  405ef4:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  405ef6:	4b19      	ldr	r3, [pc, #100]	; (405f5c <xTaskResumeAll+0xf4>)
  405ef8:	681b      	ldr	r3, [r3, #0]
  405efa:	2b00      	cmp	r3, #0
  405efc:	d1d3      	bne.n	405ea6 <xTaskResumeAll+0x3e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  405efe:	4b1d      	ldr	r3, [pc, #116]	; (405f74 <xTaskResumeAll+0x10c>)
  405f00:	681b      	ldr	r3, [r3, #0]
  405f02:	2b00      	cmp	r3, #0
  405f04:	d00d      	beq.n	405f22 <xTaskResumeAll+0xba>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  405f06:	e006      	b.n	405f16 <xTaskResumeAll+0xae>
					{
						vTaskIncrementTick();
  405f08:	4b1b      	ldr	r3, [pc, #108]	; (405f78 <xTaskResumeAll+0x110>)
  405f0a:	4798      	blx	r3
						--uxMissedTicks;
  405f0c:	4b19      	ldr	r3, [pc, #100]	; (405f74 <xTaskResumeAll+0x10c>)
  405f0e:	681b      	ldr	r3, [r3, #0]
  405f10:	3b01      	subs	r3, #1
  405f12:	4a18      	ldr	r2, [pc, #96]	; (405f74 <xTaskResumeAll+0x10c>)
  405f14:	6013      	str	r3, [r2, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  405f16:	4b17      	ldr	r3, [pc, #92]	; (405f74 <xTaskResumeAll+0x10c>)
  405f18:	681b      	ldr	r3, [r3, #0]
  405f1a:	2b00      	cmp	r3, #0
  405f1c:	d1f4      	bne.n	405f08 <xTaskResumeAll+0xa0>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
  405f1e:	2301      	movs	r3, #1
  405f20:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  405f22:	683b      	ldr	r3, [r7, #0]
  405f24:	2b01      	cmp	r3, #1
  405f26:	d003      	beq.n	405f30 <xTaskResumeAll+0xc8>
  405f28:	4b14      	ldr	r3, [pc, #80]	; (405f7c <xTaskResumeAll+0x114>)
  405f2a:	681b      	ldr	r3, [r3, #0]
  405f2c:	2b01      	cmp	r3, #1
  405f2e:	d106      	bne.n	405f3e <xTaskResumeAll+0xd6>
				{
					xAlreadyYielded = pdTRUE;
  405f30:	2301      	movs	r3, #1
  405f32:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
  405f34:	4b11      	ldr	r3, [pc, #68]	; (405f7c <xTaskResumeAll+0x114>)
  405f36:	2200      	movs	r2, #0
  405f38:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  405f3a:	4b11      	ldr	r3, [pc, #68]	; (405f80 <xTaskResumeAll+0x118>)
  405f3c:	4798      	blx	r3
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  405f3e:	4b11      	ldr	r3, [pc, #68]	; (405f84 <xTaskResumeAll+0x11c>)
  405f40:	4798      	blx	r3

	return xAlreadyYielded;
  405f42:	687b      	ldr	r3, [r7, #4]
}
  405f44:	4618      	mov	r0, r3
  405f46:	370c      	adds	r7, #12
  405f48:	46bd      	mov	sp, r7
  405f4a:	bd90      	pop	{r4, r7, pc}
  405f4c:	200026c0 	.word	0x200026c0
  405f50:	00405075 	.word	0x00405075
  405f54:	0040502d 	.word	0x0040502d
  405f58:	200026ac 	.word	0x200026ac
  405f5c:	2000266c 	.word	0x2000266c
  405f60:	00404e51 	.word	0x00404e51
  405f64:	200026b8 	.word	0x200026b8
  405f68:	200025d8 	.word	0x200025d8
  405f6c:	00404d91 	.word	0x00404d91
  405f70:	200025d4 	.word	0x200025d4
  405f74:	200026c4 	.word	0x200026c4
  405f78:	00405fb5 	.word	0x00405fb5
  405f7c:	200026c8 	.word	0x200026c8
  405f80:	00405015 	.word	0x00405015
  405f84:	0040504d 	.word	0x0040504d

00405f88 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
  405f88:	b580      	push	{r7, lr}
  405f8a:	b082      	sub	sp, #8
  405f8c:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
  405f8e:	4b06      	ldr	r3, [pc, #24]	; (405fa8 <xTaskGetTickCount+0x20>)
  405f90:	4798      	blx	r3
	{
		xTicks = xTickCount;
  405f92:	4b06      	ldr	r3, [pc, #24]	; (405fac <xTaskGetTickCount+0x24>)
  405f94:	681b      	ldr	r3, [r3, #0]
  405f96:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
  405f98:	4b05      	ldr	r3, [pc, #20]	; (405fb0 <xTaskGetTickCount+0x28>)
  405f9a:	4798      	blx	r3

	return xTicks;
  405f9c:	687b      	ldr	r3, [r7, #4]
}
  405f9e:	4618      	mov	r0, r3
  405fa0:	3708      	adds	r7, #8
  405fa2:	46bd      	mov	sp, r7
  405fa4:	bd80      	pop	{r7, pc}
  405fa6:	bf00      	nop
  405fa8:	0040502d 	.word	0x0040502d
  405fac:	200026b0 	.word	0x200026b0
  405fb0:	0040504d 	.word	0x0040504d

00405fb4 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
  405fb4:	b580      	push	{r7, lr}
  405fb6:	b084      	sub	sp, #16
  405fb8:	af00      	add	r7, sp, #0

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  405fba:	4b45      	ldr	r3, [pc, #276]	; (4060d0 <vTaskIncrementTick+0x11c>)
  405fbc:	681b      	ldr	r3, [r3, #0]
  405fbe:	2b00      	cmp	r3, #0
  405fc0:	d17b      	bne.n	4060ba <vTaskIncrementTick+0x106>
	{
		++xTickCount;
  405fc2:	4b44      	ldr	r3, [pc, #272]	; (4060d4 <vTaskIncrementTick+0x120>)
  405fc4:	681b      	ldr	r3, [r3, #0]
  405fc6:	3301      	adds	r3, #1
  405fc8:	4a42      	ldr	r2, [pc, #264]	; (4060d4 <vTaskIncrementTick+0x120>)
  405fca:	6013      	str	r3, [r2, #0]
		if( xTickCount == ( portTickType ) 0U )
  405fcc:	4b41      	ldr	r3, [pc, #260]	; (4060d4 <vTaskIncrementTick+0x120>)
  405fce:	681b      	ldr	r3, [r3, #0]
  405fd0:	2b00      	cmp	r3, #0
  405fd2:	d12a      	bne.n	40602a <vTaskIncrementTick+0x76>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  405fd4:	4b40      	ldr	r3, [pc, #256]	; (4060d8 <vTaskIncrementTick+0x124>)
  405fd6:	681b      	ldr	r3, [r3, #0]
  405fd8:	681b      	ldr	r3, [r3, #0]
  405fda:	2b00      	cmp	r3, #0
  405fdc:	d003      	beq.n	405fe6 <vTaskIncrementTick+0x32>
  405fde:	4b3f      	ldr	r3, [pc, #252]	; (4060dc <vTaskIncrementTick+0x128>)
  405fe0:	4798      	blx	r3
  405fe2:	bf00      	nop
  405fe4:	e7fd      	b.n	405fe2 <vTaskIncrementTick+0x2e>

			pxTemp = pxDelayedTaskList;
  405fe6:	4b3c      	ldr	r3, [pc, #240]	; (4060d8 <vTaskIncrementTick+0x124>)
  405fe8:	681b      	ldr	r3, [r3, #0]
  405fea:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  405fec:	4b3c      	ldr	r3, [pc, #240]	; (4060e0 <vTaskIncrementTick+0x12c>)
  405fee:	681b      	ldr	r3, [r3, #0]
  405ff0:	4a39      	ldr	r2, [pc, #228]	; (4060d8 <vTaskIncrementTick+0x124>)
  405ff2:	6013      	str	r3, [r2, #0]
			pxOverflowDelayedTaskList = pxTemp;
  405ff4:	4a3a      	ldr	r2, [pc, #232]	; (4060e0 <vTaskIncrementTick+0x12c>)
  405ff6:	68fb      	ldr	r3, [r7, #12]
  405ff8:	6013      	str	r3, [r2, #0]
			xNumOfOverflows++;
  405ffa:	4b3a      	ldr	r3, [pc, #232]	; (4060e4 <vTaskIncrementTick+0x130>)
  405ffc:	681b      	ldr	r3, [r3, #0]
  405ffe:	3301      	adds	r3, #1
  406000:	4a38      	ldr	r2, [pc, #224]	; (4060e4 <vTaskIncrementTick+0x130>)
  406002:	6013      	str	r3, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  406004:	4b34      	ldr	r3, [pc, #208]	; (4060d8 <vTaskIncrementTick+0x124>)
  406006:	681b      	ldr	r3, [r3, #0]
  406008:	681b      	ldr	r3, [r3, #0]
  40600a:	2b00      	cmp	r3, #0
  40600c:	d104      	bne.n	406018 <vTaskIncrementTick+0x64>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  40600e:	4b36      	ldr	r3, [pc, #216]	; (4060e8 <vTaskIncrementTick+0x134>)
  406010:	f04f 32ff 	mov.w	r2, #4294967295
  406014:	601a      	str	r2, [r3, #0]
  406016:	e008      	b.n	40602a <vTaskIncrementTick+0x76>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  406018:	4b2f      	ldr	r3, [pc, #188]	; (4060d8 <vTaskIncrementTick+0x124>)
  40601a:	681b      	ldr	r3, [r3, #0]
  40601c:	68db      	ldr	r3, [r3, #12]
  40601e:	68db      	ldr	r3, [r3, #12]
  406020:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  406022:	68bb      	ldr	r3, [r7, #8]
  406024:	685b      	ldr	r3, [r3, #4]
  406026:	4a30      	ldr	r2, [pc, #192]	; (4060e8 <vTaskIncrementTick+0x134>)
  406028:	6013      	str	r3, [r2, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  40602a:	4b2a      	ldr	r3, [pc, #168]	; (4060d4 <vTaskIncrementTick+0x120>)
  40602c:	681a      	ldr	r2, [r3, #0]
  40602e:	4b2e      	ldr	r3, [pc, #184]	; (4060e8 <vTaskIncrementTick+0x134>)
  406030:	681b      	ldr	r3, [r3, #0]
  406032:	429a      	cmp	r2, r3
  406034:	d347      	bcc.n	4060c6 <vTaskIncrementTick+0x112>
  406036:	4b28      	ldr	r3, [pc, #160]	; (4060d8 <vTaskIncrementTick+0x124>)
  406038:	681b      	ldr	r3, [r3, #0]
  40603a:	681b      	ldr	r3, [r3, #0]
  40603c:	2b00      	cmp	r3, #0
  40603e:	d104      	bne.n	40604a <vTaskIncrementTick+0x96>
  406040:	4b29      	ldr	r3, [pc, #164]	; (4060e8 <vTaskIncrementTick+0x134>)
  406042:	f04f 32ff 	mov.w	r2, #4294967295
  406046:	601a      	str	r2, [r3, #0]
  406048:	e03d      	b.n	4060c6 <vTaskIncrementTick+0x112>
  40604a:	4b23      	ldr	r3, [pc, #140]	; (4060d8 <vTaskIncrementTick+0x124>)
  40604c:	681b      	ldr	r3, [r3, #0]
  40604e:	68db      	ldr	r3, [r3, #12]
  406050:	68db      	ldr	r3, [r3, #12]
  406052:	60bb      	str	r3, [r7, #8]
  406054:	68bb      	ldr	r3, [r7, #8]
  406056:	685b      	ldr	r3, [r3, #4]
  406058:	607b      	str	r3, [r7, #4]
  40605a:	4b1e      	ldr	r3, [pc, #120]	; (4060d4 <vTaskIncrementTick+0x120>)
  40605c:	681a      	ldr	r2, [r3, #0]
  40605e:	687b      	ldr	r3, [r7, #4]
  406060:	429a      	cmp	r2, r3
  406062:	d203      	bcs.n	40606c <vTaskIncrementTick+0xb8>
  406064:	4a20      	ldr	r2, [pc, #128]	; (4060e8 <vTaskIncrementTick+0x134>)
  406066:	687b      	ldr	r3, [r7, #4]
  406068:	6013      	str	r3, [r2, #0]
  40606a:	e02c      	b.n	4060c6 <vTaskIncrementTick+0x112>
  40606c:	68bb      	ldr	r3, [r7, #8]
  40606e:	3304      	adds	r3, #4
  406070:	4618      	mov	r0, r3
  406072:	4b1e      	ldr	r3, [pc, #120]	; (4060ec <vTaskIncrementTick+0x138>)
  406074:	4798      	blx	r3
  406076:	68bb      	ldr	r3, [r7, #8]
  406078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40607a:	2b00      	cmp	r3, #0
  40607c:	d004      	beq.n	406088 <vTaskIncrementTick+0xd4>
  40607e:	68bb      	ldr	r3, [r7, #8]
  406080:	3318      	adds	r3, #24
  406082:	4618      	mov	r0, r3
  406084:	4b19      	ldr	r3, [pc, #100]	; (4060ec <vTaskIncrementTick+0x138>)
  406086:	4798      	blx	r3
  406088:	68bb      	ldr	r3, [r7, #8]
  40608a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40608c:	4b18      	ldr	r3, [pc, #96]	; (4060f0 <vTaskIncrementTick+0x13c>)
  40608e:	681b      	ldr	r3, [r3, #0]
  406090:	429a      	cmp	r2, r3
  406092:	d903      	bls.n	40609c <vTaskIncrementTick+0xe8>
  406094:	68bb      	ldr	r3, [r7, #8]
  406096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406098:	4a15      	ldr	r2, [pc, #84]	; (4060f0 <vTaskIncrementTick+0x13c>)
  40609a:	6013      	str	r3, [r2, #0]
  40609c:	68bb      	ldr	r3, [r7, #8]
  40609e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4060a0:	4613      	mov	r3, r2
  4060a2:	009b      	lsls	r3, r3, #2
  4060a4:	4413      	add	r3, r2
  4060a6:	009b      	lsls	r3, r3, #2
  4060a8:	4a12      	ldr	r2, [pc, #72]	; (4060f4 <vTaskIncrementTick+0x140>)
  4060aa:	441a      	add	r2, r3
  4060ac:	68bb      	ldr	r3, [r7, #8]
  4060ae:	3304      	adds	r3, #4
  4060b0:	4619      	mov	r1, r3
  4060b2:	4610      	mov	r0, r2
  4060b4:	4b10      	ldr	r3, [pc, #64]	; (4060f8 <vTaskIncrementTick+0x144>)
  4060b6:	4798      	blx	r3
  4060b8:	e7bd      	b.n	406036 <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
  4060ba:	4b10      	ldr	r3, [pc, #64]	; (4060fc <vTaskIncrementTick+0x148>)
  4060bc:	681b      	ldr	r3, [r3, #0]
  4060be:	3301      	adds	r3, #1
  4060c0:	4a0e      	ldr	r2, [pc, #56]	; (4060fc <vTaskIncrementTick+0x148>)
  4060c2:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
  4060c4:	e7ff      	b.n	4060c6 <vTaskIncrementTick+0x112>
  4060c6:	bf00      	nop
  4060c8:	3710      	adds	r7, #16
  4060ca:	46bd      	mov	sp, r7
  4060cc:	bd80      	pop	{r7, pc}
  4060ce:	bf00      	nop
  4060d0:	200026c0 	.word	0x200026c0
  4060d4:	200026b0 	.word	0x200026b0
  4060d8:	20002664 	.word	0x20002664
  4060dc:	00405075 	.word	0x00405075
  4060e0:	20002668 	.word	0x20002668
  4060e4:	200026cc 	.word	0x200026cc
  4060e8:	20000030 	.word	0x20000030
  4060ec:	00404e51 	.word	0x00404e51
  4060f0:	200026b8 	.word	0x200026b8
  4060f4:	200025d8 	.word	0x200025d8
  4060f8:	00404d91 	.word	0x00404d91
  4060fc:	200026c4 	.word	0x200026c4

00406100 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  406100:	b580      	push	{r7, lr}
  406102:	b082      	sub	sp, #8
  406104:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  406106:	4b34      	ldr	r3, [pc, #208]	; (4061d8 <vTaskSwitchContext+0xd8>)
  406108:	681b      	ldr	r3, [r3, #0]
  40610a:	2b00      	cmp	r3, #0
  40610c:	d003      	beq.n	406116 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  40610e:	4b33      	ldr	r3, [pc, #204]	; (4061dc <vTaskSwitchContext+0xdc>)
  406110:	2201      	movs	r2, #1
  406112:	601a      	str	r2, [r3, #0]

		taskSELECT_HIGHEST_PRIORITY_TASK();

		traceTASK_SWITCHED_IN();
	}
}
  406114:	e05b      	b.n	4061ce <vTaskSwitchContext+0xce>
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
				ulTaskSwitchedInTime = ulTempCounter;
		}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
  406116:	4b32      	ldr	r3, [pc, #200]	; (4061e0 <vTaskSwitchContext+0xe0>)
  406118:	681b      	ldr	r3, [r3, #0]
  40611a:	681a      	ldr	r2, [r3, #0]
  40611c:	4b30      	ldr	r3, [pc, #192]	; (4061e0 <vTaskSwitchContext+0xe0>)
  40611e:	681b      	ldr	r3, [r3, #0]
  406120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406122:	429a      	cmp	r2, r3
  406124:	d808      	bhi.n	406138 <vTaskSwitchContext+0x38>
  406126:	4b2e      	ldr	r3, [pc, #184]	; (4061e0 <vTaskSwitchContext+0xe0>)
  406128:	681a      	ldr	r2, [r3, #0]
  40612a:	4b2d      	ldr	r3, [pc, #180]	; (4061e0 <vTaskSwitchContext+0xe0>)
  40612c:	681b      	ldr	r3, [r3, #0]
  40612e:	3334      	adds	r3, #52	; 0x34
  406130:	4619      	mov	r1, r3
  406132:	4610      	mov	r0, r2
  406134:	4b2b      	ldr	r3, [pc, #172]	; (4061e4 <vTaskSwitchContext+0xe4>)
  406136:	4798      	blx	r3
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
  406138:	4b29      	ldr	r3, [pc, #164]	; (4061e0 <vTaskSwitchContext+0xe0>)
  40613a:	681b      	ldr	r3, [r3, #0]
  40613c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40613e:	2214      	movs	r2, #20
  406140:	4929      	ldr	r1, [pc, #164]	; (4061e8 <vTaskSwitchContext+0xe8>)
  406142:	4618      	mov	r0, r3
  406144:	4b29      	ldr	r3, [pc, #164]	; (4061ec <vTaskSwitchContext+0xec>)
  406146:	4798      	blx	r3
  406148:	4603      	mov	r3, r0
  40614a:	2b00      	cmp	r3, #0
  40614c:	d016      	beq.n	40617c <vTaskSwitchContext+0x7c>
  40614e:	4b24      	ldr	r3, [pc, #144]	; (4061e0 <vTaskSwitchContext+0xe0>)
  406150:	681a      	ldr	r2, [r3, #0]
  406152:	4b23      	ldr	r3, [pc, #140]	; (4061e0 <vTaskSwitchContext+0xe0>)
  406154:	681b      	ldr	r3, [r3, #0]
  406156:	3334      	adds	r3, #52	; 0x34
  406158:	4619      	mov	r1, r3
  40615a:	4610      	mov	r0, r2
  40615c:	4b21      	ldr	r3, [pc, #132]	; (4061e4 <vTaskSwitchContext+0xe4>)
  40615e:	4798      	blx	r3

		taskSELECT_HIGHEST_PRIORITY_TASK();
  406160:	e00c      	b.n	40617c <vTaskSwitchContext+0x7c>
  406162:	4b23      	ldr	r3, [pc, #140]	; (4061f0 <vTaskSwitchContext+0xf0>)
  406164:	681b      	ldr	r3, [r3, #0]
  406166:	2b00      	cmp	r3, #0
  406168:	d103      	bne.n	406172 <vTaskSwitchContext+0x72>
  40616a:	4b22      	ldr	r3, [pc, #136]	; (4061f4 <vTaskSwitchContext+0xf4>)
  40616c:	4798      	blx	r3
  40616e:	bf00      	nop
  406170:	e7fd      	b.n	40616e <vTaskSwitchContext+0x6e>
  406172:	4b1f      	ldr	r3, [pc, #124]	; (4061f0 <vTaskSwitchContext+0xf0>)
  406174:	681b      	ldr	r3, [r3, #0]
  406176:	3b01      	subs	r3, #1
  406178:	4a1d      	ldr	r2, [pc, #116]	; (4061f0 <vTaskSwitchContext+0xf0>)
  40617a:	6013      	str	r3, [r2, #0]
  40617c:	4b1c      	ldr	r3, [pc, #112]	; (4061f0 <vTaskSwitchContext+0xf0>)
  40617e:	681a      	ldr	r2, [r3, #0]
  406180:	491d      	ldr	r1, [pc, #116]	; (4061f8 <vTaskSwitchContext+0xf8>)
  406182:	4613      	mov	r3, r2
  406184:	009b      	lsls	r3, r3, #2
  406186:	4413      	add	r3, r2
  406188:	009b      	lsls	r3, r3, #2
  40618a:	440b      	add	r3, r1
  40618c:	681b      	ldr	r3, [r3, #0]
  40618e:	2b00      	cmp	r3, #0
  406190:	d0e7      	beq.n	406162 <vTaskSwitchContext+0x62>
  406192:	4b17      	ldr	r3, [pc, #92]	; (4061f0 <vTaskSwitchContext+0xf0>)
  406194:	681a      	ldr	r2, [r3, #0]
  406196:	4613      	mov	r3, r2
  406198:	009b      	lsls	r3, r3, #2
  40619a:	4413      	add	r3, r2
  40619c:	009b      	lsls	r3, r3, #2
  40619e:	4a16      	ldr	r2, [pc, #88]	; (4061f8 <vTaskSwitchContext+0xf8>)
  4061a0:	4413      	add	r3, r2
  4061a2:	607b      	str	r3, [r7, #4]
  4061a4:	687b      	ldr	r3, [r7, #4]
  4061a6:	685b      	ldr	r3, [r3, #4]
  4061a8:	685a      	ldr	r2, [r3, #4]
  4061aa:	687b      	ldr	r3, [r7, #4]
  4061ac:	605a      	str	r2, [r3, #4]
  4061ae:	687b      	ldr	r3, [r7, #4]
  4061b0:	685a      	ldr	r2, [r3, #4]
  4061b2:	687b      	ldr	r3, [r7, #4]
  4061b4:	3308      	adds	r3, #8
  4061b6:	429a      	cmp	r2, r3
  4061b8:	d104      	bne.n	4061c4 <vTaskSwitchContext+0xc4>
  4061ba:	687b      	ldr	r3, [r7, #4]
  4061bc:	685b      	ldr	r3, [r3, #4]
  4061be:	685a      	ldr	r2, [r3, #4]
  4061c0:	687b      	ldr	r3, [r7, #4]
  4061c2:	605a      	str	r2, [r3, #4]
  4061c4:	687b      	ldr	r3, [r7, #4]
  4061c6:	685b      	ldr	r3, [r3, #4]
  4061c8:	68db      	ldr	r3, [r3, #12]
  4061ca:	4a05      	ldr	r2, [pc, #20]	; (4061e0 <vTaskSwitchContext+0xe0>)
  4061cc:	6013      	str	r3, [r2, #0]

		traceTASK_SWITCHED_IN();
	}
}
  4061ce:	bf00      	nop
  4061d0:	3708      	adds	r7, #8
  4061d2:	46bd      	mov	sp, r7
  4061d4:	bd80      	pop	{r7, pc}
  4061d6:	bf00      	nop
  4061d8:	200026c0 	.word	0x200026c0
  4061dc:	200026c8 	.word	0x200026c8
  4061e0:	200025d4 	.word	0x200025d4
  4061e4:	00407431 	.word	0x00407431
  4061e8:	0040b584 	.word	0x0040b584
  4061ec:	0040b19d 	.word	0x0040b19d
  4061f0:	200026b8 	.word	0x200026b8
  4061f4:	00405075 	.word	0x00405075
  4061f8:	200025d8 	.word	0x200025d8

004061fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  4061fc:	b580      	push	{r7, lr}
  4061fe:	b084      	sub	sp, #16
  406200:	af00      	add	r7, sp, #0
  406202:	6078      	str	r0, [r7, #4]
  406204:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
  406206:	687b      	ldr	r3, [r7, #4]
  406208:	2b00      	cmp	r3, #0
  40620a:	d103      	bne.n	406214 <vTaskPlaceOnEventList+0x18>
  40620c:	4b14      	ldr	r3, [pc, #80]	; (406260 <vTaskPlaceOnEventList+0x64>)
  40620e:	4798      	blx	r3
  406210:	bf00      	nop
  406212:	e7fd      	b.n	406210 <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  406214:	4b13      	ldr	r3, [pc, #76]	; (406264 <vTaskPlaceOnEventList+0x68>)
  406216:	681b      	ldr	r3, [r3, #0]
  406218:	3318      	adds	r3, #24
  40621a:	4619      	mov	r1, r3
  40621c:	6878      	ldr	r0, [r7, #4]
  40621e:	4b12      	ldr	r3, [pc, #72]	; (406268 <vTaskPlaceOnEventList+0x6c>)
  406220:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  406222:	4b10      	ldr	r3, [pc, #64]	; (406264 <vTaskPlaceOnEventList+0x68>)
  406224:	681b      	ldr	r3, [r3, #0]
  406226:	3304      	adds	r3, #4
  406228:	4618      	mov	r0, r3
  40622a:	4b10      	ldr	r3, [pc, #64]	; (40626c <vTaskPlaceOnEventList+0x70>)
  40622c:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  40622e:	683b      	ldr	r3, [r7, #0]
  406230:	f1b3 3fff 	cmp.w	r3, #4294967295
  406234:	d107      	bne.n	406246 <vTaskPlaceOnEventList+0x4a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  406236:	4b0b      	ldr	r3, [pc, #44]	; (406264 <vTaskPlaceOnEventList+0x68>)
  406238:	681b      	ldr	r3, [r3, #0]
  40623a:	3304      	adds	r3, #4
  40623c:	4619      	mov	r1, r3
  40623e:	480c      	ldr	r0, [pc, #48]	; (406270 <vTaskPlaceOnEventList+0x74>)
  406240:	4b0c      	ldr	r3, [pc, #48]	; (406274 <vTaskPlaceOnEventList+0x78>)
  406242:	4798      	blx	r3
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
  406244:	e007      	b.n	406256 <vTaskPlaceOnEventList+0x5a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
  406246:	4b0c      	ldr	r3, [pc, #48]	; (406278 <vTaskPlaceOnEventList+0x7c>)
  406248:	681a      	ldr	r2, [r3, #0]
  40624a:	683b      	ldr	r3, [r7, #0]
  40624c:	4413      	add	r3, r2
  40624e:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  406250:	68f8      	ldr	r0, [r7, #12]
  406252:	4b0a      	ldr	r3, [pc, #40]	; (40627c <vTaskPlaceOnEventList+0x80>)
  406254:	4798      	blx	r3
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
  406256:	bf00      	nop
  406258:	3710      	adds	r7, #16
  40625a:	46bd      	mov	sp, r7
  40625c:	bd80      	pop	{r7, pc}
  40625e:	bf00      	nop
  406260:	00405075 	.word	0x00405075
  406264:	200025d4 	.word	0x200025d4
  406268:	00404de1 	.word	0x00404de1
  40626c:	00404e51 	.word	0x00404e51
  406270:	20002698 	.word	0x20002698
  406274:	00404d91 	.word	0x00404d91
  406278:	200026b0 	.word	0x200026b0
  40627c:	00406645 	.word	0x00406645

00406280 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
  406280:	b580      	push	{r7, lr}
  406282:	b084      	sub	sp, #16
  406284:	af00      	add	r7, sp, #0
  406286:	6078      	str	r0, [r7, #4]
  406288:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
  40628a:	687b      	ldr	r3, [r7, #4]
  40628c:	2b00      	cmp	r3, #0
  40628e:	d103      	bne.n	406298 <vTaskPlaceOnEventListRestricted+0x18>
  406290:	4b0e      	ldr	r3, [pc, #56]	; (4062cc <vTaskPlaceOnEventListRestricted+0x4c>)
  406292:	4798      	blx	r3
  406294:	bf00      	nop
  406296:	e7fd      	b.n	406294 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  406298:	4b0d      	ldr	r3, [pc, #52]	; (4062d0 <vTaskPlaceOnEventListRestricted+0x50>)
  40629a:	681b      	ldr	r3, [r3, #0]
  40629c:	3318      	adds	r3, #24
  40629e:	4619      	mov	r1, r3
  4062a0:	6878      	ldr	r0, [r7, #4]
  4062a2:	4b0c      	ldr	r3, [pc, #48]	; (4062d4 <vTaskPlaceOnEventListRestricted+0x54>)
  4062a4:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  4062a6:	4b0a      	ldr	r3, [pc, #40]	; (4062d0 <vTaskPlaceOnEventListRestricted+0x50>)
  4062a8:	681b      	ldr	r3, [r3, #0]
  4062aa:	3304      	adds	r3, #4
  4062ac:	4618      	mov	r0, r3
  4062ae:	4b0a      	ldr	r3, [pc, #40]	; (4062d8 <vTaskPlaceOnEventListRestricted+0x58>)
  4062b0:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
  4062b2:	4b0a      	ldr	r3, [pc, #40]	; (4062dc <vTaskPlaceOnEventListRestricted+0x5c>)
  4062b4:	681a      	ldr	r2, [r3, #0]
  4062b6:	683b      	ldr	r3, [r7, #0]
  4062b8:	4413      	add	r3, r2
  4062ba:	60fb      	str	r3, [r7, #12]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  4062bc:	68f8      	ldr	r0, [r7, #12]
  4062be:	4b08      	ldr	r3, [pc, #32]	; (4062e0 <vTaskPlaceOnEventListRestricted+0x60>)
  4062c0:	4798      	blx	r3
	}
  4062c2:	bf00      	nop
  4062c4:	3710      	adds	r7, #16
  4062c6:	46bd      	mov	sp, r7
  4062c8:	bd80      	pop	{r7, pc}
  4062ca:	bf00      	nop
  4062cc:	00405075 	.word	0x00405075
  4062d0:	200025d4 	.word	0x200025d4
  4062d4:	00404d91 	.word	0x00404d91
  4062d8:	00404e51 	.word	0x00404e51
  4062dc:	200026b0 	.word	0x200026b0
  4062e0:	00406645 	.word	0x00406645

004062e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  4062e4:	b580      	push	{r7, lr}
  4062e6:	b084      	sub	sp, #16
  4062e8:	af00      	add	r7, sp, #0
  4062ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4062ec:	687b      	ldr	r3, [r7, #4]
  4062ee:	68db      	ldr	r3, [r3, #12]
  4062f0:	68db      	ldr	r3, [r3, #12]
  4062f2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
  4062f4:	68bb      	ldr	r3, [r7, #8]
  4062f6:	2b00      	cmp	r3, #0
  4062f8:	d103      	bne.n	406302 <xTaskRemoveFromEventList+0x1e>
  4062fa:	4b21      	ldr	r3, [pc, #132]	; (406380 <xTaskRemoveFromEventList+0x9c>)
  4062fc:	4798      	blx	r3
  4062fe:	bf00      	nop
  406300:	e7fd      	b.n	4062fe <xTaskRemoveFromEventList+0x1a>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  406302:	68bb      	ldr	r3, [r7, #8]
  406304:	3318      	adds	r3, #24
  406306:	4618      	mov	r0, r3
  406308:	4b1e      	ldr	r3, [pc, #120]	; (406384 <xTaskRemoveFromEventList+0xa0>)
  40630a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  40630c:	4b1e      	ldr	r3, [pc, #120]	; (406388 <xTaskRemoveFromEventList+0xa4>)
  40630e:	681b      	ldr	r3, [r3, #0]
  406310:	2b00      	cmp	r3, #0
  406312:	d11d      	bne.n	406350 <xTaskRemoveFromEventList+0x6c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  406314:	68bb      	ldr	r3, [r7, #8]
  406316:	3304      	adds	r3, #4
  406318:	4618      	mov	r0, r3
  40631a:	4b1a      	ldr	r3, [pc, #104]	; (406384 <xTaskRemoveFromEventList+0xa0>)
  40631c:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  40631e:	68bb      	ldr	r3, [r7, #8]
  406320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406322:	4b1a      	ldr	r3, [pc, #104]	; (40638c <xTaskRemoveFromEventList+0xa8>)
  406324:	681b      	ldr	r3, [r3, #0]
  406326:	429a      	cmp	r2, r3
  406328:	d903      	bls.n	406332 <xTaskRemoveFromEventList+0x4e>
  40632a:	68bb      	ldr	r3, [r7, #8]
  40632c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40632e:	4a17      	ldr	r2, [pc, #92]	; (40638c <xTaskRemoveFromEventList+0xa8>)
  406330:	6013      	str	r3, [r2, #0]
  406332:	68bb      	ldr	r3, [r7, #8]
  406334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406336:	4613      	mov	r3, r2
  406338:	009b      	lsls	r3, r3, #2
  40633a:	4413      	add	r3, r2
  40633c:	009b      	lsls	r3, r3, #2
  40633e:	4a14      	ldr	r2, [pc, #80]	; (406390 <xTaskRemoveFromEventList+0xac>)
  406340:	441a      	add	r2, r3
  406342:	68bb      	ldr	r3, [r7, #8]
  406344:	3304      	adds	r3, #4
  406346:	4619      	mov	r1, r3
  406348:	4610      	mov	r0, r2
  40634a:	4b12      	ldr	r3, [pc, #72]	; (406394 <xTaskRemoveFromEventList+0xb0>)
  40634c:	4798      	blx	r3
  40634e:	e005      	b.n	40635c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  406350:	68bb      	ldr	r3, [r7, #8]
  406352:	3318      	adds	r3, #24
  406354:	4619      	mov	r1, r3
  406356:	4810      	ldr	r0, [pc, #64]	; (406398 <xTaskRemoveFromEventList+0xb4>)
  406358:	4b0e      	ldr	r3, [pc, #56]	; (406394 <xTaskRemoveFromEventList+0xb0>)
  40635a:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40635c:	68bb      	ldr	r3, [r7, #8]
  40635e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406360:	4b0e      	ldr	r3, [pc, #56]	; (40639c <xTaskRemoveFromEventList+0xb8>)
  406362:	681b      	ldr	r3, [r3, #0]
  406364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406366:	429a      	cmp	r2, r3
  406368:	d302      	bcc.n	406370 <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
  40636a:	2301      	movs	r3, #1
  40636c:	60fb      	str	r3, [r7, #12]
  40636e:	e001      	b.n	406374 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
  406370:	2300      	movs	r3, #0
  406372:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
  406374:	68fb      	ldr	r3, [r7, #12]
}
  406376:	4618      	mov	r0, r3
  406378:	3710      	adds	r7, #16
  40637a:	46bd      	mov	sp, r7
  40637c:	bd80      	pop	{r7, pc}
  40637e:	bf00      	nop
  406380:	00405075 	.word	0x00405075
  406384:	00404e51 	.word	0x00404e51
  406388:	200026c0 	.word	0x200026c0
  40638c:	200026b8 	.word	0x200026b8
  406390:	200025d8 	.word	0x200025d8
  406394:	00404d91 	.word	0x00404d91
  406398:	2000266c 	.word	0x2000266c
  40639c:	200025d4 	.word	0x200025d4

004063a0 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  4063a0:	b580      	push	{r7, lr}
  4063a2:	b082      	sub	sp, #8
  4063a4:	af00      	add	r7, sp, #0
  4063a6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
  4063a8:	687b      	ldr	r3, [r7, #4]
  4063aa:	2b00      	cmp	r3, #0
  4063ac:	d103      	bne.n	4063b6 <vTaskSetTimeOutState+0x16>
  4063ae:	4b08      	ldr	r3, [pc, #32]	; (4063d0 <vTaskSetTimeOutState+0x30>)
  4063b0:	4798      	blx	r3
  4063b2:	bf00      	nop
  4063b4:	e7fd      	b.n	4063b2 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4063b6:	4b07      	ldr	r3, [pc, #28]	; (4063d4 <vTaskSetTimeOutState+0x34>)
  4063b8:	681a      	ldr	r2, [r3, #0]
  4063ba:	687b      	ldr	r3, [r7, #4]
  4063bc:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4063be:	4b06      	ldr	r3, [pc, #24]	; (4063d8 <vTaskSetTimeOutState+0x38>)
  4063c0:	681a      	ldr	r2, [r3, #0]
  4063c2:	687b      	ldr	r3, [r7, #4]
  4063c4:	605a      	str	r2, [r3, #4]
}
  4063c6:	bf00      	nop
  4063c8:	3708      	adds	r7, #8
  4063ca:	46bd      	mov	sp, r7
  4063cc:	bd80      	pop	{r7, pc}
  4063ce:	bf00      	nop
  4063d0:	00405075 	.word	0x00405075
  4063d4:	200026cc 	.word	0x200026cc
  4063d8:	200026b0 	.word	0x200026b0

004063dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  4063dc:	b580      	push	{r7, lr}
  4063de:	b084      	sub	sp, #16
  4063e0:	af00      	add	r7, sp, #0
  4063e2:	6078      	str	r0, [r7, #4]
  4063e4:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
  4063e6:	687b      	ldr	r3, [r7, #4]
  4063e8:	2b00      	cmp	r3, #0
  4063ea:	d103      	bne.n	4063f4 <xTaskCheckForTimeOut+0x18>
  4063ec:	4b22      	ldr	r3, [pc, #136]	; (406478 <xTaskCheckForTimeOut+0x9c>)
  4063ee:	4798      	blx	r3
  4063f0:	bf00      	nop
  4063f2:	e7fd      	b.n	4063f0 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
  4063f4:	683b      	ldr	r3, [r7, #0]
  4063f6:	2b00      	cmp	r3, #0
  4063f8:	d103      	bne.n	406402 <xTaskCheckForTimeOut+0x26>
  4063fa:	4b1f      	ldr	r3, [pc, #124]	; (406478 <xTaskCheckForTimeOut+0x9c>)
  4063fc:	4798      	blx	r3
  4063fe:	bf00      	nop
  406400:	e7fd      	b.n	4063fe <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
  406402:	4b1e      	ldr	r3, [pc, #120]	; (40647c <xTaskCheckForTimeOut+0xa0>)
  406404:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  406406:	683b      	ldr	r3, [r7, #0]
  406408:	681b      	ldr	r3, [r3, #0]
  40640a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40640e:	d102      	bne.n	406416 <xTaskCheckForTimeOut+0x3a>
			{
				xReturn = pdFALSE;
  406410:	2300      	movs	r3, #0
  406412:	60fb      	str	r3, [r7, #12]
  406414:	e029      	b.n	40646a <xTaskCheckForTimeOut+0x8e>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  406416:	687b      	ldr	r3, [r7, #4]
  406418:	681a      	ldr	r2, [r3, #0]
  40641a:	4b19      	ldr	r3, [pc, #100]	; (406480 <xTaskCheckForTimeOut+0xa4>)
  40641c:	681b      	ldr	r3, [r3, #0]
  40641e:	429a      	cmp	r2, r3
  406420:	d008      	beq.n	406434 <xTaskCheckForTimeOut+0x58>
  406422:	687b      	ldr	r3, [r7, #4]
  406424:	685a      	ldr	r2, [r3, #4]
  406426:	4b17      	ldr	r3, [pc, #92]	; (406484 <xTaskCheckForTimeOut+0xa8>)
  406428:	681b      	ldr	r3, [r3, #0]
  40642a:	429a      	cmp	r2, r3
  40642c:	d802      	bhi.n	406434 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  40642e:	2301      	movs	r3, #1
  406430:	60fb      	str	r3, [r7, #12]
  406432:	e01a      	b.n	40646a <xTaskCheckForTimeOut+0x8e>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  406434:	4b13      	ldr	r3, [pc, #76]	; (406484 <xTaskCheckForTimeOut+0xa8>)
  406436:	681a      	ldr	r2, [r3, #0]
  406438:	687b      	ldr	r3, [r7, #4]
  40643a:	685b      	ldr	r3, [r3, #4]
  40643c:	1ad2      	subs	r2, r2, r3
  40643e:	683b      	ldr	r3, [r7, #0]
  406440:	681b      	ldr	r3, [r3, #0]
  406442:	429a      	cmp	r2, r3
  406444:	d20f      	bcs.n	406466 <xTaskCheckForTimeOut+0x8a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  406446:	4b0f      	ldr	r3, [pc, #60]	; (406484 <xTaskCheckForTimeOut+0xa8>)
  406448:	681a      	ldr	r2, [r3, #0]
  40644a:	687b      	ldr	r3, [r7, #4]
  40644c:	685b      	ldr	r3, [r3, #4]
  40644e:	1ad3      	subs	r3, r2, r3
  406450:	683a      	ldr	r2, [r7, #0]
  406452:	6812      	ldr	r2, [r2, #0]
  406454:	1ad2      	subs	r2, r2, r3
  406456:	683b      	ldr	r3, [r7, #0]
  406458:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
  40645a:	6878      	ldr	r0, [r7, #4]
  40645c:	4b0a      	ldr	r3, [pc, #40]	; (406488 <xTaskCheckForTimeOut+0xac>)
  40645e:	4798      	blx	r3
			xReturn = pdFALSE;
  406460:	2300      	movs	r3, #0
  406462:	60fb      	str	r3, [r7, #12]
  406464:	e001      	b.n	40646a <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			xReturn = pdTRUE;
  406466:	2301      	movs	r3, #1
  406468:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
  40646a:	4b08      	ldr	r3, [pc, #32]	; (40648c <xTaskCheckForTimeOut+0xb0>)
  40646c:	4798      	blx	r3

	return xReturn;
  40646e:	68fb      	ldr	r3, [r7, #12]
}
  406470:	4618      	mov	r0, r3
  406472:	3710      	adds	r7, #16
  406474:	46bd      	mov	sp, r7
  406476:	bd80      	pop	{r7, pc}
  406478:	00405075 	.word	0x00405075
  40647c:	0040502d 	.word	0x0040502d
  406480:	200026cc 	.word	0x200026cc
  406484:	200026b0 	.word	0x200026b0
  406488:	004063a1 	.word	0x004063a1
  40648c:	0040504d 	.word	0x0040504d

00406490 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
  406490:	b480      	push	{r7}
  406492:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
  406494:	4b03      	ldr	r3, [pc, #12]	; (4064a4 <vTaskMissedYield+0x14>)
  406496:	2201      	movs	r2, #1
  406498:	601a      	str	r2, [r3, #0]
}
  40649a:	bf00      	nop
  40649c:	46bd      	mov	sp, r7
  40649e:	bc80      	pop	{r7}
  4064a0:	4770      	bx	lr
  4064a2:	bf00      	nop
  4064a4:	200026c8 	.word	0x200026c8

004064a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  4064a8:	b580      	push	{r7, lr}
  4064aa:	b082      	sub	sp, #8
  4064ac:	af00      	add	r7, sp, #0
  4064ae:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
  4064b0:	4b01      	ldr	r3, [pc, #4]	; (4064b8 <prvIdleTask+0x10>)
  4064b2:	4798      	blx	r3
				}
				xTaskResumeAll();
			}
		}
		#endif
	}
  4064b4:	e7fc      	b.n	4064b0 <prvIdleTask+0x8>
  4064b6:	bf00      	nop
  4064b8:	004065b5 	.word	0x004065b5

004064bc <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
  4064bc:	b580      	push	{r7, lr}
  4064be:	b084      	sub	sp, #16
  4064c0:	af00      	add	r7, sp, #0
  4064c2:	60f8      	str	r0, [r7, #12]
  4064c4:	60b9      	str	r1, [r7, #8]
  4064c6:	607a      	str	r2, [r7, #4]
  4064c8:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  4064ca:	68fb      	ldr	r3, [r7, #12]
  4064cc:	3334      	adds	r3, #52	; 0x34
  4064ce:	220c      	movs	r2, #12
  4064d0:	68b9      	ldr	r1, [r7, #8]
  4064d2:	4618      	mov	r0, r3
  4064d4:	4b14      	ldr	r3, [pc, #80]	; (406528 <prvInitialiseTCBVariables+0x6c>)
  4064d6:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  4064d8:	68fb      	ldr	r3, [r7, #12]
  4064da:	2200      	movs	r2, #0
  4064dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
  4064e0:	687b      	ldr	r3, [r7, #4]
  4064e2:	2b04      	cmp	r3, #4
  4064e4:	d901      	bls.n	4064ea <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
  4064e6:	2304      	movs	r3, #4
  4064e8:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
  4064ea:	68fb      	ldr	r3, [r7, #12]
  4064ec:	687a      	ldr	r2, [r7, #4]
  4064ee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  4064f0:	68fb      	ldr	r3, [r7, #12]
  4064f2:	687a      	ldr	r2, [r7, #4]
  4064f4:	641a      	str	r2, [r3, #64]	; 0x40
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4064f6:	68fb      	ldr	r3, [r7, #12]
  4064f8:	3304      	adds	r3, #4
  4064fa:	4618      	mov	r0, r3
  4064fc:	4b0b      	ldr	r3, [pc, #44]	; (40652c <prvInitialiseTCBVariables+0x70>)
  4064fe:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  406500:	68fb      	ldr	r3, [r7, #12]
  406502:	3318      	adds	r3, #24
  406504:	4618      	mov	r0, r3
  406506:	4b09      	ldr	r3, [pc, #36]	; (40652c <prvInitialiseTCBVariables+0x70>)
  406508:	4798      	blx	r3

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  40650a:	68fb      	ldr	r3, [r7, #12]
  40650c:	68fa      	ldr	r2, [r7, #12]
  40650e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  406510:	687b      	ldr	r3, [r7, #4]
  406512:	f1c3 0205 	rsb	r2, r3, #5
  406516:	68fb      	ldr	r3, [r7, #12]
  406518:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  40651a:	68fb      	ldr	r3, [r7, #12]
  40651c:	68fa      	ldr	r2, [r7, #12]
  40651e:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
  406520:	bf00      	nop
  406522:	3710      	adds	r7, #16
  406524:	46bd      	mov	sp, r7
  406526:	bd80      	pop	{r7, pc}
  406528:	0040b3d1 	.word	0x0040b3d1
  40652c:	00404d79 	.word	0x00404d79

00406530 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
  406530:	b580      	push	{r7, lr}
  406532:	b082      	sub	sp, #8
  406534:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  406536:	2300      	movs	r3, #0
  406538:	607b      	str	r3, [r7, #4]
  40653a:	e00c      	b.n	406556 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  40653c:	687a      	ldr	r2, [r7, #4]
  40653e:	4613      	mov	r3, r2
  406540:	009b      	lsls	r3, r3, #2
  406542:	4413      	add	r3, r2
  406544:	009b      	lsls	r3, r3, #2
  406546:	4a12      	ldr	r2, [pc, #72]	; (406590 <prvInitialiseTaskLists+0x60>)
  406548:	4413      	add	r3, r2
  40654a:	4618      	mov	r0, r3
  40654c:	4b11      	ldr	r3, [pc, #68]	; (406594 <prvInitialiseTaskLists+0x64>)
  40654e:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  406550:	687b      	ldr	r3, [r7, #4]
  406552:	3301      	adds	r3, #1
  406554:	607b      	str	r3, [r7, #4]
  406556:	687b      	ldr	r3, [r7, #4]
  406558:	2b04      	cmp	r3, #4
  40655a:	d9ef      	bls.n	40653c <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  40655c:	480e      	ldr	r0, [pc, #56]	; (406598 <prvInitialiseTaskLists+0x68>)
  40655e:	4b0d      	ldr	r3, [pc, #52]	; (406594 <prvInitialiseTaskLists+0x64>)
  406560:	4798      	blx	r3
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  406562:	480e      	ldr	r0, [pc, #56]	; (40659c <prvInitialiseTaskLists+0x6c>)
  406564:	4b0b      	ldr	r3, [pc, #44]	; (406594 <prvInitialiseTaskLists+0x64>)
  406566:	4798      	blx	r3
	vListInitialise( ( xList * ) &xPendingReadyList );
  406568:	480d      	ldr	r0, [pc, #52]	; (4065a0 <prvInitialiseTaskLists+0x70>)
  40656a:	4b0a      	ldr	r3, [pc, #40]	; (406594 <prvInitialiseTaskLists+0x64>)
  40656c:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  40656e:	480d      	ldr	r0, [pc, #52]	; (4065a4 <prvInitialiseTaskLists+0x74>)
  406570:	4b08      	ldr	r3, [pc, #32]	; (406594 <prvInitialiseTaskLists+0x64>)
  406572:	4798      	blx	r3
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  406574:	480c      	ldr	r0, [pc, #48]	; (4065a8 <prvInitialiseTaskLists+0x78>)
  406576:	4b07      	ldr	r3, [pc, #28]	; (406594 <prvInitialiseTaskLists+0x64>)
  406578:	4798      	blx	r3
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  40657a:	4b0c      	ldr	r3, [pc, #48]	; (4065ac <prvInitialiseTaskLists+0x7c>)
  40657c:	4a06      	ldr	r2, [pc, #24]	; (406598 <prvInitialiseTaskLists+0x68>)
  40657e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  406580:	4b0b      	ldr	r3, [pc, #44]	; (4065b0 <prvInitialiseTaskLists+0x80>)
  406582:	4a06      	ldr	r2, [pc, #24]	; (40659c <prvInitialiseTaskLists+0x6c>)
  406584:	601a      	str	r2, [r3, #0]
}
  406586:	bf00      	nop
  406588:	3708      	adds	r7, #8
  40658a:	46bd      	mov	sp, r7
  40658c:	bd80      	pop	{r7, pc}
  40658e:	bf00      	nop
  406590:	200025d8 	.word	0x200025d8
  406594:	00404d39 	.word	0x00404d39
  406598:	2000263c 	.word	0x2000263c
  40659c:	20002650 	.word	0x20002650
  4065a0:	2000266c 	.word	0x2000266c
  4065a4:	20002680 	.word	0x20002680
  4065a8:	20002698 	.word	0x20002698
  4065ac:	20002664 	.word	0x20002664
  4065b0:	20002668 	.word	0x20002668

004065b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
  4065b4:	b580      	push	{r7, lr}
  4065b6:	b082      	sub	sp, #8
  4065b8:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  4065ba:	e028      	b.n	40660e <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
  4065bc:	4b18      	ldr	r3, [pc, #96]	; (406620 <prvCheckTasksWaitingTermination+0x6c>)
  4065be:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4065c0:	4b18      	ldr	r3, [pc, #96]	; (406624 <prvCheckTasksWaitingTermination+0x70>)
  4065c2:	681b      	ldr	r3, [r3, #0]
  4065c4:	2b00      	cmp	r3, #0
  4065c6:	bf0c      	ite	eq
  4065c8:	2301      	moveq	r3, #1
  4065ca:	2300      	movne	r3, #0
  4065cc:	b2db      	uxtb	r3, r3
  4065ce:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
  4065d0:	4b15      	ldr	r3, [pc, #84]	; (406628 <prvCheckTasksWaitingTermination+0x74>)
  4065d2:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
  4065d4:	687b      	ldr	r3, [r7, #4]
  4065d6:	2b00      	cmp	r3, #0
  4065d8:	d119      	bne.n	40660e <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  4065da:	4b14      	ldr	r3, [pc, #80]	; (40662c <prvCheckTasksWaitingTermination+0x78>)
  4065dc:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  4065de:	4b11      	ldr	r3, [pc, #68]	; (406624 <prvCheckTasksWaitingTermination+0x70>)
  4065e0:	68db      	ldr	r3, [r3, #12]
  4065e2:	68db      	ldr	r3, [r3, #12]
  4065e4:	603b      	str	r3, [r7, #0]
					uxListRemove( &( pxTCB->xGenericListItem ) );
  4065e6:	683b      	ldr	r3, [r7, #0]
  4065e8:	3304      	adds	r3, #4
  4065ea:	4618      	mov	r0, r3
  4065ec:	4b10      	ldr	r3, [pc, #64]	; (406630 <prvCheckTasksWaitingTermination+0x7c>)
  4065ee:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4065f0:	4b10      	ldr	r3, [pc, #64]	; (406634 <prvCheckTasksWaitingTermination+0x80>)
  4065f2:	681b      	ldr	r3, [r3, #0]
  4065f4:	3b01      	subs	r3, #1
  4065f6:	4a0f      	ldr	r2, [pc, #60]	; (406634 <prvCheckTasksWaitingTermination+0x80>)
  4065f8:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  4065fa:	4b0f      	ldr	r3, [pc, #60]	; (406638 <prvCheckTasksWaitingTermination+0x84>)
  4065fc:	681b      	ldr	r3, [r3, #0]
  4065fe:	3b01      	subs	r3, #1
  406600:	4a0d      	ldr	r2, [pc, #52]	; (406638 <prvCheckTasksWaitingTermination+0x84>)
  406602:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
  406604:	4b0d      	ldr	r3, [pc, #52]	; (40663c <prvCheckTasksWaitingTermination+0x88>)
  406606:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
  406608:	6838      	ldr	r0, [r7, #0]
  40660a:	4b0d      	ldr	r3, [pc, #52]	; (406640 <prvCheckTasksWaitingTermination+0x8c>)
  40660c:	4798      	blx	r3
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  40660e:	4b0a      	ldr	r3, [pc, #40]	; (406638 <prvCheckTasksWaitingTermination+0x84>)
  406610:	681b      	ldr	r3, [r3, #0]
  406612:	2b00      	cmp	r3, #0
  406614:	d1d2      	bne.n	4065bc <prvCheckTasksWaitingTermination+0x8>
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif
}
  406616:	bf00      	nop
  406618:	3708      	adds	r7, #8
  40661a:	46bd      	mov	sp, r7
  40661c:	bd80      	pop	{r7, pc}
  40661e:	bf00      	nop
  406620:	00405e4d 	.word	0x00405e4d
  406624:	20002680 	.word	0x20002680
  406628:	00405e69 	.word	0x00405e69
  40662c:	0040502d 	.word	0x0040502d
  406630:	00404e51 	.word	0x00404e51
  406634:	200026ac 	.word	0x200026ac
  406638:	20002694 	.word	0x20002694
  40663c:	0040504d 	.word	0x0040504d
  406640:	00406725 	.word	0x00406725

00406644 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  406644:	b580      	push	{r7, lr}
  406646:	b082      	sub	sp, #8
  406648:	af00      	add	r7, sp, #0
  40664a:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  40664c:	4b13      	ldr	r3, [pc, #76]	; (40669c <prvAddCurrentTaskToDelayedList+0x58>)
  40664e:	681b      	ldr	r3, [r3, #0]
  406650:	687a      	ldr	r2, [r7, #4]
  406652:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
  406654:	4b12      	ldr	r3, [pc, #72]	; (4066a0 <prvAddCurrentTaskToDelayedList+0x5c>)
  406656:	681b      	ldr	r3, [r3, #0]
  406658:	687a      	ldr	r2, [r7, #4]
  40665a:	429a      	cmp	r2, r3
  40665c:	d209      	bcs.n	406672 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  40665e:	4b11      	ldr	r3, [pc, #68]	; (4066a4 <prvAddCurrentTaskToDelayedList+0x60>)
  406660:	681a      	ldr	r2, [r3, #0]
  406662:	4b0e      	ldr	r3, [pc, #56]	; (40669c <prvAddCurrentTaskToDelayedList+0x58>)
  406664:	681b      	ldr	r3, [r3, #0]
  406666:	3304      	adds	r3, #4
  406668:	4619      	mov	r1, r3
  40666a:	4610      	mov	r0, r2
  40666c:	4b0e      	ldr	r3, [pc, #56]	; (4066a8 <prvAddCurrentTaskToDelayedList+0x64>)
  40666e:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
  406670:	e010      	b.n	406694 <prvAddCurrentTaskToDelayedList+0x50>
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  406672:	4b0e      	ldr	r3, [pc, #56]	; (4066ac <prvAddCurrentTaskToDelayedList+0x68>)
  406674:	681a      	ldr	r2, [r3, #0]
  406676:	4b09      	ldr	r3, [pc, #36]	; (40669c <prvAddCurrentTaskToDelayedList+0x58>)
  406678:	681b      	ldr	r3, [r3, #0]
  40667a:	3304      	adds	r3, #4
  40667c:	4619      	mov	r1, r3
  40667e:	4610      	mov	r0, r2
  406680:	4b09      	ldr	r3, [pc, #36]	; (4066a8 <prvAddCurrentTaskToDelayedList+0x64>)
  406682:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  406684:	4b0a      	ldr	r3, [pc, #40]	; (4066b0 <prvAddCurrentTaskToDelayedList+0x6c>)
  406686:	681b      	ldr	r3, [r3, #0]
  406688:	687a      	ldr	r2, [r7, #4]
  40668a:	429a      	cmp	r2, r3
  40668c:	d202      	bcs.n	406694 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
  40668e:	4a08      	ldr	r2, [pc, #32]	; (4066b0 <prvAddCurrentTaskToDelayedList+0x6c>)
  406690:	687b      	ldr	r3, [r7, #4]
  406692:	6013      	str	r3, [r2, #0]
		}
	}
}
  406694:	bf00      	nop
  406696:	3708      	adds	r7, #8
  406698:	46bd      	mov	sp, r7
  40669a:	bd80      	pop	{r7, pc}
  40669c:	200025d4 	.word	0x200025d4
  4066a0:	200026b0 	.word	0x200026b0
  4066a4:	20002668 	.word	0x20002668
  4066a8:	00404de1 	.word	0x00404de1
  4066ac:	20002664 	.word	0x20002664
  4066b0:	20000030 	.word	0x20000030

004066b4 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
  4066b4:	b580      	push	{r7, lr}
  4066b6:	b084      	sub	sp, #16
  4066b8:	af00      	add	r7, sp, #0
  4066ba:	4603      	mov	r3, r0
  4066bc:	6039      	str	r1, [r7, #0]
  4066be:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  4066c0:	2044      	movs	r0, #68	; 0x44
  4066c2:	4b15      	ldr	r3, [pc, #84]	; (406718 <prvAllocateTCBAndStack+0x64>)
  4066c4:	4798      	blx	r3
  4066c6:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
  4066c8:	68fb      	ldr	r3, [r7, #12]
  4066ca:	2b00      	cmp	r3, #0
  4066cc:	d01e      	beq.n	40670c <prvAllocateTCBAndStack+0x58>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  4066ce:	683b      	ldr	r3, [r7, #0]
  4066d0:	2b00      	cmp	r3, #0
  4066d2:	d106      	bne.n	4066e2 <prvAllocateTCBAndStack+0x2e>
  4066d4:	88fb      	ldrh	r3, [r7, #6]
  4066d6:	009b      	lsls	r3, r3, #2
  4066d8:	4618      	mov	r0, r3
  4066da:	4b0f      	ldr	r3, [pc, #60]	; (406718 <prvAllocateTCBAndStack+0x64>)
  4066dc:	4798      	blx	r3
  4066de:	4603      	mov	r3, r0
  4066e0:	e000      	b.n	4066e4 <prvAllocateTCBAndStack+0x30>
  4066e2:	683b      	ldr	r3, [r7, #0]
  4066e4:	68fa      	ldr	r2, [r7, #12]
  4066e6:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  4066e8:	68fb      	ldr	r3, [r7, #12]
  4066ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4066ec:	2b00      	cmp	r3, #0
  4066ee:	d105      	bne.n	4066fc <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  4066f0:	68f8      	ldr	r0, [r7, #12]
  4066f2:	4b0a      	ldr	r3, [pc, #40]	; (40671c <prvAllocateTCBAndStack+0x68>)
  4066f4:	4798      	blx	r3
			pxNewTCB = NULL;
  4066f6:	2300      	movs	r3, #0
  4066f8:	60fb      	str	r3, [r7, #12]
  4066fa:	e007      	b.n	40670c <prvAllocateTCBAndStack+0x58>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
  4066fc:	68fb      	ldr	r3, [r7, #12]
  4066fe:	6b18      	ldr	r0, [r3, #48]	; 0x30
  406700:	88fb      	ldrh	r3, [r7, #6]
  406702:	009b      	lsls	r3, r3, #2
  406704:	461a      	mov	r2, r3
  406706:	21a5      	movs	r1, #165	; 0xa5
  406708:	4b05      	ldr	r3, [pc, #20]	; (406720 <prvAllocateTCBAndStack+0x6c>)
  40670a:	4798      	blx	r3
		}
	}

	return pxNewTCB;
  40670c:	68fb      	ldr	r3, [r7, #12]
}
  40670e:	4618      	mov	r0, r3
  406710:	3710      	adds	r7, #16
  406712:	46bd      	mov	sp, r7
  406714:	bd80      	pop	{r7, pc}
  406716:	bf00      	nop
  406718:	00405135 	.word	0x00405135
  40671c:	00405241 	.word	0x00405241
  406720:	0040b335 	.word	0x0040b335

00406724 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
  406724:	b580      	push	{r7, lr}
  406726:	b082      	sub	sp, #8
  406728:	af00      	add	r7, sp, #0
  40672a:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  40672c:	687b      	ldr	r3, [r7, #4]
  40672e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406730:	4618      	mov	r0, r3
  406732:	4b04      	ldr	r3, [pc, #16]	; (406744 <prvDeleteTCB+0x20>)
  406734:	4798      	blx	r3
		vPortFree( pxTCB );
  406736:	6878      	ldr	r0, [r7, #4]
  406738:	4b02      	ldr	r3, [pc, #8]	; (406744 <prvDeleteTCB+0x20>)
  40673a:	4798      	blx	r3
	}
  40673c:	bf00      	nop
  40673e:	3708      	adds	r7, #8
  406740:	46bd      	mov	sp, r7
  406742:	bd80      	pop	{r7, pc}
  406744:	00405241 	.word	0x00405241

00406748 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
  406748:	b480      	push	{r7}
  40674a:	b083      	sub	sp, #12
  40674c:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  40674e:	4b04      	ldr	r3, [pc, #16]	; (406760 <xTaskGetCurrentTaskHandle+0x18>)
  406750:	681b      	ldr	r3, [r3, #0]
  406752:	607b      	str	r3, [r7, #4]

		return xReturn;
  406754:	687b      	ldr	r3, [r7, #4]
	}
  406756:	4618      	mov	r0, r3
  406758:	370c      	adds	r7, #12
  40675a:	46bd      	mov	sp, r7
  40675c:	bc80      	pop	{r7}
  40675e:	4770      	bx	lr
  406760:	200025d4 	.word	0x200025d4

00406764 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
  406764:	b480      	push	{r7}
  406766:	b083      	sub	sp, #12
  406768:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  40676a:	4b0b      	ldr	r3, [pc, #44]	; (406798 <xTaskGetSchedulerState+0x34>)
  40676c:	681b      	ldr	r3, [r3, #0]
  40676e:	2b00      	cmp	r3, #0
  406770:	d102      	bne.n	406778 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  406772:	2300      	movs	r3, #0
  406774:	607b      	str	r3, [r7, #4]
  406776:	e008      	b.n	40678a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  406778:	4b08      	ldr	r3, [pc, #32]	; (40679c <xTaskGetSchedulerState+0x38>)
  40677a:	681b      	ldr	r3, [r3, #0]
  40677c:	2b00      	cmp	r3, #0
  40677e:	d102      	bne.n	406786 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
  406780:	2301      	movs	r3, #1
  406782:	607b      	str	r3, [r7, #4]
  406784:	e001      	b.n	40678a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  406786:	2302      	movs	r3, #2
  406788:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
  40678a:	687b      	ldr	r3, [r7, #4]
	}
  40678c:	4618      	mov	r0, r3
  40678e:	370c      	adds	r7, #12
  406790:	46bd      	mov	sp, r7
  406792:	bc80      	pop	{r7}
  406794:	4770      	bx	lr
  406796:	bf00      	nop
  406798:	200026bc 	.word	0x200026bc
  40679c:	200026c0 	.word	0x200026c0

004067a0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  4067a0:	b580      	push	{r7, lr}
  4067a2:	b084      	sub	sp, #16
  4067a4:	af00      	add	r7, sp, #0
  4067a6:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  4067a8:	687b      	ldr	r3, [r7, #4]
  4067aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  4067ac:	687b      	ldr	r3, [r7, #4]
  4067ae:	2b00      	cmp	r3, #0
  4067b0:	d041      	beq.n	406836 <vTaskPriorityInherit+0x96>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  4067b2:	68fb      	ldr	r3, [r7, #12]
  4067b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4067b6:	4b22      	ldr	r3, [pc, #136]	; (406840 <vTaskPriorityInherit+0xa0>)
  4067b8:	681b      	ldr	r3, [r3, #0]
  4067ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4067bc:	429a      	cmp	r2, r3
  4067be:	d23a      	bcs.n	406836 <vTaskPriorityInherit+0x96>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  4067c0:	4b1f      	ldr	r3, [pc, #124]	; (406840 <vTaskPriorityInherit+0xa0>)
  4067c2:	681b      	ldr	r3, [r3, #0]
  4067c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4067c6:	f1c3 0205 	rsb	r2, r3, #5
  4067ca:	68fb      	ldr	r3, [r7, #12]
  4067cc:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  4067ce:	68fb      	ldr	r3, [r7, #12]
  4067d0:	6959      	ldr	r1, [r3, #20]
  4067d2:	68fb      	ldr	r3, [r7, #12]
  4067d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4067d6:	4613      	mov	r3, r2
  4067d8:	009b      	lsls	r3, r3, #2
  4067da:	4413      	add	r3, r2
  4067dc:	009b      	lsls	r3, r3, #2
  4067de:	4a19      	ldr	r2, [pc, #100]	; (406844 <vTaskPriorityInherit+0xa4>)
  4067e0:	4413      	add	r3, r2
  4067e2:	4299      	cmp	r1, r3
  4067e4:	d122      	bne.n	40682c <vTaskPriorityInherit+0x8c>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  4067e6:	68fb      	ldr	r3, [r7, #12]
  4067e8:	3304      	adds	r3, #4
  4067ea:	4618      	mov	r0, r3
  4067ec:	4b16      	ldr	r3, [pc, #88]	; (406848 <vTaskPriorityInherit+0xa8>)
  4067ee:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4067f0:	4b13      	ldr	r3, [pc, #76]	; (406840 <vTaskPriorityInherit+0xa0>)
  4067f2:	681b      	ldr	r3, [r3, #0]
  4067f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4067f6:	68fb      	ldr	r3, [r7, #12]
  4067f8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
  4067fa:	68fb      	ldr	r3, [r7, #12]
  4067fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4067fe:	4b13      	ldr	r3, [pc, #76]	; (40684c <vTaskPriorityInherit+0xac>)
  406800:	681b      	ldr	r3, [r3, #0]
  406802:	429a      	cmp	r2, r3
  406804:	d903      	bls.n	40680e <vTaskPriorityInherit+0x6e>
  406806:	68fb      	ldr	r3, [r7, #12]
  406808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40680a:	4a10      	ldr	r2, [pc, #64]	; (40684c <vTaskPriorityInherit+0xac>)
  40680c:	6013      	str	r3, [r2, #0]
  40680e:	68fb      	ldr	r3, [r7, #12]
  406810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406812:	4613      	mov	r3, r2
  406814:	009b      	lsls	r3, r3, #2
  406816:	4413      	add	r3, r2
  406818:	009b      	lsls	r3, r3, #2
  40681a:	4a0a      	ldr	r2, [pc, #40]	; (406844 <vTaskPriorityInherit+0xa4>)
  40681c:	441a      	add	r2, r3
  40681e:	68fb      	ldr	r3, [r7, #12]
  406820:	3304      	adds	r3, #4
  406822:	4619      	mov	r1, r3
  406824:	4610      	mov	r0, r2
  406826:	4b0a      	ldr	r3, [pc, #40]	; (406850 <vTaskPriorityInherit+0xb0>)
  406828:	4798      	blx	r3
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
  40682a:	e004      	b.n	406836 <vTaskPriorityInherit+0x96>
					prvAddTaskToReadyQueue( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40682c:	4b04      	ldr	r3, [pc, #16]	; (406840 <vTaskPriorityInherit+0xa0>)
  40682e:	681b      	ldr	r3, [r3, #0]
  406830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406832:	68fb      	ldr	r3, [r7, #12]
  406834:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
  406836:	bf00      	nop
  406838:	3710      	adds	r7, #16
  40683a:	46bd      	mov	sp, r7
  40683c:	bd80      	pop	{r7, pc}
  40683e:	bf00      	nop
  406840:	200025d4 	.word	0x200025d4
  406844:	200025d8 	.word	0x200025d8
  406848:	00404e51 	.word	0x00404e51
  40684c:	200026b8 	.word	0x200026b8
  406850:	00404d91 	.word	0x00404d91

00406854 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  406854:	b580      	push	{r7, lr}
  406856:	b084      	sub	sp, #16
  406858:	af00      	add	r7, sp, #0
  40685a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  40685c:	687b      	ldr	r3, [r7, #4]
  40685e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
  406860:	687b      	ldr	r3, [r7, #4]
  406862:	2b00      	cmp	r3, #0
  406864:	d02c      	beq.n	4068c0 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  406866:	68fb      	ldr	r3, [r7, #12]
  406868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40686a:	68fb      	ldr	r3, [r7, #12]
  40686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40686e:	429a      	cmp	r2, r3
  406870:	d026      	beq.n	4068c0 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  406872:	68fb      	ldr	r3, [r7, #12]
  406874:	3304      	adds	r3, #4
  406876:	4618      	mov	r0, r3
  406878:	4b13      	ldr	r3, [pc, #76]	; (4068c8 <vTaskPriorityDisinherit+0x74>)
  40687a:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  40687c:	68fb      	ldr	r3, [r7, #12]
  40687e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  406880:	68fb      	ldr	r3, [r7, #12]
  406882:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  406884:	68fb      	ldr	r3, [r7, #12]
  406886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406888:	f1c3 0205 	rsb	r2, r3, #5
  40688c:	68fb      	ldr	r3, [r7, #12]
  40688e:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
  406890:	68fb      	ldr	r3, [r7, #12]
  406892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406894:	4b0d      	ldr	r3, [pc, #52]	; (4068cc <vTaskPriorityDisinherit+0x78>)
  406896:	681b      	ldr	r3, [r3, #0]
  406898:	429a      	cmp	r2, r3
  40689a:	d903      	bls.n	4068a4 <vTaskPriorityDisinherit+0x50>
  40689c:	68fb      	ldr	r3, [r7, #12]
  40689e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4068a0:	4a0a      	ldr	r2, [pc, #40]	; (4068cc <vTaskPriorityDisinherit+0x78>)
  4068a2:	6013      	str	r3, [r2, #0]
  4068a4:	68fb      	ldr	r3, [r7, #12]
  4068a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4068a8:	4613      	mov	r3, r2
  4068aa:	009b      	lsls	r3, r3, #2
  4068ac:	4413      	add	r3, r2
  4068ae:	009b      	lsls	r3, r3, #2
  4068b0:	4a07      	ldr	r2, [pc, #28]	; (4068d0 <vTaskPriorityDisinherit+0x7c>)
  4068b2:	441a      	add	r2, r3
  4068b4:	68fb      	ldr	r3, [r7, #12]
  4068b6:	3304      	adds	r3, #4
  4068b8:	4619      	mov	r1, r3
  4068ba:	4610      	mov	r0, r2
  4068bc:	4b05      	ldr	r3, [pc, #20]	; (4068d4 <vTaskPriorityDisinherit+0x80>)
  4068be:	4798      	blx	r3
			}
		}
	}
  4068c0:	bf00      	nop
  4068c2:	3710      	adds	r7, #16
  4068c4:	46bd      	mov	sp, r7
  4068c6:	bd80      	pop	{r7, pc}
  4068c8:	00404e51 	.word	0x00404e51
  4068cc:	200026b8 	.word	0x200026b8
  4068d0:	200025d8 	.word	0x200025d8
  4068d4:	00404d91 	.word	0x00404d91

004068d8 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
  4068d8:	b590      	push	{r4, r7, lr}
  4068da:	b087      	sub	sp, #28
  4068dc:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
  4068de:	2300      	movs	r3, #0
  4068e0:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  4068e2:	4b10      	ldr	r3, [pc, #64]	; (406924 <xTimerCreateTimerTask+0x4c>)
  4068e4:	4798      	blx	r3

	if( xTimerQueue != NULL )
  4068e6:	4b10      	ldr	r3, [pc, #64]	; (406928 <xTimerCreateTimerTask+0x50>)
  4068e8:	681b      	ldr	r3, [r3, #0]
  4068ea:	2b00      	cmp	r3, #0
  4068ec:	d00e      	beq.n	40690c <xTimerCreateTimerTask+0x34>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  4068ee:	2300      	movs	r3, #0
  4068f0:	9303      	str	r3, [sp, #12]
  4068f2:	2300      	movs	r3, #0
  4068f4:	9302      	str	r3, [sp, #8]
  4068f6:	2300      	movs	r3, #0
  4068f8:	9301      	str	r3, [sp, #4]
  4068fa:	2304      	movs	r3, #4
  4068fc:	9300      	str	r3, [sp, #0]
  4068fe:	2300      	movs	r3, #0
  406900:	22c8      	movs	r2, #200	; 0xc8
  406902:	490a      	ldr	r1, [pc, #40]	; (40692c <xTimerCreateTimerTask+0x54>)
  406904:	480a      	ldr	r0, [pc, #40]	; (406930 <xTimerCreateTimerTask+0x58>)
  406906:	4c0b      	ldr	r4, [pc, #44]	; (406934 <xTimerCreateTimerTask+0x5c>)
  406908:	47a0      	blx	r4
  40690a:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
  40690c:	687b      	ldr	r3, [r7, #4]
  40690e:	2b00      	cmp	r3, #0
  406910:	d103      	bne.n	40691a <xTimerCreateTimerTask+0x42>
  406912:	4b09      	ldr	r3, [pc, #36]	; (406938 <xTimerCreateTimerTask+0x60>)
  406914:	4798      	blx	r3
  406916:	bf00      	nop
  406918:	e7fd      	b.n	406916 <xTimerCreateTimerTask+0x3e>
	return xReturn;
  40691a:	687b      	ldr	r3, [r7, #4]
}
  40691c:	4618      	mov	r0, r3
  40691e:	370c      	adds	r7, #12
  406920:	46bd      	mov	sp, r7
  406922:	bd90      	pop	{r4, r7, pc}
  406924:	00406df1 	.word	0x00406df1
  406928:	20002704 	.word	0x20002704
  40692c:	0040b598 	.word	0x0040b598
  406930:	00406a4d 	.word	0x00406a4d
  406934:	00405bad 	.word	0x00405bad
  406938:	00405075 	.word	0x00405075

0040693c <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
  40693c:	b590      	push	{r4, r7, lr}
  40693e:	b089      	sub	sp, #36	; 0x24
  406940:	af00      	add	r7, sp, #0
  406942:	60f8      	str	r0, [r7, #12]
  406944:	60b9      	str	r1, [r7, #8]
  406946:	607a      	str	r2, [r7, #4]
  406948:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
  40694a:	2300      	movs	r3, #0
  40694c:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  40694e:	4b1a      	ldr	r3, [pc, #104]	; (4069b8 <xTimerGenericCommand+0x7c>)
  406950:	681b      	ldr	r3, [r3, #0]
  406952:	2b00      	cmp	r3, #0
  406954:	d02a      	beq.n	4069ac <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  406956:	68bb      	ldr	r3, [r7, #8]
  406958:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
  40695a:	687b      	ldr	r3, [r7, #4]
  40695c:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  40695e:	68fb      	ldr	r3, [r7, #12]
  406960:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
  406962:	683b      	ldr	r3, [r7, #0]
  406964:	2b00      	cmp	r3, #0
  406966:	d118      	bne.n	40699a <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  406968:	4b14      	ldr	r3, [pc, #80]	; (4069bc <xTimerGenericCommand+0x80>)
  40696a:	4798      	blx	r3
  40696c:	4603      	mov	r3, r0
  40696e:	2b01      	cmp	r3, #1
  406970:	d109      	bne.n	406986 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  406972:	4b11      	ldr	r3, [pc, #68]	; (4069b8 <xTimerGenericCommand+0x7c>)
  406974:	6818      	ldr	r0, [r3, #0]
  406976:	f107 0110 	add.w	r1, r7, #16
  40697a:	2300      	movs	r3, #0
  40697c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  40697e:	4c10      	ldr	r4, [pc, #64]	; (4069c0 <xTimerGenericCommand+0x84>)
  406980:	47a0      	blx	r4
  406982:	61f8      	str	r0, [r7, #28]
  406984:	e012      	b.n	4069ac <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  406986:	4b0c      	ldr	r3, [pc, #48]	; (4069b8 <xTimerGenericCommand+0x7c>)
  406988:	6818      	ldr	r0, [r3, #0]
  40698a:	f107 0110 	add.w	r1, r7, #16
  40698e:	2300      	movs	r3, #0
  406990:	2200      	movs	r2, #0
  406992:	4c0b      	ldr	r4, [pc, #44]	; (4069c0 <xTimerGenericCommand+0x84>)
  406994:	47a0      	blx	r4
  406996:	61f8      	str	r0, [r7, #28]
  406998:	e008      	b.n	4069ac <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  40699a:	4b07      	ldr	r3, [pc, #28]	; (4069b8 <xTimerGenericCommand+0x7c>)
  40699c:	6818      	ldr	r0, [r3, #0]
  40699e:	f107 0110 	add.w	r1, r7, #16
  4069a2:	2300      	movs	r3, #0
  4069a4:	683a      	ldr	r2, [r7, #0]
  4069a6:	4c07      	ldr	r4, [pc, #28]	; (4069c4 <xTimerGenericCommand+0x88>)
  4069a8:	47a0      	blx	r4
  4069aa:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
  4069ac:	69fb      	ldr	r3, [r7, #28]
}
  4069ae:	4618      	mov	r0, r3
  4069b0:	3724      	adds	r7, #36	; 0x24
  4069b2:	46bd      	mov	sp, r7
  4069b4:	bd90      	pop	{r4, r7, pc}
  4069b6:	bf00      	nop
  4069b8:	20002704 	.word	0x20002704
  4069bc:	00406765 	.word	0x00406765
  4069c0:	0040552d 	.word	0x0040552d
  4069c4:	00405695 	.word	0x00405695

004069c8 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
  4069c8:	b590      	push	{r4, r7, lr}
  4069ca:	b087      	sub	sp, #28
  4069cc:	af02      	add	r7, sp, #8
  4069ce:	6078      	str	r0, [r7, #4]
  4069d0:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4069d2:	4b19      	ldr	r3, [pc, #100]	; (406a38 <prvProcessExpiredTimer+0x70>)
  4069d4:	681b      	ldr	r3, [r3, #0]
  4069d6:	68db      	ldr	r3, [r3, #12]
  4069d8:	68db      	ldr	r3, [r3, #12]
  4069da:	60fb      	str	r3, [r7, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
  4069dc:	68fb      	ldr	r3, [r7, #12]
  4069de:	3304      	adds	r3, #4
  4069e0:	4618      	mov	r0, r3
  4069e2:	4b16      	ldr	r3, [pc, #88]	; (406a3c <prvProcessExpiredTimer+0x74>)
  4069e4:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  4069e6:	68fb      	ldr	r3, [r7, #12]
  4069e8:	69db      	ldr	r3, [r3, #28]
  4069ea:	2b01      	cmp	r3, #1
  4069ec:	d11b      	bne.n	406a26 <prvProcessExpiredTimer+0x5e>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  4069ee:	68fb      	ldr	r3, [r7, #12]
  4069f0:	699a      	ldr	r2, [r3, #24]
  4069f2:	687b      	ldr	r3, [r7, #4]
  4069f4:	18d1      	adds	r1, r2, r3
  4069f6:	687b      	ldr	r3, [r7, #4]
  4069f8:	683a      	ldr	r2, [r7, #0]
  4069fa:	68f8      	ldr	r0, [r7, #12]
  4069fc:	4c10      	ldr	r4, [pc, #64]	; (406a40 <prvProcessExpiredTimer+0x78>)
  4069fe:	47a0      	blx	r4
  406a00:	4603      	mov	r3, r0
  406a02:	2b01      	cmp	r3, #1
  406a04:	d10f      	bne.n	406a26 <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  406a06:	2300      	movs	r3, #0
  406a08:	9300      	str	r3, [sp, #0]
  406a0a:	2300      	movs	r3, #0
  406a0c:	687a      	ldr	r2, [r7, #4]
  406a0e:	2100      	movs	r1, #0
  406a10:	68f8      	ldr	r0, [r7, #12]
  406a12:	4c0c      	ldr	r4, [pc, #48]	; (406a44 <prvProcessExpiredTimer+0x7c>)
  406a14:	47a0      	blx	r4
  406a16:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
  406a18:	68bb      	ldr	r3, [r7, #8]
  406a1a:	2b00      	cmp	r3, #0
  406a1c:	d103      	bne.n	406a26 <prvProcessExpiredTimer+0x5e>
  406a1e:	4b0a      	ldr	r3, [pc, #40]	; (406a48 <prvProcessExpiredTimer+0x80>)
  406a20:	4798      	blx	r3
  406a22:	bf00      	nop
  406a24:	e7fd      	b.n	406a22 <prvProcessExpiredTimer+0x5a>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  406a26:	68fb      	ldr	r3, [r7, #12]
  406a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406a2a:	68f8      	ldr	r0, [r7, #12]
  406a2c:	4798      	blx	r3
}
  406a2e:	bf00      	nop
  406a30:	3714      	adds	r7, #20
  406a32:	46bd      	mov	sp, r7
  406a34:	bd90      	pop	{r4, r7, pc}
  406a36:	bf00      	nop
  406a38:	200026fc 	.word	0x200026fc
  406a3c:	00404e51 	.word	0x00404e51
  406a40:	00406b95 	.word	0x00406b95
  406a44:	0040693d 	.word	0x0040693d
  406a48:	00405075 	.word	0x00405075

00406a4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  406a4c:	b580      	push	{r7, lr}
  406a4e:	b084      	sub	sp, #16
  406a50:	af00      	add	r7, sp, #0
  406a52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  406a54:	f107 0308 	add.w	r3, r7, #8
  406a58:	4618      	mov	r0, r3
  406a5a:	4b05      	ldr	r3, [pc, #20]	; (406a70 <prvTimerTask+0x24>)
  406a5c:	4798      	blx	r3
  406a5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  406a60:	68bb      	ldr	r3, [r7, #8]
  406a62:	4619      	mov	r1, r3
  406a64:	68f8      	ldr	r0, [r7, #12]
  406a66:	4b03      	ldr	r3, [pc, #12]	; (406a74 <prvTimerTask+0x28>)
  406a68:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
  406a6a:	4b03      	ldr	r3, [pc, #12]	; (406a78 <prvTimerTask+0x2c>)
  406a6c:	4798      	blx	r3
	}
  406a6e:	e7f1      	b.n	406a54 <prvTimerTask+0x8>
  406a70:	00406b01 	.word	0x00406b01
  406a74:	00406a7d 	.word	0x00406a7d
  406a78:	00406c1d 	.word	0x00406c1d

00406a7c <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
  406a7c:	b580      	push	{r7, lr}
  406a7e:	b084      	sub	sp, #16
  406a80:	af00      	add	r7, sp, #0
  406a82:	6078      	str	r0, [r7, #4]
  406a84:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  406a86:	4b17      	ldr	r3, [pc, #92]	; (406ae4 <prvProcessTimerOrBlockTask+0x68>)
  406a88:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  406a8a:	f107 0308 	add.w	r3, r7, #8
  406a8e:	4618      	mov	r0, r3
  406a90:	4b15      	ldr	r3, [pc, #84]	; (406ae8 <prvProcessTimerOrBlockTask+0x6c>)
  406a92:	4798      	blx	r3
  406a94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
  406a96:	68bb      	ldr	r3, [r7, #8]
  406a98:	2b00      	cmp	r3, #0
  406a9a:	d11d      	bne.n	406ad8 <prvProcessTimerOrBlockTask+0x5c>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  406a9c:	683b      	ldr	r3, [r7, #0]
  406a9e:	2b00      	cmp	r3, #0
  406aa0:	d10a      	bne.n	406ab8 <prvProcessTimerOrBlockTask+0x3c>
  406aa2:	687a      	ldr	r2, [r7, #4]
  406aa4:	68fb      	ldr	r3, [r7, #12]
  406aa6:	429a      	cmp	r2, r3
  406aa8:	d806      	bhi.n	406ab8 <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
  406aaa:	4b10      	ldr	r3, [pc, #64]	; (406aec <prvProcessTimerOrBlockTask+0x70>)
  406aac:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  406aae:	68f9      	ldr	r1, [r7, #12]
  406ab0:	6878      	ldr	r0, [r7, #4]
  406ab2:	4b0f      	ldr	r3, [pc, #60]	; (406af0 <prvProcessTimerOrBlockTask+0x74>)
  406ab4:	4798      	blx	r3
		else
		{
			xTaskResumeAll();
		}
	}
}
  406ab6:	e011      	b.n	406adc <prvProcessTimerOrBlockTask+0x60>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  406ab8:	4b0e      	ldr	r3, [pc, #56]	; (406af4 <prvProcessTimerOrBlockTask+0x78>)
  406aba:	6818      	ldr	r0, [r3, #0]
  406abc:	687a      	ldr	r2, [r7, #4]
  406abe:	68fb      	ldr	r3, [r7, #12]
  406ac0:	1ad3      	subs	r3, r2, r3
  406ac2:	4619      	mov	r1, r3
  406ac4:	4b0c      	ldr	r3, [pc, #48]	; (406af8 <prvProcessTimerOrBlockTask+0x7c>)
  406ac6:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  406ac8:	4b08      	ldr	r3, [pc, #32]	; (406aec <prvProcessTimerOrBlockTask+0x70>)
  406aca:	4798      	blx	r3
  406acc:	4603      	mov	r3, r0
  406ace:	2b00      	cmp	r3, #0
  406ad0:	d104      	bne.n	406adc <prvProcessTimerOrBlockTask+0x60>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
  406ad2:	4b0a      	ldr	r3, [pc, #40]	; (406afc <prvProcessTimerOrBlockTask+0x80>)
  406ad4:	4798      	blx	r3
		else
		{
			xTaskResumeAll();
		}
	}
}
  406ad6:	e001      	b.n	406adc <prvProcessTimerOrBlockTask+0x60>
				}
			}
		}
		else
		{
			xTaskResumeAll();
  406ad8:	4b04      	ldr	r3, [pc, #16]	; (406aec <prvProcessTimerOrBlockTask+0x70>)
  406ada:	4798      	blx	r3
		}
	}
}
  406adc:	bf00      	nop
  406ade:	3710      	adds	r7, #16
  406ae0:	46bd      	mov	sp, r7
  406ae2:	bd80      	pop	{r7, pc}
  406ae4:	00405e4d 	.word	0x00405e4d
  406ae8:	00406b49 	.word	0x00406b49
  406aec:	00405e69 	.word	0x00405e69
  406af0:	004069c9 	.word	0x004069c9
  406af4:	20002704 	.word	0x20002704
  406af8:	00405b49 	.word	0x00405b49
  406afc:	00405015 	.word	0x00405015

00406b00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
  406b00:	b480      	push	{r7}
  406b02:	b085      	sub	sp, #20
  406b04:	af00      	add	r7, sp, #0
  406b06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  406b08:	4b0e      	ldr	r3, [pc, #56]	; (406b44 <prvGetNextExpireTime+0x44>)
  406b0a:	681b      	ldr	r3, [r3, #0]
  406b0c:	681b      	ldr	r3, [r3, #0]
  406b0e:	2b00      	cmp	r3, #0
  406b10:	bf0c      	ite	eq
  406b12:	2301      	moveq	r3, #1
  406b14:	2300      	movne	r3, #0
  406b16:	b2db      	uxtb	r3, r3
  406b18:	461a      	mov	r2, r3
  406b1a:	687b      	ldr	r3, [r7, #4]
  406b1c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  406b1e:	687b      	ldr	r3, [r7, #4]
  406b20:	681b      	ldr	r3, [r3, #0]
  406b22:	2b00      	cmp	r3, #0
  406b24:	d105      	bne.n	406b32 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  406b26:	4b07      	ldr	r3, [pc, #28]	; (406b44 <prvGetNextExpireTime+0x44>)
  406b28:	681b      	ldr	r3, [r3, #0]
  406b2a:	68db      	ldr	r3, [r3, #12]
  406b2c:	681b      	ldr	r3, [r3, #0]
  406b2e:	60fb      	str	r3, [r7, #12]
  406b30:	e001      	b.n	406b36 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
  406b32:	2300      	movs	r3, #0
  406b34:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
  406b36:	68fb      	ldr	r3, [r7, #12]
}
  406b38:	4618      	mov	r0, r3
  406b3a:	3714      	adds	r7, #20
  406b3c:	46bd      	mov	sp, r7
  406b3e:	bc80      	pop	{r7}
  406b40:	4770      	bx	lr
  406b42:	bf00      	nop
  406b44:	200026fc 	.word	0x200026fc

00406b48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
  406b48:	b580      	push	{r7, lr}
  406b4a:	b084      	sub	sp, #16
  406b4c:	af00      	add	r7, sp, #0
  406b4e:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
  406b50:	4b0d      	ldr	r3, [pc, #52]	; (406b88 <prvSampleTimeNow+0x40>)
  406b52:	4798      	blx	r3
  406b54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
  406b56:	4b0d      	ldr	r3, [pc, #52]	; (406b8c <prvSampleTimeNow+0x44>)
  406b58:	681b      	ldr	r3, [r3, #0]
  406b5a:	68fa      	ldr	r2, [r7, #12]
  406b5c:	429a      	cmp	r2, r3
  406b5e:	d208      	bcs.n	406b72 <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
  406b60:	4b0a      	ldr	r3, [pc, #40]	; (406b8c <prvSampleTimeNow+0x44>)
  406b62:	681b      	ldr	r3, [r3, #0]
  406b64:	4618      	mov	r0, r3
  406b66:	4b0a      	ldr	r3, [pc, #40]	; (406b90 <prvSampleTimeNow+0x48>)
  406b68:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  406b6a:	687b      	ldr	r3, [r7, #4]
  406b6c:	2201      	movs	r2, #1
  406b6e:	601a      	str	r2, [r3, #0]
  406b70:	e002      	b.n	406b78 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  406b72:	687b      	ldr	r3, [r7, #4]
  406b74:	2200      	movs	r2, #0
  406b76:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
  406b78:	4a04      	ldr	r2, [pc, #16]	; (406b8c <prvSampleTimeNow+0x44>)
  406b7a:	68fb      	ldr	r3, [r7, #12]
  406b7c:	6013      	str	r3, [r2, #0]

	return xTimeNow;
  406b7e:	68fb      	ldr	r3, [r7, #12]
}
  406b80:	4618      	mov	r0, r3
  406b82:	3710      	adds	r7, #16
  406b84:	46bd      	mov	sp, r7
  406b86:	bd80      	pop	{r7, pc}
  406b88:	00405f89 	.word	0x00405f89
  406b8c:	20002708 	.word	0x20002708
  406b90:	00406d29 	.word	0x00406d29

00406b94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  406b94:	b580      	push	{r7, lr}
  406b96:	b086      	sub	sp, #24
  406b98:	af00      	add	r7, sp, #0
  406b9a:	60f8      	str	r0, [r7, #12]
  406b9c:	60b9      	str	r1, [r7, #8]
  406b9e:	607a      	str	r2, [r7, #4]
  406ba0:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
  406ba2:	2300      	movs	r3, #0
  406ba4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  406ba6:	68fb      	ldr	r3, [r7, #12]
  406ba8:	68ba      	ldr	r2, [r7, #8]
  406baa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  406bac:	68fb      	ldr	r3, [r7, #12]
  406bae:	68fa      	ldr	r2, [r7, #12]
  406bb0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
  406bb2:	68ba      	ldr	r2, [r7, #8]
  406bb4:	687b      	ldr	r3, [r7, #4]
  406bb6:	429a      	cmp	r2, r3
  406bb8:	d812      	bhi.n	406be0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  406bba:	687a      	ldr	r2, [r7, #4]
  406bbc:	683b      	ldr	r3, [r7, #0]
  406bbe:	1ad2      	subs	r2, r2, r3
  406bc0:	68fb      	ldr	r3, [r7, #12]
  406bc2:	699b      	ldr	r3, [r3, #24]
  406bc4:	429a      	cmp	r2, r3
  406bc6:	d302      	bcc.n	406bce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  406bc8:	2301      	movs	r3, #1
  406bca:	617b      	str	r3, [r7, #20]
  406bcc:	e01b      	b.n	406c06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  406bce:	4b10      	ldr	r3, [pc, #64]	; (406c10 <prvInsertTimerInActiveList+0x7c>)
  406bd0:	681a      	ldr	r2, [r3, #0]
  406bd2:	68fb      	ldr	r3, [r7, #12]
  406bd4:	3304      	adds	r3, #4
  406bd6:	4619      	mov	r1, r3
  406bd8:	4610      	mov	r0, r2
  406bda:	4b0e      	ldr	r3, [pc, #56]	; (406c14 <prvInsertTimerInActiveList+0x80>)
  406bdc:	4798      	blx	r3
  406bde:	e012      	b.n	406c06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  406be0:	687a      	ldr	r2, [r7, #4]
  406be2:	683b      	ldr	r3, [r7, #0]
  406be4:	429a      	cmp	r2, r3
  406be6:	d206      	bcs.n	406bf6 <prvInsertTimerInActiveList+0x62>
  406be8:	68ba      	ldr	r2, [r7, #8]
  406bea:	683b      	ldr	r3, [r7, #0]
  406bec:	429a      	cmp	r2, r3
  406bee:	d302      	bcc.n	406bf6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  406bf0:	2301      	movs	r3, #1
  406bf2:	617b      	str	r3, [r7, #20]
  406bf4:	e007      	b.n	406c06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  406bf6:	4b08      	ldr	r3, [pc, #32]	; (406c18 <prvInsertTimerInActiveList+0x84>)
  406bf8:	681a      	ldr	r2, [r3, #0]
  406bfa:	68fb      	ldr	r3, [r7, #12]
  406bfc:	3304      	adds	r3, #4
  406bfe:	4619      	mov	r1, r3
  406c00:	4610      	mov	r0, r2
  406c02:	4b04      	ldr	r3, [pc, #16]	; (406c14 <prvInsertTimerInActiveList+0x80>)
  406c04:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
  406c06:	697b      	ldr	r3, [r7, #20]
}
  406c08:	4618      	mov	r0, r3
  406c0a:	3718      	adds	r7, #24
  406c0c:	46bd      	mov	sp, r7
  406c0e:	bd80      	pop	{r7, pc}
  406c10:	20002700 	.word	0x20002700
  406c14:	00404de1 	.word	0x00404de1
  406c18:	200026fc 	.word	0x200026fc

00406c1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
  406c1c:	b590      	push	{r4, r7, lr}
  406c1e:	b08b      	sub	sp, #44	; 0x2c
  406c20:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  406c22:	1d3b      	adds	r3, r7, #4
  406c24:	4618      	mov	r0, r3
  406c26:	4b38      	ldr	r3, [pc, #224]	; (406d08 <prvProcessReceivedCommands+0xec>)
  406c28:	4798      	blx	r3
  406c2a:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  406c2c:	e05d      	b.n	406cea <prvProcessReceivedCommands+0xce>
	{
		pxTimer = xMessage.pxTimer;
  406c2e:	693b      	ldr	r3, [r7, #16]
  406c30:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
  406c32:	69bb      	ldr	r3, [r7, #24]
  406c34:	2b00      	cmp	r3, #0
  406c36:	d008      	beq.n	406c4a <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  406c38:	69bb      	ldr	r3, [r7, #24]
  406c3a:	695b      	ldr	r3, [r3, #20]
  406c3c:	2b00      	cmp	r3, #0
  406c3e:	d004      	beq.n	406c4a <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
  406c40:	69bb      	ldr	r3, [r7, #24]
  406c42:	3304      	adds	r3, #4
  406c44:	4618      	mov	r0, r3
  406c46:	4b31      	ldr	r3, [pc, #196]	; (406d0c <prvProcessReceivedCommands+0xf0>)
  406c48:	4798      	blx	r3
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
  406c4a:	68bb      	ldr	r3, [r7, #8]
  406c4c:	2b03      	cmp	r3, #3
  406c4e:	d84b      	bhi.n	406ce8 <prvProcessReceivedCommands+0xcc>
  406c50:	a201      	add	r2, pc, #4	; (adr r2, 406c58 <prvProcessReceivedCommands+0x3c>)
  406c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  406c56:	bf00      	nop
  406c58:	00406c69 	.word	0x00406c69
  406c5c:	00406ceb 	.word	0x00406ceb
  406c60:	00406cb7 	.word	0x00406cb7
  406c64:	00406ce1 	.word	0x00406ce1
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  406c68:	68fa      	ldr	r2, [r7, #12]
  406c6a:	69bb      	ldr	r3, [r7, #24]
  406c6c:	699b      	ldr	r3, [r3, #24]
  406c6e:	18d1      	adds	r1, r2, r3
  406c70:	68fb      	ldr	r3, [r7, #12]
  406c72:	69fa      	ldr	r2, [r7, #28]
  406c74:	69b8      	ldr	r0, [r7, #24]
  406c76:	4c26      	ldr	r4, [pc, #152]	; (406d10 <prvProcessReceivedCommands+0xf4>)
  406c78:	47a0      	blx	r4
  406c7a:	4603      	mov	r3, r0
  406c7c:	2b01      	cmp	r3, #1
  406c7e:	d134      	bne.n	406cea <prvProcessReceivedCommands+0xce>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  406c80:	69bb      	ldr	r3, [r7, #24]
  406c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406c84:	69b8      	ldr	r0, [r7, #24]
  406c86:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  406c88:	69bb      	ldr	r3, [r7, #24]
  406c8a:	69db      	ldr	r3, [r3, #28]
  406c8c:	2b01      	cmp	r3, #1
  406c8e:	d12c      	bne.n	406cea <prvProcessReceivedCommands+0xce>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  406c90:	68fa      	ldr	r2, [r7, #12]
  406c92:	69bb      	ldr	r3, [r7, #24]
  406c94:	699b      	ldr	r3, [r3, #24]
  406c96:	441a      	add	r2, r3
  406c98:	2300      	movs	r3, #0
  406c9a:	9300      	str	r3, [sp, #0]
  406c9c:	2300      	movs	r3, #0
  406c9e:	2100      	movs	r1, #0
  406ca0:	69b8      	ldr	r0, [r7, #24]
  406ca2:	4c1c      	ldr	r4, [pc, #112]	; (406d14 <prvProcessReceivedCommands+0xf8>)
  406ca4:	47a0      	blx	r4
  406ca6:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
  406ca8:	697b      	ldr	r3, [r7, #20]
  406caa:	2b00      	cmp	r3, #0
  406cac:	d11d      	bne.n	406cea <prvProcessReceivedCommands+0xce>
  406cae:	4b1a      	ldr	r3, [pc, #104]	; (406d18 <prvProcessReceivedCommands+0xfc>)
  406cb0:	4798      	blx	r3
  406cb2:	bf00      	nop
  406cb4:	e7fd      	b.n	406cb2 <prvProcessReceivedCommands+0x96>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  406cb6:	68fa      	ldr	r2, [r7, #12]
  406cb8:	69bb      	ldr	r3, [r7, #24]
  406cba:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  406cbc:	69bb      	ldr	r3, [r7, #24]
  406cbe:	699b      	ldr	r3, [r3, #24]
  406cc0:	2b00      	cmp	r3, #0
  406cc2:	d103      	bne.n	406ccc <prvProcessReceivedCommands+0xb0>
  406cc4:	4b14      	ldr	r3, [pc, #80]	; (406d18 <prvProcessReceivedCommands+0xfc>)
  406cc6:	4798      	blx	r3
  406cc8:	bf00      	nop
  406cca:	e7fd      	b.n	406cc8 <prvProcessReceivedCommands+0xac>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  406ccc:	69bb      	ldr	r3, [r7, #24]
  406cce:	699a      	ldr	r2, [r3, #24]
  406cd0:	69fb      	ldr	r3, [r7, #28]
  406cd2:	18d1      	adds	r1, r2, r3
  406cd4:	69fb      	ldr	r3, [r7, #28]
  406cd6:	69fa      	ldr	r2, [r7, #28]
  406cd8:	69b8      	ldr	r0, [r7, #24]
  406cda:	4c0d      	ldr	r4, [pc, #52]	; (406d10 <prvProcessReceivedCommands+0xf4>)
  406cdc:	47a0      	blx	r4
				break;
  406cde:	e004      	b.n	406cea <prvProcessReceivedCommands+0xce>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
  406ce0:	69b8      	ldr	r0, [r7, #24]
  406ce2:	4b0e      	ldr	r3, [pc, #56]	; (406d1c <prvProcessReceivedCommands+0x100>)
  406ce4:	4798      	blx	r3
				break;
  406ce6:	e000      	b.n	406cea <prvProcessReceivedCommands+0xce>

			default	:
				/* Don't expect to get here. */
				break;
  406ce8:	bf00      	nop

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  406cea:	4b0d      	ldr	r3, [pc, #52]	; (406d20 <prvProcessReceivedCommands+0x104>)
  406cec:	6818      	ldr	r0, [r3, #0]
  406cee:	f107 0108 	add.w	r1, r7, #8
  406cf2:	2300      	movs	r3, #0
  406cf4:	2200      	movs	r2, #0
  406cf6:	4c0b      	ldr	r4, [pc, #44]	; (406d24 <prvProcessReceivedCommands+0x108>)
  406cf8:	47a0      	blx	r4
  406cfa:	4603      	mov	r3, r0
  406cfc:	2b00      	cmp	r3, #0
  406cfe:	d196      	bne.n	406c2e <prvProcessReceivedCommands+0x12>
			default	:
				/* Don't expect to get here. */
				break;
		}
	}
}
  406d00:	bf00      	nop
  406d02:	3724      	adds	r7, #36	; 0x24
  406d04:	46bd      	mov	sp, r7
  406d06:	bd90      	pop	{r4, r7, pc}
  406d08:	00406b49 	.word	0x00406b49
  406d0c:	00404e51 	.word	0x00404e51
  406d10:	00406b95 	.word	0x00406b95
  406d14:	0040693d 	.word	0x0040693d
  406d18:	00405075 	.word	0x00405075
  406d1c:	00405241 	.word	0x00405241
  406d20:	20002704 	.word	0x20002704
  406d24:	00405751 	.word	0x00405751

00406d28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
  406d28:	b590      	push	{r4, r7, lr}
  406d2a:	b08b      	sub	sp, #44	; 0x2c
  406d2c:	af02      	add	r7, sp, #8
  406d2e:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  406d30:	e03e      	b.n	406db0 <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  406d32:	4b29      	ldr	r3, [pc, #164]	; (406dd8 <prvSwitchTimerLists+0xb0>)
  406d34:	681b      	ldr	r3, [r3, #0]
  406d36:	68db      	ldr	r3, [r3, #12]
  406d38:	681b      	ldr	r3, [r3, #0]
  406d3a:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  406d3c:	4b26      	ldr	r3, [pc, #152]	; (406dd8 <prvSwitchTimerLists+0xb0>)
  406d3e:	681b      	ldr	r3, [r3, #0]
  406d40:	68db      	ldr	r3, [r3, #12]
  406d42:	68db      	ldr	r3, [r3, #12]
  406d44:	61bb      	str	r3, [r7, #24]
		uxListRemove( &( pxTimer->xTimerListItem ) );
  406d46:	69bb      	ldr	r3, [r7, #24]
  406d48:	3304      	adds	r3, #4
  406d4a:	4618      	mov	r0, r3
  406d4c:	4b23      	ldr	r3, [pc, #140]	; (406ddc <prvSwitchTimerLists+0xb4>)
  406d4e:	4798      	blx	r3

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  406d50:	69bb      	ldr	r3, [r7, #24]
  406d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406d54:	69b8      	ldr	r0, [r7, #24]
  406d56:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  406d58:	69bb      	ldr	r3, [r7, #24]
  406d5a:	69db      	ldr	r3, [r3, #28]
  406d5c:	2b01      	cmp	r3, #1
  406d5e:	d127      	bne.n	406db0 <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  406d60:	69bb      	ldr	r3, [r7, #24]
  406d62:	699a      	ldr	r2, [r3, #24]
  406d64:	69fb      	ldr	r3, [r7, #28]
  406d66:	4413      	add	r3, r2
  406d68:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
  406d6a:	697a      	ldr	r2, [r7, #20]
  406d6c:	69fb      	ldr	r3, [r7, #28]
  406d6e:	429a      	cmp	r2, r3
  406d70:	d90e      	bls.n	406d90 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  406d72:	69bb      	ldr	r3, [r7, #24]
  406d74:	697a      	ldr	r2, [r7, #20]
  406d76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  406d78:	69bb      	ldr	r3, [r7, #24]
  406d7a:	69ba      	ldr	r2, [r7, #24]
  406d7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  406d7e:	4b16      	ldr	r3, [pc, #88]	; (406dd8 <prvSwitchTimerLists+0xb0>)
  406d80:	681a      	ldr	r2, [r3, #0]
  406d82:	69bb      	ldr	r3, [r7, #24]
  406d84:	3304      	adds	r3, #4
  406d86:	4619      	mov	r1, r3
  406d88:	4610      	mov	r0, r2
  406d8a:	4b15      	ldr	r3, [pc, #84]	; (406de0 <prvSwitchTimerLists+0xb8>)
  406d8c:	4798      	blx	r3
  406d8e:	e00f      	b.n	406db0 <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  406d90:	2300      	movs	r3, #0
  406d92:	9300      	str	r3, [sp, #0]
  406d94:	2300      	movs	r3, #0
  406d96:	69fa      	ldr	r2, [r7, #28]
  406d98:	2100      	movs	r1, #0
  406d9a:	69b8      	ldr	r0, [r7, #24]
  406d9c:	4c11      	ldr	r4, [pc, #68]	; (406de4 <prvSwitchTimerLists+0xbc>)
  406d9e:	47a0      	blx	r4
  406da0:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
  406da2:	693b      	ldr	r3, [r7, #16]
  406da4:	2b00      	cmp	r3, #0
  406da6:	d103      	bne.n	406db0 <prvSwitchTimerLists+0x88>
  406da8:	4b0f      	ldr	r3, [pc, #60]	; (406de8 <prvSwitchTimerLists+0xc0>)
  406daa:	4798      	blx	r3
  406dac:	bf00      	nop
  406dae:	e7fd      	b.n	406dac <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  406db0:	4b09      	ldr	r3, [pc, #36]	; (406dd8 <prvSwitchTimerLists+0xb0>)
  406db2:	681b      	ldr	r3, [r3, #0]
  406db4:	681b      	ldr	r3, [r3, #0]
  406db6:	2b00      	cmp	r3, #0
  406db8:	d1bb      	bne.n	406d32 <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
  406dba:	4b07      	ldr	r3, [pc, #28]	; (406dd8 <prvSwitchTimerLists+0xb0>)
  406dbc:	681b      	ldr	r3, [r3, #0]
  406dbe:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
  406dc0:	4b0a      	ldr	r3, [pc, #40]	; (406dec <prvSwitchTimerLists+0xc4>)
  406dc2:	681b      	ldr	r3, [r3, #0]
  406dc4:	4a04      	ldr	r2, [pc, #16]	; (406dd8 <prvSwitchTimerLists+0xb0>)
  406dc6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
  406dc8:	4a08      	ldr	r2, [pc, #32]	; (406dec <prvSwitchTimerLists+0xc4>)
  406dca:	68fb      	ldr	r3, [r7, #12]
  406dcc:	6013      	str	r3, [r2, #0]
}
  406dce:	bf00      	nop
  406dd0:	3724      	adds	r7, #36	; 0x24
  406dd2:	46bd      	mov	sp, r7
  406dd4:	bd90      	pop	{r4, r7, pc}
  406dd6:	bf00      	nop
  406dd8:	200026fc 	.word	0x200026fc
  406ddc:	00404e51 	.word	0x00404e51
  406de0:	00404de1 	.word	0x00404de1
  406de4:	0040693d 	.word	0x0040693d
  406de8:	00405075 	.word	0x00405075
  406dec:	20002700 	.word	0x20002700

00406df0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  406df0:	b580      	push	{r7, lr}
  406df2:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  406df4:	4b0e      	ldr	r3, [pc, #56]	; (406e30 <prvCheckForValidListAndQueue+0x40>)
  406df6:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  406df8:	4b0e      	ldr	r3, [pc, #56]	; (406e34 <prvCheckForValidListAndQueue+0x44>)
  406dfa:	681b      	ldr	r3, [r3, #0]
  406dfc:	2b00      	cmp	r3, #0
  406dfe:	d113      	bne.n	406e28 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
  406e00:	480d      	ldr	r0, [pc, #52]	; (406e38 <prvCheckForValidListAndQueue+0x48>)
  406e02:	4b0e      	ldr	r3, [pc, #56]	; (406e3c <prvCheckForValidListAndQueue+0x4c>)
  406e04:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
  406e06:	480e      	ldr	r0, [pc, #56]	; (406e40 <prvCheckForValidListAndQueue+0x50>)
  406e08:	4b0c      	ldr	r3, [pc, #48]	; (406e3c <prvCheckForValidListAndQueue+0x4c>)
  406e0a:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
  406e0c:	4b0d      	ldr	r3, [pc, #52]	; (406e44 <prvCheckForValidListAndQueue+0x54>)
  406e0e:	4a0a      	ldr	r2, [pc, #40]	; (406e38 <prvCheckForValidListAndQueue+0x48>)
  406e10:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  406e12:	4b0d      	ldr	r3, [pc, #52]	; (406e48 <prvCheckForValidListAndQueue+0x58>)
  406e14:	4a0a      	ldr	r2, [pc, #40]	; (406e40 <prvCheckForValidListAndQueue+0x50>)
  406e16:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  406e18:	2200      	movs	r2, #0
  406e1a:	210c      	movs	r1, #12
  406e1c:	2005      	movs	r0, #5
  406e1e:	4b0b      	ldr	r3, [pc, #44]	; (406e4c <prvCheckForValidListAndQueue+0x5c>)
  406e20:	4798      	blx	r3
  406e22:	4602      	mov	r2, r0
  406e24:	4b03      	ldr	r3, [pc, #12]	; (406e34 <prvCheckForValidListAndQueue+0x44>)
  406e26:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
  406e28:	4b09      	ldr	r3, [pc, #36]	; (406e50 <prvCheckForValidListAndQueue+0x60>)
  406e2a:	4798      	blx	r3
}
  406e2c:	bf00      	nop
  406e2e:	bd80      	pop	{r7, pc}
  406e30:	0040502d 	.word	0x0040502d
  406e34:	20002704 	.word	0x20002704
  406e38:	200026d4 	.word	0x200026d4
  406e3c:	00404d39 	.word	0x00404d39
  406e40:	200026e8 	.word	0x200026e8
  406e44:	200026fc 	.word	0x200026fc
  406e48:	20002700 	.word	0x20002700
  406e4c:	0040549d 	.word	0x0040549d
  406e50:	0040504d 	.word	0x0040504d

00406e54 <vCommTask>:

void WriteMbusRegs(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len);
void SendRespPkt(uint8_t *pkt, uint8_t len);

void vCommTask(void *pvParameters)
{
  406e54:	b590      	push	{r4, r7, lr}
  406e56:	b0d3      	sub	sp, #332	; 0x14c
  406e58:	af02      	add	r7, sp, #8
  406e5a:	1d3b      	adds	r3, r7, #4
  406e5c:	6018      	str	r0, [r3, #0]
    
	/* RS485 Rx buffer */
	uint8_t rs485RxBuffer[RS485_BUFFER_SIZE];
	/* RS485 Tx buffer */
    uint8_t respBuff[RS485_BUFFER_SIZE], respLen = 0;
  406e5e:	f107 030b 	add.w	r3, r7, #11
  406e62:	2200      	movs	r2, #0
  406e64:	701a      	strb	r2, [r3, #0]
    uint8_t commState = 0, recvdBytes = 0, prevRecvdBytes;
  406e66:	2300      	movs	r3, #0
  406e68:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
  406e6c:	2300      	movs	r3, #0
  406e6e:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
    /* Init Mbus writeFunc() ptr */
    writeFunc = WriteMbusRegs;
  406e72:	4b40      	ldr	r3, [pc, #256]	; (406f74 <vCommTask+0x120>)
  406e74:	4a40      	ldr	r2, [pc, #256]	; (406f78 <vCommTask+0x124>)
  406e76:	601a      	str	r2, [r3, #0]
	
	/* Start Receiving Data */
	usart_disable_tx(RS485_USART);
  406e78:	4840      	ldr	r0, [pc, #256]	; (406f7c <vCommTask+0x128>)
  406e7a:	4b41      	ldr	r3, [pc, #260]	; (406f80 <vCommTask+0x12c>)
  406e7c:	4798      	blx	r3
	usart_enable_rx(RS485_USART);
  406e7e:	483f      	ldr	r0, [pc, #252]	; (406f7c <vCommTask+0x128>)
  406e80:	4b40      	ldr	r3, [pc, #256]	; (406f84 <vCommTask+0x130>)
  406e82:	4798      	blx	r3
	Rs485PdcStartRx((uint32_t)rs485RxBuffer,RS485_BUFFER_SIZE);
  406e84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
  406e88:	2196      	movs	r1, #150	; 0x96
  406e8a:	4618      	mov	r0, r3
  406e8c:	4b3e      	ldr	r3, [pc, #248]	; (406f88 <vCommTask+0x134>)
  406e8e:	4798      	blx	r3

    while(1)
    {
        /* Sleep for some time and check if data recvd */
        vTaskDelay(40 / portTICK_RATE_MS);
  406e90:	2008      	movs	r0, #8
  406e92:	4b3e      	ldr	r3, [pc, #248]	; (406f8c <vCommTask+0x138>)
  406e94:	4798      	blx	r3
        
		recvdBytes = Rs485PdcGetRxBytes();
  406e96:	4b3e      	ldr	r3, [pc, #248]	; (406f90 <vCommTask+0x13c>)
  406e98:	4798      	blx	r3
  406e9a:	4603      	mov	r3, r0
  406e9c:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
		/* Check if data received on 485 */
		switch(commState)
  406ea0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
  406ea4:	2b00      	cmp	r3, #0
  406ea6:	d002      	beq.n	406eae <vCommTask+0x5a>
  406ea8:	2b01      	cmp	r3, #1
  406eaa:	d00c      	beq.n	406ec6 <vCommTask+0x72>
  406eac:	e061      	b.n	406f72 <vCommTask+0x11e>
		{
			case 0:
				if(recvdBytes!=0)
  406eae:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
  406eb2:	2b00      	cmp	r3, #0
  406eb4:	d05c      	beq.n	406f70 <vCommTask+0x11c>
				{
					commState = 1;
  406eb6:	2301      	movs	r3, #1
  406eb8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
					prevRecvdBytes = recvdBytes;
  406ebc:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
  406ec0:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
				}
				break;
  406ec4:	e054      	b.n	406f70 <vCommTask+0x11c>
			case 1:
				if(prevRecvdBytes != recvdBytes)
  406ec6:	f897 213e 	ldrb.w	r2, [r7, #318]	; 0x13e
  406eca:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
  406ece:	429a      	cmp	r2, r3
  406ed0:	d004      	beq.n	406edc <vCommTask+0x88>
				{
					prevRecvdBytes = recvdBytes;
  406ed2:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
  406ed6:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
					
					usart_enable_rx(RS485_USART);
					pdc_enable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN);
					Rs485PdcStartRx((uint32_t)rs485RxBuffer,RS485_BUFFER_SIZE);
				}
				break;
  406eda:	e04a      	b.n	406f72 <vCommTask+0x11e>
					prevRecvdBytes = recvdBytes;
				}
				else
				{
					/* 1 Modbus Pkt received. Process it. */
					usart_disable_rx(RS485_USART);
  406edc:	4827      	ldr	r0, [pc, #156]	; (406f7c <vCommTask+0x128>)
  406ede:	4b2d      	ldr	r3, [pc, #180]	; (406f94 <vCommTask+0x140>)
  406ee0:	4798      	blx	r3
					pdc_disable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN);
  406ee2:	4b2d      	ldr	r3, [pc, #180]	; (406f98 <vCommTask+0x144>)
  406ee4:	681b      	ldr	r3, [r3, #0]
  406ee6:	2101      	movs	r1, #1
  406ee8:	4618      	mov	r0, r3
  406eea:	4b2c      	ldr	r3, [pc, #176]	; (406f9c <vCommTask+0x148>)
  406eec:	4798      	blx	r3

					/* Parse Received MBUS Pkt, update actual variables */
					ParseMbusPkt(slaveAddr, rs485RxBuffer, recvdBytes, respBuff, &respLen);
  406eee:	4b2c      	ldr	r3, [pc, #176]	; (406fa0 <vCommTask+0x14c>)
  406ef0:	7818      	ldrb	r0, [r3, #0]
  406ef2:	f107 040c 	add.w	r4, r7, #12
  406ef6:	f897 213d 	ldrb.w	r2, [r7, #317]	; 0x13d
  406efa:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
  406efe:	f107 030b 	add.w	r3, r7, #11
  406f02:	9300      	str	r3, [sp, #0]
  406f04:	4623      	mov	r3, r4
  406f06:	4c27      	ldr	r4, [pc, #156]	; (406fa4 <vCommTask+0x150>)
  406f08:	47a0      	blx	r4
				
					/* Generate MBus Resp */
					if(respLen)
  406f0a:	f107 030b 	add.w	r3, r7, #11
  406f0e:	781b      	ldrb	r3, [r3, #0]
  406f10:	2b00      	cmp	r3, #0
  406f12:	d008      	beq.n	406f26 <vCommTask+0xd2>
					{
						SendRespPkt(respBuff, respLen);
  406f14:	f107 030b 	add.w	r3, r7, #11
  406f18:	781a      	ldrb	r2, [r3, #0]
  406f1a:	f107 030c 	add.w	r3, r7, #12
  406f1e:	4611      	mov	r1, r2
  406f20:	4618      	mov	r0, r3
  406f22:	4b21      	ldr	r3, [pc, #132]	; (406fa8 <vCommTask+0x154>)
  406f24:	4798      	blx	r3
					}
					
					memset((uint8_t *)rs485RxBuffer,0,sizeof(rs485RxBuffer));
  406f26:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
  406f2a:	2296      	movs	r2, #150	; 0x96
  406f2c:	2100      	movs	r1, #0
  406f2e:	4618      	mov	r0, r3
  406f30:	4b1e      	ldr	r3, [pc, #120]	; (406fac <vCommTask+0x158>)
  406f32:	4798      	blx	r3
					memset(respBuff,0,sizeof(respBuff));
  406f34:	f107 030c 	add.w	r3, r7, #12
  406f38:	2296      	movs	r2, #150	; 0x96
  406f3a:	2100      	movs	r1, #0
  406f3c:	4618      	mov	r0, r3
  406f3e:	4b1b      	ldr	r3, [pc, #108]	; (406fac <vCommTask+0x158>)
  406f40:	4798      	blx	r3
					respLen = 0;
  406f42:	f107 030b 	add.w	r3, r7, #11
  406f46:	2200      	movs	r2, #0
  406f48:	701a      	strb	r2, [r3, #0]
					commState = 0;
  406f4a:	2300      	movs	r3, #0
  406f4c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
					
					usart_enable_rx(RS485_USART);
  406f50:	480a      	ldr	r0, [pc, #40]	; (406f7c <vCommTask+0x128>)
  406f52:	4b0c      	ldr	r3, [pc, #48]	; (406f84 <vCommTask+0x130>)
  406f54:	4798      	blx	r3
					pdc_enable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN);
  406f56:	4b10      	ldr	r3, [pc, #64]	; (406f98 <vCommTask+0x144>)
  406f58:	681b      	ldr	r3, [r3, #0]
  406f5a:	2101      	movs	r1, #1
  406f5c:	4618      	mov	r0, r3
  406f5e:	4b14      	ldr	r3, [pc, #80]	; (406fb0 <vCommTask+0x15c>)
  406f60:	4798      	blx	r3
					Rs485PdcStartRx((uint32_t)rs485RxBuffer,RS485_BUFFER_SIZE);
  406f62:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
  406f66:	2196      	movs	r1, #150	; 0x96
  406f68:	4618      	mov	r0, r3
  406f6a:	4b07      	ldr	r3, [pc, #28]	; (406f88 <vCommTask+0x134>)
  406f6c:	4798      	blx	r3
				}
				break;
  406f6e:	e000      	b.n	406f72 <vCommTask+0x11e>
				if(recvdBytes!=0)
				{
					commState = 1;
					prevRecvdBytes = recvdBytes;
				}
				break;
  406f70:	bf00      	nop
					pdc_enable_transfer(rs485PdcBase, PERIPH_PTCR_RXTEN);
					Rs485PdcStartRx((uint32_t)rs485RxBuffer,RS485_BUFFER_SIZE);
				}
				break;
		}
    }
  406f72:	e78d      	b.n	406e90 <vCommTask+0x3c>
  406f74:	2000270c 	.word	0x2000270c
  406f78:	00406fc5 	.word	0x00406fc5
  406f7c:	40028000 	.word	0x40028000
  406f80:	004037a9 	.word	0x004037a9
  406f84:	004037d9 	.word	0x004037d9
  406f88:	00402a01 	.word	0x00402a01
  406f8c:	00405d65 	.word	0x00405d65
  406f90:	00402a3d 	.word	0x00402a3d
  406f94:	004037f1 	.word	0x004037f1
  406f98:	2000271c 	.word	0x2000271c
  406f9c:	00403181 	.word	0x00403181
  406fa0:	20000034 	.word	0x20000034
  406fa4:	004006f1 	.word	0x004006f1
  406fa8:	00407299 	.word	0x00407299
  406fac:	0040b335 	.word	0x0040b335
  406fb0:	00403161 	.word	0x00403161

00406fb4 <vCommInit>:
}

void vCommInit(void)
{
  406fb4:	b580      	push	{r7, lr}
  406fb6:	af00      	add	r7, sp, #0
    /* Init RS485 port with PDC support */
    InitRs485Pdc();
  406fb8:	4b01      	ldr	r3, [pc, #4]	; (406fc0 <vCommInit+0xc>)
  406fba:	4798      	blx	r3
}
  406fbc:	bf00      	nop
  406fbe:	bd80      	pop	{r7, pc}
  406fc0:	00402941 	.word	0x00402941

00406fc4 <WriteMbusRegs>:

void WriteMbusRegs(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len)
{
  406fc4:	b590      	push	{r4, r7, lr}
  406fc6:	b087      	sub	sp, #28
  406fc8:	af02      	add	r7, sp, #8
  406fca:	6078      	str	r0, [r7, #4]
  406fcc:	460b      	mov	r3, r1
  406fce:	70fb      	strb	r3, [r7, #3]
  406fd0:	4613      	mov	r3, r2
  406fd2:	70bb      	strb	r3, [r7, #2]
    uint16_t *ptr;
	uint8_t *ptr8;
    
    while(len)
  406fd4:	e134      	b.n	407240 <WriteMbusRegs+0x27c>
    {
        switch(regAddr)
  406fd6:	78fb      	ldrb	r3, [r7, #3]
  406fd8:	2b21      	cmp	r3, #33	; 0x21
  406fda:	f200 812a 	bhi.w	407232 <WriteMbusRegs+0x26e>
  406fde:	a201      	add	r2, pc, #4	; (adr r2, 406fe4 <WriteMbusRegs+0x20>)
  406fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  406fe4:	0040706d 	.word	0x0040706d
  406fe8:	00407083 	.word	0x00407083
  406fec:	00407099 	.word	0x00407099
  406ff0:	004070af 	.word	0x004070af
  406ff4:	004070c5 	.word	0x004070c5
  406ff8:	004070db 	.word	0x004070db
  406ffc:	004070f1 	.word	0x004070f1
  407000:	00407233 	.word	0x00407233
  407004:	00407233 	.word	0x00407233
  407008:	00407107 	.word	0x00407107
  40700c:	00407233 	.word	0x00407233
  407010:	00407133 	.word	0x00407133
  407014:	00407233 	.word	0x00407233
  407018:	0040715f 	.word	0x0040715f
  40701c:	00407233 	.word	0x00407233
  407020:	00407233 	.word	0x00407233
  407024:	00407233 	.word	0x00407233
  407028:	00407233 	.word	0x00407233
  40702c:	00407233 	.word	0x00407233
  407030:	0040718b 	.word	0x0040718b
  407034:	00407233 	.word	0x00407233
  407038:	00407233 	.word	0x00407233
  40703c:	00407233 	.word	0x00407233
  407040:	00407233 	.word	0x00407233
  407044:	00407213 	.word	0x00407213
  407048:	00407233 	.word	0x00407233
  40704c:	00407233 	.word	0x00407233
  407050:	00407233 	.word	0x00407233
  407054:	00407233 	.word	0x00407233
  407058:	00407233 	.word	0x00407233
  40705c:	00407233 	.word	0x00407233
  407060:	004071b7 	.word	0x004071b7
  407064:	00407233 	.word	0x00407233
  407068:	004071e3 	.word	0x004071e3
        {
            case MBUS_REG_SEC:
				#ifndef DS3231_USE_RTOS_API
					DSSetSecs(BOARD_TWI, mbusBuff[regAddr]);
  40706c:	78fb      	ldrb	r3, [r7, #3]
  40706e:	005b      	lsls	r3, r3, #1
  407070:	687a      	ldr	r2, [r7, #4]
  407072:	4413      	add	r3, r2
  407074:	881b      	ldrh	r3, [r3, #0]
  407076:	b2db      	uxtb	r3, r3
  407078:	4619      	mov	r1, r3
  40707a:	4875      	ldr	r0, [pc, #468]	; (407250 <WriteMbusRegs+0x28c>)
  40707c:	4b75      	ldr	r3, [pc, #468]	; (407254 <WriteMbusRegs+0x290>)
  40707e:	4798      	blx	r3
				#else
					DSSetSecsTo(twiPort, mbusBuff[regAddr],50);
				#endif
                break;
  407080:	e0d8      	b.n	407234 <WriteMbusRegs+0x270>
            case MBUS_REG_MIN:
				#ifndef DS3231_USE_RTOS_API
					DSSetMins(BOARD_TWI, mbusBuff[regAddr]);
  407082:	78fb      	ldrb	r3, [r7, #3]
  407084:	005b      	lsls	r3, r3, #1
  407086:	687a      	ldr	r2, [r7, #4]
  407088:	4413      	add	r3, r2
  40708a:	881b      	ldrh	r3, [r3, #0]
  40708c:	b2db      	uxtb	r3, r3
  40708e:	4619      	mov	r1, r3
  407090:	486f      	ldr	r0, [pc, #444]	; (407250 <WriteMbusRegs+0x28c>)
  407092:	4b71      	ldr	r3, [pc, #452]	; (407258 <WriteMbusRegs+0x294>)
  407094:	4798      	blx	r3
				#else
					DSSetMinsTo(twiPort, mbusBuff[regAddr],50);
				#endif
                break;
  407096:	e0cd      	b.n	407234 <WriteMbusRegs+0x270>
            case MBUS_REG_HRS:
				#ifndef DS3231_USE_RTOS_API
					DSSetHrs(BOARD_TWI, mbusBuff[regAddr]);
  407098:	78fb      	ldrb	r3, [r7, #3]
  40709a:	005b      	lsls	r3, r3, #1
  40709c:	687a      	ldr	r2, [r7, #4]
  40709e:	4413      	add	r3, r2
  4070a0:	881b      	ldrh	r3, [r3, #0]
  4070a2:	b2db      	uxtb	r3, r3
  4070a4:	4619      	mov	r1, r3
  4070a6:	486a      	ldr	r0, [pc, #424]	; (407250 <WriteMbusRegs+0x28c>)
  4070a8:	4b6c      	ldr	r3, [pc, #432]	; (40725c <WriteMbusRegs+0x298>)
  4070aa:	4798      	blx	r3
				#else
					DSSetHrsTo(twiPort, mbusBuff[regAddr],50);
				#endif
                break;
  4070ac:	e0c2      	b.n	407234 <WriteMbusRegs+0x270>
            case MBUS_REG_DAY:
				#ifndef DS3231_USE_RTOS_API
					DSSetDay(BOARD_TWI, mbusBuff[regAddr]);
  4070ae:	78fb      	ldrb	r3, [r7, #3]
  4070b0:	005b      	lsls	r3, r3, #1
  4070b2:	687a      	ldr	r2, [r7, #4]
  4070b4:	4413      	add	r3, r2
  4070b6:	881b      	ldrh	r3, [r3, #0]
  4070b8:	b2db      	uxtb	r3, r3
  4070ba:	4619      	mov	r1, r3
  4070bc:	4864      	ldr	r0, [pc, #400]	; (407250 <WriteMbusRegs+0x28c>)
  4070be:	4b68      	ldr	r3, [pc, #416]	; (407260 <WriteMbusRegs+0x29c>)
  4070c0:	4798      	blx	r3
				#else
					DSSetDayTo(twiPort, mbusBuff[regAddr],50);
				#endif
                break;
  4070c2:	e0b7      	b.n	407234 <WriteMbusRegs+0x270>
            case MBUS_REG_DD:
				#ifndef DS3231_USE_RTOS_API
					DSSetDate(BOARD_TWI, mbusBuff[regAddr]);
  4070c4:	78fb      	ldrb	r3, [r7, #3]
  4070c6:	005b      	lsls	r3, r3, #1
  4070c8:	687a      	ldr	r2, [r7, #4]
  4070ca:	4413      	add	r3, r2
  4070cc:	881b      	ldrh	r3, [r3, #0]
  4070ce:	b2db      	uxtb	r3, r3
  4070d0:	4619      	mov	r1, r3
  4070d2:	485f      	ldr	r0, [pc, #380]	; (407250 <WriteMbusRegs+0x28c>)
  4070d4:	4b63      	ldr	r3, [pc, #396]	; (407264 <WriteMbusRegs+0x2a0>)
  4070d6:	4798      	blx	r3
				#else
					DSSetDateTo(twiPort, mbusBuff[regAddr],50);
				#endif
                break;
  4070d8:	e0ac      	b.n	407234 <WriteMbusRegs+0x270>
            case MBUS_REG_MM:
				#ifndef DS3231_USE_RTOS_API
					DSSetMonth(BOARD_TWI, mbusBuff[regAddr]);
  4070da:	78fb      	ldrb	r3, [r7, #3]
  4070dc:	005b      	lsls	r3, r3, #1
  4070de:	687a      	ldr	r2, [r7, #4]
  4070e0:	4413      	add	r3, r2
  4070e2:	881b      	ldrh	r3, [r3, #0]
  4070e4:	b2db      	uxtb	r3, r3
  4070e6:	4619      	mov	r1, r3
  4070e8:	4859      	ldr	r0, [pc, #356]	; (407250 <WriteMbusRegs+0x28c>)
  4070ea:	4b5f      	ldr	r3, [pc, #380]	; (407268 <WriteMbusRegs+0x2a4>)
  4070ec:	4798      	blx	r3
				#else
					DSSetMonthTo(twiPort, mbusBuff[regAddr],50);
				#endif
                break;
  4070ee:	e0a1      	b.n	407234 <WriteMbusRegs+0x270>
            case MBUS_REG_YY:
				#ifndef DS3231_USE_RTOS_API
					DSSetYear(BOARD_TWI, mbusBuff[regAddr]);
  4070f0:	78fb      	ldrb	r3, [r7, #3]
  4070f2:	005b      	lsls	r3, r3, #1
  4070f4:	687a      	ldr	r2, [r7, #4]
  4070f6:	4413      	add	r3, r2
  4070f8:	881b      	ldrh	r3, [r3, #0]
  4070fa:	b2db      	uxtb	r3, r3
  4070fc:	4619      	mov	r1, r3
  4070fe:	4854      	ldr	r0, [pc, #336]	; (407250 <WriteMbusRegs+0x28c>)
  407100:	4b5a      	ldr	r3, [pc, #360]	; (40726c <WriteMbusRegs+0x2a8>)
  407102:	4798      	blx	r3
				#else
					DSSetYearTo(twiPort, mbusBuff[regAddr],50);
				#endif
                break;
  407104:	e096      	b.n	407234 <WriteMbusRegs+0x270>
            case MBUS_REG_LATH:
                ptr = (uint16_t*)&lat;
  407106:	4b5a      	ldr	r3, [pc, #360]	; (407270 <WriteMbusRegs+0x2ac>)
  407108:	60fb      	str	r3, [r7, #12]
                ptr[1] = mBusRegs[MBUS_REG_LATH];
  40710a:	68fb      	ldr	r3, [r7, #12]
  40710c:	3302      	adds	r3, #2
  40710e:	4a59      	ldr	r2, [pc, #356]	; (407274 <WriteMbusRegs+0x2b0>)
  407110:	8a52      	ldrh	r2, [r2, #18]
  407112:	801a      	strh	r2, [r3, #0]
                ptr[0] = mBusRegs[MBUS_REG_LATL];
  407114:	4b57      	ldr	r3, [pc, #348]	; (407274 <WriteMbusRegs+0x2b0>)
  407116:	8a1a      	ldrh	r2, [r3, #16]
  407118:	68fb      	ldr	r3, [r7, #12]
  40711a:	801a      	strh	r2, [r3, #0]
				/* Update EEPROM */
				ptr8 = (uint8_t *)&lat;
  40711c:	4b54      	ldr	r3, [pc, #336]	; (407270 <WriteMbusRegs+0x2ac>)
  40711e:	60bb      	str	r3, [r7, #8]
				WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_LAT0, ptr8, 4);
  407120:	2304      	movs	r3, #4
  407122:	9300      	str	r3, [sp, #0]
  407124:	68bb      	ldr	r3, [r7, #8]
  407126:	2200      	movs	r2, #0
  407128:	2150      	movs	r1, #80	; 0x50
  40712a:	4849      	ldr	r0, [pc, #292]	; (407250 <WriteMbusRegs+0x28c>)
  40712c:	4c52      	ldr	r4, [pc, #328]	; (407278 <WriteMbusRegs+0x2b4>)
  40712e:	47a0      	blx	r4
                break;
  407130:	e080      	b.n	407234 <WriteMbusRegs+0x270>
            case MBUS_REG_LONH:
                ptr = (uint16_t*)&lon;
  407132:	4b52      	ldr	r3, [pc, #328]	; (40727c <WriteMbusRegs+0x2b8>)
  407134:	60fb      	str	r3, [r7, #12]
                ptr[1] = mBusRegs[MBUS_REG_LONH];
  407136:	68fb      	ldr	r3, [r7, #12]
  407138:	3302      	adds	r3, #2
  40713a:	4a4e      	ldr	r2, [pc, #312]	; (407274 <WriteMbusRegs+0x2b0>)
  40713c:	8ad2      	ldrh	r2, [r2, #22]
  40713e:	801a      	strh	r2, [r3, #0]
                ptr[0] = mBusRegs[MBUS_REG_LONL];
  407140:	4b4c      	ldr	r3, [pc, #304]	; (407274 <WriteMbusRegs+0x2b0>)
  407142:	8a9a      	ldrh	r2, [r3, #20]
  407144:	68fb      	ldr	r3, [r7, #12]
  407146:	801a      	strh	r2, [r3, #0]
				/* Update EEPROM */
                ptr8 = (uint8_t *)&lon;
  407148:	4b4c      	ldr	r3, [pc, #304]	; (40727c <WriteMbusRegs+0x2b8>)
  40714a:	60bb      	str	r3, [r7, #8]
                WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_LON0, ptr8, 4);
  40714c:	2304      	movs	r3, #4
  40714e:	9300      	str	r3, [sp, #0]
  407150:	68bb      	ldr	r3, [r7, #8]
  407152:	2204      	movs	r2, #4
  407154:	2150      	movs	r1, #80	; 0x50
  407156:	483e      	ldr	r0, [pc, #248]	; (407250 <WriteMbusRegs+0x28c>)
  407158:	4c47      	ldr	r4, [pc, #284]	; (407278 <WriteMbusRegs+0x2b4>)
  40715a:	47a0      	blx	r4
                break;
  40715c:	e06a      	b.n	407234 <WriteMbusRegs+0x270>
            case MBUS_REG_TZH:
                ptr = (uint16_t*)&timeZone;
  40715e:	4b48      	ldr	r3, [pc, #288]	; (407280 <WriteMbusRegs+0x2bc>)
  407160:	60fb      	str	r3, [r7, #12]
                ptr[1] = mBusRegs[MBUS_REG_TZH];
  407162:	68fb      	ldr	r3, [r7, #12]
  407164:	3302      	adds	r3, #2
  407166:	4a43      	ldr	r2, [pc, #268]	; (407274 <WriteMbusRegs+0x2b0>)
  407168:	8b52      	ldrh	r2, [r2, #26]
  40716a:	801a      	strh	r2, [r3, #0]
                ptr[0] = mBusRegs[MBUS_REG_TZL];
  40716c:	4b41      	ldr	r3, [pc, #260]	; (407274 <WriteMbusRegs+0x2b0>)
  40716e:	8b1a      	ldrh	r2, [r3, #24]
  407170:	68fb      	ldr	r3, [r7, #12]
  407172:	801a      	strh	r2, [r3, #0]
                /* Update EEPROM */
				ptr8 = (uint8_t *)&timeZone;
  407174:	4b42      	ldr	r3, [pc, #264]	; (407280 <WriteMbusRegs+0x2bc>)
  407176:	60bb      	str	r3, [r7, #8]
				WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_TZ0, ptr8, 4);
  407178:	2304      	movs	r3, #4
  40717a:	9300      	str	r3, [sp, #0]
  40717c:	68bb      	ldr	r3, [r7, #8]
  40717e:	2208      	movs	r2, #8
  407180:	2150      	movs	r1, #80	; 0x50
  407182:	4833      	ldr	r0, [pc, #204]	; (407250 <WriteMbusRegs+0x28c>)
  407184:	4c3c      	ldr	r4, [pc, #240]	; (407278 <WriteMbusRegs+0x2b4>)
  407186:	47a0      	blx	r4
                break;
  407188:	e054      	b.n	407234 <WriteMbusRegs+0x270>
            case MBUS_REG_PNLRNGH:
                ptr = (uint16_t*)&pvAngleRng;
  40718a:	4b3e      	ldr	r3, [pc, #248]	; (407284 <WriteMbusRegs+0x2c0>)
  40718c:	60fb      	str	r3, [r7, #12]
                ptr[1] = mBusRegs[MBUS_REG_PNLRNGH];
  40718e:	68fb      	ldr	r3, [r7, #12]
  407190:	3302      	adds	r3, #2
  407192:	4a38      	ldr	r2, [pc, #224]	; (407274 <WriteMbusRegs+0x2b0>)
  407194:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
  407196:	801a      	strh	r2, [r3, #0]
                ptr[0] = mBusRegs[MBUS_REG_PNLRNGL];
  407198:	4b36      	ldr	r3, [pc, #216]	; (407274 <WriteMbusRegs+0x2b0>)
  40719a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
  40719c:	68fb      	ldr	r3, [r7, #12]
  40719e:	801a      	strh	r2, [r3, #0]
                /* Update EEPROM */
				ptr8 = (uint8_t *)&pvAngleRng;
  4071a0:	4b38      	ldr	r3, [pc, #224]	; (407284 <WriteMbusRegs+0x2c0>)
  4071a2:	60bb      	str	r3, [r7, #8]
				WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_PNLRNG0, ptr8, 4);
  4071a4:	2304      	movs	r3, #4
  4071a6:	9300      	str	r3, [sp, #0]
  4071a8:	68bb      	ldr	r3, [r7, #8]
  4071aa:	2214      	movs	r2, #20
  4071ac:	2150      	movs	r1, #80	; 0x50
  4071ae:	4828      	ldr	r0, [pc, #160]	; (407250 <WriteMbusRegs+0x28c>)
  4071b0:	4c31      	ldr	r4, [pc, #196]	; (407278 <WriteMbusRegs+0x2b4>)
  4071b2:	47a0      	blx	r4
                break;
  4071b4:	e03e      	b.n	407234 <WriteMbusRegs+0x270>
            case MBUS_REG_DISTH:
                ptr = (uint16_t*)&dist;
  4071b6:	4b34      	ldr	r3, [pc, #208]	; (407288 <WriteMbusRegs+0x2c4>)
  4071b8:	60fb      	str	r3, [r7, #12]
                ptr[1] = mBusRegs[MBUS_REG_DISTH];
  4071ba:	68fb      	ldr	r3, [r7, #12]
  4071bc:	3302      	adds	r3, #2
  4071be:	4a2d      	ldr	r2, [pc, #180]	; (407274 <WriteMbusRegs+0x2b0>)
  4071c0:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
  4071c2:	801a      	strh	r2, [r3, #0]
                ptr[0] = mBusRegs[MBUS_REG_DISTL];
  4071c4:	4b2b      	ldr	r3, [pc, #172]	; (407274 <WriteMbusRegs+0x2b0>)
  4071c6:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
  4071c8:	68fb      	ldr	r3, [r7, #12]
  4071ca:	801a      	strh	r2, [r3, #0]
                /* Update EEPROM */
				ptr8 = (uint8_t *)&dist;
  4071cc:	4b2e      	ldr	r3, [pc, #184]	; (407288 <WriteMbusRegs+0x2c4>)
  4071ce:	60bb      	str	r3, [r7, #8]
				WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_DIST0, ptr8, 4);
  4071d0:	2304      	movs	r3, #4
  4071d2:	9300      	str	r3, [sp, #0]
  4071d4:	68bb      	ldr	r3, [r7, #8]
  4071d6:	220c      	movs	r2, #12
  4071d8:	2150      	movs	r1, #80	; 0x50
  4071da:	481d      	ldr	r0, [pc, #116]	; (407250 <WriteMbusRegs+0x28c>)
  4071dc:	4c26      	ldr	r4, [pc, #152]	; (407278 <WriteMbusRegs+0x2b4>)
  4071de:	47a0      	blx	r4
                break;
  4071e0:	e028      	b.n	407234 <WriteMbusRegs+0x270>
            case MBUS_REG_WIDTHH:
                ptr = (uint16_t*)&width;
  4071e2:	4b2a      	ldr	r3, [pc, #168]	; (40728c <WriteMbusRegs+0x2c8>)
  4071e4:	60fb      	str	r3, [r7, #12]
                ptr[1] = mBusRegs[MBUS_REG_WIDTHH];
  4071e6:	68fb      	ldr	r3, [r7, #12]
  4071e8:	3302      	adds	r3, #2
  4071ea:	4a22      	ldr	r2, [pc, #136]	; (407274 <WriteMbusRegs+0x2b0>)
  4071ec:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
  4071f0:	801a      	strh	r2, [r3, #0]
                ptr[0] = mBusRegs[MBUS_REG_WIDTHL];
  4071f2:	4b20      	ldr	r3, [pc, #128]	; (407274 <WriteMbusRegs+0x2b0>)
  4071f4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
  4071f8:	68fb      	ldr	r3, [r7, #12]
  4071fa:	801a      	strh	r2, [r3, #0]
                /* Update EEPROM */
				ptr8 = (uint8_t *)&width;
  4071fc:	4b23      	ldr	r3, [pc, #140]	; (40728c <WriteMbusRegs+0x2c8>)
  4071fe:	60bb      	str	r3, [r7, #8]
                WriteEEPROM(BOARD_TWI, AT24C08_ADDR, EE_REG_WIDTH0, ptr8, 4);
  407200:	2304      	movs	r3, #4
  407202:	9300      	str	r3, [sp, #0]
  407204:	68bb      	ldr	r3, [r7, #8]
  407206:	2210      	movs	r2, #16
  407208:	2150      	movs	r1, #80	; 0x50
  40720a:	4811      	ldr	r0, [pc, #68]	; (407250 <WriteMbusRegs+0x28c>)
  40720c:	4c1a      	ldr	r4, [pc, #104]	; (407278 <WriteMbusRegs+0x2b4>)
  40720e:	47a0      	blx	r4
                break;
  407210:	e010      	b.n	407234 <WriteMbusRegs+0x270>
            case MBUS_REG_OPMODE:
                mBusRegs[MBUS_REG_MOTON] = 0;
  407212:	4b18      	ldr	r3, [pc, #96]	; (407274 <WriteMbusRegs+0x2b0>)
  407214:	2200      	movs	r2, #0
  407216:	869a      	strh	r2, [r3, #52]	; 0x34
                minCtr = 0;
  407218:	4b1d      	ldr	r3, [pc, #116]	; (407290 <WriteMbusRegs+0x2cc>)
  40721a:	2200      	movs	r2, #0
  40721c:	701a      	strb	r2, [r3, #0]
                /* Turn Motor Off */
				#ifndef MOTOR_CTRL_A4955
					gpio_set_pin_low(PIN_MOTOR_RST_IDX);
				#else
					gpio_set_pin_low(PIN_MOTOR_SLP_IDX);
  40721e:	2022      	movs	r0, #34	; 0x22
  407220:	4b1c      	ldr	r3, [pc, #112]	; (407294 <WriteMbusRegs+0x2d0>)
  407222:	4798      	blx	r3
					gpio_set_pin_low(PIN_MOTOR_IN1_IDX);
  407224:	2020      	movs	r0, #32
  407226:	4b1b      	ldr	r3, [pc, #108]	; (407294 <WriteMbusRegs+0x2d0>)
  407228:	4798      	blx	r3
					gpio_set_pin_low(PIN_MOTOR_IN2_IDX);
  40722a:	2021      	movs	r0, #33	; 0x21
  40722c:	4b19      	ldr	r3, [pc, #100]	; (407294 <WriteMbusRegs+0x2d0>)
  40722e:	4798      	blx	r3
				#endif
                break;
  407230:	e000      	b.n	407234 <WriteMbusRegs+0x270>
            default:
                break;
  407232:	bf00      	nop
        }    
        regAddr++;
  407234:	78fb      	ldrb	r3, [r7, #3]
  407236:	3301      	adds	r3, #1
  407238:	70fb      	strb	r3, [r7, #3]
        len--;
  40723a:	78bb      	ldrb	r3, [r7, #2]
  40723c:	3b01      	subs	r3, #1
  40723e:	70bb      	strb	r3, [r7, #2]
void WriteMbusRegs(uint16_t *mbusBuff, uint8_t regAddr, uint8_t len)
{
    uint16_t *ptr;
	uint8_t *ptr8;
    
    while(len)
  407240:	78bb      	ldrb	r3, [r7, #2]
  407242:	2b00      	cmp	r3, #0
  407244:	f47f aec7 	bne.w	406fd6 <WriteMbusRegs+0x12>
                break;
        }    
        regAddr++;
        len--;
    }
}
  407248:	bf00      	nop
  40724a:	3714      	adds	r7, #20
  40724c:	46bd      	mov	sp, r7
  40724e:	bd90      	pop	{r4, r7, pc}
  407250:	40018000 	.word	0x40018000
  407254:	00400349 	.word	0x00400349
  407258:	0040036d 	.word	0x0040036d
  40725c:	00400391 	.word	0x00400391
  407260:	00400415 	.word	0x00400415
  407264:	00400439 	.word	0x00400439
  407268:	0040045d 	.word	0x0040045d
  40726c:	00400481 	.word	0x00400481
  407270:	2000000c 	.word	0x2000000c
  407274:	20000484 	.word	0x20000484
  407278:	004001cd 	.word	0x004001cd
  40727c:	20000010 	.word	0x20000010
  407280:	20000014 	.word	0x20000014
  407284:	20000020 	.word	0x20000020
  407288:	20000018 	.word	0x20000018
  40728c:	2000001c 	.word	0x2000001c
  407290:	200004d1 	.word	0x200004d1
  407294:	00404129 	.word	0x00404129

00407298 <SendRespPkt>:

void SendRespPkt(uint8_t *pkt, uint8_t len)
{
  407298:	b580      	push	{r7, lr}
  40729a:	b082      	sub	sp, #8
  40729c:	af00      	add	r7, sp, #0
  40729e:	6078      	str	r0, [r7, #4]
  4072a0:	460b      	mov	r3, r1
  4072a2:	70fb      	strb	r3, [r7, #3]
	usart_enable_tx(RS485_USART);
  4072a4:	480c      	ldr	r0, [pc, #48]	; (4072d8 <SendRespPkt+0x40>)
  4072a6:	4b0d      	ldr	r3, [pc, #52]	; (4072dc <SendRespPkt+0x44>)
  4072a8:	4798      	blx	r3
	/* 3.5 Char Wait Time */
	
	/* Start PDC Transfer */
	Rs485PdcStartTx((uint32_t)pkt, len);
  4072aa:	687b      	ldr	r3, [r7, #4]
  4072ac:	78fa      	ldrb	r2, [r7, #3]
  4072ae:	b292      	uxth	r2, r2
  4072b0:	4611      	mov	r1, r2
  4072b2:	4618      	mov	r0, r3
  4072b4:	4b0a      	ldr	r3, [pc, #40]	; (4072e0 <SendRespPkt+0x48>)
  4072b6:	4798      	blx	r3

	/* Wait till tx completes */
	while(!Rs485PdcGetTxStatus())
  4072b8:	e002      	b.n	4072c0 <SendRespPkt+0x28>
		vTaskDelay(10 / portTICK_RATE_MS);
  4072ba:	2002      	movs	r0, #2
  4072bc:	4b09      	ldr	r3, [pc, #36]	; (4072e4 <SendRespPkt+0x4c>)
  4072be:	4798      	blx	r3
	
	/* Start PDC Transfer */
	Rs485PdcStartTx((uint32_t)pkt, len);

	/* Wait till tx completes */
	while(!Rs485PdcGetTxStatus())
  4072c0:	4b09      	ldr	r3, [pc, #36]	; (4072e8 <SendRespPkt+0x50>)
  4072c2:	4798      	blx	r3
  4072c4:	4603      	mov	r3, r0
  4072c6:	2b00      	cmp	r3, #0
  4072c8:	d0f7      	beq.n	4072ba <SendRespPkt+0x22>
		vTaskDelay(10 / portTICK_RATE_MS);

	/* 3.5 Char Wait Time */

	usart_disable_tx(RS485_USART);
  4072ca:	4803      	ldr	r0, [pc, #12]	; (4072d8 <SendRespPkt+0x40>)
  4072cc:	4b07      	ldr	r3, [pc, #28]	; (4072ec <SendRespPkt+0x54>)
  4072ce:	4798      	blx	r3
}
  4072d0:	bf00      	nop
  4072d2:	3708      	adds	r7, #8
  4072d4:	46bd      	mov	sp, r7
  4072d6:	bd80      	pop	{r7, pc}
  4072d8:	40028000 	.word	0x40028000
  4072dc:	00403791 	.word	0x00403791
  4072e0:	004029c5 	.word	0x004029c5
  4072e4:	00405d65 	.word	0x00405d65
  4072e8:	00402a75 	.word	0x00402a75
  4072ec:	004037a9 	.word	0x004037a9

004072f0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4072f0:	b480      	push	{r7}
  4072f2:	b083      	sub	sp, #12
  4072f4:	af00      	add	r7, sp, #0
  4072f6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4072f8:	687b      	ldr	r3, [r7, #4]
  4072fa:	2b07      	cmp	r3, #7
  4072fc:	d825      	bhi.n	40734a <osc_get_rate+0x5a>
  4072fe:	a201      	add	r2, pc, #4	; (adr r2, 407304 <osc_get_rate+0x14>)
  407300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  407304:	00407325 	.word	0x00407325
  407308:	0040732b 	.word	0x0040732b
  40730c:	00407331 	.word	0x00407331
  407310:	00407337 	.word	0x00407337
  407314:	0040733b 	.word	0x0040733b
  407318:	0040733f 	.word	0x0040733f
  40731c:	00407343 	.word	0x00407343
  407320:	00407347 	.word	0x00407347
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  407324:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  407328:	e010      	b.n	40734c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40732a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40732e:	e00d      	b.n	40734c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  407330:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  407334:	e00a      	b.n	40734c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  407336:	4b08      	ldr	r3, [pc, #32]	; (407358 <osc_get_rate+0x68>)
  407338:	e008      	b.n	40734c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40733a:	4b08      	ldr	r3, [pc, #32]	; (40735c <osc_get_rate+0x6c>)
  40733c:	e006      	b.n	40734c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40733e:	4b08      	ldr	r3, [pc, #32]	; (407360 <osc_get_rate+0x70>)
  407340:	e004      	b.n	40734c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  407342:	4b07      	ldr	r3, [pc, #28]	; (407360 <osc_get_rate+0x70>)
  407344:	e002      	b.n	40734c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  407346:	4b06      	ldr	r3, [pc, #24]	; (407360 <osc_get_rate+0x70>)
  407348:	e000      	b.n	40734c <osc_get_rate+0x5c>
	}

	return 0;
  40734a:	2300      	movs	r3, #0
}
  40734c:	4618      	mov	r0, r3
  40734e:	370c      	adds	r7, #12
  407350:	46bd      	mov	sp, r7
  407352:	bc80      	pop	{r7}
  407354:	4770      	bx	lr
  407356:	bf00      	nop
  407358:	003d0900 	.word	0x003d0900
  40735c:	007a1200 	.word	0x007a1200
  407360:	00b71b00 	.word	0x00b71b00

00407364 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  407364:	b580      	push	{r7, lr}
  407366:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  407368:	2006      	movs	r0, #6
  40736a:	4b04      	ldr	r3, [pc, #16]	; (40737c <sysclk_get_main_hz+0x18>)
  40736c:	4798      	blx	r3
  40736e:	4602      	mov	r2, r0
  407370:	4613      	mov	r3, r2
  407372:	009b      	lsls	r3, r3, #2
  407374:	4413      	add	r3, r2
  407376:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  407378:	4618      	mov	r0, r3
  40737a:	bd80      	pop	{r7, pc}
  40737c:	004072f1 	.word	0x004072f1

00407380 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  407380:	b580      	push	{r7, lr}
  407382:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  407384:	4b02      	ldr	r3, [pc, #8]	; (407390 <sysclk_get_cpu_hz+0x10>)
  407386:	4798      	blx	r3
  407388:	4603      	mov	r3, r0
  40738a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40738c:	4618      	mov	r0, r3
  40738e:	bd80      	pop	{r7, pc}
  407390:	00407365 	.word	0x00407365

00407394 <main>:
	Code untested. 

*/

int main (void)
{
  407394:	b590      	push	{r4, r7, lr}
  407396:	b085      	sub	sp, #20
  407398:	af04      	add	r7, sp, #16
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
  40739a:	4b1a      	ldr	r3, [pc, #104]	; (407404 <main+0x70>)
  40739c:	4798      	blx	r3
	/* Initialize all peripherals */
	board_init();
  40739e:	4b1a      	ldr	r3, [pc, #104]	; (407408 <main+0x74>)
  4073a0:	4798      	blx	r3
	delay_init(sysclk_get_cpu_hz());
	
	vInitPeripherals();
  4073a2:	4b1a      	ldr	r3, [pc, #104]	; (40740c <main+0x78>)
  4073a4:	4798      	blx	r3
	/* Enable global interrupts. */   
    
//     xTaskCreate(vCCTask, "Cc", 100, NULL, 2, NULL);
    xTaskCreate(vPvTrackerTask, (const signed char *)"Pv", 300, NULL, 1, NULL);
  4073a6:	2300      	movs	r3, #0
  4073a8:	9303      	str	r3, [sp, #12]
  4073aa:	2300      	movs	r3, #0
  4073ac:	9302      	str	r3, [sp, #8]
  4073ae:	2300      	movs	r3, #0
  4073b0:	9301      	str	r3, [sp, #4]
  4073b2:	2301      	movs	r3, #1
  4073b4:	9300      	str	r3, [sp, #0]
  4073b6:	2300      	movs	r3, #0
  4073b8:	f44f 7296 	mov.w	r2, #300	; 0x12c
  4073bc:	4914      	ldr	r1, [pc, #80]	; (407410 <main+0x7c>)
  4073be:	4815      	ldr	r0, [pc, #84]	; (407414 <main+0x80>)
  4073c0:	4c15      	ldr	r4, [pc, #84]	; (407418 <main+0x84>)
  4073c2:	47a0      	blx	r4
    xTaskCreate(vCommTask, (const signed char *)"Comm", 512, NULL, 1, NULL);
  4073c4:	2300      	movs	r3, #0
  4073c6:	9303      	str	r3, [sp, #12]
  4073c8:	2300      	movs	r3, #0
  4073ca:	9302      	str	r3, [sp, #8]
  4073cc:	2300      	movs	r3, #0
  4073ce:	9301      	str	r3, [sp, #4]
  4073d0:	2301      	movs	r3, #1
  4073d2:	9300      	str	r3, [sp, #0]
  4073d4:	2300      	movs	r3, #0
  4073d6:	f44f 7200 	mov.w	r2, #512	; 0x200
  4073da:	4910      	ldr	r1, [pc, #64]	; (40741c <main+0x88>)
  4073dc:	4810      	ldr	r0, [pc, #64]	; (407420 <main+0x8c>)
  4073de:	4c0e      	ldr	r4, [pc, #56]	; (407418 <main+0x84>)
  4073e0:	47a0      	blx	r4
	xTaskCreate(vBlinkTask, (const signed char *)"Blinky", 100, NULL, 1, NULL);
  4073e2:	2300      	movs	r3, #0
  4073e4:	9303      	str	r3, [sp, #12]
  4073e6:	2300      	movs	r3, #0
  4073e8:	9302      	str	r3, [sp, #8]
  4073ea:	2300      	movs	r3, #0
  4073ec:	9301      	str	r3, [sp, #4]
  4073ee:	2301      	movs	r3, #1
  4073f0:	9300      	str	r3, [sp, #0]
  4073f2:	2300      	movs	r3, #0
  4073f4:	2264      	movs	r2, #100	; 0x64
  4073f6:	490b      	ldr	r1, [pc, #44]	; (407424 <main+0x90>)
  4073f8:	480b      	ldr	r0, [pc, #44]	; (407428 <main+0x94>)
  4073fa:	4c07      	ldr	r4, [pc, #28]	; (407418 <main+0x84>)
  4073fc:	47a0      	blx	r4
    
    /* Start Watchdog Timer */
        
    vTaskStartScheduler();
  4073fe:	4b0b      	ldr	r3, [pc, #44]	; (40742c <main+0x98>)
  407400:	4798      	blx	r3
    
	for( ;; );
  407402:	e7fe      	b.n	407402 <main+0x6e>
  407404:	00403d95 	.word	0x00403d95
  407408:	004039c5 	.word	0x004039c5
  40740c:	00407455 	.word	0x00407455
  407410:	0040b5a0 	.word	0x0040b5a0
  407414:	00400d4d 	.word	0x00400d4d
  407418:	00405bad 	.word	0x00405bad
  40741c:	0040b5a4 	.word	0x0040b5a4
  407420:	00406e55 	.word	0x00406e55
  407424:	0040b5ac 	.word	0x0040b5ac
  407428:	00407591 	.word	0x00407591
  40742c:	00405dcd 	.word	0x00405dcd

00407430 <vApplicationStackOverflowHook>:
}

void vApplicationStackOverflowHook(xTaskHandle pxTask, char *pcTaskName )
{
  407430:	b580      	push	{r7, lr}
  407432:	b082      	sub	sp, #8
  407434:	af00      	add	r7, sp, #0
  407436:	6078      	str	r0, [r7, #4]
  407438:	6039      	str	r1, [r7, #0]
	/* The stack space has been execeeded for a task, considering allocating more. */
	taskDISABLE_INTERRUPTS();
  40743a:	4b01      	ldr	r3, [pc, #4]	; (407440 <vApplicationStackOverflowHook+0x10>)
  40743c:	4798      	blx	r3
	for( ;; );
  40743e:	e7fe      	b.n	40743e <vApplicationStackOverflowHook+0xe>
  407440:	00405075 	.word	0x00405075

00407444 <vApplicationMallocFailedHook>:
}

void vApplicationMallocFailedHook( void )
{
  407444:	b580      	push	{r7, lr}
  407446:	af00      	add	r7, sp, #0
	/* The heap space has been execeeded. */
	taskDISABLE_INTERRUPTS();
  407448:	4b01      	ldr	r3, [pc, #4]	; (407450 <vApplicationMallocFailedHook+0xc>)
  40744a:	4798      	blx	r3
	for( ;; );
  40744c:	e7fe      	b.n	40744c <vApplicationMallocFailedHook+0x8>
  40744e:	bf00      	nop
  407450:	00405075 	.word	0x00405075

00407454 <vInitPeripherals>:
}

void vInitPeripherals( void )
{
  407454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407458:	b087      	sub	sp, #28
  40745a:	af00      	add	r7, sp, #0
	#if defined(DEBUG_EN) || defined(LOG_EN)
		ConsoleInit();
	#endif
	
	gpio_set_pin_low(PIN_LDOEN_IDX);
  40745c:	2001      	movs	r0, #1
  40745e:	4b45      	ldr	r3, [pc, #276]	; (407574 <vInitPeripherals+0x120>)
  407460:	4798      	blx	r3
	delay_ms(500);
  407462:	4b45      	ldr	r3, [pc, #276]	; (407578 <vInitPeripherals+0x124>)
  407464:	4798      	blx	r3
  407466:	4603      	mov	r3, r0
  407468:	4619      	mov	r1, r3
  40746a:	f04f 0200 	mov.w	r2, #0
  40746e:	460b      	mov	r3, r1
  407470:	4614      	mov	r4, r2
  407472:	ea4f 0b84 	mov.w	fp, r4, lsl #2
  407476:	ea4b 7b93 	orr.w	fp, fp, r3, lsr #30
  40747a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
  40747e:	4653      	mov	r3, sl
  407480:	465c      	mov	r4, fp
  407482:	ea4f 1944 	mov.w	r9, r4, lsl #5
  407486:	ea49 69d3 	orr.w	r9, r9, r3, lsr #27
  40748a:	ea4f 1843 	mov.w	r8, r3, lsl #5
  40748e:	ebb8 0803 	subs.w	r8, r8, r3
  407492:	eb69 0904 	sbc.w	r9, r9, r4
  407496:	eb18 0801 	adds.w	r8, r8, r1
  40749a:	eb49 0902 	adc.w	r9, r9, r2
  40749e:	ea4f 0389 	mov.w	r3, r9, lsl #2
  4074a2:	617b      	str	r3, [r7, #20]
  4074a4:	697b      	ldr	r3, [r7, #20]
  4074a6:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
  4074aa:	617b      	str	r3, [r7, #20]
  4074ac:	ea4f 0388 	mov.w	r3, r8, lsl #2
  4074b0:	613b      	str	r3, [r7, #16]
  4074b2:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
  4074b6:	4641      	mov	r1, r8
  4074b8:	464a      	mov	r2, r9
  4074ba:	f243 63af 	movw	r3, #13999	; 0x36af
  4074be:	f04f 0400 	mov.w	r4, #0
  4074c2:	eb11 0803 	adds.w	r8, r1, r3
  4074c6:	eb42 0904 	adc.w	r9, r2, r4
  4074ca:	4640      	mov	r0, r8
  4074cc:	4649      	mov	r1, r9
  4074ce:	4c2b      	ldr	r4, [pc, #172]	; (40757c <vInitPeripherals+0x128>)
  4074d0:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4074d4:	f04f 0300 	mov.w	r3, #0
  4074d8:	47a0      	blx	r4
  4074da:	4603      	mov	r3, r0
  4074dc:	460c      	mov	r4, r1
  4074de:	4618      	mov	r0, r3
  4074e0:	4b27      	ldr	r3, [pc, #156]	; (407580 <vInitPeripherals+0x12c>)
  4074e2:	4798      	blx	r3
	/* Enable LDO */
	gpio_set_pin_high(PIN_LDOEN_IDX);
  4074e4:	2001      	movs	r0, #1
  4074e6:	4b27      	ldr	r3, [pc, #156]	; (407584 <vInitPeripherals+0x130>)
  4074e8:	4798      	blx	r3
	delay_ms(1000);
  4074ea:	4b23      	ldr	r3, [pc, #140]	; (407578 <vInitPeripherals+0x124>)
  4074ec:	4798      	blx	r3
  4074ee:	4603      	mov	r3, r0
  4074f0:	4619      	mov	r1, r3
  4074f2:	f04f 0200 	mov.w	r2, #0
  4074f6:	460b      	mov	r3, r1
  4074f8:	4614      	mov	r4, r2
  4074fa:	00a0      	lsls	r0, r4, #2
  4074fc:	60f8      	str	r0, [r7, #12]
  4074fe:	68f8      	ldr	r0, [r7, #12]
  407500:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  407504:	60f8      	str	r0, [r7, #12]
  407506:	009b      	lsls	r3, r3, #2
  407508:	60bb      	str	r3, [r7, #8]
  40750a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  40750e:	0166      	lsls	r6, r4, #5
  407510:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  407514:	015d      	lsls	r5, r3, #5
  407516:	1aed      	subs	r5, r5, r3
  407518:	eb66 0604 	sbc.w	r6, r6, r4
  40751c:	186d      	adds	r5, r5, r1
  40751e:	eb46 0602 	adc.w	r6, r6, r2
  407522:	00f3      	lsls	r3, r6, #3
  407524:	607b      	str	r3, [r7, #4]
  407526:	687b      	ldr	r3, [r7, #4]
  407528:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
  40752c:	607b      	str	r3, [r7, #4]
  40752e:	00eb      	lsls	r3, r5, #3
  407530:	603b      	str	r3, [r7, #0]
  407532:	e9d7 5600 	ldrd	r5, r6, [r7]
  407536:	4629      	mov	r1, r5
  407538:	4632      	mov	r2, r6
  40753a:	f243 63af 	movw	r3, #13999	; 0x36af
  40753e:	f04f 0400 	mov.w	r4, #0
  407542:	18cd      	adds	r5, r1, r3
  407544:	eb42 0604 	adc.w	r6, r2, r4
  407548:	4628      	mov	r0, r5
  40754a:	4631      	mov	r1, r6
  40754c:	4c0b      	ldr	r4, [pc, #44]	; (40757c <vInitPeripherals+0x128>)
  40754e:	f243 62b0 	movw	r2, #14000	; 0x36b0
  407552:	f04f 0300 	mov.w	r3, #0
  407556:	47a0      	blx	r4
  407558:	4603      	mov	r3, r0
  40755a:	460c      	mov	r4, r1
  40755c:	4618      	mov	r0, r3
  40755e:	4b08      	ldr	r3, [pc, #32]	; (407580 <vInitPeripherals+0x12c>)
  407560:	4798      	blx	r3

	/* Initialize all RTOS vars */
	//vCCInit();
	vPvTrackerInit();
  407562:	4b09      	ldr	r3, [pc, #36]	; (407588 <vInitPeripherals+0x134>)
  407564:	4798      	blx	r3
	vCommInit();
  407566:	4b09      	ldr	r3, [pc, #36]	; (40758c <vInitPeripherals+0x138>)
  407568:	4798      	blx	r3
}
  40756a:	bf00      	nop
  40756c:	371c      	adds	r7, #28
  40756e:	46bd      	mov	sp, r7
  407570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407574:	00404129 	.word	0x00404129
  407578:	00407381 	.word	0x00407381
  40757c:	0040ae29 	.word	0x0040ae29
  407580:	20000001 	.word	0x20000001
  407584:	004040f9 	.word	0x004040f9
  407588:	00400ddd 	.word	0x00400ddd
  40758c:	00406fb5 	.word	0x00406fb5

00407590 <vBlinkTask>:

void vBlinkTask( void *pvParameters )
{
  407590:	b580      	push	{r7, lr}
  407592:	b082      	sub	sp, #8
  407594:	af00      	add	r7, sp, #0
  407596:	6078      	str	r0, [r7, #4]
	while(1)
	{
		gpio_set_pin_high(PIN_DEBUGLED_IDX);
  407598:	2010      	movs	r0, #16
  40759a:	4b06      	ldr	r3, [pc, #24]	; (4075b4 <vBlinkTask+0x24>)
  40759c:	4798      	blx	r3
		vTaskDelay(500 / portTICK_RATE_MS);
  40759e:	2064      	movs	r0, #100	; 0x64
  4075a0:	4b05      	ldr	r3, [pc, #20]	; (4075b8 <vBlinkTask+0x28>)
  4075a2:	4798      	blx	r3
		gpio_set_pin_low(PIN_DEBUGLED_IDX);
  4075a4:	2010      	movs	r0, #16
  4075a6:	4b05      	ldr	r3, [pc, #20]	; (4075bc <vBlinkTask+0x2c>)
  4075a8:	4798      	blx	r3
		vTaskDelay(500 / portTICK_RATE_MS);
  4075aa:	2064      	movs	r0, #100	; 0x64
  4075ac:	4b02      	ldr	r3, [pc, #8]	; (4075b8 <vBlinkTask+0x28>)
  4075ae:	4798      	blx	r3
	}
  4075b0:	e7f2      	b.n	407598 <vBlinkTask+0x8>
  4075b2:	bf00      	nop
  4075b4:	004040f9 	.word	0x004040f9
  4075b8:	00405d65 	.word	0x00405d65
  4075bc:	00404129 	.word	0x00404129

004075c0 <cos>:
  4075c0:	b530      	push	{r4, r5, lr}
  4075c2:	4a22      	ldr	r2, [pc, #136]	; (40764c <cos+0x8c>)
  4075c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  4075c8:	4293      	cmp	r3, r2
  4075ca:	b087      	sub	sp, #28
  4075cc:	dd1b      	ble.n	407606 <cos+0x46>
  4075ce:	4a20      	ldr	r2, [pc, #128]	; (407650 <cos+0x90>)
  4075d0:	4293      	cmp	r3, r2
  4075d2:	dd05      	ble.n	4075e0 <cos+0x20>
  4075d4:	4602      	mov	r2, r0
  4075d6:	460b      	mov	r3, r1
  4075d8:	f002 fc50 	bl	409e7c <__aeabi_dsub>
  4075dc:	b007      	add	sp, #28
  4075de:	bd30      	pop	{r4, r5, pc}
  4075e0:	aa02      	add	r2, sp, #8
  4075e2:	f000 ff09 	bl	4083f8 <__ieee754_rem_pio2>
  4075e6:	f000 0303 	and.w	r3, r0, #3
  4075ea:	2b01      	cmp	r3, #1
  4075ec:	d01a      	beq.n	407624 <cos+0x64>
  4075ee:	2b02      	cmp	r3, #2
  4075f0:	d00f      	beq.n	407612 <cos+0x52>
  4075f2:	b31b      	cbz	r3, 40763c <cos+0x7c>
  4075f4:	2401      	movs	r4, #1
  4075f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4075fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4075fe:	9400      	str	r4, [sp, #0]
  407600:	f001 fefe 	bl	409400 <__kernel_sin>
  407604:	e7ea      	b.n	4075dc <cos+0x1c>
  407606:	2200      	movs	r2, #0
  407608:	2300      	movs	r3, #0
  40760a:	f001 f9d9 	bl	4089c0 <__kernel_cos>
  40760e:	b007      	add	sp, #28
  407610:	bd30      	pop	{r4, r5, pc}
  407612:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  407616:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40761a:	f001 f9d1 	bl	4089c0 <__kernel_cos>
  40761e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  407622:	e7db      	b.n	4075dc <cos+0x1c>
  407624:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  407628:	9300      	str	r3, [sp, #0]
  40762a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40762e:	4622      	mov	r2, r4
  407630:	462b      	mov	r3, r5
  407632:	f001 fee5 	bl	409400 <__kernel_sin>
  407636:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  40763a:	e7cf      	b.n	4075dc <cos+0x1c>
  40763c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  407640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407644:	f001 f9bc 	bl	4089c0 <__kernel_cos>
  407648:	e7c8      	b.n	4075dc <cos+0x1c>
  40764a:	bf00      	nop
  40764c:	3fe921fb 	.word	0x3fe921fb
  407650:	7fefffff 	.word	0x7fefffff

00407654 <sin>:
  407654:	b530      	push	{r4, r5, lr}
  407656:	4a1f      	ldr	r2, [pc, #124]	; (4076d4 <sin+0x80>)
  407658:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  40765c:	4293      	cmp	r3, r2
  40765e:	b087      	sub	sp, #28
  407660:	dd1b      	ble.n	40769a <sin+0x46>
  407662:	4a1d      	ldr	r2, [pc, #116]	; (4076d8 <sin+0x84>)
  407664:	4293      	cmp	r3, r2
  407666:	dd05      	ble.n	407674 <sin+0x20>
  407668:	4602      	mov	r2, r0
  40766a:	460b      	mov	r3, r1
  40766c:	f002 fc06 	bl	409e7c <__aeabi_dsub>
  407670:	b007      	add	sp, #28
  407672:	bd30      	pop	{r4, r5, pc}
  407674:	aa02      	add	r2, sp, #8
  407676:	f000 febf 	bl	4083f8 <__ieee754_rem_pio2>
  40767a:	f000 0003 	and.w	r0, r0, #3
  40767e:	2801      	cmp	r0, #1
  407680:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  407684:	d01a      	beq.n	4076bc <sin+0x68>
  407686:	2802      	cmp	r0, #2
  407688:	d00f      	beq.n	4076aa <sin+0x56>
  40768a:	b1e0      	cbz	r0, 4076c6 <sin+0x72>
  40768c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407690:	f001 f996 	bl	4089c0 <__kernel_cos>
  407694:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  407698:	e7ea      	b.n	407670 <sin+0x1c>
  40769a:	2300      	movs	r3, #0
  40769c:	9300      	str	r3, [sp, #0]
  40769e:	2200      	movs	r2, #0
  4076a0:	2300      	movs	r3, #0
  4076a2:	f001 fead 	bl	409400 <__kernel_sin>
  4076a6:	b007      	add	sp, #28
  4076a8:	bd30      	pop	{r4, r5, pc}
  4076aa:	2401      	movs	r4, #1
  4076ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4076b0:	9400      	str	r4, [sp, #0]
  4076b2:	f001 fea5 	bl	409400 <__kernel_sin>
  4076b6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4076ba:	e7d9      	b.n	407670 <sin+0x1c>
  4076bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4076c0:	f001 f97e 	bl	4089c0 <__kernel_cos>
  4076c4:	e7d4      	b.n	407670 <sin+0x1c>
  4076c6:	2401      	movs	r4, #1
  4076c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4076cc:	9400      	str	r4, [sp, #0]
  4076ce:	f001 fe97 	bl	409400 <__kernel_sin>
  4076d2:	e7cd      	b.n	407670 <sin+0x1c>
  4076d4:	3fe921fb 	.word	0x3fe921fb
  4076d8:	7fefffff 	.word	0x7fefffff

004076dc <tan>:
  4076dc:	b530      	push	{r4, r5, lr}
  4076de:	4a14      	ldr	r2, [pc, #80]	; (407730 <tan+0x54>)
  4076e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  4076e4:	4293      	cmp	r3, r2
  4076e6:	b087      	sub	sp, #28
  4076e8:	dd19      	ble.n	40771e <tan+0x42>
  4076ea:	4a12      	ldr	r2, [pc, #72]	; (407734 <tan+0x58>)
  4076ec:	4293      	cmp	r3, r2
  4076ee:	dd05      	ble.n	4076fc <tan+0x20>
  4076f0:	4602      	mov	r2, r0
  4076f2:	460b      	mov	r3, r1
  4076f4:	f002 fbc2 	bl	409e7c <__aeabi_dsub>
  4076f8:	b007      	add	sp, #28
  4076fa:	bd30      	pop	{r4, r5, pc}
  4076fc:	aa02      	add	r2, sp, #8
  4076fe:	f000 fe7b 	bl	4083f8 <__ieee754_rem_pio2>
  407702:	0044      	lsls	r4, r0, #1
  407704:	f004 0402 	and.w	r4, r4, #2
  407708:	f1c4 0401 	rsb	r4, r4, #1
  40770c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  407710:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407714:	9400      	str	r4, [sp, #0]
  407716:	f001 ff2b 	bl	409570 <__kernel_tan>
  40771a:	b007      	add	sp, #28
  40771c:	bd30      	pop	{r4, r5, pc}
  40771e:	2301      	movs	r3, #1
  407720:	9300      	str	r3, [sp, #0]
  407722:	2200      	movs	r2, #0
  407724:	2300      	movs	r3, #0
  407726:	f001 ff23 	bl	409570 <__kernel_tan>
  40772a:	b007      	add	sp, #28
  40772c:	bd30      	pop	{r4, r5, pc}
  40772e:	bf00      	nop
  407730:	3fe921fb 	.word	0x3fe921fb
  407734:	7fefffff 	.word	0x7fefffff

00407738 <acos>:
  407738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40773c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 4077e4 <acos+0xac>
  407740:	b08b      	sub	sp, #44	; 0x2c
  407742:	4604      	mov	r4, r0
  407744:	460d      	mov	r5, r1
  407746:	f000 f907 	bl	407958 <__ieee754_acos>
  40774a:	f998 3000 	ldrsb.w	r3, [r8]
  40774e:	3301      	adds	r3, #1
  407750:	4606      	mov	r6, r0
  407752:	460f      	mov	r7, r1
  407754:	d02e      	beq.n	4077b4 <acos+0x7c>
  407756:	4622      	mov	r2, r4
  407758:	462b      	mov	r3, r5
  40775a:	4620      	mov	r0, r4
  40775c:	4629      	mov	r1, r5
  40775e:	f002 ffdb 	bl	40a718 <__aeabi_dcmpun>
  407762:	4681      	mov	r9, r0
  407764:	bb30      	cbnz	r0, 4077b4 <acos+0x7c>
  407766:	4620      	mov	r0, r4
  407768:	4629      	mov	r1, r5
  40776a:	f002 fa67 	bl	409c3c <fabs>
  40776e:	2200      	movs	r2, #0
  407770:	4b19      	ldr	r3, [pc, #100]	; (4077d8 <acos+0xa0>)
  407772:	f002 ffc7 	bl	40a704 <__aeabi_dcmpgt>
  407776:	b1e8      	cbz	r0, 4077b4 <acos+0x7c>
  407778:	4b18      	ldr	r3, [pc, #96]	; (4077dc <acos+0xa4>)
  40777a:	4819      	ldr	r0, [pc, #100]	; (4077e0 <acos+0xa8>)
  40777c:	f8cd 9020 	str.w	r9, [sp, #32]
  407780:	2201      	movs	r2, #1
  407782:	e88d 000c 	stmia.w	sp, {r2, r3}
  407786:	e9cd 4504 	strd	r4, r5, [sp, #16]
  40778a:	e9cd 4502 	strd	r4, r5, [sp, #8]
  40778e:	f002 fae5 	bl	409d5c <nan>
  407792:	f998 3000 	ldrsb.w	r3, [r8]
  407796:	2b02      	cmp	r3, #2
  407798:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40779c:	d00f      	beq.n	4077be <acos+0x86>
  40779e:	4668      	mov	r0, sp
  4077a0:	f002 fada 	bl	409d58 <matherr>
  4077a4:	b158      	cbz	r0, 4077be <acos+0x86>
  4077a6:	9b08      	ldr	r3, [sp, #32]
  4077a8:	b983      	cbnz	r3, 4077cc <acos+0x94>
  4077aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4077ae:	b00b      	add	sp, #44	; 0x2c
  4077b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4077b4:	4630      	mov	r0, r6
  4077b6:	4639      	mov	r1, r7
  4077b8:	b00b      	add	sp, #44	; 0x2c
  4077ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4077be:	f003 fcbf 	bl	40b140 <__errno>
  4077c2:	2321      	movs	r3, #33	; 0x21
  4077c4:	6003      	str	r3, [r0, #0]
  4077c6:	9b08      	ldr	r3, [sp, #32]
  4077c8:	2b00      	cmp	r3, #0
  4077ca:	d0ee      	beq.n	4077aa <acos+0x72>
  4077cc:	f003 fcb8 	bl	40b140 <__errno>
  4077d0:	9b08      	ldr	r3, [sp, #32]
  4077d2:	6003      	str	r3, [r0, #0]
  4077d4:	e7e9      	b.n	4077aa <acos+0x72>
  4077d6:	bf00      	nop
  4077d8:	3ff00000 	.word	0x3ff00000
  4077dc:	0040b5b4 	.word	0x0040b5b4
  4077e0:	0040b5c0 	.word	0x0040b5c0
  4077e4:	20000035 	.word	0x20000035

004077e8 <asin>:
  4077e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4077ec:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 407894 <asin+0xac>
  4077f0:	b08b      	sub	sp, #44	; 0x2c
  4077f2:	4604      	mov	r4, r0
  4077f4:	460d      	mov	r5, r1
  4077f6:	f000 fb03 	bl	407e00 <__ieee754_asin>
  4077fa:	f998 3000 	ldrsb.w	r3, [r8]
  4077fe:	3301      	adds	r3, #1
  407800:	4606      	mov	r6, r0
  407802:	460f      	mov	r7, r1
  407804:	d02e      	beq.n	407864 <asin+0x7c>
  407806:	4622      	mov	r2, r4
  407808:	462b      	mov	r3, r5
  40780a:	4620      	mov	r0, r4
  40780c:	4629      	mov	r1, r5
  40780e:	f002 ff83 	bl	40a718 <__aeabi_dcmpun>
  407812:	4681      	mov	r9, r0
  407814:	bb30      	cbnz	r0, 407864 <asin+0x7c>
  407816:	4620      	mov	r0, r4
  407818:	4629      	mov	r1, r5
  40781a:	f002 fa0f 	bl	409c3c <fabs>
  40781e:	2200      	movs	r2, #0
  407820:	4b19      	ldr	r3, [pc, #100]	; (407888 <asin+0xa0>)
  407822:	f002 ff6f 	bl	40a704 <__aeabi_dcmpgt>
  407826:	b1e8      	cbz	r0, 407864 <asin+0x7c>
  407828:	4b18      	ldr	r3, [pc, #96]	; (40788c <asin+0xa4>)
  40782a:	4819      	ldr	r0, [pc, #100]	; (407890 <asin+0xa8>)
  40782c:	f8cd 9020 	str.w	r9, [sp, #32]
  407830:	2201      	movs	r2, #1
  407832:	e88d 000c 	stmia.w	sp, {r2, r3}
  407836:	e9cd 4504 	strd	r4, r5, [sp, #16]
  40783a:	e9cd 4502 	strd	r4, r5, [sp, #8]
  40783e:	f002 fa8d 	bl	409d5c <nan>
  407842:	f998 3000 	ldrsb.w	r3, [r8]
  407846:	2b02      	cmp	r3, #2
  407848:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40784c:	d00f      	beq.n	40786e <asin+0x86>
  40784e:	4668      	mov	r0, sp
  407850:	f002 fa82 	bl	409d58 <matherr>
  407854:	b158      	cbz	r0, 40786e <asin+0x86>
  407856:	9b08      	ldr	r3, [sp, #32]
  407858:	b983      	cbnz	r3, 40787c <asin+0x94>
  40785a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40785e:	b00b      	add	sp, #44	; 0x2c
  407860:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407864:	4630      	mov	r0, r6
  407866:	4639      	mov	r1, r7
  407868:	b00b      	add	sp, #44	; 0x2c
  40786a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40786e:	f003 fc67 	bl	40b140 <__errno>
  407872:	2321      	movs	r3, #33	; 0x21
  407874:	6003      	str	r3, [r0, #0]
  407876:	9b08      	ldr	r3, [sp, #32]
  407878:	2b00      	cmp	r3, #0
  40787a:	d0ee      	beq.n	40785a <asin+0x72>
  40787c:	f003 fc60 	bl	40b140 <__errno>
  407880:	9b08      	ldr	r3, [sp, #32]
  407882:	6003      	str	r3, [r0, #0]
  407884:	e7e9      	b.n	40785a <asin+0x72>
  407886:	bf00      	nop
  407888:	3ff00000 	.word	0x3ff00000
  40788c:	0040b5bc 	.word	0x0040b5bc
  407890:	0040b5c0 	.word	0x0040b5c0
  407894:	20000035 	.word	0x20000035

00407898 <atan2>:
  407898:	f000 bce2 	b.w	408260 <__ieee754_atan2>

0040789c <sqrt>:
  40789c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4078a0:	b08b      	sub	sp, #44	; 0x2c
  4078a2:	4604      	mov	r4, r0
  4078a4:	460d      	mov	r5, r1
  4078a6:	f000 ffc9 	bl	40883c <__ieee754_sqrt>
  4078aa:	4b28      	ldr	r3, [pc, #160]	; (40794c <sqrt+0xb0>)
  4078ac:	f993 a000 	ldrsb.w	sl, [r3]
  4078b0:	f1ba 3fff 	cmp.w	sl, #4294967295
  4078b4:	4606      	mov	r6, r0
  4078b6:	460f      	mov	r7, r1
  4078b8:	d012      	beq.n	4078e0 <sqrt+0x44>
  4078ba:	4622      	mov	r2, r4
  4078bc:	462b      	mov	r3, r5
  4078be:	4620      	mov	r0, r4
  4078c0:	4629      	mov	r1, r5
  4078c2:	f002 ff29 	bl	40a718 <__aeabi_dcmpun>
  4078c6:	4683      	mov	fp, r0
  4078c8:	b950      	cbnz	r0, 4078e0 <sqrt+0x44>
  4078ca:	f04f 0800 	mov.w	r8, #0
  4078ce:	f04f 0900 	mov.w	r9, #0
  4078d2:	4642      	mov	r2, r8
  4078d4:	464b      	mov	r3, r9
  4078d6:	4620      	mov	r0, r4
  4078d8:	4629      	mov	r1, r5
  4078da:	f002 fef5 	bl	40a6c8 <__aeabi_dcmplt>
  4078de:	b920      	cbnz	r0, 4078ea <sqrt+0x4e>
  4078e0:	4630      	mov	r0, r6
  4078e2:	4639      	mov	r1, r7
  4078e4:	b00b      	add	sp, #44	; 0x2c
  4078e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4078ea:	4b19      	ldr	r3, [pc, #100]	; (407950 <sqrt+0xb4>)
  4078ec:	f8cd b020 	str.w	fp, [sp, #32]
  4078f0:	2201      	movs	r2, #1
  4078f2:	e9cd 4504 	strd	r4, r5, [sp, #16]
  4078f6:	e9cd 4502 	strd	r4, r5, [sp, #8]
  4078fa:	e88d 000c 	stmia.w	sp, {r2, r3}
  4078fe:	f1ba 0f00 	cmp.w	sl, #0
  407902:	d015      	beq.n	407930 <sqrt+0x94>
  407904:	4642      	mov	r2, r8
  407906:	464b      	mov	r3, r9
  407908:	4640      	mov	r0, r8
  40790a:	4649      	mov	r1, r9
  40790c:	f002 fd94 	bl	40a438 <__aeabi_ddiv>
  407910:	f1ba 0f02 	cmp.w	sl, #2
  407914:	e9cd 0106 	strd	r0, r1, [sp, #24]
  407918:	d10c      	bne.n	407934 <sqrt+0x98>
  40791a:	f003 fc11 	bl	40b140 <__errno>
  40791e:	2321      	movs	r3, #33	; 0x21
  407920:	6003      	str	r3, [r0, #0]
  407922:	9b08      	ldr	r3, [sp, #32]
  407924:	b963      	cbnz	r3, 407940 <sqrt+0xa4>
  407926:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40792a:	b00b      	add	sp, #44	; 0x2c
  40792c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407930:	e9cd 8906 	strd	r8, r9, [sp, #24]
  407934:	4668      	mov	r0, sp
  407936:	f002 fa0f 	bl	409d58 <matherr>
  40793a:	2800      	cmp	r0, #0
  40793c:	d1f1      	bne.n	407922 <sqrt+0x86>
  40793e:	e7ec      	b.n	40791a <sqrt+0x7e>
  407940:	f003 fbfe 	bl	40b140 <__errno>
  407944:	9b08      	ldr	r3, [sp, #32]
  407946:	6003      	str	r3, [r0, #0]
  407948:	e7ed      	b.n	407926 <sqrt+0x8a>
  40794a:	bf00      	nop
  40794c:	20000035 	.word	0x20000035
  407950:	0040b5c4 	.word	0x0040b5c4
  407954:	00000000 	.word	0x00000000

00407958 <__ieee754_acos>:
  407958:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40795c:	4ec4      	ldr	r6, [pc, #784]	; (407c70 <__ieee754_acos+0x318>)
  40795e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  407962:	42b3      	cmp	r3, r6
  407964:	460c      	mov	r4, r1
  407966:	4605      	mov	r5, r0
  407968:	dd0d      	ble.n	407986 <__ieee754_acos+0x2e>
  40796a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
  40796e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
  407972:	4303      	orrs	r3, r0
  407974:	f040 80b9 	bne.w	407aea <__ieee754_acos+0x192>
  407978:	2900      	cmp	r1, #0
  40797a:	f340 8140 	ble.w	407bfe <__ieee754_acos+0x2a6>
  40797e:	2000      	movs	r0, #0
  407980:	2100      	movs	r1, #0
  407982:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407986:	4ebb      	ldr	r6, [pc, #748]	; (407c74 <__ieee754_acos+0x31c>)
  407988:	42b3      	cmp	r3, r6
  40798a:	f340 80a6 	ble.w	407ada <__ieee754_acos+0x182>
  40798e:	2900      	cmp	r1, #0
  407990:	f2c0 8178 	blt.w	407c84 <__ieee754_acos+0x32c>
  407994:	4602      	mov	r2, r0
  407996:	460b      	mov	r3, r1
  407998:	2000      	movs	r0, #0
  40799a:	49b7      	ldr	r1, [pc, #732]	; (407c78 <__ieee754_acos+0x320>)
  40799c:	f002 fa6e 	bl	409e7c <__aeabi_dsub>
  4079a0:	2200      	movs	r2, #0
  4079a2:	4bb6      	ldr	r3, [pc, #728]	; (407c7c <__ieee754_acos+0x324>)
  4079a4:	f002 fc1e 	bl	40a1e4 <__aeabi_dmul>
  4079a8:	4604      	mov	r4, r0
  4079aa:	460d      	mov	r5, r1
  4079ac:	f000 ff46 	bl	40883c <__ieee754_sqrt>
  4079b0:	a395      	add	r3, pc, #596	; (adr r3, 407c08 <__ieee754_acos+0x2b0>)
  4079b2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4079b6:	4689      	mov	r9, r1
  4079b8:	4680      	mov	r8, r0
  4079ba:	4629      	mov	r1, r5
  4079bc:	4620      	mov	r0, r4
  4079be:	f002 fc11 	bl	40a1e4 <__aeabi_dmul>
  4079c2:	a393      	add	r3, pc, #588	; (adr r3, 407c10 <__ieee754_acos+0x2b8>)
  4079c4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4079c8:	f002 fa5a 	bl	409e80 <__adddf3>
  4079cc:	4622      	mov	r2, r4
  4079ce:	462b      	mov	r3, r5
  4079d0:	f002 fc08 	bl	40a1e4 <__aeabi_dmul>
  4079d4:	a390      	add	r3, pc, #576	; (adr r3, 407c18 <__ieee754_acos+0x2c0>)
  4079d6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4079da:	f002 fa4f 	bl	409e7c <__aeabi_dsub>
  4079de:	4622      	mov	r2, r4
  4079e0:	462b      	mov	r3, r5
  4079e2:	f002 fbff 	bl	40a1e4 <__aeabi_dmul>
  4079e6:	a38e      	add	r3, pc, #568	; (adr r3, 407c20 <__ieee754_acos+0x2c8>)
  4079e8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4079ec:	f002 fa48 	bl	409e80 <__adddf3>
  4079f0:	4622      	mov	r2, r4
  4079f2:	462b      	mov	r3, r5
  4079f4:	f002 fbf6 	bl	40a1e4 <__aeabi_dmul>
  4079f8:	a38b      	add	r3, pc, #556	; (adr r3, 407c28 <__ieee754_acos+0x2d0>)
  4079fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4079fe:	f002 fa3d 	bl	409e7c <__aeabi_dsub>
  407a02:	4622      	mov	r2, r4
  407a04:	462b      	mov	r3, r5
  407a06:	f002 fbed 	bl	40a1e4 <__aeabi_dmul>
  407a0a:	a389      	add	r3, pc, #548	; (adr r3, 407c30 <__ieee754_acos+0x2d8>)
  407a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
  407a10:	f002 fa36 	bl	409e80 <__adddf3>
  407a14:	4622      	mov	r2, r4
  407a16:	462b      	mov	r3, r5
  407a18:	f002 fbe4 	bl	40a1e4 <__aeabi_dmul>
  407a1c:	a386      	add	r3, pc, #536	; (adr r3, 407c38 <__ieee754_acos+0x2e0>)
  407a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
  407a22:	4682      	mov	sl, r0
  407a24:	468b      	mov	fp, r1
  407a26:	4620      	mov	r0, r4
  407a28:	4629      	mov	r1, r5
  407a2a:	f002 fbdb 	bl	40a1e4 <__aeabi_dmul>
  407a2e:	a384      	add	r3, pc, #528	; (adr r3, 407c40 <__ieee754_acos+0x2e8>)
  407a30:	e9d3 2300 	ldrd	r2, r3, [r3]
  407a34:	f002 fa22 	bl	409e7c <__aeabi_dsub>
  407a38:	4622      	mov	r2, r4
  407a3a:	462b      	mov	r3, r5
  407a3c:	f002 fbd2 	bl	40a1e4 <__aeabi_dmul>
  407a40:	a381      	add	r3, pc, #516	; (adr r3, 407c48 <__ieee754_acos+0x2f0>)
  407a42:	e9d3 2300 	ldrd	r2, r3, [r3]
  407a46:	f002 fa1b 	bl	409e80 <__adddf3>
  407a4a:	4622      	mov	r2, r4
  407a4c:	462b      	mov	r3, r5
  407a4e:	f002 fbc9 	bl	40a1e4 <__aeabi_dmul>
  407a52:	a37f      	add	r3, pc, #508	; (adr r3, 407c50 <__ieee754_acos+0x2f8>)
  407a54:	e9d3 2300 	ldrd	r2, r3, [r3]
  407a58:	f002 fa10 	bl	409e7c <__aeabi_dsub>
  407a5c:	4622      	mov	r2, r4
  407a5e:	462b      	mov	r3, r5
  407a60:	f002 fbc0 	bl	40a1e4 <__aeabi_dmul>
  407a64:	2200      	movs	r2, #0
  407a66:	4b84      	ldr	r3, [pc, #528]	; (407c78 <__ieee754_acos+0x320>)
  407a68:	f002 fa0a 	bl	409e80 <__adddf3>
  407a6c:	4602      	mov	r2, r0
  407a6e:	460b      	mov	r3, r1
  407a70:	4650      	mov	r0, sl
  407a72:	4659      	mov	r1, fp
  407a74:	f002 fce0 	bl	40a438 <__aeabi_ddiv>
  407a78:	4642      	mov	r2, r8
  407a7a:	464b      	mov	r3, r9
  407a7c:	f002 fbb2 	bl	40a1e4 <__aeabi_dmul>
  407a80:	2600      	movs	r6, #0
  407a82:	4682      	mov	sl, r0
  407a84:	468b      	mov	fp, r1
  407a86:	4632      	mov	r2, r6
  407a88:	464b      	mov	r3, r9
  407a8a:	4630      	mov	r0, r6
  407a8c:	4649      	mov	r1, r9
  407a8e:	f002 fba9 	bl	40a1e4 <__aeabi_dmul>
  407a92:	4602      	mov	r2, r0
  407a94:	460b      	mov	r3, r1
  407a96:	4620      	mov	r0, r4
  407a98:	4629      	mov	r1, r5
  407a9a:	f002 f9ef 	bl	409e7c <__aeabi_dsub>
  407a9e:	4632      	mov	r2, r6
  407aa0:	4604      	mov	r4, r0
  407aa2:	460d      	mov	r5, r1
  407aa4:	464b      	mov	r3, r9
  407aa6:	4640      	mov	r0, r8
  407aa8:	4649      	mov	r1, r9
  407aaa:	f002 f9e9 	bl	409e80 <__adddf3>
  407aae:	4602      	mov	r2, r0
  407ab0:	460b      	mov	r3, r1
  407ab2:	4620      	mov	r0, r4
  407ab4:	4629      	mov	r1, r5
  407ab6:	f002 fcbf 	bl	40a438 <__aeabi_ddiv>
  407aba:	4602      	mov	r2, r0
  407abc:	460b      	mov	r3, r1
  407abe:	4650      	mov	r0, sl
  407ac0:	4659      	mov	r1, fp
  407ac2:	f002 f9dd 	bl	409e80 <__adddf3>
  407ac6:	4632      	mov	r2, r6
  407ac8:	464b      	mov	r3, r9
  407aca:	f002 f9d9 	bl	409e80 <__adddf3>
  407ace:	4602      	mov	r2, r0
  407ad0:	460b      	mov	r3, r1
  407ad2:	f002 f9d5 	bl	409e80 <__adddf3>
  407ad6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407ada:	4a69      	ldr	r2, [pc, #420]	; (407c80 <__ieee754_acos+0x328>)
  407adc:	4293      	cmp	r3, r2
  407ade:	dc0e      	bgt.n	407afe <__ieee754_acos+0x1a6>
  407ae0:	a15d      	add	r1, pc, #372	; (adr r1, 407c58 <__ieee754_acos+0x300>)
  407ae2:	e9d1 0100 	ldrd	r0, r1, [r1]
  407ae6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407aea:	4602      	mov	r2, r0
  407aec:	460b      	mov	r3, r1
  407aee:	f002 f9c5 	bl	409e7c <__aeabi_dsub>
  407af2:	4602      	mov	r2, r0
  407af4:	460b      	mov	r3, r1
  407af6:	f002 fc9f 	bl	40a438 <__aeabi_ddiv>
  407afa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407afe:	4602      	mov	r2, r0
  407b00:	460b      	mov	r3, r1
  407b02:	f002 fb6f 	bl	40a1e4 <__aeabi_dmul>
  407b06:	a340      	add	r3, pc, #256	; (adr r3, 407c08 <__ieee754_acos+0x2b0>)
  407b08:	e9d3 2300 	ldrd	r2, r3, [r3]
  407b0c:	4606      	mov	r6, r0
  407b0e:	460f      	mov	r7, r1
  407b10:	f002 fb68 	bl	40a1e4 <__aeabi_dmul>
  407b14:	a33e      	add	r3, pc, #248	; (adr r3, 407c10 <__ieee754_acos+0x2b8>)
  407b16:	e9d3 2300 	ldrd	r2, r3, [r3]
  407b1a:	f002 f9b1 	bl	409e80 <__adddf3>
  407b1e:	4632      	mov	r2, r6
  407b20:	463b      	mov	r3, r7
  407b22:	f002 fb5f 	bl	40a1e4 <__aeabi_dmul>
  407b26:	a33c      	add	r3, pc, #240	; (adr r3, 407c18 <__ieee754_acos+0x2c0>)
  407b28:	e9d3 2300 	ldrd	r2, r3, [r3]
  407b2c:	f002 f9a6 	bl	409e7c <__aeabi_dsub>
  407b30:	4632      	mov	r2, r6
  407b32:	463b      	mov	r3, r7
  407b34:	f002 fb56 	bl	40a1e4 <__aeabi_dmul>
  407b38:	a339      	add	r3, pc, #228	; (adr r3, 407c20 <__ieee754_acos+0x2c8>)
  407b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
  407b3e:	f002 f99f 	bl	409e80 <__adddf3>
  407b42:	4632      	mov	r2, r6
  407b44:	463b      	mov	r3, r7
  407b46:	f002 fb4d 	bl	40a1e4 <__aeabi_dmul>
  407b4a:	a337      	add	r3, pc, #220	; (adr r3, 407c28 <__ieee754_acos+0x2d0>)
  407b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
  407b50:	f002 f994 	bl	409e7c <__aeabi_dsub>
  407b54:	4632      	mov	r2, r6
  407b56:	463b      	mov	r3, r7
  407b58:	f002 fb44 	bl	40a1e4 <__aeabi_dmul>
  407b5c:	a334      	add	r3, pc, #208	; (adr r3, 407c30 <__ieee754_acos+0x2d8>)
  407b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
  407b62:	f002 f98d 	bl	409e80 <__adddf3>
  407b66:	4632      	mov	r2, r6
  407b68:	463b      	mov	r3, r7
  407b6a:	f002 fb3b 	bl	40a1e4 <__aeabi_dmul>
  407b6e:	a332      	add	r3, pc, #200	; (adr r3, 407c38 <__ieee754_acos+0x2e0>)
  407b70:	e9d3 2300 	ldrd	r2, r3, [r3]
  407b74:	4680      	mov	r8, r0
  407b76:	4689      	mov	r9, r1
  407b78:	4630      	mov	r0, r6
  407b7a:	4639      	mov	r1, r7
  407b7c:	f002 fb32 	bl	40a1e4 <__aeabi_dmul>
  407b80:	a32f      	add	r3, pc, #188	; (adr r3, 407c40 <__ieee754_acos+0x2e8>)
  407b82:	e9d3 2300 	ldrd	r2, r3, [r3]
  407b86:	f002 f979 	bl	409e7c <__aeabi_dsub>
  407b8a:	4632      	mov	r2, r6
  407b8c:	463b      	mov	r3, r7
  407b8e:	f002 fb29 	bl	40a1e4 <__aeabi_dmul>
  407b92:	a32d      	add	r3, pc, #180	; (adr r3, 407c48 <__ieee754_acos+0x2f0>)
  407b94:	e9d3 2300 	ldrd	r2, r3, [r3]
  407b98:	f002 f972 	bl	409e80 <__adddf3>
  407b9c:	4632      	mov	r2, r6
  407b9e:	463b      	mov	r3, r7
  407ba0:	f002 fb20 	bl	40a1e4 <__aeabi_dmul>
  407ba4:	a32a      	add	r3, pc, #168	; (adr r3, 407c50 <__ieee754_acos+0x2f8>)
  407ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
  407baa:	f002 f967 	bl	409e7c <__aeabi_dsub>
  407bae:	4632      	mov	r2, r6
  407bb0:	463b      	mov	r3, r7
  407bb2:	f002 fb17 	bl	40a1e4 <__aeabi_dmul>
  407bb6:	2200      	movs	r2, #0
  407bb8:	4b2f      	ldr	r3, [pc, #188]	; (407c78 <__ieee754_acos+0x320>)
  407bba:	f002 f961 	bl	409e80 <__adddf3>
  407bbe:	4602      	mov	r2, r0
  407bc0:	460b      	mov	r3, r1
  407bc2:	4640      	mov	r0, r8
  407bc4:	4649      	mov	r1, r9
  407bc6:	f002 fc37 	bl	40a438 <__aeabi_ddiv>
  407bca:	462a      	mov	r2, r5
  407bcc:	4623      	mov	r3, r4
  407bce:	f002 fb09 	bl	40a1e4 <__aeabi_dmul>
  407bd2:	4602      	mov	r2, r0
  407bd4:	460b      	mov	r3, r1
  407bd6:	a122      	add	r1, pc, #136	; (adr r1, 407c60 <__ieee754_acos+0x308>)
  407bd8:	e9d1 0100 	ldrd	r0, r1, [r1]
  407bdc:	f002 f94e 	bl	409e7c <__aeabi_dsub>
  407be0:	4602      	mov	r2, r0
  407be2:	460b      	mov	r3, r1
  407be4:	4628      	mov	r0, r5
  407be6:	4621      	mov	r1, r4
  407be8:	f002 f948 	bl	409e7c <__aeabi_dsub>
  407bec:	4602      	mov	r2, r0
  407bee:	460b      	mov	r3, r1
  407bf0:	a119      	add	r1, pc, #100	; (adr r1, 407c58 <__ieee754_acos+0x300>)
  407bf2:	e9d1 0100 	ldrd	r0, r1, [r1]
  407bf6:	f002 f941 	bl	409e7c <__aeabi_dsub>
  407bfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407bfe:	a11a      	add	r1, pc, #104	; (adr r1, 407c68 <__ieee754_acos+0x310>)
  407c00:	e9d1 0100 	ldrd	r0, r1, [r1]
  407c04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407c08:	0dfdf709 	.word	0x0dfdf709
  407c0c:	3f023de1 	.word	0x3f023de1
  407c10:	7501b288 	.word	0x7501b288
  407c14:	3f49efe0 	.word	0x3f49efe0
  407c18:	b5688f3b 	.word	0xb5688f3b
  407c1c:	3fa48228 	.word	0x3fa48228
  407c20:	0e884455 	.word	0x0e884455
  407c24:	3fc9c155 	.word	0x3fc9c155
  407c28:	03eb6f7d 	.word	0x03eb6f7d
  407c2c:	3fd4d612 	.word	0x3fd4d612
  407c30:	55555555 	.word	0x55555555
  407c34:	3fc55555 	.word	0x3fc55555
  407c38:	b12e9282 	.word	0xb12e9282
  407c3c:	3fb3b8c5 	.word	0x3fb3b8c5
  407c40:	1b8d0159 	.word	0x1b8d0159
  407c44:	3fe6066c 	.word	0x3fe6066c
  407c48:	9c598ac8 	.word	0x9c598ac8
  407c4c:	40002ae5 	.word	0x40002ae5
  407c50:	1c8a2d4b 	.word	0x1c8a2d4b
  407c54:	40033a27 	.word	0x40033a27
  407c58:	54442d18 	.word	0x54442d18
  407c5c:	3ff921fb 	.word	0x3ff921fb
  407c60:	33145c07 	.word	0x33145c07
  407c64:	3c91a626 	.word	0x3c91a626
  407c68:	54442d18 	.word	0x54442d18
  407c6c:	400921fb 	.word	0x400921fb
  407c70:	3fefffff 	.word	0x3fefffff
  407c74:	3fdfffff 	.word	0x3fdfffff
  407c78:	3ff00000 	.word	0x3ff00000
  407c7c:	3fe00000 	.word	0x3fe00000
  407c80:	3c600000 	.word	0x3c600000
  407c84:	2200      	movs	r2, #0
  407c86:	4b5c      	ldr	r3, [pc, #368]	; (407df8 <__ieee754_acos+0x4a0>)
  407c88:	f002 f8fa 	bl	409e80 <__adddf3>
  407c8c:	2200      	movs	r2, #0
  407c8e:	4b5b      	ldr	r3, [pc, #364]	; (407dfc <__ieee754_acos+0x4a4>)
  407c90:	f002 faa8 	bl	40a1e4 <__aeabi_dmul>
  407c94:	a340      	add	r3, pc, #256	; (adr r3, 407d98 <__ieee754_acos+0x440>)
  407c96:	e9d3 2300 	ldrd	r2, r3, [r3]
  407c9a:	4604      	mov	r4, r0
  407c9c:	460d      	mov	r5, r1
  407c9e:	f002 faa1 	bl	40a1e4 <__aeabi_dmul>
  407ca2:	a33f      	add	r3, pc, #252	; (adr r3, 407da0 <__ieee754_acos+0x448>)
  407ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
  407ca8:	f002 f8ea 	bl	409e80 <__adddf3>
  407cac:	4622      	mov	r2, r4
  407cae:	462b      	mov	r3, r5
  407cb0:	f002 fa98 	bl	40a1e4 <__aeabi_dmul>
  407cb4:	a33c      	add	r3, pc, #240	; (adr r3, 407da8 <__ieee754_acos+0x450>)
  407cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
  407cba:	f002 f8df 	bl	409e7c <__aeabi_dsub>
  407cbe:	4622      	mov	r2, r4
  407cc0:	462b      	mov	r3, r5
  407cc2:	f002 fa8f 	bl	40a1e4 <__aeabi_dmul>
  407cc6:	a33a      	add	r3, pc, #232	; (adr r3, 407db0 <__ieee754_acos+0x458>)
  407cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
  407ccc:	f002 f8d8 	bl	409e80 <__adddf3>
  407cd0:	4622      	mov	r2, r4
  407cd2:	462b      	mov	r3, r5
  407cd4:	f002 fa86 	bl	40a1e4 <__aeabi_dmul>
  407cd8:	a337      	add	r3, pc, #220	; (adr r3, 407db8 <__ieee754_acos+0x460>)
  407cda:	e9d3 2300 	ldrd	r2, r3, [r3]
  407cde:	f002 f8cd 	bl	409e7c <__aeabi_dsub>
  407ce2:	4622      	mov	r2, r4
  407ce4:	462b      	mov	r3, r5
  407ce6:	f002 fa7d 	bl	40a1e4 <__aeabi_dmul>
  407cea:	a335      	add	r3, pc, #212	; (adr r3, 407dc0 <__ieee754_acos+0x468>)
  407cec:	e9d3 2300 	ldrd	r2, r3, [r3]
  407cf0:	f002 f8c6 	bl	409e80 <__adddf3>
  407cf4:	4622      	mov	r2, r4
  407cf6:	462b      	mov	r3, r5
  407cf8:	f002 fa74 	bl	40a1e4 <__aeabi_dmul>
  407cfc:	4680      	mov	r8, r0
  407cfe:	4689      	mov	r9, r1
  407d00:	4620      	mov	r0, r4
  407d02:	4629      	mov	r1, r5
  407d04:	f000 fd9a 	bl	40883c <__ieee754_sqrt>
  407d08:	a32f      	add	r3, pc, #188	; (adr r3, 407dc8 <__ieee754_acos+0x470>)
  407d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
  407d0e:	4606      	mov	r6, r0
  407d10:	460f      	mov	r7, r1
  407d12:	4620      	mov	r0, r4
  407d14:	4629      	mov	r1, r5
  407d16:	f002 fa65 	bl	40a1e4 <__aeabi_dmul>
  407d1a:	a32d      	add	r3, pc, #180	; (adr r3, 407dd0 <__ieee754_acos+0x478>)
  407d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
  407d20:	f002 f8ac 	bl	409e7c <__aeabi_dsub>
  407d24:	4622      	mov	r2, r4
  407d26:	462b      	mov	r3, r5
  407d28:	f002 fa5c 	bl	40a1e4 <__aeabi_dmul>
  407d2c:	a32a      	add	r3, pc, #168	; (adr r3, 407dd8 <__ieee754_acos+0x480>)
  407d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
  407d32:	f002 f8a5 	bl	409e80 <__adddf3>
  407d36:	4622      	mov	r2, r4
  407d38:	462b      	mov	r3, r5
  407d3a:	f002 fa53 	bl	40a1e4 <__aeabi_dmul>
  407d3e:	a328      	add	r3, pc, #160	; (adr r3, 407de0 <__ieee754_acos+0x488>)
  407d40:	e9d3 2300 	ldrd	r2, r3, [r3]
  407d44:	f002 f89a 	bl	409e7c <__aeabi_dsub>
  407d48:	4622      	mov	r2, r4
  407d4a:	462b      	mov	r3, r5
  407d4c:	f002 fa4a 	bl	40a1e4 <__aeabi_dmul>
  407d50:	2200      	movs	r2, #0
  407d52:	4b29      	ldr	r3, [pc, #164]	; (407df8 <__ieee754_acos+0x4a0>)
  407d54:	f002 f894 	bl	409e80 <__adddf3>
  407d58:	4602      	mov	r2, r0
  407d5a:	460b      	mov	r3, r1
  407d5c:	4640      	mov	r0, r8
  407d5e:	4649      	mov	r1, r9
  407d60:	f002 fb6a 	bl	40a438 <__aeabi_ddiv>
  407d64:	4632      	mov	r2, r6
  407d66:	463b      	mov	r3, r7
  407d68:	f002 fa3c 	bl	40a1e4 <__aeabi_dmul>
  407d6c:	a31e      	add	r3, pc, #120	; (adr r3, 407de8 <__ieee754_acos+0x490>)
  407d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
  407d72:	f002 f883 	bl	409e7c <__aeabi_dsub>
  407d76:	4632      	mov	r2, r6
  407d78:	463b      	mov	r3, r7
  407d7a:	f002 f881 	bl	409e80 <__adddf3>
  407d7e:	4602      	mov	r2, r0
  407d80:	460b      	mov	r3, r1
  407d82:	f002 f87d 	bl	409e80 <__adddf3>
  407d86:	4602      	mov	r2, r0
  407d88:	460b      	mov	r3, r1
  407d8a:	a119      	add	r1, pc, #100	; (adr r1, 407df0 <__ieee754_acos+0x498>)
  407d8c:	e9d1 0100 	ldrd	r0, r1, [r1]
  407d90:	f002 f874 	bl	409e7c <__aeabi_dsub>
  407d94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d98:	0dfdf709 	.word	0x0dfdf709
  407d9c:	3f023de1 	.word	0x3f023de1
  407da0:	7501b288 	.word	0x7501b288
  407da4:	3f49efe0 	.word	0x3f49efe0
  407da8:	b5688f3b 	.word	0xb5688f3b
  407dac:	3fa48228 	.word	0x3fa48228
  407db0:	0e884455 	.word	0x0e884455
  407db4:	3fc9c155 	.word	0x3fc9c155
  407db8:	03eb6f7d 	.word	0x03eb6f7d
  407dbc:	3fd4d612 	.word	0x3fd4d612
  407dc0:	55555555 	.word	0x55555555
  407dc4:	3fc55555 	.word	0x3fc55555
  407dc8:	b12e9282 	.word	0xb12e9282
  407dcc:	3fb3b8c5 	.word	0x3fb3b8c5
  407dd0:	1b8d0159 	.word	0x1b8d0159
  407dd4:	3fe6066c 	.word	0x3fe6066c
  407dd8:	9c598ac8 	.word	0x9c598ac8
  407ddc:	40002ae5 	.word	0x40002ae5
  407de0:	1c8a2d4b 	.word	0x1c8a2d4b
  407de4:	40033a27 	.word	0x40033a27
  407de8:	33145c07 	.word	0x33145c07
  407dec:	3c91a626 	.word	0x3c91a626
  407df0:	54442d18 	.word	0x54442d18
  407df4:	400921fb 	.word	0x400921fb
  407df8:	3ff00000 	.word	0x3ff00000
  407dfc:	3fe00000 	.word	0x3fe00000

00407e00 <__ieee754_asin>:
  407e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407e04:	4bc0      	ldr	r3, [pc, #768]	; (408108 <__ieee754_asin+0x308>)
  407e06:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
  407e0a:	4598      	cmp	r8, r3
  407e0c:	b084      	sub	sp, #16
  407e0e:	460d      	mov	r5, r1
  407e10:	4604      	mov	r4, r0
  407e12:	dd14      	ble.n	407e3e <__ieee754_asin+0x3e>
  407e14:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
  407e18:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
  407e1c:	4603      	mov	r3, r0
  407e1e:	ea58 0303 	orrs.w	r3, r8, r3
  407e22:	d023      	beq.n	407e6c <__ieee754_asin+0x6c>
  407e24:	4602      	mov	r2, r0
  407e26:	460b      	mov	r3, r1
  407e28:	f002 f828 	bl	409e7c <__aeabi_dsub>
  407e2c:	4602      	mov	r2, r0
  407e2e:	460b      	mov	r3, r1
  407e30:	f002 fb02 	bl	40a438 <__aeabi_ddiv>
  407e34:	4604      	mov	r4, r0
  407e36:	4620      	mov	r0, r4
  407e38:	b004      	add	sp, #16
  407e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407e3e:	4bb3      	ldr	r3, [pc, #716]	; (40810c <__ieee754_asin+0x30c>)
  407e40:	4598      	cmp	r8, r3
  407e42:	468a      	mov	sl, r1
  407e44:	dc2b      	bgt.n	407e9e <__ieee754_asin+0x9e>
  407e46:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
  407e4a:	f280 8167 	bge.w	40811c <__ieee754_asin+0x31c>
  407e4e:	a392      	add	r3, pc, #584	; (adr r3, 408098 <__ieee754_asin+0x298>)
  407e50:	e9d3 2300 	ldrd	r2, r3, [r3]
  407e54:	f002 f814 	bl	409e80 <__adddf3>
  407e58:	2200      	movs	r2, #0
  407e5a:	4bad      	ldr	r3, [pc, #692]	; (408110 <__ieee754_asin+0x310>)
  407e5c:	f002 fc52 	bl	40a704 <__aeabi_dcmpgt>
  407e60:	b1e8      	cbz	r0, 407e9e <__ieee754_asin+0x9e>
  407e62:	4629      	mov	r1, r5
  407e64:	4620      	mov	r0, r4
  407e66:	b004      	add	sp, #16
  407e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407e6c:	a38c      	add	r3, pc, #560	; (adr r3, 4080a0 <__ieee754_asin+0x2a0>)
  407e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
  407e72:	f002 f9b7 	bl	40a1e4 <__aeabi_dmul>
  407e76:	a38c      	add	r3, pc, #560	; (adr r3, 4080a8 <__ieee754_asin+0x2a8>)
  407e78:	e9d3 2300 	ldrd	r2, r3, [r3]
  407e7c:	4606      	mov	r6, r0
  407e7e:	460f      	mov	r7, r1
  407e80:	4620      	mov	r0, r4
  407e82:	4629      	mov	r1, r5
  407e84:	f002 f9ae 	bl	40a1e4 <__aeabi_dmul>
  407e88:	4602      	mov	r2, r0
  407e8a:	460b      	mov	r3, r1
  407e8c:	4630      	mov	r0, r6
  407e8e:	4639      	mov	r1, r7
  407e90:	f001 fff6 	bl	409e80 <__adddf3>
  407e94:	4604      	mov	r4, r0
  407e96:	4620      	mov	r0, r4
  407e98:	b004      	add	sp, #16
  407e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407e9e:	4620      	mov	r0, r4
  407ea0:	4629      	mov	r1, r5
  407ea2:	f001 fecb 	bl	409c3c <fabs>
  407ea6:	4602      	mov	r2, r0
  407ea8:	460b      	mov	r3, r1
  407eaa:	2000      	movs	r0, #0
  407eac:	4998      	ldr	r1, [pc, #608]	; (408110 <__ieee754_asin+0x310>)
  407eae:	f001 ffe5 	bl	409e7c <__aeabi_dsub>
  407eb2:	2200      	movs	r2, #0
  407eb4:	4b97      	ldr	r3, [pc, #604]	; (408114 <__ieee754_asin+0x314>)
  407eb6:	f002 f995 	bl	40a1e4 <__aeabi_dmul>
  407eba:	a37d      	add	r3, pc, #500	; (adr r3, 4080b0 <__ieee754_asin+0x2b0>)
  407ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
  407ec0:	4604      	mov	r4, r0
  407ec2:	460d      	mov	r5, r1
  407ec4:	f002 f98e 	bl	40a1e4 <__aeabi_dmul>
  407ec8:	a37b      	add	r3, pc, #492	; (adr r3, 4080b8 <__ieee754_asin+0x2b8>)
  407eca:	e9d3 2300 	ldrd	r2, r3, [r3]
  407ece:	f001 ffd7 	bl	409e80 <__adddf3>
  407ed2:	4622      	mov	r2, r4
  407ed4:	462b      	mov	r3, r5
  407ed6:	f002 f985 	bl	40a1e4 <__aeabi_dmul>
  407eda:	a379      	add	r3, pc, #484	; (adr r3, 4080c0 <__ieee754_asin+0x2c0>)
  407edc:	e9d3 2300 	ldrd	r2, r3, [r3]
  407ee0:	f001 ffcc 	bl	409e7c <__aeabi_dsub>
  407ee4:	4622      	mov	r2, r4
  407ee6:	462b      	mov	r3, r5
  407ee8:	f002 f97c 	bl	40a1e4 <__aeabi_dmul>
  407eec:	a376      	add	r3, pc, #472	; (adr r3, 4080c8 <__ieee754_asin+0x2c8>)
  407eee:	e9d3 2300 	ldrd	r2, r3, [r3]
  407ef2:	f001 ffc5 	bl	409e80 <__adddf3>
  407ef6:	4622      	mov	r2, r4
  407ef8:	462b      	mov	r3, r5
  407efa:	f002 f973 	bl	40a1e4 <__aeabi_dmul>
  407efe:	a374      	add	r3, pc, #464	; (adr r3, 4080d0 <__ieee754_asin+0x2d0>)
  407f00:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f04:	f001 ffba 	bl	409e7c <__aeabi_dsub>
  407f08:	4622      	mov	r2, r4
  407f0a:	462b      	mov	r3, r5
  407f0c:	f002 f96a 	bl	40a1e4 <__aeabi_dmul>
  407f10:	a371      	add	r3, pc, #452	; (adr r3, 4080d8 <__ieee754_asin+0x2d8>)
  407f12:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f16:	f001 ffb3 	bl	409e80 <__adddf3>
  407f1a:	4622      	mov	r2, r4
  407f1c:	462b      	mov	r3, r5
  407f1e:	f002 f961 	bl	40a1e4 <__aeabi_dmul>
  407f22:	a36f      	add	r3, pc, #444	; (adr r3, 4080e0 <__ieee754_asin+0x2e0>)
  407f24:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f28:	e9cd 0100 	strd	r0, r1, [sp]
  407f2c:	4620      	mov	r0, r4
  407f2e:	4629      	mov	r1, r5
  407f30:	f002 f958 	bl	40a1e4 <__aeabi_dmul>
  407f34:	a36c      	add	r3, pc, #432	; (adr r3, 4080e8 <__ieee754_asin+0x2e8>)
  407f36:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f3a:	f001 ff9f 	bl	409e7c <__aeabi_dsub>
  407f3e:	4622      	mov	r2, r4
  407f40:	462b      	mov	r3, r5
  407f42:	f002 f94f 	bl	40a1e4 <__aeabi_dmul>
  407f46:	a36a      	add	r3, pc, #424	; (adr r3, 4080f0 <__ieee754_asin+0x2f0>)
  407f48:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f4c:	f001 ff98 	bl	409e80 <__adddf3>
  407f50:	4622      	mov	r2, r4
  407f52:	462b      	mov	r3, r5
  407f54:	f002 f946 	bl	40a1e4 <__aeabi_dmul>
  407f58:	a367      	add	r3, pc, #412	; (adr r3, 4080f8 <__ieee754_asin+0x2f8>)
  407f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f5e:	f001 ff8d 	bl	409e7c <__aeabi_dsub>
  407f62:	4622      	mov	r2, r4
  407f64:	462b      	mov	r3, r5
  407f66:	f002 f93d 	bl	40a1e4 <__aeabi_dmul>
  407f6a:	4b69      	ldr	r3, [pc, #420]	; (408110 <__ieee754_asin+0x310>)
  407f6c:	2200      	movs	r2, #0
  407f6e:	f001 ff87 	bl	409e80 <__adddf3>
  407f72:	e9cd 0102 	strd	r0, r1, [sp, #8]
  407f76:	4620      	mov	r0, r4
  407f78:	4629      	mov	r1, r5
  407f7a:	f000 fc5f 	bl	40883c <__ieee754_sqrt>
  407f7e:	4b66      	ldr	r3, [pc, #408]	; (408118 <__ieee754_asin+0x318>)
  407f80:	4598      	cmp	r8, r3
  407f82:	4606      	mov	r6, r0
  407f84:	460f      	mov	r7, r1
  407f86:	dc66      	bgt.n	408056 <__ieee754_asin+0x256>
  407f88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  407f8c:	e9dd 0100 	ldrd	r0, r1, [sp]
  407f90:	f002 fa52 	bl	40a438 <__aeabi_ddiv>
  407f94:	4632      	mov	r2, r6
  407f96:	e9cd 0100 	strd	r0, r1, [sp]
  407f9a:	463b      	mov	r3, r7
  407f9c:	4630      	mov	r0, r6
  407f9e:	4639      	mov	r1, r7
  407fa0:	f001 ff6e 	bl	409e80 <__adddf3>
  407fa4:	4602      	mov	r2, r0
  407fa6:	460b      	mov	r3, r1
  407fa8:	e9dd 0100 	ldrd	r0, r1, [sp]
  407fac:	f002 f91a 	bl	40a1e4 <__aeabi_dmul>
  407fb0:	f04f 0800 	mov.w	r8, #0
  407fb4:	e9cd 0100 	strd	r0, r1, [sp]
  407fb8:	4642      	mov	r2, r8
  407fba:	463b      	mov	r3, r7
  407fbc:	4640      	mov	r0, r8
  407fbe:	4639      	mov	r1, r7
  407fc0:	f002 f910 	bl	40a1e4 <__aeabi_dmul>
  407fc4:	4602      	mov	r2, r0
  407fc6:	460b      	mov	r3, r1
  407fc8:	4620      	mov	r0, r4
  407fca:	4629      	mov	r1, r5
  407fcc:	f001 ff56 	bl	409e7c <__aeabi_dsub>
  407fd0:	4642      	mov	r2, r8
  407fd2:	4604      	mov	r4, r0
  407fd4:	460d      	mov	r5, r1
  407fd6:	463b      	mov	r3, r7
  407fd8:	4630      	mov	r0, r6
  407fda:	4639      	mov	r1, r7
  407fdc:	f001 ff50 	bl	409e80 <__adddf3>
  407fe0:	4602      	mov	r2, r0
  407fe2:	460b      	mov	r3, r1
  407fe4:	4620      	mov	r0, r4
  407fe6:	4629      	mov	r1, r5
  407fe8:	f002 fa26 	bl	40a438 <__aeabi_ddiv>
  407fec:	4602      	mov	r2, r0
  407fee:	460b      	mov	r3, r1
  407ff0:	f001 ff46 	bl	409e80 <__adddf3>
  407ff4:	4602      	mov	r2, r0
  407ff6:	460b      	mov	r3, r1
  407ff8:	a12b      	add	r1, pc, #172	; (adr r1, 4080a8 <__ieee754_asin+0x2a8>)
  407ffa:	e9d1 0100 	ldrd	r0, r1, [r1]
  407ffe:	f001 ff3d 	bl	409e7c <__aeabi_dsub>
  408002:	4602      	mov	r2, r0
  408004:	460b      	mov	r3, r1
  408006:	e9dd 0100 	ldrd	r0, r1, [sp]
  40800a:	f001 ff37 	bl	409e7c <__aeabi_dsub>
  40800e:	4642      	mov	r2, r8
  408010:	4604      	mov	r4, r0
  408012:	460d      	mov	r5, r1
  408014:	463b      	mov	r3, r7
  408016:	4640      	mov	r0, r8
  408018:	4639      	mov	r1, r7
  40801a:	f001 ff31 	bl	409e80 <__adddf3>
  40801e:	4602      	mov	r2, r0
  408020:	460b      	mov	r3, r1
  408022:	a137      	add	r1, pc, #220	; (adr r1, 408100 <__ieee754_asin+0x300>)
  408024:	e9d1 0100 	ldrd	r0, r1, [r1]
  408028:	f001 ff28 	bl	409e7c <__aeabi_dsub>
  40802c:	4602      	mov	r2, r0
  40802e:	460b      	mov	r3, r1
  408030:	4620      	mov	r0, r4
  408032:	4629      	mov	r1, r5
  408034:	f001 ff22 	bl	409e7c <__aeabi_dsub>
  408038:	4602      	mov	r2, r0
  40803a:	460b      	mov	r3, r1
  40803c:	a130      	add	r1, pc, #192	; (adr r1, 408100 <__ieee754_asin+0x300>)
  40803e:	e9d1 0100 	ldrd	r0, r1, [r1]
  408042:	f001 ff1b 	bl	409e7c <__aeabi_dsub>
  408046:	4604      	mov	r4, r0
  408048:	f1ba 0f00 	cmp.w	sl, #0
  40804c:	f73f aef3 	bgt.w	407e36 <__ieee754_asin+0x36>
  408050:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  408054:	e6ef      	b.n	407e36 <__ieee754_asin+0x36>
  408056:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40805a:	e9dd 0100 	ldrd	r0, r1, [sp]
  40805e:	f002 f9eb 	bl	40a438 <__aeabi_ddiv>
  408062:	4632      	mov	r2, r6
  408064:	463b      	mov	r3, r7
  408066:	f002 f8bd 	bl	40a1e4 <__aeabi_dmul>
  40806a:	4632      	mov	r2, r6
  40806c:	463b      	mov	r3, r7
  40806e:	f001 ff07 	bl	409e80 <__adddf3>
  408072:	4602      	mov	r2, r0
  408074:	460b      	mov	r3, r1
  408076:	f001 ff03 	bl	409e80 <__adddf3>
  40807a:	a30b      	add	r3, pc, #44	; (adr r3, 4080a8 <__ieee754_asin+0x2a8>)
  40807c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408080:	f001 fefc 	bl	409e7c <__aeabi_dsub>
  408084:	4602      	mov	r2, r0
  408086:	460b      	mov	r3, r1
  408088:	a105      	add	r1, pc, #20	; (adr r1, 4080a0 <__ieee754_asin+0x2a0>)
  40808a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40808e:	f001 fef5 	bl	409e7c <__aeabi_dsub>
  408092:	4604      	mov	r4, r0
  408094:	e7d8      	b.n	408048 <__ieee754_asin+0x248>
  408096:	bf00      	nop
  408098:	8800759c 	.word	0x8800759c
  40809c:	7e37e43c 	.word	0x7e37e43c
  4080a0:	54442d18 	.word	0x54442d18
  4080a4:	3ff921fb 	.word	0x3ff921fb
  4080a8:	33145c07 	.word	0x33145c07
  4080ac:	3c91a626 	.word	0x3c91a626
  4080b0:	0dfdf709 	.word	0x0dfdf709
  4080b4:	3f023de1 	.word	0x3f023de1
  4080b8:	7501b288 	.word	0x7501b288
  4080bc:	3f49efe0 	.word	0x3f49efe0
  4080c0:	b5688f3b 	.word	0xb5688f3b
  4080c4:	3fa48228 	.word	0x3fa48228
  4080c8:	0e884455 	.word	0x0e884455
  4080cc:	3fc9c155 	.word	0x3fc9c155
  4080d0:	03eb6f7d 	.word	0x03eb6f7d
  4080d4:	3fd4d612 	.word	0x3fd4d612
  4080d8:	55555555 	.word	0x55555555
  4080dc:	3fc55555 	.word	0x3fc55555
  4080e0:	b12e9282 	.word	0xb12e9282
  4080e4:	3fb3b8c5 	.word	0x3fb3b8c5
  4080e8:	1b8d0159 	.word	0x1b8d0159
  4080ec:	3fe6066c 	.word	0x3fe6066c
  4080f0:	9c598ac8 	.word	0x9c598ac8
  4080f4:	40002ae5 	.word	0x40002ae5
  4080f8:	1c8a2d4b 	.word	0x1c8a2d4b
  4080fc:	40033a27 	.word	0x40033a27
  408100:	54442d18 	.word	0x54442d18
  408104:	3fe921fb 	.word	0x3fe921fb
  408108:	3fefffff 	.word	0x3fefffff
  40810c:	3fdfffff 	.word	0x3fdfffff
  408110:	3ff00000 	.word	0x3ff00000
  408114:	3fe00000 	.word	0x3fe00000
  408118:	3fef3332 	.word	0x3fef3332
  40811c:	4602      	mov	r2, r0
  40811e:	460b      	mov	r3, r1
  408120:	f002 f860 	bl	40a1e4 <__aeabi_dmul>
  408124:	a338      	add	r3, pc, #224	; (adr r3, 408208 <__ieee754_asin+0x408>)
  408126:	e9d3 2300 	ldrd	r2, r3, [r3]
  40812a:	4606      	mov	r6, r0
  40812c:	460f      	mov	r7, r1
  40812e:	f002 f859 	bl	40a1e4 <__aeabi_dmul>
  408132:	a337      	add	r3, pc, #220	; (adr r3, 408210 <__ieee754_asin+0x410>)
  408134:	e9d3 2300 	ldrd	r2, r3, [r3]
  408138:	f001 fea2 	bl	409e80 <__adddf3>
  40813c:	4632      	mov	r2, r6
  40813e:	463b      	mov	r3, r7
  408140:	f002 f850 	bl	40a1e4 <__aeabi_dmul>
  408144:	a334      	add	r3, pc, #208	; (adr r3, 408218 <__ieee754_asin+0x418>)
  408146:	e9d3 2300 	ldrd	r2, r3, [r3]
  40814a:	f001 fe97 	bl	409e7c <__aeabi_dsub>
  40814e:	4632      	mov	r2, r6
  408150:	463b      	mov	r3, r7
  408152:	f002 f847 	bl	40a1e4 <__aeabi_dmul>
  408156:	a332      	add	r3, pc, #200	; (adr r3, 408220 <__ieee754_asin+0x420>)
  408158:	e9d3 2300 	ldrd	r2, r3, [r3]
  40815c:	f001 fe90 	bl	409e80 <__adddf3>
  408160:	4632      	mov	r2, r6
  408162:	463b      	mov	r3, r7
  408164:	f002 f83e 	bl	40a1e4 <__aeabi_dmul>
  408168:	a32f      	add	r3, pc, #188	; (adr r3, 408228 <__ieee754_asin+0x428>)
  40816a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40816e:	f001 fe85 	bl	409e7c <__aeabi_dsub>
  408172:	4632      	mov	r2, r6
  408174:	463b      	mov	r3, r7
  408176:	f002 f835 	bl	40a1e4 <__aeabi_dmul>
  40817a:	a32d      	add	r3, pc, #180	; (adr r3, 408230 <__ieee754_asin+0x430>)
  40817c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408180:	f001 fe7e 	bl	409e80 <__adddf3>
  408184:	4632      	mov	r2, r6
  408186:	463b      	mov	r3, r7
  408188:	f002 f82c 	bl	40a1e4 <__aeabi_dmul>
  40818c:	a32a      	add	r3, pc, #168	; (adr r3, 408238 <__ieee754_asin+0x438>)
  40818e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408192:	4680      	mov	r8, r0
  408194:	4689      	mov	r9, r1
  408196:	4630      	mov	r0, r6
  408198:	4639      	mov	r1, r7
  40819a:	f002 f823 	bl	40a1e4 <__aeabi_dmul>
  40819e:	a328      	add	r3, pc, #160	; (adr r3, 408240 <__ieee754_asin+0x440>)
  4081a0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4081a4:	f001 fe6a 	bl	409e7c <__aeabi_dsub>
  4081a8:	4632      	mov	r2, r6
  4081aa:	463b      	mov	r3, r7
  4081ac:	f002 f81a 	bl	40a1e4 <__aeabi_dmul>
  4081b0:	a325      	add	r3, pc, #148	; (adr r3, 408248 <__ieee754_asin+0x448>)
  4081b2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4081b6:	f001 fe63 	bl	409e80 <__adddf3>
  4081ba:	4632      	mov	r2, r6
  4081bc:	463b      	mov	r3, r7
  4081be:	f002 f811 	bl	40a1e4 <__aeabi_dmul>
  4081c2:	a323      	add	r3, pc, #140	; (adr r3, 408250 <__ieee754_asin+0x450>)
  4081c4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4081c8:	f001 fe58 	bl	409e7c <__aeabi_dsub>
  4081cc:	4632      	mov	r2, r6
  4081ce:	463b      	mov	r3, r7
  4081d0:	f002 f808 	bl	40a1e4 <__aeabi_dmul>
  4081d4:	2200      	movs	r2, #0
  4081d6:	4b20      	ldr	r3, [pc, #128]	; (408258 <__ieee754_asin+0x458>)
  4081d8:	f001 fe52 	bl	409e80 <__adddf3>
  4081dc:	4602      	mov	r2, r0
  4081de:	460b      	mov	r3, r1
  4081e0:	4640      	mov	r0, r8
  4081e2:	4649      	mov	r1, r9
  4081e4:	f002 f928 	bl	40a438 <__aeabi_ddiv>
  4081e8:	4622      	mov	r2, r4
  4081ea:	462b      	mov	r3, r5
  4081ec:	f001 fffa 	bl	40a1e4 <__aeabi_dmul>
  4081f0:	4622      	mov	r2, r4
  4081f2:	462b      	mov	r3, r5
  4081f4:	f001 fe44 	bl	409e80 <__adddf3>
  4081f8:	4604      	mov	r4, r0
  4081fa:	4620      	mov	r0, r4
  4081fc:	b004      	add	sp, #16
  4081fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408202:	bf00      	nop
  408204:	f3af 8000 	nop.w
  408208:	0dfdf709 	.word	0x0dfdf709
  40820c:	3f023de1 	.word	0x3f023de1
  408210:	7501b288 	.word	0x7501b288
  408214:	3f49efe0 	.word	0x3f49efe0
  408218:	b5688f3b 	.word	0xb5688f3b
  40821c:	3fa48228 	.word	0x3fa48228
  408220:	0e884455 	.word	0x0e884455
  408224:	3fc9c155 	.word	0x3fc9c155
  408228:	03eb6f7d 	.word	0x03eb6f7d
  40822c:	3fd4d612 	.word	0x3fd4d612
  408230:	55555555 	.word	0x55555555
  408234:	3fc55555 	.word	0x3fc55555
  408238:	b12e9282 	.word	0xb12e9282
  40823c:	3fb3b8c5 	.word	0x3fb3b8c5
  408240:	1b8d0159 	.word	0x1b8d0159
  408244:	3fe6066c 	.word	0x3fe6066c
  408248:	9c598ac8 	.word	0x9c598ac8
  40824c:	40002ae5 	.word	0x40002ae5
  408250:	1c8a2d4b 	.word	0x1c8a2d4b
  408254:	40033a27 	.word	0x40033a27
  408258:	3ff00000 	.word	0x3ff00000
  40825c:	00000000 	.word	0x00000000

00408260 <__ieee754_atan2>:
  408260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408264:	4254      	negs	r4, r2
  408266:	4314      	orrs	r4, r2
  408268:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
  40826c:	f8df e180 	ldr.w	lr, [pc, #384]	; 4083f0 <__ieee754_atan2+0x190>
  408270:	ea49 74d4 	orr.w	r4, r9, r4, lsr #31
  408274:	4574      	cmp	r4, lr
  408276:	4606      	mov	r6, r0
  408278:	460d      	mov	r5, r1
  40827a:	d83e      	bhi.n	4082fa <__ieee754_atan2+0x9a>
  40827c:	4244      	negs	r4, r0
  40827e:	4304      	orrs	r4, r0
  408280:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
  408284:	ea4b 74d4 	orr.w	r4, fp, r4, lsr #31
  408288:	4574      	cmp	r4, lr
  40828a:	468a      	mov	sl, r1
  40828c:	d835      	bhi.n	4082fa <__ieee754_atan2+0x9a>
  40828e:	f103 4440 	add.w	r4, r3, #3221225472	; 0xc0000000
  408292:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
  408296:	4314      	orrs	r4, r2
  408298:	d044      	beq.n	408324 <__ieee754_atan2+0xc4>
  40829a:	179c      	asrs	r4, r3, #30
  40829c:	f004 0402 	and.w	r4, r4, #2
  4082a0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
  4082a4:	ea50 010b 	orrs.w	r1, r0, fp
  4082a8:	d02f      	beq.n	40830a <__ieee754_atan2+0xaa>
  4082aa:	ea52 0109 	orrs.w	r1, r2, r9
  4082ae:	d033      	beq.n	408318 <__ieee754_atan2+0xb8>
  4082b0:	45f1      	cmp	r9, lr
  4082b2:	d046      	beq.n	408342 <__ieee754_atan2+0xe2>
  4082b4:	45f3      	cmp	fp, lr
  4082b6:	d02f      	beq.n	408318 <__ieee754_atan2+0xb8>
  4082b8:	ebc9 090b 	rsb	r9, r9, fp
  4082bc:	ea4f 5929 	mov.w	r9, r9, asr #20
  4082c0:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
  4082c4:	dc34      	bgt.n	408330 <__ieee754_atan2+0xd0>
  4082c6:	2b00      	cmp	r3, #0
  4082c8:	db57      	blt.n	40837a <__ieee754_atan2+0x11a>
  4082ca:	4630      	mov	r0, r6
  4082cc:	4629      	mov	r1, r5
  4082ce:	f002 f8b3 	bl	40a438 <__aeabi_ddiv>
  4082d2:	f001 fcb3 	bl	409c3c <fabs>
  4082d6:	f001 fb13 	bl	409900 <atan>
  4082da:	2c01      	cmp	r4, #1
  4082dc:	d04a      	beq.n	408374 <__ieee754_atan2+0x114>
  4082de:	2c02      	cmp	r4, #2
  4082e0:	d03b      	beq.n	40835a <__ieee754_atan2+0xfa>
  4082e2:	b184      	cbz	r4, 408306 <__ieee754_atan2+0xa6>
  4082e4:	a332      	add	r3, pc, #200	; (adr r3, 4083b0 <__ieee754_atan2+0x150>)
  4082e6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4082ea:	f001 fdc7 	bl	409e7c <__aeabi_dsub>
  4082ee:	a332      	add	r3, pc, #200	; (adr r3, 4083b8 <__ieee754_atan2+0x158>)
  4082f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4082f4:	f001 fdc2 	bl	409e7c <__aeabi_dsub>
  4082f8:	e005      	b.n	408306 <__ieee754_atan2+0xa6>
  4082fa:	4610      	mov	r0, r2
  4082fc:	4619      	mov	r1, r3
  4082fe:	4632      	mov	r2, r6
  408300:	462b      	mov	r3, r5
  408302:	f001 fdbd 	bl	409e80 <__adddf3>
  408306:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40830a:	2c02      	cmp	r4, #2
  40830c:	d014      	beq.n	408338 <__ieee754_atan2+0xd8>
  40830e:	2c03      	cmp	r4, #3
  408310:	d10c      	bne.n	40832c <__ieee754_atan2+0xcc>
  408312:	482d      	ldr	r0, [pc, #180]	; (4083c8 <__ieee754_atan2+0x168>)
  408314:	492d      	ldr	r1, [pc, #180]	; (4083cc <__ieee754_atan2+0x16c>)
  408316:	e7f6      	b.n	408306 <__ieee754_atan2+0xa6>
  408318:	f1ba 0f00 	cmp.w	sl, #0
  40831c:	482a      	ldr	r0, [pc, #168]	; (4083c8 <__ieee754_atan2+0x168>)
  40831e:	db0e      	blt.n	40833e <__ieee754_atan2+0xde>
  408320:	492b      	ldr	r1, [pc, #172]	; (4083d0 <__ieee754_atan2+0x170>)
  408322:	e7f0      	b.n	408306 <__ieee754_atan2+0xa6>
  408324:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408328:	f001 baea 	b.w	409900 <atan>
  40832c:	4629      	mov	r1, r5
  40832e:	e7ea      	b.n	408306 <__ieee754_atan2+0xa6>
  408330:	a123      	add	r1, pc, #140	; (adr r1, 4083c0 <__ieee754_atan2+0x160>)
  408332:	e9d1 0100 	ldrd	r0, r1, [r1]
  408336:	e7d0      	b.n	4082da <__ieee754_atan2+0x7a>
  408338:	4823      	ldr	r0, [pc, #140]	; (4083c8 <__ieee754_atan2+0x168>)
  40833a:	4926      	ldr	r1, [pc, #152]	; (4083d4 <__ieee754_atan2+0x174>)
  40833c:	e7e3      	b.n	408306 <__ieee754_atan2+0xa6>
  40833e:	4926      	ldr	r1, [pc, #152]	; (4083d8 <__ieee754_atan2+0x178>)
  408340:	e7e1      	b.n	408306 <__ieee754_atan2+0xa6>
  408342:	45cb      	cmp	fp, r9
  408344:	d01f      	beq.n	408386 <__ieee754_atan2+0x126>
  408346:	2c02      	cmp	r4, #2
  408348:	d0f6      	beq.n	408338 <__ieee754_atan2+0xd8>
  40834a:	2c03      	cmp	r4, #3
  40834c:	d0e1      	beq.n	408312 <__ieee754_atan2+0xb2>
  40834e:	2c01      	cmp	r4, #1
  408350:	f04f 0000 	mov.w	r0, #0
  408354:	d020      	beq.n	408398 <__ieee754_atan2+0x138>
  408356:	4601      	mov	r1, r0
  408358:	e7d5      	b.n	408306 <__ieee754_atan2+0xa6>
  40835a:	a315      	add	r3, pc, #84	; (adr r3, 4083b0 <__ieee754_atan2+0x150>)
  40835c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408360:	f001 fd8c 	bl	409e7c <__aeabi_dsub>
  408364:	4602      	mov	r2, r0
  408366:	460b      	mov	r3, r1
  408368:	a113      	add	r1, pc, #76	; (adr r1, 4083b8 <__ieee754_atan2+0x158>)
  40836a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40836e:	f001 fd85 	bl	409e7c <__aeabi_dsub>
  408372:	e7c8      	b.n	408306 <__ieee754_atan2+0xa6>
  408374:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  408378:	e7c5      	b.n	408306 <__ieee754_atan2+0xa6>
  40837a:	f119 0f3c 	cmn.w	r9, #60	; 0x3c
  40837e:	daa4      	bge.n	4082ca <__ieee754_atan2+0x6a>
  408380:	2000      	movs	r0, #0
  408382:	2100      	movs	r1, #0
  408384:	e7a9      	b.n	4082da <__ieee754_atan2+0x7a>
  408386:	2c02      	cmp	r4, #2
  408388:	d00e      	beq.n	4083a8 <__ieee754_atan2+0x148>
  40838a:	2c03      	cmp	r4, #3
  40838c:	d009      	beq.n	4083a2 <__ieee754_atan2+0x142>
  40838e:	2c01      	cmp	r4, #1
  408390:	480d      	ldr	r0, [pc, #52]	; (4083c8 <__ieee754_atan2+0x168>)
  408392:	d004      	beq.n	40839e <__ieee754_atan2+0x13e>
  408394:	4911      	ldr	r1, [pc, #68]	; (4083dc <__ieee754_atan2+0x17c>)
  408396:	e7b6      	b.n	408306 <__ieee754_atan2+0xa6>
  408398:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40839c:	e7b3      	b.n	408306 <__ieee754_atan2+0xa6>
  40839e:	4910      	ldr	r1, [pc, #64]	; (4083e0 <__ieee754_atan2+0x180>)
  4083a0:	e7b1      	b.n	408306 <__ieee754_atan2+0xa6>
  4083a2:	4810      	ldr	r0, [pc, #64]	; (4083e4 <__ieee754_atan2+0x184>)
  4083a4:	4910      	ldr	r1, [pc, #64]	; (4083e8 <__ieee754_atan2+0x188>)
  4083a6:	e7ae      	b.n	408306 <__ieee754_atan2+0xa6>
  4083a8:	480e      	ldr	r0, [pc, #56]	; (4083e4 <__ieee754_atan2+0x184>)
  4083aa:	4910      	ldr	r1, [pc, #64]	; (4083ec <__ieee754_atan2+0x18c>)
  4083ac:	e7ab      	b.n	408306 <__ieee754_atan2+0xa6>
  4083ae:	bf00      	nop
  4083b0:	33145c07 	.word	0x33145c07
  4083b4:	3ca1a626 	.word	0x3ca1a626
  4083b8:	54442d18 	.word	0x54442d18
  4083bc:	400921fb 	.word	0x400921fb
  4083c0:	54442d18 	.word	0x54442d18
  4083c4:	3ff921fb 	.word	0x3ff921fb
  4083c8:	54442d18 	.word	0x54442d18
  4083cc:	c00921fb 	.word	0xc00921fb
  4083d0:	3ff921fb 	.word	0x3ff921fb
  4083d4:	400921fb 	.word	0x400921fb
  4083d8:	bff921fb 	.word	0xbff921fb
  4083dc:	3fe921fb 	.word	0x3fe921fb
  4083e0:	bfe921fb 	.word	0xbfe921fb
  4083e4:	7f3321d2 	.word	0x7f3321d2
  4083e8:	c002d97c 	.word	0xc002d97c
  4083ec:	4002d97c 	.word	0x4002d97c
  4083f0:	7ff00000 	.word	0x7ff00000
  4083f4:	00000000 	.word	0x00000000

004083f8 <__ieee754_rem_pio2>:
  4083f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4083fc:	4e94      	ldr	r6, [pc, #592]	; (408650 <__ieee754_rem_pio2+0x258>)
  4083fe:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  408402:	42b7      	cmp	r7, r6
  408404:	b091      	sub	sp, #68	; 0x44
  408406:	f340 8082 	ble.w	40850e <__ieee754_rem_pio2+0x116>
  40840a:	4692      	mov	sl, r2
  40840c:	4a91      	ldr	r2, [pc, #580]	; (408654 <__ieee754_rem_pio2+0x25c>)
  40840e:	4297      	cmp	r7, r2
  408410:	460c      	mov	r4, r1
  408412:	dc26      	bgt.n	408462 <__ieee754_rem_pio2+0x6a>
  408414:	2900      	cmp	r1, #0
  408416:	a384      	add	r3, pc, #528	; (adr r3, 408628 <__ieee754_rem_pio2+0x230>)
  408418:	e9d3 2300 	ldrd	r2, r3, [r3]
  40841c:	f340 81a8 	ble.w	408770 <__ieee754_rem_pio2+0x378>
  408420:	f001 fd2c 	bl	409e7c <__aeabi_dsub>
  408424:	4b8c      	ldr	r3, [pc, #560]	; (408658 <__ieee754_rem_pio2+0x260>)
  408426:	429f      	cmp	r7, r3
  408428:	4604      	mov	r4, r0
  40842a:	460d      	mov	r5, r1
  40842c:	f000 8084 	beq.w	408538 <__ieee754_rem_pio2+0x140>
  408430:	a37f      	add	r3, pc, #508	; (adr r3, 408630 <__ieee754_rem_pio2+0x238>)
  408432:	e9d3 2300 	ldrd	r2, r3, [r3]
  408436:	f001 fd21 	bl	409e7c <__aeabi_dsub>
  40843a:	4602      	mov	r2, r0
  40843c:	460b      	mov	r3, r1
  40843e:	e9ca 2300 	strd	r2, r3, [sl]
  408442:	4620      	mov	r0, r4
  408444:	4629      	mov	r1, r5
  408446:	f001 fd19 	bl	409e7c <__aeabi_dsub>
  40844a:	a379      	add	r3, pc, #484	; (adr r3, 408630 <__ieee754_rem_pio2+0x238>)
  40844c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408450:	f001 fd14 	bl	409e7c <__aeabi_dsub>
  408454:	2501      	movs	r5, #1
  408456:	e9ca 0102 	strd	r0, r1, [sl, #8]
  40845a:	4628      	mov	r0, r5
  40845c:	b011      	add	sp, #68	; 0x44
  40845e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408462:	4a7e      	ldr	r2, [pc, #504]	; (40865c <__ieee754_rem_pio2+0x264>)
  408464:	4297      	cmp	r7, r2
  408466:	f340 8084 	ble.w	408572 <__ieee754_rem_pio2+0x17a>
  40846a:	4a7d      	ldr	r2, [pc, #500]	; (408660 <__ieee754_rem_pio2+0x268>)
  40846c:	4297      	cmp	r7, r2
  40846e:	dc59      	bgt.n	408524 <__ieee754_rem_pio2+0x12c>
  408470:	153d      	asrs	r5, r7, #20
  408472:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
  408476:	eba7 5305 	sub.w	r3, r7, r5, lsl #20
  40847a:	4619      	mov	r1, r3
  40847c:	461f      	mov	r7, r3
  40847e:	4606      	mov	r6, r0
  408480:	f002 f960 	bl	40a744 <__aeabi_d2iz>
  408484:	f001 fe48 	bl	40a118 <__aeabi_i2d>
  408488:	4680      	mov	r8, r0
  40848a:	4689      	mov	r9, r1
  40848c:	4602      	mov	r2, r0
  40848e:	460b      	mov	r3, r1
  408490:	4630      	mov	r0, r6
  408492:	4639      	mov	r1, r7
  408494:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  408498:	f001 fcf0 	bl	409e7c <__aeabi_dsub>
  40849c:	2200      	movs	r2, #0
  40849e:	4b71      	ldr	r3, [pc, #452]	; (408664 <__ieee754_rem_pio2+0x26c>)
  4084a0:	f001 fea0 	bl	40a1e4 <__aeabi_dmul>
  4084a4:	4689      	mov	r9, r1
  4084a6:	4680      	mov	r8, r0
  4084a8:	f002 f94c 	bl	40a744 <__aeabi_d2iz>
  4084ac:	f001 fe34 	bl	40a118 <__aeabi_i2d>
  4084b0:	4602      	mov	r2, r0
  4084b2:	460b      	mov	r3, r1
  4084b4:	4606      	mov	r6, r0
  4084b6:	460f      	mov	r7, r1
  4084b8:	4640      	mov	r0, r8
  4084ba:	4649      	mov	r1, r9
  4084bc:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  4084c0:	f001 fcdc 	bl	409e7c <__aeabi_dsub>
  4084c4:	2200      	movs	r2, #0
  4084c6:	4b67      	ldr	r3, [pc, #412]	; (408664 <__ieee754_rem_pio2+0x26c>)
  4084c8:	f001 fe8c 	bl	40a1e4 <__aeabi_dmul>
  4084cc:	2200      	movs	r2, #0
  4084ce:	2300      	movs	r3, #0
  4084d0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  4084d4:	f002 f8ee 	bl	40a6b4 <__aeabi_dcmpeq>
  4084d8:	2800      	cmp	r0, #0
  4084da:	f000 8175 	beq.w	4087c8 <__ieee754_rem_pio2+0x3d0>
  4084de:	2300      	movs	r3, #0
  4084e0:	4630      	mov	r0, r6
  4084e2:	4639      	mov	r1, r7
  4084e4:	2200      	movs	r2, #0
  4084e6:	f002 f8e5 	bl	40a6b4 <__aeabi_dcmpeq>
  4084ea:	2800      	cmp	r0, #0
  4084ec:	bf14      	ite	ne
  4084ee:	2301      	movne	r3, #1
  4084f0:	2302      	moveq	r3, #2
  4084f2:	4a5d      	ldr	r2, [pc, #372]	; (408668 <__ieee754_rem_pio2+0x270>)
  4084f4:	9201      	str	r2, [sp, #4]
  4084f6:	2102      	movs	r1, #2
  4084f8:	9100      	str	r1, [sp, #0]
  4084fa:	462a      	mov	r2, r5
  4084fc:	4651      	mov	r1, sl
  4084fe:	a80a      	add	r0, sp, #40	; 0x28
  408500:	f000 fb82 	bl	408c08 <__kernel_rem_pio2>
  408504:	2c00      	cmp	r4, #0
  408506:	f2c0 8151 	blt.w	4087ac <__ieee754_rem_pio2+0x3b4>
  40850a:	4605      	mov	r5, r0
  40850c:	e006      	b.n	40851c <__ieee754_rem_pio2+0x124>
  40850e:	e9c2 0100 	strd	r0, r1, [r2]
  408512:	2500      	movs	r5, #0
  408514:	2400      	movs	r4, #0
  408516:	e9c2 4502 	strd	r4, r5, [r2, #8]
  40851a:	2500      	movs	r5, #0
  40851c:	4628      	mov	r0, r5
  40851e:	b011      	add	sp, #68	; 0x44
  408520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408524:	4602      	mov	r2, r0
  408526:	460b      	mov	r3, r1
  408528:	f001 fca8 	bl	409e7c <__aeabi_dsub>
  40852c:	2500      	movs	r5, #0
  40852e:	e9ca 0102 	strd	r0, r1, [sl, #8]
  408532:	e9ca 0100 	strd	r0, r1, [sl]
  408536:	e7f1      	b.n	40851c <__ieee754_rem_pio2+0x124>
  408538:	a33f      	add	r3, pc, #252	; (adr r3, 408638 <__ieee754_rem_pio2+0x240>)
  40853a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40853e:	f001 fc9d 	bl	409e7c <__aeabi_dsub>
  408542:	a33f      	add	r3, pc, #252	; (adr r3, 408640 <__ieee754_rem_pio2+0x248>)
  408544:	e9d3 2300 	ldrd	r2, r3, [r3]
  408548:	460d      	mov	r5, r1
  40854a:	4604      	mov	r4, r0
  40854c:	f001 fc96 	bl	409e7c <__aeabi_dsub>
  408550:	4602      	mov	r2, r0
  408552:	460b      	mov	r3, r1
  408554:	e9ca 2300 	strd	r2, r3, [sl]
  408558:	4629      	mov	r1, r5
  40855a:	4620      	mov	r0, r4
  40855c:	f001 fc8e 	bl	409e7c <__aeabi_dsub>
  408560:	a337      	add	r3, pc, #220	; (adr r3, 408640 <__ieee754_rem_pio2+0x248>)
  408562:	e9d3 2300 	ldrd	r2, r3, [r3]
  408566:	f001 fc89 	bl	409e7c <__aeabi_dsub>
  40856a:	2501      	movs	r5, #1
  40856c:	e9ca 0102 	strd	r0, r1, [sl, #8]
  408570:	e7d4      	b.n	40851c <__ieee754_rem_pio2+0x124>
  408572:	f001 fb63 	bl	409c3c <fabs>
  408576:	a334      	add	r3, pc, #208	; (adr r3, 408648 <__ieee754_rem_pio2+0x250>)
  408578:	e9d3 2300 	ldrd	r2, r3, [r3]
  40857c:	4680      	mov	r8, r0
  40857e:	4689      	mov	r9, r1
  408580:	f001 fe30 	bl	40a1e4 <__aeabi_dmul>
  408584:	2200      	movs	r2, #0
  408586:	4b39      	ldr	r3, [pc, #228]	; (40866c <__ieee754_rem_pio2+0x274>)
  408588:	f001 fc7a 	bl	409e80 <__adddf3>
  40858c:	f002 f8da 	bl	40a744 <__aeabi_d2iz>
  408590:	4605      	mov	r5, r0
  408592:	f001 fdc1 	bl	40a118 <__aeabi_i2d>
  408596:	a324      	add	r3, pc, #144	; (adr r3, 408628 <__ieee754_rem_pio2+0x230>)
  408598:	e9d3 2300 	ldrd	r2, r3, [r3]
  40859c:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4085a0:	f001 fe20 	bl	40a1e4 <__aeabi_dmul>
  4085a4:	4602      	mov	r2, r0
  4085a6:	460b      	mov	r3, r1
  4085a8:	4640      	mov	r0, r8
  4085aa:	4649      	mov	r1, r9
  4085ac:	f001 fc66 	bl	409e7c <__aeabi_dsub>
  4085b0:	a31f      	add	r3, pc, #124	; (adr r3, 408630 <__ieee754_rem_pio2+0x238>)
  4085b2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085b6:	4680      	mov	r8, r0
  4085b8:	4689      	mov	r9, r1
  4085ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4085be:	f001 fe11 	bl	40a1e4 <__aeabi_dmul>
  4085c2:	2d1f      	cmp	r5, #31
  4085c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4085c8:	dc54      	bgt.n	408674 <__ieee754_rem_pio2+0x27c>
  4085ca:	4b29      	ldr	r3, [pc, #164]	; (408670 <__ieee754_rem_pio2+0x278>)
  4085cc:	1e6a      	subs	r2, r5, #1
  4085ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4085d2:	429f      	cmp	r7, r3
  4085d4:	d04e      	beq.n	408674 <__ieee754_rem_pio2+0x27c>
  4085d6:	4602      	mov	r2, r0
  4085d8:	460b      	mov	r3, r1
  4085da:	4640      	mov	r0, r8
  4085dc:	4649      	mov	r1, r9
  4085de:	f001 fc4d 	bl	409e7c <__aeabi_dsub>
  4085e2:	4602      	mov	r2, r0
  4085e4:	460b      	mov	r3, r1
  4085e6:	e9ca 2300 	strd	r2, r3, [sl]
  4085ea:	4683      	mov	fp, r0
  4085ec:	460e      	mov	r6, r1
  4085ee:	465a      	mov	r2, fp
  4085f0:	4633      	mov	r3, r6
  4085f2:	4640      	mov	r0, r8
  4085f4:	4649      	mov	r1, r9
  4085f6:	f001 fc41 	bl	409e7c <__aeabi_dsub>
  4085fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4085fe:	f001 fc3d 	bl	409e7c <__aeabi_dsub>
  408602:	2c00      	cmp	r4, #0
  408604:	4602      	mov	r2, r0
  408606:	460b      	mov	r3, r1
  408608:	e9ca 2302 	strd	r2, r3, [sl, #8]
  40860c:	da86      	bge.n	40851c <__ieee754_rem_pio2+0x124>
  40860e:	465b      	mov	r3, fp
  408610:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  408614:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  408618:	e88a 0048 	stmia.w	sl, {r3, r6}
  40861c:	f8ca 100c 	str.w	r1, [sl, #12]
  408620:	f8ca 0008 	str.w	r0, [sl, #8]
  408624:	426d      	negs	r5, r5
  408626:	e779      	b.n	40851c <__ieee754_rem_pio2+0x124>
  408628:	54400000 	.word	0x54400000
  40862c:	3ff921fb 	.word	0x3ff921fb
  408630:	1a626331 	.word	0x1a626331
  408634:	3dd0b461 	.word	0x3dd0b461
  408638:	1a600000 	.word	0x1a600000
  40863c:	3dd0b461 	.word	0x3dd0b461
  408640:	2e037073 	.word	0x2e037073
  408644:	3ba3198a 	.word	0x3ba3198a
  408648:	6dc9c883 	.word	0x6dc9c883
  40864c:	3fe45f30 	.word	0x3fe45f30
  408650:	3fe921fb 	.word	0x3fe921fb
  408654:	4002d97b 	.word	0x4002d97b
  408658:	3ff921fb 	.word	0x3ff921fb
  40865c:	413921fb 	.word	0x413921fb
  408660:	7fefffff 	.word	0x7fefffff
  408664:	41700000 	.word	0x41700000
  408668:	0040b64c 	.word	0x0040b64c
  40866c:	3fe00000 	.word	0x3fe00000
  408670:	0040b5cc 	.word	0x0040b5cc
  408674:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408678:	4640      	mov	r0, r8
  40867a:	4649      	mov	r1, r9
  40867c:	f001 fbfe 	bl	409e7c <__aeabi_dsub>
  408680:	153a      	asrs	r2, r7, #20
  408682:	f3c1 530a 	ubfx	r3, r1, #20, #11
  408686:	1ad3      	subs	r3, r2, r3
  408688:	2b10      	cmp	r3, #16
  40868a:	4683      	mov	fp, r0
  40868c:	460e      	mov	r6, r1
  40868e:	9209      	str	r2, [sp, #36]	; 0x24
  408690:	e9ca 0100 	strd	r0, r1, [sl]
  408694:	ddab      	ble.n	4085ee <__ieee754_rem_pio2+0x1f6>
  408696:	a35e      	add	r3, pc, #376	; (adr r3, 408810 <__ieee754_rem_pio2+0x418>)
  408698:	e9d3 2300 	ldrd	r2, r3, [r3]
  40869c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4086a0:	f001 fda0 	bl	40a1e4 <__aeabi_dmul>
  4086a4:	4606      	mov	r6, r0
  4086a6:	460f      	mov	r7, r1
  4086a8:	4602      	mov	r2, r0
  4086aa:	460b      	mov	r3, r1
  4086ac:	4640      	mov	r0, r8
  4086ae:	4649      	mov	r1, r9
  4086b0:	f001 fbe4 	bl	409e7c <__aeabi_dsub>
  4086b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4086b8:	4602      	mov	r2, r0
  4086ba:	460b      	mov	r3, r1
  4086bc:	4640      	mov	r0, r8
  4086be:	4649      	mov	r1, r9
  4086c0:	f001 fbdc 	bl	409e7c <__aeabi_dsub>
  4086c4:	4632      	mov	r2, r6
  4086c6:	463b      	mov	r3, r7
  4086c8:	f001 fbd8 	bl	409e7c <__aeabi_dsub>
  4086cc:	a352      	add	r3, pc, #328	; (adr r3, 408818 <__ieee754_rem_pio2+0x420>)
  4086ce:	e9d3 2300 	ldrd	r2, r3, [r3]
  4086d2:	4606      	mov	r6, r0
  4086d4:	460f      	mov	r7, r1
  4086d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4086da:	f001 fd83 	bl	40a1e4 <__aeabi_dmul>
  4086de:	4632      	mov	r2, r6
  4086e0:	463b      	mov	r3, r7
  4086e2:	f001 fbcb 	bl	409e7c <__aeabi_dsub>
  4086e6:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  4086ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4086ee:	4602      	mov	r2, r0
  4086f0:	460b      	mov	r3, r1
  4086f2:	4640      	mov	r0, r8
  4086f4:	4649      	mov	r1, r9
  4086f6:	f001 fbc1 	bl	409e7c <__aeabi_dsub>
  4086fa:	460b      	mov	r3, r1
  4086fc:	f3c1 570a 	ubfx	r7, r1, #20, #11
  408700:	460e      	mov	r6, r1
  408702:	9909      	ldr	r1, [sp, #36]	; 0x24
  408704:	1bcf      	subs	r7, r1, r7
  408706:	4602      	mov	r2, r0
  408708:	2f31      	cmp	r7, #49	; 0x31
  40870a:	4683      	mov	fp, r0
  40870c:	e9ca 2300 	strd	r2, r3, [sl]
  408710:	dd7a      	ble.n	408808 <__ieee754_rem_pio2+0x410>
  408712:	a343      	add	r3, pc, #268	; (adr r3, 408820 <__ieee754_rem_pio2+0x428>)
  408714:	e9d3 2300 	ldrd	r2, r3, [r3]
  408718:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40871c:	f001 fd62 	bl	40a1e4 <__aeabi_dmul>
  408720:	4606      	mov	r6, r0
  408722:	460f      	mov	r7, r1
  408724:	4602      	mov	r2, r0
  408726:	460b      	mov	r3, r1
  408728:	4640      	mov	r0, r8
  40872a:	4649      	mov	r1, r9
  40872c:	e9cd 8906 	strd	r8, r9, [sp, #24]
  408730:	f001 fba4 	bl	409e7c <__aeabi_dsub>
  408734:	4602      	mov	r2, r0
  408736:	460b      	mov	r3, r1
  408738:	4680      	mov	r8, r0
  40873a:	4689      	mov	r9, r1
  40873c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  408740:	f001 fb9c 	bl	409e7c <__aeabi_dsub>
  408744:	4632      	mov	r2, r6
  408746:	463b      	mov	r3, r7
  408748:	f001 fb98 	bl	409e7c <__aeabi_dsub>
  40874c:	a336      	add	r3, pc, #216	; (adr r3, 408828 <__ieee754_rem_pio2+0x430>)
  40874e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408752:	4606      	mov	r6, r0
  408754:	460f      	mov	r7, r1
  408756:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40875a:	f001 fd43 	bl	40a1e4 <__aeabi_dmul>
  40875e:	4632      	mov	r2, r6
  408760:	463b      	mov	r3, r7
  408762:	f001 fb8b 	bl	409e7c <__aeabi_dsub>
  408766:	4602      	mov	r2, r0
  408768:	460b      	mov	r3, r1
  40876a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40876e:	e734      	b.n	4085da <__ieee754_rem_pio2+0x1e2>
  408770:	f001 fb86 	bl	409e80 <__adddf3>
  408774:	4b30      	ldr	r3, [pc, #192]	; (408838 <__ieee754_rem_pio2+0x440>)
  408776:	429f      	cmp	r7, r3
  408778:	4604      	mov	r4, r0
  40877a:	460d      	mov	r5, r1
  40877c:	d026      	beq.n	4087cc <__ieee754_rem_pio2+0x3d4>
  40877e:	a32c      	add	r3, pc, #176	; (adr r3, 408830 <__ieee754_rem_pio2+0x438>)
  408780:	e9d3 2300 	ldrd	r2, r3, [r3]
  408784:	f001 fb7c 	bl	409e80 <__adddf3>
  408788:	4602      	mov	r2, r0
  40878a:	460b      	mov	r3, r1
  40878c:	e9ca 2300 	strd	r2, r3, [sl]
  408790:	4629      	mov	r1, r5
  408792:	4620      	mov	r0, r4
  408794:	f001 fb72 	bl	409e7c <__aeabi_dsub>
  408798:	a325      	add	r3, pc, #148	; (adr r3, 408830 <__ieee754_rem_pio2+0x438>)
  40879a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40879e:	f001 fb6f 	bl	409e80 <__adddf3>
  4087a2:	f04f 35ff 	mov.w	r5, #4294967295
  4087a6:	e9ca 0102 	strd	r0, r1, [sl, #8]
  4087aa:	e6b7      	b.n	40851c <__ieee754_rem_pio2+0x124>
  4087ac:	f8da 2004 	ldr.w	r2, [sl, #4]
  4087b0:	f8da 300c 	ldr.w	r3, [sl, #12]
  4087b4:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  4087b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  4087bc:	4245      	negs	r5, r0
  4087be:	f8ca 2004 	str.w	r2, [sl, #4]
  4087c2:	f8ca 300c 	str.w	r3, [sl, #12]
  4087c6:	e6a9      	b.n	40851c <__ieee754_rem_pio2+0x124>
  4087c8:	2303      	movs	r3, #3
  4087ca:	e692      	b.n	4084f2 <__ieee754_rem_pio2+0xfa>
  4087cc:	a310      	add	r3, pc, #64	; (adr r3, 408810 <__ieee754_rem_pio2+0x418>)
  4087ce:	e9d3 2300 	ldrd	r2, r3, [r3]
  4087d2:	f001 fb55 	bl	409e80 <__adddf3>
  4087d6:	a310      	add	r3, pc, #64	; (adr r3, 408818 <__ieee754_rem_pio2+0x420>)
  4087d8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4087dc:	460d      	mov	r5, r1
  4087de:	4604      	mov	r4, r0
  4087e0:	f001 fb4e 	bl	409e80 <__adddf3>
  4087e4:	4602      	mov	r2, r0
  4087e6:	460b      	mov	r3, r1
  4087e8:	e9ca 2300 	strd	r2, r3, [sl]
  4087ec:	4629      	mov	r1, r5
  4087ee:	4620      	mov	r0, r4
  4087f0:	f001 fb44 	bl	409e7c <__aeabi_dsub>
  4087f4:	a308      	add	r3, pc, #32	; (adr r3, 408818 <__ieee754_rem_pio2+0x420>)
  4087f6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4087fa:	f001 fb41 	bl	409e80 <__adddf3>
  4087fe:	f04f 35ff 	mov.w	r5, #4294967295
  408802:	e9ca 0102 	strd	r0, r1, [sl, #8]
  408806:	e689      	b.n	40851c <__ieee754_rem_pio2+0x124>
  408808:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  40880c:	e6ef      	b.n	4085ee <__ieee754_rem_pio2+0x1f6>
  40880e:	bf00      	nop
  408810:	1a600000 	.word	0x1a600000
  408814:	3dd0b461 	.word	0x3dd0b461
  408818:	2e037073 	.word	0x2e037073
  40881c:	3ba3198a 	.word	0x3ba3198a
  408820:	2e000000 	.word	0x2e000000
  408824:	3ba3198a 	.word	0x3ba3198a
  408828:	252049c1 	.word	0x252049c1
  40882c:	397b839a 	.word	0x397b839a
  408830:	1a626331 	.word	0x1a626331
  408834:	3dd0b461 	.word	0x3dd0b461
  408838:	3ff921fb 	.word	0x3ff921fb

0040883c <__ieee754_sqrt>:
  40883c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408840:	4e5d      	ldr	r6, [pc, #372]	; (4089b8 <__ieee754_sqrt+0x17c>)
  408842:	46b6      	mov	lr, r6
  408844:	400e      	ands	r6, r1
  408846:	4576      	cmp	r6, lr
  408848:	460c      	mov	r4, r1
  40884a:	4605      	mov	r5, r0
  40884c:	f000 8095 	beq.w	40897a <__ieee754_sqrt+0x13e>
  408850:	2900      	cmp	r1, #0
  408852:	460b      	mov	r3, r1
  408854:	4602      	mov	r2, r0
  408856:	dd73      	ble.n	408940 <__ieee754_sqrt+0x104>
  408858:	150f      	asrs	r7, r1, #20
  40885a:	d07e      	beq.n	40895a <__ieee754_sqrt+0x11e>
  40885c:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  408860:	f3c3 0313 	ubfx	r3, r3, #0, #20
  408864:	07f8      	lsls	r0, r7, #31
  408866:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40886a:	d464      	bmi.n	408936 <__ieee754_sqrt+0xfa>
  40886c:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  408870:	2600      	movs	r6, #0
  408872:	440b      	add	r3, r1
  408874:	107f      	asrs	r7, r7, #1
  408876:	0052      	lsls	r2, r2, #1
  408878:	46b6      	mov	lr, r6
  40887a:	2016      	movs	r0, #22
  40887c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  408880:	eb0e 0401 	add.w	r4, lr, r1
  408884:	429c      	cmp	r4, r3
  408886:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  40888a:	ea4f 0242 	mov.w	r2, r2, lsl #1
  40888e:	dc03      	bgt.n	408898 <__ieee754_sqrt+0x5c>
  408890:	1b1b      	subs	r3, r3, r4
  408892:	eb04 0e01 	add.w	lr, r4, r1
  408896:	440e      	add	r6, r1
  408898:	3801      	subs	r0, #1
  40889a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  40889e:	ea4f 0151 	mov.w	r1, r1, lsr #1
  4088a2:	d1ed      	bne.n	408880 <__ieee754_sqrt+0x44>
  4088a4:	4684      	mov	ip, r0
  4088a6:	2420      	movs	r4, #32
  4088a8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4088ac:	e009      	b.n	4088c2 <__ieee754_sqrt+0x86>
  4088ae:	d020      	beq.n	4088f2 <__ieee754_sqrt+0xb6>
  4088b0:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  4088b4:	3c01      	subs	r4, #1
  4088b6:	ea4f 0151 	mov.w	r1, r1, lsr #1
  4088ba:	442b      	add	r3, r5
  4088bc:	ea4f 0242 	mov.w	r2, r2, lsl #1
  4088c0:	d020      	beq.n	408904 <__ieee754_sqrt+0xc8>
  4088c2:	459e      	cmp	lr, r3
  4088c4:	eb01 050c 	add.w	r5, r1, ip
  4088c8:	daf1      	bge.n	4088ae <__ieee754_sqrt+0x72>
  4088ca:	2d00      	cmp	r5, #0
  4088cc:	eb05 0c01 	add.w	ip, r5, r1
  4088d0:	db09      	blt.n	4088e6 <__ieee754_sqrt+0xaa>
  4088d2:	46f0      	mov	r8, lr
  4088d4:	4295      	cmp	r5, r2
  4088d6:	ebce 0303 	rsb	r3, lr, r3
  4088da:	d900      	bls.n	4088de <__ieee754_sqrt+0xa2>
  4088dc:	3b01      	subs	r3, #1
  4088de:	1b52      	subs	r2, r2, r5
  4088e0:	4408      	add	r0, r1
  4088e2:	46c6      	mov	lr, r8
  4088e4:	e7e4      	b.n	4088b0 <__ieee754_sqrt+0x74>
  4088e6:	f1bc 0f00 	cmp.w	ip, #0
  4088ea:	dbf2      	blt.n	4088d2 <__ieee754_sqrt+0x96>
  4088ec:	f10e 0801 	add.w	r8, lr, #1
  4088f0:	e7f0      	b.n	4088d4 <__ieee754_sqrt+0x98>
  4088f2:	4295      	cmp	r5, r2
  4088f4:	d817      	bhi.n	408926 <__ieee754_sqrt+0xea>
  4088f6:	2d00      	cmp	r5, #0
  4088f8:	eb05 0c01 	add.w	ip, r5, r1
  4088fc:	db47      	blt.n	40898e <__ieee754_sqrt+0x152>
  4088fe:	4698      	mov	r8, r3
  408900:	2300      	movs	r3, #0
  408902:	e7ec      	b.n	4088de <__ieee754_sqrt+0xa2>
  408904:	4313      	orrs	r3, r2
  408906:	d110      	bne.n	40892a <__ieee754_sqrt+0xee>
  408908:	0840      	lsrs	r0, r0, #1
  40890a:	1073      	asrs	r3, r6, #1
  40890c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  408910:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  408914:	07f2      	lsls	r2, r6, #31
  408916:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  40891a:	bf48      	it	mi
  40891c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  408920:	4649      	mov	r1, r9
  408922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408926:	4673      	mov	r3, lr
  408928:	e7c2      	b.n	4088b0 <__ieee754_sqrt+0x74>
  40892a:	1c41      	adds	r1, r0, #1
  40892c:	d033      	beq.n	408996 <__ieee754_sqrt+0x15a>
  40892e:	f000 0301 	and.w	r3, r0, #1
  408932:	4418      	add	r0, r3
  408934:	e7e8      	b.n	408908 <__ieee754_sqrt+0xcc>
  408936:	005b      	lsls	r3, r3, #1
  408938:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  40893c:	0052      	lsls	r2, r2, #1
  40893e:	e795      	b.n	40886c <__ieee754_sqrt+0x30>
  408940:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  408944:	4306      	orrs	r6, r0
  408946:	d0ec      	beq.n	408922 <__ieee754_sqrt+0xe6>
  408948:	bb69      	cbnz	r1, 4089a6 <__ieee754_sqrt+0x16a>
  40894a:	460f      	mov	r7, r1
  40894c:	0ad3      	lsrs	r3, r2, #11
  40894e:	3f15      	subs	r7, #21
  408950:	0552      	lsls	r2, r2, #21
  408952:	2b00      	cmp	r3, #0
  408954:	d0fa      	beq.n	40894c <__ieee754_sqrt+0x110>
  408956:	02dd      	lsls	r5, r3, #11
  408958:	d420      	bmi.n	40899c <__ieee754_sqrt+0x160>
  40895a:	2100      	movs	r1, #0
  40895c:	e000      	b.n	408960 <__ieee754_sqrt+0x124>
  40895e:	4601      	mov	r1, r0
  408960:	005b      	lsls	r3, r3, #1
  408962:	02dc      	lsls	r4, r3, #11
  408964:	f101 0001 	add.w	r0, r1, #1
  408968:	d5f9      	bpl.n	40895e <__ieee754_sqrt+0x122>
  40896a:	f1c0 0420 	rsb	r4, r0, #32
  40896e:	fa22 f404 	lsr.w	r4, r2, r4
  408972:	4323      	orrs	r3, r4
  408974:	1a7f      	subs	r7, r7, r1
  408976:	4082      	lsls	r2, r0
  408978:	e770      	b.n	40885c <__ieee754_sqrt+0x20>
  40897a:	4602      	mov	r2, r0
  40897c:	460b      	mov	r3, r1
  40897e:	f001 fc31 	bl	40a1e4 <__aeabi_dmul>
  408982:	462a      	mov	r2, r5
  408984:	4623      	mov	r3, r4
  408986:	f001 fa7b 	bl	409e80 <__adddf3>
  40898a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40898e:	f1bc 0f00 	cmp.w	ip, #0
  408992:	daab      	bge.n	4088ec <__ieee754_sqrt+0xb0>
  408994:	e7b3      	b.n	4088fe <__ieee754_sqrt+0xc2>
  408996:	3601      	adds	r6, #1
  408998:	4620      	mov	r0, r4
  40899a:	e7b6      	b.n	40890a <__ieee754_sqrt+0xce>
  40899c:	2420      	movs	r4, #32
  40899e:	f04f 31ff 	mov.w	r1, #4294967295
  4089a2:	2000      	movs	r0, #0
  4089a4:	e7e3      	b.n	40896e <__ieee754_sqrt+0x132>
  4089a6:	4602      	mov	r2, r0
  4089a8:	460b      	mov	r3, r1
  4089aa:	f001 fa67 	bl	409e7c <__aeabi_dsub>
  4089ae:	4602      	mov	r2, r0
  4089b0:	460b      	mov	r3, r1
  4089b2:	f001 fd41 	bl	40a438 <__aeabi_ddiv>
  4089b6:	e7b4      	b.n	408922 <__ieee754_sqrt+0xe6>
  4089b8:	7ff00000 	.word	0x7ff00000
  4089bc:	00000000 	.word	0x00000000

004089c0 <__kernel_cos>:
  4089c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4089c4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  4089c8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  4089cc:	b085      	sub	sp, #20
  4089ce:	460c      	mov	r4, r1
  4089d0:	4692      	mov	sl, r2
  4089d2:	469b      	mov	fp, r3
  4089d4:	4605      	mov	r5, r0
  4089d6:	da6b      	bge.n	408ab0 <__kernel_cos+0xf0>
  4089d8:	f001 feb4 	bl	40a744 <__aeabi_d2iz>
  4089dc:	2800      	cmp	r0, #0
  4089de:	f000 80e8 	beq.w	408bb2 <__kernel_cos+0x1f2>
  4089e2:	462a      	mov	r2, r5
  4089e4:	4623      	mov	r3, r4
  4089e6:	4628      	mov	r0, r5
  4089e8:	4621      	mov	r1, r4
  4089ea:	f001 fbfb 	bl	40a1e4 <__aeabi_dmul>
  4089ee:	a374      	add	r3, pc, #464	; (adr r3, 408bc0 <__kernel_cos+0x200>)
  4089f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4089f4:	4680      	mov	r8, r0
  4089f6:	4689      	mov	r9, r1
  4089f8:	f001 fbf4 	bl	40a1e4 <__aeabi_dmul>
  4089fc:	a372      	add	r3, pc, #456	; (adr r3, 408bc8 <__kernel_cos+0x208>)
  4089fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  408a02:	f001 fa3d 	bl	409e80 <__adddf3>
  408a06:	4642      	mov	r2, r8
  408a08:	464b      	mov	r3, r9
  408a0a:	f001 fbeb 	bl	40a1e4 <__aeabi_dmul>
  408a0e:	a370      	add	r3, pc, #448	; (adr r3, 408bd0 <__kernel_cos+0x210>)
  408a10:	e9d3 2300 	ldrd	r2, r3, [r3]
  408a14:	f001 fa32 	bl	409e7c <__aeabi_dsub>
  408a18:	4642      	mov	r2, r8
  408a1a:	464b      	mov	r3, r9
  408a1c:	f001 fbe2 	bl	40a1e4 <__aeabi_dmul>
  408a20:	a36d      	add	r3, pc, #436	; (adr r3, 408bd8 <__kernel_cos+0x218>)
  408a22:	e9d3 2300 	ldrd	r2, r3, [r3]
  408a26:	f001 fa2b 	bl	409e80 <__adddf3>
  408a2a:	4642      	mov	r2, r8
  408a2c:	464b      	mov	r3, r9
  408a2e:	f001 fbd9 	bl	40a1e4 <__aeabi_dmul>
  408a32:	a36b      	add	r3, pc, #428	; (adr r3, 408be0 <__kernel_cos+0x220>)
  408a34:	e9d3 2300 	ldrd	r2, r3, [r3]
  408a38:	f001 fa20 	bl	409e7c <__aeabi_dsub>
  408a3c:	4642      	mov	r2, r8
  408a3e:	464b      	mov	r3, r9
  408a40:	f001 fbd0 	bl	40a1e4 <__aeabi_dmul>
  408a44:	a368      	add	r3, pc, #416	; (adr r3, 408be8 <__kernel_cos+0x228>)
  408a46:	e9d3 2300 	ldrd	r2, r3, [r3]
  408a4a:	f001 fa19 	bl	409e80 <__adddf3>
  408a4e:	4642      	mov	r2, r8
  408a50:	464b      	mov	r3, r9
  408a52:	f001 fbc7 	bl	40a1e4 <__aeabi_dmul>
  408a56:	e9cd 0100 	strd	r0, r1, [sp]
  408a5a:	2200      	movs	r2, #0
  408a5c:	4b64      	ldr	r3, [pc, #400]	; (408bf0 <__kernel_cos+0x230>)
  408a5e:	4640      	mov	r0, r8
  408a60:	4649      	mov	r1, r9
  408a62:	f001 fbbf 	bl	40a1e4 <__aeabi_dmul>
  408a66:	e9dd 2300 	ldrd	r2, r3, [sp]
  408a6a:	4606      	mov	r6, r0
  408a6c:	460f      	mov	r7, r1
  408a6e:	4640      	mov	r0, r8
  408a70:	4649      	mov	r1, r9
  408a72:	f001 fbb7 	bl	40a1e4 <__aeabi_dmul>
  408a76:	4652      	mov	r2, sl
  408a78:	4680      	mov	r8, r0
  408a7a:	4689      	mov	r9, r1
  408a7c:	465b      	mov	r3, fp
  408a7e:	4628      	mov	r0, r5
  408a80:	4621      	mov	r1, r4
  408a82:	f001 fbaf 	bl	40a1e4 <__aeabi_dmul>
  408a86:	4602      	mov	r2, r0
  408a88:	460b      	mov	r3, r1
  408a8a:	4640      	mov	r0, r8
  408a8c:	4649      	mov	r1, r9
  408a8e:	f001 f9f5 	bl	409e7c <__aeabi_dsub>
  408a92:	4602      	mov	r2, r0
  408a94:	460b      	mov	r3, r1
  408a96:	4630      	mov	r0, r6
  408a98:	4639      	mov	r1, r7
  408a9a:	f001 f9ef 	bl	409e7c <__aeabi_dsub>
  408a9e:	4602      	mov	r2, r0
  408aa0:	460b      	mov	r3, r1
  408aa2:	2000      	movs	r0, #0
  408aa4:	4953      	ldr	r1, [pc, #332]	; (408bf4 <__kernel_cos+0x234>)
  408aa6:	f001 f9e9 	bl	409e7c <__aeabi_dsub>
  408aaa:	b005      	add	sp, #20
  408aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408ab0:	4602      	mov	r2, r0
  408ab2:	460b      	mov	r3, r1
  408ab4:	f001 fb96 	bl	40a1e4 <__aeabi_dmul>
  408ab8:	a341      	add	r3, pc, #260	; (adr r3, 408bc0 <__kernel_cos+0x200>)
  408aba:	e9d3 2300 	ldrd	r2, r3, [r3]
  408abe:	4680      	mov	r8, r0
  408ac0:	4689      	mov	r9, r1
  408ac2:	f001 fb8f 	bl	40a1e4 <__aeabi_dmul>
  408ac6:	a340      	add	r3, pc, #256	; (adr r3, 408bc8 <__kernel_cos+0x208>)
  408ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
  408acc:	f001 f9d8 	bl	409e80 <__adddf3>
  408ad0:	4642      	mov	r2, r8
  408ad2:	464b      	mov	r3, r9
  408ad4:	f001 fb86 	bl	40a1e4 <__aeabi_dmul>
  408ad8:	a33d      	add	r3, pc, #244	; (adr r3, 408bd0 <__kernel_cos+0x210>)
  408ada:	e9d3 2300 	ldrd	r2, r3, [r3]
  408ade:	f001 f9cd 	bl	409e7c <__aeabi_dsub>
  408ae2:	4642      	mov	r2, r8
  408ae4:	464b      	mov	r3, r9
  408ae6:	f001 fb7d 	bl	40a1e4 <__aeabi_dmul>
  408aea:	a33b      	add	r3, pc, #236	; (adr r3, 408bd8 <__kernel_cos+0x218>)
  408aec:	e9d3 2300 	ldrd	r2, r3, [r3]
  408af0:	f001 f9c6 	bl	409e80 <__adddf3>
  408af4:	4642      	mov	r2, r8
  408af6:	464b      	mov	r3, r9
  408af8:	f001 fb74 	bl	40a1e4 <__aeabi_dmul>
  408afc:	a338      	add	r3, pc, #224	; (adr r3, 408be0 <__kernel_cos+0x220>)
  408afe:	e9d3 2300 	ldrd	r2, r3, [r3]
  408b02:	f001 f9bb 	bl	409e7c <__aeabi_dsub>
  408b06:	4642      	mov	r2, r8
  408b08:	464b      	mov	r3, r9
  408b0a:	f001 fb6b 	bl	40a1e4 <__aeabi_dmul>
  408b0e:	a336      	add	r3, pc, #216	; (adr r3, 408be8 <__kernel_cos+0x228>)
  408b10:	e9d3 2300 	ldrd	r2, r3, [r3]
  408b14:	f001 f9b4 	bl	409e80 <__adddf3>
  408b18:	464b      	mov	r3, r9
  408b1a:	4642      	mov	r2, r8
  408b1c:	f001 fb62 	bl	40a1e4 <__aeabi_dmul>
  408b20:	4b35      	ldr	r3, [pc, #212]	; (408bf8 <__kernel_cos+0x238>)
  408b22:	429e      	cmp	r6, r3
  408b24:	e9cd 0100 	strd	r0, r1, [sp]
  408b28:	dd97      	ble.n	408a5a <__kernel_cos+0x9a>
  408b2a:	4b34      	ldr	r3, [pc, #208]	; (408bfc <__kernel_cos+0x23c>)
  408b2c:	429e      	cmp	r6, r3
  408b2e:	f04f 0200 	mov.w	r2, #0
  408b32:	dc38      	bgt.n	408ba6 <__kernel_cos+0x1e6>
  408b34:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
  408b38:	2000      	movs	r0, #0
  408b3a:	492e      	ldr	r1, [pc, #184]	; (408bf4 <__kernel_cos+0x234>)
  408b3c:	4616      	mov	r6, r2
  408b3e:	461f      	mov	r7, r3
  408b40:	f001 f99c 	bl	409e7c <__aeabi_dsub>
  408b44:	e9cd 0102 	strd	r0, r1, [sp, #8]
  408b48:	2200      	movs	r2, #0
  408b4a:	4b29      	ldr	r3, [pc, #164]	; (408bf0 <__kernel_cos+0x230>)
  408b4c:	4640      	mov	r0, r8
  408b4e:	4649      	mov	r1, r9
  408b50:	f001 fb48 	bl	40a1e4 <__aeabi_dmul>
  408b54:	4632      	mov	r2, r6
  408b56:	463b      	mov	r3, r7
  408b58:	f001 f990 	bl	409e7c <__aeabi_dsub>
  408b5c:	e9dd 2300 	ldrd	r2, r3, [sp]
  408b60:	4606      	mov	r6, r0
  408b62:	460f      	mov	r7, r1
  408b64:	4640      	mov	r0, r8
  408b66:	4649      	mov	r1, r9
  408b68:	f001 fb3c 	bl	40a1e4 <__aeabi_dmul>
  408b6c:	4652      	mov	r2, sl
  408b6e:	4680      	mov	r8, r0
  408b70:	4689      	mov	r9, r1
  408b72:	465b      	mov	r3, fp
  408b74:	4628      	mov	r0, r5
  408b76:	4621      	mov	r1, r4
  408b78:	f001 fb34 	bl	40a1e4 <__aeabi_dmul>
  408b7c:	4602      	mov	r2, r0
  408b7e:	460b      	mov	r3, r1
  408b80:	4640      	mov	r0, r8
  408b82:	4649      	mov	r1, r9
  408b84:	f001 f97a 	bl	409e7c <__aeabi_dsub>
  408b88:	4602      	mov	r2, r0
  408b8a:	460b      	mov	r3, r1
  408b8c:	4630      	mov	r0, r6
  408b8e:	4639      	mov	r1, r7
  408b90:	f001 f974 	bl	409e7c <__aeabi_dsub>
  408b94:	4602      	mov	r2, r0
  408b96:	460b      	mov	r3, r1
  408b98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  408b9c:	f001 f96e 	bl	409e7c <__aeabi_dsub>
  408ba0:	b005      	add	sp, #20
  408ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408ba6:	4b16      	ldr	r3, [pc, #88]	; (408c00 <__kernel_cos+0x240>)
  408ba8:	4f16      	ldr	r7, [pc, #88]	; (408c04 <__kernel_cos+0x244>)
  408baa:	e9cd 2302 	strd	r2, r3, [sp, #8]
  408bae:	2600      	movs	r6, #0
  408bb0:	e7ca      	b.n	408b48 <__kernel_cos+0x188>
  408bb2:	4910      	ldr	r1, [pc, #64]	; (408bf4 <__kernel_cos+0x234>)
  408bb4:	2000      	movs	r0, #0
  408bb6:	b005      	add	sp, #20
  408bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408bbc:	f3af 8000 	nop.w
  408bc0:	be8838d4 	.word	0xbe8838d4
  408bc4:	bda8fae9 	.word	0xbda8fae9
  408bc8:	bdb4b1c4 	.word	0xbdb4b1c4
  408bcc:	3e21ee9e 	.word	0x3e21ee9e
  408bd0:	809c52ad 	.word	0x809c52ad
  408bd4:	3e927e4f 	.word	0x3e927e4f
  408bd8:	19cb1590 	.word	0x19cb1590
  408bdc:	3efa01a0 	.word	0x3efa01a0
  408be0:	16c15177 	.word	0x16c15177
  408be4:	3f56c16c 	.word	0x3f56c16c
  408be8:	5555554c 	.word	0x5555554c
  408bec:	3fa55555 	.word	0x3fa55555
  408bf0:	3fe00000 	.word	0x3fe00000
  408bf4:	3ff00000 	.word	0x3ff00000
  408bf8:	3fd33332 	.word	0x3fd33332
  408bfc:	3fe90000 	.word	0x3fe90000
  408c00:	3fe70000 	.word	0x3fe70000
  408c04:	3fd20000 	.word	0x3fd20000

00408c08 <__kernel_rem_pio2>:
  408c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408c0c:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
  408c10:	4c79      	ldr	r4, [pc, #484]	; (408df8 <__kernel_rem_pio2+0x1f0>)
  408c12:	9ea6      	ldr	r6, [sp, #664]	; 0x298
  408c14:	4d79      	ldr	r5, [pc, #484]	; (408dfc <__kernel_rem_pio2+0x1f4>)
  408c16:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
  408c1a:	9409      	str	r4, [sp, #36]	; 0x24
  408c1c:	4626      	mov	r6, r4
  408c1e:	1ed4      	subs	r4, r2, #3
  408c20:	fb85 7504 	smull	r7, r5, r5, r4
  408c24:	17e4      	asrs	r4, r4, #31
  408c26:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
  408c2a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  408c2e:	461d      	mov	r5, r3
  408c30:	930c      	str	r3, [sp, #48]	; 0x30
  408c32:	1c63      	adds	r3, r4, #1
  408c34:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
  408c38:	3d01      	subs	r5, #1
  408c3a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  408c3e:	9308      	str	r3, [sp, #32]
  408c40:	462b      	mov	r3, r5
  408c42:	940d      	str	r4, [sp, #52]	; 0x34
  408c44:	9502      	str	r5, [sp, #8]
  408c46:	1b65      	subs	r5, r4, r5
  408c48:	18f4      	adds	r4, r6, r3
  408c4a:	9004      	str	r0, [sp, #16]
  408c4c:	910a      	str	r1, [sp, #40]	; 0x28
  408c4e:	d416      	bmi.n	408c7e <__kernel_rem_pio2+0x76>
  408c50:	442c      	add	r4, r5
  408c52:	3401      	adds	r4, #1
  408c54:	ae22      	add	r6, sp, #136	; 0x88
  408c56:	9fa7      	ldr	r7, [sp, #668]	; 0x29c
  408c58:	e008      	b.n	408c6c <__kernel_rem_pio2+0x64>
  408c5a:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
  408c5e:	f001 fa5b 	bl	40a118 <__aeabi_i2d>
  408c62:	3501      	adds	r5, #1
  408c64:	42a5      	cmp	r5, r4
  408c66:	e9e6 0102 	strd	r0, r1, [r6, #8]!
  408c6a:	d008      	beq.n	408c7e <__kernel_rem_pio2+0x76>
  408c6c:	2d00      	cmp	r5, #0
  408c6e:	daf4      	bge.n	408c5a <__kernel_rem_pio2+0x52>
  408c70:	3501      	adds	r5, #1
  408c72:	2000      	movs	r0, #0
  408c74:	2100      	movs	r1, #0
  408c76:	42a5      	cmp	r5, r4
  408c78:	e9e6 0102 	strd	r0, r1, [r6, #8]!
  408c7c:	d1f6      	bne.n	408c6c <__kernel_rem_pio2+0x64>
  408c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408c80:	2b00      	cmp	r3, #0
  408c82:	db31      	blt.n	408ce8 <__kernel_rem_pio2+0xe0>
  408c84:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408c86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408c88:	a974      	add	r1, sp, #464	; 0x1d0
  408c8a:	eb01 0bc2 	add.w	fp, r1, r2, lsl #3
  408c8e:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
  408c92:	9a02      	ldr	r2, [sp, #8]
  408c94:	a924      	add	r1, sp, #144	; 0x90
  408c96:	00db      	lsls	r3, r3, #3
  408c98:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
  408c9c:	9301      	str	r3, [sp, #4]
  408c9e:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
  408ca2:	9b02      	ldr	r3, [sp, #8]
  408ca4:	2b00      	cmp	r3, #0
  408ca6:	f2c0 8190 	blt.w	408fca <__kernel_rem_pio2+0x3c2>
  408caa:	9b04      	ldr	r3, [sp, #16]
  408cac:	f1a3 0508 	sub.w	r5, r3, #8
  408cb0:	9b01      	ldr	r3, [sp, #4]
  408cb2:	464c      	mov	r4, r9
  408cb4:	eb09 0803 	add.w	r8, r9, r3
  408cb8:	2600      	movs	r6, #0
  408cba:	2700      	movs	r7, #0
  408cbc:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
  408cc0:	e874 0102 	ldrd	r0, r1, [r4], #-8
  408cc4:	f001 fa8e 	bl	40a1e4 <__aeabi_dmul>
  408cc8:	4602      	mov	r2, r0
  408cca:	460b      	mov	r3, r1
  408ccc:	4630      	mov	r0, r6
  408cce:	4639      	mov	r1, r7
  408cd0:	f001 f8d6 	bl	409e80 <__adddf3>
  408cd4:	4544      	cmp	r4, r8
  408cd6:	4606      	mov	r6, r0
  408cd8:	460f      	mov	r7, r1
  408cda:	d1ef      	bne.n	408cbc <__kernel_rem_pio2+0xb4>
  408cdc:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  408ce0:	45da      	cmp	sl, fp
  408ce2:	f109 0908 	add.w	r9, r9, #8
  408ce6:	d1dc      	bne.n	408ca2 <__kernel_rem_pio2+0x9a>
  408ce8:	9d09      	ldr	r5, [sp, #36]	; 0x24
  408cea:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
  408cee:	3b02      	subs	r3, #2
  408cf0:	009b      	lsls	r3, r3, #2
  408cf2:	1d1a      	adds	r2, r3, #4
  408cf4:	a910      	add	r1, sp, #64	; 0x40
  408cf6:	440a      	add	r2, r1
  408cf8:	440b      	add	r3, r1
  408cfa:	920f      	str	r2, [sp, #60]	; 0x3c
  408cfc:	930e      	str	r3, [sp, #56]	; 0x38
  408cfe:	ab9c      	add	r3, sp, #624	; 0x270
  408d00:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  408d04:	2d00      	cmp	r5, #0
  408d06:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
  408d0a:	dd2b      	ble.n	408d64 <__kernel_rem_pio2+0x15c>
  408d0c:	ab9c      	add	r3, sp, #624	; 0x270
  408d0e:	eb03 04c5 	add.w	r4, r3, r5, lsl #3
  408d12:	3ca8      	subs	r4, #168	; 0xa8
  408d14:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
  408d18:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
  408d1c:	2200      	movs	r2, #0
  408d1e:	4b38      	ldr	r3, [pc, #224]	; (408e00 <__kernel_rem_pio2+0x1f8>)
  408d20:	4630      	mov	r0, r6
  408d22:	4639      	mov	r1, r7
  408d24:	f001 fa5e 	bl	40a1e4 <__aeabi_dmul>
  408d28:	f001 fd0c 	bl	40a744 <__aeabi_d2iz>
  408d2c:	f001 f9f4 	bl	40a118 <__aeabi_i2d>
  408d30:	2200      	movs	r2, #0
  408d32:	4b34      	ldr	r3, [pc, #208]	; (408e04 <__kernel_rem_pio2+0x1fc>)
  408d34:	4680      	mov	r8, r0
  408d36:	4689      	mov	r9, r1
  408d38:	f001 fa54 	bl	40a1e4 <__aeabi_dmul>
  408d3c:	4602      	mov	r2, r0
  408d3e:	460b      	mov	r3, r1
  408d40:	4630      	mov	r0, r6
  408d42:	4639      	mov	r1, r7
  408d44:	f001 f89a 	bl	409e7c <__aeabi_dsub>
  408d48:	f001 fcfc 	bl	40a744 <__aeabi_d2iz>
  408d4c:	e874 2302 	ldrd	r2, r3, [r4], #-8
  408d50:	f84a 0f04 	str.w	r0, [sl, #4]!
  408d54:	4649      	mov	r1, r9
  408d56:	4640      	mov	r0, r8
  408d58:	f001 f892 	bl	409e80 <__adddf3>
  408d5c:	455c      	cmp	r4, fp
  408d5e:	4606      	mov	r6, r0
  408d60:	460f      	mov	r7, r1
  408d62:	d1db      	bne.n	408d1c <__kernel_rem_pio2+0x114>
  408d64:	9c08      	ldr	r4, [sp, #32]
  408d66:	4630      	mov	r0, r6
  408d68:	4639      	mov	r1, r7
  408d6a:	4622      	mov	r2, r4
  408d6c:	f000 fffc 	bl	409d68 <scalbn>
  408d70:	2200      	movs	r2, #0
  408d72:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  408d76:	4606      	mov	r6, r0
  408d78:	460f      	mov	r7, r1
  408d7a:	f001 fa33 	bl	40a1e4 <__aeabi_dmul>
  408d7e:	f000 ff63 	bl	409c48 <floor>
  408d82:	2200      	movs	r2, #0
  408d84:	4b20      	ldr	r3, [pc, #128]	; (408e08 <__kernel_rem_pio2+0x200>)
  408d86:	f001 fa2d 	bl	40a1e4 <__aeabi_dmul>
  408d8a:	4602      	mov	r2, r0
  408d8c:	460b      	mov	r3, r1
  408d8e:	4630      	mov	r0, r6
  408d90:	4639      	mov	r1, r7
  408d92:	f001 f873 	bl	409e7c <__aeabi_dsub>
  408d96:	460f      	mov	r7, r1
  408d98:	4606      	mov	r6, r0
  408d9a:	f001 fcd3 	bl	40a744 <__aeabi_d2iz>
  408d9e:	4681      	mov	r9, r0
  408da0:	f001 f9ba 	bl	40a118 <__aeabi_i2d>
  408da4:	4602      	mov	r2, r0
  408da6:	460b      	mov	r3, r1
  408da8:	4630      	mov	r0, r6
  408daa:	4639      	mov	r1, r7
  408dac:	f001 f866 	bl	409e7c <__aeabi_dsub>
  408db0:	2c00      	cmp	r4, #0
  408db2:	4606      	mov	r6, r0
  408db4:	460f      	mov	r7, r1
  408db6:	f340 80ef 	ble.w	408f98 <__kernel_rem_pio2+0x390>
  408dba:	1e69      	subs	r1, r5, #1
  408dbc:	aa10      	add	r2, sp, #64	; 0x40
  408dbe:	f1c4 0318 	rsb	r3, r4, #24
  408dc2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  408dc6:	fa42 f003 	asr.w	r0, r2, r3
  408dca:	fa00 f303 	lsl.w	r3, r0, r3
  408dce:	1ad3      	subs	r3, r2, r3
  408dd0:	aa10      	add	r2, sp, #64	; 0x40
  408dd2:	f1c4 0817 	rsb	r8, r4, #23
  408dd6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  408dda:	4481      	add	r9, r0
  408ddc:	fa43 f808 	asr.w	r8, r3, r8
  408de0:	f1b8 0f00 	cmp.w	r8, #0
  408de4:	dd3d      	ble.n	408e62 <__kernel_rem_pio2+0x25a>
  408de6:	2d00      	cmp	r5, #0
  408de8:	f109 0901 	add.w	r9, r9, #1
  408dec:	f340 82d6 	ble.w	40939c <__kernel_rem_pio2+0x794>
  408df0:	2200      	movs	r2, #0
  408df2:	4614      	mov	r4, r2
  408df4:	a90f      	add	r1, sp, #60	; 0x3c
  408df6:	e011      	b.n	408e1c <__kernel_rem_pio2+0x214>
  408df8:	0040b754 	.word	0x0040b754
  408dfc:	2aaaaaab 	.word	0x2aaaaaab
  408e00:	3e700000 	.word	0x3e700000
  408e04:	41700000 	.word	0x41700000
  408e08:	40200000 	.word	0x40200000
  408e0c:	f1c3 7080 	rsb	r0, r3, #16777216	; 0x1000000
  408e10:	b10b      	cbz	r3, 408e16 <__kernel_rem_pio2+0x20e>
  408e12:	6008      	str	r0, [r1, #0]
  408e14:	2401      	movs	r4, #1
  408e16:	3201      	adds	r2, #1
  408e18:	4295      	cmp	r5, r2
  408e1a:	dd0d      	ble.n	408e38 <__kernel_rem_pio2+0x230>
  408e1c:	f851 3f04 	ldr.w	r3, [r1, #4]!
  408e20:	2c00      	cmp	r4, #0
  408e22:	d0f3      	beq.n	408e0c <__kernel_rem_pio2+0x204>
  408e24:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
  408e28:	3201      	adds	r2, #1
  408e2a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
  408e2e:	4295      	cmp	r5, r2
  408e30:	600b      	str	r3, [r1, #0]
  408e32:	f04f 0401 	mov.w	r4, #1
  408e36:	dcf1      	bgt.n	408e1c <__kernel_rem_pio2+0x214>
  408e38:	9b08      	ldr	r3, [sp, #32]
  408e3a:	2b00      	cmp	r3, #0
  408e3c:	dd0d      	ble.n	408e5a <__kernel_rem_pio2+0x252>
  408e3e:	2b01      	cmp	r3, #1
  408e40:	f000 80b2 	beq.w	408fa8 <__kernel_rem_pio2+0x3a0>
  408e44:	2b02      	cmp	r3, #2
  408e46:	d108      	bne.n	408e5a <__kernel_rem_pio2+0x252>
  408e48:	1e6a      	subs	r2, r5, #1
  408e4a:	ab10      	add	r3, sp, #64	; 0x40
  408e4c:	a910      	add	r1, sp, #64	; 0x40
  408e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408e52:	f3c3 0315 	ubfx	r3, r3, #0, #22
  408e56:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  408e5a:	f1b8 0f02 	cmp.w	r8, #2
  408e5e:	f000 8082 	beq.w	408f66 <__kernel_rem_pio2+0x35e>
  408e62:	2200      	movs	r2, #0
  408e64:	2300      	movs	r3, #0
  408e66:	4630      	mov	r0, r6
  408e68:	4639      	mov	r1, r7
  408e6a:	f001 fc23 	bl	40a6b4 <__aeabi_dcmpeq>
  408e6e:	2800      	cmp	r0, #0
  408e70:	f000 825e 	beq.w	409330 <__kernel_rem_pio2+0x728>
  408e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408e76:	f105 3bff 	add.w	fp, r5, #4294967295
  408e7a:	455b      	cmp	r3, fp
  408e7c:	dc10      	bgt.n	408ea0 <__kernel_rem_pio2+0x298>
  408e7e:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
  408e82:	aa10      	add	r2, sp, #64	; 0x40
  408e84:	3b01      	subs	r3, #1
  408e86:	980f      	ldr	r0, [sp, #60]	; 0x3c
  408e88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  408e8c:	2200      	movs	r2, #0
  408e8e:	f853 1904 	ldr.w	r1, [r3], #-4
  408e92:	4283      	cmp	r3, r0
  408e94:	ea42 0201 	orr.w	r2, r2, r1
  408e98:	d1f9      	bne.n	408e8e <__kernel_rem_pio2+0x286>
  408e9a:	2a00      	cmp	r2, #0
  408e9c:	f040 80b2 	bne.w	409004 <__kernel_rem_pio2+0x3fc>
  408ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408ea2:	aa10      	add	r2, sp, #64	; 0x40
  408ea4:	3b01      	subs	r3, #1
  408ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  408eaa:	2b00      	cmp	r3, #0
  408eac:	f040 8274 	bne.w	409398 <__kernel_rem_pio2+0x790>
  408eb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408eb2:	2301      	movs	r3, #1
  408eb4:	f852 1904 	ldr.w	r1, [r2], #-4
  408eb8:	3301      	adds	r3, #1
  408eba:	2900      	cmp	r1, #0
  408ebc:	d0fa      	beq.n	408eb4 <__kernel_rem_pio2+0x2ac>
  408ebe:	18e9      	adds	r1, r5, r3
  408ec0:	1c6a      	adds	r2, r5, #1
  408ec2:	428a      	cmp	r2, r1
  408ec4:	910b      	str	r1, [sp, #44]	; 0x2c
  408ec6:	dc49      	bgt.n	408f5c <__kernel_rem_pio2+0x354>
  408ec8:	990d      	ldr	r1, [sp, #52]	; 0x34
  408eca:	980c      	ldr	r0, [sp, #48]	; 0x30
  408ecc:	1851      	adds	r1, r2, r1
  408ece:	00db      	lsls	r3, r3, #3
  408ed0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
  408ed4:	9305      	str	r3, [sp, #20]
  408ed6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
  408ed8:	4405      	add	r5, r0
  408eda:	3901      	subs	r1, #1
  408edc:	00e8      	lsls	r0, r5, #3
  408ede:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
  408ee2:	ab24      	add	r3, sp, #144	; 0x90
  408ee4:	00d2      	lsls	r2, r2, #3
  408ee6:	eb03 0b00 	add.w	fp, r3, r0
  408eea:	ab74      	add	r3, sp, #464	; 0x1d0
  408eec:	4413      	add	r3, r2
  408eee:	9301      	str	r3, [sp, #4]
  408ef0:	f1a2 0308 	sub.w	r3, r2, #8
  408ef4:	9006      	str	r0, [sp, #24]
  408ef6:	9307      	str	r3, [sp, #28]
  408ef8:	f04f 0900 	mov.w	r9, #0
  408efc:	f85a 0f04 	ldr.w	r0, [sl, #4]!
  408f00:	f001 f90a 	bl	40a118 <__aeabi_i2d>
  408f04:	9b02      	ldr	r3, [sp, #8]
  408f06:	2b00      	cmp	r3, #0
  408f08:	e8eb 0102 	strd	r0, r1, [fp], #8
  408f0c:	db28      	blt.n	408f60 <__kernel_rem_pio2+0x358>
  408f0e:	9b06      	ldr	r3, [sp, #24]
  408f10:	eb03 0409 	add.w	r4, r3, r9
  408f14:	9b07      	ldr	r3, [sp, #28]
  408f16:	eb09 0803 	add.w	r8, r9, r3
  408f1a:	ab24      	add	r3, sp, #144	; 0x90
  408f1c:	441c      	add	r4, r3
  408f1e:	4498      	add	r8, r3
  408f20:	9b04      	ldr	r3, [sp, #16]
  408f22:	2600      	movs	r6, #0
  408f24:	f1a3 0508 	sub.w	r5, r3, #8
  408f28:	2700      	movs	r7, #0
  408f2a:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
  408f2e:	e874 0102 	ldrd	r0, r1, [r4], #-8
  408f32:	f001 f957 	bl	40a1e4 <__aeabi_dmul>
  408f36:	4602      	mov	r2, r0
  408f38:	460b      	mov	r3, r1
  408f3a:	4630      	mov	r0, r6
  408f3c:	4639      	mov	r1, r7
  408f3e:	f000 ff9f 	bl	409e80 <__adddf3>
  408f42:	4544      	cmp	r4, r8
  408f44:	4606      	mov	r6, r0
  408f46:	460f      	mov	r7, r1
  408f48:	d1ef      	bne.n	408f2a <__kernel_rem_pio2+0x322>
  408f4a:	9b01      	ldr	r3, [sp, #4]
  408f4c:	e8e3 6702 	strd	r6, r7, [r3], #8
  408f50:	9301      	str	r3, [sp, #4]
  408f52:	9b05      	ldr	r3, [sp, #20]
  408f54:	f109 0908 	add.w	r9, r9, #8
  408f58:	4599      	cmp	r9, r3
  408f5a:	d1cf      	bne.n	408efc <__kernel_rem_pio2+0x2f4>
  408f5c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  408f5e:	e6ce      	b.n	408cfe <__kernel_rem_pio2+0xf6>
  408f60:	2600      	movs	r6, #0
  408f62:	2700      	movs	r7, #0
  408f64:	e7f1      	b.n	408f4a <__kernel_rem_pio2+0x342>
  408f66:	4632      	mov	r2, r6
  408f68:	463b      	mov	r3, r7
  408f6a:	2000      	movs	r0, #0
  408f6c:	49b0      	ldr	r1, [pc, #704]	; (409230 <__kernel_rem_pio2+0x628>)
  408f6e:	f000 ff85 	bl	409e7c <__aeabi_dsub>
  408f72:	4606      	mov	r6, r0
  408f74:	460f      	mov	r7, r1
  408f76:	2c00      	cmp	r4, #0
  408f78:	f43f af73 	beq.w	408e62 <__kernel_rem_pio2+0x25a>
  408f7c:	9a08      	ldr	r2, [sp, #32]
  408f7e:	49ac      	ldr	r1, [pc, #688]	; (409230 <__kernel_rem_pio2+0x628>)
  408f80:	2000      	movs	r0, #0
  408f82:	f000 fef1 	bl	409d68 <scalbn>
  408f86:	4602      	mov	r2, r0
  408f88:	460b      	mov	r3, r1
  408f8a:	4630      	mov	r0, r6
  408f8c:	4639      	mov	r1, r7
  408f8e:	f000 ff75 	bl	409e7c <__aeabi_dsub>
  408f92:	4606      	mov	r6, r0
  408f94:	460f      	mov	r7, r1
  408f96:	e764      	b.n	408e62 <__kernel_rem_pio2+0x25a>
  408f98:	d110      	bne.n	408fbc <__kernel_rem_pio2+0x3b4>
  408f9a:	1e6b      	subs	r3, r5, #1
  408f9c:	aa10      	add	r2, sp, #64	; 0x40
  408f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  408fa2:	ea4f 58e3 	mov.w	r8, r3, asr #23
  408fa6:	e71b      	b.n	408de0 <__kernel_rem_pio2+0x1d8>
  408fa8:	1e6a      	subs	r2, r5, #1
  408faa:	ab10      	add	r3, sp, #64	; 0x40
  408fac:	a910      	add	r1, sp, #64	; 0x40
  408fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408fb2:	f3c3 0316 	ubfx	r3, r3, #0, #23
  408fb6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  408fba:	e74e      	b.n	408e5a <__kernel_rem_pio2+0x252>
  408fbc:	2200      	movs	r2, #0
  408fbe:	4b9d      	ldr	r3, [pc, #628]	; (409234 <__kernel_rem_pio2+0x62c>)
  408fc0:	f001 fb96 	bl	40a6f0 <__aeabi_dcmpge>
  408fc4:	b958      	cbnz	r0, 408fde <__kernel_rem_pio2+0x3d6>
  408fc6:	4680      	mov	r8, r0
  408fc8:	e74b      	b.n	408e62 <__kernel_rem_pio2+0x25a>
  408fca:	2600      	movs	r6, #0
  408fcc:	2700      	movs	r7, #0
  408fce:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  408fd2:	45da      	cmp	sl, fp
  408fd4:	f109 0908 	add.w	r9, r9, #8
  408fd8:	f47f ae63 	bne.w	408ca2 <__kernel_rem_pio2+0x9a>
  408fdc:	e684      	b.n	408ce8 <__kernel_rem_pio2+0xe0>
  408fde:	2d00      	cmp	r5, #0
  408fe0:	f109 0901 	add.w	r9, r9, #1
  408fe4:	bfc8      	it	gt
  408fe6:	f04f 0802 	movgt.w	r8, #2
  408fea:	f73f af01 	bgt.w	408df0 <__kernel_rem_pio2+0x1e8>
  408fee:	4632      	mov	r2, r6
  408ff0:	463b      	mov	r3, r7
  408ff2:	2000      	movs	r0, #0
  408ff4:	498e      	ldr	r1, [pc, #568]	; (409230 <__kernel_rem_pio2+0x628>)
  408ff6:	f000 ff41 	bl	409e7c <__aeabi_dsub>
  408ffa:	f04f 0802 	mov.w	r8, #2
  408ffe:	4606      	mov	r6, r0
  409000:	460f      	mov	r7, r1
  409002:	e72e      	b.n	408e62 <__kernel_rem_pio2+0x25a>
  409004:	ab10      	add	r3, sp, #64	; 0x40
  409006:	9a08      	ldr	r2, [sp, #32]
  409008:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
  40900c:	f8cd 9014 	str.w	r9, [sp, #20]
  409010:	3a18      	subs	r2, #24
  409012:	f8cd 8004 	str.w	r8, [sp, #4]
  409016:	9208      	str	r2, [sp, #32]
  409018:	b96b      	cbnz	r3, 409036 <__kernel_rem_pio2+0x42e>
  40901a:	f10b 4380 	add.w	r3, fp, #1073741824	; 0x40000000
  40901e:	3b01      	subs	r3, #1
  409020:	a910      	add	r1, sp, #64	; 0x40
  409022:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  409026:	f853 1904 	ldr.w	r1, [r3], #-4
  40902a:	f10b 3bff 	add.w	fp, fp, #4294967295
  40902e:	3a18      	subs	r2, #24
  409030:	2900      	cmp	r1, #0
  409032:	d0f8      	beq.n	409026 <__kernel_rem_pio2+0x41e>
  409034:	9208      	str	r2, [sp, #32]
  409036:	9a08      	ldr	r2, [sp, #32]
  409038:	497d      	ldr	r1, [pc, #500]	; (409230 <__kernel_rem_pio2+0x628>)
  40903a:	2000      	movs	r0, #0
  40903c:	f000 fe94 	bl	409d68 <scalbn>
  409040:	f1bb 0f00 	cmp.w	fp, #0
  409044:	4604      	mov	r4, r0
  409046:	460d      	mov	r5, r1
  409048:	f2c0 81b8 	blt.w	4093bc <__kernel_rem_pio2+0x7b4>
  40904c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
  409050:	f50d 78e8 	add.w	r8, sp, #464	; 0x1d0
  409054:	aa10      	add	r2, sp, #64	; 0x40
  409056:	eb02 068b 	add.w	r6, r2, fp, lsl #2
  40905a:	eb08 0903 	add.w	r9, r8, r3
  40905e:	9304      	str	r3, [sp, #16]
  409060:	3604      	adds	r6, #4
  409062:	f109 0708 	add.w	r7, r9, #8
  409066:	f856 0d04 	ldr.w	r0, [r6, #-4]!
  40906a:	f001 f855 	bl	40a118 <__aeabi_i2d>
  40906e:	4622      	mov	r2, r4
  409070:	462b      	mov	r3, r5
  409072:	f001 f8b7 	bl	40a1e4 <__aeabi_dmul>
  409076:	2200      	movs	r2, #0
  409078:	e967 0102 	strd	r0, r1, [r7, #-8]!
  40907c:	4b6e      	ldr	r3, [pc, #440]	; (409238 <__kernel_rem_pio2+0x630>)
  40907e:	4620      	mov	r0, r4
  409080:	4629      	mov	r1, r5
  409082:	f001 f8af 	bl	40a1e4 <__aeabi_dmul>
  409086:	45b8      	cmp	r8, r7
  409088:	4604      	mov	r4, r0
  40908a:	460d      	mov	r5, r1
  40908c:	d1eb      	bne.n	409066 <__kernel_rem_pio2+0x45e>
  40908e:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
  409092:	464b      	mov	r3, r9
  409094:	f8cd a008 	str.w	sl, [sp, #8]
  409098:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  40909c:	f8cd b018 	str.w	fp, [sp, #24]
  4090a0:	f04f 0900 	mov.w	r9, #0
  4090a4:	469b      	mov	fp, r3
  4090a6:	f1ba 0f00 	cmp.w	sl, #0
  4090aa:	f2c0 812a 	blt.w	409302 <__kernel_rem_pio2+0x6fa>
  4090ae:	f8df 818c 	ldr.w	r8, [pc, #396]	; 40923c <__kernel_rem_pio2+0x634>
  4090b2:	465d      	mov	r5, fp
  4090b4:	a35c      	add	r3, pc, #368	; (adr r3, 409228 <__kernel_rem_pio2+0x620>)
  4090b6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4090ba:	2600      	movs	r6, #0
  4090bc:	2700      	movs	r7, #0
  4090be:	2400      	movs	r4, #0
  4090c0:	e003      	b.n	4090ca <__kernel_rem_pio2+0x4c2>
  4090c2:	45a1      	cmp	r9, r4
  4090c4:	db10      	blt.n	4090e8 <__kernel_rem_pio2+0x4e0>
  4090c6:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
  4090ca:	e8f5 0102 	ldrd	r0, r1, [r5], #8
  4090ce:	f001 f889 	bl	40a1e4 <__aeabi_dmul>
  4090d2:	4602      	mov	r2, r0
  4090d4:	460b      	mov	r3, r1
  4090d6:	4630      	mov	r0, r6
  4090d8:	4639      	mov	r1, r7
  4090da:	f000 fed1 	bl	409e80 <__adddf3>
  4090de:	3401      	adds	r4, #1
  4090e0:	45a2      	cmp	sl, r4
  4090e2:	4606      	mov	r6, r0
  4090e4:	460f      	mov	r7, r1
  4090e6:	daec      	bge.n	4090c2 <__kernel_rem_pio2+0x4ba>
  4090e8:	9b02      	ldr	r3, [sp, #8]
  4090ea:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  4090ee:	f1ab 0b08 	sub.w	fp, fp, #8
  4090f2:	e9c3 6700 	strd	r6, r7, [r3]
  4090f6:	ab72      	add	r3, sp, #456	; 0x1c8
  4090f8:	455b      	cmp	r3, fp
  4090fa:	f109 0901 	add.w	r9, r9, #1
  4090fe:	d1d2      	bne.n	4090a6 <__kernel_rem_pio2+0x49e>
  409100:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  409102:	f8dd b018 	ldr.w	fp, [sp, #24]
  409106:	f8dd a008 	ldr.w	sl, [sp, #8]
  40910a:	2b03      	cmp	r3, #3
  40910c:	f200 8083 	bhi.w	409216 <__kernel_rem_pio2+0x60e>
  409110:	e8df f013 	tbh	[pc, r3, lsl #1]
  409114:	009600d5 	.word	0x009600d5
  409118:	00040096 	.word	0x00040096
  40911c:	f1bb 0f00 	cmp.w	fp, #0
  409120:	f340 8156 	ble.w	4093d0 <__kernel_rem_pio2+0x7c8>
  409124:	9b04      	ldr	r3, [sp, #16]
  409126:	f8cd b008 	str.w	fp, [sp, #8]
  40912a:	eb0a 0803 	add.w	r8, sl, r3
  40912e:	e9d8 6700 	ldrd	r6, r7, [r8]
  409132:	46d3      	mov	fp, sl
  409134:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
  409138:	4632      	mov	r2, r6
  40913a:	463b      	mov	r3, r7
  40913c:	4648      	mov	r0, r9
  40913e:	4651      	mov	r1, sl
  409140:	f000 fe9e 	bl	409e80 <__adddf3>
  409144:	4604      	mov	r4, r0
  409146:	460d      	mov	r5, r1
  409148:	4602      	mov	r2, r0
  40914a:	460b      	mov	r3, r1
  40914c:	4648      	mov	r0, r9
  40914e:	4651      	mov	r1, sl
  409150:	f000 fe94 	bl	409e7c <__aeabi_dsub>
  409154:	4632      	mov	r2, r6
  409156:	463b      	mov	r3, r7
  409158:	f000 fe92 	bl	409e80 <__adddf3>
  40915c:	e9c8 0100 	strd	r0, r1, [r8]
  409160:	e968 4502 	strd	r4, r5, [r8, #-8]!
  409164:	45c3      	cmp	fp, r8
  409166:	4626      	mov	r6, r4
  409168:	462f      	mov	r7, r5
  40916a:	d1e3      	bne.n	409134 <__kernel_rem_pio2+0x52c>
  40916c:	46da      	mov	sl, fp
  40916e:	f8dd b008 	ldr.w	fp, [sp, #8]
  409172:	f1bb 0f01 	cmp.w	fp, #1
  409176:	f340 812b 	ble.w	4093d0 <__kernel_rem_pio2+0x7c8>
  40917a:	9b04      	ldr	r3, [sp, #16]
  40917c:	4453      	add	r3, sl
  40917e:	e9d3 6700 	ldrd	r6, r7, [r3]
  409182:	4698      	mov	r8, r3
  409184:	4699      	mov	r9, r3
  409186:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
  40918a:	e959 3402 	ldrd	r3, r4, [r9, #-8]
  40918e:	4630      	mov	r0, r6
  409190:	e9cd 3402 	strd	r3, r4, [sp, #8]
  409194:	461a      	mov	r2, r3
  409196:	4639      	mov	r1, r7
  409198:	4623      	mov	r3, r4
  40919a:	f000 fe71 	bl	409e80 <__adddf3>
  40919e:	4604      	mov	r4, r0
  4091a0:	460d      	mov	r5, r1
  4091a2:	4602      	mov	r2, r0
  4091a4:	460b      	mov	r3, r1
  4091a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4091aa:	f000 fe67 	bl	409e7c <__aeabi_dsub>
  4091ae:	4632      	mov	r2, r6
  4091b0:	463b      	mov	r3, r7
  4091b2:	f000 fe65 	bl	409e80 <__adddf3>
  4091b6:	e9c9 0100 	strd	r0, r1, [r9]
  4091ba:	e969 4502 	strd	r4, r5, [r9, #-8]!
  4091be:	45cb      	cmp	fp, r9
  4091c0:	4626      	mov	r6, r4
  4091c2:	462f      	mov	r7, r5
  4091c4:	d1e1      	bne.n	40918a <__kernel_rem_pio2+0x582>
  4091c6:	2300      	movs	r3, #0
  4091c8:	f108 0808 	add.w	r8, r8, #8
  4091cc:	461d      	mov	r5, r3
  4091ce:	ac50      	add	r4, sp, #320	; 0x140
  4091d0:	4618      	mov	r0, r3
  4091d2:	4629      	mov	r1, r5
  4091d4:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
  4091d8:	f000 fe52 	bl	409e80 <__adddf3>
  4091dc:	4544      	cmp	r4, r8
  4091de:	4603      	mov	r3, r0
  4091e0:	460d      	mov	r5, r1
  4091e2:	d1f5      	bne.n	4091d0 <__kernel_rem_pio2+0x5c8>
  4091e4:	9a01      	ldr	r2, [sp, #4]
  4091e6:	2a00      	cmp	r2, #0
  4091e8:	f000 80da 	beq.w	4093a0 <__kernel_rem_pio2+0x798>
  4091ec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4091ee:	f8da 4004 	ldr.w	r4, [sl, #4]
  4091f2:	f8da 200c 	ldr.w	r2, [sl, #12]
  4091f6:	f8da 1000 	ldr.w	r1, [sl]
  4091fa:	f8da 0008 	ldr.w	r0, [sl, #8]
  4091fe:	613b      	str	r3, [r7, #16]
  409200:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
  409204:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
  409208:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
  40920c:	617d      	str	r5, [r7, #20]
  40920e:	607c      	str	r4, [r7, #4]
  409210:	60fb      	str	r3, [r7, #12]
  409212:	6039      	str	r1, [r7, #0]
  409214:	60b8      	str	r0, [r7, #8]
  409216:	9b05      	ldr	r3, [sp, #20]
  409218:	f003 0007 	and.w	r0, r3, #7
  40921c:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  409220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409224:	f3af 8000 	nop.w
  409228:	40000000 	.word	0x40000000
  40922c:	3ff921fb 	.word	0x3ff921fb
  409230:	3ff00000 	.word	0x3ff00000
  409234:	3fe00000 	.word	0x3fe00000
  409238:	3e700000 	.word	0x3e700000
  40923c:	0040b768 	.word	0x0040b768
  409240:	9c04      	ldr	r4, [sp, #16]
  409242:	2600      	movs	r6, #0
  409244:	3408      	adds	r4, #8
  409246:	4454      	add	r4, sl
  409248:	4633      	mov	r3, r6
  40924a:	4630      	mov	r0, r6
  40924c:	4619      	mov	r1, r3
  40924e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  409252:	f000 fe15 	bl	409e80 <__adddf3>
  409256:	4554      	cmp	r4, sl
  409258:	4606      	mov	r6, r0
  40925a:	460b      	mov	r3, r1
  40925c:	d1f5      	bne.n	40924a <__kernel_rem_pio2+0x642>
  40925e:	9a01      	ldr	r2, [sp, #4]
  409260:	4630      	mov	r0, r6
  409262:	4619      	mov	r1, r3
  409264:	2a00      	cmp	r2, #0
  409266:	d04f      	beq.n	409308 <__kernel_rem_pio2+0x700>
  409268:	980a      	ldr	r0, [sp, #40]	; 0x28
  40926a:	f103 4400 	add.w	r4, r3, #2147483648	; 0x80000000
  40926e:	4632      	mov	r2, r6
  409270:	6044      	str	r4, [r0, #4]
  409272:	6006      	str	r6, [r0, #0]
  409274:	e9da 0100 	ldrd	r0, r1, [sl]
  409278:	f000 fe00 	bl	409e7c <__aeabi_dsub>
  40927c:	f1bb 0f00 	cmp.w	fp, #0
  409280:	4602      	mov	r2, r0
  409282:	460b      	mov	r3, r1
  409284:	dd0d      	ble.n	4092a2 <__kernel_rem_pio2+0x69a>
  409286:	2401      	movs	r4, #1
  409288:	4610      	mov	r0, r2
  40928a:	4619      	mov	r1, r3
  40928c:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
  409290:	f000 fdf6 	bl	409e80 <__adddf3>
  409294:	3401      	adds	r4, #1
  409296:	45a3      	cmp	fp, r4
  409298:	4602      	mov	r2, r0
  40929a:	460b      	mov	r3, r1
  40929c:	daf4      	bge.n	409288 <__kernel_rem_pio2+0x680>
  40929e:	9901      	ldr	r1, [sp, #4]
  4092a0:	b109      	cbz	r1, 4092a6 <__kernel_rem_pio2+0x69e>
  4092a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  4092a6:	4619      	mov	r1, r3
  4092a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4092aa:	4610      	mov	r0, r2
  4092ac:	e9c3 0102 	strd	r0, r1, [r3, #8]
  4092b0:	9b05      	ldr	r3, [sp, #20]
  4092b2:	f003 0007 	and.w	r0, r3, #7
  4092b6:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  4092ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4092be:	9b04      	ldr	r3, [sp, #16]
  4092c0:	2200      	movs	r2, #0
  4092c2:	3308      	adds	r3, #8
  4092c4:	449a      	add	sl, r3
  4092c6:	4613      	mov	r3, r2
  4092c8:	4610      	mov	r0, r2
  4092ca:	4619      	mov	r1, r3
  4092cc:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
  4092d0:	f000 fdd6 	bl	409e80 <__adddf3>
  4092d4:	f10b 3bff 	add.w	fp, fp, #4294967295
  4092d8:	f1bb 3fff 	cmp.w	fp, #4294967295
  4092dc:	4602      	mov	r2, r0
  4092de:	460b      	mov	r3, r1
  4092e0:	d1f2      	bne.n	4092c8 <__kernel_rem_pio2+0x6c0>
  4092e2:	9901      	ldr	r1, [sp, #4]
  4092e4:	b109      	cbz	r1, 4092ea <__kernel_rem_pio2+0x6e2>
  4092e6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  4092ea:	4619      	mov	r1, r3
  4092ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4092ee:	4610      	mov	r0, r2
  4092f0:	e9c3 0100 	strd	r0, r1, [r3]
  4092f4:	9b05      	ldr	r3, [sp, #20]
  4092f6:	f003 0007 	and.w	r0, r3, #7
  4092fa:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  4092fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409302:	2600      	movs	r6, #0
  409304:	2700      	movs	r7, #0
  409306:	e6ef      	b.n	4090e8 <__kernel_rem_pio2+0x4e0>
  409308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40930a:	4632      	mov	r2, r6
  40930c:	e9c3 0100 	strd	r0, r1, [r3]
  409310:	460b      	mov	r3, r1
  409312:	e9da 0100 	ldrd	r0, r1, [sl]
  409316:	f000 fdb1 	bl	409e7c <__aeabi_dsub>
  40931a:	f1bb 0f00 	cmp.w	fp, #0
  40931e:	4602      	mov	r2, r0
  409320:	460b      	mov	r3, r1
  409322:	dcb0      	bgt.n	409286 <__kernel_rem_pio2+0x67e>
  409324:	4619      	mov	r1, r3
  409326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409328:	4610      	mov	r0, r2
  40932a:	e9c3 0102 	strd	r0, r1, [r3, #8]
  40932e:	e7bf      	b.n	4092b0 <__kernel_rem_pio2+0x6a8>
  409330:	9b08      	ldr	r3, [sp, #32]
  409332:	f8cd 9014 	str.w	r9, [sp, #20]
  409336:	425a      	negs	r2, r3
  409338:	4630      	mov	r0, r6
  40933a:	4639      	mov	r1, r7
  40933c:	f8cd 8004 	str.w	r8, [sp, #4]
  409340:	f000 fd12 	bl	409d68 <scalbn>
  409344:	2200      	movs	r2, #0
  409346:	4b2c      	ldr	r3, [pc, #176]	; (4093f8 <__kernel_rem_pio2+0x7f0>)
  409348:	4606      	mov	r6, r0
  40934a:	460f      	mov	r7, r1
  40934c:	f001 f9d0 	bl	40a6f0 <__aeabi_dcmpge>
  409350:	2800      	cmp	r0, #0
  409352:	d040      	beq.n	4093d6 <__kernel_rem_pio2+0x7ce>
  409354:	2200      	movs	r2, #0
  409356:	4b29      	ldr	r3, [pc, #164]	; (4093fc <__kernel_rem_pio2+0x7f4>)
  409358:	4630      	mov	r0, r6
  40935a:	4639      	mov	r1, r7
  40935c:	f000 ff42 	bl	40a1e4 <__aeabi_dmul>
  409360:	f001 f9f0 	bl	40a744 <__aeabi_d2iz>
  409364:	4604      	mov	r4, r0
  409366:	f000 fed7 	bl	40a118 <__aeabi_i2d>
  40936a:	2200      	movs	r2, #0
  40936c:	4b22      	ldr	r3, [pc, #136]	; (4093f8 <__kernel_rem_pio2+0x7f0>)
  40936e:	f000 ff39 	bl	40a1e4 <__aeabi_dmul>
  409372:	460b      	mov	r3, r1
  409374:	4602      	mov	r2, r0
  409376:	4639      	mov	r1, r7
  409378:	4630      	mov	r0, r6
  40937a:	f000 fd7f 	bl	409e7c <__aeabi_dsub>
  40937e:	f001 f9e1 	bl	40a744 <__aeabi_d2iz>
  409382:	9b08      	ldr	r3, [sp, #32]
  409384:	3318      	adds	r3, #24
  409386:	f105 0b01 	add.w	fp, r5, #1
  40938a:	9308      	str	r3, [sp, #32]
  40938c:	ab10      	add	r3, sp, #64	; 0x40
  40938e:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
  409392:	f843 402b 	str.w	r4, [r3, fp, lsl #2]
  409396:	e64e      	b.n	409036 <__kernel_rem_pio2+0x42e>
  409398:	2301      	movs	r3, #1
  40939a:	e590      	b.n	408ebe <__kernel_rem_pio2+0x2b6>
  40939c:	2400      	movs	r4, #0
  40939e:	e54b      	b.n	408e38 <__kernel_rem_pio2+0x230>
  4093a0:	4618      	mov	r0, r3
  4093a2:	4629      	mov	r1, r5
  4093a4:	e9da 2300 	ldrd	r2, r3, [sl]
  4093a8:	e9da 4502 	ldrd	r4, r5, [sl, #8]
  4093ac:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4093ae:	e9c7 0104 	strd	r0, r1, [r7, #16]
  4093b2:	e9c7 2300 	strd	r2, r3, [r7]
  4093b6:	e9c7 4502 	strd	r4, r5, [r7, #8]
  4093ba:	e72c      	b.n	409216 <__kernel_rem_pio2+0x60e>
  4093bc:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  4093be:	2b03      	cmp	r3, #3
  4093c0:	f63f af29 	bhi.w	409216 <__kernel_rem_pio2+0x60e>
  4093c4:	e8df f003 	tbb	[pc, r3]
  4093c8:	02101015 	.word	0x02101015
  4093cc:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
  4093d0:	2300      	movs	r3, #0
  4093d2:	461d      	mov	r5, r3
  4093d4:	e706      	b.n	4091e4 <__kernel_rem_pio2+0x5dc>
  4093d6:	4630      	mov	r0, r6
  4093d8:	4639      	mov	r1, r7
  4093da:	f001 f9b3 	bl	40a744 <__aeabi_d2iz>
  4093de:	ab10      	add	r3, sp, #64	; 0x40
  4093e0:	46ab      	mov	fp, r5
  4093e2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
  4093e6:	e626      	b.n	409036 <__kernel_rem_pio2+0x42e>
  4093e8:	2600      	movs	r6, #0
  4093ea:	4633      	mov	r3, r6
  4093ec:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
  4093f0:	e735      	b.n	40925e <__kernel_rem_pio2+0x656>
  4093f2:	2200      	movs	r2, #0
  4093f4:	4613      	mov	r3, r2
  4093f6:	e774      	b.n	4092e2 <__kernel_rem_pio2+0x6da>
  4093f8:	41700000 	.word	0x41700000
  4093fc:	3e700000 	.word	0x3e700000

00409400 <__kernel_sin>:
  409400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409404:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  409408:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  40940c:	b085      	sub	sp, #20
  40940e:	460c      	mov	r4, r1
  409410:	4690      	mov	r8, r2
  409412:	4699      	mov	r9, r3
  409414:	4605      	mov	r5, r0
  409416:	da04      	bge.n	409422 <__kernel_sin+0x22>
  409418:	f001 f994 	bl	40a744 <__aeabi_d2iz>
  40941c:	2800      	cmp	r0, #0
  40941e:	f000 8085 	beq.w	40952c <__kernel_sin+0x12c>
  409422:	462a      	mov	r2, r5
  409424:	4623      	mov	r3, r4
  409426:	4628      	mov	r0, r5
  409428:	4621      	mov	r1, r4
  40942a:	f000 fedb 	bl	40a1e4 <__aeabi_dmul>
  40942e:	4606      	mov	r6, r0
  409430:	460f      	mov	r7, r1
  409432:	4602      	mov	r2, r0
  409434:	460b      	mov	r3, r1
  409436:	4628      	mov	r0, r5
  409438:	4621      	mov	r1, r4
  40943a:	f000 fed3 	bl	40a1e4 <__aeabi_dmul>
  40943e:	a33e      	add	r3, pc, #248	; (adr r3, 409538 <__kernel_sin+0x138>)
  409440:	e9d3 2300 	ldrd	r2, r3, [r3]
  409444:	4682      	mov	sl, r0
  409446:	468b      	mov	fp, r1
  409448:	4630      	mov	r0, r6
  40944a:	4639      	mov	r1, r7
  40944c:	f000 feca 	bl	40a1e4 <__aeabi_dmul>
  409450:	a33b      	add	r3, pc, #236	; (adr r3, 409540 <__kernel_sin+0x140>)
  409452:	e9d3 2300 	ldrd	r2, r3, [r3]
  409456:	f000 fd11 	bl	409e7c <__aeabi_dsub>
  40945a:	4632      	mov	r2, r6
  40945c:	463b      	mov	r3, r7
  40945e:	f000 fec1 	bl	40a1e4 <__aeabi_dmul>
  409462:	a339      	add	r3, pc, #228	; (adr r3, 409548 <__kernel_sin+0x148>)
  409464:	e9d3 2300 	ldrd	r2, r3, [r3]
  409468:	f000 fd0a 	bl	409e80 <__adddf3>
  40946c:	4632      	mov	r2, r6
  40946e:	463b      	mov	r3, r7
  409470:	f000 feb8 	bl	40a1e4 <__aeabi_dmul>
  409474:	a336      	add	r3, pc, #216	; (adr r3, 409550 <__kernel_sin+0x150>)
  409476:	e9d3 2300 	ldrd	r2, r3, [r3]
  40947a:	f000 fcff 	bl	409e7c <__aeabi_dsub>
  40947e:	4632      	mov	r2, r6
  409480:	463b      	mov	r3, r7
  409482:	f000 feaf 	bl	40a1e4 <__aeabi_dmul>
  409486:	a334      	add	r3, pc, #208	; (adr r3, 409558 <__kernel_sin+0x158>)
  409488:	e9d3 2300 	ldrd	r2, r3, [r3]
  40948c:	f000 fcf8 	bl	409e80 <__adddf3>
  409490:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409492:	e9cd 0100 	strd	r0, r1, [sp]
  409496:	b39b      	cbz	r3, 409500 <__kernel_sin+0x100>
  409498:	2200      	movs	r2, #0
  40949a:	4b33      	ldr	r3, [pc, #204]	; (409568 <__kernel_sin+0x168>)
  40949c:	4640      	mov	r0, r8
  40949e:	4649      	mov	r1, r9
  4094a0:	f000 fea0 	bl	40a1e4 <__aeabi_dmul>
  4094a4:	e9dd 2300 	ldrd	r2, r3, [sp]
  4094a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4094ac:	4650      	mov	r0, sl
  4094ae:	4659      	mov	r1, fp
  4094b0:	f000 fe98 	bl	40a1e4 <__aeabi_dmul>
  4094b4:	4602      	mov	r2, r0
  4094b6:	460b      	mov	r3, r1
  4094b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4094bc:	f000 fcde 	bl	409e7c <__aeabi_dsub>
  4094c0:	4632      	mov	r2, r6
  4094c2:	463b      	mov	r3, r7
  4094c4:	f000 fe8e 	bl	40a1e4 <__aeabi_dmul>
  4094c8:	4642      	mov	r2, r8
  4094ca:	464b      	mov	r3, r9
  4094cc:	f000 fcd6 	bl	409e7c <__aeabi_dsub>
  4094d0:	a323      	add	r3, pc, #140	; (adr r3, 409560 <__kernel_sin+0x160>)
  4094d2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4094d6:	4606      	mov	r6, r0
  4094d8:	460f      	mov	r7, r1
  4094da:	4650      	mov	r0, sl
  4094dc:	4659      	mov	r1, fp
  4094de:	f000 fe81 	bl	40a1e4 <__aeabi_dmul>
  4094e2:	4602      	mov	r2, r0
  4094e4:	460b      	mov	r3, r1
  4094e6:	4630      	mov	r0, r6
  4094e8:	4639      	mov	r1, r7
  4094ea:	f000 fcc9 	bl	409e80 <__adddf3>
  4094ee:	4602      	mov	r2, r0
  4094f0:	460b      	mov	r3, r1
  4094f2:	4628      	mov	r0, r5
  4094f4:	4621      	mov	r1, r4
  4094f6:	f000 fcc1 	bl	409e7c <__aeabi_dsub>
  4094fa:	b005      	add	sp, #20
  4094fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409500:	4602      	mov	r2, r0
  409502:	460b      	mov	r3, r1
  409504:	4630      	mov	r0, r6
  409506:	4639      	mov	r1, r7
  409508:	f000 fe6c 	bl	40a1e4 <__aeabi_dmul>
  40950c:	a314      	add	r3, pc, #80	; (adr r3, 409560 <__kernel_sin+0x160>)
  40950e:	e9d3 2300 	ldrd	r2, r3, [r3]
  409512:	f000 fcb3 	bl	409e7c <__aeabi_dsub>
  409516:	4652      	mov	r2, sl
  409518:	465b      	mov	r3, fp
  40951a:	f000 fe63 	bl	40a1e4 <__aeabi_dmul>
  40951e:	462a      	mov	r2, r5
  409520:	4623      	mov	r3, r4
  409522:	f000 fcad 	bl	409e80 <__adddf3>
  409526:	b005      	add	sp, #20
  409528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40952c:	4628      	mov	r0, r5
  40952e:	4621      	mov	r1, r4
  409530:	b005      	add	sp, #20
  409532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409536:	bf00      	nop
  409538:	5acfd57c 	.word	0x5acfd57c
  40953c:	3de5d93a 	.word	0x3de5d93a
  409540:	8a2b9ceb 	.word	0x8a2b9ceb
  409544:	3e5ae5e6 	.word	0x3e5ae5e6
  409548:	57b1fe7d 	.word	0x57b1fe7d
  40954c:	3ec71de3 	.word	0x3ec71de3
  409550:	19c161d5 	.word	0x19c161d5
  409554:	3f2a01a0 	.word	0x3f2a01a0
  409558:	1110f8a6 	.word	0x1110f8a6
  40955c:	3f811111 	.word	0x3f811111
  409560:	55555549 	.word	0x55555549
  409564:	3fc55555 	.word	0x3fc55555
  409568:	3fe00000 	.word	0x3fe00000
  40956c:	00000000 	.word	0x00000000

00409570 <__kernel_tan>:
  409570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409574:	4cd8      	ldr	r4, [pc, #864]	; (4098d8 <__kernel_tan+0x368>)
  409576:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  40957a:	42a6      	cmp	r6, r4
  40957c:	b087      	sub	sp, #28
  40957e:	468a      	mov	sl, r1
  409580:	4689      	mov	r9, r1
  409582:	4617      	mov	r7, r2
  409584:	4698      	mov	r8, r3
  409586:	4683      	mov	fp, r0
  409588:	dc16      	bgt.n	4095b8 <__kernel_tan+0x48>
  40958a:	f001 f8db 	bl	40a744 <__aeabi_d2iz>
  40958e:	bb88      	cbnz	r0, 4095f4 <__kernel_tan+0x84>
  409590:	465b      	mov	r3, fp
  409592:	431e      	orrs	r6, r3
  409594:	9b10      	ldr	r3, [sp, #64]	; 0x40
  409596:	3301      	adds	r3, #1
  409598:	4333      	orrs	r3, r6
  40959a:	f000 8156 	beq.w	40984a <__kernel_tan+0x2da>
  40959e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4095a0:	2b01      	cmp	r3, #1
  4095a2:	f000 81a8 	beq.w	4098f6 <__kernel_tan+0x386>
  4095a6:	465a      	mov	r2, fp
  4095a8:	4653      	mov	r3, sl
  4095aa:	2000      	movs	r0, #0
  4095ac:	49cb      	ldr	r1, [pc, #812]	; (4098dc <__kernel_tan+0x36c>)
  4095ae:	f000 ff43 	bl	40a438 <__aeabi_ddiv>
  4095b2:	b007      	add	sp, #28
  4095b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4095b8:	4bc9      	ldr	r3, [pc, #804]	; (4098e0 <__kernel_tan+0x370>)
  4095ba:	429e      	cmp	r6, r3
  4095bc:	dd1a      	ble.n	4095f4 <__kernel_tan+0x84>
  4095be:	2900      	cmp	r1, #0
  4095c0:	f2c0 8192 	blt.w	4098e8 <__kernel_tan+0x378>
  4095c4:	465a      	mov	r2, fp
  4095c6:	4653      	mov	r3, sl
  4095c8:	a1a5      	add	r1, pc, #660	; (adr r1, 409860 <__kernel_tan+0x2f0>)
  4095ca:	e9d1 0100 	ldrd	r0, r1, [r1]
  4095ce:	f000 fc55 	bl	409e7c <__aeabi_dsub>
  4095d2:	463a      	mov	r2, r7
  4095d4:	4643      	mov	r3, r8
  4095d6:	4604      	mov	r4, r0
  4095d8:	460d      	mov	r5, r1
  4095da:	a1a3      	add	r1, pc, #652	; (adr r1, 409868 <__kernel_tan+0x2f8>)
  4095dc:	e9d1 0100 	ldrd	r0, r1, [r1]
  4095e0:	f000 fc4c 	bl	409e7c <__aeabi_dsub>
  4095e4:	4622      	mov	r2, r4
  4095e6:	462b      	mov	r3, r5
  4095e8:	f000 fc4a 	bl	409e80 <__adddf3>
  4095ec:	2700      	movs	r7, #0
  4095ee:	4683      	mov	fp, r0
  4095f0:	468a      	mov	sl, r1
  4095f2:	46b8      	mov	r8, r7
  4095f4:	465a      	mov	r2, fp
  4095f6:	4653      	mov	r3, sl
  4095f8:	4658      	mov	r0, fp
  4095fa:	4651      	mov	r1, sl
  4095fc:	f000 fdf2 	bl	40a1e4 <__aeabi_dmul>
  409600:	4603      	mov	r3, r0
  409602:	460c      	mov	r4, r1
  409604:	e9cd 3400 	strd	r3, r4, [sp]
  409608:	4602      	mov	r2, r0
  40960a:	460b      	mov	r3, r1
  40960c:	f000 fdea 	bl	40a1e4 <__aeabi_dmul>
  409610:	e9dd 2300 	ldrd	r2, r3, [sp]
  409614:	4604      	mov	r4, r0
  409616:	460d      	mov	r5, r1
  409618:	4658      	mov	r0, fp
  40961a:	4651      	mov	r1, sl
  40961c:	f000 fde2 	bl	40a1e4 <__aeabi_dmul>
  409620:	a393      	add	r3, pc, #588	; (adr r3, 409870 <__kernel_tan+0x300>)
  409622:	e9d3 2300 	ldrd	r2, r3, [r3]
  409626:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40962a:	4620      	mov	r0, r4
  40962c:	4629      	mov	r1, r5
  40962e:	f000 fdd9 	bl	40a1e4 <__aeabi_dmul>
  409632:	a391      	add	r3, pc, #580	; (adr r3, 409878 <__kernel_tan+0x308>)
  409634:	e9d3 2300 	ldrd	r2, r3, [r3]
  409638:	f000 fc22 	bl	409e80 <__adddf3>
  40963c:	4622      	mov	r2, r4
  40963e:	462b      	mov	r3, r5
  409640:	f000 fdd0 	bl	40a1e4 <__aeabi_dmul>
  409644:	a38e      	add	r3, pc, #568	; (adr r3, 409880 <__kernel_tan+0x310>)
  409646:	e9d3 2300 	ldrd	r2, r3, [r3]
  40964a:	f000 fc19 	bl	409e80 <__adddf3>
  40964e:	4622      	mov	r2, r4
  409650:	462b      	mov	r3, r5
  409652:	f000 fdc7 	bl	40a1e4 <__aeabi_dmul>
  409656:	a38c      	add	r3, pc, #560	; (adr r3, 409888 <__kernel_tan+0x318>)
  409658:	e9d3 2300 	ldrd	r2, r3, [r3]
  40965c:	f000 fc10 	bl	409e80 <__adddf3>
  409660:	4622      	mov	r2, r4
  409662:	462b      	mov	r3, r5
  409664:	f000 fdbe 	bl	40a1e4 <__aeabi_dmul>
  409668:	a389      	add	r3, pc, #548	; (adr r3, 409890 <__kernel_tan+0x320>)
  40966a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40966e:	f000 fc07 	bl	409e80 <__adddf3>
  409672:	4622      	mov	r2, r4
  409674:	462b      	mov	r3, r5
  409676:	f000 fdb5 	bl	40a1e4 <__aeabi_dmul>
  40967a:	a387      	add	r3, pc, #540	; (adr r3, 409898 <__kernel_tan+0x328>)
  40967c:	e9d3 2300 	ldrd	r2, r3, [r3]
  409680:	f000 fbfe 	bl	409e80 <__adddf3>
  409684:	e9dd 2300 	ldrd	r2, r3, [sp]
  409688:	f000 fdac 	bl	40a1e4 <__aeabi_dmul>
  40968c:	a384      	add	r3, pc, #528	; (adr r3, 4098a0 <__kernel_tan+0x330>)
  40968e:	e9d3 2300 	ldrd	r2, r3, [r3]
  409692:	e9cd 0104 	strd	r0, r1, [sp, #16]
  409696:	4620      	mov	r0, r4
  409698:	4629      	mov	r1, r5
  40969a:	f000 fda3 	bl	40a1e4 <__aeabi_dmul>
  40969e:	a382      	add	r3, pc, #520	; (adr r3, 4098a8 <__kernel_tan+0x338>)
  4096a0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4096a4:	f000 fbec 	bl	409e80 <__adddf3>
  4096a8:	4622      	mov	r2, r4
  4096aa:	462b      	mov	r3, r5
  4096ac:	f000 fd9a 	bl	40a1e4 <__aeabi_dmul>
  4096b0:	a37f      	add	r3, pc, #508	; (adr r3, 4098b0 <__kernel_tan+0x340>)
  4096b2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4096b6:	f000 fbe3 	bl	409e80 <__adddf3>
  4096ba:	4622      	mov	r2, r4
  4096bc:	462b      	mov	r3, r5
  4096be:	f000 fd91 	bl	40a1e4 <__aeabi_dmul>
  4096c2:	a37d      	add	r3, pc, #500	; (adr r3, 4098b8 <__kernel_tan+0x348>)
  4096c4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4096c8:	f000 fbda 	bl	409e80 <__adddf3>
  4096cc:	4622      	mov	r2, r4
  4096ce:	462b      	mov	r3, r5
  4096d0:	f000 fd88 	bl	40a1e4 <__aeabi_dmul>
  4096d4:	a37a      	add	r3, pc, #488	; (adr r3, 4098c0 <__kernel_tan+0x350>)
  4096d6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4096da:	f000 fbd1 	bl	409e80 <__adddf3>
  4096de:	4622      	mov	r2, r4
  4096e0:	462b      	mov	r3, r5
  4096e2:	f000 fd7f 	bl	40a1e4 <__aeabi_dmul>
  4096e6:	a378      	add	r3, pc, #480	; (adr r3, 4098c8 <__kernel_tan+0x358>)
  4096e8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4096ec:	f000 fbc8 	bl	409e80 <__adddf3>
  4096f0:	4602      	mov	r2, r0
  4096f2:	460b      	mov	r3, r1
  4096f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4096f8:	f000 fbc2 	bl	409e80 <__adddf3>
  4096fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409700:	f000 fd70 	bl	40a1e4 <__aeabi_dmul>
  409704:	463a      	mov	r2, r7
  409706:	4643      	mov	r3, r8
  409708:	f000 fbba 	bl	409e80 <__adddf3>
  40970c:	e9dd 2300 	ldrd	r2, r3, [sp]
  409710:	f000 fd68 	bl	40a1e4 <__aeabi_dmul>
  409714:	4602      	mov	r2, r0
  409716:	460b      	mov	r3, r1
  409718:	4638      	mov	r0, r7
  40971a:	4641      	mov	r1, r8
  40971c:	f000 fbb0 	bl	409e80 <__adddf3>
  409720:	a36b      	add	r3, pc, #428	; (adr r3, 4098d0 <__kernel_tan+0x360>)
  409722:	e9d3 2300 	ldrd	r2, r3, [r3]
  409726:	4604      	mov	r4, r0
  409728:	460d      	mov	r5, r1
  40972a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40972e:	f000 fd59 	bl	40a1e4 <__aeabi_dmul>
  409732:	4622      	mov	r2, r4
  409734:	462b      	mov	r3, r5
  409736:	f000 fba3 	bl	409e80 <__adddf3>
  40973a:	460b      	mov	r3, r1
  40973c:	4602      	mov	r2, r0
  40973e:	4651      	mov	r1, sl
  409740:	4658      	mov	r0, fp
  409742:	e9cd 2300 	strd	r2, r3, [sp]
  409746:	f000 fb9b 	bl	409e80 <__adddf3>
  40974a:	4b65      	ldr	r3, [pc, #404]	; (4098e0 <__kernel_tan+0x370>)
  40974c:	429e      	cmp	r6, r3
  40974e:	4604      	mov	r4, r0
  409750:	460d      	mov	r5, r1
  409752:	dc3a      	bgt.n	4097ca <__kernel_tan+0x25a>
  409754:	9b10      	ldr	r3, [sp, #64]	; 0x40
  409756:	2b01      	cmp	r3, #1
  409758:	d034      	beq.n	4097c4 <__kernel_tan+0x254>
  40975a:	4602      	mov	r2, r0
  40975c:	460b      	mov	r3, r1
  40975e:	2000      	movs	r0, #0
  409760:	495e      	ldr	r1, [pc, #376]	; (4098dc <__kernel_tan+0x36c>)
  409762:	f000 fe69 	bl	40a438 <__aeabi_ddiv>
  409766:	2400      	movs	r4, #0
  409768:	460f      	mov	r7, r1
  40976a:	4606      	mov	r6, r0
  40976c:	465a      	mov	r2, fp
  40976e:	4653      	mov	r3, sl
  409770:	4620      	mov	r0, r4
  409772:	4629      	mov	r1, r5
  409774:	f000 fb82 	bl	409e7c <__aeabi_dsub>
  409778:	46a0      	mov	r8, r4
  40977a:	4602      	mov	r2, r0
  40977c:	460b      	mov	r3, r1
  40977e:	e9dd 0100 	ldrd	r0, r1, [sp]
  409782:	f000 fb7b 	bl	409e7c <__aeabi_dsub>
  409786:	4642      	mov	r2, r8
  409788:	463b      	mov	r3, r7
  40978a:	f000 fd2b 	bl	40a1e4 <__aeabi_dmul>
  40978e:	46a9      	mov	r9, r5
  409790:	4604      	mov	r4, r0
  409792:	460d      	mov	r5, r1
  409794:	4642      	mov	r2, r8
  409796:	463b      	mov	r3, r7
  409798:	4640      	mov	r0, r8
  40979a:	4649      	mov	r1, r9
  40979c:	f000 fd22 	bl	40a1e4 <__aeabi_dmul>
  4097a0:	2200      	movs	r2, #0
  4097a2:	4b50      	ldr	r3, [pc, #320]	; (4098e4 <__kernel_tan+0x374>)
  4097a4:	f000 fb6c 	bl	409e80 <__adddf3>
  4097a8:	4602      	mov	r2, r0
  4097aa:	460b      	mov	r3, r1
  4097ac:	4620      	mov	r0, r4
  4097ae:	4629      	mov	r1, r5
  4097b0:	f000 fb66 	bl	409e80 <__adddf3>
  4097b4:	4632      	mov	r2, r6
  4097b6:	463b      	mov	r3, r7
  4097b8:	f000 fd14 	bl	40a1e4 <__aeabi_dmul>
  4097bc:	4642      	mov	r2, r8
  4097be:	463b      	mov	r3, r7
  4097c0:	f000 fb5e 	bl	409e80 <__adddf3>
  4097c4:	b007      	add	sp, #28
  4097c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4097ca:	9810      	ldr	r0, [sp, #64]	; 0x40
  4097cc:	f000 fca4 	bl	40a118 <__aeabi_i2d>
  4097d0:	4622      	mov	r2, r4
  4097d2:	4606      	mov	r6, r0
  4097d4:	460f      	mov	r7, r1
  4097d6:	462b      	mov	r3, r5
  4097d8:	4620      	mov	r0, r4
  4097da:	4629      	mov	r1, r5
  4097dc:	f000 fd02 	bl	40a1e4 <__aeabi_dmul>
  4097e0:	4632      	mov	r2, r6
  4097e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4097e6:	463b      	mov	r3, r7
  4097e8:	4620      	mov	r0, r4
  4097ea:	4629      	mov	r1, r5
  4097ec:	f000 fb48 	bl	409e80 <__adddf3>
  4097f0:	4602      	mov	r2, r0
  4097f2:	460b      	mov	r3, r1
  4097f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4097f8:	f000 fe1e 	bl	40a438 <__aeabi_ddiv>
  4097fc:	e9dd 2300 	ldrd	r2, r3, [sp]
  409800:	f000 fb3c 	bl	409e7c <__aeabi_dsub>
  409804:	4602      	mov	r2, r0
  409806:	460b      	mov	r3, r1
  409808:	4658      	mov	r0, fp
  40980a:	4651      	mov	r1, sl
  40980c:	f000 fb36 	bl	409e7c <__aeabi_dsub>
  409810:	4602      	mov	r2, r0
  409812:	460b      	mov	r3, r1
  409814:	f000 fb34 	bl	409e80 <__adddf3>
  409818:	4602      	mov	r2, r0
  40981a:	460b      	mov	r3, r1
  40981c:	4630      	mov	r0, r6
  40981e:	4639      	mov	r1, r7
  409820:	f000 fb2c 	bl	409e7c <__aeabi_dsub>
  409824:	4604      	mov	r4, r0
  409826:	ea4f 70a9 	mov.w	r0, r9, asr #30
  40982a:	f000 0002 	and.w	r0, r0, #2
  40982e:	f1c0 0001 	rsb	r0, r0, #1
  409832:	460d      	mov	r5, r1
  409834:	f000 fc70 	bl	40a118 <__aeabi_i2d>
  409838:	4602      	mov	r2, r0
  40983a:	460b      	mov	r3, r1
  40983c:	4620      	mov	r0, r4
  40983e:	4629      	mov	r1, r5
  409840:	f000 fcd0 	bl	40a1e4 <__aeabi_dmul>
  409844:	b007      	add	sp, #28
  409846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40984a:	4658      	mov	r0, fp
  40984c:	4651      	mov	r1, sl
  40984e:	f000 f9f5 	bl	409c3c <fabs>
  409852:	4602      	mov	r2, r0
  409854:	460b      	mov	r3, r1
  409856:	2000      	movs	r0, #0
  409858:	4922      	ldr	r1, [pc, #136]	; (4098e4 <__kernel_tan+0x374>)
  40985a:	f000 fded 	bl	40a438 <__aeabi_ddiv>
  40985e:	e7b1      	b.n	4097c4 <__kernel_tan+0x254>
  409860:	54442d18 	.word	0x54442d18
  409864:	3fe921fb 	.word	0x3fe921fb
  409868:	33145c07 	.word	0x33145c07
  40986c:	3c81a626 	.word	0x3c81a626
  409870:	74bf7ad4 	.word	0x74bf7ad4
  409874:	3efb2a70 	.word	0x3efb2a70
  409878:	32f0a7e9 	.word	0x32f0a7e9
  40987c:	3f12b80f 	.word	0x3f12b80f
  409880:	1a8d1068 	.word	0x1a8d1068
  409884:	3f3026f7 	.word	0x3f3026f7
  409888:	fee08315 	.word	0xfee08315
  40988c:	3f57dbc8 	.word	0x3f57dbc8
  409890:	e96e8493 	.word	0xe96e8493
  409894:	3f8226e3 	.word	0x3f8226e3
  409898:	1bb341fe 	.word	0x1bb341fe
  40989c:	3faba1ba 	.word	0x3faba1ba
  4098a0:	db605373 	.word	0xdb605373
  4098a4:	bef375cb 	.word	0xbef375cb
  4098a8:	a03792a6 	.word	0xa03792a6
  4098ac:	3f147e88 	.word	0x3f147e88
  4098b0:	f2f26501 	.word	0xf2f26501
  4098b4:	3f4344d8 	.word	0x3f4344d8
  4098b8:	c9560328 	.word	0xc9560328
  4098bc:	3f6d6d22 	.word	0x3f6d6d22
  4098c0:	8406d637 	.word	0x8406d637
  4098c4:	3f9664f4 	.word	0x3f9664f4
  4098c8:	1110fe7a 	.word	0x1110fe7a
  4098cc:	3fc11111 	.word	0x3fc11111
  4098d0:	55555563 	.word	0x55555563
  4098d4:	3fd55555 	.word	0x3fd55555
  4098d8:	3e2fffff 	.word	0x3e2fffff
  4098dc:	bff00000 	.word	0xbff00000
  4098e0:	3fe59427 	.word	0x3fe59427
  4098e4:	3ff00000 	.word	0x3ff00000
  4098e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  4098ec:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
  4098f0:	4683      	mov	fp, r0
  4098f2:	469a      	mov	sl, r3
  4098f4:	e666      	b.n	4095c4 <__kernel_tan+0x54>
  4098f6:	4658      	mov	r0, fp
  4098f8:	4651      	mov	r1, sl
  4098fa:	e763      	b.n	4097c4 <__kernel_tan+0x254>
  4098fc:	0000      	movs	r0, r0
	...

00409900 <atan>:
  409900:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409904:	4bc0      	ldr	r3, [pc, #768]	; (409c08 <atan+0x308>)
  409906:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  40990a:	429e      	cmp	r6, r3
  40990c:	460d      	mov	r5, r1
  40990e:	468a      	mov	sl, r1
  409910:	4604      	mov	r4, r0
  409912:	dd0f      	ble.n	409934 <atan+0x34>
  409914:	4bbd      	ldr	r3, [pc, #756]	; (409c0c <atan+0x30c>)
  409916:	429e      	cmp	r6, r3
  409918:	f300 80b2 	bgt.w	409a80 <atan+0x180>
  40991c:	f000 80ad 	beq.w	409a7a <atan+0x17a>
  409920:	4bbb      	ldr	r3, [pc, #748]	; (409c10 <atan+0x310>)
  409922:	49bc      	ldr	r1, [pc, #752]	; (409c14 <atan+0x314>)
  409924:	4cbc      	ldr	r4, [pc, #752]	; (409c18 <atan+0x318>)
  409926:	f1ba 0f00 	cmp.w	sl, #0
  40992a:	bfc8      	it	gt
  40992c:	4619      	movgt	r1, r3
  40992e:	4620      	mov	r0, r4
  409930:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409934:	4bb9      	ldr	r3, [pc, #740]	; (409c1c <atan+0x31c>)
  409936:	429e      	cmp	r6, r3
  409938:	f300 80bc 	bgt.w	409ab4 <atan+0x1b4>
  40993c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
  409940:	429e      	cmp	r6, r3
  409942:	f340 80a7 	ble.w	409a94 <atan+0x194>
  409946:	f04f 3bff 	mov.w	fp, #4294967295
  40994a:	4622      	mov	r2, r4
  40994c:	462b      	mov	r3, r5
  40994e:	4620      	mov	r0, r4
  409950:	4629      	mov	r1, r5
  409952:	f000 fc47 	bl	40a1e4 <__aeabi_dmul>
  409956:	4602      	mov	r2, r0
  409958:	460b      	mov	r3, r1
  40995a:	4680      	mov	r8, r0
  40995c:	4689      	mov	r9, r1
  40995e:	f000 fc41 	bl	40a1e4 <__aeabi_dmul>
  409962:	a391      	add	r3, pc, #580	; (adr r3, 409ba8 <atan+0x2a8>)
  409964:	e9d3 2300 	ldrd	r2, r3, [r3]
  409968:	4606      	mov	r6, r0
  40996a:	460f      	mov	r7, r1
  40996c:	f000 fc3a 	bl	40a1e4 <__aeabi_dmul>
  409970:	a38f      	add	r3, pc, #572	; (adr r3, 409bb0 <atan+0x2b0>)
  409972:	e9d3 2300 	ldrd	r2, r3, [r3]
  409976:	f000 fa83 	bl	409e80 <__adddf3>
  40997a:	4632      	mov	r2, r6
  40997c:	463b      	mov	r3, r7
  40997e:	f000 fc31 	bl	40a1e4 <__aeabi_dmul>
  409982:	a38d      	add	r3, pc, #564	; (adr r3, 409bb8 <atan+0x2b8>)
  409984:	e9d3 2300 	ldrd	r2, r3, [r3]
  409988:	f000 fa7a 	bl	409e80 <__adddf3>
  40998c:	4632      	mov	r2, r6
  40998e:	463b      	mov	r3, r7
  409990:	f000 fc28 	bl	40a1e4 <__aeabi_dmul>
  409994:	a38a      	add	r3, pc, #552	; (adr r3, 409bc0 <atan+0x2c0>)
  409996:	e9d3 2300 	ldrd	r2, r3, [r3]
  40999a:	f000 fa71 	bl	409e80 <__adddf3>
  40999e:	4632      	mov	r2, r6
  4099a0:	463b      	mov	r3, r7
  4099a2:	f000 fc1f 	bl	40a1e4 <__aeabi_dmul>
  4099a6:	a388      	add	r3, pc, #544	; (adr r3, 409bc8 <atan+0x2c8>)
  4099a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4099ac:	f000 fa68 	bl	409e80 <__adddf3>
  4099b0:	4632      	mov	r2, r6
  4099b2:	463b      	mov	r3, r7
  4099b4:	f000 fc16 	bl	40a1e4 <__aeabi_dmul>
  4099b8:	a385      	add	r3, pc, #532	; (adr r3, 409bd0 <atan+0x2d0>)
  4099ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4099be:	f000 fa5f 	bl	409e80 <__adddf3>
  4099c2:	4642      	mov	r2, r8
  4099c4:	464b      	mov	r3, r9
  4099c6:	f000 fc0d 	bl	40a1e4 <__aeabi_dmul>
  4099ca:	a383      	add	r3, pc, #524	; (adr r3, 409bd8 <atan+0x2d8>)
  4099cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4099d0:	4680      	mov	r8, r0
  4099d2:	4689      	mov	r9, r1
  4099d4:	4630      	mov	r0, r6
  4099d6:	4639      	mov	r1, r7
  4099d8:	f000 fc04 	bl	40a1e4 <__aeabi_dmul>
  4099dc:	a380      	add	r3, pc, #512	; (adr r3, 409be0 <atan+0x2e0>)
  4099de:	e9d3 2300 	ldrd	r2, r3, [r3]
  4099e2:	f000 fa4b 	bl	409e7c <__aeabi_dsub>
  4099e6:	4632      	mov	r2, r6
  4099e8:	463b      	mov	r3, r7
  4099ea:	f000 fbfb 	bl	40a1e4 <__aeabi_dmul>
  4099ee:	a37e      	add	r3, pc, #504	; (adr r3, 409be8 <atan+0x2e8>)
  4099f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4099f4:	f000 fa42 	bl	409e7c <__aeabi_dsub>
  4099f8:	4632      	mov	r2, r6
  4099fa:	463b      	mov	r3, r7
  4099fc:	f000 fbf2 	bl	40a1e4 <__aeabi_dmul>
  409a00:	a37b      	add	r3, pc, #492	; (adr r3, 409bf0 <atan+0x2f0>)
  409a02:	e9d3 2300 	ldrd	r2, r3, [r3]
  409a06:	f000 fa39 	bl	409e7c <__aeabi_dsub>
  409a0a:	4632      	mov	r2, r6
  409a0c:	463b      	mov	r3, r7
  409a0e:	f000 fbe9 	bl	40a1e4 <__aeabi_dmul>
  409a12:	a379      	add	r3, pc, #484	; (adr r3, 409bf8 <atan+0x2f8>)
  409a14:	e9d3 2300 	ldrd	r2, r3, [r3]
  409a18:	f000 fa30 	bl	409e7c <__aeabi_dsub>
  409a1c:	4632      	mov	r2, r6
  409a1e:	463b      	mov	r3, r7
  409a20:	f000 fbe0 	bl	40a1e4 <__aeabi_dmul>
  409a24:	f1bb 3fff 	cmp.w	fp, #4294967295
  409a28:	4602      	mov	r2, r0
  409a2a:	460b      	mov	r3, r1
  409a2c:	d069      	beq.n	409b02 <atan+0x202>
  409a2e:	4640      	mov	r0, r8
  409a30:	4649      	mov	r1, r9
  409a32:	f000 fa25 	bl	409e80 <__adddf3>
  409a36:	4622      	mov	r2, r4
  409a38:	462b      	mov	r3, r5
  409a3a:	f000 fbd3 	bl	40a1e4 <__aeabi_dmul>
  409a3e:	4e78      	ldr	r6, [pc, #480]	; (409c20 <atan+0x320>)
  409a40:	4b78      	ldr	r3, [pc, #480]	; (409c24 <atan+0x324>)
  409a42:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
  409a46:	445e      	add	r6, fp
  409a48:	449b      	add	fp, r3
  409a4a:	e9db 2300 	ldrd	r2, r3, [fp]
  409a4e:	f000 fa15 	bl	409e7c <__aeabi_dsub>
  409a52:	4622      	mov	r2, r4
  409a54:	462b      	mov	r3, r5
  409a56:	f000 fa11 	bl	409e7c <__aeabi_dsub>
  409a5a:	4602      	mov	r2, r0
  409a5c:	460b      	mov	r3, r1
  409a5e:	e9d6 0100 	ldrd	r0, r1, [r6]
  409a62:	f000 fa0b 	bl	409e7c <__aeabi_dsub>
  409a66:	f1ba 0f00 	cmp.w	sl, #0
  409a6a:	4604      	mov	r4, r0
  409a6c:	f6bf af5f 	bge.w	40992e <atan+0x2e>
  409a70:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  409a74:	4620      	mov	r0, r4
  409a76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409a7a:	2800      	cmp	r0, #0
  409a7c:	f43f af50 	beq.w	409920 <atan+0x20>
  409a80:	4622      	mov	r2, r4
  409a82:	4620      	mov	r0, r4
  409a84:	462b      	mov	r3, r5
  409a86:	4629      	mov	r1, r5
  409a88:	f000 f9fa 	bl	409e80 <__adddf3>
  409a8c:	4604      	mov	r4, r0
  409a8e:	4620      	mov	r0, r4
  409a90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409a94:	a35a      	add	r3, pc, #360	; (adr r3, 409c00 <atan+0x300>)
  409a96:	e9d3 2300 	ldrd	r2, r3, [r3]
  409a9a:	f000 f9f1 	bl	409e80 <__adddf3>
  409a9e:	2200      	movs	r2, #0
  409aa0:	4b61      	ldr	r3, [pc, #388]	; (409c28 <atan+0x328>)
  409aa2:	f000 fe2f 	bl	40a704 <__aeabi_dcmpgt>
  409aa6:	2800      	cmp	r0, #0
  409aa8:	f43f af4d 	beq.w	409946 <atan+0x46>
  409aac:	4629      	mov	r1, r5
  409aae:	4620      	mov	r0, r4
  409ab0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409ab4:	f000 f8c2 	bl	409c3c <fabs>
  409ab8:	4b5c      	ldr	r3, [pc, #368]	; (409c2c <atan+0x32c>)
  409aba:	429e      	cmp	r6, r3
  409abc:	4604      	mov	r4, r0
  409abe:	460d      	mov	r5, r1
  409ac0:	dc2f      	bgt.n	409b22 <atan+0x222>
  409ac2:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
  409ac6:	429e      	cmp	r6, r3
  409ac8:	dc54      	bgt.n	409b74 <atan+0x274>
  409aca:	4602      	mov	r2, r0
  409acc:	460b      	mov	r3, r1
  409ace:	f000 f9d7 	bl	409e80 <__adddf3>
  409ad2:	2200      	movs	r2, #0
  409ad4:	4b54      	ldr	r3, [pc, #336]	; (409c28 <atan+0x328>)
  409ad6:	f000 f9d1 	bl	409e7c <__aeabi_dsub>
  409ada:	2200      	movs	r2, #0
  409adc:	4606      	mov	r6, r0
  409ade:	460f      	mov	r7, r1
  409ae0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  409ae4:	4620      	mov	r0, r4
  409ae6:	4629      	mov	r1, r5
  409ae8:	f000 f9ca 	bl	409e80 <__adddf3>
  409aec:	4602      	mov	r2, r0
  409aee:	460b      	mov	r3, r1
  409af0:	4630      	mov	r0, r6
  409af2:	4639      	mov	r1, r7
  409af4:	f000 fca0 	bl	40a438 <__aeabi_ddiv>
  409af8:	f04f 0b00 	mov.w	fp, #0
  409afc:	4604      	mov	r4, r0
  409afe:	460d      	mov	r5, r1
  409b00:	e723      	b.n	40994a <atan+0x4a>
  409b02:	4640      	mov	r0, r8
  409b04:	4649      	mov	r1, r9
  409b06:	f000 f9bb 	bl	409e80 <__adddf3>
  409b0a:	4622      	mov	r2, r4
  409b0c:	462b      	mov	r3, r5
  409b0e:	f000 fb69 	bl	40a1e4 <__aeabi_dmul>
  409b12:	4602      	mov	r2, r0
  409b14:	460b      	mov	r3, r1
  409b16:	4620      	mov	r0, r4
  409b18:	4629      	mov	r1, r5
  409b1a:	f000 f9af 	bl	409e7c <__aeabi_dsub>
  409b1e:	4604      	mov	r4, r0
  409b20:	e705      	b.n	40992e <atan+0x2e>
  409b22:	4b43      	ldr	r3, [pc, #268]	; (409c30 <atan+0x330>)
  409b24:	429e      	cmp	r6, r3
  409b26:	dc1a      	bgt.n	409b5e <atan+0x25e>
  409b28:	2200      	movs	r2, #0
  409b2a:	4b42      	ldr	r3, [pc, #264]	; (409c34 <atan+0x334>)
  409b2c:	f000 f9a6 	bl	409e7c <__aeabi_dsub>
  409b30:	2200      	movs	r2, #0
  409b32:	4606      	mov	r6, r0
  409b34:	460f      	mov	r7, r1
  409b36:	4b3f      	ldr	r3, [pc, #252]	; (409c34 <atan+0x334>)
  409b38:	4620      	mov	r0, r4
  409b3a:	4629      	mov	r1, r5
  409b3c:	f000 fb52 	bl	40a1e4 <__aeabi_dmul>
  409b40:	2200      	movs	r2, #0
  409b42:	4b39      	ldr	r3, [pc, #228]	; (409c28 <atan+0x328>)
  409b44:	f000 f99c 	bl	409e80 <__adddf3>
  409b48:	4602      	mov	r2, r0
  409b4a:	460b      	mov	r3, r1
  409b4c:	4630      	mov	r0, r6
  409b4e:	4639      	mov	r1, r7
  409b50:	f000 fc72 	bl	40a438 <__aeabi_ddiv>
  409b54:	f04f 0b02 	mov.w	fp, #2
  409b58:	4604      	mov	r4, r0
  409b5a:	460d      	mov	r5, r1
  409b5c:	e6f5      	b.n	40994a <atan+0x4a>
  409b5e:	4602      	mov	r2, r0
  409b60:	460b      	mov	r3, r1
  409b62:	2000      	movs	r0, #0
  409b64:	4934      	ldr	r1, [pc, #208]	; (409c38 <atan+0x338>)
  409b66:	f000 fc67 	bl	40a438 <__aeabi_ddiv>
  409b6a:	f04f 0b03 	mov.w	fp, #3
  409b6e:	4604      	mov	r4, r0
  409b70:	460d      	mov	r5, r1
  409b72:	e6ea      	b.n	40994a <atan+0x4a>
  409b74:	2200      	movs	r2, #0
  409b76:	4b2c      	ldr	r3, [pc, #176]	; (409c28 <atan+0x328>)
  409b78:	f000 f980 	bl	409e7c <__aeabi_dsub>
  409b7c:	2200      	movs	r2, #0
  409b7e:	4606      	mov	r6, r0
  409b80:	460f      	mov	r7, r1
  409b82:	4b29      	ldr	r3, [pc, #164]	; (409c28 <atan+0x328>)
  409b84:	4620      	mov	r0, r4
  409b86:	4629      	mov	r1, r5
  409b88:	f000 f97a 	bl	409e80 <__adddf3>
  409b8c:	4602      	mov	r2, r0
  409b8e:	460b      	mov	r3, r1
  409b90:	4630      	mov	r0, r6
  409b92:	4639      	mov	r1, r7
  409b94:	f000 fc50 	bl	40a438 <__aeabi_ddiv>
  409b98:	f04f 0b01 	mov.w	fp, #1
  409b9c:	4604      	mov	r4, r0
  409b9e:	460d      	mov	r5, r1
  409ba0:	e6d3      	b.n	40994a <atan+0x4a>
  409ba2:	bf00      	nop
  409ba4:	f3af 8000 	nop.w
  409ba8:	e322da11 	.word	0xe322da11
  409bac:	3f90ad3a 	.word	0x3f90ad3a
  409bb0:	24760deb 	.word	0x24760deb
  409bb4:	3fa97b4b 	.word	0x3fa97b4b
  409bb8:	a0d03d51 	.word	0xa0d03d51
  409bbc:	3fb10d66 	.word	0x3fb10d66
  409bc0:	c54c206e 	.word	0xc54c206e
  409bc4:	3fb745cd 	.word	0x3fb745cd
  409bc8:	920083ff 	.word	0x920083ff
  409bcc:	3fc24924 	.word	0x3fc24924
  409bd0:	5555550d 	.word	0x5555550d
  409bd4:	3fd55555 	.word	0x3fd55555
  409bd8:	2c6a6c2f 	.word	0x2c6a6c2f
  409bdc:	bfa2b444 	.word	0xbfa2b444
  409be0:	52defd9a 	.word	0x52defd9a
  409be4:	3fadde2d 	.word	0x3fadde2d
  409be8:	af749a6d 	.word	0xaf749a6d
  409bec:	3fb3b0f2 	.word	0x3fb3b0f2
  409bf0:	fe231671 	.word	0xfe231671
  409bf4:	3fbc71c6 	.word	0x3fbc71c6
  409bf8:	9998ebc4 	.word	0x9998ebc4
  409bfc:	3fc99999 	.word	0x3fc99999
  409c00:	8800759c 	.word	0x8800759c
  409c04:	7e37e43c 	.word	0x7e37e43c
  409c08:	440fffff 	.word	0x440fffff
  409c0c:	7ff00000 	.word	0x7ff00000
  409c10:	3ff921fb 	.word	0x3ff921fb
  409c14:	bff921fb 	.word	0xbff921fb
  409c18:	54442d18 	.word	0x54442d18
  409c1c:	3fdbffff 	.word	0x3fdbffff
  409c20:	0040b7c8 	.word	0x0040b7c8
  409c24:	0040b7a8 	.word	0x0040b7a8
  409c28:	3ff00000 	.word	0x3ff00000
  409c2c:	3ff2ffff 	.word	0x3ff2ffff
  409c30:	40037fff 	.word	0x40037fff
  409c34:	3ff80000 	.word	0x3ff80000
  409c38:	bff00000 	.word	0xbff00000

00409c3c <fabs>:
  409c3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  409c40:	4770      	bx	lr
  409c42:	bf00      	nop
  409c44:	0000      	movs	r0, r0
	...

00409c48 <floor>:
  409c48:	f3c1 520a 	ubfx	r2, r1, #20, #11
  409c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409c50:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
  409c54:	2e13      	cmp	r6, #19
  409c56:	460b      	mov	r3, r1
  409c58:	460d      	mov	r5, r1
  409c5a:	4604      	mov	r4, r0
  409c5c:	4688      	mov	r8, r1
  409c5e:	4607      	mov	r7, r0
  409c60:	dc1c      	bgt.n	409c9c <floor+0x54>
  409c62:	2e00      	cmp	r6, #0
  409c64:	db3f      	blt.n	409ce6 <floor+0x9e>
  409c66:	4a3a      	ldr	r2, [pc, #232]	; (409d50 <floor+0x108>)
  409c68:	fa42 f906 	asr.w	r9, r2, r6
  409c6c:	ea01 0209 	and.w	r2, r1, r9
  409c70:	4302      	orrs	r2, r0
  409c72:	4686      	mov	lr, r0
  409c74:	d017      	beq.n	409ca6 <floor+0x5e>
  409c76:	a334      	add	r3, pc, #208	; (adr r3, 409d48 <floor+0x100>)
  409c78:	e9d3 2300 	ldrd	r2, r3, [r3]
  409c7c:	f000 f900 	bl	409e80 <__adddf3>
  409c80:	2200      	movs	r2, #0
  409c82:	2300      	movs	r3, #0
  409c84:	f000 fd3e 	bl	40a704 <__aeabi_dcmpgt>
  409c88:	b120      	cbz	r0, 409c94 <floor+0x4c>
  409c8a:	2d00      	cmp	r5, #0
  409c8c:	db40      	blt.n	409d10 <floor+0xc8>
  409c8e:	ea28 0509 	bic.w	r5, r8, r9
  409c92:	2700      	movs	r7, #0
  409c94:	4638      	mov	r0, r7
  409c96:	4629      	mov	r1, r5
  409c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409c9c:	2e33      	cmp	r6, #51	; 0x33
  409c9e:	dd06      	ble.n	409cae <floor+0x66>
  409ca0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  409ca4:	d02f      	beq.n	409d06 <floor+0xbe>
  409ca6:	4620      	mov	r0, r4
  409ca8:	4619      	mov	r1, r3
  409caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409cae:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
  409cb2:	f04f 39ff 	mov.w	r9, #4294967295
  409cb6:	fa29 f902 	lsr.w	r9, r9, r2
  409cba:	ea10 0f09 	tst.w	r0, r9
  409cbe:	d0f2      	beq.n	409ca6 <floor+0x5e>
  409cc0:	a321      	add	r3, pc, #132	; (adr r3, 409d48 <floor+0x100>)
  409cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
  409cc6:	f000 f8db 	bl	409e80 <__adddf3>
  409cca:	2200      	movs	r2, #0
  409ccc:	2300      	movs	r3, #0
  409cce:	f000 fd19 	bl	40a704 <__aeabi_dcmpgt>
  409cd2:	2800      	cmp	r0, #0
  409cd4:	d0de      	beq.n	409c94 <floor+0x4c>
  409cd6:	2d00      	cmp	r5, #0
  409cd8:	db20      	blt.n	409d1c <floor+0xd4>
  409cda:	4645      	mov	r5, r8
  409cdc:	ea27 0709 	bic.w	r7, r7, r9
  409ce0:	4638      	mov	r0, r7
  409ce2:	4629      	mov	r1, r5
  409ce4:	e7d8      	b.n	409c98 <floor+0x50>
  409ce6:	a318      	add	r3, pc, #96	; (adr r3, 409d48 <floor+0x100>)
  409ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
  409cec:	f000 f8c8 	bl	409e80 <__adddf3>
  409cf0:	2200      	movs	r2, #0
  409cf2:	2300      	movs	r3, #0
  409cf4:	f000 fd06 	bl	40a704 <__aeabi_dcmpgt>
  409cf8:	2800      	cmp	r0, #0
  409cfa:	d0cb      	beq.n	409c94 <floor+0x4c>
  409cfc:	2d00      	cmp	r5, #0
  409cfe:	db18      	blt.n	409d32 <floor+0xea>
  409d00:	2700      	movs	r7, #0
  409d02:	463d      	mov	r5, r7
  409d04:	e7c6      	b.n	409c94 <floor+0x4c>
  409d06:	4602      	mov	r2, r0
  409d08:	460b      	mov	r3, r1
  409d0a:	f000 f8b9 	bl	409e80 <__adddf3>
  409d0e:	e7cc      	b.n	409caa <floor+0x62>
  409d10:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  409d14:	fa43 f606 	asr.w	r6, r3, r6
  409d18:	44b0      	add	r8, r6
  409d1a:	e7b8      	b.n	409c8e <floor+0x46>
  409d1c:	2e14      	cmp	r6, #20
  409d1e:	d010      	beq.n	409d42 <floor+0xfa>
  409d20:	2301      	movs	r3, #1
  409d22:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
  409d26:	fa03 f606 	lsl.w	r6, r3, r6
  409d2a:	1937      	adds	r7, r6, r4
  409d2c:	bf28      	it	cs
  409d2e:	4498      	addcs	r8, r3
  409d30:	e7d3      	b.n	409cda <floor+0x92>
  409d32:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
  409d36:	4b07      	ldr	r3, [pc, #28]	; (409d54 <floor+0x10c>)
  409d38:	4322      	orrs	r2, r4
  409d3a:	bf18      	it	ne
  409d3c:	461d      	movne	r5, r3
  409d3e:	2700      	movs	r7, #0
  409d40:	e7a8      	b.n	409c94 <floor+0x4c>
  409d42:	f105 0801 	add.w	r8, r5, #1
  409d46:	e7c8      	b.n	409cda <floor+0x92>
  409d48:	8800759c 	.word	0x8800759c
  409d4c:	7e37e43c 	.word	0x7e37e43c
  409d50:	000fffff 	.word	0x000fffff
  409d54:	bff00000 	.word	0xbff00000

00409d58 <matherr>:
  409d58:	2000      	movs	r0, #0
  409d5a:	4770      	bx	lr

00409d5c <nan>:
  409d5c:	2000      	movs	r0, #0
  409d5e:	4901      	ldr	r1, [pc, #4]	; (409d64 <nan+0x8>)
  409d60:	4770      	bx	lr
  409d62:	bf00      	nop
  409d64:	7ff80000 	.word	0x7ff80000

00409d68 <scalbn>:
  409d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409d6a:	f3c1 560a 	ubfx	r6, r1, #20, #11
  409d6e:	4604      	mov	r4, r0
  409d70:	460d      	mov	r5, r1
  409d72:	460b      	mov	r3, r1
  409d74:	4617      	mov	r7, r2
  409d76:	bb06      	cbnz	r6, 409dba <scalbn+0x52>
  409d78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  409d7c:	4303      	orrs	r3, r0
  409d7e:	d025      	beq.n	409dcc <scalbn+0x64>
  409d80:	2200      	movs	r2, #0
  409d82:	4b35      	ldr	r3, [pc, #212]	; (409e58 <scalbn+0xf0>)
  409d84:	f000 fa2e 	bl	40a1e4 <__aeabi_dmul>
  409d88:	4a34      	ldr	r2, [pc, #208]	; (409e5c <scalbn+0xf4>)
  409d8a:	4297      	cmp	r7, r2
  409d8c:	4604      	mov	r4, r0
  409d8e:	460d      	mov	r5, r1
  409d90:	460b      	mov	r3, r1
  409d92:	db2a      	blt.n	409dea <scalbn+0x82>
  409d94:	f3c1 560a 	ubfx	r6, r1, #20, #11
  409d98:	3e36      	subs	r6, #54	; 0x36
  409d9a:	443e      	add	r6, r7
  409d9c:	f240 72fe 	movw	r2, #2046	; 0x7fe
  409da0:	4296      	cmp	r6, r2
  409da2:	dc28      	bgt.n	409df6 <scalbn+0x8e>
  409da4:	2e00      	cmp	r6, #0
  409da6:	dd12      	ble.n	409dce <scalbn+0x66>
  409da8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  409dac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  409db0:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  409db4:	4620      	mov	r0, r4
  409db6:	4629      	mov	r1, r5
  409db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409dba:	f240 72ff 	movw	r2, #2047	; 0x7ff
  409dbe:	4296      	cmp	r6, r2
  409dc0:	d1eb      	bne.n	409d9a <scalbn+0x32>
  409dc2:	4602      	mov	r2, r0
  409dc4:	460b      	mov	r3, r1
  409dc6:	f000 f85b 	bl	409e80 <__adddf3>
  409dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409dce:	f116 0f35 	cmn.w	r6, #53	; 0x35
  409dd2:	da1d      	bge.n	409e10 <scalbn+0xa8>
  409dd4:	f24c 3350 	movw	r3, #50000	; 0xc350
  409dd8:	429f      	cmp	r7, r3
  409dda:	4622      	mov	r2, r4
  409ddc:	462b      	mov	r3, r5
  409dde:	dc25      	bgt.n	409e2c <scalbn+0xc4>
  409de0:	a119      	add	r1, pc, #100	; (adr r1, 409e48 <scalbn+0xe0>)
  409de2:	e9d1 0100 	ldrd	r0, r1, [r1]
  409de6:	f000 f83d 	bl	409e64 <copysign>
  409dea:	a317      	add	r3, pc, #92	; (adr r3, 409e48 <scalbn+0xe0>)
  409dec:	e9d3 2300 	ldrd	r2, r3, [r3]
  409df0:	f000 f9f8 	bl	40a1e4 <__aeabi_dmul>
  409df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409df6:	4622      	mov	r2, r4
  409df8:	462b      	mov	r3, r5
  409dfa:	a115      	add	r1, pc, #84	; (adr r1, 409e50 <scalbn+0xe8>)
  409dfc:	e9d1 0100 	ldrd	r0, r1, [r1]
  409e00:	f000 f830 	bl	409e64 <copysign>
  409e04:	a312      	add	r3, pc, #72	; (adr r3, 409e50 <scalbn+0xe8>)
  409e06:	e9d3 2300 	ldrd	r2, r3, [r3]
  409e0a:	f000 f9eb 	bl	40a1e4 <__aeabi_dmul>
  409e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409e10:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  409e14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  409e18:	3636      	adds	r6, #54	; 0x36
  409e1a:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  409e1e:	4620      	mov	r0, r4
  409e20:	4629      	mov	r1, r5
  409e22:	2200      	movs	r2, #0
  409e24:	4b0e      	ldr	r3, [pc, #56]	; (409e60 <scalbn+0xf8>)
  409e26:	f000 f9dd 	bl	40a1e4 <__aeabi_dmul>
  409e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409e2c:	a108      	add	r1, pc, #32	; (adr r1, 409e50 <scalbn+0xe8>)
  409e2e:	e9d1 0100 	ldrd	r0, r1, [r1]
  409e32:	f000 f817 	bl	409e64 <copysign>
  409e36:	a306      	add	r3, pc, #24	; (adr r3, 409e50 <scalbn+0xe8>)
  409e38:	e9d3 2300 	ldrd	r2, r3, [r3]
  409e3c:	f000 f9d2 	bl	40a1e4 <__aeabi_dmul>
  409e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409e42:	bf00      	nop
  409e44:	f3af 8000 	nop.w
  409e48:	c2f8f359 	.word	0xc2f8f359
  409e4c:	01a56e1f 	.word	0x01a56e1f
  409e50:	8800759c 	.word	0x8800759c
  409e54:	7e37e43c 	.word	0x7e37e43c
  409e58:	43500000 	.word	0x43500000
  409e5c:	ffff3cb0 	.word	0xffff3cb0
  409e60:	3c900000 	.word	0x3c900000

00409e64 <copysign>:
  409e64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  409e68:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
  409e6c:	ea42 0103 	orr.w	r1, r2, r3
  409e70:	4770      	bx	lr
  409e72:	bf00      	nop

00409e74 <__aeabi_drsub>:
  409e74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  409e78:	e002      	b.n	409e80 <__adddf3>
  409e7a:	bf00      	nop

00409e7c <__aeabi_dsub>:
  409e7c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00409e80 <__adddf3>:
  409e80:	b530      	push	{r4, r5, lr}
  409e82:	ea4f 0441 	mov.w	r4, r1, lsl #1
  409e86:	ea4f 0543 	mov.w	r5, r3, lsl #1
  409e8a:	ea94 0f05 	teq	r4, r5
  409e8e:	bf08      	it	eq
  409e90:	ea90 0f02 	teqeq	r0, r2
  409e94:	bf1f      	itttt	ne
  409e96:	ea54 0c00 	orrsne.w	ip, r4, r0
  409e9a:	ea55 0c02 	orrsne.w	ip, r5, r2
  409e9e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  409ea2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  409ea6:	f000 80e2 	beq.w	40a06e <__adddf3+0x1ee>
  409eaa:	ea4f 5454 	mov.w	r4, r4, lsr #21
  409eae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  409eb2:	bfb8      	it	lt
  409eb4:	426d      	neglt	r5, r5
  409eb6:	dd0c      	ble.n	409ed2 <__adddf3+0x52>
  409eb8:	442c      	add	r4, r5
  409eba:	ea80 0202 	eor.w	r2, r0, r2
  409ebe:	ea81 0303 	eor.w	r3, r1, r3
  409ec2:	ea82 0000 	eor.w	r0, r2, r0
  409ec6:	ea83 0101 	eor.w	r1, r3, r1
  409eca:	ea80 0202 	eor.w	r2, r0, r2
  409ece:	ea81 0303 	eor.w	r3, r1, r3
  409ed2:	2d36      	cmp	r5, #54	; 0x36
  409ed4:	bf88      	it	hi
  409ed6:	bd30      	pophi	{r4, r5, pc}
  409ed8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  409edc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  409ee0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  409ee4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  409ee8:	d002      	beq.n	409ef0 <__adddf3+0x70>
  409eea:	4240      	negs	r0, r0
  409eec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  409ef0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  409ef4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  409ef8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  409efc:	d002      	beq.n	409f04 <__adddf3+0x84>
  409efe:	4252      	negs	r2, r2
  409f00:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  409f04:	ea94 0f05 	teq	r4, r5
  409f08:	f000 80a7 	beq.w	40a05a <__adddf3+0x1da>
  409f0c:	f1a4 0401 	sub.w	r4, r4, #1
  409f10:	f1d5 0e20 	rsbs	lr, r5, #32
  409f14:	db0d      	blt.n	409f32 <__adddf3+0xb2>
  409f16:	fa02 fc0e 	lsl.w	ip, r2, lr
  409f1a:	fa22 f205 	lsr.w	r2, r2, r5
  409f1e:	1880      	adds	r0, r0, r2
  409f20:	f141 0100 	adc.w	r1, r1, #0
  409f24:	fa03 f20e 	lsl.w	r2, r3, lr
  409f28:	1880      	adds	r0, r0, r2
  409f2a:	fa43 f305 	asr.w	r3, r3, r5
  409f2e:	4159      	adcs	r1, r3
  409f30:	e00e      	b.n	409f50 <__adddf3+0xd0>
  409f32:	f1a5 0520 	sub.w	r5, r5, #32
  409f36:	f10e 0e20 	add.w	lr, lr, #32
  409f3a:	2a01      	cmp	r2, #1
  409f3c:	fa03 fc0e 	lsl.w	ip, r3, lr
  409f40:	bf28      	it	cs
  409f42:	f04c 0c02 	orrcs.w	ip, ip, #2
  409f46:	fa43 f305 	asr.w	r3, r3, r5
  409f4a:	18c0      	adds	r0, r0, r3
  409f4c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  409f50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  409f54:	d507      	bpl.n	409f66 <__adddf3+0xe6>
  409f56:	f04f 0e00 	mov.w	lr, #0
  409f5a:	f1dc 0c00 	rsbs	ip, ip, #0
  409f5e:	eb7e 0000 	sbcs.w	r0, lr, r0
  409f62:	eb6e 0101 	sbc.w	r1, lr, r1
  409f66:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  409f6a:	d31b      	bcc.n	409fa4 <__adddf3+0x124>
  409f6c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  409f70:	d30c      	bcc.n	409f8c <__adddf3+0x10c>
  409f72:	0849      	lsrs	r1, r1, #1
  409f74:	ea5f 0030 	movs.w	r0, r0, rrx
  409f78:	ea4f 0c3c 	mov.w	ip, ip, rrx
  409f7c:	f104 0401 	add.w	r4, r4, #1
  409f80:	ea4f 5244 	mov.w	r2, r4, lsl #21
  409f84:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  409f88:	f080 809a 	bcs.w	40a0c0 <__adddf3+0x240>
  409f8c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  409f90:	bf08      	it	eq
  409f92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  409f96:	f150 0000 	adcs.w	r0, r0, #0
  409f9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  409f9e:	ea41 0105 	orr.w	r1, r1, r5
  409fa2:	bd30      	pop	{r4, r5, pc}
  409fa4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  409fa8:	4140      	adcs	r0, r0
  409faa:	eb41 0101 	adc.w	r1, r1, r1
  409fae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409fb2:	f1a4 0401 	sub.w	r4, r4, #1
  409fb6:	d1e9      	bne.n	409f8c <__adddf3+0x10c>
  409fb8:	f091 0f00 	teq	r1, #0
  409fbc:	bf04      	itt	eq
  409fbe:	4601      	moveq	r1, r0
  409fc0:	2000      	moveq	r0, #0
  409fc2:	fab1 f381 	clz	r3, r1
  409fc6:	bf08      	it	eq
  409fc8:	3320      	addeq	r3, #32
  409fca:	f1a3 030b 	sub.w	r3, r3, #11
  409fce:	f1b3 0220 	subs.w	r2, r3, #32
  409fd2:	da0c      	bge.n	409fee <__adddf3+0x16e>
  409fd4:	320c      	adds	r2, #12
  409fd6:	dd08      	ble.n	409fea <__adddf3+0x16a>
  409fd8:	f102 0c14 	add.w	ip, r2, #20
  409fdc:	f1c2 020c 	rsb	r2, r2, #12
  409fe0:	fa01 f00c 	lsl.w	r0, r1, ip
  409fe4:	fa21 f102 	lsr.w	r1, r1, r2
  409fe8:	e00c      	b.n	40a004 <__adddf3+0x184>
  409fea:	f102 0214 	add.w	r2, r2, #20
  409fee:	bfd8      	it	le
  409ff0:	f1c2 0c20 	rsble	ip, r2, #32
  409ff4:	fa01 f102 	lsl.w	r1, r1, r2
  409ff8:	fa20 fc0c 	lsr.w	ip, r0, ip
  409ffc:	bfdc      	itt	le
  409ffe:	ea41 010c 	orrle.w	r1, r1, ip
  40a002:	4090      	lslle	r0, r2
  40a004:	1ae4      	subs	r4, r4, r3
  40a006:	bfa2      	ittt	ge
  40a008:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40a00c:	4329      	orrge	r1, r5
  40a00e:	bd30      	popge	{r4, r5, pc}
  40a010:	ea6f 0404 	mvn.w	r4, r4
  40a014:	3c1f      	subs	r4, #31
  40a016:	da1c      	bge.n	40a052 <__adddf3+0x1d2>
  40a018:	340c      	adds	r4, #12
  40a01a:	dc0e      	bgt.n	40a03a <__adddf3+0x1ba>
  40a01c:	f104 0414 	add.w	r4, r4, #20
  40a020:	f1c4 0220 	rsb	r2, r4, #32
  40a024:	fa20 f004 	lsr.w	r0, r0, r4
  40a028:	fa01 f302 	lsl.w	r3, r1, r2
  40a02c:	ea40 0003 	orr.w	r0, r0, r3
  40a030:	fa21 f304 	lsr.w	r3, r1, r4
  40a034:	ea45 0103 	orr.w	r1, r5, r3
  40a038:	bd30      	pop	{r4, r5, pc}
  40a03a:	f1c4 040c 	rsb	r4, r4, #12
  40a03e:	f1c4 0220 	rsb	r2, r4, #32
  40a042:	fa20 f002 	lsr.w	r0, r0, r2
  40a046:	fa01 f304 	lsl.w	r3, r1, r4
  40a04a:	ea40 0003 	orr.w	r0, r0, r3
  40a04e:	4629      	mov	r1, r5
  40a050:	bd30      	pop	{r4, r5, pc}
  40a052:	fa21 f004 	lsr.w	r0, r1, r4
  40a056:	4629      	mov	r1, r5
  40a058:	bd30      	pop	{r4, r5, pc}
  40a05a:	f094 0f00 	teq	r4, #0
  40a05e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40a062:	bf06      	itte	eq
  40a064:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40a068:	3401      	addeq	r4, #1
  40a06a:	3d01      	subne	r5, #1
  40a06c:	e74e      	b.n	409f0c <__adddf3+0x8c>
  40a06e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a072:	bf18      	it	ne
  40a074:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a078:	d029      	beq.n	40a0ce <__adddf3+0x24e>
  40a07a:	ea94 0f05 	teq	r4, r5
  40a07e:	bf08      	it	eq
  40a080:	ea90 0f02 	teqeq	r0, r2
  40a084:	d005      	beq.n	40a092 <__adddf3+0x212>
  40a086:	ea54 0c00 	orrs.w	ip, r4, r0
  40a08a:	bf04      	itt	eq
  40a08c:	4619      	moveq	r1, r3
  40a08e:	4610      	moveq	r0, r2
  40a090:	bd30      	pop	{r4, r5, pc}
  40a092:	ea91 0f03 	teq	r1, r3
  40a096:	bf1e      	ittt	ne
  40a098:	2100      	movne	r1, #0
  40a09a:	2000      	movne	r0, #0
  40a09c:	bd30      	popne	{r4, r5, pc}
  40a09e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40a0a2:	d105      	bne.n	40a0b0 <__adddf3+0x230>
  40a0a4:	0040      	lsls	r0, r0, #1
  40a0a6:	4149      	adcs	r1, r1
  40a0a8:	bf28      	it	cs
  40a0aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40a0ae:	bd30      	pop	{r4, r5, pc}
  40a0b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40a0b4:	bf3c      	itt	cc
  40a0b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40a0ba:	bd30      	popcc	{r4, r5, pc}
  40a0bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a0c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40a0c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40a0c8:	f04f 0000 	mov.w	r0, #0
  40a0cc:	bd30      	pop	{r4, r5, pc}
  40a0ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a0d2:	bf1a      	itte	ne
  40a0d4:	4619      	movne	r1, r3
  40a0d6:	4610      	movne	r0, r2
  40a0d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40a0dc:	bf1c      	itt	ne
  40a0de:	460b      	movne	r3, r1
  40a0e0:	4602      	movne	r2, r0
  40a0e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40a0e6:	bf06      	itte	eq
  40a0e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40a0ec:	ea91 0f03 	teqeq	r1, r3
  40a0f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40a0f4:	bd30      	pop	{r4, r5, pc}
  40a0f6:	bf00      	nop

0040a0f8 <__aeabi_ui2d>:
  40a0f8:	f090 0f00 	teq	r0, #0
  40a0fc:	bf04      	itt	eq
  40a0fe:	2100      	moveq	r1, #0
  40a100:	4770      	bxeq	lr
  40a102:	b530      	push	{r4, r5, lr}
  40a104:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a108:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a10c:	f04f 0500 	mov.w	r5, #0
  40a110:	f04f 0100 	mov.w	r1, #0
  40a114:	e750      	b.n	409fb8 <__adddf3+0x138>
  40a116:	bf00      	nop

0040a118 <__aeabi_i2d>:
  40a118:	f090 0f00 	teq	r0, #0
  40a11c:	bf04      	itt	eq
  40a11e:	2100      	moveq	r1, #0
  40a120:	4770      	bxeq	lr
  40a122:	b530      	push	{r4, r5, lr}
  40a124:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a128:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a12c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40a130:	bf48      	it	mi
  40a132:	4240      	negmi	r0, r0
  40a134:	f04f 0100 	mov.w	r1, #0
  40a138:	e73e      	b.n	409fb8 <__adddf3+0x138>
  40a13a:	bf00      	nop

0040a13c <__aeabi_f2d>:
  40a13c:	0042      	lsls	r2, r0, #1
  40a13e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40a142:	ea4f 0131 	mov.w	r1, r1, rrx
  40a146:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40a14a:	bf1f      	itttt	ne
  40a14c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40a150:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a154:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40a158:	4770      	bxne	lr
  40a15a:	f092 0f00 	teq	r2, #0
  40a15e:	bf14      	ite	ne
  40a160:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a164:	4770      	bxeq	lr
  40a166:	b530      	push	{r4, r5, lr}
  40a168:	f44f 7460 	mov.w	r4, #896	; 0x380
  40a16c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a170:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a174:	e720      	b.n	409fb8 <__adddf3+0x138>
  40a176:	bf00      	nop

0040a178 <__aeabi_ul2d>:
  40a178:	ea50 0201 	orrs.w	r2, r0, r1
  40a17c:	bf08      	it	eq
  40a17e:	4770      	bxeq	lr
  40a180:	b530      	push	{r4, r5, lr}
  40a182:	f04f 0500 	mov.w	r5, #0
  40a186:	e00a      	b.n	40a19e <__aeabi_l2d+0x16>

0040a188 <__aeabi_l2d>:
  40a188:	ea50 0201 	orrs.w	r2, r0, r1
  40a18c:	bf08      	it	eq
  40a18e:	4770      	bxeq	lr
  40a190:	b530      	push	{r4, r5, lr}
  40a192:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40a196:	d502      	bpl.n	40a19e <__aeabi_l2d+0x16>
  40a198:	4240      	negs	r0, r0
  40a19a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a19e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a1a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a1a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40a1aa:	f43f aedc 	beq.w	409f66 <__adddf3+0xe6>
  40a1ae:	f04f 0203 	mov.w	r2, #3
  40a1b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a1b6:	bf18      	it	ne
  40a1b8:	3203      	addne	r2, #3
  40a1ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a1be:	bf18      	it	ne
  40a1c0:	3203      	addne	r2, #3
  40a1c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40a1c6:	f1c2 0320 	rsb	r3, r2, #32
  40a1ca:	fa00 fc03 	lsl.w	ip, r0, r3
  40a1ce:	fa20 f002 	lsr.w	r0, r0, r2
  40a1d2:	fa01 fe03 	lsl.w	lr, r1, r3
  40a1d6:	ea40 000e 	orr.w	r0, r0, lr
  40a1da:	fa21 f102 	lsr.w	r1, r1, r2
  40a1de:	4414      	add	r4, r2
  40a1e0:	e6c1      	b.n	409f66 <__adddf3+0xe6>
  40a1e2:	bf00      	nop

0040a1e4 <__aeabi_dmul>:
  40a1e4:	b570      	push	{r4, r5, r6, lr}
  40a1e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40a1ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40a1ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40a1f2:	bf1d      	ittte	ne
  40a1f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40a1f8:	ea94 0f0c 	teqne	r4, ip
  40a1fc:	ea95 0f0c 	teqne	r5, ip
  40a200:	f000 f8de 	bleq	40a3c0 <__aeabi_dmul+0x1dc>
  40a204:	442c      	add	r4, r5
  40a206:	ea81 0603 	eor.w	r6, r1, r3
  40a20a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40a20e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40a212:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40a216:	bf18      	it	ne
  40a218:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40a21c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a220:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40a224:	d038      	beq.n	40a298 <__aeabi_dmul+0xb4>
  40a226:	fba0 ce02 	umull	ip, lr, r0, r2
  40a22a:	f04f 0500 	mov.w	r5, #0
  40a22e:	fbe1 e502 	umlal	lr, r5, r1, r2
  40a232:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40a236:	fbe0 e503 	umlal	lr, r5, r0, r3
  40a23a:	f04f 0600 	mov.w	r6, #0
  40a23e:	fbe1 5603 	umlal	r5, r6, r1, r3
  40a242:	f09c 0f00 	teq	ip, #0
  40a246:	bf18      	it	ne
  40a248:	f04e 0e01 	orrne.w	lr, lr, #1
  40a24c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40a250:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40a254:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40a258:	d204      	bcs.n	40a264 <__aeabi_dmul+0x80>
  40a25a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40a25e:	416d      	adcs	r5, r5
  40a260:	eb46 0606 	adc.w	r6, r6, r6
  40a264:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40a268:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40a26c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40a270:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40a274:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40a278:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40a27c:	bf88      	it	hi
  40a27e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40a282:	d81e      	bhi.n	40a2c2 <__aeabi_dmul+0xde>
  40a284:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40a288:	bf08      	it	eq
  40a28a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40a28e:	f150 0000 	adcs.w	r0, r0, #0
  40a292:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a296:	bd70      	pop	{r4, r5, r6, pc}
  40a298:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40a29c:	ea46 0101 	orr.w	r1, r6, r1
  40a2a0:	ea40 0002 	orr.w	r0, r0, r2
  40a2a4:	ea81 0103 	eor.w	r1, r1, r3
  40a2a8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40a2ac:	bfc2      	ittt	gt
  40a2ae:	ebd4 050c 	rsbsgt	r5, r4, ip
  40a2b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40a2b6:	bd70      	popgt	{r4, r5, r6, pc}
  40a2b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a2bc:	f04f 0e00 	mov.w	lr, #0
  40a2c0:	3c01      	subs	r4, #1
  40a2c2:	f300 80ab 	bgt.w	40a41c <__aeabi_dmul+0x238>
  40a2c6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40a2ca:	bfde      	ittt	le
  40a2cc:	2000      	movle	r0, #0
  40a2ce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40a2d2:	bd70      	pople	{r4, r5, r6, pc}
  40a2d4:	f1c4 0400 	rsb	r4, r4, #0
  40a2d8:	3c20      	subs	r4, #32
  40a2da:	da35      	bge.n	40a348 <__aeabi_dmul+0x164>
  40a2dc:	340c      	adds	r4, #12
  40a2de:	dc1b      	bgt.n	40a318 <__aeabi_dmul+0x134>
  40a2e0:	f104 0414 	add.w	r4, r4, #20
  40a2e4:	f1c4 0520 	rsb	r5, r4, #32
  40a2e8:	fa00 f305 	lsl.w	r3, r0, r5
  40a2ec:	fa20 f004 	lsr.w	r0, r0, r4
  40a2f0:	fa01 f205 	lsl.w	r2, r1, r5
  40a2f4:	ea40 0002 	orr.w	r0, r0, r2
  40a2f8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40a2fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a300:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40a304:	fa21 f604 	lsr.w	r6, r1, r4
  40a308:	eb42 0106 	adc.w	r1, r2, r6
  40a30c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a310:	bf08      	it	eq
  40a312:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a316:	bd70      	pop	{r4, r5, r6, pc}
  40a318:	f1c4 040c 	rsb	r4, r4, #12
  40a31c:	f1c4 0520 	rsb	r5, r4, #32
  40a320:	fa00 f304 	lsl.w	r3, r0, r4
  40a324:	fa20 f005 	lsr.w	r0, r0, r5
  40a328:	fa01 f204 	lsl.w	r2, r1, r4
  40a32c:	ea40 0002 	orr.w	r0, r0, r2
  40a330:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40a338:	f141 0100 	adc.w	r1, r1, #0
  40a33c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a340:	bf08      	it	eq
  40a342:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a346:	bd70      	pop	{r4, r5, r6, pc}
  40a348:	f1c4 0520 	rsb	r5, r4, #32
  40a34c:	fa00 f205 	lsl.w	r2, r0, r5
  40a350:	ea4e 0e02 	orr.w	lr, lr, r2
  40a354:	fa20 f304 	lsr.w	r3, r0, r4
  40a358:	fa01 f205 	lsl.w	r2, r1, r5
  40a35c:	ea43 0302 	orr.w	r3, r3, r2
  40a360:	fa21 f004 	lsr.w	r0, r1, r4
  40a364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a368:	fa21 f204 	lsr.w	r2, r1, r4
  40a36c:	ea20 0002 	bic.w	r0, r0, r2
  40a370:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40a374:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a378:	bf08      	it	eq
  40a37a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a37e:	bd70      	pop	{r4, r5, r6, pc}
  40a380:	f094 0f00 	teq	r4, #0
  40a384:	d10f      	bne.n	40a3a6 <__aeabi_dmul+0x1c2>
  40a386:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40a38a:	0040      	lsls	r0, r0, #1
  40a38c:	eb41 0101 	adc.w	r1, r1, r1
  40a390:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a394:	bf08      	it	eq
  40a396:	3c01      	subeq	r4, #1
  40a398:	d0f7      	beq.n	40a38a <__aeabi_dmul+0x1a6>
  40a39a:	ea41 0106 	orr.w	r1, r1, r6
  40a39e:	f095 0f00 	teq	r5, #0
  40a3a2:	bf18      	it	ne
  40a3a4:	4770      	bxne	lr
  40a3a6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40a3aa:	0052      	lsls	r2, r2, #1
  40a3ac:	eb43 0303 	adc.w	r3, r3, r3
  40a3b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40a3b4:	bf08      	it	eq
  40a3b6:	3d01      	subeq	r5, #1
  40a3b8:	d0f7      	beq.n	40a3aa <__aeabi_dmul+0x1c6>
  40a3ba:	ea43 0306 	orr.w	r3, r3, r6
  40a3be:	4770      	bx	lr
  40a3c0:	ea94 0f0c 	teq	r4, ip
  40a3c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40a3c8:	bf18      	it	ne
  40a3ca:	ea95 0f0c 	teqne	r5, ip
  40a3ce:	d00c      	beq.n	40a3ea <__aeabi_dmul+0x206>
  40a3d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a3d4:	bf18      	it	ne
  40a3d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a3da:	d1d1      	bne.n	40a380 <__aeabi_dmul+0x19c>
  40a3dc:	ea81 0103 	eor.w	r1, r1, r3
  40a3e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a3e4:	f04f 0000 	mov.w	r0, #0
  40a3e8:	bd70      	pop	{r4, r5, r6, pc}
  40a3ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a3ee:	bf06      	itte	eq
  40a3f0:	4610      	moveq	r0, r2
  40a3f2:	4619      	moveq	r1, r3
  40a3f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a3f8:	d019      	beq.n	40a42e <__aeabi_dmul+0x24a>
  40a3fa:	ea94 0f0c 	teq	r4, ip
  40a3fe:	d102      	bne.n	40a406 <__aeabi_dmul+0x222>
  40a400:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40a404:	d113      	bne.n	40a42e <__aeabi_dmul+0x24a>
  40a406:	ea95 0f0c 	teq	r5, ip
  40a40a:	d105      	bne.n	40a418 <__aeabi_dmul+0x234>
  40a40c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40a410:	bf1c      	itt	ne
  40a412:	4610      	movne	r0, r2
  40a414:	4619      	movne	r1, r3
  40a416:	d10a      	bne.n	40a42e <__aeabi_dmul+0x24a>
  40a418:	ea81 0103 	eor.w	r1, r1, r3
  40a41c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a420:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40a424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40a428:	f04f 0000 	mov.w	r0, #0
  40a42c:	bd70      	pop	{r4, r5, r6, pc}
  40a42e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40a432:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40a436:	bd70      	pop	{r4, r5, r6, pc}

0040a438 <__aeabi_ddiv>:
  40a438:	b570      	push	{r4, r5, r6, lr}
  40a43a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40a43e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40a442:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40a446:	bf1d      	ittte	ne
  40a448:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40a44c:	ea94 0f0c 	teqne	r4, ip
  40a450:	ea95 0f0c 	teqne	r5, ip
  40a454:	f000 f8a7 	bleq	40a5a6 <__aeabi_ddiv+0x16e>
  40a458:	eba4 0405 	sub.w	r4, r4, r5
  40a45c:	ea81 0e03 	eor.w	lr, r1, r3
  40a460:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40a464:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40a468:	f000 8088 	beq.w	40a57c <__aeabi_ddiv+0x144>
  40a46c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40a470:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40a474:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40a478:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40a47c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40a480:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40a484:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40a488:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40a48c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40a490:	429d      	cmp	r5, r3
  40a492:	bf08      	it	eq
  40a494:	4296      	cmpeq	r6, r2
  40a496:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40a49a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40a49e:	d202      	bcs.n	40a4a6 <__aeabi_ddiv+0x6e>
  40a4a0:	085b      	lsrs	r3, r3, #1
  40a4a2:	ea4f 0232 	mov.w	r2, r2, rrx
  40a4a6:	1ab6      	subs	r6, r6, r2
  40a4a8:	eb65 0503 	sbc.w	r5, r5, r3
  40a4ac:	085b      	lsrs	r3, r3, #1
  40a4ae:	ea4f 0232 	mov.w	r2, r2, rrx
  40a4b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40a4b6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40a4ba:	ebb6 0e02 	subs.w	lr, r6, r2
  40a4be:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a4c2:	bf22      	ittt	cs
  40a4c4:	1ab6      	subcs	r6, r6, r2
  40a4c6:	4675      	movcs	r5, lr
  40a4c8:	ea40 000c 	orrcs.w	r0, r0, ip
  40a4cc:	085b      	lsrs	r3, r3, #1
  40a4ce:	ea4f 0232 	mov.w	r2, r2, rrx
  40a4d2:	ebb6 0e02 	subs.w	lr, r6, r2
  40a4d6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a4da:	bf22      	ittt	cs
  40a4dc:	1ab6      	subcs	r6, r6, r2
  40a4de:	4675      	movcs	r5, lr
  40a4e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40a4e4:	085b      	lsrs	r3, r3, #1
  40a4e6:	ea4f 0232 	mov.w	r2, r2, rrx
  40a4ea:	ebb6 0e02 	subs.w	lr, r6, r2
  40a4ee:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a4f2:	bf22      	ittt	cs
  40a4f4:	1ab6      	subcs	r6, r6, r2
  40a4f6:	4675      	movcs	r5, lr
  40a4f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40a4fc:	085b      	lsrs	r3, r3, #1
  40a4fe:	ea4f 0232 	mov.w	r2, r2, rrx
  40a502:	ebb6 0e02 	subs.w	lr, r6, r2
  40a506:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a50a:	bf22      	ittt	cs
  40a50c:	1ab6      	subcs	r6, r6, r2
  40a50e:	4675      	movcs	r5, lr
  40a510:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40a514:	ea55 0e06 	orrs.w	lr, r5, r6
  40a518:	d018      	beq.n	40a54c <__aeabi_ddiv+0x114>
  40a51a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40a51e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40a522:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40a526:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40a52a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40a52e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40a532:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40a536:	d1c0      	bne.n	40a4ba <__aeabi_ddiv+0x82>
  40a538:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a53c:	d10b      	bne.n	40a556 <__aeabi_ddiv+0x11e>
  40a53e:	ea41 0100 	orr.w	r1, r1, r0
  40a542:	f04f 0000 	mov.w	r0, #0
  40a546:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40a54a:	e7b6      	b.n	40a4ba <__aeabi_ddiv+0x82>
  40a54c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a550:	bf04      	itt	eq
  40a552:	4301      	orreq	r1, r0
  40a554:	2000      	moveq	r0, #0
  40a556:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40a55a:	bf88      	it	hi
  40a55c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40a560:	f63f aeaf 	bhi.w	40a2c2 <__aeabi_dmul+0xde>
  40a564:	ebb5 0c03 	subs.w	ip, r5, r3
  40a568:	bf04      	itt	eq
  40a56a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40a56e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40a572:	f150 0000 	adcs.w	r0, r0, #0
  40a576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a57a:	bd70      	pop	{r4, r5, r6, pc}
  40a57c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40a580:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40a584:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40a588:	bfc2      	ittt	gt
  40a58a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40a58e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40a592:	bd70      	popgt	{r4, r5, r6, pc}
  40a594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a598:	f04f 0e00 	mov.w	lr, #0
  40a59c:	3c01      	subs	r4, #1
  40a59e:	e690      	b.n	40a2c2 <__aeabi_dmul+0xde>
  40a5a0:	ea45 0e06 	orr.w	lr, r5, r6
  40a5a4:	e68d      	b.n	40a2c2 <__aeabi_dmul+0xde>
  40a5a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40a5aa:	ea94 0f0c 	teq	r4, ip
  40a5ae:	bf08      	it	eq
  40a5b0:	ea95 0f0c 	teqeq	r5, ip
  40a5b4:	f43f af3b 	beq.w	40a42e <__aeabi_dmul+0x24a>
  40a5b8:	ea94 0f0c 	teq	r4, ip
  40a5bc:	d10a      	bne.n	40a5d4 <__aeabi_ddiv+0x19c>
  40a5be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40a5c2:	f47f af34 	bne.w	40a42e <__aeabi_dmul+0x24a>
  40a5c6:	ea95 0f0c 	teq	r5, ip
  40a5ca:	f47f af25 	bne.w	40a418 <__aeabi_dmul+0x234>
  40a5ce:	4610      	mov	r0, r2
  40a5d0:	4619      	mov	r1, r3
  40a5d2:	e72c      	b.n	40a42e <__aeabi_dmul+0x24a>
  40a5d4:	ea95 0f0c 	teq	r5, ip
  40a5d8:	d106      	bne.n	40a5e8 <__aeabi_ddiv+0x1b0>
  40a5da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40a5de:	f43f aefd 	beq.w	40a3dc <__aeabi_dmul+0x1f8>
  40a5e2:	4610      	mov	r0, r2
  40a5e4:	4619      	mov	r1, r3
  40a5e6:	e722      	b.n	40a42e <__aeabi_dmul+0x24a>
  40a5e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a5ec:	bf18      	it	ne
  40a5ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a5f2:	f47f aec5 	bne.w	40a380 <__aeabi_dmul+0x19c>
  40a5f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40a5fa:	f47f af0d 	bne.w	40a418 <__aeabi_dmul+0x234>
  40a5fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40a602:	f47f aeeb 	bne.w	40a3dc <__aeabi_dmul+0x1f8>
  40a606:	e712      	b.n	40a42e <__aeabi_dmul+0x24a>

0040a608 <__gedf2>:
  40a608:	f04f 3cff 	mov.w	ip, #4294967295
  40a60c:	e006      	b.n	40a61c <__cmpdf2+0x4>
  40a60e:	bf00      	nop

0040a610 <__ledf2>:
  40a610:	f04f 0c01 	mov.w	ip, #1
  40a614:	e002      	b.n	40a61c <__cmpdf2+0x4>
  40a616:	bf00      	nop

0040a618 <__cmpdf2>:
  40a618:	f04f 0c01 	mov.w	ip, #1
  40a61c:	f84d cd04 	str.w	ip, [sp, #-4]!
  40a620:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a624:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a628:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a62c:	bf18      	it	ne
  40a62e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40a632:	d01b      	beq.n	40a66c <__cmpdf2+0x54>
  40a634:	b001      	add	sp, #4
  40a636:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40a63a:	bf0c      	ite	eq
  40a63c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40a640:	ea91 0f03 	teqne	r1, r3
  40a644:	bf02      	ittt	eq
  40a646:	ea90 0f02 	teqeq	r0, r2
  40a64a:	2000      	moveq	r0, #0
  40a64c:	4770      	bxeq	lr
  40a64e:	f110 0f00 	cmn.w	r0, #0
  40a652:	ea91 0f03 	teq	r1, r3
  40a656:	bf58      	it	pl
  40a658:	4299      	cmppl	r1, r3
  40a65a:	bf08      	it	eq
  40a65c:	4290      	cmpeq	r0, r2
  40a65e:	bf2c      	ite	cs
  40a660:	17d8      	asrcs	r0, r3, #31
  40a662:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40a666:	f040 0001 	orr.w	r0, r0, #1
  40a66a:	4770      	bx	lr
  40a66c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a670:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a674:	d102      	bne.n	40a67c <__cmpdf2+0x64>
  40a676:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40a67a:	d107      	bne.n	40a68c <__cmpdf2+0x74>
  40a67c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a680:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a684:	d1d6      	bne.n	40a634 <__cmpdf2+0x1c>
  40a686:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40a68a:	d0d3      	beq.n	40a634 <__cmpdf2+0x1c>
  40a68c:	f85d 0b04 	ldr.w	r0, [sp], #4
  40a690:	4770      	bx	lr
  40a692:	bf00      	nop

0040a694 <__aeabi_cdrcmple>:
  40a694:	4684      	mov	ip, r0
  40a696:	4610      	mov	r0, r2
  40a698:	4662      	mov	r2, ip
  40a69a:	468c      	mov	ip, r1
  40a69c:	4619      	mov	r1, r3
  40a69e:	4663      	mov	r3, ip
  40a6a0:	e000      	b.n	40a6a4 <__aeabi_cdcmpeq>
  40a6a2:	bf00      	nop

0040a6a4 <__aeabi_cdcmpeq>:
  40a6a4:	b501      	push	{r0, lr}
  40a6a6:	f7ff ffb7 	bl	40a618 <__cmpdf2>
  40a6aa:	2800      	cmp	r0, #0
  40a6ac:	bf48      	it	mi
  40a6ae:	f110 0f00 	cmnmi.w	r0, #0
  40a6b2:	bd01      	pop	{r0, pc}

0040a6b4 <__aeabi_dcmpeq>:
  40a6b4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a6b8:	f7ff fff4 	bl	40a6a4 <__aeabi_cdcmpeq>
  40a6bc:	bf0c      	ite	eq
  40a6be:	2001      	moveq	r0, #1
  40a6c0:	2000      	movne	r0, #0
  40a6c2:	f85d fb08 	ldr.w	pc, [sp], #8
  40a6c6:	bf00      	nop

0040a6c8 <__aeabi_dcmplt>:
  40a6c8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a6cc:	f7ff ffea 	bl	40a6a4 <__aeabi_cdcmpeq>
  40a6d0:	bf34      	ite	cc
  40a6d2:	2001      	movcc	r0, #1
  40a6d4:	2000      	movcs	r0, #0
  40a6d6:	f85d fb08 	ldr.w	pc, [sp], #8
  40a6da:	bf00      	nop

0040a6dc <__aeabi_dcmple>:
  40a6dc:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a6e0:	f7ff ffe0 	bl	40a6a4 <__aeabi_cdcmpeq>
  40a6e4:	bf94      	ite	ls
  40a6e6:	2001      	movls	r0, #1
  40a6e8:	2000      	movhi	r0, #0
  40a6ea:	f85d fb08 	ldr.w	pc, [sp], #8
  40a6ee:	bf00      	nop

0040a6f0 <__aeabi_dcmpge>:
  40a6f0:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a6f4:	f7ff ffce 	bl	40a694 <__aeabi_cdrcmple>
  40a6f8:	bf94      	ite	ls
  40a6fa:	2001      	movls	r0, #1
  40a6fc:	2000      	movhi	r0, #0
  40a6fe:	f85d fb08 	ldr.w	pc, [sp], #8
  40a702:	bf00      	nop

0040a704 <__aeabi_dcmpgt>:
  40a704:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a708:	f7ff ffc4 	bl	40a694 <__aeabi_cdrcmple>
  40a70c:	bf34      	ite	cc
  40a70e:	2001      	movcc	r0, #1
  40a710:	2000      	movcs	r0, #0
  40a712:	f85d fb08 	ldr.w	pc, [sp], #8
  40a716:	bf00      	nop

0040a718 <__aeabi_dcmpun>:
  40a718:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a71c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a720:	d102      	bne.n	40a728 <__aeabi_dcmpun+0x10>
  40a722:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40a726:	d10a      	bne.n	40a73e <__aeabi_dcmpun+0x26>
  40a728:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a72c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a730:	d102      	bne.n	40a738 <__aeabi_dcmpun+0x20>
  40a732:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40a736:	d102      	bne.n	40a73e <__aeabi_dcmpun+0x26>
  40a738:	f04f 0000 	mov.w	r0, #0
  40a73c:	4770      	bx	lr
  40a73e:	f04f 0001 	mov.w	r0, #1
  40a742:	4770      	bx	lr

0040a744 <__aeabi_d2iz>:
  40a744:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40a748:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40a74c:	d215      	bcs.n	40a77a <__aeabi_d2iz+0x36>
  40a74e:	d511      	bpl.n	40a774 <__aeabi_d2iz+0x30>
  40a750:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40a754:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40a758:	d912      	bls.n	40a780 <__aeabi_d2iz+0x3c>
  40a75a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40a75e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40a762:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40a766:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40a76a:	fa23 f002 	lsr.w	r0, r3, r2
  40a76e:	bf18      	it	ne
  40a770:	4240      	negne	r0, r0
  40a772:	4770      	bx	lr
  40a774:	f04f 0000 	mov.w	r0, #0
  40a778:	4770      	bx	lr
  40a77a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40a77e:	d105      	bne.n	40a78c <__aeabi_d2iz+0x48>
  40a780:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40a784:	bf08      	it	eq
  40a786:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40a78a:	4770      	bx	lr
  40a78c:	f04f 0000 	mov.w	r0, #0
  40a790:	4770      	bx	lr
  40a792:	bf00      	nop

0040a794 <__aeabi_d2f>:
  40a794:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40a798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  40a79c:	bf24      	itt	cs
  40a79e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40a7a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40a7a6:	d90d      	bls.n	40a7c4 <__aeabi_d2f+0x30>
  40a7a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40a7ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  40a7b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  40a7b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  40a7b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  40a7bc:	bf08      	it	eq
  40a7be:	f020 0001 	biceq.w	r0, r0, #1
  40a7c2:	4770      	bx	lr
  40a7c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  40a7c8:	d121      	bne.n	40a80e <__aeabi_d2f+0x7a>
  40a7ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40a7ce:	bfbc      	itt	lt
  40a7d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  40a7d4:	4770      	bxlt	lr
  40a7d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a7da:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40a7de:	f1c2 0218 	rsb	r2, r2, #24
  40a7e2:	f1c2 0c20 	rsb	ip, r2, #32
  40a7e6:	fa10 f30c 	lsls.w	r3, r0, ip
  40a7ea:	fa20 f002 	lsr.w	r0, r0, r2
  40a7ee:	bf18      	it	ne
  40a7f0:	f040 0001 	orrne.w	r0, r0, #1
  40a7f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40a7f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  40a7fc:	fa03 fc0c 	lsl.w	ip, r3, ip
  40a800:	ea40 000c 	orr.w	r0, r0, ip
  40a804:	fa23 f302 	lsr.w	r3, r3, r2
  40a808:	ea4f 0343 	mov.w	r3, r3, lsl #1
  40a80c:	e7cc      	b.n	40a7a8 <__aeabi_d2f+0x14>
  40a80e:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40a812:	d107      	bne.n	40a824 <__aeabi_d2f+0x90>
  40a814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  40a818:	bf1e      	ittt	ne
  40a81a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40a81e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40a822:	4770      	bxne	lr
  40a824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  40a828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40a82c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40a830:	4770      	bx	lr
  40a832:	bf00      	nop

0040a834 <__aeabi_frsub>:
  40a834:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  40a838:	e002      	b.n	40a840 <__addsf3>
  40a83a:	bf00      	nop

0040a83c <__aeabi_fsub>:
  40a83c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0040a840 <__addsf3>:
  40a840:	0042      	lsls	r2, r0, #1
  40a842:	bf1f      	itttt	ne
  40a844:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  40a848:	ea92 0f03 	teqne	r2, r3
  40a84c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  40a850:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40a854:	d06a      	beq.n	40a92c <__addsf3+0xec>
  40a856:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40a85a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  40a85e:	bfc1      	itttt	gt
  40a860:	18d2      	addgt	r2, r2, r3
  40a862:	4041      	eorgt	r1, r0
  40a864:	4048      	eorgt	r0, r1
  40a866:	4041      	eorgt	r1, r0
  40a868:	bfb8      	it	lt
  40a86a:	425b      	neglt	r3, r3
  40a86c:	2b19      	cmp	r3, #25
  40a86e:	bf88      	it	hi
  40a870:	4770      	bxhi	lr
  40a872:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  40a876:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40a87a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  40a87e:	bf18      	it	ne
  40a880:	4240      	negne	r0, r0
  40a882:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40a886:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  40a88a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  40a88e:	bf18      	it	ne
  40a890:	4249      	negne	r1, r1
  40a892:	ea92 0f03 	teq	r2, r3
  40a896:	d03f      	beq.n	40a918 <__addsf3+0xd8>
  40a898:	f1a2 0201 	sub.w	r2, r2, #1
  40a89c:	fa41 fc03 	asr.w	ip, r1, r3
  40a8a0:	eb10 000c 	adds.w	r0, r0, ip
  40a8a4:	f1c3 0320 	rsb	r3, r3, #32
  40a8a8:	fa01 f103 	lsl.w	r1, r1, r3
  40a8ac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40a8b0:	d502      	bpl.n	40a8b8 <__addsf3+0x78>
  40a8b2:	4249      	negs	r1, r1
  40a8b4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  40a8b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  40a8bc:	d313      	bcc.n	40a8e6 <__addsf3+0xa6>
  40a8be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  40a8c2:	d306      	bcc.n	40a8d2 <__addsf3+0x92>
  40a8c4:	0840      	lsrs	r0, r0, #1
  40a8c6:	ea4f 0131 	mov.w	r1, r1, rrx
  40a8ca:	f102 0201 	add.w	r2, r2, #1
  40a8ce:	2afe      	cmp	r2, #254	; 0xfe
  40a8d0:	d251      	bcs.n	40a976 <__addsf3+0x136>
  40a8d2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  40a8d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40a8da:	bf08      	it	eq
  40a8dc:	f020 0001 	biceq.w	r0, r0, #1
  40a8e0:	ea40 0003 	orr.w	r0, r0, r3
  40a8e4:	4770      	bx	lr
  40a8e6:	0049      	lsls	r1, r1, #1
  40a8e8:	eb40 0000 	adc.w	r0, r0, r0
  40a8ec:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  40a8f0:	f1a2 0201 	sub.w	r2, r2, #1
  40a8f4:	d1ed      	bne.n	40a8d2 <__addsf3+0x92>
  40a8f6:	fab0 fc80 	clz	ip, r0
  40a8fa:	f1ac 0c08 	sub.w	ip, ip, #8
  40a8fe:	ebb2 020c 	subs.w	r2, r2, ip
  40a902:	fa00 f00c 	lsl.w	r0, r0, ip
  40a906:	bfaa      	itet	ge
  40a908:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  40a90c:	4252      	neglt	r2, r2
  40a90e:	4318      	orrge	r0, r3
  40a910:	bfbc      	itt	lt
  40a912:	40d0      	lsrlt	r0, r2
  40a914:	4318      	orrlt	r0, r3
  40a916:	4770      	bx	lr
  40a918:	f092 0f00 	teq	r2, #0
  40a91c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  40a920:	bf06      	itte	eq
  40a922:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  40a926:	3201      	addeq	r2, #1
  40a928:	3b01      	subne	r3, #1
  40a92a:	e7b5      	b.n	40a898 <__addsf3+0x58>
  40a92c:	ea4f 0341 	mov.w	r3, r1, lsl #1
  40a930:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  40a934:	bf18      	it	ne
  40a936:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40a93a:	d021      	beq.n	40a980 <__addsf3+0x140>
  40a93c:	ea92 0f03 	teq	r2, r3
  40a940:	d004      	beq.n	40a94c <__addsf3+0x10c>
  40a942:	f092 0f00 	teq	r2, #0
  40a946:	bf08      	it	eq
  40a948:	4608      	moveq	r0, r1
  40a94a:	4770      	bx	lr
  40a94c:	ea90 0f01 	teq	r0, r1
  40a950:	bf1c      	itt	ne
  40a952:	2000      	movne	r0, #0
  40a954:	4770      	bxne	lr
  40a956:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  40a95a:	d104      	bne.n	40a966 <__addsf3+0x126>
  40a95c:	0040      	lsls	r0, r0, #1
  40a95e:	bf28      	it	cs
  40a960:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  40a964:	4770      	bx	lr
  40a966:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  40a96a:	bf3c      	itt	cc
  40a96c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  40a970:	4770      	bxcc	lr
  40a972:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40a976:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  40a97a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40a97e:	4770      	bx	lr
  40a980:	ea7f 6222 	mvns.w	r2, r2, asr #24
  40a984:	bf16      	itet	ne
  40a986:	4608      	movne	r0, r1
  40a988:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  40a98c:	4601      	movne	r1, r0
  40a98e:	0242      	lsls	r2, r0, #9
  40a990:	bf06      	itte	eq
  40a992:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  40a996:	ea90 0f01 	teqeq	r0, r1
  40a99a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  40a99e:	4770      	bx	lr

0040a9a0 <__aeabi_ui2f>:
  40a9a0:	f04f 0300 	mov.w	r3, #0
  40a9a4:	e004      	b.n	40a9b0 <__aeabi_i2f+0x8>
  40a9a6:	bf00      	nop

0040a9a8 <__aeabi_i2f>:
  40a9a8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  40a9ac:	bf48      	it	mi
  40a9ae:	4240      	negmi	r0, r0
  40a9b0:	ea5f 0c00 	movs.w	ip, r0
  40a9b4:	bf08      	it	eq
  40a9b6:	4770      	bxeq	lr
  40a9b8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  40a9bc:	4601      	mov	r1, r0
  40a9be:	f04f 0000 	mov.w	r0, #0
  40a9c2:	e01c      	b.n	40a9fe <__aeabi_l2f+0x2a>

0040a9c4 <__aeabi_ul2f>:
  40a9c4:	ea50 0201 	orrs.w	r2, r0, r1
  40a9c8:	bf08      	it	eq
  40a9ca:	4770      	bxeq	lr
  40a9cc:	f04f 0300 	mov.w	r3, #0
  40a9d0:	e00a      	b.n	40a9e8 <__aeabi_l2f+0x14>
  40a9d2:	bf00      	nop

0040a9d4 <__aeabi_l2f>:
  40a9d4:	ea50 0201 	orrs.w	r2, r0, r1
  40a9d8:	bf08      	it	eq
  40a9da:	4770      	bxeq	lr
  40a9dc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  40a9e0:	d502      	bpl.n	40a9e8 <__aeabi_l2f+0x14>
  40a9e2:	4240      	negs	r0, r0
  40a9e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a9e8:	ea5f 0c01 	movs.w	ip, r1
  40a9ec:	bf02      	ittt	eq
  40a9ee:	4684      	moveq	ip, r0
  40a9f0:	4601      	moveq	r1, r0
  40a9f2:	2000      	moveq	r0, #0
  40a9f4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  40a9f8:	bf08      	it	eq
  40a9fa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  40a9fe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  40aa02:	fabc f28c 	clz	r2, ip
  40aa06:	3a08      	subs	r2, #8
  40aa08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  40aa0c:	db10      	blt.n	40aa30 <__aeabi_l2f+0x5c>
  40aa0e:	fa01 fc02 	lsl.w	ip, r1, r2
  40aa12:	4463      	add	r3, ip
  40aa14:	fa00 fc02 	lsl.w	ip, r0, r2
  40aa18:	f1c2 0220 	rsb	r2, r2, #32
  40aa1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40aa20:	fa20 f202 	lsr.w	r2, r0, r2
  40aa24:	eb43 0002 	adc.w	r0, r3, r2
  40aa28:	bf08      	it	eq
  40aa2a:	f020 0001 	biceq.w	r0, r0, #1
  40aa2e:	4770      	bx	lr
  40aa30:	f102 0220 	add.w	r2, r2, #32
  40aa34:	fa01 fc02 	lsl.w	ip, r1, r2
  40aa38:	f1c2 0220 	rsb	r2, r2, #32
  40aa3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  40aa40:	fa21 f202 	lsr.w	r2, r1, r2
  40aa44:	eb43 0002 	adc.w	r0, r3, r2
  40aa48:	bf08      	it	eq
  40aa4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  40aa4e:	4770      	bx	lr

0040aa50 <__aeabi_fmul>:
  40aa50:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40aa54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  40aa58:	bf1e      	ittt	ne
  40aa5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40aa5e:	ea92 0f0c 	teqne	r2, ip
  40aa62:	ea93 0f0c 	teqne	r3, ip
  40aa66:	d06f      	beq.n	40ab48 <__aeabi_fmul+0xf8>
  40aa68:	441a      	add	r2, r3
  40aa6a:	ea80 0c01 	eor.w	ip, r0, r1
  40aa6e:	0240      	lsls	r0, r0, #9
  40aa70:	bf18      	it	ne
  40aa72:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  40aa76:	d01e      	beq.n	40aab6 <__aeabi_fmul+0x66>
  40aa78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  40aa7c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  40aa80:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  40aa84:	fba0 3101 	umull	r3, r1, r0, r1
  40aa88:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  40aa8c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  40aa90:	bf3e      	ittt	cc
  40aa92:	0049      	lslcc	r1, r1, #1
  40aa94:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  40aa98:	005b      	lslcc	r3, r3, #1
  40aa9a:	ea40 0001 	orr.w	r0, r0, r1
  40aa9e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  40aaa2:	2afd      	cmp	r2, #253	; 0xfd
  40aaa4:	d81d      	bhi.n	40aae2 <__aeabi_fmul+0x92>
  40aaa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  40aaaa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40aaae:	bf08      	it	eq
  40aab0:	f020 0001 	biceq.w	r0, r0, #1
  40aab4:	4770      	bx	lr
  40aab6:	f090 0f00 	teq	r0, #0
  40aaba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  40aabe:	bf08      	it	eq
  40aac0:	0249      	lsleq	r1, r1, #9
  40aac2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  40aac6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  40aaca:	3a7f      	subs	r2, #127	; 0x7f
  40aacc:	bfc2      	ittt	gt
  40aace:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40aad2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  40aad6:	4770      	bxgt	lr
  40aad8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40aadc:	f04f 0300 	mov.w	r3, #0
  40aae0:	3a01      	subs	r2, #1
  40aae2:	dc5d      	bgt.n	40aba0 <__aeabi_fmul+0x150>
  40aae4:	f112 0f19 	cmn.w	r2, #25
  40aae8:	bfdc      	itt	le
  40aaea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  40aaee:	4770      	bxle	lr
  40aaf0:	f1c2 0200 	rsb	r2, r2, #0
  40aaf4:	0041      	lsls	r1, r0, #1
  40aaf6:	fa21 f102 	lsr.w	r1, r1, r2
  40aafa:	f1c2 0220 	rsb	r2, r2, #32
  40aafe:	fa00 fc02 	lsl.w	ip, r0, r2
  40ab02:	ea5f 0031 	movs.w	r0, r1, rrx
  40ab06:	f140 0000 	adc.w	r0, r0, #0
  40ab0a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  40ab0e:	bf08      	it	eq
  40ab10:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  40ab14:	4770      	bx	lr
  40ab16:	f092 0f00 	teq	r2, #0
  40ab1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  40ab1e:	bf02      	ittt	eq
  40ab20:	0040      	lsleq	r0, r0, #1
  40ab22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  40ab26:	3a01      	subeq	r2, #1
  40ab28:	d0f9      	beq.n	40ab1e <__aeabi_fmul+0xce>
  40ab2a:	ea40 000c 	orr.w	r0, r0, ip
  40ab2e:	f093 0f00 	teq	r3, #0
  40ab32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40ab36:	bf02      	ittt	eq
  40ab38:	0049      	lsleq	r1, r1, #1
  40ab3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  40ab3e:	3b01      	subeq	r3, #1
  40ab40:	d0f9      	beq.n	40ab36 <__aeabi_fmul+0xe6>
  40ab42:	ea41 010c 	orr.w	r1, r1, ip
  40ab46:	e78f      	b.n	40aa68 <__aeabi_fmul+0x18>
  40ab48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  40ab4c:	ea92 0f0c 	teq	r2, ip
  40ab50:	bf18      	it	ne
  40ab52:	ea93 0f0c 	teqne	r3, ip
  40ab56:	d00a      	beq.n	40ab6e <__aeabi_fmul+0x11e>
  40ab58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  40ab5c:	bf18      	it	ne
  40ab5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  40ab62:	d1d8      	bne.n	40ab16 <__aeabi_fmul+0xc6>
  40ab64:	ea80 0001 	eor.w	r0, r0, r1
  40ab68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  40ab6c:	4770      	bx	lr
  40ab6e:	f090 0f00 	teq	r0, #0
  40ab72:	bf17      	itett	ne
  40ab74:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  40ab78:	4608      	moveq	r0, r1
  40ab7a:	f091 0f00 	teqne	r1, #0
  40ab7e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  40ab82:	d014      	beq.n	40abae <__aeabi_fmul+0x15e>
  40ab84:	ea92 0f0c 	teq	r2, ip
  40ab88:	d101      	bne.n	40ab8e <__aeabi_fmul+0x13e>
  40ab8a:	0242      	lsls	r2, r0, #9
  40ab8c:	d10f      	bne.n	40abae <__aeabi_fmul+0x15e>
  40ab8e:	ea93 0f0c 	teq	r3, ip
  40ab92:	d103      	bne.n	40ab9c <__aeabi_fmul+0x14c>
  40ab94:	024b      	lsls	r3, r1, #9
  40ab96:	bf18      	it	ne
  40ab98:	4608      	movne	r0, r1
  40ab9a:	d108      	bne.n	40abae <__aeabi_fmul+0x15e>
  40ab9c:	ea80 0001 	eor.w	r0, r0, r1
  40aba0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  40aba4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40aba8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40abac:	4770      	bx	lr
  40abae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40abb2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  40abb6:	4770      	bx	lr

0040abb8 <__aeabi_fdiv>:
  40abb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40abbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  40abc0:	bf1e      	ittt	ne
  40abc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40abc6:	ea92 0f0c 	teqne	r2, ip
  40abca:	ea93 0f0c 	teqne	r3, ip
  40abce:	d069      	beq.n	40aca4 <__aeabi_fdiv+0xec>
  40abd0:	eba2 0203 	sub.w	r2, r2, r3
  40abd4:	ea80 0c01 	eor.w	ip, r0, r1
  40abd8:	0249      	lsls	r1, r1, #9
  40abda:	ea4f 2040 	mov.w	r0, r0, lsl #9
  40abde:	d037      	beq.n	40ac50 <__aeabi_fdiv+0x98>
  40abe0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40abe4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  40abe8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  40abec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  40abf0:	428b      	cmp	r3, r1
  40abf2:	bf38      	it	cc
  40abf4:	005b      	lslcc	r3, r3, #1
  40abf6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  40abfa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  40abfe:	428b      	cmp	r3, r1
  40ac00:	bf24      	itt	cs
  40ac02:	1a5b      	subcs	r3, r3, r1
  40ac04:	ea40 000c 	orrcs.w	r0, r0, ip
  40ac08:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  40ac0c:	bf24      	itt	cs
  40ac0e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  40ac12:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40ac16:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  40ac1a:	bf24      	itt	cs
  40ac1c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  40ac20:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40ac24:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  40ac28:	bf24      	itt	cs
  40ac2a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  40ac2e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40ac32:	011b      	lsls	r3, r3, #4
  40ac34:	bf18      	it	ne
  40ac36:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  40ac3a:	d1e0      	bne.n	40abfe <__aeabi_fdiv+0x46>
  40ac3c:	2afd      	cmp	r2, #253	; 0xfd
  40ac3e:	f63f af50 	bhi.w	40aae2 <__aeabi_fmul+0x92>
  40ac42:	428b      	cmp	r3, r1
  40ac44:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40ac48:	bf08      	it	eq
  40ac4a:	f020 0001 	biceq.w	r0, r0, #1
  40ac4e:	4770      	bx	lr
  40ac50:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  40ac54:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  40ac58:	327f      	adds	r2, #127	; 0x7f
  40ac5a:	bfc2      	ittt	gt
  40ac5c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40ac60:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  40ac64:	4770      	bxgt	lr
  40ac66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40ac6a:	f04f 0300 	mov.w	r3, #0
  40ac6e:	3a01      	subs	r2, #1
  40ac70:	e737      	b.n	40aae2 <__aeabi_fmul+0x92>
  40ac72:	f092 0f00 	teq	r2, #0
  40ac76:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  40ac7a:	bf02      	ittt	eq
  40ac7c:	0040      	lsleq	r0, r0, #1
  40ac7e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  40ac82:	3a01      	subeq	r2, #1
  40ac84:	d0f9      	beq.n	40ac7a <__aeabi_fdiv+0xc2>
  40ac86:	ea40 000c 	orr.w	r0, r0, ip
  40ac8a:	f093 0f00 	teq	r3, #0
  40ac8e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40ac92:	bf02      	ittt	eq
  40ac94:	0049      	lsleq	r1, r1, #1
  40ac96:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  40ac9a:	3b01      	subeq	r3, #1
  40ac9c:	d0f9      	beq.n	40ac92 <__aeabi_fdiv+0xda>
  40ac9e:	ea41 010c 	orr.w	r1, r1, ip
  40aca2:	e795      	b.n	40abd0 <__aeabi_fdiv+0x18>
  40aca4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  40aca8:	ea92 0f0c 	teq	r2, ip
  40acac:	d108      	bne.n	40acc0 <__aeabi_fdiv+0x108>
  40acae:	0242      	lsls	r2, r0, #9
  40acb0:	f47f af7d 	bne.w	40abae <__aeabi_fmul+0x15e>
  40acb4:	ea93 0f0c 	teq	r3, ip
  40acb8:	f47f af70 	bne.w	40ab9c <__aeabi_fmul+0x14c>
  40acbc:	4608      	mov	r0, r1
  40acbe:	e776      	b.n	40abae <__aeabi_fmul+0x15e>
  40acc0:	ea93 0f0c 	teq	r3, ip
  40acc4:	d104      	bne.n	40acd0 <__aeabi_fdiv+0x118>
  40acc6:	024b      	lsls	r3, r1, #9
  40acc8:	f43f af4c 	beq.w	40ab64 <__aeabi_fmul+0x114>
  40accc:	4608      	mov	r0, r1
  40acce:	e76e      	b.n	40abae <__aeabi_fmul+0x15e>
  40acd0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  40acd4:	bf18      	it	ne
  40acd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  40acda:	d1ca      	bne.n	40ac72 <__aeabi_fdiv+0xba>
  40acdc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  40ace0:	f47f af5c 	bne.w	40ab9c <__aeabi_fmul+0x14c>
  40ace4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  40ace8:	f47f af3c 	bne.w	40ab64 <__aeabi_fmul+0x114>
  40acec:	e75f      	b.n	40abae <__aeabi_fmul+0x15e>
  40acee:	bf00      	nop

0040acf0 <__gesf2>:
  40acf0:	f04f 3cff 	mov.w	ip, #4294967295
  40acf4:	e006      	b.n	40ad04 <__cmpsf2+0x4>
  40acf6:	bf00      	nop

0040acf8 <__lesf2>:
  40acf8:	f04f 0c01 	mov.w	ip, #1
  40acfc:	e002      	b.n	40ad04 <__cmpsf2+0x4>
  40acfe:	bf00      	nop

0040ad00 <__cmpsf2>:
  40ad00:	f04f 0c01 	mov.w	ip, #1
  40ad04:	f84d cd04 	str.w	ip, [sp, #-4]!
  40ad08:	ea4f 0240 	mov.w	r2, r0, lsl #1
  40ad0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
  40ad10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  40ad14:	bf18      	it	ne
  40ad16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40ad1a:	d011      	beq.n	40ad40 <__cmpsf2+0x40>
  40ad1c:	b001      	add	sp, #4
  40ad1e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  40ad22:	bf18      	it	ne
  40ad24:	ea90 0f01 	teqne	r0, r1
  40ad28:	bf58      	it	pl
  40ad2a:	ebb2 0003 	subspl.w	r0, r2, r3
  40ad2e:	bf88      	it	hi
  40ad30:	17c8      	asrhi	r0, r1, #31
  40ad32:	bf38      	it	cc
  40ad34:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  40ad38:	bf18      	it	ne
  40ad3a:	f040 0001 	orrne.w	r0, r0, #1
  40ad3e:	4770      	bx	lr
  40ad40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  40ad44:	d102      	bne.n	40ad4c <__cmpsf2+0x4c>
  40ad46:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  40ad4a:	d105      	bne.n	40ad58 <__cmpsf2+0x58>
  40ad4c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  40ad50:	d1e4      	bne.n	40ad1c <__cmpsf2+0x1c>
  40ad52:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  40ad56:	d0e1      	beq.n	40ad1c <__cmpsf2+0x1c>
  40ad58:	f85d 0b04 	ldr.w	r0, [sp], #4
  40ad5c:	4770      	bx	lr
  40ad5e:	bf00      	nop

0040ad60 <__aeabi_cfrcmple>:
  40ad60:	4684      	mov	ip, r0
  40ad62:	4608      	mov	r0, r1
  40ad64:	4661      	mov	r1, ip
  40ad66:	e7ff      	b.n	40ad68 <__aeabi_cfcmpeq>

0040ad68 <__aeabi_cfcmpeq>:
  40ad68:	b50f      	push	{r0, r1, r2, r3, lr}
  40ad6a:	f7ff ffc9 	bl	40ad00 <__cmpsf2>
  40ad6e:	2800      	cmp	r0, #0
  40ad70:	bf48      	it	mi
  40ad72:	f110 0f00 	cmnmi.w	r0, #0
  40ad76:	bd0f      	pop	{r0, r1, r2, r3, pc}

0040ad78 <__aeabi_fcmpeq>:
  40ad78:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ad7c:	f7ff fff4 	bl	40ad68 <__aeabi_cfcmpeq>
  40ad80:	bf0c      	ite	eq
  40ad82:	2001      	moveq	r0, #1
  40ad84:	2000      	movne	r0, #0
  40ad86:	f85d fb08 	ldr.w	pc, [sp], #8
  40ad8a:	bf00      	nop

0040ad8c <__aeabi_fcmplt>:
  40ad8c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ad90:	f7ff ffea 	bl	40ad68 <__aeabi_cfcmpeq>
  40ad94:	bf34      	ite	cc
  40ad96:	2001      	movcc	r0, #1
  40ad98:	2000      	movcs	r0, #0
  40ad9a:	f85d fb08 	ldr.w	pc, [sp], #8
  40ad9e:	bf00      	nop

0040ada0 <__aeabi_fcmple>:
  40ada0:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ada4:	f7ff ffe0 	bl	40ad68 <__aeabi_cfcmpeq>
  40ada8:	bf94      	ite	ls
  40adaa:	2001      	movls	r0, #1
  40adac:	2000      	movhi	r0, #0
  40adae:	f85d fb08 	ldr.w	pc, [sp], #8
  40adb2:	bf00      	nop

0040adb4 <__aeabi_fcmpge>:
  40adb4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40adb8:	f7ff ffd2 	bl	40ad60 <__aeabi_cfrcmple>
  40adbc:	bf94      	ite	ls
  40adbe:	2001      	movls	r0, #1
  40adc0:	2000      	movhi	r0, #0
  40adc2:	f85d fb08 	ldr.w	pc, [sp], #8
  40adc6:	bf00      	nop

0040adc8 <__aeabi_fcmpgt>:
  40adc8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40adcc:	f7ff ffc8 	bl	40ad60 <__aeabi_cfrcmple>
  40add0:	bf34      	ite	cc
  40add2:	2001      	movcc	r0, #1
  40add4:	2000      	movcs	r0, #0
  40add6:	f85d fb08 	ldr.w	pc, [sp], #8
  40adda:	bf00      	nop

0040addc <__aeabi_f2iz>:
  40addc:	ea4f 0240 	mov.w	r2, r0, lsl #1
  40ade0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  40ade4:	d30f      	bcc.n	40ae06 <__aeabi_f2iz+0x2a>
  40ade6:	f04f 039e 	mov.w	r3, #158	; 0x9e
  40adea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  40adee:	d90d      	bls.n	40ae0c <__aeabi_f2iz+0x30>
  40adf0:	ea4f 2300 	mov.w	r3, r0, lsl #8
  40adf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40adf8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  40adfc:	fa23 f002 	lsr.w	r0, r3, r2
  40ae00:	bf18      	it	ne
  40ae02:	4240      	negne	r0, r0
  40ae04:	4770      	bx	lr
  40ae06:	f04f 0000 	mov.w	r0, #0
  40ae0a:	4770      	bx	lr
  40ae0c:	f112 0f61 	cmn.w	r2, #97	; 0x61
  40ae10:	d101      	bne.n	40ae16 <__aeabi_f2iz+0x3a>
  40ae12:	0242      	lsls	r2, r0, #9
  40ae14:	d105      	bne.n	40ae22 <__aeabi_f2iz+0x46>
  40ae16:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  40ae1a:	bf08      	it	eq
  40ae1c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40ae20:	4770      	bx	lr
  40ae22:	f04f 0000 	mov.w	r0, #0
  40ae26:	4770      	bx	lr

0040ae28 <__aeabi_uldivmod>:
  40ae28:	b953      	cbnz	r3, 40ae40 <__aeabi_uldivmod+0x18>
  40ae2a:	b94a      	cbnz	r2, 40ae40 <__aeabi_uldivmod+0x18>
  40ae2c:	2900      	cmp	r1, #0
  40ae2e:	bf08      	it	eq
  40ae30:	2800      	cmpeq	r0, #0
  40ae32:	bf1c      	itt	ne
  40ae34:	f04f 31ff 	movne.w	r1, #4294967295
  40ae38:	f04f 30ff 	movne.w	r0, #4294967295
  40ae3c:	f000 b97e 	b.w	40b13c <__aeabi_idiv0>
  40ae40:	f1ad 0c08 	sub.w	ip, sp, #8
  40ae44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40ae48:	f000 f806 	bl	40ae58 <__udivmoddi4>
  40ae4c:	f8dd e004 	ldr.w	lr, [sp, #4]
  40ae50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40ae54:	b004      	add	sp, #16
  40ae56:	4770      	bx	lr

0040ae58 <__udivmoddi4>:
  40ae58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40ae5c:	468c      	mov	ip, r1
  40ae5e:	460e      	mov	r6, r1
  40ae60:	4604      	mov	r4, r0
  40ae62:	9d08      	ldr	r5, [sp, #32]
  40ae64:	2b00      	cmp	r3, #0
  40ae66:	d150      	bne.n	40af0a <__udivmoddi4+0xb2>
  40ae68:	428a      	cmp	r2, r1
  40ae6a:	4617      	mov	r7, r2
  40ae6c:	d96c      	bls.n	40af48 <__udivmoddi4+0xf0>
  40ae6e:	fab2 fe82 	clz	lr, r2
  40ae72:	f1be 0f00 	cmp.w	lr, #0
  40ae76:	d00b      	beq.n	40ae90 <__udivmoddi4+0x38>
  40ae78:	f1ce 0420 	rsb	r4, lr, #32
  40ae7c:	fa20 f404 	lsr.w	r4, r0, r4
  40ae80:	fa01 f60e 	lsl.w	r6, r1, lr
  40ae84:	ea44 0c06 	orr.w	ip, r4, r6
  40ae88:	fa02 f70e 	lsl.w	r7, r2, lr
  40ae8c:	fa00 f40e 	lsl.w	r4, r0, lr
  40ae90:	ea4f 4917 	mov.w	r9, r7, lsr #16
  40ae94:	0c22      	lsrs	r2, r4, #16
  40ae96:	fbbc f0f9 	udiv	r0, ip, r9
  40ae9a:	fa1f f887 	uxth.w	r8, r7
  40ae9e:	fb09 c610 	mls	r6, r9, r0, ip
  40aea2:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  40aea6:	fb00 f308 	mul.w	r3, r0, r8
  40aeaa:	42b3      	cmp	r3, r6
  40aeac:	d909      	bls.n	40aec2 <__udivmoddi4+0x6a>
  40aeae:	19f6      	adds	r6, r6, r7
  40aeb0:	f100 32ff 	add.w	r2, r0, #4294967295
  40aeb4:	f080 8122 	bcs.w	40b0fc <__udivmoddi4+0x2a4>
  40aeb8:	42b3      	cmp	r3, r6
  40aeba:	f240 811f 	bls.w	40b0fc <__udivmoddi4+0x2a4>
  40aebe:	3802      	subs	r0, #2
  40aec0:	443e      	add	r6, r7
  40aec2:	1af6      	subs	r6, r6, r3
  40aec4:	b2a2      	uxth	r2, r4
  40aec6:	fbb6 f3f9 	udiv	r3, r6, r9
  40aeca:	fb09 6613 	mls	r6, r9, r3, r6
  40aece:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40aed2:	fb03 f808 	mul.w	r8, r3, r8
  40aed6:	45a0      	cmp	r8, r4
  40aed8:	d909      	bls.n	40aeee <__udivmoddi4+0x96>
  40aeda:	19e4      	adds	r4, r4, r7
  40aedc:	f103 32ff 	add.w	r2, r3, #4294967295
  40aee0:	f080 810a 	bcs.w	40b0f8 <__udivmoddi4+0x2a0>
  40aee4:	45a0      	cmp	r8, r4
  40aee6:	f240 8107 	bls.w	40b0f8 <__udivmoddi4+0x2a0>
  40aeea:	3b02      	subs	r3, #2
  40aeec:	443c      	add	r4, r7
  40aeee:	ebc8 0404 	rsb	r4, r8, r4
  40aef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40aef6:	2100      	movs	r1, #0
  40aef8:	2d00      	cmp	r5, #0
  40aefa:	d062      	beq.n	40afc2 <__udivmoddi4+0x16a>
  40aefc:	fa24 f40e 	lsr.w	r4, r4, lr
  40af00:	2300      	movs	r3, #0
  40af02:	602c      	str	r4, [r5, #0]
  40af04:	606b      	str	r3, [r5, #4]
  40af06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40af0a:	428b      	cmp	r3, r1
  40af0c:	d907      	bls.n	40af1e <__udivmoddi4+0xc6>
  40af0e:	2d00      	cmp	r5, #0
  40af10:	d055      	beq.n	40afbe <__udivmoddi4+0x166>
  40af12:	2100      	movs	r1, #0
  40af14:	e885 0041 	stmia.w	r5, {r0, r6}
  40af18:	4608      	mov	r0, r1
  40af1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40af1e:	fab3 f183 	clz	r1, r3
  40af22:	2900      	cmp	r1, #0
  40af24:	f040 8090 	bne.w	40b048 <__udivmoddi4+0x1f0>
  40af28:	42b3      	cmp	r3, r6
  40af2a:	d302      	bcc.n	40af32 <__udivmoddi4+0xda>
  40af2c:	4282      	cmp	r2, r0
  40af2e:	f200 80f8 	bhi.w	40b122 <__udivmoddi4+0x2ca>
  40af32:	1a84      	subs	r4, r0, r2
  40af34:	eb66 0603 	sbc.w	r6, r6, r3
  40af38:	2001      	movs	r0, #1
  40af3a:	46b4      	mov	ip, r6
  40af3c:	2d00      	cmp	r5, #0
  40af3e:	d040      	beq.n	40afc2 <__udivmoddi4+0x16a>
  40af40:	e885 1010 	stmia.w	r5, {r4, ip}
  40af44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40af48:	b912      	cbnz	r2, 40af50 <__udivmoddi4+0xf8>
  40af4a:	2701      	movs	r7, #1
  40af4c:	fbb7 f7f2 	udiv	r7, r7, r2
  40af50:	fab7 fe87 	clz	lr, r7
  40af54:	f1be 0f00 	cmp.w	lr, #0
  40af58:	d135      	bne.n	40afc6 <__udivmoddi4+0x16e>
  40af5a:	1bf3      	subs	r3, r6, r7
  40af5c:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40af60:	fa1f fc87 	uxth.w	ip, r7
  40af64:	2101      	movs	r1, #1
  40af66:	fbb3 f0f8 	udiv	r0, r3, r8
  40af6a:	0c22      	lsrs	r2, r4, #16
  40af6c:	fb08 3610 	mls	r6, r8, r0, r3
  40af70:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  40af74:	fb0c f300 	mul.w	r3, ip, r0
  40af78:	42b3      	cmp	r3, r6
  40af7a:	d907      	bls.n	40af8c <__udivmoddi4+0x134>
  40af7c:	19f6      	adds	r6, r6, r7
  40af7e:	f100 32ff 	add.w	r2, r0, #4294967295
  40af82:	d202      	bcs.n	40af8a <__udivmoddi4+0x132>
  40af84:	42b3      	cmp	r3, r6
  40af86:	f200 80ce 	bhi.w	40b126 <__udivmoddi4+0x2ce>
  40af8a:	4610      	mov	r0, r2
  40af8c:	1af6      	subs	r6, r6, r3
  40af8e:	b2a2      	uxth	r2, r4
  40af90:	fbb6 f3f8 	udiv	r3, r6, r8
  40af94:	fb08 6613 	mls	r6, r8, r3, r6
  40af98:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40af9c:	fb0c fc03 	mul.w	ip, ip, r3
  40afa0:	45a4      	cmp	ip, r4
  40afa2:	d907      	bls.n	40afb4 <__udivmoddi4+0x15c>
  40afa4:	19e4      	adds	r4, r4, r7
  40afa6:	f103 32ff 	add.w	r2, r3, #4294967295
  40afaa:	d202      	bcs.n	40afb2 <__udivmoddi4+0x15a>
  40afac:	45a4      	cmp	ip, r4
  40afae:	f200 80b5 	bhi.w	40b11c <__udivmoddi4+0x2c4>
  40afb2:	4613      	mov	r3, r2
  40afb4:	ebcc 0404 	rsb	r4, ip, r4
  40afb8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40afbc:	e79c      	b.n	40aef8 <__udivmoddi4+0xa0>
  40afbe:	4629      	mov	r1, r5
  40afc0:	4628      	mov	r0, r5
  40afc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40afc6:	f1ce 0120 	rsb	r1, lr, #32
  40afca:	fa06 f30e 	lsl.w	r3, r6, lr
  40afce:	fa07 f70e 	lsl.w	r7, r7, lr
  40afd2:	fa20 f901 	lsr.w	r9, r0, r1
  40afd6:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40afda:	40ce      	lsrs	r6, r1
  40afdc:	ea49 0903 	orr.w	r9, r9, r3
  40afe0:	fbb6 faf8 	udiv	sl, r6, r8
  40afe4:	ea4f 4419 	mov.w	r4, r9, lsr #16
  40afe8:	fb08 661a 	mls	r6, r8, sl, r6
  40afec:	fa1f fc87 	uxth.w	ip, r7
  40aff0:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  40aff4:	fb0a f20c 	mul.w	r2, sl, ip
  40aff8:	429a      	cmp	r2, r3
  40affa:	fa00 f40e 	lsl.w	r4, r0, lr
  40affe:	d90a      	bls.n	40b016 <__udivmoddi4+0x1be>
  40b000:	19db      	adds	r3, r3, r7
  40b002:	f10a 31ff 	add.w	r1, sl, #4294967295
  40b006:	f080 8087 	bcs.w	40b118 <__udivmoddi4+0x2c0>
  40b00a:	429a      	cmp	r2, r3
  40b00c:	f240 8084 	bls.w	40b118 <__udivmoddi4+0x2c0>
  40b010:	f1aa 0a02 	sub.w	sl, sl, #2
  40b014:	443b      	add	r3, r7
  40b016:	1a9b      	subs	r3, r3, r2
  40b018:	fa1f f989 	uxth.w	r9, r9
  40b01c:	fbb3 f1f8 	udiv	r1, r3, r8
  40b020:	fb08 3311 	mls	r3, r8, r1, r3
  40b024:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  40b028:	fb01 f60c 	mul.w	r6, r1, ip
  40b02c:	429e      	cmp	r6, r3
  40b02e:	d907      	bls.n	40b040 <__udivmoddi4+0x1e8>
  40b030:	19db      	adds	r3, r3, r7
  40b032:	f101 32ff 	add.w	r2, r1, #4294967295
  40b036:	d26b      	bcs.n	40b110 <__udivmoddi4+0x2b8>
  40b038:	429e      	cmp	r6, r3
  40b03a:	d969      	bls.n	40b110 <__udivmoddi4+0x2b8>
  40b03c:	3902      	subs	r1, #2
  40b03e:	443b      	add	r3, r7
  40b040:	1b9b      	subs	r3, r3, r6
  40b042:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  40b046:	e78e      	b.n	40af66 <__udivmoddi4+0x10e>
  40b048:	f1c1 0e20 	rsb	lr, r1, #32
  40b04c:	fa22 f40e 	lsr.w	r4, r2, lr
  40b050:	408b      	lsls	r3, r1
  40b052:	4323      	orrs	r3, r4
  40b054:	fa20 f70e 	lsr.w	r7, r0, lr
  40b058:	fa06 f401 	lsl.w	r4, r6, r1
  40b05c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40b060:	fa26 f60e 	lsr.w	r6, r6, lr
  40b064:	433c      	orrs	r4, r7
  40b066:	fbb6 f9fc 	udiv	r9, r6, ip
  40b06a:	0c27      	lsrs	r7, r4, #16
  40b06c:	fb0c 6619 	mls	r6, ip, r9, r6
  40b070:	fa1f f883 	uxth.w	r8, r3
  40b074:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  40b078:	fb09 f708 	mul.w	r7, r9, r8
  40b07c:	42b7      	cmp	r7, r6
  40b07e:	fa02 f201 	lsl.w	r2, r2, r1
  40b082:	fa00 fa01 	lsl.w	sl, r0, r1
  40b086:	d908      	bls.n	40b09a <__udivmoddi4+0x242>
  40b088:	18f6      	adds	r6, r6, r3
  40b08a:	f109 30ff 	add.w	r0, r9, #4294967295
  40b08e:	d241      	bcs.n	40b114 <__udivmoddi4+0x2bc>
  40b090:	42b7      	cmp	r7, r6
  40b092:	d93f      	bls.n	40b114 <__udivmoddi4+0x2bc>
  40b094:	f1a9 0902 	sub.w	r9, r9, #2
  40b098:	441e      	add	r6, r3
  40b09a:	1bf6      	subs	r6, r6, r7
  40b09c:	b2a0      	uxth	r0, r4
  40b09e:	fbb6 f4fc 	udiv	r4, r6, ip
  40b0a2:	fb0c 6614 	mls	r6, ip, r4, r6
  40b0a6:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  40b0aa:	fb04 f808 	mul.w	r8, r4, r8
  40b0ae:	45b8      	cmp	r8, r7
  40b0b0:	d907      	bls.n	40b0c2 <__udivmoddi4+0x26a>
  40b0b2:	18ff      	adds	r7, r7, r3
  40b0b4:	f104 30ff 	add.w	r0, r4, #4294967295
  40b0b8:	d228      	bcs.n	40b10c <__udivmoddi4+0x2b4>
  40b0ba:	45b8      	cmp	r8, r7
  40b0bc:	d926      	bls.n	40b10c <__udivmoddi4+0x2b4>
  40b0be:	3c02      	subs	r4, #2
  40b0c0:	441f      	add	r7, r3
  40b0c2:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  40b0c6:	ebc8 0707 	rsb	r7, r8, r7
  40b0ca:	fba0 8902 	umull	r8, r9, r0, r2
  40b0ce:	454f      	cmp	r7, r9
  40b0d0:	4644      	mov	r4, r8
  40b0d2:	464e      	mov	r6, r9
  40b0d4:	d314      	bcc.n	40b100 <__udivmoddi4+0x2a8>
  40b0d6:	d029      	beq.n	40b12c <__udivmoddi4+0x2d4>
  40b0d8:	b365      	cbz	r5, 40b134 <__udivmoddi4+0x2dc>
  40b0da:	ebba 0304 	subs.w	r3, sl, r4
  40b0de:	eb67 0706 	sbc.w	r7, r7, r6
  40b0e2:	fa07 fe0e 	lsl.w	lr, r7, lr
  40b0e6:	40cb      	lsrs	r3, r1
  40b0e8:	40cf      	lsrs	r7, r1
  40b0ea:	ea4e 0303 	orr.w	r3, lr, r3
  40b0ee:	e885 0088 	stmia.w	r5, {r3, r7}
  40b0f2:	2100      	movs	r1, #0
  40b0f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b0f8:	4613      	mov	r3, r2
  40b0fa:	e6f8      	b.n	40aeee <__udivmoddi4+0x96>
  40b0fc:	4610      	mov	r0, r2
  40b0fe:	e6e0      	b.n	40aec2 <__udivmoddi4+0x6a>
  40b100:	ebb8 0402 	subs.w	r4, r8, r2
  40b104:	eb69 0603 	sbc.w	r6, r9, r3
  40b108:	3801      	subs	r0, #1
  40b10a:	e7e5      	b.n	40b0d8 <__udivmoddi4+0x280>
  40b10c:	4604      	mov	r4, r0
  40b10e:	e7d8      	b.n	40b0c2 <__udivmoddi4+0x26a>
  40b110:	4611      	mov	r1, r2
  40b112:	e795      	b.n	40b040 <__udivmoddi4+0x1e8>
  40b114:	4681      	mov	r9, r0
  40b116:	e7c0      	b.n	40b09a <__udivmoddi4+0x242>
  40b118:	468a      	mov	sl, r1
  40b11a:	e77c      	b.n	40b016 <__udivmoddi4+0x1be>
  40b11c:	3b02      	subs	r3, #2
  40b11e:	443c      	add	r4, r7
  40b120:	e748      	b.n	40afb4 <__udivmoddi4+0x15c>
  40b122:	4608      	mov	r0, r1
  40b124:	e70a      	b.n	40af3c <__udivmoddi4+0xe4>
  40b126:	3802      	subs	r0, #2
  40b128:	443e      	add	r6, r7
  40b12a:	e72f      	b.n	40af8c <__udivmoddi4+0x134>
  40b12c:	45c2      	cmp	sl, r8
  40b12e:	d3e7      	bcc.n	40b100 <__udivmoddi4+0x2a8>
  40b130:	463e      	mov	r6, r7
  40b132:	e7d1      	b.n	40b0d8 <__udivmoddi4+0x280>
  40b134:	4629      	mov	r1, r5
  40b136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b13a:	bf00      	nop

0040b13c <__aeabi_idiv0>:
  40b13c:	4770      	bx	lr
  40b13e:	bf00      	nop

0040b140 <__errno>:
  40b140:	4b01      	ldr	r3, [pc, #4]	; (40b148 <__errno+0x8>)
  40b142:	6818      	ldr	r0, [r3, #0]
  40b144:	4770      	bx	lr
  40b146:	bf00      	nop
  40b148:	20000460 	.word	0x20000460

0040b14c <__libc_init_array>:
  40b14c:	b570      	push	{r4, r5, r6, lr}
  40b14e:	4e0f      	ldr	r6, [pc, #60]	; (40b18c <__libc_init_array+0x40>)
  40b150:	4d0f      	ldr	r5, [pc, #60]	; (40b190 <__libc_init_array+0x44>)
  40b152:	1b76      	subs	r6, r6, r5
  40b154:	10b6      	asrs	r6, r6, #2
  40b156:	bf18      	it	ne
  40b158:	2400      	movne	r4, #0
  40b15a:	d005      	beq.n	40b168 <__libc_init_array+0x1c>
  40b15c:	3401      	adds	r4, #1
  40b15e:	f855 3b04 	ldr.w	r3, [r5], #4
  40b162:	4798      	blx	r3
  40b164:	42a6      	cmp	r6, r4
  40b166:	d1f9      	bne.n	40b15c <__libc_init_array+0x10>
  40b168:	4e0a      	ldr	r6, [pc, #40]	; (40b194 <__libc_init_array+0x48>)
  40b16a:	4d0b      	ldr	r5, [pc, #44]	; (40b198 <__libc_init_array+0x4c>)
  40b16c:	1b76      	subs	r6, r6, r5
  40b16e:	f000 fb3f 	bl	40b7f0 <_init>
  40b172:	10b6      	asrs	r6, r6, #2
  40b174:	bf18      	it	ne
  40b176:	2400      	movne	r4, #0
  40b178:	d006      	beq.n	40b188 <__libc_init_array+0x3c>
  40b17a:	3401      	adds	r4, #1
  40b17c:	f855 3b04 	ldr.w	r3, [r5], #4
  40b180:	4798      	blx	r3
  40b182:	42a6      	cmp	r6, r4
  40b184:	d1f9      	bne.n	40b17a <__libc_init_array+0x2e>
  40b186:	bd70      	pop	{r4, r5, r6, pc}
  40b188:	bd70      	pop	{r4, r5, r6, pc}
  40b18a:	bf00      	nop
  40b18c:	0040b7fc 	.word	0x0040b7fc
  40b190:	0040b7fc 	.word	0x0040b7fc
  40b194:	0040b804 	.word	0x0040b804
  40b198:	0040b7fc 	.word	0x0040b7fc

0040b19c <memcmp>:
  40b19c:	2a03      	cmp	r2, #3
  40b19e:	b470      	push	{r4, r5, r6}
  40b1a0:	d926      	bls.n	40b1f0 <memcmp+0x54>
  40b1a2:	ea40 0301 	orr.w	r3, r0, r1
  40b1a6:	079b      	lsls	r3, r3, #30
  40b1a8:	d011      	beq.n	40b1ce <memcmp+0x32>
  40b1aa:	7804      	ldrb	r4, [r0, #0]
  40b1ac:	780d      	ldrb	r5, [r1, #0]
  40b1ae:	42ac      	cmp	r4, r5
  40b1b0:	d122      	bne.n	40b1f8 <memcmp+0x5c>
  40b1b2:	4402      	add	r2, r0
  40b1b4:	1c43      	adds	r3, r0, #1
  40b1b6:	e005      	b.n	40b1c4 <memcmp+0x28>
  40b1b8:	f813 4b01 	ldrb.w	r4, [r3], #1
  40b1bc:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  40b1c0:	42ac      	cmp	r4, r5
  40b1c2:	d119      	bne.n	40b1f8 <memcmp+0x5c>
  40b1c4:	4293      	cmp	r3, r2
  40b1c6:	d1f7      	bne.n	40b1b8 <memcmp+0x1c>
  40b1c8:	2000      	movs	r0, #0
  40b1ca:	bc70      	pop	{r4, r5, r6}
  40b1cc:	4770      	bx	lr
  40b1ce:	460c      	mov	r4, r1
  40b1d0:	4603      	mov	r3, r0
  40b1d2:	681e      	ldr	r6, [r3, #0]
  40b1d4:	6825      	ldr	r5, [r4, #0]
  40b1d6:	42ae      	cmp	r6, r5
  40b1d8:	4618      	mov	r0, r3
  40b1da:	4621      	mov	r1, r4
  40b1dc:	f103 0304 	add.w	r3, r3, #4
  40b1e0:	f104 0404 	add.w	r4, r4, #4
  40b1e4:	d1e1      	bne.n	40b1aa <memcmp+0xe>
  40b1e6:	3a04      	subs	r2, #4
  40b1e8:	2a03      	cmp	r2, #3
  40b1ea:	4618      	mov	r0, r3
  40b1ec:	4621      	mov	r1, r4
  40b1ee:	d8f0      	bhi.n	40b1d2 <memcmp+0x36>
  40b1f0:	2a00      	cmp	r2, #0
  40b1f2:	d1da      	bne.n	40b1aa <memcmp+0xe>
  40b1f4:	4610      	mov	r0, r2
  40b1f6:	e7e8      	b.n	40b1ca <memcmp+0x2e>
  40b1f8:	1b60      	subs	r0, r4, r5
  40b1fa:	bc70      	pop	{r4, r5, r6}
  40b1fc:	4770      	bx	lr
  40b1fe:	bf00      	nop

0040b200 <memcpy>:
  40b200:	4684      	mov	ip, r0
  40b202:	ea41 0300 	orr.w	r3, r1, r0
  40b206:	f013 0303 	ands.w	r3, r3, #3
  40b20a:	d16d      	bne.n	40b2e8 <memcpy+0xe8>
  40b20c:	3a40      	subs	r2, #64	; 0x40
  40b20e:	d341      	bcc.n	40b294 <memcpy+0x94>
  40b210:	f851 3b04 	ldr.w	r3, [r1], #4
  40b214:	f840 3b04 	str.w	r3, [r0], #4
  40b218:	f851 3b04 	ldr.w	r3, [r1], #4
  40b21c:	f840 3b04 	str.w	r3, [r0], #4
  40b220:	f851 3b04 	ldr.w	r3, [r1], #4
  40b224:	f840 3b04 	str.w	r3, [r0], #4
  40b228:	f851 3b04 	ldr.w	r3, [r1], #4
  40b22c:	f840 3b04 	str.w	r3, [r0], #4
  40b230:	f851 3b04 	ldr.w	r3, [r1], #4
  40b234:	f840 3b04 	str.w	r3, [r0], #4
  40b238:	f851 3b04 	ldr.w	r3, [r1], #4
  40b23c:	f840 3b04 	str.w	r3, [r0], #4
  40b240:	f851 3b04 	ldr.w	r3, [r1], #4
  40b244:	f840 3b04 	str.w	r3, [r0], #4
  40b248:	f851 3b04 	ldr.w	r3, [r1], #4
  40b24c:	f840 3b04 	str.w	r3, [r0], #4
  40b250:	f851 3b04 	ldr.w	r3, [r1], #4
  40b254:	f840 3b04 	str.w	r3, [r0], #4
  40b258:	f851 3b04 	ldr.w	r3, [r1], #4
  40b25c:	f840 3b04 	str.w	r3, [r0], #4
  40b260:	f851 3b04 	ldr.w	r3, [r1], #4
  40b264:	f840 3b04 	str.w	r3, [r0], #4
  40b268:	f851 3b04 	ldr.w	r3, [r1], #4
  40b26c:	f840 3b04 	str.w	r3, [r0], #4
  40b270:	f851 3b04 	ldr.w	r3, [r1], #4
  40b274:	f840 3b04 	str.w	r3, [r0], #4
  40b278:	f851 3b04 	ldr.w	r3, [r1], #4
  40b27c:	f840 3b04 	str.w	r3, [r0], #4
  40b280:	f851 3b04 	ldr.w	r3, [r1], #4
  40b284:	f840 3b04 	str.w	r3, [r0], #4
  40b288:	f851 3b04 	ldr.w	r3, [r1], #4
  40b28c:	f840 3b04 	str.w	r3, [r0], #4
  40b290:	3a40      	subs	r2, #64	; 0x40
  40b292:	d2bd      	bcs.n	40b210 <memcpy+0x10>
  40b294:	3230      	adds	r2, #48	; 0x30
  40b296:	d311      	bcc.n	40b2bc <memcpy+0xbc>
  40b298:	f851 3b04 	ldr.w	r3, [r1], #4
  40b29c:	f840 3b04 	str.w	r3, [r0], #4
  40b2a0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b2a4:	f840 3b04 	str.w	r3, [r0], #4
  40b2a8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b2ac:	f840 3b04 	str.w	r3, [r0], #4
  40b2b0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b2b4:	f840 3b04 	str.w	r3, [r0], #4
  40b2b8:	3a10      	subs	r2, #16
  40b2ba:	d2ed      	bcs.n	40b298 <memcpy+0x98>
  40b2bc:	320c      	adds	r2, #12
  40b2be:	d305      	bcc.n	40b2cc <memcpy+0xcc>
  40b2c0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b2c4:	f840 3b04 	str.w	r3, [r0], #4
  40b2c8:	3a04      	subs	r2, #4
  40b2ca:	d2f9      	bcs.n	40b2c0 <memcpy+0xc0>
  40b2cc:	3204      	adds	r2, #4
  40b2ce:	d008      	beq.n	40b2e2 <memcpy+0xe2>
  40b2d0:	07d2      	lsls	r2, r2, #31
  40b2d2:	bf1c      	itt	ne
  40b2d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40b2d8:	f800 3b01 	strbne.w	r3, [r0], #1
  40b2dc:	d301      	bcc.n	40b2e2 <memcpy+0xe2>
  40b2de:	880b      	ldrh	r3, [r1, #0]
  40b2e0:	8003      	strh	r3, [r0, #0]
  40b2e2:	4660      	mov	r0, ip
  40b2e4:	4770      	bx	lr
  40b2e6:	bf00      	nop
  40b2e8:	2a08      	cmp	r2, #8
  40b2ea:	d313      	bcc.n	40b314 <memcpy+0x114>
  40b2ec:	078b      	lsls	r3, r1, #30
  40b2ee:	d08d      	beq.n	40b20c <memcpy+0xc>
  40b2f0:	f010 0303 	ands.w	r3, r0, #3
  40b2f4:	d08a      	beq.n	40b20c <memcpy+0xc>
  40b2f6:	f1c3 0304 	rsb	r3, r3, #4
  40b2fa:	1ad2      	subs	r2, r2, r3
  40b2fc:	07db      	lsls	r3, r3, #31
  40b2fe:	bf1c      	itt	ne
  40b300:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40b304:	f800 3b01 	strbne.w	r3, [r0], #1
  40b308:	d380      	bcc.n	40b20c <memcpy+0xc>
  40b30a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40b30e:	f820 3b02 	strh.w	r3, [r0], #2
  40b312:	e77b      	b.n	40b20c <memcpy+0xc>
  40b314:	3a04      	subs	r2, #4
  40b316:	d3d9      	bcc.n	40b2cc <memcpy+0xcc>
  40b318:	3a01      	subs	r2, #1
  40b31a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40b31e:	f800 3b01 	strb.w	r3, [r0], #1
  40b322:	d2f9      	bcs.n	40b318 <memcpy+0x118>
  40b324:	780b      	ldrb	r3, [r1, #0]
  40b326:	7003      	strb	r3, [r0, #0]
  40b328:	784b      	ldrb	r3, [r1, #1]
  40b32a:	7043      	strb	r3, [r0, #1]
  40b32c:	788b      	ldrb	r3, [r1, #2]
  40b32e:	7083      	strb	r3, [r0, #2]
  40b330:	4660      	mov	r0, ip
  40b332:	4770      	bx	lr

0040b334 <memset>:
  40b334:	b470      	push	{r4, r5, r6}
  40b336:	0784      	lsls	r4, r0, #30
  40b338:	d046      	beq.n	40b3c8 <memset+0x94>
  40b33a:	1e54      	subs	r4, r2, #1
  40b33c:	2a00      	cmp	r2, #0
  40b33e:	d041      	beq.n	40b3c4 <memset+0x90>
  40b340:	b2cd      	uxtb	r5, r1
  40b342:	4603      	mov	r3, r0
  40b344:	e002      	b.n	40b34c <memset+0x18>
  40b346:	1e62      	subs	r2, r4, #1
  40b348:	b3e4      	cbz	r4, 40b3c4 <memset+0x90>
  40b34a:	4614      	mov	r4, r2
  40b34c:	f803 5b01 	strb.w	r5, [r3], #1
  40b350:	079a      	lsls	r2, r3, #30
  40b352:	d1f8      	bne.n	40b346 <memset+0x12>
  40b354:	2c03      	cmp	r4, #3
  40b356:	d92e      	bls.n	40b3b6 <memset+0x82>
  40b358:	b2cd      	uxtb	r5, r1
  40b35a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40b35e:	2c0f      	cmp	r4, #15
  40b360:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40b364:	d919      	bls.n	40b39a <memset+0x66>
  40b366:	f103 0210 	add.w	r2, r3, #16
  40b36a:	4626      	mov	r6, r4
  40b36c:	3e10      	subs	r6, #16
  40b36e:	2e0f      	cmp	r6, #15
  40b370:	f842 5c10 	str.w	r5, [r2, #-16]
  40b374:	f842 5c0c 	str.w	r5, [r2, #-12]
  40b378:	f842 5c08 	str.w	r5, [r2, #-8]
  40b37c:	f842 5c04 	str.w	r5, [r2, #-4]
  40b380:	f102 0210 	add.w	r2, r2, #16
  40b384:	d8f2      	bhi.n	40b36c <memset+0x38>
  40b386:	f1a4 0210 	sub.w	r2, r4, #16
  40b38a:	f022 020f 	bic.w	r2, r2, #15
  40b38e:	f004 040f 	and.w	r4, r4, #15
  40b392:	3210      	adds	r2, #16
  40b394:	2c03      	cmp	r4, #3
  40b396:	4413      	add	r3, r2
  40b398:	d90d      	bls.n	40b3b6 <memset+0x82>
  40b39a:	461e      	mov	r6, r3
  40b39c:	4622      	mov	r2, r4
  40b39e:	3a04      	subs	r2, #4
  40b3a0:	2a03      	cmp	r2, #3
  40b3a2:	f846 5b04 	str.w	r5, [r6], #4
  40b3a6:	d8fa      	bhi.n	40b39e <memset+0x6a>
  40b3a8:	1f22      	subs	r2, r4, #4
  40b3aa:	f022 0203 	bic.w	r2, r2, #3
  40b3ae:	3204      	adds	r2, #4
  40b3b0:	4413      	add	r3, r2
  40b3b2:	f004 0403 	and.w	r4, r4, #3
  40b3b6:	b12c      	cbz	r4, 40b3c4 <memset+0x90>
  40b3b8:	b2c9      	uxtb	r1, r1
  40b3ba:	441c      	add	r4, r3
  40b3bc:	f803 1b01 	strb.w	r1, [r3], #1
  40b3c0:	42a3      	cmp	r3, r4
  40b3c2:	d1fb      	bne.n	40b3bc <memset+0x88>
  40b3c4:	bc70      	pop	{r4, r5, r6}
  40b3c6:	4770      	bx	lr
  40b3c8:	4614      	mov	r4, r2
  40b3ca:	4603      	mov	r3, r0
  40b3cc:	e7c2      	b.n	40b354 <memset+0x20>
  40b3ce:	bf00      	nop

0040b3d0 <strncpy>:
  40b3d0:	ea40 0301 	orr.w	r3, r0, r1
  40b3d4:	079b      	lsls	r3, r3, #30
  40b3d6:	b470      	push	{r4, r5, r6}
  40b3d8:	d12b      	bne.n	40b432 <strncpy+0x62>
  40b3da:	2a03      	cmp	r2, #3
  40b3dc:	d929      	bls.n	40b432 <strncpy+0x62>
  40b3de:	460c      	mov	r4, r1
  40b3e0:	4603      	mov	r3, r0
  40b3e2:	4621      	mov	r1, r4
  40b3e4:	f854 6b04 	ldr.w	r6, [r4], #4
  40b3e8:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
  40b3ec:	ea25 0506 	bic.w	r5, r5, r6
  40b3f0:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
  40b3f4:	d106      	bne.n	40b404 <strncpy+0x34>
  40b3f6:	3a04      	subs	r2, #4
  40b3f8:	2a03      	cmp	r2, #3
  40b3fa:	f843 6b04 	str.w	r6, [r3], #4
  40b3fe:	4621      	mov	r1, r4
  40b400:	d8ef      	bhi.n	40b3e2 <strncpy+0x12>
  40b402:	b1a2      	cbz	r2, 40b42e <strncpy+0x5e>
  40b404:	780c      	ldrb	r4, [r1, #0]
  40b406:	701c      	strb	r4, [r3, #0]
  40b408:	3a01      	subs	r2, #1
  40b40a:	3301      	adds	r3, #1
  40b40c:	3101      	adds	r1, #1
  40b40e:	b13c      	cbz	r4, 40b420 <strncpy+0x50>
  40b410:	b16a      	cbz	r2, 40b42e <strncpy+0x5e>
  40b412:	f811 4b01 	ldrb.w	r4, [r1], #1
  40b416:	f803 4b01 	strb.w	r4, [r3], #1
  40b41a:	3a01      	subs	r2, #1
  40b41c:	2c00      	cmp	r4, #0
  40b41e:	d1f7      	bne.n	40b410 <strncpy+0x40>
  40b420:	b12a      	cbz	r2, 40b42e <strncpy+0x5e>
  40b422:	441a      	add	r2, r3
  40b424:	2100      	movs	r1, #0
  40b426:	f803 1b01 	strb.w	r1, [r3], #1
  40b42a:	429a      	cmp	r2, r3
  40b42c:	d1fb      	bne.n	40b426 <strncpy+0x56>
  40b42e:	bc70      	pop	{r4, r5, r6}
  40b430:	4770      	bx	lr
  40b432:	4603      	mov	r3, r0
  40b434:	e7e5      	b.n	40b402 <strncpy+0x32>
  40b436:	bf00      	nop

0040b438 <register_fini>:
  40b438:	4b02      	ldr	r3, [pc, #8]	; (40b444 <register_fini+0xc>)
  40b43a:	b113      	cbz	r3, 40b442 <register_fini+0xa>
  40b43c:	4802      	ldr	r0, [pc, #8]	; (40b448 <register_fini+0x10>)
  40b43e:	f000 b805 	b.w	40b44c <atexit>
  40b442:	4770      	bx	lr
  40b444:	00000000 	.word	0x00000000
  40b448:	0040b459 	.word	0x0040b459

0040b44c <atexit>:
  40b44c:	2300      	movs	r3, #0
  40b44e:	4601      	mov	r1, r0
  40b450:	461a      	mov	r2, r3
  40b452:	4618      	mov	r0, r3
  40b454:	f000 b814 	b.w	40b480 <__register_exitproc>

0040b458 <__libc_fini_array>:
  40b458:	b538      	push	{r3, r4, r5, lr}
  40b45a:	4d07      	ldr	r5, [pc, #28]	; (40b478 <__libc_fini_array+0x20>)
  40b45c:	4c07      	ldr	r4, [pc, #28]	; (40b47c <__libc_fini_array+0x24>)
  40b45e:	1b2c      	subs	r4, r5, r4
  40b460:	10a4      	asrs	r4, r4, #2
  40b462:	d005      	beq.n	40b470 <__libc_fini_array+0x18>
  40b464:	3c01      	subs	r4, #1
  40b466:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40b46a:	4798      	blx	r3
  40b46c:	2c00      	cmp	r4, #0
  40b46e:	d1f9      	bne.n	40b464 <__libc_fini_array+0xc>
  40b470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40b474:	f000 b9c6 	b.w	40b804 <_fini>
  40b478:	0040b814 	.word	0x0040b814
  40b47c:	0040b810 	.word	0x0040b810

0040b480 <__register_exitproc>:
  40b480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40b484:	4c25      	ldr	r4, [pc, #148]	; (40b51c <__register_exitproc+0x9c>)
  40b486:	6825      	ldr	r5, [r4, #0]
  40b488:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40b48c:	4606      	mov	r6, r0
  40b48e:	4688      	mov	r8, r1
  40b490:	4692      	mov	sl, r2
  40b492:	4699      	mov	r9, r3
  40b494:	b3c4      	cbz	r4, 40b508 <__register_exitproc+0x88>
  40b496:	6860      	ldr	r0, [r4, #4]
  40b498:	281f      	cmp	r0, #31
  40b49a:	dc17      	bgt.n	40b4cc <__register_exitproc+0x4c>
  40b49c:	1c43      	adds	r3, r0, #1
  40b49e:	b176      	cbz	r6, 40b4be <__register_exitproc+0x3e>
  40b4a0:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40b4a4:	2201      	movs	r2, #1
  40b4a6:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40b4aa:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40b4ae:	4082      	lsls	r2, r0
  40b4b0:	4311      	orrs	r1, r2
  40b4b2:	2e02      	cmp	r6, #2
  40b4b4:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40b4b8:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  40b4bc:	d01e      	beq.n	40b4fc <__register_exitproc+0x7c>
  40b4be:	3002      	adds	r0, #2
  40b4c0:	6063      	str	r3, [r4, #4]
  40b4c2:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40b4c6:	2000      	movs	r0, #0
  40b4c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b4cc:	4b14      	ldr	r3, [pc, #80]	; (40b520 <__register_exitproc+0xa0>)
  40b4ce:	b303      	cbz	r3, 40b512 <__register_exitproc+0x92>
  40b4d0:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40b4d4:	f3af 8000 	nop.w
  40b4d8:	4604      	mov	r4, r0
  40b4da:	b1d0      	cbz	r0, 40b512 <__register_exitproc+0x92>
  40b4dc:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40b4e0:	2700      	movs	r7, #0
  40b4e2:	e880 0088 	stmia.w	r0, {r3, r7}
  40b4e6:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40b4ea:	4638      	mov	r0, r7
  40b4ec:	2301      	movs	r3, #1
  40b4ee:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40b4f2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40b4f6:	2e00      	cmp	r6, #0
  40b4f8:	d0e1      	beq.n	40b4be <__register_exitproc+0x3e>
  40b4fa:	e7d1      	b.n	40b4a0 <__register_exitproc+0x20>
  40b4fc:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  40b500:	430a      	orrs	r2, r1
  40b502:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40b506:	e7da      	b.n	40b4be <__register_exitproc+0x3e>
  40b508:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40b50c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40b510:	e7c1      	b.n	40b496 <__register_exitproc+0x16>
  40b512:	f04f 30ff 	mov.w	r0, #4294967295
  40b516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b51a:	bf00      	nop
  40b51c:	0040b7ec 	.word	0x0040b7ec
  40b520:	00000000 	.word	0x00000000
  40b524:	00002580 	.word	0x00002580
  40b528:	000000c0 	.word	0x000000c0
  40b52c:	00000800 	.word	0x00000800
	...

0040b53c <all_twi_definitions>:
  40b53c:	40018000 40018100 00000013 00000013     ...@...@........
  40b54c:	4001c000 4001c100 00000014 00000014     ...@...@........

0040b55c <all_usart_definitions>:
  40b55c:	40024000 40024100 0000000e 0000000e     .@.@.A.@........
  40b56c:	40028000 40028100 0000000f 0000000f     ...@...@........
  40b57c:	454c4449 00000000                       IDLE....

0040b584 <ucExpectedStackBytes.6087>:
  40b584:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
  40b594:	a5a5a5a5 20726d54 00637653 00007650     ....Tmr Svc.Pv..
  40b5a4:	6d6d6f43 00000000 6e696c42 0000796b     Comm....Blinky..
  40b5b4:	736f6361 00000000 6e697361 00000000     acos....asin....
  40b5c4:	74727173 00000000                       sqrt....

0040b5cc <npio2_hw>:
  40b5cc:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
  40b5dc:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
  40b5ec:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
  40b5fc:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
  40b60c:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
  40b61c:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
  40b62c:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
  40b63c:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

0040b64c <two_over_pi>:
  40b64c:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
  40b65c:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
  40b66c:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
  40b67c:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
  40b68c:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
  40b69c:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
  40b6ac:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
  40b6bc:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
  40b6cc:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
  40b6dc:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
  40b6ec:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
  40b6fc:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
  40b70c:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
  40b71c:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
  40b72c:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
  40b73c:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
  40b74c:	0060e27b 00c08c6b                       {.`.k...

0040b754 <init_jk>:
  40b754:	00000002 00000003 00000004 00000006     ................
  40b764:	00000000                                ....

0040b768 <PIo2>:
  40b768:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
  40b778:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
  40b788:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
  40b798:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

0040b7a8 <atanlo>:
  40b7a8:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
  40b7b8:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

0040b7c8 <atanhi>:
  40b7c8:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
  40b7d8:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
  40b7e8:	00000043                                C...

0040b7ec <_global_impure_ptr>:
  40b7ec:	20000038                                8.. 

0040b7f0 <_init>:
  40b7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b7f2:	bf00      	nop
  40b7f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40b7f6:	bc08      	pop	{r3}
  40b7f8:	469e      	mov	lr, r3
  40b7fa:	4770      	bx	lr

0040b7fc <__init_array_start>:
  40b7fc:	0040b439 	.word	0x0040b439

0040b800 <__frame_dummy_init_array_entry>:
  40b800:	004000f1                                ..@.

0040b804 <_fini>:
  40b804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b806:	bf00      	nop
  40b808:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40b80a:	bc08      	pop	{r3}
  40b80c:	469e      	mov	lr, r3
  40b80e:	4770      	bx	lr

0040b810 <__fini_array_start>:
  40b810:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <lat>:
2000000c:	ba88 418b                                   ...A

20000010 <lon>:
20000010:	e153 429c                                   S..B

20000014 <timeZone>:
20000014:	0000 40b0                                   ...@

20000018 <dist>:
20000018:	0000 40a0                                   ...@

2000001c <width>:
2000001c:	0000 4000                                   ...@

20000020 <pvAngleRng>:
20000020:	0000 422c                                   ..,B

20000024 <SystemCoreClock>:
20000024:	0900 003d                                   ..=.

20000028 <uxCriticalNesting>:
20000028:	aaaa aaaa                                   ....

2000002c <xFreeBytesRemaining>:
2000002c:	2000 0000                                   . ..

20000030 <xNextTaskUnblockTime>:
20000030:	ffff ffff                                   ....

20000034 <slaveAddr>:
20000034:	0101                                             .

20000035 <__fdlib_version>:
20000035:	0001 0000                                        ...

20000038 <impure_data>:
20000038:	0000 0000 0324 2000 038c 2000 03f4 2000     ....$.. ... ... 
	...
2000006c:	b7e8 0040 0000 0000 0000 0000 0000 0000     ..@.............
	...
200000e0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000f0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000460 <_impure_ptr>:
20000460:	0038 2000                                   8.. 
